<Issues>
  <Issue>
    <IssueID>33776</IssueID>
    <RepoID>1</RepoID>
    <Title>Exception dialog in PasteTrackingService</Title>
    <Description>**Version Used**: `16.0.0 Preview 4.0 28625.133.d16.0`

**Steps to Reproduce**:

I can't reproduce it, but I had some code on my clipboard (I thought) and pasted. Nothing happened immediately, so I pasted again and got the below failure via the ActivityLog popup.

**Failure**:

```
System.ArgumentException: Item has already been added. Key in dictionary: &amp;apos;System.Object&amp;apos;  Key being added: &amp;apos;System.Object&amp;apos;
   at System.Collections.Hashtable.Insert(Object key, Object nvalue, Boolean add)
   at System.Collections.Hashtable.Add(Object key, Object value)
   at System.Collections.Specialized.HybridDictionary.Add(Object key, Object value)
   at Microsoft.VisualStudio.Utilities.PropertyCollection.AddProperty(Object key, Object property)
   at Microsoft.CodeAnalysis.PasteTracking.PasteTrackingService.RegisterPastedTextSpan(ITextBuffer textBuffer, TextSpan textSpan)
   at Microsoft.CodeAnalysis.PasteTracking.PasteTrackingPasteCommandHandler.ExecuteCommand(PasteCommandArgs args, Action nextCommandHandler, CommandExecutionContext executionContext)
   at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)
   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.&amp;lt;&amp;gt;c__DisplayClass13_1`1.&amp;lt;Execute&amp;gt;b__1()
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call, Predicate`1 exceptionFilter)
```</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33775</IssueID>
    <RepoID>1</RepoID>
    <Title>Follow-up on stack using in fluent invocation binding</Title>
    <Description>As part of PR https://github.com/dotnet/roslyn/pull/33648, I lowered our expectations for how long of a fluent call we can handle (commit https://github.com/dotnet/roslyn/pull/33648/commits/a5bc25a99a978b1b3e3b3489683f225413f7423d).
I didn't manage to figure out which part of the PR might cause this change (greater stack usage during binding).

</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33774</IssueID>
    <RepoID>1</RepoID>
    <Title>Editor completion: move references to EditorOperations from the new completion</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/31670</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33773</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow specific exception without crash in integration tests</Title>
    <Description>Work around Microsoft/nodejstools#2138.</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33772</IssueID>
    <RepoID>1</RepoID>
    <Title>Delayed failures in integration tests</Title>
    <Description>* Avoid throwing an exception in the `VisualStudioInstanceFactory` static constructor
* Take screenshot _after_ writing logs</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33771</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable analysis of lifted binary operator likely wrong for `&amp;` or `|`</Title>
    <Description>@333fred pointed out this issue in reviewing PR https://github.com/dotnet/roslyn/pull/33648. This is a follow-up issue. 

Relevant portion of the spec: https://github.com/dotnet/csharplang/blob/master/spec/expressions.md#boolean-logical-operators

```C#
        private TypeWithState InferResultNullability(BinaryOperatorKind operatorKind, MethodSymbol methodOpt, TypeSymbol resultType, TypeWithState leftType, TypeWithState rightType)
        {
...
            if (operatorKind.IsLifted())
            {
                resultState = leftType.State.JoinForFlowAnalysisBranches(rightType.State);
            }

            return new TypeWithState(resultType, resultState);
        }

```</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33770</IssueID>
    <RepoID>1</RepoID>
    <Title>Add an inline-description portion to regex-completion to make it easier to scan for the right choice</Title>
    <Description>Replacement for https://github.com/dotnet/roslyn/pull/27694

This PR adds an 'inlined description' explaining what the regex item is.  That way you don't have to go examine the full description one at a time.  Very handy for just scanning for the thing you want.  Looks like:

![image](https://user-images.githubusercontent.com/4564579/53545842-a4e37980-3adf-11e9-88fa-4960ec1fae33.png)

![image](https://user-images.githubusercontent.com/4564579/53545822-9d23d500-3adf-11e9-8ba1-f6d61c5814bc.png)

![image](https://user-images.githubusercontent.com/4564579/53545863-b2006880-3adf-11e9-91d2-25fcfe2b154b.png)


I would still prefer this be right-aligned.  However, maybe we don't need to gate on that?

What do you guys think?</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33769</IssueID>
    <RepoID>1</RepoID>
    <Title>Undo arcade work arounds</Title>
    <Description>Now that we have the version of arcade that supports
Microsoft.Net.Compilers.Toolset we can remove a few work arounds.</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33767</IssueID>
    <RepoID>1</RepoID>
    <Title>Diagnostic for nullable type in `as` expression incorrectly mentions "underlying type"</Title>
    <Description>There is no notion of "underlying type" in nullability.

```C#
 // (16,30): error CS8651: It is not legal to use nullable reference type 'string?' in an as expression; use the underlying type 'string' instead.
                //         p.LastName = null as string?;
                Diagnostic(ErrorCode.ERR_AsNullableType, "string?").WithArguments("string").WithLocation(16, 30),
```</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33766</IssueID>
    <RepoID>1</RepoID>
    <Title>Settings for using directives not exported to .editorconfig</Title>
    <Description>**Version Used**: VS2019 dogfood

**Steps to Reproduce**:

1. Open Tools -&gt; Options
2. Configure settings on Text Editor -&gt; C# -&gt; Advanced for how to style using directives
    * Place 'System' directives first when sorting usings
    * Separate using directive groups
3. Switch to Code Style options and export .editorconfig settings

**Expected Behavior**:
These options for using directives should be exported (dotnet_sort_system_directives_first and dotnet_separate_import_directive_groups respectively)

**Actual Behavior**:
They are not exported to the .editorconfig file</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33765</IssueID>
    <RepoID>1</RepoID>
    <Title>Assertion failure in `AbstractRemoveUnusedMembersDiagnosticAnalyzer`</Title>
    <Description>the failed assertion is `Debug.Assert(memberSymbol == memberSymbol.OriginalDefinition`, and the method symbol is from the argument of `nameof(AsyncLazy&lt;object&gt;.GetValue)`

here's the callstack
```
Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.RemoveUnusedMembers.AbstractRemoveUnusedMembersDiagnosticAnalyzer&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax&gt;.CompilationAnalyzer.IsCandidateSymbol(Microsoft.CodeAnalysis.ISymbol memberSymbol) Line 552
    at C:\github\roslyn\src\Features\Core\Portable\RemoveUnusedMembers\AbstractRemoveUnusedMembersDiagnosticAnalyzer.cs(552)
Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.RemoveUnusedMembers.AbstractRemoveUnusedMembersDiagnosticAnalyzer&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax&gt;.CompilationAnalyzer.OnSymbolUsage(Microsoft.CodeAnalysis.ISymbol memberSymbol, Microsoft.CodeAnalysis.ValueUsageInfo usageInfo) Line 212
    at C:\github\roslyn\src\Features\Core\Portable\RemoveUnusedMembers\AbstractRemoveUnusedMembersDiagnosticAnalyzer.cs(212)
Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.RemoveUnusedMembers.AbstractRemoveUnusedMembersDiagnosticAnalyzer&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax&gt;.CompilationAnalyzer.AnalyzeNameOfOperation(Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext operationContext) Line 322
    at C:\github\roslyn\src\Features\Core\Portable\RemoveUnusedMembers\AbstractRemoveUnusedMembersDiagnosticAnalyzer.cs(322)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationAction.AnonymousMethod__51_0((System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt; action, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext context) data) Line 751
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerExecutor.cs(751)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock&lt;System.ValueTuple&lt;System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;&gt;(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Action&lt;(System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext)&gt; analyze, (System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext) argument, Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo? info) Line 1384
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerExecutor.cs(1384)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows&lt;System.ValueTuple&lt;System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;&gt;(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Action&lt;(System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext)&gt; analyze, (System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext) argument, Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo? info) Line 1353
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerExecutor.cs(1353)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationAction(Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction operationAction, Microsoft.CodeAnalysis.IOperation operation, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel semanticModel, System.Action&lt;Microsoft.CodeAnalysis.Diagnostic&gt; addDiagnostic, System.Func&lt;Microsoft.CodeAnalysis.Diagnostic, bool&gt; isSupportedDiagnostic, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt) Line 749
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerExecutor.cs(749)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActions(Microsoft.CodeAnalysis.IOperation operation, System.Collections.Generic.IDictionary&lt;Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction&gt;&gt; operationActionsByKind, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel model, System.Action&lt;Microsoft.CodeAnalysis.Diagnostic&gt; addDiagnostic, System.Func&lt;Microsoft.CodeAnalysis.Diagnostic, bool&gt; isSupportedDiagnostic, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt) Line 1314
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerExecutor.cs(1314)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActions(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; operationsToAnalyze, System.Collections.Generic.IDictionary&lt;Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction&gt;&gt; operationActionsByKind, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel model, System.Action&lt;Microsoft.CodeAnalysis.Diagnostic&gt; addDiagnostic, System.Func&lt;Microsoft.CodeAnalysis.Diagnostic, bool&gt; isSupportedDiagnostic, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt) Line 1295
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerExecutor.cs(1295)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActionsCore(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; operationsToAnalyze, System.Collections.Generic.IDictionary&lt;Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction&gt;&gt; operationActionsByKind, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel model, Microsoft.CodeAnalysis.Text.TextSpan filterSpan, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt, bool isGeneratedCode) Line 1267
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerExecutor.cs(1267)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.TryExecuteOperationActions(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; operationsToAnalyze, System.Collections.Generic.IDictionary&lt;Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction&gt;&gt; operationActionsByKind, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.SemanticModel model, Microsoft.CodeAnalysis.Text.TextSpan filterSpan, Microsoft.CodeAnalysis.SyntaxReference declaration, int declarationIndex, Microsoft.CodeAnalysis.ISymbol declaredSymbol, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool isGeneratedCode) Line 1238
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerExecutor.cs(1238)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions.__executeOperationsActionsByKind|6(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt; operationsToAnalyze, Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.GroupedAnalyzerActions groupedActions) Line 1980
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerDriver.cs(1980)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions.__executeOperationsActions|5(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt; operationsToAnalyze) Line 1970
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerDriver.cs(1970)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions.__executeExecutableCodeActions|3() Line 1932
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerDriver.cs(1932)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.SyntaxReference decl, int declarationIndex, Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.GroupedAnalyzerActions additionalPerSymbolActions, bool shouldExecuteSyntaxNodeActions, bool shouldExecuteOperationActions, bool shouldExecuteCodeBlockActions, bool shouldExecuteOperationBlockActions, bool isInGeneratedCode, System.Threading.CancellationToken cancellationToken) Line 1851
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerDriver.cs(1851)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool isGeneratedCodeSymbol, Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions additionalPerSymbolActionsOpt, System.Threading.CancellationToken cancellationToken) Line 1739
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerDriver.cs(1739)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 1060
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerDriver.cs(1060)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 1001
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerDriver.cs(1001)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 935
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerDriver.cs(935)
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 922
    at C:\github\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerDriver.cs(922)
```</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33764</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle interface members in NullableWalker.AsMemberOfType</Title>
    <Description>Fixes #29967</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33763</IssueID>
    <RepoID>1</RepoID>
    <Title>Mark Roslyn.VisualStudio.DiagnosticsWindow as a build dependency…</Title>
    <Description>…of Microsoft.VisualStudio.IntegrationTest.Setup

Things already worked fine if you build the entire solution. This fixes incremental build targeting just the integration test project.

Fixes #33762</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33762</IssueID>
    <RepoID>1</RepoID>
    <Title>Failed to load Roslyn.VisualStudio.DiagnosticsWindow for integration testing</Title>
    <Description>```
SetSite failed for package [Roslyn Diagnostics Window]Source: 'Roslyn.VisualStudio.DiagnosticsWindow' Description: Method 'CreateOptionPage' in type 'Roslyn.VisualStudio.DiagnosticsWindow.OptionsPages.PerformanceLoggersPage' from assembly 'Roslyn.VisualStudio.DiagnosticsWindow, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.
System.TypeLoadException: Method 'CreateOptionPage' in type 'Roslyn.VisualStudio.DiagnosticsWindow.OptionsPages.PerformanceLoggersPage' from assembly 'Roslyn.VisualStudio.DiagnosticsWindow, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' does not have an implementation.
at Roslyn.VisualStudio.DiagnosticsWindow.VisualStudioDiagnosticsWindowPackage.&lt;InitializeAsync&gt;d__3.MoveNext()
at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
at Roslyn.VisualStudio.DiagnosticsWindow.VisualStudioDiagnosticsWindowPackage.InitializeAsync(CancellationToken cancellationToken, IProgress`1 progress)
at Microsoft.VisualStudio.Shell.AsyncPackage.&lt;&gt;c__DisplayClass19_0.&lt;&lt;Microsoft-VisualStudio-Shell-Interop-IAsyncLoadablePackageInitialize-Initialize&gt;b__1&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
at Microsoft.VisualStudio.Threading.JoinableTask.&lt;JoinAsync&gt;d__68.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
at Microsoft.VisualStudio.Services.VsTask.RethrowException(AggregateException e)
at Microsoft.VisualStudio.Services.VsTask.InternalGetResult(Boolean ignoreUIThreadCheck)
at Microsoft.VisualStudio.Services.VsTask.GetResult()
```</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33761</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19127.8

</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33760</IssueID>
    <RepoID>1</RepoID>
    <Title>Default parameters for IEnumerable is supported but doesn't work</Title>
    <Description>**Version Used**: 
VS 16.0.0 Preview 3
 c# 8.0 beta

**Steps to Reproduce**:

1.  Create the following snippet:
```csharp
public static IEnumerable&lt;char&gt; PassThrough(IEnumerable&lt;char&gt; characters = "a string")
{
    return characters;
}

public static void Main()
{
    var result = PassThrough();
}

``` 
2. Mouse over the ```PassThrough``` method call.
2.  Compile
3.  Run

**Expected Behavior**:
- It should set ```characters``` parameter value with the default parameter value.
_or_
- The compiler should not allow the default parameter conversion from string to ```IEnumerable```

**Actual Behavior**:
```characters``` parameter value is always null, both when mousing over on the editor or at run-time. Therefore the ```PassThrough``` function will always return null unless a value is specified.
</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33759</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33758</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33757</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33756</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8652 on the RC with C# 8.0</Title>
    <Description>**Version Used**: 

Visual Studio 2019 RC (Version 16.0.0 RC)
LangVersion: 8.0
dotnet version: 3.0.100-preview-010184

**Steps to Reproduce**:

use recursive patterns.

```cs

struct Point
{
    public int X, Y;
    public Point(int x, int y) =&gt; (X, Y) = (x, y);
}

class Program
{
    static bool M(Point p) =&gt; p is { X: 0 };
}
```

**Expected Behavior**:

No error.

**Actual Behavior**:

![image](https://user-images.githubusercontent.com/3760955/53549146-d22f3680-3b76-11e9-87a4-e12c110f4db8.png)

FYI, There is no error if I use VS 16.0.0 Preview 4.0.
I get the same error if I change LangVersion to `preview`.

In addition, I have also the following error on this code in the RC.

Error	NETSDK1045	The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.2 or lower, or use a version of the .NET SDK that supports .NET Core 3.0.	ConsoleAppNetCore30	C:\Program Files\dotnet\sdk\2.2.100\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets	137	
</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33755</IssueID>
    <RepoID>1</RepoID>
    <Title>Inferring lambda ref return type's top-level nullability</Title>
    <Description>It appears that the code in `NullableWalker` to infer the result type of a lambda is not capable of properly inferring the top-level annotation of the returned type when the lambda is ref-returning.  Specifically, the code evaluates the returned expression as an rvalue, thus throwing away the top-level annotations on the return expression.

``` c#
            BoundExpression expr = node.ExpressionOpt;
...
                var result = VisitRvalueWithState(expr);
...
                    _returnTypesOpt.Add((node, result.ToTypeSymbolWithAnnotations()));
```
</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33754</IssueID>
    <RepoID>1</RepoID>
    <Title>Duplicate diagnostic for default(T) as receiver</Title>
    <Description>In the following tests, any time we produce the warning `CS1720` we also produce the warning `CS8602`.  We should suppress the latter when we know for sure the former will be produced, as they are informing the user of exactly the same situation in the same code (twice).

``` c#
        [Fact]
        public void SuppressNullableWarning_TypeParameters_01()
        {
            var source =
@"class C
{
    static void F1&lt;T1&gt;(T1 t1)
    {
        default(T1).ToString(); // 1
        default(T1)!.ToString();
        t1.ToString(); // 2
        t1!.ToString();
    }
    static void F2&lt;T2&gt;(T2 t2) where T2 : class
    {
        default(T2).ToString(); // 3
        default(T2)!.ToString(); // 4
        t2.ToString();
        t2!.ToString();
    }
    static void F3&lt;T3&gt;(T3 t3) where T3 : struct
    {
        default(T3).ToString();
        default(T3)!.ToString();
        t3.ToString();
        t3!.ToString();
    }
}";
            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics(
                // (5,9): warning CS8653: A default expression introduces a null value when 'T1' is a non-nullable reference type.
                //         default(T1).ToString(); // 1
                Diagnostic(ErrorCode.WRN_DefaultExpressionMayIntroduceNullT, "default(T1)").WithArguments("T1").WithLocation(5, 9),
                // (5,9): warning CS8602: Possible dereference of a null reference.
                //         default(T1).ToString(); // 1
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "default(T1)").WithLocation(5, 9),
                // (7,9): warning CS8602: Possible dereference of a null reference.
                //         t1.ToString(); // 2
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "t1").WithLocation(7, 9),
                // (12,9): warning CS1720: Expression will always cause a System.NullReferenceException because the default value of 'T2' is null
                //         default(T2).ToString(); // 3
                Diagnostic(ErrorCode.WRN_DotOnDefault, "default(T2).ToString").WithArguments("T2").WithLocation(12, 9),
                // (12,9): warning CS8602: Possible dereference of a null reference.
                //         default(T2).ToString(); // 3
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "default(T2)").WithLocation(12, 9),
                // (13,9): warning CS1720: Expression will always cause a System.NullReferenceException because the default value of 'T2' is null
                //         default(T2)!.ToString(); // 4
                Diagnostic(ErrorCode.WRN_DotOnDefault, "default(T2)!.ToString").WithArguments("T2").WithLocation(13, 9)
                );
        }
```

Moreover, we should suppress CS1720 when the receiver has the `!` applied to it.
</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33753</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposal: Boolean Literal Aliasing</Title>
    <Description>## Rationale

*Disclaimer: I'm not sure if this is a good idea. All ideas are worth sharing.*

There is a thought school of developers who believe that booleans are evil. Once piece of code I previously worked with had some 10 boolean arguments, leading to code like this:

```c#
wizard.ShowDialog(host, ..., true, false, false, false, false, true, false, true, true);
```

A more relatable example for most is easy to find: `StreamWriter`.

```c#
new StreamWriter("C:\\tmp\\tmp.txt", true, Encoding.UTF8);
```

What does that `true` mean? Finding out might involve re-typing the opening parenthesis, goto definition or opening the documentation, depending on what your editor is capable of doing. There are also security implications. Don't Google-er-Bing this, off the top of your head, what does this mean?

```c#
SslStream ssl;
ssl.AuthenticateAsServer(certificate, true, false);
```

Opponents of booleans recommend either separate methods (`StreamWriter.CreateAppend` vs. `StreamWriter.CreateNew`) or enums (`new StreamWriter(AppendOptions.Append` or `new StreamWriter(AppendOptions.New)`).

An existing way to deal with this problem would be to:

```c#
new StreamWriter("C:\\tmp\\tmp.txt", append: true, encoding: Encoding.UTF8);
```

The problem with that approach is that "all arguments following a named argument must be named." It adds friction to clarifying code in this way.

We can't simply remove booleans from the framework. It would be nice to go over netcore and allow boolean call sites to document themselves.

## Solution

The following constructor prototype (the syntax could use work):

```c#
StreamWriter(string path, bool&lt;Append, Clear&gt; append, Encoding encoding)
```

Is compiled to the following actual constructor prototype:

```c#
StreamWriter(
  string path,
  [System.Runtime.CompilerServices.BooleanAlias("Append", "Clear")]
  bool append,
  Encoding encoding);
```

It can then be used in one of the following ways:

```c#
new StreamWriter("", bool.Append, null); // Equivalent/compiled to:
new StreamWriter("", true, null); // Is still valid in the face of boolean aliases

new StreamWriter("", bool.Clear, null); // Equivalent/compiled to:
new StreamWriter("", false, null); // Is still valid in the face of boolean aliases
```

Treating `bool` like an enum has two advantages:

* Existing code continues to work when, for example, a local variable or field shares the name with an alias.
* In scenarios where a third option is added, the alias can be promoted to an enum during refactoring with, at worst, find and replace. A Rewriter might be able to automate the whole thing for Omnisharp/VS.

## Other Concerns

Would the following be desirable?

```c#
public bool&lt;Found, NotFound&gt; TryGetValue(TKey key, out TValue value);
if (dictionary.TryGetValue(key, out string value) == bool.Found) { }
```

That smells of the `if(true == true)` redundancy, but it does somehow add value in this case. The existing compiler machinery for named tuple elements could be re-used.</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33752</IssueID>
    <RepoID>1</RepoID>
    <Title>"Possible null reference assignment" used for conversions that are not assignments.</Title>
    <Description>The diagnostic `warning CS8601: Possible null reference assignment` seems inappropriate for warnings that do not involve an assignment, but we use it, for example, for argument conversions and an explicit cast to the type of an unconstrained type parameter.  We should make more specific diagnostics.</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33751</IssueID>
    <RepoID>1</RepoID>
    <Title>Suppress in source option for suppressing errors and warnings from analyzers etc.. ALWAYS uses #pragma instead of attributes</Title>
    <Description>VSF_TYPE_MARKDOWNUsing pragmas for suppression inline in the source is just plain ugly and intrusive. This is especially egregious in cases where the reason for suppressing the analyzer is one of readability. Previous versions of the IDE used an attribute. Please at least provide an option/setting somewhere (ideally visible at the moment I choose to suppress) to allow me to choose the form used. 

Note: This is a clone of https://developercommunity.visualstudio.com/content/problem/4846/suppress-in-source-option-for-suppressing-errors-a.html, but I'm providing a repro.

Reproducible at least in VS2017 and VS 2019 Preview 3 and Preview 4.

Steps to replicate:
1. Create a new .NET Framework class library, C#
2. Add the Microsoft.CodeQuality.Analyzers NuGet package (using v2.6.3)
3. Add a public method like this:

  
```
  public void Foo(CancellationToken cancellationToken, int num)
  {
    this.GetHashCode();
  }
```


There will be a CA1068 warning reported in the error list. When right-clicking, you have the option to either suppress &amp;quot;in source&amp;quot; or in a &amp;quot;suppression file&amp;quot;. If you choose the former, it does this:

```
#pragma warning disable CA1068 // CancellationToken parameters must come last
  public void Foo(CancellationToken cancellationToken, int num)
#pragma warning restore CA1068 // CancellationToken parameters must come last
  {
    this.GetHashCode();
  }
```

This is way ugly. The problem is, that it's totally possible to suppress this warning with an attribute, as evidenced by the fact that it lets you suppress via suppression file. When choosing that option, you get something like:

```
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(&amp;quot;Design&amp;quot;, &amp;quot;CA1068:CancellationToken parameters must come last&amp;quot;, Justification = &amp;quot;&amp;lt;Pending&amp;gt;&amp;quot;, Scope = &amp;quot;member&amp;quot;, Target = &amp;quot;~M:SuppressWarningTest.Class1.Bar(System.Threading.CancellationToken,System.Int32)&amp;quot;)]
```

What I would expect, is that supressing in source would give me something the following:

```
  [SuppressMessage(&amp;quot;Design&amp;quot;, &amp;quot;CA1068:CancellationToken parameters must come last&amp;quot;, Justification = &amp;quot;Pending&amp;quot;)]
  public void Foo(CancellationToken cancellationToken, int num)
  {
    this.GetHashCode();
  }
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/471804/suppress-in-source-option-for-suppressing-errors-a-1.html
VSTS ticketId: 803342_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_

Manish Vasani [MSFT] solved on 2/27/2019, 00:31 PM (6 hours ago), 1 votes: &lt;p&gt;Dupe of &lt;a target='_blank' href="https://github.com/dotnet/roslyn-analyzers/issues/1902#issuecomment-440772228."&gt;https://github.com/dotnet/roslyn-analyzers/issues/1902#issuecomment-440772228.&lt;/a&gt; We should probably consider porting this issue to &lt;a target='_blank' href="https://github.com/dotnet/roslyn/issues,"&gt;https://github.com/dotnet/roslyn/issues,&lt;/a&gt; as the feature request belongs to that repo.&lt;/p&gt;&lt;p&gt;Regards,&lt;/p&gt;&lt;p&gt; Manish&lt;/p&gt;


robsiklos on 2/27/2019, 00:53 PM (5 hours ago): 
&lt;p&gt;Done: https://github.com/dotnet/roslyn/issues/33724&lt;/p&gt; 
</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33750</IssueID>
    <RepoID>1</RepoID>
    <Title>ValueTuple is not supported in FAR</Title>
    <Description>```csharp
public void Test()
        {
            ValueTuple&lt;string, int&gt; a = ("a", 1);
            ValueTuple&lt;string, int&gt; a1;

            if (a is ValueTuple&lt;string, int&gt; c1)
            {
                a1 = c1;
            }

            Tuple&lt;string, int&gt; t = new Tuple&lt;string, int&gt;("a", 1);
            Tuple&lt;string, int&gt; t1;

            if (t is Tuple&lt;string, int&gt; t2)
            {
                t1 = t2;
            }
        }
```

FAR on ValueTuple returns nothing, but FAR on Tuple returns right references.

looks like FAR is not updated to handle ValueTuple case.</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33749</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a hack to ensure documents are connected to open files</Title>
    <Description>In https://devdiv.visualstudio.com/DevDiv/_workitems/edit/728035, a file is opened in an invisible editor and contents are written to it. The file isn't saved, but it's added to the workspace; we won't have yet hooked up to the open file since that work was deferred. Since we're on the UI thread here, we can ensure those are all wired up since the analysis of this document may depend on that other file. We choose to do this here rather than in the project system code when it's added because we don't want to pay the penalty of checking the RDT for all files being opened on the UI thread if we really don't need it.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

The customer creates a VSTO project like an Excel workbook project. If you add another sheet to the project, you get an error message instead of it working.

### Bugs this fixes

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/728035.

### Workarounds, if any

None.

### Risk

Moderate.

### Performance impact

None.

### Is this a regression from a previous update?

Yes. This was broken in Dev16.0 Preview 1 and onward.

### Root cause analysis

When we refactored a large system to do some performance improvements, we had one specific pattern which an extension could do which would break, but we believed it was very rare. The VSTO templates that add new sheets to projects do this precise pattern, causing them to break. We since have thought of a better way to approach that problem, but that's a larger amount of engineering work and so we're taking this as a targeted fix.

It's possible other extensions or features also do this, but we haven't seen any reports of that so far.

### How was the bug found?

Internal ad-hoc testing.

&lt;/details&gt;</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33748</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler error when using ranges feature</Title>
    <Description>**Version Used**: 
VS 16.0.0 Preview 4

**Steps to Reproduce**:
Any code that uses ranges feature is failing to compile

    byte[] a = new byte[] { };
    byte[] b = a[0..1]; // error CS0656

**Expected Behavior**:
No compiler error
**Actual Behavior**:
Error CS0656 Missing compiler required member 'System.Range..ctor'

Same project targeting .NET Core 3.0 (Preview 2) had no compiler errors in VS 16.0.0 Preview 3
</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33747</IssueID>
    <RepoID>1</RepoID>
    <Title>Text on a InterpolatedVerbatimStringStartToken token</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/33713</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33746</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler error with new using pattern</Title>
    <Description>**Version Used**: 
VS 16.0.0 Preview 4.0

**Steps to Reproduce**:

    class Test
    {
        public void Dispose()
        {

        }
    }

    using (var t = new Test()) // Error CS1674
    {

    }

**Expected Behavior**:
No compiler error?

**Actual Behavior**:
Compiler error: Error CS1674 'Test': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.

Not sure what's intended behavior... If everything is working as intended, then error message is misleading...

According to https://github.com/dotnet/csharplang/issues/1623

&gt; This proposal is allow **any type** which structurally matches `IDisposable` (has a public void-returning non-generic instance method taking no arguments) to be used in a `using` statement.

this is a bug...
</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33745</IssueID>
    <RepoID>1</RepoID>
    <Title>16.0 Preview 4. Up and down key do not work for editor if the old completion is turned on</Title>
    <Description>Fixes: https://github.com/dotnet/roslyn/issues/33744
</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33744</IssueID>
    <RepoID>1</RepoID>
    <Title>16.0 Preview 4. Up and down key do not work for editor if the old completion is turned on</Title>
    <Description>1. Use VS 2019 Preview 4.
2. Turn off "Async completion" in preview features options
3. Restart VS if just turned off.
4. Open a C# solution
5. Try to navigate with Up and Down key on the source code

**Expected**
Cursor is moving up and down in the editor window

**Actual**
Cursor is not moving down. On moving up it goes to class and method dropdowns.

Regression by https://github.com/dotnet/roslyn/pull/33196</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33743</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement LDM decision on nullability of `??` operator</Title>
    <Description>The expression `e1 ?? e2` should result in the nullability from `e2`, with the inference that `e1` can be null in `e2` (and after the whole expression if reachable from `e2`).</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33742</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable C# 8.0 in the code base</Title>
    <Description>This change enables C# 8.0 use in the code base as well as moving the
recommended Visual Studio version to 2019 Preview 4.  The following
features are now allowed to be used:

- `switch` expressions
- recursive pattern matching
- `using` declarations
- `static` local functions
- local / parameter shadowing in local functions / lambdas
- `null` coalescing assignment
- `async` streams: keep this out of our public API surface for now as we
don't want to block unification with netcoreapp in the future.

Before getting into the features which are off limits I wanted to
outline how compiler toolsets work in this repository. There are three
toolsets we need to consider when adopting new features:

1. The compiler toolset which provides the IDE experience: Intellisense,
syntax highlighting, etc ...
1. The compiler toolset which is used when the solution is built. This
is explicitly different than the compiler toolset which ships with the
MSBuild driving the compilation.
1. The compiler toolset is built from source on every PR and used as the
toolset for the PR (overriding 2 above).

That being said the following features are offlimit for now:

- Index / Range: the API surface area, including the parts the compiler
depends on, underwent significant churn for .NET Core Preview 3. Until
we converge it means toolsets 1 and 2 can be a bit out of sync.
- `unmanaged` generic `struct`: this is not included in VS2019 Preview 4
and hence using it would make the IDE experience poor.
- Nullable Reference Types: this area is under active churn and we could
easily get into a situation where toolsets 2 and 3 disagreed on code
checked into the repository creating unmergeable PRs. As such we're
holding off on this in master for now. Until then please use the branch
[features/NullableDogfood](https://github.com/dotnet/roslyn/tree/features/NullableDogfood)
to dogfood NRT. This will be merged back into master closer to
Dev16.0GA.

Note: This change only affects the C# compiler toolset. There are no
changes to our MSBuild or .NET Core SDK toolsets. Those will be coming
soonish though.</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33741</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33740</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33739</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix incorrect assertion in ContainedLanguage</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/803026

This is an interim solution to unblock partner teams until we are ready to merge #33722.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33738</IssueID>
    <RepoID>1</RepoID>
    <Title>For argument nested nullability mistmatches, should be exactly one error given (not two)</Title>
    <Description>When a ref parameter is of type `C&lt;string?, string&gt;` but the argument is of type `C&lt;string, string?&gt;`, we give two separate diagnostics.  Instead we should give a single diagnostic that the nested nullability must match exactly.

When an in or normal parameter has a mismatch, the rules are slightly difference (we use the contravariant rules) and we could give a different message.

When an out parameter has a mismatch, the rules are slightly difference (we use the covariant rules) and we could give a different message.

Today, in the ref scenario we sometimes give two distinct diagnostics on the precise same syntax node.  We should avoid that because it is confusing.  As a temporary measure, I am suppressing the second diagnostic once one has been given (see https://github.com/dotnet/roslyn/pull/33648), but we should be more complete in a single diagnostic about what the problem is.
</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33737</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 false positive with null coalescing assignment</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 3.0
VisualStudio.16.Preview/16.0.0-pre.3.0+28608.199

**Steps to Reproduce**:

```
namespace ConsoleApp15
{
    class Program
    {
        static void Main(string[] args)
        {
            args ??= new string[] { "hi there" };
            System.Console.WriteLine(args[0]);
        }
    }
}
```

**Expected Behavior**:

No warning.

**Actual Behavior**:

```
Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0060	Remove unused parameter 'args', its initial value is never used	ConsoleApp15	E:\Scratch\ConsoleApp15\ConsoleApp15\Program.cs	5	Active
```

*Note: * Changing to use the old style `args = args ?? ...` removes IDE0060 warning, but shows up IDE0054 warning instead :)</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33736</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify and regularize some names (nullable ref types)</Title>
    <Description>I propose to simplify some names in the nullable reference types feature:

- Rename `TypeSymbolWithAnnotations` to `TypeWithAnnotations`
- Rename its type field from `TypeSymbol` to `Type`
- Fields of Symbols that are of type `TypeWithAnnotations` that are currently named `Type` would be renamed `TypeWithAnnotations`
- Other such relief as the court shall find in the interests of justice.
</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33735</IssueID>
    <RepoID>1</RepoID>
    <Title>Add regression test for nullable crash</Title>
    <Description>I verified that this test crashes the compiler in Preview3
but no longer repros.

Closes #33537</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33734</IssueID>
    <RepoID>1</RepoID>
    <Title>async completion: remove duplicate matching for highlighting</Title>
    <Description>Both completion implementations (old and new) perform duplicate matching for most scenario: (1) to match items and (2) to highlight spans. Let us merge those matching together.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33733</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle ChangeDocumentInfo in the VS workspace and update Rename File To Match Type</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/16253

In this PR we are adding minimal support to the VisualStudioWorkspace for this already-exposed public functionality in the Workspace. This allows us to update Rename File To Match Type such that it keeps the document open and preserves breakpoints (etc.).

**Scenarios manually verified**:
- [x] Undo stack
- [x] Caret position
- [x] Breakpoints (this required doing a save before the rename - I'm not positive why)
- [x] Diff markers (but the yellows turn green because of the save mentioned under "Breakpoints")
- [x] All scenarios in linked files (etc.)
    - [x] Linked Files -- This breaks linked files the same way that renaming from Solution Explorer would break linked files, and the same way that this refactoring used to break linked files. I'd like to consider this out of scope for the immediate fix (and we should get Project System help here).
    - [x] Shared Projects -- Before this change, doing this refactoring would crash. Now, it no-ops.
    - [x] Multitargeting -- N/A, CPS is not supported by this refactoring at all.

**To Do**:
- [x] The documentId is lost when VS takes over and does the file rename. If you have multiple solution transforms in a row that expect a stable documentId, they will break. It is not clear if this is a feature or bug.
    - Going to leave this as stated here. Open to discussion during code review if desired, but we already don't have firm guarantees on this sort of thing (linked file diff merging, etc.)
- [x] Failure (Gold Bar) if you try to rename the file to an existing file name in that directory.
    - [ ] Should we not offer the refactoring or warn in advance if we think a file already exists with that name? 
- [x] Integration tests
- [ ] Understand and address Sam's situation in https://github.com/dotnet/roslyn/issues/6261
    - [ ] Automatic handling of linked files (Project System)
    - [ ] Automatic handling of Shared Projects -- TODO?</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33732</IssueID>
    <RepoID>1</RepoID>
    <Title>import the base type to work around breaking change</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/32963</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33731</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33730</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33729</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33728</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33727</IssueID>
    <RepoID>1</RepoID>
    <Title>Should not get private access fix for implemented methods</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.0.0 Preview 1.0 [28329.73.d16.0]
VisualStudio.16.IntPreview/16.0.0-pre.1.0+28329.73.d16.0
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

```vb
   Private Sub B() Implements IA1.B
        Throw New NotImplementedException()
    End Sub
```
1.  The code above says that the method is not used, because it is private. This is a normal way to handle implementations that should only be available via the interface. 

**Expected Behavior**:

No error for interface implementation. 

**Actual Behavior**:

Error that the private method is not used, and a fix is offered. 
</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33726</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider combining GenerateParameterName methods in SyntaxTreeExtensions.cs and .vb</Title>
    <Description>_Originally posted by @heejaechang in https://github.com/dotnet/roslyn/pull/33185_</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33725</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove suggestion to consider using Marshal.SizeOf.</Title>
    <Description>Marshal.SizeOf is not a direct replacement for `sizeof`.

Fix #26513</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33724</IssueID>
    <RepoID>1</RepoID>
    <Title>Suppress in source as an attribute should be one option</Title>
    <Description>Porting from https://github.com/dotnet/roslyn-analyzers/issues/1902, as suggested in https://developercommunity.visualstudio.com/content/problem/471804/suppress-in-source-option-for-suppressing-errors-a-1.html

#### Analyzer package

[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)
#### Package Version

v2.6.3
#### Diagnostic ID

All code analysis rules.
#### Repro steps

    1. Create a project which violates some CA rule.

    2. Compile.

    3. Use quick action "Suppress &gt; In Source..."

    4. Notice that it uses `#pragma disable … #pragma enable` pair.

#### Expected behavior

I would expect that "suppress in source..." would insert `[SuppressMessage]` attribute, same as "suppress in suppression file" does. `[SuppressMessage]` attribute can be placed on members, too, like this:

[SuppressMessage("Globalization", "CA1304:Specify CultureInfo", Justification = "")]

At least, it should be an option:

    * Suppress &gt; In source as a #pragma directive...

    * Suppress &gt; In source as an attribute...

    * Suppress &gt; In suppression file...</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33723</IssueID>
    <RepoID>1</RepoID>
    <Title>ISymbolicNavigationService to enable C# -&gt; F# GoToDefinition</Title>
    <Description>Defines a new ISymbolicNavigationService interface and uses it in GoToDefinition to enable third parties to navigate if they recognize an ISymbol as their own.

See discussion here: https://github.com/dotnet/roslyn/issues/8105</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33722</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove dead code related to IFormattingRule</Title>
    <Description>
    </Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33721</IssueID>
    <RepoID>1</RepoID>
    <Title>`default` &lt;LangVersion&gt; in MSBuild should target `preview` when the target framework is netcoreapp3.0</Title>
    <Description>This is only until netcoreapp3.0 RTMs, when we switch default back to `latest`</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33720</IssueID>
    <RepoID>1</RepoID>
    <Title>Make 'default' LangVer equivalent to unspecified</Title>
    <Description>Now that the LangVer is based on TFM when unspecified, we have one remaining issue: `default` maps to C# 7.3 even if you're targeting .NET Core 3.0

`default` should instead by equivalent to having an unspecified LangVer.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33719</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid checking nullability of return expressions from void methods</Title>
    <Description>Fixes #33481</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33718</IssueID>
    <RepoID>1</RepoID>
    <Title>In parameters could be in type parameters?</Title>
    <Description>**Version Used**: 

[master (28 October 2018)](https://sharplab.io/)

**Steps to Reproduce**:

```
interface DoesNotCompile&lt;in T&gt;
{
    void Do(in T value);
}
```
`error CS1961: Invalid variance: The type parameter 'T' must be invariantly valid on 'DoesNotCompiles&lt;T&gt;.Do(in T)'. 'T' is contravariant.`

**Expected Behavior**:
- if it is not sound or valid to pass by `in` mean than may be improve error message to avoid such question (or close issue, it will be still searchable)
- if it sound, just was not implemented, than allow to contravariance for `in` parameters

**Actual Behavior**:
- error with not clear text

**Notes**
Failed to do reasonable discussion on [SO](https://stackoverflow.com/questions/54907452/contrvariant-in-type-parameter-to-be-in-parameter)

#17140 I have found is about `ref`, not `in`
</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33717</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33716</IssueID>
    <RepoID>1</RepoID>
    <Title>Broken link language feature doc</Title>
    <Description>Doc page: https://github.com/dotnet/roslyn/blob/master/docs/Language%20Feature%20Status.md
Broken links:

- [Feature] Ranges: https://github.com/dotnet/roslyn/blob/features/range/docs/features/range.md
- [Branch] range: https://github.com/dotnet/roslyn/tree/features/range</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33715</IssueID>
    <RepoID>1</RepoID>
    <Title>.editorconfig settings being ignored in AspNetCore repo.</Title>
    <Description>**Development environment**:
Visual Studio 2019 Preview 3.0
Resharper 2018.3.3

**Steps to Reproduce**:
Clone the AspNetCore repo `https://github.com/aspnet/AspNetCore.git`
Open the `.\src\Components\Components.sln` in Visual Studio 2019 Preview 3
Right-click on the solution node in the `Solution Explorer` and `Add &gt; Existing Item...`
Add the following file `..\..\.editorconfig` - this is the root `.editorconfig` in the main AspNetCore repo.
Open the `ElementRef.cs` class from the `Components.csproj` project
Format the opened class using `Format Document Ctrl+K, Ctrl+D`

**Expected Behavior**:
`usings` are sorted with system directives first and therefore change from:
```
using Microsoft.JSInterop.Internal;
using System;
using System.Collections.Generic;
using System.Threading;
```

to:
```
using System;
using System.Collections.Generic;
using System.Threading;
using Microsoft.JSInterop.Internal;
```
**Actual Behavior**:
Nothing changes

The `.editorconfig` rule `dotnet_sort_system_directives_first = true:warning` is not being enforced for some reason.

As I have ReSharper installed I have used the `Resharper &gt; Windows &gt; File Formatting Info` menu to show me details of what rules are being applied from the `.editorconfig` file; it shows that:
`[*]`
`indent_style = space`
~~`charset = utf-8`~~
~~`trim_trailing_whitespace = true`~~
`insert_final_newline = true`

`[*.cs]`
`indent_size = 4`
~~`dotnet_sort_system_directives_first = true:warning`~~

strike-through rules are not being applied.

Is this a bug or am I not understanding how the `.editorconfig` file should work?

FYI:
![image](https://user-images.githubusercontent.com/47532258/53488948-aaad7080-3a87-11e9-8aae-1f000e3cbc4a.png)</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33714</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33713</IssueID>
    <RepoID>1</RepoID>
    <Title>SyntaxFactory.Token(SyntaxKind.InterpolatedVerbatimStringStartToken) C# don't fill the token text</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Preview 3
**Steps to Reproduce**:

1. SyntaxFactory.Token(SyntaxKind.InterpolatedVerbatimStringStartToken)

**Expected Behavior**:
Token text and value should contains text $@"
**Actual Behavior**:
Token text and value is empty

SyntaxFactory.Token(SyntaxKind.InterpolatedStringStartToken) fill text and value correctly.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33712</IssueID>
    <RepoID>1</RepoID>
    <Title>Create Workspace APIs for .editorconfig files, and wire everything up</Title>
    <Description>**Reviewing commit-at-a-time may be advised for this PR.**

This introduces a new set of APIs to the workspace to add and remove .editorconfig files which we're calling "analyzer config" documents. We're going with that name to match the compiler API's name, which is somewhat hedging so if/when we ever have a sceond kind of file like an .editorconfig we're able to keep things a bit simpler.

This PR takes the approach of introducing a whole new document type in parallel to regular documents and additional documents. We discussed simply overloading these as additional documents, where the workspace would treat certain additional documents as "extra special", but we ultimately decided on this approach for a few reasons:

1. It would have saved some complexity for the project system/language service interactions in that we wouldn't have had to introduce new methods, but the savings there were minimal compared to the overall work. The project system still needs to treat .editorconfig files as extra special on their end due to the discovery semantics, and we still need to do plenty of magic with them on our end. It would have meant we didn't have to duplicate some boilerplate in our codebase but the boilerplate isn't complicated either.

2. It would have made the additional file codepaths more complicated: if additional files were doing double duty, it means any codepath in the workspace dealing with them potentially needs to be updated to know which type of additional file it is. If it's a regular additional file it means we need to rerun just analyzers (but Compilations are unchanged!) wheras .editorconfig changes do impact syntax trees and Compilations. We might save *volume* of code, but we then increase *complexity* of code and the tradeoff didn't seem good here.

3. It means we can add additional APIs that are specific to .editorconfig files. We have TextDocument today which is our basic "give me text", but we enhance it with full Documents because there you can also get source trees. Similarly, well be able to make AnalyzerConfigDocument have methods to get the parsed form, but we could also add With* methods which could go back from the data form back to text which should be helpful for code fixes where we want to let users update existing .editorconfig files. Or we can introduce APIs like GetDiagnostics() on the analyzer config document which could look for syntax errors, etc.

Otherwise, this is fairly mechanical except for the parts aroud updating Compilations. The model the compiler took with controlling compiler warnings is additional diagnostic options are placed on the SyntaxTrees themselves. This means that to produce a SyntaxTree we now need to parse the .editorconfig flies first, and a change to an .editorconfig causes us to rebuild syntax trees.

### Work to Complete During This Pull Request

- [x] Implement Solution.RemoveAnalyzerConfigDocument
- [x] Add VB support where I added a TODO -- the compiler is missing a method.
- [x] Fix the hack in LegacyEditorConfigDocumentOptionsProvider where I'm converting from one dictionary type to another.

### Work Out Of Scope for This Pull Request

- _Connecting to open documents._ We will want this to be wired up entirely live, but at the moment you will have to save the file for it to take effect. This is our current experience, so not a regression. Not good, but not a regression. [(Tracking Item)](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/750120)
- _MSBuildWorkspace wireup._ [(Tracking Item)](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/750096)
 - _Supporting changes via TryApplyChanges._ [(Tracking Item)](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/750098)
- _Integration test support for the new stuff._ This is currently blocked on our integration test machines CI machines not having new enough bits that include the MSBuild and project system work to support this. [(Tracking Item)](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/839836)
- _Efficiency improvements when .editorconfig files change_. Right now there's some TODOs in AnalyzerConfigDocumentState where we're not handling things as efficiently as we could. [(Tracking Item)](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/840054)
- _Full feature flag support_. [(Tracking Item)](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/849730)
- _OOP support_. [(Tracking Item)](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/849729)</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33711</IssueID>
    <RepoID>1</RepoID>
    <Title>Place ‘Microsoft’ directives second when sorting usings</Title>
    <Description>Internal customer request.

Some users consider Microsoft usings similar to System usings as they are `1st party` and considered part of the platform. They'd expect to have an option in **Tools &gt; Options &gt; Text Editor &gt; C# &gt; Advanced &gt; Using Directives** to 'Place ‘Microsoft’ directives second when sorting usings'. This means Microsoft usings would follow System and helpfully separate this from the user's other.

**Version Used**: 
VS 2019 preview 3

**Steps to Reproduce**:

1. Open **Tools &gt; Options &gt; Text Editor &gt; C# &gt; Advanced &gt; Using Directives**

**Expected Behavior**:
Be able to optionally group 'first party' directives at top. With checkbox:
`Place ‘Microsoft’ directives second when sorting usings`

![image](https://user-images.githubusercontent.com/8293542/53459072-535ac200-39ed-11e9-96af-d306bac94e8d.png)

**Actual Behavior**:
No option.
</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>09/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33710</IssueID>
    <RepoID>1</RepoID>
    <Title>async completion: check for !IsCommitCharacter is not covered by Roslyn unit tests</Title>
    <Description>See a fix in https://github.com/dotnet/roslyn/pull/33588. There is code in CommitManager:
```
 if (typeChar != '\t' &amp;&amp; typeChar != '\n' &amp;&amp; typeChar != '\0' &amp;&amp; !IsCommitCharacter(serviceRules, roslynItem, typeChar, filterText))
{
    // Returning None means we complete the current session with a void commit. 
   // The Editor then will try to trigger a new completion session for the character.
    return new AsyncCompletionData.CommitResult(isHandled: true, AsyncCompletionData.CommitBehavior.None);
}
```
which is not used in main scenarios in Roslyn.

1. Add more comments to the change
2. Check for scenarios using `CharacterSetModificationKind.Remove` in `CommitCharacterRules` and add unit tests.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33709</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable to run apps targeting netcoreapp2.1 against netcoreapp3.0</Title>
    <Description>
    </Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33708</IssueID>
    <RepoID>1</RepoID>
    <Title>Resetting a user-customized color to an "enhanced" color is difficult</Title>
    <Description>**Version Used**: 16 P4 28621.222.d16.0

**Steps to Reproduce**:

1. Apply "Enhanced Colors" from Tools | Options. Methods/Properties/etc. should be colored differently now. You can use this code to try it out (if you're in one of the light themes, then `M` should be brown and `if` should be purple):
```C#
class C
{
    void M()
    {
        if (true) { M(); }
    }
}
```
2. Go customize the Method color to Lime under Tools | Options | Environment | Fonts &amp; Colors | Display items | User Members - Methods.
3. Lime methods are hard to read, so try to go reset it to the brown color.

**Expected Behavior**: There should be a reasonable-ish way to do this.
**Actual Behavior**: It's difficult. As far as I know, you have to:

1. In Fonts &amp; Colors, reset all color entries that Roslyn considers "enhanced" to their default values (there's no way for users to know this sub-list). You can use the "Use Defaults" button there, but that resets _everything_.
2. Go to the Options page with the "Use enhanced colors" checkbox, **uncheck** the box, hit OK.
3. Go to the Options page with the "Use enhanced colors" checkbox, **check** the box, hit OK.

Things should now be restored.

**Proposal**: There are really three states -- all colors defaulted, all colors enhanced, or mixed/customized. When in a mixed/custom state, toggling the checkbox doesn't actually do anything AFAICT.

A button-based mechanism next to the checkbox (or something like this) that can _force_ reset the colors to their IDE-level defaults (ignoring Enhanced Colors) or to the recommended Enhanced Colors (even when they are in a mixed state, which is when the checkbox doesn't like doing anything).</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33707</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33706</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33704</IssueID>
    <RepoID>1</RepoID>
    <Title>Follow up on the addition of Preview langversion, handle custom diagnostics.</Title>
    <Description>Fixes #33684.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33703</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability for NVT with no constructor argument:</Title>
    <Description>- Explicitly check if an object creation is a nullable value type
- Set its state to nullable when no argument is passed in
- Update tests

Fixes #31502</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33702</IssueID>
    <RepoID>1</RepoID>
    <Title>Coalescing assignment shows incorrect unused variable</Title>
    <Description>When function has coalescing assignment, VS shows suggestion.
![image](https://user-images.githubusercontent.com/1528107/53448380-1e8a4300-39cc-11e9-8c75-7055cdb4939b.png)

![image](https://user-images.githubusercontent.com/1528107/53448438-3e216b80-39cc-11e9-8fec-5ff33134d4d7.png)

Once you apply the fix, it fades out the input parameter suggesting it is unused but it is actually used.

![image](https://user-images.githubusercontent.com/1528107/53448488-5db89400-39cc-11e9-9381-d5c17a7c8791.png)


**Version Used**: 
from `dotnet --info`
```
.NET Core SDK (reflecting any global.json):
 Version:   2.2.200
 Commit:    27f814f6ba

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.17763
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\2.2.200\

Host (useful for support):
  Version: 2.2.2
  Commit:  a4fd7b2c84

.NET Core SDKs installed:
  2.1.504 [C:\Program Files\dotnet\sdk]
  2.1.600-preview-009497 [C:\Program Files\dotnet\sdk]
  2.1.600 [C:\Program Files\dotnet\sdk]
  2.2.102 [C:\Program Files\dotnet\sdk]
  2.2.104 [C:\Program Files\dotnet\sdk]
  2.2.200-preview-009804 [C:\Program Files\dotnet\sdk]
  2.2.200 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.8 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.1 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.2 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.8 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.1 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.2 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.8 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.1 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.2 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
```
VS version: VS 16.0.0 Preview 4.0 28622.103.d16.0</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33701</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide support for highlighting usage of multiple identifiers.</Title>
    <Description>Highlight usages of multiple identifiers - currently, placing the cursor on an identifier highlights all usages of that identifier; user would like to highlight two or more different identifiers. Also the read and write to be highlighted with different colors.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33700</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpUpgradeProjectCodeFixProvider crashes in ASP.Net Core application</Title>
    <Description>Copied from VSO/797009.

**Version Used**: 
Affected Branch: 16.0 Preview 4 
Affected Build: 16.0 Preview 4 [28619.130.d16.0] 
Affected Product Language: English 

**Steps to Reproduce**:

1. Create a new ASP.Net Core Application project with template Web Application
2. Edit Startup.cs to contain a c# 8 feature (e.g. static local function)
3. Alt+Enter on the red squiggled static keyword to upgrade the project c# version.

**Expected Behavior**:
Project is upgrade to c# 8 and I can use static local functions.

**Actual Behavior**:
Yellow warning appears at the top that says "CSharpUpgradeProjectCodeFixProvider encountered an error and has been disabled"
With stack trace
```
System.AggregateException : One or more errors occurred. ---&gt; Changing document 'C:\Users\dabarbet\source\repos\WebApplication1\WebApplication1\Pages\Privacy.g.cs' is not supported.
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass17_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&gt; (Inner Exception #0) System.NotSupportedException : Changing document 'C:\Users\dabarbet\source\repos\WebApplication1\WebApplication1\Pages\Privacy.g.cs' is not supported.
   at Microsoft.CodeAnalysis.Workspace.CheckAllowedProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.CheckAllowedSolutionChanges(SolutionChanges solutionChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&lt;---
```

It seems like this might be expected but it isn't completely clear.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33699</IssueID>
    <RepoID>1</RepoID>
    <Title>Introduce using statement should offer a using declaration in C# 8.0 projects</Title>
    <Description>Copied from VSO/796019. Original by @davidwengier

**Version Used**: 
Version 16.0.0 Preview 3.0

**Steps to Reproduce**:
I've enabled C# 8 for my project but the Introduce Using fixer is suggesting to create using blocks. That is perfectly valid, so it could just be a matter of adding another fixer, or option for this one, to add the expression style.

Note that the suggested fix in my case would result in a compile error (see red squiggle), so as well as driving adoption of new language features, the expression version is potentially more likely to be correct.

![d52676e2-53a3-4268-8cd8-80c394c0aa94](https://user-images.githubusercontent.com/12900364/53443538-c863d280-39c0-11e9-8f31-f618741a576d.png)
</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33698</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8625 reported by Build but not IntelliSense</Title>
    <Description>Copied from VSO/795726. Original by @davidwengier 

**Version Used**: 
Affected Branch: Version 16.0.0 Preview 3.0
Affected Build: VisualStudio.16.Preview/16.0.0-pre.3.0+28608.199
Affected Product Language: English

**Steps to Reproduce**:
See attached recorded GIF and ETL trace.

I don't have a minimal repro, but this is from a Windows Forms app targetting .NET Core 3.0, with nullable enabled in the project file, and disabled with #nullable around the main form constructor, to avoid nullable warnings on the generated code.

**Actual Behavior**:
CS8625 is being reported in the Build context but not IntelliSense context, which means it shows up in the Error List after a build for a few seconds, then goes away once the IntelliSense build is finished and de-duping is done. Flipping to Build Only can get it back of course.


![cs8625recording](https://user-images.githubusercontent.com/12900364/53442989-7c645e00-39bf-11e9-82b9-243fe12ed66b.gif)

Trace:
\\mlangfs1\public\v-sccarl\795726\CS8625Trace.etl.zip</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>29/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33697</IssueID>
    <RepoID>1</RepoID>
    <Title>Correct parsing of a parenthesized constant pattern expression in switch expression arm</Title>
    <Description>Fixes #33675
</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33696</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable reference types: property access inside lambda</Title>
    <Description>**Version Used**: 
VS 2019 Preview 3

**Steps to Reproduce**:
Consider the next block of code:
```csharp
if (typeCache.DebuggerNonUserCodeAttribute != null)
{
    ImmutableArray&lt;AttributeData&gt; attributes = memberSymbol.GetAttributes();
    return attributes.Any(attr =&gt; typeCache.DebuggerNonUserCodeAttribute.Equals(attr.AttributeClass)); // CS8602
}
```

**Expected Behavior**:
No warning, because property is being checked for `null` before dereferencing it.

**Actual Behavior**:
CS8602: Possible dereference of a null reference
at `typeCache.DebuggerNonUserCodeAttribute` on the last line</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33695</IssueID>
    <RepoID>1</RepoID>
    <Title>Microsoft.Net.Compilers.Toolset completion</Title>
    <Description>Once [the PR](https://github.com/dotnet/roslyn/pull/33665) for creating Microsoft.Net.Compilers.Toolset is merged there are several follow up actions that need to be done to complete the change:

- [ ] Change the checked in toolset of Roslyn to use the package. Need to wait for an official build to complete though so we have a fully signed package.
- [ ] Change the checked in toolset of arcade to use the package.
- [ ] Reach out to [RoslynCodeDomProvider](https://github.com/aspnet/RoslynCodeDomProvider) to help move them to the new package.
- [ ] Ensure the CLI team has an issue tracking them moving to the new package.
- [ ] Delete Microsoft.Net.Compilers and Microsoft.NETCore.Compilers
</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33694</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable reference types: parameter nullability not inferred</Title>
    <Description>**Version Used**: 
VS 2019 Preview 3

**Steps to Reproduce**:
Consider the next code snippet:
```csharp
private void Move(DirectoryEntry sourceDirectory, DirectoryEntry destinationDirectory)
{
    if (sourceDirectory.Parent == destinationDirectory)
    {
        var name = sourceDirectory.Parent.Name; // CS8602
    }
}
```

**Expected Behavior**:
No warning, because parameter `destinationDirectory` is declared as not-nullable, so `sourceDirectory.Parent` cannot be null inside the if statement.

**Actual Behavior**:
CS8602: Possible dereference of a null reference
at `sourceDirectory.Parent` inside the `if` statement.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33693</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose "Surround With" snippets as a refactoring</Title>
    <Description>Currently Surround With snippets are not especially discoverable. An IDE refactoring could be added that adds a Surround With item to the light bulb, and expands the available snippets as items on that menu.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33692</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33691</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33690</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33689</IssueID>
    <RepoID>1</RepoID>
    <Title>No warnings or errors are shown inside Visual Studio for rules in .editorconfig</Title>
    <Description>**Version Used**: 

Visual Studio 2017 15.9.7

**Steps to Reproduce**:

1. Create a .net core console app (I'm using .net core 2.2)
2. Add an .editorconfig
3. Make some change that violate a rule that has :error or :warning

&lt;img width="187" alt="vs_solution" src="https://user-images.githubusercontent.com/19637414/53400220-b167b500-39ad-11e9-87c3-f5b8b231e6d9.png"&gt;
&lt;img width="452" alt="vs_editorconfig" src="https://user-images.githubusercontent.com/19637414/53400231-b4fb3c00-39ad-11e9-8f67-138903be400d.png"&gt;
&lt;img width="521" alt="vs_program" src="https://user-images.githubusercontent.com/19637414/53400237-b6c4ff80-39ad-11e9-820f-7b6bcb8951fa.png"&gt;

**Expected Behavior**:
An error or a warning is shown inside the text editor view

**Actual Behavior**:
No change in the text editor view

**Notes**
I've tried reloading/restarting but that does not help.
Visual Studio automatically fixes the violation if I format the document.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33688</IssueID>
    <RepoID>1</RepoID>
    <Title>Object Browser does not show base types for interfaces</Title>
    <Description>Priority 1 issue tracked by DC 

When you selected an interface in Object Browser, there is no way to see interfaces that it implements.  There is no &amp;quot;Base Types&amp;quot; node under the interface like there is for concrete types.  There is no logical reason for this.  This is a problem much more so now than in earlier times.  With the proliferation of dependency injection, code is increasingly using interfaces rather than concrete types.  With more and more open source NuGet packages being used, this problem becomes severe, because most open source packages have zero documentation.  For such packages, the only way to see what interfaces another interface inherits from is to click Go to Definition and look at the metadata.  But object browser would be a so much quicker solution.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/151976/object-browser-does-not-show-base-types-for-interf.html
VSTS ticketId: 525997_
_These are the original issue comments:_

null on 1/22/2019, 03:52 AM (34 days ago): &lt;p&gt;Strange: This is only a problem if "My Solution" is active. If you select a Framework version there are the nodes "Base Types" and "Derived Types".&lt;/p&gt;

_These are the original issue solutions:_

Роман Квасов solved on 3/6/2018, 11:29 AM (356 days ago), 2 votes: 
&lt;p&gt;Hey! Is anybody here? it is broken at least are year, it is time to fix it!&lt;/p&gt; 
</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33687</IssueID>
    <RepoID>1</RepoID>
    <Title>Use of two locks / mutex state for compiler server can be eliminated</Title>
    <Description>The review process for #31497 revealed that while there are currently two state bits being used (is the mutex alive/abandoned, is the mutex held) the compiler server likely only needs the held/not held state bit. Cleaning up the code would allow the use of that and eliminate the extra file lock that is used to represent the alive/abandoned state under Mono.

cc @agocke</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33686</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler server will leak a lock file when running under Mono</Title>
    <Description>The changes in PR #31497 update the compiler server support to run on Mono but add an issue where the server's lock file will be left on disk after the server terminates. The lock file is 0 bytes (and ideally will be in /tmp) so it's not a major issue, but it's worth cleaning up. The relevant code is in BuildServerConnection.cs.

cc @jaredpar </Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33685</IssueID>
    <RepoID>1</RepoID>
    <Title>SyntaxFactory.SwitchStatement without parentheses in VS 2019 Preview 3</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Preview 3
**Steps to Reproduce**:

1. Use SyntaxFactory.SwitchStatement(ExpressionSyntax) (C#)

**Expected Behavior**:
The switch statement should surround the expression with parentheses

**Actual Behavior**:
The expression inserts without parentheses

Inside the Visual Studio 2017 (15.9.7) the expression correctly inserts with parentheses but in VS 2019 Preview 3 not. If we manually add parentheses, then in VS 2017, double parentheses will be inserted.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>20/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33684</IssueID>
    <RepoID>1</RepoID>
    <Title>Incomplete handling of Preview language version in diagnostics</Title>
    <Description>Look for "8.0" in src\Compilers\CSharp\Test\Semantic\Semantics\NullableReferenceTypesTests.cs. There are a lot of references to C# 8.0 in error messages. For example:
```
// error CS8630: Invalid 'NullableContextOptions' value: 'Enable' for C# 7.3. Please use language version 8.0 or greater.
Diagnostic(ErrorCode.ERR_NullableOptionNotAvailable).WithArguments("NullableContextOptions", "Enable", "7.3", "8.0").WithLocation(1, 1)
```

Expected:
The message to suggest to use "use the 'preview' language version" suggestion instead. </Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33683</IssueID>
    <RepoID>1</RepoID>
    <Title>Quadratic copying of nullable states</Title>
    <Description>In the nullable walker, we copy the states from the elements of one variable to another on assignment.  However, in order to do so we scan all of the elements of the entire state to see if any of them are members of the right-hand-side.  Then, if we find one, we again scan the entire state to see if any of them are members of the that.  And so on.  This process is quadratic in the number of variables.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33682</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn recommends hard selection in async completion, breaking suggetion mode</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/787151</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33681</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve nullable analysis of unassigned variables</Title>
    <Description>I would like to improve the way we handle unassigned variables in the nullable walker.  All locals should be set to unassigned when their scope is entered (except for certain kinds that are initialized, such as `foreach` and `catch` variables).

This will allow us to simplify `private NullableFlowState GetDefaultState(ref LocalState state, int slot)` and will get rid of some cascaded diagnostics.
</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33680</IssueID>
    <RepoID>1</RepoID>
    <Title>Poor diagnostic when conversion from double to int? overflows</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/961</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33679</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement full spec changes for Index/Range</Title>
    <Description>Reflects the changes described in https://github.com/dotnet/csharplang/pull/2214.

Range now looks optimistically for some special members with optional
parameters, but will fall back to the Range constructor if they aren't
present.

This change also removes all of the specialized codegen that was going
on with arrays and strings in favor of expected helpers or real members.

Fixes #30620</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33678</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33677</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33676</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33675</IssueID>
    <RepoID>1</RepoID>
    <Title>Wrong parsing of parenthesized constant pattern expression in switch expression arm</Title>
    <Description>**Version Used**: 

master branch from feb 26

**Steps to Reproduce**:

Compile the following code:
```c#
class C {
  bool M(object o) {
    const int X = 42;
    return o switch { (X) =&gt; true, _ =&gt; false };
  }
}
```

**Expected Behavior**:

Compile fine, do constant pattern matching at runtime.

**Actual Behavior**:

&gt; CS0118: 'X' is a variable but is used like a type
&gt; CS1525: Invalid expression term '=&gt;'

cc @gafter </Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33674</IssueID>
    <RepoID>1</RepoID>
    <Title>Integration test cleanup</Title>
    <Description>Non-essential code polish items observed during other integration test work. Will be rebased after other changes merge forward.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33673</IssueID>
    <RepoID>1</RepoID>
    <Title>Trim known prefixes to get parameter name from argument</Title>
    <Description>💡 Would be good to trim the same set of prefixes implemented in #32549 (`_`, `m_`, `s_`, `t_`) 

_Originally posted by @sharwell in https://github.com/dotnet/roslyn/pull/33185_</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33672</IssueID>
    <RepoID>1</RepoID>
    <Title>Caret position after undo is incorrect</Title>
    <Description>#33663 revealed a bug in the caret placement following two undo operations in the following code:

https://github.com/dotnet/roslyn/blob/28ef94d8b150a1767e7a128ff6fd07f34678aa73/src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpAutomaticBraceCompletion.cs#L222-L228

In both cases, the caret should be placed *inside* the quotes.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33671</IssueID>
    <RepoID>1</RepoID>
    <Title>Faulty compiler error message CS0165</Title>
    <Description>A compiler error  message CS0165 appears even though the code is correct.



 private static void MicrosoftFehler()
 {
      MsFehler msf = new MsFehler();

      //  It works - no message appears
      if (msf != null &amp;amp;&amp;amp;  msf.Fkt(out int n) == true)
      {
        Console.WriteLine(n);
      }

      // Here a message appears, although the code is correct:
      // Error CS0165 Use of unassigned local variable  &amp;quot;m&amp;quot;
      //------------------------------------------------------------------------------
      if (msf?.Fkt(out int m) == true)
      {
---&amp;gt;        Console.WriteLine(m);                &amp;lt;----------------------------------------------------------------------------
      }


    }


    
    class MsFehler
    {
      public bool Fkt(out int i)
      {
        i = 100;

        return true;
      }
    }

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/47334/faulty-compiler-error-message-cs0165.html
VSTS ticketId: 421730_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33670</IssueID>
    <RepoID>1</RepoID>
    <Title>Integration tests should correctly wait for workspace operations</Title>
    <Description>Currently, waits for `FeatureAttribute.Workspace` only wait for operations tracked by Roslyn. These waits should first wait for asynchronous operations to be processed by the underlying project system(s), and then wait for remaining operations tracked by Roslyn.

&gt; This code is not correct, but cannot be made correct today. The project systems do (or will do soon in the case of csproj) design time builds asynchronously, and there is no strict guarantee that states that the design time build must be complete after the rename has been applied from the perspective of DTE. There might be code today that happens to force a synchronization but that's not in the contract. What is required *prior* to the WaitForAsyncOperation is a wait on the project system that it's pushed the work to the workspace, but the API to do didn't get completed in time for 16.0.

_Originally posted by @jasonmalinowski in https://github.com/dotnet/roslyn/pull/33662#discussion_r260043995_</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33669</IssueID>
    <RepoID>1</RepoID>
    <Title>Use threestate to track generated state in CSharpSyntaxTree</Title>
    <Description>Fixes #33207</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33668</IssueID>
    <RepoID>1</RepoID>
    <Title>Store nullable attribute constructor params in a field:</Title>
    <Description>- Add a derived nullable attribute symbol
- Add a constructor symbol that allows assignment to a field
- Generate the appropriate constructors for byte and byte[] versions of the attribute
- Add tests

Closes #30143</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33667</IssueID>
    <RepoID>1</RepoID>
    <Title>Writing code to call a function using identifiers that don’t exist yet.</Title>
    <Description>Source: Scenario 1 at https://developercommunity.visualstudio.com/content/problem/465732/vs-2019-preview-3-intellisense-auto-selecting-para.html

Writing code to call a function using identifiers that don’t exist yet.

```
class Program
{
    static void Main ( string[] args )
    {
        var mySvc = new MyService(10, otherSvc, $$);
    }        
}

class MyService
{
    public MyService (int id, OtherService otherService, string name)
    {
    }
}

class OtherService
{
}
```

In this scenario I’ve just put the comma in the call to new MyService in Main. I now enter a variable name name that doesn’t exist yet. As soon as you hit space or a dot (because this is an object) then IS autocompletes to the name: parameter name. This isn’t what I wanted so I have to stop my typing, go back and correct to the variable (I haven’t defined yet) and then continue typing. In VS 2017 it doesn’t autocomplete to the parameter name. It does recognize that the parameter name is the best choice, it just doesn’t auto complete it.

**Expected by user**
`        var mySvc = new MyService(10, otherSvc, name);`
**Actual**
`        var mySvc = new MyService(10, otherSvc, name:);`
The behavior is the same with the old completion and the new completion. It seems it is caused by https://github.com/dotnet/roslyn/pull/26764</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>24/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33666</IssueID>
    <RepoID>1</RepoID>
    <Title>async completion: eats existing code on commit</Title>
    <Description>Fixes #33626</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33665</IssueID>
    <RepoID>1</RepoID>
    <Title>Create single NuPkg for the entire compiler toolset</Title>
    <Description>This creates a NuPgk that contains both the desktop and coreclr compiler toolsets. Consumers can now use this single package instead of having to condition between the two versions. 

In the long term we will delete the desktop / coreclr specific packages For the time being though we will keep producing them to give teams a period to transition off of them. 

closes #33219</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33664</IssueID>
    <RepoID>1</RepoID>
    <Title>Conditional ref operator should require same nullability</Title>
    <Description>The conditional ref expression should give a warning if the nullability of its operands differ.  No warning is produced today.

``` c#
void M(bool c, ref string x, ref string? y)
{
    (c ? ref x : ref y) = null; // no warning, but might assign null to x
}
```
</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33663</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix failure to validate caret position</Title>
    <Description>The tests were updated to reflect the current behavior. Two of the assertions reveal product bugs, and #33672 has been filed to address them.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33662</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable tests expected to pass with recent stabilization work</Title>
    <Description>Closes #19816
Closes #20868
Closes #20979
Closes #20991
Closes #21925
Closes #33103

Mitigates the test gap created by #30599 by creating a second set of tests that passes.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33661</IssueID>
    <RepoID>1</RepoID>
    <Title>Namespace required when extension function has same name as return type</Title>
    <Description>**Version Used**: VS 15.9.4

I got across this behavior today which seemed surprising.

For the following code:
```
namespace Authentication
{
    public static class RestrictedClaimTypes
    {
        public const string AppIdAcr = "appidacr";
    }

    public enum AppAuthType
    {
        None = -1,
        PublicClient = 0,
        ClientIdAndSecret = 1,
        ClientCertificate = 2
    }

    public static AppAuthType AppAuthType(this ClaimsPrincipal user)
    {
        string appIdAcr = user.FindFirst(RestrictedClaimTypes.AppIdAcr)?.Value;
        if (!Enum.TryParse&lt;AppAuthType&gt;(appIdAcr, out var authType))
        {
            return AppAuthType.None;
        }
        return authType;
    }
}
```

This fails to build with the following error: 
error CS0119: 'ClaimsPrincipalExtensions.AppAuthType(ClaimsPrincipal)' is a method, which is not valid in the given context 

However, adding the namespace of the AppAuthType fixes it: 
`return AppAuthType.None;` -&gt; `return Authentication.AppAuthType.None;`

Basically, it looks like without the `Authentication.`, it is trying to match AppAuthType with the extension function. I find it a bit confusing to why it does that and was expecting it to work without the namespace. Is this behavior expected?</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33660</IssueID>
    <RepoID>1</RepoID>
    <Title>Quick action for Add to local/global resource strings</Title>
    <Description>Migrated from [developer community](https://developercommunity.visualstudio.com/content/idea/460166/add-add-to-localglobal-ressource-strings-if-quick.html).

**Steps to Reproduce**
1. Type (Ctrl+.) on a string.

**Expected Behavior**:
1. Context menu: "add to local resource strings" and "add to global resource strings" to speed up localization dramatically.

**Additionally:** If string contains variables like 
```csharp
"Konvertiere Tabelle " + tabelle + "..."
```
Reformat it to:
```csharp
string.Format(Resources.KonvertiereTabelle, tabelle);
```
and create resource string KonvertiereTabelle with value "Konvertiere Tabelle {0}..."

**Additionally 2:** Choose to change "this string" or "all strings like xyz in project" for both commands.

![image](https://user-images.githubusercontent.com/8293542/53359726-a0a13b80-38e8-11e9-9cf2-b4eab86cb3ca.png)

**Actual Behavior**:
No quick action for adding string to local resource available.
</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33659</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable settings synchronization for integration testing</Title>
    <Description>Resolves one source of local test discrepancies relative to CI builds.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33658</IssueID>
    <RepoID>1</RepoID>
    <Title>Documentation for Ranges returns a 404</Title>
    <Description>Pointing to the proposal in the csharplang repository instead.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33657</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33656</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33655</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33654</IssueID>
    <RepoID>1</RepoID>
    <Title>Added features/* and demos/* to the list of branches that trigger build on commit</Title>
    <Description>This will allow SharpLab (and any other tools) to keep up with Roslyn feature branches,
The idea was discussed and confirmed with @jaredpar at https://github.com/ashmind/SharpLab/issues/362#issuecomment-466814473.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33653</IssueID>
    <RepoID>1</RepoID>
    <Title>TempPE compiler fixes</Title>
    <Description>A couple of minor fixes to the TempPE compiler that will be used by CPS projects.

* Start with the current project compilation options, mainly due to the VB compiler requirements and the desire to have a single compiler that can do both languages
* Set the assembly of the output DLL properly, to allow for multiple TempPE outputs from the same project

This is part of https://github.com/dotnet/project-system/issues/4163</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33652</IssueID>
    <RepoID>1</RepoID>
    <Title>Failed assertion in SolutionState.CheckContainsDocument</Title>
    <Description>**Version Used**: #33646

https://dev.azure.com/dnceng/public/_build/results?buildId=105532

**Steps to Reproduce**:

Found in integration tests.

```
Event Time (UTC): 2/25/2019 1:26:22 AM
Event ID: 1025
Data: Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.Exception
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Exit(System.String)
   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Fail(System.String, System.String)
   at System.Diagnostics.TraceListener.Fail(System.String)
   at System.Diagnostics.TraceInternal.Fail(System.String)
   at System.Diagnostics.Debug.Assert(Boolean)
   at Microsoft.CodeAnalysis.SolutionState.CheckContainsDocument(Microsoft.CodeAnalysis.DocumentId)
   at Microsoft.CodeAnalysis.SolutionState.WithDocumentText(Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Text.SourceText, Microsoft.CodeAnalysis.PreservationMode)
   at Microsoft.CodeAnalysis.Solution.WithDocumentText(Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Text.SourceText, Microsoft.CodeAnalysis.PreservationMode)
   at Microsoft.CodeAnalysis.Text.TextExtensions.GetOpenDocumentInCurrentContextWithChanges(Microsoft.CodeAnalysis.Text.SourceText)
   at Microsoft.CodeAnalysis.Text.Extensions.GetOpenDocumentInCurrentContextWithChanges(Microsoft.VisualStudio.Text.ITextSnapshot)
   at Microsoft.VisualStudio.CodeSense.Roslyn.DynamicSyntaxTreeProvider+DynamicSyntaxTree+&lt;UpdateAsync&gt;d__7.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.VisualStudio.CodeSense.Roslyn.DynamicSyntaxTreeProvider+DynamicSyntaxTree+&lt;UpdateAsync&gt;d__7, Microsoft.VisualStudio.CodeSense.Roslyn, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](&lt;UpdateAsync&gt;d__7 ByRef)
   at Microsoft.VisualStudio.CodeSense.Roslyn.DynamicSyntaxTreeProvider+DynamicSyntaxTree.UpdateAsync(Microsoft.VisualStudio.Text.ITextSnapshot, System.Threading.CancellationToken)
   at Microsoft.VisualStudio.CodeSense.Roslyn.CodeElementCache+&lt;RebuildAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.VisualStudio.CodeSense.Roslyn.CodeElementCache+&lt;RebuildAsync&gt;d__9, Microsoft.VisualStudio.CodeSense.Roslyn, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](&lt;RebuildAsync&gt;d__9 ByRef)
   at Microsoft.VisualStudio.CodeSense.Roslyn.CodeElementCache.RebuildAsync(Microsoft.VisualStudio.Text.ITextSnapshot, Boolean, System.Threading.CancellationToken)
   at Microsoft.VisualStudio.CodeSense.Editor.Roslyn.CodeElementTagger+&lt;UpdateSnapshotAsync&gt;d__15.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.VisualStudio.CodeSense.Editor.Roslyn.CodeElementTagger+&lt;UpdateSnapshotAsync&gt;d__15, Microsoft.VisualStudio.CodeSense.Roslyn, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](&lt;UpdateSnapshotAsync&gt;d__15 ByRef)
   at Microsoft.VisualStudio.CodeSense.Editor.Roslyn.CodeElementTagger.UpdateSnapshotAsync(Microsoft.VisualStudio.Text.ITextSnapshot, Boolean, System.Threading.CancellationToken)
   at Microsoft.VisualStudio.CodeSense.Editor.Tagger`1+&lt;&gt;c__DisplayClass22_1+&lt;&lt;UpdateSnapshotAsync&gt;b__0&gt;d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.VisualStudio.CodeSense.Editor.Tagger`1+&lt;&gt;c__DisplayClass22_1+&lt;&lt;UpdateSnapshotAsync&gt;b__0&gt;d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.VisualStudio.CodeSense, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]](&lt;&lt;UpdateSnapshotAsync&gt;b__0&gt;d&lt;System.__Canon&gt; ByRef)
   at Microsoft.VisualStudio.CodeSense.Editor.Tagger`1+&lt;&gt;c__DisplayClass22_1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;UpdateSnapshotAsync&gt;b__0(System.Threading.Tasks.Task`1&lt;Int32&gt;)
   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33651</IssueID>
    <RepoID>1</RepoID>
    <Title>Add 'use var when explicit' as a new option for when 'var' is allowed.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/29657

1. Followup to https://github.com/dotnet/roslyn/pull/33647.  This will be easier to review if that goes in.
2. There's a large amount of diff here due to resource files switchin from tabs to spaces.  not sure what's up with that.

## Description

This PR stems from several pieces of feedback we've gotten over time about how "use var when type is apparent" is a bit too broad for some people's tastes.

Specifically, "when apparent" has a couple of cases that are a little too broad for people.  For example, 'when apparent' supports this case:

```c#
var v = x.ToString();
```

The feeling here was that a `ToXXX` method made it apparent-enough that the type on the left would be `XXX`.  However, this was unpleasant for some as it's a very tenuous connection, with `XXX` not actually appearing on the RHS as an actual type.

In a similar vein, "when apparent" was not strict about generics.  if you had, for example:

```c#
var arr = ImmutableArray.Create(1, 2, 3);
```

It would consider this an apparent enough match since the type on the left and the right are both `ImmutableArray` in terms of their name.  However, the type on the left is `ImmutableArray&lt;int&gt;` and the lack of `int` on the RHS made this unpalatable for people.

Finally, there were common method invocation patterns not detected.  For example:

```c#
var logger = component.GetService&lt;ILogger&gt;();
```

In this case, people felt that this was an apparent use of ILogger and should fall under that category.

in this PR we now add a new editorconfig option `csharp_style_var_when_type_is_explicit`.  The meaning is similar to `csharp_style_var_when_type_is_apparent` except that it's now a requirement that the actual type show up in an appropriate location in syntax on the RHS.  The allowed syntax locations are:

1. `= default(SomeType)`
2. `= new SomeType(...)`
3. `= new SomeType[...] { ... }`
4. `= ... as SomeType`
5. `= (SomeType)...`
6. `= Foo&lt;SomeType&gt;(...)` (Foo has to return `SomeType`).
7. `= SomeType.FactoryMethod(...)` (FactoryMethod has to return `SomeType`).

## Design questions

Note: there is an open design question around a few cases.

1. tuples.  i.e. if you have:

```c#
var v = (default(SomeType), default(SomeOtherType);
```

Is the type of 'v' considered 'explicit'?  I personally think so.  It's clearly `(SomeType, SomeOtherType)` from very obvious syntax.  However, i could see some debate here, so i bring this up in case we want to consider that non-explicit.

2. There are certain C# constructs that are completely clear about what type they are, even if the type is not stated.  for example `var v = x is Y`.  'bool' here has the type `bool`.  But `bool` was never stated explicit.  Do we care about this sort of case?  Probably not IMO. It's pretty reasonable that `explicit` means `stated as type` or `stated as type within a large type syntax` (like the tuple case).  

3. Sometimes a type can be semi-explicit in code in something like `ImmutableArray.Create&lt;int&gt;(...)`.  Here, both `ImmutableArray` and `&lt;int&gt;` are specified.  So one might see that as explicit-enough to indicate that it is `ImmutableArray&lt;int&gt;`.

## UI 

To help make the concept understandable, here's the UI:

![image](https://user-images.githubusercontent.com/4564579/53307441-76e70680-384d-11e9-9539-5545cf93cf4f.png)

![image](https://user-images.githubusercontent.com/4564579/53307443-7cdce780-384d-11e9-83a5-1fe62927008e.png)

## TODO

- [ ] Needs tests.  Especially around the interaction between apparent/explicit.  We need tests for all four permutations of that.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>06/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33650</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33649</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33648</IssueID>
    <RepoID>1</RepoID>
    <Title>Revise NullableWalker to use a two-state solution</Title>
    <Description>The NullableWalker is revised so that the inferred state of an expression is either `NotNull` or `MaybeNull` (represented by the new type `NullableFlowState`).  There is no longer such as thing as an oblivious rvalue.  There are four kinds of lvalues:
- oblivious lvalues read as NotNull but null can be written to them
- annotated lvalues read as MaybeNull and null can be written to them
- unannotated lvalues read as NotNull and null may not be written to them
- unconstrained type parameters read as MaybeNull but null may not be written to them

In order to preserve the safety in the face of such unconstrained type parameters, we warn immediately when a null value of such a type is introduced.  This is a safety warning.  The contexts in which such a warning are given are
- `default` and `default(T)`
- `null` conversion to `T` (when `T` is known to be ref type)
- `e?.M()` when the return type is `T`
- dynamic conversion or cast to `T` when the dynamic might be null
- explicit conversion to `T`
- `e as T` when there is not an implicit conversion from the type of `e` to `T`
- a call to a method like `FirstOrDefault()` that is annotated with `[MaybeNull] (not yet implemented)

We remove the hidden diagnostics previously computed by the NullableWalker.

We add debugger display support for a number of types used by the NullableWalker.  The display for `NullableWalker` summarizes the computed nullability of variables in a nice compact form.

We remove support for definite assignment in the NullableWalker.  Some scenarios involving the use of not-definitely-assigned variables may cause cascaded diagnostics.  We might remove them in the future by initializing all vaiables to the `NotNull` state when they enter scope.

We overhaul and simplify the inplementation of conversions, the null-conditional operator, and result inference for lifted operators.

We simplify the Meet and Join operations so that they form a lattice on both the NullableAnnotation and NullableFlowState.

Catch variables are now initialized to a non-null state on entry to the catch block.

In unreachable code, every expression produces a non-null rvalue.  An erroneous expression produces a non-null rvalue (to suppress cascaded diagnostics).</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33647</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename and cleanup some members in the 'use var' feature.</Title>
    <Description>Precursor to some additional work i'm doing here.

Reviewing a commit at a time would likely be useful.</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>04/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33646</IssueID>
    <RepoID>1</RepoID>
    <Title>Cherry-pick test fixes</Title>
    <Description>It has become clear that we will not be able to complete an integration test build for dev16.0-vs-deps without the fixes that were made to the master branch. This pull request cherry-picks a set of test-only changes to stabilize the dev16.0 and dev16.0-vs-deps branches.</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33645</IssueID>
    <RepoID>1</RepoID>
    <Title>Must reinfer lambdas in NullableWalker from computed states</Title>
    <Description>In `NullableWalker`, we reinfer a lambda's return type by binding it in the context of a reinferred method.  However, we do so using the original binder.  That results in the wrong computed return type for the lambda, as the original binder does not make use of the computed types and nullabilities from the nullable walker.

Here is a test that fails because of this:

``` c#
        [Fact]
        public void ReinferLambdaReturnType()
        {
            var source =
@"using System;
class C
{
    static T F&lt;T&gt;(Func&lt;T&gt; f) =&gt; f();
    static void G(object? x)
    {
        F(() =&gt; x)/*T:object?*/;
        if (x == null) return;
        F(() =&gt; x)/*T:object!*/;
    }
}";
            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics();
            comp.VerifyTypes();
        }
```

Here is the failure mode:

``` none
Message: void C.G(System.Object? x)

Expected:
object?,
object!
Actual:
object?,
object?
Differences:
    object?,
++&gt; object?,
--&gt; object!

Expected: True
Actual:   False
```
</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>24/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33644</IssueID>
    <RepoID>1</RepoID>
    <Title>DeclarePublicAPIFix code fix crashing</Title>
    <Description>**Version Used**:
dev16 preview. Doesn't reproduce in dev15.

**Steps to Reproduce**:

1. Add public API to Microsoft.CodeAnalysis.CSharp
2. Inspect the new diagnostic on the member not added to PublicAPI.Unshipped.txt
3. Run the DeclarePublicAPIFix

**Expected Behavior**:

Line added to PublicAPI.Unshipped.txt

**Actual Behavior**:

Code fix is disabled with the exception/stack trace below:
```
System.AggregateException : One or more errors occurred. ---&gt; Object reference not set to an instance of an object.
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass17_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&gt; (Inner Exception #0) System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyTextDocumentChange(DocumentId documentId,SourceText newText)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyAdditionalDocumentTextChanged(DocumentId documentId,SourceText newText)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.Apply(Workspace workspace,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&lt;Unknown Parameters&gt;)&lt;---
```
</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33643</IssueID>
    <RepoID>1</RepoID>
    <Title>give CSharpAsAndNullCheckCodeFixProvider more intelligence about removing statements</Title>
    <Description>This fixes https://github.com/dotnet/roslyn/issues/33345.

There is a `SyntaxNode` extension method called `WithPrependedNonIndentationTriviaFrom`, which takes trivia from one node and prepends them to a node that comes next. But because the node from which they are taken is in the process of being removed, any leading new lines preceding the next node are no longer needed. So the method `WithPrependedNonIndentationTriviaFrom` is changed to take those new lines into account and to do so by making better use of the `SyntaxTriviaListExtensions`.</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>28/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33642</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix integration test hangs</Title>
    <Description>These cases were found during reviews of recent integration test run failures.</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33641</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate EntityTypeConfiguration Chain call?</Title>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis" Version="2.10.0"

**Steps to Reproduce**:
How to generate chain method call ?
A have some Entity and I want generate EntityTypeConfiguration for ef core ?
Could  U fellows guide me how to do it ?

```
public class StudentEntityConfiguration: EntityTypeConfiguration&lt;Student&gt;
{
    public StudentEntityConfiguration()
    {
            this.ToTable("StudentInfo");
                
            this.HasKey&lt;int&gt;(s =&gt; s.StudentKey);
                
            this.Property(p =&gt; p.DateOfBirth)
                    .HasColumnName("DoB")
                    .HasColumnOrder(3)
                    .HasColumnType("datetime2");

            this.Property(p =&gt; p.StudentName)
                    .HasMaxLength(50);
                        
            this.Property(p =&gt; p.StudentName)
                    .IsConcurrencyToken();
                
            this.HasMany&lt;Course&gt;(s =&gt; s.Courses)
                .WithMany(c =&gt; c.Students)
                .Map(cs =&gt;
                        {
                            cs.MapLeftKey("StudentId");
                            cs.MapRightKey("CourseId");
                            cs.ToTable("StudentCourse");
                        });
    }
}
```

**Expected Behavior**:
**Actual Behavior**:</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33640</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>24/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33639</IssueID>
    <RepoID>1</RepoID>
    <Title>When we compute a nullable annotation in flow analysis, should we use the context?</Title>
    <Description>The current LDM position is that we use the annotation context to compute the annotations (oblivious versus non-nullable).  We don't currently do this.

For example, in the declaration of a local variable.  If a local variable is declared
``` c#
string s;
```
is it oblivious in a disabled state, but non-null in an enabled state?  For locals, I believe oblivious acts the same as nullable (i.e. the state you get on reading is based on tracking, but you're allowed to assign null).

What if the local's type is inferred?
``` c#
#nullable disable
var s = ""; // Is s oblivious?
```

Also, when doing type inference, would we infer oblivious in a context where the nullability annotations are disabled, but non-null where nullability annotations are enabled?

``` c#
#nonnull enable
T Copy&lt;T&gt;(T t) =&gt; t;
T M&lt;T&gt;(T t)
{
    // warning: possibly null dereference; the inferred type argument to Copy is unannotated
    Copy(t).ToString();

#nonnull disable
    // no warning; the inferred type argument to Copy is oblivious
    Copy(t).ToString();
}
```

If `t` above were declared as a nullable reference type (possibly containing null), would we get an annotated inferred type in both contexts?
</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33638</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect nullability inferred with nested generics (nullable walker)</Title>
    <Description>The following test should produce no diagnostics, but it produces diagnostics.

``` c#
        [Fact]
        public void TupleFromNestedGenerics()
        {
            var source =
@"public class G&lt;T&gt;
{
    public (T, U) M&lt;U&gt;(T t, U u) =&gt; (t, u);
}
public class C
{
    public (T, U) M&lt;T, U&gt;(T t, U u) =&gt; (t, u);
}
";
            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics(
                // (3,37): warning CS8619: Nullability of reference types in value of type '(T t, U u)' doesn't match target type '(T, U)'.
                //     public (T, U) M&lt;U&gt;(T t, U u) =&gt; (t, u);
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "(t, u)").WithArguments("(T t, U u)", "(T, U)").WithLocation(3, 37),
                // (7,40): warning CS8619: Nullability of reference types in value of type '(T t, U u)' doesn't match target type '(T, U)'.
                //     public (T, U) M&lt;T, U&gt;(T t, U u) =&gt; (t, u);
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "(t, u)").WithArguments("(T t, U u)", "(T, U)").WithLocation(7, 40));
        }
```
</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33637</IssueID>
    <RepoID>1</RepoID>
    <Title>Method groups not inferred based on receiver type (nullable walker)</Title>
    <Description>In `NullableWalker.VisitMethodGroup`, we recompute the type of the group's receiver and then drop it on the floor.  When the method group is an argument to a generic, we will need the recomputed method (or group of methods) for proper type inference.

Here is a test that demonstrates the issue:

``` c#
        [Fact]
        public void MethodGroupReinferredAfterReceiver()
        {
            var source =
@"public class C
{
    G&lt;T&gt; CreateG&lt;T&gt;(T t) =&gt; new G&lt;T&gt;();
    void Main(string? s1, string? s2)
    {
        Run(CreateG(s1).M, s2)/*T:(string?, string?)!*/;
        if (s1 == null) return;
        Run(CreateG(s1).M, s2)/*T:(string!, string?)!*/;
        if (s2 == null) return;
        Run(CreateG(s1).M, s2)/*T:(string!, string!)!*/;
    }
    (T, U) Run&lt;T, U&gt;(MyDelegate&lt;T, U&gt; del, U u) =&gt; del(u);
}
public class G&lt;T&gt;
{
    public T t = default(T)!;
    public (T, U) M&lt;U&gt;(U u) =&gt; (t, u)!;
}
public delegate (T, U) MyDelegate&lt;T, U&gt;(U u);
";
            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics();
            comp.VerifyTypes();
        }
```

The failure is

``` none
Message: void C.Main(System.String? s1, System.String? s2)

Expected:
(string?, string?)!,
(string!, string?)!,
(string!, string!)!
Actual:
(string, string?),
(string, string?),
(string, string!)
Differences:
++&gt; (string, string?),
++&gt; (string, string?),
++&gt; (string, string!),
--&gt; (string?, string?)!,
--&gt; (string!, string?)!,
--&gt; (string!, string!)!

Expected: True
Actual:   False
```
</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33636</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense: double quote character should not be commit character</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Preview 3

**Steps to Reproduce**:

Having any item selected in IntelliSense, press `"`

**Expected Behavior**:
IntelliSense item is not commited, `"` is typed

**Actual Behavior**:
IntelliSense item is commited, `"` is typed after item text.

![2019-02-24_11-58-24](https://user-images.githubusercontent.com/17177729/53297746-93724700-382b-11e9-99b4-171bd5d8e22f.gif)
</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33635</IssueID>
    <RepoID>1</RepoID>
    <Title>We drop method group return nullability in nullability reinference</Title>
    <Description>When we reinfer a method's type based on its arguments in the nullable walker, if one of those arguments is the method group of a method, we drop the nullability of its return during type inference.  We should use either the declared nullability of the inferred method from the group, or convert oblivious to non-null as a final step.  Either way, we should not replace the returned nullability with oblivious, as we currently do in `MethodTypeInference.MethodGroupReturnTypeInference`.

Related to this, we should only infer using the one method from the method group that was selected by initial binding. We can ignore other candidates.

I have marked an affected test and the relevant area of the compiler with this issue.
</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33634</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Code Style settings should expose dotnet_style_require_accessibility_modifiers editorconfig setting</Title>
    <Description>**Version Used**: VS2019 Preview 4 (dogfood)

**Steps to Reproduce**:

1. Open Tools -&gt; Options -&gt; C# -&gt; Code Style
2. Try to find an option to match the dotnet_style_require_accessibility_modifiers editorconfig property

**Expected Behavior**:
Option should exist, as this property exists for editorconfig (and is documented).

**Actual Behavior**:
No options exist.</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33633</IssueID>
    <RepoID>1</RepoID>
    <Title>VS Tools-&gt;Options settings for using statements should move into Code Style section</Title>
    <Description>**Version Used**: VS2019 Preview 4 (dogfood)

**Steps to Reproduce**:

1. Open Tools -&gt; Options, find C# Code Style settings
2. Look for the settings about Using statements (they are actually located on the C# Advanced page)
  * Place 'System' directives first when sorting usings
  * Separate using directive groups
3. Set them as desired,
4. Export .editorconfig settings from the Code Style page

**Expected Behavior**:
These settings should be included in the generated .editorconfig file, since there are .editorconfig settings for them.

**Actual Behavior**:
They are left out, because they are not located in the Code Style page.  They *are* code style features though.</Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>09/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33632</IssueID>
    <RepoID>1</RepoID>
    <Title>Store type and slot in VisitResult</Title>
    <Description>Change `VisitResult` to `{ Type, Slot }`, representing the inferred type of the visited expression and an optional slot for tracked variables.

If `VisitRvalue(expr)` is called (or `MakeRvalue()` is called after `Visit(expr)`), the top-level nullability of the result type is updated from the tracked state. </Description>
    <CreatedDate>24/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33631</IssueID>
    <RepoID>1</RepoID>
    <Title>Code wrapping refactorings should be lower pri than other refactorings</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/33605

After this change, lightbulb list looks like:

![image](https://user-images.githubusercontent.com/4564579/53292546-a6780f00-3778-11e9-9fd7-db7e1f7c5d1b.png)
</Description>
    <CreatedDate>23/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33630</IssueID>
    <RepoID>1</RepoID>
    <Title>Autocompletion missing arguments</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.3.0+28608.199

**Steps to Reproduce**:
```C#
static void Main(int x, int y)
{
    int m = | x * y;
    int s =  x + y;
}
```
Imagine you want to prepend the formula, e.g. make it `int m = y + x * y`. However, when you type `y` in front of `x * y`, i.e. `y| x * y`, it is not offered in autocomplete and random entry with `y` will be committed when pressing space.

All other cases work:
1. Type `x` in front of `x + y` , i.e. `x| x + y`. `x` is in autocomplete.
2. Type `y` instead, i.e. `y| x + y`. `y` is in autocomplete.
3. Type `x` in front of `x * y`, i.e. `x| x * y`. `x` is in autocomplete.
</Description>
    <CreatedDate>23/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33629</IssueID>
    <RepoID>1</RepoID>
    <Title>Is there any way to get (and apply) all code fixes</Title>
    <Description>How can I apply all code fixes that VS would normally suggest, but from a custom commandline tool.
I've seen
 https://github.com/dotnet/roslyn/issues/2020 
and 
https://github.com/dotnet/roslyn/issues/2709
but I'm not sure how, or if, they are related.

So basically I want to apply all the built-in code fixes like `IDE0049` ("Name can be simplified") to a `Microsoft.CodeAnalysis.Document`.
Is that possible? If so, here would I start?

I've tried to track down the implementations of those fixes, but they're all marked as internal.
But maybe there's some public static list or enumerable somewhere that contains all of them so outside users can still use and apply them?


</Description>
    <CreatedDate>23/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33628</IssueID>
    <RepoID>1</RepoID>
    <Title>Non-private readonly fields are PascalCase</Title>
    <Description>Fixes #33608</Description>
    <CreatedDate>23/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33627</IssueID>
    <RepoID>1</RepoID>
    <Title>Find All References is broken on mixed F# and C# solution</Title>
    <Description>VSF_TYPE_MARKDOWNWe are waiting for more then two years while the Visual Studio team will fixed this issue. But the issue is still in the VS 2019 Preview 3.
We always need to unload F# projects from the solution for the normal fork with Find All References feature.

I have attached a small sample project. The issue can be reproduced in VS 2017 (15.9.7) and in VS 2019 Preview 3.
Steps to reproduce:
1. Open the attached project
2. Open the Class1 file from the CSLibrary
3. Try to execute Find All References on the GetInt function

Actual result:
The Find All References operation is never be finished

Expected result:
Show all references for the GetInt function.

Please fix this issue before VS2019 will be released.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/464811/find-all-references-is-broken-on-mixed-f-and-c-sol.html
VSTS ticketId: 797556_
_These are the original issue comments:_

Visual Studio Feedback System on 2/21/2019, 00:40 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>23/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33626</IssueID>
    <RepoID>1</RepoID>
    <Title>async completion: eats existing code on commit</Title>
    <Description>**Version Used**: 
VS 2019 Preview 3
**Steps to Reproduce**:

1.  Create standard Console app
2. type `override` above `static void Main..` method
3. create space and press Ctrl+Space to trigger code completion
4. type `asdasdasdasdasdasd` or any random text
5. select one of code completion options and press Enter

**Expected Behavior**:
Nicely inserted new code
**Actual Behavior**:
&lt;img width="439" alt="image" src="https://user-images.githubusercontent.com/774791/53282110-7d815b00-3733-11e9-80ea-1002d7b7b96f.png"&gt;
</Description>
    <CreatedDate>23/02/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33625</IssueID>
    <RepoID>1</RepoID>
    <Title>Support static constructors in interfaces</Title>
    <Description>
    </Description>
    <CreatedDate>23/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33624</IssueID>
    <RepoID>1</RepoID>
    <Title>Offer to add parameter to constructor with no existing parameters</Title>
    <Description>Fixes #33602</Description>
    <CreatedDate>23/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33623</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't offer to add a parameter to constructors implementing ISerializable</Title>
    <Description>Don't offer to add a parameter to constructors implementing ISerializable</Description>
    <CreatedDate>23/02/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33622</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/02/2019</CreatedDate>
    <ClosedDate>24/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33621</IssueID>
    <RepoID>1</RepoID>
    <Title>async completion. re-consider changes TestNavigationBeforeCompletedComputation</Title>
    <Description>
    </Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33620</IssueID>
    <RepoID>1</RepoID>
    <Title>More Identifier Colours</Title>
    <Description>&lt;p&gt;for C# colour highlighting all Identifiers are coloured the same. My request is for Constant Identifiers, Static Identifiers, Static Methods and namespaces.  to be independently coloured but have the 'default' option follow the 'identifier' option.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/464514/more-identifier-colours.html
VSTS ticketId: 797125_
_These are the original issue comments:_

Jane Wu [MSFT] on 2/21/2019, 02:38 AM (36 hours ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33619</IssueID>
    <RepoID>1</RepoID>
    <Title>Link on delegate inside of anonymous method</Title>
    <Description>&lt;p&gt;I suggest to add &amp;quot;this&amp;quot;-analog for anonymous methods for easier use when it is essential to remove handler from event inside of handler itself&lt;br&gt;before&lt;/p&gt;&lt;pre&gt;Timer timer = new Timer();
//ignoring right signature for simplifying
Action a = null;
a = () =&amp;gt;
{
    //Dosmth
    timer.Elapsed -= a;
}
timer.Elapsed += a;&lt;/pre&gt;
after:&lt;br&gt;&lt;br&gt;&lt;pre&gt;Timer timer = new Timer();
//ignoring right signature for simplifying
timer.Elapsed += () =&amp;gt;
{
    //DoSmth&amp;lt;br&amp;gt;   //thisDelegeate is the link on current delegate. Exactly this i suggest to add&amp;lt;br&amp;gt;    timer.Elapsed -= thisDelegeate;
}&lt;/pre&gt;
&lt;br&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/460725/link-on-delegate-inside-of-anonymous-method.html
VSTS ticketId: 795742_
_These are the original issue comments:_

Jane Wu [MSFT] on 2/18/2019, 11:58 PM (3 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>23/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33618</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract Method refactoring ignores Prefer 'this.' Code Style preference</Title>
    <Description>&lt;p&gt;When Code Style preference is set to Prefer 'this.' regarding method access, using refactoring command Extract Method produces a method call that is not qualified with 'this.'.&lt;br&gt;&lt;br&gt;This is a minor issue but it produces code review issues if one forgets to correct it after using Extract Method.&lt;br&gt;&lt;br&gt;Otherwise, Extract Method works mostly brilliantly and I love it!&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/466353/extract-method-refactoring-ignores-prefer-this-cod.html
VSTS ticketId: 800730_
_These are the original issue comments:_

Visual Studio Feedback System on 2/22/2019, 04:01 AM (13 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33617</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't run ResizeCompactsAllDead on Mono</Title>
    <Description>Fixes the Linux mono build.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>23/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33616</IssueID>
    <RepoID>1</RepoID>
    <Title>disable old completion: PR for test only. not for commit</Title>
    <Description>
    </Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33615</IssueID>
    <RepoID>1</RepoID>
    <Title>NullableWalker assumes tuple type members have special implementations</Title>
    <Description>The `NullableWalker` has its own implementation of taking a member as a member of some other type, rather than using the implementations like `MethodSymbol.AsMember(NamedTypeSymbol)` that exist in the compiler.  That is presumably because those don't handle tuple types because of the complexity described in https://github.com/dotnet/roslyn/issues/20648 .  One of the assumptions that code makes is that a method that is a member of a tuple type (e.g. in a `BoundCall` node) is of the type `TupleMethodSymbol`.  Besides being a bad idea from a design point of view (`TupleMethodSymbol` is not an internal contract of any kind, so we should not depend on its concrete type), it turns out to be false.  This is exposed by two tests: `CodeGenTupleTests.TupleAsyncCapture03` and `CodeGenTupleTests.TupleLambdaCapture03`.  These tests have a method declared in `ValueTuple&lt;T1, T2&gt;`. Both of these tests will fail once we track the nullable state as NotNull/PossiblyNull in the NullableWalker.

Once https://github.com/dotnet/roslyn/issues/20648 is fixed we can look at removing all the ...AsMember... implementation code in `NullableWalker` whose purpose is to work around https://github.com/dotnet/roslyn/issues/20648 and instead use the implementations in the symbol model.

These two tests are being skipped until this is addressed.

Note that this should be addressed sooner rather than later, as the failure mode is a compiler crash (invalid cast exception).
</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33613</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix the navigation bar tests for VS2019</Title>
    <Description>Fixes failures to run navigation bar tests in Visual Studio 2019.

* The **dev16.0-vs-deps** branch needs this change before we can complete an integration test pass
* The **master** branch needs this change so developers can run tests locally

**dev16.0** is the common ancestor branch to address both of the above.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>24/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33611</IssueID>
    <RepoID>1</RepoID>
    <Title>Use SendInput instead of WinForms' SendKeys</Title>
    <Description>Fixes #19530
Fixes #30544</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33610</IssueID>
    <RepoID>1</RepoID>
    <Title>CS7035 warning when versioning with asterisk (*) wildcard</Title>
    <Description>**Steps to Reproduce**:
project .csproj with following `PropertyGroup` items:
```
  &lt;PropertyGroup&gt;
    &lt;Deterministic&gt;false&lt;/Deterministic&gt;
    &lt;AssemblyVersion&gt;1.2.*&lt;/AssemblyVersion&gt;
  &lt;/PropertyGroup&gt;
```

**Expected Behavior**:
No warnings get thrown because of this wildcard as documented on https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assemblyversionattribute:

&gt; A version number such as [assembly:AssemblyVersion("1.2.*")] specifies 1 as the major version, 2 as the minor version, and accepts the default build and revision numbers.

**Actual Behavior**:
Warning `[CS7035]: The specified version string does not conform to the recommended format - major.minor.build.revision` gets thrown.

</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33609</IssueID>
    <RepoID>1</RepoID>
    <Title>Signature info gets incomprehensible in presence of extension methods, generics and tuples</Title>
    <Description>The displayed signature of `SelectAsArray` extension method is:

```C#
ImmutableArray&lt;TResult&gt; ImmutableArray&lt;(DocumentId DocumentId, ImmutableArray&lt;LineChange&gt; Deltas)&gt;.
SelectAsArray&lt;(DocumentId DocumentId, ImmutableArray&lt;LineChange&gt; Deltas), TResult, TArg&gt;(
Func&lt;(DocumentId DocumentId, Immutable&lt;ArrayChange&gt; Deltas), TArg, TResult&gt; map, TArg arg)
```

![image](https://user-images.githubusercontent.com/41759/53264321-30987880-3690-11e9-806e-378d324546c9.png)

It's really hard to parse this when choosing between overloads of the method. We should think about better visualization of complex signatures.

The method itself is conceptually simple - it takes a lamda and applies it to elements of immutable array, but this is completely lost in the signature info. The problem is most apparent when tuples are substituted to generic parameters of Funcs.
</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33608</IssueID>
    <RepoID>1</RepoID>
    <Title>dotnet_naming_style.instance_field_style doesn't distinguish between public/internal and private fields </Title>
    <Description>In the following case we do not want to prefix with `_`:

![image](https://user-images.githubusercontent.com/41759/53263891-86205580-368f-11e9-87c8-08dd32b01b67.png)
</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33607</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 'dotnet/master' into DefaultInterfaceImplementation</Title>
    <Description>
    </Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33606</IssueID>
    <RepoID>1</RepoID>
    <Title>Relax trigger area for Generate Constructor and Add Parameters to constructor</Title>
    <Description>Fixes #33601

This PR expands the trigger area for these refactorings so that when any portion of the declaration statement is selected the refactoring is available.  </Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33605</IssueID>
    <RepoID>1</RepoID>
    <Title>Wrap parameters/arguments significantly breaks muscle memory</Title>
    <Description>**Version Used**: Dev16 IntPreview (preview 4.0)

Wrap parameters/arguments seems to show up above almost every useful refactoring. Even worse, it has a submenu, which is auto-expanded on &lt;kbd&gt;CTRL+.&lt;/kbd&gt;. So, if I try to bring up the light bulb to reorder parameters, convert a method to an expression bodied member, or even add named arguments, I have to first arrow &lt;kbd&gt;Left&lt;/kbd&gt; to get out of the submenu, and then arrow &lt;kbd&gt;Down&lt;/kbd&gt; to get to the refactoring or fix that I need.

IMO, this is a nice clean up feature but does not add enough value to warrant being on the top of the light bulb menu. At the moment, it feels like it actively is trying to get in my way. It's even more frustrating that it is offered or parameter and argument list that don't need wrapping!

Just pressed &lt;kbd&gt;CTRL+.&lt;/kbd&gt; to add named arguments:

![image](https://user-images.githubusercontent.com/116161/53256236-3be1a900-367c-11e9-9ae1-09c6317f88fd.png)
</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33604</IssueID>
    <RepoID>1</RepoID>
    <Title>Minor cleanup for nullable</Title>
    <Description>Fixes #33398</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33603</IssueID>
    <RepoID>1</RepoID>
    <Title>If multiple constructors exist, offer Add Parameters to constructor for each one</Title>
    <Description>If more than one constructor exists, the "Add Parameters to constructor" refactoring only offers to add parameters to one of them.  We should expand to include each applicable constructor individual.

Related to #8925 </Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33602</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow user to add parameters to default constructor</Title>
    <Description>From feedback on #8925 

Currently, if the default constructor is the only constructor that exists, the "Add Parameters to constructor" refactoring is not offered.  We should allow user to add a selected parameter to the default constructor.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33601</IssueID>
    <RepoID>1</RepoID>
    <Title>Expand trigger area for AddConstructorParameters and GenerateConstructor refactorings</Title>
    <Description>From feedback on #8925 

Currently, the "Generate Constructor" and "Add Parameters to constructor" refactorings are only available if you select the entire declaration statement.  We should expand the trigger area for greater ease of use.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33600</IssueID>
    <RepoID>1</RepoID>
    <Title>Install a TraceListener for integration testing</Title>
    <Description>Fixes #33599</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33599</IssueID>
    <RepoID>1</RepoID>
    <Title>Debug assertions cause integration test deadlock</Title>
    <Description>**Version Used**: f32205e548feffc6b763877866abbb47f1719a98

**Steps to Reproduce**:

1. On a background thread, call `Debug.Fail` (or `Debug.Assert(false)`)
2. On the UI thread, call `Debug.WriteLine`

**Expected Behavior**:

The use of `Debug.WriteLine` on the UI thread does not deadlock the integration test process.

**Actual Behavior**:

`Debug.WriteLine` blocks waiting for a lock, but the lock is held by the background thread for the duration of presenting the assertion window. The integration test process deadlocks.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33598</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a hang mitigating timeout to WaitForBuildToFinish</Title>
    <Description>See #33597</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33597</IssueID>
    <RepoID>1</RepoID>
    <Title>Race condition in SolutionExplorer_InProc.WaitForBuildToFinish</Title>
    <Description>**Version Used**: f32205e548feffc6b763877866abbb47f1719a98

It's possible for `SolutionExplorer_InProc.WaitForBuildToFinish` to never return due to a race condition in managing the event states. This method and `SolutionExplorer_InProc.BuildSolution` should be updated to ensure consistently-correct behavior.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33596</IssueID>
    <RepoID>1</RepoID>
    <Title>CS1061 'Task' does not contain a definition for 'Result' and no accessible extension method 'Result' accepting a first argument of type 'Task' could be found</Title>
    <Description>**Version Used**:

C# 7.3
C# Compiler version 2.10.0.0 (b9fb1610)

**Steps to Reproduce**:

```cs
using System;
using System.Linq;
using System.Threading.Tasks;

namespace N
{
    class C { public string Id { get; set; } }

    class P
    {
        private static Task&lt;C[]&gt; GetArrayOfC() =&gt; throw new NotImplementedException();

        private static void M()
        {
            GetArrayOfC().ContinueWith(task =&gt; {
                var a = task.Result.FirstOrDefault(x =&gt; x.Id = "");
            });
        }

    }
}
```

**Expected Behavior**:
See just the error
&gt; CS0029	Cannot implicitly convert type 'string' to 'bool'

**Actual Behavior**:
&gt; CS1061	'Task' does not contain a definition for 'Result' and no accessible extension method 'Result' accepting a first argument of type 'Task' could be found (are you missing a using directive or an assembly reference?)

![image](https://user-images.githubusercontent.com/13019179/53240451-7f88e280-367d-11e9-973f-6321bc926254.png)

If I fix the lambda (`==` instead of `=`) everything works fine, and it recognizes that my `task` parameter is of type `Task&lt;C[]&gt;` and not just `Task`):

![image](https://user-images.githubusercontent.com/13019179/53240478-8fa0c200-367d-11e9-9142-1a53e2b7a801.png)
</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33595</IssueID>
    <RepoID>1</RepoID>
    <Title>fixed outputRefFilePath not synched at initial synchronization</Title>
    <Description>OutputRefFilePath didn't get synched at the initial synchronization but synched correctly on an incremental update.

we had test for an incremental update but didn't have a test covering initial sync.

also added more debugging code to spot issue easier.

fix https://github.com/dotnet/roslyn/issues/33476</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33594</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for partial methods in interfaces</Title>
    <Description>
    </Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33593</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix VS bootstrapper branch selection</Title>
    <Description>Do not assume that the branch we get IBC data from is the same as the one we produce VS bootstrapper for. The VS bootstrapper should always be produced from VS branch we insert to, while IBC data generated by another branch might be needed.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33592</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33591</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability Rewriter Step</Title>
    <Description>This adds an initial implementation of the NullableWalker part of
rewriting the bound tree with nullability information, and hooks up the
rewriter to this. It additionally adds a debug verifier for the
NullableWalker that will verify that we're actually visiting and
recording results for all BoundExpression nodes in the tree. Some tests
are currently skipped where this does not hold true to allow the review
cycle to start while work continues.

Additionally, the VerifyTypes compilation helper is hooked up to this
rewritten information as a basic smoke test of the information being
produced by the rewriter.

For this PR, I'm most concerned about the general approach of getting
the information from the NullableWalker. If you have specific concerns
about some of the information from the walker being incorrect, please
note it and I'll put a prototype comment to follow up and add a test
to verify the behavior, but I'm not going to correct individual
scenarios in this PR.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33590</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose the Deconstruct method on IDeconstructionAssignmentOperation</Title>
    <Description>See http://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/IDeconstructionAssignmentOperation.cs,16: 

```csharp
    /// &lt;summary&gt;
    /// Represents a assignment with a deconstruction.
    /// &lt;para&gt;
    /// Current usage:
    ///  (1) C# deconstruction assignment expression.
    /// &lt;/para&gt;
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;
    /// This interface is reserved for implementation by its associated APIs. We reserve the right to
    /// change it in the future.
    /// &lt;/remarks&gt;
    public interface IDeconstructionAssignmentOperation : IAssignmentOperation
    {
    }
```

We should expose the deconstruct method similar to http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/DeconstructionInfo.cs,30 exposed via C# semantic model, which is language specific API and cannot be invoked from language agnostic IOperation layer or from a language agnostic component analyzing operations in a ControlFlowGraph.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33589</IssueID>
    <RepoID>1</RepoID>
    <Title>Add various bits of telemetry around DocumentClosed handling</Title>
    <Description>@sharwell and I have been looking at a bug for several days where we crash here:

https://github.com/dotnet/roslyn/blob/0930558690fda8c7e9bf8a50f4e5e66995fb1380/src/EditorFeatures/Core.Wpf/Options/EditorConfigDocumentOptionsProvider.cs#L75

because the DocumentId is already marked as open. Given there are a number of guards to ensure a document that's not open can't be opened a second time, our only guess is that a previous close was never received by the EditorConfigDocumentOptionsProvider.

This is adding some try/catches to attempt to prove that theory. Since we're really not sure which it might be and how often it might be happening, I'm adding non-fatal reporting to ensure we don't make a problem that happens during close _and then reopening_ something that crashes on the close itself.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Some users are experiencing crashes when the open a file that was previously opened. We don't have a good understanding of why this is happening, and Windows Error Reporting telemetry hasn't given us a full heap dump to understand it either. Our next best course of action is to add additional exception reporting points to attempt to understand it more.

### Bugs this fixes

This provides extra help to diagnose https://devdiv.visualstudio.com/DevDiv/_workitems/edit/742115, but does _not_ actually fix it.

### Workarounds, if any

We don't know the bug yet, but our only other option is to just keep waiting for heap dumps.

### Risk

Low. We're using our "report non fatal exception but keep propagating the exception" intentionally, so if the underlying exception is happening more often than we expect we won't make things worse.

### Performance impact

None.

### Is this a regression from a previous update?

Root cause is unknown at this time.

### Root cause analysis

Root cause is unknown at this time.

### How was the bug found?

Windows Error Reporting.

&lt;/details&gt;</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33588</IssueID>
    <RepoID>1</RepoID>
    <Title>F# Typing '.' after fully typing out a symbol does not trigger completion</Title>
    <Description>### Customer scenario
Typing `System.` in F#

**Expected**
Have a completion for dot

**Actual**
Have no completion for dot

![image](https://user-images.githubusercontent.com/5455484/53211839-7f460400-35f7-11e9-8cc3-fa663c4c9e13.png)

### Bugs this fixes
https://github.com/Microsoft/visualfsharp/issues/6266

### Workarounds, if any
None

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
None

### Root cause analysis
Dot (as some other characters) is a potential commit character in F# but it is removed from actual commit characters. Roslyn does not provide a correct support for such situations in the new completion because Roslyn does not have such cases in C# and VB. Priorities of Commit vs Filter differ between the old completion and the new completion. This causes the issue.

### How was the bug found?
Internal customers</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33587</IssueID>
    <RepoID>1</RepoID>
    <Title>Order of evaluation for `ref` and `out` arguments may not be left-to-right</Title>
    <Description>Roslyn currently permits a variable of type `object?` to be passed as an `out` parameter whose type is `object`.  But this is unsafe, as the following program (which compiles with no nullable warnings) demonstrates.

/cc @dotnet/csharplangdesign @cston @MadsTorgersen 

``` c#
#nullable enable

class C
{
    static void Main()
    {
        object? o = null;
        M(ref o, out o);
        o.ToString();  // throws NullReferenceException at runtime
    }

    static void M(ref object? o1, out object o2)
    {
        o2 = 1;
        o1 = null;
        return;
    }
}
```
</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33586</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>24/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33585</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33584</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33583</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>23/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33582</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/02/2019</CreatedDate>
    <ClosedDate>23/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33581</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix deadlock with the GlobalOptionService and roaming option persister</Title>
    <Description>This deadlock is a classic deadlock where two components both have a lock, and called out to the other component while holding the lock. The two offending methods were:

1. GlobalOptionService.GetOption, which acquires the global option lock and then calls into serializers. This would result in RoamingVisualStudioProfileOptionPersister.RecordObservedValueToWatchForChanges being called which would acquire the persister's lock.
2. RoamingVisualStudioProfileOptionPersister.OnSettingChangedAsync would acquire the persister's lock, and then call back into the GlobalOptionService to update it.

If both of these happened at the same time, there's a small chance of deadlock. We've seen this sporatically in automation.

The classic fix for this is to fix one (or both) of the cases above to avoid calling out to another component while holding the lock. Both are easy to fix but I'm choosing (for now) to just the second case. My reasoning is the first lock is still potentially useful: if multiple components are requesting the same option at the same time, we will only be calling into the settings service once rather than calling into it multiple times simultaneously.

Fixes https://github.com/dotnet/roslyn/issues/20019.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33580</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing possible dereference of a null reference warning in an `if` block that guarantees its wrong</Title>
    <Description>**Version Used**: 28620.216.d16.0

**Steps to Reproduce**:

Create a C# .NET Core project with this class:

```cs
#nullable enable

using System;

class Program
{
    public static void Foo(object o)
    {
        if (o == null)
        {
            //o = null;
            o.ToString(); // I expect CS8602 here!
            throw new ArgumentNullException(nameof(o));
        }

        o.ToString();
    }
}
```

**Expected Behavior**:

I expect CS8602 to show up on the line indicated above.

**Actual Behavior**:

The warning does not show up unless I uncomment the line above it.

While it's true that `Foo(object)` indicates the identifier is non-nullable, it is also true that there is no runtime check to guarantee that, and as a public method I need to throw `ArgumentNullException` if it is null rather than a `NullReferenceException` in case my caller passes in null. So within my `if` block that checks if it is null, if I then dereference it, the compiler should raise a warning. But it only does so if I explicitly set it to the value it is already confirmed by the compiler to be.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33579</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn Package failure on Dev16 master branch</Title>
    <Description>**Version Used**: 16.0.0 Preview 4.0 [28621.89.master]

**Steps to Reproduce**:

1. Open the project system solution (presumable this will reproduce with any managed project)

**Expected Behavior**:

No errors in the activity log

**Actual Behavior**:

```XML
  &lt;entry&gt;
    &lt;record&gt;933&lt;/record&gt;
    &lt;time&gt;2019/02/21 22:43:23.753&lt;/time&gt;
    &lt;type&gt;Error&lt;/type&gt;
    &lt;source&gt;VisualStudio&lt;/source&gt;
    &lt;description&gt;SetSite failed for package [Code Analysis Package]Source: &amp;apos;System.ComponentModel.Composition&amp;apos; Description: Cannot cast the underlying exported value of type &amp;apos;Microsoft.VisualStudio.CodeAnalysis.IVCCodeAnalysisServiceProxy&amp;apos; to type &amp;apos;Microsoft.VisualStudio.CodeAnalysis.IVCCodeAnalysisServiceProxy&amp;apos;.&amp;#x000D;&amp;#x000A;&lt;/description&gt;
    &lt;guid&gt;{B20604B0-72BC-4953-BB92-95BF26D30CFA}&lt;/guid&gt;
    &lt;hr&gt;80131500&lt;/hr&gt;
    &lt;errorinfo&gt;&lt;/errorinfo&gt;
  &lt;/entry&gt;
```
</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33578</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler rejects code with class named `ValueTuple`</Title>
    <Description>The following code was accepted before C# 7, but is now rejected by the compiler.  This is therefore a breaking change in the compiler (not required by the specification).

I suspect this is a symptom of https://github.com/dotnet/roslyn/issues/20648

``` c#
namespace System
{
    public class ValueTuple&lt;T1, T2&gt;
    {
        public ValueTuple(T1 item1, T2 item2)
        {
            Item1 = item1;
            Item2 = item2;
        }
        public T1 Item1;
        public T2 Item2;
    }
    public class Derived&lt;T&gt; : ValueTuple&lt;T, T&gt; // error: cannot derive from sealed type (T, T)
    {
        public Derived(T t) : base(t, t) { }
    }
}
```
</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33577</IssueID>
    <RepoID>1</RepoID>
    <Title>Should not warn assigning anonymous type instance with trivial nullability differences</Title>
    <Description>Should not warn on the following assignments:
```C#
#nullable enable

interface IOut&lt;out T&gt; { }

class Program
{
    static void F1&lt;T&gt;(T? x, T? y) where T : struct
    {
        if (x == null) return;
        var a = new { x, y };
        var b = new { x = y, y };
        b = a; // warning: mismatch
    }

    static void F2&lt;T&gt;(IOut&lt;T&gt; x, IOut&lt;T?&gt; y) where T : class
    {
        var a = new { F = x };
        var b = new { F = y };
        b = a; // warning: mismatch
    }
}
```</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33576</IssueID>
    <RepoID>1</RepoID>
    <Title>fix classification issue on F#</Title>
    <Description>**Customer scenario**

a user opens a F# file and doesn't get any keyword colorization.

**Bugs this fixes:**

https://github.com/Microsoft/visualfsharp/issues/6267

**Workarounds, if any**

no workaround. 

**Risk**

low risk

**Performance impact**

none

**Is this a regression from a previous update?**

yes.

**Root cause analysis:**

recent fix to resolve top watson crash (https://github.com/dotnet/roslyn/pull/33168) caused one regression where F# (and potentially typescript)'s classification stop working.

the issue was when open file's extension (ex, xaml &lt;-&gt; cs or fs &lt;-&gt; cs) is renamed, there is a race between content type (editor's concept) and language name (roslyn concept) when they get updated in 2 systems (editor and roslyn workspace).

when that happens, it is possible that editor picks up csharp tagger since editor think it is now csharp buffer, but workspace still thinks the buffer is associated with fsharp and returns fsharp document when asked.

that caused crash since some service assumed to exist in csharp document doesn't exist since it is not csharp document.

the fix mentioned above mitigate the issue by checking the issue and bailout but it was doing so too early breaking legit cases for F# and typescript.

this fix moves the check down to where it is actually crashing.

**How was the bug found?**

dogfooding

</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33575</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix integration tests</Title>
    <Description>
    </Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33574</IssueID>
    <RepoID>1</RepoID>
    <Title>Include nullable annotations in warning messages with anonymous types</Title>
    <Description>Nullable annotations for properties of anonymous types are not included in warning messages.
```C#
#nullable enable

class Program
{
    static void F&lt;T&gt;(T x, T y)
    {
    }

    static void G&lt;T&gt;(T x, T? y) where T : class
    {
        F(new { x }, new { x = y });
    }
}
```
```
(11,22): warning CS8620: Nullability of reference types in
    argument of type '&lt;anonymous type: T x&gt;' doesn't match
    target type '&lt;anonymous type: T x&gt;' for parameter 'y'
    in 'void Program.F&lt;&lt;anonymous type: T x&gt;&gt;(&lt;anonymous type: T x&gt; x, &lt;anonymous type: T x&gt; y)'.
```
See https://github.com/dotnet/roslyn/pull/33562#discussion_r259061696</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33573</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect CS4014 shown when using the async method with System.Linq.Expression</Title>
    <Description>&lt;p&gt;Here is the code snippet that clearly demonstrates the issue:&lt;/p&gt;&lt;pre&gt;class Program {
    static void Main(string[] args) {
        RaiseCanExecuteChanged(() =&amp;gt; Load());// &amp;lt;&amp;lt;&amp;lt; illegal CS4014 here
    }
    static async Task Load() {
        await Task.Delay(1000);
    }
    static void RaiseCanExecuteChanged(Expression&amp;lt;Action&amp;gt; selector) {
        /* ... */
    }
}
&lt;/pre&gt; &lt;br&gt;The impact of this issue: &lt;br&gt;&lt;p&gt;it is impossible to compile the solution when &amp;quot;Threat warnings as errors&amp;quot; level is set to all(our default settings).&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/447121/incorrect-cs4014-show-when-using-the-async-method.html
VSTS ticketId: 787866_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33572</IssueID>
    <RepoID>1</RepoID>
    <Title>Subscribe to and process rule set file changes</Title>
    <Description>Despite all the effort to free-thread all our ruleset handling around file change notifications, we forgot to actually subscribe to the file change notifications. This fixes that.

This also adds a unit test to cover this. Unfortunately getting the tests to work require a few hacks right now, as there's some workarounds for old (and no longer applicable) problems. I've filed https://github.com/dotnet/roslyn/issues/33506 to fix those and plan to do so, just not in a branch where riskier changes aren't welcome.

Fixes https://github.com/dotnet/roslyn/issues/33465.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33571</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33570</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33569</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33568</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33567</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33566</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove dotnet format tool and provide link to new repo</Title>
    <Description>The dotnet-format global tool has a new home at https://github.com/dotnet/format. This PR removes the source and updates the readme with a link to the new repo.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33565</IssueID>
    <RepoID>1</RepoID>
    <Title>Make sure that `AsMemberOfType` is complete</Title>
    <Description>A short-term workaround was put in place for https://devdiv.visualstudio.com/DevDiv/_workitems/edit/788968

This issue tracks finding a more robust/complete solution.

```C#
        [Fact]
        [WorkItem(788968, "https://devdiv.visualstudio.com/DevDiv/_workitems/edit/788968")]
        public void MissingMethodOnTupleLiteral()
        {
            var source = @"
#nullable enable
class C
{
    void M()
    {
        (0, (string)null).Missing();
    }
}
";
            var compilation = CreateCompilation(source);
            compilation.VerifyDiagnostics(
                // CRASH
                );
        }
```</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33564</IssueID>
    <RepoID>1</RepoID>
    <Title>A number of C# and VB compiler unit-tests utilizing formatting of numbers fail in CI due to a baseline difference when run on CoreCLR against Microsoft.NETCore.App 3.0.0-preview4-27420-5. The formatting of numbers possibly became dependent on environment. </Title>
    <Description>The tests do not fail when I run them locally, but failed in CI (https://dev.azure.com/dnceng/public/_build/results?buildId=102071).
```
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Release\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\VisualBasic\Test\Emit\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.vbproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Release\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\CSharp\Test\Semantic\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests.csproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Release\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Scripting\CSharpTest\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests.csproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Release\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\VisualBasic\Test\Semantic\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests.vbproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Release\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\CSharp\Test\Syntax\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests.csproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Release\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\VisualBasic\Test\Syntax\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests.vbproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Release\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\CSharp\Test\Emit\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests.csproj]
    0 Warning(s)
    7 Error(s)

XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Debug\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\CSharp\Test\Emit\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests.csproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Debug\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\CSharp\Test\Syntax\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests.csproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Debug\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\CSharp\Test\Semantic\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests.csproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Debug\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\VisualBasic\Test\Emit\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.vbproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Debug\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\VisualBasic\Test\Semantic\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests.vbproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Debug\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Compilers\VisualBasic\Test\Syntax\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests.vbproj]
XUnit : error : Tests failed: F:\vsagent\1\s\artifacts\TestResults\Debug\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests_netcoreapp2.1_x64.html [netcoreapp2.1|x64] [F:\vsagent\1\s\src\Scripting\CSharpTest\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests.csproj]
    0 Warning(s)
    7 Error(s)
```

The tests are temporarily disabled for CoreClr in DefaultInterfaceImplementation branch. Need to decide what to do about them.

The test logs are attached:
[Windows CoreClr Release.zip](https://github.com/dotnet/roslyn/files/2890506/Windows.CoreClr.Release.zip)


[Windows CoreClr Debug.zip](https://github.com/dotnet/roslyn/files/2890497/Windows.CoreClr.Debug.zip)
</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33563</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "set no activation context on provisional tab when navigate to"</Title>
    <Description>Reverts dotnet/roslyn#33400

Integration tests caught this change as a regression. This pull request reverts the breaking change with no alteration so it can be resubmitted in the future.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33562</IssueID>
    <RepoID>1</RepoID>
    <Title>Track state in anonymous type fields</Title>
    <Description>Fixes #24018 (Inferred nullability should flow into anonymous type fields)
Fixes #29889 (Nullability mismatch is not reported for an assignment of Anonymous Types)
Fixes #29890 
Fixes #29891 (Missing ErrorCode.WRN_NullReferenceReceiver warning involving anonymous type)
Fixes #33007 (non-nullability of anonymous type properties in lambdas are messed up)
Fixes #31394 (Nullability of assigned anonymous type field ignored)
</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33561</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 15.9.7 IDE0025 Codefix Bug</Title>
    <Description>IDE0025 changes this:

```csharp
public static bool Value
{
#if DEBUG
    get =&gt; true;
#else
    get =&gt; false;
#endif
}
```

To this:

```csharp
public static bool Value =&gt; true;
```

The codefix should either not be offered for code with directives or refactor with the directives in place.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/465374/vs-1597-ide0025-codefix-bug.html
VSTS ticketId: 797928_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33560</IssueID>
    <RepoID>1</RepoID>
    <Title>'Microsoft.CodeAnalysis.CSharp.Diagnostics.AddBraces.CSharpAddBracesDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Unexpected true'</Title>
    <Description>**Version Used**: 

VS 2019 preview 3

```
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.AddBraces.CSharpAddBracesDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Unexpected true'.	

Microsoft.CodeAnalysis.CSharp.Diagnostics.AddBraces.CSharpAddBracesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: SwitchToSource.CLI
SyntaxTree: C:\Users\Documents\Sources\Command.List.cs
SyntaxNode: else System.Console.WriteLine($" ... [ElseClauseSyntax]@[2781..2931) (54,40)-(55,144)

System.InvalidOperationException: Unexpected true
   at Roslyn.Utilities.Contract.ThrowIfTrue(Boolean condition, String message)
   at Microsoft.CodeAnalysis.Shared.Utilities.CommonFormattingHelpers.AppendTextBetween(SyntaxToken token1, SyntaxToken token2, StringBuilder builder)
   at Microsoft.CodeAnalysis.CSharp.Utilities.FormattingRangeHelper.AreTwoTokensOnSameLine(SyntaxToken token1, SyntaxToken token2)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.AddBraces.CSharpAddBracesDiagnosticAnalyzer.IsConsideredMultiLine(SyntaxNode statement, SyntaxNode embeddedStatement)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.AddBraces.CSharpAddBracesDiagnosticAnalyzer.AnalyzeNode(SyntaxNodeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__50`1.&lt;ExecuteSyntaxNodeAction&gt;b__50_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```

The code around the error (The line comments are not in the original code)

```csharp
          packageToDisplayList.ForEach(listedPackage =&gt; // line 48
          {
              System.Console.WriteLine($"- {listedPackage.PackageId}");
              foreach (var versionInfo in listedPackage.Versions)
              {
                  if (versionInfo.Reason == NonSwitchableReason.None)
                      System.Console.WriteLine($"   * {versionInfo.Version} [{versionInfo.State}]"); // line 54
                  else
                      System.Console.WriteLine($"   * {versionInfo.Version} [{versionInfo.State}: {versionInfo.Reason}]");
              }
          });
```</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33559</IssueID>
    <RepoID>1</RepoID>
    <Title>Null-safe navigation and null-coalescing break the out variable initialization detection</Title>
    <Description>**Version Used**: 

C# 7.3

Excerpt from Visual Studio About dialog (items suspected to be relevant)
~~~
Microsoft Visual Studio Enterprise 2017 
Version 15.9.2
VisualStudio.15.Release/15.9.2+28307.108
Microsoft .NET Framework
Version 4.7.03056
C# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.
~~~

**Steps to Reproduce**:

 1. given the following example:

~~~csharp
                var place = new
                {
                     Metadata = (IDictionary&lt;string, string&gt;)null
                };
                // ...
                var sb = new StringBuilder();
                // ...
                if(place.Metadata?.TryGetValue("erpid", out var erpid) ?? false)
                {
                    sb.Append(" | ");
                    sb.Append("erpid=");
                    sb.Append(erpid);
                }
~~~

where `Metadata` is `IDictionary&lt;string,string&gt;` typed nullable member of place.

 2. I get Error `CS0165` `Use of unassigned local variable 'erpid'`
 ![image](https://user-images.githubusercontent.com/3705124/53173213-8402bc00-35e7-11e9-9a66-d62eef17d4a0.png)
 3. code does not compile

**Expected Behavior**:

`erpid` is initialized in the scope, as the expression can be evaluated at compile time to determine that the `erpid` variable will be initialized in the scope.

Example code compiles correctly.

**Actual Behavior**:

Null-safe navigation and null-coalescing break the out variable initialization detection.
</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33558</IssueID>
    <RepoID>1</RepoID>
    <Title>editorconfig c# language rules doesn't trigger build failure</Title>
    <Description>I have the following C# document

```csharp
using Newtonsoft.Json;
using System;
using System.Text;
using log4net;

namespace EditorConfigdemo {
public class ExampleClass { 

	public static void Main (string[] args) {

		Console.WriteLine(&amp;quot;Hello, Message form an App&amp;quot;);
	}

  private readonly int number;

  public ExampleClass ( int num ) {

	this.number = num;
  }

  public void PrintState( )
  {
	Console.WriteLine(&amp;quot;State is {0}&amp;quot;, number);
  }

		public int Calculate()
		{
			Int32 res;
			if( (number &amp;gt; 10 &amp;amp;&amp;amp; number &amp;lt; 100) || number % 7 == 4 ) {                                   
				res = 1+2* ( 78 -2) *(8*4) - ((67+3) *3 );
			} else
			{
				res=42;
			}

            return res;
		}


   public String Info() {
	   try {
		   throw new Exception(&amp;quot;Blam!&amp;quot;);
	   } catch (Exception ex) {
		   Console.WriteLine(ex.Message);                                               
		   throw;
	   } finally {
		   Console.WriteLine(&amp;quot;Have we failed?&amp;quot;);                                                                          
	   }
   }
}
}
```

when I apply the following rules to it:

```
root = true

[*.*]
charset = utf-8
indent_style = space
trim_trailing_whitespace = true
insert_final_newline = true

[*.{ps,xml}]
indent_size = 2

[*.cs]
indent_size = 4 : warning
end_of_line = crlf

# Use language keywords instead of BCL types
dotnet_style_predefined_type_for_locals_parameters_members = true : suggestion
dotnet_style_predefined_type_for_member_access = true: suggestion

# Add parentheses around binary operators for clarity
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity : suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity : suggestion
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity : suggestion

# Prefer object/collection initialization
dotnet_style_object_initializer = true: suggestion
dotnet_style_collection_initializer = true : suggestion

# Prefer tupple names for anonymous tupples
dotnet_style_explicit_tuple_names = true : suggestion

# Use auto properties
dotnet_style_prefer_auto_properties = true : suggestion

# Use conditional expressions over return statements
dotnet_style_prefer_conditional_expression_over_return = true : suggestion

# Use simple conditional assignment for null checks
dotnet_style_coalesce_expression = true : suggestion
dotnet_style_null_propagation = true : suggestion
csharp_style_throw_expression = true : suggestion

# Use var keyword when type is apparent
csharp_style_var_when_type_is_apparent = true : suggestion

# Single statement code blocks surrounded by braces
csharp_prefer_braces = true : suggestion

# Put system namespaces first
dotnet_sort_system_directives_first = true : suggestion

# Space placement
csharp_space_after_keywords_in_control_flow_statements = true : error
csharp_space_around_binary_operators = before_and_after : error
csharp_space_after_keywords_in_control_flow_statements = true : error
csharp_space_between_method_declaration_parameter_list_parentheses = false : error
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false: error
csharp_space_between_method_call_parameter_list_parentheses = false : error
csharp_space_before_colon_in_inheritance_clause = true : error
csharp_space_after_colon_in_inheritance_clause = true : error

# Statement placement
csharp_preserve_single_line_statements = false : suggestion
csharp_preserve_single_line_blocks = true : suggestion

# Open/close brace placement
csharp_new_line_before_open_brace = control_blocks, methods, properties, accessors, events, indexers, types : error
```

non of the rules marked with &amp;quot;error&amp;quot; action is triggered during the build in Visual Studio.

Only if I change action to error&amp;quot; for dotnet_style_predefined_type_for_locals_parameters_members the build fails

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/433321/editorconfig-c-language-rules-doesnt-trigger-build.html
VSTS ticketId: 775762_
_These are the original issue comments:_

Visual Studio Feedback System on 2/17/2019, 04:12 AM (4 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33557</IssueID>
    <RepoID>1</RepoID>
    <Title>Open files in packages directory remain locked after a build</Title>
    <Description>**Version Used**: 2.10.0

**Steps to Reproduce**: Build any MVC application

**Expected Behavior**: After msbuild exits, no files in packages\Microsoft.Net.Compilers.2.10.0 remain locked.

**Actual Behavior**: The files are locked

On our CI server, we are having builds fail because our build system (Team City) reuses worksapces that were used for a previous build, does a git clean -xdf at the start of the build, and VBCSCompiler.exe is still running from the last build.  Here is some sample output showing the issue:

    &gt; handle J:\BuildAgent05\work\e780bd3af5242ffb\ |?{ $_ -imatch 'VBCSCompiler.exe'}
    VBCSCompiler.exe   pid: 968    type: File            3C: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools
    VBCSCompiler.exe   pid: 968    type: File           5D4: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\VBCSCompiler.exe
    VBCSCompiler.exe   pid: 968    type: File           5E0: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\Microsoft.CodeAnalysis.dll
    VBCSCompiler.exe   pid: 968    type: File           5E8: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.ValueTuple.dll
    VBCSCompiler.exe   pid: 968    type: File           5F4: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Collections.Immutable.dll
    VBCSCompiler.exe   pid: 968    type: File           600: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\Microsoft.CodeAnalysis.CSharp.dll
    VBCSCompiler.exe   pid: 968    type: File           60C: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.IO.FileSystem.Primitives.dll
    VBCSCompiler.exe   pid: 968    type: File           614: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.IO.FileSystem.Primitives.dll
    VBCSCompiler.exe   pid: 968    type: File           618: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\Microsoft.CodeAnalysis.VisualBasic.dll
    VBCSCompiler.exe   pid: 968    type: File           624: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Reflection.Metadata.dll
    VBCSCompiler.exe   pid: 968    type: File           630: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.IO.FileSystem.dll
    VBCSCompiler.exe   pid: 968    type: File           63C: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Text.Encoding.CodePages.dll
    VBCSCompiler.exe   pid: 968    type: File           644: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Text.Encoding.CodePages.dll
    VBCSCompiler.exe   pid: 968    type: File           6F4: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Security.Cryptography.Primitives.dll
    VBCSCompiler.exe   pid: 968    type: File           6F8: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Security.Cryptography.Primitives.dll
    VBCSCompiler.exe   pid: 968    type: File           6FC: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Threading.Tasks.Extensions.dll
    VBCSCompiler.exe   pid: 968    type: File           704: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Threading.Tasks.Extensions.dll
    VBCSCompiler.exe   pid: 968    type: File           708: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.IO.Compression.dll
    VBCSCompiler.exe   pid: 968    type: File           710: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.IO.Compression.dll
    VBCSCompiler.exe   pid: 968    type: File           714: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Xml.ReaderWriter.dll
    VBCSCompiler.exe   pid: 968    type: File           71C: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Xml.ReaderWriter.dll
    VBCSCompiler.exe   pid: 968    type: File           720: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Xml.XPath.XDocument.dll
    VBCSCompiler.exe   pid: 968    type: File           728: J:\BuildAgent05\work\e780bd3af5242ffb\packages\Microsoft.Net.Compilers.2.10.0\tools\System.Xml.XPath.XDocument.dll

At the start of the next build, we try to clean the workspace, and get the following error:

    Failed to perform checkout on agent: '"C:\Program Files\Git\bin\git.exe" clean -f -d -x' command failed. exit code: 1
    ...
    stderr: warning: failed to remove packages/Microsoft.Net.Compilers.2.10.0/tools/Microsoft.DiaSymReader.Native.amd64.dll: Invalid argument
    warning: failed to remove packages/Microsoft.Net.Compilers.2.10.0/tools/System.IO.Compression.dll: Invalid argument
    warning: failed to remove packages/Microsoft.Net.Compilers.2.10.0/tools/System.IO.FileSystem.Primitives.dll: Invalid argument
    warning: failed to remove packages/Microsoft.Net.Compilers.2.10.0/tools/System.Security.Cryptography.Primitives.dll: Invalid argument
    warning: failed to remove packages/Microsoft.Net.Compilers.2.10.0/tools/System.Text.Encoding.CodePages.dll: Invalid argument
    warning: failed to remove packages/Microsoft.Net.Compilers.2.10.0/tools/System.Threading.Tasks.Extensions.dll: Invalid argument
    warning: failed to remove packages/Microsoft.Net.Compilers.2.10.0/tools/System.Xml.ReaderWriter.dll: Invalid argument
    warning: failed to remove packages/Microsoft.Net.Compilers.2.10.0/tools/System.Xml.XPath.XDocument.dll: Invalid argument
    warning: failed to remove packages/Microsoft.Net.Compilers.2.10.0/tools/VBCSCompiler.exe: Invalid argument

As a workaround, we have written something into our build scripts to kill VBCSCompiler.exe instances that have open file handles on the current workspace, but this seems like an issue that would affect a number of people, so I wanted to open a ticket.

The build machine does not have visual studio installed. We just install the dev tools.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33556</IssueID>
    <RepoID>1</RepoID>
    <Title>Cache visited assemblies to improve object browser startup</Title>
    <Description>This change addresses more than 50% of the Object Browser initialization time when opening it via symbol navigation in Roslyn.sln.

Fixes #33555</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33555</IssueID>
    <RepoID>1</RepoID>
    <Title>Object Browser hangs</Title>
    <Description>Pressing &amp;quot;Go to definition&amp;quot; (F12) on a method or class that is not in the project opens up the Object Browser, but it opens synchronously, blocking all other operations, and it takes up to 30 seconds the first time it opens.

So this issue consists of 2 problems:
1: The load time of the Object Browser is too high, and should hopefully be lowered.
2: The Object Browser should load asynchronously, not causing Visual Studio to hang.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/461895/object-browser-hangs.html
VSTS ticketId: 796040_
_These are the original issue comments:_

Visual Studio Feedback System on 2/19/2019, 02:04 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Jinu Joseph [MSFT] on 2/19/2019, 07:53 PM (35 hours ago): &lt;p&gt;Thank you for providing feedback, and we're sorry to hear about your experience . Based on your description so far, it sounds like you are experiencing a problem which is historically hard to diagnose and resolve using the normal &amp;quot;steps to reproduce&amp;quot;. We created a set of instructions for providing additional information which will help us track down the true source of the problems. (&lt;a target="_blank"&gt; https://github.com/dotnet/roslyn/wiki/Reporting-Visual-Studio-crashes-and-performance-issues#performance-issues &lt;/a&gt;)&lt;/p&gt;&lt;p&gt;We look forward to hearing from you&lt;/p&gt;

Bendik Nesbo on 2/20/2019, 02:41 AM (29 hours ago): attaching trace here.&lt;br&gt;Note: This time it was not as drastic as other times. Possibly cached? Sometimes it takes over 20 seconds for the Object Browser to load.
Visual Studio Feedback System on 2/21/2019, 03:38 AM (4 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33554</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33553</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33552</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33551</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33550</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33549</IssueID>
    <RepoID>1</RepoID>
    <Title>Instance member signatures are shown in a static member context</Title>
    <Description>**Version Used**: VS2017 15.9.7

**Steps to Reproduce**:

1. type this:
string.Equals(

**Expected Behavior**: IntelliSence show only static members

**Actual Behavior**: IntelliSence show both static and instance members

There's a similar: #23133</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33548</IssueID>
    <RepoID>1</RepoID>
    <Title>Target newer version of Microsoft.NETCore.App for tests.</Title>
    <Description>Closes #32540.
Closes #33083.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33547</IssueID>
    <RepoID>1</RepoID>
    <Title>Classify paramref and typeparamref in Quick Info</Title>
    <Description>Fixes #33546</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33546</IssueID>
    <RepoID>1</RepoID>
    <Title>VS IntelliSense display paramref elements same as regular text</Title>
    <Description>**Version Used**: N/A

**Steps to Reproduce**: 

1. Use VS to display IntelliSense pop-up text.

**Expected Behavior**:
The text within paramref tags should be rendered in different font from regular text to distinguish as a parameter which is not translated by-design. 

**Actual Behavior**:
The text within paramref tags are rendered the same as translated text, so it appears like we forgot to translate that text.

Screenshots available in email thread "RE: interesting ref doc loc rendering 'issue'.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33545</IssueID>
    <RepoID>1</RepoID>
    <Title>Set copyright and package license</Title>
    <Description>Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.

In order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.

@markwilkie
</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33544</IssueID>
    <RepoID>1</RepoID>
    <Title>Support ordering of CompleteStatementCommandHandler and new completion command handler</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/33543</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33543</IssueID>
    <RepoID>1</RepoID>
    <Title>Support ordering of CompleteStatementCommandHandler and new completion command handler</Title>
    <Description>https://github.com/dotnet/roslyn/blob/4240a9eb75f25cc2ed44fa9d781a46671d3de409/src/EditorFeatures/CSharp/CompleteStatement/CompleteStatementCommandHandler.cs#L31 should contain a reference to the new completion command handler as well.

Could not fix it in https://github.com/dotnet/roslyn/pull/33196 because CompleteStatementCommandHandler appeared in 16.1 and #33196 is against 16.0</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33542</IssueID>
    <RepoID>1</RepoID>
    <Title>One of our projects fails to build with: "csc.exe" exited with code -2146232797</Title>
    <Description>I don't have any idea why this would happen, this used to build on everything except Visual Studio 2019 Preview 2, preview 1.1 worked.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/434543/one-of-our-projects-fails-to-build-with-cscexe-exi.html
VSTS ticketId: 776735_
_These are the original issue comments:_

tstedel on 1/31/2019, 05:49 PM (19 days ago): &lt;p&gt;Still does this in preview 2.1. It hangs for a very long time and then doesn't build.&lt;/p&gt;&lt;p&gt;1&amp;gt;------ Build started: Project: POS_Connector.Core, Configuration: Debug Any CPU ------&lt;br&gt;1&amp;gt;C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error MSB6006: "csc.exe" exited with code -2146232797.&lt;br&gt;========== Build: 0 succeeded, 1 failed, 3 up-to-date, 0 skipped ==========&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;

tstedel on 1/31/2019, 06:41 PM (19 days ago): &lt;pre&gt;using System.Threading.Tasks;
namespace ConsoleApp6
\{
    class Program
    \{
        static async Task Main(string[] args)
        \{
            try
            \{
                try
                \{
                    return;
                }
                finally
                \{
                    await Task.CompletedTask;
                }
            }
            catch \{ }
            finally
            \{
                await Task.CompletedTask;
            }
        }
    }
}&lt;/pre&gt;

tstedel on 1/31/2019, 06:42 PM (19 days ago): &lt;p&gt;What I just posted is the minimum necessary to reproduce this issue&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33541</IssueID>
    <RepoID>1</RepoID>
    <Title>Const-Construct raises wrong messages</Title>
    <Description>In our community we found the following problem in Visual Basic:
If I declare a const construct outside a sub like this

```vb
Dim foo As New String("c"c, 9) '= "foo"
Const xxx As String = "blabla" &amp; foo
```

we get an error that we have to use a string instance member instead of foo. But foo is one.
Inside a procedure this construct results while compiling in an error with description &amp;quot;BC36970 Failed to emit module&amp;quot;
The first one seems to be a red herring, the second one tells us nothing.
We know that we shouldn't use it, but we found it.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/442615/const-construct-raises-wrong-messages.html
VSTS ticketId: 783289_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33540</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability of variables from `catch` is "unknown"</Title>
    <Description>The default state for variables is "unknown" until they are initialized. Variables in `catch` should get initialized with a non-null state, but they currently aren't.

```C#
        [Fact]
        [WorkItem(29295, "https://github.com/dotnet/roslyn/issues/29295")]
        public void CatchException_ConstrainedGenericTypeParameter()
        {
            var c = CreateCompilation(@"
class C
{
    static void M&lt;T&gt;() where T : System.Exception?
    {
        try
        {
        }
        catch (T e)
        {
            var e2 = Copy(e);
            e2.ToString(); // 1
            e.ToString();
        }
    }
    static U Copy&lt;U&gt;(U u) =&gt; throw null!;
}
", options: WithNonNullTypesTrue());

            // There is still an issue with catch variables having an "unkonwn" null-state, instead of being initialized with a "not null" state
            // We expect a warning on // 1
            c.VerifyDiagnostics();
        }
```</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33539</IssueID>
    <RepoID>1</RepoID>
    <Title>#nullable in linq does not recognize where filter.</Title>
    <Description>VSF_TYPE_MARKDOWNI have a function that returns a nullable tuple.

```
        static (string Modulename, string Suffix, int Major, int Minor, int Bug, int Build)? ParseFileName(string FileName) {
```
I use it in a LINQ statement:

```
            var SubFolders = diSetupFolder.EnumerateDirectories().Select(di =&amp;gt; (di, Parsed: ParseFileName(di.Name))).
                    Where(t =&amp;gt; t.Parsed != null).
#pragma warning disable CS8629 // Nullable value type may be null. // The line above precludes t.Parsed being null so t.Parsed.Value should not be a problem.
                    OrderByDescending(t =&amp;gt; t.Parsed.Value).
                    Select(t =&amp;gt; (t.di, Parsed: t.Parsed.Value));
#pragma warning restore CS8629 // Nullable value type may be null.
```
The where clause precludes t.Parsed being null, so there should be no problem using t.Parsed.Value. Without the pragmas, I get warnings.

Full code attached.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/437256/nullable-in-linq-does-not-recognize-where-filter.html
VSTS ticketId: 779106_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33538</IssueID>
    <RepoID>1</RepoID>
    <Title>VBCSCompiler not cancelling when existing VS</Title>
    <Description>I have a lot of analyzers for a particular build configuration and even after exiting VS, VBCSCompiler will continue to run - looks like cancellation when there are slow analyzers is no longer working in latest preview.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/438750/vbcscompiler-not-cancelling-when-existing-vs.html
VSTS ticketId: 780026_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33537</IssueID>
    <RepoID>1</RepoID>
    <Title>nullable analysis crashes visual studio</Title>
    <Description>VSF_TYPE_MARKDOWN1. create new `Console App (.NET Core)`
2. Set `LangVersion` to `8.0` and `NullableContextOptions` to `enable` in csproj.
3. Write `null! as object` visual studio freezes immediately and restart automatically.

Windows 10 Pro 1809 Build 17763.253
Visual Studio Enterprise 2019 Preview Version 16.0.0 Preview 2.0

repro: 100% (8/8)

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/441863/nullable-analysis-crashes-visual-studio.html
VSTS ticketId: 782310_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33536</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33535</IssueID>
    <RepoID>1</RepoID>
    <Title>An invocation of a "non-virtual" delegate to a default interface implementation calls the method virtually</Title>
    <Description>The underlying CLR issue is tracked here https://github.com/dotnet/coreclr/issues/22728.
A number of test scenarios are affected by this issue and relevant portions of unit-tests are temporarily disabled. Should be enabled once the underlying issue is fixed.

- Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.DefaultInterfaceImplementationTests.ExplicitBase_107_Delegate
- Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.DefaultInterfaceImplementationTests.ExplicitBase_150_Delegate</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33534</IssueID>
    <RepoID>1</RepoID>
    <Title>Change method signature should allow adding additional parameters to the method</Title>
    <Description>While 15.8 provides a way to add a method parameter by modifying the invocation of a method, this breaks any other invocations of the method (which will continue to pass the old argument list). It would be good to have a dialog (or some other way) that lets you modify a method signature. You could provide default arguments for new parameters, including using a variable in scope at the invocation if it was the only one of the type. VS has a similar dialog, but it only allows reordering and removing parameters.</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33533</IssueID>
    <RepoID>1</RepoID>
    <Title>If an assignment requires a cast to make it compile, add a refactoring that will introduce cast refactoring</Title>
    <Description>Introduce cast refactoring - if an assignment requires a cast to make it compile, add a refactoring that will add the cast to the right side of the assignment</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33532</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide a way to visually inspect the inheritance hierarchy </Title>
    <Description>View type/member hierarchy - display a hierarchy with links to base and derived types/members. 

Go To Implementation provides a list of derived types/members, but without (a) base types/members or (b) showing the inheritance relationship between different items</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33531</IssueID>
    <RepoID>1</RepoID>
    <Title>Add initial stub public API.</Title>
    <Description>Adds an initial stub api implementation for the nullable public APIs. The only real implementation here is the implementation of the `SymbolDisplay` apis. @dotnet/roslyn-compiler @jasonmalinowski for review.</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33530</IssueID>
    <RepoID>1</RepoID>
    <Title>Add braces refactoring should work for arbitrary selection </Title>
    <Description>currently, putting the cursor on an if statement without braces will bring up this refactoring. Also allow Add braces around whatever the current multi-line selection is.</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33529</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't make color changes when in high contrast mode</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/33525

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

User changes Windows High Contrast theme when in high contrast mode with enhanced colors enabled.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/33525

### Workarounds, if any

User can disable enhanced colors and click 'Use Defaults' in Fonts and Colors options page.

### Risk

Minimal

### Performance impact

None.

### Is this a regression from a previous update?

N/A

### Root cause analysis

Applying enhanced colors did not take high contrast mode into account.

### How was the bug found?

Reported by internal user during dogfooding.

&lt;/details&gt;</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33528</IssueID>
    <RepoID>1</RepoID>
    <Title>Add ITypeSymbol.IsReadOnly public API</Title>
    <Description>Resolves #23792 </Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33527</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch Expression Evaluates to wrong type</Title>
    <Description>**Version Used**: 
Visual Studio 2019 (16.0.0) Preview 3, C# 8

**Steps to Reproduce**:
The following code gives an error:
   
```csharp
    int n = 1;
    string s = (n % 2) switch { 0 =&gt; "even", _ =&gt; "odd" } + " number";
```
&gt;   Operator '+' cannot be applied to operand of type 'string'

**Observed Behavior**
The compiler seems to evaluate the type of the switch-expression-as-a-whole by the expression before ```switch``` keyword (in this case ```int```?)

**Expected Behavior**:
It seems more logical to evaluate it by the 'return value of the switch expression (in this case ```string```).

**Note**
Putting brackets around the switch expression, mitigates this error. But this should not be needed I think.
```csharp
      string s = ( (n % 2) switch { 0 =&gt; "even", _ =&gt; "odd" } ) + " number";
```

</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33526</IssueID>
    <RepoID>1</RepoID>
    <Title>Pure null tests should affect both branches</Title>
    <Description>From LDM 2/20/2019 and 3/6/2019 (adjusted `{}` and `derived is Base`):

"Pure" tests should set the null-state of `x` in both branches:
1.	`x == null`
2.	`x != null`
3.	`(Type)x == null`
4.	`(Type)x != null`
5.	`x is null`
8.	`x?.F`
9.	`x?[i]`
10.	`x ?? y`
11.	`bool [EqualsBehavior]MyEquals(object other)`

Note: pure tests 1 through 5 (included) are implemented or verified in https://github.com/dotnet/roslyn/pull/33929

"Not pure" tests should only set the null-state of `x` in one branch:
1.	`x is Y // where Y is not a base of X`
2.	`x is Y y`
3.	`x is Y _`
4.	`x is C { Property = 3 }`
5.	`TryGetValue([NotNullWhenTrue])`
6.	`[NotNulllWhenFalse] string.IsNullOrEmpty(s)`
7.	`derived is Base`
8.	`x is { }`

`switch` expressions and statements should also use this notion of "pure test" (LDM 3/6/2019).

When closing this issue, we should also close https://github.com/dotnet/roslyn/issues/33526 (and remove references to both issues from code)</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33525</IssueID>
    <RepoID>1</RepoID>
    <Title>Enhanced colors are being applied when in High Contrast mode</Title>
    <Description>A user reported that the enhanced colors where being applied when in High Contrast mode. We should not make any changes when in high contrast mode.</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33524</IssueID>
    <RepoID>1</RepoID>
    <Title>SendInput using scan codes when available</Title>
    <Description>Builds on #33514 and #33513.

* Use hardware scan codes instead of virtual key codes where applicable, since some builds of Windows handle these more reliably ([internal reference](https://microsoft.visualstudio.com/OS/_workitems/edit/13780108)).
* Force focus to devenv before using `SendInput` to ensure input sequences are cleanly entered. 

Fixes #33111
Fixes #33112</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33523</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a synced use enhanced color checkbox to C# and Basic advanced options.</Title>
    <Description>Moves unsaved option changes out of the WPF Bindings into an OptionStore class. This allows for the C# and Basic option checkboxes to stay in sync.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

The "Use enhanced colors for managed languages" checkbox will be removed from the Preview Features option page with this PR https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/164798. This adds back the "Use enhanced colors for managed languages" checkbox into pages under C# and Basic.

### Bugs this fixes

N/A

### Workarounds, if any

N/A

### Risk

Minimal

### Performance impact

None.

### Is this a regression from a previous update?

N/A

### Root cause analysis

N/A

### How was the bug found?

N/A

&lt;/details&gt;</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33522</IssueID>
    <RepoID>1</RepoID>
    <Title>Move features off of calling into SymbolEquivalenceComparer directly.</Title>
    <Description>This is a work in progress as I audit the codebase. 

Calling SymbolEquivalenceComparer directly does nto properly give the right semantics when forwarded types are invlved. This often leads to problems in cases where we have a mix of framework/standard projects with symbols across each.  This PR introduces a new effective entrypoint `SymbolFinder.AreEquivalent(solution, symAndProj1, symAndProj2)` that features should use instead. 
</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33521</IssueID>
    <RepoID>1</RepoID>
    <Title>Miscellaneous workspace cleanup</Title>
    <Description>I've been investigating a Watson that doesn't make any sense, and as a result have been staring at lots of Workspace code. There's been a few places that made me go "wait, what is this all doing?" only to find out I could delete things. Since deleting code is sometimes the best way to understand it, this is me accumulating those deletions.

Recommend reviewing a commit at a time since there's otherwise no cohesion between these commits.</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33520</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust process logging for applicability to current builds</Title>
    <Description>* Remove vbc2.exe since it's no longer used
* Add xunit.console.exe (64-bit runner)

Addresses feedback from #33512. </Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33519</IssueID>
    <RepoID>1</RepoID>
    <Title>[Feature] create ObsoleteAttribute CodeFix to replace obsolete method with new one</Title>
    <Description>a possible way could be adding new properties to the `ObsoleteAttribute`

```cs
public sealed class ObsoleteAttribute : Attribute
{
    public Type NewType { get; set; }

    public ObsoleteAttribute(Type newType)
    {
        _message = $"Use {newType.Name} instead.";
        _error = false;
        NewType = newType;
    }

    public ObsoleteAttribute(Type newType, bool error)
    {
        _message = $"Use {newType.Name} instead.";
        _error = error;
        NewType = newType;
    }
}
```

then the warning could also suggest a rename</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33517</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not skip editorconfig integration tests</Title>
    <Description>* Add `CriticalWpfFactAttribute` and `CriticalWpfTheoryAttribute` for essential tests that cannot be skipped
* Unskip critical .editorconfig Fix All tests (there are _no other tests_ covering these feature areas, so these tests are essential to ensuring product quality)

Related to #30015</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33516</IssueID>
    <RepoID>1</RepoID>
    <Title>Include the hidden NUL in max path length calculation</Title>
    <Description>This was missed in #33509, but the build didn't fail _that time_ so we weren't alerted to it until later.</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33515</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not apply Fix All operations to generated code</Title>
    <Description>Fixes #33507 

### Customer scenario

A customer applies a Fix All in Project or Fix All in Solution operation for **Remove Unnecessary Usings**, and generated source files (e.g. RESX generated files or WinForms designer code) is changed.

### Bugs this fixes

#33507 

### Workarounds, if any

Apply fixes to documents individually.

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

Negligible improvement. Less work is done in a case where would should not be done.

### Is this a regression from a previous update?

Yes, this is a regression from 15.0.

### Root cause analysis

There were previously no tests for this feature behavior. Tests covering numerous edge cases of this feature behavior have been added.

### How was the bug found?

Internal report (dogfood).

### Test documentation updated?

No.
</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33514</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable broken checksum validation</Title>
    <Description>The failed assertion causes tests to hang.

See #33476</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33513</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix failure to print test results</Title>
    <Description>Fixes this message following a failed integration test run:

```
Unhandled Exception: System.NotSupportedException: The given path's format is not supported.
   at System.Security.Permissions.FileIOPermission.EmulateFileIOPermissionChecks(String fullPath)
   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
   at System.IO.StreamWriter.CreateFile(String path, Boolean append, Boolean checkHost)
   at System.IO.StreamWriter..ctor(String path, Boolean append, Encoding encoding, Int32 bufferSize, Boolean checkHost)
   at System.IO.File.InternalWriteAllText(String path, String contents, Encoding encoding, Boolean checkHost)
   at RunTests.TestRunner.PrintFailedTestResult(TestResult testResult) in /_/src/Tools/Source/RunTests/TestRunner.cs:line 166
   at RunTests.TestRunner.Print(List`1 testResults) in /_/src/Tools/Source/RunTests/TestRunner.cs:line 130
   at RunTests.TestRunner.&lt;RunAllAsync&gt;d__3.MoveNext() in /_/src/Tools/Source/RunTests/TestRunner.cs:line 117
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at RunTests.Program.&lt;RunCore&gt;d__5.MoveNext() in /_/src/Tools/Source/RunTests/Program.cs:line 107
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at RunTests.Program.&lt;Run&gt;d__4.MoveNext() in /_/src/Tools/Source/RunTests/Program.cs:line 88
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at RunTests.Program.Main(String[] args) in /_/src/Tools/Source/RunTests/Program.cs:line 47
```</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33512</IssueID>
    <RepoID>1</RepoID>
    <Title>Include RunTests.exe and xunit.console.x86.exe in .NET event collection</Title>
    <Description>Captures logs necessary to diagnose crashes during test runs.</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33511</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33510</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] When both completion and signature help are showing, arrow keys incorrectly change signature help</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 4.0 [28619.22.d16.0]

This is a regression from 15.9.

When both signature help and completion window are open, the arrow keys affect the signature help, instead of what previously used to affect the completion window:
![signaturehelp](https://user-images.githubusercontent.com/1103906/53073040-0c775300-353b-11e9-9a23-c5fb278985e1.gif)
</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33509</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid trying to write log files longer than max path</Title>
    <Description>Fixes #12106</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33508</IssueID>
    <RepoID>1</RepoID>
    <Title>Short-term workaround for crash on missing member on tuple literal</Title>
    <Description>## Customer scenario
Nullability analysis does re-inference on methods and tuple literals. If you type `(x, y).Missing()`, the compiler and IDE will crash.

## Bugs this fixes
Relates to Watson https://devdiv.visualstudio.com/DevDiv/_workitems/edit/788968

## Workarounds, if any
You could avoid typing this, and instead use an extracted variable for the tuple `var t = (x, y); t. Missing();`

## Risk, Performance impact
Low. The mitigation is a narrow fix to avoid the crash.

## Is this a regression from a previous update?
Yes, the Watson issue appeared with preview2, when we started doing re-inference on tuple literals.

## Root cause analysis
Adding a workaround for a crash to provide more time for a full solution.

## How was the bug found?
Watson

Relates to https://devdiv.visualstudio.com/DevDiv/_workitems/edit/788968

----

Ask-mode approval is tracked by https://devdiv.visualstudio.com/DevDiv/_workitems/edit/796819</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33507</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] Fix alls have started running in generated code</Title>
    <Description>This was fixed during the Dev15 cycle, but seems to have been regressed again. 

1.
```
&gt; git clone http://github.com/dotnet/project-system
&gt; cd project-system
project-system&gt; git checkout 9bac1e669c67e5d0c44486be595d7ec6323461ca
project-system&gt; build.cmd
project-system&gt; ProjectSystem.sln
```
2. Navigate to `ActiveEditorContextTracker.cs`
3. Drop the code fix over `using System.Threading.Tasks` to **Remove unnecessary usings** -&gt; **Solution**

**Expected:**  (15.9)
Two results:
![image](https://user-images.githubusercontent.com/1103906/53065694-ef358b00-3520-11e9-82cf-6ece412403fc.png)

**Actual:** (16.0 Preview 4)
100s of results in auto-generated files:
![image](https://user-images.githubusercontent.com/1103906/53065718-ffe60100-3520-11e9-8901-d09b3d910331.png)


</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33506</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up threading hacks around file watching</Title>
    <Description>There's a few hacks right now in our codebase which need to be removed since they make unit testing difficult:

1. [This hack](https://github.com/dotnet/roslyn/blob/c4bb224f68510e8b0d54a85fbbb068e94e633e6c/src/VisualStudio/Core/Def/Implementation/ProjectSystem/RuleSets/VisualStudioRuleSetManager.RuleSetFile.cs#L170-L171) which defers updating of rule sets when the file is modified. It's now obsolete since we are receiving file change events no longer on the UI thread, and our newer pattern for waiting for files never waits on the UI thread for a background file change mutation operation either. When that's removed, we can remove that async waiter Feature entirely, since it's not otherwise needed.
2. [This hack](https://github.com/dotnet/roslyn/blob/8501a7c0da777222a1e10eb8b67a1516e7f606f8/src/VisualStudio/Core/Def/Implementation/ProjectSystem/FileChangeWatcherProvider.cs#L24) where we're doing a SwitchToMainThreadAsync. That was working around a bug where GetServiceAsync() when called from a background thread might deadlock in the service manager if the UI thread was doing something. That shell bug has been fixed but we haven't cleaned up that hack. This also means we can just implement that code in a straightforward way atop the service provider which will work cleanly in mocks.
</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33505</IssueID>
    <RepoID>1</RepoID>
    <Title>Subscribe to and process rule set file changes</Title>
    <Description>Despite all the effort to free-thread all our ruleset handling around file change notifications, we forgot to actually subscribe to the file change notifications. This fixes that.

Fixes https://github.com/dotnet/roslyn/issues/33465.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Customer updates a .ruleset file. This could happen because they:

1. Change the severity of a rule in the ruleset editor. 
2. Switched source control branches.
3. Manually edited the file.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/33465

### Workarounds, if any

You'd have two options:

1. Unload/reload the impacted projects, which if you have more than one or two projects is a pain.
2. Restart Visual Studio entirely.

### Risk

Moderate. The code is straightforward but since it's adding event handlers due to file watching there's always some surprises that might happen.

### Performance impact

None.

### Is this a regression from a previous update?

Yes. We broke this in Visual Studio 2019 Preview 1 and didn't notice.

### Root cause analysis

We rewrote all of the project system handling around options, and the code that actually subscribes to the appropriate event was lost in the rewrite. We don't have any unit tests (as we now know!) and this isn't being covered via manual testing, and clearly isn't being covered by dogfooding either.

We're adding a test.

### How was the bug found?

Internal dogfooding. Thanks @AArnott.

&lt;/details&gt;</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33504</IssueID>
    <RepoID>1</RepoID>
    <Title>make solution crawler to run all pending work from previous solution before processing work from new solution</Title>
    <Description>existing solution crawler is designed not to have ordering between pending tasks of different documents/projects. it only guarantees states preserved within the same document/project.

for example, document changed events can fire for document A and document B, but document B has a focus, then event for document B will processed before document A even though events are fired in opposite order.

but if document A is changed and then removed, the ordering of document change and document removed event will be either preserved or aggregated.

this also means, if solution "A" is closed and new solution "B" is opened and then someone opens a document "C" from new solution B and type, then document "C" will get higher priority over "remove document" events from old solution "A".

we are having some feedback such as this (https://github.com/dotnet/testimpact/pull/2727) or stale errors in error list after solution close, so we are going to change solution crawler to process all pending works from the previous solution before processing events from new solution making clear "clean up" boundary between solutions open/close or configuration changes.

* we might or might not still give special handling for active file (file with focus)</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33503</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 'dotnet/master' into DefaultInterfaceImplementation</Title>
    <Description>
    </Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33502</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix deployment of ILAsm when building from VS</Title>
    <Description>It seems that msbuild sometimes does not execute target that specifies `AfterTargets="Build"` when invoked from Visual Studio. Changing it to `BeforeTargets="AfterBuild"` fixes the issue.</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33501</IssueID>
    <RepoID>1</RepoID>
    <Title>Bootstrap builds should use ExitingTraceListener</Title>
    <Description>The bootstrap builds of the compiler today are using the default trace
listener which presents a dialog. That means when a `Debug.Assert` call
fires we end up hanging the build in Azure.

The intent was always for the bootstrap builds to use the
`ExitingTraceListener`. This way they exit with a crash and call stack
that allows the compiler team to diagnose the failure.

The behavior of `Debug.Assert` showing a dialog is the most likely
explanation for our current random hangs in the determinism leg. That is
the only place we still use a `DEBUG + BOOTSTRAP` build. The symptoms
line up. If that's the case this will start showing us the stack trace
of the assert.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33500</IssueID>
    <RepoID>1</RepoID>
    <Title>Use dotnet-external-vs2019-preview for integration testing</Title>
    <Description>
    </Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33499</IssueID>
    <RepoID>1</RepoID>
    <Title>Pattern variables are treated as oblivious</Title>
    <Description>The following code should cause a warning when `null` is assigned to the non-nullable variable `s`, but no warning is produced.

``` c#
#nullable enable
class Test
{
    static void M(object o)
    {
        if (o is string s) { }
        s = null;
    }
}
```
</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33498</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix stack overflow where overload resolution gets parameter type attributes</Title>
    <Description>Fixes #33388 by refraining from normalizing task-like types when binding an attribute argument.

I'd like to make sure I completely understand the implications of this change. If we stop normalizing task-like parameters to attribute constructors, what user-facing consequences could possibly occur?</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33497</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpAddImportCodeFixProvider crashes by unknown type</Title>
    <Description>When adding a program-element like variable/property etc., if the type is an unknown (not yet added nuget package, or older version library which does not contain the new interface) type then the CSharpAddImportCodeFixProvider crashes.
Stacktrace:

System.AggregateException : One or more errors occurred. ---&amp;gt; A reference to the component 'LIG.FW.Interface' already exists in the project.
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&amp;lt;&amp;gt;c__DisplayClass18_0.&amp;lt;InvokeCore&amp;gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&amp;gt; (Inner Exception #0) System.Runtime.InteropServices.COMException : A reference to the component 'LIG.FW.Interface' already exists in the project.
   at VSLangProj.References.AddProject(Project pProject)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyProjectReferenceAdded(ProjectId projectId,ProjectReference projectReference)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&amp;lt;Unknown Parameters&amp;gt;)&amp;lt;---

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/438080/csharpaddimportcodefixprovider-crashes-by-unknown.html
VSTS ticketId: 779478_
_These are the original issue comments:_

Visual Studio Feedback System on 2/17/2019, 02:50 AM (2 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33496</IssueID>
    <RepoID>1</RepoID>
    <Title>pool incrementalHash so that we don't create one unnecessarily</Title>
    <Description>save cost of creating new incremental hash.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33495</IssueID>
    <RepoID>1</RepoID>
    <Title>Extension method gives odd error message for unrelated type.</Title>
    <Description>Given the below code, the compiler gives: 
```
error CS1929: 'Vector128&lt;short&gt;' does not contain a definition for 'WithElement' and the best extension method overload 'Vector256.WithElement&lt;int&gt;(Vector256&lt;int&gt;, int, int)' requires a receiver of type 'Vector256&lt;int&gt;'
```

This seems odd given that `Vector256.WithElement` should never be considered, let alone be "the best extension method overload", since the type of `vs` is `Vector128&lt;short&gt;`.

Repro Code ([sharplab](https://sharplab.io/#v2:EYLgHgbALANAJiA1AHwAIGYAEqBMmAqApgM4AuAwgDYCGxxAsAFADeTm72WqAjBNlARKkAsoVIALAPZwAFAEo2HVow6rMANUIBjUpIBO3HAA4APMSl7SAPkwA3YpgC8mOIQBm1AK6VSAbkVqdg7O9gB0AOoAlhIAopSEALaEAHakMgAMMJgAtNxy/iocAL5MJYxMGNi8mAAO1JaR1JTYeJo6+oZGTMqqlTx8bboGxib4NlGx8Umpo1YyEpEOgx0jY3baQ1mRqZjbrmBZ+HZNnoRymADu4oR6hASYIJhkep46mMyYEnqSF5jJ3pRfJgymVKrdqHBJMlKABPWr1UiNZrPV6kDQbFamNYBS7XW73R4onTdHE1PSRWzUUh3cGQ6Fw7ZogD6cE8CQSMIACuSEtEKYQCqCuNU6g0mi10e09DgAKwQEmFdh9arLaVy2aYCbiOKJFKkWbzcSLSVDWUQDW2DF6LY7PaEA73SmUU7nK43O5HQmkF5vD5fH5/AFAkEVLC0qGw+Fi5He1Em/Rm2Y4t34z1PWPElik8mU6mYcP03Y7FlsjncyK8xGWwVAA===)):
```csharp
public class TestClass
{
    public static void TestMethod()
    {
        Vector128&lt;short&gt; vs = default;
        vs = vs.WithElement(0, -1);
    }
}

public static partial class Vector128
{
    public static Vector128&lt;T&gt; WithElement&lt;T&gt;(this Vector128&lt;T&gt; vector, int index, T value) where T : struct { throw null; }
}
public readonly partial struct Vector128&lt;T&gt; 
    where T : struct
{
    private readonly int _dummyPrimitive;
}
public static partial class Vector256
{
    public static Vector256&lt;T&gt; WithElement&lt;T&gt;(this Vector256&lt;T&gt; vector, int index, T value) where T : struct { throw null; }
}
public readonly partial struct Vector256&lt;T&gt;
    where T : struct
{
    private readonly int _dummyPrimitive;
}
```</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33494</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert to struct has errors on uninitiated members</Title>
    <Description>### Customer scenario
1. Have code

```cs
public class Class
{
    void MyMethod()
    {
        var tuple = (3, "string");
    }
```

2. Place cursor before open parenthesis and type (Ctrl+.) to open codefixes
3. Choose "convert to struct" and run the refactoring.

**Expected**
The code generated is valid.

**Actual**
The code generated is invalid: it misses definitions for fields corresponding to non-named in the tuple such as Item1, Item2 and so on.

### Bugs this fixes
#33407

### Workarounds, if any
Manually add code for those fields.

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
This is a new feature just added. It was added with this defect.

### Root cause analysis
Test cases actually covered the situation but code provided in those tests cases contained errors. We may need to consider adding a validation of code generated in test scenarios.

### How was the bug found?
Internal customers</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33493</IssueID>
    <RepoID>1</RepoID>
    <Title>T? improperly permitted when T is constrained to an interface</Title>
    <Description>The following snippet of code from our regression tests should complain that `T?` is not permitted because it is not known to be a value type or a reference type.  But we permit it without error.

``` c#
    static void F5&lt;T&gt;(T t5) where T : I&lt;T?&gt;
```
</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33492</IssueID>
    <RepoID>1</RepoID>
    <Title>Question - C# - Release/Debug build options.</Title>
    <Description>Hi,

I've never understood what _Release/Debug_ actually amounts to when we compile C# code. I know that _Release_ performs various optimizations but do not know if this optimizes the _generated IL_ or if it causes the JIT to generate optimized _machine instruction sequences_ or both.

Some info about this would be great (also any articles or blog posts too would be neat).

Thanks.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33491</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable docker caching up to the cache-busted layers</Title>
    <Description>The machines should have cycled by now. This will improve performance of the mono legs.

Fixes #32916 </Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33490</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33489</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33488</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3-vs-deps to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33487</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33486</IssueID>
    <RepoID>1</RepoID>
    <Title>Overload resolution for float prefers enum over object</Title>
    <Description>**Version Used**: 
Microsoft (R) Visual C# Compiler version 2.8.2.62916 (2ad4aabc)

**Steps to Reproduce**:

1. Compile and run the following test case

```using System;
class Program
{
    enum MyEnum { Zero }
    static void Main(string[] args) {
        Print(0.0f);
        Print(0.1f);
    }

    static void Print(object a) {
        Console.WriteLine(a);
    }

    static void Print(MyEnum e) {
        Console.WriteLine(e);
    }
}
```

**Expected Behavior**:
0
0.1

**Actual Behavior**:
Zero
0.1

Corresponds to Unity issue: https://issuetracker.unity3d.com/issues/gameobject-dot-sendmessage-doesnt-accept-value-as-a-function-argument-correctly-in-the-net-4-dot-x-scripting-runtime</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33485</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33484</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33483</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0
git reset --hard upstream/dev16.0
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33482</IssueID>
    <RepoID>1</RepoID>
    <Title>Poor error recovery when declaring a pointer to an array type</Title>
    <Description>**Version Used**: master

**Steps to Reproduce**:

```csharp
using System.Collections.Generic;

class C
{
    unsafe void M1()
    {
        int[] *y;
        List&lt;int&gt; *z;
    }
}
```
https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAGAAhwEYAWAbgFgAoGnAJgIGEaBvGgzggVwDsoIAMzhFSBALLEAFAEoOXdtS7KCaXjADaAXQIAqAJ5UlKzgBk0sADxqYAPj0AvI8oC+NF0A=

**Expected Behavior**:

Following errors are produced:

&gt; error CS0208: Cannot take the address of, get the size of, or declare a pointer to a managed type ('int[]')
&gt; 
&gt; error CS0208: Cannot take the address of, get the size of, or declare a pointer to a managed type ('List&lt;int&gt;')


**Actual Behavior**:

Following errors are produced:

&gt; error CS1001: Identifier expected
&gt; error CS1002: ; expected
&gt; error CS0103: The name 'y' does not exist in the current context
&gt; error CS0201: Only assignment, call, increment, decrement, await, and new object expressions can be used as a statement
&gt; error CS0208: Cannot take the address of, get the size of, or declare a pointer to a managed type ('List&lt;int&gt;')
</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33481</IssueID>
    <RepoID>1</RepoID>
    <Title>Hitting assertion in GetImplicitTupleLiteralConversion with typeless tuple</Title>
    <Description>
```C#
        [Fact]
        public void TestTypelessTuple()
        {
            var comp = CreateCompilation(@"
class C
{
    void M()
    {
        return (null, string.Empty);
    }
}", options: TestOptions.ReleaseDll);

            // Hits assertion in  GetImplicitTupleLiteralConversion
            comp.VerifyDiagnostics();
        }

```

FYI @cston </Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33480</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33479</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33478</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33476</IssueID>
    <RepoID>1</RepoID>
    <Title>Differences detected in solution checksum</Title>
    <Description>**Version Used**: fec31a956848c23417baf5b02f6a83c4095a3a37

**Steps to Reproduce**:

1. Run `WorkspacesNetCore` integration tests in **Debug** configuration

**Expected Behavior**:

Tests pass.

**Actual Behavior**:

![image](https://user-images.githubusercontent.com/1408396/52971647-dd67b280-337d-11e9-95ee-f241982ba87e.png)
</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33475</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure pipename argument quoted</Title>
    <Description>The name for the named pipe used between MSBuild and VBCSCompiler is
generated from a combination of values including the current user name,
specifically `%USERNAME%`. It is possible for this value to have spaces
in it and hence the argument must be quoted when passing it to the
command line of VBCSCompiler instances.

Regression initially introduced: #32257</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33474</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure pipename argument quoted</Title>
    <Description>The name for the named pipe used between MSBuild and VBCSCompiler is
generated from a combination of values including the current user name,
specifically `%USERNAME%`. It is possible for this value to have spaces
in it and hence the argument must be quoted when passing it to the
command line of VBCSCompiler instances.

Regression initially introduced: #32257</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>18/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33473</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability warnings should be removed if checked in linq expressions</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.2
VisualStudio.16.Preview/16.0.0-pre.2.2+28602.52
Microsoft .NET Framework
Version 4.7.03056

**Target framework:** netcoreapp3.0

**Steps to Reproduce**:

The following sample code shows the issue:

![image](https://user-images.githubusercontent.com/9963251/52963779-fc2b7080-33a0-11e9-943c-91e7bcf8c543.png)

If instead we use a variable the null check warning dissapears:

![image](https://user-images.githubusercontent.com/9963251/52964316-48c37b80-33a2-11e9-879d-98c3317cec37.png)


**Some observations:**

- This only seems to be the case for nested objects.
- Wrapping the whole linq expression in an if statement does not help, the way of checking for null seems to be irrelevant.

**Expected Behavior**:

The previous null check should remove the warning from the LINQ expression.

**Actual Behavior**:

It does not get removed.</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33472</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect implicit casting with ternary operator</Title>
    <Description>**Rosylin 7.3**: 

When using the ternary operator ?: in order to assign either an int? or decimal? into an object variable, the int? value gets implicitly casted into decimal?

```
var defaultValueDecimal = (decimal?)10.0;
var defaultValueInt = (int?)defaultValueDecimal;
object defaultValue = defaultValueDecimal == defaultValueInt ? defaultValueInt : defaultValueDecimal;
Console.WriteLine(defaultValue?.GetType().Name)
```
**Expected Behavior**:
It should print Int32

**Actual Behavior**:
It prints Decimal

If I explicitly cast both results to object then it works
```
var defaultValueDecimal = (decimal?)10.0;
var defaultValueInt = (int?)defaultValueDecimal;
object defaultValue = defaultValueDecimal == defaultValueInt ? (object)defaultValueInt : (object)defaultValueDecimal;
Console.WriteLine(defaultValue?.GetType().Name)
```

**Expected Behavior**:
It should print Int32 and it does! however the compiler emits an warning saying "Cast is redundant"

I believe that the warning is correct and the implicit casting is incorrect.</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33471</IssueID>
    <RepoID>1</RepoID>
    <Title>“x &amp; y” can be false when both x and y are true</Title>
    <Description>Original post: https://stackoverflow.com/questions/24683107/how-can-x-y-be-false-when-both-x-and-y-are-true

Just passing this on since it seems to be an existing discrepancy between the compiler &amp; C# specification.

Here's the main body of explanation from that external post:

&gt; The puzzle is exploiting what, in my opinion, is a bug in the C# compiler. (The bug affects VB.NET as well.)
&gt; 
&gt; In the C# 5.0 specification, §4.1.8 says that "The possible values of type bool are true and false", and §7.11.3 says that operator &amp;(bool x, bool y) is a logical operator:
&gt; 
&gt; The result of x &amp; y is true if both x and y are true. Otherwise, the result is false.
&gt; 
&gt; It's obviously a violation of the specification for true &amp; true to yield false. What's going on?
&gt; 
&gt; At run time, a bool is represented by a 1-byte integer. The C# compiler uses 0 to represent false and 1 to represent true. To implement the &amp; operator, the C# compiler emits a bitwise AND instruction in the generated IL. At first glance, this seems to be okay: bitwise AND operations involving 0 and 1 correspond exactly with logical AND operations involving false and true.
&gt; 
&gt; However, §III.1.1.2 of the CLI specification explicitly allows a bool to be represented by an integer other than 0 or 1:
&gt; 
&gt; A CLI Boolean type occupies 1 byte in memory. A bit pattern of all zeroes denotes a value of false. A bit pattern with any one or more bits set (analogous to a non-zero integer) denotes a value of true.
&gt; 
&gt; By going beyond the scope of C#, it is indeed possible—and perfectly legal—to create a bool whose value is, say, 2, thus causing &amp; to behave unexpectedly. This is what the Pex site is doing.
&gt; 
&gt; Here's a demonstration:
&gt; 
&gt; using System;
&gt; using System.Reflection.Emit;
&gt; 
&gt; class Program
&gt; {
&gt;     static void Main()
&gt;     {
&gt;         DynamicMethod method =
&gt;             new DynamicMethod("ByteToBoolean", typeof(bool), new[] { typeof(byte) });
&gt;         ILGenerator il = method.GetILGenerator();
&gt;         il.Emit(OpCodes.Ldarg_0); // Load the byte argument...
&gt;         il.Emit(OpCodes.Ret);     // and "cast" it directly to bool.
&gt;         var byteToBoolean =
&gt;             (Func&lt;byte, bool&gt;)method.CreateDelegate(typeof(Func&lt;byte, bool&gt;));
&gt; 
&gt;         bool x = true;
&gt;         bool y = byteToBoolean(2);
&gt;         Console.WriteLine(x);               // True
&gt;         Console.WriteLine(y);               // True
&gt;         Console.WriteLine(x &amp;&amp; y);          // True
&gt;         Console.WriteLine(x &amp; y);           // False (!) because 1 &amp; 2 == 0
&gt;         Console.WriteLine(y.Equals(false)); // False
&gt;         Console.WriteLine(y.Equals(true));  // False (!) because 2 != 1
&gt;     }
&gt; }
&gt; So the answers to your questions are:
&gt; 
&gt; Currently, it's possible for x &amp; y and x &amp;&amp; y to have different values. However, this behavior violates the C# specification.
&gt; Currently, you can use Boolean.Equals (as shown above) to differentiate between true values. However, this behavior violates the CLI specification of Boolean.Equals.</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>18/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33470</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense completion fails for 'else' after 'else if'</Title>
    <Description>```csharp
if (condition)
  DoSomething();
// At this point, Intellisense correctly suggests 'else' as a completion
else if (condition2)
  DoSomethingElse();
// At this point, Intellisense no longer recognizes 'else' as a valid keyword and suggests some ridiculous completions instead
else
  ...
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/431613/intellisense-completion-fails-for-else-after-else.html
VSTS ticketId: 774044_
_These are the original issue comments:_

Cytheria Ji [MSFT] on 1/21/2019, 04:52 PM (27 days ago): &lt;p&gt;Thank you for your feedback! For us to investigate this further, could you please provide your project language? &lt;/p&gt;&lt;p&gt;We look forward to hearing from you!&lt;/p&gt;

Paul Buddington on 1/22/2019, 07:35 AM (26 days ago): &lt;p&gt;C#, build settings for C# 7.3&lt;/p&gt;&lt;p&gt;I saw this issue with a clean load of Visual Studio Community edition that I installed on a loaner laptop.  I am unable to reproduce the same behavior on my existing Visual Studio Professional 2017 (v15.9.5) installation on my regular laptop, but I have already done a lot to tweak the Intellisense settings on that machine to compensate for all the times Visual Studio thinks it's smarter than I am (e.g. built-in snippets that can't be modified).&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33469</IssueID>
    <RepoID>1</RepoID>
    <Title>Generic extension does not have lambda intellisense.</Title>
    <Description>Then I do something like

```csharp
string[] weekDays = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
weekDays.ForEach(wd =&gt; Console.WriteLine(wd));
```

On that first typing of `wd`, intelliesense gets confused and autocompletes with something it thinks is close but does not act like a normal lamda for a built in linq query. Super annoying.

Example extension

```csharp
        public static void ForEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection, Action&lt;T&gt; action)
        {
            if (collection != null)
            {
                foreach (T item in collection)
                {
                    action(item);
                }
            }
        }
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/442247/generic-extension-does-not-have-lambda-intellisens.html
VSTS ticketId: 782643_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33468</IssueID>
    <RepoID>1</RepoID>
    <Title>Support `end_of_line` and `insert_final_newline` settings in `dotnet-format`</Title>
    <Description>**Version Used**: Git master (c4bd5b23cbcc0182f617c37dc09837bb565e06c7)

**Steps to Reproduce**:

1. Create a project with a simple class
2. Indent with 4 spaces, set line endings to LF, and remove last newline.
3. Add an `.editorconfig` file with the following configuration:

```
[*.{cs,csx,vb,vbx}]
indent_size = 2
end_of_line = crlf
insert_final_newline = true
```

**Expected Behavior**:
2-space indent, new line at the end of the class and CRLF line endings.

**Actual Behavior**:
Just 2-space indent.

While `dotnet-format` output changes depending on EditorConfig settings like `indent_size`, it doesn't seem to respect `end_of_line` or `insert_final_newline`. I don't really understand why because Roslyn apparently reads these settings.

Where should I start looking if I wanted to contribute support for these?

I've seen feature requests like https://github.com/dotnet/roslyn/issues/20356 and https://github.com/dotnet/roslyn/issues/18934, but both target Roslyn (not `dotnet-format` itself), and were closed.

Thanks!
</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33467</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not offer to convert object initializers to a compound assignment.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/33382</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33466</IssueID>
    <RepoID>1</RepoID>
    <Title>.NET Core 2.2 Script execution significantly slower compared to .NET Framework 4.6.2/4.7.2</Title>
    <Description>**Version Used**: master

**Steps to Reproduce**:

Example program:

```csharp
            var watch = new Stopwatch();
            watch.Start();
            for (int i = 0; i &lt; 5000; ++i)
            {
                var script = CSharpScript.Create&lt;int&gt;("1", ScriptOptions.Default);
                int foo = script.RunAsync().Result.ReturnValue;
                if (i % 250 == 0)
                {
                    watch.Stop();
                    Console.WriteLine(watch.ElapsedMilliseconds);
                    watch.Restart();
                }
            }
```

This is a bug in Roslyn according to @sharwell (https://github.com/dotnet/roslyn/issues/33380#issuecomment-463625221)

**Expected Behavior**:
.NET Core should be at least similar fast as .NET Framework

**Actual Behavior**:
Output .NET Core:
```
2552
4872
4320
4490
4648
4426
4675
4255
4395
4314
4409
4459
4589
4560
4855
4904
4775
5011
4801
4978
```

Output .NET Framework:
```
1614
2549
2588
2568
2567
2629
2743
2702
2826
2922
2974
3017
3036
3072
3157
3210
3232
3322
3322
3363
```</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33465</IssueID>
    <RepoID>1</RepoID>
    <Title>Changing rule severity does not update Error List or Solution Explorer item</Title>
    <Description>**Version Used**: VS 2019 Preview 4 (28616.25.d16.0)
This is a **regression** from VS 2017.

**Steps to Reproduce**:

1. Open up any C# project with analyzers installed.
2. Expand the analyzer hierarchy in Solution Explorer so rules are visible.
2. Introduce a violation of that rule into the code so that it shows up in the error list.
3. Right-click on a rule and adjust the severity to Hidden.

**Expected Behavior**:

1. The icon in Solution Explorer for that rule changes to reflect the new severity.
1. The entry in the error list disappears.
1. A `&lt;Rule&gt;` tag is added to the project's .ruleset file to mark the rule hidden.

**Actual Behavior**:

1. The icon **doesn't change** in Solution Explorer
1. The entry **remains visible** in the error list
1. The .ruleset file is in fact changed, as expected after #32990 fixed this part of the overall scenario.</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33464</IssueID>
    <RepoID>1</RepoID>
    <Title>Using-declaration should not trigger RemoveUnusedValues</Title>
    <Description>I suspect this is a compiler issue, as the `AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer` relies on the control flow graph to determine how variables are used.

![image](https://user-images.githubusercontent.com/12466233/52920672-28bd8a80-32c4-11e9-8f0e-82b51439ca2e.png)

![image](https://user-images.githubusercontent.com/12466233/52920667-180d1480-32c4-11e9-99d5-cc59d339e5ec.png)


FYI @mavasani </Description>
    <CreatedDate>17/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33463</IssueID>
    <RepoID>1</RepoID>
    <Title>Add MakeStatementAsynchronous fixer</Title>
    <Description>If you `foreach` on an `IAsyncEnumerable`, or use an `IAsyncDisposable` in a `using` (statement or declaration), the fixer offers to make the statement asynchronous (ie. `await foreach` or `await using`).

![image](https://user-images.githubusercontent.com/12466233/52920521-0e82ad00-32c2-11e9-8847-83d5a9559ea9.png)

FYI @chsienki </Description>
    <CreatedDate>17/02/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33462</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix issue #33242: ExtractMethodCodeRefactoringProvider throws invalid cast when used within the body of a constructor expression-member body</Title>
    <Description>Fixes #33242 
This crash was caused by [`CSharpCodeGenerator.CreateStatementsOrInitializerToInsertAtCallSiteAsync()` ](https://github.com/dotnet/roslyn/blob/de57f6daeee86908cc9dcd0386d2f66d60e8cee1/src/Features/CSharp/Portable/ExtractMethod/CSharpMethodExtractor.CSharpCodeGenerator.cs#L137-L140) not evaluating the expression bodied constructor as such, since [`MemberDeclarationSyntaxExtensions.GetExpressionBody()`](https://github.com/dotnet/roslyn/blob/de57f6daeee86908cc9dcd0386d2f66d60e8cee1/src/Workspaces/CSharp/Portable/Extensions/MemberDeclarationSyntaxExtensions.cs#L282-L299) wasn't updated yet to handle expression bodied constructors.

It seemed most appropriate to handle that in `MemberDeclarationSyntaxExtensions`, and not in `CSharpMethodExtractor.CSharpCodeGenerator`.</Description>
    <CreatedDate>17/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33461</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/02/2019</CreatedDate>
    <ClosedDate>17/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33460</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0032 suggestion on improper case</Title>
    <Description>Version: 15.9 

In the following code, VS throws an IDE0032 suggestion:

```csharp
        private (double X, double Y) position;

        public (double X, double Y) Position
        {
            get =&gt; position;
            set =&gt; position = value;
        }
        public double X
        {
            get =&gt; position.X;
            set =&gt; position.X = value;
        }
        public double Y
        {
            get =&gt; position.Y;
            set =&gt; position.Y = value;
        }
```

Converting this to an auto property results in a compiler error, which makes sense, since properties' members may not be changed.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/436930/ide0032-suggestion-on-improper-case.html
VSTS ticketId: 778746_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>17/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33459</IssueID>
    <RepoID>1</RepoID>
    <Title>LINQ debugging is total crap</Title>
    <Description>The tite says it...

Really love LINQ, it produces a really clean and nice code.

But it can't be used when debugging is so bad.
So gotta convert it all to loops to be able to debug.

Please, please fix this.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/433733/linq-debugging-is-total-crap.html
VSTS ticketId: 776232_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>17/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33458</IssueID>
    <RepoID>1</RepoID>
    <Title>C# formatter missing linebreak after curly braces of for block</Title>
    <Description>When using an for block inside an if condition without curly braces, the else gets put in the same line as the closing brace of the for block.

example:

```csharp
if (true)
    for (int i = 0; i &lt;2; i++) {
       i++;
    } else
     b =5;
```

instead of the expected:

```csharp
if (true)
    for (int i = 0; i &lt;2; i++) {
       i++;
    } 
else
     b =5;
```

correct placement:

```csharp
if(true){
   b=2;
} else
   b=3;
```

and:

```csharp
if(true)
   b=2;
else
   b=4;
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/431619/c-formatter-missing-linebreak-after-curly-braces-o.html
VSTS ticketId: 774047_
_These are the original issue comments:_

roland.fredenhagen on 1/20/2019, 06:42 AM (27 days ago): The Title misses "else" sorry for that, but it seams like I am not able to edit anything.
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>17/02/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33457</IssueID>
    <RepoID>1</RepoID>
    <Title>Add FixReturnType fixer</Title>
    <Description>If you have a method that returns `void` (or an async method that returns `void` or `Task`), but you have a return statement with a value, the FixReturnType fixer offers to fix the return type.

![image](https://user-images.githubusercontent.com/12466233/52908443-c82e3f00-322a-11e9-8b6d-1c8c570ecf23.png)

Update: I'll extend this PR to also handle VB.
</Description>
    <CreatedDate>17/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33456</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/02/2019</CreatedDate>
    <ClosedDate>17/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33455</IssueID>
    <RepoID>1</RepoID>
    <Title>Replace slot watermark</Title>
    <Description>Stop copying nullable state at the target slot rather than at the highest slot.

Fixes #33429.</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33454</IssueID>
    <RepoID>1</RepoID>
    <Title>Increase diagnostics in determinism job</Title>
    <Description>The determinism job has started to intermittently timeout over the last
few days. The job typically runs in ~50 minutes which is well below the
90 minute limit. On failed runs though there are no obvious outliers
that are causing the timeouts. The builds and restores are happening at
the time intervals we would expect.

This change adds more time diagontics to the run. It's unlikely that any
of these sections are responsible for the 40 minute gap we're seeing in
the bad runs but at this point need to rule out everything.</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33453</IssueID>
    <RepoID>1</RepoID>
    <Title>ChangeSignature: select parameter based on cursor position</Title>
    <Description>Previously, the ChangeSignature dialog would always open with the default selection (ie. the first movable or removable parameter).
With this PR, if you select a parameter in a declaration and invoke ChangeSignature, that parameter will be selected.

![image](https://user-images.githubusercontent.com/12466233/52904696-7b277a00-31e4-11e9-91bf-2141f894fa69.png)

![image](https://user-images.githubusercontent.com/12466233/52904704-89759600-31e4-11e9-849c-0a6fb077f465.png)

VB is covered too.</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33452</IssueID>
    <RepoID>1</RepoID>
    <Title>Pipename not being quoted when starting VBCSCompiler</Title>
    <Description>The pipename argument is not being properly quoted when starting the VBCSCompiler process from our MSBuild task. That means if there is a space in the name the client and server will have a mismatch and won't be able to communicate. All compilations will fall back to csc / vbc.

Notes: 

- Regression Introduced Here: https://github.com/dotnet/roslyn/pull/32257/files#diff-e9e79a4f1f187c6ba6f94517e04e6c32L385
- Internal Tracking Item: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/795899</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33451</IssueID>
    <RepoID>1</RepoID>
    <Title>System.InvalidCastException on pattern matching with when condition</Title>
    <Description>**Version Used**: 
7.3 and 8.0
**Steps to Reproduce**:
Run the below code:
```
object s = "a";
switch (s)
{
    case IEnumerable&lt;int&gt; subList when subList.Any():
        break;
    case IEnumerable&lt;object&gt; subList2:
        break;
    case null:
        break;
}

```

**Expected Behavior**:
It should work without matching
**Actual Behavior**:
Fails with below exception:
```
System.InvalidCastException: 'Unable to cast object of type 'System.String' to type 'System.Collections.Generic.IEnumerable`1[System.Object]'.'
```
**Fun fact**: this is the simplest possible case I can reproduce the error. Removing anything from above code fixes the problem
</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33450</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33449</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33448</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33447</IssueID>
    <RepoID>1</RepoID>
    <Title> Analyze ref/out arguments as output assignments</Title>
    <Description>`VisitArgumentConversion` tracks an invocation with a `ref` argument as an assignment from argument result to parameter, then from parameter to argument as l-value.
To achieve that without visiting the argument twice, I removed `VisitLValue` and keep track of l-value types when visiting expressions. The `NullableWalker._resultType` is now a pair of TSWAs (one for result type and the other for l-value type).

I made a small adjustment to the order of parameters for some methods, so that the BoundExpression and the TSWA for a given input would be grouped together. For example, `TrackNullableStateForAssignment(BoundExpression value, TypeSymbolWithAnnotations valueType, TypeSymbolWithAnnotations targetType, ...)` (which is easier to read than previous order).

Fixes https://github.com/dotnet/roslyn/issues/26739
Fixes https://github.com/dotnet/roslyn/issues/29958</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33446</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing nullability warning after assignment to variable in finally block</Title>
    <Description>The following should, but does not, produce a warning.
``` c#
class Node
{
    public Node? Next;
    static void Mout(out Node node) =&gt; node = null!;
    static void M(Node node)
    {
        try
        {
            Mout(out node.Next);
        }
        finally
        {
            Mout(out node); // might set node to one in which node.Next == null
        }
        node.Next.ToString(); // should be warning
    }
}
```
</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33445</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33444</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33443</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33442</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33441</IssueID>
    <RepoID>1</RepoID>
    <Title>Dynamic object and collection initializers are not handled correctly</Title>
    <Description>https://github.com/dotnet/roslyn/blob/0530f607e9f2ef1571b82f2c1be07893bed02a72/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker.cs#L5363

This statement isn't true, dynamic collection initializers always hit this function. We need to look at this and re-evaluate whether these need to be handled differently, and some tests should be added.

This is also true for dynamic object initializers.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33440</IssueID>
    <RepoID>1</RepoID>
    <Title>Add PROTOTYPE comments to follow up on a previous change.</Title>
    <Description>This is a follow up on https://github.com/dotnet/roslyn/pull/33281.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33439</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure workspace only returns document matches the content type of given text buffer</Title>
    <Description>@heejaechang commented on this in https://github.com/dotnet/roslyn/pull/33168#pullrequestreview-201399920</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33438</IssueID>
    <RepoID>1</RepoID>
    <Title>Merges/dev16.0 to dev16.0 vs deps</Title>
    <Description>Getting this merge kicked off a little earlier so we can get the insertion flow going. @jaredpar</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33437</IssueID>
    <RepoID>1</RepoID>
    <Title>Add missing dot for `/embed` documentation of `csc.exe /?`</Title>
    <Description>
    </Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33436</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable ref types: handling unconstrained type parameters</Title>
    <Description>A variable of a type parameter that cannot be annotated, when read, may yield a null value.  But a (possibly) null value cannot be stored in it, because the type may be substituted with a type that is non-nullable.  If we apply the usual rules, that would mean this causes a diagnostic:
``` c#
void M&lt;T&gt;(T t)
{
    t = t; // warning: might be assigning null to T
}
```
To solve this, we propose the following rules:
1. The warning that a possibly-null value is converted to a type that doesn't accept null has an exception for a conversion to a value of a type that is a "type parameter that may possibly be a reference type and cannot be annotated" when the conversion is an implicit conversion (with two exceptions below). An implicit conversion to such an unannotatable type causes no warning. If the conversion is not implicit (e.g. a downcast between related type parameters) the warning is given.
2. We must introduce a safety warning whenever a possibly null value of such a type is introduced.  Those contexts are:
  - `default` and `default(T)` (the default conversion, though implicit, does introduce a warning)
  - `null` (the null conversion, though implicit, does introduce a warning)
  - `e as T`
  - `e.GetFirstOrDefault()` - which presumably would be annotated with `[MaybeNull]`
</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33435</IssueID>
    <RepoID>1</RepoID>
    <Title>Move open/closed document checks under the _serializationLock</Title>
    <Description>These not being under the lock would mean parallel calls to OnDocumentOpened/Closed might race against each other. We don't think this is a practical problem as current callers are already taking their own locks or are affinitized to the UI thread, but it would be good to fix nonetheless.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33434</IssueID>
    <RepoID>1</RepoID>
    <Title>Make sure to set the scan code for KEYBDINPUT</Title>
    <Description>See michaelnoonan/inputsimulator#13</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33433</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>@jaredpar</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33432</IssueID>
    <RepoID>1</RepoID>
    <Title>Document nullable disable for generated code</Title>
    <Description>
    </Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33431</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn dev16.0-vs-deps | 20190213</Title>
    <Description>Replacement for #33353 because the fork was deleted preventing a way to push further changes that were needed</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33430</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability of conditional access with unconstrained type parameters</Title>
    <Description>
What is the nullability of `x?.F()`?

```cs
class C&lt;T, U&gt;
    where T : U
    where U : C&lt;T, U&gt;?
{
    static void M(U x)
    {
        U y = x?.F();
        T z = x?.F();
    }
    T F() =&gt; throw null;
}
```

#### Resolved 2/13/2019:
The nullability of a conditional invocation is always nullable.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33429</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove NullableWalker.GetSlotWatermark() if possible</Title>
    <Description>Remove `NullableWalker.GetSlotWatermark` if possible. For instance, could `TrackNullableStateForAssignment` handle cycles by avoiding copying nullable state from either `targetSlot` or from slots that were already copied?
</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33428</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure NullableWalker.InheritNullableStateOfMember is not copying state for invalid members</Title>
    <Description>`NullableWalker.InheritNullableStateOfMember` should assert the member is valid for value and target.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33427</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion should preselect IEnumerable properties in foreach</Title>
    <Description>As an example, look at the following class definition:
```C#
using System.Collections.Generic;
public class C
{
    public object Prop { get; set; }
    public IEnumerable&lt;int&gt; PropWithEnumerable { get; set; }
}
```

When typing `foreach (var x in c.|cursor here|`, we should preselect the `PropWithEnumerable`. We can do this for variable assignment (ie `IEnumerable&lt;int&gt; x = c.|cursor here|`), so this should be just extending the case to foreach enumerations. As an added bonus it would be great if it was smart about an explicitly typed enumerator variable, so if I had an `IEnumerable&lt;int&gt;` and an `IEnumerable&lt;string&gt;` property and had explicitly specified the `foreach` variable to be a `string` it would select the correct property.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33425</IssueID>
    <RepoID>1</RepoID>
    <Title>Forbid `and` and `or` as the designator in a pattern</Title>
    <Description>In anticipation of possibly permitting `and` and `or` as pattern combinators in the future, we should forbid (or at least warn) when these identifiers are used as the designator in a declaration or recursive pattern.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33424</IssueID>
    <RepoID>1</RepoID>
    <Title>Update dotnet-format readme install instructions.</Title>
    <Description>Removed version number from install instructions now that there has been a release build published.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33423</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn dev16.0-vs-deps | 20190215</Title>
    <Description>
    </Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33422</IssueID>
    <RepoID>1</RepoID>
    <Title>.rsp files</Title>
    <Description>**Version Used**:
csc 2.7.0.62620

**Expected Behavior**:
When using an `.rsp` file with `csc`, I'd like to be able to include multi-line comments in the `.rsp` file, or have a way to stop the parsing of the `.rsp` file at an arbitrary line.

**Actual Behavior**:
No such thing is documented.

The functionality would offer increased flexibility for tool-chain script generation tools. This could also help with debugging tooling more easily by quickly disabling multiple lines.
</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33421</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33420</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33419</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33417</IssueID>
    <RepoID>1</RepoID>
    <Title>"ctor" snippet doesn't replace placeholder with class name</Title>
    <Description>**Version Used**: VS 16.0 Preview 3

**Steps to Reproduce**:

1. Copy the code below into a C# file.
2. Press Tab at the marked location to expand the snippet.

```c#
class C
{
    ctor$$
}
```

**Expected Behavior**:

```c#
class C
{
    public C()
    {
    
    }
}
```

**Actual Behavior**:

```c#
class C
{
    public ClassNamePlaceholder()
    {

    }
}
```</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33418</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33416</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33415</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch expressions can't be used with delegates/method groups (no best type found)</Title>
    <Description>**Version Used**: VS 16.0 Preview 3

**Steps to Reproduce**:

```c#
class SwitchWithMethod
{
    void M1(int _) { }
    void M2(int _) { }

    enum Method
    {
        One,
        Two
    }

    void M_New(Method m, int a)
    {
        Action&lt;int&gt; action = m switch
        {
            Method.One =&gt; M1,
            Method.Two =&gt; M2,
            _ =&gt; throw null
        };
        action.Invoke(a);
    }

    void M_Old(Method m, int a)
    {
        Action&lt;int&gt; action;
        switch (m)
        {
            case Method.One:
                action = M1;
                break;
            case Method.Two:
                action = M2;
                break;
            default:
                throw null;
        }
        action.Invoke(a);
    }
}
```

**Expected Behavior**: `M_New` and `M_Old` can compile without error.

**Actual Behavior**: Only `M_Old` compiles. `M_New` reports error CS8506 ("No best type was found for the switch expression"), despite all of the non-throwing branches having an identical return type (`delegate void (int)`).

This sort of pattern is useful for dynamic dispatching, e.g. for loggers (switching on the error level and calling one of the logger's methods, all of which have the same signature).</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33413</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for virtual properties with a private accessor in an interface</Title>
    <Description>Relevant LDM notes https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-10-17.md</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33412</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler and runtime disagree on what method implements an interface</Title>
    <Description>```
        [Fact]
        public void Test()
        {
            var ilSource = @"
.class interface public abstract auto ansi I1
{
  .method public hidebysig newslot abstract virtual 
          instance void  M1() cil managed
  {
  } // end of method I1::M1

  .method public hidebysig newslot abstract virtual 
          instance void  M2() cil managed
  {
  } // end of method I1::M2

} // end of class I1

.class public auto ansi beforefieldinit AA
       extends [mscorlib]System.Object
       implements I1
{
  .method private hidebysig newslot virtual final 
          instance void  I1.M1() cil managed
  {
    .override I1::M1
    // Code size       13 (0xd)
    .maxstack  8
    IL_0000:  nop
    IL_0001:  ldstr      ""AA.M1""
    IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_000b:  nop
    IL_000c:  ret
  } // end of method AA::I1.M1

  .method private hidebysig newslot virtual final 
          instance void  I1.M2() cil managed
  {
    .override I1::M2
    // Code size       13 (0xd)
    .maxstack  8
    IL_0000:  nop
    IL_0001:  ldstr      ""AA.M2""
    IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_000b:  nop
    IL_000c:  ret
  } // end of method AA::I1.M2

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
    IL_0007:  ret
  } // end of method AA::.ctor

} // end of class AA

.class public auto ansi beforefieldinit BB
       extends AA
{
  .method public hidebysig newslot virtual 
          instance void  M1() cil managed
  {
    // Code size       13 (0xd)
    .maxstack  8
    IL_0000:  nop
    IL_0001:  ldstr      ""BB.M1""
    IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_000b:  nop
    IL_000c:  ret
  } // end of method BB::M1

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void AA::.ctor()
    IL_0006:  nop
    IL_0007:  ret
  } // end of method BB::.ctor

} // end of class BB

.class public auto ansi beforefieldinit CC
       extends BB
       implements I1
{
  .method public hidebysig newslot virtual 
          instance void  M2() cil managed
  {
    // Code size       13 (0xd)
    .maxstack  8
    IL_0000:  nop
    IL_0001:  ldstr      ""CC.M2""
    IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_000b:  nop
    IL_000c:  ret
  } // end of method CC::M2

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void BB::.ctor()
    IL_0006:  nop
    IL_0007:  ret
  } // end of method CC::.ctor

} // end of class CC
";

            var source1 =
@"
class DD
{
    static void Main()
    {
        I1 x = new CC();
        x.M1();
        x.M2();
    }
}
";
            var compilation1 = CreateCompilationWithIL(source1, ilSource, options: TestOptions.DebugExe);
            compilation1.VerifyDiagnostics();

            var i1 = compilation1.GetTypeByMetadataName("I1");
            var i1M1 = i1.GetMember&lt;MethodSymbol&gt;("M1");
            var i1M2 = i1.GetMember&lt;MethodSymbol&gt;("M2");
            var cc = compilation1.GetTypeByMetadataName("CC");

            Assert.Equal("void BB.M1()", cc.FindImplementationForInterfaceMember(i1M1).ToTestDisplayString());
            Assert.Equal("void CC.M2()", cc.FindImplementationForInterfaceMember(i1M2).ToTestDisplayString());

            CompileAndVerify(compilation1, expectedOutput: @"
AA.M1
CC.M2
");
        }
```

Observed:
For I1.M1 method runtime executes method from class AA, but FindImplementationForInterfaceMember API returns a method from class BB.

Expected: 
The same method, probably runtime is right here.

Also, when the following class is compiled against the same IL
```
public class CC : BB, I1
{
    public virtual void M2()
    {
        System.Console.WriteLine("CC.M2");
    }
}
```  
it looks like compiler correctly detects that BB.M1 is not going to be considered as I1.M1 implementation by the runtime and an implementation stub is emitted to force that:
```
.method private hidebysig newslot virtual final 
        instance void  I1.M1() cil managed
{
  .override [lib1]I1::M1
  // Code size       7 (0x7)
  .maxstack  8
  IL_0000:  ldarg.0
  IL_0001:  callvirt   instance void [lib1]BB::M1()
  IL_0006:  ret
} // end of method CC::I1.M1
```</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33411</IssueID>
    <RepoID>1</RepoID>
    <Title>use different hash algorithm than SHA1 in checksum for better performance</Title>
    <Description>@sharwell believe SHA1 is too slow for our checksum. so he wants us to use a different algorithm than SHA1 to make hash faster.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33410</IssueID>
    <RepoID>1</RepoID>
    <Title> Read IBC and VS bootstrapper info from PublishData.json</Title>
    <Description>Allows to specify which IBC data drop to use when queuing a signed build: build variables `IbcDropId` and `IbcSourceBranchName`. If the value of these variables is `default` uses information in `eng/config/PublishData.json` to retrieve the most recent IBC data published for the branch.

This change also sets `VisualStudio.MajorVersion` and `VisualStudio.ChannelName` variables used by VS Bootstrapper build step based on the values in `eng/config/PublishData.json`.
</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33409</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't accidentally share a named semaphore between test processes</Title>
    <Description>WpfSharedTestData had two static members: Instance and TestSerializationGateName. TestSerializationGateName is the name of a system-wide Semaphore that was used to execute WpfFacts one at time. The intent is this was a GUID so it wouldn't actually be shared. Unfortunately, the Instance member is initialized first; and the non-static Semaphore field is initialized with the still uninitialized TestSerializationGateName. This means our Semaphore would always be named with a GUID of all-zeros, causing us to share the semaphore between all running xUnit processes. This was terribly bad for two reasons:

1. It kills test performance. We run tests in parallel in separate processes to ensure isolation, but this sharing of the semaphore meant that all of those processes are only running one test at a time, defeating all running of tests in parallel.
2. If one test process crashes, the Semaphore is never freed, meaning all your other test processes will deadlock and never complete.

It's unclear why this code is using a Semaphore, but since we have no need to share the Semaphore between processes, we can use a SemaphoreSlim. This also has the added benefit of properly supporting a WaitAsync that isn't implemented by launching off a Thread just to wait for the system semaphore.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33408</IssueID>
    <RepoID>1</RepoID>
    <Title>Correct TFM for EE assemblies (#33389)</Title>
    <Description>These assemblies target netstandard1.3, not 2.0.

Port of https://github.com/dotnet/roslyn/pull/33389 from master.

Fixes bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/755193</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33407</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert to struct has errors on uninitiated members</Title>
    <Description>**Version Used**: Visual studio 2019

**Steps to Reproduce**:

1. Have code

```csharp
public class Class
{
    void MyMethod()
    {
        var tuple = (3, "string");
    }

```
2. Place cursor before open parenthesis and type (Ctrl+.) to open codefixes
![image](https://user-images.githubusercontent.com/8293542/52825445-a178d880-3071-11e9-822e-47189759e04c.png)

3. Select Convert to struct

**Expected Behavior**:
Generated struct gives no errors.

**Actual Behavior**:
Generated struct gives errors on uninitialized members Item1 and Item2.
![image](https://user-images.githubusercontent.com/8293542/52825427-9160f900-3071-11e9-92e5-3ecd00e1f702.png)

Adding these declarations fixes warnings:
```
internal struct NewStruct
{
    public int Item1 { get; }
    public string Item2 { get; }
...
```

@CyrusNajmabadi Julien mentioned you might want to take a look. :)</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33406</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33405</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33404</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33403</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3-vs-deps to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33402</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix up all the test project launchSettings.json to allow F5 again</Title>
    <Description>These were broken in the switch to Arcade. It appears there's no longer proper project properties available for this so we hardcode the stuff directly.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33401</IssueID>
    <RepoID>1</RepoID>
    <Title>Changes are not allowed while code is running shows while ENC about VB framework app</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32247</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33400</IssueID>
    <RepoID>1</RepoID>
    <Title>set no activation context on provisional tab when navigate to</Title>
    <Description>when PreferProvisionalTab option is added, work is done only in OpenDocument, but not in NavigateTo making the option useless in some cases since NavigateTo makes focus to move to provisional tab right after OpenDocument call which make sure provisional tab to not activated.

fix is following editor team's recommendation from https://devdiv.visualstudio.com/DevDiv/_workitems/edit/402396</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33399</IssueID>
    <RepoID>1</RepoID>
    <Title>Use MSBuildLocator for loading MSBuild in dotnet-format</Title>
    <Description>
    </Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33398</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove extra lambda binding in NullableWalker.ApplyConversion</Title>
    <Description>`NullableWalker.ApplyConversion` currently rebinds the lambda operand for `ConversionKind.AnonymousFunction`. Remove [this code](https://github.com/dotnet/roslyn/blob/bd738fc43ff48739837df9fe29db7ad46c9b3086/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker.cs#L3769-L3770) if not needed.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33397</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix #33253: Smart Indent does not handle fluent sequences correctly</Title>
    <Description>This fixes #33253, as discussed with @sharwell.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>04/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33396</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData.json</Title>
    <Description>Change lab/ml to master now that we're inserting our 16.1 payloads into VS master</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33395</IssueID>
    <RepoID>1</RepoID>
    <Title>Copy field nullability on assignment for all expressions</Title>
    <Description>Fixes #31395.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33394</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing CS8625 for constructor call on static field initialization</Title>
    <Description>**Version Used**: 
16.0.0 Preview 3.0

**Steps to Reproduce**:

```csharp
#nullable enable
public class C
{
    public C(string a) { }
    public static C Empty = new C(null); // Missing CS8625
}
```

**Expected Behavior**:
Calling `C`'s constructor with `null` should generate a warning

**Actual Behavior**:
It doesn't, but does when `static` is removed</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33393</IssueID>
    <RepoID>1</RepoID>
    <Title>Inferred type should flow into discards</Title>
    <Description>In `_ = expr;` the result type of the discard remains the type from initial binding rather than the type of `expr` that is computed during the nullable walker.. See `Discard_03` below.  See also #29635.

``` c#
        [Fact]
        public void Discard_03()
        {
            // https://github.com/dotnet/roslyn/issues/33393 Need to re-infer discards.
            // The types below should have non-oblivious type arguments in the expected results.
            var source =
@"class C&lt;T&gt;
{
" + NonNullTypesOn() + @"
    void F(bool b, object o1, object? o2, C&lt;object&gt; o3, C&lt;object?&gt; o4)
    {
        _ /*T:object?*/ = (b ? o1 : o2);
        _ /*T:C&lt;object&gt;?*/ = (b ? o3 : o4); // 1
        _ /*T:C&lt;object&gt;?*/ = (b ? o4 : o3); // 2
        _ /*T:C&lt;object&gt;?*/ = (b ? o3 : o5);
        _ /*T:C&lt;object&gt;?*/ = (b ? o4 : o5);
    }
" + NonNullTypesOff() + @"
    static C&lt;object&gt; o5 = null;
}";
            var comp = CreateCompilation(new[] { source });
            comp.VerifyDiagnostics(
                // (7,40): warning CS8619: Nullability of reference types in value of type 'C&lt;object?&gt;' doesn't match target type 'C&lt;object&gt;'.
                //         _ /*T:C&lt;object&gt;?*/ = (b ? o3 : o4); // 1
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "o4").WithArguments("C&lt;object?&gt;", "C&lt;object&gt;").WithLocation(7, 40),
                // (8,35): warning CS8619: Nullability of reference types in value of type 'C&lt;object?&gt;' doesn't match target type 'C&lt;object&gt;'.
                //         _ /*T:C&lt;object&gt;?*/ = (b ? o4 : o3); // 2
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "o4").WithArguments("C&lt;object?&gt;", "C&lt;object&gt;").WithLocation(8, 35)
                );
            comp.VerifyTypes();
        }
```
</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33392</IssueID>
    <RepoID>1</RepoID>
    <Title>Update formatter</Title>
    <Description>* Pick up recent performance improvements for our build
* Fix current formatting issues</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33391</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8618 (uninitialized field) when checking for null</Title>
    <Description>**Version Used**: 
16.0.0 Preview 3

**Steps to Reproduce**:

```csharp
class C
{
    readonly string s;
    C(bool a) // CS8618
    {
        if (a)
            s = "";
        if (s == null)
            throw new InvalidOperationException();
    }
}
```
This is similar to #25529.
After possibly setting the the field, the code checks if the field is still default-initialized and throws if not. After that, `s` is definitely non-null.

**Expected Behavior**:
The constructor either initializes or throws, so there shouldn't be a warning.

**Actual Behavior**:
CS8618 for the constructor</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33390</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect quick fix suggestion with default parameters</Title>
    <Description>**Version Used**: 
.NET Core 3 Preview 2 / VS 2019 Preview 3

When an optional parameter is combined with compound assignment, the analyzers show an incorrect suggestion to remove a redundant parameter:

![image](https://user-images.githubusercontent.com/1427284/52813682-4ee6ee80-3068-11e9-8cd2-54363df7071b.png)

Same code before changing to the compound assignment does not show any suggestions on the parameters:

![image](https://user-images.githubusercontent.com/1427284/52813831-a84f1d80-3068-11e9-860c-135e93aa7168.png)

</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33389</IssueID>
    <RepoID>1</RepoID>
    <Title>Correct TFM for EE assemblies</Title>
    <Description>These assemblies target netstandard1.3, not 2.0.

We were not signing these with the right certificate `Microsoft101240624`.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33388</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect usage of StructLayout attribute cause VS crash</Title>
    <Description>Create C# project and use this code:

    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Sequential, Size = Marshal.SizeOf(Test))]
    public struct Test
    {
    }

or:

    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Sequential, Pack = Marshal.SizeOf(Test))]
    public struct Test
    {
    }

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/450661/incorrect-usage-of-structlayout-attribute-cause-vs.html
VSTS ticketId: 790164_
_These are the original issue comments:_

Visual Studio Feedback System on 2/12/2019, 01:29 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33387</IssueID>
    <RepoID>1</RepoID>
    <Title>new T does not handle nullable property setters.</Title>
    <Description>```C#

        [Fact]
        public void New_04()
        {
            var source = @"
class C
{
    object Prop { get; set; }
    void M&lt;T&gt;() where T : C, new()
    {
        var c = new T() { Prop = null }; // 1
        _ = c.Prop.ToString(); // 2
    }
}";

            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics();
        }
```

Currently, no warnings are reported, because we're not handling the object initializer for `BoundNewT` nodes.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33386</IssueID>
    <RepoID>1</RepoID>
    <Title>Usability of CSC command.</Title>
    <Description>Nowadays the `csc` command is mostly useful as a backend tool to MSBuild and is rarely used from the command line as we have made things a tiny bit complicated for our users to just type.

This is a request to add two capabilities to `csc` that would allow `csc` to be used by normal people that might want to easily use the compiler without having to rely on producing MSBuild projects to compile code that conforms to certain scenarios.

# Extending `-target:`

The `-target:` option should allow users to specify a profile that they want to target when creating libraries, and it would support flags like `netstandard1.0`, `netstandard2.0`, `netstandard2.1` and so on.   

This would merely be an alias for `-target:library` and `-r:EveryAssemblyThatIsPartOfThatProfile`.

This would allow the creation of .NET Standard libraries with little effort.
 
# Simple NuGet support: `-package:` flag.

We would add support for referencing simple NuGet packages.

The flag `-package:NAME` would use the reference assembly for the specified package name on one of the predetermined locations where the NuGet packages are stored, or a path specified by the `-packagepath:DIR` argument.

The `-packagepadd:DIR` argument would prepend the specified PATH to the lookup that would be performed for finding the specified package.

If the package is a complicated NuGet (for example, of the bait-and-switch nature or other packages that require post processing), we would print out an error explaining that this scenario is not supported.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33385</IssueID>
    <RepoID>1</RepoID>
    <Title>Inferred nullability of type parameters doesn't take nullability learnt from contract annotations into account</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
using System.Runtime.CompilerServices;

class C
{
  void Test1(string? s1)
  {
    var s2 = M(s1, s1);
    s1.ToString(); // no warnings, Roslyn knows that s1 cannot be null after M(s1, s1) call
    s2.ToString(); // false warning, the second argument is knonwn to be not null, therefore T is non-nullable string
    s2 = null;
  }

  static extern T M&lt;T&gt;([EnsuresNotNull] string? s, T t);
}

namespace System.Runtime.CompilerServices
{
  class EnsuresNotNullAttribute : System.Attribute { }
}
```

**Expected Behavior**:
No warnings for the dereference of `s2`. Warning for assigning `null` to `s2`.
`s1` is known to be not null after the call. Therefore `C.M'T` should be inferred to be a non-nullable string and `s2` must be inferred to be a non-nullable string.

**Actual Behavior**:
`s2` is inferred to be a nullable string which is incorrect. No warnings for assigning it with `null` and false warnings on its derferences.

**Notes**
Similar example with explicit non-nullable value produces false warning for nullability mismatch in the variable's initializer
`string s2 = M(s1, s1);`

If I split assertion and type arguments inference into separate calls Roslyn is able to produce correct warnings e.g.
```cs
#nullable enable
using System.Runtime.CompilerServices;

class C
{
  void Test1(string? s1)
  {
    AssertionOnly(s1);
    var s2 = InferenceOnly(s1);
    s2.ToString(); // no warnings
    s2 = null; // cannot assign null to a non-nullable target
  }

  static extern void AssertionOnly([EnsuresNotNull] string? s);
  static extern T InferenceOnly&lt;T&gt;(T t);
}

namespace System.Runtime.CompilerServices
{
  class EnsuresNotNullAttribute : System.Attribute { }
}
```
</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33384</IssueID>
    <RepoID>1</RepoID>
    <Title>Operator '&gt;' cannot be applied to operand 'default'</Title>
    <Description>**Version Used**:

VS2019 Preview 3.0
C# language version 7.3

**Steps to Reproduce**:

```csharp
    long foo;

    if (foo &gt; default) // CS8310
    {

    }
```

**Expected Behavior**:

This compiles, as `default` is syntactic sugar for `default(T)` (in this case, `default(long)`).

**Actual Behavior**:

It doesn't compile.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33383</IssueID>
    <RepoID>1</RepoID>
    <Title>protected internal virtual Intellisense shows nothing in derrived class</Title>
    <Description>In the derrived class intellisense doesent show Autocompletion.

*Sample:*
Assembly 1

```csharp
    public class Class2
    {
        public Class2()
        {
            Value = "set in constructor";
        }

        protected internal virtual string Value { get; }

        protected virtual string Value2 { get; } = "bla";
    }
```

*Asssembly2*
```csharp
public class ExtClass2 : Class2
    {
        public ExtClass2()
        {
            
        }

        protected override string // Here should show up Value from baseclass when i hit CTRL+Space

        protected override string Value2 =&gt; base.Value2;
    }
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/448161/protected-internal-virtual-intellisense-shows-noth.html
VSTS ticketId: 788425_
_These are the original issue comments:_

Visual Studio Feedback System on 2/14/2019, 04:00 AM (3 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33382</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0054 "Use compound assignment" false positive in object initializer</Title>
    <Description>**Version Used**: VS2019 Preview 3

**Steps to Reproduce**:

```
		struct InsertionPoint
		{
			internal int level;
			internal Node nextNode;
			
			internal InsertionPoint Up()
			{
				return new InsertionPoint {
					level = level - 1,
					nextNode = nextNode.Parent
				};
			}
                }
```

There is an IDE0054 "Use compound assignment" hint for `level = level - 1`, but this doesn't make sense in an object initializer.

![ide0054](https://user-images.githubusercontent.com/243140/52782837-4c789a80-3050-11e9-9f9b-22f676092055.png)</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33381</IssueID>
    <RepoID>1</RepoID>
    <Title>C# XML comments displayed incorrectly when they contain a &lt; symbol</Title>
    <Description>In the IDE when a C# file is loaded that contains an XMLComment and the comment contains a &amp;lt; within the comment text the line is incorrectly formated  Text before the &amp;lt; is Green by default the XMLDocument color. Everything the the &amp;lt; to the &amp;gt; is display as grey, then the text is again Green. I belive this is related to Roslyn Classifier or SyntaxWalker. I have attached a file from CorFX that displays the issue the best.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/442614/c-xml-comments-displayed-incorrectly-when-they-con.html
VSTS ticketId: 783216_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33380</IssueID>
    <RepoID>1</RepoID>
    <Title>Script generation slows down after many compilation/execution cycles</Title>
    <Description>**Version Used**: 2.10.0 / master

**Steps to Reproduce**:

Tested with .NET Framework 4.7.2

*Example Program:*
``` csharp
            var watch = new Stopwatch();
            watch.Start();
            for (int i = 0; i &lt; 5000; ++i)
            {
                var script = CSharpScript.Create&lt;int&gt;("1", ScriptOptions.Default);
                int foo = script.RunAsync().Result.ReturnValue;
                if (i % 250 == 0)
                {
                    watch.Stop();
                    Console.WriteLine(watch.ElapsedMilliseconds);
                    watch.Restart();
                }
            }
```


**Expected Behavior**:

Compilation time stays within a certain border, outputted numbers do not increase.

**Actual Behavior**:

Compilation time keeps increasing

Output of program:

```
1263
2435
2487
2509
2615
2665
2684
2711
2774
2824
2932
2971
3016
3046
3105
3172
3229
3374
3434
3410
```</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33379</IssueID>
    <RepoID>1</RepoID>
    <Title>AbstractCommandHandlerTestState.WaitForAsynchronousOperationsAsync does not wait for async completion operations to complete</Title>
    <Description>Need to change WaitForAsynchronousOperationsAsync for async completion purposes to wait for completion: it is available either by waiting for session.GetComputedItems (for a specific text view) or by subscribing for events  IAsyncCompletionBroker.CompletionTriggered and then for session.ItemsUpdated.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>24/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33378</IssueID>
    <RepoID>1</RepoID>
    <Title>VS becomes busy on switch expression</Title>
    <Description>**Version Used**: 

Visual Studio 16.0.0 Preview 3.0
LangVersion 8.0

**Steps to Reproduce**:

```cs
static int M(object x) =&gt; x switch
{
    int _ =&gt; 0,
};
```

**Expected Behavior**:

No error.

**Actual Behavior**:

The code completion gets wrong and Visual Studio becomes busy.

![image](https://user-images.githubusercontent.com/3760955/52756281-2d740b80-3044-11e9-8d96-110e3f00af66.png)
</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33377</IssueID>
    <RepoID>1</RepoID>
    <Title>Use PublishTestResults@2 for SpanishUnitTests</Title>
    <Description>This is the message we see today.

```console
##[section]Starting: PublishTestResults
==============================================================================
Task         : Publish Test Results
Description  : Publish Test Results to VSTS/TFS
Version      : 1.0.39
Author       : Microsoft Corporation
Help         : [More Information](https://go.microsoft.com/fwlink/?LinkID=613742)
==============================================================================
Preparing task execution handler.
Executing the powershell script: F:\vsagent\_tasks\PublishTestResults_0b0f01ed-7dde-43ff-9cbb-e48954daf9b1\1.0.39\PublishTestResults.ps1
Publishing Test Results...
##[warning]Failed to publish test results: Valor demasiado grande o demasiado pequeño para Int32.
##[section]Finishing: PublishTestResults
```

With this change, test publish https://dev.azure.com/dnceng/public/_build/results?buildId=96043</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33376</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33375</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps </Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33374</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33373</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33372</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33371</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev15.9.x to dev16.0-preview3</Title>
    <Description>
This is an automatically generated pull request from dev15.9.x into dev16.0-preview3.

``` bash
git fetch --all
git checkout merges/dev15.9.x-to-dev16.0-preview3
git reset --hard upstream/dev16.0-preview3
git merge upstream/dev15.9.x
# Fix merge conflicts
git commit
git push upstream merges/dev15.9.x-to-dev16.0-preview3 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33370</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Interactive: How to set PrintOptions.MemberDisplayFormat</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Preview 4 28612.98.d16.0

**Steps to Reproduce**:

1. Open C# Interactive
2. Type `PrintOptions.MemberDisplayFormat = `
3. The IntelliSense will auto select MemberDisplayFormat enum in the completion list, type a `.` to try to list the enum values.

**Expected Behavior**:
The values should be populated: `SingleLine`, `SeparateLines` and `Hidden`, and compiler should not report compilation error.

**Actual Behavior**:
1. No valid enum values are populated
2. Compiler reports `MemberDisplayFormat` type is not found in the current context
3. Cannot directly set this option, to change the member display format, you will need to do this:
```c#
var t = Type.GetType("Microsoft.CodeAnalysis.Scripting.Hosting.MemberDisplayFormat, Microsoft.CodeAnalysis.Scripting");
var e = Enum.Parse(t, "SeparateLines");
PrintOptions.MemberDisplayFormat = (dynamic)e;
```
</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33369</IssueID>
    <RepoID>1</RepoID>
    <Title>Add vsBranch and ibcSourceBranch to PublishData.json</Title>
    <Description>`vsBranch` is the VS branch that the Roslyn branch inserts to
`ibcSourceBranch` is the Roslyn branch that produced IBC data that should be consumed by official build of the branch. If not specified it's the branch itself.

Adding these values will allow us to control what IBC data are consumed by each branch.
Ad-hoc feature/dev branches will be able to set the values at queue time.
</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33368</IssueID>
    <RepoID>1</RepoID>
    <Title>Delete unnecessary code around Workspace eventing</Title>
    <Description>We had some code in the VS layer that was trying to work around the fact that we might be MEF created on a background thread, when were didn't know what the UI thread was. It tried to assert that the first actual workspace mutation would happen on the UI thread, and so it was safe to create the queue at that point. This is silly now for two reasons:

1. We're using the IThreadingContext which knows what the main thread is directly and without any ceremony
2. We now do indeed do workspace mutations on other threads. It's still the case that the first mutation is on the UI thread today but that's a limitation we are actively wanting to excise.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33367</IssueID>
    <RepoID>1</RepoID>
    <Title>Document ref enumerator disposal compat break</Title>
    <Description>Documents the breaking change of calling `Dispose` on a ref struct enumerator.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33366</IssueID>
    <RepoID>1</RepoID>
    <Title>Add TextManager.Interop.16.0.DesignTime as a Private VS Package.</Title>
    <Description>
    </Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33365</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullable assignment through ?ref:ref receiver</Title>
    <Description>At the LDM on 2019-02-13, we agreed on our intent to track assignments through ref expressions (though we will not track aliasing through ref variables).  The following would be a good test.  We currently report the third and fourth expected warnings, but we fail to report the first and second.

``` c#
#nullable enable
    static void M(bool b, string nonNull, string? maybeNull)
    {
        string? x = nonNull;
        string? y = nonNull;
        (b ? ref x : ref y) = maybeNull;
        x.ToString(); // should be warning: possible dereference of a null reference
        y.ToString(); // should be warning: possible dereference of a null reference

        x = maybeNull;
        y = maybeNull;
        (b ? ref x : ref y) = nonNull;
        x.ToString(); // should be warning: possible dereference of a null reference
        y.ToString(); // should be warning: possible dereference of a null reference
    }
```
</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33364</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure we write logs xUnit logs and dumps in a place where we will archive them</Title>
    <Description>We have two folders we use during a test run: we put our XML result files in one folder for the Azure DevOps task to specifically catch, and all other log files in a different folder which we upload as a generic artifact. We were putting log files in the wrong folder so we never uploaded them as artifacts.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33363</IssueID>
    <RepoID>1</RepoID>
    <Title>made Checksum type to truncate byte array given to it if it is bigger than HashSize</Title>
    <Description>this doesn't change hash algorithm. it is a general clean up on Checksum type. basically, it now accepts any bytes array as long as it is bigger than HashSize.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33362</IssueID>
    <RepoID>1</RepoID>
    <Title>removed unused parameter</Title>
    <Description>found while looking some code.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33361</IssueID>
    <RepoID>1</RepoID>
    <Title>Monodevelop doesn't works with roslyn when Visual Studio 2019 preview installed before</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio\2019\Preview\MSBuild\15.0\Bin\Roslyn

**Steps to Reproduce**:

1. Install Visual Studio 2019 Preview
2. Compile MonoDevelop as described in guide https://www.monodevelop.com/developers/building-monodevelop/
3. Create any c# project, compile and see an error:
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Microsoft.CSharp.CurrentVersion.targets(5,5): Error MSB4019: The imported project "C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets" was not found. Confirm that the path in the declaration is correct, and that the file exists on disk. (MSB4019) (MyGtkSample)

**Expected Behavior**:
The MonoDevelop should work with Visual Studio 2019 preview.

**Actual Behavior**:
I see an error
I created issue there:
https://github.com/mono/monodevelop/issues/7122
@Therzok says that it's roslyn issue
![52564508-14cde080-2e0d-11e9-8c92-bc39b5a37b02 1](https://user-images.githubusercontent.com/11029246/52741865-15b66c00-2fdf-11e9-824c-dcf8715c0cb2.png)</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33360</IssueID>
    <RepoID>1</RepoID>
    <Title>Quick fix for ! nullable operator</Title>
    <Description>.NET Core 3 Preview 2

I think it'd help a lot of if Roslyn quick-fix offered to suggest the `!` post-fix operator in addition to the pragmas. It would help discoverability of this new language feature and might even be the default?

Today, it offers the pragmas:
![image](https://user-images.githubusercontent.com/1427284/52733022-a7968880-2f8f-11e9-9fc3-5cfe9615b9a2.png)

This is cleaner:
![image](https://user-images.githubusercontent.com/1427284/52733140-f7754f80-2f8f-11e9-9682-55730f4723c3.png)

</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33359</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing possible dereference of a null reference warning for an unboxing conversion from an unconstrained type parameter type</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code
```cs
#nullable enable
class C
{
  interface I { }
  struct S : I {}

  static void Main()
  {
    M&lt;S, I?&gt;(null);
  }

  static void M&lt;T ,V&gt;(V v) where T : struct, V
  {
    var t = ((T) v);
  }
}
```
**Expected Behavior**:
Warning `CS8602 Possible dereference of a null reference.` reported for the cast `(T) v`.
Roslyn does know that the variable `v` can contain null values and correctly warns about its usages in other usage scenarios e.g. `v.ToString()`


**Actual Behavior**:
No warnings. The program crashes at runtime at the line `var t = ((T) v);`</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33358</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove fixed IBC drop name</Title>
    <Description>This will cause the build to pick up the latest.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33357</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP: Remove fixed IBC drop name</Title>
    <Description>This will cause the build to pick up the latest.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33356</IssueID>
    <RepoID>1</RepoID>
    <Title>Test `SwitchExpressionSequencePoints` exposes possible bug in test helpers</Title>
    <Description>The test `SwitchExpressionSequencePoints` fails on Linux with this stack trace:

``` none
System.IndexOutOfRangeException : Index was outside the bounds of the array.

Stack trace
   at Roslyn.Test.Utilities.ILValidation.SnippetFromSpan(String[] lines, XmlElement span) in /_/src/Test/Utilities/Portable/Metadata/ILValidation.cs:line 402
   at Roslyn.Test.Utilities.ILValidation.GetSequencePointMarkers(String pdbXml, String source) in /_/src/Test/Utilities/Portable/Metadata/ILValidation.cs:line 360
   at Microsoft.CodeAnalysis.Test.Utilities.CompilationVerifier.VisualizeIL(MethodData methodData, Boolean realIL, String sequencePoints, String source) in /_/src/Test/Utilities/Portable/CompilationVerifier.cs:line 323
   at Microsoft.CodeAnalysis.Test.Utilities.CompilationVerifier.VisualizeIL(String qualifiedMethodName, Boolean realIL, String sequencePoints, String source) in /_/src/Test/Utilities/Portable/CompilationVerifier.cs:line 289
   at Microsoft.CodeAnalysis.Test.Utilities.CompilationVerifier.VerifyILImpl(String qualifiedMethodName, String expectedIL, Boolean realIL, String sequencePoints, String callerPath, Int32 callerLine, Boolean escapeQuotes, String source) in /_/src/Test/Utilities/Portable/CompilationVerifier.cs:line 279
   at Microsoft.CodeAnalysis.Test.Utilities.CompilationVerifier.VerifyIL(String qualifiedMethodName, String expectedIL, Boolean realIL, String sequencePoints, String callerPath, Int32 callerLine, String source) in /_/src/Test/Utilities/Portable/CompilationVerifier.cs:line 255
   at Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.PatternTests.SwitchExpressionSequencePoints() in /_/src/Compilers/CSharp/Test/Emit/CodeGen/PatternTests.cs:line 2156
```

This appears to be a possible bug in the test helpers.  This test is being marked as WindowsOnly for now.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33355</IssueID>
    <RepoID>1</RepoID>
    <Title>Run CoreCLR builds in a docker container</Title>
    <Description>
    </Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33354</IssueID>
    <RepoID>1</RepoID>
    <Title>Control Flow Graph : Invalid Operation Exception The feature "flow-analysis" is deactivated</Title>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis 2.10.0
**Code**:
```
 var source = @"
class C
{
    void M(int x)
    {
        x = 0;
    }
}";
            var tree = CSharpSyntaxTree.ParseText(source);
            var compilation = CSharpCompilation.Create("c", new[] { tree });
            var model = compilation.GetSemanticModel(tree, ignoreAccessibility: true);
            var methodBodySyntax = tree.GetCompilationUnitRoot().DescendantNodes().OfType&lt;BaseMethodDeclarationSyntax&gt;().Last();

            Console.WriteLine(tree);
        
            var cfgFromSyntax = ControlFlowGraph.Create(methodBodySyntax, model);

            var operation = (IMethodBodyOperation)model.GetOperation(methodBodySyntax);
            var cfgFromOperation = ControlFlowGraph.Create(operation);
```

**Expected Behavior**:
Create a control flow graph from the c# source code
**Actual Behavior**:
I get an error in the following code lines : 
```
var cfgFromSyntax = ControlFlowGraph.Create(methodBodySyntax, model);
var cfgFromOperation = ControlFlowGraph.Create(operation);
```
the Error is : 

&gt; The feature "flow-analysis" is deactivated

**Solution i tried**:
I tried the solution suggested by Mavasani in the issue #2003  
https://github.com/dotnet/roslyn-analyzers/issues/2003 
but i still have the same problem
</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33353</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn dev16.0-vs-deps | 20190213</Title>
    <Description>
    </Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33352</IssueID>
    <RepoID>1</RepoID>
    <Title>Loc 20190213 dev16.0 vs deps</Title>
    <Description>
    </Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33350</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33349</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33348</IssueID>
    <RepoID>1</RepoID>
    <Title>Interactive window questions</Title>
    <Description>Hi, I have some questions regarding the `C# Interactive` window in VS 2017.
They're all regarding the same topic so I thought I'd put them into one issue (instead of spamming many individual questions):

1. How to change font size? There's no setting for it, only F#. The answer [here](https://stackoverflow.com/questions/10990732/change-fonts-and-colors-for-c-sharp-interactive-window-in-visual-studio-2012-rc) is not relevant anymore, the mentioned setting does not exist in the list.

2. How can I add a custom script (or modify the default one) to initialize the repl with? (Same goes for `#reset`). If not, then is there maybe a way to have something like a "shortcut" or "favorite path" or so that can be used with `#r ...` without having to type out the full path? Like `#r myReplStuff.dll`

3. What path is `#load ` relative to?

4. Is there some setting to more easily define things? Like for example instead of having to type `IEnumerable&lt;Dictionary&lt;int, Action&lt;int&gt;&gt;&gt; Dictionaries =&gt; ...`, could I type something like `var Dictionaries =&gt; ...` or `auto Dictionaries =&gt; ...`? I know this is not something C# usually supports, but then again the REPL is a different thing and already supports some stuff that isn't default C#.


</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33347</IssueID>
    <RepoID>1</RepoID>
    <Title>Variables known to be non-null sometimes artifically restricted to one variable</Title>
    <Description>In a number of places in the `NullableWalker`, we set a single variable to the non-null state.  But in many of those cases, we should be using `GetSlotsToMarkAsNotNullable()` to mark more than one variable non-null.

Here is an example of a test for one of them:

``` c#
        [Fact]
        public void NestedNullConditionalAccess()
        {
            var source =
@"class Node
{
    public Node? Next = null;
    void M(Node node) { }
    private static void Test(Node? node)
    {
        node?.Next?.Next?.M(node.Next);
    }
}
";
            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics();
        }
```

this test fails - the compiler incorrectly reports

``` none

                // (7,29): warning CS8604: Possible null reference argument for parameter 'node' in 'void Node.M(Node node)'.
                //         node?.Next?.Next?.M(node.Next);
                Diagnostic(ErrorCode.WRN_NullReferenceArgument, "node.Next").WithArguments("node", "void Node.M(Node node)").WithLocation(7, 29)
```

Tests and comments in the code will refer to this issue.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33346</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect inference of nested nullability for arrays</Title>
    <Description>Since arrays are covariant, we should use the lower-bound rule for merging (the element type) of two array types.  But we do not appear to do that. Here is an excerpt from `NullableReferenceTypeTests.ImplicitlyTypedArrayCreation_02` that shows the missing errors:

``` c#
    static void F(object[] a, object?[] b)
    {
        var c = new[] { a, b };
        c[0][0].ToString(); // missing error 2
        var d = new[] { a, b! };
        d[0][0].ToString(); // missing error 3
        var e = new[] { b!, a };
        e[0][0].ToString(); // missing error 4
    }
```
</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33345</IssueID>
    <RepoID>1</RepoID>
    <Title>Code fix for "use pattern matching" should be removing blanks lines it introduces</Title>
    <Description>Unlike other code fixes, "use pattern matching" doesn't remove blank lines when it removes an assignment:

``` C#
                        var receivingData = this.receiveBuffer[i] as IProjectVersionedValue&lt;IProjectSubscriptionUpdate&gt;;

                        // We should prevent processing the same delta again.
                        if (receivingData != null &amp;&amp; receivingData.DataSourceVersions == resultUpdate.DataSourceVersions &amp;&amp; receivingData.Value.CurrentState == resultUpdate.Value.CurrentState)
                        {
                            this.receiveBuffer[i] = this.processingBuffer[i];
                        }
```

Expected:

``` C# 
                 lock (this.SyncObject)
                 {
                        // We should prevent processing the same delta again.
                        if (this.receiveBuffer[i] is IProjectVersionedValue&lt;IProjectSubscriptionUpdate&gt; receivingData &amp;&amp; receivingData.DataSourceVersions == resultUpdate.DataSourceVersions &amp;&amp; receivingData.Value.CurrentState == resultUpdate.Value.CurrentState)
                        {
                            this.receiveBuffer[i] = this.processingBuffer[i];
                        }
                 }
```

Actual:

``` C#
                    lock (this.SyncObject)
                    {

                        // We should prevent processing the same delta again.
                        if (this.receiveBuffer[i] is IProjectVersionedValue&lt;IProjectSubscriptionUpdate&gt; receivingData &amp;&amp; receivingData.DataSourceVersions == resultUpdate.DataSourceVersions &amp;&amp; receivingData.Value.CurrentState == resultUpdate.Value.CurrentState)
                        {
                            this.receiveBuffer[i] = this.processingBuffer[i];
                        }
                    }
```

Hit in: https://devdiv.visualstudio.com/DevDiv/_git/CPS/pullrequest/164018?path=%2Fsrc%2FMicrosoft.VisualStudio.ProjectSystem%2FCore%2FDataflow%2FSyncLinkToLink.cs&amp;discussionId=1641980&amp;_a=files.

Make sure it handles both the case where code _and_ trivia follows it.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33344</IssueID>
    <RepoID>1</RepoID>
    <Title>NullableWalker fails to update type for a default expression</Title>
    <Description>In the following code in `NullableWalker`, the result tuple type is not updated to reflect that some of its element types may contain null.

``` c#
        public override BoundNode VisitDefaultExpression(BoundDefaultExpression node)
        {
            Debug.Assert(!this.IsConditionalState);

            var result = base.VisitDefaultExpression(node);
            TypeSymbol type = node.Type;
            if (EmptyStructTypeCache.IsTrackableStructType(type))
            {
                int slot = GetOrCreateObjectCreationPlaceholderSlot(node);
                if (slot &gt; 0)
                {
                    this.State[slot] = NullableFlowState.NotNull;
                    InheritNullableStateOfTrackableStruct(type, slot, valueSlot: -1, isDefaultValue: true, isByRefTarget: false, slotWatermark: GetSlotWatermark());
                }
            }

            // PROTOTYPE(ngafter): this fails to produce an updated tuple type for a default expression
            // (with nullable element types where those element types were capable of containing null)
            _resultType = TypeWithState.ForType(type);
            return result;
        }
```
</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33343</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable analyzers in CoreCLR on Mac</Title>
    <Description>Fixes #23736</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33342</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33341</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33340</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33339</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33338</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev15.9.x to dev16.0</Title>
    <Description>
This is an automatically generated pull request from dev15.9.x into dev16.0-preview3.

``` bash
git fetch --all
git checkout merges/dev15.9.x-to-dev16.0-preview3
git reset --hard upstream/dev16.0-preview3
git merge upstream/dev15.9.x
# Fix merge conflicts
git commit
git push upstream merges/dev15.9.x-to-dev16.0-preview3 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33337</IssueID>
    <RepoID>1</RepoID>
    <Title>workspace.WithDebuggerCompletionOptions should not be called in completion. Workspace should handle this internally</Title>
    <Description>https://github.com/dotnet/roslyn/pull/33269/files#diff-95ca19432a9f170fb70acb10dfd39f13R261

Code like 
` _isDebuggerTextView ? workspace.Options.WithDebuggerCompletionOptions() : workspace.Options;`
should not be executed in completion code (CompletionSource.cs or Controller.cs)

@jasonmalinowski wrote:

&gt; This is fine especially since it's mirroring what we're already doing in the Controller, but it's possible for a workspace to override options so workspace.Options does the right thing without having to couple these components together.

&gt; Want to file a bug on this (or just fix it in master?) This will probably also remove @Amadeusz Wieczorek's questions about "why is this magic" because it doesn't have to be magic here.</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33336</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable tuple constraints in method bodies</Title>
    <Description>This change enforces nullable validation on tuple type parameters,
assuming a custom defined tuple, inside of method bodies.

closes #33303</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33335</IssueID>
    <RepoID>1</RepoID>
    <Title>Check expression for null</Title>
    <Description>Customer request copying here.

**Version Used**: Visual Studio 2017

**Steps to Reproduce**:

&gt; 1. Have a potential nullreferenceexception 
![image](https://user-images.githubusercontent.com/8293542/52672308-5a081600-2ed2-11e9-9ef9-6d792c343f15.png)

&gt; 2. The variable attrib can be null and attrib.Value throws NullReferenceException. Resharper prompts an option to add null check or use ?. to avoid this exception.
![image](https://user-images.githubusercontent.com/8293542/52672333-68eec880-2ed2-11e9-81c6-cc41e13da191.png)


**Expected Behavior**:
Receive warning on potential null reference exception.

**Actual Behavior**:
No warning is given.
</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33334</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch Keyboard Language Layout Automatically</Title>
    <Description>**Steps to Reproduce**:
1. Use multiple languages on computer.
2. Start typing in a wrong language, for example, in Russian. Just because this layout was the last one used.

**Expected Behavior**:
1. Switch keyboard to automatically convert Russian letters to English letters, by knowing which letters have the same keys on the keyboard.

This is how it looks in search:

![image](https://user-images.githubusercontent.com/46729679/52676601-7eb6ba80-2edf-11e9-8bf6-b7df9578f9de.png)


This is how it looks in code:

![image](https://user-images.githubusercontent.com/46729679/52676556-5a5ade00-2edf-11e9-964d-645ea85bee13.png)

</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33333</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Interactive REPL language version selection.</Title>
    <Description>Using C# REPL with VS 2019 but can't test latest C# 8 features, is there a way to change language to latest in the REPL?

![image](https://user-images.githubusercontent.com/10322873/52673636-a2025980-2f21-11e9-9ce4-a6d80a1cc7d0.png)
</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33332</IssueID>
    <RepoID>1</RepoID>
    <Title>Warning reported for [CallerMemberName] argument default value</Title>
    <Description>A warning is reported for the `[CallerMemberName]` argument default value although the argument could be considered non-null.
```C#
#nullable enable

using System.Runtime.CompilerServices;

class Program
{
    static void F([CallerMemberName]string name = null) // warning: converting null literal
    {
    }
}
```
Reported by @onovotny.</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33331</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow type inference for class members</Title>
    <Description>I understand that using type inference for class members is a topic already raised in the past but here I want to show how the absence of it is highly detrimental to performance in some cases. In our code we have big auto-generated chunks with lots of lambdas passed as arguments. After removing all bottlenecks related to heap allocation, we are still stuck with delegates for lambdas heap-allocated upon instantiation of an object which significantly slows down the instantiation. We’d like to use class methods instead of lambdas called through static class methods to avoid the delegate allocations but in that case we would lose type inference which is no go for us. Please check the code below that presents the issue and the proposed solution.
`
        class Class1
        {
            bool b;

            static double F(Class1 c) { return c.f(); }
            static Func&lt;Class1, double&gt; _F = F;
            double f() { return this.b ? 10.0 : 20.0; }

            public Class1()
            {
                Class2.Create(this, () =&gt; this.b ? 10.0 : 20.0); // Type inference but heap allocation (assume hundreds of this)

                Class2.Create(this, _F); // No heap allocation but can't use type inference for class members

                // Proposal:
                // static var F(Class1 c) { return c.f(); }
                // static var _F = F;
                // var f() { return this.b ? 10.0 : 20.0; }
            }
        }

        class Class2
        {
            public static Class3&lt;T&gt; Create&lt;T&gt;(Class1 c, Func&lt;T&gt; f)
            {
                return new Class3&lt;T&gt;(c, f);
            }

            public static Class3&lt;T&gt; Create&lt;T&gt;(Class1 c, Func&lt;Class1, T&gt; f)
            {
                return new Class3&lt;T&gt;(c, f);
            }

            public class Class3&lt;T&gt;
            {
                public Class3(Class1 c, Func&lt;T&gt; f) { }
                public Class3(Class1 c, Func&lt;Class1, T&gt; f) { }
            }
        }`</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33330</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable warnings reported for lifted operators when operands are not null</Title>
    <Description>```C#
#nullable enable

class Program
{
    static void F(int? i)
    {
        if (i.HasValue)
        {
            _ = (int)(i &amp; 0xff); // warning: may be null
            _ = (int)(~i);       // warning: may be null
        }
    }
}
```
Reported by @onovotny.

When resolving this issue, please also track down any references to  https://github.com/dotnet/roslyn/issues/31500 (which was resolved as dupe of present issue).</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33329</IssueID>
    <RepoID>1</RepoID>
    <Title>Accessibility violation around overriding internal member is not detected by the compiler, causes a TypeLoadException exception at runtime</Title>
    <Description>Compile lib1.dll ```csc /t:library lib1.cs```:
```
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("lib2")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("lib3")]

public class A
{
    internal virtual void M() =&gt; System.Console.WriteLine("A");
}
```

Compile lib2.dll ```csc /t:library lib2.cs /r:lib1.dll```:
```
public class B : A
{
    internal override void M() =&gt; System.Console.WriteLine("B");
}
```

Compile lib3.exe ```csc lib3.cs /out:lib3.exe /r:lib1.dll /r:lib2.dll```
```
    public class C : B
    {
        internal override void M() =&gt; System.Console.WriteLine("C");

        static void Main()
        {
            new C().Test();
        }

        void Test()
        {
            base.M();
            M();
        }
    }
```

Run or PEVerify lib3.exe.
```
&gt;lib3.exe

Unhandled Exception: System.TypeLoadException: Method 'M' on type 'C' from assembly 'lib3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' is overriding a method that is not
 visible from that assembly.

&gt;peverify lib3.exe

Microsoft (R) .NET Framework PE Verifier.  Version  4.0.30319.0
Copyright (c) Microsoft Corporation.  All rights reserved.

[token  0x02000002] Type load failed.
1 Error(s) Verifying lib3.exe
```

Expected: 
Either execution should succeed and no exception should be thrown, the overriding works. Or, compiler should report an accessibility error for the overriding.


Now comment out the ```internal override void M() =&gt; System.Console.WriteLine("C");``` line in lib3.cs and rebuild lib3.exe.

Run or PEVerify lib3.exe:
```
&gt;lib3.exe
A
B

&gt;peverify lib3.exe

Microsoft (R) .NET Framework PE Verifier.  Version  4.0.30319.0
Copyright (c) Microsoft Corporation.  All rights reserved.

All Classes and Methods in lib3.exe Verified.
```

Observed: 
Note that ```base.M();``` prints "A", i.e. A.M is invoked instead of an inaccessible most derived override B.M. B.M is successfully executed by a virtual call ```M();```.

Expected:
The ```base.M();``` should report an error about the fact that B.M is not accessible.


</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33328</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement caching for parsed editorconfig values in the code style layer</Title>
    <Description>Identified by @heejaechang in https://github.com/dotnet/roslyn/pull/33291#discussion_r255694197.

Currently `TryGetEditorConfigOption` does not cache results for specific options, which can lead to reparsing of the raw string every time an option is requested.
https://github.com/dotnet/roslyn/blob/a557079b3b5562c16c1feb3bebd0391926a01c6e/src/CodeStyle/Core/Analyzers/Options/AnalyzerConfigOptionsExtensions.cs#L30

📝 This code is intended as an interim solution until the new editorconfig-in-compiler APIs replace it.</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33327</IssueID>
    <RepoID>1</RepoID>
    <Title>Correct assert in CustomModifierUtils</Title>
    <Description>The assert for custom modifier checking should include the nullable
validation

closes #30740</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33326</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master into features/readonly-members</Title>
    <Description>Bringing this feature branch up to date.</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33325</IssueID>
    <RepoID>1</RepoID>
    <Title>Use TaggedTextExtension method for getting ClassificationTypeName</Title>
    <Description>Moves changes from https://github.com/dotnet/roslyn/pull/32307 back into master.

Fixes https://github.com/dotnet/roslyn/issues/33266</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33324</IssueID>
    <RepoID>1</RepoID>
    <Title>dotnet-core MyGet gallery flags old version of package as latest</Title>
    <Description>@KexyBiscuit commented on [Mon Feb 11 2019](https://github.com/dotnet/core-sdk/issues/466)

For example, [Microsoft.CSharp](https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.CSharp) tells me that 4.6.0-preview1-27018-01 is the latest, but 4.6.0-preview.19111.6 is published today, why isn't that the latest? I wonder if there's some rule preventing ones from downloading the latest bit of these package, or it's just a operation mistake.

---

@livarcocc commented on [Tue Feb 12 2019](https://github.com/dotnet/core-sdk/issues/466#issuecomment-462846028)

Moving this to Roslyn. We don't produce this package on the SDK.

</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33323</IssueID>
    <RepoID>1</RepoID>
    <Title>🔼 Remember decompiler EULA in the solution user options</Title>
    <Description>Fixes #26415</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33322</IssueID>
    <RepoID>1</RepoID>
    <Title>How to interpret entries in roslynRemoteHost.log file</Title>
    <Description>We write a C# and VB.NET Roslyn Analyzer.

We have received some user questions about what is the content of this file and whether this was useful to report it back to us.

I have failed to find some useful information about this file and about its entries, so I am wondering whether you could help me have a clear understanding.

When is this file generated? What is the content (is it linked to performance?)?

Our ticket: https://github.com/SonarSource/sonar-dotnet/issues/2248</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33321</IssueID>
    <RepoID>1</RepoID>
    <Title>Change Linux build legs to run on a different agent pool</Title>
    <Description>
    </Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33320</IssueID>
    <RepoID>1</RepoID>
    <Title>Compile fails in server mode on OSX involving defines</Title>
    <Description>This is an intermittent bug that I am only seeing on OSX with roslyn server mode enabled.  I have *not* experienced this bug a single time on Windows.

Unity is hitting this bug in our UnityLinker test suite.  The UnityLinker test framework follows the same structure as https://github.com/mono/linker.  The scenario that seems to trigger this bug is compiling the same and/or similar files in the same location with almost identical command line arguments.  The difference that seems to be key in triggering the bug is specifying a define.

In case these clues are of any use, here are things I've done that make the bug go away
* Don't use server mode
* Use `mcs`
* Change `Run2` to use different output assembly file names than `Run1`

**Version Used**: 
```
Microsoft (R) Visual C# Compiler version 2.9.1.65535 (4d10ef64)
Copyright (C) Microsoft Corporation. All rights reserved.
```

**Steps to Reproduce**:

1. Open the attached solution
2. Open `Program.cs`
3. Implement the property `YourRoslynPathOnOSX`
4. Implement the property `PathToAnMscorlibOnOSX`  (You could probably cut out the /nostdlib and get rid of this part if you wanted to)
5. Compile the solution
6. Open a terminal and cd `RoslynDefineBug/bin/Debug`
7. Run `mono RoslynDefineBug.exe` (Mono has nothing to do with the bug, you could adjust the project to compile for .NET Core and use that if you wanted)

**Expected Behavior**:

No compile errors should occur

**Actual Behavior**:

The following errors will appear one or more times
```
Failed to compile assembly with csc:
common/Executable.cs(3,7): error CS0246: The type or namespace name 'ONE' could not be found (are you missing a using directive or an assembly reference?)
common/Executable.cs(22,47): error CS0246: The type or namespace name 'IntegratedSubsystemDescriptor&lt;&gt;' could not be found (are you missing a using directive or an assembly reference?)
common/Executable.cs(32,37): error CS0246: The type or namespace name 'IntegratedSubsystem&lt;&gt;' could not be found (are you missing a using directive or an assembly reference?)

Failed to compile assembly with csc:
common/Executable.cs(3,7): error CS0246: The type or namespace name 'ONE' could not be found (are you missing a using directive or an assembly reference?)
common/Executable.cs(22,47): error CS0246: The type or namespace name 'IntegratedSubsystemDescriptor&lt;&gt;' could not be found (are you missing a using directive or an assembly reference?)
common/Executable.cs(32,37): error CS0246: The type or namespace name 'IntegratedSubsystem&lt;&gt;' could not be found (are you missing a using directive or an assembly reference?)
```

[RoslynDefineBug.zip](https://github.com/dotnet/roslyn/files/2856022/RoslynDefineBug.zip)



</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33319</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33318</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33317</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33316</IssueID>
    <RepoID>1</RepoID>
    <Title>Local function hides functions declared in class</Title>
    <Description>**Version Used**: 

C# 7.3 (Visual Studio 2017 15.9.6

**Steps to Reproduce**:



    public class Mutator
    {
        public int Mutate(int a, int b)
        {
            bool IsSum(int x)
            {
                return true;
            }

            if (IsSum(a, b))
            {
                return a + b;
            }
            else
            {
                return a - b;
            }
        }

        public bool IsSum(int a, int b)
        {
            return false;
        }
    }




**Expected Behavior**:

Compilation without errors

**Actual Behavior**:

error CS1501: No overload for method 'IsSum' takes 2 arguments

</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33315</IssueID>
    <RepoID>1</RepoID>
    <Title>Error CS0656 occurs after enabling embed interop types for COM reference in a Class Library (.NET Standard) project</Title>
    <Description>**Version Used**: 3.0.19.6812 (231aeb8b)

**Steps to Reproduce**:

1. Enable embed interop types for COM reference in a Class Library (.NET Standard) project.

**Expected Behavior**: Everything works.

**Actual Behavior**:

```
Error CS0656: Missing compiler required member 'Microsoft.CSharp.RuntimeBinder.Binder.Convert' occurs after enabling embed interop types for COM reference in a Class Library (.NET Standard) project.
```

**Reference**: [Error CS0656 occurs after enabling embed interop types for COM reference in a Class Library (.NET Standard) project](https://developercommunity.visualstudio.com/content/problem/411919/error-cs0656-occurred-after-enabling-embed-interop.html)</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33314</IssueID>
    <RepoID>1</RepoID>
    <Title>Suppressions for CA1811:AvoidUncalledPrivateCode should be respected by IDE0051</Title>
    <Description>CPS code base has a bunch of "unused" things that look like this:

```
        /// &lt;summary&gt;
        /// Wires up this service to event notifications that it needs to respond to.
        /// &lt;/summary&gt;
        [ConfiguredProjectAutoLoad]
        [AppliesTo(ProjectCapabilities.Cps + " &amp; " + ProjectCapabilities.ProjectReferences)]
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Called by MEF")]
        private void WireUp()
        {
            this.ShellServices.ProjectRenamedInSolution += this.ShellServices_ProjectRenamedInSolution;
            this.ShellServices.ProjectRemovedFromSolution += this.ShellServices_ProjectRemovedFromSolution;
        }
```

For these we get IDE0051:

```
Severity	Code	Description	Project	File	Line	Category	Suppression State
Message	IDE0051	Private member 'ProjectReferenceMaintenanceService.WireUp' is unused.	Microsoft.VisualStudio.ProjectSystem.VS.Implementation	E:\CPS\src\Microsoft.VisualStudio.ProjectSystem.VS.Implementation\ProjectReferenceMaintenanceService.cs	106	Code Quality	Active
```

IDE0051 is exactly the same rule as CA1811, except that it has been removed to the Roslyn tree and renamed. In FxCop days, when we merged rules, we had a mapping table so that existing suppressions would be respected by the new rule. Roslyn should have the same thing.

CPS code base has over 200 instances of this.</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33313</IssueID>
    <RepoID>1</RepoID>
    <Title>"Remove redundant assignment" should remove extra blank lines between assignment and trivia</Title>
    <Description>"Remove redundant assignment" already removes extra blank lines between assignment and any additional code, so the following:

``` C#
        static void Main(string[] args)
        {
            string foo = null;

			Console.WriteLine();

            foo = new string('A', 10);

            Console.WriteLine(foo);
        }
```

Will be (correctly) collapsed to:

``` C#
        static void Main(string[] args)
        {
			Console.WriteLine();

            string foo = new string('A', 10);

            Console.WriteLine(foo);
        }
```

However, if its trivia, this doesn't occur:

``` C#
        static void Main(string[] args)
        {
            string foo = null;

            // This is a comment

            foo = new string('A', 10);

            Console.WriteLine(foo);
        }
```

Gets changed to:

``` C#
        static void Main(string[] args)
        {

            // This is a comment

            string foo = new string('A', 10);

            Console.WriteLine(foo);
        }
```

Hit this in this giant code review: https://devdiv.visualstudio.com/DevDiv/_git/CPS/pullrequest/163613?_a=overview.</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33312</IssueID>
    <RepoID>1</RepoID>
    <Title>"Remove redundant assignment" code fix moves variables above prepended trivia</Title>
    <Description>``` C#
    class Program
    {
        static void Main(string[] args)
        {
            // Each of the last two parameters - itemType and itemName - could be null or non-null. This gives rise
            // to four such combinations. All these four combinations are valid for the project manifest but only three of them
            // are valid for property sheets.
            string foo = null; // Remove redundant assignment

            if (args.Length == 0)
            {
                foo = "1";
            }
            else
            {
                foo = "2";
            }

            Console.WriteLine(foo);
        }
    }
```

Expected:
``` C#
    class Program
    {
        static void Main(string[] args)
        {
            // Each of the last two parameters - itemType and itemName - could be null or non-null. This gives rise
            // to four such combinations. All these four combinations are valid for the project manifest but only three of them
            // are valid for property sheets.
            string foo;
            [...]
        }
    }
```

Actual:
``` C#
    class Program
    {
        static void Main(string[] args)
        {
            string foo;
            // Each of the last two parameters - itemType and itemName - could be null or non-null. This gives rise
            // to four such combinations. All these four combinations are valid for the project manifest but only three of them
            // are valid for property sheets.

            [...]
        }
    }
```</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>04/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33311</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle the newly added null coalescing assignment operation in the un…</Title>
    <Description>…used parameters and values analyzer.

Unfortunately, this operation is not an ICompoundAssignmentOperation, hence needs to be handled specially by analyzers that need to analyze read/writes.
Also added support to the fixer to handle coalesce assignments.

Fixes #33299</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33310</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure we don't run off the end of the string when parsing \x1</Title>
    <Description>The code was assuming that there is a " at the end of the string token which it could use to safely bail. In the case of interpolated strings, the token is just the stuff up to the next interpolated hole, where there might not be any marker at all. Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/746365.

While I was here, I saw a test was skipped for a new language feature, and I correctly implemented the test.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

User opens a source file that contains a Unicode escape like "\x01" inside of an interpolated string. Visual Studio might crash.

### Bugs this fixes

https://devdiv.visualstudio.com/DevDiv/_workitems/edit/746365

### Workarounds, if any

Don't use this code pattern. The user won't have any way to understand that this code pattern is causing the issue though.

### Risk

Low. Just adding a bounds check.

### Performance impact

None.

### Is this a regression from a previous update?

It's a regression from Visual Studio 2017. We added a new feature that does additional classification of string literals; this was crashing in that code because it wasn't expecting a string of the right form.

### Root cause analysis

This is an oversight in a corner case of the language: plenty of tests were added in regular strings, but not interpolated strings. A test has been added.

### How was the bug found?

Watson reports.

&lt;/details&gt;</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33309</IssueID>
    <RepoID>1</RepoID>
    <Title>🔼 Allow the decompiler legal notice to be cancelled</Title>
    <Description>Fixes #28274</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33308</IssueID>
    <RepoID>1</RepoID>
    <Title>Update install x-copy build (#33259)</Title>
    <Description>Port from dev16.0 branch</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33307</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33306</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33305</IssueID>
    <RepoID>1</RepoID>
    <Title>Navigate to Decompiled Sources Cancel</Title>
    <Description>There should be a way to cancel Navigate to Decompiled Sources in the dialog. Even selecting `No` will still open the metadata view.

**Steps to Reproduce**:

1. Ctrl+click on an external reference that triggers Navigate to Decompiled Sources. (The experimental Navigate to Decompiled sources setting in Tools &gt; Options would need to be on.)
2. Hit `No` in dialog
![image](https://user-images.githubusercontent.com/8293542/52600458-8ce9d580-2e10-11e9-88ef-a01d57238d91.png)

**Expected Behavior**:
Does not navigate to metadata, or there is an option to cancel navigating entirely.

**Actual Behavior**:
Navigates to metadata.

Originated from [customer tweet](https://twitter.com/mortenmertner/status/1094625474079268871).</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33304</IssueID>
    <RepoID>1</RepoID>
    <Title>Extremely high memory usage</Title>
    <Description>**Version Used**: 2.10.0

**Steps to Reproduce**:
Code and paste the following code into a .net core 2.2 console app and run it.

```
using System;
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;

namespace MyCode
{
    public static class MyClass
    {
        public static int MyFunc(int i)
        {
            return i;
        }
    }
}
namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {

            for (int i = 0; i &lt; 2000; i++)
            {
                object a = CSharpScriptEngine.Execute("MyCode.MyClass.MyFunc(1)");//simple code
            }
          
            Console.ReadKey();
        }

        public class CSharpScriptEngine
        {
            private static ScriptState&lt;object&gt; scriptState = null;
            private static ScriptOptions ScriptOptions = ScriptOptions.Default.AddReferences(typeof(Program).Assembly);
            public static object Execute(string code)
            {
                   scriptState = scriptState == null ? CSharpScript.RunAsync(code, ScriptOptions).Result : scriptState.ContinueWithAsync(code).Result;

                if (scriptState.ReturnValue != null &amp;&amp; !string.IsNullOrEmpty(scriptState.ReturnValue.ToString()))
                    return scriptState.ReturnValue;
                return null;
            }
        }
    }
}
```


**Expected Behavior**: Low memory usage, being able to use complex formulas (not simple ones like above) in a release environment.

**Actual Behavior**: The applications memory usage is crazy high, you will easily hit 1gb of ram used in a few seconds, and it is never freed 
</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33303</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable constraints not validated on tuple types inside method bodies</Title>
    <Description>Consider the following code: 

``` csharp
#nullable enable

namespace System
{
    // struct with two values
    public struct ValueTuple&lt;T1, T2&gt;
        where T1 : object
        where T2 : object
    {
        public T1 Item1;
        public T2 Item2;

        public ValueTuple(T1 item1, T2 item2)
        {
            this.Item1 = item1;
            this.Item2 = item2;
        }

        public override string ToString()
        {
            return "";
        }
    }

}

class C {
    void M((string?, string) a) {
        string? s = null;
        var x = ("", s);
    }
}
```

The compiler will issue a warning for the tuple inside the method signature but not inside the method body. </Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33302</IssueID>
    <RepoID>1</RepoID>
    <Title>Check more classifications for default theme color</Title>
    <Description>Check more classifications for whether they have been customized before applying enhanced colors.

Fixes #33301

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

When C# or VB user has a custom color theme that does not customize the classifications used by the enhanced colors preview feature, the enhanced colors will be applied on start up. 

### Bugs this fixes

https://devdiv.visualstudio.com/DevDiv/_queries/edit/776767

### Workarounds, if any

The user can disable the enhanced colors preview feature from the Tools&gt;Options - General&gt;Preview Features page.

### Risk

Low.

### Performance impact

None

### Is this a regression from a previous update?

No

### Root cause analysis

N/A
</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33301</IssueID>
    <RepoID>1</RepoID>
    <Title>custom vs color scheme keeps reseting every upgrade of Dev16</Title>
    <Description>I have the solarized light VS color scheme applied to my VS and everytime I update to the latest dogfood build, the syntax highlighting colors gets reset to the default color scheme (i.e. not my custom color scheme). My current workaround is to reapply my vssettings file, but this is getting old having to do this every time I update to the latest build.

The vssettings file can be found at: https://github.com/leddt/visualstudio-colors-solarized/blob/master/vs2017/solarized-light.vssettings

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/433259/custom-vs-color-scheme-keeps-reseting-every-upgrad.html
VSTS ticketId: 775477_
_These are the original issue comments:_

John Schultz [MSFT] on 1/24/2019, 09:29 AM (18 days ago): &lt;p&gt;Update: &lt;/p&gt;&lt;p&gt;Not sure this has anything to do with upgrading now. I have noticed that it only impacts C# code (C++ always using my custom color scheme) and it seems to reoccur every time I restart VS. This is&lt;em&gt; incredibly&lt;/em&gt; annoying to have to re-import my custom colors every time I restart VS.&lt;/p&gt;

John Schultz [MSFT] on 1/25/2019, 10:22 AM (17 days ago): &lt;p&gt;Further update:&lt;/p&gt;&lt;p&gt;It seems to be related to the Preview Feature "Use enhanced colors for C# and Basic". Once I turned this off, my custom color theme remained consistently applied between restarts/upgrades.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33300</IssueID>
    <RepoID>1</RepoID>
    <Title>Bad code for consecutive interface type tests with a when clause in a switch (dev16.0)</Title>
    <Description>Fixes #32774

This was previously reviewed and approved by reviewers at #32808

See also https://devdiv.visualstudio.com/DevDiv/_workitems/edit/792969 for shiproom purposes.

/cc @jaredpar </Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33299</IssueID>
    <RepoID>1</RepoID>
    <Title>Wrong "Remove unused parameter" suggestion when using compound assigments</Title>
    <Description>VSF_TYPE_MARKDOWN
```csharp
 public static byte[] Combine(this byte[] first, byte[] second)
        {
            first ??= new byte[0];
            second ??= new byte[0];

            var ret = new byte[first.Length + second.Length];
            Buffer.BlockCopy(first, 0, ret, 0, first.Length);
            Buffer.BlockCopy(second, 0, ret, first.Length, second.Length);
            return ret;
        }
```

The light bulp says `first` and `second` arguments are **unused** but they not.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/447307/wrong-remove-unused-parameter-suggestion-when-usin.html
VSTS ticketId: 787940_
_These are the original issue comments:_

cihanyakar on 2/11/2019, 02:25 AM (9 hours ago): &lt;p&gt;A small info: C# 8.0 nullable feature is enabled&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33298</IssueID>
    <RepoID>1</RepoID>
    <Title>Block comment / uncomment</Title>
    <Description>## Feature
Similar to other IDEs and languages, support for block comment / uncomment functionality would be useful.
Some examples:
https://www.jetbrains.com/help/ruby/commenting-and-uncommenting-blocks-of-code.html 
https://www.jetbrains.com/help/resharper/Coding_Assistance__Comment_Uncomment_Code.html 
https://www.jetbrains.com/help/idea/using-code-editor.html
https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf

## Proposal
In general, we are proposing a new 'toggle block comment' command.  This command will be mapped to a single shortcut and will only act on block comments (not single line comments).

### Command
The block commenting command will be a *toggle* based command.  If the span selected contains a block comment it will be removed; otherwise, a block comment will be added.  Details on the exact functionality will be explained below.  

It will be accessible through a keyboard shortcut which by default would be mapped to `Cntrl + Shift + /`.  This mapping is currently unused in a default visual studio installation.  

#### Notes
1.  Toggle behavior is almost universal across editors that have block comment functionality.  
2.  `Cntrl + Shift + /` happens to be the same command used by resharper for the same functionality.  We considered alternatives such as `Shift + Alt + A` (the VS Code block comment command) but it was unfortunately already in use by **Project.AddExistingItem**

### Functionality
The same command will both add and remove block comments depending on the context that the user has selected (highlighted).

#### Removing block comments
1.  The selection contains a block comment section (plus whitespace).  _Matches current uncomment behavior._  &lt;img width="767" alt="remove_entirely_within" src="https://user-images.githubusercontent.com/5749229/52743719-89c92380-2f8f-11e9-991b-647538774fba.png"&gt;
2.  The selection is contained entirely inside a block comment section.  _Matches current uncomment behavior.  Other toggle block comment features usually do nothing._  &lt;img width="748" alt="remove_comment_around" src="https://user-images.githubusercontent.com/5749229/52743837-cb59ce80-2f8f-11e9-9d08-d1f43f7aa5ed.png"&gt;
3.  The caret is inside a block comment section.  _Matches current uncomment behavior._  &lt;img width="755" alt="caret_inside_remove" src="https://user-images.githubusercontent.com/5749229/52743887-e9273380-2f8f-11e9-95fb-3045b5cd7b80.png"&gt;
4.  The caret is before the block comment open marker or after the block comment close marker on the same line with only whitespace.

#### Adding block comments
1.  The selection contains no block comments.  &lt;img width="742" alt="add_selection" src="https://user-images.githubusercontent.com/5749229/52743938-0d831000-2f90-11e9-8132-ff47bfe95b12.png"&gt;
2.  The caret is not inside a block comment.  A block comment will be added after the caret at the next whitespace.  _Similar to R#._  &lt;img width="748" alt="add_caret" src="https://user-images.githubusercontent.com/5749229/52744141-b3367f00-2f90-11e9-9114-b71413820c8d.png"&gt;
3.  The selection contains all of a block comment plus other code.  &lt;img width="746" alt="code_plus_block" src="https://user-images.githubusercontent.com/5749229/52747954-f77a4d00-2f99-11e9-8d53-b8d5b417bdcc.png"&gt;  In this case, the comment will be *extended* to cover the newly selected pieces with multiple comments blocks.  &lt;img width="741" alt="code_plus_block_result" src="https://user-images.githubusercontent.com/5749229/52747989-1e388380-2f9a-11e9-8864-918769cccff1.png"&gt;  _This is similar to how intellij functions._
4.  The selection contains part of a block comment plus other code.  &lt;img width="749" alt="partial_code" src="https://user-images.githubusercontent.com/5749229/52748193-ba628a80-2f9a-11e9-9b5a-68491bf18ebf.png"&gt;  When this case happens, we will add additional comments to cover the extra code being selected.  &lt;img width="751" alt="partial_code_result" src="https://user-images.githubusercontent.com/5749229/52748236-d9f9b300-2f9a-11e9-8117-90bbd4430c11.png"&gt;
5.  The caret is before (or after) the block comment open (or close) marker with only whitespace in between but on a different line.

#### Highlight
The comment section being added or removed will be selected once the command completes.  *Matches current behavior.*

### Changes to UI
No icon will be introduced for this command for the following reasons.
1.  Introducing a toggle block comment icon would not make sense unless the current comment / uncomment icons were made into a single toggle button.
2.  Adding two new icons to block comment or block uncomment would not work with a toggle command.  The preference is for toggle over add / remove.
3.  The existing icons and UI is rather unhelpful already.
4.  We guess that these icons are rarely ever used over the keyboard shortcuts (TBD is that data available?)

### Changes to existing comment / uncomment commands.
The existing comment / uncomment commands will be left as-is.  We want to avoid breaking users' existing workflows that they may be used to.  This means that
1.  The single line comment command can create a block comment when the selection is inside a single line.  &lt;img width="752" alt="within_line" src="https://user-images.githubusercontent.com/5749229/52744601-02c97a80-2f92-11e9-95e7-8af8903827db.png"&gt;
2.  The uncomment line comment command can uncomment block comments with similar functionality to block uncomment.

## Prior work

### Current VS Functionality
VS currently has separate comment and uncomment commands (comment: `Cntrl+K,Cntrl+C`, uncomment: `Cntrl+K,Cntrl+U`).  These commands also have representation in the UI.

![comment_selection](https://user-images.githubusercontent.com/5749229/52589534-ea235e00-2df3-11e9-82c0-61999b9346d2.png)

Commenting a selection will comment all lines that the selection spans with a single line comment.  If the selection is inside one line, it will use a block comment on the selection.  
Uncommenting a selection tries the following steps in order.
1.  Uncomment a block comment span if the selected span exactly matches the block comment span.
2.  Uncomment any single line comment (or multiple single line comments) on the selected span's lines.
3.  Uncomment any block comment that surrounds the selected span.

### Resharper Functionality
Resharper has separate command *toggles* for dealing with single line comments and block comments.
`Cntrl+Alt+/` will comment and uncomment single line comments.  `Cntrl+Shift+/` will comment and uncomment block comments.  If there is a selection, it will add a block comment around the selection.  If the selection exactly matches a block comment, it will uncomment the selection.  If the selection is within a block comment it will do nothing.  If the *caret* is inside a block comment, it will uncomment the block.

### Intellij
Block comments are toggled in intellij with `Cntrl+Shift+/`.  It functions the same as resharper.

### VS Code
`Shift+Alt+A` toggles block comments in VS code.  This toggle looks at the *lines* of code to determine whether or not to comment or uncomment the block.  If the first and last line of the selection contain block comment characters, it will uncomment them.  Otherwise, it will add a comment (even inside an existing block).</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33297</IssueID>
    <RepoID>1</RepoID>
    <Title>Wrap parallel file parsing in fatal exception handler</Title>
    <Description>Parallel.For operations wrap exceptions in an AggregateException, which
destroys dump information. This change should crash the process on a parse
exception and preserve the dump information for Watson.</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33296</IssueID>
    <RepoID>1</RepoID>
    <Title>Keep all using imports within namespace</Title>
    <Description>Customer request:

&gt; My team code style is to keep all using imports within the scope of the namespace. VS 2017 auto import throws them wherever it wants. Sometimes inside the namespace, sometimes outside this scope (I think based on precedence of where they already exist?) 

&gt; I’d like to select a checkbox (like I can in ReSharper) import in deepest nested scope. Matching my team’s code style should be trivial with the help of an IDE. 

Our only editorconfig settings for imports are [organizing and sorting usings](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2017#usings). This would be a new editorconfig rule.
</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33295</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn doesn't update inferred nullable annotations for fields with type parameters on subsequent data flow passes</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
class C&lt;T&gt;
{
  public T FieldWithInferredAnnotation;
}
class C
{
  static void Main()
  {
    Test(null);
  }

  static void Test(string? s)
  {
    s = "";
    hell:
    var c = GetC(s);
    c.FieldWithInferredAnnotation.ToString();
    s = null;
    goto hell;
  }

  public static C&lt;T&gt; GetC&lt;T&gt;(T t) =&gt; new C&lt;T&gt; { FieldWithInferredAnnotation = t };
  public static T GetT&lt;T&gt;(T t) =&gt; t;
}
```

**Expected Behavior**:
Warning `CS8602 Possible dereference of a null reference.` for the line 
`c.FieldWithInferredAnnotation.ToString();` since on the second pass the type of `c` should be inferred to be `C&lt;string?&gt;` and its `FieldWithInferredAnnotation` should be recognized as nullable.

**Actual Behavior**:
No warnings. The program crashes with a `NullReferenceException` at the line `c.FieldWithInferredAnnotation.ToString();`

**Notes**
Roslyn correctly updates nullability of local variables in similar scenarios but fails when type arguments are used in the target types' fields or properties.
I.e. the following code correctly reports CS8602:

```cs
class C
{
  static void Test(string? s)
  {
    s = "";
    hell:
    var t = GetT(s);
    t.ToString(); // CS8602
    s = null;
    goto hell;
  }

  public static T GetT&lt;T&gt;(T t) =&gt; t;
}
```</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33293</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixes AddUsingExactMatchBeforeRenameTracking integration test</Title>
    <Description>fixes #33292 </Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33292</IssueID>
    <RepoID>1</RepoID>
    <Title>AddUsingExactMatchBeforeRenameTracking integration test needs order updated</Title>
    <Description>```Remove unused variable``` needs to be added to suggested actions</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33291</IssueID>
    <RepoID>1</RepoID>
    <Title>Reduce allocations in the formatter</Title>
    <Description>Builds on #33170 

This change reduces allocations in `AbstractFormatEngine.Format` by 70% (numbers before this change exceeded 10GiB while compiling Roslyn.sln).

| Item | Allocation fraction |
| --- | --- |
| Dictionary in TryGetEditorConfigOption | 39.6% |
| GetAdjustNewLinesOperation | 15.7% |
| ApplyTriviaOperations | 6.8% |
| TryGetOption | 4.4% |
| GetTrailingColonTrivia | 1.7% |
| ColonTriviaFollowedByLineContinuation (#33170) | 1.6% |
| PartOfMultilineLambdaFooter | 0.9% |</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33290</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid using IOperation.Children in OperationExtensions.Descendants</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

**Steps to Reproduce**:

Rebuild Roslyn.sln while profiling allocations.

**Expected Behavior**:

`IOperation.Children` is never used directly on hot paths.

**Actual Behavior**:

`IOperation.Children` is used in `OperationExtensions.Descendants`, a very hot path during compile-time analysis.

https://github.com/dotnet/roslyn/blob/d260ee0c20ed31e1ef057bdc179a451e76cf24da/src/Compilers/Core/Portable/Operations/OperationExtensions.cs#L78-L101</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33289</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn fails to apply inferred type arguments' nullability after `?.` access</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
struct C&lt;T&gt;
{
  public T FieldWithInferredAnnotation;
  public string? ExplicitlyAnnotatedField;
}
class C
{
  static void Main()
  {
    Test(null);
    System.Console.ReadKey();
  }

  static void Test(string? s)
  {
    var nc = M(s);
    nc?.FieldWithInferredAnnotation.ToString(); // no warnings, the program crashes at runtime on this line
  }

  public static C&lt;T&gt;? M&lt;T&gt;(T t) =&gt; new C&lt;T&gt;();
}
```

**Expected Behavior**:
Warning `CS8602 Possible dereference of a null reference.` reported for at the line `nc?.FieldWithInferredAnnotation.ToString()`


**Actual Behavior**:
Roslyn fails to warn about possible dereference of a null reference in case of `?.` access to a generic field. The program crashes at runtime with a `NullReferenceException` on the line that doesn't have any warnings.

**Notes**
It looks like Roslyn fails to apply type arguments with inferred nullability after unwrapping a generic struct from `Nullable&lt;T&gt;` with `?.` access. 
Explicitly annotated fields e.g. `nc?.ExplicitlyAnnotatedField.ToString()` and direct unwraps from `Nullable&lt;T&gt;` via its `.Value` property e.g. `nc.Value.FieldWItnInferredAnnotation.ToString()` have correct warnings.</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33288</IssueID>
    <RepoID>1</RepoID>
    <Title>Bug in control flow analysis for out arguments</Title>
    <Description>Looks like the C# compiler have a bug in control flow analysis

```cs
// Project1.csproj
using Library;

namespace ControlFlowError
{
    public sealed class ValueProvider
    {
        public bool TryGetValue(out Result result)
        {
            // Expected: The out parameter 'result' must be assigned to before control leaves the current method
            return false;
        }
    }
}
```
```cs
// Project2.csproj
namespace Library
{
    public readonly struct Result
    {
        public object Value { get; }

        //public readonly object Value; // 2. Works as expected
        //public readonly int Value;    // 3. Works as expected
    }
}
```
**Steps to Reproduce**:
Clone the project https://github.com/rameel/ControlFlowError

**Expected Behavior**:
Compilation error with the message: The out parameter 'result' must be assigned to before control leaves the current method

**Actual Behavior**:
Compiled successfully
</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33287</IssueID>
    <RepoID>1</RepoID>
    <Title>GenerateConstructorFromMembersCodeRefactoringProvider encounted an error and has been disabled. (VB.NET not supported)</Title>
    <Description>VSF_TYPE_MARKDOWNStacktrace:


```
System.NotSupportedException : ThrowExpressions are not supported in Visual Basic
   at Microsoft.CodeAnalysis.VisualBasic.CodeGeneration.VisualBasicSyntaxGenerator.ThrowExpression(SyntaxNode expression)
   at Microsoft.CodeAnalysis.Shared.Extensions.SyntaxGeneratorExtensions.CreateThrowArgumentNullExpression(SyntaxGenerator factory,Compilation compilation,IParameterSymbol parameter)
   at Microsoft.CodeAnalysis.Shared.Extensions.SyntaxGeneratorExtensions.CreateAssignWithNullCheckStatement(SyntaxGenerator factory,Compilation compilation,IParameterSymbol parameter,SyntaxNode fieldAccess)
   at Microsoft.CodeAnalysis.Shared.Extensions.SyntaxGeneratorExtensions.AddAssignmentStatements(SyntaxGenerator factory,Compilation compilation,IParameterSymbol parameter,SyntaxNode fieldAccess,Boolean addNullChecks,Boolean preferThrowExpression,ArrayBuilder`1 nullCheckStatements,ArrayBuilder`1 assignStatements)
   at Microsoft.CodeAnalysis.Shared.Extensions.SyntaxGeneratorExtensions.CreateAssignmentStatements(SyntaxGenerator factory,Compilation compilation,ImmutableArray`1 parameters,IDictionary`2 parameterToExistingFieldMap,IDictionary`2 parameterToNewFieldMap,Boolean addNullChecks,Boolean preferThrowExpression)
   at Microsoft.CodeAnalysis.Shared.Extensions.SyntaxGeneratorExtensions.CreateFieldDelegatingConstructor(SyntaxGenerator factory,Compilation compilation,String typeName,INamedTypeSymbol containingTypeOpt,ImmutableArray`1 parameters,IDictionary`2 parameterToExistingFieldMap,IDictionary`2 parameterToNewFieldMap,Boolean addNullChecks,Boolean preferThrowExpression,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.GenerateConstructorFromMembers.GenerateConstructorFromMembersCodeRefactoringProvider.FieldDelegatingCodeAction.GetChangedDocumentAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsCoreAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.GenerateConstructorFromMembers.GenerateConstructorFromMembersCodeRefactoringProvider.GenerateConstructorWithDialogCodeAction.ComputeOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&amp;lt;&amp;gt;c__DisplayClass17_0.&amp;lt;InvokeCore&amp;gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/448852/generateconstructorfrommemberscoderefactoringprovi-1.html
VSTS ticketId: 788929_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>22/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33286</IssueID>
    <RepoID>1</RepoID>
    <Title>Better support for InvalidTypeCast  Warning</Title>
    <Description>Reported by internal customer Sudhanshu Gupta  

Code snippet looks like: 
```
foreach (MimeRecipient recipin headerNew)
       { … }
```
 
Where enumerator for headerNew returned base type IEnumerable&lt;MimeNode&gt; while I casted it to MimeRecipient : MimeNode
This led to a Typecast exception in a corner scenario where object was another derived type of MimeNode. 
Is there a way to provide warning for such scenarios.

</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33285</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE cannot make up it’s mind: cast is necessary or unnecessary for nullable reference?</Title>
    <Description>The IDE tells me that the cast is redundant in here:

    private EntityIdentifier(EntityIdentifierFlags flags, ReadOnlyMemory&lt;byte&gt; identifier, ReadOnlyMemory&lt;byte&gt; identifierSuffix, ReadOnlyMemory&lt;byte&gt;? buffer = null)
        : base(buffer == null ? new Lazy&lt;ReadOnlyMemory&lt;byte&gt;&gt;(CreateMemoryFactory(flags, identifier, identifierSuffix)) : new Lazy&lt;ReadOnlyMemory&lt;byte&gt;&gt;((ReadOnlyMemory&lt;byte&gt;)buffer))
    {
        this.Flags = flags;
        this.Identifier = identifier;
        this.IdentifierSuffix = identifierSuffix;
    }

`(ReadOnlyMemory&lt;byte&gt;)buffer` in `new Lazy&lt;ReadOnlyMemory&lt;byte&gt;&gt;((ReadOnlyMemory&lt;byte&gt;)buffer)` could be simplified to just `buffer`, because `buffer` is `ReadOnlyMemory&lt;byte&gt;?`. But upon simplification, the IDE cannot find the correct constructor to use. It complains that `ReadOnlyMemory&lt;byte&gt;?` cannot be converted to type `bool`.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/445486/ide-cannot-make-up-its-mind-cast-is-necessary-or-u.html
VSTS ticketId: 786138_
_These are the original issue comments:_

I_Keon_Un on 2/5/2019, 08:14 AM (5 days ago): I solved it by writing an extension method for `ReadOnlyMemory&gt;`:&lt;br&gt;&lt;br&gt;    static class ReadOnlyMemoryExtensions&lt;br&gt;    \{&lt;br&gt;        public static Lazy&gt; ToLazyReadOnlyMemory(this ReadOnlyMemory buffer) =&gt; new Lazy&gt;(buffer);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;And I rewrote my original constructor as follows:&lt;br&gt;&lt;br&gt;    private EntityIdentifier(EntityIdentifierFlags flags, ReadOnlyMemory identifier, ReadOnlyMemory identifierSuffix, ReadOnlyMemory? buffer = null)&lt;br&gt;        : base(buffer?.ToLazyReadOnlyMemory() ?? new Lazy&gt;(CreateMemoryFactory(flags, identifier, identifierSuffix)))&lt;br&gt;    \{&lt;br&gt;        this.Flags = flags;&lt;br&gt;        this.Identifier = identifier;&lt;br&gt;        this.IdentifierSuffix = identifierSuffix;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;That gets rid of the errors. But ideally, the method overload resolution should be smarter than that. And at the very least, the IDE should not be giving misleading advice.
I_Keon_Un on 2/5/2019, 08:15 AM (5 days ago): Oh god… what happened to the markdown formatting in my comment above…?
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33284</IssueID>
    <RepoID>1</RepoID>
    <Title>'if' statement with lambda CANNOT be simplified in C#</Title>
    <Description>VSF_TYPE_MARKDOWNThe Visual Studio 2019 (Preview 2) IDE suggests **IDE0045** _'if' statement can be simplified_:

```csharp
    if (containsHighBits)
    {
        write = (char character) =&gt; writer.WriteUInt16BigEndian(character);
    }
    else
    {
        write = (char character) =&gt; writer.WriteByte((byte)character);
    }
```

Of course, the resulting code gets underlined with a red wavy line. This refactored code does not compile:

```csharp
    Action&lt;char&gt; write = containsHighBits
        ? ((char character) =&gt; writer.WriteUInt16BigEndian(character))
        : ((char character) =&gt; writer.WriteByte((byte)character));
```

New error: **CS0173** _Type of conditional expression cannot be determined because there is no implicit conversion between 'lambda expression' and 'lambda expression'_

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/444056/if-statement-with-lambda-cannot-be-simplified-in-c.html
VSTS ticketId: 785223_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33283</IssueID>
    <RepoID>1</RepoID>
    <Title>File end up in wrong folder when using "Move type to ..." quick action menu</Title>
    <Description>When using &amp;quot;Move type to TypeName.cs&amp;quot; from the quick action menu in c# projects, the new file is always moved to the root of the project structure instead of staying in the same folder (but the class/file retains the same namespace declaration as the source file).

This behavior appears at least when targeting .net framework 4.6. However if I create a new solution targeting .net standard 2.0 it behaves as expected and the new file end up in the same sub folder as the source file. It appears to depend on the selected targeted framework somehow.

Step by step to recreate (in VS 2019 preview 2.1):

1. Create a new solution with a new C# class library targeting .net framework 4.6, lets call it 'MyProject'
2. In the class library, create a subfolder 'Subfolder'
3. Add a class in that sub-folder (ex MyClass, full-name MyProject.SubFolder.MyClass in MyClass.cs )
4. Add another class in the same file (ex MyOtherClass)
5. Use the &amp;quot;Move type to MyOtherClass.cs&amp;quot;, from the quick action menu on the new class
6. The new file has ended up in the project root (MyProject/MyOtherClass.cs) instead of the expected subfolder (MyProject/SubFolder/MyOtherClass.cs)

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/442713/file-end-up-in-wrong-folder-when-using-move-type-t.html
VSTS ticketId: 783601_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33282</IssueID>
    <RepoID>1</RepoID>
    <Title>Indentation after a comment indents more than expected</Title>
    <Description>If you press return twice after a comment line in a class the second line is indented an extra level compared with the first line. Not sure if this is expected.

![image](https://user-images.githubusercontent.com/341098/52549837-84c07480-2dd5-11e9-920f-0a81a779ced9.png)

Original bug report: https://github.com/mono/monodevelop/issues/7047</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33281</IssueID>
    <RepoID>1</RepoID>
    <Title>Add initial support for specifying explicit base type in the base access.</Title>
    <Description>Relevant LDM notes https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-11-14.md .

Related to https://github.com/dotnet/roslyn/issues/32054.</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33280</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense Crash on Preview 4</Title>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.4.0+28608.196.d16.0stg

**Steps to Reproduce**:

1. Create a new class file
2. begin to type an interface name without a `:`

```C#
public class Class1 [|InterfaceName|]
{
}
```

**Expected Behavior**:

No Crash

**Actual Behavior**:

VS Crash

```ini
Application: devenv.exe
Framework Version: v4.0.30319
Description: The process was terminated due to an unhandled exception.
Exception Info: System.NullReferenceException
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.DefaultCompletionSetPresenter.AnnounceUIACompletionPresense()
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.DefaultCompletionSetPresenter+&lt;&gt;c__DisplayClass66_0.&lt;OnIsVisibleChanged&gt;b__0()
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)
   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
   at MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext, System.Threading.ContextCallback, System.Object)
   at System.Windows.Threading.DispatcherOperation.Invoke()
   at System.Windows.Threading.Dispatcher.ProcessQueue()
   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)
   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)
```</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33279</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix parsing regression of expressions involving parens when used as a case expression or a constant pattern.</Title>
    <Description>- Fix parsing regression of expressions involving parens when used as a case expression or a constant pattern.
Fixes #33054
Fixes #33208
- Incidentally also correct and test the precedence of the switch expression
See https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression for the spec.
- Fix terminology to match the spec - "conditional expression" rather than "ternary expression".

See also https://devdiv.visualstudio.com/DevDiv/_workitems/edit/792975 for shiproom purposes.

@dotnet/roslyn-compiler May I please have a couple of reviews of this parsing regression?
</Description>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33278</IssueID>
    <RepoID>1</RepoID>
    <Title>Questionable CS8602 'Possible dereference of null reference' with array indexer after check</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2.2

**Steps to Reproduce**:
```csharp
void M()
{
    string?[] t = new[] { "Hello" };
    if (t[0] != null)
        t[0].Substring(1); // CS8602
}
```

**Expected Behavior**:
Right after checking `t[0]` for `null`, accessing it should not show a nullability warning.

**Actual Behavior**:
CS8602

A comparatively easy fix is to "Introduce local" =&gt; "For all occurrences"  on `t[0]`. The local variable's nullability then flows correctly.</Description>
    <CreatedDate>10/02/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33277</IssueID>
    <RepoID>1</RepoID>
    <Title>Help needed: how to implement services for code actions that shows UI with custom workspace.</Title>
    <Description>I am trying to solve issue on omnisharp https://github.com/OmniSharp/omnisharp-roslyn/issues/1220 which basically at simplest version is:

1. Invoke action with options (like generate constructor).
2. Use some defaults in place of UI options, don't pop ui.

Later on this could be replaced with fancier implementation.

However when i tried to implement them, i constantly face null reference errors. Source seems to be (in 
constructor generator case):
http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/GenerateConstructorFromMembers/GenerateConstructorFromMembersCodeRefactoringProvider.GenerateConstructorWithDialogCodeAction.cs,46

Which points to missing `IPickMembersService` implementation from workspace services. However interface http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/PickMembers/IPickMembersService.cs,8cff688d6aa8c9b2 is internal.

Extract interface is likely blocked same way http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/ExtractInterface/IExtractInterfaceOptionsService.cs,10b646dc7f2b7496

Is this feature impossible to implement at current Roslyn or have i understood something wrong? Those interfaces seems correct place to extend feature to work without visual studio specific services like http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/ExtractInterface/VisualStudioExtractInterfaceOptionsService.cs,70a52353ba9300a3 or http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/PickMembers/VisualStudioPickMembersService.cs,79994aa8f3e826c4

</Description>
    <CreatedDate>10/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33276</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability check; Ignoring inherited type constraints from types in another assembly</Title>
    <Description>**Version Used**:  VS 2019 Preview 2.2

**Steps to Reproduce**:
This issue was quite hard to isolate, here it is: 
1. in BaseAssembly.dll
```CS
    public class MyEntity
    {
    }

    public abstract class BaseController&lt;T&gt;
        where T : MyEntity
    {
        public abstract void SomeMethod&lt;R&gt;(R? lite)
            where R : MyEntity;
    }
```

in DerivedAssembly.dll

```CS
        class DerivedController&lt;T&gt; : BaseController&lt;T&gt;
            where T : MyEntity
        {
            Table&lt;T&gt; table = null!;
            public override void SomeMethod&lt;R&gt;(R? lite) /*where R : MyEntity produces CS460*/
            {
/*error CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.*/
                   table.OtherMethod(lite);
            }
        }

        class Table&lt;T&gt;
            where T : MyEntity
        {
            public void OtherMethod&lt;R&gt;(R? lite) where R : MyEntity
            {
                lite?.ToString();
            }
        }
```
Both assemblies have   `&lt;NullableContextOptions&gt;enable&lt;/NullableContextOptions&gt;`

**Expected Behavior**:
Compiles succesfully

**Actual Behavior**:
error CS8627

</Description>
    <CreatedDate>10/02/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33275</IssueID>
    <RepoID>1</RepoID>
    <Title>Span implicit conversion and ?? operator</Title>
    <Description>**Version Used**: CSC 2.10.0.0 (b9fb1610)

**Steps to Reproduce**:
Compile the following code:
```c#
using System;

namespace ConsoleApp3
{ 
    class Program
    {
        static void Main(string[] args)
        {
            Bad(null, default);
            Good(null, default);
        }

        static ReadOnlySpan&lt;byte&gt; Bad(byte[] arr, ReadOnlySpan&lt;byte&gt; spn)
        {
            return arr ?? spn;
        }

        static ReadOnlySpan&lt;byte&gt; Good(byte[] arr, ReadOnlySpan&lt;byte&gt; spn)
        {
            return arr == null ? spn : arr;
        }
    }
}
```

**Expected Behavior**:
Both Good() and Bad() will compile, as VS suggests to change the "Good" one to "Bad" one. 

**Actual Behavior**:
The Bad() will cause compiler error `CSC : error CS7038: Failed to emit module 'ConsoleApp3'.`</Description>
    <CreatedDate>10/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33274</IssueID>
    <RepoID>1</RepoID>
    <Title>VB Immediate Window Defaults to Latest Major Compiler Version</Title>
    <Description>**Version Used**: 
15.9.6
**Steps to Reproduce**:
With any VB program running, break then in Immediate Window type ? followed by any function that takes more than 1 parameter and used named parameters for the first.

```VB
?FilterDiagnostics(Diags:=compilation.GetParseDiagnostics(), SeverityToReport, ErrorsToBeIgnored).
```
error BC30241: Named argument expected. Please use language version 15.5 or greater to use non-trailing named arguments.

**Expected Behavior**:
VB should use latest compiler version for immediate Window, or the Language Version of the project the break occurs, or allow the user to specify. My preference is to fix this issue by setting the language version using the order listed. @davkean thinks it should be Latest https://github.com/dotnet/project-system/issues/3733#issuecomment-461775442
**Actual Behavior**:
It appears Language Version is set to Last Major, causing errors parsing the immediate windows when code is copied from application and pasted in Immediate Window.

</Description>
    <CreatedDate>09/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33273</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler should allow '&lt;pointer&gt; is null' expression for generics constrained to be unmanaged</Title>
    <Description>**Version Used**: 
C# 7.3 - Most recent VS version of the compiler
**Steps to Reproduce**:

1. Have code
```
int i = 111;
int* iPtr = &amp;i;
if (iPtr is null) ; // valid
```
Then also have
```
[with context of: where T : unmanaged]
T* t = default;
T* tPtr = &amp;t;
if (t is null) ; // invalid - error
```
2. Compile

**Expected Behavior**:
No errors, both compile, with warning about unused variables `i` and `t` and potentially warnings about always false if statements
**Actual Behavior**:
First one is as expected, second one errors with "Pointers are invalid in is/as expression"</Description>
    <CreatedDate>09/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33272</IssueID>
    <RepoID>1</RepoID>
    <Title>Use Span&lt;T&gt; with `fixed` fields</Title>
    <Description>C# structs can have inline arrays like this:

```cs
unsafe struct Some
{
   private fixed byte something[4];
}
```

But then `something` is typed as `byte*`. With `Span&lt;T&gt;` we should have a *safe* alternative. Something like:

```cs
ref struct Some
{
    private fixed Span&lt;byte&gt; something[4];
}
```

This removes the `unsafe` keyword and lets us use `Span&lt;T&gt;` which embeds the length, making it safer.</Description>
    <CreatedDate>09/02/2019</CreatedDate>
    <ClosedDate>09/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33271</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/02/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33270</IssueID>
    <RepoID>1</RepoID>
    <Title>Essentially identifying if a method has an unreachable exit block</Title>
    <Description>Requested by internal customer Alejandro Dominguez 
</Description>
    <CreatedDate>09/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33269</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion List is broken for #r and #load in C# Interactive Window</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/781898</Description>
    <CreatedDate>09/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33268</IssueID>
    <RepoID>1</RepoID>
    <Title>Include naming convention when exporting from Tools &gt; Options to .editorconfig</Title>
    <Description>Originally submitted on [developer community](https://developercommunity.visualstudio.com/content/idea/411815/include-also-naming-convention-when-export-to-edit.html).

**Version Used**: 
Visual Studio 2019 Preview 2

**Steps to Reproduce**:

1.  Create a naming rule in editor settings.
2. Export code style settings to editorconfig

**Expected Behavior**:
Editorconfig has generated naming rule that follows the [dotnet_naming](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions) conventions.

**Actual Behavior**:
Editorconfig does not export naming rules.
</Description>
    <CreatedDate>09/02/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33267</IssueID>
    <RepoID>1</RepoID>
    <Title>Use TaggedTextExtension method for getting ClassificationTypeName</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/33266

@heejaechang </Description>
    <CreatedDate>09/02/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33266</IssueID>
    <RepoID>1</RepoID>
    <Title>Assert in completion in razor file</Title>
    <Description>repro step is just create razor project and add empty cstml file at the root.

remove everything in the cstml and type this at the top

@await Html.PartialAsync

...

![image](https://user-images.githubusercontent.com/1333179/52513328-fb375980-2bbe-11e9-94cf-6b741cc30f71.png)

...

---------------------------
Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue
---------------------------
Unexpected value 'ExtensionMethod' of type 'System.String'



   at Roslyn.Utilities.ExceptionUtilities.UnexpectedValue(Object o)

   at Microsoft.CodeAnalysis.Classification.ClassificationTags.GetClassificationTypeName(String textTag)

   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetVisibleDisplayString(TaggedText part, Boolean includeLeftToRightMarker)

   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetRun(TaggedText part, IClassificationFormatMap formatMap, ClassificationTypeMap typeMap)

   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetTextBlock(ImmutableArray`1 parts)

   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.ProcessDescription(Task`1 obj)

   at System.Threading.Tasks.ContinuationTaskFromResultTask`1.InnerInvoke()

   at System.Threading.Tasks.Task.Execute()

   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)

   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)

   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)

   at System.Threading.Tasks.SynchronizationContextTaskScheduler.PostCallback(Object obj)

   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)

   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)

   at System.Windows.Threading.DispatcherOperation.InvokeImpl()

   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)

   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)

   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)

   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)

   at System.Windows.Threading.DispatcherOperation.Invoke()

   at System.Windows.Threading.Dispatcher.ProcessQueue()

   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)

   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)

   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)

   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)

   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)

   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)

   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)


---------------------------
Abort   Retry   Ignore   
---------------------------
</Description>
    <CreatedDate>09/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33265</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33264</IssueID>
    <RepoID>1</RepoID>
    <Title>Compute relative folder information if we aren't given it</Title>
    <Description>We added a new API IProjectSiteEx.AddFileEx that takes the link metadata for an item so we don't have to query an IVsHierarchy to figure out where the file is linked into. If we don't have a link though, we should compute the relative folder to the project directory and use that.

Fixes https://github.com/dotnet/roslyn/issues/33171

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

- The customer invokes a refactoring like "generate class into a new file". Instead of the file being generated into the same folder, it's put inside the root of your project
- Our "synchronize namespace and folder" refactorings won't work reliably
- Anybody calling into Document.Folders (a public API) won't get the right information

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/33171

### Workarounds, if any

Convert your project to a CPS-based project, which we don't expect customers to do (or even want to do.)

### Risk

Low.

### Performance impact

Low to moderate; we're adding some file path manipulation back into a common code path, but we believe it'll probably be cheaper than what was there in Preview 1.

### Is this a regression from a previous update?

Yes, this was broken in Preview 2.

### Root cause analysis

A refactoring to enable the old project systems to be more free-threaded had the unintended side effect of breaking how we pass along this data. This involved adding new codepaths which just didn't do what the old ones did. Tests are now added on the new code.

### How was the bug found?

Customer report that the API wasn't working properly.

&lt;/details&gt;</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33262</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure that MSBuildWorkspace deals with duplicate ProjectReferences</Title>
    <Description>The workspace isn't supposed to allow duplicate ProjectReferences, but currently due to #12101 it does. This dedups (correctly) at the surface and also adds a test to ensure this isn't broken.

Fixes #31390. Further work will address #12101, but no matter how we address that it's good to have tests at the MSBuildWorkspace layer to make sure some additional bugs don't creep in there in it's processing.

Special thanks to @alexbuyn for #32557 that helped alert to the root cause here, and @aolszowka for also chiming in with a bit of details about their scenario to confirm this should help fix it.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Customer uses a tool built atop MSBuildWorkspace, and they have a project with duplicate ProjectReferences where the exact same project is being referenced twice in the exact same way. This tool will probably crash when ran on this solution.

### Bugs this fixes

#31390

### Workarounds, if any

Fix the duplicate project reference. Unfortunately the crash is deep within the CompilationTracker, which won't really hint to the user that anything is wrong.

### Risk

Very low, the actual core fix is just replacing an ImmutableArray with an ImmutableHashSet. This API is not used in Visual Studio and thus does not pose a risk there.

### Performance impact

None.

### Is this a regression from a previous update?

Not clear. The underlying Workspace bug is positively ancient.

### Root cause analysis

We didn't have any tests, and it wasn't obvious the underlying Workspace bug would actual result in crashes.

### How was the bug found?

Customer reports.

&lt;/details&gt;</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33261</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable constraint checking outside method bodies</Title>
    <Description>Our constraint validation around nullability was only being done properly inside method bodies. This implements the checking in all other places: method signatures, base type lists, using static, etc ...

closes #32953</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33260</IssueID>
    <RepoID>1</RepoID>
    <Title>NullReferenceException when renaming a member (The file '' could not be refactored)</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.2.2+28602.52 but I have seen this occasionally for several builds now including VS15.

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/10546952/52504402-47df5c80-2be0-11e9-9b48-da88d2a3e3f7.png)

in a WPF project, this time renaming static property of a static partial class.

**Expected Behavior**: No exception, or at least file name filled in so that I can judge whether to continue or cancel.

**Steps to Reproduce**: Sadly I don't have steps to reproduce, but I have a stack:

A NullReferenceException is thrown in a task:
```
Microsoft.VisualStudio.DesignTools.XamlLanguageService.dll!Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.CreateFileContextForBuffer(Microsoft.VisualStudio.Text.ITextBuffer buffer)
Microsoft.VisualStudio.DesignTools.XamlLanguageService.dll!Microsoft.CodeAnalysis.Xaml.Shared.TextBufferExtensions.GetFileInformationContextAsync.AnonymousMethod__0()
mscorlib.dll!System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.Semantics.IXamlFileInformationContext&gt;.InnerInvoke()
mscorlib.dll!System.Threading.Tasks.Task.Execute()
```

and the callsite is:
```
mscorlib.dll!System.Threading.Tasks.Task&lt;System.__Canon&gt;.Result.get()	Unknown
Microsoft.VisualStudio.DesignTools.XamlLanguageService.dll!Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.GetFileContextScope(string fileName, Microsoft.VisualStudio.TextManager.Interop.IVsTextLines textLines, out Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.Semantics.IXamlFileInformationContext fileContext = null)	Unknown
Microsoft.VisualStudio.DesignTools.XamlLanguageService.dll!Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.CreateContextIfReferences(string[] rglpszRQNames = {string[1]}, Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.Semantics.ReferenceOptions options = All, Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.FileContext fileContext = {Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.FileContext}, out Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditor invisibleEditor)	Unknown
Microsoft.VisualStudio.DesignTools.XamlLanguageService.dll!Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.Microsoft.VisualStudio.Shell.Interop.IVsRefactorNotify.OnBeforeGlobalSymbolRenamed(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy, uint itemid, uint cRQNames, string[] rglpszRQName = {string[1]}, string lpszNewName, out System.Array prgAdditionalCheckoutVSITEMIDs = {uint[0]})	Unknown
[Native to Managed Transition]	
[Managed to Native Transition]	
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.VsRefactorNotifyService.TryOnBeforeGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace workspace, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.DocumentId&gt; changedDocumentIDs, Microsoft.CodeAnalysis.ISymbol symbol, string newName = "InformationSheets", bool throwOnFailure = false)	Unknown
Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Shared.Extensions.IRefactorNotifyServiceExtensions.TryOnBeforeGlobalSymbolRenamed(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Editor.IRefactorNotifyService&gt; refactorNotifyServices, Microsoft.CodeAnalysis.Workspace workspace = {Microsoft.VisualStudio.LanguageServices.RoslynVisualStudioWorkspace}, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.DocumentId&gt; changedDocuments = Count = 1, Microsoft.CodeAnalysis.ISymbol symbol = The runtime is unable to evaluate this expression., string newName = "InformationSheets", bool throwOnFailure = false)	Unknown
Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService.SymbolInlineRenameInfo.TryOnBeforeGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace workspace, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.DocumentId&gt; changedDocumentIDs, string replacementText)	Unknown
Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ApplyRename(Microsoft.CodeAnalysis.Solution newSolution = {Microsoft.CodeAnalysis.Solution}, Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext = {Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitContext})	Unknown
Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.CommitCore(Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext, bool previewChanges = false)	Unknown
Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.Commit.AnonymousMethod__0(Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext)	Unknown
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(string title, string message, bool allowCancel, bool showProgress, System.Action&lt;Microsoft.CodeAnalysis.Editor.Host.IWaitContext&gt; action)	Unknown
Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.Commit(bool previewChanges)	Unknown
Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteCommand(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs args = {Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs}, Microsoft.VisualStudio.Commanding.CommandExecutionContext context)	Unknown
Microsoft.VisualStudio.Text.UI.dll!Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand&lt;Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs&gt;(Microsoft.VisualStudio.Commanding.ICommandHandler commandHandler, Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs args, System.Action nextCommandHandler = {Method = Inspecting the state of an object in the debuggee of type System.Delegate is not supported in this context.}, Microsoft.VisualStudio.Commanding.CommandExecutionContext executionContext)	Unknown
Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.Execute.AnonymousMethod__1()	Unknown
Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(object errorSource = {Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler}, System.Action call = {Method = Inspecting the state of an object in the debuggee of type System.Delegate is not supported in this context.}, System.Predicate&lt;System.Exception&gt; exceptionFilter = {Method = Inspecting the state of an object in the debuggee of type System.Delegate is not supported in this context.})	Unknown
Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.Execute.AnonymousMethod__0()	Unknown
Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.ExecuteCommandHandlerChain(Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerServiceState state = {Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerServiceState}, System.Action handlerChain, System.Action nextCommandHandler = {Method = Inspecting the state of an object in the debuggee of type System.Delegate is not supported in this context.})	Unknown
Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.Execute&lt;Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs&gt;(System.Func&lt;Microsoft.VisualStudio.Text.Editor.ITextView, Microsoft.VisualStudio.Text.ITextBuffer, Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs&gt; argsFactory, System.Action nextCommandHandler)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.ExecuteReturnKeyCommand(System.Action next)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.ExecuteVisualStudio2000(uint commandId, System.IntPtr pvaIn, System.Action next)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceFilter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000.__executeNextCommandTarget|0()	Unknown
Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers&lt;Microsoft.CodeAnalysis.Editor.Commands.ReturnKeyCommandArgs&gt;(System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Editor.ICommandHandler&lt;Microsoft.CodeAnalysis.Editor.Commands.ReturnKeyCommandArgs&gt;&gt; commandHandlers, Microsoft.CodeAnalysis.Editor.Commands.ReturnKeyCommandArgs args, System.Action lastHandler)	Unknown
Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.Execute&lt;Microsoft.CodeAnalysis.Editor.Commands.ReturnKeyCommandArgs&gt;(Microsoft.VisualStudio.Utilities.IContentType contentType, Microsoft.CodeAnalysis.Editor.Commands.ReturnKeyCommandArgs args, System.Action lastHandler)	Unknown
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteReturn(Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType, System.Action executeNextCommandTarget)	Unknown
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut, Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType)	Unknown
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.Exec(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Exec(ref System.Guid pguidCmdGroup = {System.Guid}, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn = 0x00000000, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindow.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
Microsoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.DocumentObjectSite.Exec(ref System.Guid pguidCmdGroup = {System.Guid}, uint nCmdID = 3, uint nCmdexecopt = 0, System.IntPtr pvaIn = 0x00000000, System.IntPtr pvaOut = 0x00000000)	Unknown
Microsoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
```
```</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33259</IssueID>
    <RepoID>1</RepoID>
    <Title>Update install x-copy build</Title>
    <Description>Fall back to xcopy msbuild for execution of Arcade SDK tasks.

Infrastructure only change.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33258</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow file banner comments to be documentation comments</Title>
    <Description>Fixes #33251</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33257</IssueID>
    <RepoID>1</RepoID>
    <Title>Need to re-infer collection and element type based on inferred collection type</Title>
    <Description>```C#
using System.Collections.Generic;
class C
{
    void M(object? o)
    {
        L(o)[0].ToString(); // Should get a warning
        foreach (var x in L(o))
        {
            x.ToString(); // Should get a warning
        }
    }

    List&lt;T&gt; L&lt;T&gt;(T t) =&gt; null!;
}
```

jcouv updated: Relates to https://github.com/dotnet/roslyn/issues/29964 (need to update indexer based on tracked type of receiver)</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33256</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected errors are reported when type imported from metadata implements interface property in way that doesn't follow C# language rules</Title>
    <Description>```
        [ConditionalFact(typeof(CoreClrOnly))]
        public void ExplicitBase_134()
        {
            var ilSource = @"
.assembly extern System.Runtime
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:2:1:0
}
.assembly extern System.Console
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:1:1:0
}

.assembly ExplicitBase_134
{
  .hash algorithm 0x00008004
  .ver 0:0:0:0
}
.module ExplicitBase_134.dll
// MVID: {22493430-1D63-4B15-9B42-F868AA6D50D5}
.imagebase 0x10000000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0003       // WINDOWS_CUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x00AD0000


// =============== CLASS MEMBERS DECLARATION ===================

.class interface public abstract auto ansi B
       implements I1,
                  C,
                  I2
{
} // end of class B

.class interface public abstract auto ansi I1
       implements C
{
  .method public hidebysig specialname virtual final 
          instance char  C.get_F1() cil managed
  {
    .override C::get_F1
    // Code size       3 (0x3)
    .maxstack  8
    IL_0000:  ldc.i4.s   49
    IL_0002:  ret
  } // end of method I1::C.get_F1

  .property instance char C.F1()
  {
    .get instance char I1::C.get_F1()
  } // end of property I1::C.F1
} // end of class I1

.class interface public abstract auto ansi I2
       implements C
{
  .method public hidebysig specialname virtual final 
          instance void  C.set_F1(char 'value') cil managed
  {
    .override C::set_F1
    // Code size       12 (0xc)
    .maxstack  8
    IL_0000:  ldstr      ""set 2""
    IL_0005:  call       void [System.Console]System.Console::WriteLine(string)
    IL_000a:  nop
    IL_000b:  ret
  } // end of method I2::C.set_F1

  .property instance char C.F1()
  {
    .set instance void I2::C.set_F1(char)
  } // end of property I2::C.F1
} // end of class I2

.class interface public abstract auto ansi C
{
  .method public hidebysig newslot specialname abstract virtual 
          instance char  get_F1() cil managed
  {
  } // end of method C::get_F1

  .method public hidebysig newslot specialname abstract virtual 
          instance void  set_F1(char 'value') cil managed
  {
  } // end of method C::set_F1

  .property instance char F1()
  {
    .get instance char C::get_F1()
    .set instance void C::set_F1(char)
  } // end of property C::F1
} // end of class C

.class public auto ansi beforefieldinit D
       extends [System.Runtime]System.Object
       implements B,
                  I1,
                  C,
                  I2
{
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System.Runtime]System.Object::.ctor()
    IL_0006:  nop
    IL_0007:  ret
  } // end of method A::.ctor
} // end of class A
";

            var source1 = @"
class A : B
{
    void Test()
    {
        _ = base(B).F1;
        base(B).F1 = 'x';
    }
}
";

            var reference = CompileIL(ilSource, prependDefaultHeader: false);

            var compilation1 = CreateCompilation(source1, references: new[] { reference },
                                                 options: TestOptions.DebugDll, targetFramework: TargetFramework.NetStandardLatest);
            compilation1.VerifyDiagnostics(
                // (2,11): error CS0535: 'A' does not implement interface member 'C.F1'
                // class A : B
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, "B").WithArguments("A", "C.F1").WithLocation(2, 11)
                );

            var source2 = @"
class A : D, C
{
    char C.F1 { get =&gt; 'A'; set =&gt; System.Console.WriteLine(""set A"");}

    void Test()
    {
        System.Console.WriteLine(base(B).F1);
        base(B).F1 = 'x';
    }

    static void Main()
    {
        new A().Test();
        C d = new D();
        System.Console.WriteLine(d.F1);
        d.F1 = 'x';
    }
}
";
            var compilation2 = CreateCompilation(source2, references: new[] { reference },
                                                 options: TestOptions.DebugExe, targetFramework: TargetFramework.NetStandardLatest);
            compilation2.VerifyDiagnostics();

            var c = compilation2.GetTypeByMetadataName("C");
            var f1 = c.GetMember&lt;PropertySymbol&gt;("F1");
            var d = compilation2.GetTypeByMetadataName("D");

            Assert.Null(d.FindImplementationForInterfaceMember(f1));
            Assert.Equal("System.Char I1.F1.get", d.FindImplementationForInterfaceMember(f1.GetMethod).ToTestDisplayString());
            Assert.Equal("void I2.F1.set", d.FindImplementationForInterfaceMember(f1.SetMethod).ToTestDisplayString());

            CompileAndVerify(compilation2, expectedOutput:
@"
1
set 2
1
set 2
"
);

            var source3 = @"
class A : D, B
{
    static void Main()
    {
        C a = new A();
        System.Console.WriteLine(a.F1);
        a.F1 = 'x';
    }
}
";
            var compilation3 = CreateCompilation(source3, references: new[] { reference },
                                                 options: TestOptions.DebugExe, targetFramework: TargetFramework.NetStandardLatest);
            compilation3.VerifyDiagnostics();
            CompileAndVerify(compilation3, expectedOutput:
@"
1
set 2
"
);
        }
```

Observed: An error is reported for compilation1.
Expected: No errors should be reported, compilation2 and compilation3 demonstrate that runtime considers Interface C fully implemented by interface B. </Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33255</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix Formatting code fix appears above Add Using, breaking user muscle memory</Title>
    <Description>**Version Used**: Dev16 Preview 3

![image](https://user-images.githubusercontent.com/116161/52492045-50527b80-2b7d-11e9-81e6-540a5b896e39.png)

Trying to add using for `System.Diagnostics` in the screenshot above is broken because a space has already been typed, causing `Fix formatting` to appear. This is a very irritating muscle memory break!</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33254</IssueID>
    <RepoID>1</RepoID>
    <Title>The "current line" indicator disappeared when deleting spaces twice</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/238276

**Steps to Reproduce**:

1. Use the following code:

    ```csharp
    static void Main(string[] args)
    {
        int a, b, c, d;
        a = 1;
        b = 2;
        c = 3;
        d = 4;
    }
    ```

2. Set a breakpoint on `c = 3;`
3. Start debugging and wait for the breakpoint to get hit
4. Delete the spaces before `c = 3;`
5. Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Z&lt;/kbd&gt;
6. Repeat step (4)

**Expected Behavior**:

The debugger still shows `c = 3;` as the current line (with the yellow arrow).

**Actual Behavior**:

After step (6), the yellow arrow goes away and the current line is now shown.
</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33253</IssueID>
    <RepoID>1</RepoID>
    <Title>Smart Indent does not handle fluent sequences correctly</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/237805

**Steps to Reproduce**:

Press &lt;kbd&gt;Enter&lt;/kbd&gt; at the location of the `$$`:

```csharp
public class Test
{
    public void Test()
    {
        new List&lt;DateTime&gt;()
            .Where(d =&gt; d.Kind == DateTimeKind.Local ||
                        d.Kind == DateTimeKind.Utc)$$
            .ToArray();
    }
}
```

**Expected Behavior**:

```csharp
public class Test
{
    public void Test()
    {
        new List&lt;DateTime&gt;()
            .Where(d =&gt; d.Kind == DateTimeKind.Local ||
                        d.Kind == DateTimeKind.Utc)
            $$
            .ToArray();
    }
}
```

**Actual Behavior**:

```csharp
public class Test
{
    public void Test()
    {
        new List&lt;DateTime&gt;()
            .Where(d =&gt; d.Kind == DateTimeKind.Local ||
                        d.Kind == DateTimeKind.Utc)
                        $$
            .ToArray();
    }
}
```
</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>04/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33252</IssueID>
    <RepoID>1</RepoID>
    <Title>Hovering over cast evaluates property value in debugger</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/233955

**Steps to Reproduce**:

1. Create a new WPF application
2. In the main window constructor, add the following:

    ```csharp
    BooleanToVisibilityConverter converter = new BooleanToVisibilityConverter();
    Visibility x = (Visibility)converter.Convert(true, null, null, null);
    ```

3. Set a breakpoint on one of the lines above
4. When the breakpoint is hit, hover over the `(Visibility)` type cast

**Expected Behavior**:

Quick Info is not shown (default behavior for hovering over a *type* while debugging).

**Actual Behavior**:

Quick Info shows the value of `this.Visibility` (default behavior for hovering over a *property* while debugging).
</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33251</IssueID>
    <RepoID>1</RepoID>
    <Title>Sort Usings moves incorrect documentation-style header comment </Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally reported as https://developercommunity.visualstudio.com/content/problem/446125/code-clean-mess-with-using-statements.html

**Steps to Reproduce**:

1. Add using directives to the top of a file, where the first is not in the correct location
2. Add a file header comment using documentation comment syntax (even though it's not valid at this location)
3. Run Sort Usings


```csharp
/** This is a documentation comment; it should have only contained one starting asterisk.
 */

using Y;
using X;
```

**Expected Behavior**:

```csharp
/** This is a documentation comment; it should have only contained one starting asterisk.
 */

using X;
using Y;
```


**Actual Behavior**:

```csharp
using Y;
/** This is a documentation comment; it should have only contained one starting asterisk.
 */

using X;
```
</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33250</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not suggest static members in property pattern clause context</Title>
    <Description>**Version Used**: 2019 P2

**Steps to Reproduce**:

![image](https://user-images.githubusercontent.com/3105979/52478249-08057e80-2bba-11e9-947a-3023b3c1b29a.png)


Also upon selection I expect the colon to be inserted too, since it appears on the list.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33249</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33248</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>09/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33247</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33246</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Interactive reports localized exception messages</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.2.2+28602.52

**Steps to Reproduce**:

In C# Interactive window, execute `-;`

**Expected Behavior**: `(1,2): error CS1525: Invalid expression term ';'` (the same as in VS 2017)

**Actual Behavior**: `(1,2): error CS1525: Neplatný výraz ;`

* Only English Visual Studio Language Pack installed.
* No .NET Framework language pack installed (as per Control Panel anyway).
* Both VS 2017 and VS 2019 report `en-GB` for `System.Threading.Thread.CurrentThread.CurrentUICulture.Name`.
* Both VS 2017 and VS 2019 show English error in the Error window.
* My Windows display language (and Thread.CurrentUICulture) is en-GB and all UI is in English.
* My preferred language list starts with en-GB and cs-CZ (in this order). en-GB entry is marked as Default app language, Default input language and Windows display language.
* Formatting, system locale (and Thread.CurrentCulture) is cs-CZ.
* The only thing I could think of remotely blaming is the automatic OS language pack installation of all preferred languages, it says language pack installed for at least 9 languages in the preferred language list, including cs-CZ (and these are installed in random order). Nevertheless, VS 2017 still shows the errors in English as expected.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33245</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot be used in a project built with VS2015</Title>
    <Description>**Version Used**: 
2.10.0 (NuGet)

**Steps to Reproduce**:

1. Create a WPF .NET 4.6.2 project with VS2017 and install this NuGet package
2. Add real busieness code
3. Copy the source code to a machine with nothing but .NET 4.6.2 + SDK and VS2015
4. Build with VS2015

**Expected Behavior**:
Builds

**Actual Behavior**:
Does not build because suddenly it can't find types like `Func&lt;,&gt;` or the `&gt;` operator of `int` or `IList&lt;&gt;`. It recommends me to add a reference to "netstandard 2.0.0.0". I don't have that DLL laying around here. Seems like the Roslyn package broke all project references.

The project worked everywhere before, without the Roslyn package. It has 300k LoC in 800 source files.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33244</IssueID>
    <RepoID>1</RepoID>
    <Title>Default code fix for unused values from properties is not useful</Title>
    <Description>Below contains two instances of IDE0059:

``` C#
using System;
using System.Collections.Generic;

class Program
{
    private static readonly Dictionary&lt;string, int&gt; _foo;
    static void Main(string[] args)
    {
        var value2 = Console.Out;

        _foo.TryGetValue("Foo", out int value2);
    }
}

```

```
Severity	Code	Description	Project	File	Line	Category	Suppression State
Message	IDE0059	Value assigned to 'value1' is never used	ConsoleApp11	D:\Personal\davkean\ConsoleApp11\ConsoleApp11\Program.cs	9	Style	Active
Message	IDE0059	Value assigned to 'value2' is never used	ConsoleApp11	D:\Personal\davkean\ConsoleApp11\ConsoleApp11\Program.cs	11	Style	Active
```

Both would be fixed in two very different ways, the first case I would delete the entire line, the second I would use a discard (_). 

Running the "fix all" that fixes these two situations, results in the following:

``` C#
using System;
using System.Collections.Generic;

class Program
{
    private static readonly Dictionary&lt;string, int&gt; _foo;
    static void Main(string[] args)
    {
        _ = Console.Out;

        _foo.TryGetValue("Foo", out int _);
    }
}

```

This is not useful, that redundant assignment from Console.Out *could* have a side effect, but most of the time I'm going to delete the entire line. Given I have ~500 instances of above situations, I can't run the fix all for the out variables because it goes ahead and introduces a bunch of discards for my unused property values. This results in me inspecting every fix manually.

Can we please split these two cases? They are likely to have two very different fixes.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33243</IssueID>
    <RepoID>1</RepoID>
    <Title>Dev16.1 preview1 vs deps migration</Title>
    <Description>part of preview4 snap @RikkiGibson </Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33242</IssueID>
    <RepoID>1</RepoID>
    <Title>ExtractMethodCodeRefactoringProvider throws invalid cast when used within the body of a constructor expression-member body</Title>
    <Description>1. Highlight between the $$ (after removing them)

``` C#

        private sealed class GraphIconCache
        {
            private ImmutableHashSet&lt;ImageMoniker&gt; _registeredIcons = ImmutableHashSet&lt;ImageMoniker&gt;.Empty;

            private ImmutableDictionary&lt;(int id, Guid guid), string&gt; _iconNameCache = ImmutableDictionary&lt;(int id, Guid guid), string&gt;.Empty;

            private readonly IVsImageService2 _imageService;

            public static async Task&lt;GraphIconCache&gt; CreateAsync(IAsyncServiceProvider serviceProvider)
            {
                var imageService = (IVsImageService2)await serviceProvider.GetServiceAsync(typeof(SVsImageService));

                return new GraphIconCache(imageService);
            }

            private GraphIconCache(IVsImageService2 imageService) =&gt; _imageService = $$imageService$$;

            public string GetName(ImageMoniker icon)
            {
                return ImmutableInterlocked.GetOrAdd(ref _iconNameCache, (id: icon.Id, guid: icon.Guid), i =&gt; $"{i.guid:D};{i.id}");
            }

            public void Register(ImageMoniker icon)
            {
                if (ImmutableInterlocked.Update(ref _registeredIcons, (knownIcons, arg) =&gt; knownIcons.Add(arg), icon))
                {
                    _imageService.TryAssociateNameWithMoniker(GetName(icon), icon);
                }
            }
        }

```
```
System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax'.
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.AddInvocationAtCallSiteAsync[TStatement,TExpression,TNodeUnderContainer](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.CreateStatementsOrInitializerToInsertAtCallSiteAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.GenerateBodyForCallSiteContainerAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)

```</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33241</IssueID>
    <RepoID>1</RepoID>
    <Title>Dev16.1 preview1 vs deps migration</Title>
    <Description>part of preview4 snap @JoeRobich </Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33239</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate dev16.1-preview1-vs-deps to master-vs-deps</Title>
    <Description>as part of preview4 snap @JoeRobich</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33238</IssueID>
    <RepoID>1</RepoID>
    <Title>csharp_space_between_method_call_parameter_list_parentheses appears to have no effect inside object initializers</Title>
    <Description>**Version Used**: 
Visual Studio 2017 Community v15.9.6

**Steps to Reproduce**:

1. Create a new .NET Standard Class Library project
2. Replace the contents of `Class1.cs` with the following code:
```csharp
using System.Collections.Generic;
using System.Net;

namespace Tests
{
    public class IsolatedStorageServerListProviderFacts
    {
        public object ReadsUpdatedServerList(object foo)
        {
            var list = new List&lt;object&gt;()
            {
                CreateSocketServer(new IPEndPoint(IPAddress.Any, 1234)),
                CreateSocketServer(new IPEndPoint(IPAddress.Loopback, 4321))
            };

            return ReadsUpdatedServerList(list);
        }

        static object CreateSocketServer(object o) =&gt; throw null;
    }
}

```
3. Create a new Solution Item using the Text File template and make the file name `.editorconfig`
4. Add the following to the blank `.editorconfig` file:
```
root = true

[*]
indent_style = space
insert_final_newline = true
indent_size = 4

csharp_space_between_method_call_parameter_list_parentheses = true
```
5. Open `Class1.cs`
6. Press Ctrl+K then Ctrl+D to reformat the document

**Expected Behavior**:
```csharp
using System.Collections.Generic;
using System.Net;

namespace Tests
{
    public class IsolatedStorageServerListProviderFacts
    {
        public object ReadsUpdatedServerList(object foo)
        {
            var list = new List&lt;object&gt;()
            {
                CreateSocketServer( new IPEndPoint( IPAddress.Any, 1234 ) ),
                CreateSocketServer( new IPEndPoint( IPAddress.Loopback, 4321 ) )
            };

            return ReadsUpdatedServerList( list );
        }

        static object CreateSocketServer(object o) =&gt; throw null;
    }
}

```

**Actual Behavior**:
```csharp
using System.Collections.Generic;
using System.Net;

namespace Tests
{
    public class IsolatedStorageServerListProviderFacts
    {
        public object ReadsUpdatedServerList(object foo)
        {
            var list = new List&lt;object&gt;()
            {
                CreateSocketServer(new IPEndPoint(IPAddress.Any, 1234)),
                CreateSocketServer(new IPEndPoint(IPAddress.Loopback, 4321))
            };

            return ReadsUpdatedServerList( list );
        }

        static object CreateSocketServer(object o) =&gt; throw null;
    }
}

```

**Observations**:

The regular method call to `ReadsUpdatedServerList` has whitespace inserted around the parameter list, but the calls to `CreateSocketServer` and `IPEndPoint`'s constructor do not.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33237</IssueID>
    <RepoID>1</RepoID>
    <Title>Determinism builds are timing out</Title>
    <Description>See https://dev.azure.com/dnceng/public/_build/results?buildId=90364 for an example.

Related to #33206</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33235</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate dev16.1-preview1 to master</Title>
    <Description>
    </Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33234</IssueID>
    <RepoID>1</RepoID>
    <Title>Update ADO config for preview4 snap</Title>
    <Description>
    </Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33233</IssueID>
    <RepoID>1</RepoID>
    <Title>completion test infrastructure refactoring</Title>
    <Description>
    </Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33232</IssueID>
    <RepoID>1</RepoID>
    <Title>enable KeywordsOrSymbolsAfterNamedParameter test</Title>
    <Description>
    </Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33231</IssueID>
    <RepoID>1</RepoID>
    <Title>csharp_space_between_method_call_parameter_list_parentheses is not respected when formatting code</Title>
    <Description>**Version Used**: 
Visual Studio Community v15.9.6

**Steps to Reproduce**:

1. Clone https://github.com/yaakov-h/SteamKit/tree/editorconfig (the editorconfig branch of the repo)
2. Open SteamKit2/SteamKit2.sln
3. Open a file such as CMClient.cs that has spaces between parameter lists and their surrounding parentheses
4. Press Ctrl+K Ctrl+D to reformat the document.

**Expected Behavior**:

The spaces between the parameter lists and their surrounding parentheses are preserved, e.g.:

```csharp
Debug.Assert( connection == null );
```

**Actual Behavior**:

The spaces between the parameter lists and their surrounding parentheses are removed, e.g.:

```csharp
Debug.Assert(connection == null);
```

**Additional Notes**:

The same also happens to `csharp_space_between_method_declaration_parameter_list_parentheses`.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33230</IssueID>
    <RepoID>1</RepoID>
    <Title>Update the publish data with new branch information</Title>
    <Description>Merge after Preview 4 snap</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33229</IssueID>
    <RepoID>1</RepoID>
    <Title>Delete ExceptionHelpers.SuppressFailFast/IsFailFastSuppressed</Title>
    <Description>These haven't done anything since we moved our code to old-style portable. It wasn't a good pattern at the time, and it's broken now.

Fixes https://github.com/dotnet/roslyn/issues/31014</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33228</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable Self-Assignment should warn</Title>
    <Description>```C#
public static class C
{
#nullable enable
    static string test = test; // We should warn here, as `test` is null
}
```</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33227</IssueID>
    <RepoID>1</RepoID>
    <Title>Update the FindImplementationsForInterfaceMember</Title>
    <Description>Update FindImplementationsForInterfaceMember to use SymbolFinder.OriginalSymbolsMatch.

SymbolFinder.OriginalSymbolsMatch has heuristics to determine if types are
the same even if coming from a different assembly. This helps in cases
where GoToImplementation needs to resolve across projects that get
types like System.Threading.Tasks.Task from different assemblies, but
are equivalent and fulfill requirements for interface implementation.

Fixes #28827 </Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33226</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected errors are reported and/or unexpected result is returned by FindImplementationForInterfaceMember API when type imported from metadata implements interface property in way that doesn't follow C# language rules</Title>
    <Description>```

        [Fact]
        public void ExplicitBase_135_Class_02()
        {
            var ilSource = @"
.class interface public abstract auto ansi I1
{
  .method public hidebysig newslot specialname abstract virtual 
          instance char  get_F1() cil managed
  {
  } // end of method I1::get_F1

  .method public hidebysig newslot specialname abstract virtual 
          instance void  set_F1(char 'value') cil managed
  {
  } // end of method I1::set_F1

  .property instance char F1()
  {
    .get instance char I1::get_F1()
    .set instance void I1::set_F1(char)
  } // end of property I1::F1
} // end of class I1

.class public auto ansi beforefieldinit A
       extends System.Object
{
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void System.Object::.ctor()
    IL_0006:  nop
    IL_0007:  ret
  } // end of method A::.ctor
} // end of class A

.class public auto ansi beforefieldinit B
       extends A
{
  .method public hidebysig newslot specialname virtual final 
          instance char  get_F1() cil managed
  {
    // Code size       3 (0x3)
    .maxstack  8
    IL_0000:  ldc.i4.s   66
    IL_0002:  ret
  } // end of method B::I1.get_F1

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void A::.ctor()
    IL_0006:  nop
    IL_0007:  ret
  } // end of method B::.ctor
} // end of class B

.class public auto ansi beforefieldinit C
       extends B
       implements I1
{
  .method public hidebysig newslot specialname virtual final 
          instance void  set_F1(char 'value') cil managed
  {
    // Code size       12 (0xc)
    .maxstack  8
    IL_0000:  ldstr      ""set C""
    IL_0005:  call       void [mscorlib]System.Console::WriteLine(string)
    IL_000a:  nop
    IL_000b:  ret
  } // end of method C::I1.set_F1

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void B::.ctor()
    IL_0006:  nop
    IL_0007:  ret
  } // end of method C::.ctor
} // end of class C
";

            var source1 =
@"
class Test2 : C, I1
{
    static void Main()
    {
        I1 x = new Test2();

        System.Console.WriteLine(x.F1);
        x.F1 = 'x';
    }
}
";
            var compilation1 = CreateCompilationWithIL(source1, ilSource, options: TestOptions.DebugExe);
            compilation1.VerifyDiagnostics(
                // (2,18): error CS0470: Method 'C.set_F1(char)' cannot implement interface accessor 'I1.F1.set' for type 'Test2'. Use an explicit interface implementation.
                // class Test2 : C, I1
                Diagnostic(ErrorCode.ERR_MethodImplementingAccessor, "I1").WithArguments("C.set_F1(char)", "I1.F1.set", "Test2").WithLocation(2, 18),
                // (2,18): error CS0470: Method 'B.get_F1()' cannot implement interface accessor 'I1.F1.get' for type 'Test2'. Use an explicit interface implementation.
                // class Test2 : C, I1
                Diagnostic(ErrorCode.ERR_MethodImplementingAccessor, "I1").WithArguments("B.get_F1()", "I1.F1.get", "Test2").WithLocation(2, 18)
                );

            var i1 = compilation1.GetTypeByMetadataName("I1");
            var i1F1 = i1.GetMember&lt;PropertySymbol&gt;("F1");
            var test2 = compilation1.GetTypeByMetadataName("Test2");

            Assert.Null(test2.FindImplementationForInterfaceMember(i1F1));
            Assert.Equal("void C.set_F1(System.Char value)", test2.FindImplementationForInterfaceMember(i1F1.SetMethod).ToTestDisplayString());
            Assert.Equal("System.Char B.get_F1()", test2.FindImplementationForInterfaceMember(i1F1.GetMethod).ToTestDisplayString());
            Assert.Null(compilation1.GetTypeByMetadataName("B").FindImplementationForInterfaceMember(i1F1.GetMethod));

            var source2 =
@"
class Test2 : C
{
    static void Main()
    {
        I1 x = new Test2();

        System.Console.WriteLine(x.F1);
        x.F1 = 'x';
    }
}
";
            var compilation2 = CreateCompilationWithIL(source2, ilSource, options: TestOptions.DebugExe);
            compilation2.VerifyDiagnostics();

            i1 = compilation2.GetTypeByMetadataName("I1");
            i1F1 = i1.GetMember&lt;PropertySymbol&gt;("F1");
            var c = compilation2.GetTypeByMetadataName("C");

            Assert.Null(c.FindImplementationForInterfaceMember(i1F1));
            Assert.Equal("void C.set_F1(System.Char value)", c.FindImplementationForInterfaceMember(i1F1.SetMethod).ToTestDisplayString());
            Assert.Equal("System.Char B.get_F1()", c.FindImplementationForInterfaceMember(i1F1.GetMethod).ToTestDisplayString());
            Assert.Null(compilation2.GetTypeByMetadataName("B").FindImplementationForInterfaceMember(i1F1.GetMethod));

            CompileAndVerify(compilation2, expectedOutput: @"
B
set C
");
        }
```

Observed: Errors are reported for compilation1.
Expected: No errors, class ```C``` implements the interface 
```
.class public auto ansi beforefieldinit C
       extends B
       implements I1
``` 
Also, compilation2 succesfuly runs and verifies that runtime considers those methods implementing the interface.

Types defined in IL look roughly like this:
```
interface I1
{
    char F1 { get; set; }
}

class A 
{
}

class B : A
{
    public virtual sealed char get_F1() =&gt; 'B';
}

class C : B, I1
{
    public virtual sealed void set_F1(char value) =&gt; System.Console.WriteLine("set C");
}
```</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33225</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33224</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33223</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33222</IssueID>
    <RepoID>1</RepoID>
    <Title>DebuggerTextView: allow multiple assignments to _innerTextView.Properties[CompletionRoot]</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/787279
Fixes https://developercommunity.visualstudio.com/content/problem/436531/intellisense-does-not-work-in-immediate-window-in.html

**Scenario**
1. Open solution
2. Start debugging
3. Go to immediate window
4. Type something and see intellisense working
5. Stop debugging
6. Start debugging for the second time
7. Go to immediate window
8. Type something

**Expected**
Intellisense is still working

**Actual**
No intellisense is available for the second time

**Root cause**
Roslyn expects a new view to be used each time. Actually, a view was re-used and there is an internal exception when trying to set a context for the view.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33221</IssueID>
    <RepoID>1</RepoID>
    <Title>Call ProjectCodeModel.OnSourceFileRemoved when we remove files </Title>
    <Description>**REVIEW NOTE:** commit-at-a-time is highly recommended here.

In the project system refactoring to support free-threaded initialization, I lost this call which was causing removing and readding files to do bad things. This fixes it. The fix is more complicated than just adding the call back in, because we now allow document removal to happen on a background thread which we didn't allow before, and so bit of work that must happen on the UI thread must now be deferred until a later cleanup point.

Fixes #33080.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Customer deletes a Windows Form from a project, and then adds a new one with the same name. Rather than opening the designer again, the designer fails to load.

### Bugs this fixes

#33080

### Workarounds, if any

After you get into this state, restart Visual Studio.

### Risk

Moderate; the area we're touching (CodeModel object lifetimes) is always tricky, but since it's an API that many features are built on a lot of not obvious things might be broken.

### Performance impact

None.

### Is this a regression from a previous update?

Yes, this was broken in our big project system refactoring to improve performance in Preview 1.

### Root cause analysis

We didn't have any tests that tested CodeModel object life times. We've added functional tests to test that.

### How was the bug found?

Customer report.

&lt;/details&gt;</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33220</IssueID>
    <RepoID>1</RepoID>
    <Title>Both Signature Help and Intellisense are showing at the same time and interferring</Title>
    <Description>Paste this code into a C# project:
```C#
class C
{
    void M1(int int1, int int2, int int3)
    {
		// Type here
    }

    void M1(int int1, int int2) { }
}
```

At `// Type here`, start typing `M1(int`. At this point, both the signature help popup for selecting an overload and intellisense for completing the current word will be showing. Up and down will control signature help, not intellisense, and you can't control intellisense without either using the mouse or hitting escape and ctrl+space.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33219</IssueID>
    <RepoID>1</RepoID>
    <Title>Better experience for using compiler via nupkg and alternating between core and full msbuild</Title>
    <Description>Currently, there are two different compiler packages for full-framework msbuild and core msbuild, respectively.

However, consider that is common to work with both msbuilds in tandem. For example, alt-tab between command line where you use `dotnet` and VS.

The following seems like it would work:

``` xml
&lt;PackageReference Include="Microsoft.Net.Compilers" Version="2.10.0" Condition="'$(MSBuildRuntimeType)' != 'Core'" /&gt;
&lt;PackageReference Include="Microsoft.NETCore.Compilers" Version="2.10.0" Condition="'$(MSBuildRuntimeType)' == 'Core'"  /&gt;
```

But it doesn't quite. The problem is that the package used is determined at restore time and you can restore with one msbuild (e.g. `dotnet restore`) and build with another (e.g. `msbuild`)

When you do that, you get complicated errors like this:

```
C:\Users\nicholg\.nuget\packages\microsoft.netcore.compilers\2.10.0\tools\Microsoft.CSharp.Core.targets(52,5): 
error MSB4062: The "Microsoft.CodeAnalysis.BuildTasks.Csc" task could not be loaded from the assembly
C:\Users\nicholg\.nuget\packages\microsoft.netcore.compilers\2.10.0\build\..\tools\Microsoft.Build.Tasks.CodeAnalysis.dll. 
Could not load file or assembly 'System.Runtime, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or 
one of its dependencies. The system cannot find the file specified. Confirm that the &lt;UsingTask&gt; declaration is correct, that 
the assembly and all its dependencies are available, and that the task contains a public class that implements 
Microsoft.Build.Framework.ITask.
```

Working around this is possible, but hacky. See https://github.com/dotnet/corefx/pull/35134/commits/9c7bf6731325e3d79af1b83742496173d840633d

I suggest one the following:

1. Make a single package that just works on both msbuilds.
2. Make the full-framework and core packages no-op on mismatched msbuilds. This way they can both be referenced without conditions. 
3. (2) + a meta-package that references both and behaves like (1) would.

cc @ericstj @tannergooding @agocke @jaredpar</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33218</IssueID>
    <RepoID>1</RepoID>
    <Title>Hint text for static string properties should show the static string</Title>
    <Description>&lt;p&gt;The hint text of a static string property or field by default only shows the name that field or property. It could show the static string that would be returned. Since it doesn't do this by default developers I work with frequently have ///&amp;lt;summary&amp;gt; comments containing just the string, it duplicates work and increases document size.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/444934/hint-text-for-static-string-properties-should-show.html
VSTS ticketId: 785538_
_These are the original issue comments:_

Blair Wang [MSFT] on 2/4/2019, 08:46 PM (2 days ago): Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.
Mika Dumont on 2/7/2019, 11:08 AM (20 sec ago): &lt;p&gt;Thank
you for the suggestion! I am going to move this to our open source repository
for a further design discussion with the community.&lt;/p&gt;
</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33217</IssueID>
    <RepoID>1</RepoID>
    <Title>Add test to verify Add Imports is the only extension with priority = CodeActionPriority.High</Title>
    <Description>@chborl Do we have some tests somewhere that grab all of our actions and confirm something like:

&gt; No other extensions are using CodeActionPriority.High so AddImports will now always be listed first.

doesn't change in the future?

_Originally posted by @jasonmalinowski in https://github.com/dotnet/roslyn/pull/33214#issuecomment-461543988_</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33215</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto completion for goto and goto case</Title>
    <Description>When typing after a ```goto``` keyword in Visual Studio, the IntelliSense drop-down list now shows all code snippets and existing labels. It would be good to enhance this feature by including '```case xxx```' in the list if ```goto``` is in a ```switch``` block (or show all ```case``` labels after typing ```goto case```) and make the list appear once a space after the ```goto``` keyword is typed (instead of when starting typing the label name). Furthermore, code snippets can be removed from the list as a ```goto``` proceeding any reserving keywords (generated by the snippets) other than ```case``` makes no sense in the language. 

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/441435/auto-completion-for-goto-and-goto-case.html
VSTS ticketId: 782010_
_These are the original issue comments:_

Hafnia Vasilyevna on 1/30/2019, 08:55 PM (7 days ago): &lt;p&gt;*The last sentence should be "... preceding any reserved keywords...", sorry for the typo :)&lt;/p&gt;

Jane Wu [MSFT] on 1/31/2019, 01:52 AM (7 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
Kendra Havens [MSFT] on 2/1/2019, 03:41 PM (5 days ago): &lt;p&gt;Thanks for filing this feedback! Just to check, is it safe to assume you are specifically referring to 'goto' statements in Visual Basic? (Not C++?)&lt;/p&gt;

Hafnia Vasilyevna on 2/1/2019, 08:01 PM (5 days ago): &lt;p&gt;I'm using C# currently, not sure about the situation in other languages. &lt;/p&gt;
</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33214</IssueID>
    <RepoID>1</RepoID>
    <Title>Show Add Imports first in suggested actions</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/25470

Both Add Imports and Remove Unused Variables have the same priority, so the tie is broken by their proximity to the caret.  Thus, add imports is listed 2nd.

This PR changes AddImports priority form Medium to High.  No other extensions are using CodeActionPriority.High so AddImports will now always be listed first.

Related issue https://github.com/dotnet/roslyn/issues/20487 suggests finding a better approach than ordering by proximity since it doesn't always give the desired order. </Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33213</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixup nullable tests</Title>
    <Description>
    </Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33212</IssueID>
    <RepoID>1</RepoID>
    <Title>Add EditorFeatures.Cocoa IVTs for MonoDevelop</Title>
    <Description>
    </Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33211</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn fails to infer type arguments' nullable annotations from calls with lambda expressions even without closures</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C
{
  public static void M()
  {
    var v = MyMethod(x =&gt;
    {
      x = "";
      var result = GetT(x);
      result.ToString(); // no warnings
      // result = null; // CS8625 if uncommented
      return result;
    });

    v.ToString(); // incorrect CS8602
  }

  public static extern T MyMethod&lt;T&gt;(System.Func&lt;string?, T&gt; f);
}
``` 

**Expected Behavior**:
No warnings for the line `v.ToString();` since Roslyn is aware that the `result` variable is non-nullable. E.g. it warns about assigning possible null values to it and does not warn about dereferencing it.
Therefore the lambda expression with only non-nullable returns should be inferred to have a non-nullable return type and the `MyMethod.T` type argument for the call should be inferred to be a non-nullable string as well.

**Actual Behavior**:
Incorrect warning `CS8602 Possible dereference of a null reference.` is reported for the line `v.ToString();`</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33210</IssueID>
    <RepoID>1</RepoID>
    <Title>Actual nullability state of closure variables does not affect inference of type arguments</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code
```cs
#nullable enable
class C
{
  public static void M1(string s)
  {
    s = "";
    var v = Generic(() =&gt; s);
    v.ToString(); // no warnings
  }

  public static void M2(string? s)
  {
    s = "";
    var v = Generic(() =&gt; s);
    v.ToString(); // CS8602
  }

  public static extern T Generic&lt;T&gt;(System.Func&lt;T&gt; f);
}
```

**Expected Behavior**:
No warnings `v.ToString()` in `M2`

**Actual Behavior**:
Warning `CS8602 Possible dereference of a null reference.` is reported for `v.ToString()` in `M2`.

**Notes**
Roslyn infers nullability of type arguments based on actual nullability state when there are no closures but fails to do this in the examples above. However when there are closures involved Roslyn seems to fall back to declared nullability of `s` instead of its actual state. E.g. in the following code snippet Roslyn correctly takes the actual nullability state of `s` into account:

```cs
class C
{
  public static void M3(string? s)
  {
    s = "";
    var v = GetT(s);
    v.ToString();
  }

  public static extern T GetT&lt;T&gt;(T t);
}
```</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33209</IssueID>
    <RepoID>1</RepoID>
    <Title>User defined operator lose information about type arguments' nullability</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C&lt;T&gt;
{
  public T field;

  public static void M1(string? s1)
  {
    var c1 = GetC(s1);
    c1.field.ToString(); // CS8602

    var c2 = c1 + c1;
    if ("".Length &gt; 0) 
    {
      c2.field = null;
    }
    else
    {
      c2.field.ToString(); // missing warning for dereference of  a possible null c2.field
    }
  }

  public static void M2(string? s1)
  {
    s1 = "";
    var c1 = GetC(s1);
    c1.field = null; // CS8625

    var c2 = c1 + c1;
    if ("".Length &gt; 0) 
    {
      c2.field = null; // missing warning for assigning null literal to a non-nullable type
    }
    else
    {
      c2.field.ToString();
    }
  }

  public static extern C&lt;T&gt; GetC&lt;T&gt;(T t);
  public static extern C&lt;T&gt; operator +(C&lt;T&gt; t1, C&lt;T&gt; t2);
}
```

**Expected Behavior**:
Warning `CS8602 Possible dereference of a null reference.` reported for the line `c2.field.ToString()` in `M1`
Warning `CS8625 Cannot convert null literal to non-nullable reference or unconstrained type parameter.` reported for the line `c2.field = null;` in `M2`

**Actual Behavior**:
No warnings at all reported for usages of `c2`

**Notes**
The compiler is able to infer nullable annotations for `c1` variables based on the nullability state of `s1` variables based on the warnings reported for their usages. However applying a user-defined operator seems to reset all the annotations for involved type parameters to unknown.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33208</IssueID>
    <RepoID>1</RepoID>
    <Title>Breaking: case no longer works with constant expressions</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54

**Steps to Reproduce**:
Switching on an integer variable:
`case ((2) + (2)):` and `case ((2 + 2) - 2):`
```
(3,10): error CS8370: Feature 'recursive patterns' is not available in C# 7.3. Please use language version 8.0 or greater.
(3,15): error CS1003: Chyba syntaxe; očekávána hodnota: ,
```

`case (2) | (2):` or `case ((2 &lt;&lt; 2) | 2):`
```
(3,20): error CS1026: Očekává se ).
(3,20): error CS1003: Chyba syntaxe; očekávána hodnota: :
(3,20): error CS1525: Neplatný výraz |
(3,23): error CS1002: Očekával se středník (;).
(3,23): error CS1513: Očekával se znak }.
```

All cases above work in VS 2017.

(Sorry for non-English exceptions which is probably unrelated regression in VS2019.)</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33207</IssueID>
    <RepoID>1</RepoID>
    <Title>Cleanup IsGeneratedCode check in CSharpSyntaxTree</Title>
    <Description>This code:

https://github.com/dotnet/roslyn/blob/d11147e209483733f6ed8a0613ffde7fb52bf3ac/src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.cs#L612-L625

Could be simplified with a ThreeState, removing the need for the interlocked.

We should also add some more tests as suggested in https://github.com/dotnet/roslyn/pull/33048</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33206</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33205</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33204</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33203</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33202</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33201</IssueID>
    <RepoID>1</RepoID>
    <Title>'foreach' does not handle 'ref' and 'ref readonly' correctly</Title>
    <Description>**Version Used**: 

master (28 Oct 2018) using [SharpLab](https://sharplab.io/)

**Steps to Reproduce**:

1. Create an enumerator where `Current` returns a `ref readonly`:

```csharp
public static partial class Array
{
    public static WhereArray&lt;TSource&gt; Where&lt;TSource&gt;(this TSource[] source, Func&lt;TSource, bool&gt; predicate) 
    {
        if (source == null) ThrowSourceNull();
        if (predicate is null) ThrowPredicateNull();

        return new WhereArray&lt;TSource&gt;(source, predicate);

        void ThrowSourceNull() =&gt; throw new ArgumentNullException(nameof(source));
        void ThrowPredicateNull() =&gt; throw new ArgumentNullException(nameof(predicate));
    }

    public readonly struct WhereArray&lt;TSource&gt; 
        : IEnumerable&lt;TSource&gt;
    {
        readonly TSource[] source;
        readonly Func&lt;TSource, bool&gt; predicate;

        internal WhereArray(TSource[] source, Func&lt;TSource, bool&gt; predicate)
        {
            this.source = source;
            this.predicate = predicate;
        }

        public Enumerator GetEnumerator() =&gt; new Enumerator(in this);
        IEnumerator&lt;TSource&gt; IEnumerable&lt;TSource&gt;.GetEnumerator() =&gt; new Enumerator(in this);
        IEnumerator IEnumerable.GetEnumerator() =&gt; new Enumerator(in this);

        public struct Enumerator : IEnumerator&lt;TSource&gt;
        {
            readonly TSource[] source;
            readonly Func&lt;TSource, bool&gt; predicate;
            readonly int count;
            int index;

            internal Enumerator(in WhereArray&lt;TSource&gt; enumerable)
            {
                source = enumerable.source;
                predicate = enumerable.predicate;
                count = enumerable.source.Length;
                index = -1;
            }

            public ref readonly TSource Current =&gt; ref source[index];
            TSource IEnumerator&lt;TSource&gt;.Current =&gt; source[index];
            object IEnumerator.Current =&gt; source[index];

            public bool MoveNext()
            {
                index++;
                while (index &lt; count)
                {
                    if (predicate(source[index]))
                        return true;

                    index++;
                }
                return false;
            }

            public void Reset() =&gt; index = -1;

            public void Dispose() { }
        }
    }
}
```
2. When the iteration variable is not used:

```csharp
public static class Program 
{
    public static void Main() 
    {
        var a = new int[] { 0, 1, 2, 3, 4 };
        foreach(var i in a.Where(_ =&gt; true))
          Console.WriteLine("🌄");
    }
}
```

The [generated code](https://sharplab.io/#v2:D4AQDABCCMDcCwAocVoDoDCB7ANjgpgMYAuAllgHYDOCykMALLUiAExgsDMqAbFK6gDsEJAG8kESVG4w+IBhACyAQ1IUAFAEoRiKRHG69UgG7KAThGUQAvBAr4A7hDXEA2gF19EMABoI0P1Y/Tj8FAF9aIykAMywzfGVCAAt1UwtSZwpLNAB1JPx49QB9GwA+CGIzAFd8TU0JKIgASBgATnUAIkAeDcAQfY7NSKkwpGHELl4IAAdzMmUcfggAQTMzZQBPMQbJEBloPjyC/GXVtYAeABUAZSwqs0J8coP4i+vb+9L1YiTSKggrm7u+A8ECoAPufhAAFYXmD8H4AEZYXDlSbxAAmpEIymItR0egMjWc0Qg6lBb3wNlsFCqeG05ySZiwDlegIAcjScFpBlFSMT1Kj8BisTjnL9qbS/gymQAFdGY7H4dl4LlILZGEDCexOJ5HFbrGHkj5kwF+AVChUDVWGKLySWM5mwpWc7TWcpfe12RxLMwAcyqAFt8BRiE6AKIAD3ukzIlHUFGUgaw0VJsLq3PVCnp9tlgvlOKdWjKFSlTi13r9geDYcj+Gj5A08cTybNedqlutEFGap2EHiyjRlBwaxBlSqJAgOuO+v+hrxjQAXKhOAbAaU1QTGn2BxQh38Wfdgcb7um9FvB8OoSvwRBEcipnLhfhmB29C4CvH5pO9Wt1DPAYfYQhaE/2vW8cBRB8LTVfFoMaL4fjQI8KVsJCTzg74qDQFtHxse9c0fNDJC7F8pB7UNqUDVZiDiCAAHF8GIciAwKbE4kLV1PScJjKNYsx1DUYsfnbQkAEluJY6izCvB4l2k0o0HoxiKIktiXXKMtxKotiBPgqhhMaMTlK0iwYE4BSGM03j2PUr1LMk/isl09tYO2bgqFHcc7JoxdDOY4y5Jc/RAtPBJt13ECgU8VDgqkM8dwvYD9zhG8kXAvDzRxQijDi3cXAgQgbmDLLX2DTI0XwcNn0JEqcTMD8IC8viBK/E45IgIM/OUeECHqEiog3aqjCQ3COp47r8EQ2FisabCFRGoyuoILDIMymKogKqpStsUaWPGybyTQAAZIMfS+aaeQocrw1wgBaOA1s7K1Btc3t8GJHLhwiiAMFueItvKeJiSQ1w1Cu9xzr3WEIF8njJLkzBfqDYgi2B0GKvBh6sHhAArIhkZhlSzARlYkZR2EQcu9GquenswKULBjEVCriC0B6BueyQ0fDABqbmIb0BxvgIEkuYgU58sK4heo5mC+pl3kSVmnEU3JCmwbqB6OY1CpqifJ6ZYuq7ef5oZNdI4RojmKg9blvRiK1mQFAAJXwa2WbUsqKtu+6xlt0jHYgAARH5Jiwa3C1ER65dGO2RiQIA===) is correct, where the `reference` variable is of type `ref int`:

NOTE: The `readonly` is missing but that is expected.

```csharp
Array.WhereArray&lt;int&gt;.Enumerator enumerator = obj.Where(&lt;&gt;c.&lt;&gt;9__0_0 ?? (&lt;&gt;c.&lt;&gt;9__0_0 = &lt;&gt;c.&lt;&gt;9.&lt;Main&gt;b__0_0)).GetEnumerator();
try
{
    while (enumerator.MoveNext())
    {
        ref int reference = ref enumerator.Current;
        Console.WriteLine("\ud83c\udf04");
    }
}
finally
{
    ((IDisposable)enumerator).Dispose();
}
```

3. When the iteration variable is used:

```csharp
public static class Program 
{
    public static void Main() 
    {
        var a = new int[] { 0, 1, 2, 3, 4 };
        foreach(var i in a.Where(_ =&gt; true))
            DoSomething(i);
    }
    
    public static void DoSomething(in int value) 
        =&gt; Console.WriteLine(value);
}
```

The [generated code](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEAMACFBGA3AWACh0tsA6AYQHsAbGuAYxgEsqA7KA4zHAFi6IoATGkEBmUgDYsQ0gHYMRAN5EMarBJzSUvDAFkIzNgAoAlIsLqMKy1fUA3CAgwQMAXgxs4AdwxGYANoAutYYaAA0GNiRQpFikboAvlx26gBmVAhwEAwAFsaOzsx+bC5kAOq5iHDGAPruAHwYMAgArnCmpqqpdgAiVADKVGBwMLlGAObGzKYp6ondaosaUli6/UMjY5PTpf4YjjTt5stWbk04AJwFEEcdXAuE4qsADk4stzIYAIIICBAAT2UyxQmmw0kq1V+/wBAB4ACpDVoIBhwJqQrIIpEotHGbZQDCIqjI1HBDBQYk4yIoACsWMpqMiwCotCaLyyABNmAwIPATrY1DYen40hhjBSSXB3B42K06OZ4bkEFRvNjUQA5OU0MxzVLMUXGdlwLk8+B+Amy+WEpUqgAKnO5vLgmroOqIp3UKAUXl8GLg0MB9MlDXFDLgkSNJqds3dArsOmtytVYZd2vM52aNt8Pp+CAmrRGbBgqYAogAPVEvFjsYxsCAjKhpUOSzq6+O6RVJ+3Gx3wVNmRqZpOeHy5/OF4ta8uV6smOsNpuR3sdGNxx4giRZCAc9g0AHklqtJgYP0BuFE4MWYUgUhiIM4hrLIU9Lc7th7wlquBkiU4ttWV9d33Wl70ZDBmVZDAl1NOABDjKx/EQOsaBPKosjPYwLxxH8w2pOksLAiCaDZB0YK6eD1GfYU1HxMhf1RdxyTDf8elo6CnUY9j4BYtR1wotRQQwEtZRGf4YEyDAAHFRmEgtEF5TIBwzHNZNEhSEF2TNmCgVdhQASVU+TxIQUC0VvUyGjIaSYEMsTFPTJoVJEozFKMLSdJ4jADOcuznBwMQrJknz1KUxzR1skK3PxVcPQEiRYDaY8IuMjAb28uTfIs2LrGygDsjfD8CO/EJ6Ng3L1EA99gPwr8mRZYioNIp1PLy7cgJKGAMAYYkixa9R9iMDk4DLODqP6oskM+ZLXNKU8/kDIqmjgYLgHocixsFcrUlKxjloyiBVrgOjmK2uwuKlDw9rUw6yHOvrUm61oi12lb6GOyUyAAGWWiYxnuuxBuGxiAFo8FOviNpWLJRUqwqvwwChkSyZ6M2hpjJQCQGyyCf6iq86aTMWygkeWzqM1KzG2CG7H/qoYAACtGE69K1OM4m/lJwcKaxnHY0hwSiP0Kh7GdYaYDMU6qMhkpqYAall/6rG8cZ6DFLGMFhLqepgdbpc2/jpf1MVzubbCec6U7+YUQ8yqeA3Iax+XFfmS3PQUNJbigW3IYhjbBITAAlOAvfFhyZaBjxQdGv3NHWbSXioL2ByUDBHmFNOXcIR4gA) is the following, where the `value` variable now is of type `int`. **This causes a copy of the value type**.

```csharp
Array.WhereArray&lt;int&gt;.Enumerator enumerator = obj.Where(&lt;&gt;c.&lt;&gt;9__0_0 ?? (&lt;&gt;c.&lt;&gt;9__0_0 = &lt;&gt;c.&lt;&gt;9.&lt;Main&gt;b__0_0)).GetEnumerator();
try
{
    while (enumerator.MoveNext())
    {
      int value = enumerator.Current;
      DoSomething(ref value);
    }
}
finally
{
    ((IDisposable)enumerator).Dispose();
}
```

4. When 'foreach' is not used:

```csharp
public class Program 
{
    static readonly int[] values = new int[] { 1 };
    
    static ref readonly int GetValue() =&gt; ref values[0];
    static void SetValue(in int value) =&gt; values[0] = value;
    
    public static void Main() 
    {
        ref readonly int a = ref GetValue();
        SetValue(a);
    }
}
```

The [generated code](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEAMACFBGA3AWACgUBmLAJi2wHYMBvIjJqgNgwTggBMB7AOwA2ATwwBLPjADaAXQwA3CAICucKBgC8GPnADuYiTPoZsGAL4FCzDI2Y42HAGbtOvQSPEwMAcTgwAaooqABQAlBoAfM5OCsqqkmjSFlZ2WAAsGADKvgGxQeL6njEqYeqRRXEJGvKBcEnMNkykrGkYALIQ4qHWlswMPVZMjs7c/MIFGBBVQz7+NaF1A5nZcxAhC2ZEpkA) if correct:

```csharp
public static void Main()
{
  SetValue(ref GetValue());
}
```


</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33200</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense for RegexOptions enum displays '&amp;quot ;' instead of a quote character.</Title>
    <Description>&lt;p&gt;Visual Studio Version 16.0.0 Preview 2.2&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Project type : Console App (.Net Core) C#&lt;/p&gt;

![image](https://user-images.githubusercontent.com/12449387/52400607-77715600-2a74-11e9-91b9-168b5e7877b0.png)

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/446966/intellisense-for-regexoptions-enum-is-showing-quot.html
VSTS ticketId: 787623_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33199</IssueID>
    <RepoID>1</RepoID>
    <Title>Some existing 3rd party Roslyn analyzers are broken by C# 8 NRTs</Title>
    <Description>**Version Used**: 

VS preview 2.2, .Net preview 3.0.100-preview-010184, C# 8 with nullable reference types enabled.

**Steps to Reproduce**:

1. Use xUnit with Roslyn Analyzer integration
2. Add a test class like this, which uses the `MemberData` attribute:

```
    public class UnitTest1
    {
        public static readonly object[][] Data =
        {
            new object[] { "1" },
            new object[] { "2" },
        };

        [Theory, MemberData(nameof(Data))]
        public void Test1(string value)
        {
            Assert.NotNull(value);
        }
    }
```

3. Enable nullable reference types.

**Expected Behavior**:

There are no errors or warnings.

**Actual Behavior**:

If you add `#nullable enable` at the top, you get the following error: 

error xUnit1019: MemberData must reference a data type assignable to 'System.Collections.Generic.IEnumerable&lt;object[]&gt;'. The referenced type 'object[][]' is not valid.

I reported this to the xUnit project here: https://github.com/xunit/xunit/issues/1897

They asked me to report this to Roslyn instead. Basically, this appears to be a breaking API change for Roslyn analyzers.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33198</IssueID>
    <RepoID>1</RepoID>
    <Title>Reference Microsoft.NetFramework.Analyzers and fix violations</Title>
    <Description>Part of #33197

I was planning on opening that issue to begin discussion about the work, but it turned out to be so small I just did it. Feel free to tell me why this is not a good idea in here, instead of the issue :)

After this change, a build on my machine only showed formatting warnings which I believe are known.

There are two analyzers that are _not_ enabled with this change, covered by https://devdiv.visualstudio.com/DevDiv/_workitems/edit/770175 and https://devdiv.visualstudio.com/DevDiv/_workitems/edit/770068</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33197</IssueID>
    <RepoID>1</RepoID>
    <Title>Reference Microsoft.NetFramework.Analyzers and fix violations</Title>
    <Description>Some of the SDL and security related analyzers are currently not enabled for Roslyn. For full security coverage we should reference `Microsoft.NetFramework.Analyzers` and fix any existing violations that come up.

Two of the diagnostics are covered by https://devdiv.visualstudio.com/DevDiv/_workitems/edit/788330 and https://devdiv.visualstudio.com/DevDiv/_workitems/edit/788328

From @jaredpar:
&gt; I don't think we can take a 7% build regression for this. That would impact the inner productivity loop of the team too much. I think we should either take the fixes and push on performance before we merge this in. Or alternatively if we _must_ run this now then we should limit the running of this analyzer to the build correctness leg. That leg is already used for such types of extra build validation and given it compiles 100% of our code it would meet whatever SDL requirement we're trying to hit here.

Performance improvements to the analyzer are tracked by https://github.com/dotnet/roslyn-analyzers/issues/2103 or alternatively running these analyzers on the build correctness leg in CI is fine.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33196</IssueID>
    <RepoID>1</RepoID>
    <Title>completion and signature help ordering</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/32940</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33195</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert tuple to struct suggestion only shows up on the single open parentheses character</Title>
    <Description>**Steps to Reproduce**:
```csharp
class Test
{
    void Method()
    {
        var t1 = (a: 1, b: 2);
    }
}
```

If you position the mouse cursor before the first parentheses of the tuple, there is an option to convert the tuple to a struct.  This seems to be the only location where the quick fix suggestion pops up.

This ends up making this feature hard to find, I was looking for it specifically and it took some time to figure out exactly how to trigger it.

**Expected Behavior**:
It seems like it would be better if this suggestion was offered anywhere in between (and including) the tuple's parentheses

**Actual Behavior**:
Suggestion is only offered when cursor is placed directly before the first of the tuple's parentheses.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33194</IssueID>
    <RepoID>1</RepoID>
    <Title>Linux_Test coreclr "Failed to initialize CoreCLR" after prepare job step</Title>
    <Description>Seen in #33029

https://dev.azure.com/dnceng/public/_build/results?buildId=89073
```
##[Error 1]
Failed to initialize CoreCLR, HRESULT: 0x80004005 
```

Have retried multiple times but it always gets abandoned in a couple seconds.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33193</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable mono CI build</Title>
    <Description>Updated builds seem to be deploying as per this comment https://github.com/dotnet/roslyn/issues/33161#issuecomment-461047323

Closes https://github.com/dotnet/roslyn/issues/33161</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33192</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33191</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33190</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33189</IssueID>
    <RepoID>1</RepoID>
    <Title>Bad Error in Recursive Pattern with Indexed Properties</Title>
    <Description>https://github.com/dotnet/roslyn/pull/33178#discussion_r254487264

See IsPattern_BadRecursivePattern_03. The error reported on the `get` accessor is unclear, as there is a `get` member available, but because it's an indexed property it doesn't work correctly.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33188</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove block comments first if selection exactly matches block.  Reso…</Title>
    <Description>…lves #31669 

Checks to see if the selection spans exactly a block comment.  If so, remove that first rather than removing any single line comments inside the block comment.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33187</IssueID>
    <RepoID>1</RepoID>
    <Title>PackageInstallerFactory::ProcessProjectChange should only process projects that are ready</Title>
    <Description>When we query NuGet for package information to cache, if the project is not ready NuGet will throw an `InvalidOperationException`. The API necessary to query if the project is ready to be queried is not currently available. This issue is to track updating the logic once the correct API is available and we can accurately determine that calling `GetInstalledPackages` should succeed. </Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33186</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable preview version for certain target frameworks</Title>
    <Description>Enable 'preview' langversion in our MSBuild .targets file for projects targeting netcoreapp3.0 or netstandard2.1. A warning is already provided in the dotnet SDK when using these preview versions (well, netstandard2.1 doesn't have a shipping preview yet, but presumably it will behave like netcoreapp3.0) so we can automatically upgrade the compiler to Preview when using them.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33185</IssueID>
    <RepoID>1</RepoID>
    <Title>Have generate constructor respect field naming styles</Title>
    <Description>Fixes #14077

</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33184</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Add an adapter assembly for MonoDevelop"</Title>
    <Description>MonoDevelop manages their upgrade process fully independently of the Roslyn workflow, including cases where source- or binary-breaking changes occur. The ExternalAccess adapter assembly is unnecessary maintenance overhead for this scenario.

This reverts commit 78d8f0fcfaf892bb42160a56cab754866e6c4620.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33183</IssueID>
    <RepoID>1</RepoID>
    <Title>Resolve Metadata As Source symbols in their original compilations</Title>
    <Description>Fixes a bug reported through email by @veleek 

The document in which disassembled code is added is part of a temporary project used specifically for Metadata as Source operations. The target symbol for navigation is derived from a different context, so the corresponding assembly symbol will not be an equality match. ~~We instead look up the metadata reference in the compilation using the metadata name, which accounts for the symbol mismatch and also allows for assembly version differences.~~

We now use the original compilation matching the `ISymbol` used for navigation to ensure the metadata reference can be correctly resolved.

Fixes #23478
Fixes #6859
</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33182</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove OptProf tests that are not currently supported</Title>
    <Description>The removed RPS tests are not supported in the training environment right now.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33181</IssueID>
    <RepoID>1</RepoID>
    <Title>removed 3 OptProf tests that kept failing</Title>
    <Description>opened tracking issue - https://github.com/dotnet/roslyn/issues/33180

this should let us have green OptProf training runs.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33180</IssueID>
    <RepoID>1</RepoID>
    <Title>investigate failing OptProf Tests</Title>
    <Description>these 3 OptProf tests are kept failing. see why they are failing.

![image](https://user-images.githubusercontent.com/1333179/52370362-8837b280-2a07-11e9-8468-95c23b1474d7.png)

https://devdiv.visualstudio.com/DevDiv/_releaseProgress?releaseId=250651&amp;environmentId=1081950&amp;extensionId=ms.vss-test-web.test-result-in-release-environment-editor-tab&amp;_a=release-environment-extension

</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33179</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid delegate captures for ConcurrentDictionary.AddOrUpdate</Title>
    <Description>**Version Used**: 
3.0.0-beta2-19055-09

ConcurrentDictionary.AddOrUpdate is misused throughout the codebase. The anti-pattern seems to be:
```csharp
ConcurrentDictionary&lt;T1, T2&gt; dictionary;
dictionary.AddOrUpdate(key, value, (_1, _2) =&gt; value);
```

The right usage would be:
```
ConcurrentDictionary&lt;T1, T2&gt; dictionary;
dictionary[key] = value;
```

More info on this is in this commit: https://github.com/dotnet/roslyn/pull/33173/commits/2ac11675a1785bdb58c54369f8a6cbb3c529d50e</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33178</IssueID>
    <RepoID>1</RepoID>
    <Title>Make IPropertySubpattern Internal</Title>
    <Description>Updates the structure of IPropertySubpattern to be what we decided in the IOperation design meeting, and makes the implementation internal until we finalize C# 8.
Fixes https://github.com/dotnet/roslyn/issues/33018.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33177</IssueID>
    <RepoID>1</RepoID>
    <Title>Expand RemoveAllComments to have more in depth logic </Title>
    <Description>Make RemoveAllComments special case TypeDeclarations to remove 
leading and trailing comments on the open/close tokens as well in csharp.

Separate out the logic for RemoveAllComments and RemoveLeadingAndTrailingComments since the behavior could be different based on the syntax passed in. RemoveLeadingAndTrailingComments only works on leading and trailing syntax. 

Fixes #31377 </Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33176</IssueID>
    <RepoID>1</RepoID>
    <Title>check other calls for Incorrect IDE0004 "Cast is redundant" - https://github.com/dotnet/roslyn/pull/32467</Title>
    <Description>there are other missing check we need here - https://github.com/dotnet/roslyn/pull/32467#pullrequestreview-192737910</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33175</IssueID>
    <RepoID>1</RepoID>
    <Title>Follow up on IPropertySubpatternOperation Issues</Title>
    <Description>We currently don't expose invalid `ISymbol`s on an `IPropertySubpattern.Member` if the symbol is something other than `IFieldSymbol`, `IPropertySymbol`, or `null`. We need to expose this is in some manner.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33174</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable&lt;T&gt;.GetType() should warn about possible null values and update the accessed variable's nullablility</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
class C
{
  static void Main()
  {
    int? x = null;
    x.GetType(); // missing warning
    var y = (int) x; // incorrect warning
  }
}
```
**Expected Behavior**:
Warning `CS8629 Nullable value type may be null.` for `x.GetType()`.
No warnings for the line `var y = (int) x;` since x should be known to be not null after `x.GetType()`

**Actual Behavior**:
No warnings for `x.GetType()`. The program crashes at runtime at this line with a `NullReferenceException`. Incorrect warning CS8629 for `var y = (int) x;`.
</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33173</IssueID>
    <RepoID>1</RepoID>
    <Title>Optimize allocations for symbol tree info analyzer</Title>
    <Description>Fixes #33172</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>20/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33172</IssueID>
    <RepoID>1</RepoID>
    <Title>Allocations while typing from lambda captures in SymbolTreeInfo incremental analyzer</Title>
    <Description>**Version Used**: 
2.10.0-beta2-63410-10 (but looks like it's the same in 3.0.0-beta2-19055-09)

**Steps to Reproduce**:

**Steps to Reproduce**:

1. Run analyzers on a solution (in my case [this](https://github.com/mono/refactoringessentials/tree/monodevelop2) one)
2. Observe a lot of allocations coming in from SymbolTreeInfoIncrementalAnalyzerProvider+IncrementalAnalyzer.UpdateReferencesAync

**Expected Behavior**:
Lambda captures and iterators should be avoided.

**Actual Behavior**:
They are not.

They're causing up to 10MB out of the 100MB allocated during typing in one of my traces (delegate captures, enumerator boxes)

Not much we can do to simplify code, but splitting methods into CurrentProcess/RemoteProcess will at least mitigate the allocations for the in process version.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33171</IssueID>
    <RepoID>1</RepoID>
    <Title>The Document.Folders property is empty for ClassLibrary (C#, VB) .Net Framework in VS2019 16.0.0 Preview 2.2</Title>
    <Description>**Version Used**: 
Visual Studio 2019 16.0.0 Preview 2.2
**Steps to Reproduce**:

1. Create a new ClassLibrary (C# or VB) .Net Framework project
2. Add a new folder with some name
3. Add a new class to this folder 

**Expected Behavior**:
The Document.Folders property should contain a folder name when the class is declared
**Actual Behavior**:
The Document.Folders property is empty</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33170</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove dead code</Title>
    <Description>Closes #32964

I was not able to find a case where the IDE clearly misbehaves over this. Of particular relevance:

1. The use of `:_` at the end of a line produces a compiler error that `_` must be followed by a whitespace
2. Formatting a document containing `: _` at the end of a line results in both characters getting removed</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33169</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing expected nullable mismatch warnings around method constraints check</Title>
    <Description>**Version Used**: 
VS 2019 - Preview 2

In Preview2, if I declare a generic method with a nullable type constraint `class?` for the type `T`, no warning is shown, even if one generic parameter has the non-nullable type constraint `class` for `T`:

**Steps to Reproduce**:
![image](https://user-images.githubusercontent.com/338856/52331055-70583280-29f7-11e9-8909-8e71070e29a8.png)

**Expected Behavior**:

I think a warning should be prompted with the squiggle surrounding the following block `where T : class?`:

Proposal:
`The constraint 'class?' cannot be used in the generic method 'Class1.Method&lt;T&gt;'. Nullability of type argument 'T' doesn't match 'class' constraint of 'Class1.Samle&lt;T&gt;'.`

</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33168</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix crash in classification service</Title>
    <Description>https://github.com/dotnet/roslyn/pull/33168/commits/d94f2129de2a511e8cba353b404e847d1f479b8a Fix #33167 

https://github.com/dotnet/roslyn/pull/33168/commits/8d4e28ea25fb92d807aa2017bf4f62fa71a32e74 is an attempt to (at least partially) fix internal bug [763988](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763988). Since we still don't know the root cause, and we don't wanna crash VS for highlighting failure, change crash to NFW instead.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33167</IssueID>
    <RepoID>1</RepoID>
    <Title>VS crashes when renaming a wpf xaml file to a .cs file</Title>
    <Description>Repro steps:
1. create a WPF app
2. open xaml in designer
3. rename .xaml file to .cs

stack-trace:
```
System.AggregateException: One or more errors occurred. ---&gt; System.NullReferenceException: Object reference not set to an instance of an object. 
at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.&lt;AddSyntacticClassificationsAsync&gt;d__3.MoveNext() --- 
End of stack trace from previous location where exception was thrown 
--- at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject) 
--- End of inner exception stack trace --- 
at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions) 
at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.AddClassifiedSpansForCurrentTree[TClassificationService](IClassificationDelegationService`1 delegationService, TClassificationService classificationService, SnapshotSpan span, Document document, List`1 classifiedSpans) at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.AddClassifiedSpans[TClassificationService](IClassificationDelegationService`1 delegationService, TClassificationService classificationService, SnapshotSpan span, List`1 classifiedSpans) 
at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.GetTags[TClassificationService](NormalizedSnapshotSpanCollection spans, HostLanguageServices languageServices, IClassificationDelegationService`1 delegationService) 
at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.GetTags(NormalizedSnapshotSpanCollection spans) 
at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.Tagger.GetTags(NormalizedSnapshotSpanCollection spans) 
at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.&lt;GetTagsForBuffer&gt;d__46.MoveNext() 
---&gt; (Inner Exception #0) System.NullReferenceException: Object reference not set to an instance of an object. 
at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.&lt;AddSyntacticClassificationsAsync&gt;d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown --- 
at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&lt;--- 
```

The cause seems to be when rename happened, VS creates a snapshot of content type "CSharp" for the xaml file, which however is still in the special "-xaml" project in the workspace.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33166</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable Mono CI build</Title>
    <Description>Skip mono build leg until dpkg issues are resolved - For more details https://github.com/dotnet/roslyn/issues/33161</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33165</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle opening/closing of additional files in VS Workspace open file …</Title>
    <Description>…tracker

Fixes #31540</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33164</IssueID>
    <RepoID>1</RepoID>
    <Title>Value is always True/False warning</Title>
    <Description>**Version Used**:  Visual Studio 2019 Preview 2.1

Copying customer request

**Steps to Reproduce**:
We get a grayed out "unreachable code" warning if code is unreachable when a condition is always false, but not when a condition is always true.
```csharp
        private const int V = 100;

        public void AlwaysFalse()
        {
            if(V != 100)
            {
                Console.WriteLine("is 100" + connnection);
            }

        }
```

So if I have the below condition that will always be true. The customer is requesting a warning:
```csharp
        private const int V = 100;

        public void AlwaysTrue()
        {
            if(V == 100)
            {
                Console.WriteLine("is 100" + connnection);
            }

        }

```

**Expected Behavior**:
Warning on conditions that are always true.

**Actual Behavior**:
No warning</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33163</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve spell-check</Title>
    <Description>**Version Used**: VS 2019 Preview 2.1
Copying a customer request.

**Steps to Reproduce**:
```csharp
const string connnectionString = "TBD";
```

**Expected Behavior**:
Get codefix to correct typo in `connnectionString` to `connectionString` or add the new word to a dictionary as an accepted spelling.

**Actual Behavior**:
No spell check.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33162</IssueID>
    <RepoID>1</RepoID>
    <Title>🚧 Add ISymbol.DeclaringSyntaxReferencesEnumerable</Title>
    <Description>This is a proof of concept for a low-allocation alterative to `ISymbol.DeclaringSyntaxReferences` in response to #33129. </Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33161</IssueID>
    <RepoID>1</RepoID>
    <Title>Linux_Test mono build failure - dpkg: error processing packages</Title>
    <Description>Hit this in #33151 - [Build Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=88177) Attempt 1

Build setup looks the same to successful runs up until this line:
```
2019-02-05T22:18:04.9474544Z Setting up libnunit-core-interfaces2.6.3-cil (2.6.4+dfsg-1) ...
2019-02-05T22:18:05.1929251Z E: installing Assembly /usr/share/cli-common/policies.d/libnunit-core-interfaces2.6.3-cil/policy.2.6.nunit.core.interfaces.dll failed
2019-02-05T22:18:05.1933042Z E: Installation of policy.2.6.nunit.core.interfaces with /usr/share/cli-common/runtimes.d/mono failed
2019-02-05T22:18:05.1941294Z dpkg: error processing package libnunit-core-interfaces2.6.3-cil (--configure):
2019-02-05T22:18:05.1941747Z  subprocess installed post-installation script returned error exit status 1
2019-02-05T22:18:05.1942052Z dpkg: dependency problems prevent configuration of libnunit-core2.6.3-cil:
2019-02-05T22:18:05.1942404Z  libnunit-core2.6.3-cil depends on libnunit-core-interfaces2.6.3-cil; however:
2019-02-05T22:18:05.1942886Z   Package libnunit-core-interfaces2.6.3-cil is not configured yet.
2019-02-05T22:18:05.1945904Z 
2019-02-05T22:18:05.1946563Z dpkg: error processing package libnunit-core2.6.3-cil (--configure):
2019-02-05T22:18:05.1946897Z  dependency problems - leaving unconfigured
2019-02-05T22:18:05.1950890Z dpkg: dependency problems prevent configuration of libnunit-util2.6.3-cil:
2019-02-05T22:18:05.1951248Z  libnunit-util2.6.3-cil depends on libnunit-core-interfaces2.6.3-cil; however:
2019-02-05T22:18:05.1954767Z   Package libnunit-core-interfaces2.6.3-cil is not configured yet.
2019-02-05T22:18:05.1955245Z  libnunit-util2.6.3-cil depends on libnunit-core2.6.3-cil; however:
2019-02-05T22:18:05.1955584Z   Package libnunit-core2.6.3-cil is not configured yet.
2019-02-05T22:18:05.1955644Z 
2019-02-05T22:18:05.1955955Z dpkg: error processing package libnunit-util2.6.3-cil (--configure):
2019-02-05T22:18:05.1956239Z  dependency problems - leaving unconfigured
2019-02-05T22:18:05.1956910Z dpkg: dependency problems prevent configuration of libnunit-console-runner2.6.3-cil:
2019-02-05T22:18:05.1957299Z  libnunit-console-runner2.6.3-cil depends on libnunit-core-interfaces2.6.3-cil; however:
2019-02-05T22:18:05.1957612Z   Package libnunit-core-interfaces2.6.3-cil is not configured yet.
2019-02-05T22:18:05.1957933Z  libnunit-console-runner2.6.3-cil depends on libnunit-core2.6.3-cil; however:
2019-02-05T22:18:05.1958218Z   Package libnunit-core2.6.3-cil is not configured yet.
2019-02-05T22:18:05.1958537Z  libnunit-console-runner2.6.3-cil depends on libnunit-util2.6.3-cil; however:
2019-02-05T22:18:05.1958835Z   Package libnunit-util2.6.3-cil is not configured yet.
2019-02-05T22:18:05.1958892Z 
2019-02-05T22:18:05.1959198Z dpkg: error processing package libnunit-console-runner2.6.3-cil (--configure):
2019-02-05T22:18:05.1959462Z  dependency problems - leaving unconfigured
2019-02-05T22:18:05.1959759Z Setting up libnunit-framework2.6.3-cil (2.6.4+dfsg-1) ...
2019-02-05T22:18:05.4217015Z E: installing Assembly /usr/share/cli-common/policies.d/libnunit-framework2.6.3-cil/policy.2.6.nunit.framework.dll failed
2019-02-05T22:18:05.4218222Z E: Installation of policy.2.6.nunit.framework with /usr/share/cli-common/runtimes.d/mono failed
2019-02-05T22:18:05.4235253Z dpkg: error processing package libnunit-framework2.6.3-cil (--configure):
2019-02-05T22:18:05.4235760Z  subprocess installed post-installation script returned error exit status 1
2019-02-05T22:18:05.4236144Z dpkg: dependency problems prevent configuration of libnunit-mocks2.6.3-cil:
2019-02-05T22:18:05.4237001Z  libnunit-mocks2.6.3-cil depends on libnunit-framework2.6.3-cil; however:
2019-02-05T22:18:05.4237362Z   Package libnunit-framework2.6.3-cil is not configured yet.
2019-02-05T22:18:05.4237457Z 
2019-02-05T22:18:05.4237799Z dpkg: error processing package libnunit-mocks2.6.3-cil (--configure):
2019-02-05T22:18:05.4238457Z  dependency problems - leaving unconfigured
2019-02-05T22:18:05.4287203Z dpkg: dependency problems prevent configuration of libnunit-cil-dev:
2019-02-05T22:18:05.4287642Z  libnunit-cil-dev depends on libnunit-console-runner2.6.3-cil (= 2.6.4+dfsg-1); however:
2019-02-05T22:18:05.4288006Z   Package libnunit-console-runner2.6.3-cil is not configured yet.
2019-02-05T22:18:05.4288338Z  libnunit-cil-dev depends on libnunit-core2.6.3-cil (= 2.6.4+dfsg-1); however:
2019-02-05T22:18:05.4288627Z   Package libnunit-core2.6.3-cil is not configured yet.
2019-02-05T22:18:05.4288960Z  libnunit-cil-dev depends on libnunit-core-interfaces2.6.3-cil (= 2.6.4+dfsg-1); however:
2019-02-05T22:18:05.4289282Z   Package libnunit-core-interfaces2.6.3-cil is not configured yet.
2019-02-05T22:18:05.4289608Z  libnunit-cil-dev depends on libnunit-framework2.6.3-cil (= 2.6.4+dfsg-1); however:
2019-02-05T22:18:05.4289897Z   Package libnunit-framework2.6.3-cil is not configured yet.
2019-02-05T22:18:05.4290218Z  libnunit-cil-dev depends on libnunit-mocks2.6.3-cil (= 2.6.4+dfsg-1); however:
2019-02-05T22:18:05.4290515Z   Package libnunit-mocks2.6.3-cil is not configured yet.
2019-02-05T22:18:05.4290833Z  libnunit-cil-dev depends on libnunit-util2.6.3-cil (= 2.6.4+dfsg-1); however:
2019-02-05T22:18:05.4291117Z   Package libnunit-util2.6.3-cil is not configured yet.
2019-02-05T22:18:05.4291175Z 
2019-02-05T22:18:05.4291457Z dpkg: error processing package libnunit-cil-dev (--configure):
2019-02-05T22:18:05.4291717Z  dependency problems - leaving unconfigured
2019-02-05T22:18:05.4292072Z dpkg: dependency problems prevent configuration of libmono-cil-dev:
2019-02-05T22:18:05.4292362Z  libmono-cil-dev depends on libnunit-cil-dev (&gt;= 2.4); however:
2019-02-05T22:18:05.4292663Z   Package libnunit-cil-dev is not configured yet.
2019-02-05T22:18:05.4292721Z 
2019-02-05T22:18:05.4292999Z dpkg: error processing package libmono-cil-dev (--configure):
2019-02-05T22:18:05.4293258Z  dependency problems - leaving unconfigured
```

Build fails after installing updated certificates:
```
2019-02-05T22:18:56.3912802Z 148 new root certificates were added to your trust store.
2019-02-05T22:18:56.3912885Z Import process completed.
2019-02-05T22:18:56.3964283Z Done
2019-02-05T22:18:56.3965656Z done.
2019-02-05T22:18:56.4340062Z Processing triggers for sgml-base (1.26+nmu4ubuntu1) ...
2019-02-05T22:18:56.5435783Z Processing triggers for systemd (229-4ubuntu21.10) ...
2019-02-05T22:18:56.6850101Z Errors were encountered while processing:
2019-02-05T22:18:56.6851275Z  libnunit-core-interfaces2.6.3-cil
2019-02-05T22:18:56.6851594Z  libnunit-core2.6.3-cil
2019-02-05T22:18:56.6851854Z  libnunit-util2.6.3-cil
2019-02-05T22:18:56.6852098Z  libnunit-console-runner2.6.3-cil
2019-02-05T22:18:56.6854034Z  libnunit-framework2.6.3-cil
2019-02-05T22:18:56.6854379Z  libnunit-mocks2.6.3-cil
2019-02-05T22:18:56.6854621Z  libnunit-cil-dev
2019-02-05T22:18:56.6854902Z  libmono-cil-dev
2019-02-05T22:18:56.6855124Z  mono-devel
2019-02-05T22:18:56.7293306Z ‌E: Sub-process /usr/bin/dpkg returned an error code (1)‌
2019-02-05T22:18:57.4184369Z ‌The command '/bin/sh -c apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF &amp;&amp;     apt install apt-transport-https &amp;&amp;     (echo "deb https://download.mono-project.com/repo/ubuntu nightly-xenial main" | tee /etc/apt/sources.list.d/mono-official-nightly.list) &amp;&amp;     (echo "deb https://download.mono-project.com/repo/ubuntu preview-xenial main" | tee /etc/apt/sources.list.d/mono-official-preview.list) &amp;&amp;     apt-get update &amp;&amp;     apt-get install -y mono-devel &amp;&amp;     apt-get clean' returned a non-zero code: 100‌
2019-02-05T22:18:57.4200963Z Docker build failed (exit code '100').
2019-02-05T22:18:57.4385866Z ##[error]Bash exited with code '100'.
```</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33160</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33159</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33158</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33157</IssueID>
    <RepoID>1</RepoID>
    <Title>Compile error with ref returns in latest roslyn package</Title>
    <Description>Using the latest roslyn package from myget (3.1.0.1910509 | 6.92 MB | Tue, 05 Feb 2019 14:52:36 GMT) compiling mono from source fails:

```
/home/kate/Projects/mono/external/corert/src/System.Private.CoreLib/src/System/Array.cs(936,25): error CS1073: Unexpected token 'ref'
/home/kate/Projects/mono/external/corert/src/System.Private.CoreLib/src/System/Array.cs(937,24): error CS1073: Unexpected token 'ref'
```

I tested an older package and it works fine (3.1.0.1906016 | 6.89 MB | Thu, 10 Jan 2019 16:04:39 GMT). I checked and the correct langversion is being passed and csc is reporting support for 7.0, 7.1 and 7.2

The relevant section of the array.cs source:
```csharp
#if __MonoCS__
            ref T p = ref Unsafe.As&lt;byte, T&gt;(ref array.GetRawSzArrayData());
            int i = index;
            int j = index + length - 1;
            while (i &lt; j)
            {
                T temp = Unsafe.Add(ref p, i);
                Unsafe.Add(ref p, i) = Unsafe.Add(ref p, j);
                Unsafe.Add(ref p, j) = temp;
                i++;
                j--;
            }
#else
            ref T first = ref Unsafe.Add(ref Unsafe.As&lt;byte, T&gt;(ref array.GetRawSzArrayData()), index);
            ref T last = ref Unsafe.Add(ref Unsafe.Add(ref first, length), -1);
            do
            {
                T temp = first;
                first = last;
                last = temp;
                first = ref Unsafe.Add(ref first, 1);
                last = ref Unsafe.Add(ref last, -1);
            } while (Unsafe.IsAddressLessThan(ref first, ref last));
#endif
        }
```
The errors are not on the first use of ref return, they're on the ```first = ...``` in the loop.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33156</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unneeded foreground check</Title>
    <Description>We do not need to assert that we are on the foreground thread to remove a file in the legacy project. The CPS project does the same thing and it does not seem to require the foreground thread. This will help enable initialization of Roslyn on the background thread by the legacy project system.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33155</IssueID>
    <RepoID>1</RepoID>
    <Title>Index expression ('^') should be a unary operator in IOperation and semantic model</Title>
    <Description>Right now there's a `IFromEndIndexOperation` in the IOperation tree, but the LDM decided this was just another type of unary operator and should be treated as such.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33154</IssueID>
    <RepoID>1</RepoID>
    <Title>Autobrace completion should trigger autoformatting</Title>
    <Description>Reported by Ben Randall ( internal customer) 
![autobasefix](https://user-images.githubusercontent.com/12449387/52309763-00de3680-2956-11e9-8b37-d1591633d787.gif)

I should get the same experience with auto-brace completion what happens when i type in "}" and format my condition above.
</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33153</IssueID>
    <RepoID>1</RepoID>
    <Title>async completion: if not a commit character, then dismiss and do not cancel</Title>
    <Description>Allows TypeScript to fix https://devdiv.visualstudio.com/DevDiv/_workitems/edit/785705</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33152</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix formatting test</Title>
    <Description>Closes internal issue [786210](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/786210)</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33151</IssueID>
    <RepoID>1</RepoID>
    <Title>Updated city name in test file</Title>
    <Description>Closes internal issue [786222](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/786222)</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33150</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix formatting tests</Title>
    <Description>Resaon for the change should be clear in the diff</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33149</IssueID>
    <RepoID>1</RepoID>
    <Title>Updated dotnet-format install instructions</Title>
    <Description>- Added instructions for installing from NuGet.org</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33148</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense cannot be shown when the caret is between two dots</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32547

@jcouv and @gafter, please let me know if you see more conditions or more tests scenarios to be added.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33147</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix documentation tests</Title>
    <Description>The reason for this should be clear in the change.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33146</IssueID>
    <RepoID>1</RepoID>
    <Title>[Feature] Distribute code snippets with nuget package</Title>
    <Description>_From @CodeTherapist on February 1, 2019 15:56_

Similar how we can today distribute a `msbuild task` per nuget package, We could distribute code [snippet(s)](https://docs.microsoft.com/en-us/visualstudio/ide/code-snippets?view=vs-2017) with a nuget package. When a nuget package is referenced in a project that contains snippets, they become available for the specific project.

This feature would enable library authors to provide useful code fragments that are common with the usage of the library. For example:

- Unit Test frameworks could have a snippet to create a test
- Razor could provide snippets for tag helpers

 ## The snippets inside the class library that is packed

![image](https://user-images.githubusercontent.com/38962170/52132543-a8e6bd80-263f-11e9-8fbe-704a38036a0a.png)

## The internal structure of the nuget package

![image](https://user-images.githubusercontent.com/38962170/52133636-04b24600-2642-11e9-8e48-ecd1984d22e5.png)

I'm not sure if my suggestion is feasible and in the correct repository here. Some aspects of the feature are related to Roslyn and Visual Studio. 




_Copied from original issue: NuGet/Home#7758_</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33145</IssueID>
    <RepoID>1</RepoID>
    <Title>Use Visual Studio 2019 for integration testing</Title>
    <Description>
    </Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33144</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio hangs with switch expression</Title>
    <Description>**Version Used**: 
Visual Studio 2019 16.0 Preview 3 (28604.53.d16.0)

**Steps to Reproduce**:

1. Create a C# project
2. Write the following code that uses `switch` expression
```c#
string path = "" switch { }
```

**Expected Behavior**:
When typing `{`, Visual Studio should auto complete `}`, and the cursor should be in between the braces.

**Actual Behavior**:
Visual Studio hangs; and restarts automatically after around 2 minutes.
![image](https://user-images.githubusercontent.com/12908526/52291273-dcb73100-2926-11e9-8802-325ede3cf219.png)

</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>10/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33143</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect ID0004 - when constructing a ValueTuple which is then assigned to object</Title>
    <Description>(Apologies if this has already been submitted: I couldn't find it in the issue list)

**Version Used**: 

Visual Studio 15.9.4

**Steps to Reproduce**:

```csharp
object x = (true, (IEnumerable&lt;int&gt;)new int[0]);
```

**Expected Behavior**:

IDE0004 does not fire.

**Actual Behavior**:

IDE0004 fires, suggesting:

```csharp
object x = (true, new int[0]);
```

This creates a boxed `(bool, int[])` instead of a boxed `(bool, IEnumerable&lt;int&gt;)`.

Interestingly, this does not happen with `var x = (true, (IEnumerable&lt;int&gt;)new int[0])`.
</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33142</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0051: Private member is unused when used in an XML literal in Visual Basic</Title>
    <Description>**Version Used**: 
VS 2019 Preview, Version 16.0.0 Preview 2.1

**Steps to Reproduce**:
```
    Public Class UnusedBar
        Public Sub Foo()
            Dim xml = &lt;tag&gt;&lt;%= Me.Bar() %&gt;&lt;/tag&gt;
        End Sub

        Private Function Bar() As Integer
            Return 42
        End Function
    End Class
```
Bar doesn't have to be a function, it can also be a property or a field.

**Expected Behavior**:
No message is shown.

**Actual Behavior**:
Message shown: `Private member 'UnusedBar.Bar' is unused.`</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33141</IssueID>
    <RepoID>1</RepoID>
    <Title>RemoveDocumentAction holds onto DocumentState, leading to crashes</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 1.1.

🔗 One heap demonstrating this issue can be found in https://devdiv.visualstudio.com/DevDiv/_workitems/edit/758630.

**Steps to Reproduce**:

Unknown, but likely one of the causes is source control branch switching.

A large number of `RemoveDocumentAction` instances are held in memory, each of which points to a `DocumentState`. The state causes tremendous memory overhead leading to slow processing of actions and eventual OutOfMemoryException crashes.

**Expected Behavior**:

`RemoveDocumentAction` does not contain a reference to a parsed syntax tree.

**Actual Behavior**:

`RemoveDocumentAction` does contain a reference to a parsed syntax tree.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33140</IssueID>
    <RepoID>1</RepoID>
    <Title>Continuing typing too fast after running "Add using" doesn't add the code fix</Title>
    <Description>**Version Used**: 
15.9.6, 16.0.0 RC

**Steps to Reproduce**:

1. Write code that can be fixed by adding a using
2. Run the Add Using code fix
3. Immediately continue typing

**Expected Behavior**:
The new using directive should be added every time.

**Actual Behavior**:
Depending on the timing between 2. and 3. there are three different outcomes.
1. If you are slow enough, the using will always appear and the next edit is also present
2. If you are way too fast, the using is added, but the next edit is discarded (with a Windows notification sound)
3. If you hit the right timing, the using isn't added, but the next edit is present.

Needless to say, that this is quite counter productive for my muscle memory :)

The following gifs show with the cursor behind the closing bracket of `List&lt;int&gt;` the same key presses each time namely: `&lt;CTRL+.&gt;` `&lt;RETURN&gt;` `&lt;SPACE&gt;`

Slow enough (case 1)
![add-using-everything](https://user-images.githubusercontent.com/1947968/52273041-e94c8100-2948-11e9-9911-f609f779c57d.gif)

Too fast (case 2)
![add-using-no-edit](https://user-images.githubusercontent.com/1947968/52273145-3c263880-2949-11e9-90a9-314cbdcadfb1.gif)

Middleground (case 3)
![add-using-no-using](https://user-images.githubusercontent.com/1947968/52273155-46483700-2949-11e9-9c6e-d499069a5813.gif)
</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33139</IssueID>
    <RepoID>1</RepoID>
    <Title>CodeRefactoringProvider is not loaded </Title>
    <Description>**Version Used**: 
Visual Studio VS2017 15.9.7
Microsoft.CodeAnalysis.Analyzers: 2.6.3
Microsoft.CodeAnalysis.CSharp.Workspaces: 2.10.0

**Steps to Reproduce**:

1. Create a project from "Code refactoring (.NETStandard)" or "Analyzer with CodeFix (.NETStandard)" templates in VS.
2. Run `%projectName%.Vsix` - the Refactoring/CodeFix is loaded and works
3. Add an item to the Vsix project: Add/Extensions/"Tool Window" via VS -- it will add a window and AsyncPackage to the Vsix project
4. Run `%projectName%.Vsix` again - the refactoring or CodeFix won't be loaded, breakpoints won't work

I tried different parameters in `source.extension.vsixmanifest` (in Asset node) but without luck.
This issue looks similiar to https://github.com/dotnet/roslyn/issues/22765 but `Update` didn't help. Tried VS2017 15.9.6 and 15.9.7</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33138</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33137</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33136</IssueID>
    <RepoID>1</RepoID>
    <Title>ObjectReader possibly creates too many tasks</Title>
    <Description>**Version Used**: 
2.10.0-beta2-63410-10 (but looks like it's the same in 3.0.0-beta2-19055-09)

**Steps to Reproduce**:

1. Type in VSMac
2. Observe a lot of threads being started and finished

**Expected Behavior**:
ObjectReader should not be spinning tasks up recursively here: https://source.roslyn.io/#Microsoft.CodeAnalysis/Serialization/ObjectReader.cs,144

The thread creation is for these threadpool items.

**Actual Behavior**:
There's 2 scenarios which come to mind which can end up creating a lot of threads:
a) recursionDepth 50 -&gt; 49 -&gt; 50 -&gt; 49 -&gt; 50, etc.
b) recursionDepth 50 -&gt; ... -&gt; 100 -&gt; ... -&gt; 150 (creates nested task, this should definitely be eliminated)</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33135</IssueID>
    <RepoID>1</RepoID>
    <Title>VisitGenericName in CSharpSyntaxWalker not always firing when expected</Title>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis.CSharp 2.10.0

**Steps to Reproduce**:

I'm using the `CSharpSyntaxWalker` to find usages of classes within C# files. For the most part it works brilliantly, but for some reason `VisitGenericName` isn't always firing. I'm looking for usages of a class `InvoiceDocumentUploaded`.

VisitGenericName **does** fire for the following line:

```
messagePublisher.Verify(p =&gt; p.PublishAsync(It.Is&lt;InvoiceDocumentUploaded&gt;(m =&gt; m.Tenant == tenant)));
```

VisitGenericName **does not** fire for the following line:

```
var request = JsonConvert.DeserializeObject&lt;InvoiceDocumentUploaded&gt;(messageJson);
```

This feels like it might be a bug, but happy to be corrected if I'm not using it properly.

Any help appreciated.

Thanks.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33134</IssueID>
    <RepoID>1</RepoID>
    <Title>.editorconfig - indexer brackets at call-site</Title>
    <Description>Is there a .editorconfig option to control the spacing between indexer brackets? The option I'm after would:

(a) produce a diagnostic and fix for:
```csharp
array[index]
```

(b) produce no diagnostic, and VS would generate code as:
```csharp
array[ index ]
```

though some people would want the exact opposite setting.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33133</IssueID>
    <RepoID>1</RepoID>
    <Title>Use Arcade VS IBC training infrastructure</Title>
    <Description>Removes VS IBC training operations from Roslyn build scripts and uses implementation provided by Arcade SDK.

Updates to the latest Arcade.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33132</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid a lambda allocation when accessing a cache in a hotpath.</Title>
    <Description>Mitigation for https://github.com/dotnet/roslyn/issues/33131</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33131</IssueID>
    <RepoID>1</RepoID>
    <Title>Delegate allocations coming in from ConditionalWeakTable value creators</Title>
    <Description>**Version Used**: 
2.10.0-beta2-63410-10 (but looks like it's the same in 3.0.0-beta2-19055-09)

**Steps to Reproduce**:

1. Run analyzers on a solution (in my case [this](https://github.com/mono/refactoringessentials/tree/monodevelop2) one)
2. Observe a lot of allocations coming in from SymbolTreeInfo.GetMetadataChecksum


**Expected Behavior**:
The lambdas should be static and use the key parameter being passed.

**Actual Behavior**:
A lot of allocations due to closures. They are coming in from [here](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/FindSymbols/SymbolTree/SymbolTreeInfo_Metadata.cs,154)

```
Stacktrace:

Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GetMetadataChecksum(Solution solution, PortableExecutableReference reference, CancellationToken cancellationToken)
Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider+IncrementalAnalyzer+&lt;UpdateReferenceAsync&gt;d__9.MoveNext()
System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;TStateMachine&gt;(TStateMachine stateMachine)

```

This is a heavy contender of allocations in VSMac while typing</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33130</IssueID>
    <RepoID>1</RepoID>
    <Title>Immediate/watch window not formatting DateTimes inside loops</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/215428

**Steps to Reproduce**:

```csharp
using System;
using System.Linq;

namespace ConsoleApp1
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var dt = new DateTime(2016, 3, 2);
            var result = Enumerable.Range(1, 1).Select(x =&gt; dt.ToString("yyyy")).First();
            Console.WriteLine(result);
        }
    }
}
```

1. Set a breakpoint on the line with `Console.WriteLine`
2. When the breakpoint is hit, observe the value of `result`
3. In the Immediate window, run the following:

    ```csharp
    Enumerable.Range(1, 1).Select(x =&gt; dt.ToString("yyyy")).First()
    ```

**Expected Behavior**:

Step (2) and (3) produce `"2016"`.

**Actual Behavior**:

Step (2) produces `"2016"`.

Step (3) produces `"3/2/2016 12:00:00 AM"`.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33129</IssueID>
    <RepoID>1</RepoID>
    <Title>A lot of allocations coming in from SourceNamespaceSymbol.DeclaringSyntaxReferences</Title>
    <Description>**Version Used**: 
2.10.0-beta2-63410-10 (but looks like it's the same in 3.0.0-beta2-19055-09)

**Steps to Reproduce**:

1. Run analyzers on a solution (in my case [this](https://github.com/mono/refactoringessentials/tree/monodevelop2) one)
2. Observe a lot of allocations coming in from SourceNamespaceSymbol.DeclaringSyntaxReferences

**Expected Behavior**:
These allocations should avoided if possible for namespaces? There is a comment in [GeneratedCodeUtilities](https://github.com/dotnet/roslyn/blob/a1805016f9a2fae804d69220a9179fba086ba98f/src/Compilers/Core/Portable/InternalUtilities/GeneratedCodeUtilities.cs#L24) which mentions this perf hit.

**Actual Behavior**:
A lot of allocations. They are coming in from [here](https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs#L1537)

```
Stacktrace:

Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol+&lt;&gt;c.&lt;.cctor&gt;b__49_0(SingleNamespaceDeclaration d)
System.Collections.Immutable.ImmutableArray.CreateRange&lt;TSource, TResult&gt;(ImmutableArray&lt;T&gt; items, Func&lt;T, TResult&gt; selector)
Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.get_DeclaringSyntaxReferences()
Microsoft.CodeAnalysis.CSharp.Symbol.get_DeclaringSyntaxReferences()
Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.IsGeneratedCodeSymbol(ISymbol symbol)
Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclared(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)
Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCore(CompilationEvent e, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)
Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ProcessCompilationEventsCoreAsync&gt;d__70.MoveNext()
```

This is one of the heaviest contenders while typing in VSMac.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33128</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot see all parameters in intellisense</Title>
    <Description>**Version Used**: Filed against Visual Studio 2013 Update 5

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/202782

## Description

If you have a method with a large number of parameters, when calling the method the intellisense parameter prompt box is fixed and cannot display all required parameters. 

## Repro Steps

create a method with so many parameters, that when called from anther piece of code, the list extends beyond the popup window. 

## Impact

You have no way of knowing what parameters to supply, when method is inside an external lib.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33127</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio 2015 moves members to new line</Title>
    <Description>**Version Used**: Originally filed against Visual Studio 2015

:link: Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/200576

## Problem Description 

Description: When we need to use a backing field for a property, we have a practice of combining the backing field with the property it goes to: 

```csharp
public int MyProperty 
{ 
get { return _MyProperty; } 
set { _MyProperty = value; } 
} private int _MyProperty; 
```

We prefer this greatly to a long list of member variables at the top for many reasons. 

1. You don't have to scroll up and down, you see it all right there. 
2. Variable doesn't get left on refactor when property is removed. 
3. When copy and pasting things around, you never forget to bring the member variable along. 
The problem: 

In Visual Studio 2013, there was no problem. 

Visual Studio 2015 is now moving the member variable to the next line when we Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;E&lt;/kbd&gt;, &lt;kbd&gt;D&lt;/kbd&gt; or choose Edit &amp;rarr; Advanced &amp;rarr; Format Document. 

```csharp
public int MyProperty 
{ 
get { return _MyProperty; } 
set { _MyProperty = value; } 
} 
private int _MyProperty; 
```

I have played with the Tools &amp;rarr; Options &amp;rarr; Text Editor &amp;rarr; C# &amp;rarr; Formatting &amp;rarr; New Lines section. 

Anyone have any idea how to make visual studio stop moving the member variable to a new line? 

## Repro Steps

Create a property with a backing field on the last line, same as the last squirly brace: 

```csharp
public int MyProperty 
{ 
get { return _MyProperty; } 
set { _MyProperty = value; } 
} private int _MyProperty; 
```

Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;E&lt;/kbd&gt;, &lt;kbd&gt;D&lt;/kbd&gt; or choose Edit &amp;rarr; Advanced &amp;rarr; Format Document 



## Impact

We have large files, especially many with INotifyPropertyChanged implement or a lazy implementation where the object is instantiated on first get:. 

Our entire document is changing because so many properties are done this way. 

It causes significant issues with whitespace checkins. It is blocking us from using our required style. Engineers have to go back and fix the document.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33125</IssueID>
    <RepoID>1</RepoID>
    <Title>Treat normal using and static usings separately when adding imports.</Title>
    <Description>
Fixes https://github.com/dotnet/roslyn/issues/30811 and https://github.com/dotnet/roslyn/issues/30734</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33126</IssueID>
    <RepoID>1</RepoID>
    <Title>Warning 4014 (not awaited task) doesn't work properly when a method returns Task&lt;Task&gt;</Title>
    <Description>```csharp
public static Task ReturnTask() =&gt; Task.CompletedTask;
public static Task&lt;Task&gt; ReturnTaskOfTask() =&gt; Task.FromResult(Task.CompletedTask);


public async Task Main()
{
  ReturnTask(); // Gives warning - as expected
  ReturnTaskOfTask(); // Gives warning - as expected
  await ReturnTask(); // No warning - as expected
  await ReturnTaskOfTask(); // No warning - probably a bug
  await await ReturnTaskOfTask(); // No warning - as expected
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/405018/warning-4014-not-awaited-task-doesnt-work-properly.html
VSTS ticketId: 748615_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>14/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33124</IssueID>
    <RepoID>1</RepoID>
    <Title>Linux_Test CoreCLR Segmentation Fault during Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests</Title>
    <Description>Saw in #33070 - [Build Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=85855&amp;view=logs) Linux_Test CoreCLR Attempt 1

```
xUnit.net Console Runner v2.4.1-pre.build.4059 (64-bit .NET Core 4.6.26725.06)
&#x1B;[37m  Discovering: Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests
&#x1B;[m&#x1B;[37m  Discovered:  Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests
&#x1B;[m&#x1B;[37m  Starting:    Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests
&#x1B;[m&#x1B;[33;1m    Microsoft.CodeAnalysis.CSharp.UnitTests.PdbTests.EmitToStreamWithNonZeroPosition [SKIP]
&#x1B;[m&#x1B;[37m      Test not supported on Mac and Linux
&#x1B;[m&#x1B;[33;1m    Microsoft.CodeAnalysis.CSharp.UnitTests.WinMdEventTests.ERR_MixingWinRTEventWithRegular_BaseTypeImplementsInterface [SKIP]
&#x1B;[m&#x1B;[37m      547321
&#x1B;[mSegmentation fault (core dumped)
=== COMMAND LINE ===
"/data/agent/_work/7/s/.dotnet/dotnet" exec --depsfile "/data/agent/_work/7/s/artifacts/bin/Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests/Debug/netcoreapp2.1/Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests.deps.json" --runtimeconfig "/data/agent/_work/7/s/artifacts/bin/Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests/Debug/netcoreapp2.1/Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests.runtimeconfig.json" "/data/agent/_work/7/s/.packages/xunit.runner.console/2.4.1-pre.build.4059/tools/netcoreapp2.0/xunit.console.dll" "/data/agent/_work/7/s/artifacts/bin/Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests/Debug/netcoreapp2.1/Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests.dll" -noautoreporters -xml "/data/agent/_work/7/s/artifacts/TestResults/Debug/Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests_netcoreapp2.1_x64.xml" -html "/data/agent/_work/7/s/artifacts/TestResults/Debug/Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests_netcoreapp2.1_x64.html"  &gt; "/data/agent/_work/7/s/artifacts/log/Debug/Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests_netcoreapp2.1_x64.log" 2&gt;&amp;1
```</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33123</IssueID>
    <RepoID>1</RepoID>
    <Title>Hang/deadlock in SmartIndent</Title>
    <Description>**Version Used**: 
3.0.0-beta2-19055-09

**Steps to Reproduce**:

Clicking with the mouse on an empty line hangs the UI thread

```
System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken cancellationToken)

Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground&lt;Microsoft.CodeAnalysis.Options.DocumentOptionSet&gt;(System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Options.DocumentOptionSet&gt; task, System.Threading.CancellationToken cancellationToken) in /_/src/Workspaces/Core/Portable/Utilities/TaskExtensions.cs:83

Microsoft.CodeAnalysis.Editor.Implementation.SmartIndent.AbstractIndentationService&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax&gt;.GetIndenter(Microsoft.CodeAnalysis.Document document, int lineNumber, System.Threading.CancellationToken cancellationToken) in /_/src/EditorFeatures/Core/Implementation/SmartIndent/AbstractIndentationService.cs:69

Microsoft.CodeAnalysis.Editor.Implementation.SmartIndent.AbstractIndentationService&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax&gt;.GetDesiredIndentation(Microsoft.CodeAnalysis.Document document, int lineNumber, System.Threading.CancellationToken cancellationToken) in /_/src/EditorFeatures/Core/Implementation/SmartIndent/AbstractIndentationService.cs:35

Microsoft.CodeAnalysis.Editor.Implementation.SmartIndent.SmartIndent.GetDesiredIndentation(Microsoft.VisualStudio.Text.Implementation.TextSnapshotLine lineToBeIndented, System.Threading.CancellationToken cancellationToken) in /_/src/EditorFeatures/Core/Implementation/SmartIndent/SmartIndent.cs:47

Microsoft.CodeAnalysis.Editor.Implementation.SmartIndent.SmartIndent.GetDesiredIndentation(Microsoft.VisualStudio.Text.Implementation.TextSnapshotLine line) in /_/src/EditorFeatures/Core/Implementation/SmartIndent/SmartIndent.cs:26

Microsoft.VisualStudio.Text.Editor.Implementation.SmartIndentationService.GetDesiredIndentation(Microsoft.VisualStudio.Text.Editor.Implementation....TextView textView, Microsoft.VisualStudio.Text.Implementation.TextSnapshotLine line) in src/Editor/Text/Impl/BaseViewImpl/SmartIndentationService.cs:30

Microsoft.VisualStudio.Text.MultiSelection.ExtensionMethods.MapXCoordinate(Microsoft.VisualStudio.Text.Formatting.Implementation....FormattedLine textLine, Microsoft.VisualStudio.Text.Editor.Implementation....TextView textView, double xCoordinate, Microsoft.VisualStudio.Text.Editor.Implementation.SmartIndentationService smartIndentationService, bool userSpecifiedXCoordinate) /src/Editor/Text/Util/TextUIUtil/ExtensionMethods.cs:78
```

It appears that the MultiSelectionBroker is calling into smart indentation service on the UI thread, and Roslyn's SmartIndent is then blocking the UI thread waiting on a task:
http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/Implementation/SmartIndent/AbstractIndentationService.cs,69

Have we seen this before? It appears that the synchronous version of the service is chosen. Any idea on how it's supposed to work?</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33122</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33121</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullability of static fields</Title>
    <Description>Fixes #26651.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33120</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33119</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33118</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33117</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33116</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33115</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33114</IssueID>
    <RepoID>1</RepoID>
    <Title>Move MSBuild installation directory to Current</Title>
    <Description>MSBuild has changed their installation versioning story. Components now
insert into a directory named Current instead of a directory name
matching the Visual Studio major version (i.e. 15.0). This changes
Roslyn to match the new design.

Note: this change must be inserted into VS in coordination with MSBuild.
Otherwise the insertion will fail.

https://github.com/Microsoft/msbuild/issues/4069
https://github.com/Microsoft/msbuild/issues/3778</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33113</IssueID>
    <RepoID>1</RepoID>
    <Title>Terminate Explorer to avoid interference with integration tests</Title>
    <Description>~~Attempting to~~ Successfully work around #33111 and #33112.</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33112</IssueID>
    <RepoID>1</RepoID>
    <Title>Integration test causes Recycle bin to launch</Title>
    <Description>Observed in https://dev.azure.com/dnceng/public/_build/results?buildId=86911

This should not be happening.

![image](https://user-images.githubusercontent.com/1408396/52242688-f744c800-289c-11e9-905c-cca97e370969.png)
</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33111</IssueID>
    <RepoID>1</RepoID>
    <Title>Integration test causes Edge to launch</Title>
    <Description>Observed in https://dev.azure.com/dnceng/public/_build/results?buildId=86911

This should not be happening.

![image](https://user-images.githubusercontent.com/1408396/52242626-cc5a7400-289c-11e9-85fd-4b8181d59606.png)
</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33110</IssueID>
    <RepoID>1</RepoID>
    <Title>Capture a screenshot when the active window changes</Title>
    <Description>Currently we capture a screenshot on certain exceptions in the integration test process. It could help diagnose failures if we capture a screenshot when the active/focused window changes (though we'd also need a stack trace at the time which could be difficult).</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33109</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable parallel nuget restore on linux and mac</Title>
    <Description>
    </Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33108</IssueID>
    <RepoID>1</RepoID>
    <Title>Inline temp for interpolated string introduces an extra cast in &gt; C# 7.3</Title>
    <Description>This test fails on &gt; C# 7.

```C#
        [WorkItem(4583, "https://github.com/dotnet/roslyn/issues/4583")]
        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsInlineTemporary)]
        public async Task DontParenthesizeInterpolatedStringWithNoInterpolation()
        {
            await TestInRegularAndScriptAsync(
@"class C
{
    public void M()
    {
        var [|s1|] = $""hello"";
        var s2 = string.Replace(s1, ""world"");
    }
}",
@"class C
{
    public void M()
    {
        var s2 = string.Replace($""hello"", ""world"");
    }
}");
        }
```</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33107</IssueID>
    <RepoID>1</RepoID>
    <Title>Code analysis is way slower than on VS2017</Title>
    <Description>The first thing that I noticed after a few minutes of using VS2019 (in compare to 2017)
is that code analysis - showing errors on error list is a way slower than on prev. version

e.g we have code like this:

```csharp
int test = 5;
test = 5;
```

then we change  &amp;quot;test = 5;&amp;quot; to

test = &amp;quot;&amp;quot;;

and it's being shown as an error on error list after around 2-3sec

meanwhile on VS2017 it's like 0.5-1sec

Any ideas how to speed it up?

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/400631/code-analysis-is-way-slower-than-on-vs2017-3.html
VSTS ticketId: 740818_
_These are the original issue comments:_

Jinu Joseph [MSFT] on 12/10/2018, 11:47 AM (56 days ago): &lt;p&gt;Thank you for your feedback! Just tried this in latest 16.0.PReview1 and seeing  the results almost immediately. &lt;/p&gt;&lt;p&gt;We created a set of instructions for providing additional information which will help us track down the true source of the problems. (&lt;a target="_blank"&gt; https://github.com/dotnet/roslyn/wiki/Reporting-Visual-Studio-crashes-and-performance-issues#performance-issues &lt;/a&gt;)&lt;/p&gt;&lt;p&gt;We look forward to hearing from you!&lt;/p&gt;

Bart on 12/12/2018, 01:29 AM (54 days ago): Here's version with Visual Studio 2017
Bart on 12/12/2018, 01:29 AM (54 days ago): Here's version with VS 2019
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33106</IssueID>
    <RepoID>1</RepoID>
    <Title>Require dev16 for integration testing</Title>
    <Description>The vs-deps branches have dependencies on Visual Studio 2019 that cannot be fulfilled on Visual Studio 2017. This change updates these branches to require Visual Studio 2019 for integration testing.</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33105</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable flow annotations do not affect type arguments' inference in the annotated call</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
using System.Runtime.CompilerServices;
class C
{
  void M1(string? s1)
  {
    s1.NotNull();
    Generic(s1).ToString(); // ok, .NotNull() ensures s1 is not null, Generic.T is inferred to be a non-nullable string
  }

  void M2(string? s1)
  {
    s1.NotNull().ToString(); // false warning - s1.NotNull() should be inspected after applying EnsuresNotNull annotation knowledge
                             // inferring NotNull.T to be not nullable
  }

  void M3(string? s1)
  {
    Ext.NotNull(s1).ToString(); // false warning - NotNull(s1) should be inspected after applying EnsuresNotNull annotation knowledge
                                // inferring NotNull.T to be not nullable
  }

  extern T Generic&lt;T&gt;(T t);
}

static class Ext
{
  public static extern T NotNull&lt;T&gt;([EnsuresNotNull] this T t);
}

namespace System.Runtime.CompilerServices
{
  public class EnsuresNotNullAttribute : System.Attribute { }
}
```

**Expected Behavior**:
No warnings.
Roslyn should infer generic parameters to be a non-nullable T for all the examples above. Since the `NotNull` methods ensures that `s1` is not null the invocation should be reinterpreted with the knowledge that `s1` is a non-nullable string and infer its type argument to be non-nullable string thus allowing derferencing its result.

**Actual Behavior**:
`M2` and `M3` both have the following warning: `CS8602 Possible dereference of a null reference.`.
</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33104</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable integration tests with &lt;95% reliability</Title>
    <Description>
    </Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33103</IssueID>
    <RepoID>1</RepoID>
    <Title>Integration test BasicExtractMethod.SimpleExtractMethod is unreliable</Title>
    <Description>ADO shows an overall pass rate of 65% for this test over the past 14 days.</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33102</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail out for error types from IDE0058 analyzer (unused expression value)</Title>
    <Description>Fixes #33073</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33101</IssueID>
    <RepoID>1</RepoID>
    <Title>Log long-running operations between integration tests</Title>
    <Description>Sample output for a test might look like this:

```
ProcessAsync IdleProcessor.cs 88: 4977.17ms
WorkItem WorkCoordinator.LowPriorityProcessor.cs 94: 4977.1724ms
ActiveFile WorkCoordinator.HighPriorityProcessor.cs 78: 87.0255ms
Enqueue WorkCoordinator.SemanticChangeProcessor.cs 392: 605.0735ms
WorkItem WorkCoordinator.cs 391: 1547.3448ms
Enqueue WorkCoordinator.SemanticChangeProcessor.cs 274: 98.8498ms
Enqueue WorkCoordinator.SemanticChangeProcessor.cs 267: 98.8546ms
WorkspaceGraphQueryManager.EnqueueUpdate GraphQueryManager.cs 101: 2115.8474ms
SolutionChecksumUpdater RemoteHostClientServiceFactory.SolutionChecksumUpdater.cs 114: 3968.4908ms
DiagnosticsUpdated DiagnosticService.cs 69: 1558.3032ms
CodeModelEvent CodeModelIncrementalAnalyzer.cs 100: 1625.3931ms
ProgressReportStop SolutionCrawlerProgressReporter.cs 76: 4988.125ms
```</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33100</IssueID>
    <RepoID>1</RepoID>
    <Title>Support running integration tests in VS 2019</Title>
    <Description>This change enables integration tests to be run from Test Explorer in Visual Studio 2019.</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33099</IssueID>
    <RepoID>1</RepoID>
    <Title>Suggested enum not commited by square bracket</Title>
    <Description>**Version Used**:  VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54

**Steps to Reproduce**:

```C#
class Program
{
    static Dictionary&lt;ConsoleKey, int&gt; D;
    static void Main()
    {
        D[|
    }
}
```
ConsoleKey is preselected as it is the expected type by the indexer. Press `]` to commit the autocompletion.

**Expected Behavior**: `D[ConsoleKey]|`

**Actual Behavior**: `D[]|`
Any other enum can be commited this way. Also note that introducing a property `static ConsoleKey ConsoleKey { get; }` which would make the committed code compilable does not fix the problem.
</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33098</IssueID>
    <RepoID>1</RepoID>
    <Title>Make state clearing code in AnalyzerDriver.TryExecuteDeclaringReferenceActions thread safe</Title>
    <Description>[Code](http://source.roslyn.io/#Microsoft.CodeAnalysis/DiagnosticAnalyzer/AnalyzerDriver.cs,1856) in TryExecuteDeclaringReferenceActions that clears analysis state on successful analyzer execution completion for a declaration is not completely thread safe. Watson [#763828](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763828) is one example of this during cancellation. We should refactor the code so that this state clearing code waits for any threads attempting to execute analysis on this declaration to complete. See https://github.com/dotnet/roslyn/pull/33067#discussion_r253590775</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33097</IssueID>
    <RepoID>1</RepoID>
    <Title>Delete EtwLoggingTests because the test is flawed</Title>
    <Description>Following up on @jaredpar's suggestion to remove this test suite - https://github.com/dotnet/roslyn/issues/19512#issuecomment-460360941

Closes #19512</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33096</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullability in script code</Title>
    <Description>At the moment script code is explicitly excluded from nullability analysis.

So the following script doesn't produce any warnings:

```
#nullable enable
string foo = null
```

This PR includes script code into the nullability analysis.
Additionally, since scripting doesn't expose an API to set Language Version, I bumped it to C# 8 (since it should always be the newest). Once C# 8 ships, we could move it back to `Latest`.</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33095</IssueID>
    <RepoID>1</RepoID>
    <Title>Report nullability mismatch in `ref` variable assignment</Title>
    <Description>Report warnings for the following:
```C#
class Program
{
    static void F1(ref string x)
    {
        ref string? y = ref x; // warning
        y = null;
    }

    static ref string? F2(ref string y)
    {
        return ref y; // warning
    }
}
```</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33094</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not offer to remove redundant assignment if it is not parented by …</Title>
    <Description>…an explicit block with curly braces

Fixes #32856

For example, consider a redundant assignment to 'x' in `if (...) x = 1;`. Replacing 'x = 1' with an empty statement ';' is not useful, and user is most likely going to remove the entire if statement in this case. However, we don't want to suggest removing the entire if statement as that might lead to change of semantics.
So, we conservatively bail out from removable assignment analysis for such cases and offer to assign to a discard, which is in line with the spirit of this analyzer/fixer, i.e. draw user's attention to potential bugs in code that need further analysis to identify correct code fix.</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33093</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyze nullability in implicit constructors</Title>
    <Description>Fixes #26628 
Fixes #31139</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33092</IssueID>
    <RepoID>1</RepoID>
    <Title>Code fix for sealing a class</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

📝 This was an internal feature request sent to the team. It is somewhat related to #31832, but does not deal with a specific compiler error.

**Steps to Reproduce**:

1. Create a class which is not sealed
2. Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;.&lt;/kbd&gt; on the class name

**Expected Behavior**:

An option is provided to mark the class as `sealed`.

**Actual Behavior**:

No such option is provided.
</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33091</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposal: Parallel async</Title>
    <Description>Typical function

```csharp
async Task&lt;Result&gt; MyFunc(){
var result1 = await getResult1();
var result2 = await getResult2();
var result3 = await getResult3(result1);
return CombineResult(result2, result3);
}
```

it might be preprocessed to something like this. 

```csharp
async Task&lt;Result&gt; MyFunc(){
var __result1 = getResult1();   //1
var result1 = await __result1;  
var __result2 = getResult2(); // 2
var result2 = await __result2;
var __result3 = getResult3(result1); //3
var result3 = await __result3;
return CombineResult(result2, result3);
}
```

suggestion is to make those function calls float up during preprocessing, until there is a curly bracket found or an assignment to variable used as a parameter to function call

```csharp
async Task&lt;Result&gt;MyFunc(){
var __result1 = getResult1(); // 1
var __result2 = getResult2(); // 2
var result1 = await __result1;
var __result3 = getResult3(result1); // 3
var result2 = await __result2;
var result3 = await __result3;
return CombineResult(result2, result3);
}
```

Here 1 and 2 will automatically run in parallel, 3 will execute once 1 is finished.

This would be a breaking change, so new keyword might be used. Did not think it all through.</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>09/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33090</IssueID>
    <RepoID>1</RepoID>
    <Title>[Question] How to build runnable .NET Core console app using Roslyn?</Title>
    <Description>BenchmarkDotNet is using Roslyn for compiling Full .NET Framework Code, now I am trying to validate if we could also use it for .NET Core. What I am trying to achieve is a possiblity to build and run console application.

**Version Used**:  `2.10.0`

**Steps to Reproduce**:

1. Create a project with following settings:

```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp2.1&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;7.1&lt;/LangVersion&gt;
    &lt;PreserveCompilationContext&gt;true&lt;/PreserveCompilationContext&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="2.10.0" /&gt;
    &lt;PackageReference Include="Microsoft.Extensions.DependencyModel" Version="2.1.0" /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;
```

2. Copy-paste following code:

```cs
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.Extensions.DependencyModel;

namespace BuildAndRunHelloWorld
{
    class Program
    {
        static void Main()
        {
            var runningProgramDirectoryPath = Path.GetDirectoryName(typeof(Program).Assembly.Location);
            var outputExecutablePath = Path.Combine(runningProgramDirectoryPath, "HelloWorld.exe");

            var (isSuccess, dependencies) = Compile(outputExecutablePath);

            if (isSuccess)
            {
                Copy(dependencies, runningProgramDirectoryPath);

                Run(outputExecutablePath);
            }
            
        }

        static (bool isSuccess, ImmutableArray&lt;string&gt; dependencies) Compile(string outputExecutablePath)
        {
            const string code = @"
using System;

namespace SomeNamespace
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(""Hello World!"");
        }
    }
}";
            var syntaxTree = CSharpSyntaxTree.ParseText(code);

            var compilationOptions = new CSharpCompilationOptions(
                outputKind: OutputKind.ConsoleApplication,
                optimizationLevel: OptimizationLevel.Release,
                allowUnsafe: true,
                platform: IntPtr.Size == 8 ? Platform.X64 : Platform.X86,
                deterministic: true);

            var dependencies = DependencyContext.Default.CompileLibraries
                .SelectMany(library =&gt; library.ResolveReferencePaths())
                .ToImmutableArray();

            var references = dependencies
                .Select(dependency =&gt; AssemblyMetadata.CreateFromFile(dependency).GetReference())
                .ToImmutableArray();

            var compilation = CSharpCompilation
                .Create(assemblyName: Path.GetFileName(outputExecutablePath))
                .AddSyntaxTrees(syntaxTree)
                .WithOptions(compilationOptions)
                .AddReferences(references);

            using (var executable = File.Create(outputExecutablePath))
            {
                var emitResult = compilation.Emit(executable);

                if (emitResult.Success)
                    return (true, dependencies);

                foreach (var compilationError in emitResult.Diagnostics.Where(diagnostic =&gt; diagnostic.IsWarningAsError || diagnostic.Severity == DiagnosticSeverity.Error))
                    Console.WriteLine($"{compilationError.Id}: {compilationError.GetMessage()}");

                return (false, default);
            }
        }

        private static void Copy(ImmutableArray&lt;string&gt; dependencies, string runningProgramDirectoryPath)
        {
            foreach (var dependency in dependencies)
            {
                var destinationPath = Path.Combine(runningProgramDirectoryPath, Path.GetFileName(dependency));
                if (!File.Exists(destinationPath))
                    File.Copy(dependency, destinationPath);
            }
        }

        private static void Run(string outputExecutablePath)
        {
            Console.WriteLine($"About to run {outputExecutablePath}");

            var startInfo = new ProcessStartInfo(outputExecutablePath)
            {
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                CreateNoWindow = true,
                UseShellExecute = false
            };

            using (var process = new Process { StartInfo =  startInfo })
            {
                var output = new List&lt;string&gt;();
                var error = new List&lt;string&gt;();

                process.OutputDataReceived += (sender, args) =&gt; output.Add(args.Data);
                process.ErrorDataReceived += (sender, args) =&gt; error.Add(args.Data);

                process.Start();

                process.BeginErrorReadLine();
                process.BeginOutputReadLine();

                process.WaitForExit();

                if (!output.Contains("Hello World!"))
                {
                    Console.WriteLine("The output did not contain \"Hello World!");
                    Console.WriteLine($"Output was: {string.Join(Environment.NewLine, output)}");
                    Console.WriteLine($"Error was: {string.Join(Environment.NewLine, error)}");
                }
            }
        }
    }
}
```
 
3. Run from console

```
dotnet run -c Release
```

**Expected Behavior**:

```log
Hello World!
```

**Actual Behavior**:

```log
Unhandled Exception: System.BadImageFormatException: Could not load file or assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (Exception from HRESULT: 0x80131058) ---&gt; System.BadImageFormatException: Cannot load a reference assembly for execution.
   --- End of inner exception stack trace ---
```

Please keep in mind that I am able to build the "Hello World" program, but I am not able to run it. I have tried different platforms: x64/x86/AnyCPU but it did not help. I am always getting `BadImageFormatException`.

Am I doing something wrong? What do I need to change to be able to run the app?

/cc @agocke @svick 
</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33089</IssueID>
    <RepoID>1</RepoID>
    <Title>Add Preview langversion and change Default</Title>
    <Description>Adds a new "Preview" language version for C# that means the latest
supported language version + the preview features available in the
compiler. Also changes the "Default" (unspecified) language version to
mean Preview, but provides a warning when preview features are used.</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33088</IssueID>
    <RepoID>1</RepoID>
    <Title>No ReadOnlySpan&lt;byte&gt; static data optimization for new byte[N]</Title>
    <Description>**Version Used**: dotnet 2.2.200-preview-009748

**Steps to Reproduce**:

Declare a static `ReadOnlySpan&lt;byte&gt;` property of the form:

```csharp
public class C
{
    public static ReadOnlySpan&lt;byte&gt; StaticData =&gt; new byte[] { 0 };
    public static ReadOnlySpan&lt;byte&gt; DoesntWork =&gt; new byte[1];
} 
```

**Expected Behavior**:

Per the optimisation in #24621, I expected that both `StaticData` and `DoesntWork` would be compiled to a reference to static data, e.g., `new ReadOnlySpan&lt;byte&gt;(&amp;global::&lt;PrivateImplementationDetails&gt;.5BA93C9DB0CFF93F52B521D7420E43F6EDA2784F, 1);`

**Actual Behavior**:

Only `StaticData` has the implementation optimisation; `DoesntWork` doesn't, even though it has the exact same data. The problem is more noticeable with an expression like `new byte[1000]`, where you might not want to type out 1000 literal zero bytes in source code.

SharpLab: https://sharplab.io/#v2:D4AQDABCCMDcCwAoJIDMUBMEDCSDeSERU6MAbBAEoCmAhgCYDyAdgDYCeAygA63MA8AI3YAXagD4InEbREBLAMYARWbQgBeSc2oB3CMLEBtALoQ8ESAF8EiYiSjQKNBiw48+Q0RIhKA9tQBnZhEAdV8AJwBrDS1dfS9DaGMbSwggA===
</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33087</IssueID>
    <RepoID>1</RepoID>
    <Title>'Is Used By' navigation is broken in Solution Explorer</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

:link: Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/192782

**Steps to Reproduce**:

1. From the Solution Explorer, expand a source file item, right click a class/interface in it, select "Is Used By" from the context menu. 
2. Double click any of the item on the list. 

**Expected Behavior**:

The IDE navigates to the item.

**Actual Behavior**:

Nothing happens.</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33085</IssueID>
    <RepoID>1</RepoID>
    <Title>Peek Definition fails for UWP app</Title>
    <Description>**Version Used**: Visual Studio 2017 15.9.5

:link: Originally reported as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/183407

**Steps to Reproduce**:

1. Create a new UWP class library
2. Add the following code:

    ```csharp
    using Windows.UI;

    namespace ClassLibrary1
    {
        public class Class1
        {
            Color color;
        }
    }
    ```
 
3. Place the caret on `Color` and press &lt;kbd&gt;F12&lt;/kbd&gt; (Go To Definition)
4. Place the caret on `Color` and press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;F12&lt;/kbd&gt; (Peek Definition)

**Expected Behavior**:

1. After step (3), metadata as source shows the definition for `Color`
2. After step (4), peek definition shows the definition for `Color`

**Actual Behavior**:

1. Step (3) works as expected
2. Step (4) shows **Error No information found**
</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33084</IssueID>
    <RepoID>1</RepoID>
    <Title>RootCodeModel.GetCompilation() accesses Task&lt;TResult&gt;.Result incorrectly</Title>
    <Description>This method should be updated to use `JoinableTaskFactory`.

🔗 Originally observed to cause Visual Studio hangs in https://devdiv.visualstudio.com/DevDiv/_workitems/edit/181381.

https://github.com/dotnet/roslyn/blob/d0b251aef458c8a01fd4478db1d8e446b778df33/src/VisualStudio/Core/Impl/CodeModel/RootCodeModel.cs#L40-L43</Description>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33083</IssueID>
    <RepoID>1</RepoID>
    <Title>An invocation of a delegate to a default interface implementation goes into an infinite loop when the underlying instance is a structure</Title>
    <Description>The underlying CLR issue is tracked here https://github.com/dotnet/coreclr/issues/22386.
A number of test scenarios are affected by this issue and relevant portions of unit-tests are temporarily disabled. Should be enabled once the underlying issue is fixed.</Description>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33082</IssueID>
    <RepoID>1</RepoID>
    <Title>'Make method async' breaks overridden methods</Title>
    <Description>**Version Used**: VS 2019 Preview 2.1

**Steps to Reproduce**:

```C#
partial class MyPage : Page
{
    protected override void OnNavigatedTo(NavigationEventArgs e)
    {
        await Task.Delay(100);
    }
}
```

**Actual Behavior**:
1. 'Make method async' is offered that changes the return type and renames the method.
2. 'Make method async (stay void) is offered that renames the method.

**Expected Behavior**:
1. Should not be offered as it is not really an option for an overridden method.
2. That is the quick fix I was looking for, but it should not rename the method as it breaks the override.

#20348
</Description>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33081</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixes #32427</Title>
    <Description>Fixes #32427

Not sure if any tests need updating if so let me know and I will update this PR.</Description>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33080</IssueID>
    <RepoID>1</RepoID>
    <Title>Error opening form designer of deleted and re-created form in VS 2019 Preview 2.1</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2.1

**Steps to Reproduce**:

1. Create Windows Form VB.NET (or C#) project. Form1.vb file is created and its designer window is opened correctly
2. Delete Form1.vb in Solution Explorer
3. Right-click the project and select Add &gt; Windows Form... menu
4. Type Form1.vb as the name (same name than deleted form)

**Expected Behavior**:
The designer window of Form1.vb should be opened without errors, like the time when it was created by default.

**Actual Behavior**:
The designer window shows the error "Error HRESULT E_FAIL has been returned from a call to a COM component.". See attached image. The call stack of that error shows:

at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) at Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.Exceptions.ThrowEFail() at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.FileCodeModel.GetDocument() at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.FileCodeModel.GetSyntaxRoot() at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.Collections.NamespaceCollection.LookupNode() at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.Collections.NamespaceCollection.CreateSnapshot() at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.Collections.AbstractCodeElementCollection.GetEnumerator() at EnvDTE.CodeElements.GetEnumerator() at Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomParser.Parse(TextReader codeStream) at Microsoft.VisualStudio.Design.Serialization.CodeDom.MergedCodeDomParser.System.CodeDom.Compiler.ICodeParser.Parse(TextReader stream) at System.CodeDom.Compiler.CodeDomProvider.Parse(TextReader codeStream) at Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.get_CompileUnit() at Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager) at Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(Int32 fReload)

![error](https://user-images.githubusercontent.com/10756684/52179124-99e64380-27d6-11e9-90b4-9c6fb5aea358.png)
</Description>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33079</IssueID>
    <RepoID>1</RepoID>
    <Title>"Name can be simplified" suggestion doesn't respect nullability requirements.</Title>
    <Description>Consider the following code:

    public interface IPossibleAsyncNull
    {
        Task&lt;string?&gt; Method();
    }

    public class TrivialAsyncNull : IPossibleAsyncNull
    {
        public Task&lt;string?&gt; Method()
        {
            return Task.FromResult("foo");
        }
    }

It gives this warning:

    warning CS8619: Nullability of reference types in value of type 'Task&lt;string&gt;'
     doesn't match target type 'Task&lt;string?&gt;'.

Trying to fix this:

            return Task.FromResult&lt;string?&gt;("foo");

Now gives no warning, but VS grays out the explicit argument and suggests "simplifying" the name back to the previous version, which produced a warning.

This is obviously incorrect; the analysis must respect nullability.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/443106/name-can-be-simplified-suggestion-doesnt-respect-n.html
VSTS ticketId: 784089_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33078</IssueID>
    <RepoID>1</RepoID>
    <Title>Comparing types </Title>
    <Description>Trying to update a custom Roslyn Analyzer to C# 8 with NullableContext enable, while comparing two types that where equals, now they are not anymore. 

**Version Used**: 
VS2019 Preview 2.1 and     
```    
&lt;PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="3.1.0-beta1-19102-01" /&gt;
&lt;PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="3.1.0-beta1-19102-01" /&gt;
````
**Steps to Reproduce**:
Compare two ConstructedNamedTypeSymbol in C#8 with NullableContext enabled:

```
 .AddProject( projectId, TestProjectName, TestProjectName, language)
                .WithProjectParseOptions(projectId, new CSharpParseOptions(LanguageVersion.CSharp8))
                .WithProjectCompilationOptions(projectId, new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithNullableContextOptions(NullableContextOptions.Enable))
```


**Expected Behavior**:

The two types are equal, or, better, there is a way to construct a generic type with `TypeSymbolWithAnnotations`  (I'm doing it [like this](https://github.com/signumsoftware/framework/blob/master/Signum.Analyzer/Signum.Analyzer/ExpressionFieldAnalyzer.cs#L190))

**Actual Behavior**:

https://github.com/signumsoftware/framework/blob/master/Signum.Analyzer/Signum.Analyzer/ExpressionFieldAnalyzer.cs#L93
The constructed type (`expressionType`) lacks nullability information but the one from the member (?(`fieldSymbol.Type`) does have it, being not equal. 

```
NamedType System.Linq.Expressions.Expression&lt;System.Func&lt;Signum.Entities.Entity, System.Int32&gt;&gt;
NamedType System.Linq.Expressions.Expression&lt;System.Func&lt;Signum.Entities.Entity!, System.Int32&gt;!&gt;
```

I understand that they are not equal but I'm not aware of any public API to construct the type providing nullability information, amd TypeSymbolWithAnnotations is internal https://github.com/dotnet/roslyn/blob/c8e0e7f29853eb5775da2187991e68fa5077f7af/src/Compilers/CSharp/Portable/Symbols/TypeSymbolWithAnnotations.cs#L289. 

Thanks!
</Description>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33077</IssueID>
    <RepoID>1</RepoID>
    <Title>"Implement Interface" quickfix doesn't respect nullability annotation</Title>
    <Description>VSF_TYPE_MARKDOWNConsider this code:

    public interface IPossibleNull
    {
        string? Method();
    }

    public sealed class SomeNull : IPossibleNull
    {
    }

The implementing class is missing the interface method. Showing the quick fixes at the interface implementation specification (where the squiggles are) shows the &amp;quot;Implement Interface&amp;quot; suggestion. Executing it results in this code being generated:

    public sealed class SomeNull : IPossibleNull
    {
        public string Method()
        {
            throw new NotImplementedException();
        }
    }

The return type has lost its nullable annotation and a warning is thus generated.

The quick fix needs to respect nullability.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/443107/implement-interface-quickfix-doesnt-respect-nullab.html
VSTS ticketId: 784088_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33076</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle ref variables similarly to non-ref variables</Title>
    <Description>Fixes #25868.</Description>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33075</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve method that finds an expression's parent lambda to introduce a local into</Title>
    <Description>This is a fix for issue https://github.com/dotnet/roslyn/issues/31012.

Consider the expression `x.Resolve()` on line 8 of the following piece of code:
```cs
using System;
public interface IResolver { int Resolve(); }
public class Test
{
    private void register(Func&lt;IResolver, object&gt; a) { }
    private void test(Func&lt;int, object&gt; factory)
        =&gt; register(x =&gt; factory(
            x.Resolve() // &lt;== this one
        ));
}
```
When we want to introduce a local for it, we enter a method called `GetParentLambda` which, starting with the expression `x.Resolve()`, looks along its parent chain in order to find the lambda that begins with `x =&gt;` on line 7. But it doesn't find it, because the parent of `x.Resolve()` is an `ArgumentSyntax` and not an `ExpressionSyntax`, which causes it to stop looking.

The fix that I am proposing here changes the algorithm in such a way that it skips over the `ArgumentSyntax` and the `ArgumentListSyntax`, so that it finds the lambda that it's looking for.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33074</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect nullability of `ref` variables</Title>
    <Description>Warnings are reported for each dereference:
```C#
#pragma warning disable 8618

class C
{
    internal object? F;
}

class Program
{
    static void F1(ref object? x, ref int? y, ref C z)
    {
        x = 1;
        x.ToString();

        y = 2;
        _ = y.Value;

        z = new C() { F = 3 };
        z.F.ToString();
    }
}
```
Result:
```
(13,9): warning CS8602: Possible dereference of a null reference.
(16,13): warning CS8629: Nullable value type may be null.
(19,9): warning CS8602: Possible dereference of a null reference.
```</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33073</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0058 reported if type does not resolve</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

**Steps to Reproduce**:

Write the following _without_ including an import for `System.Threading`.

```
await Task.Delay(0, CancellationToken.None).ConfigureAwait(false);
```

**Expected Behavior**:

IDE0058 not reported.

**Actual Behavior**:

IDE0058 is reported, and the code fix adds `_ =` in front of the statement.
</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33072</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler gives CS8158 on certain ref return methods with ref parameters</Title>
    <Description>**Version Used**: 
SDK 2.1.503 / Roslyn 2.10.0.0 (45b37117)

**Steps to Reproduce**:

```
public class Example
{
    private byte[] Data { get; set; }

    public ref int GetStructField(out int field)
    {
        ref MyStruct s = ref GetStruct(Data, out _);
        field = 9;
        return ref s.B;
    }

    private static ref MyStruct GetStruct(byte[] data, out int field)
    {
        ref MyStruct s = ref MemoryMarshal.Cast&lt;byte, MyStruct&gt;(data)[0];
        field = s.B;
        return ref s;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    private struct MyStruct
    {
        public int A;
        public int B;
    }
}
```

**Expected Behavior**:
Unsure. I don't know if this is by design or an issue with Roslyn. In any case, it seems odd or unintuitive to me.

**Actual Behavior**:
`CS8158 - Cannot return by reference a member of 's' because it was initialized to a value that cannot be returned by reference`

However, when I change `GetStructField` to this, it compiles.
```
public ref int GetStructField(out int field)
{
    ref MyStruct s = ref GetStruct(Data, out field);
    field = 9;
    return ref s.B;
}
```</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33071</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow ForEach to For when there are comments </Title>
    <Description>Related: [issue](26571)

Remove the check for comments for both VB and C# so the refactoring will be provided.
Change the corresponding tests.


</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33070</IssueID>
    <RepoID>1</RepoID>
    <Title>Polish on Pull Member Up UI</Title>
    <Description>Related
[issue1](https://github.com/dotnet/roslyn/issues/32948)
[issue2](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/781741)
[issue3](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/781738)

1. Change the text of quick action to 'Name' so that it won't be too long.
2. Remove the help link question mark on the dialog since we don't have help link right now.
3. Select a destination by default.

tag @AbhitejJohn to review xaml file

It looks like
![com](https://user-images.githubusercontent.com/24360909/52162395-5aa9dc80-2688-11e9-8076-7365c53d1a8a.jpg)
![comp2](https://user-images.githubusercontent.com/24360909/52162396-5da4cd00-2688-11e9-9ad5-5c9f838586e9.png)
![comp3](https://user-images.githubusercontent.com/24360909/52162397-60072700-2688-11e9-8fa7-f1fb21902418.png)
</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33069</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable reference types cannot be enabled with project-wide &lt;NullableReferenceTypes&gt; tag</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03190

C# Tools   3.0.0-beta2-19068-12+231aeb8be8357239499d45c0574e5a9a8c9174f0
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

**Steps to Reproduce**:

1. Write this .NET Core console app using LangVersion = 8.0:

```csharp
using System;

class Program
{
    static T Foo&lt;T&gt;() =&gt; default;

    static void Main()
    {
    }
}
```

2. Add `#nullable enable` at the top of the source code. 
3. Get a compiler warning CS8603 for the function declaration.
4. Remove `#nullable enable` line and add `&lt;NullableReferenceTypes&gt;true&lt;/NullableReferenceTypes&gt;` in the project, right after the LangVersion 8.0 tag.

**Expected Behavior**:
The same compiler warning when `#nullable enable` was used.

**Actual Behavior**:
No compiler warnings, therefore nullable reference types are not enabled for the project.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33068</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto Format: Don't align end-of-line comments</Title>
    <Description>&lt;p&gt;I use auto-formatting to format my C# code in Visual Studio, but I find it extremely annoying how it insists on aligning end-of-line comments (those starting with //) from multiple consecutive lines horizontally with each other.  It drives me crazy when this situation arises which is frequent enough for me to post this suggestion.  Please add an option to allow me to turn off this annoying behavior!&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/432260/auto-format-dont-align-end-of-line-comments.html
VSTS ticketId: 774369_
_These are the original issue comments:_

Jane Wu [MSFT] on 1/22/2019, 02:10 AM (10 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33067</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle null reference exception during analyzer execution when cancel…</Title>
    <Description>…lation has been requested

Fixes VSO Watson [#763828](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763828)
All the dumps for the watson show that cancellation was requested during analysis, leading to one thread clearing state while other thread faulted.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33066</IssueID>
    <RepoID>1</RepoID>
    <Title>I would like a refactor in the C# editor that will reflow a multiline comment at some margin.</Title>
    <Description>&lt;p&gt;when editing a multiline comment, I often need to reflow the comment after I have edited it so that it can be more easily read.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/432431/i-would-like-a-refactor-in-the-c-editor-that-will.html
VSTS ticketId: 774419_
_These are the original issue comments:_

Jane Wu [MSFT] on 1/22/2019, 02:11 AM (10 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33065</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33064</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33063</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33062</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33061</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33060</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33059</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33058</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33057</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33056</IssueID>
    <RepoID>1</RepoID>
    <Title>Use default literal for parameters in symbol display</Title>
    <Description>Fixes #33049</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33055</IssueID>
    <RepoID>1</RepoID>
    <Title>Display localized string from the resource when hovering on the resource strings.</Title>
    <Description>&lt;p&gt;It would be useful to lookup the actual resource strings whenever I hover over a Resource string object. this would help speed what the actual string values are. Would be nice if it worked with other resource types as well.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;To elaborate the feature, If hover a resource object in the code it currently shows the comment of the property ErrorMessageText, would be cool if the actual resource string was displayed.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Resources.ErrorMessageText&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Thanks in advance&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/412450/display-localized-string-from-the-resource-when-ho.html
VSTS ticketId: 754431_
_These are the original issue comments:_

Jane Wu [MSFT] on 12/19/2018, 08:24 PM (43 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;
SP on 12/19/2018, 08:25 PM (43 days ago): &lt;p&gt;Thank you very much for the quick response.&lt;/p&gt;

Kendra Havens [MSFT] on 2/1/2019, 03:29 PM (2 min ago): &lt;p&gt;Thank you for filing this feedback! I think this information would make sense to show in quick info when hovering. I'm going to move this bug to our open source GitHub repo for further discussion with the community.&lt;/p&gt;
</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33053</IssueID>
    <RepoID>1</RepoID>
    <Title>Updated dotnet-format package description.</Title>
    <Description>
    </Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33052</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev15.9.x-vs-deps into dev15.9.x</Title>
    <Description>I'd like to merge dev15.9.x-vs-deps into dev15.9.x assuming that dev15.9.x will be automatically merged into master.</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33051</IssueID>
    <RepoID>1</RepoID>
    <Title>Classify keywords in ForEachVariableStatements as ControlKeywords</Title>
    <Description>Fixes #33039</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33050</IssueID>
    <RepoID>1</RepoID>
    <Title>don't retain fault result in task center if nuget info download failed.</Title>
    <Description>to retain fault result in task center, we need to provide detail info UI so that user can click the fault task left in the task center, but right now we don't have one and we don't want to just show exception message in message box.

we could think of using RetainAndNotifyFault so that we show exception message in the task center tip, but that would be annoying since most likely it is info user didn't ask for or care.

we can add UI later if user ever ask for it. for now, taking simple approach of just removing it from task center once download is done in any way (success, cancelled, failed)

fixes https://github.com/dotnet/roslyn/issues/32944
closes #29694</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33049</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense isn't simplifying optional parameter defaults</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 3.0 28531.182.d16.0

**Steps to Reproduce**:
Paste this code into VS:
```C#
class Program
{
    static void Main()
    {
        Foo();
    }

    static void Foo(MyStruct s = default) { }
}

struct MyStruct { }
```
then get IntelliSense for the `Foo` method:
![image](https://user-images.githubusercontent.com/2642209/52147778-bc8d2680-2635-11e9-87de-e88414f66193.png)
It shows `MyStruct s = default(MyStruct)` rather than `MyStruct s = default`, even though a) the method is defined with just `default` and b) my editorconfig settings are set to simplify, e.g. if I instead have the parameter declared as `MyStruct s = default(MyStruct)`, VS dutifully tells me I should simplify it:
![image](https://user-images.githubusercontent.com/2642209/52147842-f3633c80-2635-11e9-9010-9cba2a6333d2.png)
</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33048</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable nullable analysis for generated files</Title>
    <Description>- Track if syntax tree is generated
- Set nullable analysis as disabled by default in generated files
- Add tests
  - (Note: tests aren't checking generated detection status, we're re-using the generated detection logic from the analysers, so trust that it's good)

Fixes #32745 
Fixes #31875
Fixes #30268</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33047</IssueID>
    <RepoID>1</RepoID>
    <Title>ArgumentException when trying to set property from ProjectBuildManager.s_defaultGlobalProperties</Title>
    <Description>This is a follow-up to #30174 where the advice is to set `ShouldUnsetParentConfigurationAndPlatform` to `false` when building in `Release` configuration.

On the other hand when I try to set this property in latest version (3.0.0-beta2-final) then ArgumentException is thrown.

Does it means that properties from `ProjectBuildManager.s_defaultGlobalProperties` are not meant to be set? If this is the case then it would be better to provide more meaningful exception message (and maybe throw earlier). If the properties can be set then `AddRange` cannot be used.

https://github.com/dotnet/roslyn/blob/c8e0e7f29853eb5775da2187991e68fa5077f7af/src/Workspaces/Core/MSBuild/MSBuild/Build/ProjectBuildManager.cs#L153

**Steps to Reproduce**:
```
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Build.Locator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.MSBuild;
using System;

static class Program
{
    static async Task Main()
    {
        MSBuildLocator.RegisterDefaults();

        var properties = new Dictionary&lt;string, string&gt;
        {
            ["ShouldUnsetParentConfigurationAndPlatform"] = "false"
        };

        using (MSBuildWorkspace workspace = MSBuildWorkspace.Create(properties))
        {
            Solution solution = await workspace.OpenSolutionAsync(@"Foo.sln");
        }
    }
}

```

**Actual Behavior**:
```
System.ArgumentException
  HResult=0x80070057
  Message=An element with the same key but a different value already exists. Key: ShouldUnsetParentConfigurationAndPlatform
  Source=System.Collections.Immutable
  StackTrace:
   at System.Collections.Immutable.ImmutableDictionary`2.HashBucket.Add(TKey key, TValue value, IEqualityComparer`1 keyOnlyComparer, IEqualityComparer`1 valueComparer, KeyCollisionBehavior behavior, OperationResult&amp; result)
   at System.Collections.Immutable.ImmutableDictionary`2.AddRange(IEnumerable`1 items, MutationInput origin, KeyCollisionBehavior collisionBehavior)
   at System.Collections.Immutable.ImmutableDictionary`2.AddRange(IEnumerable`1 pairs, Boolean avoidToHashMap)
   at System.Collections.Immutable.ImmutableDictionary`2.AddRange(IEnumerable`1 pairs)
   at Microsoft.CodeAnalysis.MSBuild.Build.ProjectBuildManager.StartBatchBuild(IDictionary`2 globalProperties)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader.Worker.&lt;LoadAsync&gt;d__18.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader.&lt;LoadSolutionInfoAsync&gt;d__21.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.&lt;OpenSolutionAsync&gt;d__23.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at MSBuildTest.Program.&lt;OpenSolutionAndCompileAsync&gt;d__1.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at MSBuildTest.Program.&lt;Main&gt;d__0.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at MSBuildTest.Program.&lt;Main&gt;(String[] args)
```</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33046</IssueID>
    <RepoID>1</RepoID>
    <Title>Curious about Decimal implementation</Title>
    <Description>I see something unexpected with Decimal types, look at this code:

```cs
                var dec1 = 100M;
                var dec2 = 100.00M;

                var ss1 = dec1.ToString();
                var ss2 = dec2.ToString();

```
If you run this and look at the resulting strings you'll see that ss2 ends with ".00" and ss1 doesn't. So even though 100 is numerically identical to 100.00 somehow the decimal type stores these differently.

I don't think this is a side effect of the fact that compiler can see (and perhaps eliminate the dec vars) because I see the same thing when passing decimals to external libraries.

How/why is that done?

Thx
</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33045</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix rendering of &lt;see&gt; elements with content</Title>
    <Description>
    </Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33044</IssueID>
    <RepoID>1</RepoID>
    <Title>CodeLens does not show test running status on expression-bodied test method in VS2019</Title>
    <Description>##### 2017:
![image](https://user-images.githubusercontent.com/5644458/52135819-a3aa6280-2681-11e9-8088-90acc5246084.png)

##### 2019:
![image](https://user-images.githubusercontent.com/5644458/52136032-187d9c80-2682-11e9-97e8-e6fe10e90c5d.png)
</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33043</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0004 False positive</Title>
    <Description>**Version Used**: VS 2019 preview 2

**Steps to Reproduce**:

```csharp
if ((int?)1 is null)
{
}
```

**Expected Behavior**:

No diagnostic is reported

**Actual Behavior**:

IDE0004 is reported. If you apply the fix (remove the cast), the code doesn't compile.</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33042</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not report unused expression value (IDE0058) for expression body</Title>
    <Description>Fixes #32942</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33041</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler should report CS0208 - "Cannot declare pointer to a managed object" when managed object pointer is returned from IL with type inferrence</Title>
    <Description>**Version Used**: 
C# 7.2 

**Steps to Reproduce**:

1. Have this IL and compile it
```
.method public hidebysig static !!0* GetPointer&lt;T&gt;(
      !!0 'value'
    ) cil managed
{
    ldarga 0
    conv.u
    ret
}
```
2. Call it from C# as such
```
object obj = new object();
var objPtr = &lt;something&gt;.GetPointer(obj);
```

**Expected Behavior**:
CS0208 - "Cannot declare pointer to a managed object"

[or, a bit more of a stretch, allow managed type pointers, such as `Exception*`]

**Actual Behavior**:
Compiles and behaves like an actual object reference pointer. So `objPtr-&gt;GetType()` is legal and runs
IMPORTANT: This only works with that type inferrence, Without `var` it doesn't compile</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33040</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33039</IssueID>
    <RepoID>1</RepoID>
    <Title>foreach keyword classification</Title>
    <Description>**Version Used**: 
VS 2019 16.0.0 Preview 2.1

**Steps to Reproduce**:

```cs
class Program
{
    static void Main()
    {
        foreach (var x in new[] { 1 }) ;
        foreach (var (x, y) in new[] { (1, 2) }) ;
    }
}
```

![image](https://user-images.githubusercontent.com/3760955/52118411-8e214280-2659-11e9-80c6-a5ae7b919eb9.png)
</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33038</IssueID>
    <RepoID>1</RepoID>
    <Title>False positive IDE0047 : "Parentheses can be removed" in nested expression of interpolated string</Title>
    <Description>**Version Used**:  Visual Studio 2017 (15.8.9)

**Steps to Reproduce**:
Analyze the following code
```c#
var nl = System.Environment.NewLine;
var z = $@"
    {(string.IsNullOrEmpty(nl)
        ? ""
        : $"{(string.IsNullOrEmpty(nl) ? 1 : 2)}"
    )}
";
```
Looks like
&lt;img src="https://user-images.githubusercontent.com/639482/52115380-c8b1bd80-260e-11e9-98ec-59cc6591a3f7.png" width="400" /&gt;

Despite the uselessness of the code above, the inner interpolated expression should not be catched by the analyzer and marked with IDE0047. If one removes the parentheses, the compiler finds several errors.

The outer expression needs parentheses in order to get this false positive.


**Expected Behavior**:
No info/warning about superflous parentheses should be visible

**Actual Behavior**:
The inner expression is marked with IDE0047


</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33037</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify foreach when converted to LINQ (query and method forms)</Title>
    <Description>Reported By @jfleisher  [ ported from [link](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/781662)

Affected Branch:  d16.0stg
Affected Build:  Preview3
Affected Product Language: 

**Steps to reproduce:**

LINQ generated when foreach is converted to query or method form contains an extraneous trailing Select.

**Example in method form:**

foreach(a in mylist){
   if(a.isUsed){
      doSomethingWith(a);
   }
}

**becomes:**
foreach(a in mylist.Where(a =&gt; a.isUsed).Select(a =&gt; a)){
  doSomethingWith(a);
}

**simpler form would be:**
foreach(a in mylist.Where(a =&gt; a.isUsed)){
  doSomethingWith(a);
}
</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33054</IssueID>
    <RepoID>1</RepoID>
    <Title>[x64](3.0.100-preview-010184) Switch expression bug</Title>
    <Description>Hi

Looks like the new pattern matching feature broke old style switch expression

https://github.com/rds1983/StbImageSharp/blob/master/src/StbImageSharp/PngDecoder.cs#L714

Doesn't compile anymore 

```
  PngDecoder.cs(714, 38): [CS1003] Syntax error, ':' expected
  PngDecoder.cs(714, 70): [CS1002] ; expected
  PngDecoder.cs(714, 70): [CS1513] } expected
  PngDecoder.cs(718, 39): [CS1003] Syntax error, ',' expected
  PngDecoder.cs(774, 39): [CS1003] Syntax error, ',' expected
  PngDecoder.cs(793, 39): [CS1003] Syntax error, ',' expected
  PngDecoder.cs(842, 39): [CS1003] Syntax error, ',' expected
  PngDecoder.cs(878, 39): [CS1003] Syntax error, ',' expected
```</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33036</IssueID>
    <RepoID>1</RepoID>
    <Title>Make the flow analysis based unused value/parameters analyzer more conservative</Title>
    <Description>FYI: I would recommend reviewing one commit at a time.

1. https://github.com/dotnet/roslyn/commit/e25cc1428ad511e24ed1c8b6905b0879226d356d: Bail out from unused value assignment reporting for special symbols names (`_`, `_1`, `_2`, etc.)
Fixes #32923 

2. https://github.com/dotnet/roslyn/commit/1ea6505fc74c1262d6bb897603ade00d3ef89020: Bail out from flow analysis in presence of invalid operations.
Fixes #32959

3. https://github.com/dotnet/roslyn/commit/59350e71d9fe0a0460ceae409d85b0a5b89e7826: Fix the logic that decides reporting unused ref/out parameters of local functions.
Fixes #32973

4. https://github.com/dotnet/roslyn/pull/33036/commits/ba127dc792c66462003a15218e2f4dd5a3412383: Make the analyzer conservative for handled delegate creation cases. Prior implementation looked for specific unhandled operation tree shapes and was agressive, leading to false positives. New implementation handles only specific operation tree shapes and is much more conservative.
Fixes #32946
Fixes #32924</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33035</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyze tuple conversions element-wise with W-warnings</Title>
    <Description>Currently, we treat tuples like generic `Pair&lt;T1, T2&gt;` during the conversion/assignment. This results in a redundant safety warning, since we already track the initial state of `Item1`/`Item2` in the case of tuples.

![image](https://user-images.githubusercontent.com/12466233/52094640-c0a53f80-2574-11e9-810b-b3b21f4ed824.png)

```C#
#nullable enable
public class UnitTest1
{
    void M(string? s, string s2)
    {
        (string, string) t = (s, s2); // should be W-warning on elements
        t.Item1.ToString();

        // Motivations to change this:
        // - redundant safety warning
        // - generic type inference
        // - deconstruction

        Pair&lt;string, string&gt; p = Pair.Create(s, s2);
        p.Item1.ToString();

        var t2 = ((string, string))(s, s2); // should be W-warning on elements. t2 is (string, string), but state is Item1 is nullable 
        t2.Item1.ToString(); // safety
    }
}
public class Pair&lt;T1, T2&gt;
{
    public T1 Item1;
    public T2 Item2;
}
static class Pair
{
    public static Pair&lt;T1, T2&gt; Create&lt;T1, T2&gt;(T1 x, T2 y) { throw null; }
}
```

FYI @cston</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33034</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33033</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33032</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33031</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33030</IssueID>
    <RepoID>1</RepoID>
    <Title>Add long paths support</Title>
    <Description>Resolves #32804

- [x] Support long paths in csc
- [x] Support long paths in other executables (vbc, csi, VBCSCompiler, etc)
~~- [ ] Reuse configs where possible between executables~~
~~- [ ] Conditional test for long path support which spawns a csc subprocess~~
~~- [ ] BuildBoss update to check proper configuration of .exe projects~~</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33029</IssueID>
    <RepoID>1</RepoID>
    <Title>Issue 32399 Fix removable cast suggestion on GetType in VB</Title>
    <Description>See https://github.com/dotnet/roslyn/issues/32399

In VB there are a few predefined casting operators that allow conversions from certain types of expressions to another type (e.g. CStr accepts numerics, dates, booleans).  

When using GetType on the resultant object, the cast is marked as unnecessary as the symbol in both the regular and speculative tree resolves to System.Object.GetType().  This causes the symbols to be marked as compatible, and so the cast is removed.  In the case of other methods like ToString the symbols resolve differently (e.g. System.Int32.ToString() vs System.String.ToString()).  

My best guess at resolving this is then that cast should not be removed when the symbol is a non-overridable (non-static) method of System.Object.  User defined casts go through a different route in the analyzer and are not affected.
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33028</IssueID>
    <RepoID>1</RepoID>
    <Title>Condense quick info</Title>
    <Description>Fixes #32838
Fixes #33001

## Before

![image](https://user-images.githubusercontent.com/1408396/52091461-21834680-257a-11e9-8d6b-22c86e5fa3c5.png)

## After

![image](https://user-images.githubusercontent.com/1408396/52091495-3a8bf780-257a-11e9-98fd-4fc039724467.png)
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33027</IssueID>
    <RepoID>1</RepoID>
    <Title>#nullable offered in completion when using version of C# &lt;8</Title>
    <Description>In a project that is using LanguageVersion 7.3 or lower
1. Open a .cs file
2. Type '`#` on an empty line 
3. Observe that `nullable` is in the completion list, although it requires C# 8 or higher

![image](https://user-images.githubusercontent.com/611219/52091361-03f9b100-2569-11e9-8b81-2ee0d3317f62.png)

</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33026</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn dev16.0-preview3 | 20190131 2</Title>
    <Description>This is a reworked version of #32395 targeting the dev16.0-preview3 branch.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33025</IssueID>
    <RepoID>1</RepoID>
    <Title>Track null state through ref assignments to ref ternaries</Title>
    <Description>The following program produces no warnings

``` c#
#nullable enable

class Program
{
    static void Main(string[] args)
    {
        string? a = "", b = "";
        (args.Length == 0 ? ref a : ref b) = null;
        _ = a.Length; // expected warning possible null dereference
    }
}
```
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33024</IssueID>
    <RepoID>1</RepoID>
    <Title>Updated NuGet package properties</Title>
    <Description>
    </Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33023</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn dev16.0-preview3 | 20190131</Title>
    <Description>This is a reworked version of #32616 targeting the dev16.0-preview3 branch.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33022</IssueID>
    <RepoID>1</RepoID>
    <Title>Test `!` suppression with deconstruction</Title>
    <Description>Add tests for `!` suppression with deconstruction.
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33021</IssueID>
    <RepoID>1</RepoID>
    <Title>Conversion tests for nullability and deconstruction</Title>
    <Description>Add tests for deconstruction that cover:
- All implicit and explicit conversions
- Tuple and `Deconstruct` deconstruction
- Top-level and nested conversions</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33020</IssueID>
    <RepoID>1</RepoID>
    <Title>Use the placeholders from Conversion.DeconstructionInfo in NullableWalker.GetDeconstructionRightParts</Title>
    <Description>Can we use the placeholders in `Conversion.DeconstructionInfo` in `NullableWalker.GetDeconstructionRightParts` to simplify `VisitDeconstructionArguments`?

See https://github.com/dotnet/roslyn/pull/32994#discussion_r252780100.
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33019</IssueID>
    <RepoID>1</RepoID>
    <Title>Infer nested nullability of implicitly-typed deconstruction variable</Title>
    <Description>A warning should be reported for `ay[0].ToString()`:
```C#
class Program
{
    static void F(object? x, object y)
    {
        if (x == null) return;
        y = null;

        var t = (new[] { x }, new[] { y });
        var (ax, ay) = t;

        ax[0].ToString();
        ay[0].ToString(); // warning: maybe null
    }
}
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33018</IssueID>
    <RepoID>1</RepoID>
    <Title>IRecursivePattern Changes</Title>
    <Description>At a design meeting a couple of days ago, we made the following changes to `IRecursivePattern`

&gt; 2) Problems:
&gt;   a. First use of Tuples in public api
&gt;   b. Should we use uppercase or lowercase for these? Do they need names at all?

Conclusions:
Replace `PropertySubpatterns` with
```
ImmutableArray&lt;IPropertySubpattern&gt; PropertySubpatterns { get; }
IPropertySubpatternOperation
               IMemberReference
               IPatternOperation
```
Should make these interfaces internal for 16.0
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33017</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullability for foreach deconstruction variables</Title>
    <Description>Report warnings for `x.ToString()` and `y.ToString()`:
```C#
using System.Collections.Generic;

class Program
{
    static void F&lt;T, U&gt;(IEnumerable&lt;(T, U)&gt; e) where U : class
    {
        foreach (var (x, y) in e)
        {
            x.ToString(); // warning: maybe null
            y.ToString(); // warning: maybe null
        }
    }
}
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33016</IssueID>
    <RepoID>1</RepoID>
    <Title>Localize regex tests</Title>
    <Description>This is a test-only fix. I need to get this in to unblock loc changes for Preview 3.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33015</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable csharp symbol tests on mono</Title>
    <Description>
    </Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33014</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixes to compiler generated code script</Title>
    <Description>Makes the following changes to the script which generates our compiler
code files:
1. No longer depend on RID. That was an accident of history and it
caused VS errors when the script was run with VS open. Now just use
"dotnet run" on the project.
1. Put the temporary files under the artifacts directory so they are
included in our published artifacts on error</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33013</IssueID>
    <RepoID>1</RepoID>
    <Title>Work around bug in NamedPipeClientStream.ConnectAsync</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/764608.

`NamedPipeClientStream.ConnectAsync` attempts to be asynchronous by
moving the expensive work (actually connecting to the named pipe) off to
a background thread via `Task.Factory.StartNew(Action,
CancellationToken)`. However, this is the wrong overload to call, and in
some situations is guaranteed to _not_ schedule the new `Task` to a
background thread.

This overload will, by default, use whatever `TaskScheduler` is
associated with the "current" `Task`, if any, and only schedule the work
to at threadpool thread if there is no current `Task` or if that `Task`
is already associated with the threadpool `TaskScheduler`. If, on the
other hand, you're on the UI thread of a GUI application (like Visual
Studio) the new `Task` will also end up scheduled to the UI
thread--exactly the outcome we were trying to avoid.

Once this happens you can easily end up in a situation where a
subsequent blocking call (e.g. `Task.Wait(...)`) blocks the UI thread
while effectively waiting for that `Task` to complete... which it can't
do because the UI thread is blocked! Now you've got a single-threaded
deadlock and your UI hangs.

To work around this issue, here we first force ourselves to a
threadpool thread via `Task.Run` and _then_ call `ConnectAsync`. Thus
the `Task` created by `Task.Factory.StartNew` will also end up on a
threadpool thread.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33012</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposal: File header validation analyzer and fix</Title>
    <Description>## Summary

Currently the IDE does not offer built-in support for configuring headers (aka file banners or copyright headers) expected to appear in source files. This proposal defines a simple analyzer and code fix combination to support a majority of cases used in practice.

When configured, Roslyn would be responsible for adding a file header to newly-created source files it recognizes. Other language services would have access to the **.editorconfig** configuration and could follow suit (the property is defined in a manner that others could follow).

## Variables

The following built-in variables may be used in defining the expected file header content.

| Variable | Value | 
| --- | --- |
| `fileName` | The name of the source file, including its extension |

## Configuration

The expected header content is provided as a template. Substitution variables may be referenced in curly braces, such as `{fileName}`. The sequence `\n` may be used for a single newline in the document.

| Property | Meaning |
| --- | --- |
| `file_header_template` | The template text for file headers. |

## Header forms

File headers in C# source files are allowed to have any of the following forms. The first form is preferred, meaning it is used when the code fix inserts a new comment into a file which did not previously have one.

```csharp
// line 1
// line 2
// line 3
// ...
```

```csharp
/* line 1
 * line 2
 * line 3
 * ...
 */
```

```csharp
/* line 1
   line 2
   line 3
   ... */
```

## Examples

### Single-line header

The following configuration could be used for the code in this repository prior to #25423:

```
file_header_template = Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
```

Files would be expected to start with the comment:

```csharp
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
```

### Multi-line header

The following could be used to implement the three-line header requested in #25423:

```
file_header_template = Licensed to the .NET Foundation under one or more agreements.\nThe .NET Foundation licenses this file to you under the MIT license.\nSee the LICENSE file in the project root for more information.
```

Files would be expected to start with the comment:

```csharp
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
```

### StyleCop-compatible header

The following could be used to define a simple StyleCop-compatible XML header:

```
file_header_template = &lt;copyright file="{fileName}" company="Your Company Here"&gt;\nYour copyright text here\n&lt;/copyright&gt;
```

The file **MyFile.cs** would be expected to start with the comment:

```csharp
// &lt;copyright file="MyFile.cs" company="Your Company Here"&gt;
// Your copyright text here
// &lt;/copyright&gt;
```

## Frequently asked questions

### What about a `{currentYear}` variable?

**tl;dr:** The `currentYear` variable is not required. Simply replace `{currentYear}` in your template with the year you expect to appear in file headers.

Implementing validation using the year as a variable is highly problematic in practice for two reasons:

1. The success of the build depends on when the build runs. It is impossible to create commits which will build successfully a year later.
2. Forcing the header to a later date via analysis would result in a post-dated copyright notice for the code. Depending on the specific country, this is likely to result in an invalid copyright date, a situation which can result in the loss of certain types of copyright protection otherwise afforded to projects.

Fixed dates in the file header template support headers with the strongest copyright protections. Projects which require other approaches may not be able to use this analyzer, but please feel free to use the code for the built-in analyzer under its open source licensing terms to implement a package supporting other specific scenarios.

## Notable changes

The following are notable changes to this proposal as a result of comments in the thread below.

* Changed `dotnet_style_file_header_template` to `file_header_template` (per https://github.com/dotnet/roslyn/issues/33012#issuecomment-459870949)
* Clarify that Roslyn would automatically apply the header to new source files (per https://github.com/dotnet/roslyn/issues/33012#issuecomment-459870949)</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33011</IssueID>
    <RepoID>1</RepoID>
    <Title>Include underlying conversions when tracking nullability of tuple deconstruction</Title>
    <Description>The following should result in exactly one warning, for `y.Value.F.ToString()`:
```C#
#pragma warning disable 0649

struct S
{
    internal object F;
}

class Program
{
    static void F(S s)
    {
        (S, S) t = (s, new S());
        (S? x, S? y) = t;
        _ = x.Value;
        x.Value.F.ToString();
        _ = y.Value;
        y.Value.F.ToString(); // warning: 'F' maybe null
    }
}
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33010</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow upcasting Task&lt;T&gt; to Task&lt;T?&gt;</Title>
    <Description>Apologies if this has already been raised/discussed...

While working on annotating a codebase, I've been running into the following kind of case:

```c#
Task&lt;string&gt; Foo() =&gt; Task.FromResult("foo");
Task&lt;string?&gt; Bar() =&gt; Foo();
```

It seems like it should be possible to upcast a Task&lt;T&gt; into Task&lt;T?&gt;. Moreover, there doesn't seem to be an easy workaround for this (aside from disabling nullability checking).</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33009</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0044 "Make field readonly" false positive when used in ref return</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2.0

**Steps to Reproduce**:
```csharp
public class C
{
    private int a, b; // IDE0044
    private ref int select(bool c) =&gt; ref (c ? ref a : ref b);
    public void Test() =&gt; select(true) = 3;
}
```

**Expected Behavior**:
The members are mutated. Marking them readonly breaks the code, so IDE0044 shouldn't trigger.

**Actual Behavior**:
IDE0044 is falsely triggered.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33008</IssueID>
    <RepoID>1</RepoID>
    <Title>Formatting analyzer NuGet package flags formatting violations in compiler generated assembly attributes files</Title>
    <Description>I just attempted to consume the code style formatting analyzer in roslyn-analyzers repo, and hit this on CI where formatting issues on all generated assembly attribute files are flagged: https://ci.dot.net/job/dotnet_roslyn-analyzers/job/master/job/Windows_NT_Debug_prtest/272/consoleFull#-410211996a086b3e-df04-41d2-bc4d-43e8f9406d07.

```
D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Microsoft.CodeAnalysis.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(2,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Microsoft.CodeAnalysis.Analyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBasic.Analyzers.vbproj]
17:00:19 D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Microsoft.CodeAnalysis.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(4,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Microsoft.CodeAnalysis.Analyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBasic.Analyzers.vbproj]
17:00:19 D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Microsoft.CodeAnalysis.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(5,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Microsoft.CodeAnalysis.Analyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBasic.Analyzers.vbproj]
17:00:19 D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Microsoft.CodeAnalysis.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(6,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Microsoft.CodeAnalysis.Analyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBasic.Analyzers.vbproj]
17:00:19 D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Roslyn.Diagnostics.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(2,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Roslyn.Diagnostics.Analyzers\VisualBasic\Roslyn.Diagnostics.VisualBasic.Analyzers.vbproj]
17:00:19 D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Roslyn.Diagnostics.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(4,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Roslyn.Diagnostics.Analyzers\VisualBasic\Roslyn.Diagnostics.VisualBasic.Analyzers.vbproj]
```

I am going to try the same fix that @sharwell did for Roslyn.sln in https://github.com/dotnet/roslyn/pull/31799, but I wonder if lot of external consumers of the formatting analyzer will end up tripping on this, and we need a better solution (or at least documentation) on this problem. Can the formatting analyzer that comes with the NuGet package not report violations in generated AssebmlyAttributes files?</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33007</IssueID>
    <RepoID>1</RepoID>
    <Title>non-nullability of anonymous type properties in lambdas are messed up (part 2)</Title>
    <Description>here's another one:

```c#
{
	void Foo(Dictionary&lt;string, int&gt; _) { }
	Foo(new string[] { }.Select(e =&gt; new { e }).ToDictionary(p =&gt; p.e, p =&gt; 1)); // warning CS8620: Nullability of reference types in argument of type 'Dictionary&lt;string?, int&gt;' doesn't match target type 'Dictionary&lt;string, int&gt;' for parameter '_' in 'void Foo(Dictionary&lt;string, int&gt; _)'.
}
```
there's nowhere there where anything should be nullable.

_Originally posted by @Spongman in https://github.com/dotnet/roslyn/issues/32465#issuecomment-454246264_</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33006</IssueID>
    <RepoID>1</RepoID>
    <Title>Include additional nullability checks for extension method Deconstruct</Title>
    <Description>For extension method `Deconstruct`, check top-level and nested nullability of `this` argument.
For generic extension methods, infer types with nullability and check nullability constraints.
```C#
class Pair&lt;T, U&gt;
{
}

static class E
{
    internal static void Deconstruct&lt;T, U&gt;(this Pair&lt;T, U&gt; p, out T t, out U u) =&gt; throw null;
}

class Program
{
    static void F(Pair&lt;object?, object&gt;? p)
    {
        (object? x, object? y) = p; // warning: 'p' maybe null
        x.ToString(); // warning: 'x' maybe null
        y.ToString();
    }
}
```

</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33005</IssueID>
    <RepoID>1</RepoID>
    <Title>Not handling nullability deconstructing argument of Deconstruct</Title>
    <Description>A warning is reported for `a.ToString()` but not for `c.ToString()`:
```C#
class Pair&lt;T, U&gt;
{
    internal void Deconstruct(out T t, out U u) =&gt; throw null;
}

class Program
{
    static void F(Pair&lt;object?, (object, object?)&gt; p)
    {
        (object a, (object? b, object? c)) = p;
        a.ToString(); // warning: maybe null
        b.ToString();
        c.ToString(); // warning: maybe null
    }
}
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33004</IssueID>
    <RepoID>1</RepoID>
    <Title>CA2235 complains that guid field is not serializable.</Title>
    <Description>I tried to create a class with serializable attribute with a field of type guid in it. But Code analyzer suggests that the member is of type Guid, which is not serializable. 

[Serializable]
    public class MyGuidValue : ECNullablePrimitiveValue&lt;Guid&gt;
        {
        private Guid m_guidValue;

I don't want to mark the field with NotSerialized.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33003</IssueID>
    <RepoID>1</RepoID>
    <Title>Conversion from Analyzer with Code Fix to Stand-alone code Analysis Tool</Title>
    <Description>I'm recently converting an analyzer which is extension of Visual Studio (already coded) to a stand-alone analyzer. What I did so far: I copied the methods of analysis from extension to stand-alone in the following way:

#### Extension

```C#
context.RegisterSyntaxNodeAction(ClassAnalyzer, SyntaxKind.ClassDeclaration); //Class analysis

...

private void ClassAnalyzer(SyntaxNodeAnalysisContext obj)
{
    var Name = ((ClassDeclarationSyntax)obj.Node).Identifier.Value.ToString();
    if (!InPascal(Name)) //Class should be in pascal case
    {
        var diagnostic = Diagnostic.Create(Rule1, ((ClassDeclarationSyntax)obj.Node).Identifier.GetLocation(), Name);
        obj.ReportDiagnostic(diagnostic);
    }
    if (HasUndescore(Name)) //Shouldn't have underscores
    {
        var diagnostic = Diagnostic.Create(Rule9, ((ClassDeclarationSyntax)obj.Node).Identifier.GetLocation(), Name);
        obj.ReportDiagnostic(diagnostic);
    }
}
```

#### Stand-Alone

```C#
Program p = new Program(); //Because main method is static
...
Console.WriteLine($"Finished loading solution '{solutionPath}'");
//Starts analysis
var proj = solution.Projects.Single();
var compilation = proj.GetCompilationAsync().Result;
foreach (var tree in compilation.SyntaxTrees)
{
    var class = tree.GetRoot().DescendantNodesAndSelf().Where(x =&gt; x.IsKind(SyntaxKind.ClassDeclaration));
    foreach (var c in class)
    {
        p.ClassAnalyzer(c);
    }

...

private void ClassAnalyzer(SyntaxNode obj)
{
    var Name = ((ClassDeclarationSyntax)obj).Identifier.Value.ToString();
    if (!InPascal(Name)) //Class should be in pascal case
    {
        Console.WriteLine(Name + " is not in Pascal Case");
    }
    if (HasUndescore(Name)) //Shouldn't have underscores
    {
        Console.WriteLine(Name + " shouldn't have underscores");
    }
}
```

So far so good. It turns out that I have other methods of analysis that need adaptation that is not presenting itself so simple. 

I have methods that are triggered with the following conditions: 
* SymbolKind.Namespace
* SymbolKind.Field
* OperationKind.VariableDeclaration
* OperationKind.VariableDeclarator

Methods that are triggered by this triggers are not changeable to work through SyntaxNode because they require information that is not available in this structure. Somehow I need to continue triggering these methods with these (or similar) parameters in order to access the same information. I searched everywhere and do not know how to find these structures to "trigger" those methods.

What i want to do:

#### Extension
```C# 
context.RegisterOperationAction(LocalVariableAnalyzer, OperationKind.VariableDeclarator); //Local Variable analysis

...

private void LocalVariableAnalyzer(OperationAnalysisContext obj)
{
    //Code that depends on the structure OperationAnalysisContext
}

And somehow this becomes something like:
```
#### Stand-Alone
```C#
Program p = new Program(); //Because main method is static
...
Console.WriteLine($"Finished loading solution '{solutionPath}'");
//Starts analysis
var proj = solution.Projects.Single();
var compilation = proj.GetCompilationAsync().Result;
foreach (var tree in compilation.SyntaxTrees)
{
    var locvars = tree.GetRoot().DescendantNodesAndSelf().Where(x =&gt; x.IsKind(OperationKind.VariableDeclarator));
    foreach (var c in locvars)
    {
        p.LocalVariableAnalyzer(c);
    }

...

private void LocalVariableAnalyzer(OperationAnalysisContext obj)
{
    //Same code that depends on the structure OperationAnalysisContext or slightly adapted
}
```

Just to remember, i don't need access only to OperationAnalysis, but to SymbolKind too.

Thanks in advance.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33002</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename using</Title>
    <Description>I send screenshot of code. Renaming A works fine but renaming B does not rename correctly and leads to compile time error.

![image](https://user-images.githubusercontent.com/12449387/52043400-70869880-24f4-11e9-8d20-0c5322f3c379.png)


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/433879/rename-using.html
VSTS ticketId: 776278_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33001</IssueID>
    <RepoID>1</RepoID>
    <Title>In documentation, mark &lt;para&gt; will generate empty line in tooltip</Title>
    <Description>When using &amp;lt;para&amp;gt; to insert a new line in the documentation, &amp;lt;para&amp;gt; will generates additional empty lines in the Tooltip displayed by IntelliSense or mouseover on keywords.
this problem is start at VS 2013, please fix it


![image](https://user-images.githubusercontent.com/12449387/52042691-a88cdc00-24f2-11e9-87f0-1dea3c2063db.png)

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/441448/in-documentation-mark-will-generate-empty-line-in.html
VSTS ticketId: 782031_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33000</IssueID>
    <RepoID>1</RepoID>
    <Title>Add more information on running tests from the command line, and view…</Title>
    <Description>…ing their results

I wasted a good few hours trying to work this out, so I hope this will save someone else the time :-)</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32999</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify representation of AttributeLists/Modifiers on all MemberDecls.</Title>
    <Description>The current (i.e. prior to this PR) way of representing attributes/modifiers is to specify which nodes they can go on in an adhoc manner.  Some member decls specify they take attributes+modifiers, some only attributes, and some take none at all.  While this is accurate as per the grammar, it makes for some ungainly APIs and complex use cases.

For example, our parser detects if you write attributes/modifiers for a namespace, but then has no place to put it.  Similarly, lots of code in later layers has to write specialized code to get at modifiers/attributelists.

--

This PR attempts to simplify things (taking a page from TypeScript).  After this PR, we simply define all member decls as being able to have attributes/modifiers.  This means that if we run into attributes/modifiers that aren't grammatically legal, we still have a place to put them.  And, later layers can more easily get/change/add these properties easily.

--

This also ties into the goal of pulling errors out of hte parser, since they affect incremental parsing, as well as making it more difficult for later phases to understand what is going on.

--

Todo:
- [x] tests.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32998</IssueID>
    <RepoID>1</RepoID>
    <Title>Update .editorconfig</Title>
    <Description>~~skip ci please~~
^^^
It doesn't work here...</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32997</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex: could warn on duplicate characters in character set</Title>
    <Description>```csharp
using System.Text.RegularExpressions;

namespace ConsoleApp27
{
    class Program
    {
        static void Main(string[] args)
        {
            var MyRegex = new Regex(@"folder[aaa]name");
        }
    }
}
```

Expected:
A warning that duplicate characters are not needed in character set

Actual:
No warning</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32996</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex: Error message incorrect for empty character set</Title>
    <Description>```csharp
using System.Text.RegularExpressions;

namespace ConsoleApp27
{
    class Program
    {
        static void Main(string[] args)
        {
            //language=regex
            string s = @"foo[]bar";

            var MyRegex = new Regex(@"folder[]name");
    }
}
```

Expected: Warning "Empty [] set"

Actual: Warning "Unterminated [] set"
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32995</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex: should warn on negative fixed quantifier</Title>
    <Description>```csharp
namespace ConsoleApp27
{
    class Program
    {
        static void Main(string[] args)
        {
            //language=regex
            string s = @"a{-3,4}";
        }
    }
}
```

Expected:
Diagnostic: negative numbers not allowed in fixed quantifier

Actual:
No diagnostic</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32994</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullability in deconstruction</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/29618
Fixes https://github.com/dotnet/roslyn/issues/31298</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32993</IssueID>
    <RepoID>1</RepoID>
    <Title>async completion. check if need to support the original completion co…</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/31135</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32992</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex string not colorized until completed</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/52027129-1e775000-24bf-11e9-8bcf-6c47889e1c9a.png)

**Steps to Reproduce**:
Start typing regex string without the string being completed:

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/41759/52027141-27682180-24bf-11e9-85d1-becf388e93f8.png)

Notice the parentheses are not colorized.

**Expected Behavior** (without the right quote):
![image](https://user-images.githubusercontent.com/41759/52027173-3fd83c00-24bf-11e9-9039-959658dee5cc.png)
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32991</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyze throw expression and adjust analysis of null-coalescing operator</Title>
    <Description>- A throw expression visits the expression (we check that it's not possibly null), then marks the state as unreachable.
- In the left branch of `x ?? y`, we should learn that `x != null`.

Fixes https://github.com/dotnet/roslyn/issues/32879</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32990</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix up support for changing rule set files through the Solution Explorer </Title>
    <Description>The AnalyzersCommandHandler was still trying to call GetHostProject to find the host project as a way to directly grab the rule set file to process that. That was deprecated but we hadn't fixed it up yet.

The fix is to re-thread through a way to get to the rule set. The "ownership" of a rule set file (if one exists for a project) is owned by the VisualStudioProjectOptionsProcessor, so we now need a way to jump to that directly from any project so another map is added to the VisualStudioWorkspaceImpl. That map is unfortunate -- the OptionsProcessor is really something that should be private to the project system itself and shouldn't be grabbable by any random code.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/779916
Completes task https://devdiv.visualstudio.com/DevDiv/_workitems/edit/698029

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

If you go to the Solution Explorer and expand the Analyzers node, you can browse the rules that are associated with the analyzers you reference. If you right click a rule, choose Set Severity, and choose an option, you get an error message instead of it working.

### Bugs this fixes

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/779916

### Workarounds, if any

Just edit the rule set file with the designer or manually.

### Risk

Low.

### Performance impact

None, nothing is really changing.

### Is this a regression from a previous update?

Yes, this was broken in Dev16.0 Preview 1.

### Root cause analysis

This was an incomplete refactoring that we had a TODO comment for but the tracking bug got misassigned. It was then caught in dogfooding and fixed. We've also figured out where the bug went and are cleaning those up.

### How was the bug found?

Internal dogfooding.

&lt;/details&gt;</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32989</IssueID>
    <RepoID>1</RepoID>
    <Title>csharp_preferred_modifier_order is missing from the table in Tools &gt; Options &gt; Text Editor &gt; C# &gt; Code Style &gt; General </Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/52023187-fe409480-24b0-11e9-81aa-ea391cbc0bbc.png)

The table listing styles settings does not include `csharp_preferred_modifier_order` but the generated `.editorconfig` file does.

```
# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async
```

</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32988</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix a bad merge that left a merge conflict marker in a user visible string.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32986</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32987</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate .editorconfig file from settings should initialize Save file dialog with solution dir</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/52023328-89ba2580-24b1-11e9-99ad-f7a1ead6c0f8.png)

**Steps to Reproduce**:

Tools &gt; Options &gt; Text Editor &gt; C# &gt; Code Style &gt; Generate .editorconfig file from settings.

**Expected Behavior**:

For convenience, the Save Dialog should open in the directory where the current solution is loaded from if a solution is open. 

**Actual Behavior**:

The Save Dialog opens in a random directory (the current directory of the drive?)
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32986</IssueID>
    <RepoID>1</RepoID>
    <Title>Code style &gt; Expression preferences &gt; Prefer range operator has incorrect sample code</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/52023187-fe409480-24b0-11e9-81aa-ea391cbc0bbc.png)


![image](https://user-images.githubusercontent.com/41759/52022577-5b871680-24ae-11e9-8a94-849b6f53738a.png)

</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32985</IssueID>
    <RepoID>1</RepoID>
    <Title>Support `if` pattern in "use null coalescing assignment" refactoring </Title>
    <Description>Currently "use null coalescing assignment" refactoring only triggers for patterns like 
```cs
x = x ?? y;
```

It'd be nice to expand the support to `if` patterns

```cs
if (x == null)
{
    x = y;
}

if (x is null)
{
    x = y;
}
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32984</IssueID>
    <RepoID>1</RepoID>
    <Title>IWorkspaceProjectContext does not grantee workspace is update-to-date on method return</Title>
    <Description>[IWorkspaceProjectContext.cs](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/ProjectSystem/CPS/IWorkspaceProjectContext.cs) as I understand it is supposed to have the following contracts

**Expected:** 

If `StartBatch` has not been called

- Upon the call to any `Add*` or `Remove*` method returning execution to the caller the workspace shall be up-to-date

If `StartBatch` has been called

- Upon a call to `EndBatch` returning execution to the caller the workspace shall be up-to-date

**Actual:**

If there are open files the running-document-table is consulted and updated asynchronously making it take an unknowable amount of time for the workspace to be brought up to date</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32983</IssueID>
    <RepoID>1</RepoID>
    <Title>Reparse type after async</Title>
    <Description>Fixes #11959</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32982</IssueID>
    <RepoID>1</RepoID>
    <Title>FAR and reference highlighting doesn't work for variable ref inside tuple deconstructuion</Title>
    <Description>FAR and reference highlighting doesn't work for selected variable inside tuple deconstruction:

![image](https://user-images.githubusercontent.com/788783/52022438-bff5a600-24ad-11e9-98d3-a9fa0f6465e0.png)

Here's the result when selecting the same variable but outside the tuple deconstruction:

![image](https://user-images.githubusercontent.com/788783/52022494-f6332580-24ad-11e9-83bd-d80b0900aed9.png)
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32981</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0051 false positive in recursive pattern matching</Title>
    <Description>Both fields in the code sample below are flagged as unused private members. Note that FAR correctly reports them as "read" references in recursive pattern matching.

```cs
    public class Foo
    {
        string field1;
        string field2;

        public string RecPattern(Foo a)
        {
            if (a is Foo { field2: null, field1: string f1 })
                return f1;
            return "";
        }
    }
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32980</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32979</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32978</IssueID>
    <RepoID>1</RepoID>
    <Title>Add feature to suggest using a 'simple using statement' when possible.</Title>
    <Description>Looks like this:

![image](https://user-images.githubusercontent.com/4564579/52020663-0267b480-24a7-11e9-9cd8-4a44bb418f54.png)

Todo: 
- [ ] Tests
- [ ] User facing option</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32977</IssueID>
    <RepoID>1</RepoID>
    <Title>Internal API - CommandLineOptions for Project</Title>
    <Description>This adds an *internal* property, `CommandLineOptions` to the workspace `Project` type. From the project shims, it can be set via `projectContext.SetOptions("this is command line args")` if the project context's language doesn't implement `CompilationOptions`; it will fallback and set the `CommandLineOptions` instead.

This is useful for command line arguments for F#, in particular, to flow through the workspace Project without having to be concerned with `CompilationOptions`.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32976</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert local to method does not respect unsafe keyword</Title>
    <Description>**Version Used**: 
16.0.0 Preview 3.0 28529.153.d16.0
**Steps to Reproduce**:
Enable unsafe compiler flag.
Run 'Convert to Method' on GetPtr local function.
```csharp
class ClassA
{
    public unsafe void UnsafeFunction()
    {
        byte b = 1;
        unsafe byte* GetPtr(byte* bytePt)
        {
            return bytePt;
        }
        var aReference = GetPtr(&amp;b);
    }
}
```

**Expected Behavior**:
New function should be marked as unsafe.
```csharp
class ClassA
{
    public unsafe void UnsafeFunction()
    {
        byte b = 1;
        var aReference = GetPtr(&amp;b);
    }

    private static unsafe byte* GetPtr(byte* bytePt)
    {
        return bytePt;
    }
}
```

**Actual Behavior**:
New method not marked as unsafe and shows compiler error.
```csharp
class ClassA
{
    public unsafe void UnsafeFunction()
    {
        byte b = 1;
        var aReference = GetPtr(&amp;b);
    }

    private static byte* GetPtr(byte* bytePt)
    {
        return bytePt;
    }
}
```
&lt;img width="408" alt="unsafe_converted_method" src="https://user-images.githubusercontent.com/5749229/52014236-df7fd500-2493-11e9-9b0c-128c6bfbb5aa.png"&gt;
</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32975</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert local function to method does not respect ref return type</Title>
    <Description>**Version Used**: 
16.0.0 Preview 3.0 28529.153.d16.0

**Steps to Reproduce**:
Run 'Convert to Method' on the local function GetRef

```csharp
class ClassA
{
    class RefClass { }
    RefClass refClass = new RefClass();
    public void RefLocalFunction()
    {
        ref RefClass GetRef()
        {
            return ref refClass;
        }
        ref var aReference = ref GetRef();
    }
}
```

**Expected Behavior**:
The method should have a ref return, as below.
```csharp
class ClassA
{
    class RefClass { }
    RefClass refClass = new RefClass();
    public void RefLocalFunction()
    {
        ref var aReference = ref GetRef();
    }
    private ref RefClass GetRef()
    {
        return ref refClass;
    }
}
```

**Actual Behavior**:
The method does not have a ref return and results in a compiler error.
```csharp
class ClassA
{
    class RefClass { }
    RefClass refClass = new RefClass();
    public void RefLocalFunction()
    {
        ref var aReference = ref GetRef();
    }

    private RefClass GetRef()
    {
        return ref refClass;
    }
}
```
&lt;img width="412" alt="ref_converted_method" src="https://user-images.githubusercontent.com/5749229/52013370-b8280880-2491-11e9-958a-357ffeefebe4.png"&gt;
</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32974</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't use an elastic CR/LF for separating using directives groups</Title>
    <Description>This fixes #28631. This is a bug that happens when you use the C# Code Cleanup, and you have "separating using directives groups" setting enabled (added in #21087). This setting is not honored because an elastic CR/LF is issued, and the Formatter will remove that via the `ElasticTriviaFormattingRule`.

/cc @CyrusNajmabadi </Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32973</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 false positive (unused parameter)</Title>
    <Description>**Version Used**:  `16.0.0 Preview 3.0 [28529.153.d16.0]`

**Steps to Reproduce**:

```csharp
class C
{
    public static bool M(out int x)
    {
        return LocalFunction(out x);

        bool LocalFunction(out int y)
        {
            y = 0;
            return true;
        }
    }
}
```

**Expected Behavior**:
No IDE0060

**Actual Behavior**:
```
Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0060	Remove unused parameter 'y'	ConsoleApp6	C:\Users\mavasani\source\repos\ConsoleApp6\ConsoleApp6\Program.cs	7	Active
```</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32972</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32971</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32970</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32969</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32968</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32967</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32966</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32965</IssueID>
    <RepoID>1</RepoID>
    <Title>Need trim start whitespace per line in string of $@ format</Title>
    <Description>_From @chenyj796 on January 30, 2019 11:12_

### Steps to reproduce

When I declare a string in a method as below:
``` csharp
void Test()
{
    var str = $@"
line one
line two
";
}
```

I hope it can be writen as below:
``` csharp
void Test()
{
    var str = $@"
          line one
          line two
         ";
}
```
and the compiler can auto remove the leading whitespace if I add a property in the csproj file, such as:
``` xml
&lt;TrimStartWhitespaceForStringDeclaration&gt;true&lt;/TrimStartWhitespaceForStringDeclaration&gt;
```

### Expected  behavior


### Actual behavior


### Environment data
`msbuild /version` output:

OS info:

If applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):


_Copied from original issue: Microsoft/msbuild#4110_</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32964</IssueID>
    <RepoID>1</RepoID>
    <Title>Does this method just return false?</Title>
    <Description>I'm not a VB expert, but it seems this method just returns false?

https://github.com/dotnet/roslyn/blob/6296ea1dc694724335a9310266eacfa6e1931245/src/Workspaces/VisualBasic/Portable/Formatting/DefaultOperationProvider.vb#L103-L116</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32963</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn.Compilers.Extension.SetGlobalGlobalPropertiesForCPS throwing exception</Title>
    <Description>in latest d16.0 with latest Roslyn preview 3, we get this

```
Microsoft.VisualStudio.Composition.CompositionFailedException
  HResult=0x80131500
  Message=An exception was thrown while initializing part "Roslyn.Compilers.Extension.SetGlobalGlobalPropertiesForCPS".
  Source=Microsoft.VisualStudio.Composition
  StackTrace:
   at Microsoft.VisualStudio.Composition.RuntimeExportProviderFactory.RuntimeExportProvider.RuntimePartLifecycleTracker.CreateValue()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.Create()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveNext(PartLifecycleState nextState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveToState(PartLifecycleState requiredState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.GetValueReadyToExpose()
   at Microsoft.VisualStudio.Composition.RuntimeExportProviderFactory.RuntimeExportProvider.&lt;&gt;c__DisplayClass15_0.&lt;GetExportedValueHelper&gt;b__0()
   at Microsoft.VisualStudio.Composition.DelegateServices.&lt;&gt;c__DisplayClass2_0`1.&lt;As&gt;b__0()
   at System.Lazy`1.CreateValue()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()

Inner Exception 1:
MissingMethodException: Method not found: 'Microsoft.VisualStudio.ProjectSystem.IProjectServices Microsoft.VisualStudio.ProjectSystem.IProjectService.get_Services()'.
```

it is due to this change

https://devdiv.visualstudio.com/DevDiv/_git/CPS/commit/9e27f2e3a53c7945fe7053e79fb3d568121d10d1?refName=refs%2Fheads%2Fmaster&amp;_a=compare&amp;path=%2Fsrc%2FMicrosoft.VisualStudio.ProjectSystem%2FCore%2FProjectService%2FIProjectService.cs

..

according to @davkean this is intentional public API changes. </Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32962</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up compiler .editorconfig</Title>
    <Description>We have a .editorconfig for src/Compilers, but the compiler team also has a few tools that are outside that directory that use the same rules. We should add a section to the top-level .editorconfig with those rules and scope it to all those locations, instead of duplicating the same .editorconfig in multiple places.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32961</IssueID>
    <RepoID>1</RepoID>
    <Title>Error Symbol is incorrectly produced for lambda parameter in valid code</Title>
    <Description>Repro is in the BoundNodeClassWriter, at this commit/line: https://github.com/dotnet/roslyn/blob/e99fdfb22ef14a2d83251a0f19059f4a09065663/src/Tools/Source/CompilerGeneratorTools/Source/BoundTreeGenerator/BoundNodeClassWriter.cs#L1519-L1521
`field` appears to have an `ErrorType` returned from the SemanticModel, causing IDE quickinfo and unused parameter detection to not return expected results. This is completely valid code, and the parameter should have type `Field`.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32960</IssueID>
    <RepoID>1</RepoID>
    <Title>Default enhanced colors, remove bold statics, and remove experiment</Title>
    <Description>We will leave the preview features checkbox in for users who wish to opt-out.


&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

When using C# or VB we will set new default colors for Methods, Operator Overloads, Control Keywords, Local variables and Parameters. 

### Bugs this fixes

None, this is just defaulting a feature which we shipped in Preview 2.

### Workarounds, if any

None

### Risk

Low.

### Performance impact

none

### Is this a regression from a previous update?

No

### Root cause analysis

NA


</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32959</IssueID>
    <RepoID>1</RepoID>
    <Title>Unused Parameter analysis is not resilient to bad invocations</Title>
    <Description>```C#
using System;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            Test(true, false);
        }

        static void Test(bool arg1, bool arg2)
        {
            Invoke&lt;string&gt;(() =&gt; arg1 &amp;&amp; arg2);

            T Invoke&lt;T&gt;(Func&lt;T&gt; a) { return a(); }
        }
    }
}
```

`arg1` and `arg2` are grayed out in the ide for being unused. Removing the `&lt;string&gt;` constraint causes all errors in the code to go away, and the parameters are correctly inferred to be used.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32958</IssueID>
    <RepoID>1</RepoID>
    <Title>.Net Core 3.0 compiler complains about `#pragma warning enable xxxx` when using C#7.3</Title>
    <Description>**Version Used**: 

3.0.0-preview-27324-05

**Steps to Reproduce**:

```powershell
pwsh
git clone git@github.com:bergmeister/PowerShell.git bergmeister
cd bergmeister
git checkout netcore3.0
ipmo ./build.psm1
start-psbootstrap
start-psbuild
```

**Expected Behavior**:

Successful build

**Actual Behavior**:

In files using `#pragma warning enable xxxx` it errors:

```output
/Users/steve/repos/PowerShell/src/System.Management.Automation/engine/COM/ComUtil.cs(318,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/Authenticode.cs(193,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/Authenticode.cs(516,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/Authenticode.cs(541,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/Authenticode.cs(611,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/nativeMethods.cs(1070,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/nativeMethods.cs(1205,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
Execution of { dotnet $Arguments } by build.psm1: line 374 failed with exit code 1
At /Users/steve/repos/PowerShell/build.psm1:1999 char:17
+                 throw $errorMessage
+                 ~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : OperationStopped: (Execution of { dotn\u2026ed with exit code 1:String) [], RuntimeException
+ FullyQualifiedErrorId : Execution of { dotnet $Arguments } by build.psm1: line 374 failed with exit code 1
```

This built find with 3.0 preview.1 and only occured when we tried to move to 3.0 preview.2

This is blocking PSCore6 from moving to .Net Core 3.0 https://github.com/PowerShell/PowerShell/pull/8370</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32957</IssueID>
    <RepoID>1</RepoID>
    <Title>ref locals marked as redundant/never used</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59

Related to #32856

**Steps to Reproduce**:
```C#
static void Main(string[] args)
{
    int[] a = new int[4];

    ref int ra = ref a[0];
    ra = 4;

    Console.WriteLine(a[0]);
}
```

**Actual Behavior**: `IDE0059 Value assigned to 'ra' never` used on both lines containing `ra`.

The fixes are very wrong. The first line suggests

```C#
_ = ref a[0];
int ra = 4;
```
which not only changes the behavior but also does not compile, and the second line suggests removing self altogether as a redundant assignment, which also changes the behavior.

**Expected Behavior**:

I would argue assignments to ref locals should mark them as used and should never be marked as redundant (unless perhaps clearly overwritten by another value).
</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32956</IssueID>
    <RepoID>1</RepoID>
    <Title>Questionable IDE0052 for private members that keep a side-effect producing reference (timer) alive</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2.0

**Steps to Reproduce**:
```csharp
class C
{
    private readonly Timer timer // IDE0052
            = new Timer(_ =&gt; Console.WriteLine("still running"), null, 0, 10_000);
}
```
That is, the live-time of the timer is bound to the live-time of the instance of C. Without the member, the garbage collector will remove the timer eventually before removing the instance of C.

I typically have a couple of singletons in my code base that simulate actual hardware while developing. These are put in the DI container and remain active for the entire application runtime. I could implement `IDisposable`, but this seems like overkill just to silence the warning given that the end of the program also ends the timer…</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32955</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow .editorconfig naming differentiation for [ThreadStatic]s</Title>
    <Description>I would like to be able to enforce a convention that [ThreadStatic] statics are different in naming from other statics, using "t_" as prefix for the former and "s_" as a prefix for the latter.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32954</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix Formatting Warnings on Build</Title>
    <Description>This PR fixes the several format warnings that occur when building with .\Build.cmd</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32953</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn does not warn about type arguments that does not match nullability constraints in signatures</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.0
VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C&lt;T&gt; where T : A
{
  C&lt;A?&gt; M(C&lt;A?&gt; c1) // no warnings
  {
    C&lt;A?&gt; c2; // CS8631
    return new C&lt;A?&gt;(); // CS8631
  }
}
```

**Expected Behavior**:
`CS8631 The type 'A?' cannot be used as type parameter 'T' in the generic type or method 'C&lt;T&gt;'. Nullability of type argument 'A?' doesn't match constraint type 'A'.` warnings issued for both `c1` and `M`

**Actual Behavior**:
No warnings for the `M` method signature.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32952</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid unnecessary thread-local variables</Title>
    <Description>This unnecessary use of `ThreadLocal&lt;T&gt;` was showing up in formatter performance traces. The improvement is small, but the code is also simpler when normal local variables are used.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32951</IssueID>
    <RepoID>1</RepoID>
    <Title>Include file counts in success message for dotnet-format</Title>
    <Description>
    </Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32950</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32949</IssueID>
    <RepoID>1</RepoID>
    <Title>VerifyTypeIl now replaces some strings of IL that are .Net Core …</Title>
    <Description>…specific with their .Net Framework equaivalent.

The motivation for this was #32092, where all the VerifyTypeIl tests were failing as a result of differences like this:

```csharp
++&gt; 	extends [netstandard]System.Object
--&gt; 	extends [mscorlib]System.Object
 {
 	// Nested Types
 	.class nested private auto ansi sealed beforefieldinit '&lt;&gt;c__DisplayClass0_0'
++&gt; 		extends [netstandard]System.Object
--&gt; 		extends [mscorlib]System.Object
 	{
++&gt; 		.custom instance void [netstandard]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (
--&gt; 		.custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (
```

The solution is a simple string replace to normalize such differences before comparing.

Since this is presumable not desired in some cases (eg when testing IL specifically for a platform), there is an optional switch to turn this off.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32948</IssueID>
    <RepoID>1</RepoID>
    <Title>'pull up members' code action text is too long and is cut off.</Title>
    <Description>![image](https://user-images.githubusercontent.com/4564579/51965436-6a25ed00-241e-11e9-8a98-83e82821059b.png)

We shouldn't use the fully qualified name here.  We should just use hte member name.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32947</IssueID>
    <RepoID>1</RepoID>
    <Title>No nullability warnings in best type and type inference</Title>
    <Description>The invariant merge rules no longer produce a warning when there is a mismatch.
So scenarios like `new[] { x, y }` and `M(x, y)` should not report any diagnostics for failing to find a best type including nullability. Instead, we find a best type, and then produce conversion warnings from the elements to the inferred type.
Then elements can be suppressed.
This also affects the conditional operator.

This allows removing much machinery for passing `hadNullabilityMismatch` around, and a few "no best type" error codes.

Fixes https://github.com/dotnet/roslyn/issues/30376 (suppression in array initializer and conditional)
Fixes https://github.com/dotnet/roslyn/issues/30151 (suppression in array initializer)
Fixes https://github.com/dotnet/roslyn/issues/30480 (no nullability warning for type inference with lambda argument)

I'll push an additional commit shortly which:
Closes https://github.com/dotnet/roslyn/issues/30955
Closes https://github.com/dotnet/roslyn/issues/30925
Closes https://github.com/dotnet/roslyn/issues/31958
Closes https://github.com/dotnet/roslyn/issues/30941
Closes https://github.com/dotnet/roslyn/issues/28377
Closes https://github.com/dotnet/roslyn/issues/31295
Closes https://github.com/dotnet/roslyn/issues/26654
(Note: I verified that those issues aren't referenced elsewhere in the code)</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32946</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 - Remove redundant assignment triggered for variable used from closure</Title>
    <Description>**Version Used**: VS 16.0 Preview 2.0

**Steps to Reproduce**:

```csharp
int i = 1;
Action a = () =&gt; Console.WriteLine(i);
```

**Expected Behavior**:

IDE0059 is not fired, and no suggested fix to remove a redundant assignment is made.

**Actual Behavior**:

IDE0059 fires and suggests to remove the redundant assignment, which results in:

```csharp
int i;
Action a = () =&gt; Console.WriteLine(i);
```

which doesn't compile. Adding a use site outside the lambda/delegate body makes IDE0059 go away.

**Context**:

The bigger repro for this issue is a place where we cache delegates that have a reference to a loop variable, which is copied to a local inside the body of a `for` loop, like this:

```csharp
Action[] GetCachedDelegates(int n)
{
    var res = new Action[n];

    for (var i = 0; i &lt; n; i++)
    {
        var j = i;
        res[i] = () =&gt; DoSomething(j); // closure over `this` and `j`
    }

    return res;
}
```
</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32945</IssueID>
    <RepoID>1</RepoID>
    <Title>ChangeSignature should highlight the currently selected paramater</Title>
    <Description>Invoke ChangeSignature on `void M(int i, int j)` with the cursor on `j`.
When the dialog comes up, the selection should be on `j`.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32944</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualStudioSymbolSearchProgressService is passing null TaskHandlerOptions.DisplayTaskDetails</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 2.0

**Steps to Reproduce**:

Hit this while debugging. TaskStatusCenterModel.PreRegister is throwing an ArgumentNullException on this path because askHandlerOptions.DisplayTaskDetails is null.

```
ArgumentNullException: Value cannot be null.\r\nParameter name: DisplayTaskDetails
&gt;	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.TaskStatusCenter.TaskStatusCenterModel.PreRegister(Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions options, Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData data) Line 139	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchProgressService.OnDownloadFullDatabaseStartedWorkerAsync(string title) Line 67	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchProgressService.OnDownloadFullDatabaseStartedAsync(string title) Line 35	C#
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.DownloadFullDatabaseAsync()	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.TimeSpan&gt;.Start&lt;Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;DownloadFullDatabaseAsync&gt;d__9&gt;(ref Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;DownloadFullDatabaseAsync&gt;d__9 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.DownloadFullDatabaseAsync()	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.UpdateDatabaseInBackgroundWorkerAsync()	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.TimeSpan&gt;.Start&lt;Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;UpdateDatabaseInBackgroundWorkerAsync&gt;d__7&gt;(ref Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;UpdateDatabaseInBackgroundWorkerAsync&gt;d__7 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.UpdateDatabaseInBackgroundWorkerAsync()	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.UpdateInBackgroundAsync()	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;UpdateInBackgroundAsync&gt;d__5&gt;(ref Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;UpdateInBackgroundAsync&gt;d__5 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.UpdateInBackgroundAsync()	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.UpdateContinuouslyAsync(string source, string localSettingsDirectory)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchService.UpdateSourceInBackgroundAsync(string sourceName) Line 109	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchService.StartWorking.AnonymousMethod__0() Line 89	C#

```

**Expected Behavior**:

**Actual Behavior**:
</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32943</IssueID>
    <RepoID>1</RepoID>
    <Title>Small amounts of cleanup</Title>
    <Description>
    </Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>08/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32942</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix IDE0058 on lambda expression results in unexpected behavior</Title>
    <Description>**Version Used**: 3.0.19.6832 (231aeb8b)

**Steps to Reproduce**:

1. The following code is common in EF Core migrations.

```
_ = migrationBuilder.CreateTable(
                name: "",
                columns: table =&gt; new {},
                constraints: table =&gt; table.PrimaryKey("PK_", x =&gt; x.Id));
                                      ^^^
```

2. Fix IDE0058 on code highlighted.

**Expected Behavior**:

Discard is added at correct position.

```
_ = migrationBuilder.CreateTable(
                name: "",
                columns: table =&gt; new {},
                constraints: table =&gt; _ = table.PrimaryKey("PK_", x =&gt; x.Id));
```

**Actual Behavior**:

Discard is added at wrong position.

```
_ = _ = migrationBuilder.CreateTable(
                name: "",
                columns: table =&gt; new {},
                constraints: table =&gt; table.PrimaryKey("PK_", x =&gt; x.Id));
```

Also, if fix other IDE0058, then select fix all, which includes the one shown above, SyntaxEditorBasedFixAllProvider will crash.

```
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.Kind(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.GetDeclarationKind(SyntaxNode declaration)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.AsNodeLike(SyntaxNode existingNode,SyntaxNode newNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.ReplaceNode(SyntaxNode root,SyntaxNode declaration,SyntaxNode newDeclaration)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()
   at async Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedValuesCodeFixProvider`11.FixAllAsync[TExpressionSyntax,TStatementSyntax,TBlockSyntax,TExpressionStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TForEachStatementSyntax,TSwitchCaseBlockSyntax,TSwitchCaseLabelOrClauseSyntax,TCatchStatementSyntax,TCatchBlockSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.FixDocumentAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsCoreAsync(&lt;Unknown Parameters&gt;)
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass17_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32941</IssueID>
    <RepoID>1</RepoID>
    <Title>Add feature to make applicable local functions static.</Title>
    <Description>Looks like this:

![image](https://user-images.githubusercontent.com/4564579/51958546-430ef180-2405-11e9-92ea-d93019ffa403.png)

Todo:
- [x] Tests
- [x] User facing option in Tools|Options</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32940</IssueID>
    <RepoID>1</RepoID>
    <Title>The focus of IntelliSence is not right in  vs2019preview2 when async code completion=on</Title>
    <Description>**Version Used**: The one in vs2019 preview2

The testcase used to be crash in vs2019preview1(#31263), so not sure what happened in preview1. And works well in vs2017 15.9.5.

**Steps to Reproduce**:

1. Set Options/Environment/Preview Features/`Use asynchronous code completion in C# and Basic` to on.
2. Type `string.Equals("","",StringComparison.[cursor here, and an autocompleted char ')']` in an .cs file
3. Press arrow up/down.

**Expected Behavior**:
Switch between members of `StringComparison`, like it does in vs2017 15.9.5

**Actual Behavior**:
Switch between the overload of method `string.Equals`.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32939</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32938</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32937</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32936</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32935</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32934</IssueID>
    <RepoID>1</RepoID>
    <Title>#nullable enable causes bogus cycle in struct layout error</Title>
    <Description>**Version Used**: VS2019 Preview 2

**Steps to Reproduce**:

1. Create a new .NET core C# library project
2. Change the C# language version to 8.0
3. Type the following code

```
#nullable enable
struct Foo&lt;T&gt;
{
	static Foo&lt;T&gt; Bar;
}
```

**Expected Behavior**: Code compiles fine whether or not `#nullable enable` is used
**Actual Behavior**: With `#nullable enable` the compiler emits this error:

`Error CS0523: Struct member 'Foo&lt;T&gt;.Bar' of type 'Foo&lt;T&gt;' causes a cycle in the struct layout`</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32933</IssueID>
    <RepoID>1</RepoID>
    <Title>Ignore InvalidOperationException from GetInstalledPackages</Title>
    <Description>The NFW from these aren't meaningful, and it's expected that eventually this will work. 

Current NFW reports are [here](https://features.vsdata.io/investigatefault?mt=MAC_ADDRESS_HASHES&amp;et=FAULT&amp;sd=2018-12-29&amp;ed=2019-01-28&amp;pn=vs&amp;fn=ide/vbcs/nonfatalwatson&amp;en=nonfatalwatson&amp;fh=13e849c3-da74-b9b7-5ed0-817c663d2226&amp;ex=devenv&amp;ut=external)

Helps resolve part of #20101 </Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32932</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Delete VisualStudioMetadataReference, which was now an empty type"</Title>
    <Description>This reverts commit 73f1152e961c57e68c34331040e94b60c14ead24. Right now F# is still implicitly mentioning this type. This has been fixed in https://github.com/Microsoft/visualfsharp/pull/6153 but until we can get that rolled out we'll roll back the name change.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32931</IssueID>
    <RepoID>1</RepoID>
    <Title>fix some out-of-sync file names</Title>
    <Description>Noticed this while looking at some old PRs</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32930</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure we refresh the project output path when the obj path changes</Title>
    <Description>For legacy projects, we would update our bin path whenever the obj path was updated as a heuristic. We lost that as a part of my rewrite as a simple oversight; this restores that back.

Fixes https://github.com/dotnet/roslyn/issues/32711

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

If you switch between Debug/Release, the path in a Roslyn API isn't updated. This API is used by many things, like Live Unit Testing, which causes things to get out of sync and you may see duplicate or missing tests.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/32711
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763897

### Workarounds, if any

Don't switch configurations, but there's no alternative if you need to do that.

### Risk

Low.

### Performance impact

There's a small impact because we're querying the project system for additional information. We were doing this in Dev15 so it's not a regression from our previous major release.

### Is this a regression from a previous update?

This was broken in Dev16.0 Preview 1.

### Root cause analysis

We don't have any unit tests that cover this particular area. Creating tests are particularly complicated because there's a lot of mocks that are required. We're actively looking to deprecate this legacy code in future Dev16 updates.

### How was the bug found?

Internal testing.
&lt;/details&gt;</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32929</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail out on delegate creation wrapped a in tuple operation</Title>
    <Description>Another case where we need PointsTo analysis for precise flow analysis, we bail out as we currently do not perform any PointsTo analysis.

Fixes #32903</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32928</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32927</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32926</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32925</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32924</IssueID>
    <RepoID>1</RepoID>
    <Title>"Remove unused parameter" IDE0060 triggered for captured parameter</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2.0

**Steps to Reproduce**:
```csharp
public void Test(int foo) // IDE0060 triggered for foo
    =&gt; Console.CancelKeyPress += (s, e) =&gt; e.Cancel = foo != 0;
```

**Expected Behavior**:
`foo` is used, so no warning.

**Actual Behavior**:
The warning is shown, there's a code fix light bulb when hovering over the parameter, but that one disappears when being clicked.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32923</IssueID>
    <RepoID>1</RepoID>
    <Title>Unused variable warning IDE0059 triggered on "discard"</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2

**Steps to Reproduce**:
```csharp
private void test()
{
    ReadOnlySequence&lt;byte&gt; a = default;
    var count = 0;
    foreach (var _ in a) // IDE0059 smudge here on _
        ++count;
}
```

**Expected Behavior**:
VS2017 doesn't show that and using `List&lt;byte&gt;` instead of the `ReadOnlySequence&lt;byte&gt;` doesn't either, so I'm not expecting to see this.

**Actual Behavior**:
IDE0059 is triggered and there's a light bulb is VS. However, trying to click the light bulb that appears when hovering the `_` with the mouse just makes it disappear instead of showing possible fixes. The light bulb at the line number just offers to suppress IDE0059 and unrelated code fixes (whitespace for example).

To my knowledge, this foreach loop is the only way to count the number of `ReadOnlyMemory&lt;byte&gt;` that make up the `ReadOnlySequence&lt;byte&gt;`, the `Length` property only counts the total number of bytes in the entire sequence.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32922</IssueID>
    <RepoID>1</RepoID>
    <Title>Need to handle array access in VisitLvalue</Title>
    <Description>VisitLvalue in NullableWalker need to have a special case for array access, so that oblivious is properly handled in the callers.  This will be an issue once we start tracking binary states per the specification.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32920</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix rootnamespce property name we received from project-system</Title>
    <Description>This would light up sync namespace refactoring fro CPS projects.

@dotnet/roslyn-ide @jasonmalinowski </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32919</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle ICoalesceAssignmentOperation in GetValueUsageInfo(operation) h…</Title>
    <Description>…elper

Fixes #32842</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32918</IssueID>
    <RepoID>1</RepoID>
    <Title>Make '^' operation nodes internal</Title>
    <Description>We plan to mark this as a non-user overridable unary operator in a later release, so this node should not be in the public API.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32917</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix verify</Title>
    <Description>
    </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32916</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove Mono CI --no-cache flag </Title>
    <Description>PR #32885 introduce the `--no-cache` flag to mono.sh due to a mono upgrade bug (https://github.com/dotnet/roslyn/pull/32885/files#diff-f3cb96ed939670f5061167bac0220bc8R25)

We should remove this after a sufficient time that all the machines have re-cycled the docker cache to no longer contain the bugger 5.21 install in their cache.

</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32915</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Language Feature Status.md</Title>
    <Description>
    </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32914</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Language Feature Status</Title>
    <Description>@jaredpar @agocke @RikkiGibson </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32913</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete a number of nullable test issues</Title>
    <Description>
    </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32912</IssueID>
    <RepoID>1</RepoID>
    <Title>Classify constructor/destructor as containing type</Title>
    <Description>In addition to fixing the case of qualified Attributes this also fixes qualified constructors in xml documentation cref.

Fixes #32817

Fixed the reported regression:
![image](https://user-images.githubusercontent.com/611219/52140257-23471b80-2607-11e9-8133-64b645100951.png)

Shows experience with QuickInfo and FAR:
![image](https://user-images.githubusercontent.com/611219/52140206-00b50280-2607-11e9-9f7d-e9d254005651.png)

</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32911</IssueID>
    <RepoID>1</RepoID>
    <Title>Test plan for "readonly members"</Title>
    <Description>Proposal: dotnet/csharplang#1710

This issue is a place to collect test ideas and track their validation. Use the [compiler test plan](
https://github.com/dotnet/roslyn/blob/master/docs/contributing/Compiler%20Test%20Plan.md) as a tool for brainstorming.

- [x] write speclet
- [x] update compiler test plan
- [x] validate with LangVersion 7.3

### Methods
- [x] struct instance methods
- [x] struct static methods (should error)
- [x] class/interface static/instance methods (should error)
- [x] ref/ref readonly returning methods
- [x] Inherited object members should be considered readonly
- [x] 'readonly partial' methods
- [x] 'readonly partial' where one of declaration or implementation is missing keyword (error)
- [x] `readonly` on `new ToString()`

### Properties
- [x] struct readonly getters
- [x] struct readonly setters (not auto-implemented)
- [x] struct static properties with readonly accessors (should error)
- [x] class/interface properties with readonly accessors (should error)
- [x] expression bodied properties `int P readonly =&gt; 42;` (should error)
- [x] indexers (allow)
- [x] readonly getter in a readonly property? (should be disallowed)
- [x] readonly on `int P { readonly get; set; }` allowed
- [x] getter implicitly readonly for all auto-props
- [x] `int P { readonly get; }` not allowed -&gt; `readonly int P { get; }`


### Misc
- [x] Constructors (disallow)
- [x] Operators (disallow)
- [x] Delegates (disallow)
- [x] Field-like events (disallow)
- [x] Manually implemented events (allow)
- [x] lambdas/local functions (error)
- [x] explicit interface implementations (should allow)
~~- [ ] SymbolDisplay on methods and property/indexer/event accessors~~ #34650
~~- [ ] IsDeclaredReadonly on ISymbol or IPropertySymbol/IMethodSymbol~~ #34213

### Semantic

- [x] Calling readonly methods from readonly methods
- [x] Calling non-readonly struct methods from readonly methods
- [x] Calling a non-readonly method on a reference type field from a readonly method
- [x] Variants of these which use different combinations of properties and methods
- [x] Assignment to `this`
- [x] Reference to instance fields in readonly member
    - [x] Assignment is an error
    - [x] Invocation w/ instance field as receiver causes copy when type is non-readonly struct
- [x] Invocation of non-readonly method or getter on `this` inside a `readonly` member causes copy and a warning. Non-readonly setter access on `this` or a value typed field is an error.
- [x] Unary increment/decrement operators on fields are errors
- [x] Compound assignment on fields is an error
- [x] Round-tripping through metadata
- [x] Error to take `ref` to `this` in `readonly` member
- [x] Property assignment:
  - [x] Disallow on non-readonly instance properties on `this` or value-typed fields
  - [x] Allow on static or readonly properties, or properties on reference-typed fields
  - [x] Compound assignment behavior should be consistent with a getter-then-setter access
https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLRKgEwPYDsA2AnqgLYQnAQLIA0MIAlvjZiANQA+AAgAwAEXAIwBuALAAoDDgKE+yGAjgBjGHwDKEgN4S+uvg1yqACn018A5hFVmuAdj49hAXzlXTfF0517vurgBY+AFkACgN1OQBKX1MYvT4YAAsGZAA6EwBePn8AJjFxePi0zOy8mK8Cn3EKiXlFFXUcrRiDY3dLawF7RxdkNzNPGJipPCIBQNDwtRy5HOjK3W0FwoB6FaSU9L4s3PzCvTXkHK2dsuX4gH1thOTivf2bzZM2LLP4iviJJyA=

### IDE
~~- [ ] Extracting a method from a `readonly` method should produce a `readonly` method~~ #34647
~~- [ ] Suggestion to make a member `readonly` when it is called on a `ref readonly` receiver~~ #34648
~~- [ ] WRN_ImplicitCopyInReadOnlyMember should have a suggestion to make the callee `readonly` if possible~~ #34649
~~- [ ] WRN_ImplicitCopyInReadOnlyMember should have a suggestion to make an explicit copy of the receiver~~ 
- [x] Offered in completion in existing member
~~- [ ] Metadata as source~~ #34650

### Major sections of work (ideally PRs will not cover more than one of these)
- [x] Parsing of `readonly` method and property syntax (mostly just testing)
- [x] IsReadOnly API on MethodSymbol
  - In the case of properties, is `prop.GetMethod.IsReadOnly` acceptable design, or is it confusing to have `prop.IsReadOnly` potentially return a different value than `prop.GetMethod.IsReadOnly`?
- [x] Flow analysis to prevent mutation of `this` in `readonly` member implementation
  - maybe the analysis used for `in` params or `readonly struct` can just be reused?
- [x] Error on invalid usage of `readonly`
  - Any method or property without a `this` parameter (i.e. statics)
  - Any member inside a non-struct declaration (i.e. class, interface)
- [x] Emit tests to demonstrate that expected metadata (IsReadOnly, modopt, modreq) and optimizations (reduced value copying) are present in IL

~~- [ ] Should some synthesized methods be marked as readonly? ([discussion](https://github.com/dotnet/roslyn/pull/34260#issuecomment-474994280))~~ #36587
- [x] Should we disallow readonly members on readonly structs, since redundant? Or maybe we create an IDE fixer?
  - Resolution: Should be allowed, based on the principle that changing `struct` to `readonly struct` on a type where all members are marked readonly shouldn't result in a compile error. </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32910</IssueID>
    <RepoID>1</RepoID>
    <Title>dotnet-format --dry-run</Title>
    <Description>Add a `--dry-run` argument to **dotnet-format**.

🚧 This change builds on #32909, and depends on #32907 for correct behavior on Roslyn.sln.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32909</IssueID>
    <RepoID>1</RepoID>
    <Title>Update System.Commandline in dotnet-format</Title>
    <Description>Update to System.CommandLine.Experimental 0.1.0-alpha-63729-01.

Fixes failure to recognize the `[parse]` argument, and aligns on newer APIs.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32908</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid touching files that didn't actually change</Title>
    <Description>Substantially improves the performance of **dotnet-format** when a solution is mostly already formatted.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32907</IssueID>
    <RepoID>1</RepoID>
    <Title>Add Newtonsoft.Json dependency to dotnet-format</Title>
    <Description>Fixes failure to resolve NuGet SDKs.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32906</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32905</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32904</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32903</IssueID>
    <RepoID>1</RepoID>
    <Title>A variable from tuple deconstruction offers "Use discard" refactoring even when captured in a local function</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2.0

**Steps to Reproduce**:
https://github.com/Tragetaschen/DbusCore/blob/a4c1292b3df5fb8885c94a153e7c82f32019e477/src/Dbus/Decoder.cs#L225
![image](https://user-images.githubusercontent.com/1947968/51894602-8c7d2380-23a8-11e9-8df9-0dbbf0147d72.png)


**Expected Behavior**:
The "Use discard" should not be offered

**Actual Behavior**:
The "Use discard" code fix creates invalid code.
![image](https://user-images.githubusercontent.com/1947968/51894541-52ac1d00-23a8-11e9-9683-5f22f513408b.png)
</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32902</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect code generation when using pattern matching causing an InvalidCastException</Title>
    <Description>**Version Used**: 
[3.0.0 Beta2 Final](https://www.nuget.org/packages/Microsoft.Net.Compilers/3.0.0-beta2-final)

**Steps to Reproduce**:

Compile the following C# program:

```csharp
namespace BingSNRCGRegressionRepro
{
    using System;
    using System.Collections.Generic;

    interface IBase
    {
    }

    interface IThing : IBase
    {
    }

    interface IExtended : IBase
    {
    }

    interface IA : IExtended
    {
        IList&lt;IThing&gt; Value { get; set; }
    }

    interface IB : IExtended
    {
        IList&lt;IThing&gt; Value { get; set; }
    }
    
    interface IC : IExtended
    {
        IList&lt;IThing&gt; Value { get; set; }
    }

    class Extended : IExtended
    {
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(DoWork(new Extended()).Count);
        }

        private static IList&lt;IThing&gt; DoWork(IExtended answer)
        {
            switch (answer)
            {
                case IA a when a.Value != null:
                    return a.Value;
                case IB a:
                    return a.Value;
                case IC a:
                    return a.Value;
                default:
                    return new List&lt;IThing&gt;();
            }
        }
    }
}
```


**Expected Behavior**:

```Prints 0.```

**Actual Behavior**:

```System.InvalidCastException: 'Unable to cast object of type 'BingSNRCGRegressionRepro.Extended' to type 'BingSNRCGRegressionRepro.IB'.'```</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32901</IssueID>
    <RepoID>1</RepoID>
    <Title>[NO MERGE] BitOps analysis Roslyn (WIP)</Title>
    <Description>Update call sites for https://github.com/dotnet/coreclr/pull/22225

Note that this PR will **not build** right now - it is being used to analyze the consolidation of call sites for https://github.com/dotnet/corefx/issues/32269.

cc @tannergooding </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32900</IssueID>
    <RepoID>1</RepoID>
    <Title>OptProf cleanup</Title>
    <Description>Infrastructure only change.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32899</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate top-level nullability rewriter.</Title>
    <Description>Generate a rewriter that will set the top-level nullability bits on `BoundExpression` given a map of expressions to TSWA.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32898</IssueID>
    <RepoID>1</RepoID>
    <Title>Issue 26640 Fix unnecessary cast warning in conditional expressions when required.</Title>
    <Description>For https://github.com/dotnet/roslyn/issues/26640

This makes the check for semantic changes look at the boxing result for the conditional expression - if it is boxed, the types being boxed should be the same in the original and speculated.  I'm not sure if this logic is correct, there might be case where this should not apply but I haven't thought of one.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32897</IssueID>
    <RepoID>1</RepoID>
    <Title>Classify C# 8 ControlKeywords</Title>
    <Description>- classify `switch` keyword within SwitchExpression
- classify `when` keyword within WhenClause
- classify `throw` keyword within ThrowExpression

Fixes #32896</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32896</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch keyword in switch expression is not classified as ControlKeyword</Title>
    <Description>Moved from [Developer Community issue](https://developercommunity.visualstudio.com/content/problem/437625/switch-keyword-in-switch-statement-is-not-colored.html):

The Preview 2 of Visual Studio 2019 brings an option to "use enhanced colors for C# and Basic", where flow-controlling keywords (`if`, `for`, `goto`, etc.) are colored pink. In the previously existing version of `switch` block the keyword switch is also colored as expected, however in the switch statement (in C# 8.0) the color of the keyword is still blue.

![image](https://user-images.githubusercontent.com/611219/51876622-116f2b00-231e-11e9-9489-6e4402def837.png)
</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32895</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail out for ref locals for unused value assignment analyzer</Title>
    <Description>We need points to analysis for properly analyzing unused assignments to ref locals, which is currently not supported.
Fixes #32855</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32894</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32893</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32892</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32891</IssueID>
    <RepoID>1</RepoID>
    <Title>Update usages of the source file name when copying a banner to a new file.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32792</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32890</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle string concat with no string literals in ConvertToInterpolatedString</Title>
    <Description>Fix #32864.

I have considered a few different options based on this particular scenario, e.g. 
```cs
var x = 1 + ("string");
```

1. Provide refactoring to convert it to 
```cs
var x = $"{1}{("string")}";
```

2. Provide refactoring that first removes unnecessary parentheses
```cs
var x = $"{1}string";
```

3. Don't offer to "convert to interpolated string". User must explicitly remove unnecessary parentheses first.

Option 1 is the simplest and most flexible (users might want the paren?). But once "convert to interpolated string" is selected first and then "remove paren", there's no way to flatten it to `${1}string` automatically.

Option 2 and 3 would avoid this problem by limiting the action user can take.

I ended up choosing Option 1 because (1) it's a very small change, with no behavior change to the refactoring, and (2) "flatten interpolated string" seems like a useful refactoring/codefix to have :)

@dotnet/roslyn-ide @CyrusNajmabadi 
</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32889</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpEditAndContinueAnalyzer.ClassifyUpdate of VariableDeclaratorSyntax. Cast exception on  (TypeDeclarationSyntax)oldNode.Parent.Parent.Parent;</Title>
    <Description>**Callstack reported**: 
```
System.InvalidCastException: Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax'.
   at Microsoft.CodeAnalysis.CSharp.EditAndContinue.CSharpEditAndContinueAnalyzer.EditClassifier.ClassifyUpdate(VariableDeclaratorSyntax oldNode, VariableDeclaratorSyntax newNode)
   at Microsoft.CodeAnalysis.CSharp.EditAndContinue.CSharpEditAndContinueAnalyzer.EditClassifier.ClassifyUpdate(SyntaxNode oldNode, SyntaxNode newNode)
   at Microsoft.CodeAnalysis.CSharp.EditAndContinue.CSharpEditAndContinueAnalyzer.EditClassifier.ClassifyEdit()
   at Microsoft.CodeAnalysis.CSharp.EditAndContinue.CSharpEditAndContinueAnalyzer.ReportSyntacticRudeEdits(List`1 diagnostics, Match`1 match, Edit`1 edit, Dictionary`2 editMap)
   at Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AnalyzeSyntax(EditScript`1 script, Dictionary`2 editMap, SourceText oldText, SourceText newText, DocumentId documentId, IActiveStatementTrackingService trackingService, ImmutableArray`1 oldActiveStatements, ActiveStatement[] newActiveStatements, ImmutableArray`1[] newExceptionRegions, List`1 updatedMethods, List`1 diagnostics)
   at Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.&lt;AnalyzeDocumentAsync&gt;d__65.MoveNext()
…
```

It seems that 
http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp.Features/EditAndContinue/CSharpEditAndContinueAnalyzer.cs,2491
should be changed from
 `   var fieldDeclaration = (FieldDeclarationSyntax)oldNode.Parent.Parent;`
to
`    var fieldDeclaration = (BaseFieldDeclarationSyntax)oldNode.Parent.Parent;`

We should add a unit test for this as well.
</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32888</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly members syntax and symbol API</Title>
    <Description>Modified syntax checks and added symbol API to support the readonly members feature. See dotnet/csharplang#1710.

I outlined how I think the entire development of this feature breaks down in #32911. Would also appreciate feedback on that.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32887</IssueID>
    <RepoID>1</RepoID>
    <Title>Verifying a number of NRT bugs are fixed</Title>
    <Description>Found a number of NRT bugs which are now fixed and added the appropriate verification. In the EE tests it was mostly ensuring the tests were run with the latest language version (now the default). </Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32886</IssueID>
    <RepoID>1</RepoID>
    <Title>ILRepack + EasyConsole makes code execution unreachable</Title>
    <Description>**Version Used**: 2.10.0.0

**Steps to Reproduce**:

1. Create a console application (.NET Framework).
2. Import [this NuGet package](https://www.nuget.org/packages/ILRepack.Lib.MSBuild.Task/).
3. Import [this source code](https://github.com/splttingatms/EasyConsole.git) into your newly created project.
4. Then create these three classes:

DemoProgram.cs
```
using EasyConsole;

namespace PoC
{
    internal class DemoProgram : Program
    {
        public DemoProgram()
            : base("EasyConsole Demo", breadcrumbHeader: true)
        {
            AddPage(new MainPage(this));
            AddPage(new ExamplePage(this));

            SetPage&lt;MainPage&gt;();
        }
    }
}
```

MainPage.cs
```
using EasyConsole;
using System;

namespace PoC
{
    public class MainPage : MenuPage
    {
        public MainPage(Program program)
        : base("Main Page", program,
          new Option("one", () =&gt; program.NavigateTo&lt;ExamplePage&gt;()),
          new Option("two", () =&gt; program.NavigateTo&lt;ExamplePage&gt;()),
          new Option("three", () =&gt; program.NavigateTo&lt;ExamplePage&gt;()),
          new Option("Exit", () =&gt; Environment.Exit(0)))
        {
        }
    }
}
```

ExamplePage.cs
```
using EasyConsole;
using System.Linq;

namespace PoC
{
    public class ExamplePage : MenuPage
    {
        public ExamplePage(Program program)
            : base("Example Page", program, Enumerable.Range(0, 3).Select(i =&gt; new Option($"Option {i}", null)).ToArray())
        {
        }
    }
}
```

5. Navigate to `Program.cs` inside of `&lt;your EasyConsole lib path&gt;\Program.cs`, and put a breakpoint in line 98.

6. Compile in Release mode and then execute it.

7. Navigate to any page (by typing 1, 2 or 3), then, let the breakpoint enter in action.

8. Start pressing F10 (next step).

**Expected Behavior**:

You should be able to put the execution step at `CurrentPage.Display();` line (this will read another input, by this reason this will never reach the return statement).

**Actual Behavior**:

Before Display() is reached, execution is ended. Also, you can try to put a `Console.WriteLine("something")` after Console.Clear() and this will not be outputted in the screen.

If you remove ILRepack.MSBuild.Task package or you change to `Debug Mode` (the .targets file inside this package has defined a condition, ILRepack will only execute if `Release Mode` is selected), as you can see here:

`Condition="$(Configuration.Contains('Release')) and !Exists('$(ILRepackTargetsFile)') and '$(ClearOutputDirectory)' != 'False'"`

In line 32 from `packages\ILRepack.Lib.MSBuild.Task.2.0.16\build\ILRepack.Lib.MSBuild.Task.targets`.

This behavior will not happen. This happens as soon as you use ILRepack.

</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32885</IssueID>
    <RepoID>1</RepoID>
    <Title>update mono-devel in dockerfile, and don't cache later commands</Title>
    <Description>This fixes a couple of related Mono CI things:

1. Pass --debug on the command line for future debugging:
    - We invoke xunit via arcade, which has limited extensibility points. I've hooked in a target with a bit of quote foo to enable it. It's not very pretty, I'll open a separate bug on Arcade to let us do this in the future more elegantly.

2. Docker compose caches layers, causing out of date mono builds:
    - We grab mono as part of the docker container build out. If the underlying machines hang around for a while, we'll never rebuild due to caching. 
    - This PR adds a dummy arg to the dockerfile that we pass in as current datetime; this allows us to cache up to that point, then always rebuild afterwards (see https://github.com/moby/moby/issues/1996)
    - We add a new apt-get update/upgrade pair after the dummy arg, so we'll always update mono to the latest regardless of caching, but its much quicker than always rebuilding from scratch 

3. A mono upgrade bug between 5.21 and 5.23 breaks `apt-get update`:
    - Sadly we hit this bug (https://github.com/mono/mono/issues/12316) upgrading between our cached images and latest
    - For now we need to rebuild docker images from scratch in order to flush out the earlier build from all of our build machines 
    - When all the machines in the pool have cycled through we can remove the `--no-cache` option and just do an incremental update (bullet 2). 
</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32884</IssueID>
    <RepoID>1</RepoID>
    <Title>Address minor issues identified in review #32431.</Title>
    <Description>Fixes #32807</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32883</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail out on reporting unused parameter diagnostic for special paramet…</Title>
    <Description>…er names

We ignore parameter names that start with an underscore and are optionally followed by an integer, such as `_`, `_1`, `_2`, etc.
This allows bailing out on unused parameters for methods that need a specific signature and are forced to have these parameters. This also serves as a convenient way to suppress instances of unused parameter diagnostic without disabling the diagnostic completely.

Fixes #32851
Fixes #32228</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32882</IssueID>
    <RepoID>1</RepoID>
    <Title>Pattern matching with ValueTuple causes Compiler Error </Title>
    <Description>**Version Used**: 
Microsoft (R) Visual C# Compiler version 2.10.0.0 (b9fb1610)

**Steps to Reproduce**:

Add a case statement to a switch statement that checks for a ValueTuple&lt;bool, string&gt; and checks for the value of Item1 e.g.,

```c#

switch (val)
{
  case ValueTuple&lt;bool,string&gt; t when t.Item1 == true
    // do stuff
    break;
  // extraneous code omitted
}
```

Note that val is of type object.

The error can be overcome by two different syntax changes:
1. Move the value checking logic from the case and into the case body:

```c#
case ValueTuple&lt;bool,string&gt; t:
if (t.Item1 == true) do stuff...
```

2. Change equality `==` to `is` e.g., `case ValueTuple&lt;bool,string&gt; t when t.Item1 is true`

**Expected Behavior**:
Code should compile

**Actual Behavior**:
1&gt;Build FAILED.
1&gt;
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error MSB6006: "csc.exe" exited with code -2146232797.
1&gt;    0 Warning(s)
1&gt;    1 Error(s)
1&gt;
1&gt;Time Elapsed 00:00:04.04
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32881</IssueID>
    <RepoID>1</RepoID>
    <Title>Representation of suppression in IOperation</Title>
    <Description>With the change to remove the bound suppression node, the corresponding IOperation node was removed.
A few options:
- represent the suppression as a flag (like we do in the bound tree)
- inject some IOperation nodes back in</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32880</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail on null type information in GenerateDeconstructMethodCodeFixProvider</Title>
    <Description>It's possible that a valid foreach statement has an invalid variable declaration syntax, which can result in no type information on calling `GetForEachStatementInfo`

Fixes #32510 </Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32879</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect possible dereference of a null reference warning in case of 'x ?? throw' null check</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.0
VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code
```cs
#nullable enable
class C
{
  void Test(string? s)
  {
    _ = s ?? throw new System.ArgumentNullException(nameof(s));
    s.ToString();
  }
}
```

**Expected Behavior**:
No warnings. `s` is explicitly checked for null and if it's null an exception is throw on the first line. It's impossible for `s` to hold a null value on the second line.

**Actual Behavior**:
Incorrect `Possible dereference of a null reference` warning for `s.ToString()`
</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32878</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove redundant pattern check</Title>
    <Description>
    </Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32877</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing warnings for nullable references under `throw` statement/expression</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.0
VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C
{
  void M1() =&gt; throw null;
  void M2(System.Exception? ex = null) =&gt; throw ex;
}
```

**Expected Behavior**:
Nullable reference types warnings e.g. `Possible dereference of a null reference` for `throw null` and `throw ex` expressions.

**Actual Behavior**:
No warnings
</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32876</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix assertion in UsePatternMatching analyzer</Title>
    <Description>Hit this a couple of times while testing.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32875</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32874</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32873</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32872</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32871</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32870</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32869</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32868</IssueID>
    <RepoID>1</RepoID>
    <Title>Hardcode OptProf Drop Name not Drop object</Title>
    <Description>Ran a [signed build](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2363299) this time to ensure it was correct. </Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32867</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32866</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP Merge dev16.0-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32865</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32864</IssueID>
    <RepoID>1</RepoID>
    <Title>"Sequence contains no matching element" in ConvertToInterpolatedString</Title>
    <Description>**Version Used**: Preview 2.0

Press Ctrl+. anywhere from `$` to `)`:

```cs
class C
{
    void M()
    {
        _ = $"foo" + ("bar");
    }
}
```

Gives:

![image](https://user-images.githubusercontent.com/8040367/51810644-2644b380-2277-11e9-9ce0-94638239316c.png)

```
System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source,Func`2 predicate)
   at async Microsoft.CodeAnalysis.ConvertToInterpolatedString.AbstractConvertConcatenationToInterpolatedStringRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32863</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32862</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32861</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32860</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32859</IssueID>
    <RepoID>1</RepoID>
    <Title>Introduce a new 'wrap binary expression' (without alignment) refactoring.</Title>
    <Description>Implements https://github.com/dotnet/roslyn/issues/32830
Followup to https://github.com/dotnet/roslyn/pull/32858

This gives users the option to both 'wrap' and 'wrap and align' a binary expression.  The difference between the two can be seen in cases like this:

![image](https://user-images.githubusercontent.com/4564579/51808161-262bc000-2245-11e9-93a4-d397118e5201.png)

![image](https://user-images.githubusercontent.com/4564579/51808168-33e14580-2245-11e9-9fc5-49e9cbe29bb5.png)

'Wrap expression' wraps as if the user hit 'enter' at each operator.  i.e. it will do whatever 'smart indent' would do.

'Wrap and align expression' wraps the individual parts of the expression, but aligns them with the start of the expression.

The former is for those who just want to speed up the act of pressing 'enter' a lot, and who want whatever default indentation VS would do.  The latter is for people who want the indentation to more clearly indicate the parent/child relationship between the wrapped parts.

</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32858</IssueID>
    <RepoID>1</RepoID>
    <Title>Add helpers to make it easy to compute smart-indenting in wrapping refactoring.</Title>
    <Description>
    </Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32857</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix dev div insertion files unsigning</Title>
    <Description>Corrects logic in DevDivInsertionFiles.csproj - separate assembly re-signing of libraries that we need to do to enable ResultProvider to run on Win10S from optimization data embedding. Previous thinking was that we can exploit optimization data embedding to force resigning with Win10S, but that does not work. We can only apply optimization data on assemblies we train against, and we don't train libraries loaded msvsmon process. 

Actually fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/755193.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32856</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove redundant assignment fails to handle 'if' conditions without a block</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

**Steps to Reproduce**:

```csharp
class Test
{
  int[] data = { 0 };

  void Method()
  {
    ref int target = ref data[0];
    if (target != 1)
      target = 1;
  }
}
```

With the caret on `target = 1;`, attempt to apply the **Remove redundant assignment** code fix.

**Expected Behavior**:

```csharp
class Test
{
  int[] data = { 0 };

  void Method()
  {
    ref int target = ref data[0];
    if (target != 1)
    {
    }
  }
}
```

**Actual Behavior**:

```text
System.ArgumentNullException : Value cannot be null.
Parameter name: statement
   at Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(SyntaxToken ifKeyword,SyntaxToken openParenToken,ExpressionSyntax condition,SyntaxToken closeParenToken,StatementSyntax statement,ElseClauseSyntax else)
   at Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Update(SyntaxToken ifKeyword,SyntaxToken openParenToken,ExpressionSyntax condition,SyntaxToken closeParenToken,StatementSyntax statement,ElseClauseSyntax else)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIfStatement(IfStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.SyntaxRemover.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(BlockSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.SyntaxRemover.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMethodDeclaration(MethodDeclarationSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.SyntaxRemover.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassDeclaration(ClassDeclarationSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.SyntaxRemover.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.SyntaxRemover.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.RemoveNodes[TRoot](TRoot root,IEnumerable`1 nodes,SyntaxRemoveOptions options)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.RemoveNodesCore(IEnumerable`1 nodes,SyntaxRemoveOptions options)
   at Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNode[TRoot](TRoot root,SyntaxNode node,SyntaxRemoveOptions options)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.RemoveNodeInternal(SyntaxNode root,SyntaxNode declaration,SyntaxRemoveOptions options)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.&lt;&gt;c__DisplayClass196_0.&lt;RemoveNode&gt;b__0(SyntaxNode r)
   at Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PreserveTrivia[TNode](TNode node,Func`2 nodeChanger)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.RemoveNode(SyntaxNode root,SyntaxNode node,SyntaxRemoveOptions options)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.RemoveChange.Apply(SyntaxNode root,SyntaxGenerator generator)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()
   at async Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedValuesCodeFixProvider`11.FixAllAsync[TExpressionSyntax,TStatementSyntax,TBlockSyntax,TExpressionStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TForEachStatementSyntax,TSwitchCaseBlockSyntax,TSwitchCaseLabelOrClauseSyntax,TCatchStatementSyntax,TCatchBlockSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
```
</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32855</IssueID>
    <RepoID>1</RepoID>
    <Title>Unused value assignment analysis doesn't handle ref locals</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

Found while working on https://github.com/tonerdo/coverlet/pull/309

**Steps to Reproduce**:

```csharp
class Test
{
  int[] data = { 0 };

  void Method()
  {
    ref int target = ref data[0];
    target = 1;
  }
}
```

**Expected Behavior**:

IDE0059 is not reported for the assignment.

**Actual Behavior**:

IDE0059 is reported for the assignment.
</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32854</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32853</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32852</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 - Remove unused parameter should not fire for user-defined operators</Title>
    <Description>Removing the parameter isn't an option when it's required. Compare this to the case of implementing an interface and not using a parameter, which is fine and doesn't cause IDE0060 to fire.

```csharp
class Op
{
    // IDE0060 - Remove unused parameter
    public static Op operator -(Op op) =&gt; throw new NotImplementedException();
}
```</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32851</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 - Remove unused parameter for internal method referenced by a delegate in another type</Title>
    <Description>This warning fires incorrectly when the method is used in a method group conversion from another type, as shown below with `Bar.Foo` referenced from `Baz`.

```csharp
class Baz
{
    private static readonly Action&lt;int&gt; s_foo = Bar.Foo;
}

class Bar
{
    // IDE0060 - Remove unused parameter
    internal static void Foo(int unused) { }
}

class Qux
{
    private static readonly Action&lt;int&gt; s_foo = Foo;

    // No warning
    internal static void Foo(int unused) { }
}
```</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32850</IssueID>
    <RepoID>1</RepoID>
    <Title>Use flag to represent suppression in bound tree</Title>
    <Description>This PR addresses some issues with the suppression operator. It does not address tuple scenarios or the semantic model.
Compared to https://github.com/dotnet/roslyn/pull/32699 which added many special cases based on bound node for suppression, this PR drops the suppression node from the bound tree and represents suppression as a flag.

Fixed a number of crashes
Fixes https://github.com/dotnet/roslyn/issues/29862 (top-level nullability of !)
Fixes https://github.com/dotnet/roslyn/issues/29903 (`t! = s` should be an error)
I also noticed that we skipped some warnings in cast scenarios (latest [LDM notes](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-08-20.md#11-suppression-of-nested-nullability) on the topic)
Fixes https://github.com/dotnet/roslyn/issues/31294 (`throw null!;` isn't allowed)
Fixes https://github.com/dotnet/roslyn/issues/29905
Fixes https://github.com/dotnet/roslyn/issues/29906

Follow-ups:
- We'll need to refine where suppressions are allowed (I probably made more cases illegal than strictly necessary, for now)
- https://github.com/dotnet/roslyn/issues/29710 (analysis of ref re-assignment and CheckValueKind)
- https://github.com/dotnet/roslyn/issues/31297 (escape rules and suppressions)
- https://github.com/dotnet/roslyn/issues/32553 (suppressions on tuple literals)
- https://github.com/dotnet/roslyn/issues/32364 (nullable and dynamic)
- https://github.com/dotnet/roslyn/issues/32661 (follow-up on semantic model on suppressed expressions)
- https://github.com/dotnet/roslyn/issues/32697 (need to re-analyze method group conversions)
- https://github.com/dotnet/roslyn/issues/32698 (need to analyze delegate creations)
- https://github.com/dotnet/roslyn/issues/32844 (need to analyze default parameter values better)
- https://github.com/dotnet/roslyn/issues/32881 (represent suppressions in IOperation)

Notes:
- Although I ended up removing the IOperation test I'd added, I adjusted the comparison logic for IOperation assertions to tolerate whitespaces</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32849</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32848</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32847</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32846</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32845</IssueID>
    <RepoID>1</RepoID>
    <Title>Performance improvements for formatting analyzer</Title>
    <Description>Recommended review strategy: review each commit.

On request I can easily break up the pull request to simplify review of individual changes, but keep in mind nearly all of the *observable* performance improvement comes from the final changes in the PR.

Times prior to this change:

* 46150ms
* 46215ms
* 47086ms

Times with `IFormattingRule` replaced with `AbstractFormattingRule` (eliminate interface dispatch):

* 46215ms
* 45208ms
* 45355ms

&lt;details&gt;&lt;summary&gt;Times with virtual dispatch and elimination of &lt;tt&gt;ThreadLocal&amp;lt;List&amp;lt;T&amp;gt;&amp;gt;&lt;/tt&gt;:&lt;/summary&gt;

Moved to #32952 

* 45618ms
* 44991ms
* 46964ms

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;Times with above plus &lt;tt&gt;IndentationOptions&lt;/tt&gt;:&lt;/summary&gt;

Change is not included in this pull request.

* 48296ms
* 45684ms
* 44475ms

&lt;/details&gt;

&lt;br/&gt;

Times with generics expanded to per-operation non-generic types.

* 40041ms
* 40309ms
* 41543ms</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>09/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32844</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable analysis of default parameter values</Title>
    <Description>We currently do a simple, but incomplete, analysis of default parameter values.

```C#
        [WorkItem(26626, "https://github.com/dotnet/roslyn/issues/26626")]
        [Fact]
        public void ParameterDefaultValue_02()
        {
            var source =
@"class C
{
    const string? S0 = null;
    static void F0(string s = null!) { }
    static void F1(string x = (string)null!, string y = ((string)null)!) { }
    static void F2(string x = default!, string y = default(string)!) { }
    static void F3(string s = (S0!)!) { }
    static void M()
    {
        F0();
        F1();
        F2();
        F3();
        F1(x: null);
        F1(y: null);
        F2(null!, null);
    }
}";
            // TODO2 we should warn on the conversion of `null` to `string` in `(string)null`
            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics(
                // (14,15): warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.
                //         F1(x: null);
                Diagnostic(ErrorCode.WRN_NullAsNonNullable, "null").WithLocation(14, 15),
                // (15,15): warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.
                //         F1(y: null);
                Diagnostic(ErrorCode.WRN_NullAsNonNullable, "null").WithLocation(15, 15),
                // (16,19): warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.
                //         F2(null!, null);
                Diagnostic(ErrorCode.WRN_NullAsNonNullable, "null").WithLocation(16, 19)
                );
        }
```</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32843</IssueID>
    <RepoID>1</RepoID>
    <Title>Captures Invalid Dimensions from an array variable declaration.</Title>
    <Description>Initially this pull request enables the dimensions specified in error in a variable declaration such as this:

```csharp
int[10] x;
```
To be captured in a `BoundTypeExpression` as `BoundDimensionsOpt`, and to be consumed via an added `IgnoredDimensions` Property in `IVariableDeclarationOperation`.

See #32464

In future pull requests I may look at including support for capturing the invalid dimensions in:

- parameters
- foreach and for loop variables
- typeof expressions
- type arguments
- is type expressions
- casts
- as expressions
- Return types
- Field types 
etc.

It is unlikely that I will do all of these however, so suggestions as to which would be highest priority would be useful.
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32842</IssueID>
    <RepoID>1</RepoID>
    <Title>Null Coalescing Assignment: Compiler should not report IDE0052 when assigning a value to a property backing field</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

**Steps to Reproduce**:
When using the new null coalescing assignment operator to initialize a field used as the backing store for a property, message IDE0052 is reported for the backing field.

For example:
```c#
private Foo _foo1; // Message IDE0052: Private member '_foo1' can be removed as the value assigned to it is never read.
public Foo Foo1 =&gt; _foo1 ??= new Foo();

private Foo _foo2; // No message when using this kind of conditional assignment construction
public Foo Foo2 =&gt; _foo2 ?? (_foo2 = new Foo());
```

**Expected Behavior**:
No message is reported.

**Actual Behavior**:
Message IDE0052 is reported.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32841</IssueID>
    <RepoID>1</RepoID>
    <Title>Updated version to 3.0.0 beta 4</Title>
    <Description>
    </Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32840</IssueID>
    <RepoID>1</RepoID>
    <Title>Resources.Designer.cs bug</Title>
    <Description>This bug only appear when the language of VS is Chinese.

**Version Used**: VS2017 15.9.6

**Steps to Reproduce**:

1.  Create a WinForm project, and open Resources.Designer.cs, if the language is English, the summary of Culture property is:
```
        /// &lt;summary&gt;
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// &lt;/summary&gt;
```
If the language is Chinese, the summary of Culture property is:
```
        /// &lt;summary&gt;
        ///   覆盖当前线程的 CurrentUICulture 属性
        ///   使用此强类型的资源类的资源查找。
        /// &lt;/summary&gt;
```
2. Double click Resources.resx, and write any thing in String1.

**Expected Behavior**:
If the language is English, the summary doesn't change, but If the language is Chinese, it will become to:
```
        /// &lt;summary&gt;
        ///   重写当前线程的 CurrentUICulture 属性
        ///   重写当前线程的 CurrentUICulture 属性。
        /// &lt;/summary&gt;
```
There're same text in 2 lines.

**Actual Behavior**: Don't change, keep:
```
        /// &lt;summary&gt;
        ///   覆盖当前线程的 CurrentUICulture 属性
        ///   使用此强类型的资源类的资源查找。
        /// &lt;/summary&gt;
```
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32839</IssueID>
    <RepoID>1</RepoID>
    <Title>Language service shows non-accessible protected setters inside object initializers</Title>
    <Description>**Version Used**:

Visual Studio Enterprise 2017 version 15.9.4 / VisualStudio.15.Release/15.9.4+28307.222
C# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a

**Steps to Reproduce**:

1. Write an abstract class A with a public property that has a public getter and a protected setter.
2. Write a non-abstract class B that inherits from A.
3. In a class C that doesn't inherit from A or B, instantiate a class B and hit [Ctrl]+[Space] inside the object initializer.

**Expected Behavior**:
Do not show properties with protected setters.

**Actual Behavior**:
Showing properties with protected setters.

![image](https://user-images.githubusercontent.com/13019179/51789038-f492f600-216b-11e9-84cd-fa46689d7722.png)

```cs
namespace X
{
    class Y
    {
        Animal[] animals = new Animal[]
        {
            new Dog
            {
                Name = "Leo", // error
            },
            new Dog
            {
                /* [Ctrl]+[Space] here */
            }
        }
    }

    abstract class Animal
    {
        public string Type { get; }
        public string Name { get; protected set; }
    }

    class Dog : Animal
    {

    }
}
```
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32838</IssueID>
    <RepoID>1</RepoID>
    <Title>Object browser does not render &lt;br/&gt;</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/176321

**Steps to Reproduce**:

1. Attempt to write a documentation comment with a line break that is _not_ a paragraph break using `&lt;br/&gt;`
2. View the documentation comment in Object Browser

**Expected Behavior**:

The `&lt;br/&gt;` is rendered as a line break that is not a paragraph break.

**Actual Behavior**:

The `&lt;br/&gt;` is ignored. Attempting to use `&lt;para&gt;` as an alternative creates a paragraph break.
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32837</IssueID>
    <RepoID>1</RepoID>
    <Title>C# console app, turn virtual space on</Title>
    <Description>**Version Used**: Visual Studio 2015

Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/173194

**Steps to Reproduce**:

C# console app, turn virtual space on.

Main(null); |

press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Backspace&lt;/kbd&gt; couple of times to get rid of the null

**Expected Behavior**:

Main(|

like in previous Visual Studio version. 

**Actual Behavior**:

Main( |
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32836</IssueID>
    <RepoID>1</RepoID>
    <Title>The color of links when using the dollar sign operator is wrong</Title>
    <Description>Affected Branch: 
Affected Build: 
Affected Product Language: 

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/172884

Steps to reproduce:

1. create a console app with the following

```csharp
class Program
{
    static void Main(string[] args)
    {
        var x = "value";
        var text = $"http://test/{x}/test";
    }
}
```

expected: the link is not blue
expected: clicking on the link does nothing
actual: this link is blue
actual: clicking on the link takes you to the url</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32835</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot comment code with 'REM'</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

:link: Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/159051

**Steps to Reproduce**:

Type `REM` to start a line comment in VB.

**Expected Behavior**:

Autocomplete does not replace `REM` when &lt;kbd&gt;Space&lt;/kbd&gt; is pressed.

**Actual Behavior**:

Autocomplete replaces `REM` with `RemoveHandler` when &lt;kbd&gt;Space&lt;/kbd&gt; is pressed.
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32834</IssueID>
    <RepoID>1</RepoID>
    <Title>Absent Public API </Title>
    <Description>The following public api isn't in either of the PublicAPI files.
```vbnet
Public Shared ReadOnly Property [Default] As VisualBasicParseOptions = New VisualBasicParseOptions()
```
[VisualBasicParseOptions.vb](https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Portable/VisualBasicParseOptions.vb#L17).

This is due to how the exist DeclarePublicAPIAnalyzer works, I am implementing an update to recognise auto-implemented properties. It also raises another question, should the analyser recognise changes to `ReadOnly` / `WriteOnly` of a property? 
eg
```
Public Property [Property]() As Integer
' to
Public ReadOnly Property [Property]() As Integer
```
or visa-versa?

If it did it would produce thousand of diagnostics against the Roslyn code base, as it currently isn't being accounted for.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32833</IssueID>
    <RepoID>1</RepoID>
    <Title>I would like to have the "base"-element in the "local/QuickWatch"-window back</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/151529

**Steps to Reproduce**:

```csharp
class A
{
    int Value { get; }
}

class B : A
{
}
```

Add `new B()` to the **Quick Watch** window, or see a local variable of type `B` in the **Locals** window.

**Expected Behavior**:

The inherited `A.Value` property is hidden under a **base** node in the debugger tree.

**Actual Behavior**:

The `Value` property shows as a child of `B`.
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32832</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider using IBlankLineIndentationService as a language service</Title>
    <Description>Obtaining `IBlankLineIndentationService` as a language service could avoid the need for language-specific overrides.

Originally requested in https://github.com/dotnet/roslyn/pull/32809#discussion_r251176526.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32831</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid creating instances of IBlankLineIndentationService on-the-fly</Title>
    <Description>`CSharpIndentationService` and `VisualBasicIndentationService` are stateless, but instances of these types are created on-the-fly in refactorings. Consider using a singleton instance instead.

Originally requested in https://github.com/dotnet/roslyn/pull/32809#discussion_r251176464</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32830</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider supporting column-aligned indentation levels when wrapping binary expressions</Title>
    <Description>**Version Used**: Master branch once #32809 is merged

**Steps to Reproduce**:

Wrap the binary expression in the following code:

```csharp
while (a &amp;&amp; b)
{
}
```

**Expected Behavior**:

Users should have an option to wrap the expression with wrapped sub-expressions aligned to the original expression, like this:

```csharp
while (a &amp;&amp;
       b)
{
}
```

**Actual Behavior**:

Users only have the option to wrap the expression the way Smart Indent would wrap the expression when pressing &lt;kbd&gt;Enter&lt;/kbd&gt;.

```csharp
while (a &amp;&amp;
    b)
{
}
```
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>09/06/2019</ClosedDate>
  </Issue>
</Issues>
<Issues>
  <Issue>
    <IssueID>35381</IssueID>
    <RepoID>1</RepoID>
    <Title>`SourcePropertySymbol` constructor sometimes sets the property twice</Title>
    <Description>In some error scenarios (bad overrides) we set the type of the property a second time.
The problem is that the first type matters (it causes side-effects) which are not undone when the type is set the second time.

See the constructor for `SourcePropertySymbol`:
```csharp

                    // We do an extra check before copying the type to handle the case where the overriding
                    // property (incorrectly) has a different type than the overridden property.  In such cases,
                    // we want to retain the original (incorrect) type to avoid hiding the type given in source.
                    if (type.Type.Equals(overriddenPropertyType.Type, TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamic))
                    {
                        type = type.WithTypeAndModifiers(
                            CustomModifierUtils.CopyTypeCustomModifiers(overriddenPropertyType.Type, type.Type, this.ContainingAssembly),
                            overriddenPropertyType.CustomModifiers);

                        // Although we only do this in error scenarios, it is undesirable to mutate the symbol by setting its type twice.
                        // Tracked by https://github.com/dotnet/roslyn/issues/35381
                        Interlocked.Exchange(ref _lazyType, null);
                        Interlocked.CompareExchange(ref _lazyType, new StrongBox&lt;TypeWithAnnotations&gt;(type), null);
                    }

```</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35380</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35379</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35378</IssueID>
    <RepoID>1</RepoID>
    <Title>Design new interface between Project System and Roslyn</Title>
    <Description>#### WIP Proposal

Project System:

```C#
// MEF interface: exported by language services, imported by Project System
public interface IProjectChangeListener
{   
   void EvaluationCompleted(ProjectSnapshotId project, ProjectEvaluationResults results); 

   // Triggered on any change to the build inputs, including change in a source file, metadata 
   // reference, etc.
   void BuildCompleted(ProjectSnapshotId project, ProjectBuildKind kind, ProjectBuildResults results);
}


// Uniquely identifies project and its complete state --
// all the inputs to the build (the content of files, references, etc.).
// For now, it can be a full file path to the proj file. In future we would add a snapshot checksum.
public readonly struct ProjectSnapshotId
{
   string ProjectPath { get; }
   Checksum Checksum { get; }
}

public enum ProjectBuildKind 
{
  DesignTime,
  Full
}

public readonly struct ProjectEvaluationResults
{
   // Values of properties and items that the class exporting IProjectChangeListener asked for via export metadata.
   bool TryGetPropertyValue(string name, out string value);
   bool TryGetItems(string name, out ImmutableArray&lt;ProjectBuildItemValue&gt; values);
}

public readonly struct ProjectBuildItemValue
{
  bool TryGetMetadata(string name, out string value);
}

public readonly struct ProjectBuildResults 
{
  // Complete command line as returned by the compiler build task (e.g. csc).
  string CompilerCommandLine { get; }
  
  // Paths listed in the command line that correspond to P2P references.
  ImmutableArray&lt;string&gt; ProjectReferences { get; }

  // Values of properties and items that the class exporting IProjectChangeListener asked 
  // for via export metadata.
  bool TryGetPropertyValue(string name, out string value);
  bool TryGetItems(string name, out ImmutableArray&lt;ProjectBuildItemValue&gt; values);
}

// Design-time build phases
public enum ProjectBuildPhase
{
  Evaluation,
  Build,
}

// MEF metadata describing what properties does IProjectChangeListener implementation read.
public ReadsProjectBuildProperty : Attribute
{
  string Name { get; set; }

  // After what phase is this property read.
  ProjectBuildPhase { get; set; }
}

// MEF metadata describing what items does IProjectChangeListener implementation read.
public ReadsProjectBuildItem : Attribute
{
  string Name { get; set; }

  // After what phase is this property read.
  ProjectBuildPhase { get; set; }
}
```

Roslyn:
```C#
[Export(typeof(IProjectChangeListener))]
[ReadsProjectBuildProperty("Foo", ProjectBuildPhase.Evaluation)]
[ReadsProjectBuildItem("Bar", ProjectBuildPhase.Build)]
internal sealed class ProjectChangeListener : IProjectChangeListener
{
   void EvaluationCompleted(ProjectSnapshotId project, ProjectEvaluationResults results)
   {
     // apply changes to the project
   }

   void DesignTimeBuildCompleted(ProjectSnapshotId project, ProjectBuildResults results)
   {
     // apply changes to the project
   }

   void FileContentChanged(ProjectSnapshotId project, string changedFilePath) 
   {
     // ...
   }
}

```</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35377</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor WrappingFormattingRule.cs to add suppression operation based on option</Title>
    <Description>Currently, we are adding all suppression rules first and then removing some suppressions based on option.

Per comments posted by @heejaechang in https://github.com/dotnet/roslyn/pull/34959, we should change the code to instead add suppression options based on option.
</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35376</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove custom entry point finder from Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractEntryPointFinder</Title>
    <Description>Use `Compilation.GetEntryPoint` instead.

Also, use `IEntryPointFinderService` MEF component in `ICSharpProjectSite.GetValidStartupClasses` `IVbCompilerProject.GetEntryPointsList` and move the MEF component to Features.

Update the interface to take a ProjectId instead of a symbol. So that `GetValidStartupClasses` and `GetEntryPointsList` do not access symbols directly.</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35375</IssueID>
    <RepoID>1</RepoID>
    <Title> Revert two step initialization of constraints</Title>
    <Description>Closes #28834.
Closes #30061.</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35374</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove CSharpCompilation.WithAdditionalFeatures</Title>
    <Description>Compilation.Features is, by design, supposed to be the a copy of the Features of all of the syntax trees, which are supposed to be the same as each other.  This is checked when the compilation is created.  If they are not the same, we throw `throw new ArgumentException(CodeAnalysisResources.InconsistentSyntaxTreeFeature, nameof(trees))`.

The recently introduced (nonpublic) method `CSharpCompilation.WithAdditionalFeatures` breaks these invariants.  In disaligns the features on the syntax trees with the features in the compilation.  This method should be removed, or alternately it should reparse the input with the new features. Ideally clients of this API should have parsed using the desired features in the first place.
</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>05/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35373</IssueID>
    <RepoID>1</RepoID>
    <Title>Use more robust initialization for TypeWithAnnotations.Builder</Title>
    <Description>FYI @jaredpar @agocke @stephentoub 

May fix https://github.com/dotnet/roslyn/issues/35290 </Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35372</IssueID>
    <RepoID>1</RepoID>
    <Title>SolutionEventsBatchScopeCreator._isSubscribedToSolutionEvents is always false</Title>
    <Description>Dead code:

https://github.com/dotnet/roslyn/blob/defeca5d0e44915fc978cfd93d3de2e4a6d0dbf4/src/VisualStudio/Core/Def/Implementation/ProjectSystem/Legacy/SolutionEventsBatchScopeCreator.cs#L109-L125</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35371</IssueID>
    <RepoID>1</RepoID>
    <Title>Ctor Initializer normalization is inconsistent with neighboring areas like class decl lists</Title>
    <Description>I present the issue by contrast, when I specify a class declaration without trivia then request ``.NormalizeWhitespace()``, I get something like this for a class declaration, which is what I would expect, focus on the colon normalization:

```C#
public class A : B
//            ^^^ I would expect this.
{
   // ...
}
```

However, when I generate a constructor, the constructor initializer does not normalize quite like I would expect, we get this:

```C#
public A(int value): base(value)
//                 ^^ I would not expect this.
{
}
```

The behavior is similar regardless of the *Constructor Initializer*:

```C#
public A(int value): this(value)
{
}
```

I could intercede, possibly, and inject trivia bits, but I'd like not to have to do that for a code generator. I'd rather focus on the business at hand and let the normalization (policies?) handle those issues correctly, or at least as expected, transparently.

By comparison/contrast, typically this formatting is expected:

```C#
public A(int value) : base(value)
//                 ^^^ I would expect this.
{
}
```

For that matter, perhaps new line plus indentation might be a better policy.

Also, if the gitter discussion is any indication, let's not confuse these contexts with others in which ``colon`` is a necessary token in the syntax, i.e. ``switch (x) { case y: ... }``.

Short of a bug fix, is there a way to specify the normalization policy?</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35370</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge nested stackalloc into master</Title>
    <Description>Merge previously reviewed nested stackalloc implementation into master.
</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35369</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35368</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35367</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master into features/nested-stackalloc</Title>
    <Description>
    </Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35366</IssueID>
    <RepoID>1</RepoID>
    <Title>Warn using Begin/End Invoke targeting a runtime that doesn’t support the methods</Title>
    <Description>See https://github.com/Microsoft/dotnet-blog/pull/319

Wonder if this should be a candidate for warning waves. Essentially when you use Begin / End Invoke and we are targeting a runtime that doesn’t support the methods. 

/cc @jaredpar @jcouv @MadsTorgersen @richlander 
</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35365</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect warnings with deconstruction in `foreach`</Title>
    <Description>```C#
using System.Collections.Generic;

static class Ext
{
    public static void Deconstruct&lt;TKey, TValue&gt;(
        this KeyValuePair&lt;TKey, TValue&gt; pair, out TKey key, out TValue value)
    {
        key = pair.Key;
        value = pair.Value;
    }
}

class Program
{
    static void F(IEnumerable&lt;KeyValuePair&lt;string, int&gt;&gt; pairs)
    {
        foreach (var (k, v) in pairs)
        {
        }
    }
}
```
```
(17,18): warning CS8619: Nullability of reference types in value of type
    'KeyValuePair&lt;string, int&gt;' doesn't match target type 'string'.
(17,18): warning CS8619: Nullability of reference types in value of type
    'KeyValuePair&lt;string, int&gt;' doesn't match target type 'int'.
```</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35364</IssueID>
    <RepoID>1</RepoID>
    <Title>Make IPackageInstallerService implementation lazy</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/833267

The internal bug is a performance bug caused by `PackageInstallerService.StartWorking` eagerly initializing `PackageSources`, even in scenarios where the property value is never used. This change updates the implementation to instead load the package sources only when needed (e.g. for a code action).</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35363</IssueID>
    <RepoID>1</RepoID>
    <Title>Ongoing IDE error messages in VS 2019 for valid code.</Title>
    <Description>**Version Used**:  3.2.0-beta1-19229-02

**Steps to Reproduce**:

1. Create a generic class where `T` is constrained as `unmanaged`
2. Invoke methods on class using a truly `unmanaged struct`


**Expected Behavior**: The code is legal and compiles so the IDE should not report errors.

**Actual Behavior**: Errors are reported in the IDE when editing and when building (but the output window says clean compile and code runs).

The code sample here https://github.com/dotnet/roslyn/issues/35324 does this (even though it compiles).

</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35362</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35361</IssueID>
    <RepoID>1</RepoID>
    <Title>C# compiler should report CS0121 consistently between VS2017 and VS2019, when ambiguous call is detected in named method syntax</Title>
    <Description>**Version Used**: VS2017 Enterprise (15.9.11) and VS2019 Enterprise (16.0.2)

**Steps to Reproduce**:

1. Create a .NET Standard 2.0 class library
2. Reference NuGet package System.Threading.Task.Dataflow v4.9.0
3. Replace `Class1.cs` contents with

```
namespace CompilationAmbiguityExample
{
    using System.Threading.Tasks.Dataflow;

    public class Class1
    {
        public Class1()
        {
            // NOTE: This line fails to compile in VS2017 and the 2017 hosted agents for Azure DevOps, but succeeds in VS2019 or the 2019 hosted agents for Azure DevOps.
            // ERROR: Error CS0121  The call is ambiguous between the following methods or properties: 'TransformBlock&lt;TInput, TOutput&gt;.TransformBlock(Func&lt;TInput, TOutput&gt;)' and 'TransformBlock&lt;TInput, TOutput&gt;.TransformBlock(Func&lt;TInput, Task&lt;TOutput&gt;&gt;)'    CompilationAmbiguityExample C:\Git\AppEng\CompilationAmbiguityExample\CompilationAmbiguityExample\Class1.cs	12	N/A

            var ingestionPipelineNonAmbiguous = new TransformBlock&lt;IDataflowMicroservicePayload, IDataflowMicroservicePayload&gt;(this.OnPayloadReceived);

            // FIX: Changing to an explicit lambda syntax fixes the error in VS2017
            // var ingestionPipeline = new TransformBlock&lt;IDataflowMicroservicePayload, IDataflowMicroservicePayload&gt;(payload =&gt; this.OnPayloadReceived(payload));
            // OR: Change to this explicit cast, which also works
            // var ingestionPipeline = new TransformBlock&lt;IDataflowMicroservicePayload, IDataflowMicroservicePayload&gt;((Func&lt;IDataflowMicroservicePayload, IDataflowMicroservicePayload&gt;)this.OnPayloadReceived);
        }

        private IDataflowMicroservicePayload OnPayloadReceived(IDataflowMicroservicePayload _)
        {
            return new DataflowMicroservicePayload();
        }

        private class DataflowMicroservicePayload : IDataflowMicroservicePayload
        {
        }

        private interface IDataflowMicroservicePayload
        {
        }
    }
}

```
4. Compile in VS2017 Enterprise
5. Compile in VS2019 Enterprise
6. VS2017 will have thrown a CS0121 compilation exception, whereas VS2019 won't have
7. Changing from the Named method syntax to either the lambda or cast suggestions used in the "FIX" comments above, does resolve the error in VS2017

**Expected Behavior**: Both VS2017 and VS2019 either report (or handle) the "ambiguous" declaration the same, when using Named method syntax

**Actual Behavior**: VS2019 Enterprise (and hosted 2019 build agent in Azure DevOps) compiles successfully, but VS2019 Enterprise (and hosted 2017 build agent in Azure DevOps) throws a compilation error of `CS0121	The call is ambiguous between the following methods or properties: 'TransformBlock&lt;TInput, TOutput&gt;.TransformBlock(Func&lt;TInput, TOutput&gt;)' and 'TransformBlock&lt;TInput, TOutput&gt;.TransformBlock(Func&lt;TInput, Task&lt;TOutput&gt;&gt;)'
`

This is likely shoddy architecture, but regardless of that, VS2017 and VS2019 compilers should really behave consistently, between the 2 versions.

I've tried the following Dataflow versions, which all exhibit the same behaviour:

- 4.7.0
- 4.9.0
- 4.10.0-preview4.19212.13
</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35360</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] Unloading a project/solution crashes Visual Studio if there is pending Roslyn work</Title>
    <Description>This was introduced in https://github.com/dotnet/roslyn/pull/34785.

Visual Studio is crashing on me if I close a Solution before Roslyn has finished analyzing the project for Designer attributes via DesignerAttributeIncrementalAnalyzer.

````
ObjectDisposedException
object name: 'Microsoft.VisualStudio.ProjectSystem.VS.Implementation.DisposingWrapper`1[[Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Designers.ProjectItemDesignerUpdateService+ProjectItemDesignerUpdateServiceImplementation, Microsoft.VisualStudio.ProjectSystem.VS.Implementation, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]'.
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.DisposingWrapper`1.get_Value()
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Designers.ProjectItemDesignerUpdateService.SetProjectItemDesignerTypeAsync(String projectItemPath, String designerType)
   at Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer.&lt;RegisterDesignerAttributeAsync&gt;d__16.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer.&lt;RegisterDesignerAttributeAndSaveStateAsync&gt;d__15.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer.&lt;AnalyzeDocumentAsync&gt;d__9.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;&gt;c__DisplayClass32_1`1.&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;GetOrDefaultAsync&gt;d__34`2.MoveNext()
````</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35359</IssueID>
    <RepoID>1</RepoID>
    <Title>Deadlock during shutdown of interactive window</Title>
    <Description>Fix: https://github.com/dotnet/roslyn/issues/35292

There are two processes:
1. Closing the interactive window is performed in `UIOnly`. Closing interactive window triggers:
- `closeEventDelegate` from `VsInteractiveWindowProvider`
- `InteractiveEvaluator.Dispose()`
- `InteractiveHost.Dispose()`
- `InteractiveHost.SetOutput`
- Here we come to lock `_outputGuard` for `_output.Flush()`. However, `_outputGuard` is locked by thread 2.

2. `ctor` of `InteractiveHost.RemoteService` was called
- It triggers `new Thread(() =&gt; ReadOutput(error: false));` on a new **thread**
- `ReadOutput` ends with `localHost.OnOutputReceived(error, buffer, count);`
- OnOutputReceived locks  `_outputGuard` and tries to make _output.Write
- It calls a writer from the interactive window which refers to `InteractiveWindow.Write`.
- This one requires `UIOnly` which was locked by thread 1.


</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35358</IssueID>
    <RepoID>1</RepoID>
    <Title>Crash trying to unload project from large solution</Title>
    <Description>**Build filed on** : 15.7.27612.0 
**Priority** : 1 

I have a large (~400 project) solution and I've been experimenting with manually unloading projects (by right-clicking and saying unload in the solution explorer) as an alternative to the Funnel extension that no longer works in VS 2017. Some projects unload no problem. Others take a really long time, or never finish unloading, or crash. I'm attaching a crash dump of a crash, and a recording of unloading the same project that didn't crash but did hang the UI for a long time. I'm guessing the task manager window I brought up during the unload isn't visible but you can see the process consume over 2.8GB of RAM at one point which is presumably right on the edge of crashing.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/236142/crash-trying-to-unload-project-from-large-solution.html
VSTS ticketId: 602709_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35357</IssueID>
    <RepoID>1</RepoID>
    <Title>AdditionalFiles is empty in CompilationStartAnalysisContext.Options.AdditionalFiles but correct in SyntaxNodeAnalysisContext.Options.AdditionalFiles</Title>
    <Description>**Version Used**: 
Tested both Microsoft CodeAnalysis 2.10 &amp; 3.1
VS 2017 15.9.11 &amp; Visual Studio 2019 16.1 Preview 2

**Description**
AdditionalFiles is empty on a CompilationStartAction but is correctly populated on a SyntaxNodeAction. This prevents users from taking action which require AdditionalFiles at compilation start.

**Steps to Reproduce**:

1. Create an analyzer which registers a CompilationStartAction

        public override void Initialize(AnalysisContext context)
        {
            context.RegisterCompilationStartAction(this.AnalyzeAdditionalFiles);
        }

        private void AnalyzeAdditionalFiles(CompilationStartAnalysisContext context)
        {
            if (!context.Options.AdditionalFiles.Any()) 
                   Debugger.Launch();
        }

2. In your consuming project, add an additional file

```
    &lt;ItemGroup&gt;
      &lt;AdditionalFiles Include="foo.log" /&gt;
    &lt;/ItemGroup&gt;
```

3. Add the analyzer to your project
4. [**Important**] Delete the .vs folder at the root of your solution
5. Launch project

**Expected Behavior**:
Debugger should not launch

**Actual Behavior**:
Debugger launches

6. Close your solution
7. Reopen your solution

**Actual Behavior**:
Debugger does not launch

Note: If your analyzer is a SyntaxNodeAction instead of a CompilationStartAction this will work fine starting without a .vs folder
        
        public static readonly SyntaxKind[] PossibleSyntaxKinds = { SyntaxKind.SimpleMemberAccessExpression, SyntaxKind.ObjectCreationExpression };

        public override void Initialize(AnalysisContext context)
        {
            context.RegisterSyntaxNodeAction(this.AnalyzeSyntaxNode, PossibleSyntaxKinds);
        }

        private void AnalyzeSyntaxNode(SyntaxNodeAnalysisContext context)
        {
            if (!context.Options.AdditionalFiles.Any()) 
                   Debugger.Launch();
        }

**Expected Behavior**:
Debugger does not launch

**Actual Behavior**:
Debugger does not launch. (Behavior is correct)


Note: May be related to #12840
Edit 4/30/2019: Discovered that the key to this bug is you need to not have a .vs (cache) folder when you open your sln/csproj. </Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35356</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35355</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35354</IssueID>
    <RepoID>1</RepoID>
    <Title>Update version for Microsoft.Net.Test.Sdk package</Title>
    <Description>This change is required in order to enable running on non-desktop TFM tests from VS test explorer window.</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35353</IssueID>
    <RepoID>1</RepoID>
    <Title>NFW on document navigation service - top 3 on 15.9</Title>
    <Description>Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioDocumentNavigationService.CanNavigateToSpan(Workspace,DocumentId,TextSpan)

https://features.vsdata.io/investigatefault?mt=MAC_ADDRESS_HASHES&amp;et=FAULT&amp;sd=2019-03-29&amp;ed=2019-04-28&amp;pn=vs&amp;fn=ide/vbcs/nonfatalwatson&amp;en=nonfatalwatson&amp;fh=64b8d182-a17b-9bfd-493d-ed4a737d2b2d&amp;bl=d15.9$15.9.28307.586$15.9.11$visualstudio.15.release&amp;bl=d15.9$15.9.28307.557$15.9.10$visualstudio.15.release&amp;bl=d15.9$15.9.28307.518$15.9.9$visualstudio.15.release&amp;bl=d15.9$15.9.28307.481$15.9.8$visualstudio.15.release&amp;bl=d15.9$15.9.28307.423$15.9.7$visualstudio.15.release&amp;bl=d15.9$15.9.28307.344$15.9.6$visualstudio.15.release&amp;bl=d15.9$15.9.28307.280$15.9.5$visualstudio.15.release&amp;bl=d15.9$15.9.28307.222$15.9.4$visualstudio.15.release&amp;bl=d15.9$15.9.28307.145$15.9.3$visualstudio.15.release&amp;bl=d15.9$15.9.28307.108$15.9.2$visualstudio.15.release&amp;bl=d15.9$15.9.28307.105$15.9.1$visualstudio.15.release&amp;bl=d15.9$15.9.28307.53$15.9.0$visualstudio.15.release&amp;ex=devenv&amp;ut=external

https://watsonportal.microsoft.com/CabSearch?DateTimeFormat=UTC&amp;MaxRows=100&amp;P3=vs.ide.vbcs.nonfatalwatson&amp;P4=system.argumentoutofrange&amp;P5=microsoft.visualstudio.languageservices&amp;P6=microsoft.visualstudio.languageservices.implementation.visualstudiodocumentnavigationservice.cannavigatetospan

cab
https://watsonportal.microsoft.com/Failure?FailureSearchText=a4a50075-0cc2-7be4-10d5-9cc7f0b5801a#</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35352</IssueID>
    <RepoID>1</RepoID>
    <Title>NFW in introduce variable. top 2 from 15.9</Title>
    <Description>```
Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(Int32,Int32)
Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GetExpressionUnderSpan(SyntaxTree,TextSpan,CancellationToken)
Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitialize(TextSpan,CancellationToken)
Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.Generate(TService,SemanticDocument,TextSpan,CancellationToken)
Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.&lt;IntroduceVariableAsync&gt;d__17.MoveNext()
System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task)
System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task)
Microsoft.CodeAnalysis.CodeRefactorings.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.&lt;ComputeRefactoringsAsync&gt;d__0.MoveNext()
System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task)
System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task)
Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.&lt;GetRefactoringFromProviderAsync&gt;d__8.MoveNext()
```

...

https://features.vsdata.io/investigatefault?mt=MAC_ADDRESS_HASHES&amp;et=FAULT&amp;sd=2019-03-29&amp;ed=2019-04-28&amp;pn=vs&amp;fn=ide/vbcs/nonfatalwatson&amp;en=nonfatalwatson&amp;fh=bcfbe09d-ba6b-44c6-a257-e56ab226236d&amp;bl=d15.9$15.9.28307.586$15.9.11$visualstudio.15.release&amp;bl=d15.9$15.9.28307.557$15.9.10$visualstudio.15.release&amp;bl=d15.9$15.9.28307.518$15.9.9$visualstudio.15.release&amp;bl=d15.9$15.9.28307.481$15.9.8$visualstudio.15.release&amp;bl=d15.9$15.9.28307.423$15.9.7$visualstudio.15.release&amp;bl=d15.9$15.9.28307.344$15.9.6$visualstudio.15.release&amp;bl=d15.9$15.9.28307.280$15.9.5$visualstudio.15.release&amp;bl=d15.9$15.9.28307.222$15.9.4$visualstudio.15.release&amp;bl=d15.9$15.9.28307.145$15.9.3$visualstudio.15.release&amp;bl=d15.9$15.9.28307.108$15.9.2$visualstudio.15.release&amp;bl=d15.9$15.9.28307.105$15.9.1$visualstudio.15.release&amp;bl=d15.9$15.9.28307.53$15.9.0$visualstudio.15.release&amp;ex=devenv&amp;ut=external

https://watsonportal.microsoft.com/CabSearch?DateTimeFormat=UTC&amp;MaxRows=100&amp;P3=vs.ide.vbcs.nonfatalwatson&amp;P4=system.argumentoutofrange&amp;P5=microsoft.codeanalysis&amp;P6=microsoft.codeanalysis.text.textspan.frombounds

cab 
https://watsonportal.microsoft.com/Failure?FailureSearchText=b7f0dd5d-567e-45cb-6ee4-8cec0becc658#
</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35351</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixup from bad merge.</Title>
    <Description>
    </Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35350</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow attributes on local function parameters</Title>
    <Description>From discussion in LDM today (4/29/2019), this would help with async-iterator local functions that want to use `[EnumeratorCancellation]`.

We should also test other attributes:
- `[DoesNotReturn]`
- `[DoesNotReturnIf(bool)]`
- `[Disallow/Allow/Maybe/NotNull]`
- `[Maybe/NotNullWhen(bool)]`
- `[Obsolete]`
- ...

FYI @agocke </Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35349</IssueID>
    <RepoID>1</RepoID>
    <Title>Deconstruction nullability warnings should be clearer</Title>
    <Description>See `Deconstruction_ExtensionMethod_03` in NullableReferenceTypesTests.cs

We report ```warning CS8604: Possible null reference argument for parameter 'p' in 'void E.Deconstruct&lt;object, object&gt;(Pair&lt;object, object&gt; p, out object t, out object u)'``` for a deconstruction with a nullable `this` parameter.

See `Deconstruction_20`  in NullableReferenceTypesTests.cs

We report `warning CS8602: Dereference of a possibly null reference.` for the deconstruction of a possible null value.

See `Deconstruction_29` in NullableReferenceTypesTests.cs

We report `warning CS8602: Dereference of a possibly null reference.` for the deconstruction of the an inner value.

While these are all technically correct, they are quite confusing, and don't really help to identify the problem immediately. For consistency of the multiple cases and ease of understanding we should add a specific warning for deconstruction that makes it clear why it would result in a null reference exception.

</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35348</IssueID>
    <RepoID>1</RepoID>
    <Title>Apply ngen optimization for CodeLens assembly when training exists</Title>
    <Description>Applying ngen optimization was commented our for code lens because builds were failing due to incomplete training data.

https://github.com/dotnet/roslyn/tree/dev/jorobich/apply-codelens-optprof</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35347</IssueID>
    <RepoID>1</RepoID>
    <Title>Add release/* globs to azure pipelines config</Title>
    <Description>This should reduce config churn moving forward as we add new release branches (e.g. `dev16.2-preview2`, etc...)</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35346</IssueID>
    <RepoID>1</RepoID>
    <Title>brace matching wrong</Title>
    <Description>brace matching is not always working correctly.
if I click next to the opening brace it highlights the correct closing one.
If I click on the closing brace, it might highlight a wrong opening one. I get that behaviour if I click in between two adjacent closing brackets

for example, I get the wrong opening brace highlighted if I click between the two closing braces
b(())

or between the )) here:
os.path.join(os.path.dirname(os.path.abspath(__file__)),'dsp')

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/331171/brace-matching-wrong.html
VSTS ticketId: 679504_
_These are the original issue comments:_

Ariel Yang - MSFT [MSFT] on 9/10/2018, 02:43 AM (231 days ago): &lt;p&gt;Thanks for taking the time to report this issue to us. We’ve created a bug for this issue as internal tracking. The status on this Developer Community item will be updated as that bug is resolved. Thanks again for your feedback.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35345</IssueID>
    <RepoID>1</RepoID>
    <Title>Saving .aspx files slow</Title>
    <Description>VSF_TYPE_MARKDOWNSaving an smallish (300 front, 400 loc code behind) .aspx control takes seconds vs the second or two for VS 2017.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/470148/saving-aspx-files-slow.html
VSTS ticketId: 802507_
_These are the original issue comments:_

Visual Studio Feedback System on 2/26/2019, 08:55 PM (61 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 2/26/2019, 11:48 PM (61 days ago): &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/ . We'll keep you posted on any updates to this feedback.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35344</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix buttons for high contrast on PullMembersUpWarningDialog</Title>
    <Description>Use Button instead of vs:Button on warning dialog for PMU

Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/794008 and https://devdiv.visualstudio.com/_workitems/edit/794027 </Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35343</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unnecessary parameter</Title>
    <Description>The `CoreCompile` targets for C# and VB were both passing the set of `PotentialEditorConfigFiles` to the `PotentialAnalyzerConfigFiles` input parameter of `CscTask`/`VbcTask`. However, this parameter no longer exists. At one point in the development of the editorconfig-in-compiler feature we had a separate MSBuild task that would compute both the actual and potential .editorconfig file paths and pass them to the task. These are now computed as part of the MSBuild evaluation pass, and the potential .editorconfig files are passed to the project systems via a separate target (`GetPotentialEditorConfigFiles` in Microsoft.Common.CurrentVersion.targets).</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35342</IssueID>
    <RepoID>1</RepoID>
    <Title>Invalid "Add parameter" suggestion</Title>
    <Description>VSF_TYPE_MARKDOWN1. Create new .net core console app project;
2. Paste the following code:

```
using System;

namespace AddParameterBug
{
    class A
    {
    }

class B : A
    {
    }

class Program
    {
        static void Main(string[] args)
        {
            var b = new B();
            Foo(b);
        }

private static void Foo(A a)
        {
        }
    }
}
```

3. Change the `Foo(b);` to `Foo(b, 1);` in `Main`;
4. `Foo` call gets the red squiggly;
5. Right click red squiggly and pick &amp;quot;Quick actions and refactorings&amp;quot;;
6. Pick the &amp;quot;Add parameter to 'Program.Foo(A)'&amp;quot;;
7. Notice that `Foo(A a)` became `Foo(B b, A a)`, which is incorrect and unexpected;

Method should change to `Foo(A a, int something)`.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/545907/invalid-add-parameter-suggestion.html
VSTS ticketId: 855387_
_These are the original issue comments:_

Visual Studio Feedback System on 4/25/2019, 01:12 AM (4 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 4/29/2019, 00:33 PM (4 min ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35341</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to non Int pools</Title>
    <Description>Responding to a request from our core engineering team to move to a
different pool.</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35340</IssueID>
    <RepoID>1</RepoID>
    <Title>Possible false-positive IDE0004 redundant cast warning</Title>
    <Description>**Version Used**: 
VS 2019 16.0.2
**Steps to Reproduce**:

```cs
        public Task Method(string name, int r, int g, int b)
        {
            return Method(name, (float)r, (float)g, (float)b);
        }

        public Task Method(string name, float r, float g, float b)
        {
            var colour = new Color(r, g, b);

            return DoSomething(name, colour);
        }

        public Task DoSomething(string name, Color color)
        {
            return Task.CompletedTask;
        }
``` 

**Expected Behavior**:
No suggestion should be made regarding the removal of casting, as it would lead to recursion.

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/42944058/56912283-de683f00-6aa6-11e9-8380-bb47a5364f19.png)

Suggestion is made to remove the cast.</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35339</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor &gt; Rename doesn't update references to that type in XAML</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.1.0 Preview 3.0 [28824.287.d16.1]
VisualStudio.16.IntPreview/16.1.0-pre.3.0+28824.287.d16.1
Microsoft .NET Framework
Version 4.8.03752

Installed Version: Enterprise

Visual C++ 2019   00435-60000-00000-AA045
Microsoft Visual C++ 2019

Application Insights Tools for Visual Studio Package   9.0.20307.1
Application Insights Tools for Visual Studio

Azure App Service Tools v3.0.0   16.1.371.8123
Azure App Service Tools v3.0.0

C# Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

Extensibility Message Bus   1.1.77 (master@24013d5)
Provides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual C++ Wizards   1.0
Microsoft Visual C++ Wizards

Microsoft Visual Studio VC Package   1.0
Microsoft Visual Studio VC Package

Mono Debugging for Visual Studio   16.1.1 (2473f22)
Support for debugging Mono processes with Visual Studio.

NuGet Package Manager   5.1.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

Visual Basic Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

VisualStudio.Mac   1.0
Mac Extension for Visual Studio

Xamarin   16.1.0.537 (d16-1@2ce5a1af6)
Visual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.

Xamarin Designer   16.1.99.108 (remotes/origin/master@f2a5d8344)
Visual Studio extension to enable Xamarin Designer tools in Visual Studio.

Xamarin Templates   16.2.101 (cb5edbc)
Templates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.

Xamarin.Android SDK   9.3.0.18 (HEAD/2da2d99e8)
Xamarin.Android Reference Assemblies and MSBuild support.
    Mono: mono/mono/2018-08@3f5ec6d95c3
    Java.Interop: xamarin/java.interop/d16-1@5ddc3e3
    LibZipSharp: grendello/LibZipSharp/d16-1@44de300
    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f
    ProGuard: xamarin/proguard/master@905836d
    SQLite: xamarin/sqlite/3.27.1@8212a2d
    Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-1@acabd26


Xamarin.iOS and Xamarin.Mac SDK   12.10.0.150 (99c0cfa)
Xamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.

**Steps to Reproduce**:

1. Create a new Mobile App (Xamarin.Forms) app from File &gt; New Project.
2. Open Views/AboutPage.xaml.
3. Open ViewModels/AboutViewModel.cs.
4. Right-click type &gt; Rename AboutViewModel.

**Expected Behavior**:
Type name is updated in C# and in referenced XAML.

**Actual Behavior**:
Type name is updated in C#, but not referenced XAML.

**Video**:
https://www.screencast.com/t/Qc0EJXRKE5k</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35338</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor &gt; Rename applies to C# type, but not references in XAML</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.1.0 Preview 3.0 [28824.287.d16.1]
VisualStudio.16.IntPreview/16.1.0-pre.3.0+28824.287.d16.1
Microsoft .NET Framework
Version 4.8.03752

Installed Version: Enterprise

Visual C++ 2019   00435-60000-00000-AA045
Microsoft Visual C++ 2019

Application Insights Tools for Visual Studio Package   9.0.20307.1
Application Insights Tools for Visual Studio

Azure App Service Tools v3.0.0   16.1.371.8123
Azure App Service Tools v3.0.0

C# Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

Extensibility Message Bus   1.1.77 (master@24013d5)
Provides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual C++ Wizards   1.0
Microsoft Visual C++ Wizards

Microsoft Visual Studio VC Package   1.0
Microsoft Visual Studio VC Package

Mono Debugging for Visual Studio   16.1.1 (2473f22)
Support for debugging Mono processes with Visual Studio.

NuGet Package Manager   5.1.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

Visual Basic Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

VisualStudio.Mac   1.0
Mac Extension for Visual Studio

Xamarin   16.1.0.537 (d16-1@2ce5a1af6)
Visual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.

Xamarin Designer   16.1.99.108 (remotes/origin/master@f2a5d8344)
Visual Studio extension to enable Xamarin Designer tools in Visual Studio.

Xamarin Templates   16.2.101 (cb5edbc)
Templates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.

Xamarin.Android SDK   9.3.0.18 (HEAD/2da2d99e8)
Xamarin.Android Reference Assemblies and MSBuild support.
    Mono: mono/mono/2018-08@3f5ec6d95c3
    Java.Interop: xamarin/java.interop/d16-1@5ddc3e3
    LibZipSharp: grendello/LibZipSharp/d16-1@44de300
    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f
    ProGuard: xamarin/proguard/master@905836d
    SQLite: xamarin/sqlite/3.27.1@8212a2d
    Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-1@acabd26


Xamarin.iOS and Xamarin.Mac SDK   12.10.0.150 (99c0cfa)
Xamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.

**Steps to Reproduce**:

1. Create a new Mobile App (Xamarin.Forms) app from File &gt; New Project.
2. Open Views/AboutPage.xaml.cs.
3. Right-click type &gt; Rename.

**Expected Behavior**:
Type name is updated in C# and associated XAML file.

**Actual Behavior**:
Type name is updated in C#, but not associated XAML file.

**Video**:
https://www.screencast.com/t/gBhVaSibqNaq</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35337</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor-to-New-Namespace doesn't work for C# types that are associated with XAML</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.1.0 Preview 3.0 [28824.287.d16.1]
VisualStudio.16.IntPreview/16.1.0-pre.3.0+28824.287.d16.1
Microsoft .NET Framework
Version 4.8.03752

Installed Version: Enterprise

Visual C++ 2019   00435-60000-00000-AA045
Microsoft Visual C++ 2019

Application Insights Tools for Visual Studio Package   9.0.20307.1
Application Insights Tools for Visual Studio

Azure App Service Tools v3.0.0   16.1.371.8123
Azure App Service Tools v3.0.0

C# Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

Extensibility Message Bus   1.1.77 (master@24013d5)
Provides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual C++ Wizards   1.0
Microsoft Visual C++ Wizards

Microsoft Visual Studio VC Package   1.0
Microsoft Visual Studio VC Package

Mono Debugging for Visual Studio   16.1.1 (2473f22)
Support for debugging Mono processes with Visual Studio.

NuGet Package Manager   5.1.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

Visual Basic Tools   3.1.0-beta3-19223-09+ce8ac3f71fa4c73b78cf8218d58b322bdbdfa1c9
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

VisualStudio.Mac   1.0
Mac Extension for Visual Studio

Xamarin   16.1.0.537 (d16-1@2ce5a1af6)
Visual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.

Xamarin Designer   16.1.99.108 (remotes/origin/master@f2a5d8344)
Visual Studio extension to enable Xamarin Designer tools in Visual Studio.

Xamarin Templates   16.2.101 (cb5edbc)
Templates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.

Xamarin.Android SDK   9.3.0.18 (HEAD/2da2d99e8)
Xamarin.Android Reference Assemblies and MSBuild support.
    Mono: mono/mono/2018-08@3f5ec6d95c3
    Java.Interop: xamarin/java.interop/d16-1@5ddc3e3
    LibZipSharp: grendello/LibZipSharp/d16-1@44de300
    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f
    ProGuard: xamarin/proguard/master@905836d
    SQLite: xamarin/sqlite/3.27.1@8212a2d
    Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-1@acabd26


Xamarin.iOS and Xamarin.Mac SDK   12.10.0.150 (99c0cfa)
Xamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.

**Steps to Reproduce**:

1. Create a new Mobile App (Xamarin.Forms) app from File &gt; New Project.
2. Open Views/AboutPage.xaml.cs.
3. Use the new refactor-to-new-namespace functionality.

**Expected Behavior**:
Namespace is updated in C# and associated XAML file.

**Actual Behavior**:
Namespace is not updated in C# and associated XAML file.

**Video**:
https://www.screencast.com/t/qVrPpfMRG</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35336</IssueID>
    <RepoID>1</RepoID>
    <Title>changed the way we report live analysis to task center</Title>
    <Description>previously, we listen to the diagnostic service to report progress. problem is that it only raises events if it found errors on a file. so what we report is actually the last file we found errors on rather than the file that we are analyzing.

this caused confusion since we report in task center that we are analyzing file "A" when it is actually "analyzed" not "analyzing"

another issue is since it only reports file that contains errors. we might not actually show anything in task center if there is no error, or show file "A" for a long time if that is only filed with errors.

this PR changes the experience closer to what users would expect. and now progress is for solution crawler not specifically on diagnostics.

now we report file that solution crawler is analyzing.

there is still caveat such as solution crawler can pause between processing a file if VS is busy. but it will still show file "A". or we will not update UI at least 200ms apart and etc.

since it is task center where we don't want to be too impactful to VS, based on feedback we will see whether we need to do more such as detect solution crawler pause and update task center to show a pause. or update task center to show different stage such as analyzing/analyzed.

or show in task center, what analyzer is actually running such as diagnostic, todo, designer attribute scan, find all reference cache and etc.

old
![progress2](https://user-images.githubusercontent.com/1333179/56927361-dac5bf80-6a88-11e9-9930-77d93a2c6625.gif)

new
![progress](https://user-images.githubusercontent.com/1333179/56919749-45213480-6a76-11e9-890d-bd57ff1e3bcd.gif)
</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35335</IssueID>
    <RepoID>1</RepoID>
    <Title>SnapshotSerializationTests.cs seems to be duplicating logic from SolutionCreator.cs</Title>
    <Description>While chatting with @heejaechang we noticed that SnapshotSerializationTests.cs has a helper GetSolutionAsync that reconstructs a solution from a remotable data service. If you squint a bit, that's also what SolutionCreator.cs is doing, but there's just not a shared interface for both of them to be using. This should be unified so we're not maintaining that logic twice, and also so then we get additional test coverage of SolutionCreator.cs.</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35334</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn incorrectly ignores nullability specified in explicit cast when a user defined conversion is used</Title>
    <Description>**Version Used**: 

```
Branch master (27 Apr 2019)
Latest commit a8b934 by dotnet-automerge-bot:
Merge pull request #35305 from dotnet/merges/dev16.1-to-master

Merge dev16.1 to master
```

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C
{
  public static extern implicit operator D(C c);
}

class D
{
  void M1(C c)
  {
    var d = (D?) c;
    d.ToString(); 
  }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGFGBvRiipgMz8AjADYqAD3gJcFAJZgADoTkBjOTAoB7RYggwtCCgBEAFOwqqAlAG5GAX0aNWJ7r34AWCgFlh5y1buPAx8fABuEEYoFAC8FKbGAPxWlnYhoSgAdAAqWgDKMAhyuADmprYU7o4M9kA

**Expected Behavior**:
`CS8602: Dereference of a possibly null reference.` reported for the line `d.ToString();`

**Actual Behavior**:
No warnings.

**Notes**
While this _might_ seem expected as the conversion operator cannot return null according to its signature I believe that this is a bug because Roslyn ignores such knowledge in favor of explicit casts' nullability in every other scenario.

E.g. when the source expression is s not null constant
```cs
var s = (string?) "constantNotNullString";
s.ToString(); // CS8602
```

When the original value is annotated as not null:
```cs
string M(string s) =&gt; ((string?) s).ToString();
```

When it's just a chain of identity conversions. Note that this example is almost identical to the original one except for the two casts maked as redundant by Roslyn which nevertheless alter the variable's nullability just because unlike the third one they do not involve user defined conversions.
```cs
#nullable enable
class C
{
  public static extern implicit operator D(C c);
}

class D
{
  void M1(C c)
  {
    var d = (D?) (D) (D?) c;
    d.ToString(); 
  }
}
```</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35333</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix broken links in Language Feature Status</Title>
    <Description>Fix links to some of the specifications for C# 8 features.</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35331</IssueID>
    <RepoID>1</RepoID>
    <Title>Pull Members Up: A couple of fixes to pull to base class as abstract</Title>
    <Description>See #34235

Make methods overrides when pulling to base class with the make abstract option.

Remove abstract methods when pulling to base class with the make abstract option.</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35330</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35329</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35328</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35327</IssueID>
    <RepoID>1</RepoID>
    <Title>Resurrected the option to suppress in source using attributes</Title>
    <Description>Resurrected the option to suppress in source using attributes (see https://github.com/dotnet/roslyn/issues/17218)

The code was taken from the history (https://github.com/dotnet/roslyn/tree/4dfefe7b49c33d1d078494d52a84b16772158b11) and adapted to latest changes.
TODO:
* "Fix all" not implemented/does not work, if used pragma suppression is performed
* add unit tests
* title needs translation</Description>
    <CreatedDate>28/04/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35326</IssueID>
    <RepoID>1</RepoID>
    <Title>[EnumeratorCancellation] combines tokens</Title>
    <Description>- Previously, `[EnumeratorCancellation]` would mean that a non-default token from `GetAsyncEnumerator` would be used instead of the token passed as argument to the method. With this PR, we're instead combining both tokens. So the execution of the method can be cancelled if either token is cancelled.
- Fixes https://github.com/dotnet/roslyn/issues/35159 (error for `[EnumeratorCancellation]` on multiple tokens)

Note: I haven't found a way to validate that the CancellationTokenSource is properly disposed (end of method, early disposal, exception). 

~~This PR is pending confirmation from LDM (expected Monday 4/29/2019).~~ LDM confirmed the above design today.

FYI @stephentoub </Description>
    <CreatedDate>28/04/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35325</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 2017 -&gt; VS 2019</Title>
    <Description>readme has vs 2017 instead of 2019
</Description>
    <CreatedDate>28/04/2019</CreatedDate>
    <ClosedDate>28/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35324</IssueID>
    <RepoID>1</RepoID>
    <Title>BUG: TypeLoadException generated using 3.2.0-beta1-19227-04</Title>
    <Description>**3.2.0-beta1-19227-04**: 

**Create console app that references the type**:  `Item`

This was found using VS 2019 (16.0.2) in which I added the beta compiler nuget packages to my solution/projects and set C# build to 8.0 (beta).

I've created a simple way to repro this, the actual code that led to this crash is more involved (e.g. the actual code dynamically computes the `T*` pointer here it just returns `null`) but the sample `struct `seems to accurately recreate the problem, in my case the type `Item `is in a separate class library assembly (also .Net Standard 2.0) no idea if this is a factor though as I haven't tried it.

1. See the simple struct attached.
2. Use .Net Standard 2.0
3. Create console app that simply refers to the type, eg: Item x = new Item();
4. Execute the app.

**An instance of the type should be created without problems**:

**TypeLoadException**:

Here's the struct - it compiles fine with this beta build and earlier ones, I have tested the runtime fault and it's present in this version and also in **3.1.0-beta3-19213-02** if I recall.

```cs
    public struct Item
    {
        internal ItemHolder&lt;Item&gt; next;
        internal ItemHolder&lt;Item&gt; prev;
    }

    public struct ItemHolder&lt;T&gt; where T : unmanaged
    {
        public unsafe T* Data
        {
            get { return null; } // just to get a compile.
        }
    }
```

If we change this to something like this, we do not get the runtime fault:

```cs
    public struct Item
    {
        internal ItemHolder&lt;OtherItem&gt; next;
        internal ItemHolder&lt;OtherItem&gt; prev;
    }

    public struct ItemHolder&lt;T&gt; where T : unmanaged
    {
        public unsafe T* Data
        {
            get { return null; } // just to get a compile
        }
    }
```

by the way returning a ref rather than a pointer leads to the same exception:

```cs
    public struct Item
    {
        internal ItemHolder&lt;Item&gt; next;
        internal ItemHolder&lt;Item&gt; prev;
    }

    public struct ItemHolder&lt;T&gt; where T : unmanaged
    {
        public unsafe ref T Data
        {
            get { return ref Unsafe.AsRef&lt;T&gt;(null); } // just to get a compile.
        }
    }
```
</Description>
    <CreatedDate>28/04/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35323</IssueID>
    <RepoID>1</RepoID>
    <Title>DynamicFileInfo.cs: fix typo in the constructor</Title>
    <Description>One of the issues found in #34725</Description>
    <CreatedDate>27/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35322</IssueID>
    <RepoID>1</RepoID>
    <Title>Possible NullReferenceException in ObjectFormatterHelpers.cs</Title>
    <Description>When `type` is null, the first operand of `||` evaluates to `false`. That means the second operand is evaluated. The second operand of the `||` operator is `targetTypeName != null &amp;&amp; type.FullName == targetTypeName`. If `targetTypeName` is not null, `type.FullName` would throw.

https://github.com/dotnet/roslyn/blob/a8b934866f7a3c51d3034025cb8d150de9b6d0bf/src/Scripting/Core/Hosting/ObjectFormatter/ObjectFormatterHelpers.cs#L88-L92

Source: one of the issues found in #34725</Description>
    <CreatedDate>27/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35321</IssueID>
    <RepoID>1</RepoID>
    <Title>Possible NullReferenceException in TextViewWindow_InProc.cs</Title>
    <Description>When the exception message is formatted, `action.DisplayText` throws because `action` is null?

https://github.com/dotnet/roslyn/blob/a8b934866f7a3c51d3034025cb8d150de9b6d0bf/src/VisualStudio/IntegrationTest/TestUtilities/InProcess/TextViewWindow_InProc.cs#L380-L385

Source: one of the issues found in #34725</Description>
    <CreatedDate>27/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35320</IssueID>
    <RepoID>1</RepoID>
    <Title>Possible NullReferenceException in AbstractConvertForToForEachCodeRefactoringProvider.cs</Title>
    <Description>If `collectionType.Type` is really null, then the consequent check throws.

https://github.com/dotnet/roslyn/blob/a8b934866f7a3c51d3034025cb8d150de9b6d0bf/src/Features/Core/Portable/ConvertForToForEach/AbstractConvertForToForEachCodeRefactoringProvider.cs#L136-L140

Source: one of the issues found in #34725</Description>
    <CreatedDate>27/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35319</IssueID>
    <RepoID>1</RepoID>
    <Title>Suboptimal codegen for conditional access on readonly unconstrained generic field</Title>
    <Description>This is minor. It does not cause incorrect behavior, but it does cause generated code to be larger than it needs to be in some cases.

**Version Used**: 

Master (26 April 2019)

**Steps to Reproduce**:

```csharp
public class Foo&lt;T&gt;
{
    private readonly T ro;
    private T rw;
    
    public void PrintRo() =&gt; Console.WriteLine(ro?.ToString());
    public void PrintRw() =&gt; Console.WriteLine(rw?.ToString());
}
```

Look at the emitted IL for `PrintRo`.

[SharpLab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWAChsBmQgJnwDEB7ZgHgBUA+Sgb0vyD8ABwQBLAG4R4+BHAgpmAOwA2AT3wdZzchSEjxUmVoQB3XfoFCahACz4ACuKUwASswAUASnwBeLoREAJweCMwA/AB0HMwAyjDOAObeXhbWtNj2TmIurqbefgHEIWZRMfFJKboAvpRAA=).

**Expected Behavior**:

The lowered version of `PrintRo` should look something like (in C#):

```csharp
public void PrintRo()
{
    T copy = ro;
    Console.WriteLine((copy != null) ? copy.ToString() : null);
}
```

**Actual Behavior**:

The lowered version of `PrintRo` makes a copy of `ro` correctly, and then the codegen for conditional access pulls out the full force of its "ensure the receiver is only accessed once while still making sure it receives any mutations" logic, and emits something like this (in C#):

```csharp
public void PrintRo()
{
    T val = ro;
    ref T reference = ref val;
    T val2 = default(T);
    object value;
    if (val2 == null)
    {
        val2 = reference;
        reference = ref val2;
        if (val2 == null)
        {
            value = null;
            goto IL_0038;
        }
    }
    value = reference.ToString();
    goto IL_0038;
    IL_0038:
    Console.WriteLine((string)value);
}
```

**Discussion**:

This involves [`CodeGenerator.EmitLoweredConditionalAccessExpression`](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/CodeGen/EmitExpression.cs,386).

It looks like this method got confused. The body of the `PrintRo` method below `T val = ro;` is what is emitted when the receiver of the conditional access is an unconstrained generic which can change between calls (such as the `T rw` field). That's expected in the body of the `PrintRw` method. However in this case the field is `readonly`, and so a copy is created by `EmitReceiverRef` (ultimately [here](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/CodeGen/EmitAddress.cs,424)), which produces the `T val = ro;`. However the rest of `EmitLoweredConditionalAccessExpression` doesn't notice that it's now working with a copy, and proceeds as if it's accessing the original field.

Looking [at the blame](https://github.com/dotnet/roslyn/blame/a8b934866f7a3c51d3034025cb8d150de9b6d0bf/src/Compilers/CSharp/Portable/CodeGen/EmitExpression.cs#L401), it looks like this is probably unintentional.

This is a niche case, but it does affect anonymous types' `ToString` methods, [for example](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWAChsBmQgJnwGF8BvS/Dw27AFnwFkAFAEpW7ThIBuEBPgAe+ALz4AdnADurfAE8l+IvgC+5ChMOVDQA===). This `ToString` method is significantly larger than it needs to be.
</Description>
    <CreatedDate>27/04/2019</CreatedDate>
    <ClosedDate>01/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35318</IssueID>
    <RepoID>1</RepoID>
    <Title>Support TimeTravelTraceInterop in function resolver.</Title>
    <Description>- The function resolver isn't loaded when the base monitor is
TimeTravelTraceInterop, which needs it to resolve function for function
breakpoint.
- To add TimeTravelTraceInterop to the right vsdconfigxml file, I also
need to update some package so that it can be built.

#35317</Description>
    <CreatedDate>27/04/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35317</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn’s function name resolver should support DkmBaseDebugMonitorId.TimeTravelTraceInterop</Title>
    <Description>The function breakpoint isn't set to TimeTravelTraceInterop because of this issue https://devdiv.visualstudio.com/DevDiv/_workitems/edit/824993
</Description>
    <CreatedDate>27/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35316</IssueID>
    <RepoID>1</RepoID>
    <Title>Update foreach based on nullable analysis</Title>
    <Description>This makes 2 changes:
1. Reinfer the GetEnumerator method based on nullable analysis of the
foreach expression type.
2. Use that information to update the collection element type based on
that same analysis.

Fixes https://github.com/dotnet/roslyn/issues/33257.
Fixes https://github.com/dotnet/roslyn/issues/35151.
@dotnet/roslyn-compiler for review.</Description>
    <CreatedDate>27/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35315</IssueID>
    <RepoID>1</RepoID>
    <Title>Use Arcade SDK infrastructure for building source packages</Title>
    <Description>See https://github.com/dotnet/arcade/pull/2634 for details.</Description>
    <CreatedDate>27/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35314</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/04/2019</CreatedDate>
    <ClosedDate>27/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35313</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35312</IssueID>
    <RepoID>1</RepoID>
    <Title>Add new optprof test for training</Title>
    <Description>We have ported DDRIT.RPS.ManagedLangs to OptProf in this PR
https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/VS/pullrequest/177588?_a=overview

@bradselw Is there anything else needs to be done before merging this?

FYI @jaredpar @tmat @bradselw @dotnet/roslyn-infrastructure </Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35311</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle val escape for the switch expression.</Title>
    <Description>Fixes #35278

@agocke @chsienki Could you review this please?
</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35310</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliCode duplicate items inhibit Ctrl+Space</Title>
    <Description>Fix https://devdiv.visualstudio.com/DevDiv/_workitems/edit/860296
Starting 16.1, Intellicode is installed with VS by default. It provides extra completion items with same filter text but with⭐ in the display text such as `⭐ Length`. Original items are kept as they were. There occurs duplicate items for ones provided with Intellicode: one with start and another regular.

The CTRL+Space action mean commit if unique. Those items become non-unique even if fully typed. CTRL+Space does not work for them.

Investigating the issue, we found that CTRL+Space does not work in case if the completion session was started with Delete/Backspace. It seems it never worked: both old and new completions. We do not fix it here. Here is an issue to track: https://github.com/dotnet/roslyn/issues/35301


**Customer and scenario info**
**Who is impacted by this bug?**
User consuming CTRL+space (commit if unique) for completion.
**What is the customer scenario and impact of the bug?**
User types CTRL+Space in a situation when there is a unique item in the context.
For example:
s.Len$$

Remove $$ and place the caret there
**Expected**
The item has been committed
The completion window closed.
**Actual**
The completion window is still open. No commit happened.
**What is the workaround?**
Manual commit
**How was the bug found?**
dogfooding
**If this fix is for a regression - what had regressed, when was the regression introduced, and why was the regression originally missed?**
Regression. Intellicode became available by default in 16.1. Intellicode introduced a list of items for completion with the same filter text. So, there are two same items in the list now for most popular items like Length
⭐ Length (on the top)
Length (in the alphabetically sorted list)
There is no unique item.
</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35309</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35308</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35307</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35306</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview3-vs-deps to dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview3-vs-deps into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview3-vs-deps-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview3-vs-deps-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35305</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35304</IssueID>
    <RepoID>1</RepoID>
    <Title>Duplicate nullable diagnostics for lambdas in switch expression</Title>
    <Description>Tests like `CheckLambdaInSwitchExpression_01` show that we produce duplicate diagnostics for lambdas in switch expressions.  That's because we don't use placeholders like we do for other expressions where we infer a common type.  However, we don't get the inference correct for lambdas, so that placeholder approach probably won't work.  See also https://github.com/dotnet/roslyn/issues/35302</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35303</IssueID>
    <RepoID>1</RepoID>
    <Title>perf tweak to run OpenFileOnly analyzers only for open files even if …</Title>
    <Description>…full solution analysis is on but still run for fix all for closed files.

also made add using test to exercise OOP code properly

...

we have OpenFileOnly flag that we use to indicate to the engine that we want analyzers to run only on open files.

we have this flag since we have certain slow analyzers that we want to turn on by default rather than just disable it and let users to enable if they want and pay perf cost. example of such analyzer is SimplifyTypeNameAnalyzer. there can be more but that is one I know.

this PR doesn't discuss whether that flag is needed or not or need to be deleted. 

if some analyzer behaves differently due to this bug fix than we just discovered new bug on analyzers.

@sharwell seems looked through OpenFileOnly analyzers so if he found buggy analyzers we can add that to the issue I opened so that we can fix those analyzers by returning false for open files if one believes it must run for all files.

also, why some analyzers are open file only or not is not this PR's concern. I believe someone made the decision in some design meeting and set it following the decision. if one wants to question all those decisions, I am fine with that, but that is not about this PR.
</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35302</IssueID>
    <RepoID>1</RepoID>
    <Title>Lambdas in array initializers not checked in nullable walker</Title>
    <Description>Lambda expressions in an array initializer are not checked against the new target type of the lambda expression.  Instead, the type from initial binding is used, and (improperly) feeds into inference.

``` c#
        [Fact, WorkItem(35302, "https://github.com/dotnet/roslyn/issues/35302")]
        public void CheckLambdaInArrayInitializer_02()
        {
            var source =
@"using System;

class C
{
    static void G(object? o, string s)
    {
        if (o == null) return;
        var f = M(o);
        _ = f /*T:System.Func&lt;object!&gt;!*/;
        var fa3 = new[] {
            f,
            () =&gt; null, // 1
            () =&gt; {
                    s = null; // 2
                    return null; // 3
                },
            };
        _ = fa3 /*T:System.Func&lt;object!&gt;![]!*/;
        fa3[0]().ToString();
    }
    static Func&lt;T&gt; M&lt;T&gt;(T t) =&gt; () =&gt; t;
}
";
            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyTypes();
            comp.VerifyDiagnostics(
                // (12,19): warning CS8603: Possible null reference return.
                //             () =&gt; null, // 1
                Diagnostic(ErrorCode.WRN_NullReferenceReturn, "null").WithLocation(12, 19),
                // (14,25): warning CS8600: Converting null literal or possible null value to non-nullable type.
                //                     s = null; // 2
                Diagnostic(ErrorCode.WRN_ConvertingNullableToNonNullable, "null").WithLocation(14, 25),
                // (15,28): warning CS8603: Possible null reference return.
                //                     return null; // 3
                Diagnostic(ErrorCode.WRN_NullReferenceReturn, "null").WithLocation(15, 28));
        }
```

There may be similar issues in method type inference, `?:`, switch expressions, etc.
</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35301</IssueID>
    <RepoID>1</RepoID>
    <Title>completion: CTRL+Space is not applicable in Delete/Backspace triggered session</Title>
    <Description>Both old and new completions. 
Start with 

```C#
class C
{
    void Method()
    {
        var s = "";
        s.Length$$
    }
}
```

Intellisense TriggerOnDelete should be ON
SendBackspace
SendCommitIfUnique

**Expected**
No active completion session
`s.Length` is in the current line

**Actual**
Active completion session
`s.Lengt` is in the current line</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35300</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix applying code actions that change AdditionalDocuments</Title>
    <Description>Some code was accidentally calling GetDocument with an additional document ID; this didn't end well.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>28/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35298</IssueID>
    <RepoID>1</RepoID>
    <Title>error CS0019: Operator '==' cannot be applied to operands of type 'KeyValuePair&lt;ulong, string&gt;' and 'KeyValuePair&lt;ulong, string&gt;'</Title>
    <Description>VSF_TYPE_MARKDOWNpublic class StringColumnActor : IStringColumnActor
    {
        private readonly AsyncGate _gate = new AsyncGate();

        // TODO: replace with persistent storage
        private readonly IDictionary&amp;lt;ulong, string&amp;gt; _valueDictionary = new Dictionary&amp;lt;ulong, string&amp;gt;();

        public StringColumnActor()
        {

        }

        public async Task&amp;lt;ulong&amp;gt; GetOrAddValueAsync(string value)
        {
            using var gateLock = _gate.WaitAsync();

            var kvp = _valueDictionary.FirstOrDefault(kvp =&amp;gt; kvp.Value.Equals(value, StringComparison.InvariantCultureIgnoreCase));

            if (kvp == default(KeyValuePair&amp;lt;ulong, string&amp;gt;))
            {

            }
        }
    }



// Using dotnet core 3.0 preivew
// From Compiler Output. 1&amp;gt;Databases\Columns\IStringColumnActor.cs(34,17,34,60): error CS0019: Operator '==' cannot be applied to operands of type 'KeyValuePair&amp;lt;ulong, string&amp;gt;' and 'KeyValuePair&amp;lt;ulong, string&amp;gt;'

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/475398/error-cs0019-operator-cannot-be-applied-to-operand.html
VSTS ticketId: 807156_
_These are the original issue comments:_

Visual Studio Feedback System on 3/4/2019, 00:46 AM (53 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35297</IssueID>
    <RepoID>1</RepoID>
    <Title>using C# 8 range in debugger does not work</Title>
    <Description>VSF_TYPE_MARKDOWNWhen I use a C# 8 range in the debugger is reports &amp;quot;The debugger is unable to evaluate this expression&amp;quot;

For example:

```
&amp;quot;Hello&amp;quot;[0..2]	The debugger is unable to evaluate this expression	string
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/506062/using-c-8-range-in-debugger-does-not-work.html
VSTS ticketId: 827697_
_These are the original issue comments:_

Visual Studio Feedback System on 3/26/2019, 08:31 PM (30 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35296</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio reports incorrect type for nullable reference type when using `var`</Title>
    <Description>VSF_TYPE_MARKDOWNVisual Studio 2019 Preview, C# 8.0 beta, .NET Core 3.0 preview of some kind. Nullable reference types enabled through `&amp;lt;NullableContextOptions&amp;gt;enable&amp;lt;/NullableContextOptions&amp;gt;` in the `.csproj`.

For this code snippet:

```
string? meh = null;
var t = meh?.GetType(); // VS thinks t is Type
```

Visual Studio, on mouse hover over `t`, reports the type of `t` as `Type` and not `Type?`.

As far as I can tell, this is incorrect. `t` is of type `Type?` and behaves as expected. For example, an attempt to then assign it to a variable of `Type` will fail:

```
Type t2 = t; // warning, as expected
Type? t3 = t; // no warning, as expected
```

Here's my `.csproj`:

```
&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netcoreapp3.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;LangVersion&amp;gt;8.0&amp;lt;/LangVersion&amp;gt;
    &amp;lt;NullableContextOptions&amp;gt;enable&amp;lt;/NullableContextOptions&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;PropertyGroup Condition=&amp;quot;'$(Configuration)|$(Platform)'=='Debug|AnyCPU'&amp;quot;&amp;gt;
    &amp;lt;WarningsAsErrors&amp;gt;NU1605;CS8600;CS8602&amp;lt;/WarningsAsErrors&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

&amp;lt;/Project&amp;gt;
```

Thanks!

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/476671/visual-studio-reports-incorrect-type-for-nullable.html
VSTS ticketId: 807802_
_These are the original issue comments:_

Visual Studio Feedback System on 3/4/2019, 06:32 PM (52 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35295</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect computed nullability for dynamic operations</Title>
    <Description>Nullability warnings are (possibly) expected where indicated, but missing.

``` c#
#nullable enable

class Program
{
    public static void Main() { }

    void M1(dynamic? d1, dynamic? d2)
    {
        d1.ToString(); // warning

        var d3 = d1 + d2;
        d3.ToString(); // missing warning?

        var d4 = ~d1;
        d4.ToSTring(); // missing warning?
    }

    void M2(dynamic d5)
    {
        var d6 = d5.M();
        d6.ToString(); // missing warning?
    }
}
```

We may need the LDM to confirm the expected behavior.
</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35294</IssueID>
    <RepoID>1</RepoID>
    <Title>Dev/rigibson/cherry pick 34909</Title>
    <Description>Copy of #35273 to try and see if we can repro the error with a commit based on master-vs-deps.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35293</IssueID>
    <RepoID>1</RepoID>
    <Title>Make MSBuild be a child process of the command window.</Title>
    <Description>When a I run the `build` or `Test` command from the Developer Command Window, it create multiple processes of `MSBuild.exe` (32), it wouldn't be so bad if they were child process of the command window. Then at least when I close the window, it would in turn terminate them.
I have either manually terminate them, or use a kill command. 

Is there any arguments that can be add to the `Build` and `Test` script to launch them a child processes?</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35292</IssueID>
    <RepoID>1</RepoID>
    <Title>Deadlock during shutdown of interactive window</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.1.0-pre.2.0+28822.285

**Steps to Reproduce**: Happened a few times when closing VS with the C# interactive window open.

**Expected Behavior**: It to not hang.

Dump file: `\\mlangfs1\public\jasonmal\Dumps\Roslyn\35292`. Note: there are two dump files of InteractiveHost.exe; one is the one associated with the hung process, one is associated with the devenv.exe that I was using to dump the hung processes. I dumped both to make sure I got the right one but didn't do any work to figure out which is which.

Call stack of devenv.exe:

```
&gt;	WindowsBase.dll!System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)	Unknown
 	mscorlib.dll!System.Threading.SynchronizationContext.InvokeWaitMethodHelper(System.Threading.SynchronizationContext syncContext, System.IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)	Unknown
 	Microsoft.CodeAnalysis.InteractiveHost.dll!Microsoft.CodeAnalysis.Interactive.InteractiveHost.SetOutput(System.IO.TextWriter value)	Unknown
 	Microsoft.CodeAnalysis.InteractiveHost.dll!Microsoft.CodeAnalysis.Interactive.InteractiveHost.Dispose()	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Interactive.InteractiveEvaluator.Dispose()	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Interactive.VsInteractiveWindowProvider.Create.__closeEventDelegate|1(object sender, System.EventArgs e)	Unknown
```</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35291</IssueID>
    <RepoID>1</RepoID>
    <Title>Add DeclareAsNullable refactoring</Title>
    <Description>The purpose for this refactoring is to assist in migrating a project to use the nullable feature.
When we see a comparison of a non-nullable with `null` (such as `nonNullable == null` or `nonNullable != null`), there is a good chance that `nonNullable` should in fact be declared as nullable instead. This refactoring helps do that with one click.
Note this is only a good chance, because such null checks could also be defensive programming, especially when it comes to public APIs (you declare them as non-nullable, but check anyways).

![image](https://user-images.githubusercontent.com/12466233/61671521-e2b68980-ac9c-11e9-953e-31967f258eeb.png)

From discussion with Chuck, I will switch this to an analyzer/fixer so that it's more discoverable. But I won't offer a FixAll.

This PR was recreated from https://github.com/dotnet/roslyn/pull/26661 after the target branch was closed, so the first round of comments are in the original PR (sorry about that)</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35290</IssueID>
    <RepoID>1</RepoID>
    <Title>Various non-deterministic empty symbol compiler errors</Title>
    <Description>1. error CS0648: '' is a type not supported by the language
https://github.com/dotnet/corefx/pull/37141#issuecomment-486340227

2. error CS4001: Cannot await ''
https://dnceng.visualstudio.com/internal/_build/results?buildId=170149&amp;view=logs&amp;jobId=7b614801-ed38-51b7-97d8-b2f3e799aa24&amp;taskId=82d75caa-41ea-59a8-35f3-0486fa4f1cf4&amp;lineStart=1551&amp;lineEnd=1552&amp;colStart=1&amp;colEnd=1

3. System\Collections\Immutable\ImmutableDictionary_2.cs(785,52): error CS1503: Argument 1: cannot convert from '' to 'object' [F:\workspace\_work\1\s\src\System.Collections.Immutable\src\System.Collections.Immutable.csproj]
https://dnceng.visualstudio.com/internal/_build/results?buildId=163632

4. BasicEventSourceTest/Harness/Listeners.cs(285,43): error CS0023: Operator '?' cannot be applied to operand of type ''
https://dnceng.visualstudio.com/internal/_build/results?buildId=166101

Talked with @stephentoub and his guess is that this could be a threading related compiler bug.

Happens with `Microsoft.Net.Compilers.Toolset` 3.1.0-beta3-19217-05.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35289</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35288</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35287</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview3-vs-deps to dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview3-vs-deps into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview3-vs-deps-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview3-vs-deps-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35286</IssueID>
    <RepoID>1</RepoID>
    <Title>Use the spans in view when doing a multi-selection.</Title>
    <Description>For #35285

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Customer attempts to add/remove/toggle comment in javascript inside a cshtml file.

### Bugs this fixes

#35285

### Workarounds, if any

User can comment/uncomment manually.  If the user attempts to comment/uncomment with the commands, the cursor disappears.  This can be remedied by closing and re-opening the file.

### Risk

Low, small change.

### Performance impact

None

### Is this a regression from a previous update?

Yes

### Root cause analysis

The existing code was attempting to set the selection to the wrong (HTMLXProjection) buffer instead of the JS(TypeScript) buffer.  Fixed by retrieving the correct snapshot span in view before attempting to set the selection.

### How was the bug found?

Reported from VS feedback

&lt;/details&gt;</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>27/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35285</IssueID>
    <RepoID>1</RepoID>
    <Title>Comment selection throws argument exception inside javascript in cshtml files.</Title>
    <Description>When attempting to comment or uncomment a javascript part of a cshtml file, an exception is thrown.
```

System.ArgumentException: The provided selection is on a different snapshot than the broker. Parameter name: selection   at 
Microsoft.VisualStudio.Text.MultiSelection.Implementation.SelectionTransformer..ctor(MultiSelectionBroker multiSelectionBroker, Selection selection)   at 
Microsoft.VisualStudio.Text.MultiSelection.Implementation.MultiSelectionBroker.SetSelectionRange(IEnumerable`1 range, Selection primary)   at 
Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.AbstractCommentSelectionBase`1.ApplyEdits(Document document, ITextView textView, ITextBuffer subjectBuffer, ICommentSelectionService service, String title, CommentSelectionResult edits)   at 
Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.AbstractCommentSelectionBase`1.ExecuteCommand(ITextView textView, ITextBuffer subjectBuffer, TCommand command, CommandExecutionContext context)   at 
Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.ExecuteCommand(CommentSelectionCommandArgs args, CommandExecutionContext context)   at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)   at 
Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.&lt;&gt;c__DisplayClass13_1`1.&lt;Execute&gt;b__1()   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call, Predicate`1 exceptionFilter) --- End of stack trace from previous location where exception was thrown ---    at 
Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
--
```

The span is commented, but the selection is unable to be set and the cursor goes missing until the file is re-opened.</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>27/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35284</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up an assertion in LambdaRewriter.</Title>
    <Description>Fixes #30069</Description>
    <CreatedDate>26/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35283</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35282</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35281</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35280</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview3-vs-deps to dev16.1-vs-deps [infra only]</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview3-vs-deps into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview3-vs-deps-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview3-vs-deps-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35279</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35278</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch expression crashes compiler in expression-bodied member</Title>
    <Description>https://developercommunity.visualstudio.com/content/problem/475479/visual-studio-2019-rc-cant-compile-c-80-switch-exp.html

This code fails with an assert in CheckValEscape. Looks like switch expressions are not handled.

```C#
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

class Program
{
    public enum Rainbow
    {
        Red,
        Orange,
        Yellow,
        Blue,
        Indigo,
        Violet
    }

    public ref struct RGBColor
    {
        int _r, _g, _b;

        public int R =&gt; _r;
        public int G =&gt; _g;
        public int B =&gt; _b;

        public RGBColor(int r, int g, int b)
        {
            _r = r;
            _g = g;
            _b = b;
        }
    }

    static void Main(string[] args)
    {
   //     FromRainbow(Rainbow.Red);
    }

    public static RGBColor FromRainbow(Rainbow colorBand) =&gt;
        colorBand switch
    {
        Rainbow.Red =&gt; new RGBColor(0xFF, 0x00, 0x00),
        Rainbow.Orange =&gt; new RGBColor(0xFF, 0x7F, 0x00),
        Rainbow.Yellow =&gt; new RGBColor(0xFF, 0xFF, 0x00),
        Rainbow.Blue =&gt; new RGBColor(0x00, 0x00, 0xFF),
        Rainbow.Indigo =&gt; new RGBColor(0x4B, 0x00, 0x82),
        Rainbow.Violet =&gt; new RGBColor(0x94, 0x00, 0xD3),
        _ =&gt; throw null!
    };
}
```</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35277</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/generic-attributes</Title>
    <Description>
    </Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35276</IssueID>
    <RepoID>1</RepoID>
    <Title>Null inferences do not flow out of a finally block.</Title>
    <Description>Fixes #34018</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35275</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn does not take anonymous types' properties' nullability into account when inferring type arguments</Title>
    <Description>**Version Used**: 

Branch master (25 Apr 2019)
Latest commit 95f137 by Gen Lu:
Merge pull request #35245 from genlu/FixMockExpService

Fix mock experiment service

**Steps to Reproduce**:

```cs
#nullable enable
class C
{
  void M1()
  {
    var x = new { A = (string?) null };

    if (x.A != null)
    {
      x.A.ToString(); // no warnings
      var y = new { x };
      y.x.A.ToString(); // no warnings
      
      var z = Id(x);
      z.A.ToString(); // warning
    }
  }
    
  T Id&lt;T&gt;(T t) =&gt; t;
}
```

**Expected Behavior**:
No warnings.

**Actual Behavior**:
`warning CS8602: Dereference of a possibly null reference.` is reported for `z.A.ToString()`;

**Notes**
The compiler knows that variable `x` contains an anontmous type `{A:string!}` with non-nullable property after the null check and takes this into account e.g. when inferring the result type of `new { x }` expression. However it does not take it into account when `x` is used in type inference.
</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35274</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn does not warn about mismatching nullability in method group conversions unless qualifier type is specified explicitly</Title>
    <Description>**Version Used**: 

Branch master (25 Apr 2019)
Latest commit 95f137 by Gen Lu:
Merge pull request #35245 from genlu/FixMockExpService

Fix mock experiment service

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
using System;

class C&lt;T&gt;
{
  public readonly T field;

  public C(T t) =&gt; field = t;
 
  public T M() =&gt; field;
}

class Program
{
  public static void Main()
  {
    string? s = null;
    Func&lt;string&gt; f = GetC(s).M;
    f().ToString();
  }
    
  public static C&lt;T&gt; GetC&lt;T&gt;(T t) =&gt; new C&lt;T&gt;(t);
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxAgrgOyQExAagB8BiTdAG3ImHLgAI5NraBYAKAAEAGOjgRgDc7dhwBMdAMIAeACoA+dgG92dXgGY6COBBwB7TOQCedGXQBmASzjkcQtivWSAFKZgBKOgF455qza90MHZ0DhwapgCyTh7evta27AC+wpzi/ADsSqEa/ABsvAAsdBEQFpjRDspsqqr8XAD8dFABZJTBNRwArFJ1PmYBAOJwMBJOUG4AdBHtqmbREzK6AMowCGUA5tHtydU12bx8+dLydEMjsnIugTE+mHAA7pIXTu52iUA==

**Expected Behavior**:
Warning for converting the method group `GetC(s).M` to `Func&lt;string&gt;` since nullability of return values doesn't match.

**Actual Behavior**:
No warnings. The program crashes at runtime with a `NullReferenceException`.

**Notes**
`GetC(s)` returns `C&lt;string?&gt;`. Roslyn seems to be aware of that as you can verify by compiling the following expression `GetC(s).field.ToString()` which will have a warning for dereferencing a  possible null reference while accessing the field `field`. Consequently the method `M` have signature `string? M()` and its assignment to `Func&lt;string&gt;` should result in a warning.

Interestingly enough Roslyn will not report a warning even if you extract the result of `GetC(s)` in a separate variable i.e.
```cs
var c = GetC(s);
Func&lt;string&gt; f = c.M;
```
However it _*will*_ report a warning if you specify the type of `c` expliclitly i.e.
```cs
C&lt;string?&gt; c = GetC(s);
Func&lt;string&gt; f = c.M;
```</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35273</IssueID>
    <RepoID>1</RepoID>
    <Title>Cherry-pick PR #34909</Title>
    <Description>Based on #34909. Meant to exercise #35217.

cc @gafter @jaredpar

We believe we've addressed the problem that this change produces via #35311 and #35373.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35272</IssueID>
    <RepoID>1</RepoID>
    <Title>Make sure nullability mismatch in constraints specified in different partial declarations (types/methods) are properly detected and reported.</Title>
    <Description>Fixes #30229.
Fixes #35179.

Implements the following LDM decision:

For partial types, the invariant matching from type inference and merging. A mismatch
between two non-oblivious candidates produces an error. No warnings are produced.

For partial methods, nullability has to match with exception for oblivious and we produce warnings.
For the result, we use the implementation signature inside the implementation, and the
declaration signature for the callers.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35271</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove experimentation from toggle comment features.</Title>
    <Description>@genlu @dpoeschl since master-vs-deps is now targeting 16.2, I'm removing the experimentation from these features all together.  Toggle block comment is already fully dialed up (for preview 2) and toggle line comment will be fully dialed up shortly for preview 3</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35270</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps [infra-only]</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35269</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to dev16.1-vs-deps [infra only]</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35268</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview3 to dev16.1-preview3-vs-deps [infra only]</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview3 into dev16.1-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview3-to-dev16.1-preview3-vs-deps
git reset --hard upstream/dev16.1-preview3-vs-deps
git merge upstream/dev16.1-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview3-to-dev16.1-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35267</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to master [SHA-only]</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35266</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview3 to dev16.1 [infra only]</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview3 into dev16.1.

``` bash
git fetch --all
git checkout merges/dev16.1-preview3-to-dev16.1
git reset --hard upstream/dev16.1
git merge upstream/dev16.1-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview3-to-dev16.1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35265</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable symbol tests on mono</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/34646</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35264</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove usage of QuietRestore</Title>
    <Description>Removes a workaround for nuget spewing a lot of output on restore. 
This has been now fixed in nuget. Restore now outputs a line per restored project, similarly to build.

```
&gt;restore
Roslyn.sln:
  Restore completed in 43.27 ms for C:\Users\tomat\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19171.3\tools\Tools.proj.
  Restore completed in 40.41 ms for C:\R3\src\CodeStyle\VisualBasic\Analyzers\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.vbproj.
  Restore completed in 41.87 ms for C:\R3\src\CodeStyle\CSharp\Analyzers\Microsoft.CodeAnalysis.CSharp.CodeStyle.csproj.
...

&gt;build
Roslyn.sln:
  CompilersBoundTreeGenerator -&gt; C:\R3\artifacts\bin\CompilersBoundTreeGenerator\x64\Debug\netcoreapp2.1\BoundTreeGenerator.dll
  CSharpErrorFactsGenerator -&gt; C:\R3\artifacts\bin\CSharpErrorFactsGenerator\x64\Debug\netcoreapp2.1\CSharpErrorFactsGenerator.dll
  CSharpSyntaxGenerator -&gt; C:\R3\artifacts\bin\CSharpSyntaxGenerator\x64\Debug\netcoreapp2.1\CSharpSyntaxGenerator.dll
...
```

QuietRestore is a hack that is causing issues like https://github.com/dotnet/arcade/issues/2220.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35263</IssueID>
    <RepoID>1</RepoID>
    <Title>Update spec for enhanced using</Title>
    <Description>We appear to have two specifications for enhanced using: one at https://github.com/dotnet/roslyn/blob/master/docs/features/enhanced-using.md and one at https://github.com/dotnet/csharplang/blob/master/proposals/csharp-8.0/using.md .  The one in `csharplang` should contain the latest language specification.  If it does not, please update it.
</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35262</IssueID>
    <RepoID>1</RepoID>
    <Title> Hide dependency on VsInteractiveWindow package from Microsoft.VisualStudio.LanguageServices package</Title>
    <Description>
    </Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35261</IssueID>
    <RepoID>1</RepoID>
    <Title>'NullReferenceException' occurs when getting 'Microsoft.CodeAnalysis.TypeInfo'</Title>
    <Description>When using `Microsoft.CodeAnalysis` libraries, I faced a problem that when calling `GetTypeInfo` (extension method for `SemanticModel`), `NullReferenceException` occurs. The node for which a character is requested – `ConstantPatternSyntax`.

The used version is Microsoft.CodeAnalysis: **3.0.19.17001**

Stack trace:
  ```
 at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionSlow(TypeSymbol source, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics) in /_/src/Compilers/CSharp/Portable/Binder/Semantics/Conversions/ConversionsBase.cs:line 552
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyBuiltInConversion(TypeSymbol source, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics) in /_/src/Compilers/CSharp/Portable/Binder/Semantics/Conversions/ConversionsBase.cs:line 404
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoForNode(BoundNode lowestBoundNode, BoundNode highestBoundNode, BoundNode boundNodeForSyntacticParent) in /_/src/Compilers/CSharp/Portable/Compilation/CSharpSemanticModel.cs:line 2043
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken) in /_/src/Compilers/CSharp/Portable/Compilation/MemberSemanticModel.cs:line 1142
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken) in /_/src/Compilers/CSharp/Portable/Compilation/SyntaxTreeSemanticModel.cs:line 310
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(PatternSyntax pattern, CancellationToken cancellationToken) in /_/src/Compilers/CSharp/Portable/Compilation/CSharpSemanticModel.cs:line 844
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoFromNode(SyntaxNode node, CancellationToken cancellationToken) in /_/src/Compilers/CSharp/Portable/Compilation/CSharpSemanticModel.cs:line 4644
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoCore(SyntaxNode node, CancellationToken cancellationToken) in /_/src/Compilers/CSharp/Portable/Compilation/CSharpSemanticModel.cs:line 4713
   at Microsoft.CodeAnalysis.ModelExtensions.GetTypeInfo(SemanticModel semanticModel, SyntaxNode node, CancellationToken cancellationToken) in /_/src/Compilers/Core/Portable/Compilation/Extensions.cs:line 60
```

It also seems like the problem is reproduced in Visual Studio.

Visual Studio version: **16.0.2**

```
class C1&lt;T1, T2&gt;
{
    void foo()
    {
        T1 val = default;
        if (val is null)
        {

        }
    }
}
```

If in this code you try to get `TypeSymbol` from `ConstantPatternExpression` (`null`) through Syntax Visualizer, Visual Studio will restart. In Event Viewer you can find a corresponding recording with description:

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The process was terminated due to an unhandled exception.
Exception Info: System.NullReferenceException
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionSlow(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyBuiltInConversion(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoForNode(Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetTypeInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoFromNode(Microsoft.CodeAnalysis.SyntaxNode, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoCore(Microsoft.CodeAnalysis.SyntaxNode, System.Threading.CancellationToken)
   at Roslyn.SyntaxVisualizer.Control.SyntaxVisualizerControl.TypeSymbolDetailsMenuItem_Click(System.Object, System.Windows.RoutedEventArgs)
   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(System.Object, System.Windows.RoutedEventArgs)
   at System.Windows.EventRoute.InvokeHandlersImpl(System.Object, System.Windows.RoutedEventArgs, Boolean)
   at System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject, System.Windows.RoutedEventArgs)
   at System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
   at System.Windows.Controls.MenuItem.InvokeClickAfterRender(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)
   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
   at MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext, System.Threading.ContextCallback, System.Object)
   at System.Windows.Threading.DispatcherOperation.Invoke()
   at System.Windows.Threading.Dispatcher.ProcessQueue()
   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)
   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)
```</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35260</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual studio inserts semicolon that I type at wrong position</Title>
    <Description>**Version Used**: 

```
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.1.0 Preview 1.0
VisualStudio.16.Preview/16.1.0-pre.1.0+28809.33
Microsoft .NET Framework
Version 4.7.03056

Installed Version: Enterprise

Azure App Service Tools v3.0.0   16.1.189.34293
Azure App Service Tools v3.0.0

C# Tools   3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

NuGet Package Manager   5.1.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

Visual Basic Tools   3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio
```

**Steps to Reproduce**:

Type semicolon after `return z.c{here}` in the code below:

```cs
using System;
using System.Runtime.CompilerServices;

class C
{
  public C? c;

  public void Test(C? c){
    c.NotNull(x =&gt; x.c.NotNull(y =&gt; y.c.NotNull(z =&gt; 
    {
      // type ';' after 'z.c'
      return z.c)));
      ;
  }
}

static class Ext
{
  public static extern V NotNull&lt;T, V&gt;([EnsuresNotNull] this T t, Func&lt;T, V&gt; a);
}

namespace System.Runtime.CompilerServices{
  public class EnsuresNotNullAttribute : System.Attribute { }
}
```

**Expected Behavior**:
The semicolon is inserted at the caret position resulting in the line `return z.c;)));`

**Actual Behavior**:
The semicolon is inserted after the closing parentheses resulting in the line `return z.c)));;`. Ctrl+z just removes the so I can only place it here via copy-paste.
</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35259</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35258</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Formatter ignores 'ignore spaces' options in enum</Title>
    <Description>**Version Used**:
16.0.2 (Community 2019)

**Steps to Reproduce**:

	class TestClass
	{
		void Test()
		{
			var x   = 1;
			var y   = 1  +  2;
		}
		enum E
		{
			One     = 0x01,
			Two     = 0x02,
			Three   = 0x04,
		}
	}

^ED (with ignore spaces option)

**Expected Behavior**:

Do nothing.

**Actual Behavior**:

```
	class TestClass
	{
		void Test()
		{
			var x   = 1;
			var y   = 1  +  2;
		}
		enum E
		{
			One = 0x01,
			Two = 0x02,
			Three = 0x04,
		}
	}
```
As you can see, the vars did not change (I have both *ignore spaces* turned on - for declarations and around binary operators, did not find any other), but it messed up the enum.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35257</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData for 16.1 preview3 and preview4</Title>
    <Description>
    </Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35256</IssueID>
    <RepoID>1</RepoID>
    <Title>Update versions.props for 16.1 preview 4</Title>
    <Description>
    </Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35255</IssueID>
    <RepoID>1</RepoID>
    <Title>Update azure-pipelines* for dev16.1-preview3*</Title>
    <Description>
    </Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35254</IssueID>
    <RepoID>1</RepoID>
    <Title>Warn for CancellationToken parameters missing [EnumeratorCancellation]</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/35166 (warn for potentially missing `[EnumeratorCancellation]`)
Closes https://github.com/dotnet/roslyn/issues/35165 (warn for `[EnumeratorCancellation]` in ineffective places)</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35253</IssueID>
    <RepoID>1</RepoID>
    <Title>When renaming something to ~Attribute, Visual Studio shows an extra “Attribute” at the end</Title>
    <Description>**Version Used**: Visual Studio 16.1.0 Preview 2.0
**Steps to Reproduce**:

1. Press &lt;kbd&gt;Ctrl + R, R&lt;/kbd&gt; to rename a member.
2. Rename the member so that its name ends with `Attribute`

**Expected Behavior**:
Visual Studio should preview the new name correctly.

**Actual Behavior**:
Visual Studio previews the new name with another “Attribute” at the end of the name. This extra “Attribute” is not kept when submitting the refactoring though.

This might be a regression from #22955 and/or #21657.

---

This behavior is best explained by the following GIF: Here, I have a property `MyProp` and try to rename it to `MyPropAttribute`. As soon as I finish typing that name, Visual Studio displays another “Attribute” at the end of the name. If I submit the rename refactoring, that extra “Attribute” does not actually appear though.

![GIF that shows the visible behavior: a property `MyProp` is being renamed to `MyPropAttribute` and Visual Studio shows it as `MyPropAttributeAttribute`](https://user-images.githubusercontent.com/132240/56701443-7a88f380-66ff-11e9-8b1c-c3055d458cf4.gif)
</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35252</IssueID>
    <RepoID>1</RepoID>
    <Title>Breaking up a global lock</Title>
    <Description>The compiler will weakly cache `AssemblySymbol` instances for a given
`AssemblyMetadata` instance. The cache is shared across both the C# and
VB consumers. The implementation is a `WeakList&lt;IAssemblySymbol&gt;`
instance guarded by `lock` statements on all acesses.

The object used to guard the cache though was
`SymbolCacheAndReferenceManagerStateGuard`. This is a global object
which meant access to cached symbols for any assembly on one thread
blocked access to all assemblies on all other threads. VS Thread Watson
data showed this is a hot lock in certain customer code path.

This change fixes contention here by moving the lock to be specific to a
given `AssemblyMetadata` instance. This means the contention is
essentially limited to symbols for a specific assembly.</Description>
    <CreatedDate>25/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35251</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't provide sync namespace refactoring in generated code</Title>
    <Description>Fix a feedback item
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/836395

While working on this, I noticed a few other refactoring are also provided in generated code, e.g. extract interface, change namespace, etc., that either have no effect or crash with similar error. We might need to fix those as well.

@dotnet/roslyn-ide 
</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35250</IssueID>
    <RepoID>1</RepoID>
    <Title>XmlDocComments recalculated too many times during diagnostic computation</Title>
    <Description>**Version Used**: 
Dev16 RTM

**Steps to Reproduce**:

1. New C# console app
2. Add an XML doc comment via /// 
3. Attach debugger to VS and enable break on first-chance XmlException
4. Make XML invalid, say add a `&amp;` character

**Expected Behavior**:
Should have one or two first-chance exceptions, not more than say 5

**Actual Behavior**:
It is thrown over 170 times, which indicates to me that Roslyn is doing too much work to compute diagnostics in this scenario.

Stack trace
```
&gt;	System.Xml.XmlTextReaderImpl.Throw Line 2501	C#
 	System.Xml.XmlTextReaderImpl.Throw Line 2485	C#
 	System.Xml.XmlTextReaderImpl.ParseQName Line 6789	C#
 	System.Xml.XmlTextReaderImpl.HandleEntityReference Line 5455	C#
 	System.Xml.XmlTextReaderImpl.ParseText Line 5141	C#
 	System.Xml.XmlTextReaderImpl.ParseText Line 4998	C#
 	System.Xml.XmlTextReaderImpl.ParseElementContent Line 3839	C#
 	System.Xml.XmlTextReaderImpl.Read Line 1272	C#
 	Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.ParseInternal Line 52	C#
 	Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.ParseAndGetException Line 25	C#
 	Microsoft.CodeAnalysis.CSharp.DocumentationCommentCompiler.TryProcessDocumentationCommentTriviaNodes Line 436	C#
 	Microsoft.CodeAnalysis.CSharp.DocumentationCommentCompiler.DefaultVisit Line 293	C#
 	Microsoft.CodeAnalysis.CSharp.CSharpSymbolVisitor.VisitMethod Line 69	C#
 	Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol.Accept Line 636	C#
 	Microsoft.CodeAnalysis.CSharp.DocumentationCommentCompiler.VisitNamedType Line 223	C#
 	Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.Accept Line 582	C#
 	Microsoft.CodeAnalysis.CSharp.DocumentationCommentCompiler.VisitNamespace Line 192	C#
 	Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol.Accept Line 141	C#
 	Microsoft.CodeAnalysis.CSharp.DocumentationCommentCompiler.VisitNamespace Line 192	C#
 	Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol.Accept Line 141	C#
 	Microsoft.CodeAnalysis.CSharp.CSharpSymbolVisitor.Visit Line 15	C#
 	Microsoft.CodeAnalysis.CSharp.DocumentationCommentCompiler.WriteDocumentationCommentXml Line 100	C#
 	Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForMethodBodiesInTree Line 2329	C#
 	Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForSyntaxTree Line 2447	C#
 	Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDiagnostics Line 134	C#
 	Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GenerateCompilationEvents Line 797	C#
 	Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GenerateCompilationEventsAndPopulateEventsCacheAsync Line 783	C#
 	Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsAsync Line 688	C#
 	Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerSemanticDiagnosticsCoreAsync Line 591	C#
 	Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerSemanticDiagnosticsAsync Line 567	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.ComputeDiagnosticsAsync.__ComputeDiagnosticAnalyzerDiagnosticsAsync|0 Line 449	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.ComputeDiagnosticsAsync Line 411	C#
 	Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.Executor.ComputeDiagnosticsAsync Line 164	C#
 	Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.Executor.GetDocumentAnalysisDataAsync Line 67	C#
 	Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalyzeDocumentForKindAsync Line 53	C#
```</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35249</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix crash in pattern matching</Title>
    <Description>We relaxed the requirement for pattern matching open types to a
constant pattern to not require a conversion from the pattern expression
to the open type, but the pattern expression should be required to have
a constant value.

Fixes #34980</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35248</IssueID>
    <RepoID>1</RepoID>
    <Title>Port Dispose analyzers (DisposeObjectsBeforeLosingScope and DisposableFieldsShouldBeDisposed)</Title>
    <Description>These analyzers are being ported from [CA2000](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2000-dispose-objects-before-losing-scope) and [CA2213](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2213-disposable-fields-should-be-disposed) FxCop analyzers, which are amongst the most popular FxCop analyzers and were considered valuable enough to add in the box in VS. Ported analyzers share the core dispose dataflow analysis computation with the analyzers in the roslyn-analyzers repo (Microsoft.CodeAnalysis.FlowAnalysis.Utilities NuGet package).

We will now flag disposable creations in methods that do not escape the method body (return value, out/ref params, assign to field/property, add to collection, etc.). Additionally, we also flag disposable fields of disposable types that are not disposed in the type's Dispose method.

This PR does not add any code fixes. We already have a code refactoring that offers wrapping a disposable creation within a using statement. I am hoping to extend that to handle more cases and also
possibly convert it to a code fix in follow-up PR(s).</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>30/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35247</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix `nameof(MethodName)` not classifying MethodName</Title>
    <Description>Treat CandidateReason MemberGroup the same as Abiguous when classifyng NameSyntax

Fixes https://github.com/dotnet/roslyn/issues/35246


&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

A customer uses a `nameof` expression to get the name of a method. The user expects to see the referenced method colorized the same as other method names, however the method name will be the default identifier color.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/35246

### Workarounds, if any

None

### Risk

Low

### Performance impact

Low

### Is this a regression from a previous update?

No

### Root cause analysis

When a method name is not referenced as part of an invocation expression the semantic classifier will not classify it. It will be syntactically classified as an Identifier.

### How was the bug found?

Reported through developer community against a preview release

&lt;/details&gt;</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35246</IssueID>
    <RepoID>1</RepoID>
    <Title>VS2019 syntax highlight (C#) - methods aren't colorized within nameof()</Title>
    <Description>VSF_TYPE_MARKDOWNWithin a class, when referencing a local method using `nameof()`, it isn't colorized according to Fonts and Colors rule for “User Members - Methods”. Method's declaration and its calls are correctly colorized.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/529390/vs2019-syntax-highlight-c-methods-arent-colorized.html
VSTS ticketId: 845546_
_These are the original issue comments:_

Visual Studio Feedback System on 4/12/2019, 01:01 AM (12 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 4/15/2019, 06:44 PM (8 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35245</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix mock experiment service</Title>
    <Description>Created a single shared experiment service for test, and fixed existing tests to use it

@dpoeschl @dibarbet @dotnet/roslyn-ide </Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35244</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix exception in PasteTrackingService.RegisterPastedTextSpan</Title>
    <Description>To handle multiple text spans being register consecutively, use the Properties indexer instead of the `Add` method to update the pasted span.

Fixes #33776


&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

In rare instances a customer will paste code, then because of a delay in the editor updating, the user will paste the same code a second time. These consecutive pastes during the delay will cause the tracking span from the first paste to not be cleared before registering the second span. A gold bar will inform the user of an unhandled exception.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/33776

### Workarounds, if any

None

### Risk

Low

### Performance impact

Low

### Is this a regression from a previous update?

No

### Root cause analysis

The PasteTrackingService stores the pasted textspan on the TextBuffer's Properties collection. When registering it invokes the Add() method which will thrown an exception if the given key is already present. This is not normally an issue because the act of pasting changes the TextBuffer which will remove the key in advance. However in the rare case of the delay scenario, the text span is registered before the key is cleared.

### How was the bug found?

Reported through internal dogfooding

&lt;/details&gt;</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35243</IssueID>
    <RepoID>1</RepoID>
    <Title>Naming of naming styles should reflect their casing</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.1.0 Preview 3.0 [28823.117.d16.1]
VisualStudio.16.IntPreview/16.1.0-pre.3.0+28823.117.d16.1
Microsoft .NET Framework
Version 4.8.03752

**Steps to Reproduce**:

1. Ctrl Q
2. Type 'C# naming'
3. Enter
4. Open the drop down "Required Style" for any entry

**Expected Behavior**:

Finding the following entries:

* `PascalCase`
* `camelCase`

**Actual Behavior**:

These entries:

* `Pascal Case`
* `Camel Case`

[Was raised here](https://twitter.com/gotheap/status/1121118929097637888).</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35242</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35241</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to dev16.1-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into dev16.1-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps
git reset --hard upstream/dev16.1-preview2-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35240</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.1-preview2</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.1-preview2.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.1-preview2
git reset --hard upstream/dev16.1-preview2
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.1-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35239</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unnecessary parantheses is confused by nullable types</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.1.0 Preview 2.0 [28818.146.d16.1]
VisualStudio.16.IntPreview/16.1.0-pre.2.0+28818.146.d16.1
Microsoft .NET Framework
Version 4.7.03190

Installed Version: Enterprise

ASP.NET and Web Tools 2019   16.1.302.53887
ASP.NET and Web Tools 2019

ASP.NET Core Blazor Language Services   16.0.19216.03

ASP.NET Web Frameworks and Tools 2019   16.1.302.53887
For additional information, visit https://www.asp.net/

Azure App Service Tools v3.0.0   16.1.302.53887
Azure App Service Tools v3.0.0

Azure Functions and Web Jobs Tools   16.1.302.53887
Azure Functions and Web Jobs Tools

C# Tools   3.1.0-beta2-19211-01+9d88fee4efb9f7ae4ae053d63b9f8b5b31217c90
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

Microsoft Azure Tools   2.9
Microsoft Azure Tools for Microsoft Visual Studio 0x10 - v2.9.0.0

Microsoft Continuous Delivery Tools for Visual Studio   0.4
Simplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft Library Manager   1.0
Install client-side libraries easily to any web project

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual Studio Tools for Containers   1.1
Develop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit &amp; refresh your app without having to rebuild the container.

NuGet Package Manager   5.1.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

Snapshot Debugging Extension   1.0
Snapshot Debugging Visual Studio Extension Detailed Info

SQL Server Data Tools   16.0.61904.17120
Microsoft SQL Server Data Tools

TypeScript Tools   16.0.10411.2001
TypeScript Tools for Microsoft Visual Studio

Visual Basic Tools   3.1.0-beta2-19211-01+9d88fee4efb9f7ae4ae053d63b9f8b5b31217c90
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual F# Tools 10.4 for F# 4.6   16.0.0.0.  Commit Hash: 809f41207b74a1356208f11b8fa3a15233734050.
Microsoft Visual F# Tools 10.4 for F# 4.6

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

Visual Studio Tools for Containers   1.0
Visual Studio Tools for Containers


**Steps to Reproduce**:

1. Create a .NET Standard 2.0 class library (though other project types should have the same issue)
2. Add this code to the class:
```c#
        public void Foo()
        {
            DateTime? date = DateTime.Now;
            Console.WriteLine((date?.AddDays(1))?.DayOfWeek);
        }
```
3. VS offers to remove "unnecessary parentheses":
![image](https://user-images.githubusercontent.com/202643/56683114-c5642600-6681-11e9-9c74-da5ab3b8d396.png)
4. If you accept the suggestion, it generates invalid C# code:
![image](https://user-images.githubusercontent.com/202643/56683173-e0369a80-6681-11e9-9679-3819a06d4fc2.png)

**Expected Behavior**:
It shouldn't offer to remove the parentheses because they are in fact required.

**Actual Behavior**:
It generates incorrect code.
</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35238</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto-generate assembly version of the build task assembly</Title>
    <Description>Opt into versioning policy that produces a different assembly version for every build.
This allows multiple versions of the task assembly to coexists within the same msbuild AppDomain.

Depends on Arcade change https://github.com/dotnet/arcade/pull/2615</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35237</IssueID>
    <RepoID>1</RepoID>
    <Title>"Introduce 'using' statement" causes compilation error</Title>
    <Description>**Version Used**: VS 16.0.0, .NET Core 2.1

**Steps to Reproduce**:

1. Add the following code

```csharp
var connection = new SqlConnection();
var command = connection.CreateCommand();
command.ExecuteNonQuery();
```

2. Go to the first line and type Ctrl+.
3. Select "Introduce 'using' statement"

**Expected Behavior**:

Code continues to compile after refactor.

```csharp
using (var connection = new SqlConnection())
{
    var command = connection.CreateCommand();
    command.ExecuteNonQuery();
}
```

**Actual Behavior**:

The refactor causes a compiler error.

```csharp
using (var connection = new SqlConnection())
{
    var command = connection.CreateCommand();
}
command.ExecuteNonQuery(); // Compiler error
```</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35236</IssueID>
    <RepoID>1</RepoID>
    <Title>Namespace completion won't trigger between dots</Title>
    <Description>```C#
namespace N.O.P
{
}

namespace N.$$.P
{
}
```

Intellisense doesn't trigger on ctrl-space at $$ unless a character is typed, eg:
![image](https://user-images.githubusercontent.com/3751401/56677205-dc504b80-6674-11e9-9c9a-0f7944f5e1d5.png)

</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35235</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN fix for bug Bug 822081</Title>
    <Description>Loc fix for bug Bug 822081</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35234</IssueID>
    <RepoID>1</RepoID>
    <Title>intellisense should suggest event after readonly in a struct member declaration</Title>
    <Description>…member declaration.

```csharp
struct C {
    readonly e //suggest event here
}
```

See https://github.com/dotnet/roslyn/issues/34774</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35233</IssueID>
    <RepoID>1</RepoID>
    <Title>Implicit class-local object field for lock statement</Title>
    <Description>**Version Used**: C# 7

I use the `lock` statement a fair bit, and I find it very redundant that for every single time I have used it, across the span of years, I have, in all cases, had to write exactly one read-only object field in every class I use it with, and then reference that object as the object to lock on, only inside the class it was defined. I've never needed more than one object, I've never needed to pass the object outside of the class. Why is it that the lock statement can't simply take the form of
```cs
lock
{
    // ...
}
```
and just create a private internal object field in that class? For multiple statements, they would just refer to that same object. The old syntax would still be there for the edge cases of requiring a handle on the object, but for every case of the `lock` statement I've ever seen, it hasn't been needed in those cases. I don't see this case being any different from an auto-property versus a fully-written property with an explicitly-written backing field.

Sorry if this has already been suggested, but I couldn't find a suggestion already made for it. I would have done this years ago but I figured it was such an obvious idea that it was already suggested and just shot down. It's a complaint I see from new C# users all the time.</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>27/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35232</IssueID>
    <RepoID>1</RepoID>
    <Title>Method which returns nested Awaitable do not warn developers to write multiple awaits.</Title>
    <Description>**Version Used**: 

Visual Studio 2019

**Steps to Reproduce**:

Assume that we have a method that returns nested awaitables:

```csharp
Task&lt;Task&gt; FooAsync()
{
    throw new NotImplementedException();
}
```

If developers forget to await it, C# language will warn the developers to add an `await` keyboard:

```csharp
FooAsync();
```

But if we add one `await`, the C# language will not warn the developers to add another required `await` keyword:

```csharp
await FooAsync();
```

The correct usage is:

```csharp
await await FooAsync();
```

I think that C# language should add this warning because we sometimes cannot find out this incorrect usage ourselves especially in UI applications:

```csharp
await await Dispatcher.InvokeAsync(async ()=&gt;
{
    // Ignored codes.
});
```
</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35231</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35230</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35229</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to dev16.1-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into dev16.1-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps
git reset --hard upstream/dev16.1-preview2-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35228</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.1-preview2</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.1-preview2.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.1-preview2
git reset --hard upstream/dev16.1-preview2
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.1-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35227</IssueID>
    <RepoID>1</RepoID>
    <Title>Support nullable variance in interface implementation</Title>
    <Description>Essentially, the work from  #23268 and #30958, but for interface implementation.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35226</IssueID>
    <RepoID>1</RepoID>
    <Title>null exception on Microsoft.CodeAnalysis.CSharp.Symbols.MemberSignatureComparer.HaveSameReturnTypes(Symbol member1, TypeMap typeMap1, Symbol member2, TypeMap typeMap2, TypeCompareKind typeComparison)</Title>
    <Description>sorry, I dont have anything more than the callstack.

...

```
04/23/2019 15:29:26 : Error : Microsoft.CodeAnalysis.Remote.CodeAnalysisService (8091) : Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.Symbols.MemberSignatureComparer.HaveSameReturnTypes(Symbol member1, TypeMap typeMap1, Symbol member2, TypeMap typeMap2, TypeCompareKind typeComparison)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MemberSignatureComparer.Equals(Symbol member1, Symbol member2)
   at Microsoft.CodeAnalysis.CSharp.Symbols.OverriddenOrHiddenMembersHelpers.FindOverriddenOrHiddenMembersInType(Symbol member, Boolean memberIsFromSomeCompilation, NamedTypeSymbol memberContainingType, NamedTypeSymbol currType, Symbol&amp; currTypeBestMatch, Boolean&amp; currTypeHasSameKindNonMatch, ArrayBuilder`1&amp; hiddenBuilder)
   at Microsoft.CodeAnalysis.CSharp.Symbols.OverriddenOrHiddenMembersHelpers.MakeOverriddenOrHiddenMembersWorker(Symbol member)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertySymbol.get_OverriddenOrHiddenMembers()
   at Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol.get_OverriddenProperty()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertySymbol..ctor(SourceMemberContainerTypeSymbol containingType, Binder bodyBinder, BasePropertyDeclarationSyntax syntax, String name, Location location, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertySymbol.Create(SourceMemberContainerTypeSymbol containingType, Binder bodyBinder, PropertyDeclarationSyntax syntax, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.AddNonTypeMembers(MembersAndInitializersBuilder builder, SyntaxList`1 members, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.AddDeclaredNontypeMembers(MembersAndInitializersBuilder builder, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.BuildMembersAndInitializers(DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersAndInitializers()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.MakeAllMembers(DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersByNameSlow()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersByName()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembers(String name)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol.Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers(String name)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindOverridesAsync&gt;d__41.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractMethodOrPropertyOrEventSymbolReferenceFinder`1.&lt;DetermineCascadedSymbolsAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.Finders.OrdinaryMethodReferenceFinder.&lt;DetermineCascadedSymbolsAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;&gt;c__DisplayClass21_2.&lt;&lt;DetermineAllSymbolsCoreAsync&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;DetermineAllSymbolsCoreAsync&gt;d__21.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;&gt;c__DisplayClass21_2.&lt;&lt;DetermineAllSymbolsCoreAsync&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;DetermineAllSymbolsCoreAsync&gt;d__21.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;DetermineAllSymbolsAsync&gt;d__20.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;FindReferencesAsync&gt;d__11.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;FindReferencesAsync&gt;d__11.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindReferencesAsync&gt;d__31.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindReferencesAsync&gt;d__37.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeLens.CodeLensReferencesService.&lt;FindAsync&gt;d__1`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Remote.CodeAnalysisService.&lt;&gt;c__DisplayClass3_0.&lt;&lt;GetReferenceCountAsync&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Remote.ServiceHubServiceBase.&lt;RunServiceAsync&gt;d__36`1.MoveNext()
04/23/2019 15:29:26 : Error : Microsoft.CodeAnalysis.Remote.CodeAnalysisService (8091) : From:    at Microsoft.CodeAnalysis.Remote.ServiceHubServiceBase.LogException(Exception ex)
   at Microsoft.CodeAnalysis.Remote.ServiceHubServiceBase.&lt;RunServiceAsync&gt;d__36`1.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Remote.ServiceHubServiceBase.&lt;RunServiceAsync&gt;d__36`1.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at Microsoft.CodeAnalysis.Remote.CodeAnalysisService.&lt;&gt;c__DisplayClass3_0.&lt;&lt;GetReferenceCountAsync&gt;b__0&gt;d.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at Microsoft.CodeAnalysis.CodeLens.CodeLensReferencesService.&lt;FindAsync&gt;d__1`1.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindReferencesAsync&gt;d__37.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindReferencesAsync&gt;d__31.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(Exception exception)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;FindReferencesAsync&gt;d__11.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;DetermineAllSymbolsAsync&gt;d__20.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;DetermineAllSymbolsCoreAsync&gt;d__21.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Threading.Tasks.Task.WhenAllPromise.Invoke(Task completedTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Threading.Tasks.UnwrapPromise`1.TrySetFromTask(Task task, Boolean lookForOce)
   at System.Threading.Tasks.UnwrapPromise`1.InvokeCore(Task completingTask)
   at System.Threading.Tasks.UnwrapPromise`1.Invoke(Task completingTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;&gt;c__DisplayClass21_2.&lt;&lt;DetermineAllSymbolsCoreAsync&gt;b__0&gt;d.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Threading.Tasks.Task.WhenAllPromise.Invoke(Task completedTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Threading.Tasks.UnwrapPromise`1.TrySetFromTask(Task task, Boolean lookForOce)
   at System.Threading.Tasks.UnwrapPromise`1.InvokeCore(Task completingTask)
   at System.Threading.Tasks.UnwrapPromise`1.Invoke(Task completingTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;DetermineAllSymbolsCoreAsync&gt;d__21.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Threading.Tasks.Task.WhenAllPromise.Invoke(Task completedTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Threading.Tasks.UnwrapPromise`1.TrySetFromTask(Task task, Boolean lookForOce)
   at System.Threading.Tasks.UnwrapPromise`1.InvokeCore(Task completingTask)
   at System.Threading.Tasks.UnwrapPromise`1.Invoke(Task completingTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;&gt;c__DisplayClass21_2.&lt;&lt;DetermineAllSymbolsCoreAsync&gt;b__0&gt;d.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at Microsoft.CodeAnalysis.FindSymbols.Finders.OrdinaryMethodReferenceFinder.&lt;DetermineCascadedSymbolsAsync&gt;d__1.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)
   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)
   at Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractMethodOrPropertyOrEventSymbolReferenceFinder`1.&lt;DetermineCascadedSymbolsAsync&gt;d__1.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1.TrySetResult(TResult result)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(TResult result)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindImplementedInterfaceMembersAsync&gt;d__44.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1.TrySetResult(TResult result)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(TResult result)
   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&lt;FindTypesFromCacheOrComputeAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```
</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35225</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix razor completion</Title>
    <Description>Fix #35172. 

This also include[ a small change](https://github.com/dotnet/roslyn/pull/35225/commits/47138ad51f879106b9530238ea4066cecb8e6a37) as an attempt to fix the feedback issue below. I still can't repro the crash so not able to verify the fix yet.
https://developercommunity.visualstudio.com/content/problem/514087/problem-in-namespace-refactor.html?childToView=546711#comment-546711

FYI @heejaechang 

![RazorCompletion](https://user-images.githubusercontent.com/788783/56620471-dbb8a600-65dd-11e9-8acb-15bde8f0791a.gif)

@jinujoseph @vatsalyaagrawal this needs approval.


---


**Customer and scenario info**
**Who is impacted by this bug?**
Razor users who turned on import completion.
**What is the customer scenario and impact of the bug?**
Use commit a import completion item
**Expected**
The type name has been committed
**Actual**
the document will be corrupted
**What is the workaround?**
User can't use import completion in Razor document, manually add imports first.
**How was the bug found?**
user feedback
**If this fix is for a regression - what had regressed, when was the regression introduced, and why was the regression originally missed?**
No. import completion is a new feature added in 16.1</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35224</IssueID>
    <RepoID>1</RepoID>
    <Title>Code Cleanup having trouble with switch expression</Title>
    <Description>See the screenshot from Roslyn source below. The switch expression is flagged for IDE0055, but click "Run code clean up" in VS doesn't do anything.

```
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(82,9,82,13): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(83,13,83,17): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(84,13,84,17): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(85,13,85,17): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(86,9,86,13): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\MoveToNamespaceResult.cs(21,38,21,39): warning IDE0055: Fix formatting
```


![image](https://user-images.githubusercontent.com/788783/56619457-6b5c5580-65da-11e9-9f40-526553c5863d.png)
http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/MoveToNamespace/AbstractMoveToNamespaceCodeAction.cs,49
</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35222</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion is incorrect for lambda parameters</Title>
    <Description>```C#
using System;

namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {
            Test(prog =&gt; prog.[||]); // Invoke completion on prog.
        }

        static void Test(Action&lt;Program&gt; d)
        {
        }
    }
}
```

Invoking completion here brings up the members of `Action&lt;Program&gt;`, not the members of `Program`, rendering completion completely useless. cc @ivanbasov.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35221</IssueID>
    <RepoID>1</RepoID>
    <Title>Semicolon terminating a field declaration misplaced when typed</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/56616102-824a7a00-65d1-11e9-8958-5b124f763a06.png)

**Steps to Reproduce**:

Place caret in the below code as indicated by `|` and type `;`.

```C#
using System;
class Program
{
    private const int Max = 1000|

    [Obsolete]
    public string Property { get; set; }
}
```

**Expected Behavior**:

```C#
using System;
class Program
{
    private const int Max = 1000;

    [Obsolete]
    public string Property { get; set; }
}
```

**Actual Behavior**:

The semicolon is written to the buffer after the `[Obsolete]` attribute.

```C#
using System;
class Program
{
    private const int Max = 1000

    [Obsolete];
    public string Property { get; set; }
}
```</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35220</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't suggest static members in PropertySubPatternCompletionProvider</Title>
    <Description>This should be a relatively simple fix. It should prevent things like this being suggested by intellisense:

![image](https://user-images.githubusercontent.com/29174528/56614266-8fd32480-6610-11e9-9eba-f8f77da4705a.png)

See:  https://github.com/dotnet/roslyn/issues/33250
</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35219</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure we refresh ruleset severities after a ruleset change</Title>
    <Description>If a ruleset file changed, we didn't always reapply the new values in the IDE. For legacy projects the IDE is taking the ruleset files and applying them to the compilation; for CPS projects that's being done when we call into the compiler to parse the command line string. We forgot to reparse the command line string, so CPS projects wouldn't refresh until some other command line string changed or the project was unloaded or reloaded.

Fixes https://github.com/dotnet/roslyn/issues/35164

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

If the customer changes a rulesetfile inside a CPS project, the changed severities won't be used in the IDE until some later point where we evict our cached values.

### Bugs this fixes

Fixes https://github.com/dotnet/roslyn/issues/35164

### Workarounds, if any

Workaround would be to unload and reload the project.

### Risk

Low.

### Performance impact

Low, since this is an uncommon code path being touched.

### Is this a regression from a previous update?

Yes, it was probably broken in 16.0 when we rewrote our project system integration.

### Root cause analysis

We didn't have any unit tests for this particular issue. We did fix some bugs around this general area but it seems this snuck through when we fixed the other bugs.

A unit test has been added.

### How was the bug found?

Customer report.

&lt;/details&gt;</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35218</IssueID>
    <RepoID>1</RepoID>
    <Title>Port toggle line comment telemetry to 16.1</Title>
    <Description>Port https://github.com/dotnet/roslyn/commit/a3ea63c2f0436c43ba47a829948e8c0efeb2a4bb to 16.1

</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35217</IssueID>
    <RepoID>1</RepoID>
    <Title>Make bootstrap 32 bit in 32 bit CI</Title>
    <Description>This changes our bootstrap compiler to run as a 32 bit process in the 32
bit CI runs. The intent of this runs is to validate we can function on
32 bit systems and that should extend to the compiler as well.

This can help us identify the rare cases where we emit code that doesn't
perform well on the 32 bit JIT, or just outright crashes.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35216</IssueID>
    <RepoID>1</RepoID>
    <Title>preprocessor colorization is off</Title>
    <Description>repro.

open ContainedDocument.cs

![image](https://user-images.githubusercontent.com/1333179/56611162-00a11f00-65c6-11e9-814c-fc5a73ad03ea.png)

looks like preprocessor is not colorized correctly.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35215</IssueID>
    <RepoID>1</RepoID>
    <Title>A couple of tweaks around features that add parameter null-checks.</Title>
    <Description>Fixes: https://github.com/dotnet/roslyn/issues/33963
Fixes: https://github.com/dotnet/roslyn/issues/24237

1. Unify the code used between 'generate constructor' and 'add parameter null check'.
2. Add parameter null check should use `x is null` when on C#7 and above.  It's the most simple and idiomatic way to check for `null` now.
3. Generate constructor should not add null-checks for nullable-struct parameters.  The fact that they're nullable indicates that null is ok.  If we add the null check, then the signature says 'null is ok' but we immediately throw.  The right thing there if hte user doesn't want null is to instead just not allow a nullable struct, forcing the caller to check first.
</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35214</IssueID>
    <RepoID>1</RepoID>
    <Title>Features/lsp support liveshare2</Title>
    <Description>This copies and creates liveshare LSP handlers so that they can be exported from roslyn instead of from liveshare.

The implementation of all the handlers is copied directly from liveshare.  For now, I'll be leaving that as-is and later will be going 1 by 1 to clean them all up once liveshare is working from roslyn.  Mainly would like feedback on the structure (handlers, location of classes, etc)

Where possible, I've moved the implementation into the features layer.  However, some have dependencies on the UI, so I've kept those in the VS language services layer until we can remove those dependencies.

~~TODO - more tests~~
~~TODO - get actual release build of MS.VS.LanguageServer.Protocol (so CI passes)~~
~~TODO - Wait for fixed liveshare nuget pkg~~</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35213</IssueID>
    <RepoID>1</RepoID>
    <Title>Only emit readonly attributes implicitly when feature enabled</Title>
    <Description>Resolves #35113</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35212</IssueID>
    <RepoID>1</RepoID>
    <Title>Focus first tabbable element in PMU dialog</Title>
    <Description>
    </Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35211</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2-vs-deps to dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2-vs-deps into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-vs-deps-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-vs-deps-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35210</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35209</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2-vs-deps to dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2-vs-deps into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-vs-deps-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-vs-deps-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35208</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate Constructor</Title>
    <Description>&lt;p&gt;When I use Ctrl+dot, and use the Generate Constructor option, it always creates a &lt;strong&gt;public&lt;/strong&gt; constructor. I think this should create a &lt;strong&gt;protected&lt;/strong&gt; constructor when the class is abstract.&lt;/p&gt;&lt;p&gt;public abstract class Example&lt;/p&gt;&lt;p&gt;{&lt;/p&gt;&lt;p&gt;     // Ctrl + dot here and select Generate constructor&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/531718/generate-constructor.html
VSTS ticketId: 847234_
_These are the original issue comments:_

Jono on 4/13/2019, 00:01 PM (9 days ago): &lt;p&gt;Oops. I meant to say use ctrl+dot on the &lt;strong&gt;class name&lt;/strong&gt; and select the Generate Constructor option.&lt;/p&gt;

Jane Wu [MSFT] on 4/15/2019, 01:26 AM (8 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
Kendra Havens [MSFT] on 4/18/2019, 02:28 PM (4 days ago): &lt;p&gt;If the abstract class is not marked public the code fix will generate a protected constructor. &lt;a target="_blank"&gt; https://github.com/dotnet/roslyn/issues/20595 &lt;/a&gt;&lt;/p&gt;&lt;p&gt;Just to clarify, you would like the constructor to be protected even when the abstract class is public?&lt;/p&gt;

Jono on 4/22/2019, 09:57 PM (12 hours ago): &lt;p&gt;I believe that the constructors for all abstract classes should be protected by default, even if the class itself is public. This is because you can never create an instance of an abstract class. &lt;/p&gt;&lt;p&gt;So to answer &lt;a rel="user" href="https://developercommunity.visualstudio.com/users/44551/c431bd99-0155-451e-85eb-030dfb2f9783.html" nodeid="44551"&gt;@Kendra Havens [MSFT]&lt;/a&gt;: Yes please :D&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35207</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35206</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35205</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Async Streams proposal link</Title>
    <Description>There might be some more links to update, I'll check later and update those too in a separate PR.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35204</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] Errors that reported during build become stale if reported before "IntelliSense" category</Title>
    <Description>I cannot repro this in 15.9, but cannot tell if that's because it doesn't repro or because its faster.

I'm running into this a lot in the large solution I'm working in.

**Version Used**: 
Version 16.1.0 [28728.66.d16.1stg]
Version 16.1.0 Preview 2.0 [28817.7.d16.1]

**Steps to Reproduce**:

1. Extract attached solution ([ClassLibrary1.zip](https://github.com/dotnet/roslyn/files/3106503/ClassLibrary1.zip))
2. Delete .vs folder (!important)
3. Open solution
4. In ClassLibrary1\Class1.cs remove the `IComparable` implementation from `Foo`
5. Immediately build via F6 so that the "Build" errors show up before the "IntelliSense" error (!important)

**Expected Behavior**:
Only a single error in IntelliSense &amp; Build category

```
Error	CS1503	Argument 1: cannot convert from 'ClassLibrary1.Foo' to 'System.IComparable'	ConsoleApp407	C:\Users\davkean\Source\Repos\ConsoleApp407\ConsoleApp407\Program.cs	10	Active
```

If I switch to Build category:

```
Severity	Code	Description	Project	File	Line	Suppression State
Error	CS1503	Argument 1: cannot convert from 'ClassLibrary1.Foo' to 'System.IComparable'	ConsoleApp407	C:\Users\davkean\Source\Repos\ConsoleApp407\ConsoleApp407\Program.cs	10	N/A
```

**Actual Behavior**:
Two errors in IntelliSense &amp; Build category
```
Severity	Code	Description	Project	File	Line	Suppression State
Error	CS1503	Argument 1: cannot convert from 'ClassLibrary1.Foo' to 'System.IComparable'	ConsoleApp407	C:\Users\davkean\Source\Repos\ConsoleApp407\ConsoleApp407\Program.cs	10	
Error	CS1503	Argument 1: cannot convert from 'ClassLibrary1.Foo' to 'System.IComparable'	ConsoleApp407	C:\Users\davkean\Source\Repos\ConsoleApp407\ConsoleApp407\Program.cs	10	Active
```

If I switch to Build category (notice that the Suppression column is different to Expected):

```
Severity	Code	Description	Project	File	Line	Suppression State
Error	CS1503	Argument 1: cannot convert from 'ClassLibrary1.Foo' to 'System.IComparable'	ConsoleApp407	C:\Users\davkean\Source\Repos\ConsoleApp407\ConsoleApp407\Program.cs	10	
```

If you re-add the `IComparable` implementation (without building), only the second error goes away and the other sticks around and becomes stale until the next build.

If you _wait_ until IntelliSense appears _and then_ build, only a single error appears.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35203</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 false positive</Title>
    <Description>**Version Used**: 
Visual Studio 2019 16.02 and .NET Core 3.0 preview4

**Steps to Reproduce**:

```csharp
    class Program
    {
        static void Main(string[] args)
        {
            GlobalImage globalImage = null;
            if (args[0] == "0")
            {
                globalImage = GetGlobalImage(0);
            }
            else
            {
                globalImage = GetGlobalImage(1);
            }

            if (globalImage != null)
            {
                Console.WriteLine(globalImage.ContentLength);
            }
        }

        static GlobalImage GetGlobalImage(int divisionId)
        {
            return null;
        }

        public class GlobalImage
        {
            public int ContentLength { get; set; }
        }
    }
```
Will produce IDE0059 Value assigned to 'globalImage' is never used

**Expected Behavior**:
No IDE0059
**Actual Behavior**:
IDE0059
</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35202</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Versions.props for 16.2</Title>
    <Description>
    </Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35201</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35200</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35199</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2-vs-deps to dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2-vs-deps into dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-vs-deps-to-dev16.1-vs-deps
git reset --hard upstream/dev16.1-vs-deps
git merge upstream/dev16.1-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-vs-deps-to-dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35198</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35197</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35196</IssueID>
    <RepoID>1</RepoID>
    <Title>Navigate to Decompiled Sources should also generate PDB if it doesn't exist</Title>
    <Description>The navigate to decompiled sources decompile most scenarios but are not much helpful while debugging. Enable autogeneration of PDB files (or provide an option similar to ReSharper) for decompiled source code so that breakpoints within decompiled sources work</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35195</IssueID>
    <RepoID>1</RepoID>
    <Title>Make call hierarchy more compact</Title>
    <Description>**Version Used**: 
VS 2019 16.0.1
**Steps to Reproduce**:
Use "Call Hierarchy" function on a method

**Expected Behavior**:
Get a compact view of all possible callers. Below is what ReSharper provides:
![rsch](https://user-images.githubusercontent.com/5901497/56548646-3092f700-65b3-11e9-93cd-4fc66bd7a566.png)

**Actual Behavior**:
A more cumbersome call hierarchy view for the almost same content:
![vsch](https://user-images.githubusercontent.com/5901497/56548609-16591900-65b3-11e9-8e84-fcb7b90b6f34.png)</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35194</IssueID>
    <RepoID>1</RepoID>
    <Title>Using FQN instead of adding import during ENC session</Title>
    <Description>@tmat This feels like a better approach than listening to the debugger events, as completion provider is mostly stateless. What do you think?
 
FYI @dpoeschl This is not intended to be merged before snap today, just need to target some branch. Will decide and retarget if necessary to the proper branch later.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35193</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35192</IssueID>
    <RepoID>1</RepoID>
    <Title>Source decomipler shows the signature only</Title>
    <Description>**Version Used**: 
2017
**Steps to Reproduce**:

Enable Navigation to decompiled sources in Visual studio for C# and then try to navigate to the source code of CloudQueue.AddMessageAsync this would only show the signature of the method rather than its implementation details 

**Expected Behavior**:
Resharper would navigate to a decompiled version of DLL and show the details of the function and it is possible to go further into the code.

**Actual Behavior**:
Just the signature of the functions are displayed with no useful code.</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35191</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement IMethodSymbol.ReceiverNullableAnnotation</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/35034. @dotnet/roslyn-compiler please review.</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35190</IssueID>
    <RepoID>1</RepoID>
    <Title>nullable reference non-nullability ignored on interface method call</Title>
    <Description>**Version Used**: 
.NET Core 3.0 preview 4

**Steps to Reproduce**:
Using Microsoft Orleans 2.3
```csharp
public class HelloRequest
{
    public string? Value { get; set; }
}

[HttpPost]
public async Task&lt;IActionResult&gt; Hello([FromBody]HelloRequest hello)
{
    var value = await _grainFactory.GetGrain&lt;IHello&gt;(0).SayHello(hello.Value);
    return new JsonResult(new { value = value });
}

public interface IHello : Orleans.IGrainWithIntegerKey
{
    Task&lt;string&gt; SayHello(string greeting);
}
```

**Expected Behavior**:
Calling SayHello method would produce some sort of nullability warning because HelloRequest.Value is nullable reference type and SayHello parameter is non-nullable.

**Actual Behavior**:
No warning and it seems that even just calling `var value = await _grainFactory.GetGrain&lt;IHello&gt;(0).SayHello(null)` doesn't produce any warning.
</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35189</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert two step initialization of base type in PENamedTypeSymbol.</Title>
    <Description>Related to #28834.

Also, remove obsolete comments from a test. Closes #30003.</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35188</IssueID>
    <RepoID>1</RepoID>
    <Title>InteliSence character c# not match japanese</Title>
    <Description>&lt;p&gt;VSF_TYPE_MARKDOWNWhen Japanese is used for C # variable names and method names, Intellisense only responds with a forward match.&lt;/p&gt;&lt;p&gt;In Visual studio 2013, it worked correctly.
This phenomenon occurs in Visual studio 2015 and later, including Visual studio 2019.&lt;/p&gt;&lt;p&gt;```
            //It works normally.
            int EnglishVariable = 0;
            //Typing &amp;quot;vari&amp;quot; causes Intellisense to display &amp;quot;EnblishVariable&amp;quot;.&lt;/p&gt;&lt;p&gt;            //It does not work.
            int 日本語の変数名 = 0;
            //Typing &amp;quot;変数名&amp;quot; does not show &amp;quot;日本語の変数名&amp;quot; in Intellisense.
            //Typing &amp;quot;日本語&amp;quot; causes Intellisense to display &amp;quot;日本語の変数名&amp;quot;.&lt;/p&gt;&lt;p&gt;```&lt;/p&gt;&lt;p&gt;&lt;a href="https://developercommunity.visualstudio.com/storage/attachments/67017-intellisense-dose-not-work.png"&gt; Image:67017-intellisense-dose-not-work.png&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/519645/intelisence-character-c-not-match-japanese.html
VSTS ticketId: 841021_
_These are the original issue comments:_

Visual Studio Feedback System on 4/8/2019, 01:56 AM (14 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

k_matsumoto on 4/10/2019, 00:07 AM (12 days ago): &lt;p&gt;Sample Code.&lt;/p&gt;&lt;pre&gt;//It works normally.
int EnblishVariable = 0;
//Typing "vari" causes Intellisense to display "EnblishVariable".

//It does not work.
int 日本語の変数名 = 0;
//Typing "変数名" does not show "日本語の変数名" in Intellisense.
//Typing "日本語" causes Intellisense to display "日本語の変数名".&lt;br&gt;&lt;/pre&gt;

Jane Wu [MSFT] on 4/10/2019, 01:12 AM (12 days ago): &lt;p&gt;Translated from Bing:&lt;/p&gt;&lt;p&gt;Sample Code.&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;// It works normally.
int EnblishVariable = 0;
// Typing "vari" causes Intellisense to display "EnblishVariable".
// It does not work.
int Japanese variable name = 0;
// Typing "variable name" does not show "Japanese variable name" in Intellisense.
// Typing "Japanese" causes Intellisense to display "Japanese variable name".&lt;br&gt;&lt;/pre&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35187</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense does not insert parentheses at the end of suggested method.</Title>
    <Description>VSF_TYPE_MARKDOWNFor example I have some variable &amp;quot;list&amp;quot; of IList&amp;lt;T&amp;gt; type.
When I type &amp;quot;list.&amp;quot; IntelliSense suggest a &amp;quot;Find&amp;quot; method, then I press Enter key and then I get only &amp;quot;list.Find&amp;quot;, but not expected &amp;quot;list.Find();&amp;quot; . So then I have to add parentheses by myself. How can I fix this behaviour?

I am currently using VS 2019 Community with no extensions installed.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/518751/intellisense-does-not-insert-parentheses-at-the-en.html
VSTS ticketId: 839865_
_These are the original issue comments:_

Visual Studio Feedback System on 4/8/2019, 01:38 AM (14 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35186</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable set -e </Title>
    <Description>
    </Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35185</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData for Dev16.1 Preview 3</Title>
    <Description>
    </Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35184</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't allow void to convert to object via user-defined conversion</Title>
    <Description>Fixes #34872

If anyone can think of any more cases that ensure we catch attempts to convert to/from void it would be appreciated.</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35183</IssueID>
    <RepoID>1</RepoID>
    <Title>Bump version to 3.1.0-beta4</Title>
    <Description>
    </Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35182</IssueID>
    <RepoID>1</RepoID>
    <Title>Add Roslyn Dev16.1 Preview 3 entries to azure-pipelines .yml files</Title>
    <Description>
    </Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35181</IssueID>
    <RepoID>1</RepoID>
    <Title>Binary log for Unix bootstrap</Title>
    <Description>Generate a binary log file for the bootstrap phase on Unix platforms.</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35180</IssueID>
    <RepoID>1</RepoID>
    <Title>Offer codefixes on selections</Title>
    <Description>## Scenario
Codefixes often don't show if code is selected as opposed to only having your cursor placed within a word.
*  **5 out of the 11 users struggled with this in user studies.** 
* One user **only** ever double-clicked when clicking around the editor. This means he saw fewer codefixes since double clicking always selects the word and we don't show available codefixes in the context. Some users are used to double-clicking around their codebase.

## Proposal
Enable the same codefixes to appear if a block is selected as would appear if the cursor was placed inside a specific name. If this improves discoverability of codefixes we can enable this on a case-by-case basis per refactoring. My study observed more issues with the 'pull members up to base type' refactoring than others though general struggling was observed with many refactorings.

**Example: Pull members up**
Codefix offered when cursor is in the name:
![image](https://user-images.githubusercontent.com/8293542/56520118-8bb3e380-64f8-11e9-94fa-b79c60ed7ddb.png)

Codefix not offered if full line is selected:
![image](https://user-images.githubusercontent.com/8293542/56520215-bf8f0900-64f8-11e9-9022-7a5ebd464553.png)

**Example: Convert local function to method**
Offered if cursor is in name
![image](https://user-images.githubusercontent.com/8293542/56520344-0d0b7600-64f9-11e9-8fb9-6ac6d7b8de69.png)

Not offered when entire local function is selected
![image](https://user-images.githubusercontent.com/8293542/56520368-1ac0fb80-64f9-11e9-92a4-49037caea806.png)

**Example: LINQ to Foreach conversions**
![image](https://user-images.githubusercontent.com/8293542/56521136-1517e580-64fa-11e9-828a-a23aa22d8ce2.png)

If semi-colon is included in selection the conversion does not appear:
![image](https://user-images.githubusercontent.com/8293542/56521033-00d3e880-64fa-11e9-849f-2cc7a675f3ff.png)







</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35179</IssueID>
    <RepoID>1</RepoID>
    <Title>Implied type parameter constraint of a partial method vs nullable context</Title>
    <Description>This issue relates to the implementation of the LDM resolution for https://github.com/dotnet/csharplang/issues/2450 as discussed in the 2019-04-22 LDM and documented at https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-04-22.md#implied-constraint-for-a-type-parameter-of-a-partial

For a partial type, the constraints (implied or explicit) for the various parts of a partial must agree.  This is an existing rule.  We extend this rule for nullability to say that they must agree in nullability annotations as well (or we produce an error for an annotated/unannotated disagreement).  We use the invariant merging rules to merge the constraints from the various parts.  The resulting merged constraints are used by the compiler in users of the type and within the body of the partial type.

For a partial method, callers of the method are analyzed against the declaration.  The body of the implementation is analyzed against the implementation's declared or implied constraints.  We produce a warning at the implementation if there is a mismatch of type parameter constraints of nullable annotations `annotated` vs `unannotated` (though a mismatch with `oblivious` is ignored).
</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35178</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense suggests GetType on a span, but it won't compile</Title>
    <Description>**Version Used**: 

* VS 2019 16.0.1
* C# Tools   3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8

**Steps to Reproduce**:

```csharp
using System;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            var sp = Span&lt;int&gt;.Empty;
            var t = sp. // &lt;&lt;- Caret here
            Console.WriteLine($"Span.IsValueType: {t.IsValueType}");
        }
    }
}
```

**Expected Behavior**:

**Actual Behavior**:

Suggests `GetType()`

![image](https://user-images.githubusercontent.com/6309070/56519667-7e4a2980-64f7-11e9-8e04-e490d313c5c1.png)

And this results in a compile error:

![image](https://user-images.githubusercontent.com/6309070/56520004-3d064980-64f8-11e9-9dd8-1a658174fbb1.png)
</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35177</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35176</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35175</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to dev16.1-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into dev16.1-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps
git reset --hard upstream/dev16.1-preview2-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35174</IssueID>
    <RepoID>1</RepoID>
    <Title>Suggestion: Suppress AsyncStateMachineAttribute in metadata-as-source</Title>
    <Description>Repros in 15.6, so not a regression.

```c#
#region Assembly ClassLibrary34, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// C:\Users\acasey\source\repos\ClassLibrary34\ClassLibrary34\bin\Debug\ClassLibrary34.dll
#endregion

using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace ClassLibrary34
{
    public class Class1
    {
        public Class1();

        [AsyncStateMachine(typeof(&lt;DoAsync&gt;d__0))]
        [DebuggerStepThrough]
        public Task DoAsync();
    }
}
```

It is not very helpful to see `AsyncStateMachineAttribute` in the metadata-as-source view since it's an implementation detail and exposes mangled names that should not be depended upon.
</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35173</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow setting/updating DefaultNamespace for project at workspace</Title>
    <Description>I tried to make omnisharp-roslyn to support new SyncNamespace refactoring (https://github.com/dotnet/roslyn/pull/30920). However method https://github.com/dotnet/roslyn/blob/c421f1249d1c2ba94e7703037ec49b4341f3b9f4/src/Workspaces/Core/Portable/Workspace/Solution/Solution.cs#L315 is internal. Is there other means to set default namespace for project at workspace?

Omnisharp-roslyn issue https://github.com/OmniSharp/omnisharp-roslyn/issues/1475</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35172</IssueID>
    <RepoID>1</RepoID>
    <Title>Committing import completions corrupts Razor cshtml files</Title>
    <Description>**Version Used**: 
dev16.1-preview2 (after PR for import completions by @genlu )

**Steps to Reproduce**:

1. Open cshtml file
2. Type @, invoke intellisense 
3. Select and commit any import completion item

**Expected Behavior**:
a) Razor import directive added to current document
or
b) Import completions are disabled for cshtml files


**Actual Behavior**:
Text is removed at random position. Document becomes corrupted.

![2019-04-22_12-47-44](https://user-images.githubusercontent.com/17177729/56494991-dcc5d680-64fc-11e9-86cf-a4b0064cd7d8.gif)
</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35171</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master into master-vs-deps</Title>
    <Description>
    </Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35170</IssueID>
    <RepoID>1</RepoID>
    <Title>Add version check to enable the pattern-based Index &amp; Range indexers</Title>
    <Description>
    </Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35169</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35168</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable reference types + Anonymous objects ... a couple rough edges</Title>
    <Description>Check this out:

    string x = "";

    // This creates no warnings, but intellisense shows "a" as type "string?"
    x = new { a = "x" }.a;

    // This creates a warning
    x = new[] { new { a = "x" } }[0].a;

    // This creates a warning (the cast doesn't work)
    x = new[] { new { a = (string)"x" } }[0].a;

There's a few similar open issues, but I'm not expert enough to know if there's a complete overlap.  If so, sorry :)

This does seem to be a bug since the docs say the nullability of the arguments are inferred from the initializing expression:  https://github.com/dotnet/roslyn/blob/master/docs/features/nullable-reference-types.md#anonymous-types

I came across this when accessing properties downline from a Select projection in a LINQ expression.</Description>
    <CreatedDate>21/04/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35167</IssueID>
    <RepoID>1</RepoID>
    <Title>SymbolFinder.FindReferencesAsync returns incorrect result in certain scenarios</Title>
    <Description>By having the following projects:
- `NHibernate.Caches.Common`
	PackageReferences: `NHibernate`
- `NHibernate.Caches.StackExchangeRedis`
	PackageReferences: `StackExchange.Redis`, `NHibernate`
	ProjectReferences: `NHibernate.Caches.Common`

`SymbolFinder.FindReferencesAsync` will return partial results for types that are defined in `NHibernate` package and also for their derived types located in `NHibernate` or `NHibernate.Caches.StackExchangeRedis` assembly.
By removing `StackExchange.Redis` or `NHibernate.Caches.Common` reference from the project `NHibernate.Caches.StackExchangeRedis`, `SymbolFinder.FindReferencesAsync` starts working as expected.


**Version Used**: `3.0.0`, `2.10.0`, `2.7.0`

**Steps to Reproduce**:

1. Clone https://github.com/maca88/RoslynTest
2. Run `RoslynTest` project

**Expected Behavior**:
`SymbolFinder.FindReferencesAsync` should return the same result for `ICache`, `CacheBase`, `FakeCache`, `HashtableCache`, `RedisCache`:
```
FindReferencesAsync for method: NHibernate.Cache.ICache.Get(object) from assembly: NHibernate
Reference definition: NHibernate.Cache.CacheBase.Get(object)
Reference definition: NHibernate.Cache.FakeCache.Get(object)
Reference definition: NHibernate.Cache.HashtableCache.Get(object)
Reference definition: NHibernate.Cache.ICache.Get(object)
Reference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)
---------------------------------------------------------------------------------------------
FindReferencesAsync for method: NHibernate.Cache.CacheBase.Get(object) from assembly: NHibernate
Reference definition: NHibernate.Cache.CacheBase.Get(object)
Reference definition: NHibernate.Cache.FakeCache.Get(object)
Reference definition: NHibernate.Cache.HashtableCache.Get(object)
Reference definition: NHibernate.Cache.ICache.Get(object)
Reference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)
---------------------------------------------------------------------------------------------
FindReferencesAsync for method: NHibernate.Cache.FakeCache.Get(object) from assembly: NHibernate
Reference definition: NHibernate.Cache.CacheBase.Get(object)
Reference definition: NHibernate.Cache.FakeCache.Get(object)
Reference definition: NHibernate.Cache.HashtableCache.Get(object)
Reference definition: NHibernate.Cache.ICache.Get(object)
Reference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)
---------------------------------------------------------------------------------------------
FindReferencesAsync for method: NHibernate.Cache.HashtableCache.Get(object) from assembly: NHibernate
Reference definition: NHibernate.Cache.CacheBase.Get(object)
Reference definition: NHibernate.Cache.FakeCache.Get(object)
Reference definition: NHibernate.Cache.HashtableCache.Get(object)
Reference definition: NHibernate.Cache.ICache.Get(object)
Reference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)
---------------------------------------------------------------------------------------------
FindReferencesAsync for method: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object) from assembly: NHibernate.Caches.StackExchangeRedis
Reference definition: NHibernate.Cache.CacheBase.Get(object)
Reference definition: NHibernate.Cache.FakeCache.Get(object)
Reference definition: NHibernate.Cache.HashtableCache.Get(object)
Reference definition: NHibernate.Cache.ICache.Get(object)
Reference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)
---------------------------------------------------------------------------------------------
```

**Actual Behavior**:
`SymbolFinder.FindReferencesAsync` returns different results for `ICache`, `CacheBase`, `FakeCache`, `HashtableCache` and `RedisCache`, where none of them contain all the references:
```
FindReferencesAsync for method: NHibernate.Cache.ICache.Get(object) from assembly: NHibernate
Reference definition: NHibernate.Cache.CacheBase.Get(object)
Reference definition: NHibernate.Cache.FakeCache.Get(object)
Reference definition: NHibernate.Cache.HashtableCache.Get(object)
Reference definition: NHibernate.Cache.ICache.Get(object)
---------------------------------------------------------------------------------------------
FindReferencesAsync for method: NHibernate.Cache.CacheBase.Get(object) from assembly: NHibernate
Reference definition: NHibernate.Cache.CacheBase.Get(object)
Reference definition: NHibernate.Cache.ICache.Get(object)
Reference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)
---------------------------------------------------------------------------------------------
FindReferencesAsync for method: NHibernate.Cache.FakeCache.Get(object) from assembly: NHibernate
Reference definition: NHibernate.Cache.CacheBase.Get(object)
Reference definition: NHibernate.Cache.FakeCache.Get(object)
Reference definition: NHibernate.Cache.ICache.Get(object)
Reference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)
---------------------------------------------------------------------------------------------
FindReferencesAsync for method: NHibernate.Cache.HashtableCache.Get(object) from assembly: NHibernate
Reference definition: NHibernate.Cache.CacheBase.Get(object)
Reference definition: NHibernate.Cache.HashtableCache.Get(object)
Reference definition: NHibernate.Cache.ICache.Get(object)
Reference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)
---------------------------------------------------------------------------------------------
FindReferencesAsync for method: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object) from assembly: NHibernate.Caches.StackExchangeRedis
Reference definition: NHibernate.Cache.CacheBase.Get(object)
Reference definition: NHibernate.Cache.ICache.Get(object)
Reference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)
---------------------------------------------------------------------------------------------
```
</Description>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35166</IssueID>
    <RepoID>1</RepoID>
    <Title>Warn if `CancellationToken` parameter of async-iterator lacks `[EnumeratorCancellation]`?</Title>
    <Description>
Relates to https://github.com/dotnet/roslyn/issues/24037 (umbrella for async-streams)</Description>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35165</IssueID>
    <RepoID>1</RepoID>
    <Title>Confirm/clarify rules for `[EnumeratorCancellation]` in OHI scenarios</Title>
    <Description>What are the implications with OHI and the cancellation token decision? Consider the case where I use the attribute on an abstract member or interface. Does that …
- Require the implementor to have the attribute?
- Does the compiler consult the definition or implementation when deciding how to handle the parameter?
- If the attribute has no effect on abstract methods, then do we issue a warning when it’s used?

Relates to https://github.com/dotnet/roslyn/issues/24037 (umbrella for async-streams)</Description>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35164</IssueID>
    <RepoID>1</RepoID>
    <Title>Turning off all rules and then enabling desired rules</Title>
    <Description>#### Analyzer package

[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)

#### Package Version

Example: v2.9.2

#### Repro steps

1. Add package reference
1. Copy contents of `AllRulesDisabled.ruleset` to local file and reference from csproj
1. Compile

#### Expected behavior

No code analysis warnings because they're all disabled

#### Actual behavior

Code analysis warnings, e.g. warning CA2208: Call the ArgumentOutOfRangeException constructor that contains a message and/or paramName parameter.</Description>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35163</IssueID>
    <RepoID>1</RepoID>
    <Title>pre-selection should favor in-scope symbols</Title>
    <Description>From [feedback](https://github.com/dotnet/roslyn/issues/7053#issuecomment-484907098)

&gt; For some reason it tends to pre-select import completions over regular ones.
&gt;
&gt;![image](https://user-images.githubusercontent.com/788783/56449194-262edf80-62cb-11e9-9115-7fd6026db92c.png)

It seems the reason unimport one is favored in this case is because it's considered a better match based on current algorithm (which takes suffix "&lt;&gt;" in to account as well)

</Description>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35162</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>20/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35161</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>21/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35160</IssueID>
    <RepoID>1</RepoID>
    <Title>Need a long term solution for caching VS completion items</Title>
    <Description>Right now, import completion uses CWT to cache VS completion items to avoid repeated allocations. But we will need to better understand how effective this approach is and decide if there's a better alternative.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35159</IssueID>
    <RepoID>1</RepoID>
    <Title>Warn if `[EnumeratorCancellation]` is specified on two parameters?</Title>
    <Description>`static async System.Collections.Generic.IAsyncEnumerable&lt;int&gt; Iter(int value, [DefaultCancellation] CancellationToken token1, [DefaultCancellation] CancellationToken token2)`

Relates to https://github.com/dotnet/roslyn/pull/35121 (PR implementing the attribute)

Relates to https://github.com/dotnet/roslyn/issues/24037 (umbrella for async-streams)</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35158</IssueID>
    <RepoID>1</RepoID>
    <Title>Cleanup missed prototype comments.</Title>
    <Description>@jcouv @dotnet/roslyn-compiler for review.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>20/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35157</IssueID>
    <RepoID>1</RepoID>
    <Title>Typeless tuples hit debug assert in nullable walker</Title>
    <Description>```C#
class C
{
    void M()
    {
        _ = (null, 2);
    }
}
```

Hits this:
&lt;details&gt;

```
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]       System.InvalidOperationException : 
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]       
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]       Stack Trace:
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Test\Utilities\Portable\ThrowingTraceListener.cs(24,0): at Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]            at System.Diagnostics.TraceListener.Fail(String message)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]            at System.Diagnostics.TraceInternal.Fail(String message)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]            at System.Diagnostics.Debug.Assert(Boolean condition)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Binder\Semantics\Conversions\ConversionsBase.cs(1898,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.GetImplicitTupleLiteralConversion(BoundTupleLiteral source, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Binder\Semantics\Conversions\ConversionsBase.cs(958,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitTupleLiteralConversion(BoundTupleLiteral source, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Binder\Semantics\Conversions\ConversionsBase.cs(848,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionFromExpression(BoundExpression sourceExpression, TypeSymbol source, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Binder\Semantics\Conversions\ConversionsBase.cs(89,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitConversionFromExpression(BoundExpression sourceExpression, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(3592,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.GenerateConversion(Conversions conversions, BoundExpression sourceExpression, TypeSymbol sourceType, TypeSymbol destinationType, Boolean fromExplicitCast, Boolean extensionMethodThisArgument)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(4303,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.ApplyConversion(BoundExpression node, BoundExpression operandOpt, Conversion conversion, TypeWithAnnotations targetTypeWithNullability, TypeWithState operandType, Boolean checkConversion, Boolean fromExplicitCast, Boolean useLegacyWarnings, AssignmentKind assignmentKind, ParameterSymbol target, Boolean reportTopLevelWarnings, Boolean reportRemainingWarnings, Boolean extensionMethodThisArgument, Optional`1 stateForLambda, Boolean trackMembers, Location location)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(3814,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitOptionalImplicitConversion(BoundExpression expr, TypeWithAnnotations targetTypeOpt, Boolean useLegacyWarnings, Boolean trackMembers, AssignmentKind assignmentKind)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(4744,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitAssignmentOperator(BoundAssignmentOperator node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs(1506,0): at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs(145,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(329,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitExpressionWithoutStackGuard(BoundExpression node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(1483,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitExpressionWithoutStackGuard(BoundExpression node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs(223,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs(204,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(321,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(309,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(284,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(784,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitRvalue(BoundExpression node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(1101,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitExpressionStatement(BoundExpressionStatement node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs(2986,0): at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs(145,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(324,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(309,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(284,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(613,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatement(BoundStatement statement)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(1536,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatement(BoundStatement statement)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(1089,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatements(ImmutableArray`1 statements)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(1081,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitBlock(BoundBlock node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs(2636,0): at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs(145,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(324,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(309,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(284,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(367,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Scan(Boolean&amp; badRegion)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(370,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean&amp; badRegion)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(390,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Analyze(Boolean&amp; badRegion, Optional`1 initialState)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(495,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, Symbol symbol, BoundNode node, Conversions conversions, DiagnosticBag diagnostics, Boolean useMethodSignatureParameterTypes, MethodSymbol methodSignatureOpt, ArrayBuilder`1 returnTypes, VariableState initialState, Dictionary`2 analyzedNullabilityMapOpt)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(385,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, MethodSymbol method, BoundNode node, DiagnosticBag diagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\DefiniteAssignment.cs(381,0): at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Analyze(CSharpCompilation compilation, MethodSymbol member, BoundNode node, DiagnosticBag diagnostics, Boolean requireOutParamsAssigned)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\FlowAnalysisPass.cs(133,0): at Microsoft.CodeAnalysis.CSharp.FlowAnalysisPass.Analyze(CSharpCompilation compilation, MethodSymbol method, BoundBlock block, DiagnosticBag diagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\FlowAnalysisPass.cs(42,0): at Microsoft.CodeAnalysis.CSharp.FlowAnalysisPass.Rewrite(MethodSymbol method, BoundBlock block, DiagnosticBag diagnostics, Boolean hasTrailingExpression, Boolean originalBodyNested)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs(1015,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs(498,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs(388,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\Core\Portable\InternalUtilities\UICultureUtilities.cs(136,0): at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Threading.Tasks.Task.InnerInvoke()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Threading.Tasks.Task.Execute()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         --- End of stack trace from previous location where exception was thrown ---
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs(303,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.WaitForWorkers()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs(144,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2334,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics, CancellationToken cancellationToken)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2303,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2218,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2212,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Test\Utilities\Portable\Diagnostics\DiagnosticExtensions.cs(99,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\NullableReferenceTypesTests.cs(46349,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.Semantics.NullableReferenceTypesTests.TupleTypeInference_08()
```

&lt;/details&gt;</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35156</IssueID>
    <RepoID>1</RepoID>
    <Title>📝Convert method in Complete Statement to Iterative </Title>
    <Description>📝 File a follow-up issue to convert this method from recursive to iterative. We don't want to trigger a stack overflow when semicolon is typed within very very very very deeply nested parentheses.

_Originally posted by @sharwell in https://github.com/dotnet/roslyn/pull/35024_</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35155</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualBasic semantic model does not recognize overloads at chained queries</Title>
    <Description>Fix https://github.com/dotnet/roslyn/issues/35096</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35154</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid caching VS completion items for non-import items</Title>
    <Description>This should get us pass RPS.

@heejaechang @jinujoseph @jasonmalinowski @ivanbasov 

I have kicked off a signed build for test insertion here (based on 16.1-preview2-vs-deps):
https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build/results?buildId=2606459</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35153</IssueID>
    <RepoID>1</RepoID>
    <Title>Add telemetry to toggle line comment.</Title>
    <Description>
    </Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35152</IssueID>
    <RepoID>1</RepoID>
    <Title>StackAllocSpanExpressionsTests.ConversionFromPointerStackAlloc_UserDefined_Explicit Failed</Title>
    <Description>Linux coreclr - [Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=161907&amp;view=ms.vss-test-web.build-test-results-tab) - attempt 1

```
Microsoft.CodeAnalysis.CSharp.UnitTests.StackAllocSpanExpressionsTests.ConversionFromPointerStackAlloc_UserDefined_Explicit [FAIL]

System.AggregateException : One or more errors occurred. (One or more errors occurred. (Object reference not set to an instance of an object.))
---- System.AggregateException : One or more errors occurred. (Object reference not set to an instance of an object.)
-------- System.NullReferenceException : Object reference not set to an instance of an object.
  Stack Trace:
     at System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)
     at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)
  --- End of stack trace from previous location where exception was thrown ---
     at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)
     at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)
     at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceNamespaceSymbol_Completion.cs(53,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceModuleSymbol.cs(259,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceAssemblySymbol.cs(908,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs(2350,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Func`4 locationFilterOpt, CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs(2237,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs(2165,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs(2159,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken)
  /_/src/Test/Utilities/Portable/Diagnostics/DiagnosticExtensions.cs(99,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
  /_/src/Compilers/Test/Utilities/CSharp/CSharpTestBase.cs(1790,0): at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBase.CreateCompilationWithMscorlibAndSpan(String text, CSharpCompilationOptions options, CSharpParseOptions parseOptions)
  /_/src/Compilers/CSharp/Test/Semantic/Semantics/StackAllocSpanExpressionsTests.cs(96,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.StackAllocSpanExpressionsTests.ConversionFromPointerStackAlloc_UserDefined_Explicit()
  ----- Inner Stack Trace -----
     at System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)
     at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)
  --- End of stack trace from previous location where exception was thrown ---
     at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)
     at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)
     at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceNamespaceSymbol_Completion.cs(53,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Symbols/Symbol.cs(727,0): at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceNamespaceSymbol_Completion.cs(56,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.&lt;&gt;c__DisplayClass49_1.&lt;ForceComplete&gt;b__0(Int32 i)
  /_/src/Compilers/Core/Portable/InternalUtilities/UICultureUtilities.cs(166,0): at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param)
     at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass19_0`1.&lt;ForWorker&gt;b__1(RangeWorker&amp; currentWorker, Int32 timeout, Boolean&amp; replicationDelegateYieldedBeforeCompletion)
  --- End of stack trace from previous location where exception was thrown ---
     at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass19_0`1.&lt;ForWorker&gt;b__1(RangeWorker&amp; currentWorker, Int32 timeout, Boolean&amp; replicationDelegateYieldedBeforeCompletion)
     at System.Threading.Tasks.TaskReplicator.Replica`1.ExecuteAction(Boolean&amp; yieldedBeforeCompletion)
     at System.Threading.Tasks.TaskReplicator.Replica.Execute()
  ----- Inner Stack Trace -----
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourcePropertyAccessorSymbol.cs(376,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertyAccessorSymbol.ComputeReturnType(DiagnosticBag diagnostics)
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourcePropertyAccessorSymbol.cs(275,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertyAccessorSymbol.MethodChecks(DiagnosticBag diagnostics)
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberMethodSymbol.cs(293,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.LazyMethodChecks()
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberMethodSymbol.cs(749,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.get_OverriddenOrHiddenMembers()
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol_ImplementationChecks.cs(564,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.CheckMembersAgainstBaseType(DiagnosticBag diagnostics, CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol_ImplementationChecks.cs(31,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetSynthesizedExplicitImplementations(CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol.cs(503,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Symbols/Symbol.cs(727,0): at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken)
  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceNamespaceSymbol_Completion.cs(56,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.&lt;&gt;c__DisplayClass49_1.&lt;ForceComplete&gt;b__0(Int32 i)
  /_/src/Compilers/Core/Portable/InternalUtilities/UICultureUtilities.cs(166,0): at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param)
     at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass19_0`1.&lt;ForWorker&gt;b__1(RangeWorker&amp; currentWorker, Int32 timeout, Boolean&amp; replicationDelegateYieldedBeforeCompletion)
  --- End of stack trace from previous location where exception was thrown ---
     at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass19_0`1.&lt;ForWorker&gt;b__1(RangeWorker&amp; currentWorker, Int32 timeout, Boolean&amp; replicationDelegateYieldedBeforeCompletion)
     at System.Threading.Tasks.TaskReplicator.Replica`1.ExecuteAction(Boolean&amp; yieldedBeforeCompletion)
     at System.Threading.Tasks.TaskReplicator.Replica.Execute()
```</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35151</IssueID>
    <RepoID>1</RepoID>
    <Title>Reinfer GetEnumerator type based on input type.</Title>
    <Description>```C#
using System.Collections;
class C
{
    void M1(IEnumerator e)
    {
        var enumerable1 = Create(e);
        foreach (var i in enumerable1)
        {
        }

        e = null; // 1
        var enumerable2 = Create(e);
        foreach (var i in enumerable2) // 2
        {
        }
    }

    void M2(IEnumerator? e)
    {
        var enumerable1 = Create(e);
        foreach (var i in enumerable1) // 3
        {
        }

        if (e == null) return;
        var enumerable2 = Create(e);
        foreach (var i in enumerable2)
        {
        }
    }
    static Enumerable&lt;T&gt; Create&lt;T&gt;(T t) where T : IEnumerator? =&gt; throw null!;
}

class Enumerable&lt;T&gt; where T : IEnumerator?
{
    public T GetEnumerator() =&gt; throw null!;
}
```

This test should have warnings on the `foreach`s indicated. In addition to the `GetEnumerator` reinference, this also exposes that when we do the visit of the `foreach` expression, we need to explicitly remove implicit conversions from the expression and call `ApplyConversion` ourselves.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35150</IssueID>
    <RepoID>1</RepoID>
    <Title>Synchronize AnalyzerConfig documents when creating OOP solutions</Title>
    <Description>This adds support for synchronizing AnalyzerConfig documents out to OOP process. It also adds a bunch of Workspace methods for manipulating AnalyzerConfig documents that I forgot to add in the previous pull request.

Commit-at-a-time recommended but won't be too bad if you do it all at once.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35149</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyzer driver invokes compilation end action twice when calling Compilation.GetAnalyzerDiagnosticsAsync() and .GetAllDiagnosticsAsync()</Title>
    <Description>**Version Used**: Microsoft.CodeAnalysis.dll 2.9.0

**Steps to Reproduce**:

1. Create an analyzer that registers a compilation end action callback.
2. Run that analyzer via CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync() and CompilationWithAnalyzers.GetAllDiagnosticsAsync().

For an example, see DoNotUseInsecureDeserializerJavaScriptSerializerWithSimpleTypeResolver.cs and DiagnosticExtensions.cs and run unit tests in DoNotUseInsecureDeserializerJavascriptSerializerWithSimpleTypeResolverTests.cs, in https://github.com/dotnet/roslyn-analyzers/tree/63cae7f3fb0fc575b18ca637fdff9427b57ef176  Note the debug output.

**Expected Behavior**:
Compilation start action invoked with Compilation object #A.
Compilation end action invoked with Compilation object #A.

_Or_

Compilation start action invoked with Compilation object #A.
Compilation end action invoked with Compilation object #A.
Compilation start action invoked with Compilation object #B.
Compilation end action invoked with Compilation object #B.

**Actual Behavior**:
Compilation start action invoked with Compilation object #A.
Compilation end action invoked with Compilation object #A.
Compilation end action invoked with Compilation object #B.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35148</IssueID>
    <RepoID>1</RepoID>
    <Title>Add version check to enable the pattern-based Index &amp; Range indexers</Title>
    <Description>This is a "forward compatibility" bug, where a user could write code in an older language version that works when it should have failed, thus causing them to accidentally break users on older compiler versions.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>20/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35147</IssueID>
    <RepoID>1</RepoID>
    <Title>Generic constraints doesn't respect nullable annotations when contraint is a base type constraint</Title>
    <Description>**Version Used**: 
latest from master in sharplab.

**Steps to Reproduce**:
```cs
public class C {
    public void M&lt;T&gt;(T a) where T : class? {
    }
}
```

This correctly emmits a `NullableAttribute(2)` in the generic parameter.

However if I do:
```cs
public class C {
    public void M&lt;T&gt;(T a) where T : Attribute? {
    }
}
```

This will not even generate a `NullableAttribute` into the generic param.

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABABgqYEYBuR19jgCw8GvAMzsATBQDCFAN6MKS9uKYCKAWQA8AFQB8ACh0UIASgoB3ABaJKxkBQCCMGAgCWwfPAD88xcoBfRgCgA==

cc: @dotnet/nullablefc @chsienki @jaredpar @cston 
</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35146</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler doesn't take readonly members into account for span safety rules</Title>
    <Description>The language currently disallows you from passing a `Span&lt;T&gt;` to an instance method of a ref struct, unless that ref struct is also `readonly` or an `in` extension method.

The compiler should presumably also take into consideration whether a given member is itself `readonly` on a mutable instance struct and allow that as well.

For reference: https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAGAAhwEYBuAWACgcBmAhOCAEwHsA7DAT3rgDMDYCAK4BjGAQDKAHgAqAPgIBvKgVVE6OACwEAsgAoJABwhtZCgB4BKFWuWU1BAL5VnlKrR79Bo8RIBMZko2qh4MzOxcRNr6RiaBVsFB9mquru4axABsRH4EAMJUdg4eQmxQELxwRFlRBAByBlLAnPAKwNbJqkUOarGmAEItcBYEALwCMBAiANYQGBgsIgTN8ADaAKwAuhSdPcAAdPpWOw6uDoklZRVVJNla9QYBK8PLHQ7dPZLGA0Mj47BTWbzRbLIYbbaJBwAeihBAAouZDHAxHAmAQYCwCAB3FgIaZIARoNgiKr6SwENBQAgmNgsSbwNEYgi08RgIT0qowAAWVSJAOJcCQkLUMOpbEZPIYvFxVREJgA5OJYDKCOZhaoDkdLCcUi4gA</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35145</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement an alternative way to break cycles while calculating IsValueType/IsReferenceType for a type parameter.</Title>
    <Description>Fixes #30081.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35144</IssueID>
    <RepoID>1</RepoID>
    <Title>More Pull Members Up MAS Fixes</Title>
    <Description>* Use `Button` instead of `vs:Button` to handle high contrast better
* Dynamically set the help text so screen readers don't always read that something is invalid for an interface</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35143</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge features/nullable api</Title>
    <Description>Merges features/nullable-api into master. All commits have been reviewed in the branch.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35141</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge features/editorconfig-in-compiler back into master</Title>
    <Description>Merging the feature branch back into master.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>20/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35140</IssueID>
    <RepoID>1</RepoID>
    <Title>`#error version` should display product version</Title>
    <Description>The compiler version in Core 3 preview 4 shows as '3.100.19.20907 (01f3eb10)' when I include `#error version` in the code of a simple console app.

But when I look at the Roslyn commit 01f3eb10
https://github.com/dotnet/roslyn/blob/01f3eb103049e2c93e0516c7d50908031deaca74/eng/Versions.props
I see that the version number should be 3.1.0 beta2 or something.


When I look at the binary "C:\Program Files\dotnet\sdk\3.0.100-preview4-011223\Roslyn\bincore\Microsoft.CodeAnalysis.dll" I see both 3.100 and 3.1:
 ![file-version](https://user-images.githubusercontent.com/12466233/56433714-ada62f80-6286-11e9-99ae-1e8df20af9ca.png)

Expected:
`#error version` should display `3.1.0-beta2-...`

Proposal: 
`#error version` should pull the version number from `AssemblyInformationalVersionAttribute` instead:
`[assembly: AssemblyInformationalVersion("3.1.0-beta1-19162-08+b02e2c50a2f2aeabb5b4e5d850c65ad8686848e3")]`</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>09/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35139</IssueID>
    <RepoID>1</RepoID>
    <Title>Find References results should distinguish direct and indirect references</Title>
    <Description>See discussion in #34617.

Currently Find All References on a named type returns references to both the type itself and references to the constructor(s). In this and similar cases, the `FinderLocation` should indicate whether the location is a direct reference to the symbol passed to Find All References, or to a related symbol.

The Find All References presenter should be updated to not show references to a related symbol on the searched symbol whenever the related symbol will also be shown in the results. For example the following image shows a reference location that should not have been presented because it is a duplicate:

![image](https://user-images.githubusercontent.com/1408396/56428465-0c6aa980-6285-11e9-8ee0-ef35a4189040.png)

Related to #32738</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>14/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35138</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualStudioWorkspaceDiagnosticAnalyzerProviderService should fail gracefully</Title>
    <Description>**Version Used**: 7d1eef24fc5139c359986120b2660eb9d474e3d8

Currently a failure in the constructor causes Visual Studio to crash. #34454 reduces but does not eliminate the chances of this occurring. This implementation should be updated to throw an exception from `GetHostDiagnosticAnalyzerPackages()` rather than crash the process in the constructor.

:link: Identified during review of #34454
:link: This is related to #35137 and should probably be fixed at the same time</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35137</IssueID>
    <RepoID>1</RepoID>
    <Title>Constructor for VisualStudioWorkspaceDiagnosticAnalyzerProviderService should not have thread affinity</Title>
    <Description>**Version Used**: 7d1eef24fc5139c359986120b2660eb9d474e3d8

MEF parts should not have thread affinity in their constructors. Currently the constructor for `VisualStudioWorkspaceDiagnosticAnalyzerProviderService` depends on the main thread.

🔗 This is related to #35138 and should probably be fixed at the same time</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35136</IssueID>
    <RepoID>1</RepoID>
    <Title>Code fix for CS8421: Pass 'item' as an argument</Title>
    <Description>**Version Used**: Visual Studio 2019 version 16.0

🔗 Related to #35135 

**Steps to Reproduce**:

```csharp
int Method(int x) {
  return Convert();

  static int Convert() =&gt; x + 1;
}
```

**Expected Behavior**:

* CS8421: A static local function cannot contain a reference to 'x'.
* A code fix is presented which offers to explicitly pass `x` as an argument.

**Actual Behavior**:

The error is reported, but the code fix must be applied manually.
</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35135</IssueID>
    <RepoID>1</RepoID>
    <Title>New refactoring: Make local function static</Title>
    <Description>This refactoring would add the `static` modifier to a local function, and automatically add parameters to the local function for each item previously captured by the function.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35134</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to dev16.1-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into dev16.1-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps
git reset --hard upstream/dev16.1-preview2-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35133</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.1-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35142</IssueID>
    <RepoID>1</RepoID>
    <Title>Using range operator causes InvalidProgramException</Title>
    <Description># Issue Title

Using range operator causes InvalidProgramException in the latest dotnet core preview

# General

Donet Core Version: 3 Preview 4
Visual Studio: 16.0.2

Running an MsTest v2 that targets netcore3.0 which tests another netcore3.0 library that uses the new range operator causes an `InvalidProgramException`

Example code used in the library:
`var index = query[0..^1] + (char)(query[^1] + 1);`

Example that worked
`var index = query.Substring(0, query.Length - 1) + query[query.Length - 1];`

Exception:
```
Exception Message: Common Language Runtime detected an invalid program.
```</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35132</IssueID>
    <RepoID>1</RepoID>
    <Title>renamed MS.VS.CodeAnalysis.CodeLens to MS.VS.LanguageServices.CodeLens</Title>
    <Description>fix https://github.com/dotnet/roslyn/issues/35111</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>20/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35131</IssueID>
    <RepoID>1</RepoID>
    <Title>Deconstruct KeyValuePair failing with nullable warning</Title>
    <Description>We have the following `KeyValuePair` struct:

```cs
    public readonly struct KeyValuePair&lt;TKey, TValue&gt;
    {
        private readonly TKey key; // Do not rename (binary serialization)
        private readonly TValue value; // Do not rename (binary serialization)

        public KeyValuePair(TKey key, TValue value)
        {
            this.key = key;
            this.value = value;
        }

        public TKey Key
        {
            get { return key; }
        }

        public TValue Value
        {
            get { return value; }
        }

        public override string ToString()
        {
            return KeyValuePair.PairToString(Key, Value);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        public void Deconstruct(out TKey key, out TValue value)
        {
            key = Key;
            value = Value;
        }
    }
```

Then we create a `Dictionary&lt;string, ResourceManager&gt;` which in its `Enumerator` returns a `KeyValuePair&lt;string, ResourceManager&gt;`. We should be able to use this as follows:

```cs
            Dictionary&lt;string, ResourceSet&gt; localResourceSets = _resourceSets;

            // If any calls to Close throw, at least leave ourselves in a
            // consistent state.
            _resourceSets = new Dictionary&lt;string, ResourceSet&gt;();
            _lastUsedResourceCache = new CultureNameResourceSetPair();

            lock (localResourceSets)
            {
                foreach ((_, ResourceSet resourceSet) in localResourceSets)
                {
                    resourceSet.Close();
                }
            }
```

We get a warning in the foreach loop: `shared\System\Resources\ResourceManager.cs(307,26): error CS8619: Nullability of reference types in value of type 'KeyValuePair&lt;string, ResourceSet&gt;' doesn't match target type 'ResourceSet'.`

Correct me if this regression was not caused by this change, but we're getting this warning as we updated the compiler version to: 
`3.100.19.21705 (79b8271f)`

This is currently blocking: https://github.com/dotnet/coreclr/pull/24060

Maybe this was broken by: https://github.com/dotnet/roslyn/pull/34768

cc: @dotnet/nullablefc @chsienki @cston </Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35130</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35129</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2 to dev16.1-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2 into dev16.1-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-to-dev16.1-preview2-vs-deps
git reset --hard upstream/dev16.1-preview2-vs-deps
git merge upstream/dev16.1-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-to-dev16.1-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35128</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35127</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to dev16.1-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into dev16.1-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps
git reset --hard upstream/dev16.1-preview2-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35126</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't complete statement when typing semicolon in char literal that is in delimiter</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1.  In the editor, insert the following code and type a semicolon where the $$ is
`void Main(string[]args)
    {
        Method('$$')
    }`
 
**Expected Behavior**:
`Method(';$$')`

**Actual Behavior**:
`Method('');$$`
</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35125</IssueID>
    <RepoID>1</RepoID>
    <Title>Addressed PR feedback.</Title>
    <Description>Follow up on PR feedback from @cston and @gafter. If there are any more comments on the content of the docs, please leave them on https://github.com/dotnet/roslyn/issues/35046 to follow up on later.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35124</IssueID>
    <RepoID>1</RepoID>
    <Title>Generic type name from Import completion should be language specific</Title>
    <Description>Right now, generic types are always displayed in C# even when completion is invoked in VB code.
i.e. `Foo&lt;&gt;` instead of `Foo(Of ...)`</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35123</IssueID>
    <RepoID>1</RepoID>
    <Title>FailFast attempting to show light bulb in integration tests</Title>
    <Description>https://dev.azure.com/dnceng/public/_build/results?buildId=160903

```
Event Time (UTC): 4/18/2019 9:43:58 PM
Event ID: 1025
Data: Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.ArgumentException: The supplied SnapshotPoint is on an incorrect snapshot.
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Microsoft.VisualStudio.IntegrationTest.Setup.TestExtensionErrorHandler.HandleError(System.Object, System.Exception)
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.HandleException(System.Object, System.Exception)
   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.ValidateBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)
   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.Microsoft.VisualStudio.Text.Editor.IWpfTextView.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)
   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet, Microsoft.VisualStudio.Text.Editor.ITextView, Microsoft.VisualStudio.Text.ITrackingPoint, Microsoft.VisualStudio.Text.ITrackingSpan, System.Collections.Generic.Dictionary`2&lt;Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource&gt;&gt;, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet, Boolean, Boolean)
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet, Microsoft.VisualStudio.Text.Editor.ITextView, Microsoft.VisualStudio.Text.ITrackingPoint, Microsoft.VisualStudio.Text.ITrackingSpan, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet, Boolean, Boolean)
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet, Microsoft.VisualStudio.Text.Editor.ITextView, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet)
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbController.CreateOrResetSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet)
   at Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbController+&lt;RefreshSessionAsync&gt;d__26.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation+&lt;&gt;c.&lt;.cctor&gt;b__8_0(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)
   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
   at MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext, System.Threading.ContextCallback, System.Object)
   at System.Windows.Threading.DispatcherOperation.Invoke()
   at System.Windows.Threading.Dispatcher.ProcessQueue()
   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)
   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.TextManager.Interop.IVsTextReplaceEvents.OnReplace(Microsoft.VisualStudio.TextManager.Interop.ChangeInput[])
   at Microsoft.VisualStudio.Editor.Implementation.TextDocData+&lt;&gt;c__DisplayClass180_1.&lt;RaiseReplaceEvent&gt;b__0()
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(System.Object, System.Action)
   at Microsoft.VisualStudio.Editor.Implementation.TextDocData.RaiseReplaceEvent(ReplaceEventHandler, Microsoft.VisualStudio.TextManager.Interop.ChangeInput[])
   at Microsoft.VisualStudio.Editor.Implementation.TextDocData.OnTextBufferChangedHighPriority(System.Object, Microsoft.VisualStudio.Text.TextContentChangedEventArgs)
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Object, System.EventHandler`1&lt;System.__Canon&gt;, System.__Canon)
   at Microsoft.VisualStudio.Text.Implementation.BaseBuffer.RawRaiseEvent(Microsoft.VisualStudio.Text.TextContentChangedEventArgs, Boolean)
   at Microsoft.VisualStudio.Text.Implementation.BaseBuffer+TextContentChangedEventRaiser.RaiseEvent(Microsoft.VisualStudio.Text.Implementation.BaseBuffer, Boolean)
   at Microsoft.VisualStudio.Text.Implementation.BufferGroup.RaiseEvents()
   at Microsoft.VisualStudio.Text.Implementation.BufferGroup.FinishEdit()
   at Microsoft.VisualStudio.Text.Implementation.BaseBuffer+TextBufferEdit.Apply()
   at Microsoft.VisualStudio.Text.Implementation.BaseBuffer.Replace(Microsoft.VisualStudio.Text.Span, System.String)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc+&lt;&gt;c__DisplayClass16_0.&lt;ReplaceText&gt;b__0(Microsoft.VisualStudio.Text.Editor.IWpfTextView)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc+&lt;&gt;c__DisplayClass13_0.&lt;GetExecuteOnActionViewCallback&gt;b__0(System.Threading.CancellationToken)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent+&lt;&gt;c__DisplayClass6_0.&lt;InvokeOnUIThread&gt;b__0()
   at System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)
   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
   at MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext, System.Threading.ContextCallback, System.Object)
   at System.Windows.Threading.DispatcherOperation.Invoke()
   at System.Windows.Threading.Dispatcher.ProcessQueue()
   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)
   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)
```</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35122</IssueID>
    <RepoID>1</RepoID>
    <Title>Correctly report null reference possibility when GetEnumerator returns a potentially nullable Enumerator type.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/29972.
Fixes https://github.com/dotnet/roslyn/issues/34667 (was previously fixed in https://github.com/dotnet/roslyn/pull/34926, this just adds a test).</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35121</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-enumerator methods honor the EnumeratorCancellation attribute</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/34407

Relates to https://github.com/dotnet/corefx/issues/37012 (corefx API proposal for `EnumeratorCancellationAttribute` type)
Relates to https://github.com/dotnet/roslyn/issues/24037 (umbrella for async-streams)</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>20/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35120</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix sorting of import completion items</Title>
    <Description>Make sure type with shorter name shows first, e,g, `SomeType` before `SomeTypeWithLongerName`. Current implementation would show "SomeTypeWithLongerName" first.


Thanks @Dreamescaper for dogfooding and reporting the issue :)

@dotnet/roslyn-ide @CyrusNajmabadi 
</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35119</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler does not preserve EmbeddedResource.LogicalName with back-slashes on xplat</Title>
    <Description>`EmbeddedResource` item in MSBuild has a `LogicalName` property that allows specifying what the name of a resource would be once embedded in to the compiled assembly. Consider the following:

```xml
&lt;ItemGroup&gt;
    &lt;EmbeddedResource Include="Hello1.txt" LogicalName="Dir1/Hello1.txt" /&gt;
    &lt;EmbeddedResource Include="Hello2.txt" LogicalName="Dir1\Hello2.txt" /&gt;
&lt;/ItemGroup&gt;
```

On Windows, compiling a project with these resources preserves the LogicalName. Here's what ILSpy says when I inspect the assembly:

![image](https://user-images.githubusercontent.com/174281/56391817-9f9fd280-61e4-11e9-9489-1038c8c68e28.png)

When the same project is built on xplat (I tried this on Ubuntu 18.04), here's what I get:

![image](https://user-images.githubusercontent.com/174281/56391888-dd046000-61e4-11e9-9ff4-1e81f33e73fb.png)

The logical name passed to the Csc task looks correct:
![image](https://user-images.githubusercontent.com/174281/56392029-2c4a9080-61e5-11e9-9a87-e220d51a0fcf.png), however the generated command line changes the value:

```
/home/prkrishn/.dotnet/dotnet exec "/home/prkrishn/.dotnet/sdk/3.0.100-preview5-011366/Roslyn/bincore/csc.dll" 
....
/out:obj/Debug/netcoreapp3.0/consoleapp.dll 
/resource:Hello1.txt,Dir1/Hello1.txt 
/resource:Hello2.txt,Dir1/Hello2.txt
```

Here's an app that reproduces the issue: https://github.com/pranavkm/logicalname

Environment info:

```
.NET Core SDK (reflecting any global.json):
 Version:   3.0.100-preview5-011366
 Commit:    e279c78bad

Runtime Environment:
 OS Name:     ubuntu
 OS Version:  18.04
 OS Platform: Linux
 RID:         ubuntu.18.04-x64
 Base Path:   /home/prkrishn/.dotnet/sdk/3.0.100-preview5-011366/

Host (useful for support):
  Version: 3.0.0-preview5-27618-07
  Commit:  97d9338178

.NET Core SDKs installed:
  3.0.100-preview5-011366 [/home/prkrishn/.dotnet/sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.App 3.0.0-preview5-19218-03 [/home/prkrishn/.dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 3.0.0-preview5-27618-07 [/home/prkrishn/.dotnet/shared/Microsoft.NETCore.App]
```
</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35118</IssueID>
    <RepoID>1</RepoID>
    <Title>LINQ converter Query Syntax to/from Method Syntax</Title>
    <Description>&lt;p&gt;Hello!&lt;/p&gt;&lt;p&gt;As new feature to convert &amp;quot;foreach&amp;quot; to LINQ it's amazin, a fast converter from a LINQ syntax to another can be very usefull for fast refactor.&lt;/p&gt;&lt;p&gt;Thanks&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/533556/linq-converter-query-syntax-tofrom-method-syntax.html
VSTS ticketId: 847753_
_These are the original issue comments:_

Jane Wu [MSFT] on 4/16/2019, 03:08 AM (2 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35117</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler currently gives `error CS0034` when calling a nullable aware generic API from a non-nullable aware generic API</Title>
    <Description>The following code currently fails to compile with `error CS0034: Operator '|' is ambiguous on operands of type 'Vector&lt;T&gt;' and 'Vector&lt;T&gt;'`.

```csharp
public struct Vector&lt;T&gt; where T : struct
{
    public static Vector&lt;T&gt; operator |(Vector&lt;T&gt; left, Vector&lt;T&gt; right) =&gt; throw null;

    internal static Vector&lt;T&gt; ConditionalSelect(Vector&lt;T&gt; left, Vector&lt;T&gt; right)
    {
        return left | Vector.AndNot(left, right); // error CS0034: Operator '|' is ambiguous on operands of type 'Vector&lt;T&gt;' and 'Vector&lt;T&gt;'
    }
}

#nullable enable

public static partial class Vector
{
    public static Vector&lt;T&gt; AndNot&lt;T&gt;(Vector&lt;T&gt; left, Vector&lt;T&gt; right) where T : struct { throw null; }
}
```</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35116</IssueID>
    <RepoID>1</RepoID>
    <Title>`Equals` for generic methods should compare nullable annotations for type type arguments.</Title>
    <Description>Fixes #35083.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35115</IssueID>
    <RepoID>1</RepoID>
    <Title>Can't view overloads by down arrow in watch window.</Title>
    <Description>**Version Used**: VS2017&amp;VS2019

**Steps to Reproduce**:

1. Type `int.Parse(` in watch window
2. Press down arrow

**Expected Behavior**: View different overloads

**Actual Behavior**: Cursor runs to next line.
</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35114</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler is emitting `IsReadOnlyAttribute` for getter only auto properties of readonly structs.</Title>
    <Description>The compiler is currently emitting `IsReadOnlyAttribute` on getter only auto properties of a readonly struct.

While this is harmless, it unnecessarily increases metadata size and could likely be stripped given that it isn't emitted for other members (such as methods) and the readonly-ness can be detected from the attribute on the struct.

Also see: https://sharplab.io/#v2:C4LglgNgPgAgDAAhgRgNwFgBQMDMCBOApgIYAmA9gHYQCeCAzsPgK4DGwCAwggN5YICkeGABYEAWQAUASl79BAX3kDlQhGEocAGrwQBzQsFQIlmBUA==</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35113</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler is emitting `IsReadOnlyAttribute` for getter only auto properties when not targeting 8.0</Title>
    <Description>The compiler is currently emitting `IsReadOnlyAttribute` on getter only auto properties even when the langversion is not 8.0.

This lead to failures in the GenAPI tool which generates a reference source file based on a given implementation assembly: https://github.com/dotnet/arcade/issues/2555

This should be reviewed and determined whether it is desirable (in which case tools should be updated) or if it is undesirable (in which case the compiler should be updated).</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35112</IssueID>
    <RepoID>1</RepoID>
    <Title>Add missing binary back-compat method</Title>
    <Description>This was missed when we were adding another parameter to the one with optional arguments.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35111</IssueID>
    <RepoID>1</RepoID>
    <Title>rename Microsoft.VisualStudio.CodeAnalysis.CodeLens to Microsoft.VisualStudio.LanguageServices.CodeLens </Title>
    <Description>our pattern is not mixing VisualStudio and CodeAnalysis</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35110</IssueID>
    <RepoID>1</RepoID>
    <Title>Use Arcade CoreXT package support</Title>
    <Description>
    </Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35109</IssueID>
    <RepoID>1</RepoID>
    <Title>Can't find the solution in the recent documents.</Title>
    <Description>**Version Used**: 16.0.1

**Steps to Reproduce**:

1. Lock VS2019 to the taskbar.
2. Open VS2019, create a solution named `MyTest`, then close VS2019.
3. Right click VS2019 icon in the taskbar, there's no `MyTest.sln`

</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35108</IssueID>
    <RepoID>1</RepoID>
    <Title>Step Into and Step Over can't break with closure。</Title>
    <Description>**Version Used**: VS2017&amp;VS2019 can't break, VS2010&amp;VS2015 can.

**Steps to Reproduce**:

1. 
```
        static void Main(string[] args)
        {
            Console.WriteLine("test");
            int a = DateTime.Now.Second;
            "".Any(c =&gt; c &gt; a);
            Console.ReadKey();
        }
```
2. F10 / F11

**Expected Behavior**: VS break in the first `{`

**Actual Behavior**: VS can't break, and show "test" in the console.
</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35107</IssueID>
    <RepoID>1</RepoID>
    <Title>Fully NGen CodeLens assembly until optimization training is complete</Title>
    <Description>As an alternative to https://github.com/dotnet/roslyn/pull/35106.

Try to fully NGen the CodeLens assembly in order to get a build fro 16.1 preview2.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35106</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "move code lens to use new code lens API (#31573)"</Title>
    <Description>This reverts the changes from https://github.com/dotnet/roslyn/pull/31573.

The change is blocking our ability to get a build for 16.1 preview2 because it introduces a new assembly. 

@jinujoseph @heejaechang @RikkiGibson </Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35105</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Wrong label indentation (after if without braces)</Title>
    <Description>**Version Used**: 16.0.1
MSVS Community 2019

**Steps to Reproduce**:

```
		static void Test()
		{
			Test();

		label1:
			Test();
			if (true)
				Test();

			label2:
			Test();

		label3:
			if (true)
			{
				Test();
			}

		label4:
			Test();
		}
```
^ED (reformat)

**Expected Behavior**:

```
		label2:
			Test();
```

**Actual Behavior**:

```
			label2:
			Test();
```
</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35104</IssueID>
    <RepoID>1</RepoID>
    <Title>Cross assembly analysis support</Title>
    <Description>its important for null check helpers for example 
https://github.com/dotnet/roslyn-analyzers/issues/2215</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35103</IssueID>
    <RepoID>1</RepoID>
    <Title>Revoke IVTs to dotnet/roslyn-analyzers</Title>
    <Description>Closes #35102</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35102</IssueID>
    <RepoID>1</RepoID>
    <Title>Revoke IVTs to unit tests in dotnet/roslyn-analyzers</Title>
    <Description>
    </Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35101</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate ALM IVTs to the External Access pattern</Title>
    <Description>Applies to **Microsoft.VisualStudio.Alm.Shared.CodeAnalysisClient**.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35100</IssueID>
    <RepoID>1</RepoID>
    <Title>Semantic model returns a single candidate symbol for chained queries and generic vs non-generic overloads</Title>
    <Description>```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace ThenIncludeIntellisenseBug
{
    class Program
    {
        static void Main(string[] args)
        {
            var registrations = new List&lt;Registration&gt;().AsQueryable();
            var reg = registrations.Include(r =&gt; r.Activities).ThenInclude(c =&gt; c.$$);
        }
    }

    public class Registration
    {
        public ICollection&lt;Activity&gt; Activities { get; set; }
    }

    public class Activity
    {
        public Task Task { get; set; }
    }

    public class Task
    {
        public string Name { get; set; }
    }

    public interface IIncludableQueryable&lt;out TEntity, out TProperty&gt; : IQueryable&lt;TEntity&gt;
    {
    }

    public static class EntityFrameworkQuerybleExtensions
    {
        public static IIncludableQueryable&lt;TEntity, TProperty&gt; Include&lt;TEntity, TProperty&gt;(
            this IQueryable&lt;TEntity&gt; source,
            Expression&lt;Func&lt;TEntity, TProperty&gt;&gt; navigationPropertyPath)
            where TEntity : class
        {
            return default(IIncludableQueryable&lt;TEntity, TProperty&gt;);
        }

        public static IIncludableQueryable&lt;Registration, Task&gt; ThenInclude(
            this IIncludableQueryable&lt;Registration, ICollection&lt;Activity&gt;&gt; source,
            Func&lt;Activity, Task&gt; navigationPropertyPath)
        {
            return default(IIncludableQueryable&lt;Registration, Task&gt;);
        }

        public static IIncludableQueryable&lt;TEntity, TProperty&gt; ThenInclude&lt;TEntity, TPreviousProperty, TProperty&gt;(
            this IIncludableQueryable&lt;TEntity, TPreviousProperty&gt; source,
            Expression&lt;Func&lt;TPreviousProperty, TProperty&gt;&gt; navigationPropertyPath) where TEntity : class
        {
            return default(IIncludableQueryable&lt;TEntity, TProperty&gt;);
        }
    }
}
```
`c` before $$ can be either Activity or ICollection&lt;Activity&gt;. One can replace $$ with `Task `or with `First()`. Both are valid. However, intellisense is provided for `First() `and other collection methods. `Task `is not available in intellisense.

This happens because C# semantic model provides just a single candidate for the method symbol.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35099</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate Xamarin IVTs to the External Access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assembly for 16.2 Preview 1:

* Xamarin.Ide

This assembly should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35098</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove old Microsoft.VisualStudio.InteractiveServices project and IVTs</Title>
    <Description>
    </Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35097</IssueID>
    <RepoID>1</RepoID>
    <Title>Use Machine.Arm64 instead of raw value</Title>
    <Description>## Changes
- Use `Machine.Arm64` instead of raw value.

These cases were probably missed on #27023.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35096</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualBasic semantic model does not recognize overloads at chained queries</Title>
    <Description>```
Imports System.Linq.Expressions

Namespace ThenIncludeIntellisenseBug

    Class Program
        Shared Sub Main(args As String())
            Dim registrations = New List(Of Registration)().AsQueryable()
            Dim reg = registrations.Include(Function(r) r.Activities).ThenInclude(Function(a, b, c) c.F)
        End Sub
    End Class

    Friend Class Registration
        Public Property Activities As ICollection(Of Activity)
    End Class

    Public Class Activity
        Public Property Task As Task
    End Class

    Public Class Task
        Public Property Name As String
    End Class

    Public Interface IIncludableQueryable(Of Out TEntity, Out TProperty)
        Inherits IQueryable(Of TEntity)
    End Interface

    Public Module EntityFrameworkQuerybleExtensions
        &lt;System.Runtime.CompilerServices.Extension&gt;
        Public Function Include(Of TEntity, TProperty)(
                                                      source As IQueryable(Of TEntity),
                                                      navigationPropertyPath As Expression(Of Func(Of TEntity, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)
            Return Nothing
        End Function

        &lt;System.Runtime.CompilerServices.Extension&gt;
        Public Function ThenInclude(Of TEntity, TPreviousProperty, TProperty)(
                                                                             source As IIncludableQueryable(Of TEntity, ICollection(Of TPreviousProperty)),
                                                                             navigationPropertyPath As Expression(Of Func(Of String, TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)
            Return Nothing
        End Function

        &lt;System.Runtime.CompilerServices.Extension&gt;
        Public Function ThenInclude(Of TEntity, TPreviousProperty, TProperty)(
                                                                             source As IIncludableQueryable(Of TEntity, TPreviousProperty),
                                                                             navigationPropertyPath As Expression(Of Func(Of String, String, TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)
            Return Nothing
        End Function

    End Module
End Namespace
```

VB displays the following diagnostic
`BC36532	Nested function does not have the same signature as delegate 'Func(Of String, Activity, Object)'.	`

Then, if place caret after F and you type CTRL+J, it would provide completion for object not for ICollection&lt;&gt;.

Compare with C#

```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace ThenIncludeIntellisenseBug
{
    class Program
    {
        static void Main(string[] args)
        {
            var registrations = new List&lt;Registration&gt;().AsQueryable();
            var reg = registrations.Include(r =&gt; r.Activities).ThenInclude((a, b, c) =&gt; c.F);
        }
    }

    internal class Registration
    {
        public ICollection&lt;Activity&gt; Activities { get; set; }
    }

    public class Activity
    {
        public Task Task { get; set; }
    }

    public class Task
    {
        public string Name { get; set; }
    }

    public interface IIncludableQueryable&lt;out TEntity, out TProperty&gt; : IQueryable&lt;TEntity&gt;
    {
    }

    public static class EntityFrameworkQuerybleExtensions
    {
        public static IIncludableQueryable&lt;TEntity, TProperty&gt; Include&lt;TEntity, TProperty&gt;(
            this IQueryable&lt;TEntity&gt; source,
            Expression&lt;Func&lt;TEntity, TProperty&gt;&gt; navigationPropertyPath)
            where TEntity : class
        {
            return default(IIncludableQueryable&lt;TEntity, TProperty&gt;);
        }

        public static IIncludableQueryable&lt;TEntity, TProperty&gt; ThenInclude&lt;TEntity, TPreviousProperty, TProperty&gt;(
            this IIncludableQueryable&lt;TEntity, ICollection&lt;TPreviousProperty&gt;&gt; source,
            Expression&lt;Func&lt;string, TPreviousProperty, TProperty&gt;&gt; navigationPropertyPath) where TEntity : class
        {
            return default(IIncludableQueryable&lt;TEntity, TProperty&gt;);
        }

        public static IIncludableQueryable&lt;TEntity, TProperty&gt; ThenInclude&lt;TEntity, TPreviousProperty, TProperty&gt;(
            this IIncludableQueryable&lt;TEntity, TPreviousProperty&gt; source,
            Expression&lt;Func&lt;string, string, TPreviousProperty, TProperty&gt;&gt; navigationPropertyPath) where TEntity : class
        {
            return default(IIncludableQueryable&lt;TEntity, TProperty&gt;);
        }
    }
}
```

C# provides 
`CS1061	'ICollection&lt;Activity&gt;' does not contain a definition for 'F' and no accessible extension method 'F' accepting a first argument of type 'ICollection&lt;Activity&gt;' could be found (are you missing a using directive or an assembly reference?)`
and it works properly with CTRL + J.
</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35095</IssueID>
    <RepoID>1</RepoID>
    <Title>Add new ConversionKind to IsImplicitConversion test</Title>
    <Description>Fixes #34984 

`UnsetConversionKind` was added by [this commit](https://github.com/dotnet/roslyn/commit/9160b423#diff-61c14d55196186c0f71024c92e5a382fR11) but the switch statement wasn't updated. </Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35094</IssueID>
    <RepoID>1</RepoID>
    <Title>Add unit-tests for fixed issues.</Title>
    <Description>Closes #33276.
Closes #31676.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35093</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master</Title>
    <Description>@dotnet/roslyn-compiler please review b53c63f and c729078, cleanup and fixes from the merge.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35092</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to dev16.1-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into dev16.1-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps
git reset --hard upstream/dev16.1-preview2-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-dev16.1-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35091</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify removal of Microsoft.CodeAnalysis.Editor.UI.Wpf IVT</Title>
    <Description>I can't find any indication the IVT for **Microsoft.CodeAnalysis.Editor.UI.Wpf** was ever used. This IVT should be removed if not needed.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35090</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify removal of Scripting.Desktop IVT</Title>
    <Description>I can't find any indication that **Microsoft.CodeAnalysis.Scripting.Desktop** ever existed. If this is the case, we should remove the IVTs to it.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35089</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35088</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35087</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.1-preview2</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.1-preview2.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.1-preview2
git reset --hard upstream/dev16.1-preview2
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.1-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35086</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate CodeLens IVTs to the External Access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* Microsoft.VisualStudio.CodeSense.ReferencesProvider
* Microsoft.VisualStudio.CodeSense.Roslyn
* Microsoft.VisualStudio.CodeSense.TestsProvider

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35085</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate ExternalDependencyServices to the External Access pattern</Title>
    <Description>Covers **Microsoft.VisualStudio.LanguageServices.ExternalDependencyServices**.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35084</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate IntelliTrace IVTs to the External Access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assembly for 16.2 Preview 1:

* Microsoft.VisualStudio.ProductionBreakpoints.CodeAnalysis

This assembly should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35083</IssueID>
    <RepoID>1</RepoID>
    <Title>SubstitutedMethodSymbol.Equals doesn't compare top level nullable annotations for type arguments</Title>
    <Description>```
            // This checks if the type parameters on the method itself have been substituted in the same way.
            int arity = this.Arity;
            for (int i = 0; i &lt; arity; i++)
            {
                // TODO: what about annotations
                if (!TypeSymbol.Equals(this.TypeArgumentsWithAnnotations[i].Type, other.TypeArgumentsWithAnnotations[i].Type, TypeCompareKind.ConsiderEverything2))
                {
                    return false;
                }
            }
```

Note the ```TODO:``` comment</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35082</IssueID>
    <RepoID>1</RepoID>
    <Title>Add telemetry for import completion</Title>
    <Description>I have verified the telemetry change locally using telemetry monitor. Also include some changes to the tests. Retargeted this to master per offline discussion with @jinujoseph.

@dpoeschl @heejaechang @CyrusNajmabadi @dotnet/roslyn-ide </Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35081</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate internal testing IVTs to the External Access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* Microsoft.Test.Apex.VisualStudio
* ~~Microsoft.VisualStudio.Completion.Tests~~ Moved to #35495
* Microsoft.VisualStudio.ErrorList.UnitTests
* Roslyn.VisualStudio.Closed.UnitTests

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35080</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate legacy code analysis assemblies to the External Access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* CodeAnalysis
* ManagedSourceCodeAnalysis
* StanCore

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35079</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate Razor features to the External Access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* Microsoft.CodeAnalysis.Razor.Workspaces
* Microsoft.CodeAnalysis.Remote.Razor
* Microsoft.VisualStudio.Editor.Razor
* Microsoft.VisualStudio.LanguageServices.Razor

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35078</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate unit testing features to External Access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* Microsoft.CodeAnalysis.LiveUnitTesting.BuildManager
* Microsoft.CodeAnalysis.LiveUnitTesting.BuildManager.UnitTests
* Microsoft.CodeAnalysis.LiveUnitTesting.Orchestrator
* Microsoft.CodeAnalysis.LiveUnitTesting.Orchestrator.UnitTests
* Microsoft.CodeAnalysis.LiveUnitTesting.Test.Utilities
* Microsoft.CodeAnalysis.UnitTesting.SourceBasedTestDiscovery
* Microsoft.CodeAnalysis.UnitTesting.SourceBasedTestDiscovery.UnitTests
* Microsoft.VisualStudio.LiveUnitTesting.IntegrationTests

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35077</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate TypeScript IVTs to the External Access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies 

* Microsoft.CodeAnalysis.TypeScript.EditorFeatures
* Microsoft.VisualStudio.LanguageServices.TypeScript
* Roslyn.Services.Editor.TypeScript.UnitTests

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35076</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate F# IVTs to the external access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* FSharp.Editor
* FSharp.LanguageService

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35075</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect result type is inferred for a conditional access when a type parameter is constrained to a `Nullable&lt;T&gt;` type</Title>
    <Description>```
class C&lt;T&gt;
{
    public virtual void M&lt;U&gt;(B x, U y) where U : T
    {

    }
}

class B : C&lt;int?&gt;
{
    public override void M&lt;U&gt;(B x, U y)
    {
        var z = x?.Test(y);
        z = null;
    }

    T Test&lt;T&gt;(T x) =&gt; throw null;
}
```

Observed:
```
Microsoft (R) .NET Framework PE Verifier.  Version  4.0.30319.0
Copyright (c) Microsoft Corporation.  All rights reserved.

[IL]: Error: [f:\delete\debug.dll : B::M[U]] Type load failed.
1 Error(s) Verifying debug.dll
```

The IL uses a ```Nullable&lt;U&gt;``` which is a nullable type:
```
.method public hidebysig virtual instance void 
        M&lt;(valuetype [mscorlib]System.Nullable`1&lt;int32&gt;) U&gt;(class B x,
                                                            !!U y) cil managed
{
  // Code size       37 (0x25)
  .maxstack  2
  .locals init (valuetype [mscorlib]System.Nullable`1&lt;!!U&gt; V_0,
           valuetype [mscorlib]System.Nullable`1&lt;!!U&gt; V_1)
  IL_0000:  nop
  IL_0001:  ldarg.1
  IL_0002:  brtrue.s   IL_000f
  IL_0004:  ldloca.s   V_1
  IL_0006:  initobj    valuetype [mscorlib]System.Nullable`1&lt;!!U&gt;
  IL_000c:  ldloc.1
  IL_000d:  br.s       IL_001b
  IL_000f:  ldarg.1
  IL_0010:  ldarg.2
  IL_0011:  call       instance !!0 B::Test&lt;!!0&gt;(!!0)
  IL_0016:  newobj     instance void valuetype [mscorlib]System.Nullable`1&lt;!!U&gt;::.ctor(!0)
  IL_001b:  stloc.0
  IL_001c:  ldloca.s   V_0
  IL_001e:  initobj    valuetype [mscorlib]System.Nullable`1&lt;!!U&gt;
  IL_0024:  ret
} // end of method B::M
```</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35074</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate Live Share IVTs to the external access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* Microsoft.VisualStudio.LanguageServices.Remote
* Microsoft.VisualStudio.LanguageServices.Remote.15.7
* Microsoft.VisualStudio.LanguageServices.Remote.15.8
* Microsoft.VisualStudio.LanguageServices.Remote.16.0
* Microsoft.VisualStudio.LanguageServices.Remote.16.1
* Microsoft.VisualStudio.LanguageServices.Remote.CSharp
* Microsoft.VisualStudio.LanguageServices.Remote..CSharp.15.7
* Microsoft.VisualStudio.LanguageServices.Remote.CSharp.15.8
* Microsoft.VisualStudio.LanguageServices.Remote.CSharp.16.0
* Microsoft.VisualStudio.LanguageServices.Remote.CSharp.16.1

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35073</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide catch handler offset for `async Task` methods</Title>
    <Description>PDBs currently have a "catch handler IL offset" property for methods using the following interface. However, this is also used for `async void` methods. To allow the debugger to find the similar catch block in `async Task` methods, it would be useful if the compiler emitted this information in a new 'ExceptionPropigationHandlerILOffset' PDB custom info that would work for `async Task`.

**NOTE:** If this information isn't provided, the other option is for debuggers to infer this data using IL analysis, looking for the handler that will call `System.Runtime.CompilerServices.AsyncTaskMethodBuilder::SetException`. Providing this in the PDB provides future proofing so that if the compiler decides to output IL in a very different way in the future, the debugger will not break.

https://github.com/dotnet/symreader-portable/issues/216 tracks adding this to the portable PDB reader</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35072</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify safe removal of legacy testing IVTs</Title>
    <Description>The following IVTs are likely unused, in which case they can be removed:

* RoslynETAHost
* RoslynTaoActions</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35071</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify safe removal of EnC.UnitTests IVTs</Title>
    <Description>The repository currently contains IVTs to the following assemblies:

* Roslyn.Compilers.CSharp.EnC.UnitTests
* Roslyn.Compilers.VisualBasic.EnC.UnitTests

I cannot find a record of these ever existing. The IVTs should be removed if they are no longer in use.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35070</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate project system IVTs to external access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* Microsoft.VisualStudio.ProjectSystem.CSharp
* Microsoft.VisualStudio.ProjectSystem.Managed
* Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests
* Microsoft.VisualStudio.ProjectSystem.Managed.VS
* Microsoft.VisualStudio.ProjectSystem.Managed.VS.UnitTests
* Microsoft.VisualStudio.ProjectSystem.VisualBasic

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35069</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate XAML language services to the external access layer pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assembly for 16.2 Preview 1:

* Microsoft.VisualStudio.DesignTools.XamlLanguageService

This assembly should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35068</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn fails to warn about mismatching nullability when there's a user defined conversion involved </Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

Compile and run the following code:

```cs
#nullable enable
using System;

class A&lt;T&gt;
{
  public Func&lt;T, T&gt; Identity = t =&gt; t;
}
class C&lt;T&gt;
{
  public Func&lt;T, T&gt; Identity = t =&gt; t;

  public static implicit operator C&lt;T&gt;(A&lt;T&gt; a) =&gt; new C&lt;T&gt; { Identity = a.Identity };
}

class Test
{
  public static void Main()
  {
    Test1(new A&lt;string&gt;(), "");
  }
  
  static void Test1(A&lt;string&gt; a, string? s)
  {
    a.Identity = notNullableString =&gt; notNullableString.ToString();
    var c = M(a, s);
    c.Identity(null);
  }
  
  /*
  static void Test2(C&lt;string&gt; c1, string? s)
  {
    var c = M(c1, s);
  }
  */
  
  static C&lt;T&gt; M&lt;T&gt;(C&lt;T&gt; c, T s) =&gt; c;
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABABgqYEYBuRxpgJgoBBADwAVAHyMA3owrsAzOwCs4pBUkUAkimowAljACeFALwUYZiRZ4MAvn0EBhcVIayG8pkqaqx6zR09QxNzS1NrGFs5RXYOADYKfTAAB0J9AGNDCgB7FMQIGByEChdJAApRTQgASisKXDgAd1LXCmltXVwDYzMKCAA6IO6QijtbBwZHDThYGRjvOMSmABYKAFkIfVxympiPeXkxWZgOcsaW0U4WCV31ACJ7mtt5SfkFhPY149gzq44bv11NcAPwUKB7TztGLyQbDHqhBo5GAAOSIJDIcAAyjAENsAOb1XDItHEWjY3EEgZiHI4vG4fG7F6HABuEBKGT663KEHUEOZ8gyQy6CPO6OeMTeFBiAHoAFQfZbfE78coua7WDIcYEAsEQ/Ywihsjlc8pavkSqFSuUymKK1qadauNVtDIBcF1CIUDITIA===

**Expected Behavior**:
Warning for `a` in the expression `M(a, s)`.
```
warning CS8620: Argument of type 'C&lt;string&gt;' cannot be used for parameter 'c' of type 'C&lt;string?&gt;' in 'C&lt;string?&gt; Test.M&lt;string?&gt;(C&lt;string?&gt; c, string? s)' due to differences in the nullability of reference types.
```

**Actual Behavior**:
No warnings. The program crashes at runtime with a `NullReferenceException`.

**Notes**
The type `A&lt;string&gt;` is converted via a user defined conversion to `C&lt;string&gt;`.
Passing `C&lt;string&gt;` in the call `M(a, s)` should issue a warning since the type argument of `M&lt;T&gt;` is inferred to be a nullable string because of the second argument `string? s`. Not that Roslyn knows about this and correctly reports a warning if `C&lt;string&gt;` is passed explicitly, you can uncomment `Test2` to verify that but doing so via a user-defined operator confuses the compiler.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35067</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense broken inside of methods that have delegates as arguments</Title>
    <Description>Fix https://github.com/dotnet/roslyn/issues/35027</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35066</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement InternalsVisibleTo checks</Title>
    <Description>Suggested review commit by commit.

Closes #35064</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35065</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove CompilationOutputFilesWithImplicitPdbPath</Title>
    <Description>We should always be able to get full compiler output information (paths to output assembly and pdb) from the project system.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35064</IssueID>
    <RepoID>1</RepoID>
    <Title>InternalsVisibleTo enforcement for external access changes</Title>
    <Description>BuildBoss should be updated to enforce the new External Access features by validating one of the following is true for every `&lt;InternalsVisibleTo&gt;` in the solution:

1. The target of the IVT is an assembly which is defined and built within Roslyn.sln
2. The source of the IVT is an External Access assembly
3. The IVT element has an attribute `LoadsWithinVisualStudio="false"`
4. The IVT element has a `WorkItem` attribute with a URI to an issue tracking the elimination of the IVT</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35063</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 (remove unused parameter) should not fire for MSTest ClassInitialize-annotated method</Title>
    <Description>**Version Used**: 
Visual Studio Professional 16.0.1

**Steps to Reproduce**:
```c#
[TestClass]
public class TestClass1
{
    [ClassInitialize]
    public static void ClassInitialize(TestContext context)
    {
        Console.WriteLine("ClassInitialize");
    }

    [TestMethod]
    public void Test1()
    {
    }
}
```

**Expected Behavior**:
- No message/error

**Actual Behavior**:
- Get the following message: "IDE0060	Remove unused parameter 'context' if it is not part of a shipped public API"
- If I remove the context parameter and run the test, I get the following error from MSTest v1: "TestClass1.ClassInitialize has wrong signature. The method must be static, public, does not return a value and should take a single parameter of type TestContext"</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35062</IssueID>
    <RepoID>1</RepoID>
    <Title>error CS0718 in 3.0 SDKs</Title>
    <Description>Create a consoleapp with the following files and `dotnet build` it, no errors. Open `global.json` and uncomment the line that requests the 3.0 sdk and comment the 2.2 sdk. You'll start getting the error: 
```
Program.cs(2,14): error CS0718: 'StaticClass': static types cannot be used as type arguments
```

I wasn't able to fix this by setting a 7.x langversion, so maybe this is a regression?

project.csproj
```c#
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;
```

Logger.cs
```c#
namespace Pocket
{
    internal class Logger&lt;TCategory&gt;
    {
    }
}
```

Program.cs
```c#
using System;
using static Pocket.Logger&lt;ConsoleApp1.StaticClass&gt;;

namespace ConsoleApp1
{
    static class StaticClass
    {

    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}
```

global.json
```
{
  "sdk": {
    // Errors if you uncomment the line below (could be any 3.0 sdk, is just what I happen to have)
    // "version": "3.0.100-preview3-010431" 
    "version": "2.2.102"
  }
}
```</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35061</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix Spanish build pool name</Title>
    <Description>
    </Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35060</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion should provide all in-scope type symbos</Title>
    <Description>```cs
namespace Foo
{
    class Baz {}

}
namespace Foo.Bar
{
    class Baz {}

    class Goo
    {
        $$
    }
}
```

For example, at the cursor location,`Baz` from both `Foo` and `Foo.Bar` should be provided, where `Foo.Bar` should have its containing namespace as inline description. When `Foo.Bar` is committed, it will be completed in qualified form.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35059</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion should provide extension methods from unimported namespaces</Title>
    <Description>
    </Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35058</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable CI for dev16.0.x* branches</Title>
    <Description>
    </Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35057</IssueID>
    <RepoID>1</RepoID>
    <Title>Enabling nullable context causes operator resolve errors </Title>
    <Description>**Version Used**: 

```
Branch master (17 Apr 2019)
Latest commit 88d7d9 by Andrew Hall:
Merge pull request #34915 Add IVsRefactorNotify changes to MoveToNamespace refactorings

If available, use the host service to provide IVsRefactorNotify changes of the symbols being changed so dependent frameworks

can handle the changes appropriately.

Adds unit tests that verify we have the correct code operations produced when we expect symbols to change.
```

**Steps to Reproduce**:

```cs
#nullable enable
class C&lt;T&gt;
{
  public static extern C&lt;T&gt; operator &amp;(C&lt;T&gt; c1, C&lt;T&gt; c2);
}

class Test
{
  // uncomment the following line to remove the error
  //#nullable disable
  void M(C&lt;string&gt; c1, string s)
  {
    var c2 = GetC(s);
    var c3 = c1 &amp; c2; // CS0034
  }
    
  public static extern C&lt;T&gt; GetC&lt;T&gt;(T t);
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGEAeAFQD5GA3owoUmAZlEBGAGxUAHvAS4OPXhQD2AB0QQY6hBQBkACi58KAY0lIV5iywCUAbkYBfRo1YVucWIOEUAPSBFPi4FupgYNQwFDAAFpQAZurE6gDuAJa4AOYUhNmUehQIcGDqAG5FiVQICPoBwXhEJGSUKJlQtHABTAAsFACyppxMkgAMalY2Y+MUUA4BQgwiIhUQBvYUALwUAOJwMOzGCy4rq+ubErtWRpYsTkEh7ADK4+NifQHu5yK9EmNZHAFIhlGY1AcjqpjNw4s43EA=

**Expected Behavior**:
No errors. The code compiles if you either remove the `#nullable enable` directive or uncomment the `#nullable disasble` directive

**Actual Behavior**:
```
error CS0034: Operator '&amp;' is ambiguous on operands of type 'C&lt;string&gt;' and 'C&lt;string&gt;'
```
I'm not sure what exactly becomes ambiguous if nullable reference types are enabled. Both participating operands as well as their type arguments are explicitly non-nullable.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>20/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35056</IssueID>
    <RepoID>1</RepoID>
    <Title>StackOverflow in NullableWalker for circular attributes</Title>
    <Description>### Repro

Compile the below code using the latest nightly and `LangVersion=preview` (this was specifically repro'd on `3.1.0-beta3-19213-02` and `3.1.0-beta3-19217-05`)

```csharp
using System;

[Circular(1)] 
public class CircularAttribute : Attribute 
{ 
    [Circular(2)] 
    public CircularAttribute([Circular(3)] int x) 
    { 
    } 
}
```

### Stack Trace

[StackTrace.txt](https://github.com/dotnet/roslyn/files/3089967/StackTrace.txt)
</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35055</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable background download UI to avoid toasts</Title>
    <Description>
    </Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35054</IssueID>
    <RepoID>1</RepoID>
    <Title>Apply hang mitigating timeouts in integration tests</Title>
    <Description>* WaitForApplicationIdle: Addresses hang observed in 3-Logs Debug Async 20190415.30.
* RestoreNuGetPackages: Addresses hang observed in 1-Logs Release Legacy 20190416.62.
* InvokeOnUIThread: Addresses hang observed in 1-Logs Debug Legacy 20190416.50.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35053</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn does not use compiler annotations for implicit deconstruction calls</Title>
    <Description>**Version Used**: 

Branch master (13 Apr 2019)
Latest commit bb94e7 by Cheryl Borley:
Don't complete statement when multiple characters are selected (#34878)

* Don't complete when multiple chars selected
* Undo change to pos return value

**Steps to Reproduce**:

Compile the following code
```cs
#nullable enable
using System.Runtime.CompilerServices;

public class C {
    public void M(C? c) {
        var (x, y) = c;
        // if you uncomment the following line and invoke the deconstruct method directly the warning will disappear
        // c.Deconstruct(out _, out _);
        c.ToString(); // CS8602 Dereference of a possibly null reference.
    }
}

static class Ext
{
  public static extern void Deconstruct([EnsuresNotNull] this C? c, out int x, out int y);
}

namespace System.Runtime.CompilerServices
{
  public class EnsuresNotNullAttribute : System.Attribute { }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABABgqYEYA6AJX1xgBLMHC4BhAPZgADoPIIAyogBuggMZwoAbkaMmAZnYAmCmIoBvRhWvtDTACwUAsgAoxAfgpqAlBas2A5QgEChcADyQKAE9fAF4vHQYAgIB6FIpBADNoiXwKfjUpEQEKGAALSkyJYgkAd0FcAHMKQgbKCFwUDNxlCQBrSnLKFDhC3FgEfDUYChFyiS6UQQRRmEIo0oqKWuDcBub64golqAhpaThg/2SKNK8uABFRiXGYSemXXJmAfUivim+3kSN2sai4ABUJAo3vsXEDbukxAoABwANhYJieK0yiGoGgoEmyEAo0gkUCggjIGwIR2xuNwGi41woAF9GGyGHoOKjjBQAKJhGCMSxJWzsblUQWIXDsRxPMYTKYwFwAbT543wKygADkJDBtURCABdTaCKCmTxqP74GYNGYRAk27ozGKJDmMGgiKDSCD4zi8fhCETiKSyeRKBCqDRQYX+Ay89VQTWaXX6w0AQRgMOANsoIHFXEz2dzFlZ7KAA===

**Expected Behavior**:
No warnings.

**Actual Behavior**:
`CS8602` is reported at the last line of `M`.

**Notes**
There's `[EnsuresNotNull]` annotation on the deconstruction method and it tells Roslyn that `c` is never null after the call. Roslyn is aware of it and correctly uses the annotation if `Deconstruct` is invoked explicitly, you can uncomment the explicit call to check this. However Roslyn fails to note that the same deconstruction method is invoked implicitly on the line `var (x, y) = c;` resulting in false warnings.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35299</IssueID>
    <RepoID>1</RepoID>
    <Title>Ways to format attributes followed by newlines</Title>
    <Description>E.g. in this file: https://github.com/dotnet/winforms/blob/master/src/Common/src/UnsafeNativeMethods.cs

We have the following example code

```cs
        [DllImport(ExternDll.Oleaut32, PreserveSig = false)]
        
        public static extern UnsafeNativeMethods.IPicture OleCreatePictureIndirect(NativeMethods.PICTDESC pictdesc, [In]ref Guid refiid, bool fOwn);
        [DllImport(ExternDll.Oleaut32, PreserveSig = false)]
        
        public static extern UnsafeNativeMethods.IFont OleCreateFontIndirect(NativeMethods.tagFONTDESC fontdesc, [In]ref Guid refiid);
        [DllImport(ExternDll.Oleaut32, ExactSpelling = true)]
        
        public static extern int VarFormat(ref object pvarIn, HandleRef pstrFormat, int iFirstDay, int iFirstWeek, uint dwFlags, [In, Out]ref IntPtr pbstr);
        [DllImport(ExternDll.Shell32, CharSet=CharSet.Auto)]
        
        public static extern int DragQueryFile(HandleRef hDrop, int iFile, StringBuilder lpszFile, int cch);
```

The correctly formatted text is
```cs
[DllImport(ExternDll.Oleaut32, PreserveSig = false)]
public static extern UnsafeNativeMethods.IPicture OleCreatePictureIndirect(NativeMethods.PICTDESC pictdesc, [In]ref Guid refiid, bool fOwn);

[DllImport(ExternDll.Oleaut32, PreserveSig = false)]
public static extern UnsafeNativeMethods.IFont OleCreateFontIndirect(NativeMethods.tagFONTDESC fontdesc, [In]ref Guid refiid);

[DllImport(ExternDll.Oleaut32, ExactSpelling = true)]
public static extern int VarFormat(ref object pvarIn, HandleRef pstrFormat, int iFirstDay, int iFirstWeek, uint dwFlags, [In, Out]ref IntPtr pbstr);

[DllImport(ExternDll.Shell32, CharSet=CharSet.Auto)]
public static extern int DragQueryFile(HandleRef hDrop, int iFile, StringBuilder lpszFile, int cch);
```

But sadly the weird formatting where the attribute is not prefixed by a new line and is followed by a new line is maintained</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35052</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2 to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2 into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/dev16.1-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35051</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35050</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2 to dev16.1-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2 into dev16.1-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-to-dev16.1-preview2-vs-deps
git reset --hard upstream/dev16.1-preview2-vs-deps
git merge upstream/dev16.1-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-to-dev16.1-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35049</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.1-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35048</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement `where T: class` and `where T: struct` for overrides and explicit interface implementations.</Title>
    <Description>Closes #34798.
Closes #29847.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35047</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove prototype comments and add the run-nullable-analysis flag</Title>
    <Description>Filed follow up bugs where appropriate. @dotnet/roslyn-compiler please review.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35046</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify Public API documentation for the new nullable APIs</Title>
    <Description>I've currently added relatively minimal documentation for the new public APIs. We should go through these docs and expand them, and do a formal review.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35045</IssueID>
    <RepoID>1</RepoID>
    <Title>Async Completion List does not resize back after it gets too wide</Title>
    <Description>**Version Used**: 
Visual Studio 2019 dev16.0 and above

**Steps to Reproduce**:

1. Create a C# project, or open a C# interactive window
2. Type `int`, and try to scroll down the completion list, you will see the width of the list is growing based on the candidate names
3. Type something very short, like `as`, `int` and you will see the completion window never resize back to fit the current candidates' names, make it look odd.

**Expected Behavior**:
1. Completion list will resize based on the candidate names, the legacy completion list preserves this behavior (resizes when completion list is triggered, if the window is already showed, then no resize.)
2. The list should have a min width, if you just `Alt + Right` in interactive window and filter by keywords, you may get a very narrow window that display incomplete iten names.

**Actual Behavior**:
It never resizes back to fit the length, see the screenshot.
![image](https://user-images.githubusercontent.com/12908526/56259957-e2996300-6089-11e9-8bc4-2abcb5982124.png)
</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35044</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify BoundAnonymousPropertyDeclaration implementation</Title>
    <Description>`NullableWalker.VisitAnonymousObjectCreationExpression.getDeclaration` works for cases without errors, but in cases where there are errors it will not produce the correct information. We'll likely need to do some rebinding here to get the appropriate nodes.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>05/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35043</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove _disableNullabilityAnalysis flag</Title>
    <Description>This flag is currently used in `NullableWalker` to avoid setting api results for nodes that aren't supported. When we support all nodes (namely patterns and tuples) we should remove this flag.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35042</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle bad expression children</Title>
    <Description>Object and collection initializers are normally handled by the object creation visitor, but we can end up in scenarios with bad code where we hit the `VisitObjectInitializerExpression` and co visitors without hitting a `VisitObjectCreationExpression`. We likely need to analyze the children of these nodes to provide public API info.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35041</IssueID>
    <RepoID>1</RepoID>
    <Title>Investigate avoiding work if not rewriting for nullable</Title>
    <Description>`NullableWalker` currently has several places where we're doing work to calculate nullabilities when it's only necessary for public API information. We should try to make these conditional on whether or not that info is necessary to avoid work if possible.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35040</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor VisitObjectCreationInitializer</Title>
    <Description>The current handling of object initializers is potentially error-prone, and requires reconstructing types after we've already calculated them. We should refactor and ensure that types aren't recalculated after being calculated once.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35039</IssueID>
    <RepoID>1</RepoID>
    <Title>Correct handling of types in `ApplyConversion`</Title>
    <Description>In the `NullableWalker`, `ApplyConversion` is often putting causing the wrong types to get set for `BoundConversion`s and their children. We need to update this to do the correct thing.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35038</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure that all binding in semantic models is subject to rewriting</Title>
    <Description>There are several sections of code that currently are not having rewriting done, and they probably should. We need to come up with test cases that will expose the lack of rewriting and then implement the rewriting sections.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35037</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable nullable analysis on speculative semantic models</Title>
    <Description>We need to determine the extent of nullable analysis support for speculative semantic models. In particular, we need to determine just how precise the speculative model needs to be for nullability. For example:

```C#
class C
{
    object? F;
    static void M(C c)
    {
        var x = new C() { F = c.F?.ToString() };
    }
}
static class ObjectExtensions
{
    object? MyExtension(this object o1, object o2) =&gt; null;
}
```

If someone were to speculate about replacing the `ToString()` call with `MyExtension(c.F)`, would we need to be precise enough here to not warn about the `c.F` in the invocation of `MyExtension`, since the conditional access guarantees that that `F` won't be null? @jasonmalinowski, thoughts?</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>29/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35036</IssueID>
    <RepoID>1</RepoID>
    <Title>IDiscardSymbol.NullableAnnotation needs to be implemented</Title>
    <Description>Currently this is unimplemented.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35035</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor SymbolDisplay's handling of nullablility</Title>
    <Description>Currently the handling requires `TypeSymbolWithAnnotations` internally, so we need to update it to not need that. Additionally, some of the test format code is directly in `TypeSymbolWithAnnotations`, that also needs to be pulled out.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35034</IssueID>
    <RepoID>1</RepoID>
    <Title>IMethodSymbol.ReceiverNullability needs to be implemented</Title>
    <Description>Currently this is unimplemented.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35033</IssueID>
    <RepoID>1</RepoID>
    <Title>Investigate nullability with aliases</Title>
    <Description>Ensure the behavior of what happens when a user types an alias with a nullability on it. See `CSharpSemanticModel.GetTypeInfoForSymbol`, where we're currently substituting `default` for `Nullability` in constructing the `CSharpTypeInfo`.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35032</IssueID>
    <RepoID>1</RepoID>
    <Title>NullableWalker's result recording for patterns needs to be updated</Title>
    <Description>Currently patterns aren't supported by the result recording steps, this should be updated.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35031</IssueID>
    <RepoID>1</RepoID>
    <Title>NullabilityRewriter needs to handle updating SymbolInfos</Title>
    <Description>BoundNodes with symbols such as `BoundCall`, `BoundPropertyAccess`, etc., are currently not being updated. This means that `GetSymbolInfo` and related APIs will not return symbols with correct nullability information.</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35030</IssueID>
    <RepoID>1</RepoID>
    <Title>Lambdas in array initializers checked in nullable walker</Title>
    <Description>Also fixes a corresponding issue in the switch expression
Fixes #34299
See also #35029</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35029</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected inference for conditional expression</Title>
    <Description>The following test demonstrates the behavior I would expect for the `?:` expression when only one side of the `:` "has a type".  But this isn't how the compiler behaves.  It is inferring an oblivious result rather than taking the type from the only operand that has a type and reporting a warning on the conversion.  Silently inferring an oblivious result undermines the safety of the nullable feature.

``` c#
        [Fact]
        public void CheckLambdaInConditional()
        {
            var source =
@"using System;

class C
{
    static Func&lt;T&gt; M&lt;T&gt;(Func&lt;T&gt; f) =&gt; f;
    static void G(int i, object? o, string? s)
    {
        if (o == null) return;
        var f = M(() =&gt; o) /*T:System.Func&lt;object!&gt;!*/;
        f().ToString();
        var f2 = (i == 0) ? f : (() =&gt; s); // 1
        _ = f2 /*T:System.Func&lt;object!&gt;!*/;
        f2().ToString();
        var f3 = (i == 0) ? f : (() =&gt; { return s; }); // 2
        _ = f3 /*T:System.Func&lt;object!&gt;!*/;
        f3().ToString();
    }
}
";
            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyTypes();
            comp.VerifyDiagnostics(
                // (12,42): warning CS8603: Possible null reference return.
                //        var f2 = (i == 0) ? f : (() =&gt; s); // 1
                Diagnostic(ErrorCode.WRN_NullReferenceReturn, "s").WithLocation(12, 42),
                // (14,32): warning CS8603: Possible null reference return.
                //        var f3 = (i == 0) ? f : (() =&gt; { return s; }); // 2
                Diagnostic(ErrorCode.WRN_NullReferenceReturn, "s").WithLocation(14, 32));
        }
```
</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35028</IssueID>
    <RepoID>1</RepoID>
    <Title>VB Editor changed VB keywords casing although they are used as literal strings in my code!</Title>
    <Description>**Version Used**: 
VS.NET 2019 Community

I had this Function in  VB
```VB.NET
    Private Function convVars(type As String) As String
        If type Is Nothing Then Return Nothing
        Dim t = type.Trim().ToLower()
        Select Case t
            Case "Byte", "SByte", "Short", "UShort", "Long", "ULong", "douple", "Decimal"
                Return t
            Case "Integer"
                Return "int"
            Case "UInteger"
                Return "uint"
            Case "Single"
                Return "float"
            Case Else
                Return type.Trim().Replace(
                    (" Byte", " Byte"), (" SBtye", " SByte"), (" Short", " Short"),
                    (" UShort", " UShort"), (" Long", " Long"), (" ULong", " ULong"),
                    (" Double", " douple"), (" Decimal", " Decimal"),
                    (" Integer", " int"), (" UInteger", " uint"), (" Single", " float"),
                    ("(Of ", LessThan), ("Of ", LessThan), (")", GreaterThan)
                )

        End Select


    End Function
```

You can notice the statement:
` Dim t = type.Trim().ToLower()`
Then I check the values of t using `Select case`
Obviously, I wouldn't change to small case the compare with strings containing upper case letters!
This code isn't what I wrote! The editor suddenly changed the case of all VB keywords although they are just quoted strings!
This happened also in another function where I used the string "declare" but suddenly found it became "Declare"!
Also I found a strange `Then` added after a string although there is no `If` nearby!
The sudden failure of unit testes (that passed before) reveals all this!
I had to repair all these editor mistakes, but I am afraid to happen again!
I don't know what triggers this strange action. I had these codes running for days! This just happened in the past few minutes, and I have no reason to think about!

Note:
It seems related to XML literals. I explained how to reproduce this in https://github.com/dotnet/roslyn/issues/35028#issuecomment-485212309</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35027</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense broken inside of methods that have delegates as arguments</Title>
    <Description>Intellisense broken for callbacks. Inside of the Foo callback below builder. shows intellisense for the Delegate type instead of the Builder type. This works fine in 16 but broken in 16.1 preview 2.

```csharp
using System;
namespace ConsoleApp40
{
    class Program
    {
        static void Main(string[] args)
        {
            Foo(builder =&amp;gt;
            {
                builder.
            });
        }
        static void Foo(Action&amp;lt;Builder&amp;gt; configure)
        {
            var builder = new Builder();
            configure(builder);
        }
    }
    class Builder
    {
        public int Something { get; set; }
    }
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/533644/intellisense-broken-inside-of-methods-that-have-de.html
VSTS ticketId: 847803_
_These are the original issue comments:_

Visual Studio Feedback System on 4/15/2019, 08:17 PM (20 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 4/16/2019, 00:07 PM (5 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>17/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35026</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35025</IssueID>
    <RepoID>1</RepoID>
    <Title>Internal Error in the expression evaluator</Title>
    <Description>VSF_TYPE_MARKDOWNVS2019.  Attempting to watch a very large string value (called responseXML) during debug.  Also tried immediate window with ?responseXML.  Returns &amp;quot;Internal Error in the expression evaluator&amp;quot;.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/527429/internal-error-in-the-expression-evaluator-3.html
VSTS ticketId: 844665_
_These are the original issue comments:_

Visual Studio Feedback System on 4/10/2019, 06:50 PM (5 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Craig Fisher on 4/15/2019, 02:56 PM (25 hours ago): &lt;p&gt;I'm getting this error when trying to view exception details. I don't have a large string value involved.&lt;/p&gt;

Visual Studio Feedback System on 4/15/2019, 06:08 PM (22 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

Craig Fisher on 4/16/2019, 01:41 PM (2 hours ago): Actually I'm also getting it just trying to view objects in the debugger. Turning on "use legacy C# &amp; VB expression evaluator" gets around the problem.
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35024</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix complete statement's semicolon placement to better handle incomplete code</Title>
    <Description>Fix for #34983 and #35126</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35023</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix assert in remove unused member analyzer</Title>
    <Description>Fixes #33765</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35022</IssueID>
    <RepoID>1</RepoID>
    <Title>Add Nullable Reference Analysis to C# &gt; Advanced options page</Title>
    <Description>This hooks up the NRT Analysis compiler feature up to the advanced option page for C#. When enabled, the compiler flag "run-nullable-analysis" will be set to true; disabled will set it to false. No value will do the default behavior for the compiler. 

![image](https://user-images.githubusercontent.com/475144/56249854-2d06e980-6062-11e9-8aa7-a5cb55d457f5.png)
</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35021</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35020</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35019</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35018</IssueID>
    <RepoID>1</RepoID>
    <Title>Make Generated syntax trees restore to project-level nullability</Title>
    <Description>Fixes #34094</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35017</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify null checks using 'is null' and 'is object'</Title>
    <Description>
    </Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35016</IssueID>
    <RepoID>1</RepoID>
    <Title>Additional Nullability checks for deconstruction:</Title>
    <Description>- Check 'this' param for extension deconstruct
- Re-infer the argument types for generic extension deconstruct
- Update return type with visited arguments
- Update tests

Closes https://github.com/dotnet/roslyn/issues/33006</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35015</IssueID>
    <RepoID>1</RepoID>
    <Title>Hide dependency on VsInteractiveWindow package from Microsoft.VisualStudio.LanguageServices package</Title>
    <Description>Hide dependency on VsInteractiveWindow package from Microsoft.VisualStudio.LanguageServices package.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35014</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix regression for switching on a constant value</Title>
    <Description>We made a change in #32818 to restore compatibility with C# 7.x
in rejecting certain switch statements even when we could prove
completeness with the new switch analysis. It looks like that
change just went a little too far, as we could do the analysis
if the argument to the switch expression was a constant. This
change removes the compat clause for switches with constant
values

Fixes #35011</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35013</IssueID>
    <RepoID>1</RepoID>
    <Title>made featureflag and experiementation service to use different name.</Title>
    <Description>featureflag service and experiementation service prohits 2 services to use same name for some reason. and we can't change that policy

but we would like to seamlessly move from feature flags to experiementation service without code change to test new feature/idea

so, now we use 2 different name for 2 services.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35012</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable semantic model mishandles argument conversion types</Title>
    <Description>See `IdentityConversion_NullCoalescingOepration_02`. `ApplyArgumentConversion` is applying the result of the conversion to the underlying `BoundNullCoalescingOperator`, which isn't what was intended. Original text of the affected part of the test is below.

```C#
    static void F1(IIn&lt;object&gt;? x1, IIn&lt;object?&gt;? y1)
    {
        FIn((x1 ?? y1)/*T:IIn&lt;object!&gt;?*/); // This is returning IIn&lt;object?&gt;?
        FIn((y1 ?? x1)/*T:IIn&lt;object!&gt;?*/); // This is returning IIn&lt;object?&gt;?
    }

    static void F3(object? x3, object? y3)
    {
        FIn((FIn(x3) ?? FIn(y3))/*T:IIn&lt;object?&gt;?*/); // A
        if (x3 == null) return;
        FIn((FIn(x3) ?? FIn(y3))/*T:IIn&lt;object!&gt;?*/); // B
        FIn((FIn(y3) ?? FIn(x3))/*T:IIn&lt;object!&gt;?*/); // C
        if (y3 == null) return;
        FIn((FIn(x3) ?? FIn(y3))/*T:IIn&lt;object!&gt;?*/); // D
    }
```</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35011</IssueID>
    <RepoID>1</RepoID>
    <Title>switch case without default no longer compiles in visual studio 2019 [c#]</Title>
    <Description>VSF_TYPE_MARKDOWNThe following code compiles fine in Visual Studio 2017, but not in Visual Studio 2019. Is there a default compiler option that has changed which can resolve this?

    using System;
    
    namespace NoDefaultCase
    {
        public static class Program
        {
            public const string Database = &amp;quot;MongoDB&amp;quot;;
    
            public static string GetDb()
            {
                switch (Database)
                {
                    case &amp;quot;MongoDB&amp;quot;:
                        return Database;
                }
            }
    
            public static void Main(string[] args)
            {
                Console.WriteLine($&amp;quot;The value returned is \&amp;quot;{GetDb()}\&amp;quot;.&amp;quot;);
                Console.WriteLine(&amp;quot;Press a key to exit&amp;quot;);
                Console.ReadKey();
            }
        }
    }

There is also a Stack Overflow ticket for this item:
https://stackoverflow.com/questions/55541269/why-does-a-switch-case-statement-on-a-string-constant-require-a-default-in-visua

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/520522/switch-case-without-default-no-longer-compiles-in.html
VSTS ticketId: 841662_
_These are the original issue comments:_

Martin Eyles on 4/6/2019, 05:37 AM (10 days ago): &lt;p&gt;In Visual Studio 2017, the output of the build is:&lt;br&gt;&lt;br&gt;    1&amp;gt;------ Rebuild All started: Project: NoDefaultCase, Configuration: Debug Any CPU ------&lt;br&gt;    1&amp;gt;  NoDefaultCase -&amp;gt; C:\Users\MartinEyles\source\repos\NoDefaultCase\NoDefaultCase\bin\Debug\NoDefaultCase.exe&lt;br&gt;    ========== Rebuild All: 1 succeeded, 0 failed, 0 skipped ==========&lt;br&gt;&lt;br&gt;In Visual Studio 2019, the output of the build is:&lt;br&gt;&lt;br&gt;    1&amp;gt;------ Rebuild All started: Project: NoDefaultCase, Configuration: Debug Any CPU ------&lt;br&gt;    1&amp;gt;C:\Users\MartinEyles\source\repos\NoDefaultCase\NoDefaultCase\Program.cs(9,30,9,35): error CS0161: 'Program.GetDb()': not all code paths return a value&lt;br&gt;    ========== Rebuild All: 0 succeeded, 1 failed, 0 skipped ==========&lt;/p&gt;

Visual Studio Feedback System on 4/8/2019, 02:55 AM (8 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Martin Eyles on 4/8/2019, 03:07 AM (8 days ago): &lt;p&gt;A github repository containing the example solution can be found at &lt;a target='_blank' href="https://github.com/martineyles/NoDefaultCase"&gt;https://github.com/martineyles/NoDefaultCase&lt;/a&gt; This includes an archive of the example solution in the state before it was added to github (NoDefaultCase - Before Github.zip).&lt;/p&gt;

Martin Eyles on 4/8/2019, 05:59 AM (8 days ago): &lt;p&gt;I experience this issue in &lt;/p&gt;&lt;p&gt;Microsoft Visual Studio Enterprise 2019 &lt;br&gt;Version 16.0.0&lt;br&gt;VisualStudio.16.Release/16.0.0+28729.10&lt;br&gt;Microsoft .NET Framework Version 4.7.03056'&lt;/p&gt;&lt;p&gt;It has been suggested by others in the Stack Overflow community that a preview version of Visual Studio 2019 behaves the same way as Visual Studio 2017&lt;/p&gt;

Martin Eyles on 4/12/2019, 05:24 AM (4 days ago): &lt;p&gt;The issue is still present in:&lt;br&gt;&lt;br&gt;Microsoft Visual Studio Enterprise 2019&lt;br&gt;Version 16.0.1&lt;br&gt;VisualStudio.16.Release/16.0.1+28803.156&lt;br&gt;Microsoft .NET Framework Version 4.7.03056&lt;/p&gt;

Martin Eyles on 4/12/2019, 05:26 AM (4 days ago): &lt;p&gt;Stack overflow users has suggested that this does not meet the C#  specification, and is likely to be either a bug or a change in the  specification that hasn't yet been documented.&lt;/p&gt;

Martin Eyles on 4/12/2019, 05:29 AM (4 days ago): &lt;p&gt;To quote a user with very good reputation on stack overflow:&lt;/p&gt;&lt;p&gt;The &lt;a target='_blank' href="https://www.ecma-international.org/publications/standards/Ecma-334.htm"&gt;ECMA C# 5 standard&lt;/a&gt; section 13.8.3 describes the reachability of the end of a switch statement:&lt;/p&gt;&lt;p&gt;  
&lt;/p&gt;&lt;blockquote&gt;   
&lt;p&gt;The end point of a switch statement is reachable if at least one of the following is true:&lt;/p&gt;&lt;p&gt;      
&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The switch statement contains a reachable break statement that exits the switch statement.&lt;/li&gt;&lt;li&gt;The switch statement is reachable, the switch expression is a non-constant value, and no default label is present.&lt;/li&gt;&lt;li&gt;The switch statement is reachable, the switch expression is a  constant value that doesn’t match any case label, and no default label  is present.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;  
&lt;/p&gt;&lt;p&gt;None of these seem to be the case in your example:&lt;/p&gt;&lt;p&gt;  
&lt;/p&gt;&lt;ul&gt;&lt;li&gt;There are no break statements&lt;/li&gt;&lt;li&gt;The switch expression is a constant value&lt;/li&gt;&lt;li&gt;The constant value &lt;em&gt;does&lt;/em&gt; match a case label&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;  
&lt;/p&gt;&lt;p&gt;So with C# 5 rules, the end point of this switch statement is &lt;em&gt;not&lt;/em&gt; reachable, and it should compile with no problems. The &lt;a target='_blank' href="https://github.com/dotnet/csharplang/blob/master/spec/statements.md"&gt;draft specification in GitHub&lt;/a&gt; has the same text, so it doesn't look like it's changed there yet...&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35010</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable semantic model API should handle tuples</Title>
    <Description>Making this an uber tracking issue for anything tuple related in the semantic model API.

- [x] NaturalTypeOpt needs to be udpated where appropriate
- [ ] Deconstruction assignment is currently entirely unhandled, as is deconstruction foreach (including `var _` and `_` discards)
- [ ] Null literal in `new ValueTuple&lt;object?, string&gt;(null, """") { Item1 = x };` has a different `LValueResult.Type` and `RValueResult.Type`</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35009</IssueID>
    <RepoID>1</RepoID>
    <Title>Add import placement codestyle, diagnostic, and fixer</Title>
    <Description>This PR is created to simplify the changes made in https://github.com/dotnet/roslyn/pull/30760

This PR includes the changes from both https://github.com/dotnet/roslyn/pull/34963 &amp; https://github.com/dotnet/roslyn/pull/34964

![image](https://user-images.githubusercontent.com/611219/56227270-f3b28780-6029-11e9-8d40-d2972c73739b.png)

![image](https://user-images.githubusercontent.com/611219/56395031-e34b0a00-61ed-11e9-9571-c22d57fe418f.png)

</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35008</IssueID>
    <RepoID>1</RepoID>
    <Title>Default Interface Implementation "ShouldOverrideAttribute"</Title>
    <Description>I propose roslyn should respect an attribute like "ShouldOverrideAttribute" that signifies a specific default interface method should rather be re-implemented instead of left as a default.

I foresee this being almost necessary when you version an existing interface to include a new method where you don't have a sane default implementation besides throwing.

When the attribute is applied csc (or maybe just analyzers) can warn or hint implementation authors when they re-compile against the newer interface that there is a method they should probably implement.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35007</IssueID>
    <RepoID>1</RepoID>
    <Title>Is this is bad type name lookup bug?</Title>
    <Description>The snippet below is perfectly fine - the reason for `System.String` is because this code comes from a rewriter that uses fully qualified names.


```
using System;

namespace Whatever.Something
{
public class FooBar
{
    public FooBar()
    {
        System.String obj = null;
    }
}
}
```

Now, I add a (empty) namespace whose name is suffixed by `System`, and the snippet no longer compiles, with the diagnostic: **error CS0234: The type or namespace name 'String' does not exist in the namespace 'Whatever.System'**.

```
using System;

namespace Whatever.System {}

namespace Whatever.Something
{
public class FooBar
{
    public FooBar()
    {
        System.String obj = null;
    }
}
}
```

I couldn't verify whether the (old online) C# specification anyhow prohibits such naming convention or this type name lookup works as intended. In either case, this is a awkward behavior (Roslyn 2.10).

Can anyone clarify this?
</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35006</IssueID>
    <RepoID>1</RepoID>
    <Title> Avoid boxing in string concatenation </Title>
    <Description>This changes the order of evaluation for string concatenation to follow
the C# specification. See #522.

Previously, when the compiler lowered a string concatenation containing
any objects which were not strings (or implicitly convertible to
strings), it would generate a call to an appropriate overload of
`string.Concat` taking `objects`. This meant that all expressions being
concatenated were evaluated, then `string.Concat` called, which called
`.ToString()` on all of them.

E.g.

    "x" + y + z

got compiled to :

    string.Concat("x", y, z)

Here, `y` and `z` are evaluated to `object` (boxing them if necessary),
and then they have `.ToString()` called on them by `string.Concat`.

This is technically against the C# specification, which defines string
concatenation as a sequence of left-associative calls to one of:

    string operator +(string x, string y);
    string operator +(string x, object y);
    string operator +(object x, string y);

So the above expression should conceptually be compiled to:

    op_Addition(op_Addition("x", y), z)

That is, `y` is evaluated to `object` and concatenated with `"x"`
before `z` is evaluated to `object`.

The decision was made to change this behaviour in #522.

This change brings a very important advantage: we can now fully evaluate
`y` to a string before we evaluate `z`, which means we're allowed to
compile the above to:

    string.Concat("x", y.ToString(), z.ToString())

This means that:

 - We don't box `y` and `z` if they're value types
 - We don't call `ToString()` on `"x"` (which is harmless but pointless)

This commit implements this change.

Calls are no longer emitted to overloads of `string.Concat` which take
`object` - instead, all parameters are evaluated to a string, and then
an appropriate overload of `string.Concat` which takes `strings` is
called.

Care is taken to deal with different types of expressions in different
ways:

 - Strings or types which are implicitly convertible to string never have
   .ToString called on them
 - Reference types (and unconstrained generics) have ?.ToString() called
   on them
 - A copy is made of non-readonly non-constant value types (and
   unconstrained generics), before.ToString() is called on the copy. This
   is to preserve the previous behaviour where value types were boxed, and
   so any side-effects of ToString() weren't reflected in the original.
 - A copy isn't made of readonly value types, as we know that ToString()
   can't have side-effects.

We emit `call` to special struct types, as we know these have their own
ToString implementation which won't be removed. For other value types,
we emit a constrained virtual call. This follows the precedent set in

For unary concatenation (e.g. `thing + ""`) we now emit
`thing?.ToString() ?? ""` instead of `string.Concat(thing) ?? ""`.

This does increase the size of generated code. My impression is that the
unit tests which were affected by this changed increased in size by
about 10%. This is somewhat offset by the fact that we can now call

    string.Concat(string, string, string, string)

instead of

    string.Concat(object[])

(since there is no overload of string.Concat which takes 4 objects),
which reduces the size of some methods significantly.

I haven't removed the SpecialMember versions of `string.Concat` which take object - let me know if you want me to.
</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35005</IssueID>
    <RepoID>1</RepoID>
    <Title>How to go to the same place from diff window to source window?</Title>
    <Description>picture 1:
![diff](https://user-images.githubusercontent.com/2529999/56207867-66e7e800-6082-11e9-885c-591c0647bc78.png)


picture 2:
![source](https://user-images.githubusercontent.com/2529999/56207874-6b140580-6082-11e9-85ed-b45083f02111.png)

For example, when I open picture 1, I find there're some changes near line 54, and I want to edit it more, but I don't want to edit it in diff window, so how can I go to the source window with the same place quickly, like picture 2.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35004</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix Value/Ref checks for pattern Index/Range</Title>
    <Description>When I implemented the Index and Range pattern support I forgot to
update the ref and ref-like checking behavior, which caused the
expressions to have the wrong behavior for certain operations and
potentially crash the compiler.

This change adds tests for ref returns and ref-like lifetimes and
implements the appropriate behavior.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35003</IssueID>
    <RepoID>1</RepoID>
    <Title>2019 VS C# and VB expression evaluator is needed in future VS versions</Title>
    <Description>**2019 VS**: 

**Steps to Reproduce**:

1. NET Framework 3.5 in big project. In debug mode need "USE the legacy C# and VB expression evaluators"

**Expected Behavior**:
If you will remove (Its advertised that in the future versions of VS you will remove this option from debug options) it will not be possible to debug NET Framework 3.5 project. "Internal error"
**Actual Behavior**:
If this option is enabled debugging works as expected. Without it can't debug legacy project.
More information on:
https://stackoverflow.com/questions/34545354/internal-error-in-the-expression-evaluator</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35002</IssueID>
    <RepoID>1</RepoID>
    <Title>"Replace method with property" replaces non-invoked method with property</Title>
    <Description>16.0.1

Original code:

```
delegate int Mdelegate();

class C
{
    int GetP() =&gt; 0;

    void M()
    {
        Mdelegate del = new Mdelegate(GetP);
    }
}
```

Use Replace 'GetP' with property refactoring.

Refactored Code:

```
delegate int Mdelegate();

class C
{
    int P =&gt; 0;

    void M()
    {
        Mdelegate del = new Mdelegate(P);
    }
}
```

Note that refactored code will not compile as a property can not be used in place of a method in the delegate.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35001</IssueID>
    <RepoID>1</RepoID>
    <Title>Error for `typeof(T?)` when `T` is a reference type</Title>
    <Description>Fixes #29894</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35000</IssueID>
    <RepoID>1</RepoID>
    <Title>Collapse section hotkey collapses entire region if method signature has newlines</Title>
    <Description>VSF_TYPE_MARKDOWNUsing the &amp;quot;Ctrl+M, M&amp;quot; Hotkey, if the caret is on method Foo it will correctly collapse the selection. But with the caret on method Bar it will collapse the entire region.
```
# region MyRegion
public void Foo(int param1, int param2) 
{
    string foo = &amp;quot;foo&amp;quot;;
}

public void Bar(
    int param1,
    int param2)
{
    string bar = &amp;quot;bar&amp;quot;;
} 

#endregion
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/532398/collapse-section-hotkey-collapses-entire-region-if.html
VSTS ticketId: 847516_
_These are the original issue comments:_

Visual Studio Feedback System on 4/15/2019, 02:44 AM (15 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34999</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34998</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34997</IssueID>
    <RepoID>1</RepoID>
    <Title>Bugfix fix: "Replace method with property" removes a space</Title>
    <Description>Git Issue: https://github.com/dotnet/roslyn/issues/31830

Issue: Trivia after the bracket was not being considered as part of the rewrite.

Solution: Updated code to consider trivia after the bracket to be the trailing trivia.

Testing:
- Tested with different trivia: spaces, tabs, comments.
- Added new unit test
- Ran all relevant unit tests</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34996</IssueID>
    <RepoID>1</RepoID>
    <Title>Handly dynamic null checks against literal null</Title>
    <Description>Fixes #30939</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34995</IssueID>
    <RepoID>1</RepoID>
    <Title>Create a context object to handle parameters passed in methods of AbstractCSharpCompletionProviderTests</Title>
    <Description>Defining the whole list of parameters at each method is inefficient: 
```
string code, int position,
            string expectedItemOrNull, string expectedDescriptionOrNull,
            SourceCodeKind sourceCodeKind, bool usePreviousCharAsTrigger, bool checkForAbsence,
            int? glyph, int? matchPriority, bool? hasSuggestionItem, string displayTextSuffix)
            int? glyph, int? matchPriority, bool? hasSuggestionItem, string displayTextSuffix,
            List&lt;CompletionItemFilter&gt; matchingFilters, bool targetTypedExperimentEnabled
```
Correcting the list of parameters is painful. We should create a container to store them all.</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34994</IssueID>
    <RepoID>1</RepoID>
    <Title>Make VisualStudioMefHostServices public</Title>
    <Description>This class is simple and currently needed by Live Share. Let's make it public.</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34993</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify the results of nullable analysis</Title>
    <Description>Currently, we are not running `NullableWalker.DebugVerifier` in all cases when we run the walker. We should enable this pass, and always verify the results regardless of language version. Currently, we gate it on whether or not nullable analysis should be enabled on the Compilation.</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34992</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve IDE0052 diagnostic message for properties with used setter bu…</Title>
    <Description>…t unused getter

Fixes #33994</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34991</IssueID>
    <RepoID>1</RepoID>
    <Title>Use original definition symbol for fetching control flow graph of gen…</Title>
    <Description>…eric local functions.

Fixes #34301</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34990</IssueID>
    <RepoID>1</RepoID>
    <Title>Change name 'Basic' to 'Visual Basic' in Tools Options</Title>
    <Description>I've noticed users mistaking the 'Basic' Text Editor Tools Options to mean general .NET settings as opposed to 'Visual Basic' specific settings multiple times. Can we rename this to 'Visual Basic' to reduce confusion for new users? It's also doesn't follow brand guidelines for the language.

![image](https://user-images.githubusercontent.com/8293542/56166199-d0d09680-5f89-11e9-8435-57c36e586b3a.png)
![image](https://user-images.githubusercontent.com/8293542/56166253-fe1d4480-5f89-11e9-9417-eda5c74fe7b8.png)


</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34989</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement `where T: class` and `where T: struct` for overrides and implementations</Title>
    <Description>https://github.com/dotnet/roslyn/issues/34798#issuecomment-483414230</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34988</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex Completion + Async Completion = Failure to trigger on `[` in VB</Title>
    <Description>Fix https://github.com/dotnet/roslyn/issues/33852</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34987</IssueID>
    <RepoID>1</RepoID>
    <Title>FailFast in HostWorkspaceServicesExtensions.CreateContentTypeMap: An item with the same key has already been added</Title>
    <Description>Observed in integration tests.

```
Event Time (UTC): 4/13/2019 1:38:38 AM
Event ID: 1025
Data: Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.ArgumentException: An item with the same key has already been added.
   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)
   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)
   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector, IEqualityComparer`1 comparer)
   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector)
   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.CreateContentTypeMap(HostWorkspaceServices hostWorkspaceServices)
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(TKey key, CreateValueCallback createValueCallback)
   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.GetDefaultContentTypeName(HostWorkspaceServices workspaceServices, String language)
   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.LanguageMatches(String language, IContentType contentType, HostWorkspaceServices workspaceServices)
   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.GetLanguageServices(HostWorkspaceServices workspaceServices, IContentType contentType)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.GetTags(NormalizedSnapshotSpanCollection spans)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.Tagger.GetTags(NormalizedSnapshotSpanCollection spans)
   at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.&lt;GetTagsForBuffer&gt;d__46.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Microsoft.VisualStudio.IntegrationTest.Setup.TestExtensionErrorHandler.HandleError(System.Object, System.Exception)
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.HandleException(System.Object, System.Exception)
   at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1+&lt;GetTagsForBuffer&gt;d__46[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at Microsoft.VisualStudio.Text.Classification.Implementation.ClassifierAggregator.InternalGetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan, System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.Text.Tagging.IMappingTagSpan`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;&gt;)
   at Microsoft.VisualStudio.Text.Classification.Implementation.ClassifierAggregator.GetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)
   at Microsoft.VisualStudio.Text.Formatting.Implementation.NormalizedSpanGenerator.CreateClassifiedRuns(Microsoft.VisualStudio.Text.SnapshotSpan, Microsoft.VisualStudio.Text.Classification.IAccurateClassifier, Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)
   at Microsoft.VisualStudio.Text.Formatting.Implementation.NormalizedSpanGenerator.Create(Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection, Microsoft.VisualStudio.Text.ITextSnapshot, Microsoft.VisualStudio.Text.Classification.IAccurateClassifier, Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)
   at Microsoft.VisualStudio.Text.Formatting.Implementation.FormattedLineSource.FormatLineInVisualBuffer(Microsoft.VisualStudio.Text.ITextSnapshotLine, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)
   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.FormatSnapshotLine(Microsoft.VisualStudio.Text.ITextSnapshotLine, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)
   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView+LayoutLineCache.DoAnchorFormat(Microsoft.VisualStudio.Text.SnapshotPoint, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)
   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.DoAnchorLayout(LayoutDescription, Microsoft.VisualStudio.Text.SnapshotPoint, Double, Double, Microsoft.VisualStudio.Text.Editor.ViewRelativePosition, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)
   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.PerformLayout(Microsoft.VisualStudio.Text.ITextSnapshot, Microsoft.VisualStudio.Text.ITextSnapshot, Microsoft.VisualStudio.Text.SnapshotPoint, Double, Microsoft.VisualStudio.Text.Editor.ViewRelativePosition, Double, Double, Boolean, System.Nullable`1&lt;System.Threading.CancellationToken&gt;)
   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.Initialize()
   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextEditorFactoryService.InitializeTextView(Microsoft.VisualStudio.Text.Editor.IWpfTextView)
   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Init_InitializeWpfTextView()
   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindowPane.&lt;InitializeDifferenceViewer&gt;b__40_0(Microsoft.VisualStudio.Text.Differencing.IDifferenceTextViewModel, Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet, Microsoft.VisualStudio.Text.Editor.IEditorOptions, System.Windows.FrameworkElement ByRef, Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost ByRef)
   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.EnsureRightHost()
   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.GetHostForViewMode(Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode)
   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.UpdateVisual()
   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.Initialize(Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer, Microsoft.VisualStudio.Text.Differencing.CreateTextViewHostCallback, Microsoft.VisualStudio.Text.Editor.IEditorOptions)
   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindowPane.InitializeDifferenceViewer()
   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindowPane.&lt;CreateView&gt;b__33_0()
   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Init_OnActivation()
   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.PreOuterQueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[])
   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindow.QueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[], IntPtr)
   at Microsoft.VisualStudio.Platform.WindowManagement.DocumentObjectSite.QueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[], IntPtr)
   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.QueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[], IntPtr)
   at Microsoft.Internal.VisualStudio.Shell.Interop.IVsTrackSelectionExPrivate.Register()
   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.ConnectSelectionContext()
   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Activate()
   at Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService.viewManager_ActiveViewChanged(System.Object, Microsoft.VisualStudio.PlatformUI.Shell.ActiveViewChangedEventArgs)
   at System.EventHandler`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Object, System.__Canon)
   at Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.EventHandler`1&lt;System.__Canon&gt;, System.Object, System.__Canon)
   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager.SetActiveView(Microsoft.VisualStudio.PlatformUI.Shell.View, Microsoft.VisualStudio.PlatformUI.Shell.ActivationType)
   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager.ActivateViewFromTabControl(System.Windows.Controls.TabControl, Microsoft.VisualStudio.PlatformUI.Shell.ActivationType)
   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager.OnTabControlSelectionChanged(System.Object, System.Windows.Controls.SelectionChangedEventArgs)
   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager+&lt;&gt;c.&lt;.cctor&gt;b__24_27(System.Object, System.Windows.Controls.SelectionChangedEventArgs)
   at System.Windows.Controls.SelectionChangedEventArgs.InvokeEventHandler(System.Delegate, System.Object)
   at System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate, System.Object)
   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(System.Object, System.Windows.RoutedEventArgs)
   at System.Windows.EventRoute.InvokeHandlersImpl(System.Object, System.Windows.RoutedEventArgs, Boolean)
   at System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject, System.Windows.RoutedEventArgs)
   at System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
   at System.Windows.Controls.TabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)
   at Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)
   at System.Windows.Controls.Primitives.Selector.InvokeSelectionChanged(System.Collections.Generic.List`1&lt;ItemInfo&gt;, System.Collections.Generic.List`1&lt;ItemInfo&gt;)
   at System.Windows.Controls.Primitives.Selector+SelectionChanger.End()
   at System.Windows.Controls.Primitives.Selector+SelectionChanger.SelectJustThisItem(ItemInfo, Boolean)
   at System.Windows.Controls.Primitives.Selector.OnSelectedItemChanged(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex, System.Windows.DependencyProperty, System.Windows.PropertyMetadata, System.Windows.EffectiveValueEntry, System.Windows.EffectiveValueEntry ByRef, Boolean, Boolean, System.Windows.OperationType)
   at System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty, Boolean)
   at System.Windows.Data.BindingExpressionBase.Invalidate(Boolean)
   at System.Windows.Data.BindingExpression.TransferValue(System.Object, Boolean)
   at System.Windows.Data.BindingExpression.ScheduleTransfer(Boolean)
   at MS.Internal.Data.ClrBindingWorker.NewValueAvailable(Boolean, Boolean, Boolean)
   at MS.Internal.Data.PropertyPathWorker.UpdateSourceValueState(Int32, System.ComponentModel.ICollectionView, System.Object, Boolean)
   at MS.Internal.Data.PropertyPathWorker.OnDependencyPropertyChanged(System.Windows.DependencyObject, System.Windows.DependencyProperty, Boolean)
   at MS.Internal.Data.ClrBindingWorker.OnSourceInvalidation(System.Windows.DependencyObject, System.Windows.DependencyProperty, Boolean)
   at System.Windows.Data.BindingExpression.HandlePropertyInvalidation(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.Data.BindingExpressionBase.OnPropertyInvalidation(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.Data.BindingExpression.OnPropertyInvalidation(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.DependentList.InvalidateDependents(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex, System.Windows.DependencyProperty, System.Windows.PropertyMetadata, System.Windows.EffectiveValueEntry, System.Windows.EffectiveValueEntry ByRef, Boolean, Boolean, System.Windows.OperationType)
   at System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty, System.Object, System.Windows.PropertyMetadata, Boolean, Boolean, System.Windows.OperationType, Boolean)
   at Microsoft.VisualStudio.PlatformUI.Shell.ViewElement.UpdateParentSelectedElement()
   at Microsoft.VisualStudio.PlatformUI.Shell.View.OnIsSelectedChanged()
   at Microsoft.VisualStudio.PlatformUI.Shell.ViewElement.OnIsSelectedChanged(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs)
   at System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex, System.Windows.DependencyProperty, System.Windows.PropertyMetadata, System.Windows.EffectiveValueEntry, System.Windows.EffectiveValueEntry ByRef, Boolean, Boolean, System.Windows.OperationType)
   at System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty, System.Object, System.Windows.PropertyMetadata, Boolean, Boolean, System.Windows.OperationType, Boolean)
   at Microsoft.VisualStudio.PlatformUI.Shell.ViewElement.set_IsSelected(Boolean)
   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.ShowInternal(ShowFlags)
   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.&lt;Show&gt;b__506_0()
   at Microsoft.VisualStudio.ErrorHandler.CallWithCOMConvention(System.Func`1&lt;Int32&gt;, Boolean, Boolean)
   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Show()
   at Microsoft.VisualStudio.Platform.WindowManagement.DTE.Window.set_Visible(Boolean)
   at Microsoft.VisualStudio.Platform.WindowManagement.DTE.WindowBase+&lt;&gt;c__DisplayClass69_0.&lt;set_Visible&gt;b__0()
   at Microsoft.VisualStudio.Shell.ThreadHelper.Invoke[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Func`1&lt;Boolean&gt;)
   at Microsoft.VisualStudio.Platform.WindowManagement.DTE.WindowBase.set_Visible(Boolean)
   at Microsoft.VisualStudio.TemplateWizard.Wizard.OpenNotedItems(System.String, System.Collections.Generic.List`1&lt;WizardExtension&gt;, EnvDTE.Project)
   at Microsoft.VisualStudio.TemplateWizard.Wizard.Execute(System.Object, Int32, System.Object[] ByRef, System.Object[] ByRef, EnvDTE.wizardResult ByRef)
```</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34986</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide an extension point to disable IDE0051 on selected members</Title>
    <Description>We have private methods in our codebase that trigger an IDE0051, because there are no references visible to the analyzer.

These methods get called by reflection and therefore shouldn't be removed. They are all decorated with a custom attribute. 

I found #31036 wich adds a list of attributes that disable IDE0051 on selected members.

My suggestion is to make these list extensible bei either an attribute or a marker interface to decorate custom attributes. Something like

```c#
[
    IndicatesUsage
]
public sealed class MyAttribute : Attribute
{}
```
or

```c#
public sealed class MyAttribute : Attribute, IUsageIndicator
{}
```
Members decorated with such an attribute should not trigger IDE0051:

```c#
[
    MyAttribute
]
private void GetsMagicallyCalled()
{}
```
This would enable library authors to prevent false positives for users of their libraries.

**Version Used**: 
VS2019

</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34985</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn fails to warn about NullReferenceException when there are multiple implementations of an interface with different type arguments</Title>
    <Description>**Version Used**: 

Branch master (12 Apr 2019)
Latest commit 5a1ddd by Heejae Chang:
removed duplicated entry for ExternalAccess.FSharp (#34938)

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
class A { }
class B : A { }
class C : A { }

interface D&lt;out T&gt;
{
    T GetT();
}

class E : D&lt;B?&gt;, D&lt;C&gt;
{
  B? D&lt;B?&gt;.GetT() =&gt; null;
  C D&lt;C&gt;.GetT() =&gt; new C();
}

class Test
{
    public static void Main()
    {
        var e = new E();
        D&lt;A&gt; da = e;
        A a = da.GetT();
        a.ToString();
    }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxAgrgOyQExAagB8BiTdAG3ImHLgAI5NraBYAKAAEAmOgQToDedAL7tudAEJ0QfQSLE8AwtNlDRbdgEtM8BADMIAY3oARADwB7dDDoAVAHzsB7Oq7t0A4nBi2AFAEoAbnZ1BToAURVzCQB+eyQ6c0VHNmc2V1jEs1j7ADovHwC6AF57OjJKYPS6ZSS8gr9/ErLMOAB3GoCq0M4eWzhYJxc3DgBmOg4ARgA2CYAWOgBZCG0A4dc0ty26ADcIBAYS8vaIrvXt814ynAgjuCrtt35b4rob/O9Gh8e6CFzbCwAZRgCG0AHMztVXOphEA===

**Expected Behavior**:

Warning on conversion from `E` to `D&lt;A&gt;` since annotations on the nullable reference types do not match.

**Actual Behavior**:
No warnings. The program crashes at runtime with a `NullReferenceException`.

**Notes**
Note that Roslyn will emit a warning for this conversion if `E` implements `D&lt;C?&gt;` instead of `D&lt;C&gt;`. It seems that it currently only warns when _all_ possible implementations of `D&lt;A&gt;` implement it with nullable annotations whereas at runtime you'll get a specific one - `D&lt;B?&gt;` in the code above.
It seems that Roslyn should either emit a warning if _any_ of possible implementations' nullability does not match or check which implementation will actually be used and check its nullability - currently the implementation of `GetT` depends on the order the interfaces are specified in the declaration of `E`</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34984</IssueID>
    <RepoID>1</RepoID>
    <Title>ExtractMethodCodeRefactoringProvider throws InvalidOperationException on highlighting non-existent property</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. Highlight between $$

``` C#
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

using System;
using System.Collections.Generic;

namespace Microsoft.VisualStudio.ProjectSystem.VS.NuGet
{
    internal static class ImmutablePropertyCollectionEqualityComparer
    {
        public static bool AreUnorderedEqual&lt;T&gt;(ImmutablePropertyCollection&lt;T&gt; x, ImmutablePropertyCollection&lt;T&gt; y, IEqualityComparer&lt;T&gt; comparer)
            where T : class
        {
            Requires.NotNull(x, nameof(x));
            Requires.NotNull(y, nameof(y));

            if (x.Count != y.Count)
                return false;

            if (x.Count == 0)
                return true;

            foreach (T xItem in x.$$ToolReferences$$)
            {
                IVsReferenceItem yReference = y.ToolReferences.Item(xItem.Name);
                if (yReference == null)
                    return false;

                if (!ReferenceItemEqualityComparer.Instance.Equals(xReference, yReference))
                    return false;
            }
        }
    }
}

```
```
System.InvalidOperationException : Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'
   at Microsoft.CodeAnalysis.CSharp.ConversionKindExtensions.IsImplicitConversion(ConversionKind conversionKind)
   at Microsoft.CodeAnalysis.CSharp.Conversion.get_IsExplicit()
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ConversionsAreCompatible(Conversion originalConversion,Conversion newConversion)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ForEachConversionsAreCompatible(SemanticModel originalModel,CommonForEachStatementSyntax originalForEach,SemanticModel newModel,CommonForEachStatementSyntax newForEach)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement,TForEachStatementSyntax newForEachStatement)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemanticsForNode(SyntaxNode currentOriginalNode,SyntaxNode currentReplacedNode,SyntaxNode previousOriginalNode,SyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode,SyntaxNode currentReplacedNode,SyntaxNode originalRoot,Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(NameSyntax name,TypeSyntax reducedName,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,ExpressionSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyExpression[TExpression](TExpression expression,SyntaxNode newNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitGenericName(GenericNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachStatement(ForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;&gt;c__DisplayClass10_1.&lt;ReduceAsync&gt;b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```
</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34983</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete Statement on incomplete code places semicolon in incorrect location</Title>
    <Description>When Complete Statement is invoked in the following case, the incomplete code is mistakenly considered an ElementAccessExpression that includes `[Test]`.  The semicolon is then placed after the attribute instead of after the field declaration. 

```csharp
using System;
internal class TestMethodAttribute : Attribute
{
    readonly int i = Foo(3,4$$)

    [Test]
}
```

Expected:
semicolon to be placed after `Foo(3,4)`

Actual:
semicolon is placed after `[Test]`

![image](https://user-images.githubusercontent.com/25776963/56096145-3002ae00-5e99-11e9-8a94-83ca3092e66e.png)
</Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34982</IssueID>
    <RepoID>1</RepoID>
    <Title>No nullable warning issued for null event invocation</Title>
    <Description>**Version Used**: 
3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40

**Steps to Reproduce**:
```C#
#nullable enable
using System;

public class Program
{
    static void Main()
    {
        var p = new Program();
        p.MyEvent(p, EventArgs.Empty);
    }

    public event EventHandler MyEvent;
}
```

No warning is issued here, but it will null ref.

cc: @dotnet/nullablefc </Description>
    <CreatedDate>15/04/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34981</IssueID>
    <RepoID>1</RepoID>
    <Title>Show unused non-private type members when solution-wide analysis is off</Title>
    <Description>Customer Request Copying Here

&gt;Show unused non-private type members when solution-wide analysis is off. See how Resharper highlights the field UnusedMember but Visual Studio does not. 

**Expected Behavior**:

![Untitled](https://user-images.githubusercontent.com/46729679/56097955-c0e48400-5eaf-11e9-8830-ee80f876af7d.png)

**Actual Behavior**:

![Capture2](https://user-images.githubusercontent.com/46729679/56098010-78799600-5eb0-11e9-96c5-162a8f617e42.png)</Description>
    <CreatedDate>14/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34980</IssueID>
    <RepoID>1</RepoID>
    <Title>Crashes with NullReferenceException at `Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionSlow`</Title>
    <Description>**Version Used**: 
VS2019 16.1.0 Preview1/16.0.0 Preview5
C# Tools   3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40/3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8
Microsoft.CodeAnalysis.Workspaces.ni.dll: 3.100.19.17205

That doesn't happen in roslyn 2.9.0(test with sharplab)

**Steps to Reproduce**:
&lt;del&gt;I will try to make an simple reproduce latter.&lt;/del&gt;
Edit or compile the below code.

Just see
https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEAMACFBGA3AWACgiUBmDCYWBCAYxiwCYMBZATwFEAPABwTihQAlgHsAdgB4AKgD4iAbyIZlWcjgBsrTr36DRk2RgDyPbAAoAlBnlYA7BjEBXADbPcGAL5KVZJsdPcfALC4hggWoG6IQZyhCrW3spexHE+5CIAbogIQgAmcFjYmFIiAMowOWIA5paJCanxykIAZhhmMAAWQlAY3f7YFgD0g1JsPAUABp19fSbYExgdiHB18YoNjfEo9gBEczsEG/HJm8rbGHudiAd1yR5AA===

Or
1. Copy and paste the below code
```cs
//public class Class1&lt;T&gt; {//Also happen with class Class1&lt;T&gt;{class MyExpression{MyExpression Op1(){} string ToString(){...}}}
    public abstract class MyExpression&lt;T&gt;
    {
        public static MyExpression&lt;T&gt; Op1() { return null; }
        public class Op1Expression : MyExpression&lt;T&gt;
        {
        }

        public override string ToString()
        {
            if ()//Type `this is Op1` here
            {
                return "Op1";
            }
            return "Other";
        }
    }
//}
```
2. Type `this is Op1` at the line with `if`(want to type `this is Op1Expression`, but unable to finish it)

An simpler version:
```cs
public class M1 {
    public bool M&lt;T&gt;(T a) {
        return a is M;
    }
}
```
```cs
public class M1 {
    public void MethodCase2&lt;T&gt;(T t) {
        switch(t){case ToString: break;}
    }
}
```


**Expected Behavior**:
1. Report an compile error as it does in 2.x instead of crashes/FailFast;
***Note:*** This doesn't crash without generic type.
2. &lt;del&gt;Maybe autocomplete shouldn't list methods here&lt;/del&gt; It is not important.


**Actual Behavior**:
```
Application: devenv.exe
Framework Version: v4.0.30319
Explanation: The application requests termination of the process via System.Environment.FailFast(string message).
Message: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionSlow(TypeSymbol source, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyBuiltInConversion(TypeSymbol source, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.ExpressionOfTypeMatchesPatternType(Conversions conversions, TypeSymbol expressionType, TypeSymbol patternType, HashSet`1&amp; useSiteDiagnostics, Conversion&amp; conversion, ConstantValue operandConstantValue, Boolean operandCouldBeNull)
   at Microsoft.CodeAnalysis.CSharp.Binder.ConvertPatternExpression(TypeSymbol inputType, CSharpSyntaxNode node, BoundExpression expression, ConstantValue&amp; constantValue, Boolean hasErrors, DiagnosticBag diagnostics)

//The below stacktrace is different when edit in VS/VSCode or build.

   at Microsoft.CodeAnalysis.CSharp.Binder.BindConstantPattern(SyntaxNode node, TypeSymbol inputType, ExpressionSyntax patternExpression, Boolean hasErrors, DiagnosticBag diagnostics, Boolean&amp; wasExpression)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIsOperator(BinaryExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBooleanExpression(ExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIfStatement(IfStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp; bindableNode, BoundNode&amp; lowestBoundNode, BoundNode&amp; highestBoundNode, BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Classification.OperatorOverloadSyntaxClassifier.AddClassifications(Workspace workspace, SyntaxNode syntax, SemanticModel semanticModel, ArrayBuilder`1 result, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ClassifyNode(SyntaxNode syntax)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ProcessNodes()
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.Classify(Workspace workspace, SemanticModel semanticModel, TextSpan textSpan, ArrayBuilder`1 list, Func`2 getNodeClassifiers, Func`2 getTokenClassifiers, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.&lt;AddSemanticClassificationsAsync&gt;d__5.MoveNext()
StackTrace:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__5.MoveNext()
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionSlow(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyBuiltInConversion(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.Binder.ExpressionOfTypeMatchesPatternType(Microsoft.CodeAnalysis.CSharp.Conversions, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Microsoft.CodeAnalysis.CSharp.Conversion ByRef, Microsoft.CodeAnalysis.ConstantValue, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.ConvertPatternExpression(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.ConstantValue ByRef, Boolean, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindConstantPattern(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Boolean, Microsoft.CodeAnalysis.DiagnosticBag, Boolean ByRef)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIsOperator(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBooleanExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel+IncrementalBinder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode ByRef, Microsoft.CodeAnalysis.CSharp.BoundNode ByRef, Microsoft.CodeAnalysis.CSharp.BoundNode ByRef, Microsoft.CodeAnalysis.CSharp.BoundNode ByRef)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, SymbolInfoOptions, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, SymbolInfoOptions, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode(Microsoft.CodeAnalysis.SyntaxNode, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Classification.OperatorOverloadSyntaxClassifier.AddClassifications(Microsoft.CodeAnalysis.Workspace, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+Worker.ClassifyNode(Microsoft.CodeAnalysis.SyntaxNode)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+Worker.ProcessNodes()
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+Worker.Classify(Microsoft.CodeAnalysis.Workspace, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.Text.TextSpan, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt;, System.Func`2&lt;Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt;, System.Func`2&lt;Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__5.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__5, Microsoft.CodeAnalysis.Workspaces, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;AddSemanticClassificationsAsync&gt;d__5 ByRef)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Func`2&lt;Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt;, System.Func`2&lt;Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__2.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Classification.AbstractClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__2, Microsoft.CodeAnalysis.Workspaces, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;AddSemanticClassificationsAsync&gt;d__2 ByRef)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.WorkspaceClassificationDelegationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Classification.IClassificationService, Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ClassifySpansAsync&gt;d__2`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ClassifySpansAsync&gt;d__2`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ClassifySpansAsync&gt;d__2`1&lt;System.__Canon&gt; ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ClassifySpansAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IClassificationDelegationService`1&lt;System.__Canon&gt;, System.__Canon, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;TryClassifyContainingMemberSpan&gt;d__1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;TryClassifyContainingMemberSpan&gt;d__1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;TryClassifyContainingMemberSpan&gt;d__1`1&lt;System.__Canon&gt; ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.TryClassifyContainingMemberSpan[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IClassificationDelegationService`1&lt;System.__Canon&gt;, System.__Canon, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ProduceTagsAsync&gt;d__0`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ProduceTagsAsync&gt;d__0`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ProduceTagsAsync&gt;d__0`1&lt;System.__Canon&gt; ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ProduceTagsAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IClassificationDelegationService`1&lt;System.__Canon&gt;, System.__Canon, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationViewTaggerProvider.ProduceTagsAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IClassificationDelegationService`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationViewTaggerProvider.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&lt;RecomputeTagsAsync&gt;d__70[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&lt;RecomputeTagsAsync&gt;d__70[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;RecomputeTagsAsync&gt;d__70&lt;System.__Canon&gt; ByRef)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].RecomputeTagsAsync(System.Object, System.Nullable`1&lt;Microsoft.VisualStudio.Text.SnapshotPoint&gt;, System.Nullable`1&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan&gt;, System.Collections.Immutable.ImmutableDictionary`2&lt;Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree`1&lt;System.__Canon&gt;&gt;, Boolean, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&lt;&gt;c__DisplayClass63_1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;RecomputeTagsForeground&gt;b__0(System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Shared.Threading.AsynchronousSerialWorkQueue+&lt;&gt;c__DisplayClass12_0.&lt;EnqueueBackgroundTask&gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```</Description>
    <CreatedDate>14/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34979</IssueID>
    <RepoID>1</RepoID>
    <Title>Open EmbeddedLanguages for public consumption</Title>
    <Description>I'd like to hook into the Regex language service to support colors and brace matching (and completion if possible). However, all the types and interfaces are marked `internal`, so even though we have IVTs with F#, we can't access these things.</Description>
    <CreatedDate>14/04/2019</CreatedDate>
    <ClosedDate>14/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34978</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix bootstrap on Linux/Mac</Title>
    <Description>There are two problems here: in order for the bootstrap to change from the toolset compiler to the bootstrap compiler we need to re-run restore, which doesn't happen by default, and the 'quiet restore' function seems to cause node reuse so the MSBuild task doesn't get reloaded. Apparently NuGet has decreased noisiness of restore anyway, so it's not useful anymore.</Description>
    <CreatedDate>13/04/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34977</IssueID>
    <RepoID>1</RepoID>
    <Title>Undocumented operator '!.'</Title>
    <Description>**Version Used**: 
dotnet 3.0.100-preview-010184 with VS 16.1 Preview 1
**Steps to Reproduce**:

1. 
```csharp
using System;

class A {
        public bool? c { get; set; }
}

public class Test
{
        public static void Main()
        {
                var a = new A() {
                        c = true
                };

                Console.WriteLine(a!.c);
        }
}
```
2. `dotnet run`
3. ???

**Expected Behavior**:
Not sure
**Actual Behavior**:
Nothing changes if I type `a.c`. The `!.` operator is not listed in [the list of operators](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/)</Description>
    <CreatedDate>13/04/2019</CreatedDate>
    <ClosedDate>13/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34976</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable warning for cast through object?</Title>
    <Description>Version used:
Today's master

Repro:
```C#
#nullable enable
using System;
class Program
{
    public static void Main()
    {
        bool b1 = true;
        bool b2 = (bool)(object?)b1; // CS8605: Unboxing a possibly null value
        Console.WriteLine(b2);
    }
}
```

cc: @dotnet/nullablefc</Description>
    <CreatedDate>13/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34975</IssueID>
    <RepoID>1</RepoID>
    <Title>Undo "restores" garbled code</Title>
    <Description>**Version Used**: Visual Studio Professional 2017 v15.9.11 (reproducible also in v15.9.8, but not in v15.9.7)

**Background**
Deleting several lines from `.cs` or `.cshtml` files (likely happens for more types) and trying to restore them via undo feature.

**Steps to Reproduce**:
1. Open a larger solution
Suggestion: https://github.com/aspnet/AspNetWebStack.git branch v3.2.7, Runtime.sln
2. Open a file where Visual Studio more likely tends to slow down (Razor)
Suggestion: `src\Microsoft.Web.Helpers\Facebook.cshtml`
3. Go to the middle of the file and press and hold CTRL+X to cut lines or CTRL+L to delete them
Suggestion: 200+ lines
4. Restore via CTRL+Z by holding until nothing happens anymore
-&gt; The file name won't have the asterisk anymore, but still be different from the previously version
5. Diff to the repository version
-&gt; You should see a difference
6. If not yet reproduced, repeat the previous steps (it will get slower each time, thus more likely to happen)

**Expected Behavior**:
The file looks exactly like before.

**Actual Behavior**:
The lines are not restored correctly; often lines are missing.
If you modified the file before, rarely even text fragments are "restored" at positions where they never were before.

![image](https://user-images.githubusercontent.com/615657/56076782-2c0d5800-5dd5-11e9-8559-f7f07b6afa0f.png)

-&gt; Any unsaved previous code is lost or garbage, or at worst it might even be noticed too late that parts are wrong.

**Additional Notes**:
This might be related to the small hangs one can notice during deletion.
The problems seems to be intensified with ReSharper turned on ("We've noticed that extension 'JetBrains ReSharper Ultimate 2018.3.4' is slowing typing performance."), but also happens without.</Description>
    <CreatedDate>13/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34974</IssueID>
    <RepoID>1</RepoID>
    <Title>Ignore completion item span</Title>
    <Description>Followup to https://github.com/dotnet/roslyn/pull/34952

This is currently mutable, which makes sharing completion items hard.  Now, instead, we just track the completion span we are told on the completion context and pass that along at the end when making changes. That helps ensure completion items can be safely shared across invocations.</Description>
    <CreatedDate>13/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34973</IssueID>
    <RepoID>1</RepoID>
    <Title>Correct nullability analysis in conditional access</Title>
    <Description>Fixes #29956</Description>
    <CreatedDate>13/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34972</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/04/2019</CreatedDate>
    <ClosedDate>13/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34971</IssueID>
    <RepoID>1</RepoID>
    <Title>Add unit test for F# Glyph mapping</Title>
    <Description>We need to add a unit test to ensure that **Roslyn to FSharp Glyph** mapping works when this PR is merged: https://github.com/dotnet/roslyn/pull/34945</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34970</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34969</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>13/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34968</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>13/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34967</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>13/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34966</IssueID>
    <RepoID>1</RepoID>
    <Title>Add IVTs to 16.1 version of RemoteLS</Title>
    <Description>The 16.1 edition of [this PR](https://github.com/dotnet/roslyn/commit/260ed1e4ce1cc6a269aae94b09ed6fedf1a09844).</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34965</IssueID>
    <RepoID>1</RepoID>
    <Title>Offer 'convert concatenated to interpolated string' refactoring when inside an interpolated string</Title>
    <Description>Fixes #33865</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34964</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow the simplification of using directives where the global alias is specified</Title>
    <Description>This PR is being created to simplify https://github.com/dotnet/roslyn/pull/30760

UsingDirectives that are expanded using `Simplifier.Expand` are given the `global::` alias which is not removed when calling `Simplifier.ReduceAsync`.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34963</IssueID>
    <RepoID>1</RepoID>
    <Title>Create mapping from NotificationOption to EditorConfig severity string.</Title>
    <Description>This PR is being created to simplify #30760

`notificationOption.ToString().ToLowerInvariant();` would return a localized string instead of the correct severity string.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34962</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE005 "Fix formatting" does a poor job with a switch expression as the body of an expression-bodied method</Title>
    <Description>Given this method

``` c#
        public static NullableAnnotation EnsureCompatible(this NullableAnnotation a, NullableAnnotation b) =&gt;
            (a, b) switch
            {
                (NullableAnnotation.Oblivious, _) =&gt; b,
                (_, NullableAnnotation.Oblivious) =&gt; a,
                _ =&gt; a &lt; b ? a : b,
            };
```

The IDE005 "Fix formatting" diagnostic wants the body of the switch expression (curly braces and what is between them) to be less indented by four spaces.  That seems wrong in this context.
</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>31/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34961</IssueID>
    <RepoID>1</RepoID>
    <Title>Quick actions and refactorings... Remove region</Title>
    <Description>&lt;p&gt;Would be nice to have the option to remove a region with a refactoring. Right now you have to delete the  #region  and #endregion  lines manually to remove them since regions are mostly considered bad practice&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/522170/quick-actions-and-refactorings-remove-region.html
VSTS ticketId: 842445_
_These are the original issue comments:_

Jane Wu [MSFT] on 4/9/2019, 02:05 AM (3 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34960</IssueID>
    <RepoID>1</RepoID>
    <Title>Reduce allocations related to SyntaxTokenList in MetadataAsSourceService</Title>
    <Description>There are a lot of usages of `new List&lt;SyntaxToken&gt;()` instead of `ArrayBuilder&lt;SyntaxToken&gt;.GetInstance()`. It would be nice to fix this up in the C# and VB MetadataAsSource implementations.

It would also be good to introduce constructor which takes `ArrayBuilder&lt;SyntaxToken&gt;` instead of `IEnumerable&lt;SyntaxToken&gt;` and reduces copying as much as possible.

See https://github.com/dotnet/roslyn/pull/34778#discussion_r272446817 and https://github.com/dotnet/roslyn/pull/34778#discussion_r274684831</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34959</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow `ignore spaces around declaration` to work when `preserve single line statements` is set to false</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/31868

**Who is impacted by this bug?**
Users who use Format Document and have these two settings in the .editorconfig
`csharp_space_around_declaration_statements = ignore`
`csharp_preserve_single_line_statements = false`

**What is the customer scenario and impact of the bug?**
If a user has these two settings in their .editorconfig:
`csharp_space_around_declaration_statements = ignore`
`csharp_preserve_single_line_statements = false`

When they **Format Document** the extra spaces around their declaration statements are removed when they should have been ignored.

**Expected**
Original spacing around the declaration statements should be left alone since user specified 
`csharp_space_around_declaration_statements = ignore`.  

Example,
```csharp
    public void FixMyType()
    {
        var     myint       = 0;
        var     myint2      = 1;
    }
```

 **Actual**
The original spacing is not maintained. It becomes,
```csharp
    public void FixMyType()
    {
        var myint = 0;
        var myint2 = 1;
    }
```

**What is the workaround?**
After using Format Document, manually redo spacing around declaration statements.

**How was the bug found?**
Developer Community issue

**If this fix is for a regression - what had regressed, when was the regression introduced, and why was the regression originally missed?**
Not a regression.  Repros in 15.9.11</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34958</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable reference on simple real-life cases</Title>
    <Description>*I've been trying out the new nullable reference features on a project which uses null references a little bit too much.*

*Here are 4 cases that I naively though would work. I hope they are useful for you as they are real-life examples. Clearly some of the examples would need a rewrite but for the feature to be widely adopted (which I hope) Roslyn will need to help on the transition path.*

*I added a comment on each to explain what behavior I expected.*

*I hope it will be useful!*

**Version Used**: 

Visual Studio 2019 16.1.0 Preview 1

**Steps to Reproduce**:

- New class library .NET Standard
- Edit .csproj to enable the feature:
```xml
  &lt;PropertyGroup&gt;
    &lt;TargetFrameworks&gt;netstandard2.0&lt;/TargetFrameworks&gt;
    &lt;LangVersion&gt;preview&lt;/LangVersion&gt;
    &lt;NullableContextOptions&gt;safeonly&lt;/NullableContextOptions&gt;
  &lt;/PropertyGroup&gt;
```
- Paste this code:

```csharp
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace TestNullableReferences
{
    public class LazyInitWithMethod
    {
        List&lt;string&gt;? _items;

        private void InitList()
        {
            _items ??= new List&lt;string&gt;();
        }

        public List&lt;string&gt; Items()
        {
            InitList();

            // I would expect no warning but I get a CS8603: Possible null reference return
            return _items;
        }
    }

    public class BadCast
    {
        public DateTime GetTime(object value)
        {
            if (value is FileInfo)
            {
                var fileInfo = value as FileInfo;
                // I would expect no warning but I get a CS8602: Dereference of a possibly null reference
                return fileInfo.CreationTime;
            }

            return DateTime.MinValue;
        }
    }

    public class LinqLambda
    {
        readonly List&lt;FileInfo&gt; _files = new List&lt;FileInfo&gt;();

        public IEnumerable&lt;FileInfo&gt; GetMatchingItems(FileInfo? item = null)
        {
            // I would expect no warning but I get a CS8602: Dereference of a possibly null reference
            return item == null ? Enumerable.Empty&lt;FileInfo&gt;() : _files.Where(x =&gt; x.FullName == item.FullName); 
        }
    }

    public class LinqFunctions
    {
        readonly List&lt;FileInfo&gt; _files = new List&lt;FileInfo&gt;();

        public FileInfo GetFiles(DateTime date)
        {
            // I would expect a warning CS8603: Possible null reference return
            return _files.FirstOrDefault(x =&gt; x.CreationTime &gt; date); 
        }
    }
}

```

</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34957</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected value 'UnsetConversionKind'</Title>
    <Description>**Version Used**: 
Visual Studio 16.1.0 Preview 1.0

**Steps to Reproduce**:
I don't have an exact case as the crash happened during rewriting some code and I haven't been able to reproduce it yet.
The code was somewhat similar to:
```
var a = new List&lt;int&gt;();
var b = new List&lt;int&gt;();

foreach ((int x, int y, int z) in
    a.Zip(
    b.Join(b,
            e =&gt; e,
            e =&gt; e,
            (s, t) =&gt; (s, t)),
    (f, g) =&gt; (f, g.s, g.t)))
{
}
```

**Expected Behavior**:
No exception.

**Actual Behavior**:
```
System.InvalidOperationException : Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'
   at Microsoft.CodeAnalysis.CSharp.ConversionKindExtensions.IsImplicitConversion(ConversionKind conversionKind)
   at Microsoft.CodeAnalysis.CSharp.Conversion.get_IsExplicit()
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ConversionsAreCompatible(Conversion originalConversion,Conversion newConversion)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ForEachConversionsAreCompatible(SemanticModel originalModel,CommonForEachStatementSyntax originalForEach,SemanticModel newModel,CommonForEachStatementSyntax newForEach)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement,TForEachStatementSyntax newForEachStatement)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemanticsForNode(SyntaxNode currentOriginalNode,SyntaxNode currentReplacedNode,SyntaxNode previousOriginalNode,SyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode,SyntaxNode currentReplacedNode,SyntaxNode originalRoot,Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(NameSyntax name,TypeSyntax reducedName,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,ExpressionSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyExpression[TExpression](TExpression expression,SyntaxNode newNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgument(ArgumentSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(ArgumentListSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachVariableStatement(ForEachVariableStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;&gt;c__DisplayClass10_1.&lt;ReduceAsync&gt;b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

It looks like https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Binder/Semantics/Conversions/ConversionKindExtensions.cs is missing a case for `UnsetConversionKind` after that enum was added in #33648.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34956</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>12/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34955</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn master | 20190412</Title>
    <Description>
    </Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34954</IssueID>
    <RepoID>1</RepoID>
    <Title>References of kind Qualify are missing method name</Title>
    <Description>**Version Used**: 
16.1.0 Preview 1.0

**Steps to Reproduce**:
```c#
public class Class1
{
    public async void Bar() =&gt; await Task.Delay(0);

    public async Task Baz() =&gt; await Task.Delay(0);
}
```

1. Find all references on `Task` 
2. Look at the "'Task' references" window.

**Expected Behavior**:
The two references of kind Qualify should both show `Task.Delay(0)`

**Actual Behavior**:
For `Bar` it only shows `Task.(0)`
![image](https://user-images.githubusercontent.com/919634/56020957-9c9a7300-5d08-11e9-934c-7263182e8445.png)
</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34952</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove 'Document' from CompletionItem</Title>
    <Description>As part of teh "show completion for items you don't have usings for" feature, we'd like to be able to cache CompletionItems so we don't have to keep recreating vast numbers of the same items over and over again.

This is slightly problematic because CompletionItems today hold onto `Document`s, and that means an entire snapshot of the world from teh past is held onto.  

This PR changes CompletionItem to be pure data, without a hard link to a potentially very expensive piece of data like `Document`.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34951</IssueID>
    <RepoID>1</RepoID>
    <Title>Creates new SyntaxNode from 3rd-party</Title>
    <Description>I have a class something like below
```cs
internal class EvaluatedArgumentListSyntax : ExpressionSyntax
{ }
```
This one won't be compiled due to errors.
Some abstract methods have `internal` access modifier, so I can't make a derived class.

https://dotnetfiddle.net/r79Jyw

</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>14/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34950</IssueID>
    <RepoID>1</RepoID>
    <Title>Errors in ErrorList pane on lines with #line pragma doesn't navigate to the source file</Title>
    <Description>**Version Used**: 
VS 16.1 Preview 1

**Steps to Reproduce**:

1. `dotnet new console`
2. Replace content of `Main` method with
```cs
        static void Main(string[] args)
        {
#line 2 "Test.txt"
            Console.WriteLin("Hello World!"); // Intentional typo to show error
#line default
        }
```
3. Create a file called `Test.txt` and put some content in it.

**Expected Behavior**:
Error shows in error list. Double clicking it navigates to `Test.txt`

**Actual Behavior**:
Error shows in error list. Double clicking it navigates to `Program.cs` or does nothing.
This happens on both live and build errors

Note: Putting a breakpoint in `Test.txt` and F5ing correctly hits that breakpoint. So it's not a file path issue.

cc @heejaechang </Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34949</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34948</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>12/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34947</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>12/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34946</IssueID>
    <RepoID>1</RepoID>
    <Title>It looks like TupleTypeSymbol.WithUnderlyingType always creates a new instance even when the new type is the same as the old one</Title>
    <Description>This can cause extra allocations for otherwise insignificant nullable transform.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34945</IssueID>
    <RepoID>1</RepoID>
    <Title>FSharp Shim - First Phase</Title>
    <Description>This needs to be inserted in conjunction with this PR: https://github.com/Microsoft/visualfsharp/pull/6498</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34944</IssueID>
    <RepoID>1</RepoID>
    <Title>Combine comment/uncomment handler and toggle comment to re-use more code</Title>
    <Description>See https://github.com/dotnet/roslyn/pull/34941#discussion_r274625868
</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34943</IssueID>
    <RepoID>1</RepoID>
    <Title>Autocomplete eagerly completes before second `.` in Range declaration</Title>
    <Description>**Version Used**:  .NET Core 3.0 preview 3, with Visual Studio 2019 (16.0)

**Steps to Reproduce**:

In a C# class file:

1. Declare an array:  `var numbers = Enumerable.Range(0,100).ToArray();`
2. Start typing to get a span:  `Span&lt;int&gt; subRange = numbers[5..25];`
3. 

**Expected Behavior**: The editor realizes I'm typing a `Range` expression.

**Actual Behavior**: As soon as I type `5.`, the editor assumes I want to access a member of `System.Int32`. I end up with `numbers[5.CompareTo.25]`. 


</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34942</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected nullable warning due to null-conditional access</Title>
    <Description>**Version Used**:
3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40

**Steps to Reproduce**:
```C#
#nullable enable
using System;

public class Program
{
    static void Main()
    {
        string? value = "42";
        int count = 84;
        if (value?.Length == count)
        {
            Console.WriteLine(value.Length); // warning
        }
    }
}
```

Even though value was explicitly set to a non-null value, and even though the `if (value?.Length == count)` effectively expands to `if (value != null &amp;&amp; value.Length == count)` and we could only end up inside the `if` block if `value` is non-null, this still warns with "Possible dereference of a null reference." on `value.Length`.

Interestingly, changing the `count` to be a const makes it no longer warn:
```C#
#nullable enable
using System;

public class Program
{
    static void Main()
    {
        string? value = "42";
        const int count = 84;
        if (value?.Length == count)
        {
            Console.WriteLine(value.Length); // no warning
        }
    }
}
```

cc: @dotnet/nullablefc </Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34941</IssueID>
    <RepoID>1</RepoID>
    <Title>Add command handler and tests for toggle line comment.</Title>
    <Description>For https://github.com/dotnet/roslyn/issues/34734 

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Adding toggle line comment command handler to toggle line comments.  (pair with toggle block comment handler which is already merged).

### Bugs this fixes

#34734 

### Workarounds, if any

N/A

### Risk

Low, gated by feature flag and avoided modifying existing features.

### Performance impact

Low

### Is this a regression from a previous update?

No

### Root cause analysis

N/A

### How was the bug found?

N/A

&lt;/details&gt;</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34940</IssueID>
    <RepoID>1</RepoID>
    <Title>I open Visual Studio it shows no error but project not running and in output it shows [Failure] Could not find file . ".g.cs" files . Almost All g.cs files</Title>
    <Description>**Visual Studio 2017**: 

![error](https://user-images.githubusercontent.com/49183057/55983841-77c8e000-5cb5-11e9-8bc2-8e560b35fac0.png)

</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34939</IssueID>
    <RepoID>1</RepoID>
    <Title>Specially handle type parameters constrained to `Nullable&lt;T&gt;` in TypeSymbolExtensions.CanContainNull().</Title>
    <Description>Fixes #34679.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34938</IssueID>
    <RepoID>1</RepoID>
    <Title>removed duplicated entry for ExternalAccess.FSharp</Title>
    <Description>looks like duplicated entries are introduced by git merge from 2 different commits.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34937</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve naming of integration test runs</Title>
    <Description>### Build legs

Build leg names are shorter and clearer:

```diff
- Windows_VisualStudio_Integration_Tests debug
+ VS_Integration debug_async
```

![image](https://user-images.githubusercontent.com/1408396/55978553-a44d0f80-5c55-11e9-86ee-1b4fbe8d3f15.png) ![image](https://user-images.githubusercontent.com/1408396/55978521-939c9980-5c55-11e9-9ce4-be7bc260d9df.png)

### Artifacts

Artifacts now have the job attempt number in the name:

```diff
- Logs Debug Async 00000000.00
+ 1-Logs Debug Async 00000000.00
```

![image](https://user-images.githubusercontent.com/1408396/55993553-01a48900-5c75-11e9-999b-55b15daaa692.png)
![image](https://user-images.githubusercontent.com/1408396/55993526-f4879a00-5c74-11e9-819f-8633276def6a.png)

### Test results

Test results now show Async/Legacy instead of false/true, and have the job attempt number in the name

```diff
- Windows Visual Studio Integration Debug_false
+ 1-Integration Debug Async
```

![image](https://user-images.githubusercontent.com/1408396/55993569-0b2df100-5c75-11e9-98f5-e92802da2285.png)
![image](https://user-images.githubusercontent.com/1408396/55993507-e76aab00-5c74-11e9-830d-89ff6249147c.png)
</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34936</IssueID>
    <RepoID>1</RepoID>
    <Title>Make CommandLineProject available via NuGet</Title>
    <Description>As of Roslyn 3.0.0 NuGet family the type https://github.com/dotnet/roslyn/blob/0c47f8d51f7f6533b3045f36e63eb55b2f7647c2/src/Workspaces/Core/Desktop/Workspace/CommandLineProject.cs#L17 is not shipping via NuGet.

It is a useful type and we should find a new home for it.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34935</IssueID>
    <RepoID>1</RepoID>
    <Title>Definite assignment analysis of out parameter in short-circuit expression prevents compilation when it need not.</Title>
    <Description>**Version Used**: 
.NET Core SDK
 Version:   2.2.105
 Commit:    7cecb35b92
Roslyn C# Compiler version 2.10.0.0

**Steps to Reproduce**:

```csharp
bool DefiniteAssignmentOfOutVarInAShortCircuitedExpression(bool maybe, string maybemore)
{
  var x = maybe &amp;&amp; bool.TryParse(maybemore, out var result);
  return maybe &amp;&amp; result;
}
```

**Expected Behavior**:
Compiles without error

**Actual Behavior**:
the line `return maybe &amp;&amp; result;` is flagged with **Use of unassigned local variable**.

**Discussion**
For the error to be correct -- for `result` to be unassigned in the `return` statement --  `maybe` would have to be false in line 1 of the method, short-circuting the assignment. 
In that case, `result` will also be short circuited in the return statement and does not need to be assigned.
Replacing `&amp;&amp;` with `&amp;` resolves the error.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34934</IssueID>
    <RepoID>1</RepoID>
    <Title>Option to Debug.Assert implicitly for null-forgiveness operator?</Title>
    <Description>As we've been annotating corelib, given a case like:
```C#
_some.Method(); // warns that _some may be null
```
we've often opted to "fix" the warning by doing something like:
```C#
Debug.Assert(_some != null, nameof(_some));
_some.Method();
```
instead of:
```C#
_some!.Method();
```
so that we get better debug/checked-build validation behavior, with an unexpected null fail fasting rather than resulting in an exception that might get eaten, might be harder to diagnose the root case, etc.

But the former is also more code and more clutter for something that should never happen.

Would it be possible for the compiler to provide an option that would enable emitting a Debug.Assert when `!` is used in such situations (it would need to skip when value is known to be null, such as with the workaround for initializing fields, e.g. `private Something _some = null!;`)?  Then we could have the simpler suppression while still getting the more robust validation.

cc: @cston, @dotnet/nullablefc</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34933</IssueID>
    <RepoID>1</RepoID>
    <Title>Pattern Matching: Multiple property reads</Title>
    <Description>I understand that the number of property reads to facilitate pattern matching is undefined so that the compiler can optimize for as few reads as it can.  I was curious about the following case as the compiler emits two reads for the property `Name` although the compiler should be able to deduce that both are for the same property on the `Person` class and could theoretically optimize it down to one read:

```cs
using System;

public class Person {
    public string Name { get; set; }
}

public class Student : Person { }


public class C {
    public void M(Person p) {
        switch (p) {
            case { Name: "Bill" }:
                Console.WriteLine("Hey Bill!");
                break;
            case Student { Name: var name }:
                Console.WriteLine($"Hello student {name}!");
                break;
            case { Name: var name }:
                Console.WriteLine($"Hello non-student {name}!");
                break;
        }
    }
}
```

This results in IL that accesses `Name` twice, once for the first case and once for the second case.  I assume that this is due to the type-switch perhaps interfering with internal bookkeeping and I can't think of a reason why it would be "Correct"™ to emit the two reads.

Decompilation of the resulting IL:

```cs
public class C
{
    public void M(Person p)
    {
        if (p != null)
        {
            string name = p.Name; // read #1
            if (name == null || !(name == "Bill"))
            {
                Student student = p as Student;
                if (student != null)
                {
                    string name2 = student.Name; // read #2
                    Console.WriteLine("Hello student " + name2 + "!");
                }
                else
                {
                    Console.WriteLine("Hello non-student " + name + "!");
                }
            }
            else
            {
                Console.WriteLine("Hey Bill!");
            }
        }
    }
}
```

This would make sense if `Student` shadowed `Name`, but it doesn't and the compiler is aware of that as it emits `callvirt` calls to `Person::get_Name` both times.  If `Name` was virtual it would still only necessitate a single call.

Any particular reason for this, or is it just a case that the compiler hasn't optimized for?</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34932</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34931</IssueID>
    <RepoID>1</RepoID>
    <Title>unexpected ambiguity performing overload resolution from method group</Title>
    <Description>**Version Used**: master

**Steps to Reproduce**:

```c#
using System;
using System.Threading.Tasks;

public class C {
    public void M() {
        AcceptMethod(Foo);
        AcceptMethod(Bar);
        AcceptMethod(Bazz);
    }

    public int Foo() { return 0; }
    public void Bar() {}
    public void Bazz(string s1, String s2, int i) { }

    public static void AcceptMethod&lt;T1, T2, T3, T4, T5&gt;(Func&lt;T1, T2, T3, T4, T5, Task&lt;int&gt;&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4&gt;(Func&lt;T1, T2, T3, T4, Task&lt;int&gt;&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3&gt;(Func&lt;T1, T2, T3, Task&lt;int&gt;&gt; action) {}
    public static void AcceptMethod&lt;T1, T2&gt;(Func&lt;T1, T2, Task&lt;int&gt;&gt; action) {}
    public static void AcceptMethod&lt;T&gt;(Func&lt;T, Task&lt;int&gt;&gt; action) {}
    public static void AcceptMethod(Func&lt;Task&lt;int&gt;&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, Task&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4, T5, T6&gt;(Func&lt;T1, T2, T3, T4, T5, T6, Task&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4, T5&gt;(Func&lt;T1, T2, T3, T4, T5, Task&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4&gt;(Func&lt;T1, T2, T3, T4, Task&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3&gt;(Func&lt;T1, T2, T3, Task&gt; action) {}
    public static void AcceptMethod&lt;T1, T2&gt;(Func&lt;T1, T2, Task&gt; action) {}
    public static void AcceptMethod&lt;T&gt;(Func&lt;T, Task&gt; action) {}
    public static void AcceptMethod(Func&lt;Task&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4, T5, T6&gt;(Func&lt;T1, T2, T3, T4, T5, T6, Task&lt;int&gt;&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, int&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4, T5&gt;(Func&lt;T1, T2, T3, T4, T5, int&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4&gt;(Func&lt;T1, T2, T3, T4, int&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3&gt;(Func&lt;T1, T2, T3, int&gt; action) {}
    public static void AcceptMethod&lt;T1, T2&gt;(Func&lt;T1, T2, int&gt; action) {}
    public static void AcceptMethod&lt;T&gt;(Func&lt;T, int&gt; action) {}
    public static void AcceptMethod(Func&lt;int&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Action&lt;T1, T2, T3, T4, T5, T6, T7&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4, T5, T6&gt;(Action&lt;T1, T2, T3, T4, T5, T6&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4, T5&gt;(Action&lt;T1, T2, T3, T4, T5&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4&gt;(Action&lt;T1, T2, T3, T4&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3&gt;(Action&lt;T1, T2, T3&gt; action) {}
    public static void AcceptMethod&lt;T1, T2&gt;(Action&lt;T1, T2&gt; action) {}
    public static void AcceptMethod&lt;T&gt;(Action&lt;T&gt; action) {}
    public static void AcceptMethod(Action action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4, T5, T6&gt;(Func&lt;T1, T2, T3, T4, T5, T6, int&gt; action) {}
    public static void AcceptMethod&lt;T1, T2, T3, T4, T5, T6, T7&gt;(Func&lt;T1, T2, T3, T4, T5, T6, T7, Task&lt;int&gt;&gt; action) {}
}
```

**Expected Behavior**:

Program should compile.

**Actual Behavior**:
`AcceptMethod(Bazz)` generates error:
&gt; error CS1503: Argument 1: cannot convert from 'method group' to 'Func&lt;Task&lt;int&gt;&gt;'</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34930</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect colorization / Colorization does not revert</Title>
    <Description>**Version Used**: 
Latest stable (2.0.1)

**Steps to Reproduce**:
Example: Function arguments

Define an empty-body function with at least one argument. Arguments are correctly dimmed out indicating they are not being used.

Code snip:
```
void foo(string arg1) {
  // at this point, 'arg1' is dimmed out
}
```

Now start typing any construct, but don't use the argument yet. For example, start typing "if". 

Code snip:
```
void foo(string arg1) {
  if 
  // at this point, arg1 should remain dimmed out, but it lights up
}
```

The argument(s) will light up one by one. If you have more than one argument, the more new statements you type, they will start lighting up. For example, if you have 2 arguments to foo(), arg1 will light up on the first statement/construct and arg2 on the second one. This is even though you have not yet even thought about that argument!

Now go ahead and use the argument in that statement and then edit that line of code to do something else (other than referencing that argument), you will see the argument randomly changes colorization -- sometimes it shows up dimmed out, sometimes it colorizes to say it is being used. 

**Expected Behavior**:
The arguments continue to be in the correct lighted up / colorized state. 

**Actual Behavior**:
But they are not. When you undo the operation, they do not always go back to the previous state.

</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>12/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34929</IssueID>
    <RepoID>1</RepoID>
    <Title>View issues found by a single analyzer</Title>
    <Description>[Internal Ask]
This request is from an analyzer writer. Add a "find similar issue in file" link in the (Ctrl+.) preview menu. This will open a window that returns all places where the analyzer reports an issue. You can scope it to the file, project, or solution.

**Scenario**
&gt; I wrote an infinite recursion call detection analyzer. Once I author that analyzer I need to have this window to know what cases my analyzer is catching.
</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34928</IssueID>
    <RepoID>1</RepoID>
    <Title>SetVisualStudioBootstrapperBuildArgs fails during build -restore -ci</Title>
    <Description>Clone Roslyn and run `build -restore -ci`. 

It fails with:
```
Downloading https://raw.githubusercontent.com/dotnet/roslyn/master/eng/config/PublishData.json
##vso[task.setvariable variable=VisualStudio.MajorVersion;]16
##vso[task.setvariable variable=VisualStudio.ChannelName;]int.d16.1stg
Cannot find path 'C:\roslyn\artifacts\VSSetup\Debug\Insertion' because it does not exist.
System.Management.Automation.ItemNotFoundException: Cannot find path 'C:\roslyn\artifacts\VSSetup\Debug\Insertion' because it does not exist.
   at System.Management.Automation.LocationGlobber.ExpandMshGlobPath(String path, Boolean allowNonexistingPaths, PSDriveInfo drive, ContainerCmdletProvider provider, CmdletProviderContext context)
   at System.Management.Automation.LocationGlobber.ResolveDriveQualifiedPath(String path, CmdletProviderContext context, Boolean allowNonexistingPaths, CmdletProvider&amp; providerInstance)
   at System.Management.Automation.LocationGlobber.GetGlobbedMonadPathsFromMonadPath(String path, Boolean allowNonexistingPaths, CmdletProviderContext context, CmdletProvider&amp; providerInstance)
   at System.Management.Automation.LocationGlobber.GetGlobbedProviderPathsFromMonadPath(String path, Boolean allowNonexistingPaths, CmdletProviderContext context, ProviderInfo&amp; provider, CmdletProvider&amp; providerInstance)
   at System.Management.Automation.LocationGlobber.GetChildNamesInDir(String dir, String leafElement, Boolean getAllContainers, CmdletProviderContext context, Boolean dirIsProviderPath, PSDriveInfo drive, ContainerCmdletProvider provider, String&amp; modifiedDirPath)
   at System.Management.Automation.LocationGlobber.GenerateNewPSPathsWithGlobLeaf(List`1 currentDirs, PSDriveInfo drive, String leafElement, Boolean isLastLeaf, ContainerCmdletProvider provider, CmdletProviderContext context)
   at System.Management.Automation.LocationGlobber.ExpandMshGlobPath(String path, Boolean allowNonexistingPaths, PSDriveInfo drive, ContainerCmdletProvider provider, CmdletProviderContext context)
   at System.Management.Automation.LocationGlobber.ResolveDriveQualifiedPath(String path, CmdletProviderContext context, Boolean allowNonexistingPaths, CmdletProvider&amp; providerInstance)
   at System.Management.Automation.LocationGlobber.GetGlobbedMonadPathsFromMonadPath(String path, Boolean allowNonexistingPaths, CmdletProviderContext context, CmdletProvider&amp; providerInstance)
   at System.Management.Automation.LocationGlobber.GetGlobbedProviderPathsFromMonadPath(String path, Boolean allowNonexistingPaths, CmdletProviderContext context, ProviderInfo&amp; provider, CmdletProvider&amp; providerInstance)
   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)
   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()
at SetVisualStudioBootstrapperBuildArgs, C:\roslyn\eng\build.ps1: line 331
at &lt;ScriptBlock&gt;, C:\roslyn\eng\build.ps1: line 612
at &lt;ScriptBlock&gt;, &lt;No file&gt;: line 1
```

If I'd like to just build Roslyn without insertion, it would be nice to have a command-line flag to disable calling `SetVisualStudioBootstrapperBuildArgs` here:

https://github.com/KirillOsenkov/roslyn/blob/297aaf20e69ddb60dc4756a7bcc78b419a1916b4/eng/build.ps1#L607-L609</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34927</IssueID>
    <RepoID>1</RepoID>
    <Title>Need to enable Use Preview Sdks in order to build Roslyn from command line</Title>
    <Description>Open Visual Studio 2019, Tools -&gt; Options -&gt; Projects and Solutions -&gt; .NET Core and uncheck Use Previews of the .NET Core SDKs:

![image](https://user-images.githubusercontent.com/679326/55922612-d78c9180-5bb6-11e9-8f66-2ea9da160c55.png)

(in 8.1 this will be in Tools -&gt; Options -&gt; Environment -&gt; Preview Features)

Then git clone https://github.com/dotnet/roslyn and run `build.cmd -restore`. It will fail with "Unable to find .NET Core SDK".

The checkbox to allow prerelease SDKs actually sets the contents of `%localappdata%\Microsoft\VisualStudio\16.0_1b19bc0d\sdk.txt` settings file to either:
`UsePreviews=true` or `UsePreviews=false`.
(The `1b19bc0d` part of the file path is your Visual Studio installation instance Id).

This code in the .NET Core SDK Resolver reads this flag:
https://github.com/dotnet/cli/blob/bfffcb23ba270640b355e729f36b34c04fad0121/src/Microsoft.DotNet.MSBuildSdkResolver/VSSettings.cs#L55-L60

Setting that checkbox is a prerequisite for building Roslyn and it is incredibly hard to figure out why Roslyn failed to build from the symptom.

We should either print a warning, or read that file and print a warning if it's not found or is set to false. Or maybe just write the file as part of installing the 3.0 SDK. The difficulty is in finding the VS instance id, but vswhere can provide that.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34926</IssueID>
    <RepoID>1</RepoID>
    <Title>Correctly report mismatches in foreach types</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/29971. Also updates the location of the error reporting to be the variable being iterated over, rather than the type of that variable. @dotnet/roslyn-compiler for review.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34925</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2 to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2 into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/dev16.1-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34924</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34923</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34922</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.1-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34921</IssueID>
    <RepoID>1</RepoID>
    <Title>Populate nullable state for struct members of interfaces and classes</Title>
    <Description>Consider the following:

```csharp
#nullable enable

interface I&lt;T&gt;
{
    T P { get; }
}

class C&lt;T&gt;
{
    internal T F = default!;
}

class Program
{
    static void F1&lt;T&gt;(I&lt;(T, T)&gt; i) where T : class?
    {
        var t = i.P;
        t.Item1.ToString(); // should warn
    }

    static void F2&lt;T&gt;(C&lt;(T, T)&gt; c) where T : class?
    {
        var t = c.F;
        t.Item1.ToString();// should warn
    }
}
```
We don't currently warn for either case.

A second repro is available here: https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWACg9CiAWcigYgDsBXAG3YmHbnzmbdelStgDMhAEz4AwpQDelfMvxKVxAGyFa+AGJEAPABUAfAApiYg2aNJ8RgJQn+RB/gDuAC0R8j+EFIA/GrKihQqEfgAbhAI+BD4ALwuAHQA4nAwAKJsYIgQMAD2CGYODJEqMXHASfEpMqwICAIw5RXRsfgAxrXAKQCS8GBEKUaFAMowCACWzADmpW0qAL4hymua2nqSxuaW1rb2Ti5uXj72/kFrYe0dcQnJcCMZ2bn5RSVlaxFV+DXJEHqjWazBgAyGpG+lU6PWSfTGkxm80W31WFGWQA=

</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34920</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch on enum type nested in generic type produces LangVersion error</Title>
    <Description>Fixes #34905

This change was already reviewed for dev16.1-preview2 and integrated there.  I am cherry picking it for the master branch.
</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34919</IssueID>
    <RepoID>1</RepoID>
    <Title>Multiple Ungrouped Conversions Possible in the NullableWalker</Title>
    <Description>https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker.cs#L3292-L3296

This assumes that conversions will always have been grouped. However, in field initializers for enums, this can be not the case:

```C#
enum E1 : byte
{
    A1
}
enum E2
{
    A2 = E1.A1
}
```

The field initializer for `A2` will have two ungrouped conversions, and the nullable walker will hit the linked assertion.</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34918</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpOperationFactory `CreateInternal` Should Not Capture</Title>
    <Description>https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Operations/CSharpOperationFactory.cs#L321

This captures the `boundNode` element in the lambda for `getChildren`, and it doesn't need to. We should update this to be non-capturing.

I'm going to mark this up for grabs so that anyone in the community who would like to make a small improvement can do so, as I am focusing on the nullable api at the moment. If no has taken this up after that work is completed, I'll probably fix this.</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34917</IssueID>
    <RepoID>1</RepoID>
    <Title>"Rename file to match type" doesn't work in .NET Standard</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.1.0 Preview 1.0 [28809.33.d16.1]
VisualStudio.16.IntPreview/16.1.0-pre.1.0+28809.33.d16.1

**Steps to Reproduce**:

1. Create a .NET Standard project
2. Open Class1.cs
3. Change type identitifer to Class2.cs

**Expected Behavior**:

In .NET Framework (legacy project system) two fixers show up, one to rename the file to match the type name and one to rename the type to match the filename:

![image](https://user-images.githubusercontent.com/5169960/55916253-b5881480-5ba0-11e9-9d04-b47e62390f64.png)

**Actual Behavior**:

In .NET Standard (CPS) only the option to rename the type to match the filename shows up:

![image](https://user-images.githubusercontent.com/5169960/55916257-bae55f00-5ba0-11e9-86e1-47c62d2014e2.png)

Not sure that's a Roslyn bug or a CPS bug.</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34916</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove the temporary mechanism for "external" nullable annotations.</Title>
    <Description>Relates to #29821
Fixes #34409
</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34915</IssueID>
    <RepoID>1</RepoID>
    <Title>Add IVsRefactorNotify changes to MoveToNamespace refactorings</Title>
    <Description>If available, use the host service to provide IVsRefactorNotify changes of the symbols being changed so dependent frameworks
can handle the changes appropriately. 

Adds unit tests that verify we have the correct code operations produced when we expect symbols to change. 

Fixes #34685 for move type. Still needs to be done for sync to namespace I believe </Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34914</IssueID>
    <RepoID>1</RepoID>
    <Title>Update upgrade fixer</Title>
    <Description>Don’t suggest upgrading to an unsupported state</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34913</IssueID>
    <RepoID>1</RepoID>
    <Title>xunit runner logs not collected for integration test hangs</Title>
    <Description>For some reason, the log files attached for an integration test run are no longer including the xunit runner process heap dump. This file is needed to determine the location in test code where the hang occurred.</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34912</IssueID>
    <RepoID>1</RepoID>
    <Title>Microsoft.CSharp.Core.targets(58,5): error MSB6006: "csc.exe" exited with code -2146232797.</Title>
    <Description>**Version Used**: 2.2.203 .NET Core VS.NET 2019 16.0

**Steps to Reproduce**:

1. Build project
2. Observe error in output

Here's my CSProj:

```
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

	&lt;PropertyGroup&gt;
		&lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt;
		&lt;DebugType&gt;portable&lt;/DebugType&gt;
		&lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
		&lt;NullableReferenceTypes&gt;true&lt;/NullableReferenceTypes&gt;
		&lt;NullableContextOptions&gt;enable&lt;/NullableContextOptions&gt;
	&lt;/PropertyGroup&gt;

	&lt;ItemGroup&gt;
		&lt;PackageReference Include="AspNet.Security.OpenIdConnect.Extensions" Version="2.0.0" /&gt;
		&lt;PackageReference Include="AspNet.Security.OpenIdConnect.Primitives" Version="2.0.0" /&gt;
		&lt;PackageReference Include="AspNet.Security.OpenIdConnect.Server" Version="2.0.0" /&gt;
		&lt;PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="6.0.0" /&gt;
		&lt;PackageReference Include="DocumentFormat.OpenXml" Version="2.9.1" /&gt;
		&lt;PackageReference Include="DocxToHtml" Version="1.0.4" /&gt;
		&lt;PackageReference Include="EPPlus" Version="4.5.3.1" /&gt;
		&lt;PackageReference Include="FileHelpers" Version="3.4.0" /&gt;
		&lt;PackageReference Include="Mammoth" Version="1.4.0" /&gt;
		&lt;PackageReference Include="Microsoft.ApplicationInsights.AspNetCore" Version="2.6.1" /&gt;
		&lt;PackageReference Include="Microsoft.AspNet.WebApi.Client" Version="5.2.7" /&gt;
		&lt;PackageReference Include="Microsoft.Azure.DocumentDB.Core" Version="2.3.0" /&gt;
		&lt;PackageReference Include="Microsoft.Azure.Management.AppService.Fluent" Version="1.20.0" /&gt;
		&lt;PackageReference Include="Microsoft.Azure.Management.Dns.Fluent" Version="1.20.0" /&gt;
		&lt;PackageReference Include="Microsoft.Azure.Management.Fluent" Version="1.20.0" /&gt;
		&lt;PackageReference Include="Microsoft.Azure.Search" Version="5.0.3" /&gt;
		&lt;PackageReference Include="Microsoft.Graph" Version="1.14.0" /&gt;
		&lt;PackageReference Include="Sendgrid" Version="9.10.0" /&gt;
		&lt;PackageReference Include="System.Reactive.Linq" Version="4.1.5" /&gt;
		&lt;PackageReference Include="System.Threading" Version="4.3.0" /&gt;
		&lt;PackageReference Include="unofficial.windowsazure.mediaservices" Version="4.1.0.1" /&gt;
		&lt;PackageReference Include="unofficial.windowsazure.mediaservices.extensions" Version="4.1.0.1" /&gt;
		&lt;PackageReference Include="WindowsAzure.Storage" Version="9.3.3" /&gt;
	&lt;/ItemGroup&gt;

	&lt;ItemGroup&gt;
		&lt;ProjectReference Include="..\XXX.Data\XXX.Data.csproj" /&gt;
		&lt;ProjectReference Include="..\TinCan\TinCan.csproj" /&gt;
	&lt;/ItemGroup&gt;

	&lt;ItemGroup&gt;
		&lt;Compile Update="Properties\Resources.Designer.cs"&gt;
			&lt;DesignTime&gt;True&lt;/DesignTime&gt;
			&lt;AutoGen&gt;True&lt;/AutoGen&gt;
			&lt;DependentUpon&gt;Resources.resx&lt;/DependentUpon&gt;
		&lt;/Compile&gt;
	&lt;/ItemGroup&gt;

	&lt;ItemGroup&gt;
		&lt;EmbeddedResource Update="Properties\Resources.resx"&gt;
			&lt;Generator&gt;ResXFileCodeGenerator&lt;/Generator&gt;
			&lt;LastGenOutput&gt;Resources.Designer.cs&lt;/LastGenOutput&gt;
		&lt;/EmbeddedResource&gt;
	&lt;/ItemGroup&gt;

&lt;/Project&gt;

```

**Expected Behavior**:

Should build normally like dotnet.exe does.

**Actual Behavior**:

Crashes with this in the output:  Microsoft.CSharp.Core.targets(58,5): error MSB6006: "csc.exe" exited with code -2146232797.</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34911</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch on enum type nested in generic type produces LangVersion error</Title>
    <Description>Fixes #34905

@dotnet/roslyn-compiler This is a fix for a serious regression that would be introduced in 16.1p2 (mea culpa) if not for this bug fix.
</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34910</IssueID>
    <RepoID>1</RepoID>
    <Title>Compare constraints lazily across partial type declarations (#34850)</Title>
    <Description>Fixes #34841.

(Cherry-pick of 43f2329f0e4738b0e05812e68e9f82b78945d74c to the dev16.1-preview2 branch.)</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34909</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove the dependence between the order in NullableAnnotation and metadata attribute values</Title>
    <Description>Fixes #33952
</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34908</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2 to dev16.1-preview2-vs-deps</Title>
    <Description>cc @dpoeschl </Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34907</IssueID>
    <RepoID>1</RepoID>
    <Title>Way to explicitly reference IDE analyzers from project file</Title>
    <Description>**Version Used**: VS 2019 Professional (16.0.1)

Is there any way to explicitly reference IDE analyzers from project file (probably with Analyzer tag) so IDE analyzers will be used also while building solution outside of VS only with msbuild? I was discussing this problem in #33558.

Custom analyzers can be activated by adding following tag to csproj (I'm not interested in installing it as VS extension):
```xml
&lt;Analyzer Include="somePathToAnalyzer\CustomAnalyzer.dll" /&gt;
```
IDE analyzers do not have to be included this way. They are present automatically (while building from VS).
Both types (custom and IDE) can be adjusted (=change default severity of analyzers) by ruleset file. Ruleset file is included by following tag in csproj:
```xml
&lt;CodeAnalysisRuleSet&gt;somePathToRulesetFile\MyRuleset.ruleset&lt;/CodeAnalysisRuleSet&gt;
```
When working in VS it works (except the issue #33558 - when IDE analyzers has Warning/Error severity set up they are not breaking a build).
Example (simple program with error, but build succeeds):
![issue1](https://user-images.githubusercontent.com/11704036/55906591-e84c0000-5bd4-11e9-856f-f1a24b4d1a56.png)
![issue2](https://user-images.githubusercontent.com/11704036/55906592-e84c0000-5bd4-11e9-85b7-258fa752a444.png)

My problem probably comes from the very same reason why the build is not broken in example above.
When I build solution just with msbuild as
```
msbuild MySolution.sln
```
no error is detected and build succeeds.

What I tried:

1. I added Analyzer element inside project file with reference to Microsoft.CodeAnalysis.CSharp.Features.dll from VS. But during build it was missing references of this lib.
2. I added also the references (located also in VS folder). But those references have another version than version which is referenced by Microsoft.CodeAnalysis.CSharp.Features.dll (e.g. System.Composition.AttributedModel (1.0.31) is referenced, but 1.0.27 version is shipped with VS). There is no(?) simple way to guide MsBuild to use binding redirection.
3. Finally I downloaded Microsoft.CodeAnalysis.CSharp.Features.dll through Nuget with its dependencies and added those dependencies to Analyzer tags as well (which is thing would really like not to do). Another problem appeared - MsBuild has already loaded some assemblies by itself (from some MsBuild/???/Roslyn folder - do not remember exactly) which collided with NuGet assemblies.
4. I removed those colliding references from Analyzer references and it looked better but I was still getting some weird null reference exceptions from CSharpValidateFormatStringDiagnosticAnalyzer.
5. I gave up.</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34905</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch on enum type nested in generic type produces LangVersion error</Title>
    <Description>I think this is related to #34678.

**Version Used**: 
master as of April 9 (commit 43f2329f0)

**Steps to Reproduce**:

1. Create a project using non-preview LangVersion
2. Write the following code
```cs
public class C&lt;T&gt;
{
    public enum E
    {
        V1, V2
    }

    public void M()
    {
        switch(default(E))
        {
            case E.V1: // error CS8511
            break;
        }
    }
}
```

**Expected Behavior**:
Builds successfully (as it does in dev15.9)

**Actual Behavior**:
```
CS8511	An expression of type 'C&lt;T&gt;.E' cannot be handled by a pattern of type 'C&lt;T&gt;.E'. Please use language version 'preview' or greater to match an open type with a constant pattern.
```
</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34904</IssueID>
    <RepoID>1</RepoID>
    <Title>Document compat break between 16.0 and 16.1 from #34695</Title>
    <Description>Fixes #34882</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34903</IssueID>
    <RepoID>1</RepoID>
    <Title>Inline Rename with Multiple Carets</Title>
    <Description>**Version Used**: 
Dev16 RTM

**Steps to Reproduce**:

1. New C# console app
2. F2 on Program to enter Rename mode
3. Cltr+Alt+Click twice inside the green identifier to have two carets
4. Delete or type a character

**Expected Behavior**:
Works

**Actual Behavior**:
Exception

http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures.Wpf/InlineRename/AbstractInlineRenameUndoManager.cs,51

Assumes a single caret

Bug found courtesy of @DavidKarlas 
</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34902</IssueID>
    <RepoID>1</RepoID>
    <Title>Restore packages after creating a CPS project in tests</Title>
    <Description>Fixes #34165</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34901</IssueID>
    <RepoID>1</RepoID>
    <Title>Can we special-case some more core framework methods for nullability?</Title>
    <Description>The compiler already special-cases some methods like String.IsNullOrEmpty and Debug.Assert:
https://github.com/dotnet/roslyn/blob/43f2329f0e4738b0e05812e68e9f82b78945d74c/src/Compilers/CSharp/Portable/Symbols/ExtraAnnotations.cs
presumably until the relevant members in Corelib are appropriately annotated.

Can we special-case some more, and in particular ones we don't currently have attributes that would let us annotate appropriately?

In particular, there are some core methods with complicated patterns but that are showing up really frequently in code, and it'd be very helpful if the compiler could appropriately suppress nullability warnings for common cases.

1. `Interlocked.CompareExchange(ref target, somethingNonNull, null)`

This is often used for lazy initialization, and shows up in a lot of properties, e.g.
```C#
private object? _syncRoot;

public object SyncRoot
{
    get
    {
        if (_syncRoot == null)
        {
            Interlocked.CompareExchange&lt;object?&gt;(ref _syncRoot, new object(), null);
        }
        return _syncRoot; // compiler warns here
    }
}
```
The compiler currently warns on `return _syncRoot;` because it can't see that the `CompareExchange` will set `_syncRoot` to a non-null value if it's currently `null` (obviously there could be other code racing with this code that would result in that not being true, but that's the case in general for nullability flow analysis and multi-threading issues are ignored).

It's not clear what an attribute for this pattern would look like, and we don't currently have one; until we do, it'd be helpful if the compiler could special-case this.

The compiler would already appropriately suppress the warning if the code were instead:
```C#
if (_syncRoot == null)
{
    _syncRoot = new object();
}
return _syncRoot;
```
so it's a bit ironic that the stronger threading semantics actually cause the compiler to warn :smile:

2. `Interlocked.Exchange(ref target, somethingNonNull)`, `Volatile.Write(ref target, somethingNonNull)`

Similarly, these methods write the second argument to the first, but we don't have an attribute to express that concept, and it's not clear what that would look like.

Related to https://github.com/dotnet/roslyn/issues/26761.  If we think it's likely we'll get attributes for these cases for C# 8 / .NET Core 3.0, then this issue can be closed.

cc: @cston, @jcouv, @dotnet/nullablefc </Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34900</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 2019 Preview 1 - Refactor.ReorderParameters Command Starts With Period</Title>
    <Description>The command description for Refactor.ReorderParameters erroneously starts with a period. See attached screenshot.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/400939/vs-2019-preview-1-refactorreorderparameters-comman.html

![image](https://user-images.githubusercontent.com/12449387/55861373-1a088c80-5b2b-11e9-9df2-38fda836011a.png)

</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34899</IssueID>
    <RepoID>1</RepoID>
    <Title>Type parameters with an oblivious constraint shouldn't be considered as PossiblyNullableReferenceTypeTypeParameter</Title>
    <Description>Fixes #34892</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34898</IssueID>
    <RepoID>1</RepoID>
    <Title>Mac ci</Title>
    <Description>
    </Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34897</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement design changes for "pattern" Index/Range indexers </Title>
    <Description>Implements most of the design changes specified in
https://github.com/dotnet/csharplang/blob/c229cae634bd59a6a13b9ed464a4cab782a95e5d/proposals/index-range-changes.md

This PR focuses on getting the simple end-to-end scenario working,
not focusing entirely on codegen quality. I expect to follow-up later
with the optimizations mentioned about eliminating use of the
Index/Range helpers entirely if they can be elided.</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>12/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34896</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>12/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34895</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34894</IssueID>
    <RepoID>1</RepoID>
    <Title>AD0001 RemoveUnusedParameters Out of Memory Exception</Title>
    <Description>I'm using the latest version of Visual Studio 2019 Preview and I can't run my project anymore because I'm now getting this error message

AD0001 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.OutOfMemoryException' with message 'Exception of type 'System.OutOfMemoryException' was thrown.'</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34893</IssueID>
    <RepoID>1</RepoID>
    <Title>It looks like IsNullableTypeOrTypeParameter incorrectly determines nullability of a type parameter </Title>
    <Description>```
        public static bool IsNullableTypeOrTypeParameter(this TypeSymbol type)
        {
            if (type is null)
            {
                return false;
            }

            if (type.TypeKind == TypeKind.TypeParameter)
            {
                var constraintTypes = ((TypeParameterSymbol)type).ConstraintTypesNoUseSiteDiagnostics;
                foreach (var constraintType in constraintTypes)
                {
                    if (constraintType.Type.IsNullableTypeOrTypeParameter())
                    {
                        return true;
                    }
                }
                return false;
            }

            return type.IsNullableType();
        }
```

Observed:
It manually walks type constraints of a type parameter and returns true as soon as it runs into a nullable constraint type. This is incorrect because not-nullable constraint should take a priority. Also, the ```class``` constraint isn't checked. 

Expected:
Probably should use TypeParameterSymbol.IsNotNullableIfReferenceType API instead of trying to duplicate the logic here.
</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34892</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected "Nullability of type argument doesn't match constraint." warnings when a type parameter with Oblivious constraint is used as a type argument</Title>
    <Description>```
#nullable enable
public class AA
{
    public void M3&lt;T3&gt;(T3 z) where T3 : class { }

    public void M4&lt;T4&gt;(T4 z) where T4 : AA { }

#nullable disable
    public void F1&lt;T1&gt;(T1 x) where T1 : class
    {
#nullable enable
        M3&lt;T1&gt;(x); // warning CS8634: The type 'T1' cannot be used as type parameter 'T3' in the generic type or method 'AA.M3&lt;T3&gt;(T3)'. Nullability of type argument 'T1' doesn't match 'class' constraint.
    }

#nullable disable
    public void F2&lt;T2&gt;(T2 x) where T2 : AA
    {
#nullable enable
        M4&lt;T2&gt;(x); // warning CS8631: The type 'T2' cannot be used as type parameter 'T4' in the generic type or method 'AA.M4&lt;T4&gt;(T4)'. Nullability of type argument 'T2' doesn't match constraint type 'AA'.
    }
}
```

Observed:
```
warning CS8634: The type 'T1' cannot be used as type parameter 'T3' in the generic type or method 'AA.M3&lt;T3&gt;(T3)'. Nullability of type argument 'T1' doesn't match 'class' constraint.
warning CS8631: The type 'T2' cannot be used as type parameter 'T4' in the generic type or method 'AA.M4&lt;T4&gt;(T4)'. Nullability of type argument 'T2' doesn't match constraint type 'AA'.
```

Expected: No warnings.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34891</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable bug fixes</Title>
    <Description>This comprises the following changes:

1. Renames `SetUnknownNullability*` to `SetObliviousNullability*` 
1. Fixes a stack overflow in `SetObliviousNullabilityForReferenceTypes` (#30023).
1. Completes the duplication of #29898 to #29605 by updating a comment


</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34890</IssueID>
    <RepoID>1</RepoID>
    <Title>Make sure to add the new namespace for declaring documents in IChangeNamespaceService</Title>
    <Description>Declaring documents were getting old namespace parts added to ensure they didn't lose references, but not the new namespace. This would result in the document not having the correct usings if it ended up having two namespaces. 

Fixes #34736</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34889</IssueID>
    <RepoID>1</RepoID>
    <Title>Use of unannotated unconstrained type parameter in nullable diabled code</Title>
    <Description>A reference to an unconstrained type parameter in nullable-disabled code should be treated as *oblivious*, and therefore reading them should be considered to produce non-null values, and we are permitted to assign null values to them without a diagnostic.
Fixes #34842

Also disable the old WRN_DotOnDefault when the nullable feature is enabled.
Fixes #34855</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34888</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34887</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve assertion message on quick info test failure</Title>
    <Description>Here is the new output for a manufactured test failure:

```
Test Name:	Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.IntellisenseQuickInfoBuilderTests.QuickInfoForTypeParameterReference
Test FullName:	Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.IntellisenseQuickInfoBuilderTests.QuickInfoForTypeParameterReference
Test Source:	C:\dev\roslyn\src\EditorFeatures\Test2\IntelliSense\IntellisenseQuickInfoBuilderTests.vb : line 542
Test Outcome:	Failed
Test Duration:	0:00:03.053

Result StackTrace:	
at Roslyn.Test.Utilities.AssertEx.EqualOrDiff(String expected, String actual, String message) in C:\dev\roslyn\src\Test\Utilities\Portable\Assert\AssertEx.cs:line 255
   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.IntellisenseQuickInfoBuilderTests.AssertEqualAdornments(Object expected, Object actual) in C:\dev\roslyn\src\EditorFeatures\Test2\IntelliSense\IntellisenseQuickInfoBuilderTests.vb:line 646
   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.IntellisenseQuickInfoBuilderTests.VB$StateMachine_7_QuickInfoForTypeParameterReference.MoveNext() in C:\dev\roslyn\src\EditorFeatures\Test2\IntelliSense\IntellisenseQuickInfoBuilderTests.vb:line 595
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.&lt;&gt;c.&lt;ThrowAsync&gt;b__6_0(Object state)
Result Message:	
Actual and expected values differ. Expected shown in baseline of diff:
 New ContainerElement(
     ContainerElementStyle.Stacked Or ContainerElementStyle.VerticalPadding,
     New ContainerElement(
         ContainerElementStyle.Stacked,
         New ContainerElement(
             ContainerElementStyle.Wrapped,
             New ImageElement(New ImageId(KnownImageIds.ImageCatalogGuid, KnownImageIds.MethodPrivate)),
             New ClassifiedTextElement(
-                New ClassifiedTextRun(ClassificationTypeNames.Keyword, "voi"),
+                New ClassifiedTextRun(ClassificationTypeNames.Keyword, "void"),
                 New ClassifiedTextRun(ClassificationTypeNames.WhiteSpace, " "),
                 New ClassifiedTextRun(ClassificationTypeNames.ClassName, "MyClass"),
                 New ClassifiedTextRun(ClassificationTypeNames.Punctuation, "."),
                 New ClassifiedTextRun(ClassificationTypeNames.MethodName, "MyMethod"),
                 New ClassifiedTextRun(ClassificationTypeNames.Punctuation, "&lt;"),
                 New ClassifiedTextRun(ClassificationTypeNames.Keyword, "int"),
                 New ClassifiedTextRun(ClassificationTypeNames.Punctuation, "&gt;"),
                 New ClassifiedTextRun(ClassificationTypeNames.Punctuation, "("),
                 New ClassifiedTextRun(ClassificationTypeNames.Punctuation, ")"))),
         New ClassifiedTextElement(
             New ClassifiedTextRun(ClassificationTypeNames.Text, "The type parameter is"),
             New ClassifiedTextRun(ClassificationTypeNames.WhiteSpace, " "),
             New ClassifiedTextRun(ClassificationTypeNames.TypeParameterName, "T"),
             New ClassifiedTextRun(ClassificationTypeNames.Text, "."))))

Expected: True
Actual:   False
```

Prior to this change it was extremely difficult to construct the `expected` object unless you knew exactly the form that would be produced by the input text.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34886</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn Installer: Stop processes that block VSIX installation.</Title>
    <Description>Rather than requiring no devenv processes to be running when installing the VSIX, detect what processes might block the installation (those whose module is under the target VS install and extension dirs) and kill them if the user confirms.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34885</IssueID>
    <RepoID>1</RepoID>
    <Title>Ranges on arrays behavior changed?</Title>
    <Description>In older C# 8.0 previews following code would return a ref
`byte[] array = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 };`
`Span&lt;byte&gt; subArray = array[1..];`
`subArray[0] = 10; // array[1] is now 10 too`

But in current version subArray now a separate copy. Is that intended? Why?
</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34884</IssueID>
    <RepoID>1</RepoID>
    <Title>add razorSupport2 to published bits so that razor team can pick up bi…</Title>
    <Description>…ts from feature branch</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34883</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Regex Completion + Async Completion = Failure to trigger on `[` in VB"</Title>
    <Description>This reverts commit 094dd50db9c07b7c01b12ad5470dfda0b8aad844 from PR https://github.com/dotnet/roslyn/pull/33921

This will reopen https://github.com/dotnet/roslyn/issues/33852

This broke a major TypeScript scenario, so we're rolling it back for Preview 2 and will then continue looking at a more satisfactory solution for all scenarios. With the "Only use Tab or Enter to commit" setting enabled, typing non-commit characters would not dismiss, so you could get things like this (with or without Suggestion Mode):

![image](https://user-images.githubusercontent.com/235241/55838767-65467f00-5ada-11e9-8fba-95ddf9561f85.png)

Only escaping/tab/enter/`.` would make the list commit or go away.

I have confirmed that this breaks `[` Regex triggering in VB only (C# still works fine), and the TypeScript team is verifying the change on their end.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34882</IssueID>
    <RepoID>1</RepoID>
    <Title>Document compat break between 16.0 and 16.1 from #34695.</Title>
    <Description>We should document a compat break between 16.0 and 16.1 due to #34678 which was fixed via #34695.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34881</IssueID>
    <RepoID>1</RepoID>
    <Title>Move Spanish runs to new queue</Title>
    <Description>This is porting this change into features/nullable-api where it's missing.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34880</IssueID>
    <RepoID>1</RepoID>
    <Title>Some tests error on macOS</Title>
    <Description>See `OverflowOnFluentCall` for an example of a stackoverflow. These will be temporarily disabled using the `WindowsOrLinuxOnly` ExecutionCondition.

See `VBCSCompilerServerTests.ShutdownTests.NoServerConnection` for an example of a hang.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34879</IssueID>
    <RepoID>1</RepoID>
    <Title>Pass structs by readonly reference for Kind and IsKind</Title>
    <Description>These methods are part of the public API, so we can't simply remove the old method. However, the benefits of pass-by-reference for extension methods are not possible if we simply add the second overload. This pull request changes the original public API to no longer be an extension method (a source breaking change) but still has the same signature (not a binary breaking change). A new extension method is added, addressing the source breaking change by causing the compiler to bind to the new method instead of the old.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34878</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't complete statement when multiple characters are selected</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32337

https://github.com/dotnet/roslyn/issues/32125 is also fixed as a result of this change.  Verified via manual testing.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>12/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34877</IssueID>
    <RepoID>1</RepoID>
    <Title>Go to Member - see all members even if you type nothing</Title>
    <Description>Customer request copying here.

&gt; Go to Member - In resharper, If you type nothing, you can see all members. But in VS, it will show nothing. It is sometimes unfriendly, because I just know there is one method indeed, but I cannot recall its name before seeing it.

**Expected Behavior**:
&lt;img width="348" alt="bug" src="https://user-images.githubusercontent.com/46729679/55830336-894b9580-5ac5-11e9-99f6-6ba6728f01b2.png"&gt;

**Actual Behavior**:
&lt;img width="436" alt="bug2" src="https://user-images.githubusercontent.com/46729679/55830400-aaac8180-5ac5-11e9-9408-7c6ffc1e3e13.png"&gt;
</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34876</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly members symbol display</Title>
    <Description>Part of #34650 </Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34875</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect nullability warnings for conditional access in assertion method</Title>
    <Description>**Version Used**: 

Branch master (9 Apr 2019)
Latest commit 665dc2 by Andrew Hall:
Merge pull request #34764 from ryzngard/issue/pullmembers_up_a11y

Pull Members Up UI fixes

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
using System.Runtime.CompilerServices;

public class C
{
  public extern void M([EnsuresNotNull] C? c1, C? c2);

  public void Test1(C? c1, C? c2, C? c3)
  {
    M(c1?.Method(c2 = c1, c1 = null), c3 = c1);

    c1.ToString();
    c2.ToString();
    c3.ToString();
  }

  public extern C? Method(C? c1, C? c2);
}

namespace System.Runtime.CompilerServices
{
  class EnsuresNotNullAttribute : System.Attribute { }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABABgqYEYA6AJX1xgBLMHC4BhAPZgADoPIIAyogBuggMZwoAbkaMmAZnYAmCmMYBvRhXaG4AD3gJc7ACwUAsgAoA2gFFcUPgImgByEjAhRIQAuqYA/BRqHEjxiUYAlDoMVjauFAAqmjAcnmIJSSllaZXl+uk5lgzW1l5JcVzucDAAFhIonmomALyJyaMUIwTE6SlqhiNJmbpNzUlc+RIKMAiCuADmnksr1oPrm9u7B0fNifpnWzv7h1nWAL7L1gZUDojOVZ09PqlcpjKqDI7vbIMGgiKDSCAadjcPgCYSiSQyOSIJQIVQaKAWHJMEz+QLBKBhCJRACCMAuwHw8AoICRXFp9MZlHMFEhryAA===

**Expected Behavior**:
Roslyn should report `warning CS8602: Dereference of a possibly null reference.` for `c1` and `c3` 

**Actual Behavior**:
Roslyn reports `warning CS8602` for `c2`

**Notes**
Since the method `M` ensures that its first argument is not null it's known that conditional access qualifier was not null. Not that Roslyn is aware of this fact as you can check by changing the invocation to `M(c1?.Method(null, null), null)` - Roslyn will not issue a warning for dereferencing `c1` in `c1.ToString()`

Since the conditonal access qualifier is known to be not null it should also be known that the conditional invocation's arguments are executed on all branches that are reachable after the assertion invocation. Roslyn *is not* aware of that as you can check by changing the invocation to `M(c1?.Method(c2 = new C(), null), null);` - Roslyn will issue a warning dereferencing `c2` in `c2.ToString()` even though the expression `c2 = new C()` is known to be executed and it guarantees that `c2` is not null after the call.

Consequently Roslyn fails to pick up the fact that there's an assignment `c1 = null` made _after_ the conditional access check and thus `c1` and `c3` can be null after the assetion call. This is similar to https://github.com/dotnet/roslyn/issues/32328.

As you can see given that the result of `c1?.Method(...)` is guaranteed to be not null it's known that `c1` is not null when it's evaluated as a qualifier to `c1?.Method(...)`. Consequently `c2` cannot be null as it's always assigned with `c1` which is known to be not null in the `c1?.Method(c2 = c1, ...)` expression. `c1` and `c3` actually can be null as `c1` is assigned with `null` in the second argument to `c1?.Method(..., c1 = null)` and is later assigned to `c3`

Roslyn infers nullability completely wrong in this example - issuing a `CS8602` warning for the only variable which cannot be null after the call and fails to warn about possible null dereferences of the other two variables which in fact can contain null values.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34874</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable warning for passing known non-null string to non-nullable ref arg</Title>
    <Description>**Version Used**: 
3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40

**Steps to Reproduce**:
```C#
#nullable enable
public class Program
{
    public static void Main()
    {
        string? argument = "hello";
        Method(ref argument);
    }

    static void Method(ref string parameter) { }
}
```
This warns:
```
Argument of type 'string?' cannot be used for parameter 'parameter' of type 'string' in 'void Program.Method(ref string parameter)' due to differences in the nullability of reference types.
```
Why is this warning needed?  We know that `argument` is non-null, so it won't violate any expectations of `Method`, and there's nothing `Method` could set `parameter` to that would violate expectations of the caller upon `Method's` return.

cc: @cston, @dotnet/nullablefc 
</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34873</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0004 false positive when explicitly casting to float to generate conv.r4</Title>
    <Description>**Version Used**: 
Tested in Visual Studio 2017 Professional and Visual Studio 2019 Professional

**Steps to Reproduce**:
Write the following code:
```cs
float f1 = 0.00000000002f;
float f2 = 1 / f1;
double d = (float)f2;
Console.WriteLine(d);
``` 

**Expected Behavior**:
The final explicit cast is not considered redundant: As I'm reading [this StackOverflow answer](https://stackoverflow.com/a/14864871/5085211) from Eric Lippert, the explicit cast ensures that the operation is carried out at lower precision, so that removing the cast will allow the optimizer the freedom to potentially change results. Indeed, I see the following results when compiling with x86 as my target platform:

               With the cast | Without the cast
      Debug      49999998976 | 49999998976  
    Release      49999998976 | 50000000199,7901

Now, according to the StackOverflow answer, this behavior is not part of the spec, so I can see how IDE0004 might rightfully pick it up, even if it's de facto wrong. When I'm still not entirely convinced, it's because the [relevant part of the C# spec](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/types#floating-point-types) (ignoring the CLR spec) seems to only be concerned with individual floating point operations where in the example above, we have a few different ones.

**Actual Behavior**:
The cast is considered redundant.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34872</IssueID>
    <RepoID>1</RepoID>
    <Title>Aspnetcore allowing void -&gt; object casting</Title>
    <Description>Original Issue: https://github.com/aspnet/AspNetCore/issues/9197

Here's a simple standalone repro on .NET Core 2.2:

```
using Microsoft.AspNetCore.Mvc;
using System;

namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {
            new Test().FaultyMethod();
        }
    }

    public class Test
    {
        private void ReturnVoid() { }

        public ActionResult&lt;object&gt; FaultyMethod()
        {
            return ReturnVoid();
        }
    }
}


namespace Microsoft.AspNetCore.Mvc
{
    public sealed class ActionResult&lt;TValue&gt;
    {
        public ActionResult(TValue value)
        {
        }

        public static implicit operator ActionResult&lt;TValue&gt;(TValue value)
        {
            return new ActionResult&lt;TValue&gt;(value);
        }
    }
}
```

Run it and you get:


Unhandled Exception: System.InvalidProgramException: Common Language Runtime detected an invalid program.
   at ConsoleApp2.Test.FaultyMethod()
   at ConsoleApp2.Program.Main(String[] args) in C:\Users\elipton\source\repos\ConsoleApp2\ConsoleApp2\
</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34871</IssueID>
    <RepoID>1</RepoID>
    <Title>Started getting XCopy errors after upgrading `Microsoft.CodeDom.Providers.DotNetCompilerPlatform` nuget package</Title>
    <Description>I upgraded my `Microsoft.CodeDom.Providers.DotNetCompilerPlatform` package as mentioned here: https://github.com/dotnet/roslyn/issues/12255#issuecomment-248588545 but started getting this error:

`E:\agt01\ENS-EB580-BEQI\TeamBuildTypes\BambooBuild.proj(226,2): error MSB3073: The command "XCOPY "E:\agt01\ENS-EB580-BEQI\..\AWInstaller\Binaries\roslyn\*.*" "E:\agt01\ENS-EB580-BEQI\..\AWInstaller\MyProject\Source Program Files\My Release\My Service\bin\roslyn\*.*" /y /e" exited with code 4.`

Here is my original post: https://github.com/aspnet/Tooling/issues/1086

Anyone please help me as I am not at all familiar with bamboo and not sure whats going on.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34870</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up DangerousGetUnderlyingArray, DangerousCreateFromUnderlyingArray</Title>
    <Description>We can replace `DangerousGetUnderlyingArray` with Span based API when available in System.Collections.Immutable: https://github.com/dotnet/corefx/issues/34126

`DangerousCreateFromUnderlyingArray` can be moved out of the compiler at that point.
</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34869</IssueID>
    <RepoID>1</RepoID>
    <Title>IsConflictMarker implementation refactored.</Title>
    <Description>To make use of existing helper functions and remove the direct usage of `_buffer` and `_lineBufferOffset`</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34868</IssueID>
    <RepoID>1</RepoID>
    <Title>Dereferences in property initializers don't update nullable state of dereferneced fields\properties</Title>
    <Description>**Version Used**: 

Branch master (9 Apr 2019)
Latest commit 665dc2 by Andrew Hall:
Merge pull request #34764 from ryzngard/issue/pullmembers_up_a11y

Pull Members Up UI fixes

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C
{
  C? f = GetSomeValue();
  void M1()
  {
    var c = new C() { f = { f = new C() } }; // CS8602
    c.ToString();
    c.f.ToString(); // CS8602
  }
    
  public static extern C? GetSomeValue();
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGFGBvRijgfgoAzCgF4KAcTgwAygHswcAGoRC+OAAoAlAG5eFJgBYKAWQCM2/TwZ8+ANwgIKAYzEVccAO4dtFLsLd/EXEPb3ZfAF8KCL0bW2cAOgAVORkYBABLXABzbVjbFwShZNT0rNzdCgB6Ko4ZAA4ANgAGFn0I/T59JgBmAzNGqgAPeARcAUlpeUUVNU1dRgigA==

**Expected Behavior**:
A single CS8602 warning for the property initializer `f = { f = new C() }`

**Actual Behavior**:
There are two CS8602 warnings. One for the property initializer `f = { f = new C() }`, another for the `c.f.ToString` derefernece of the field `f`

**Notes**
The dereference of the field `f` in the property initializer should've updated the nullable state of the field `f` in `new C().f` object creation expression just as other kinds of dereference do. Consequently `c.f.ToString` should not issue a warning because the program reaches that point iff the field was initialized with non-nullable value. Otherwise it would've crashed at the object creation expression.
</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34867</IssueID>
    <RepoID>1</RepoID>
    <Title>Make use MakeTriviaArray and AddRange.</Title>
    <Description>Make use `MakeTriviaArray` (which caches some builders) and `AddRange` with in the scanner.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34866</IssueID>
    <RepoID>1</RepoID>
    <Title>Very edge case ActivityLog.xml dialog in InlineRename</Title>
    <Description>**Version Used**: 
Any.

**Steps to Reproduce**:

1. Start renaming
2. Make multi-selection
3. Type something

**Expected Behavior**:
No exception.
**Actual Behavior**:
Exception happen:
```
System.InvalidOperationException: Sequence contains more than one element
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager.OnTextBufferChanged(Object sender, TextContentChangedEventArgs args)
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

I found this by looking at code... It's super unlikely user would do multiselection while renaming variable...</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34865</IssueID>
    <RepoID>1</RepoID>
    <Title>Unloadable Assembly Produced for structs containing struct of T, even when T avoids circularity</Title>
    <Description>**Version Used**:  VS2017 with all updates applies, also dotnet core 2.2.101

**Steps to Reproduce**:
1. Compile and run the following:
```csharp
using System;

namespace StructuralMadness
{
	class Program
	{
		public static void Main()
		{
			Console.WriteLine(new MyThing());
		}

		struct IdOf&lt;T&gt; { }

		struct MyThing
		{
			public IdOf&lt;MyThing&gt; Id;
		}
	}
}
```
**Expected Behavior**:
Print: StructuralMadness.Program+MyThing
**Actual Behavior**:
Crashes with:
```
Unhandled Exception: System.TypeLoadException: Could not load type 'StructuralMadness.Program+MyThing' from assembly 'ConsoleApp3, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.
   at StructuralMadness.Program.Main()
```

Substituting either of the "struct" for class avoids the issue. 
I'm assuming somewhere there's a problem in assuming the size of "T" needs to be fully resolved before instantiation. </Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>14/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34864</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio 2019 seems to forget custom XML Schemas</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Enterprise

**Steps to Reproduce**:

1. Create a Custom XML Schema
2. Use the Schema in Visual Studio 2019 (Open a XML-File, Toolbar "XML" -&gt; Schemas -&gt; Add the Schema)
3. Observe IntelliSense working
4. Restart VS2019
5. Open XML file again
6. Intellisense no more working, no more code highlighting on Syntax Errors, etc.

**Expected Behavior**:
Even through a VS2019 restart, the XML Schemas should be kept.

**Actual Behavior**:
VS2019 seems to just "forget" the schemas, as they are no longer in the schemas list.

** Addendum **
I hope that this is the right place to report this behavior. If not, please tell me where I have to report this - It's making work tedious, either having to re-add the Schemas all the time or doing it without IntelliSense... Thank you.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34863</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2 to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2 into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/dev16.1-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34862</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34861</IssueID>
    <RepoID>1</RepoID>
    <Title>Cleanups to callers of GetSemanticInfo</Title>
    <Description>The IDE codebase has a "GetSemanticInfo" helper that returns a struct that's sort of a spiritual merge between GetDeclaredSymbol, GetTypeInfo, GetSymbolInfo and GetAliasInfo, and used for features like Quick Info where we might be operating on either a declaration or reference. Trying to add additional smarts to Quick Info for nullable means having to figure out how this strange merged type should represent nullability, which is somewhat tricky since there's a few different consumers with radically different needs.

One way to simplify satisfying everybody's need is to remove some of the needs entirely -- two of the callers were tests. One of them could just use a public API, and the other one I suspect was tests that got forked out of Quick Info and so were reimplementing _in the test_ some Quick Info logic.

After this it looks like the only remaining callers are:

1. The public SymbolFinder.SymbolAtPositionAsync which just wants a symbol and nothing more.
2. Quick Info itself (which makes sense) which just wants the symbol but also has special-case handling
for literals.
3. Some tricky bits inside of rename.
4. F1 help, which is the same as quick info and also wants the literal special case handling.

Once I can understand the tricky stuff rename is doing, I might be able to simplify this to not have a complicated struct and just return symbol (with literal special case handling) and any stuff Quick Info specifically needs.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34860</IssueID>
    <RepoID>1</RepoID>
    <Title>move StreamJsonRpc 1.xxx to 2.xxx</Title>
    <Description>we made this move "https://github.com/dotnet/roslyn/pull/33960" and reverted with "https://github.com/dotnet/roslyn/pull/34654"

we reverted since 
1. there were RPS regressions since we were the first one that made the move. 
2. it required works from partner team which we could avoid if we wait until them to go in first.

now @AArnott did the move on the platform on (1), we shouldn't have RPS problem anymore.

for (2), if partner team can't make it for preview3, they agreed to do the work for us to move in preview 3. and master is now for preview 3.

...

this is a straight revert. but if we see issue due to change after the revert, I will make the fix as a separate commit in this PR.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34859</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34858</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview2 to dev16.1-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview2 into dev16.1-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview2-to-dev16.1-preview2-vs-deps
git reset --hard upstream/dev16.1-preview2-vs-deps
git merge upstream/dev16.1-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview2-to-dev16.1-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34857</IssueID>
    <RepoID>1</RepoID>
    <Title>Bump version to 3.1.0-beta3</Title>
    <Description>
    </Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34856</IssueID>
    <RepoID>1</RepoID>
    <Title>Update config files for snap</Title>
    <Description>
    </Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34855</IssueID>
    <RepoID>1</RepoID>
    <Title>Retire ErrorCode.WRN_DotOnDefault.</Title>
    <Description>This existing warning is redundant with warnings produced in the nullable pass, and doesn't respect null suppression.  Remove it in favor of the new warnings.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34854</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>12/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34853</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34852</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34851</IssueID>
    <RepoID>1</RepoID>
    <Title>publish feature branch bits (nuget/vsix) so that partner team can try…</Title>
    <Description>… those.

...

package versions will show up here
https://github.com/dotnet/versions/blob/master/build-info/dotnet/roslyn/lspSupport/Latest_Packages.txt

once the very first package is published.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34850</IssueID>
    <RepoID>1</RepoID>
    <Title>Compare constraints lazily across partial type declarations</Title>
    <Description>Fixes #34841.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34849</IssueID>
    <RepoID>1</RepoID>
    <Title>Add mac CI</Title>
    <Description>
    </Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>12/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34848</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up our CI setup code</Title>
    <Description>The CI specific setup in build.ps1 had gotten a bit unweildly. So much
so that we had two `if ($ci)` blocks back to back.

This factors out much of the logic into a helper method and cleans up
the main method to have a single block.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34847</IssueID>
    <RepoID>1</RepoID>
    <Title>Autoformat on paste in code?</Title>
    <Description>&lt;p&gt;I'm having to go into Edit &amp;gt; Format Document every time I paste code in C# to format it.  Can it automatically be done just like when I draw text around within the editor?&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/513878/autoformat-on-paste-in-code.html
VSTS ticketId: 835969_
_These are the original issue comments:_

Jane Wu [MSFT] on 4/3/2019, 03:16 AM (5 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34846</IssueID>
    <RepoID>1</RepoID>
    <Title>.editorconfig naming convention for private protected</Title>
    <Description>&lt;p&gt;In current version I am able to write&lt;/p&gt;&lt;pre&gt;dotnet_naming_symbols.private-symbols.applicable_accessibilities = private, protected
&lt;/pre&gt;&lt;p&gt;But I am not able to specify that I want naming style to apply only on protected internal or private protected members. Please support &lt;/p&gt;&lt;pre&gt;dotnet_naming_symbols.private-symbols.applicable_accessibilities = private, private protected
&lt;/pre&gt;&lt;p&gt;Because we want same naming convention for private and private protected members in our project. This is not possible in current .editorconfig&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/518200/editorconfig-naming-convention-for-private-protect.html
VSTS ticketId: 839788_
_These are the original issue comments:_

Jane Wu [MSFT] on 4/8/2019, 02:41 AM (12 hours ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34845</IssueID>
    <RepoID>1</RepoID>
    <Title>add partial load telemetry for experiement.</Title>
    <Description>we might delete this telemetry once experiement is done and a telemetry is added to the platform.

for now, we will have one in our side which tell us how long it took and how many times we are in the partial load mode.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34844</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected different between inferred type argument nullability and explicit</Title>
    <Description>The issue regards type inference in `M3` versus `M4` below.  Both should have the same annotation for the type argument, either unannotated, or oblivious.  Which it is may depend on the outcome of #34843, but in any case they should be the same.  And yet we report diagnostics for the type arguments in `M3` but not in `M4`.  It is possible that the problem is that we do not check the inferred type argument against the constraints in `M4`.  Either way, they should be treated the same and either there should be warnings on both or neither.

See also https://github.com/dotnet/roslyn/issues/30214

``` c#
#nullable disable
class A&lt;T1, T2, T3&gt; where T2 : class where T3 : object
{
    T1 F1;
    T2 F2;
    T3 F3;
    B F4;

#nullable enable
    void M3()
    {
        C.Test&lt;T1&gt;(); // warning given here
        C.Test&lt;T2&gt;(); // warning given here
        C.Test&lt;T3&gt;(); // warning given here
    }

    void M4()
    {
        D.Test(F1); // no warning given here
        D.Test(F2); // no warning given here
        D.Test(F3); // no warning given here
        D.Test(F4);
    }
}

class B {}

class C
{
    public static void Test&lt;T&gt;() where T : object
    {}
}

class D
{
    public static void Test&lt;T&gt;(T x) where T : object
    {}
}
```
</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34843</IssueID>
    <RepoID>1</RepoID>
    <Title>Use of unannotated unconstrained type parameter in nullable enabled code</Title>
    <Description>The issue is the treatment of a reference to a type parameter that was declared in a disabled context but referenced in an enabled context.  The compiler treats such as reference as unannotated today, but there is a belief that the LDM intends such a reference to be considered oblivious.  We may need LDM confirmation that is the intent.

See also https://github.com/dotnet/roslyn/issues/30214 and https://github.com/dotnet/roslyn/issues/30214#issuecomment-425509720

``` c#
#nullable disable
class A&lt;T1, T2, T3&gt; where T2 : class where T3 : object
{
#nullable enable
    void M2()
    {
        T1 x2 = default; // is a warning deserved here?
        T2 y2 = default; // is a warning deserved here?
        T3 z2 = default; // is a warning deserved here?
    }
}
```

The is was resolved in https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-04-15.md#declarations-with-constraints-declared-in-nullable-disabled-code .  None of them deserve warnings.
</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34842</IssueID>
    <RepoID>1</RepoID>
    <Title>Use of unannotated unconstrained type parameter in nullable diabled code</Title>
    <Description>The issue is the treatment of a reference to a (unconstrainted) type parameter that was both declared and referenced in a disabled context (without an annotation).  Such a reference should designate an oblivious type and should be treated accordingly.  That does not appear to be the treatment today.  That is the issue in `M1` below.  There should be no problem with the default expression because it is being converted to an oblivious type.

See also https://github.com/dotnet/roslyn/issues/30214

``` c#
#nullable disable
class A&lt;T1, T2, T3&gt; where T2 : class where T3 : object
{
    T1 F1;
    T2 F2;
    T3 F3;
    B F4;

#nullable enable
    void M1()
    {
        F1 = default; // unexpected warning
        F2 = default; // unexpected warning
        F3 = default; // unexpected warning
        F4 = default;
    }
}

class B {}
```
</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34841</IssueID>
    <RepoID>1</RepoID>
    <Title>StackOverflow with latest compiler when enabling nullable on a specific generic file</Title>
    <Description>**Version Used**: 3.100.19.20601 (f50c04c1)

**Steps to Reproduce**:

1. Adding `#nullable enable` in this file: https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Collections/Generic/EqualityComparer.CoreCLR.cs
2. build coreclr with `build.cmd -windowscorlib`

**Expected Behavior**:
Compiles fine
**Actual Behavior**:
Crashes with: StackOverflowException

**Call stack**: 
[nullable-generic-stack.txt](https://github.com/dotnet/roslyn/files/3056163/nullable-generic-stack.txt)
 
I do have a crash dump but it is too big to upload, I can share it offline if needed.

cc: @jaredpar @cston @dotnet/nullablefc </Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34840</IssueID>
    <RepoID>1</RepoID>
    <Title>Index from the end doesn't work with string</Title>
    <Description>**Version Used**: .NET Core 3.0.100-preview3-010431, C# 8

**Steps to Reproduce**:

1. Compile the following code

        static void Main(string[] args)
        {
            var letter = "test"[^1];
        }

build succeeded

2. Launch the program

**Expected Behavior**: normal program execution

**Actual Behavior**: unhandled exception:

    System.InvalidProgramException
      HResult=0x8013153A
      Message=Common Language Runtime detected an invalid program.
      Source=&lt;Cannot evaluate the exception source&gt;
      StackTrace: &lt;Cannot evaluate the exception stack trace&gt;

If I use `"test".ToArray()[^1]` instead, it works fine.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34839</IssueID>
    <RepoID>1</RepoID>
    <Title>DocumentationCommentId.CreateDeclarationId/VS creates invalid target string for declaration in multiple scenarios</Title>
    <Description>**Version Used**: 

2.8

**Steps to Reproduce**:

This repros both when making a call to CreateDeclarationId directly or when trying to generate suppressions in suppression file through Visual Studio.

1. Call DocumentationCommentId.CreateDeclarationId on the declaredSymbol for a method declaration which includes a dynamic type, a tuple, or is a partial method. 

// CA1825 Avoid zero-length array allocations violations

        private (int, int) DoStuff()
        {
            var array = new string[0];
        }

        private int DoStuff(dynamic dynamic)
        {
            var array = new string[0];
            return 1;
        }

        partial void DoStuff()
        {
            var array = new string[0];
        }

**Expected Behavior**:

The generated string is a valid identifier and can be used in SuppressMessage attributes to suppress static analysis violations.

**Actual Behavior**:

Generated target string fails to actually suppress violations and in the case of tuples and dynamics the type names fail to be expanded:

```
"~M:ScopeIdentifier.ScopeIdentifier.DoStuff~System."

"~M:ScopeIdentifier.ScopeIdentifier.DoStuff(System.)~System.Int32"

"~M:ScopeIdentifier.ScopeIdentifier.DoStuff"
```

We have a set of tools that we use to generate baselines for Roslyn violations, they hinge on CreateDeclarationId producing a valid target string. In these cases the generated suppressions fail to actually suppress and prevent us from enabling the new rule until manual intervention to adjust the suppression is done.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34838</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow Code Navigation to {} Patterns</Title>
    <Description>**Version Used**: 

Visual studio 2019, C# 8.0

**Steps to Reproduce**:

create a solution in visual studio with the following code:

```csharp
public class C
{
    public bool IsNotNullOrEmpty(string? str) =&gt; str is {} notNullStr &amp;&amp; notNullStr.Length != 0;
}
```

Put your cursor in the `{}` pattern and press F12, or right click on the pattern and select "Go To Definition"

**Expected Behavior**:
navigates to the definition of `string`

**Actual Behavior**:
"Cannot Navigate to the symbol under the caret "
</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34837</IssueID>
    <RepoID>1</RepoID>
    <Title>solution.WithDocumentFilePath does not update _filePathToDocumentIdsMap</Title>
    <Description>With the latest roslyn

**Steps to Reproduce**:
Create a test workspace with 1 document, change the document's file path, then try to get the documentId from the file path.

Reproduction code in a test.
```csharp
using (var workspace = TestWorkspace.CreateCSharp(markup))
{
    var documentPath = "someNewPath/" + workspace.Documents.First().FilePath;
    var updatedSolution = workspace.CurrentSolution.WithDocumentFilePath(workspace.Documents.First().Id, documentPath);
    workspace.ChangeSolution(updatedSolution);
    var newFilePath = workspace.CurrentSolution.Projects.First().Documents.First().FilePath;
    var documentIdsWithNewFilePath = workspace.CurrentSolution.GetDocumentIdsWithFilePath(newFilePath);
}
```

```newFilePath``` prints "someNewPath/test1.cs", but
```documentIdsWithNewFilePath``` is empty but should contain the documentId for the updated document.
</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34836</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34835</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34834</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34833</IssueID>
    <RepoID>1</RepoID>
    <Title>Inconsistent evaluation of editorconfig naming rule for inherited async methods</Title>
    <Description>**Version Used**: 
Visual Studio 2019 RTM
.NET Core 2.2.202

**Steps to Reproduce**:

1. Create new .NET Core console app project
2. Add an .editorconfig file to the solution
3. Add a naming rule for methods that says async methods should have the `Async` suffix
4. Create an interface with a Task-returning method without the `Async` suffix
5. Implement the interface in a class and make it async

**Expected Behavior**: VS reports the method it violating the naming rule
**Actual Behavior**: No violation is reported

I'm not 100% sure this is the right place to report this so if it isn't, I'll gladly go report it somewhere better.

At any rate, in the scenario above, the rule works perfectly well for non-inherited methods but fails for interface implementation.

The rule:
```
# Async methods should have "Async" suffix
dotnet_naming_rule.async_methods_end_in_async.symbols = any_async_methods
dotnet_naming_rule.async_methods_end_in_async.style = end_in_async
dotnet_naming_rule.async_methods_end_in_async.severity = error

dotnet_naming_symbols.any_async_methods.applicable_kinds = method
dotnet_naming_symbols.any_async_methods.applicable_accessibilities = *
dotnet_naming_symbols.any_async_methods.required_modifiers = async

dotnet_naming_style.end_in_async.required_prefix = 
dotnet_naming_style.end_in_async.required_suffix = Async
dotnet_naming_style.end_in_async.capitalization = pascal_case
dotnet_naming_style.end_in_async.word_separator =
```

Repro code:
``` csharp
public class Repro : IRepro
{
    public async Task DoWork()
    {
        await Task.Delay(1000);
    }

    public async Task DoOtherWork()
    {
        await Task.Delay(1000);
    }
}

public interface IRepro
{
    Task DoWork();
}
```

The result:
![image](https://user-images.githubusercontent.com/7479226/55739696-d5e19300-5a29-11e9-880b-a64e3a5d2061.png)

I'm also attaching a small repro solution:
[EditorConfigRepro.zip](https://github.com/dotnet/roslyn/files/3055270/EditorConfigRepro.zip)</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34832</IssueID>
    <RepoID>1</RepoID>
    <Title>Pattern-based lookup for `await using` doesn't check return type of `GetResult` method</Title>
    <Description>**Version Used**: 
Compiler version: '3.0.19.17001 (1deafee)'

**Steps to Reproduce**:
Compile the following code:

```csharp
using System;
using System.Runtime.CompilerServices;

public class C
{
    public async void M()
    {   
        await using (var z = new C()) {}
    }
    
    public C DisposeAsync() =&gt; default;
    public C GetAwaiter() =&gt; default;
    public bool GetResult() =&gt; true;
    public void OnCompleted(Action continuation) {}
    public bool IsCompleted =&gt; true;
}   
```

**Expected Behavior**:

error CS8410: 'C': type used in an async using statement must be implicitly convertible to 'System.IAsyncDisposable' or implement a suitable 'DisposeAsync' method.

**Actual Behavior**:
Compiles without error.

/cc @jcouv @chsienki </Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34831</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

## From https://github.com/dotnet/arcade
- **Build**: 20190407.1
- **Date Produced**: 4/7/2019 12:56 PM
- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19207.1

## From https://github.com/dotnet/arcade
- **Build**: 20190409.2
- **Date Produced**: 4/9/2019 12:54 PM
- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19209.2

## From https://github.com/dotnet/arcade
- **Build**: 20190410.7
- **Date Produced**: 4/11/2019 3:17 AM
- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19210.7

## From https://github.com/dotnet/arcade
- **Build**: 20190411.2
- **Date Produced**: 4/11/2019 10:43 PM
- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19211.2

## From https://github.com/dotnet/arcade
- **Build**: 20190412.2
- **Date Produced**: 4/12/2019 4:37 PM
- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19212.2

## From https://github.com/dotnet/arcade
- **Build**: 20190413.2
- **Date Produced**: 4/13/2019 9:02 PM
- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19213.2

## From https://github.com/dotnet/arcade
- **Build**: 20190414.2
- **Date Produced**: 4/14/2019 4:07 PM
- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19214.2

## From https://github.com/dotnet/arcade
- **Build**: 20190415.12
- **Date Produced**: 4/16/2019 12:12 AM
- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19215.12

## From https://github.com/dotnet/arcade
- **Build**: 20190417.1
- **Date Produced**: 4/17/2019 7:32 AM
- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19217.1

## From https://github.com/dotnet/arcade
- **Build**: 20190418.1
- **Date Produced**: 4/18/2019 8:10 AM
- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.1

## From https://github.com/dotnet/arcade
- **Build**: 20190418.4
- **Date Produced**: 4/18/2019 10:50 PM
- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.4

## From https://github.com/dotnet/arcade
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From https://github.com/dotnet/arcade
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From https://github.com/dotnet/arcade
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From https://github.com/dotnet/arcade
- **Build**: 20190422.2
- **Date Produced**: 4/22/2019 10:01 PM
- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19222.2

## From https://github.com/dotnet/arcade
- **Build**: 20190423.2
- **Date Produced**: 4/24/2019 12:38 AM
- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19223.2

## From https://github.com/dotnet/arcade
- **Build**: 20190424.9
- **Date Produced**: 4/25/2019 12:59 AM
- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19224.9

## From https://github.com/dotnet/arcade
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From https://github.com/dotnet/arcade
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From https://github.com/dotnet/arcade
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From https://github.com/dotnet/arcade
- **Build**: 20190426.3
- **Date Produced**: 4/26/2019 5:53 PM
- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19226.3

## From https://github.com/dotnet/arcade
- **Build**: 20190429.8
- **Date Produced**: 4/30/2019 5:30 AM
- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19229.8

## From https://github.com/dotnet/arcade
- **Build**: 20190430.6
- **Date Produced**: 4/30/2019 10:17 PM
- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19230.6

</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34830</IssueID>
    <RepoID>1</RepoID>
    <Title>Two AD0001 (unreachable and KeyNotFoundException) from valid code in CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer </Title>
    <Description>**Version Used**: 
16.0.0

**Steps to Reproduce**:

```csharp
using System;
using System.Threading.Tasks;

public interface IFoo { event Action Fooed; }

public sealed class C : IDisposable
{
    private readonly Task&lt;IFoo&gt; foo;

    public C(Task&lt;IFoo&gt; foo)
    {
        this.foo = foo;
        Task.Run(async () =&gt; (await foo).Fooed += fooed);
    }

    private void fooed() { }

    public void Dispose() =&gt; foo.Result.Fooed -= fooed;
}
```

Opening my solution with this file already open immediately results in two AD0001 diagnostics:
```
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'This program location is thought to be unreachable.'.	*		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: *
ISymbol: .ctor (Method)

System.InvalidOperationException: This program location is thought to be unreachable.
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.ShouldReportUnusedParameters(ISymbol symbol, UnusedParametersPreference unusedParametersPreference, ReportDiagnostic unusedParametersSeverity)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```
and
```
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.Collections.Generic.KeyNotFoundException' with message 'The given key was not present in the dictionary.'.	*		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: *
IOperation: ExpressionStatement
SyntaxTree: *
SyntaxNode: Task.Run(async () =&gt; (await foo ... [ExpressionStatementSyntax]@[247..296) (12,8)-(12,57)

System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.
   at System.Collections.Immutable.ImmutableDictionary`2.get_Item(TKey key)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeExpressionStatement(OperationAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c.&lt;ExecuteOperationAction&gt;b__51_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```
</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34829</IssueID>
    <RepoID>1</RepoID>
    <Title>AD0001 (unreachable) for the CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer</Title>
    <Description>**Version Used**:
16.0.0

**Steps to Reproduce**:
```csharp
public class C
{
    private const string m = "";
}
```

Opening my solution with this file already open immediately results in
```
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'This program location is thought to be unreachable.'.	*		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: *
ISymbol: m (Field)

System.InvalidOperationException: This program location is thought to be unreachable.
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.ShouldReportUnusedParameters(ISymbol symbol, UnusedParametersPreference unusedParametersPreference, ReportDiagnostic unusedParametersSeverity)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```

**Expected Behavior**:
No AD0001, but an actual diagnostic

**Actual Behavior**:
AD0001 with stack trace</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34828</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch expressions do not correctly infer nullability</Title>
    <Description>**Version Used**: 
Visual Studio 2019 version 16.0.0 + dotnet core version 3.0.100-preview3-010431

**Steps to Reproduce**:

```
void F(string s) { }
string? str = ...;
F(str switch { null =&gt; "NULL", _ =&gt; str });
```

**Expected Behavior**: The call to `F` succeeds, since we already know that str is non-null in the second arm of the switch expression.

**Actual Behavior**: The call to F fails since the result of the switch expression is determined to be of type `string?`.
</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34827</IssueID>
    <RepoID>1</RepoID>
    <Title>Assigning a string?[] to an IEnumerable&lt;string&gt; does not generate a nullability warning</Title>
    <Description>**Version Used**: 
Visual Studio 2019 version 16.0.0 + dotnet core version 3.0.100-preview3-010431

**Steps to Reproduce**:

```
IEnumerable&lt;string&gt; strings = new[] { "string 1", "string 2", null }; // Expected to produce a warning, as null is incompatible with string

var str = strings.Skip(2).First(); // Is a string, but may contain null

IEnumerable&lt;string&gt; strings = new[] { "string 1", "string 2", null }.ToList(); // This one correctly reports that there is a mismatch
```

**Expected Behavior**: A warning is generated, stating that there is a nullability mismatch

**Actual Behavior**: No warning is generated

</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34826</IssueID>
    <RepoID>1</RepoID>
    <Title>C# ternary '&amp;&amp;': short-circuit of 1st term continues to vacuous evaluation of 3rd</Title>
    <Description>**Version Used**:&lt;br&gt;
`Microsoft (R) Visual C# Compiler version 2.10.0.0 b9fb1610`

**Steps to Reproduce**:

    static int test(int a, int b, char c, Dictionary&lt;char, bool&gt; dict)
    {
        if (a &lt; b &amp;&amp; dict.TryGetValue(c, out bool flag) &amp;&amp; flag)
            return 123;
        return 456;
    }

**Expected Behavior**:

    .method public static int32 test(int32 a, int32 b, char c, class Dictionary&lt;char,bool&gt; dict)
    {
        .locals init (bool flag)
                ldarg.0
                ldarg.1
                bge.s      L_0017           //  &lt;----------- expected
                ldarg.3
                ldarg.2
                ldloca.s   flag
                callvirt instance bool Dictionary&lt;char,bool&gt;::TryGetValue(!0, !1&amp;)
                br.s       L_0010           //  no longer needed ¹
                ldc.i4.0                    //  unreachable ¹
        L_0010: ldloc.0                     //  label not needed ¹
                and
                brfalse.s  L_0017
                ldc.i4.s   123
                ret
        L_0017: ldc.i4     456
                ret
    }
                                            //  1. collateral effects if this issue is corrected

**Actual Behavior**:

    .method public static int32 test(int32 a, int32 b, char c, Dictionary&lt;char,bool&gt; dict)
    {
        .locals init (bool flag)
                ldarg.0
                ldarg.1
                bge.s      L_000F           //  &lt;----------- actual
                ldarg.3
                ldarg.2
                ldloca.s   flag
                callvirt instance bool Dictionary&lt;char,bool&gt;::TryGetValue(!0, !1&amp;)
                br.s       L_0010
        L_000F: ldc.i4.0
        L_0010: ldloc.0
                and
                brfalse.s  L_0017
                ldc.i4.s   123
                ret
        L_0017: ldc.i4     456
                ret
    }

**Notes**:

When `a &lt; b`, the **IL** correctly skips over the evaluation of the *second* term, as required by the semantics of `&amp;&amp;`, but in fact it does so by unexpectedly continuing with the evaluation of the *third* term.

Because the first-term short-circuit case of the ternary `&amp;&amp;` in the current `csc.exe` result branches ***over*** the second term by continuing to the third, the correctness of the **IL** relies on the value `.locals init (bool flag)` being zero, in order to ensure that the extraneous evaluation of the third term fails.

Since the third term tests an `out` result of the second term, but the second term was skipped over, the compiler knows that the variable `flag` remains uninitialized, which in turn means that the `and`  test of the third term is guaranteed to fail (again) as required by the (original) short-circuit.

So although branching over the second term directly to the third term here is extraneous, unusual, unwanted, and unexpected, technically speaking, **C#** semantics are not violated in this case.

----

*n.b.*&lt;br&gt;A fix to this issue would mean that the `ldc.i4.0` instruction at `L_000F` becomes unreachable, and since it was a branch target, it seems that fixing this issue might give the collateral improvement of easing the IL branch optimization logjam this method seems to be having. Since follow-on effects aren't technically part of a minimal repro/repair report, I marked these speculations with footnote (1.) in the code snippet for clarity.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34825</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34824</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34823</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34822</IssueID>
    <RepoID>1</RepoID>
    <Title>Pattern-based lookup for `await using` doesn't recognize `IAsyncEnumerable.DisposeAsync` that returns an awaitable type</Title>
    <Description>**Version Used**: 
Compiler version: '3.0.19.17001 (1deafee3)'

**Steps to Reproduce**:
Compile the following code:
```csharp
using System;
using System.Runtime.CompilerServices;

public class C
{
    public async void M(IAsyncDisposable arg)
    {   
        await using (var x = arg) {} // error
        await using (var z = new C()) {} // ok
    }
    
    public Awaitable DisposeAsync() =&gt; default;
}

namespace System
{
    public class Awaitable : INotifyCompletion
    {
        public Awaitable GetAwaiter() =&gt; default;
        public void GetResult() {}
        public void OnCompleted(Action continuation) {}
        public bool IsCompleted =&gt; true;
    }

    public interface IAsyncDisposable
    {
        Awaitable DisposeAsync();
    }
}
```

**Expected Behavior**:
Compiles without errors for both `await using`s

**Actual Behavior**:
The error CS0656: Missing compiler required member 'System.IAsyncDisposable.DisposeAsync' is emitted on first `await using`.

/cc @jcouv </Description>
    <CreatedDate>07/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34821</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposal: Generic script with embedded language support in .NET</Title>
    <Description>I saw many proposals to add XML literals or JSON support in C#, which are rejected. I have an idea to support any type of literals with embedded language code without altering the langue syntax!
Suppose we have a method named EmbeddedScript.Parse, used like this:
```C#
var es = new EmbeddedScript();
var n = 1;
var html =es.Parse(ScriptType.Html, 
                  "&lt;p&gt;test &lt;%= n %&gt;&lt;/p&gt;";
```

This should evaluated as:
`&lt;p&gt;test 1&lt;/p&gt;`

Another suggestion for the syntax is:
```VB.NET
Dim x = "test"
Dim s As string = $.JavaScript
"var I =5;
document.writeln({x});"
```

where $ is the interpolated string symbol, and JavaScript is the editor we want to use to format, color, validate and auto-complete the tokens inside the string. We can also use:
$.Html, $.CSS, $.JSON, $.CS, $.FS, $.Razor, $.XML (this one will makes the interpolated string literal acts as the XML literal)… etc.
XML literal can also benefit from this, by using and editor attr like this:
```
dim x = &lt;zml editor="Html"&gt;

&lt;/zml&gt;
```

These are the rules:
1. embed language code in &lt;%= n %&gt;. But EmbeddedScript can have properties like StartQute and EndQuote to set the start and end embed quotes, so every one can use the scheme he like most.

2. The ScriptType enum can have values for Html, XML, JSON, Js, String, and any other formula supported. It also can contain CSharp, VisualBasic, FSharp... etc, to allow use some pieces of another language with embedded expression with the current one. The Return Value of the Parse method should be an interface that have a Value property to return the evaluated expression.
Another way, is to have EmbeddedScript.ParseHtml, EmbeddedScript.ParseXml, EmbeddedScript.ParseVB..... etc methodes, with syitable return types.
Maybe it can have a UserDefined to use a new script but this needs setting rules on how to define it to Roslyn.

3. The script is written as a string, and parsed to the desired type like XElement, HtmlElemnt, Json, String , etc. So, it is not a part oc C# ,VB or F# syntax.

4. Roslyn is supposed to handle the script witten in the string quotes, to offer intellisnese and syntax check. Most of this work is already done in Html, xml, Json editors, So, put it in action ion this scope.

5. C# or VB evaluates the embedded expressions only and the parsing process is done by the EmbeddedScript.Parse, which, I think, is a matter of calling some CoreFx methods.

6. If the script depends on some other data like an xsd file for xml, we can point to its path in a EmbeddedScript.Resources property and reference its key in the xmln namespace.

7. Embeded C# or VB inside a closed quotes should allow us to write any of these:
a. an expression like `&lt;%= n %&gt;`
b. implicit function like:
```
&lt;%= var x = 10; 
          return n + x;%&gt;
```

c. implicit enumerator like
```
&lt;%= foreach (x in arr) 
             yield return &lt;p&gt;n + x&lt;/p&gt;
%&gt;
```

d. a block of code to define som vars used in other embedded expression, and return "" is assumed:
```C#
&lt;div&gt;
    &lt;p&gt;test &lt;%=  n %&gt;&lt;/p&gt;
    &lt;%= n += 1; %&gt;
    &lt;p&gt;test &lt;%=  n %&gt;&lt;/p&gt;
&lt;/div&gt;
```


These are the basics, and you can refine these rules as desired.
I think this idea can offer powerful tools to .net languages, and will save many future efforts to embrace new kind of scripts. 
In fact this idea came to me because I am suffering now to find away to add intellisense support for THML written inside xml literals in VB. VS.NET has all the tools but I don't find an easy way to apply them on xml literals without writing a new editor factory with C++! Why write a new useless editor while VS already has editors for nearly every thing?

</Description>
    <CreatedDate>07/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34820</IssueID>
    <RepoID>1</RepoID>
    <Title>publish logs</Title>
    <Description>
    </Description>
    <CreatedDate>07/04/2019</CreatedDate>
    <ClosedDate>07/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34819</IssueID>
    <RepoID>1</RepoID>
    <Title>Where is Microsoft.CodeAnalysis.EditorFeatures* greater than v2.9.0?</Title>
    <Description>Hi,
the latest versions of Visual Studio 2017 and 2019 are containing the **Microsoft.CodeAnalysis** libraries at 2.10 and 3.0 versions respectively and the **Microsoft.CodeAnalysis.EditorFeatures** libraries (**EditorFeatures**, **EditorFeatures.Text**, **EditorFeatures.Wpf**) have the same versions and refereneced the same versions of **Microsoft.CodeAnalysis** libraries, but I didn't find the public version of this libraries which are greater than 2.9.0 ([EditorFeatures](https://www.nuget.org/packages/Microsoft.CodeAnalysis.EditorFeatures/), [EditorFeatures.Text](https://www.nuget.org/packages/Microsoft.CodeAnalysis.EditorFeatures.Text/), [EditorFeatures.Wpf](https://www.nuget.org/packages/Microsoft.CodeAnalysis.EditorFeatures.Wpf/) ).

Did I miss something or public version doesn't exist? If so is it assumed the community should manyally add redirect for all assemblies that are referenced from **EditorFeatures**, **EditorFeatures.Text**, **EditorFeatures.Wpf** to the new 2.10 and 3.0 versions?

</Description>
    <CreatedDate>07/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34818</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a suggestion to remove ConfigureAwait where the synchronization context is null</Title>
    <Description>As there is no synchronization context ASP.NET Core, it would be beneficial to have an analyzer hint when `ConfigureAwait(false)` doesn't have an impact.

In the following example adding `ConfigureAwait(false)` does nothing as this is in ASP.NET Core. Having an analyzer identify that the synchronization context is in fact null would be great.

```
public class IndexModel : PageModel
{
    public async Task OnGet()
    {
        var repository = new UserRepository();

        var id = await repository.Create("Filip Ekberg")
            .ConfigureAwait(false);
    }
}
```
</Description>
    <CreatedDate>07/04/2019</CreatedDate>
    <ClosedDate>07/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34817</IssueID>
    <RepoID>1</RepoID>
    <Title>VS2019 Not Using Roslyn Compiler From VSIX</Title>
    <Description>**Versions Used**: 
- Visual Studio 2019 RTM Community for Windows (16.0.0)
- .Net Core 3.0.100-preview4-010963
- Local build of master, commit hash: 336c3766c5bdb87f313c8df89938957b93239fac

**Steps to Reproduce**:
- Write a simple program using the Default Interface Implementation feature:
```
class Program {
    static void Main(string[] args) {
        IFoo x = new Baz();          
        Console.WriteLine(x.Bar());
    }
}

public interface IFoo { int Bar() =&gt; 42; }
public class Baz : IFoo { }
```

**Environment**
The project is targeting .Net Core 3.0. The 'Use previews of the .Net Core SDK' option is enabled in the experimental instance and main instance. .Net Core 3.0.100-preview4-010963 installed as the highest .Net Core SDK version. Local build of Roslyn's master branch installed in the experimental instance from a RoslynDeployment.vsix build in debug mode. The project explicitly specifies the C# language version '8.0'.

**Expected Behavior**:
- No IDE warnings or errors, compiles and runs.

**Actual Behavior**:
- No IDE warnings or errors, but the compiler produces the following error:
```
1&gt;C:\Program Files\dotnet\sdk\3.0.100-preview4-010963\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview
1&gt;Program.cs(13,29,13,32): error CS0531: 'IFoo.Bar()': interface members cannot have a definition
1&gt;Program.cs(14,20,14,24): error CS0535: 'Baz' does not implement interface member 'IFoo.Bar()'
1&gt;Done building project "ConsoleApp2.csproj" -- FAILED.
```

The code compiles and runs fine when I use the locally compiled compiler directly. It doesn't look like Visual Studio is invoking the compiler from the VSIX. I have verified the VSIX is installed correctly and the editor is behaving properly with the installed extension.

Does anyone have any tips? Not sure if something changed with the deployables for VS 2019.

Thank you.</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34816</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense doesn't work for XML literals using a schema definition</Title>
    <Description>**Version Used**: 
VS.NET 2019 Community

**Steps to Reproduce**:
I am trying a sample to provide intellisense for XML literals, by using a schema definition.
But, when I tested with the simple example described here:
https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/bb531325%28v%3dvs.120%29#enabling-xml-intellisense-in-visual-basic
intellisense didn't show any completion at all, both in .NET framework and .NET Core apps.
This is the xsd file I used:
```
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xs:schema attributeFormDefault="unqualified" 
           elementFormDefault="qualified" 
           targetNamespace="http://SamplePurchaseOrder" 
           xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="PurchaseOrders"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="PurchaseOrder"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="Address" /&gt;
              &lt;xs:element name="Items" /&gt;
              &lt;xs:element name="Comment" /&gt;
            &lt;/xs:sequence&gt;
            &lt;xs:attribute name="PurchaseOrderNumber" type="xs:unsignedShort" use="required" /&gt;
            &lt;xs:attribute name="OrderDate" type="xs:string" use="required" /&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;
```

and this is VB code I tested:
```VB.NET
Imports &lt;xmlns="http://SamplePurchaseOrder"&gt;

Module Module1

    Sub Main()
        Dim po = &lt;PurchaseOrder/&gt;


        Dim x = &lt;?xml version="1.0"?&gt;
                &lt;PurchaseOrders&gt;
                    &lt;PurchaseOrder PurchaseOrderNumber="12345" OrderDate="2000-1-1"&gt;
                        &lt;Address/&gt;
                        &lt;Items/&gt;
                        &lt;Comment/&gt;
                    &lt;/PurchaseOrder&gt;
                &lt;/PurchaseOrders&gt;
    End Sub

End Module
```

Did I do something wrong, or this feature stopped working in Roslyn?

**Expected Behavior**:
Auto complete list should appear and offer the names defined in the schema.

**Actual Behavior**:
No auto complete whatever.</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34906</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow out parameter widening</Title>
    <Description>Given the following code bits (where both CarNode and PlaneNode implement INode):

```
       public ConcurrentDictionary&lt;TreeKey, CarNode&gt; CarNodesByKey { get; } = new ConcurrentDictionary&lt;TreeKey, CarNode&gt;();
        public ConcurrentDictionary&lt;TreeKey, PlaneNode&gt; PlaneNodesByKey { get; } = new ConcurrentDictionary&lt;TreeKey, PlaneNode&gt;();

        public bool TryGetNode(ENodeType nodeType, TreeKey key, out INode node)
        {
            switch (nodeType)
            {
                case ENodeType.Cars:
                    return CarNodesByKey.TryGetValue(key, out node);
                case ENodeType.Planes:
                    return PlaneNodesByKey.TryGetValue(key, out node);
                default:
                    node = null;
                    return false;
            }
        }
```

The problem here is that this does not compile, because the `out node` is `INode` rather than the specific type declared for the collection. But in normal C# code it is perfectly valid to declare a variable of a less specific type and assign a specific type to it, e.g. `INode node = new CarNode()`.

Why is the C# compiler being a PITA in this case? Can we fix it so that scenarios like this are less painful? 

To work around this, each case in the switch must now declare a local variable for the out parameter, so the code looks like this:

```
        public bool TryGetNode(ENodeType nodeType, TreeKey key, out INode node)
        {
            switch (nodeType)
            {
                case ENodeType.Cars:
                    if (CarNodesByKey.TryGetValue(key, out var carNode))
                    {
                        node = carNode;
                        return true;
                    }
                    node = null;
                    return false;
                case ENodeType.Planes:
                    if (PlaneNodesByKey.TryGetValue(key, out var planeNode))
                    {
                        node = planeNode;
                        return true;
                    }
                    node = null;
                    return false;
                default:
                    node = null;
                    return false;
            }
        }
```

This does get tedious to work with rather quickly.</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34815</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 2019 VB editor is very slow</Title>
    <Description>**Version Used**: 
VS 2019 Community
OS: win 8.1

**Steps to Reproduce**:
Load projest with 50K+ lines

**Expected Behavior**:
As fast as VS 2017 or faster
**Actual Behavior**:
When I make / remove error in code, then editor need some 20 seconds to show / hide errors in Error List and show / remove (red) error squiggles in code. In VS 2017 on the same machine it is much faster (2-3 sec). Projest have some 50K lines, on small project speed seems to be the same as VS 2017</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34814</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove redundant line.</Title>
    <Description>Discovered through contributor's fork of Roslyn tinkering.

Due to the immutable nature of Roslyn syntax tree, the result of the `ReportSyntaxError` function call isn't used. The same diagnostic is produced though, via the `HandleUnexpectedToken` method. So no change in behavior is observable. _(as for I can tell)_</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34813</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>06/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34812</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>06/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34811</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>06/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34810</IssueID>
    <RepoID>1</RepoID>
    <Title>Older binaries in bin\roslyn folder of my VS2017 (ASP.NET MVC) project</Title>
    <Description>**Version Used**: 
VS 2017 (15.9.10)

**Steps to Reproduce**:

I updated the NuGet package Microsoft.Net.Compilers to the latest v3.0.0 using the "Manage NuGet Packages for Solution &gt; Updates" page.

In my packages folder I now have a "Microsoft.Net.Compilers.3.0.0" subfolder and the file properties of e.g. tools\csc.exe display the version 3.0.19.17001. Okay.

In VS I do "Clean Solution" (after a VS restart) and the content of my bin\roslyn folder gets deleted. Okay.

Then when I rebuild the solution the files in bin\roslyn show up again. But the version of csc.exe here is 2.9.0.63208. Shouldn't this be the 3.0.. version now?

And I realize that in "VS2017 &gt; Tools &gt; Extensions and Updates" there are these three extensions listed (which are marked as "Experimental" and all of which are listed to be of version 2.10.0.6350103):

- Roslyn Expression Evaluators
- Roslyn Interactive Components
- Roslyn Language Services

Do I need to uninstall or update these VS Extensions? (There's no updates offered in that dialog though).

Also confusing is that I was able to install the v3.0 NuGet package but the latest release listed on the Releases page of this GitHub project is v2.10.

Despite of this version mixture, my project is running fine. But I'm perfectly confused.

Is this all fine and, if not, how can I achieve a consistent state?

Thanks!</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34809</IssueID>
    <RepoID>1</RepoID>
    <Title>Make compilation outputs available via a workspace service</Title>
    <Description>Based on discussion on https://github.com/dotnet/roslyn/pull/34698. Instead of exposing paths/Streams on a project this change adds a workspace service that provides data from compiler output files.

The abstraction allows for the files to be in-memory or on a different machine. In the latter case it makes it possible to only transfer relevant parts of the output files rather then their entirety.

Fixes https://github.com/dotnet/roslyn/issues/34371</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34808</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement import completion for types</Title>
    <Description>Using existing symbol APIs.

This also includes changes to completion system originally proposed and reviewed in https://github.com/dotnet/roslyn/pull/34952

### Trigger:

A new tri-value checkbox is added to intellisense option page, which is set to `indeterminate` by default. This is back by an language specific `Option&lt;bool?&gt;` in the code.

This feature is enabled when
1.  this option value is `true`. 
2. the option value is `null` (default value) and `Roslyn.TypeImportCompletion` experiment is enabled in the host.

![image](https://user-images.githubusercontent.com/788783/56062935-d4aeaf80-5d22-11e9-8125-5e7973850a1a.png)




### Perf:

Some quick measurement done in code:

- First invocation in a solution can be slow. Since we are iterating all top level type symbols from all referenced compilations and PE references. Here's the number from `MS.VS.LanguageService.Charp.UnitTest`, which can reach 27 compilations and 232 PEs (including facade assemblies). As a result, 19011 distinct completion items are created, which takes 281ms (this is the time spendt in this completion provider, not the time to collect completion items from all providers)

![image](https://user-images.githubusercontent.com/788783/55662828-2491f180-57cc-11e9-9683-f1a7909d0115.png)

- Subsequent invocations would be faster, since we cache all the completion items (both roslyn and VS items). This is still true if edits has been made in the code, because we only need to recreate those items for current compilation.

![image](https://user-images.githubusercontent.com/788783/55662924-3b851380-57cd-11e9-8028-254af501f9fd.png)

Below are profiling results on a project with smaller reference footprint (a test project in roslyn-analyzers solutiin). The traces are collected from five consecutive completion list invocations *after* the completion was triggered at least once in the document, so the cache is populated already. The total completion items created by import completion is ~6,000.

A couple of key observations:
- the perf of Import completion provider is inline with regular symbol completion provider (59ms vs 37ms), with some opportunities for small improvements.
- the largest diff is in `CompletionServiceWithProviders.MergeAndPruneComletionList` (105ms vs 3ms), where almost 80ms is spent in `Sort` and `ToList` when import completion is provided. We should focus on this part first for further optimization.

(1) thread time stack with import completion disabled

![image](https://user-images.githubusercontent.com/788783/55693053-c9920300-5961-11e9-9e21-a0503f0bf5b6.png)

(2) thread time stack with import completion enabled

![image](https://user-images.githubusercontent.com/788783/55693076-e9292b80-5961-11e9-866d-4c85cdd2b199.png)


TODO:

- [x] Replacing existing VS item cache with CWT
- [x] Move import items after in-scope symbols
- [x] Fix debug scenario by fully qualifying the type name instead of attempt to add import
- [x] Add VB
- [x] Add C# tests
- [ ] Add VB tests
- [x] More profiling needs to be done.
- [x] Listen to workspace events and flush cache based on that
- [ ] Talk to editor team about items with same display text

@CyrusNajmabadi Could you please take a look?

Also @heejaechang for the experiment service part</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34807</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>06/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34806</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>06/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34805</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/04/2019</CreatedDate>
    <ClosedDate>06/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34804</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unnecessary code: was When generating constructor, trim known prefixes from argument name to get parameter name </Title>
    <Description>Fixes #33673 

When generating a constructor, the name of the constructor's parameter is based on the name of the argument that was passed to the constructor.  This PR removes any common prefixes  ("_", "m_", "s_", "t_") before creating the parameter name.</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34803</IssueID>
    <RepoID>1</RepoID>
    <Title>Highlighting call to local function calls ExtractMethodCodeRefactoringProvider to throw</Title>
    <Description>**Version Used**: 

Visual Studio 2017

**Steps to Reproduce**:

```cs
class Program {
    public static void Main() {
        int x = 1;
        int Func() =&gt; x + (x = 2);
        Func();
    }
}
```

Highlight the call to `Func();` on the last line

**Expected Behavior**:

Not throw an exception

**Actual Behavior**:

`ExtractMethodCodeRefactoringProvider encountered an error and has been disabled`

```
System.InvalidOperationException : Matrix does not contain Key 'AB'.
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
```

---

Method extraction with local functions turns out to be really hard yet again :wink: (Sorry if I spammed y'all with a bajillion Watsons while narrowing this down to a minimal repro)</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34802</IssueID>
    <RepoID>1</RepoID>
    <Title>🧹 Move Regex embedded language to the Features layer</Title>
    <Description>
    </Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34801</IssueID>
    <RepoID>1</RepoID>
    <Title>🧹 Fix layering issues with embedded languages interfaces</Title>
    <Description>* Eliminate the distinction between `IEmbeddedLanguageEditorFeaturesProvider`, `IEmbeddedLanguageFeaturesProvider`, and `IEmbeddedLanguagesProvider` in the MEF catalog
* Eliminate the use of `Instance` members to bypass the declared `ServiceLayer` layering for features
* Eliminate the shadowing of `Language` properties with different contents depending on which service the property is accessed through</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34800</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable warning when tmp variable introduced</Title>
    <Description>**Version Used**: 
3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40

**Repro**:
```C#
#nullable enable
using System;

public class Program
{
    public static void Main()
    {
        A? itemA = GetA();

        if (itemA?.Value != null)
        {
            Console.WriteLine(itemA.Name); // no warning
        }

        B? tmp = itemA?.Value;
        if (tmp != null)
        {
            Console.WriteLine(itemA.Name); // warns
        }
    }

    private static A? GetA() =&gt; new A();

    class A
    {
        public string Name = "name";
        public B? Value = new B();
    }

    class B
    {
        public string? Value = "value";
    }
}
```

Here the first case guarded by `itemA?.Value != null` doesn't warn, but the second case guarded by the `tmp != null` variable does warn: "Possible dereference of a null reference."

I'm not sure if this is supposed to not warn or if this falls into the same theorem-proving area as https://github.com/dotnet/roslyn/issues/34665.

cc: @cston, @gafter, @dotnet/nullablefc</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34799</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement "character class" for analyzerconfig globs</Title>
    <Description>Implements the bracket syntax from Unix globs
(https://en.wikipedia.org/wiki/Glob_(programming)), commonly referred to
as "character classes" in regular expressions.</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34798</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement `where T: class` and `where T: struct` for overrides and implementations</Title>
    <Description>See https://github.com/dotnet/csharplang/issues/2378#issuecomment-479634969

The LDM has specified that an override method or an explicit implementation method may specify the `struct` or `class` constraint on type parameters, and that such constraints are checked that they are implied by the constraints on the method being implemented or overridden.

When the `class` constraint is used, a nullable annotation on that type parameter `T?` does not mean `Nullable&lt;T&gt;` but rather it is a nullable reference type.

This needs to be implemented.</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34797</IssueID>
    <RepoID>1</RepoID>
    <Title>Treat unconstrained type parameters declared in `#nullable disable` context as having an unknown nullability in case they are substituted with a reference type.</Title>
    <Description>As apposed to possibly nullable or not nullable reference type.
Fixes #29980.
Fixes #34844.</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34796</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Format `{}`"</Title>
    <Description>Reverts dotnet/roslyn#34619

@sharwell @Neme12 From discussion with Mads and Neal, this should be formatted with a space after all, for symmetry with the formatting of object initializer syntax.</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34795</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix netmodule build targeting net470 declaring a struct auto-getter</Title>
    <Description>@jaredpar @agocke @JoeRobich @jasonmalinowski 
</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34794</IssueID>
    <RepoID>1</RepoID>
    <Title>Move basic implementation of LSP into roslyn.</Title>
    <Description>Basic implementation of LSP in roslyn.  Added a bunch of tests and cleaned up a bit.

Things I know I need to do but haven't done in this PR are here - https://github.com/dotnet/roslyn/projects/45</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34793</IssueID>
    <RepoID>1</RepoID>
    <Title>🔼 Compute indices when OOP is disabled</Title>
    <Description>Fixes #34631

### Customer scenario

Solution crawler indexing is disabled in host environments that do not support OOP (e.g. Visual Studio for Mac), or where OOP has been manually disabled (e.g. some customer scenarios for Visual Studio).

### Bugs this fixes

#34631

### Workarounds, if any

None.

### Risk

Low. This does not change behavior for primary host environments where OOP is used.

### Performance impact

No significant impact.

### Is this a regression from a previous update?

Yes.

### Root cause analysis

#31644 (specifically commit 6f5be2ef2849b22dc185081ed9e389f02b80e473) assumed that OOP is supported by the host. This is not always the case, and Visual Studio for Mac scenarios failed as a result.

### How was the bug found?

Reported by developers on Visual Studio for Mac.

### Test documentation updated?

No.
</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34792</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable warning on Debug.Assert'd manually-implemented property</Title>
    <Description>**Version Used**: 
3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40

**Repro**:
```C#
#nullable enable
using System.Diagnostics;

public class Program
{
    public static void Main() { }

    public struct MyStruct&lt;T&gt;
    {
        private readonly T[]? _array;

        public MyStruct(T[] array)
        {
            _array = array;
            AutoProp = array;
            Field = array;
        }

        public T[]? ManuallyBacked =&gt; _array;
        public T[]? AutoProp { get; }
        public T[]? Field;

        public void Method()
        {
            Debug.Assert(Field != null);
            Debug.Assert(Field.Length &gt; 0);

            Debug.Assert(AutoProp != null);
            Debug.Assert(AutoProp.Length &gt; 0);

            Debug.Assert(ManuallyBacked != null);
            Debug.Assert(ManuallyBacked.Length &gt; 0);
        }
    }
}
```

This unexpectedly produces a warning on `ManuallyBacked.Length`:
"Possible dereference of a null reference."

As expected, `AutoProp.Length` and `Field.Length` do not warn.

cc: @cston, @jaredpar, @dotnet/nullablefc </Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34791</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid optimizing goto in SyntheticBoundNodeFactory.Switch()</Title>
    <Description>`SyntheticBoundNodeFactory.Switch()` is used to generate synthesized switch statements for async rewriters, and the `goto` maybe a branch outside of the current `try` block, so merging a `Beq` + `Br` might result in a conditional branch outside of the block which is not supported in the code generator.

Fixes #33542 
Fixes #34720</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34790</IssueID>
    <RepoID>1</RepoID>
    <Title>[WIP] Attempt to reduce allocations coming in from SQLite backend</Title>
    <Description>cc @sharwell 

Fixes #34789</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34789</IssueID>
    <RepoID>1</RepoID>
    <Title>Lots of capture classes allocations in SQLitePersistentStorage</Title>
    <Description>**Version Used**: 
3.0.0-beta4-19157-04

**Steps to Reproduce**:

1. Load a solution and do a small edit session
2. https://gist.github.com/Therzok/89843786060d0d417a4479450ca0090b

**Expected Behavior**:
Not as many allocations for operating the with database.

**Actual Behavior**:
The persistent storage allocates 1GB (and the IDE - VSMac - allocates a total of 3GB in this scenario). This cost is just operational, not data.
</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34788</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34787</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34786</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34785</IssueID>
    <RepoID>1</RepoID>
    <Title>use new CPS API to report designer attribute</Title>
    <Description>fix https://github.com/dotnet/roslyn/issues/33854

....

![image](https://user-images.githubusercontent.com/1333179/55761034-d6226400-5a12-11e9-9a1d-ca7155761ccd.png)

vs

.net framework 
![image](https://user-images.githubusercontent.com/1333179/55761075-f3efc900-5a12-11e9-9e9e-6a7607d19fe9.png)

...

.net core put this in csproj
![image](https://user-images.githubusercontent.com/1333179/55761089-01a54e80-5a13-11e9-9170-1204f3b51e73.png)

whereas .net framework put this in csproj
![image](https://user-images.githubusercontent.com/1333179/55761124-1f72b380-5a13-11e9-9f3b-014551c2028e.png)

it looks like
legacy "IVSMDDesignerService.RegisterDesignViewAttribute" will ignore designerAttribute "Form" for designer.cs file but new API "IProjectItemDesignerTypeUpdateService.SetProjectItemDesignerTypeAsync" accept it and change csproj file.

it looks like a bug on the IProjectItemDesignerTypeUpdateService side. </Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34784</IssueID>
    <RepoID>1</RepoID>
    <Title>remove unnecessary cancellation token and use one in OperationContext.</Title>
    <Description>the cancellation token will be removed from ICodeCleanUpFixer in next API update</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34783</IssueID>
    <RepoID>1</RepoID>
    <Title>"Use auto property" suggests removing a field in a serializable class</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

"Use Auto property" suggests removing a field in a serializable class with zero indication that this will break serialization.

``` VB
        &lt;Serializable()&gt;
        Private NotInheritable Class ResourcesDataFormat
            'List of resources
            Private ReadOnly _resources() As Resource ' &lt;!-- Use Auto Property

            Public Sub New(Resources() As Resource)
                _resources = Resources
            End Sub

            Public ReadOnly Property Resources() As Resource()
                Get
                    Return _resources
                End Get
            End Property

        End Class

```

**Expected Behavior**:

**Actual Behavior**:
</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34782</IssueID>
    <RepoID>1</RepoID>
    <Title>Freezing up when getting compilation</Title>
    <Description>Hello.
There is .sln file, which contains 2 projects: A and B. The  'A'  project refers to the 'B' project and vice versa.

Getting compilation for both projects goes from two threads: `project.GetCompilationAsync(cancellationToken).Result`

It freezes at the stage of getting a compilation.
External code (call stack) for both threads in the moment when they are expecting to get compilation:
```
mscorlib.dll!System.Threading.ManualResetEventSlim.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)
mscorlib.dll!System.Threading.Tasks.Task.SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)
mscorlib.dll!System.Threading.Tasks.Task.InternalWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)
mscorlib.dll!System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Compilation&gt;.GetResultCore(bool waitCompletionNotification)
```
CodeAnalysis packages version: **3.0.0**
MSBuild packages version: **16.0.461**

The link to download the project, on which the problem is reproduced: https://drive.google.com/open?id=1ajzX5w5Q97mp67zJZL8U3dhXSMUBl-8o

I hope, this information will be useful.
Thanks.</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34781</IssueID>
    <RepoID>1</RepoID>
    <Title>Report unboxing conversion of a possibly null value.</Title>
    <Description>Fixes #33359</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34780</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense misses internal LINQ variables available in Locals, Watch and Immediate windows</Title>
    <Description>**Version Used**: 16.0, 16.1

**Steps to Reproduce**:
```
using System;
using System.Linq;

class LetSample1
{
    static void Main(string[] args)
    {
        string[] strings = { "A penny saved is a penny earned.", "The early bird catches the worm.", "The pen is mightier than the sword." };
        // Split the sentence into an array of words            
        // and select those whose first letter is a vowel.           
        var earlyBirdQuery =
            (from sentence in strings
             let words = sentence.Split(' ')
             from word in words
             let w = word.ToLower()
             where w[0] == 'a' || w[0] == 'e'
             || w[0] == 'i' || w[0] == 'o'
             || w[0] == 'u'
             select new
             {
                 FirstWord = w.First(),
                 LastWord = w.Last()
             }).ToList();
        Console.ReadLine();
    }
}
```

Put a breakpoint at `select new`
`word` and `w` are available in the Locals window. They can be evaluated in the Watch window and in the Immediate window.

Type `w` in the Watch window or in the Immediate Window. 
**Expected**
Intellisense contains `word` and `w`
**Actual**
Intellisense does not contain `word` and `w`</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34779</IssueID>
    <RepoID>1</RepoID>
    <Title>Array of pointer not diagnosed</Title>
    <Description>As observed by https://github.com/dotnet/roslyn/issues/34693#issuecomment-479675820 the following program fails to report the incorrect use of a pointer type after https://github.com/dotnet/roslyn/pull/34739

``` c#
public class A {
    public class B {}
}

public class C&lt;T&gt; : A {
    public C&lt;string*[]&gt;.B field; // error: pointer to managed type
}
```

here is another case that isn't properly diagnosed:

``` c#
public class A
{
    public class Inner {}
}

public class B&lt;T&gt; : A where T : unmanaged
{
}

public class C
{
    B&lt;string&gt;.Inner field;
}
```
</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34778</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly struct metadata as source</Title>
    <Description>Implements part of #34650

- Metadata as source for readonly and ref struct
- Metadata as source for readonly members</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34777</IssueID>
    <RepoID>1</RepoID>
    <Title>VS hangs waiting in LightBulbSession</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/55596803-5d17c980-56ff-11e9-9be1-3d30fdbbec38.png)

Crash dump:

`%internal_share%\public\tomat\Bugs\34777`

Stack trace:
```
 	mscorlib.dll!System.Threading.Tasks.Task.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)	Unknown
&gt;	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(System.Func&lt;Microsoft.CodeAnalysis.Document&gt; getFromDocument, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken) Line 170	C#
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeCore.AnonymousMethod__0() Line 132	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(Microsoft.CodeAnalysis.Extensions.IExtensionManager extensionManager, object extension, System.Action action)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeCore(System.Func&lt;Microsoft.CodeAnalysis.Document&gt; getFromDocument, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken) Line 133	C#
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InnerInvoke(Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken) Line 119	C#
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.Invoke.AnonymousMethod__0(Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext) Line 102	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(string title, string message, bool allowCancel, bool showProgress, System.Action&lt;Microsoft.CodeAnalysis.Editor.Host.IWaitContext&gt; action)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.Invoke(System.Threading.CancellationToken cancellationToken) Line 97	C#
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbSession.InvokeAction.AnonymousMethod__0(Microsoft.VisualStudio.Language.Intellisense.Utilities.IWaitContext c)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VisualStudioWaitIndicator.Wait(string title, string message, bool allowCancel, System.Action&lt;Microsoft.VisualStudio.Language.Intellisense.Utilities.IWaitContext&gt; action)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbSession.InvokeAction(string categoryName, Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction action, int menuIndex)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulb.GetMenuItemForAction.AnonymousMethod__3()	Unknown

```
</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34776</IssueID>
    <RepoID>1</RepoID>
    <Title>Support GetServiceAsync in Roslyn</Title>
    <Description>VS is moving from GetService to GetServiceAsync but Roslyn's service is staying as synchronous API.

all is good usually, but there is some case where we want to set up service based on some info from VS which we need to use GetServiceAsync to get information from BG such as 
this
http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Experimentation/VisualStudioExperimentationService.cs,35

right now, we have options either does what the above code does or make initialization lazy.

it would be nice if we also have code path that is GetServiceAsync that calls InitializeAsync after service creation.

and we have something like IAsyncLanguageService and IAsyncWorkspaceService that uses the new pattern.

the point is having a supported way to get a service asynchronously whatever way that is.</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34775</IssueID>
    <RepoID>1</RepoID>
    <Title>Add telemetry to toggle block comment.</Title>
    <Description>Add some telemetry for toggle block comment.

Can retrieve data like # invocations (total, per user, etc...), split it up by content type (language).  Can also look at the performance in relation to the document size.</Description>
    <CreatedDate>05/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34774</IssueID>
    <RepoID>1</RepoID>
    <Title>'readonly event' should be suggested within struct</Title>
    <Description>When I start a member declaration with: `readonly event...`, `event` is no longer in the suggestion list and gets substituted with EventArgs.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34773</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34772</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34771</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34770</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34769</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify the representation of `NullableWalker.LocalState` to a `BitVector`</Title>
    <Description>Fixes #34766

Previously, every instance of `LocalState` required allocation.  Now we use `BitVector`, which stores state information inline in the bits of a primitive.

With the previous implementation of `BitVector` (32 bits inline), only about 1.3% of our nullable tests would require allocating any memory at all for nullable states.  However, I've updated `BitVector` to have 64 bits inline, and now only three of our tests require allocating memory for states.  Those three tests heavily exercise tuple conversions.
</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>07/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34768</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle nullability in recursive deconstruction:</Title>
    <Description>- Recurse into nested deconstructions
- Override visit VisitDeconstructValuePlaceholder to set the result as non null
- Update tests

Fixes https://github.com/dotnet/roslyn/issues/33005</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34767</IssueID>
    <RepoID>1</RepoID>
    <Title>.NET Compiler Platform SDK does not install in VS2019</Title>
    <Description>https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.NETCompilerPlatformSDK

The plugin advertises that it is compatible with VS2019 but the installer says otherwise:

![image](https://user-images.githubusercontent.com/303201/55594177-1c6d8e00-579b-11e9-904f-bf416d6c84bf.png)
</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34766</IssueID>
    <RepoID>1</RepoID>
    <Title>Use BitVector for NullableWalker.LocalState</Title>
    <Description>We should use `BitVector` in the implementation of `NullableWalker.LocalState`.  That will permit us to allocate and work with states without any memory allocation in the most common cases (fewer than 32 slots, but we could increase that to 64).
</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>07/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34765</IssueID>
    <RepoID>1</RepoID>
    <Title>Add back-compat overloads to prevent breaking change</Title>
    <Description>The changes here are just adding the back compat overloads, updating the *unshipped files, and sorting them.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34764</IssueID>
    <RepoID>1</RepoID>
    <Title>Pull Members Up UI fixes</Title>
    <Description>Fix more MAS and usability issues with PullMembersUp 

* Fix high contrast formatting
* Fix spacing of buttons 
* Change automation information to include class/interface instead of "named type"</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34763</IssueID>
    <RepoID>1</RepoID>
    <Title>Update nullable attribute in docs</Title>
    <Description>Update nullable attribute in docs to show NullableFlags</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34762</IssueID>
    <RepoID>1</RepoID>
    <Title>Reduce allocations in DiagnosticIncrementalAnalyzer</Title>
    <Description>This PR reduces allocations in DiagnosticIncrementalAnalyzer by a good
margin, 450MB for loading a solution and a short edit session.

The total allocations in VSMac were 3GB, and these amounted for 450MB.

Since the methods were private, implementations can be switched from
IEnumerable and LINQ to concrete enumerator iteration and removal
of lambdas with captures.

Fixes #34761</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34761</IssueID>
    <RepoID>1</RepoID>
    <Title>Lambda and boxed enumerator allocations in DiagnosticIncrementalAnalyzer</Title>
    <Description>**Version Used**: 
3.0.0-beta4-19157-04

**Steps to Reproduce**:

1. Open a solution in VSMac
2. Observe a lot of allocations in GetActiveFileStates

145MB Enumerable System.Linq.Enumerable.Where&lt;TSource&gt;(IEnumerable&lt;T&gt; source, Func&lt;T, TResult&gt; predicate)
145MB System.Linq.Enumerable+WhereEnumerableIterator&lt;TSource&gt;.Select&lt;TResult&gt;(Func&lt;T, TResult&gt; selector)
129MB 
System.Func&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+ActiveFileState&gt;, System.Boolean&gt;
48MB Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+StateSet+&lt;&gt;c__DisplayClass28_0


**Expected Behavior**:
Lambda captures and IEnumerable should be avoided there, it's coming in from a private method.

**Actual Behavior**:
Allocations.

Preparing a PR, opened an issue to add PerformanceSensitive attributes.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34760</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix version comparison</Title>
    <Description>In Microsoft.Managed.Core.targets we import Microsoft.Managed.EditorConfig.targets, but only if we're running in a version of MSBuild greater than or equal to 16.1. The problem with this is that the `MSBuildVersion` property is a three-part version (like 16.1.27) but is being compared to a two-part version (16.1). This sort of comparison can have unexpected behavior. For example, the expression `Version.Parse("16.1.0") == Version.Parse("16.1")` evaluates to `false`, and `Version.Parse("16.1.0") &gt; Version.Parse("16.1")` evaluates to `true`.

To avoid any such weirdness, here we make sure to compare to a three-part version number.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34759</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename project file designator from NullableContextOptions to NullableReferenceTypes</Title>
    <Description>`&lt;NullableContextOptions &gt;` feels like we're leaking an implementation detail. Even if the valid values that can be passed in are the same, the bulk will be `enable` or `disable`, so it should probably just be called `&lt;NullableReferenceTypes&gt;`.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>04/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34758</IssueID>
    <RepoID>1</RepoID>
    <Title>using partial load platform API</Title>
    <Description>connect IWorkspaceStatusService to the first version of IOperationStatusService from platform.

all test related code is also removed and now it is using one from platform which one can get from
"\\vspfs3\Public\AdrianV\Tools\Operation Progress\OperationProgressTestVsix.vsix"

the test window is located at
view-&gt;Other windows-&gt;OperationProgressToolWindow

![image](https://user-images.githubusercontent.com/1333179/55614801-accbb480-5742-11e9-8732-3b7b9eb2fd2c.png)
</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34757</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable warning on `default(T) == null`</Title>
    <Description>**Version Used**: 
3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40

**Repro**:
This program
```C#
#nullable enable
using System;

public class Program
{
    public static void Main() =&gt; Foo(new object());

    private static void Foo&lt;T&gt;(T item)
    {
        Console.WriteLine(default(T) == null);
        Console.WriteLine(item == null);
        Console.WriteLine(item.GetHashCode());
    }
}
```
produces two warnings:
- `default(T)`: "A default expression introduces a null value when 'T' is a non-nullable reference type.	"
- `item.GetHashCode()`: "Possible dereference of a null reference."

Several questions:
- Why does `default(T) == null` warn, and why is that more warn-worthy than `item == null`?  Is that a bug?
- If it's by design, is the appropriate action here to just `!` away the warning?
- It's confusing to me that the warning on `default(T)` says `T` is a "non-nullable reference type", but then trying to dereference `item`, which is of type `T`, says it's a "possible dereference of a null reference".  Are those messages correct?

cc: @gafter, @jaredpar, @dotnet/nullablefc </Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34756</IssueID>
    <RepoID>1</RepoID>
    <Title>Classify Catch variables as locals</Title>
    <Description>As noticed by @jmarolf, catch variables were not being classified as locals in the catch declaration. The semantic classifier was already classifying them within the catch body appropriately.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34755</IssueID>
    <RepoID>1</RepoID>
    <Title>Apply code cleanup changes by document instead of all at the end</Title>
    <Description>**Version Used**: 7e7f95bd33c1ed3f0256fc69811a0845bc6c7284

**Steps to Reproduce**:

1. Run code cleanup in project or solution

**Expected Behavior**:

Changes for each document are written to disk after the document is cleaned up.

**Actual Behavior**:

All changes are held in memory until the operation fully completes, and only then are written to disk.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34754</IssueID>
    <RepoID>1</RepoID>
    <Title>Compile warns for `throw &lt;potential-null&gt;`</Title>
    <Description>The compiler currently gives `warning CS8597: Possible null value.` for `throw null`. However, this is "valid" code as the language and runtime both spec this as throwing a `NullReferenceException`.

Given that an exception is being thrown and `throw null;` is considered valid; it might be worth considering not warning in this scenario.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34753</IssueID>
    <RepoID>1</RepoID>
    <Title>Inline temporary variable with multiple assignments</Title>
    <Description>**Version Used**: Visual Studio 2019 version 16.0

**Steps to Reproduce**:

```csharp
var x = 3;
x = x + 2;
Console.WriteLine(x);
```

Apply **Inline temporary variable** on the definition of `x`.

**Expected Behavior**:

```csharp
var x = 3 + 2;
Console.WriteLine(x);
```

**Actual Behavior**:

```csharp
var x = 3;
x = 3 + 2;
Console.WriteLine(3);
```</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34752</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34751</IssueID>
    <RepoID>1</RepoID>
    <Title>EditorConfig not working under Visual Studio 2019</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Professional 2019
Version 16.0.0
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:
1. Create .editorconfig at solution level
2. Add Rules
3. Open .cs file and add new method.
4. Apply autoformatting (CTRL + K, CTRL + D)

**Expected Behavior**:
Formatting is applied. Methods where formatting isn't applied are displayed as errors.

**Actual Behavior**:
Nothing happens.

**Other Information**:
This was working fine for me in Visual Studio Professional 2017.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34750</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert foreach to Linq not suggested</Title>
    <Description>This applies to Visual Studio 2019 release.

I tried a simple example of convert foreach to Linq using the the following code

```
using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main()
    {
        List&amp;lt;string&amp;gt; words = new List&amp;lt;string&amp;gt;( ) { &amp;quot;hello&amp;quot;, &amp;quot;world &amp;quot; };
        
        foreach( string word in words )
        {
            System.Console.WriteLine( word );
        }
    }
}
```
Doing Ctrl dot on the foreach convert to Linq was not suggested, convert to for was. There is a comment on this issue https://developercommunity.visualstudio.com/content/problem/402010/convert-linq-to-foreach-is-not-always-suggested.html saying &amp;quot;Only simple expressions are allowed now.&amp;quot; however the above example is about as simple as I can imagine. 
So is there something else you have to do to switch this on or has it been removed?

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/513784/convert-foreach-to-linq-not-suggested.html
</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34749</IssueID>
    <RepoID>1</RepoID>
    <Title>VS2019 - Expression Trees: Rosyln Analyzer incorrectly suggests converting an anonymous type with property assignment to a tuple</Title>
    <Description>In Visual Studio 2019, the Roslyn analyzer suggests converting an anonymous type to a tuple within an Expression Tree.
 
I encountered this while doing a LINQ Join, but can be reproduced with a simple Expression

```csharp 
Expression&lt;Func&lt;string, string, dynamic&gt;&gt; test =
    (par1, par2) =&gt; new { Parameter1 = par1, Parameter2 = par2 };
```

The analyzer gives a suggestion to Convert To Tuple and even shows the red squiggly lines denoting an error in preview. Applying the changes will throw a CS8143 error: &amp;quot;An expression tree may not contain a tuple literal&amp;quot;.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/513721/vs2019-expression-trees-rosyln-analyzer-incorrectl.html
VSTS ticketId: 835783_
_These are the original issue comments:_

Visual Studio Feedback System on 4/2/2019, 07:20 PM (30 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34748</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex HighLighting fails with verbatim interpolated string</Title>
    <Description>![image](https://user-images.githubusercontent.com/12449387/55541522-04521d80-567a-11e9-8381-17bfa05690b3.png)

In the image above, when you use $@&amp;quot;  &amp;quot; the syntax highlighting for RegEx stops working. 

Normally it looks like this: 
![image](https://user-images.githubusercontent.com/12449387/55541589-1d5ace80-567a-11e9-9684-bb278f3c4e19.png)


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/503671/regex-highlighting-fails-with-verbatim-interpolate.html
</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34747</IssueID>
    <RepoID>1</RepoID>
    <Title>Function names in tooltip of closing bracket get doubled - FunctionNameFunctionName()</Title>
    <Description>VS2019 preview 4.3. I haven't noticed this before and it might be temporary, but something is still causing it. It has survived at least one restart. When I point to the closing bracket of any function or class in any project, the name in the tooltip is shown twice in a row - like MainMain(). Only the name, not the keywords or parameters.

in VS 16.0 
![image](https://user-images.githubusercontent.com/12449387/55540827-9f49f800-5678-11e9-839c-634171aea288.png)

In VS 15.9 
![image](https://user-images.githubusercontent.com/12449387/55540936-d0c2c380-5678-11e9-8af0-22ec6c7a9236.png)


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/503222/function-names-in-tooltip-of-closing-bracket-get-d.html
</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34746</IssueID>
    <RepoID>1</RepoID>
    <Title>Hovering over indent line after catch only shows try</Title>
    <Description>Hovering over the ident line of a try catch statement. Hoverying over the line between the try braces shows the same information in the tooltip as hoving over the catch braces. Hovering over the catch braces should should the catch in the tooltip also.

![image](https://user-images.githubusercontent.com/12449387/55540188-5180c000-5677-11e9-9447-b867dd40f2fd.png)


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/510755/hovering-over-indent-line-after-catch-only-shows-t.html
VSTS ticketId: 833042_
_These are the original issue comments:_

Visual Studio Feedback System on 4/1/2019, 05:10 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34745</IssueID>
    <RepoID>1</RepoID>
    <Title>Duplicate reference when find all reference with mulit TargetFrameworks project</Title>
    <Description>**Version Used**: 
VS2019 16.0.0 Preview5.0
C# Tools 3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8
(Also on VS2017 15.9.7 preview1, 2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a)

**Steps to Reproduce**:

1. dotnet new classlib, and edit `TargetFramework` to `&lt;TargetFrameworks&gt;netstandard2.0;net461&lt;/TargetFrameworks&gt;`
2. Type the below codes
```cs
using System;

namespace ClassLibrary1
{
    public class Class1 : IDisposable
    {
        public void Dispose()
        {
            throw new NotImplementedException();
        }

        public void XX1()
        {
            var cts = new System.Threading.CancellationTokenSource();
            cts.Dispose();
        }
    }
}
```
3. Find all reference of `Class1.Dispose` in VS

**Expected Behavior**:
Not sure what's the expected behavior, but should not get more than 2 results
If only find `Class1.Dispose`, should get 0 result.
Or consider `IDisposable.Dispose` and get 1 result(or 2 for both targetframework)

**Actual Behavior**:
Get 3 results, and 2 of them in `netstandard2.0` group.
VS show one is reference to `CancellationTokenSource.Dispose` in `netstandard2.0\ref\netstandard.dll` and another is reference to `CancellationTokenSource.Dispose` in `net461\mscorlib.dll`
![image](https://user-images.githubusercontent.com/1819074/55537389-aad80600-56ee-11e9-810d-ad5ae1c69548.png)
</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34744</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio Crashes when trying to write to the immediatewindow from DTE</Title>
    <Description>Reported on 16.0.0-preview-4.4 

 ```
        var dte = GetCurrent();
            Window immediateWindow = dte.Windows.Item(&amp;quot;{ECB7191A-597B-41F5-9843-03A4CF275DDE}&amp;quot;);
            immediateWindow.Activate();
            CommandWindow cw = immediateWindow.Object as CommandWindow;
            cw.SendInput(&amp;quot;DateTime.Now&amp;quot;, false);
```
BANG
having another devenv debug the instance where I do that, doesn't surface an error.

event log:

Faulting application name: devenv.exe, version: 16.0.28721.148, time stamp: 0x5c941715
Faulting module name: msenv.dll, version: 16.0.28721.110, time stamp: 0x5c94036a
Exception code: 0xc0000005
Fault offset: 0x001254f5
Faulting process id: 0x6c20
Faulting application start time: 0x01d4e80f66a92304
Faulting application path: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\Common7\IDE\devenv.exe
Faulting module path: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\Common7\IDE\msenv.dll
Report Id: 5e7bf1fd-c3f6-4730-aced-a2c76552057b
Faulting package full name: 
Faulting package-relative application ID:

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/510759/visual-studio-crashes-when-trying-to-write-to-the.html
VSTS ticketId: 833085_
_These are the original issue comments:_

Visual Studio Feedback System on 4/1/2019, 05:08 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34743</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename preview changes livelocks (cannot close) after edits is preview window</Title>
    <Description>1. Create C# Console App.
2. Invoke rename on &amp;quot;Program&amp;quot; class name.
3. Enter new name, check &amp;quot;Preview changes&amp;quot;, click Apply.
4. Set focus on the code preview in the preview window.
5. Try typing some characters on the keyboard.
6. Press OK, Cancel, or X

**Expected** The preview window closes.
**Actual:**  The preview window does not close, need to terminate Visual Studio from Task Manager to get out.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/510757/preview-changes-livelocks-cannot-close-after-edits.html
VSTS ticketId: 833054_
_These are the original issue comments:_

Visual Studio Feedback System on 4/1/2019, 05:08 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34742</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34741</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34740</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34739</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix unconditional binding of pointer types</Title>
    <Description>Fixes #34693 </Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34738</IssueID>
    <RepoID>1</RepoID>
    <Title>SyntaxFacts.IsTrivia returns false for some trivia kinds</Title>
    <Description>**Version Used**: 3.0.0

**Steps to Reproduce**:

Call `SyntaxFacts.IsTrivia` on `SyntaxKind.PreprocessingMessageTrivia` and `SyntaxKind.SkippedTokensTrivia`.

**Expected Behavior**: Since the names of both `SyntaxKind`s end with "Trivia", I would expect `IsTrivia` to return `true` for them.

**Actual Behavior**:

```c#
SyntaxFacts.IsTrivia(SyntaxKind.PreprocessingMessageTrivia) == false
SyntaxFacts.IsTrivia(SyntaxKind.SkippedTokensTrivia) == false
```</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34737</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix wrong package name for VS debugger</Title>
    <Description>The VsDebugPresentationPackage does not follow the same
naming convention as the other packages. So the previous name
is wrong.</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34736</IssueID>
    <RepoID>1</RepoID>
    <Title>Move type to namespace - Doesn't add usings with multiple namespaces in file.</Title>
    <Description>Issue for #34223 

### Reproduce
With the following code, select move type to namespace on Class C2.  Enter a new (or existing namespace).
```csharp
namespace One
{
    using Two;
    class C1
    {
        private C2 c2;
    }
}

namespace Two
{
    class C2
    {

    }
}
```
#### Expected
If I enter 'Three' as the new namespace.
```csharp
namespace One
{
    using Three;
    class C1
    {
        private C2 c2;
    }
}

namespace Three
{
    class C2
    {

    }
}
```
#### Actual
Note the missing using in namespace One.  
```csharp
namespace One
{
    class C1
    {
        private C2 c2;
    }
}

namespace Three
{
    class C2
    {

    }
}
```</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34735</IssueID>
    <RepoID>1</RepoID>
    <Title>Add type and namespace declaration API</Title>
    <Description>This change was initially included in #34067. I have separated the change on compiler side and added unit tests.


new public compiler APIs (backed by declaration table)

```cs
public abstract partial class Compilation
{
    ...
    public abstract INamespaceDeclaration DeclarationRoot { get; }
    ...
}
```

```cs
namespace Microsoft.CodeAnalysis
{   
    public interface INamespaceOrTypeDeclaration
    {
        string Name { get; }

        ImmutableArray&lt;INamespaceOrTypeDeclaration&gt; Children { get; }

        bool IsNamespace { get; }

        bool IsType { get; }
    }

    public interface ITypeDeclaration : INamespaceOrTypeDeclaration
    {
        TypeKind TypeKind { get; }

        Accessibility DeclaredAccessibility { get; }

        int Arity { get; }

        new ImmutableArray&lt;ITypeDeclaration&gt; Children { get; }
    }

    public interface INamespaceDeclaration : INamespaceOrTypeDeclaration
    {
    }
}
```

@CyrusNajmabadi @jcouv @gafter 
FYI @dotnet/roslyn-compiler @dotnet/roslyn-ide </Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34734</IssueID>
    <RepoID>1</RepoID>
    <Title>Toggle Line Comment</Title>
    <Description>Editor team has implemented a command for toggle line comment.
We need to decide the functionality for this feature as well.

### Removing single line comment(s)
1.  The caret ($$) is inside a commented line.
```csharp
// var b$$ = 1;
```
2.  The caret is on the same line before a block comment with only whitespace.
```csharp
$$    // var a = 1;
```
3.  The selection ([| |])is entirely inside a single line comment
```csharp
// var [|a = |]2;
```
4.  The selection contains a single line comment (plus any whitespace)
```csharp
[|    // var a = 2;|]
```
5.  The selection contains only multiple single line comments (plus whitespace)
```csharp
[|    // var a = 2;
     
     // var b = 1;
   |]
```

### Adding single line comment(s)
Adding block comments will put single line comment markers at the least indentation level in the selection.

1.  Caret is anywhere on an uncommented line.
```csharp
var b$$ = 1;
```
Results in
```csharp
//var a = 1;
```
2.  Selection is inside an uncommented line.
```csharp
var [|a = 1;|]
```
Results in
```csharp
//var a=1;
```
3.  Selection contains multiple uncommented lines.
```csharp
var [|a = 1;
var b =|] 2;
```
Results in
```csharp
//var a = 1;
//var b = 2;
```
4.  The caret is inside a comment on partial commented line.
```csharp
var a = 1; // var b$$ = 2;
```
Results in
```csharp
//var a = 1; // var b = 2;
```
5.  Selection contains uncommented and commented lines.
```csharp
//var [|a = 1;
var b = 2;|]
```
Results in
```csharp
////var a = 1;
//var b = 2;
```
6.  Selection contains lines with different indentations.
```csharp
var a = 1;
    var b = 2;
```
Results in
```csharp
//var a = 1;
//    var b = 2;
```
7.  Selection contains line with partial comment.
```csharp
[|var //a =|] 1;
```
Results in
```csharp
//var //a = 1;
```
8.  Selection contains multiple lines with partial comment.
```csharp
[|var //a = 1;
var b = 2;|]
```
Results in
```csharp
//var //a = 1;
//var b = 2;
```

### Prior work

#### VSCode
No matter selection, it inserts a comment at the beginning of the line at the least indent.  Comments not at the beginning of the line are ignored.

#### Intellij
Similar to VSCode, except comments are inserted at the beginning of the line.</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34733</IssueID>
    <RepoID>1</RepoID>
    <Title>NU1608 warnings with 3.0</Title>
    <Description>**Version Used**: 
3.0

**Steps to Reproduce**:

1. Add v 3.0 of Microsoft.CodeAnalisys.CSharp.Scripting to project
2. Build

**Expected Behavior**:
No warninings

**Actual Behavior**:
NU1608	Detected package version outside of dependency constraint: Microsoft.CodeAnalysis.Workspaces.Common 2.8.0 requires Microsoft.CodeAnalysis.Common (= 2.8.0) but version Microsoft.CodeAnalysis.Common 3.0.0 was resolved.	

NU1608	Detected package version outside of dependency constraint: Microsoft.CodeAnalysis.CSharp.Workspaces 2.8.0 requires Microsoft.CodeAnalysis.CSharp (= 2.8.0) but version Microsoft.CodeAnalysis.CSharp 3.0.0 was resolved.	


I dont have an explicit reference to Microsoft.CodeAnalysis.Workspaces.Common or Microsoft.CodeAnalysis.CSharp.Workspaces and I cant see this as a dependency of any of the packages so not sure where to fix this, but if I add a package reference to Microsoft.CodeAnalysis.CSharp.Workspaces then the error goes away.
</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34732</IssueID>
    <RepoID>1</RepoID>
    <Title>Reword option 'Suggest usings for types in reference assemblies' </Title>
    <Description>Fixes #34684</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34731</IssueID>
    <RepoID>1</RepoID>
    <Title>Explicit delegate construction doesn't warn on nullable mismatch</Title>
    <Description>**Version Used**: 
3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40

**Steps to Reproduce**:
```C#
#nullable enable
using System;

public class Program
{
    public static void Main()
    {
        Action&lt;object?&gt; first = Method;
        Action&lt;object?&gt; second = new Action&lt;object?&gt;(Method);
    }

    private static void Method(object state) { }
}
```

There is warning on `first` ("Nullability of reference types in type of parameter 'state' of 'void Program.Method(object state)' doesn't match the target delegate 'Action&lt;object?&gt;'") but not on `second`.

![image](https://user-images.githubusercontent.com/2642209/55506239-ee653e00-5622-11e9-8ad2-99572a8e27cc.png)

cc: @cston, @jaredpar, @dotnet/nullablefc </Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34730</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unnecessary StreamJsonRpc reference</Title>
    <Description>This reference was no longer required after #34654 was merged.</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34729</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove workaround for automatic line ender with async completion</Title>
    <Description>
    </Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34728</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove InteractiveHost dependency from nuget packages</Title>
    <Description>Some of our packages list non-existing package dependency, which was mistakenly included by Interactive Window refactoring change.

`Microsoft.CodeAnalysis.InteractiveHost.dll` has no public API (it's an implementation detail), so we don't publish the dll in a nuget package.

Also fixes https://github.com/dotnet/roslyn/issues/29292.</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34727</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix commit tests</Title>
    <Description>The editor made a change for 16.0 RTM which invalidated a workaround we applied in #33828. When the CI was upgraded to this release, the tests started failing. This change ~~removes the workaround~~ and updates the tests to assert the behavior which is shipping in 16.1.P1.

The removal of the workaround will be sent as a separate PR to **master**.</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34726</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler should optimize common boolean return patterns</Title>
    <Description>**Version Used**: 
Rosyln master branch from 2nd April 2019

**Steps to Reproduce**:
[[Sharplab Demo](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAGAAhwEYBuAWACgcBmIgJgIGECBvKgzou4Ae14wEAygAteAVwwATAEJwA8gAcYaMGgBecKQApewAFZwAxjAK8AlGw5cbaAGYFdBNFDMHjMc9Zud2lHwFEAOwEMAjicBT+gQC+3j44IXYQGFCR8XHRnPG0BHwCBAAKCLyKiLruJmaWfoHBZs6ueoYmUTaZMUA)]
1. Have this code:
`public bool Proper(object o) {
        return o is object;
    }`
2. Also, have this unoptimized version
`public bool ShouldBeOptimized(object o) {
        if (o is object)
        {
            return true;
        }
        return false;
    }`

**Expected Behavior**:
Identical IL output, as they are semantically identical. This wouldn't be an issue but it does affect JIT output seemingly (JIT64 desktop, tested on Sharplab above) - it switches a `setcc ; movzx` pattern to a full branch, which is not ideal

**Actual Behavior**:
IL generation has an additional branch and changes the generated JIT

It is a very minor issue but was recommended to create an issue for it</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34725</IssueID>
    <RepoID>1</RepoID>
    <Title>PVS-Studio: Checking the Roslyn Source Code</Title>
    <Description>Once in a while we go back to the projects that we have previously checked using PVS-Studio, which results in their descriptions in various articles. Two reasons make these comebacks exciting for us. Firstly, the opportunity to assess the progress of our analyzer. Secondly, monitoring the feedback of the project's authors to our article and the report of errors, which we usually provide them with. Of course, errors can be corrected without our participation. However, it is always nice when our efforts help to make a project better. Roslyn was no exception. The previous article about this project check dates back to December 23, 2015. It's quite a long time, in the view of the progress that our analyzer has made since that time. Since the C# core of the PVS-Studio analyzer is based on Roslyn, it gives us additional interest in this project. As a result, we're as keen as mustard about the code quality of this project. Now let's test it once again and find out some new and interesting issues (but let's hope that nothing significant) that PVS-Studio will be able to find. Link: https://www.viva64.com/en/b/0622/</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34724</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect nullability mismatch warning for tuple conversion</Title>
    <Description>No warning should be reported for the following:
```C#
class Program
{
    static void Main()
    {
        (object, int?) t = ("", 0);
        (string, int) u = ((string, int))t;
    }
}
```
Result:
```
(6,27): warning CS8619: Nullability of reference types in value of type '(object, int?)'
    doesn't match target type '(string, int)'.
```</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34723</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect "name can be simplified" lightbulb with nullable</Title>
    <Description>**Version Used**: 
3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40

**Repro**:
```C#
#nullable enable
using System;

class Program
{
    static void Main()
    {
        string? s1 = null;
        string s2 = EnsureInitialized(ref s1!, () =&gt; "hello");
    }

    public static T EnsureInitialized&lt;T&gt;(ref T target, Func&lt;T&gt; valueFactory) where T : class? =&gt;
        target ?? (target = valueFactory());
}
```
That code produces a warning:
![image](https://user-images.githubusercontent.com/2642209/55490809-6111f180-5602-11e9-810f-29fe7d712a34.png)

The warning then goes away if I explicitly specify the type parameter as `string`:
![image](https://user-images.githubusercontent.com/2642209/55490889-84d53780-5602-11e9-8891-48eb66a01dce.png)
but as is visible above, the IDE then suggests that the type parameter is unnecessary, and accepting the auto-fix removes the type parameter and reintroduces the warning.

cc: @dotnet/nullablefc </Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34722</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34721</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34720</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn compiler fails on compiling for&gt;using&gt;try&gt;finally&gt;await</Title>
    <Description>**Version Used**: 
Windows 10.0.17763 Pro
Visual Studio 2017 Pro
Docker version 18.09.2, build 6247962

**Steps to Reproduce**:

1. Create NET.Core console app project with following code 

```
using System.IO;
using System.Threading.Tasks;

namespace ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            
        }
    }

    public class CompilerFail
    {
        private async Task AsyncMethod()
        {
            for (var i = 0; i &lt; 5; i++)
            {
                using (var wc = new MemoryStream())
                {
                    try
                    {
                        continue;
                    }
                    finally
                    {
                        await Task.Delay(1);
                    }
                }
            }
        }
    }
}
```
2. Create build docker file:
```
FROM mcr.microsoft.com/dotnet/core/sdk:2.2 AS build-env
WORKDIR /app

COPY ConsoleApp/ConsoleApp.csproj ./ConsoleApp/

RUN dotnet restore ConsoleApp/ConsoleApp.csproj

COPY ConsoleApp ./ConsoleApp 

RUN dotnet publish -c Release -o /app/out ./ConsoleApp/ConsoleApp.csproj
```
3. Run build in docker 
```
docker build .
```

**Expected Behavior**:
Project is built

**Actual Behavior**:
```
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error : FailFast: [/app/ConsoleApp/ConsoleApp.csproj]
p/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILOpCodeExtensions.GetLeaveOpcode(ILOpCode opcode) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.RewriteBranchesAcrossExceptionHandlers() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder.RewriteBranchesAcrossExceptionHandlers() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder.RealizeBlocks() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder.Realize() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GenerateImpl() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.Generate(Int32&amp; asyncCatchHandlerOffset, ImmutableArray`1&amp; asyncYieldPoints, ImmutableArray`1&amp; asyncResumePoints) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DiagnosticBag diagnostics, DebugDocumentProvider debugDocumentProvider, ImportChain importChainOpt, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(TypeCompilationState compilationState) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :  [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at System.Environment.FailFast(System.String, System.Exception) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at System.Environment.FailFast(System.String, System.Exception) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception) [/app/ConsoleApp/ConsoleApp.csproj/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILOpCodeExtensions.GetLeaveOpcode(System.Reflection.Metadata.ILOpCode) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder+BasicBlock.RewriteBranchesAcrossExceptionHandlers() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder.RewriteBranchesAcrossExceptionHandlers() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder.RealizeBlocks() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder.Realize() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GenerateImpl() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.Generate(Int32 ByRef, System.Collections.Immutable.ImmutableArray`1&lt;Int32&gt; ByRef, System.Collections.Immutable.ImmutableArray`1&lt;Int32&gt; ByRef) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt;) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(Microsoft.CodeAnalysis.CSharp.TypeCompilationState) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at System.Threading.ThreadPoolWorkQueue.Dispatch() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :  [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error : Exception details: [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error : System.InvalidOperationException: Unexpected value 'Beq' of type 'System.Reflection.Metadata.ILOpCode' [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILOpCodeExtensions.GetLeaveOpcode(ILOpCode opcode) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.RewriteBranchesAcrossExceptionHandlers() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder.RewriteBranchesAcrossExceptionHandlers() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder.RealizeBlocks() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CodeGen.ILBuilder.Realize() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GenerateImpl() [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.Generate(Int32&amp; asyncCatchHandlerOffset, ImmutableArray`1&amp; asyncYieldPoints, ImmutableArray`1&amp; asyncResumePoints) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DiagnosticBag diagnostics, DebugDocumentProvider debugDocumentProvider, ImportChain importChainOpt, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(TypeCompilationState compilationState) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [/app/ConsoleApp/ConsoleApp.csproj]
/usr/share/dotnet/sdk/2.2.202/Roslyn/Microsoft.CSharp.Core.targets(58,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() [/app/ConsoleApp/ConsoleApp.csproj]
The command '/bin/sh -c dotnet publish -c Release -o /app/out ./ConsoleApp/ConsoleApp.csproj' returned a non-zero code: 1
```
</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34719</IssueID>
    <RepoID>1</RepoID>
    <Title>Allowing custom attributes to prevent unused parameter flagging for methods exported via Xamarin runtimes</Title>
    <Description>**Version Used**: 
3.0.0-beta4-19157-04

**Steps to Reproduce**:

1. Create a Xamarin.iOS project, for example
2. Export some method to native that's not used in managed.

```csharp
	public class MyCustomButton : UIButton
	{
		[Export("performClick:")]
		void Click(NSObject o)
		{
		}
	}
```

3. Observe unused code diagnostics are reported

**Expected Behavior**:
Unused code diagnostics don't flag scopes marked with `[Foundation.ExportAttribute]`.

**Actual Behavior**:
We see members marked as unused, and they might get removed on bulk operations like fix all.

Attributes that need to be inserted somehow [here](http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/RemoveUnusedParametersAndValues/AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.cs,158): `Java.Interop.ExportAttribute`, `Foundation.ExportAttribute`

How can that be done?</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34718</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow overriding members with nullable variance</Title>
    <Description>Implements a design change where overrides are allowed to change the
type of the member as long as there is an implicit nullable reference
conversion from the overriding type to the overridden type according to
the nullable variance rules.

Fixes #23268
Fixes #30958</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>04/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34717</IssueID>
    <RepoID>1</RepoID>
    <Title>Poor inference when passing ref nullable variable that happens to be non-null</Title>
    <Description>The type parameter below is inferred as `string` rather than `string?`, even though the first parameter is a ref to a variable declared `string?` and the second is a null literal.

``` c#
#nullable enable
using System.Collections.Generic;
using System.Threading;

class Program
{
    static void Main() { }

    static string? _field;
    static void Foo(IEnumerable&lt;object&gt; source)
    {
        if (_field != null)
        {
            string? s = Interlocked.Exchange(ref _field, null); // unexpected warning
        }
    }
}
```

Can we do better?

Originally observed at https://github.com/dotnet/coreclr/pull/23609#discussion_r270700806</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34716</IssueID>
    <RepoID>1</RepoID>
    <Title>Why extension methods do not work for dynamic values when method parameters are dynamic already. Compiler error CS1973.</Title>
    <Description>**Version Used**:  Any

**Steps to Reproduce**:

1. Create extension method with dynamic parameters already:
```cs
public static class Extensions
{
    public static dynamic If(this bool p, dynamic @then, dynamic @else) =&gt; p ? @then : @else;
}
```

2. Call this method with dynamic values.
```cs
    dynamic t = "then";
    dynamic e = "else";
    Console.WriteLine( true.If(t, e) ); // Compiler error CS1973.
```

3. But next code works
```cs
    dynamic t = "then";
    dynamic e = "else";
    Console.WriteLine( true.If((object)t, (object)e) );
```

**Expected Behavior**:

Support extension methods for dynamic values when method parameters are dynamic already.

**Actual Behavior**:

Compiler error CS1973.</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34715</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix usage of ConcurrentDictionary.AddOrUpdate</Title>
    <Description>The lambda here is used in the update scenario. Given we always want to
update and discard the existing value, we don't need to go through this
method.

Looking over the implementation, there's a few things to note:
* The indexer always adds or updates the value
* AddOrUpdate does a bit more logic so that it spins on the collection
checking if the value already exists while retrying the factory logic

This makes the code safe to switch to indexer and avoid the allocation

Fixes #33179

Contained squashed changes from other PR:
https://github.com/dotnet/roslyn/pull/33173/commits/8f64a8790283a32c786b35c65072df84cfc65f75
https://github.com/dotnet/roslyn/pull/33173/commits/a70422ed7c813e3679cbd3d7eeada84663877d11</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34714</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyzer to remove unnecessary null-forgiving operators</Title>
    <Description>Especially as the compiler improves its nullability analysis and reduces the number of false positive warnings for potential null dereferences (e.g. via improved attribution from https://github.com/dotnet/roslyn/issues/26761), we are going to find ourselves with unnecessary `!`s strewn throughout the codebase.  It would be helpful if there were an analyzer + auto-fix that would spot the unnecessary usage and enable automatically removing it.

cc: @jaredpar, @dotnet/nullablefc </Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34713</IssueID>
    <RepoID>1</RepoID>
    <Title>VS.NET 2019 Community Works only with .NET Core 2.1 SDK</Title>
    <Description>**Version Used**: 
VS.NET Community 16.0.0

**Expected Behavior**:
Able to use .Net Core 3 SDK preview3

**Actual Behavior**:
Doesn't even recognize it! Build the project gives Error NETSDK1045:
&gt; The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 3.0.	

There is something wrong with the community edition. I tried all the sorts of uninstall, restart re-install, and even ran a repair setup, but nothing changes!</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34712</IssueID>
    <RepoID>1</RepoID>
    <Title>Features/readonly members</Title>
    <Description>Related to #32911 and dotnet/csharplang#1710

All commits have been previously reviewed.

cc @jaredpar </Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34711</IssueID>
    <RepoID>1</RepoID>
    <Title>No nullable warning when lock'ing a potentially null object</Title>
    <Description>**Version Used**:
3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8

**Repro**:
```C#
#nullable enable
class Program
{
    static void Main()
    {
        object? obj = null;
        lock (obj) { }
    }
}
```

I expected a warning on `lock (obj)`, but none is issued.  In contrast, one is issued for `Monitor.Enter` (this is using a corelib that already has Monitor annotated):
![image](https://user-images.githubusercontent.com/2642209/55447727-e5c52700-5592-11e9-99b4-2a05ffbcd5d0.png)

cc: @cston, @dotnet/nullablefc </Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34710</IssueID>
    <RepoID>1</RepoID>
    <Title>Warn for parameter with `CancellationToken` type in async-iterator methods</Title>
    <Description>This is being confirmed with LDM by mail.
The warning should only produced for methods that have the `cancellationToken` variable (ie. not `IAsyncEnumerator`-returning async-iterators)

Relates to https://github.com/dotnet/roslyn/issues/24037 (async-streams umbrella)</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34709</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing diagnostics in async-iterator when `CancellationToken` type is missing</Title>
    <Description>Found this issue while implementing the `cancellationToken` variable (https://github.com/dotnet/roslyn/pull/34692).


```C#
        [Fact, WorkItem(34709, "https://github.com/dotnet/roslyn/issues/34709")]
        public void MissingTypeAndMembers_IAsyncEnumerator()
        {
            ...
            // We're missing a diagnostic for missing CancellationToken type
            // See https://github.com/dotnet/roslyn/issues/34709
            //VerifyMissingType(_enumerator, WellKnownType.System_Threading_CancellationToken);

            string enumerableWithCancellationToken = @"
using System.Threading.Tasks;
class C
{
    async System.Collections.Generic.IAsyncEnumerable&lt;int&gt; M() { await Task.CompletedTask; yield return 3; cancellationToken.ToString(); }
}
";
            // We're missing a diagnostic for missing CancellationToken type
            // See https://github.com/dotnet/roslyn/issues/34709
            //VerifyMissingType(enumerableWithCancellationToken, WellKnownType.System_Threading_CancellationToken);
        }
```

This issue is referenced in the test above.


Relates to https://github.com/dotnet/roslyn/issues/24037 (async-streams umbrella)</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34708</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow usage and capture of 'cancellationToken' in lambdas and local functions</Title>
    <Description>As part of the PR to add support for special `cancellationToken` variable (https://github.com/dotnet/roslyn/pull/34692), I blocked those scenarios temporarily to get the bulk of the feature working.

This issue is referenced in source and tests.

Should test:
- in lambdas
- in expression trees
- in nested local functions (some being async-iterators and some not)


Relates to https://github.com/dotnet/roslyn/issues/24037 (async-streams umbrella)</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34707</IssueID>
    <RepoID>1</RepoID>
    <Title>Sync namespace to folder reformats the entire document</Title>
    <Description>**Version Used**: 
2019 RTM

**Steps to Reproduce**:

1.  At $ run Sync namespace to folder

``` C#
using System;

namespace Namespace
{
    class Program
    {
        //          Column1               Column2
        [InlineData("FooBar",             "Bar")]
        [InlineData("FooBarFooBar",       "Bar")]
        [InlineData("FooBarFooBarFooBar", "Bar")]
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}

```

**Expected Behavior**:
``` C#
using System;

namespace Namespace.NewFolder
{
    class Program
    {
        //          Column1               Column2
        [InlineData("FooBar",             "Bar")]
        [InlineData("FooBarFooBar",       "Bar")]
        [InlineData("FooBarFooBarFooBar", "Bar")]
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}

```

**Actual Behavior**:
``` C#
using System;

namespace Namespace.NewFolder
{
    class Program
    {
        //          Column1               Column2
        [InlineData("FooBar", "Bar")]
        [InlineData("FooBarFooBar", "Bar")]
        [InlineData("FooBarFooBarFooBar", "Bar")]
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}

```

I cannot use this feature in any test project as it breaks all tables. Why does it need to reformat the document to fix the namespace?</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34706</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't complete statement on element access expression unless caret is inside bracketed argument list</Title>
    <Description>Fixes #34666

</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36837</IssueID>
    <RepoID>1</RepoID>
    <Title>Reference of type 'Microsoft.CodeAnalysis.UnresolvedMetadataReference' is not valid for this compilation when generating metrics.</Title>
    <Description>#### Analyzer package
Microsoft.CodeAnalysis.Metrics

#### Package Version
v2.9.1

#### Repro steps
1. Run the program in command line :
"C:\Users\ISYS36005\TFSWorkspaces\Dev\Source\packages\SchneiderElectric.Software.CodeMetrics.2.0.0\Metrics\metrics.exe" /project:"C:\Users\ISYS36005\TFSWorkspaces\Dev\Source\Ourproject\OurProject.csproj" /OUT:"C:\Users\ISYS36005\TFSWorkspaces\Dev\Source\Ourproject\bin\Debug\OurProject.dll.CodeMetrics.xml"

#### Expected behavior
it should generate the code metrics and if failing, give more details about what is wrong !

#### Actual behavior
Loading OurProject.csproj...
Computing code metrics for OurProject.csproj...
Reference of type 'Microsoft.CodeAnalysis.UnresolvedMetadataReference' is not valid for this compilation.
  Parameter name: references[0]</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34705</IssueID>
    <RepoID>1</RepoID>
    <Title>Use object== for original types rather than .Equals.</Title>
    <Description>
    </Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34704</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement cycle breaking rule for interfaces</Title>
    <Description>There is a specification for breaking binding cycles while binding an interface's base clause:

&gt; ### Binding base clauses
&gt; 
&gt; Interfaces now contain types.  These types may be used in the base clause as base interfaces.  When binding a base clause, we may need to know the set of base interfaces to bind those types (e.g. to lookup in them and to resolve protected access).  The meaning of an interface's base clause is thus circularly defined.  To break the cycle, we add a new language rules corresponding to a similar rule already in place for classes.
&gt; 
&gt; While determining the meaning of the *interface_base* of an interface, the base interfaces are temporarily assumed to be empty. Intuitively this ensures that the meaning of a base clause cannot recursively depend on itself. 
&gt; 
&gt; When an interface IB extends an interface IA, it is a compile-time error for IA to depend on IB. An interface ***directly depends on*** its direct base interfaces (if any) and directly depends on the type within which it is immediately nested (if any). Given this definition, and the definition of *directly depends on* for classes, the complete set of types upon which an interface depends is the reflexive and transitive closure of the directly depends on relationship.

It is possible that this rule is already implemented, or that some other cycle breaking algorithm is implemented.  Please ensure there is alignment between the implementation and the specification.
</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34703</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34702</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34701</IssueID>
    <RepoID>1</RepoID>
    <Title>Pattern based async disposal does not work on lifted nullable structs</Title>
    <Description>When implementing async disposal via pattern, you should be able to use a nullable version of the struct in the `await using` statement:

**Repro:**

```c#
using System;
using System.Threading;
using System.Threading.Tasks;

namespace System
{
    public interface IAsyncDisposable
    {
        ValueTask DisposeAsync();
    }
}

public class C 
{
    public static async Task M()
    {
        StructDisposer? a = null;
        await using (a) { } // DisposeAsync is not invoked
        
        StructDisposer? b = new StructDisposer();
        await using (b) { } // DisposeAsync is invoked
    }
}

public struct StructDisposer /*: IAsyncDisposable*/
{
    public async ValueTask DisposeAsync() =&gt; Console.WriteLine("DisposeAsync");
}
```

**Expected Behaviour:**

Compiles successfully.

**Actual Behavior:**

`error CS8410: 'StructDisposer?': type used in an async using statement must be implicitly convertible to 'System.IAsyncDisposable' or implement a suitable 'DisposeAsync' method.`

**Workaround**:

Explicitly implement the IAsyncDisposable interface, and the code will compile and run successfully. 

[jcouv update:] this issue is reference in the design doc. Should update the design doc when closing this issue.
</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34700</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect nullability of nested struct field</Title>
    <Description>No warning should be reported for `t.Item1.F.ToString()`:
```C#
struct S
{
    internal object? F;
}

class Program
{
    static void Main()
    {
        S s = new S() { F = 1 };
        var t = (s, s = new S()); // the `s = new S()` assignment affects Item1, but should not
        t.Item1.F.ToString();
        t.Item2.F.ToString(); // warning
    }
}
```
Result:
```
(12,9): warning CS8602: Dereference of a possibly null reference.
(13,9): warning CS8602: Dereference of a possibly null reference.
```</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34699</IssueID>
    <RepoID>1</RepoID>
    <Title>VB.NET Editor is messed up!</Title>
    <Description>**Version Used**: 
VS.NET 2019 Community Edition.
Win 10 x64 ver 1809 update KB4489899 (OS Build 17763.379)

**Steps to Reproduce**:
I am working on the Vazor project
https://github.com/VBAndCs/Vazor
Try any file in the project, for example: https://github.com/VBAndCs/Vazor/blob/master/WebApp1/Views/Home/Index.vazor.vb

**Expected Behavior**:
A usual editor behavior.

**Actual Behavior**:
The editor doesn't recognize most of the types, no Intellisense most of the time, no red line under unrecognized members and the go to definition command doesn't work! 
I faced some of these issues in the VS.NET 2019 preview, where the editor always shows me an error message at the top of the window after loading the project, but these issues were minimal. This got worst in the release! no error message, but nearly nothing is working!</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34698</IssueID>
    <RepoID>1</RepoID>
    <Title>Prototype: Storing compilation outputs in Project</Title>
    <Description>The EnC infrastructure needs to read data from the assembly and the PDB produced by the compiler.
Currently this information is not represented in Workspace layer, which is where we need to access it.

See https://github.com/dotnet/roslyn/issues/34371.

**Proposal**

Add new APIs that provide an access to the files that is abstracted from the file system, so that it allows projects to potentially compile in-memory and still provide the necessary data.

```C#
 public abstract class CompilationOutputs
 {
     /// &lt;summary&gt;
     /// Opens an assembly file produced by the compiler (corresponds to OutputAssembly build task parameter).
     /// &lt;/summary&gt;
     public abstract Stream OpenOutputAssembly();

     /// &lt;summary&gt;
     /// Opens a reference assembly file produced by the compiler (corresponds to OutputRefAssembly build task parameter).
     /// &lt;/summary&gt;
     public abstract Stream OpenOutputRefAssembly();

     /// &lt;summary&gt;
     /// Opens a PDB file produced by the compiler (corresponds to PdbFile build task parameter).
     /// &lt;/summary&gt;
     public abstract Stream OpenPdbFile();

     /// &lt;summary&gt;
     /// Opens a documentation file produced by the compiler (corresponds to DocumentationFile build task parameter).
     /// &lt;/summary&gt;
     public abstract Stream OpenDocumentationFile();

     public abstract override bool Equals(object other);
     public abstract override int GetHashCode();
 }
```

`OpenXxx` opens a new stream each time it's called. It's up to the caller to dispose the stream.
If the stream is backed by a file, the file is locked while the stream is being opened. The caller must make sure to close the stream as soon as it can to allow rebuild.

A file system specific implementation:

```C#
 public sealed class CompilationOutputFiles : CompilationOutputs, IEquatable&lt;CompilationOutputFiles&gt;
 {
     public string OutputAssemblyPath { get; }
     public string OutputRefAssemblyPath { get; }
     public string PdbFilePath { get; }
     public string DocumentationFilePath { get; }

     public CompilationOutputFiles(
         string outputAssemblyPath = null,
         string outputRefAssemblyPath = null,
         string pdbFilePath = null,
         string documentationFilePath = null);

     public CompilationOutputFiles WithOutputAssemblyPath(string path);
     public CompilationOutputFiles WithOutputRefAssemblyPath(string path);
     public CompilationOutputFiles WithPdbFilePath(string path);
     public CompilationOutputFiles WithDocumentationFilePath(string path);
 }
```
</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34697</IssueID>
    <RepoID>1</RepoID>
    <Title>Add spec for enhanced using</Title>
    <Description>Spec out the various parts of the enhanced using feature</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34696</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid a first-chance FileNotFoundException when a ruleset include is not found.</Title>
    <Description>When a .ruleset file includes a non-existing ruleset reference we receive null from ResolveIncludePath and throw a FileNotFoundException, which is the immediately caught in LoadRuleSet.

We can avoid the first-chance exception and the associated allocations if we just return null. A missing ruleset is not an exceptional situation so no need to use exceptions for control flow here if we can avoid it.

This is not blocking anything and not urgent, I was just passing by and noticed this and decided to fix.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34695</IssueID>
    <RepoID>1</RepoID>
    <Title>`t is null` with LangVersion 7 should produce a diagnostic</Title>
    <Description>Fixes #34678</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>06/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34694</IssueID>
    <RepoID>1</RepoID>
    <Title>Update shell framework version to consume partial load API.</Title>
    <Description>
    </Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34693</IssueID>
    <RepoID>1</RepoID>
    <Title>StackOverflow in the compiler</Title>
    <Description>**Repro:**
Compile the following program using the latest compiler bits:
```csharp
using System;
using System.Runtime.InteropServices;

namespace Interop
{
    public unsafe struct PROPVARIANT
    {
        public CAPROPVARIANT ca;
    }

    public unsafe struct CAPROPVARIANT
    {
        public uint cElems;
        public PROPVARIANT* pElems;
    }
}
```

StackTrace: 
[StackTrace.txt](https://github.com/dotnet/roslyn/files/3036089/StackTrace.txt)

</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34692</IssueID>
    <RepoID>1</RepoID>
    <Title>Add cancellationToken local symbol</Title>
    <Description>Inside an async-iterator method that returns `IAsyncEnumerable` (but not `IAsyncEnumerator`), a variable `cancellationToken` exists. It is implemented as a field on the state machine. We initialize it with the token passed as a parameter into `GetAsyncEnumerator(CancellationToken)`.

Parameters and type parameters of this name are disallowed on such async-iterators.
There is discussion of providing a warning on parameters of type `CancellationToken` as well, but I will do that in a follow-up (see below).
I temporarily blocked usage and capture of `cancellationToken` in local functions and lambdas due to time constraints.

Fixes https://github.com/dotnet/roslyn/issues/34407

- [x] Add a binder just after the InMethodBinder
- [x] Stored the synthesized local in the method. 
- [x] Checking IsIterator early is trouble (we need to determine if the local exists before binding the body of the method, but binding the body is currently required to determine if a method is an iterator) so I'm using the return type instead. The two are equivalent (otherwise an error is produced).
- [x] AsyncRewriter hoists the synthesized local.
- [x] GetAsyncEnumerator assigns the corresponding field with value from parameter.
- [x] Made local readonly. Don't assign a debug slot to this local. Add diagnostics for conflicts.
- [x] Report an error if the `CancellationToken` type is missing (filed https://github.com/dotnet/roslyn/issues/34709)
- [x] When a local function captures `cancellationToken` the async method should use that local function's environment, rather than its own field. (temporarily blocked this scenario. Filed https://github.com/dotnet/roslyn/issues/34708 to enable)
- [x] Add a warning for parameters of type `CancellationToken` (email thread with LDM, filed https://github.com/dotnet/roslyn/issues/34710)
- [ ] test EE (see comment in DefineUserDefinedStateMachineHoistedLocal) and EnC (add a declaration for 'cancellationToken', add a write statement)

Relates to https://github.com/dotnet/roslyn/issues/24037 (async-streams umbrella)</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34691</IssueID>
    <RepoID>1</RepoID>
    <Title>Test CSharpUpgradeProjectCodeFixProvider with mix of CSharp8 and Preview</Title>
    <Description>What happens if you have mixed versions Latest and Preview in different projects of your solution, and you use a Preview feature in a Latest project.  Will it upgrade everything to Preview?  Latest?</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34690</IssueID>
    <RepoID>1</RepoID>
    <Title>NGEN logging code is fixed in arcade</Title>
    <Description>This can be enabled in our builds now.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34689</IssueID>
    <RepoID>1</RepoID>
    <Title>Support `inlineDescription` parameter for `AssertSelectedCompletionIt…em` in ModernCompletionTestState</Title>
    <Description>Fix https://github.com/dotnet/roslyn/issues/33913

The actual fix was https://github.com/dotnet/roslyn/pull/34275</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34688</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable DotNetSdkTests.TestDiscoverEditorConfigFiles</Title>
    <Description>The `Microsoft.CodeAnalysis.BuildTasks.UnitTests.DotNetSdkTests.TestDiscoverEditorConfigFiles` test verifies that our MSBuild .props/.targets files can find .editorconfig files starting from the set of input .cs/.vb files. However, the latest implementation of this depends on MSBuild features that are not yet available in our build systems. As such we need to disable the test until such time as we can take a dependency on a newer MSBuild.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34687</IssueID>
    <RepoID>1</RepoID>
    <Title>Infer nullability in switch on conditional access operator</Title>
    <Description>Adds a test for an already-fixed issue
Fixes #34246</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>07/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34686</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-infer nullable result of switch expression</Title>
    <Description>Fixes #34233</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34685</IssueID>
    <RepoID>1</RepoID>
    <Title>Features that change a type's namespace should IVsRefactorNotify of the "rename"</Title>
    <Description>I'm not actually sure if this is supported on the WPF side, but when we move a type to a namespace (via that UI, or via sync namespace/folder structure), it'd be great if we could `IVsRefactorNotify` of that "rename" such that WPF can pick up on it and change the namespace for just that type.

Note, if you rename an entire namespace, IVsRefactorNotify works as expected. But this would be a different scenario that perhaps WPF wasn't expecting.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34684</IssueID>
    <RepoID>1</RepoID>
    <Title>Reword option 'Suggest usings for types in reference assemblies'</Title>
    <Description>From https://github.com/dotnet/roslyn/issues/34642#issuecomment-479165943:

&gt; The current option is unclear. We should change the text for the option to the following to better reflect its current (and still intended) behavior:
&gt;
&gt; &gt; Suggest usings for types in .NET Framework assemblies</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34683</IssueID>
    <RepoID>1</RepoID>
    <Title>Formatting `x is {} &amp;&amp; y` introduces a newline</Title>
    <Description>![format-braces](https://user-images.githubusercontent.com/12466233/55431119-91935600-5544-11e9-9a10-d1cbcfbc596b.gif)

FYI @gafter 
</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>01/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34682</IssueID>
    <RepoID>1</RepoID>
    <Title>Disallow declaration of static members in interfaces when target runtime doesn’t support Default Interface Methods.</Title>
    <Description>Fixes #34590</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34681</IssueID>
    <RepoID>1</RepoID>
    <Title>Variant type inference for nested nullability</Title>
    <Description>Given

``` c#
public interface IIn&lt;in T&gt; { }
    T M&lt;T&gt;(T x, T y) =&gt; x;
    IIn&lt;string?&gt; x;
    IIn&lt;object&gt;? y;
```

The result of `M(x, y)` should logically be of type `IIn&lt;string&gt;?`, as that is the most general type that both arguments can be converted to.  But we have not specified or implemented a type inference algorithm that is capable of producing that result.  The type produced is currently `IIn&lt;string?&gt;?`, which causes an error on conversion of `y` due to the nested nullability.

This affects array creation, the conditional operator, the switch expression, return type inference, and anywhere else that we use type inference.

/cc @MadsTorgersen </Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34680</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Language Feature Status</Title>
    <Description>FYI @333fred @jaredpar @gafter @MadsTorgersen @AlekseyTs @paul1956 @RikkiGibson </Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34679</IssueID>
    <RepoID>1</RepoID>
    <Title>TypeSymbolExtensions.CanContainNull() does not handle type parameters constrained to Nullable&lt;T&gt;.</Title>
    <Description>Reported in https://github.com/dotnet/roslyn/pull/34630#discussion_r271122325

`TypeSymbolExtensions.CanContainNull()` does not handle type parameters constrained to `Nullable&lt;T&gt;`.
</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34678</IssueID>
    <RepoID>1</RepoID>
    <Title>`t is null` with LangVersion 7 should produce a diagnostic</Title>
    <Description>The issue was reported by @varobc in https://github.com/dotnet/cli/issues/11020
FYI @peterhuene @333fred 

When this is fixed (likely in 16.1), this should be documented as a breaking change, albeit a short-lived one.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>06/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34677</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34676</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to 16.0 RTM build tools</Title>
    <Description>This changes our build tools to be 16.0 RTM.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34675</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable warning for class? and IDE IntelliSense could be improved</Title>
    <Description>**Version Used**:
3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8

**Repro**:
```
#nullable enable
using System.Threading;

class Program
{
    static string? s_nullableString;

    static void Main()
    {
        InterlockedCompareExchange(ref s_nullableString, "hello", null);
    }

    static T InterlockedCompareExchange&lt;T&gt;(ref T a, T b, T c) where T : class =&gt;
        Interlocked.CompareExchange&lt;T&gt;(ref a, b, c);
}
```

This results in the warning:
```
The type 'string?' cannot be used as type parameter 'T' in the generic type or method 'Program.InterlockedCompareExchange&lt;T&gt;(ref T, T, T)'. Nullability of type argument 'string?' doesn't match 'class' constraint.
```
It took me longer than it should have to realize that I could add a `?` to `class` to make it `class?`.

**Can we tweak the error message to highlight in some way that `class?` is syntactically possible?  Just knowing that was an option would have clued me in immediately.**

Also, the IDE support here is confusing.  This is the experience I get for the warning:
![image](https://user-images.githubusercontent.com/2642209/55406785-cabecc80-552a-11e9-838e-12e4913e17df.png)
Excellent, I think to myself, potential fixes!  Let's see how the IDE suggests I fix my nullability issues:
![image](https://user-images.githubusercontent.com/2642209/55406833-e4601400-552a-11e9-90a0-6bf4def10653.png)
Ummm…..
So to get rid of those, I applied the expression-bodied member fix.  Then it still shows "Show potential fixes":
![image](https://user-images.githubusercontent.com/2642209/55407035-46b91480-552b-11e9-8b9a-a3a8c916b24b.png)
but clicking it just makes the IntelliSense box go away, and nothing else is presented to me.

**Can we improve the potential fixes here to be relevant to the warning displayed?**

cc: @cston, @jaredpar, @dotnet/nullablefc
</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34674</IssueID>
    <RepoID>1</RepoID>
    <Title>Result of looking up `new` calls to delegates (e.g., Action and Func) is inconsistent with others</Title>
    <Description>Given an `ObjectCreationExpressionSyntax` node, I can typically lookup the bound constructor symbol with `var sym = Data.Model.GetSymbolInfo(node).Symbol;`. This works most of the time, but not when such call binds to a delegate such as `System.Action` or `System.Func`, e.g.: 

```
new Whatever(...); // OK
new System.Action(() =&gt;  Console.WriteLine("Hello World"); })(); // Not OK
```

I can still discover the desired symbol using the following logic (for these cases). But I 

```
if (node is ObjectCreationExpressionSyntax ctorCallN)
{
    var tySym = Data.Model.GetSymbolInfo(ctorCallN.Type).Symbol;
    if (tySym != null  &amp;&amp; tySym is INamedTypeSymbol namedTySym)
    {
            foreach (var membSym in namedTySym.GetMembers())
            {
                if (membSym is IMethodSymbol methSym
                        &amp;&amp; methSym.MethodKind == MethodKind.Constructor)
                    return methSym;
            }
    }
}
```

For consistency, I think the lookup above should be addressed to fix this behavior.

**Version Used**: 
2.10
</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34673</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34672</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixed broken link in documentation</Title>
    <Description>Fixed broken link to `DeclarePublicApiFix` example</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34671</IssueID>
    <RepoID>1</RepoID>
    <Title>can remove the semicolon at the end of statement?</Title>
    <Description>can remove the semicolon at the end of statement?
its too troublesome.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34670</IssueID>
    <RepoID>1</RepoID>
    <Title>Code fix preview fails to show diff for trailing whitespace changes</Title>
    <Description>The code fix for removing whitespace should say that, instead of "fix formatting"

![image](https://user-images.githubusercontent.com/1103906/55374697-200fd380-5555-11e9-8749-b321319ed820.png)

I did not have visible whitespace turned on and the resulting change showed no diff, so it I was confused at first.
</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34669</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable warning on dereference after previous dereference</Title>
    <Description>**Version Used**: 
3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8

**Repro**:
```C#
#nullable enable
using System;

class Program
{
    static void Main() { }

    static void Foo(object? obj)
    {
        obj?.GetHashCode();
        Console.WriteLine(obj.GetHashCode());
    }
}
```

The `Console.WriteLine(obj.GetHashCode());` triggers the warning "Possible dereference of a null reference", but there's no way this could null ref, as the previous line already dereferenced `obj` and would have thrown if it were null.

cc: @cston, @jaredpar, @dotnet/nullablefc </Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34668</IssueID>
    <RepoID>1</RepoID>
    <Title>No warning on uninitialized static non-nullable fields?</Title>
    <Description>**Version Used**:
3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8

**Repro**:
```C#
#nullable enable
using System;

class Program
{
    private static object s_foo;

    static void Main() =&gt; Console.WriteLine(s_foo.GetHashCode());
}
```
There's no warning here, but it will obviously null ref.  Shouldn't there be a warning for a non-nullable static field that's not initialized as part of the declaration or a static cctor?

cc: @cston, @jaredpar, @danmosemsft, @dotnet/nullablefc</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>28/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34667</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable not being tracked through foreach of enumerable in jagged array</Title>
    <Description>**Version Used**:
3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8

**Repro**:
```C#
#nullable enable
using System.Collections.Generic;

class Program
{
    static void Main() { }

    static void Foo(IEnumerable&lt;object[]?[]&gt; source)
    {
        foreach (object[][] item in source) { }
    }
}
```
I'd expect this to warn about mismatched nullability in types, since the type of `item` should really be `object[]?[]`, but it compiles without warning.

This code does warn as expected, though:
```C#
object[][] first = source.GetEnumerator().Current;
```
citing:
```
Nullability of reference types in value of type 'object[]?[]' doesn't match target type 'object[][]'.
```

cc: @cston, @jaredpar, @danmosemsft, @dotnet/nullablefc </Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34666</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] Attempting to put a trailing ';' after a verbatim string puts the semi-colon in the wrong location</Title>
    <Description>This is a regression from 15.9 &amp; 16.0 and only repros in 16.1

**Version Used**: 
Version 16.1.0 [28728.66.d16.1stg]

**Steps to Reproduce**:

Attempt to enter a ';' at the location indicated by $

``` C#
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

using Xunit;

namespace Microsoft.VisualStudio.ProjectSystem.VS.NuGet
{
    public class RestoreBuilderTests
    {
        private const string ProjectWithEmptyItems =
@"{
    ""CurrentState"": {
        ""NuGetRestore"": {
            ""Properties"": {
               ""TargetFrameworkMoniker"": "".NETFramework, Version=v4.5"",
               ""TargetFrameworks"": ""net45"",
               ""MSBuildProjectExtensionsPath"": ""C:\\Project\\obj""
            },
        },
        ""ProjectReference"": {
            ""Items"" : {}
        },
        ""PackageReference"": {
            ""Items"" : {}
        },
        ""DotNetCliToolReference"": {
            ""Items"" : {}
        }
    }
}"$
        [Fact]
        public void ToProjectRestoreInfo_WhenNoItems_ReturnsEmptyItemCollections()
        {
            var update = IProjectSubscriptionUpdateFactory.FromJson(ProjectWithEmptyItems);

            var result = RestoreBuilder.ToProjectRestoreInfo(update.CurrentState);

            Assert.Empty(result.ToolReferences);
            Assert.Equal(1, result.TargetFrameworks.Count);
            Assert.Empty(result.TargetFrameworks.Item(0).PackageReferences);
            Assert.Empty(result.TargetFrameworks.Item(0).ProjectReferences);
        }
    }
}

```

**Expected Behavior**:

``` C#
}";
        [Fact]
        public void ToProjectRestoreInfo_WhenNoItems_ReturnsEmptyItemCollections()
```
**Actual Behavior**:

``` C#
}"
        [Fact];
        public void ToProjectRestoreInfo_WhenNoItems_ReturnsEmptyItemCollections()
```</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34665</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable inference not tracking Boolean logic correctly with Debug.Assert</Title>
    <Description>Version:
3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8

```C#
#nullable enable
using System;
using System.Diagnostics;

class Program
{
    static void Main() { }

    static void Foo(object? first, object? second)
    {
        Debug.Assert(first != null || second != null);

        if (first != null)
        {
            Console.WriteLine(first.GetHashCode());
        }
        else
        {
            Console.WriteLine(second.GetHashCode());
        }
    }
}
```

This warns on the last line that `second` might be null ("Possible dereference of a null reference"), but the compiler should be able to see that's not possible, given the Assert that at least one of first or second is non-null and then that first is null.

cc: @cston, @jaredpar, @dotnet/nullablefc</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34664</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix MSB3277 warning in Xamarin.Remote</Title>
    <Description>
    </Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34663</IssueID>
    <RepoID>1</RepoID>
    <Title>Local function should be allowed to shadow parameter `value`</Title>
    <Description>![image](https://user-images.githubusercontent.com/12466233/55367695-2fcedf80-54a3-11e9-9780-5733343a69c9.png)

FYI @jaredpar, as suspected.

Tagging @cston 
</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34662</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34661</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34660</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34659</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34658</IssueID>
    <RepoID>1</RepoID>
    <Title>Current set of Netstandard 3.0 reference assemblies doesn't include types required to emit async methods, this blocks some test scenarios</Title>
    <Description>See Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.DefaultInterfaceImplementationTests.MethodModifiers_18

Update (jcouv): the test produces
```
    (8,5): error CS0518: Predefined type 'System.Runtime.CompilerServices.AsyncTaskMethodBuilder' is not defined or imported
    (8,5): error CS0656: Missing compiler required member 'System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create'
    (8,5): error CS0656: Missing compiler required member 'System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task'
```</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34657</IssueID>
    <RepoID>1</RepoID>
    <Title>Async Completion - Ctrl+Space isn't filtering the list (when non-unique)</Title>
    <Description>Fix https://github.com/dotnet/roslyn/issues/34601</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34656</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to BYOC pools</Title>
    <Description>This changes our pipelines to use the BYOC (Bring Your Own Cloud) pools
hosed by the core engineering team. This is a dynamic queue which should
scale better for our uses than the static pools we are using today.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34655</IssueID>
    <RepoID>1</RepoID>
    <Title>Target Typed Completion Prototype</Title>
    <Description>Use the `ITypeInferenceService` to offer a completion filter which restricts the list to items compatible with the inferred type at that location.

The completion list has to already be up somehow (typing or direct invocation), but then "Alt+J" (chosen somewhat arbitrarily to not conflict with other known filters) will filter down to just these items.

&lt;img src="https://user-images.githubusercontent.com/235241/55362849-1cfedf80-5490-11e9-81c6-2055f1cf5c00.gif" width=500/&gt;

With updated icon:

![image](https://user-images.githubusercontent.com/235241/55442839-2443ed00-5565-11e9-8a8b-8f24dfa4c4dd.png)

TODO:
- [x] Simple tests
- [ ] Better icon - in progress
- [x] Make experiment
- [x] Telemetry</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34654</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "move StreamJsonRpc to 2.x from 1.3.x"</Title>
    <Description>Reverts dotnet/roslyn#33960

reverting this until platform and other partners to move to 2.0 first due breaking functionality if only one team moves.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38295</IssueID>
    <RepoID>1</RepoID>
    <Title>Static field is not initialized if static constructor is external.</Title>
    <Description>@AlekseyTs commented on [Mon Apr 01 2019](https://github.com/dotnet/roslyn/issues/34651)

```
    class A
    {
        static int F = 2;

        extern static A();

        int M =&gt; F;
    }
```

Observed:
A warning is reported:
```
(5,23): warning CS0824: Constructor 'A.A()' is marked external
```

The code that would initialize the field ```F``` is not emitted anywhere.

Expected:
Should consider reporting an error on the field initialization.

---

@gafter commented on [Mon Apr 01 2019](https://github.com/dotnet/roslyn/issues/34651#issuecomment-478751774)

Reporting an error would require a language change.  Moving to `csharplang`.

</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34653</IssueID>
    <RepoID>1</RepoID>
    <Title>Use correct Solution snapshot in call to UpdateSolutionForBatch</Title>
    <Description>This was accidentally using the solution local variable in the containing method rather than the solution instance that's passed to the lambda. It happens to work only because no other mutations have yet happened, so s and solution will point to the same instance. But if anything else got reordered in this method stuff would break.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34652</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature request: available field name suggestions upon typo (based on e.g. Levenstein distance)</Title>
    <Description>Say you have a simple class:
```
class Animal 
{
	public int Age { get; set; }
	public string Name { get; set; }
}
```

And you make typo when writing value to a field:
```
var x = new Animal(){ Aeg = 10 };
```

Currenly compilation error is as follows:
```
 'Animal' does not contain a definition for 'Aeg'
```
Arguably, it's not very helpful. It's easy to find the right field in this simple example, could be more tricky with tens or hundreds of fields. IMO something like this would be better:
```
 'Animal' does not contain a definition for 'Aeg'. Did you mean 'Age'?
```
Suggestion can be made by calculating the edit distance to all available fields and displaying the one with the smallest edit distance.
The same logic can be applied when user mistypes a variable inside a method but I guess it's much broader problem, so having just accessible field suggestions would be a good start.

</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34651</IssueID>
    <RepoID>1</RepoID>
    <Title>Static field is not initialized if static constructor is external.</Title>
    <Description>```
    class A
    {
        static int F = 2;

        extern static A();

        int M =&gt; F;
    }
```

Observed:
A warning is reported:
```
(5,23): warning CS0824: Constructor 'A.A()' is marked external
```

The code that would initialize the field ```F``` is not emitted anywhere.

Expected:
Should consider reporting an error on the field initialization.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34650</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly members SymbolDisplay/MetadataAsSource</Title>
    <Description>- Make 'readonly' modifiers on methods, properties/indexers/events and accessors visible from metadata by updating MetadataAsSourceService
- Make 'readonly' modifiers on members visible in Quick Info by updating SymbolDisplayVisitor.Members</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34649</IssueID>
    <RepoID>1</RepoID>
    <Title>Code fix for WRN_ImplicitCopyInReadOnlyMember</Title>
    <Description>Possible fixes include:

- make an explicit copy of 'this'
- modify the invoked member to be 'readonly' if legal</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34648</IssueID>
    <RepoID>1</RepoID>
    <Title>Code fix to add 'readonly' to an existing member</Title>
    <Description>Possible scenarios where should be suggested:

- Declaration of a non-readonly method where the IDE determines that adding 'readonly' would be legal.
- Call site where the receiver is `ref readonly` and adding 'readonly' to the member would be legal.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34647</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract Method within a readonly member</Title>
    <Description>Extracting a method from a `readonly` member (method/accessor) should produce a `readonly` method.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34646</IssueID>
    <RepoID>1</RepoID>
    <Title>C# symbol tests crashing on Mono</Title>
    <Description>Beginning with Friday last week the C# symbol tests began crashing on Mono. Tried disabling the initial test but more are starting to fail. Disabling the suite until we can narrow this down.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34645</IssueID>
    <RepoID>1</RepoID>
    <Title>Decimal literal parsing is not deterministic</Title>
    <Description>Roslyn uses the function `decimal.TryParse` from BCL to parse decimal literals.  Some versions of the BCL do not get the precisely correct result in edge cases, therefore the compiler's output may depend on which runtime library it is run with.  See also #375 and https://github.com/dotnet/roslyn/issues/372#issuecomment-478350734 .</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34644</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider tracking nullability of indexer values</Title>
    <Description>```C#
class Program
{
    static void F(object?[] x, int i)
    {
        if (x[i] != null)
        {
            _ = x[i].ToString(); // warning
        }
    }
}
```
```
(7,17): warning CS8602: Possible dereference of a null reference.
```</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34643</IssueID>
    <RepoID>1</RepoID>
    <Title>Move type service requires 0 length span</Title>
    <Description>This tracks loosening that restriction now that it's useful as a service and a code action. Restriction can be removed when verification of selection span is added. </Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34642</IssueID>
    <RepoID>1</RepoID>
    <Title>Suggest using of types in referenced Assembly</Title>
    <Description>**Repro Steps** 
1. Create a class library (any kind) 
2. Add a reference to the binary by browsing to file path C:\Program Files\dotnet\sdk\NuGetFallbackFolder\newtonsoft.json\11.0.2\lib\netstandard2.0\Newtonsoft.json.dll 
3. Add a console Application to the same sln 
4. In your console application use the type from Newtonsoft.json 

You will get a suggestion 
![image](https://user-images.githubusercontent.com/12449387/55348801-ea8fbb00-546c-11e9-852e-9d13bc9a4ff5.png)

Another example 
![image](https://user-images.githubusercontent.com/12449387/55348895-1c088680-546d-11e9-8593-74df6d709346.png)

Also reported here 
We have a report of what looks like the same or similar bug, where a user reports that the quick fix added a reference to “..\..\..\..\..\..\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.1.0\ref\netcoreapp2.1\System.Collections.Immutable.dl”: https://developercommunity.visualstudio.com/content/problem/458599/warning-about-conflicts-between-system-libraries-a.html?childToView=503859#comment-503859

**Question** 
Is this by design and doesn't seem to be controlled by this option 
![image](https://user-images.githubusercontent.com/12449387/55349053-8de0d000-546d-11e9-8d88-291450aba3d4.png)





</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34641</IssueID>
    <RepoID>1</RepoID>
    <Title>Light bulb suggest to remove a parameter</Title>
    <Description>VB 16 RC4

make a XML variable with a embeded vb variable see picture:

Don't suggest to remove the parameter
![URI-Parameter](https://user-images.githubusercontent.com/49092462/55347520-67468780-54b5-11e9-927e-4c2c2a15f1b1.png)
</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34640</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature Request: Indicate Language of a string parameter with an attribute</Title>
    <Description>I'm really enjoying the new support for language highlighting of strings.

I just used it with the Shouldy unit testing framework's [ShouldMatch](https://github.com/shouldly/shouldly/blob/master/src/Shouldly/ShouldlyExtensionMethods/ShouldBe/StringContainsTestExtensions.cs#L98) method as follows:

```csharp
// lang=regex
files.First().Name.ShouldMatch(@"\/license\.[0-9]*\.txt");
```

I was wondering if it might be possible to add an attribute that indicates the language of a string parameter. That way shouldly could mark their method as follows:

```csharp
public static void ShouldMatch(this string actual, [Lang("regex")] string regexPattern);
```

and it would be unnecessary to declare the language in a comment at the use site. Instead I could just write:

```csharp
files.First().Name.ShouldMatch(@"\/license\.[0-9]*\.txt");
```

and roslyn would realize the string is a regex.

Note that I have no connection with the Shouldly Framework, and make no claim that they would use this attribute if it were supported.

</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34639</IssueID>
    <RepoID>1</RepoID>
    <Title>Misc infrastructure fixes</Title>
    <Description>Includes:

- Fix publish error on Build.Server.Log
- Fix cancellation race in our build task</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34638</IssueID>
    <RepoID>1</RepoID>
    <Title>Unnecessary nullability warnings from `as` expressions</Title>
    <Description>There should be no warnings in the following:
```C#
class Program
{
    static void F1(object x)
    {
        if ((x as object[]) != null)
        {
            _ = (x as object[]).Length;
        }
    }

    static void F2(object y)
    {
        if (y is object[])
        {
            _ = (y as object[]).Length;
        }
    }

    static void F3(object? z)
    {
        if ((z as object[]) != null)
        {
            _ = ((object[])z).Length;
        }
    }
}
```
Result:
```
(7,18): warning CS8602: Possible dereference of a null reference.
(15,18): warning CS8602: Possible dereference of a null reference.
(23,18): warning CS8600: Converting null literal or possible null value to non-nullable type.
(23,18): warning CS8602: Possible dereference of a null reference.
```</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>12/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34637</IssueID>
    <RepoID>1</RepoID>
    <Title>BasicLineCommit.CommitOnSave Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=139246&amp;view=ms.vss-test-web.build-test-results-tab) - Release Legacy run
```
Xunit.Sdk.ContainsException: Assert.Contains() Failure
Not found: Sub Main(x As Integer)
In value:  Module Module1
    Sub Main(x   As   Integer)
    End Sub
End Module

   at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicLineCommit.CommitOnSave() in /_/src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicLineCommit.cs:line 83.GetType().Name
   at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicLineCommit.CommitOnSave() in /_/src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicLineCommit.cs:line 83
```

![12 30 25-BasicLineCommit CommitOnSave-TargetInvocationException](https://user-images.githubusercontent.com/611219/55343437-f628b500-545f-11e9-9035-2b8d8095adb1.png)
</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34636</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow code fixes to modify the project file</Title>
    <Description>There are a number of useful cases where a code fix provider would need to add/modify project properties in order to fully implement a feature (i.e. the [AllowUnsafe](https://github.com/dotnet/roslyn/pull/25875) option went to some hoops to implement it, or changing `LangVersion`, etc.). There are also scenarios where a simple migration to a new feature just requires removing properties and therefore contributing towards a cleaner project file with less legacy properties lagging around as years go by.

A potential approach to this would be to add the project file itself as an `AdditionalFile`:

```xml
	&lt;ItemGroup&gt;
		&lt;AdditionalFiles Include="$(MSBuildProjectFullPath)" /&gt;
	&lt;/ItemGroup&gt;
```

And then the code fix could simply change the additional file text with the existing supported APIs:

```csharp
    private async Task&lt;Solution&gt; CreateChangedSolutionAsync(CodeFixContext context, Diagnostic diagnostic, CancellationToken cancellation)
    {
        var projectDoc = context.Document.Project.AdditionalDocuments
            .FirstOrDefault(doc =&gt; doc.FilePath.EndsWith(".csproj"));

        if (projectDoc == null)
            return null;

        var documentSyntax = Parser.ParseText((await projectDoc.GetTextAsync()).ToString());
        var newNode = documentSyntax.Accept(new AddPropertyVisitor("AndroidUseIntermediateDesignerFile", "True"));

        var text = await projectDoc.GetTextAsync(cancellation);
        var newDoc = context.Document.Project.Solution
            .WithAdditionalDocumentText(projectDoc.Id, SourceText.From(
                newNode.ToFullString(), text.Encoding))
            .GetProject(context.Document.Project.Id)
            .GetDocument(context.Document.Id);

        return newDoc.Project.Solution;
    }
```

In the above case, I'm using an [full-fidelity XML parser/editor](https://www.nuget.org/packages/GuiLabs.Language.Xml/) which results in the following IDE experience:

![image](https://user-images.githubusercontent.com/169707/55342554-714d9380-547f-11e9-9610-9eafb2a8f5f0.png)

Currently, applying that fix will result in the following exception, since it's not really a supported scenario:

```
System.AggregateException : One or more errors occurred. ---&gt; Error HRESULT E_FAIL has been returned from a call to a COM component.
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass17_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&gt; (Inner Exception #0) System.Runtime.InteropServices.COMException : Error HRESULT E_FAIL has been returned from a call to a COM component.
   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode,IntPtr errorInfo)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.InvisibleEditor..ctor(IServiceProvider serviceProvider,String filePath,IVsHierarchy hierarchyOpt,Boolean needsSave,Boolean needsUndoDisabled)
   at Microsoft.VisualStudio.LanguageServices.RoslynVisualStudioWorkspace.OpenInvisibleEditor(DocumentId documentId)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyTextDocumentChange(DocumentId documentId,SourceText newText)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyAdditionalDocumentTextChanged(DocumentId documentId,SourceText newText)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.Apply(Workspace workspace,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&lt;Unknown Parameters&gt;)&lt;---
```

But I think it would be quite useful if it "just worked". I would have expected it to work for CPS at least, since it does allow opening the .csproj in the editor and modifying it while the project is opened, but the same exception occurs for both project systems at the moment.


Just for reference, here's the visitor that adds that property based on the [GuiLabs.Language.Xml](https://www.nuget.org/packages/GuiLabs.Language.Xml/) package: 
```csharp
        class AddPropertyVisitor : SyntaxRewriter
        {
            bool propertyAdded = false;
            string name;
            string value;

            public AddPropertyVisitor(string name, string value)
            {
                this.name = name;
                this.value = value;
            }

            public override Microsoft.Language.Xml.SyntaxNode VisitXmlElement(Microsoft.Language.Xml.XmlElementSyntax node)
            {
                if (node.Name == "PropertyGroup" &amp;&amp; !propertyAdded)
                {
                    var elementSyntax = Parser.ParseText("\r\n\t\t" + new XElement(name, value));
                    propertyAdded = true;

                    return node.AddChild(elementSyntax.RootSyntax).AsNode;
                }

                return base.VisitXmlElement(node);
            }
        }
```</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34635</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature Request - Dynamic Interface</Title>
    <Description>Dynamic keyword allows us to access members without implementing a known interface and without knowing type.

But it leads to many issues when member names are named inconsistently and very difficult to enforce any naming convention.

```c#
class A {
   public string Name {get;set;}
}

public void Process(dynamic a) {
    a.name ... // no intellisense here !! 
    // also this will not work as n is small
}

// no compilation warning while calling method
A a = new ....
Process(a);
```

Dynamic Interface, dynamic interface does not exist at runtime, it only assists compiler to detect possible errors and warn. Anyone trying to implement dynamically marked interface will get an error that it is not possible.

```c#

// This is dynamic interface
public dynamic interface INamedClass {
    string Name {get;set;}
}

class A {
    public string Name {get;set;}
}

class B {
    public string name {get;set;}
}

// note nc is dynamic, it is not an classic c# interface
public void Process( INamedClass nc) {
    nc.name // compilation error
    nc.Name // correct.. // also intellisense is available
}


A a;
B b;

Process(a); // correct...

Process(b); // compilation error
```

**Benefits**
1. Intellisense
2. Compilation error for known interfaces
3. There is no need to change anything at runtime, it is only compilation step that does type/member checking

**Overhead**
1. Marking dynamic interface with some metadata to assist compilation</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34634</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34633</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34632</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34631</IssueID>
    <RepoID>1</RepoID>
    <Title>SymbolTreeInfoIncrementalAnalyzerProvider does not run anymore for VSMac</Title>
    <Description>**Version Used**: 
master

**Steps to Reproduce**:

1. Open a solution
2. Expect SymbolTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer to run
3. It does not

**Expected Behavior**:
It should run and cache symbol tree infos in the database.

**Actual Behavior**:
It does not, thus making symboltreeinfo operations slower in the IDE.

Regression as of https://github.com/dotnet/roslyn/commit/6f5be2ef2849b22dc185081ed9e389f02b80e473#r32981653</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34630</IssueID>
    <RepoID>1</RepoID>
    <Title>Assert MaybeNull is not used for value types other than Nullable&lt;T&gt;</Title>
    <Description>Added assert to `TypeWithState` constructor and fixed several call sites.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34629</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34628</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34627</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34626</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
</Issues>
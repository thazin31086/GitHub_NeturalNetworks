<Issues>
  <Issue>
    <IssueID>36106</IssueID>
    <RepoID>1</RepoID>
    <Title>Create new solution snapshot following option changes</Title>
    <Description>CodeStyle analyzers were not reanalyzing following Options being changed in Tool &gt; Options.</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36105</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove NonNullTypesOn/Off helper methods</Title>
    <Description>
    </Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36104</IssueID>
    <RepoID>1</RepoID>
    <Title>Export settings not export all text editor code styles</Title>
    <Description>VSF_TYPE_MARKDOWNso there are a lot of parameters in **Options &amp;gt; Text Editor &amp;gt; C# &amp;gt; Code Style &amp;gt; General** that are not exported to **Export Setting** file. i installed a fresh not synced VS instance and exported the setting environment and imported to a modified VS instance and i noticed that not all of code styles are changes, after furthure investigating i realized that not all of the code style rules exported in vssettings file, you can simply test this with below steps:

1- export your vs setting (File 1)
2- change rule **Prefer auto properties** to **Warning**
3- export your vs setting (File 2)
4- examinig the File 1 and 2 with a comparer and relize those are exactly the same

this is ok with top like 5 rules so i sure it should be working but i'm sure some of them are not working, not sure how many but some of them not exported in vssettings file.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/536234/export-settings-not-export-all-text-editor-code-st.html
VSTS ticketId: 849141_
_These are the original issue comments:_

Visual Studio Feedback System on 4/16/2019, 11:43 PM (44 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Rock Li [MSFT] on 4/23/2019, 02:26 AM (38 days ago): &lt;p&gt;Hi Masih, I performed the repro steps you provided that found something interesting:&lt;/p&gt;&lt;ol&gt;
&lt;li&gt; Export settings file01 from a fresh VS instance, did not restart VS and change the code style option "&lt;strong style="color:rgba(0, 0, 0, 1);"&gt;Prefer auto properties&lt;/strong&gt;&lt;span style="color:rgba(0, 0, 0, 1);background-color:rgb(255, 255, 255);"&gt; to &lt;/span&gt;&lt;strong style="color:rgba(0, 0, 0, 1);"&gt;Warning&lt;/strong&gt;", continue to export settings file02.&lt;/li&gt;&lt;li&gt;Open file01 and file02 by VS, and use command window compare them, almost no difference as picture one shows: &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;       &lt;/p&gt;&lt;p&gt;&lt;img id="69783" src="https://developercommunity.visualstudio.com/storage/temp/69783-one.png"&gt;&lt;/p&gt;&lt;p&gt;	3. Repeat the steps but restart VS every times once the settings changed, the compare has a different result: &lt;/p&gt;&lt;p&gt;&lt;img id="69784" src="https://developercommunity.visualstudio.com/storage/temp/69784-two.png"&gt;&lt;/p&gt;&lt;p&gt;I guess something could not correct reload after you changing the settings, so it was not exported immediately.&lt;/p&gt;&lt;p&gt;could you try restart VS when you change and export settings? does the issue still repro?&lt;/p&gt;
&lt;/ol&gt;

Masih Akbari on 4/23/2019, 04:23 AM (38 days ago): (private comment)
Visual Studio Feedback System on 4/23/2019, 08:01 PM (37 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

Rock Li [MSFT] on 4/23/2019, 08:02 PM (37 days ago): &lt;p&gt;Thanks for taking the time to report this issue to us. We’ve created a bug for this issue as internal tracking. The status on this Developer Community item will be updated as that bug is resolved. Thanks again for your feedback.&amp;nbsp;&lt;/p&gt;
Visual Studio Feedback System on 4/28/2019, 11:24 PM (32 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 4/28/2019, 11:55 PM (32 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36103</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a notice to Tools|Options pages where setting may be overridden by .editorconfig</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/19030

Adds text to the following pages:

**VB and C# Code Style | General**
![image](https://user-images.githubusercontent.com/25776963/58920649-08d19b80-86e8-11e9-839c-abca41c14533.png)

**VB and C# Code Style | Naming**
![image](https://user-images.githubusercontent.com/25776963/58920654-0bcc8c00-86e8-11e9-9a2e-93bfc1f7e082.png)

**C# Code Style | Formatting | General**
![image](https://user-images.githubusercontent.com/25776963/58920656-0e2ee600-86e8-11e9-8466-03e6de930793.png)

**C# Code Style | Formatting | Indentation (and New Lines, Spacing, and Wrapping)**
![image](https://user-images.githubusercontent.com/25776963/58920657-0ff8a980-86e8-11e9-95be-d3e9113c9f6d.png)

</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36102</IssueID>
    <RepoID>1</RepoID>
    <Title>Replace BoundDagEvaluation.Equals and GetHashCode with specific method for testing equivalence</Title>
    <Description>`BoundDagEvaluation.Equals(BoundDagEvaluation other)` compares original input and ignores any type evaluations (see https://github.com/dotnet/roslyn/pull/35669). That seems misleading for a general `Equals` method.

Since the method is only used for testing equivalence, perhaps `Equals(BoundDagEvaluation)` should be renamed (perhaps `IsEquivalentEvaluation`) and the `GetHashCode()` override could be removed.</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36101</IssueID>
    <RepoID>1</RepoID>
    <Title>There is no API to determine whether we are in a #nullable enable context</Title>
    <Description>If the IDE needs to know if we're in a #nullable enable'd context, there's no API today to do so. This comes up in a bunch of cases: if we're generating code from one file to another and one file has it enabled but the other doesn't, we need to know to drop annotations or add #nullable enable or other things.</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36100</IssueID>
    <RepoID>1</RepoID>
    <Title>support retries in integration tests</Title>
    <Description>Resolves #36058 </Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36099</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure we don't leak wrapped symbols from public Workspace APIs</Title>
    <Description>We have a few APIs on the Workspace level that return ISymbols; we should make sure we always return the unwrapped symbols otherwise we might break third parties.</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36098</IssueID>
    <RepoID>1</RepoID>
    <Title>made error and todo list initialization lazy</Title>
    <Description>basically, this introduce EventListener model and make event listener to be initialized lazily. giving features a way to get out from Workspace constructor. and yet can participate in the event without tight coupling from Workspace.
fixes https://github.com/dotnet/roslyn/issues/35514</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>03/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36097</IssueID>
    <RepoID>1</RepoID>
    <Title>Upgrade Microsoft.CodeAnalysis.FlowAnalysis.Utilities PackageReference to latest version</Title>
    <Description>Additionally, we do not mark the package reference to in Features.csproj as PrivateAsset as this leads to the assembly not getting included in the Features NuGet package and causes Omnisharp's analyzer execution to throw missing dependency assembly load errors.</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>01/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36096</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable inference in conditional expressions</Title>
    <Description>```cs
#nullable enable
using System;

public class Program
{
    static void Main()
    {
        string? x = ""42"";
        string? y = ""43"";
        if (x?.Length == 2 ? y?.Length == 2 : y?.Length == 3)
        {
            Console.WriteLine(x.Length); // 1
            Console.WriteLine(y.Length); // warns today, but perhaps shouldn't warn
        }
        else
        {
            Console.WriteLine(x.Length); // 2
            Console.WriteLine(y.Length); // 3
        }
    }
}
```

Note that if `x?.Length == 2` is changed to the constant `true`, only one warning is given: the one marked `// 3` in the sample.</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36095</IssueID>
    <RepoID>1</RepoID>
    <Title>Features/nullchecking binding</Title>
    <Description>Note this exclusively covers error cases of extern/interfaces/abstract classes/delegates. Working cases will be covered in the next PR.

Relates to https://github.com/dotnet/roslyn/issues/36024 (test plan for parameter null-checking)</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36094</IssueID>
    <RepoID>1</RepoID>
    <Title>Upgrade LSP version to latest inserted in VS and remove binding redirects</Title>
    <Description>Insertion failed RPS due to ngen errors on these assemblies.  Upgrading to a proper version that should be inserted into VS and remove binding redirects.

Note that for now we'll be using the in-box version, but we need to figure out what to for future releases.  </Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36093</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove uses of AllNullabilityIgnoringSymbolComparer in IMethodSymbolExtensions.RenameTypeParameters</Title>
    <Description>These were added because we have cases where we're passing around unwrapped types but the implementation is doing wrapping. This can be cleaned up once we unify on a final design.</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36092</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler is too restrictive about local variable scopes</Title>
    <Description>I understand that C# has always been this way. I'm asking for it to be changed.

**Version Used**: 

C# 7.3

**Steps to Reproduce**:

```
void Foo() {
  {
    int x = 5;
    Console.WriteLine(x);
  }
  int x = 6;
  Console.WriteLine(x);
}
```
```
[CS0136] A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
```

These are two different variables, and in reality, they have different scopes. Deleting the 2nd declaration of `x` wouldn't suddenly make the compiler think that the 2nd WriteLine was referencing the first `x`; it would be a compiler error.

 Other languages (e.g. TypeScript) get this right. There's no reason why C# can't figure it out.

</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36091</IssueID>
    <RepoID>1</RepoID>
    <Title>static local function compilation error while referencing constants</Title>
    <Description>**Version Used**: 
VS 16.1.1 stock compiler (ie no NuGet compiler packages)

**Steps to Reproduce**:

```c#
const int prevpage = -1, nextpage = -2;
static int StringActionToInt32(string act) =&gt; act == "+" ? nextpage : act == "-" ? prevpage : int.Parse(act);
```

**Behavior**:
That piece of code gives the following compilation error:

```
2&gt;MainWindow.xaml.cs(184,80,184,88): error CS8421: A static local function cannot contain a reference to 'nextpage'.
2&gt;MainWindow.xaml.cs(184,104,184,112): error CS8421: A static local function cannot contain a reference to 'prevpage'.
```

Note that this was only observed after following the automatic static function refactoring, which correctly added the `static` modifier on the function and nothing else, so the refactoring engine is also expecting this to work. 
</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36090</IssueID>
    <RepoID>1</RepoID>
    <Title>Use diagnostichelper and properly pass along severity.</Title>
    <Description>
    </Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36089</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix assembly version to 3.1.0.0 for 16.1 servicing</Title>
    <Description>@333fred @tmat @RikkiGibson @jasonmalinowski </Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36088</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix #36060: Group Completion Providers using IsExclusive</Title>
    <Description>As per the discussion in #36060, this PR attempts to introduce the change that would allow a `CompletionProvider` to add items to the list, even if another one sets `IsExclusive`, like in the example of an `OverrideCompletionProvider`. This is partially only there to support a feature used by VS Mac.

~It's marked as a WIP as I'd still like to introduce a test for this, but want comments on the change as soon as possible to see if I should change direction.~</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36087</IssueID>
    <RepoID>1</RepoID>
    <Title>Respect code style option severity in ConvertSwitchStatementToExpress…</Title>
    <Description>…ionDiagnosticAnalyzer

Fixes #36086</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36086</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0066 (ConvertSwitchStatementToExpression) does not respect severity from CSharpCodeStyleOptions.PreferSwitchExpression</Title>
    <Description>**Version Used**: 

Latest master

**Steps to Reproduce**:

1. Create a C# project with following code and `&lt;LangVersion&gt;preview&lt;/LangVersion&gt;`:
```csharp
using System;

namespace ConvertToSwitchExpression
{
    public class A
    {
        public string M1(int i)
        {
            switch (i)
            {
                case 0:
                    return "Zero";
                case 1:
                    return "One";
                default:
                    return "Multiple";
            }
        }
    }
}
```
2. Verify code fix to convert switch statement to switch expression is shown, and IDE0066 is a hidden diagnostic
3. Change severity of `CSharpCodeStyleOptions.PreferSwitchExpression` to Warning
![image](https://user-images.githubusercontent.com/10605811/58711740-ebad6d80-8373-11e9-968c-340a3ba00c2b.png)

**Expected Behavior**:
See a warning in error list and a squiggle in the editor on switch keyword.

**Actual Behavior**:
IDE0066 is always reported as a hidden diagnostic</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36085</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 shows a warning for extension methods</Title>
    <Description>**VS 2019 16.1.1**: 

**Steps to Reproduce**:

1. Create an extension method, e.g.

```csharp
using System;
using System.Web.Mvc;

namespace MvcApplication1.Helpers
{
     public static class LabelExtensions
     {
          public static string Label(this HtmlHelper helper, string target, string text)
          {
               return String.Format("&lt;label for='{0}'&gt;{1}&lt;/label&gt;", target, text);
          }
     }
}
```

2. A warning is shown, that the helper parameter is not used, which is correct but IMHO not the expected behaviour for an extension method.

**Expected Behavior**:
No warning is shown for a parameter passed with the this flag.
**Actual Behavior**:
A warning is shown</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36084</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Interactive Window - Specify .NET version to use</Title>
    <Description>How do you specify the version of .NET (specific version of Framework or Core as it may be) for use with the C# interactive window? 

This is important because if you are developing code in a newer or different version of .NET, you cannot readily use the `#r` to load your current project assembly and test out a path of code. 

I came across this issue recently when I was working on a .NET Core 3.0 P5 project and the C# Interactive threw all manner of funky errors before I realized that the root cause was the different .NET engines.

From what I can see, the VS IDE has no way to set this up via Configuration.</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36083</IssueID>
    <RepoID>1</RepoID>
    <Title>Is it a bug about Stash?</Title>
    <Description>**Version Used**: 16.1.1

**Steps to Reproduce**:

1. Create a console application, Add to source control, Git.
2. Modify program.cs, and Stash All.
3. Apply the Stash
4. Undo changes
5. Apply the Stash again

**Expected Behavior**: Apply succeed.

**Actual Behavior**:
Git operation failed because there are uncommitted changes. Commit or undo your changes before retrying. See the Output window for details.
</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36082</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix formatting on closing brace of property pattern</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/34683

Previously, we didn't treat the closing brace of a property pattern as belonging to an expression, so we'd insert a newline after it in a number of cases.

https://github.com/dotnet/roslyn/blob/6fea5ce25a06b3f8d5d8c0106fda948ef5995bbe/src/Workspaces/CSharp/Portable/Formatting/Rules/TokenBasedFormattingRule.cs#L53-L78</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>01/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36081</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix null reference in BindBase</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/29933</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36080</IssueID>
    <RepoID>1</RepoID>
    <Title>"Sequence contains no elements" in AbstractSymbolCompletionProvider for shared files</Title>
    <Description>**Version Used**: 
3.1.0-beta4-19261-04+33cfe1a0905264d80633c5154de57de6c0bb94a0

**Steps to Reproduce**:

1. Create Shared Project and 2 Console projects
2. Reference Shared Project from other 2 projects and add SomeClass.cs
3. Type something in SomeClass.cs that would invoke code completion

**Expected Behavior**:
No exception is thrown/logged
**Actual Behavior**:
Our log is being spammed by:
```
ERROR [2019-05-30 12:11:17Z]: Roslyn non-fatal exception
System.InvalidOperationException: Sequence contains no elements
  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00011] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-08/external/bockbuild/builds/mono-x64/external/corefx/src/System.Linq/src/System/Linq/First.cs:19 
  at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItems (System.Collections.Generic.Dictionary`2[TKey,TValue] originatingContextMap, System.Collections.Generic.Dictionary`2[TKey,TValue] invalidProjectMap, System.Collections.Generic.List`1[T] totalProjects, System.Boolean preselect, System.Collections.Immutable.ImmutableArray`1[T] inferredTypes) [0x0002a] in /_/src/Features/Core/Portable/Completion/Providers/AbstractSymbolCompletionProvider.cs:162 
  at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.GetItemsWorkerAsync (Microsoft.CodeAnalysis.Document document, System.Int32 position, Microsoft.CodeAnalysis.Options.OptionSet options, System.Boolean preselect, System.Threading.CancellationToken cancellationToken) [0x002b8] in /_/src/Features/Core/Portable/Completion/Providers/AbstractSymbolCompletionProvider.cs:352 
  at Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.ProvideCompletionsAsync (Microsoft.CodeAnalysis.Completion.CompletionContext context) [0x001f2] in /_/src/Features/Core/Portable/Completion/Providers/AbstractSymbolCompletionProvider.cs:320 
```
I was able to reproduce this also on Windows(debugging VS) but apparently it's sent to Watson instead of logging into a file...</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36079</IssueID>
    <RepoID>1</RepoID>
    <Title>??= operator in C# 8 marks parameter as unused</Title>
    <Description>Expected Behaviour: 
Parameters reassigned with ??= should be marked as used and referenced.

Actual Behaviour:
Parameters reassigned with ??= are marked as unused.

Screenshot 1: Parameter "user" is marked as "used" when not using ??= but the conventional way instead
![grafik](https://user-images.githubusercontent.com/1809172/58676206-0970d780-8360-11e9-8c94-cef72a5cc1c3.png)

Screenshot 2: Parameter "user" is marked as "unused" when using ??=
![grafik](https://user-images.githubusercontent.com/1809172/58676217-168dc680-8360-11e9-811a-c50fd5b1d5a1.png)

(Note: the "user" variable is referenced in code after the screenshots)</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36078</IssueID>
    <RepoID>1</RepoID>
    <Title>Update implicity declared type expression nullability:</Title>
    <Description>Small fix for semantic model bug I found working on other correctness bits

- When updating the implicit type in a declaration also update the bound type declaration nullability
- Add tests</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36077</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36076</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/05/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36075</IssueID>
    <RepoID>1</RepoID>
    <Title>InlineRename with file rename doesn't work for linked documents</Title>
    <Description>#36041 introduces this new feature, but linked documents are not working. 

We have a test for this, `RenameInLinkedFilesDoesNotCrash`, that currently has a comment references this issue to update the test when fixed. </Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36074</IssueID>
    <RepoID>1</RepoID>
    <Title>Deconstruct tuple drops await modifier on foreach</Title>
    <Description>Paste the following code into a C# 8 file:

```
            IAsyncEnumerable&lt;(int foo, int bar)&gt; enumerable = null;

            await foreach (var tuple in enumerable)
            {

            }
```

If you invoke the Deconstruct quick fix, we do something bad:

![image](https://user-images.githubusercontent.com/201340/58670072-b9a7f700-82f2-11e9-881d-2a86db7446f2.png)

(This bug courtesy of @DustinCampbell.)</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36073</IssueID>
    <RepoID>1</RepoID>
    <Title>Warn on misused nullability attributes</Title>
    <Description>1. In `void M([DisallowNull]string x)` the attribute is redundant.
Same in `void M&lt;T&gt;([DisallowNull]T t) where T : class` or `void M&lt;T&gt;([DisallowNull]T t) where T : struct`.

2. `[MaybeNull]int` or `[MaybeNull]int?`.

3. `void M([MaybeNull] string s)` (the attribute will affect the state of the argument, but why would anyone want that?)

4. `void M([DoesNotReturnIf(true)] out bool)`

5. `[MaybeNull, NotNullWhen(false)]` (should work per https://github.com/dotnet/roslyn/issues/36410)

6.  MaybeNull and NotNull conflict

7.  MaybeNullWhen(b) and NotNullWhen(b) (same b) conflict

8. `int M([MaybeNullWhen(true) string x)` should warn because return type is not `bool`

9. `[DisallowNull] string? Property { get { ... } }` or `[MaybeNull] string Property { set { ... } }` or `[DisallowNull] readonly string? field = ...;`

10. using `[DisallowNull]` or other attributes outside of a nullable annotations context (https://github.com/dotnet/roslyn/issues/36588)

11. using `[NotNullIfNotNull(parameter)]` for a parameter that doesn't exist

Note that some of those may be useful on `ref` parameters: `void M([DisallowNull]ref string? s)` or `void M([MaybeNull]ref string s)`.
Also, the conditional attributes seem useful on non-generic types: `[MaybeNullWhen(true)]string s` or `[NotNullWhen(true)]string? s`.

Relates to https://github.com/dotnet/roslyn/issues/36009 (Should [DisallowNull] apply to value types or nullable value types?)

Relates to PR https://github.com/dotnet/roslyn/pull/35955</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36072</IssueID>
    <RepoID>1</RepoID>
    <Title>MSBuildWorkspace: Loading a solution with a ProjectReference prevents compilation</Title>
    <Description>**Version Used**: 
Microsoft.Build.Locator v1.2.2
Microsoft.CodeAnalysis v3.1.0
Microsoft.CodeAnalysis.Workspaces.MSBuild v3.1.0


**Steps to Reproduce**:

_**See attached "RoslynTest.zip" for Zip file demonstrating problem. Unzip to C:\Source (or modify the code to point to correct location) and run RoslynTest.sln**_

[RoslynTest.zip](https://github.com/dotnet/roslyn/files/3238867/RoslynTest.zip)

1. Create a solution containing two netstandard2.0 libraries (A and B). Each solution should have a simple class in it.
2. Execute the code below, and note that both projects compile.
3. Add a ProjectReference so that B depends on A.
4. Execute the code below and note that only project A compiles.

```
static async Task Main(string[] args)
{
    MSBuildLocator.RegisterDefaults();
    using (var workspace = MSBuildWorkspace.Create())
    {
        workspace.WorkspaceFailed += (sender, workspaceFailedArgs) =&gt; WriteLine(workspaceFailedArgs.Diagnostic.Message);
        var solution = await workspace.OpenSolutionAsync(@"c:\source\ForRoslynTest\ForRoslynTest.sln");
        WriteLine($"Loaded solution {solution.FilePath}");

        var projectTree = workspace.CurrentSolution.GetProjectDependencyGraph();
        foreach (var projectId in projectTree.GetTopologicallySortedProjects())
        {
            await CompileProject(workspace.CurrentSolution.GetProject(projectId));
        }
    }
}

private static async Task CompileProject(Project project)
{
    WriteLine($"Compiling {project.Name}. It has {project.MetadataReferences.Count} metadata references.");
    var compilation = await project.GetCompilationAsync();
    var errors = compilation.GetDiagnostics().Where(diagnostic =&gt; diagnostic.Severity == DiagnosticSeverity.Error);
    if (errors.Any())
    {
        WriteLine($"COMPILATION ERROR: {compilation.AssemblyName}: {errors.Count()} compilation errors: \n\t{string.Join("\n\t", errors.Where(e =&gt; false).Select(e =&gt; e.ToString()))}");
    }
    else
    {
        WriteLine($"Project {project.Name} compiled with no errors");
    }
}
```

**Expected Behavior**:
Both projects compile with 0 errors.

**Actual Behavior**:
Project B fails to compile. In addition, project B reports that it has 0 Metadata references (whereas it has 113 without the PackageReference)

In particular, I note the following output reported:
```
Msbuild failed when processing the file 'c:\source\ForRoslynTest\DownstreamLibrary\DownstreamLibrary.csproj' with message: C:\Program Files\dotnet\sdk\2.1.602\Microsoft.Common.CurrentVersion.targets: (1548, 5): The "Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.  Confirm that the &lt;UsingTask&gt; declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.

Found project reference without a matching metadata reference: c:\source\ForRoslynTest\CoreLibrary\CoreLibrary.csproj

Loaded solution c:\source\ForRoslynTest\ForRoslynTest.sln

Compiling CoreLibrary. It has 113 metadata references.
Project CoreLibrary compiled with no errors

Compiling DownstreamLibrary. It has 0 metadata references.
COMPILATION ERROR: DownstreamLibrary: 3 compilation errors:
        c:\source\ForRoslynTest\DownstreamLibrary\Class1.cs(1,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)
        c:\source\ForRoslynTest\DownstreamLibrary\Class1.cs(5,18): error CS0518: Predefined type 'System.Object' is not defined or imported
        c:\source\ForRoslynTest\DownstreamLibrary\Class1.cs(5,18): error CS1729: 'object' does not contain a constructor that takes 0 arguments
```



</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36071</IssueID>
    <RepoID>1</RepoID>
    <Title>Object initializer syntax suggests assignment to Getter-Only Properties</Title>
    <Description>**Version Used**: 
Visual Studio 2019

**Steps to Reproduce**:

If you have this class:
````
public class Foo {
  public string Name {get; set;}
  public int Age {get; private set;}
}
````

When you type:
````
var F = new Foo() {
  //Popup appears here
````
The autocomplete popup lists Age as a member.  It shouldn't.  It can't be set.


**Expected Behavior**:
Don't suggest that I can assign to a getter only property.

**Actual Behavior**:
It suggests that I assign to a getter only property.</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36070</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master with param-nullchecking</Title>
    <Description>
    </Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36069</IssueID>
    <RepoID>1</RepoID>
    <Title>Formatting of comments with Dotnet Format</Title>
    <Description>
    </Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36068</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unused references/nuget packages </Title>
    <Description>**User Scenario**
Users should be able to
- see unused assemblies, packages, and project references
- remove unused references

**Design**

- [ ] 1.	https://github.com/dotnet/roslyn/issues/37768 The compiler team will provide an API to list used references in the compilation (or the same: unused references in the compilation). These are individual assembly references.

- [ ] 2.	https://github.com/dotnet/cli/issues/12168 The build team will generate a file with a map of assemblies, packages which can be checked for usage/non-usage.  MS Build will generated the file. If other environments are used, they have to provide this file on their own.

- [ ] 3.	https://github.com/dotnet/project-system/issues/5258 The project-system team will provide an API for fixing issues.

- [ ] 4.	https://github.com/dotnet/roslyn/issues/37769 The IDE team will look for both the compiler API, the file generated and the project-system API, and provide an analyzer with a fixer that will report references which can be removed.

- [ ] 5.	The project-system team will help with driving UI implementation. It can be grey out references with actions in the context menu or  a special user control like one described below. This can be decided later based on restrictions found on previous steps.

**UX Model**
The functionality should be available in the Solution Explorer. In an ideal case, we should grey out unused references directly in the Solution Explorer and add an option in the context menu to remove them. If this is not available e.g. due to performance reasons, please see the UX model below.

Here is the UX model in case if we cannot arrange this directly in the Solution Explorer:
1. In the Solution Explorer right click on either a project, a solution or the References node of a project.

2. Have 2 of the following options:
A. Right-click the selection and choose an option to Remove Unused References in the context menu.
B. Or a keyboard shortcut to Remove Unused References.

3. When selecting Remove Unused References have a dialogue that displays all references that have no actual usages in source code in a tree view grouped by projects. By default, all references are selected for deletion. If necessary, deselect references that you want to keep.

![nuget-package!](https://user-images.githubusercontent.com/46729679/60834821-6a1cdc80-a176-11e9-9bae-51a9e0fe5cf3.png)

4. Then select update to remove the unused references/nuget packages. </Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36067</IssueID>
    <RepoID>1</RepoID>
    <Title>Add new analyzer API (DiagnosticSuppressor) to allow programmatic sup…</Title>
    <Description>…pression of analyzer and/or compiler non-error diagnostics

Fixes #20242 
Fixes #30172

Detailed design proposal [here](https://gist.github.com/mavasani/fcac17a9581b5c54cef8a689eeec954a)</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36066</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable speculative snapshots in attributes</Title>
    <Description>Our current speculative strategy captures snapshots at positions in code, but it uses the containing symbol as an index for finding global states. Attributes do not have containing symbols, so it doesn't work for this scenario. We need to either support a null symbol as a key, or find a different method of storing the indexes.</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36065</IssueID>
    <RepoID>1</RepoID>
    <Title>SubscribeExternalErrorDiagnosticUpdateSourceToSolutionBuildEvents relies on implementation detail of KnownUIContexts.SolutionBuildingContext</Title>
    <Description>KnownUIContexts.SolutionBuildingContext throws NRE when `(IVsMonitorSelection)ServiceProvider.GlobalProvider.GetService(typeof(IVsMonitorSelection)))`,
is null.

This happens in tests since we can't mock a global service. 

Ideally, the platform would expose better APIs that notify about solution build events.
</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36064</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyzer diagnostics not showing up in error view</Title>
    <Description>I have a solution with multiple projects, one of them is an analyzer, which is built first and used in all of the other projects. Since I updated from Visual Studio 2017 to 2019, build errors (or warnings) from my analyzer are not showing up in the error view, even though they are shown in the build output.
I have updated from .NET standard 2.1 to 3.0 and from CodeAnalysis 2.10 to 3.1, but none of these updates seems to help. Am I missing something here? Thanks.</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36063</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename should be a no-op if the name is unchanged</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.2.0 Preview 2.0 [28928.284.d16.2stg]
VisualStudio.16.IntPreview/16.2.0-pre.2.0+28928.284.d16.2stg
Microsoft .NET Framework
Version 4.8.03752
**Steps to Reproduce**:

1. Invoke a rename
2. Hit enter 

**Expected Behavior**:
Nothing happens

**Actual Behavior**:
Rename seems to happen. If I choose an item with many references, the wait for this to happen dialog will pop up.
</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36062</IssueID>
    <RepoID>1</RepoID>
    <Title>Tag compiler diagnostics with the phase they originated from</Title>
    <Description>Add a category (_syntactic_, _semantic_/_binding_, _emit_) to the diagnostics reported by the compiler.

This feature is needed to address the following issues:
https://github.com/dotnet/roslyn/issues/36061
https://github.com/dotnet/roslyn/issues/1400
https://github.com/dotnet/roslyn/issues/3675
</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36061</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC analyzer reports duplicate semantic diagnostics</Title>
    <Description>1) Debug the following console app 
```C#
		static void Main(string[] args)
		{
		    int a = 10; // breakpoint here
		}
```

2) Change the code to:
```C#
		static void Main(string[] args)
		{
		    int a = 132408290348290;
		}
```
		
3) Press F10.

The error list contains duplicate semantic errors:

![image](https://user-images.githubusercontent.com/41759/58601318-19dc6180-823d-11e9-87b4-a03a1291d2d9.png)

This is because the EnC analyzer reports all diagnostics returned by EmitDifference and some of them (syntactic and binding) have also been reported by the diagnostic analyzer. The solution would be to only report emit diagnostics from EnC. But the compiler currently does not tag diagnostics with the phase they originated from.

See also https://github.com/dotnet/roslyn/issues/1400#issuecomment-83884093 and https://github.com/dotnet/roslyn/issues/3675#issuecomment-163436367

An alternative solution would be to call `compilation.GetDiagnostics()` and if there are any, do not attempt to emit and do not report any diagnostics (they were already reported by the diagnostic analyzer). However, this would significantly affect performance of applying the change. This operation is blocking - the customer can't continue debugging without changes applied, so doing as little work as possible is critical. The only diagnostics that need to block change application are those that prevent emitting the symbols affected by the change. Diagnostics on any other symbols can be ignored.</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36060</IssueID>
    <RepoID>1</RepoID>
    <Title>OverrideCompletionProvider should allow items to be added </Title>
    <Description>**Version Used**: 3.1.0-beta4-19261-04

Visual Studio for Mac has a _special_ behaviour that is specific to the way Xamarin/AppKit works. We offer the user "overrides" where they actually aren't overrides but _protocol member implementations_ (note: this is also _not_ an interface implementation but an Objective-C specific):

![image](https://user-images.githubusercontent.com/1932563/58651162-d4896400-8310-11e9-8d9b-b209e69f3eb6.png)

Picking `AddObserver` in the list above, would result in the following code being added:

```csharp
[Export("addObserver:forKeyPath:options:context:")]
public void AddObserver(NSObject observer, NSString keyPath, NSKeyValueObservingOptions options, IntPtr context)
{
    throw new System.NotImplementedException();
}
```

Recently, when moving away from [our old implementation of how we surface completion](http://source.monodevelop.com/#MonoDevelop.CSharpBinding/MonoDevelop.CSharp.Completion/CSharpCompletionTextEditorExtension.cs,466) items, we discovered that we can no longer add items to the `override` list. The assumption is that [this](http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/Completion/CompletionServiceWithProviders.cs,263) and [this](http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/Completion/Providers/AbstractOverrideCompletionProvider.cs,35) are the culprits. 

We're happy to contribute the required change, but feel like it should be discussed first, to make sure we take the right approach. Here are some of the possible ones:

1) Add a way to register completion providers in a way where we un-register the existing one. That way we could derive from `OverrideCompletionProvider` and extend it with our required logic.
2) Enable `OverrideCompletionProvider` to also call down to _another_ set of MEF-provided providers, to retrieve additional items. 
3) Change [this](http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/Completion/CompletionServiceWithProviders.cs,263) to take *all* contexts that had `IsExclusive` set to `true`. Potentially, there could be more metadata on the provider itself (i.e. a `Tag`) and we'd group exclusivity by the same tag as well).

Are we missing something obvious? Is any of the above options something that would be acceptable to PR?</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36059</IssueID>
    <RepoID>1</RepoID>
    <Title>Assert that nullable snapshots are taken in advancing source position</Title>
    <Description>For the speculative semantic model, we are currently taking snapshots based on position in source. We should add asserts to these snapshots that we are always taking a snapshot of advancing positions (ie, we never take a snapshot of a previous position in source). This will influence correctness, as the state could change after we move forward.</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36058</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto-retry failed integration tests</Title>
    <Description>Some flakiness in individual integration tests is outside the current control of this repository. We should implement an auto-retry strategy consisting of the following:

1. Run integration tests
1. If the previous step fails, run integration tests again but exclude all tests that passed in the previous step
1. Report failures from the second step to the build job

This change means the build will only fail if one or more tests fails twice in consecutive launches of the IDE for testing.</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36057</IssueID>
    <RepoID>1</RepoID>
    <Title>Scrollbar is nebulous in the diff window of vs2019</Title>
    <Description>It's the same project.
vs2017:
![vs2017](https://user-images.githubusercontent.com/2529999/58643969-ed0a7600-8332-11e9-8f0e-fb16dfbe9831.png)

vs2019:
![VS2019](https://user-images.githubusercontent.com/2529999/58644007-fa276500-8332-11e9-8df2-95eef0d12e71.png)

vs2017:
![vs2017_2](https://user-images.githubusercontent.com/2529999/58699592-6efcac80-83d0-11e9-93e9-55c83d61aec2.png)

vs2019:
![vs2019_2](https://user-images.githubusercontent.com/2529999/58699610-79b74180-83d0-11e9-96e7-6abf1deeb541.png)

vs2017 is clear, but vs2019 is nebulous.
</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36056</IssueID>
    <RepoID>1</RepoID>
    <Title>Microsoft.VisualStudio.LanguageServices 3.1.0 on NuGet.org has dependencies that are not on NuGet.org</Title>
    <Description>The latest stable [Microsoft.VisualStudio.LanguageServices NuGet package](https://www.nuget.org/packages/Microsoft.VisualStudio.LanguageServices/3.1.0) has a dependency on one package that is not on NuGet.org at all, and another on one which is a whole major version behind.

- [M.CA.EditorFeatures.Common 3.1.0](https://www.nuget.org/packages/Microsoft.CodeAnalysis.EditorFeatures.Common/) -&gt; 404
- [M.CA.EditorFeatures.Wpf 3.1.0](https://www.nuget.org/packages/Microsoft.CodeAnalysis.EditorFeatures.Wpf/) -&gt; Latest version 2.8.2

</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36055</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't capture BoundNode when creating a LazyNoneOperation</Title>
    <Description>Fixes #34918</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36054</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid renaming methods that don't change return type</Title>
    <Description>Fixes #33082</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36053</IssueID>
    <RepoID>1</RepoID>
    <Title>Error in code example in Wiki page (VB null condition example)</Title>
    <Description>On [this page on this repo's Wiki](https://github.com/dotnet/roslyn/wiki/New-Language-Features-in-VB-14#null-conditional-operators), the before-and-after examples don't match up.

**Code example before**:
``` VB.NET
Dim x = customer.Address?.Country

' is shorthand for
Dim _temp = customer.Address
Dim x = If(_temp IsNot Nothing, _temp.Address.Country, Nothing)
```
(`Address` is not a property of `customer.Address`)

**Code example after**:
``` VB.NET
Dim x = customer.Address?.Country

' is shorthand for
Dim _temp = customer.Address
Dim x = If(_temp IsNot Nothing, _temp.Country, Nothing)
```

(`_temp.Address.Country` becomes `_temp.Country`)

EDIT: removed link to my repo with the updated commit because it has my private email address on the commit.</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36052</IssueID>
    <RepoID>1</RepoID>
    <Title>GetTypeInfo returns NotNull for places where the variable isn't yet assigned</Title>
    <Description>Imagine this case:

```
string? s;
Foo(s);
```

When we call GetTypeInfo passing in the argument `s`, we get the flow state being NotNull. Although the question is somewhat meaningless in the case of an unassigned variable, it means GenerateMember invoked on Foo will generate the parameter with `string`. I'd propose that GetTypeInfo just returned the annotation in the case the variable is known to not be assigned.

Chatting with @333fred he observed the nullable analysis doesn't have access to definite analysis so that's why it's doing that. However we also observed that there's no way for the IDE to know _	either_ what is going on here short of us calling GetDiagnostics() and manually looking for diagnostics about use of uninitialized variables.</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36051</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>30/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36050</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36049</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement generate method and constructor with top-level nullability tracking wrapper</Title>
    <Description>This is an implementation of generate method with nullability, which tries to use an _experimental_ approach of creating our own implementation of ITypeSymbol that carries along top-level nullability. This means we can avoid having to change all our internal helpers away from passing around ITypeSymbol and incrementally update the support for the IDE.

Commit-at-a-time review suggested, since that'll split apart the wrappers themselves along with the actual "work" needed to fix the feature.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36048</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix import completion telemetry</Title>
    <Description>This is the cause of missing data for number of import items committed.

@dotnet/roslyn-ide 

FYI @vatsalyaagrawal @jinujoseph </Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>01/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36047</IssueID>
    <RepoID>1</RepoID>
    <Title>Compilation.Create*Type does not give a way to pass top-level nullabilities</Title>
    <Description>Right now the API gives you no way to specify top-level nullability of the members.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36046</IssueID>
    <RepoID>1</RepoID>
    <Title>INamedTypeSymbol.Construct() does not have a way to pass in nested nullabilities</Title>
    <Description>INamedTypeSymbol.Construct() lets you take a generic type and construct a, well, constructed generic type. But you can't give nested nullabilities -- it needs an overload or way to pass them in.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36045</IssueID>
    <RepoID>1</RepoID>
    <Title>Update TypeSymbolWithNullableAnnotation.Equals to always throw if you're comparing with a non-wrapped symbol.</Title>
    <Description>Right now TypeSymbolWithNullableAnnotation.Equals has an assert, but it's commented out. This is while we're transitioning, because until then when only part of the codebase is updated some comparisons are just going to happen that we can't fix yet. This bug is tracking enabling the assert fully, because we should be able to once we've made enough progress.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36044</IssueID>
    <RepoID>1</RepoID>
    <Title>AllNullabilityIgnoringSymbolComparer needs updating</Title>
    <Description>Right now I'm adding a NullabilityIgnoringSymbolComparer as a part of the nullability work, but right now it only disregards top-level nullability. The compiler is tracking the lack of a compiler API to ignore nested nullability in #35933. Once that's complete, then we should update this comparer to actually do the right thing, and unskip tests that are attached to this bug because we believe it should then work.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>01/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36043</IssueID>
    <RepoID>1</RepoID>
    <Title>Cursor movement doesn't make sense when renaming</Title>
    <Description>This may be too narrow but I hit a case today where it was really annoying, so for your consideration.

I had an enum I was trying to remove the beginning of. (Imagine several values all starting with `Keyword`.) What I wanted to do was:
1) place the cursor after the `d`
2) invoke rename 
3) Hit shift-home to select `Keyword`
4) hit backspace
5) hit enter

**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.2.0 Preview 2.0 [28928.284.d16.2stg]
VisualStudio.16.IntPreview/16.2.0-pre.2.0+28928.284.d16.2stg
Microsoft .NET Framework
Version 4.8.03752
**Steps to Reproduce**:

1. Place cursor in the middle of a name
2. invoke rename 
3. press left arrow

**Expected Behavior**:
Cursor is within the name and moves one character

**Actual Behavior**:
Highlight is removed and cursor is at the beginning of the name
</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36042</IssueID>
    <RepoID>1</RepoID>
    <Title>Add EditorConfig feature flag</Title>
    <Description>
    </Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36041</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow Inline Rename to also apply a file rename</Title>
    <Description>When doing inline rename on a named type (interface, enum, or class) show a checkbox to also rename the file. 

* The checkbox will always show if the kind supports file rename
* The checkbox will be disabled if any of the following is true:
    * The type is a partial type with multiple definition locations
    * The type does not currently match the file name
* Extend ISyntaxFactsService to add `IsTypeDeclaration` 
* Implement file rename as part of conflict resolution for inline rename. This will allow other features to do file rename that also use the conflict resolver, all they need to do is set the correct option. 

Still To Verify:
- [x] All valid type names correctly convert to file name
- [x] Strings pass UX design needs
- [x] Accessibility of new UI 
- [x] Shortcut key works correctly
- [x] Failing test on linked document
- [x] Don't break TypeScript implementation

### Enabled State Renaming A Class

![Inline_Rename](https://user-images.githubusercontent.com/475144/58595268-f7d6e500-8224-11e9-976c-3c481b0da19a.jpg)

### Disabled State Renaming A Class

![Inline_Rename_incompatible](https://user-images.githubusercontent.com/475144/58595305-0e7d3c00-8225-11e9-998a-467e58b45c22.jpg)

### Not Visible Renaming Method

![Rename_not_on_type](https://user-images.githubusercontent.com/475144/58595317-163ce080-8225-11e9-9ce4-75894c9842cc.jpg)

</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36040</IssueID>
    <RepoID>1</RepoID>
    <Title>supporting types from params in intellisense</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/36029</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36039</IssueID>
    <RepoID>1</RepoID>
    <Title>Should nullability attributes affect method bodies and OHI?</Title>
    <Description>Also, should they affect OHI (override/hiding/implementation)?

Relates to https://github.com/dotnet/roslyn/issues/35816
Relates to https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-15.md#discussion

```C#
    // should this warn?
    static void F1&lt;T&gt;(T t, [NotNull]out T t2) { t2 = t; }
```

```C#
    // should this warn?
    static void F1&lt;T&gt;([AllowNull]T t, out T t2) where T : class { t2 = t; }
```

```C#
    virtual void F1&lt;T&gt;(T t) { } // on base
    override void F1&lt;T&gt;([DisallowNull]T t) { } // on derived. Should this warn?
```

Stephen pointed out a scenario they hit:
```C#
internal class Foo&lt;T&gt; where T : class
{
    public bool TryGetValue2([MaybeNullWhen(false)] out T value) =&gt; 
        TryGetValue1(out value); // currently warns, but shouldn't

    public bool TryGetValue1([MaybeNullWhen(false)] out T value)
    {
        value = default!;
        return false;
    }
}
``` 

</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36038</IssueID>
    <RepoID>1</RepoID>
    <Title>Exclude System.Threading.Tasks.Extensions from source-build</Title>
    <Description>https://github.com/dotnet/roslyn/issues/36030</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36037</IssueID>
    <RepoID>1</RepoID>
    <Title>Use source-build version of Microsoft.Net.Compilers.Toolset</Title>
    <Description>https://github.com/dotnet/roslyn/issues/36030</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36036</IssueID>
    <RepoID>1</RepoID>
    <Title>Exclude Roslyn.Diagnostics.Analyzers from source-build</Title>
    <Description>https://github.com/dotnet/roslyn/issues/36030</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36035</IssueID>
    <RepoID>1</RepoID>
    <Title>Exclude Microsoft.NetCore.Analyzers from source-build</Title>
    <Description>https://github.com/dotnet/roslyn/issues/36030</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36034</IssueID>
    <RepoID>1</RepoID>
    <Title>Exclude Microsoft.CodeQuality.Analyzers from source-build</Title>
    <Description>https://github.com/dotnet/roslyn/issues/36030</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36033</IssueID>
    <RepoID>1</RepoID>
    <Title>Exclude Microsoft.CodeAnalysis.Analyzers from source-build</Title>
    <Description>https://github.com/dotnet/roslyn/issues/36030</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36032</IssueID>
    <RepoID>1</RepoID>
    <Title>Exclude Microsoft.VisualStudio.Threading.Analyzers from source-build</Title>
    <Description>https://github.com/dotnet/roslyn/issues/36030</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36031</IssueID>
    <RepoID>1</RepoID>
    <Title>Exclude Microsoft.DiaSymReader.Native from source build.</Title>
    <Description>https://github.com/dotnet/roslyn/issues/36030.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36030</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove prebuilts from source-build</Title>
    <Description>Tracking for https://github.com/dotnet/source-build/issues/891.

Package | Version | Status
-- | -- | --
Microsoft.DiaSymReader.Native | 1.7.0 | Exclude from Source-build
Microsoft.VisualStudio.Threading.Analyzers | 15.8.209 | Exclude from Source-build
Microsoft.CodeAnalysis.Analyzers | 2.6.2-beta2 | Exclude from Source-build
Microsoft.CodeQuality.Analyzers | 2.6.2-beta2 | Exclude from Source-build
Microsoft.NetCore.Analyzers | 2.6.2-beta2 | Exclude from Source-build
Roslyn.Diagnostics.Analyzers | 2.6.2-beta2 | Exclude from Source-build
Microsoft.Net.Compilers.Toolset | 3.1.0-beta1-19164-01 | Use Source Built Version
System.Threading.Tasks.Extensions | 4.5.2 | Exclude from Source-build

</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36029</IssueID>
    <RepoID>1</RepoID>
    <Title>vs16.1.0 can not find  navigation properties in the Completion preview list</Title>
    <Description>&lt;p&gt;I'm using the. Netcore writing application, and there are navigation properties in my entity model that resemble the following&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;    Public class Fieldpermission:auditedentity&amp;lt;int&amp;gt;
{
        Public int RoleId {get; set;}
        Public Role Role {get; set;}
        Public string TableName {get; set;}
    Public string PermissionsList {get; set;}
} &lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;When I write code, I can't find the navigation properties Role by filling out the list&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;Var fields = await _fieldPermissionRepository.GetAllIncluding (t =&amp;gt; t.Role) 
.ToListAsync ();&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;The t.Role inside GetAllIncluding (T =&amp;gt; t.Role) cannot be found in the Completion preview list There was no problem with the previous version, and the update did not occur until version 16.1.0&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/577215/vs1610-代码补全预览列表不显示导航属性的内容.html
VSTS ticketId: 896840_
_These are the original issue comments:_

Visual Studio Feedback System on 5/22/2019, 01:43 AM (7 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 5/22/2019, 10:05 AM (7 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

Ivan Basov [MSFT] on 5/22/2019, 11:54 AM (7 days ago): &lt;p&gt;Thank you for your feedback! Could you please provide a sample application when you observe the issue?&lt;/p&gt;

Ivan Basov [MSFT] on 5/22/2019, 11:55 AM (7 days ago): &lt;p&gt;Thank you for your feedback! Could you please provide a sample application where you observe the issue?&lt;/p&gt;

1025676114 on 5/27/2019, 03:01 AM (2 days ago): ok，I have created a simple project, you can clone from  https://github.com/matoushan/FeedbackApp  , and read README.md file, I am enclosing my project now
1025676114 on 5/27/2019, 02:13 AM (2 days ago): ok，I have created a simple project, you can clone from  https://github.com/matoushan/FeedbackApp , and read README.md file
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36028</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement Quick Info support for 'inheritdoc'</Title>
    <Description>Implements the primary features from dotnet/csharplang#313 as an IDE feature.

The first two commits are shared with #35667.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36027</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn NormalizeWhitespace bug</Title>
    <Description>**Version Used**: 
Please see the packages.config. Microsoft.CodeAnalysis packages 2.6.0
**Steps to Reproduce**:
program.cs file

```
 static void Main(string[] args)
        {
            var workspace = new Microsoft.CodeAnalysis.AdhocWorkspace();
            var projectId = Microsoft.CodeAnalysis.ProjectId.CreateNewId();
            var versionStamp = Microsoft.CodeAnalysis.VersionStamp.Create();
            var projectInfo = ProjectInfo.Create(projectId, versionStamp, "NewProject", "projName", Microsoft.CodeAnalysis.LanguageNames.CSharp);
            var newProject = workspace.AddProject(projectInfo);

            Console.WriteLine("i");
          
            var sourceText = SourceText.From(
              @"
                  using System;
                  using System.IO;
                  using System.Linq;
                  using System.Text;

                  namespace HelloWorld
                  {
                      class Program
                      {
                          static void Main(string[] args)
                          {
                              int i = 0;                           
                                
                              /**
                               Roslyn normalize whitespace issue
                              **/
                              if( i&gt; 5)
                              {
                                    Console.WriteLine(i.ToString());
                              }
                              else if(i &gt; 10)
                              {
                                    Console.WriteLine(i.ToString());
                              }            
                          }

                      }
                  }");

            var document = workspace.AddDocument(newProject.Id, "NewFile.cs", sourceText);
            var syntaxRoot = document.GetSyntaxRootAsync().Result;

            var changedSyntaxRoot = syntaxRoot.NormalizeWhitespace();
            

            Console.Read();
        }
```

**Expected Behavior**:
After calling NormalizeWhitespace() on the SyntaxNode, expecting the valid code to be written like this but the "If" statement is getting commented.

```
                              /**
                               Roslyn normalize whitespace issue
                              **/
                              if( i&gt; 5)
                              {

[packages.txt](https://github.com/dotnet/roslyn/files/3234042/packages.txt)


                                    Console.WriteLine(i.ToString());
                              }
                              else if(i &gt; 10)
                              {
                                    Console.WriteLine(i.ToString());
                              }      
```

**Actual Behavior**:
"If" statement is getting commented.

```
           ///
            ///Roslyn normalize whitespace issue
            //////if (i &gt; 5)
            {
                Console.WriteLine(i.ToString());
            }
            else if (i &gt; 10)
            {
                Console.WriteLine(i.ToString());
            }
```</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36026</IssueID>
    <RepoID>1</RepoID>
    <Title>Turn on import completion</Title>
    <Description>This is targeting a dev branch for testing purpose</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36025</IssueID>
    <RepoID>1</RepoID>
    <Title>Add "Parameter null-checking" feature</Title>
    <Description>@dotnet/roslyn-compiler for review. This is updating the language feature doc.

@fayrose FYI I created an empty issue for the test plan.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36024</IssueID>
    <RepoID>1</RepoID>
    <Title>Test plan for "Parameter null-checking"</Title>
    <Description>This is a place to collect test ideas.

Proposal: https://github.com/dotnet/csharplang/issues/2145

### Specification
- [ ] Specification checked in to `csharplang`

### Infrastructure

- [ ] LangVersion check
- [ ] IOperation/CFG nodes

### Generics
- [x] `void M&lt;T&gt;(T value!) { }` is OK
- [x] `void M&lt;T&gt;(T value!) where T : struct { }` is an error
- [x] `void M&lt;T&gt;(T value!) where T : unmanaged { }` is an error
- [x] `void M&lt;T&gt;(T value!) where T : notnull { }` is OK
- [x] `void M&lt;T&gt;(T value!) where T : class { }` is OK
- [x] `void M&lt;T&gt;(T value!) where T : SomeStruct { }` is an error
- [x] `void M&lt;T&gt;(T value!) where T : SomeClass { }` is OK

### Iterators

Null checking should always happen in initial call, not lowered methods

- [x] Top-level iterator method returning IEnumerable
- [x] Top-level iterator method returning IEnumerator
- [x] Local function returning IEnumerable
- [x] Local function return IEnumerator

### Constructors

Null checking should be the first thing in a constructor

- [x] Constructor with field initializers
- [x] Constructor with `this` call
- [x] Constructor with `base` call

### Nested functions
- [x] Nullchecked lambda parameter
- [x] Null-checked local function parameter
- [x] Null-checked lambda parameter inside field initializer

### Warnings and errors
- [x] Warn on null-checked parameter with default `null` value
- [x] Warn on `string? x!` (null-check doesn't make sense on those)
- [x] Error on `int x!` parameters
- [x] Error on `out string x!` (null-check doesn't make sense on `out` parameter)
- [x] Error on null-check on declarations without bodies (`abstract`, `extern`, declaration portion of a partial method)

### Misc (from discussion in LDM)
- [x] Null-checked `params` parameter (allowed, checks the array, not the elements)
- [x] test `void M&lt;T&gt;(T t!) where T : notnull { ... }` (ok)

### Productivity
- [x] Verify formatting in IDE
- [x] verify that IDE doesn't gray out null-checked parameter which is otherwise unused</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36023</IssueID>
    <RepoID>1</RepoID>
    <Title>dynamic parameter fails to bind method with FormattableString parameter</Title>
    <Description>**Version Used**:  C# 7.1

**Steps to Reproduce**:
```
        [Fact]
        public void TestDynamicBreaksFormattableString()
        {
            dynamic d = 231.45m;
            var x = ShouldBeEqualTo(d, $"my formattable string with parameters");
        }

        public bool ShouldBeEqualTo(decimal value, FormattableString formula)
        {
            //Doing something with formul.GetArguments()...
            return true;
        }
```


**Expected Behavior**:
x = true

**Actual Behavior**:
```
Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: 
'The best overloaded method match for 
'....ShouldBeEqualTo(decimal, System.FormattableString)' has some invalid arguments'

```</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>30/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36022</IssueID>
    <RepoID>1</RepoID>
    <Title>Interactive Window editor hangs when code outputs very long line</Title>
    <Description>VSF_TYPE_MARKDOWNHow do I terminate execution of a script running in the C# Interactive terminal? 

Let's say I wrote a loop that had a logic bug and is now running infinitely. Or there is code that is trying to access a remote resource that is unavailable? 

Right now, when the above happens, I need to wait for the Windows Exec to terminate the process. In the mean time, the VS IDE becomes unusable. 

It would be good if global terminators like CTRL+C or CTRL+BREAK worked to terminate executions within the script window.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/587116/c-interactive-end-execution.html
VSTS ticketId: 900959_
_These are the original issue comments:_

Visual Studio Feedback System on 5/29/2019, 02:29 AM (6 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36021</IssueID>
    <RepoID>1</RepoID>
    <Title>🐛 Fix incorrect caching of XML documentation comments with/without expandIncludes</Title>
    <Description>
    </Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36020</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36019</IssueID>
    <RepoID>1</RepoID>
    <Title>[loc][Query][Roslyn] Localizability of  the meaning of "base"</Title>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
The symbol has no base.
'{0}' bases

ID:
0; "The_symbol_has_no_base"
0; "_0_bases"

File Name:
EditorFeatures\Core\xlf\EditorFeaturesResources.xlf

==========================================
Query:
Please clarify the meaning of "base".</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>29/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36018</IssueID>
    <RepoID>1</RepoID>
    <Title>Interface deriving from IEquatable&lt;T&gt; twice triggers CS8620 on wrong interface</Title>
    <Description>**Version Used**: VS 16.2.0-pre.1.0+28917.182

**Steps to Reproduce**:

```c#
#nullable enable

interface IEquatable&lt;T&gt; {
  bool Equals(T other);    
}

interface IFoo : IEquatable&lt;IFoo?&gt;, IEquatable&lt;string?&gt;
{ }

class Foo : IFoo
{
    public bool Equals(string? other)
    {
        return true;
    }

    public bool Equals(IFoo? other)
    {
        return true;
    }
}

class C
{
    void M(IFoo foo)
    {
        foo.Equals("");
        //         ^^ CS8620
        // Argument of type 'string' cannot be used for parameter 'other' of type 'IFoo'
        // in 'bool IEquatable&lt;IFoo?&gt;.Equals(IFoo? other)' due to differences in the
        // nullability of reference types.
    }
}
```

The error message implies an incorrect overload of `IEquatable&lt;&gt;.Equals` is being considered when evaluating nullability here.

**Expected Behavior**:

No warning.

**Actual Behavior**:

CS8620 is issued.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36017</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring "Use expression body for methods" suggests it applies to multiple methods</Title>
    <Description>**Version Used**: VS 16.2.0-pre.1.0+28917.182

**Steps to Reproduce**:

Have more than one method with simple return and invoke refactorings.

![image](https://user-images.githubusercontent.com/350947/58545804-6036be00-8247-11e9-93f6-e9d2c39e594e.png)

The label should probably just use the singular "method".</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36016</IssueID>
    <RepoID>1</RepoID>
    <Title>NotNullWhenTrue pattern fails when bool stored in temporary</Title>
    <Description>**Version Used**: VS 16.2.0-pre.1.0+28917.182

**Steps to Reproduce**:

```c#
bool TryGet([NotNullWhenTrue] out object? o)
{
    o = default;
    return false;
}

void M()
{
    bool b = TryGet(out var o);

    if (!b)
    {
        o = new object();
    }

    o.ToString();
//  ^ CS8602 Dereference of a possibly null reference
}
```

Note that if you inline `b` the warning goes away.

**Expected Behavior**:

No warning.

**Actual Behavior**:

Warning.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36015</IssueID>
    <RepoID>1</RepoID>
    <Title>#pragma warning restore CS8625 suppresses later warnings</Title>
    <Description>**Version Used**: VS 16.2.0-pre.1.0+28917.182

**Steps to Reproduce**:

```c#
#nullable enable

string _s = "";

void M()
{
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
    _s = null;
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.

    _s = null;
//       ^^^^ should issue CS8625 here
}
```

**Expected Behavior**:

Warning is restored.

**Actual Behavior**:

Warning is not restored.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36014</IssueID>
    <RepoID>1</RepoID>
    <Title>Null propagation should prohibit CS8602 </Title>
    <Description>**Version Used**: VS 16.2.0-pre.1.0+28917.182

**Steps to Reproduce**:

In the final line of this code, `s` is provably non-null yet CS8602 is issued.

```c#
string? t = s?.ToUpper();

if (t == null)
    return;

Console.WriteLine(s.ToString());

//                ^ dereference of possibly null reference
```

**Expected Behavior**:

No warning.

**Actual Behavior**:

Warning.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36013</IssueID>
    <RepoID>1</RepoID>
    <Title>Make IExperimentationService properly free-threaded</Title>
    <Description>This change removes the use of asynchronous methods during the MEF construction portion of the construction of `IExperimentationService`.

* IExperimentationServiceFactory can be obtained from the MEF container without any threading dependencies
* Once an IExperimentationService instance is obtained from the factory, its synchronous methods can be used without threading dependencies

fixes :https://dev.azure.com/devdiv/DevDiv/_workitems/edit/934446</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36012</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove the AbstractIndenter type (and subtypes).</Title>
    <Description>Followup to https://github.com/dotnet/roslyn/pull/34001.  that PR should go in first.

Core logic for it has been moved into the AbstractIndentationService.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36011</IssueID>
    <RepoID>1</RepoID>
    <Title>Update TestResources to 2.0.16</Title>
    <Description>
    </Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36010</IssueID>
    <RepoID>1</RepoID>
    <Title>Move EnC manager implementation down to Features layer (Preview 2)</Title>
    <Description>Replaces legacy EnC manager implementation with a new one.

The previous implementation of the EnC manager in the debugger communicated with language services via project system coupled interfaces (`IVsENCRebuildableProjectCfg*`). This had many limitations, including necessity to perform IO synchronously on UI thread, lack of support for multi-targeting, necessity to make buffers readonly while application is running and for projects whose modules were not loaded to the debugee process etc.

The new architecture completely removes the dependency on Project System. The debugger communicates with language services via a MEF component. Language services export
1) `IDebugStateChangeListener` 
The implementation of this interface receives callbacks from the debugger when the debug state changes:

```C#
        void EnterBreakState(BreakStateKind kind);
        void ExitBreakState();
        void StartDebugging();
        void StopDebugging();
```

2) `IEditAndContinueManagedModuleUpdateProvider`

The implementation responds to the debugger's requests for updates in managed modules. 
The debugger sends these requests when changes made in source files need to be applied due to a user action (e.g. "continue" in break mode, change current IP while in break mode, etc.).

### Avoiding read-only buffers ###
Previously we made buffers read only in scenarios where we couldn't apply the change at the end of the current edit session ("continue"). This could be for multiple reasons:

1) Changing source files while the application is running
Changes can only be applied when the debuggee is stopped. 

We let the user made changes while the debuggee is running. We report a warning for these changes notifying the user that the changes are not being applied while the debugee is running. 

When the debugger stops on a breakpoint in a modified source, the source won't match the one that's being executed so based on the settings the debugger may display a dialog saying so. We will follow up to improve that experience, but not going to block the change on it.

2) Changing source files of projects during edit session whose corresponding module is not loaded to the debugee
Since the modules are not loaded we can't apply the delta at the end of the edit session (there is no module in the debugee process to apply the delta to).

We calculate the EnC deltas for all projects changed during edit session regardless of whether their modules are loaded or not. At the end of the session we apply deltas only to modules that are loaded, but we remember all the deltas we calculated for next opportunity to apply changes. Such opportunity occurs when a module is loaded while the debuggee is running. At that point the debuggee is stopped while the even is processed and we can apply all deltas that were made to the project that corresponds to the module. Note that this also handles the case where multiple instances of the same module are loaded to the debuggee (e.g. to different AppDomains or AssemblyLoadContexts). The previous design didn't account for this scenario resulting in bugs like https://github.com/dotnet/roslyn/issues/34253.

3) Other reasons that disallow EnC (e.g. being stopped at exception, the debuggee process not supporting EnC, etc.).

We do not block the user from making changes in the source files. Instead we report regular errors like we do for other Rude Edits. We use new APIs added to Concord to support querying for availability of EnC for specific module.

Fixes https://github.com/dotnet/roslyn/issues/10203.
Fixes https://github.com/dotnet/roslyn/issues/11656.
Fixes https://github.com/dotnet/roslyn/issues/18917.
Fixes https://github.com/dotnet/roslyn/issues/21170.
Fixes https://github.com/dotnet/roslyn/issues/27373.
Fixes https://github.com/dotnet/roslyn/issues/27735.
Fixes https://github.com/dotnet/roslyn/issues/29223.
Fixes https://github.com/dotnet/roslyn/issues/34253.
Fixes [DevDiv 750649](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/750649)
Fixes [DevDiv 551604](https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/551604)

See also https://github.com/dotnet/roslyn/issues/18350.
</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36009</IssueID>
    <RepoID>1</RepoID>
    <Title>Should [DisallowNull] apply to value types or nullable value types?</Title>
    <Description>A few options:
1. no warning (as today)
2. warn for passing a possibly null value to `[DisallowNull]int?` parameter
3. disallow `[DisallowNull]` on that parameter. If we do that, then we should probably also disallow on `string?`.

```C#
        [Fact]
        public void DisallowNull_04()
        {
            var source =
@"using System.Runtime.CompilerServices;
class Program
{
    static void F1([DisallowNull]int i) { }
    static void F2([DisallowNull]int? i) { }
    static void M1(int i1)
    {
        F1(i1);
        F2(i1);
    }
    static void M2(int? i2)
    {
        F2(i2); // I expected a warning here (jcouv)
        if (i2 == null) return;
        F2(i2);
    }
}";
            var comp = CreateCompilation(new[] { DisallowNullAttributeDefinition, source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics();
        }
```

Branch `disallow-nullable`</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36008</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36007</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36006</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract the RDT implementation for Misc files and VS open file tracker</Title>
    <Description>Liveshare implements their own roslyn remote workspace which tracks files using a different system.  Now that we're moving it inside, we want to re-use the already created interactions with the RDT wherever possible.

This PR just extracts out the common pieces into an event system where subscribers can get notified of specific RDT events.

@jasonmalinowski @heejaechang does this look roughly like we discussed?</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36005</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing nullable warnings for scenarios involving type constraints that a nullable value type can satisfy.</Title>
    <Description>```
namespace ns1
{
#nullable enable
    class Test1&lt;T&gt;
    {
        public virtual void M1&lt;S&gt;(S x) where S : T
        { }
        public virtual void M2(T x)
        { }
    }

    class Test2 : Test1&lt;System.ValueType&gt;
    {
        public override void M1&lt;S&gt;(S x)
        {
            object y = x;
            y.ToString();
            System.Console.WriteLine("Test2");
        }

        public override void M2(System.ValueType x)
        {
        }

        public void Test()
        {
            int? x = null;
            M1&lt;int?&gt;(x);
            M2(x);
        }
    }

    class Test3 : Test1&lt;object&gt;
    {
        public override void M1&lt;S&gt;(S x)
        {
            object y = x;
            y.ToString();
            System.Console.WriteLine("Test3");
        }

        public override void M2(object x)
        {
        }

        public void Test()
        {
            int? x = null;
            M1&lt;int?&gt;(x);
            M2(x);
        }

        static void Main()
        {
            new Test2().Test();
            new Test3().Test();
        }
    }
}
```

Compile the code above.

Observed (no nullable warnings for M1 calls):
```
.cs(50,16): warning CS8604: Possible null reference argument for parameter 'x' in 'void Test3.M2(object x)'.
.cs(29,16): warning CS8604: Possible null reference argument for parameter 'x' in 'void Test2.M2(ValueType x)'.
```

Run the code
```
Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at ns1.Test2.M1[S](S x)
   at ns1.Test2.Test()
   at ns1.Test3.Main()
``` 

Expected: 
Expected nullable warnings either for M1 invocations (constraint violation), or within M1 implementations. Given the recent design decision around ```notnull``` constraint, a constraint violation warning feels more appropriate.

Note that for the code below, we do get warnings inside implementation of M1 and I think we should keep getting them:
```
    class Test4 : Test1&lt;int?&gt;
    {
        public override void M1&lt;S&gt;(S x)
        {
            object y = x;
            y.ToString();
        }

        public override void M2(int? x)
        {
        }

        public void Test()
        {
            int? x = null;
            M1&lt;int?&gt;(x);
            M2(x);
        }
    }
```</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36004</IssueID>
    <RepoID>1</RepoID>
    <Title>CS0306 when stackalloc is used in a nested context</Title>
    <Description>**Version Used**: 
VS 2019 Preview, version 16.2.0 Preview 1.0

**Steps to Reproduce**:

```csharp
using System;

class Program
{
	unsafe static void Main()
	{
		int a = 0;

		var ptrs = stackalloc int*[1] { &amp;a };  // This works...

		Foo(stackalloc int*[1] { &amp;a });   // ...but this doesn't
	}

	unsafe static void Foo(int** ptrs)
	{
	}
}
```

**Expected Behavior**:
The type of the nested `stackalloc` should be `int**`, as in the `var` case.

**Actual Behavior**:
`CS0306	The type 'int*' may not be used as a type argument`
`CS1503	Argument 1: cannot convert from 'System.Span&lt;int*&gt;' to 'int**'`

Whatever rule typed the `var` correctly, should also apply to arguments.</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36003</IssueID>
    <RepoID>1</RepoID>
    <Title>Public API Analyzer is crashing with "Nullable reference analysis IDE features" enabled</Title>
    <Description>```
System.AggregateException : One or more errors occurred. ---&gt; Object reference not set to an instance of an object.
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass17_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&gt; (Inner Exception #0) System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyTextDocumentChange(DocumentId documentId,SourceText newText)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyAdditionalDocumentTextChanged(DocumentId documentId,SourceText newText)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.Apply(Workspace workspace,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&lt;Unknown Parameters&gt;)&lt;---
```

CC @333fred, @jasonmalinowski </Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36002</IssueID>
    <RepoID>1</RepoID>
    <Title>Use vsBranch: lab/d16.2stg for 16.2-p2 publish</Title>
    <Description>cc @genlu

This is a temporary change to help us run some internal jobs until it comes time to complete the divisional snap tomorrow afternoon.</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36001</IssueID>
    <RepoID>1</RepoID>
    <Title>F1 help does not work for C# `nameof` keyword</Title>
    <Description>Put your cursor in `nameof` in the following C# code and press F1:

```csharp
throw new ArgumentNullException(paramName: nameof(x));
```

**Result**: You land on a generic catch-all page. The query string does not pick up the `nameof` keyword:

…?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DEN-US%26k%3Dk(VS.TextEditor)%26rd%3Dtrue&amp;view=vs-2019

**Expected Result**: You land here: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/nameof </Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36000</IssueID>
    <RepoID>1</RepoID>
    <Title>Feeding VSSDK from new VSSDK channel</Title>
    <Description>
    </Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>31/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35999</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM: Should probably disable consumption of operators declared within interfaces</Title>
    <Description>There were some changes made to operators overload resolution in C#. For VB, we probably don't have time to finalize the design and implementation in this area. As it stands right now, it is possible that those operators are simply ignored by VB compiler, but we should confirm.</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35998</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM: Add tests for consuming operators defined within interfaces</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35997</IssueID>
    <RepoID>1</RepoID>
    <Title>Please suggest a way to enable the Password protection in a PDF document using C# without using any third party libraries</Title>
    <Description>&lt;p&gt;Hello Developers,&lt;/p&gt; &lt;p&gt;I want to enable the security features (like user and owner passwords) to a PF document without using any third party library like iTextSharp etc. I want some Microsoft library or Adobe library to enable this feature. if you are suggesting the &amp;quot;Windows.Data.Pdf.dll&amp;quot; please suggest how to add this library to my VS project and leverage the class like &amp;quot;PdfDocument&amp;quot;, &amp;quot;PdfSecuritySettings&amp;quot; etc.&lt;/p&gt; &lt;p&gt;fyi i will be using c# and .net 4.5 and later versions &lt;/p&gt; &lt;p&gt;&lt;/p&gt;&lt;p&gt;Expecting a quick and correct response &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Thanks in advance &lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/583316/please-suggest-a-way-to-enable-the-password-protec.html
VSTS ticketId: 899676_
_These are the original issue comments:_

ayush tripathi on 5/25/2019, 10:49 PM (2 days ago): &lt;p&gt;Please suggest some way&lt;/p&gt;

Visual Studio Feedback System on 5/26/2019, 11:39 PM (34 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35996</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2 to release/dev16.2-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2 into release/dev16.2-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-to-release/dev16.2-preview2-vs-deps
git reset --hard upstream/release/dev16.2-preview2-vs-deps
git merge upstream/release/dev16.2-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-to-release/dev16.2-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35995</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to release/dev16.2-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into release/dev16.2-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-release/dev16.2-preview2-vs-deps
git reset --hard upstream/release/dev16.2-preview2-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-release/dev16.2-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35994</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35993</IssueID>
    <RepoID>1</RepoID>
    <Title>'Inline variable declaration' spacing incorrect with csharp_space_around_declaration_statements=ignore</Title>
    <Description>VSF_TYPE_MARKDOWNWhen I run CodeCleanup (EditorContextMenus.FileHealthIndicator.RunDefaultCodeCleanup) and it replaces predefined types w/Framework types the result is sometimes erroneous - when the substitution is on a method-call with 'out' parameters the space between the type-name and the variable is sometimes dropped (e.g. x(out int i1) becomes x(out Integer32i1). This only seems to happen when the method-call is part of an assignment-statement.

In addition to attaching my .editorconfig I've also attached the following:
original.png -sample showing original code
AssignFirst.png -shows erroneous results when the method-call is part of an assignment
AssignSecond.png -shows correct results when method-call is stand-alone

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/583507/codecleanup-replace-predefined-type-wframework-som.html
VSTS ticketId: 899753_
_These are the original issue comments:_

Lee Silver on 5/26/2019, 09:00 PM (33 hours ago): In my original report I wrote "(e.g. x(out int i1) becomes x(out Integer32i1)" when it should have been "(e.g. x(out int i1) becomes x(out Int32i1)"
Visual Studio Feedback System on 5/27/2019, 05:10 AM (25 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Lee Silver on 5/27/2019, 05:19 PM (13 hours ago): I just noticed that during CodeCleanup 'out'-variable preferences are done after 'type' preferences. Since the 'type' has the correct substituted value it looks like the problem is with the handling of 'out' variable preferences.
Visual Studio Feedback System on 5/28/2019, 03:58 AM (2 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35992</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn seems to be substantially slower in the latest version</Title>
    <Description>**Version Used**: 3.1.0

We have an internal compiler from C# to other languages based on Roslyn. The general approach is walking the syntax trees and producing source code that looks mostly similar to the original source. Runtime seems to be mostly dominated by Roslyn in looking up symbols for tokens (but it's hard to profile a complete 13-minute compilation).

I recently upgraded to the latest version of Microsoft.CodeAnalysis (3.1.0) from the version we've used so far (1.3.2) and noticed a slowdown by about 50 %. I can't really point to a specific place, as I haven't profiled a complete run with either version, but downgrading to 2.10 resolved the problem again.</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35991</IssueID>
    <RepoID>1</RepoID>
    <Title>OutOfMemoryException in CodeAnalysis</Title>
    <Description>I am currently developing a wide solution, which contains 23 projects.
One of them is .net 4.7.1, five of them are .net standard 2.0 and the rest of them are .net core 2.2
There are 3 microservices, which contains 4 project each and uses entity framework core 2.2. One of them has 492 migration files.
Contracts is shared using local nuget server.

Visual studio has been crashing every day. Sometimes it's been happening a few times in a day. I suspect about migration file count.


**Version Used**: VS 15.9.11

**Steps to Reproduce**: 

1. Install ReSharper 2019.1
2. Disable Rosylyn full solution analysis
3. Disable CodeLens for all languages
4. Open huge solutions including 20-25 projects. 
2. Use more than 1 days or maybe less.

**Expected Behavior**:

No exception

**Actual Behavior**:

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken.SyntaxTokenWithValueAndTrivia`1.&lt;&gt;c.&lt;.cctor&gt;b__0_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LiteralExpressionSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LiteralExpressionSyntax.&lt;&gt;c.&lt;.cctor&gt;b__15_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.&lt;&gt;c.&lt;.cctor&gt;b__0_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentListSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentListSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax.&lt;&gt;c.&lt;.cctor&gt;b__18_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.MemberAccessExpressionSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.MemberAccessExpressionSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax.&lt;&gt;c.&lt;.cctor&gt;b__18_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionStatementSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionStatementSyntax.&lt;&gt;c.&lt;.cctor&gt;b__18_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren.&lt;&gt;c.&lt;.cctor&gt;b__0_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.BlockSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.BlockSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SimpleLambdaExpressionSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SimpleLambdaExpressionSyntax.&lt;&gt;c.&lt;.cctor&gt;b__24_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.&lt;&gt;c.&lt;.cctor&gt;b__0_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentListSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentListSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax.&lt;&gt;c.&lt;.cctor&gt;b__18_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionStatementSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionStatementSyntax.&lt;&gt;c.&lt;.cctor&gt;b__18_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.&lt;&gt;c.&lt;.cctor&gt;b__0_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.BlockSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.BlockSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.MethodDeclarationSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.MethodDeclarationSyntax.&lt;&gt;c.&lt;.cctor&gt;b__45_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ClassDeclarationSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ClassDeclarationSyntax.&lt;&gt;c.&lt;.cctor&gt;b__45_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.NamespaceDeclarationSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.NamespaceDeclarationSyntax.&lt;&gt;c.&lt;.cctor&gt;b__36_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CompilationUnitSyntax..ctor(ObjectReader reader)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CompilationUnitSyntax.&lt;&gt;c.&lt;.cctor&gt;b__27_0(ObjectReader r)
   at Roslyn.Utilities.ObjectReader.ReadObject()
   at Roslyn.Utilities.ObjectReader.ReadValueWorker()
   at Roslyn.Utilities.ObjectReader.ReadValue()
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.DeserializeFrom(Stream stream, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.DeserializeNodeFrom(Stream stream, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Host.AbstractSyntaxTreeFactoryService.RecoverableSyntaxRoot`1.RecoverRoot(Stream stream, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Host.AbstractSyntaxTreeFactoryService.RecoverableSyntaxRoot`1.Recover(CancellationToken cancellationToken)
   at Roslyn.Utilities.AsyncLazy`1.GetValue(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Host.RecoverableWeakValueSource`1.GetValue(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.RecoverableSyntaxTree.GetRoot(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootCore(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.PositionalSyntaxReference.GetSyntax(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.AddDeclaredNontypeMembers(MembersAndInitializersBuilder builder, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.BuildMembersAndInitializers(DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersAndInitializers()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.MakeAllMembers(DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersByNameSlow()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersByName()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersUnordered()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembers()
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol.Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers()
   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.AddSymbol(ISymbol symbol, MultiDictionary`2 symbolMap, Func`2 useSymbol)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.&lt;&gt;c.&lt;.cctor&gt;b__78_5(ISymbol symbol, MultiDictionary`2 symbolMap)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(String name, Int32 parentIndex, ValueSet symbolsWithSameName, ArrayBuilder`1 list, Action`2 lookup)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(String name, Int32 parentIndex, ValueSet symbolsWithSameName, ArrayBuilder`1 list, Action`2 lookup)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(String name, Int32 parentIndex, ValueSet symbolsWithSameName, ArrayBuilder`1 list, Action`2 lookup)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(String name, Int32 parentIndex, ValueSet symbolsWithSameName, ArrayBuilder`1 list, Action`2 lookup)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(String name, Int32 parentIndex, ValueSet symbolsWithSameName, ArrayBuilder`1 list, Action`2 lookup)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.GenerateSourceNodes(INamespaceSymbol globalNamespace, ArrayBuilder`1 list, Action`2 lookup)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.&lt;CreateSourceSymbolTreeInfoAsync&gt;d__71.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolTreeInfo.&lt;TryLoadOrCreateAsync&gt;d__58`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer.&lt;UpdateSourceSymbolTreeInfoAsync&gt;d__6.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer.&lt;UpdateSymbolTreeInfoAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer.&lt;AnalyzeDocumentAsync&gt;d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;&gt;c__DisplayClass32_1`1.&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;GetOrDefaultAsync&gt;d__34`2.MoveNext()
Stack:
   at: System.Environment.FailFast(System.String, System.Exception)
   at: Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at: Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at: System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at: System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.Features, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;GetOrDefaultAsync&gt;d__34`2&lt;System.__Canon,System.__Canon&gt; ByRef)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.GetOrDefaultAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, System.Func`3&lt;System.__Canon,System.Threading.CancellationToken,System.Threading.Tasks.Task`1&lt;System.__Canon&gt;&gt;, System.Threading.CancellationToken)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;RunAnalyzersAsync&gt;d__32`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;RunAnalyzersAsync&gt;d__32`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.Features, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;RunAnalyzersAsync&gt;d__32`1&lt;System.__Canon&gt; ByRef)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.RunAnalyzersAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt;, System.__Canon, System.Func`4&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer,System.__Canon,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;, System.Threading.CancellationToken)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;ProcessDocumentAnalyzersAsync&gt;d__31.MoveNext()
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;ProcessDocumentAnalyzersAsync&gt;d__31, Microsoft.CodeAnalysis.Features, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ProcessDocumentAnalyzersAsync&gt;d__31 ByRef)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.ProcessDocumentAnalyzersAsync(Microsoft.CodeAnalysis.Document, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt;, WorkItem, System.Threading.CancellationToken)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ProcessDocumentAsync&gt;d__30.MoveNext()
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ProcessDocumentAsync&gt;d__30, Microsoft.CodeAnalysis.Features, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ProcessDocumentAsync&gt;d__30 ByRef)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.ProcessDocumentAsync(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt;, WorkItem, System.Threading.CancellationTokenSource)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ExecuteAsync&gt;d__17.MoveNext()
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ExecuteAsync&gt;d__17, Microsoft.CodeAnalysis.Features, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ExecuteAsync&gt;d__17 ByRef)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.ExecuteAsync()
   at: Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor+&lt;ProcessAsync&gt;d__12.MoveNext()
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at: System.Threading.Tasks.Task.FinishContinuations()
   at: System.Threading.Tasks.Task.FinishStageThree()
   at: System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ExecuteAsync&gt;d__17.MoveNext()
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at: System.Threading.Tasks.Task.FinishContinuations()
   at: System.Threading.Tasks.Task.FinishStageThree()
   at: System.Threading.Tasks.Task`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(Boolean)
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(Boolean)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;TryProcessOneHigherPriorityDocumentAsync&gt;d__28.MoveNext()
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at: System.Threading.Tasks.Task.FinishContinuations()
   at: System.Threading.Tasks.Task.FinishStageThree()
   at: System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ProcessDocumentAsync&gt;d__30.MoveNext()
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at: System.Threading.Tasks.Task.FinishContinuations()
   at: System.Threading.Tasks.Task.FinishStageThree()
   at: System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;ProcessDocumentAnalyzersAsync&gt;d__31.MoveNext()
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at: System.Threading.Tasks.Task.FinishContinuations()
   konum: System.Threading.Tasks.Task.FinishStageThree()
   konum: System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;RunAnalyzersAsync&gt;d__32`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at: System.Threading.Tasks.Task.FinishContinuations()
   at: System.Threading.Tasks.Task.FinishStageThree()
   at: System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at: System.Threading.Tasks.Task.FinishContinuations()
   at: System.Threading.Tasks.Task.FinishStageThree()
   at: System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at: Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;&gt;c__DisplayClass32_1`1+&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)


```</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35990</IssueID>
    <RepoID>1</RepoID>
    <Title>The new Intellisense does not omit Attribute suffixes</Title>
    <Description>VSF_TYPE_MARKDOWNHi,

In VS 2019, after enabling &amp;quot;Show items from unimported namespaces&amp;quot; in the C# intellisense options, attribute names include the Attribute suffix.

See demonstration.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/584851/the-new-intellisense-does-not-omit-attribute-suffi.html
VSTS ticketId: 900293_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35989</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35988</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35987</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35986</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to release/dev16.2-preview2</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview2.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview2
git reset --hard upstream/release/dev16.2-preview2
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35985</IssueID>
    <RepoID>1</RepoID>
    <Title>Lambda expression arguments should use closures nullable state after all of the arguments are evaluated</Title>
    <Description>**Version Used**: 

Branch master (22 May 2019)
Latest commit 04252e by Neal Gafter:
Unskip passing tests. (#35856)

Fixes #35611

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
using System;

public class C {
    
    public static void Main()
    {
        M(null);
    }
    
    public static void M(string? s) {
        Execute(() =&gt; s.ToString(), s = ""); // CS8602, no problems at runtime
        Execute(() =&gt; s.ToString(), s = null); // no warnings, crashes with an NRE
    }
    
    public static void Execute&lt;T&gt;(Action a, T s) =&gt; a();
}
```

**Expected Behavior**:
CS8602 Warning for the second invocation of `Execute`.

**Actual Behavior**:
`warning CS8602: Dereference of a possibly null reference.` is reported for the first invocation.
If you run the program the first invocation finishes without exceptions whereas the second one that doesn't have any compiler warnings crashes with a `NullReferenceException`

**Notes**
Lambda expression passed as an argument cannot be accessed before other arguments are evaluated therefore they should use closures' state at the moment of containing invocation's evaluation for their data flow analysis. Currently Roslyn uses closures' state at the moment of lambda expressions' declarations.</Description>
    <CreatedDate>27/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35984</IssueID>
    <RepoID>1</RepoID>
    <Title>Inferred nullability of `Nullable&lt;T&gt;` is lost in type arguments' inference</Title>
    <Description>**Version Used**: 

Branch master (22 May 2019)
Latest commit 04252e by Neal Gafter:
Unskip passing tests. (#35856)

Fixes #35611

**Steps to Reproduce**:

Compile the following code
```cs
#nullable enable
public class C {
    public void M(int? i, string? s) {
        i = 5;
        s = "";

        // both variables cannot contain null, no warnings
        s.ToString();
        i.Value.ToString();
        
        // assign variables with their inferred types
        s = Id(s);
        i = Id(i);

        // s is still not null whereas i became nullable
        s.ToString();
        i.Value.ToString();
    }
    
    public T Id&lt;T&gt;(T t) =&gt; t;
}
```

**Expected Behavior**:
No warnings.

**Actual Behavior**:
`warning CS8629: Nullable value type may be null.` at the last line of `M`.

It seems that unlike reference nullable types inferred nullability of `Nullable&lt;T&gt;` does not affect type arguments' inference.</Description>
    <CreatedDate>27/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35983</IssueID>
    <RepoID>1</RepoID>
    <Title>FileNotFoundException in MSBuildWorkspace.OpenSolutionAsync</Title>
    <Description>**Version Used**: VS 2017 15.9.3

**Steps to Reproduce**:

1. Create new console app that targets `netcoreapp2.1`
```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp2.1&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;7.1&lt;/LangVersion&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.Workspaces.MSBuild" Version="3.1.0" /&gt;
    &lt;PackageReference Include="Microsoft.Build.Locator" Version="1.2.2" /&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
```

2. Try to open solution using `MSBuildWorkspace.OpenSolutionAsync` (it can be empty solution)
```csharp
using System.Threading.Tasks;
using Microsoft.Build.Locator;
using Microsoft.CodeAnalysis.MSBuild;

class Program
{
    static async Task Main(string[] args)
    {
        MSBuildLocator.RegisterMSBuildPath(@"PATH_TO_MSBUILD");

        using (var workspace = MSBuildWorkspace.Create())
        {
            var solution = await workspace.OpenSolutionAsync(@"Foo.sln");

        }
    }
}
```

**Expected Behavior**:
No Exception

**Actual Behavior**:
```
System.IO.FileNotFoundException
  HResult=0x80070002
  Message=Could not load file or assembly 'System.Configuration.ConfigurationManager, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. Systém nemůže nalézt uvedený soubor.
  Source=Microsoft.Build
  StackTrace:
   at Microsoft.Build.Evaluation.ToolsetConfigurationReader..ctor(PropertyDictionary`1 environmentProperties, PropertyDictionary`1 globalProperties)
   at Microsoft.Build.Evaluation.ToolsetReader.ReadAllToolsets(Dictionary`2 toolsets, ToolsetRegistryReader registryReader, ToolsetConfigurationReader configurationReader, PropertyDictionary`1 environmentProperties, PropertyDictionary`1 globalProperties, ToolsetDefinitionLocations locations)
   at Microsoft.Build.Evaluation.ProjectCollection.InitializeToolsetCollection(ToolsetRegistryReader registryReader, ToolsetConfigurationReader configReader)
   at Microsoft.Build.Evaluation.ProjectCollection..ctor(IDictionary`2 globalProperties, IEnumerable`1 loggers, IEnumerable`1 remoteLoggers, ToolsetDefinitionLocations toolsetDefinitionLocations, Int32 maxNodeCount, Boolean onlyLogCriticalEvents)
   at Microsoft.CodeAnalysis.MSBuild.Build.ProjectBuildManager.StartBatchBuild(IDictionary`2 globalProperties)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader.Worker.&lt;LoadAsync&gt;d__18.MoveNext()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader.&lt;LoadSolutionInfoAsync&gt;d__21.MoveNext()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.&lt;OpenSolutionAsync&gt;d__23.MoveNext()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Program.&lt;Main&gt;d__0.MoveNext() in ...
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Program.&lt;Main&gt;(String[] args)
```
Note: Everything works fine when target framework is `net472`.</Description>
    <CreatedDate>27/05/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35982</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpAddMissingImportsRefactoringProvider thrown ArgumentOutOfRangeException in FindTokenCore</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.2.0 Preview 1.0
VisualStudio.16.Preview/16.2.0-pre.1.0+28917.182
Microsoft .NET Framework
Version 4.8.03761

**Steps to Reproduce**:
It happened after inserting a whole method into a new class. Apart from missing using directives the whole code was correct.

**Actual Behavior**:

```
System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.
Parameter name: position
   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)
   at Microsoft.CodeAnalysis.Shared.Utilities.CommonFormattingHelpers.ConvertToTokenPair(SyntaxNode root,TextSpan textSpan)
   at Microsoft.CodeAnalysis.Shared.Utilities.CommonFormattingHelpers.&lt;ConvertToTokenPairs&gt;d__2.MoveNext()
   at Microsoft.CodeAnalysis.Formatting.AbstractSyntaxFormattingService.FormatIndividually(SyntaxNode node,OptionSet options,IEnumerable`1 rules,IList`1 spansToFormat,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Formatting.AbstractSyntaxFormattingService.Format(SyntaxNode node,IEnumerable`1 spans,OptionSet options,IEnumerable`1 rules,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.CleanUpNewLinesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.CleanUpNewLinesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.ApplyFixesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.AddMissingImportsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsRefactoringProvider.AddMissingImports(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```
</Description>
    <CreatedDate>27/05/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35981</IssueID>
    <RepoID>1</RepoID>
    <Title>Report warning when calling a method with an unannotated nullable references</Title>
    <Description>**Version Used**:  3.0.0-preview5-27626-15
Commit: 61f30f5a23
Visual Studio version: 16.2.0 Preview 1.0

**Steps to Reproduce**:

1.  A pre-C#8 class library there is a simple method (not annotated for nullable references)
```
public static int GetLength(string text) =&gt; text.Length; 
```

2.  Another project using `#nullable enable` gets green squiggles for nullable references and defines the following code in a method:
```
string? test = null;
Extensions.GetLength(test);
```

**Expected Behavior**:
Since `GetLength` has not being annotated with `NullableAttribute`, no squiggle is shown.
I would love to see the green squiggle on the `test` variable to be defensive on the new code. After all the exceptions bounces back to the caller which gets blamed not to have dereference protection.

**Actual Behavior**:
No warning on `test` is provided.</Description>
    <CreatedDate>27/05/2019</CreatedDate>
    <ClosedDate>27/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35980</IssueID>
    <RepoID>1</RepoID>
    <Title>"Go to implementation" throws AggregateException</Title>
    <Description>**Version Used**: 
Unknown, pre-installed in the latest version of Visual Studio 2019 (16.1.1)

**Steps to Reproduce**:

1. Open up a solution containing a class implementing an interface.
2. Attempt to use "Go to implementation" on one of its methods.

**Expected Behavior**:
"Go to implementation" takes me to the implementation of a method.

**Actual Behavior**:
"An exception of type AggregateException has been encountered" is shown

Full exception log
[Activity Monitor Log_xml.txt](https://github.com/dotnet/roslyn/files/3220447/Activity.Monitor.Log_xml.txt)

The given error message suggests that this might be caused by an extension, but I have disabled all extensions and the same error continues to happen. The given exception suggests this is an issue with Roslyn.</Description>
    <CreatedDate>26/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35979</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve the code gen for a conditional access on a readonly unconstrained field</Title>
    <Description>See #35319

This improves the codegen when we perform a conditional access on an unconstrained temp. The temp could be as a result of a read on a readonly field, or of a conditional access on the result of an intermediary expression.

This is my first PR on Emit, and I admit to having only a rough understanding of the intricacies of IL.

So if there's something obvious I missed, or a thousand more tests I need to add, please let me know.

The IL a conditional access on an unconstrained readonly field will now emit is:

```csharp
  .locals init (T V_0)
  IL_0000:  ldarg.0
  IL_0001:  ldfld      ""T Foo&lt;T&gt;.t""
  IL_0006:  stloc.0
  IL_0007:  ldloca.s   V_0
  IL_0009:  ldloc.0
  IL_000a:  box        ""T""
  IL_000f:  brtrue.s   IL_0015
  IL_0011:  pop
  IL_0012:  ldnull
  IL_0013:  br.s       IL_0020
  IL_0015:  constrained. ""T""
  IL_001b:  callvirt   ""string object.ToString()""
  IL_0020:  call       ""void System.Console.WriteLine(string)""
  IL_0025:  ret
```

which is functionally identical to the IL emitted for a read of an unconstrained readonly field, followed by a conditional access on that:

```csharp
  .locals init (T V_0) //temp
  IL_0000:  ldarg.0
  IL_0001:  ldfld      ""T Foo&lt;T&gt;.t""
  IL_0006:  stloc.0
  IL_0007:  ldloc.0
  IL_0008:  box        ""T""
  IL_000d:  brtrue.s   IL_0012
  IL_000f:  ldnull
  IL_0010:  br.s       IL_001f
  IL_0012:  ldloca.s   V_0
  IL_0014:  constrained. ""T""
  IL_001a:  callvirt   ""string object.ToString()""
  IL_001f:  call       ""void System.Console.WriteLine(string)""
  IL_0024:  ret
```

the only difference being, the first we load the receiver's address, and then pop it if it's null, the other we only load the receiver's address if its not null.</Description>
    <CreatedDate>26/05/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35978</IssueID>
    <RepoID>1</RepoID>
    <Title>'CS8629: Nullable value type may be null' reported when it can not be null</Title>
    <Description>**Version Used**: VS 16.1

**Steps to Reproduce**:

1. Compile this code (C#8 + NRT)

```C#
using System;

#nullable enable
namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            M(default((Guid g, string s)?));
            M(default((Guid g, string s)));
        }

        static void M((Guid g, string s)? t)
        {
            if (t?.g == Guid.Empty)
            {
                // 't': CS8629: Nullable value type may be null.
                _ = t.Value.s;
            }
        }
    }
}
```

**Expected Behavior**:

No warning

**Actual Behavior**:

Warning: CS8629: Nullable value type may be null.
</Description>
    <CreatedDate>26/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35977</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/05/2019</CreatedDate>
    <ClosedDate>30/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35976</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2 to release/dev16.2-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2 into release/dev16.2-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-to-release/dev16.2-preview2-vs-deps
git reset --hard upstream/release/dev16.2-preview2-vs-deps
git merge upstream/release/dev16.2-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-to-release/dev16.2-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/05/2019</CreatedDate>
    <ClosedDate>27/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35975</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.1-vs-deps
git reset --hard upstream/release/dev16.1-vs-deps
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/05/2019</CreatedDate>
    <ClosedDate>27/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35974</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/05/2019</CreatedDate>
    <ClosedDate>27/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35973</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.2-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.2-preview1.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.2-preview1
git reset --hard upstream/release/dev16.2-preview1
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.2-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/05/2019</CreatedDate>
    <ClosedDate>27/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35972</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35971</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35970</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35969</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to release/dev16.2-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into release/dev16.2-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-release/dev16.2-preview2-vs-deps
git reset --hard upstream/release/dev16.2-preview2-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-release/dev16.2-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>27/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35968</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to release/dev16.2-preview2</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview2.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview2
git reset --hard upstream/release/dev16.2-preview2
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35967</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2 to release/dev16.2-preview2-vs-deps</Title>
    <Description>
    </Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35966</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Versions.props</Title>
    <Description>
    </Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35965</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable debugging/EnC integration tests</Title>
    <Description>This PR disables integration tests: https://github.com/dotnet/roslyn/pull/34027, because it requires the lab/16.2stg build with VS debugger insertion which won't be available on the CI machine.

Enable the tests again once the CI machine is upgraded.

Also uncomment `#if TODO` in `WaitForDesignMode` </Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35964</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData.json</Title>
    <Description>
    </Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35963</IssueID>
    <RepoID>1</RepoID>
    <Title>Workspace should clear open documents that are removed during OnProjectReloaded</Title>
    <Description>When `Workspace.OnProjectReloaded()` is called with a smaller set of documents (effectively removing documents from a project), and if any of those documents were open, the workspace doesn't properly stop tracking those open documents unless the host explicitly calls `OnDocumentRemoved()` beforehand.

The logic in `Workspace.OnProjectRemoved` calls `ClearProjectData()`, which takes care of this. However OnProjectReloaded doesn't have this. It only has the logic to transplant open documents to the new snapshot.

I think an else block is missing here:
https://github.com/dotnet/roslyn/blob/676d4721390ed7419eea3c0f3fdb4a8d6725e7cc/src/Workspaces/Core/Portable/Workspace/Workspace_Editor.cs#L736

And inside the else block it should probably call `ClearOpenDocument(docId)`</Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35962</IssueID>
    <RepoID>1</RepoID>
    <Title> crash on ClassifyUpdate for EventFields</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32889</Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35961</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35960</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35959</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35958</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler crash when tuple equality used with a conversion-from-expression</Title>
    <Description>The [following code causes the C# compiler to crash](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDZICYgNQA+AAgAwAERAjANwCwAUA0QMwUBMZAwmQN4NkCKrKgDYKAFjIBZCGgB2ACgCU/QX3qDNFShwhkAvGQXKDAPl4BfJXQ1aBVAJzGISaUoOGFU1xCXXVAhYBZMGiEtImPEH00UA===):

``` c#
using System;

public class C {
    public static void Main()
    {
        Action a = (() =&gt; {});
        Console.WriteLine((a, M) == (M, a));
    }
    
    static void M() {}
}
```

the failure is

``` none
System.InvalidCastException: Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.BoundLocal' to type 'Microsoft.CodeAnalysis.CSharp.BoundMethodGroup'.
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeConversionNode(BoundConversion oldNode, SyntaxNode syntax, BoundExpression rewrittenOperand, Conversion conversion, Boolean checked, Boolean explicitCastInCode, ConstantValue constantValueOpt, TypeSymbol rewrittenType)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeConversionNode(SyntaxNode syntax, BoundExpression rewrittenOperand, Conversion conversion, TypeSymbol rewrittenType, Boolean checked, Boolean explicitCastInCode, ConstantValue constantValueOpt)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.RewriteTupleSingleOperator(Single single, BoundExpression left, BoundExpression right, TypeSymbol boolType, BinaryOperatorKind operatorKind)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.RewriteTupleOperator(TupleBinaryOperatorInfo operator, BoundExpression left, BoundExpression right, TypeSymbol boolType, ArrayBuilder`1 temps, BinaryOperatorKind operatorKind)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.RewriteNonNullableNestedTupleOperators(Multiple operators, BoundExpression left, BoundExpression right, TypeSymbol type, ArrayBuilder`1 temps, ArrayBuilder`1 effects, BinaryOperatorKind operatorKind)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.RewriteTupleNestedOperators(Multiple operators, BoundExpression left, BoundExpression right, TypeSymbol boolType, ArrayBuilder`1 temps, BinaryOperatorKind operatorKind)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitTupleBinaryOperator(BoundTupleBinaryOperator node)
   at Microsoft.CodeAnalysis.CSharp.BoundTupleBinaryOperator.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitExpressionImpl(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitExpressionImpl(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitUnusedExpression(BoundExpression expression)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.RewriteExpressionStatement(BoundExpressionStatement node, Boolean suppressInstrumentation)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitExpressionStatement(BoundExpressionStatement node)
   at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitPossibleUsingDeclaration(BoundStatement node, ImmutableArray`1 statements, Int32 statementIndex, Boolean&amp; replacedLocalDeclarations)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitStatementSubList(ArrayBuilder`1 builder, ImmutableArray`1 statements, Int32 startIndex)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, Boolean instrumentForDynamicAnalysis, ImmutableArray`1&amp; dynamicAnalysisSpans, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawLocalFunctions, Boolean&amp; sawAwaitInExceptionHandler)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
```

I believe the root cause is that the design of the tuple equality operator requires deferring the tuple element conversions.  But conversions that are *conversion-from-expression*s should not be deferred.

/cc @jcouv 
</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35957</IssueID>
    <RepoID>1</RepoID>
    <Title>Add Default Interface Implementation tests for VB</Title>
    <Description>Related to #35820, #35821, #35823, #35824, #35827, #35834, #35852, #35885, #35911, #35948.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>02/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35956</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler rejects lambda expression as operand of ==</Title>
    <Description>Given

``` c#
System.Action a = null;
void M() {}
```

the C# compiler permits the expression `a == M` but not the expression `a == (() =&gt; {})`.  If every delegate type defines an `operator==`, then both should compile cleanly because there is a conversion-from-expression from the right-hand-side to the type of the left-hand-side.  If the only available operator is `operator ==(System.Delegate x, System.Delegate y)`, then both should fail to compile because there is no conversion from the right-hand-side expression to `System.Delegate`.

Either they should both compile cleanly or neither should.

If we fix this by allowing the lambda, we should probably add a warning that it is unlikely to reliably succeed (we don't combine and cache equivalent lambdas).
</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35955</IssueID>
    <RepoID>1</RepoID>
    <Title>Initial support for [AllowNull], [DisallowNull], [MaybeNull], [NotNull] in NullableWalker</Title>
    <Description>Some support for simple pre- and post-condition nullable annotations on by-value parameters and return types.

---

Added to this PR:
- [x] attributes on ref/out parameters
- [x] test behavior on OHI
- [x] test behavior for implementers of a method
- [x] enforcing attributes from PEMethodSymbol
- [x] test attribute on ref-returning methods (ignored)

A number of scenarios and tests will be covered in later PRs:
- [ ] more scenarios involving return value (search for uses of `ReturnTypeWithAnnotations` in `NullableWalker`)
- [ ] decoding attributes on fields, properties and indexers
- [ ] enforcing attributes on fields, properties and indexers
- [ ] enforcing attributes on nullable value types (issue https://github.com/dotnet/roslyn/issues/36009)
- [ ] enforcing attributes in implementation and OHI (issue https://github.com/dotnet/roslyn/issues/36039)
- [ ] warn on misused attributes (issue https://github.com/dotnet/roslyn/issues/36073)</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35954</IssueID>
    <RepoID>1</RepoID>
    <Title>double click doesn't select whole word</Title>
    <Description>VSF_TYPE_MARKDOWNI have  &amp;quot;வாழைப்பழம&amp;quot; in the code editor. I expect the whole word to be selected if I double click on any letter.
Instead, depending on the place where I click, it either:
- makes caret go to the beginning of the word
- selects only latter part &amp;quot;ப்பழம&amp;quot;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/578580/double-click-doesnt-select-whole-word.html
VSTS ticketId: 897045_
_These are the original issue comments:_

Visual Studio Feedback System on 5/23/2019, 01:53 AM (37 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35953</IssueID>
    <RepoID>1</RepoID>
    <Title>Learn from comparisons to non-constant, non-null values</Title>
    <Description>Resolves #34942</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35952</IssueID>
    <RepoID>1</RepoID>
    <Title>BasicEditAndContinue.LocalsWindowUpdatesAfterLocalGetsItsTypeUpdatedDuringEnC Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=200739&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=4873668&amp;resultId=100245&amp;paneView=debug) - Integration Debug Async Attempt #1

```
    Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.LocalsWindowUpdatesAfterLocalGetsItsTypeUpdatedDuringEnC [STARTING]
      System.Runtime.InteropServices.COMException : Unable to execute method at this time.
      Stack Trace:
        
        Server stack trace: 
           at EnvDTE.Debugger.SetNextStatement()
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Debugger_InProc.SetNextStatement()
           at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
           at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)
        
        Exception rethrown at [0]: 
           at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
           at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Debugger_InProc.SetNextStatement()
        /_/src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/Debugger_OutOfProc.cs(40,0): at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.Debugger_OutOfProc.SetNextStatement()
        /_/src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicEditAndContinue.cs(270,0): at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicEditAndContinue.LocalsWindowUpdatesAfterLocalGetsItsTypeUpdatedDuringEnC()
```
![19 18 29-BasicEditAndContinue LocalsWindowUpdatesAfterLocalGetsItsTypeUpdatedDuringEnC-COMException](https://user-images.githubusercontent.com/611219/58355615-d68f8680-7e29-11e9-9f5b-8491e1a2599d.png)
</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35951</IssueID>
    <RepoID>1</RepoID>
    <Title>Add (internal-only) CompletionItem.AutomationText and pass it through to the editor</Title>
    <Description>Related to https://devdiv.visualstudio.com/DevDiv/_workitems/edit/603447 and https://devdiv.visualstudio.com/DevDiv/_workitems/edit/848126, but still requires work from consumers, particularly IntelliCode, to adopt.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>30/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35950</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect VB try/catch snippet applying in Visual Studio</Title>
    <Description>Hi,

I'm used **Visual Studio 16.0.2**

VB snippet `Try` doesn't make sure that the custom `Exception` type doesn't exist, so it generates a non compile code for the examples below:
```vb
Public Class [Exception]

  Sub Create()
    Try

    Catch ex As Exception

    End Try

  End Sub
End Class
```
```vb
Namespace Sample

  Public Class [Exception]

    Sub Create()
      Try

      Catch ex As Exception

      End Try

    End Sub
  End Class

End Namespace
```
```vb
Namespace System

  Public Class [Exception]

    Sub Create()
      Try

      Catch ex As Exception

      End Try

    End Sub
  End Class

End Namespace
```
`System` namespace is imported at global.

Expected that the snippet will append `FQN` and `Global` when it's needed.
</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35949</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable reference types cause exponential compile / analysis time even when disabled</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.2.0 Preview 1.0
VisualStudio.16.Preview/16.2.0-pre.1.0+28917.182
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Create a new solution.
Paste the following code into it:

```
using System;
using System.Runtime.CompilerServices;
class C
{
  static void Main(string[] args)
  {
    
  }

  private C f;

  void M(C c)
  {
c.f = c;
c.NotNull(
  x =&gt; x.f.NotNull(
    y =&gt; y.f.NotNull(
      z =&gt; z.f.NotNull(
        q =&gt; q.f.NotNull(
          w =&gt; w.f.NotNull(
            e =&gt; e.f.NotNull(
              r =&gt; r.f.NotNull(
          _ =&gt;
          {

            "".NotNull(s =&gt; s);
            "".NotNull(s =&gt; s);
            "".NotNull(s =&gt; s);
            "".NotNull(s =&gt; s);
            "".NotNull(s =&gt; s);
            "".NotNull(s =&gt; s);
            "".NotNull(s =&gt; s);
            "".NotNull(s =&gt; s);
            "".NotNull(s =&gt; s);
            "".NotNull(s =&gt; s);
            "".NotNull(s =&gt; s);
            "".NotNull(s =&gt; s);
            
            return "";
          }))))))));

  }

}

static class Ext
{
  public static extern V NotNull&lt;T, V&gt;([EnsuresNotNull] this T t, Func&lt;T, V&gt; f);
}

namespace System.Runtime.CompilerServices
{
  public class EnsuresNotNullAttribute : System.Attribute { }
}
```

Try to compile it with
`&lt;LangVersion&gt;8.0&lt;/LangVersion&gt;`
and
`&lt;LangVersion&gt;7.3&lt;/LangVersion&gt;`

**Expected Behavior**:
Compile time does not change much if you change the project's lang version.

**Actual Behavior**:
The project compiles in ~2 seconds on my machine if I use C# 7.3
```
&gt; msbuild ConsoleApp4.sln -property:Nullable=disable


  Program.cs(48,26): warning CS0626: Method, operator, or accessor 'Ext.NotNull&lt;T, V&gt;(T, Func&lt;T, V&gt;)' is marked externa
l and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.

    1 Warning(s)
    0 Error(s)

Time Elapsed 00:00:01.44
```

It takes ~15 minutes to compile with C# 8.0 on the same machine even though nullable reference types are disabled and not mentioned anywhere in the project.
```
&gt; msbuild ConsoleApp4.sln -property:Nullable=disable

  Program.cs(48,26): warning CS0626: Method, operator, or accessor 'Ext.NotNull&lt;T, V&gt;(T, Func&lt;T, V&gt;)' is marked externa
l and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.

    1 Warning(s)
    0 Error(s)

Time Elapsed 00:14:44.28
```

**Notes**
It's also quite hard to do literally anything with this file since Roslyn keeps analyzing it restarting the analysis at every change you make causing constant high CPU usage.

You can change the compilation time by a factor of 2 by adding / removing top level `.NotNull` calls.
Roslyn analyses arguments of methods with flow annotations such as `[EnsuresNotNull]` at least twice in order to first report errors / warnings and then infer variables' states after the call. Consequently it analyses any argument expression in annotated call chains at least 2^N times where N is the number of annotated calls. Compile/analysis time can be dragged even lower by adding more code to analyze or cycles that will cause multiple data flow passes over the whole method.

I'm also not sure why Roslyn runs this analysis at all despite nullable reference types being explicitly disabled for this project. </Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35948</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM: Misleading accessibility in an error message about an attempt to access inaccessible event declared in an interface</Title>
    <Description>```
        &lt;Fact&gt;
        Public Sub EventImplementation_27()

            Dim csSource =
"
public interface I1
{
    internal static event System.Action P1;
}
"
            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()

            Dim source1 =
&lt;compilation&gt;
    &lt;file name="c.vb"&gt;&lt;![CDATA[
Public Class C
    Shared Sub Main()
        AddHandler I1.P1, Nothing
        RemoveHandler I1.P1, Nothing
    End Sub
End Class
]]&gt;&lt;/file&gt;
&lt;/compilation&gt;

            Dim comp1 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})
            comp1.AssertTheseDiagnostics(
&lt;error&gt;
BC30456: 'P1' is not a member of 'I1'.
        AddHandler I1.P1, Nothing
                   ~~~~~
BC30456: 'P1' is not a member of 'I1'.
        RemoveHandler I1.P1, Nothing
                      ~~~~~
&lt;/error&gt;)

            Dim comp2 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation}, options:=TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All))
            comp2.AssertTheseDiagnostics(
&lt;error&gt;
BC30389: 'I1.P1' is not accessible in this context because it is 'Private'.
        AddHandler I1.P1, Nothing
                   ~~~~~
BC30389: 'I1.P1' is not accessible in this context because it is 'Private'.
        RemoveHandler I1.P1, Nothing
                      ~~~~~
&lt;/error&gt;)
        End Sub
```

Observed:
```
BC30389: 'I1.P1' is not accessible in this context because it is 'Private'.
```

Expected:
```
BC30389: 'I1.P1' is not accessible in this context because it is 'Friend'.
```</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35947</IssueID>
    <RepoID>1</RepoID>
    <Title>Use TestAccessor pattern for EnC test hooks</Title>
    <Description>```
src\Features\Core\Portable\EditAndContinue\EditAndContinueWorkspaceService.cs
src\Features\Core\Portable\EditAndContinue\DebuggingSession.cs
```
</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35946</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix some bugs in the project system shims that impact ASP.NET Projects</Title>
    <Description>Fixes two bugs found while investigating a report from @ToddGrun.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35945</IssueID>
    <RepoID>1</RepoID>
    <Title>Is there any documentation available on Visual Basic Interactive?</Title>
    <Description>Is there any documentation available on Visual Basic Interactive?
* Design proposal / details.
* Implementation information
* Tests
* ToDo list.
* Etc
So that someone could looking to make progress on it.
</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35944</IssueID>
    <RepoID>1</RepoID>
    <Title>Use camelCase for local functions in Roslyn code base</Title>
    <Description>Using camelCase for local functions makes it much more obvious that we are working with local functions and not methods. It also is more consistent to use the same casing for all local declarations - variables and functions.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35943</IssueID>
    <RepoID>1</RepoID>
    <Title>Removing unused variables doesn't update the IDE</Title>
    <Description>VSF_TYPE_MARKDOWNCS0649 warning that you can remove variables that are not used doesn't always update the IDE. See screenshot.
The variables were removed but the IDE still thinks they are there.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/581662/removing-unused-variables-doesnt-update-the-ide.html
VSTS ticketId: 898309_
_These are the original issue comments:_

Visual Studio Feedback System on 5/24/2019, 03:14 AM (7 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35942</IssueID>
    <RepoID>1</RepoID>
    <Title>[Request] Generate warnings for xmldoc syntax errors even without &lt;GenerateDocumentationFile&gt;true&lt;/...&gt;</Title>
    <Description>When writing an xmldoc comment, I sometimes find myself writing something like:

``` C#
/// &lt;summary&gt;
/// Provides functionality for Foo &amp; Bar
/// &lt;/summary&gt;
public class Baz { }
```

That is, an ampersand instead of "and", which of course isn't valid XML.

I can get warnings about this if `&lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt;` is set in my project file, but otherwise, the compiler remains silent, and my mouseover tooltips in VS are just blank because the XML couldn't be parsed.

Is it possible to get syntax checking and related warnings enabled for xmldoc comments even if documentation files aren't being generated? Including warnings like CS1570 ("XML comment has badly formed XML"), but NOT including CS1591 ("Missing XML comment for publicly visible type or member") unless doc file generation is enabled.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35941</IssueID>
    <RepoID>1</RepoID>
    <Title>NullReferenceException in CSharpDiagnosticAnalyzerApiUsageAnalyzer for open generic type</Title>
    <Description>**Version Used**: microsoft.codeanalysis.analyzers - 2.6.2-beta2

**note**: this *beta* version of the meta-analyzers is still referred to in new releases of Roslyn. https://www.nuget.org/packages/Microsoft.CodeAnalysis.Common/ (look at the dependencies)

**Steps to Reproduce**:

1. Create an analyzer project
2. Paste in [this code](https://github.com/aspnet/AspNetCore/blob/6115c18f17737ee8e0f0680ea709b6149fe2322f/src/Components/Analyzers/src/ComponentSymbols.cs)
3. Do a build, or type in the file to run the meta-analyzers

**Expected Behavior**:

Does not crash

**Actual Behavior**:

```txt
Severity	Code	Description	Project	File	Line	Suppression State	Detail Description
Error	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpDiagnosticAnalyzerApiUsageAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.	Microsoft.AspNetCore.Components.Analyzers		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpDiagnosticAnalyzerApiUsageAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Microsoft.AspNetCore.Components.Analyzers
ISymbol: ComponentSymbols (NamedType)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.DiagnosticAnalyzerApiUsageAnalyzer`1.AddUsedNamedTypeCore(ITypeSymbol typeOpt, Builder builder, Boolean&amp; hasAccessToTypeFromWorkspaceAssemblies)
   at Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.DiagnosticAnalyzerApiUsageAnalyzer`1.AddUsedNamedTypeCore(ITypeSymbol typeOpt, Builder builder, Boolean&amp; hasAccessToTypeFromWorkspaceAssemblies)
   at Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.DiagnosticAnalyzerApiUsageAnalyzer`1.GetUsedNamedTypes(INamedTypeSymbol namedType, Compilation compilation, CancellationToken cancellationToken, Boolean&amp; hasAccessToTypeFromWorkspaceAssemblies)
   at Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.DiagnosticAnalyzerApiUsageAnalyzer`1.&lt;&gt;c__DisplayClass11_0.&lt;Initialize&gt;b__1(SymbolAnalysisContext symbolContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c.&lt;ExecuteSymbolActionsCore&gt;b__40_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```

The issue seems to be related to these lines of code:
```C#
var dictionary = compilation.GetTypeByMetadataName(typeof(Dictionary&lt;,&gt;).FullName);
            var @string = compilation.GetSpecialType(SpecialType.System_String);
            var @object = compilation.GetSpecialType(SpecialType.System_Object);
            if (dictionary == null || @string == null || @object == null)
            {
                symbols = null;
                return false;
            }

var parameterCaptureUnmatchedValuesRuntimeType = dictionary.Construct(@string, @object);
```

If I change this to use a simpler construct `compilation.GetTypeByMetadataName(typeof(Dictionary&lt;string,object&gt;).FullName)` - this takes aware the error (yes I'm aware this won't actually find the type).
</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35940</IssueID>
    <RepoID>1</RepoID>
    <Title>Compile error CS2011 when project root folder contains cs files whose names start with "at" character</Title>
    <Description>**Version Used**: 
.Net Core 3 Preview 5 - 3.100.19.22309

**Steps to Reproduce**:
Place `@SomeFileName.cs`-named file in the netcoreapp3 project root (file name prefixed with `@`).

**Expected Behavior**:
Regardless of the file's name (whether it has or does not have the `@` prefix), its clocation (in the root project dir or not), or its contents (as long it's valid C# code) project should compile.

**Actual Behavior**:
`CSC : error CS2011: Error opening response file '...\ProjectDir\SomeFileName.cs'` (note the missing `@` infront of the file name in the error message)</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35939</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

## From https://github.com/dotnet/arcade
- **Build**: 20190523.11
- **Date Produced**: 5/24/2019 5:52 AM
- **Commit**: 02a90cc69d2d32bbde9e6e0e41186711c591de27
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19273.11

## From https://github.com/dotnet/arcade
- **Build**: 20190524.6
- **Date Produced**: 5/24/2019 11:03 PM
- **Commit**: b5016f5688dc8ca9f3e4811ee7e2e86ad8907a40
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19274.6

## From https://github.com/dotnet/arcade
- **Build**: 20190524.6
- **Date Produced**: 5/24/2019 11:03 PM
- **Commit**: b5016f5688dc8ca9f3e4811ee7e2e86ad8907a40
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19274.6

## From https://github.com/dotnet/arcade
- **Build**: 20190524.6
- **Date Produced**: 5/24/2019 11:03 PM
- **Commit**: b5016f5688dc8ca9f3e4811ee7e2e86ad8907a40
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19274.6

## From https://github.com/dotnet/arcade
- **Build**: 20190524.6
- **Date Produced**: 5/24/2019 11:03 PM
- **Commit**: b5016f5688dc8ca9f3e4811ee7e2e86ad8907a40
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19274.6

## From https://github.com/dotnet/arcade
- **Build**: 20190528.1
- **Date Produced**: 5/28/2019 6:41 PM
- **Commit**: 11f90a2a260422201895de58e57170131ab4efe7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19278.1

## From https://github.com/dotnet/arcade
- **Build**: 20190529.5
- **Date Produced**: 5/30/2019 3:41 AM
- **Commit**: fb62c6377a6bd163af2a7516260f064498942585
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19279.5

## From https://github.com/dotnet/arcade
- **Build**: 20190530.2
- **Date Produced**: 5/30/2019 5:22 PM
- **Commit**: 7c50d548001a83a18449ad4dda370122ede5fbf6
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19280.2

## From https://github.com/dotnet/arcade
- **Build**: 20190531.5
- **Date Produced**: 5/31/2019 10:53 PM
- **Commit**: c901850aa1e175c124da771863dacc763743a520
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19281.5

## From https://github.com/dotnet/arcade
- **Build**: 20190601.2
- **Date Produced**: 6/1/2019 1:04 PM
- **Commit**: 8fd0b50b9d689e8d87ab202f11b7c9fbe81271c4
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19301.2

## From https://github.com/dotnet/arcade
- **Build**: 20190602.2
- **Date Produced**: 6/2/2019 1:09 PM
- **Commit**: e6a5d5f970bb872451c6310ae34eda31041fb552
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19302.2

## From https://github.com/dotnet/arcade
- **Build**: 20190604.1
- **Date Produced**: 6/4/2019 8:16 AM
- **Commit**: d2599acd9703ef747dfb4329ec3e3beff182e755
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19304.1

## From https://github.com/dotnet/arcade
- **Build**: 20190604.23
- **Date Produced**: 6/5/2019 4:12 AM
- **Commit**: c9ab9c47d6c66fb9ad89e331900e06bed7463904
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19304.23

## From https://github.com/dotnet/arcade
- **Build**: 20190605.13
- **Date Produced**: 6/6/2019 5:54 AM
- **Commit**: d05c046913964e880be08b804e7249f297617c2f
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19305.13

## From https://github.com/dotnet/arcade
- **Build**: 20190606.12
- **Date Produced**: 6/6/2019 9:47 PM
- **Commit**: a1805103791e43031355e11c0d037bca803a9593
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19306.12

## From https://github.com/dotnet/arcade
- **Build**: 20190607.62
- **Date Produced**: 6/8/2019 3:43 AM
- **Commit**: 29999b2846623e2d96733577165968d09bc2bcc1
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19307.62

## From https://github.com/dotnet/arcade
- **Build**: 20190608.1
- **Date Produced**: 6/8/2019 12:50 PM
- **Commit**: 747a1bdf2a74a486fb075045cb2384fa89a7983c
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19308.1

## From https://github.com/dotnet/arcade
- **Build**: 20190609.1
- **Date Produced**: 6/9/2019 12:42 PM
- **Commit**: 45361625125cdd3119050a852bd73163ca4b73f4
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19309.1

## From https://github.com/dotnet/arcade
- **Build**: 20190610.24
- **Date Produced**: 6/11/2019 12:59 AM
- **Commit**: f268510de7a7bcf800a6966830f8d11ff8d24e0d
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19310.24

## From https://github.com/dotnet/arcade
- **Build**: 20190611.2
- **Date Produced**: 6/11/2019 12:55 PM
- **Commit**: dfc41299b9aadb1ca98093d660df81811eca901b
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19311.2

## From https://github.com/dotnet/arcade
- **Build**: 20190612.21
- **Date Produced**: 6/13/2019 7:23 AM
- **Commit**: e5cd71926eaa13aba3138c14cd80def0ccfebb30
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19312.21

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190618.2
- **Date Produced**: 6/18/2019 8:19 AM
- **Commit**: dc538a29793fd56618d0fa3186e2388d47d00c19
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19318.2

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)









</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35938</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35937</IssueID>
    <RepoID>1</RepoID>
    <Title>Diff view can't understand preview language features</Title>
    <Description>**Version Used**: 

Visual Studio 2019 both 16.1.0 and 16.2.0 Pregview 1.0

**Steps to Reproduce**:

1. write any C# 8.0 code e.g. [this](https://github.com/ufcpp/UfcppSample/commit/7a47b5cf20a3de37529b79e80edff356e67b57b6)
2. show it with "Compare with Previous..."

**Expected Behavior**:

No error in the Diff view.

**Actual Behavior**:

The Diff view can't understand preview language features.

![image](https://user-images.githubusercontent.com/3760955/58320057-ca212300-7e55-11e9-9a34-5a13434fc031.png)

</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35936</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyzers and code fixes that require .NET Standard 2.1 features should be disabled in projects not targeting it</Title>
    <Description>**Version Used**: Shipped with Visual Studio 2019 16.1

**Steps to Reproduce**:

1. Create a new C# project that targets a framework that does **not** support .NET Standard 2.1 (e.g. any version of .NET Framework, .NET Core &lt; 3.0, .NET Standard &lt; 2.1).
2. Add `&lt;LangVersion&gt;preview&lt;/LangVersion&gt;` to the .csproj file.
3. Make sure the C# code style analyzers "Prefer index operator" and "Prefer range operator" are enabled (this is the case by default).
Alternatively add an .editorconfig file with those settings:

``` ini
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
```

4. Add the following code:

``` cs
int[] numbers = { 1, 2 };
string text = "abc";
_ = numbers[numbers.Length - 1];
_ = text.Substring(1, text.Length - 1);
```
5. Check the error list and suggested code fixes in the last two lines of the code.

**Expected Behavior**:
No analyzer messages or code fixes that belong to analyzer messages should be shown.

**Actual Behavior**:
Analyzer messages "IDE0056 Indexing can be simplified" and "IDE0057 Substring can be simplified" are shown.
If you apply the provided code fixes, compile errors are produced because indexers and ranges are not supported in the target framework of the project.

Note: Right now those two analyzers/code fixes are the only ones I know of that show this problem. But of course this should be applied to all analyzers/code fixes that require features of a specific target framework.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35935</IssueID>
    <RepoID>1</RepoID>
    <Title>Update azure-pipelines.yml</Title>
    <Description>Trying out the public pool for the build.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35934</IssueID>
    <RepoID>1</RepoID>
    <Title>VSSDK update</Title>
    <Description>
    </Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35933</IssueID>
    <RepoID>1</RepoID>
    <Title>ITypeSymbol Equality should ignore nullability</Title>
    <Description>ITypeSymbol equality should only consider things that were available in C# 7.3 by default, and we need to expose a new set of equality comparers to allow for customization in how symbols are compared, including nested nullability.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35932</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35931</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35930</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35929</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.1-vs-deps
git reset --hard upstream/release/dev16.1-vs-deps
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35928</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.2-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.2-preview1.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.2-preview1
git reset --hard upstream/release/dev16.2-preview1
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.2-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35927</IssueID>
    <RepoID>1</RepoID>
    <Title>rename TypeArgumentsNullableAnnotations to TypeArgumentNullableAnnotations</Title>
    <Description>This word has two "s"s each of which indicates it is a plural.  It only needs one "s" to be plural (at the end).</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35926</IssueID>
    <RepoID>1</RepoID>
    <Title>Codelens for internal static variables is not showing up</Title>
    <Description>VSF_TYPE_MARKDOWNI have _internal static class_ and declared some _internal static variables_ at class level. The codelens is not working for this particular variables. Seems to me its a bug.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/542962/codelens-for-internal-static-variables-is-not-show.html
VSTS ticketId: 853984_
_These are the original issue comments:_

Visual Studio Feedback System on 4/23/2019, 01:15 AM (30 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35925</IssueID>
    <RepoID>1</RepoID>
    <Title>Dictionary of tuple shows wrong value while debugging</Title>
    <Description>VSF_TYPE_MARKDOWNI have a Dictionary&amp;lt;string,(tupletype)&amp;gt;, where the tupletype has two named items inside. When I debug the application, if I have an expression that references an element from this dictionary and then from the tuple, the value is shown wrong. If I dive into the dictionary from the dictionary object, the value is correct. 

Here is a code to reproduce the issue:

```
    class Program {
        static void Main(string[] args) {
            Dictionary&amp;lt;string, (DateTimeOffset Expiry, SomeClass Token)&amp;gt; dict = 
                new Dictionary&amp;lt;string, (DateTimeOffset Expiry, SomeClass Token)&amp;gt;();

dict. Add(&amp;quot;yaayoo&amp;quot;, (DateTimeOffset.Now, new SomeClass { Id = 1, Foobar = &amp;quot;Barbarian&amp;quot; }));

Console.WriteLine(dict[&amp;quot;yaayoo&amp;quot;]. Expiry);
        }
    }

class SomeClass {
        public int Id { get; set; }
        public string Foobar { get; set; }
    }
```

Place a breakpoint on the `WriteLine` line. Observe that the currect value is printed to the console. Now hover over `Expiry`. It will show `1.1.0001`, or the MinValue for the `DateTimeOffset` member. 

Now hover over the dict object. As you open up the only item inside, you can see the tuple and the values correctly.

Same happens in the Watch window. If you add `dict[&amp;quot;yaayoo&amp;quot;]. Expiry` it will show `MinValue`, but if you add just `dict` and open it up, the correct values are displayed.

See also attached screenshot.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/578571/dictionary-of-tuple-shows-wrong-value-while-debugg.html
VSTS ticketId: 897034_
_These are the original issue comments:_

Visual Studio Feedback System on 5/23/2019, 01:52 AM (14 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 5/23/2019, 09:52 AM (6 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35924</IssueID>
    <RepoID>1</RepoID>
    <Title>DevDivInsertionFiles: Fix dependency error reporting</Title>
    <Description>Two issues:
1) Replace `AfterTargets="Build"` with `BeforeTargets="AfterBuild"`
   Workaround for https://github.com/microsoft/msbuild/issues/3345
2) System.ValueTuple
   Seems like the System.ValueTuple package is missing `lib/net472/_._`, so `lib/net47/System.ValueTuple.dll` is identified as a runtime dependency although it is not.

https://github.com/dotnet/roslyn/issues/34558.</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35923</IssueID>
    <RepoID>1</RepoID>
    <Title>Update EditorFeatures.WPF dependencies</Title>
    <Description>Fixes #35897</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35922</IssueID>
    <RepoID>1</RepoID>
    <Title>[C#] No intellisense on fall-through switch when the code block following is in curly braces</Title>
    <Description>VSF_TYPE_MARKDOWN
```
enum Foo { Bar, Baz }

...

switch( Foo.Bar )
{
    case Foo.Bar:
    case &lt;x&gt;
    {
        break;
    }
}
```
When typing at location &amp;lt;x&amp;gt; there is no intellisense/auto-complete if the block following is wrapped in curly braces. Attempting to hint by typing _Foo._ also fails to trigger intellisense. If the curly braces are removed intellisense works as expected and shows members of the Foo enum.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/579118/c-no-intellisense-on-fall-through-switch-when-the.html
VSTS ticketId: 897321_
_These are the original issue comments:_

Visual Studio Feedback System on 5/23/2019, 01:59 AM (12 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35921</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose internal service for tested by code lens indicator</Title>
    <Description>
    </Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35920</IssueID>
    <RepoID>1</RepoID>
    <Title>Access violation in NativeDkmClrRuntimeInstance</Title>
    <Description>Occurred during integration testing:

```
Event Time (UTC): 5/23/2019 8:22:07 PM
Event ID: 1026
Data: Application: devenv.exe
Framework Version: v4.0.30319
Description: The process was terminated due to an unhandled exception.
Exception Info: exception code c0000005, exception address 5CEA944F
Stack:
   at Microsoft.VisualStudio.Debugger.Clr.NativeDkmClrRuntimeInstance.Proc49F49E75832DB0CFA04009B1EA0F608F(IntPtr, IntPtr, IntPtr, Microsoft.VisualStudio.Debugger.Evaluation.DkmFuncEvalFlags, UInt32, IntPtr, IntPtr, Int32 ByRef)
   at Microsoft.VisualStudio.Debugger.Clr.DkmClrRuntimeInstance.ContinueForFuncEval(Microsoft.VisualStudio.Debugger.DkmThread, Microsoft.VisualStudio.CorDebugInterop.ICorDebugEval, Microsoft.VisualStudio.Debugger.Evaluation.DkmFuncEvalFlags, UInt32, System.String, Microsoft.VisualStudio.Debugger.Clr.DkmClrInstructionAddress)
   at VSDebugEngine.ClrInspector.VilHelper.ContinueForFuncEval(Microsoft.VisualStudio.Debugger.DkmThread, Microsoft.VisualStudio.Debugger.Evaluation.DkmFuncEvalFlags, System.Object, UInt32, System.String, Microsoft.VisualStudio.Debugger.Metadata.MethodBase)
   at VSDebugEngine.ClrInspector.VilCallback.ContinueForFuncEval(Microsoft.VisualStudio.Debugger.DkmThread, Microsoft.VisualStudio.Debugger.Evaluation.DkmFuncEvalFlags, System.Object, UInt32, System.String, Microsoft.VisualStudio.Debugger.Metadata.MethodBase)
   at Microsoft.VisualStudio.VIL.VisualStudioHost.VSGlobalContext.WaitForFuncEvalCompleteConcord(Microsoft.VisualStudio.VIL.DebuggerHost.CorEval, Microsoft.VisualStudio.VIL.VisualStudioHost.LocalContextWrapper, Microsoft.VisualStudio.VIL.DebuggerHost.EvaluationFlags, Microsoft.VisualStudio.Debugger.Metadata.MethodBase)
   at Microsoft.VisualStudio.VIL.VisualStudioHost.VSGlobalContext.WaitForFuncEvalComplete(Microsoft.VisualStudio.VIL.DebuggerHost.CorEval, Microsoft.VisualStudio.VIL.DebuggerHost.LocalContext, Microsoft.VisualStudio.VIL.DebuggerHost.EvaluationFlags, Microsoft.VisualStudio.Debugger.Metadata.MethodBase)
   at Microsoft.VisualStudio.VIL.DebuggerHost.RealFuncEval.DoRealFuncEval(Microsoft.VisualStudio.Debugger.Metadata.MethodBase, Ilrun.CallArgs)
   at Microsoft.VisualStudio.VIL.VisualStudioHost.InspectionHook.TryRealFuncEval(Microsoft.VisualStudio.VIL.VisualStudioHost.VSGlobalContext, Microsoft.VisualStudio.VIL.VisualStudioHost.LocalContextWrapper, Microsoft.VisualStudio.Debugger.Metadata.MethodBase, Ilrun.CallArgs)
   at Microsoft.VisualStudio.VIL.VisualStudioHost.InspectionHook.Hook_TryRealFuncEval(Ilrun.VirtualMachine, Microsoft.VisualStudio.Debugger.Metadata.MethodBase, Ilrun.CallArgs)
   at Microsoft.VisualStudio.VIL.VisualStudioHost.InspectionHook.Hook_CallFromRootFrame(Ilrun.VirtualMachine, Microsoft.VisualStudio.Debugger.Metadata.MethodBase, Ilrun.CallArgs)
   at Ilrun.VirtualMachine2.ExecuteHookedMethod(Ilrun.HookedMethod, Ilrun.CallArgs)
   at Ilrun.VirtualMachine2.ForwardLoop()
   at Ilrun.VirtualMachine2.RunForward()
   at Ilrun.VirtualMachine2.ExecuteMethodInternal(Microsoft.VisualStudio.Debugger.Metadata.MethodBase, Ilrun.CallArgs, Ilrun.IVirtualStackFrame)
   at Ilrun.VirtualMachine2.ExecuteInspectionQuery(Microsoft.VisualStudio.Debugger.Metadata.MethodBase, Ilrun.IVirtualStackFrame)
   at Microsoft.VisualStudio.VIL.VisualStudioHost.VilEvaluationServices.InterpretInspectionQuery(Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionSession, Microsoft.VisualStudio.Debugger.DkmWorkList, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationFlags, Microsoft.VisualStudio.Debugger.Evaluation.DkmFuncEvalFlags, UInt32, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame, Microsoft.VisualStudio.Debugger.Metadata.Assembly, System.String, System.String, System.String, Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrCompilationResultFlags, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultCategory, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultAccessType, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultStorageType, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultTypeModifierFlags, Microsoft.VisualStudio.VIL.VisualStudioHost.VilEvaluationResult, Microsoft.VisualStudio.Debugger.Metadata.Type, Microsoft.VisualStudio.VIL.VisualStudioHost.InspectionQueryUserContext, System.String ByRef, Microsoft.VisualStudio.Debugger.Metadata.MethodInfo ByRef)
   at VSDebugEngine.ClrInspector.VilHelper.ExecuteQueryInternal(Microsoft.VisualStudio.Debugger.Metadata.Assembly, System.String, System.String, Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrCompilationResultFlags, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultCategory, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultAccessType, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultStorageType, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultTypeModifierFlags, Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrCustomTypeInfo, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame, System.String, System.String, System.Collections.ObjectModel.ReadOnlyCollection`1&lt;System.String&gt;, Microsoft.VisualStudio.Debugger.DkmWorkList, VSDebugEngine.ClrInspector.EvaluationResultContinuation)
   at VSDebugEngine.ClrInspector.VilHelper.ExecuteInspectionQuery(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmCompiledClrInspectionQuery, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame, System.String, Microsoft.VisualStudio.Debugger.DkmWorkList, VSDebugEngine.ClrInspector.EvaluationResultContinuation)
   at VSDebugEngine.ClrInspector.EntryPoint.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmClrInspectionQueryProcessor.Execute(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmCompiledClrInspectionQuery, Microsoft.VisualStudio.Debugger.DkmWorkList, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext, Microsoft.VisualStudio.Debugger.Evaluation.DkmILContext, System.String, Microsoft.VisualStudio.Debugger.DkmCompletionRoutine`1&lt;Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmExecuteClrInspectionQueryAsyncResult&gt;)
   at Microsoft.VisualStudio.Debugger.EntryPoint.IDkmClrInspectionQueryProcessor_Execute(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr)
```</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35919</IssueID>
    <RepoID>1</RepoID>
    <Title>CI failing with: update ExpectedDependency list: System.ValueTuple</Title>
    <Description>See https://dev.azure.com/dnceng/public/_build/results?buildId=198851&amp;view=logs&amp;jobId=6a7d83c1-6850-57a3-ff09-22192451ed19 as an example.  </Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35918</IssueID>
    <RepoID>1</RepoID>
    <Title>Explicit conversion in foreach is incorrect</Title>
    <Description>See https://github.com/dotnet/roslyn/pull/35095#discussion_r277894589 for context 

For an explicit conversion from foreach, the expected value should be `NoConversion` when the current type is explicit and the enumerable type is unknown

[@gafter added]
The context is a test with the source code
``` c#
class C1
{
}

class C2
{
    public void M() 
    {
        var c = new C1();
        foreach (string item in c.Items)
        {
        }
}
```
which tests
``` c#
            var comp = CreateCompilation(source);
            var tree = comp.SyntaxTrees.Single();
            var model = comp.GetSemanticModel(tree);

            var root = tree.GetRoot();
            var foreachSyntaxNode = root.DescendantNodes().OfType&lt;ForEachStatementSyntax&gt;().Single();
            var foreachSymbolInfo = model.GetForEachStatementInfo(foreachSyntaxNode);

            Assert.Equal(Conversion.UnsetConversion, foreachSymbolInfo.CurrentConversion);
            Assert.True(foreachSymbolInfo.CurrentConversion.Exists);
            Assert.False(foreachSymbolInfo.CurrentConversion.IsImplicit);
```
and the comment was
&gt; I'd expect the conversion to be Conversion.NoConversion (and Exists to be false).
&gt; 
&gt; I think that was changed by PR https://github.com/dotnet/roslyn/pull/33648 which introduced `UnsetConversion`, but not intentionally.
</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35917</IssueID>
    <RepoID>1</RepoID>
    <Title>Add recently added features list</Title>
    <Description>
This came from a need to easily search our growing feature list all in one place. Currently in the Visual Studio release notes one must navigate to several different pages to get an idea of what has been added recently.

@tmat @jinujoseph 
</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35916</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not suggest converting from using-statement to using-local form if it would cause a variable collision.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/35879</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35915</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider improving diagnostics when all equally specific implementation candidates are re-abstractions</Title>
    <Description>```
        [Fact]
        public void MethodReAbstraction_09()
        {
            var source1 =
@"
public interface I1
{
    void M1() {} 
}

public interface I2 : I1
{
    abstract void I1.M1();
}

public interface I3 : I1
{
    abstract void I1.M1();
}
";

            var source2 =
@"
class Test1 : I2, I3
{
}
";
            ValidateMethodReAbstraction_09(source1, source2);
        }

        private void ValidateMethodReAbstraction_09(string source1, string source2)
        {
            var compilation1 = CreateCompilation(source2 + source1, options: TestOptions.DebugDll,
                                                 parseOptions: TestOptions.Regular,
                                                 targetFramework: TargetFramework.NetStandardLatest);
            validate(compilation1.SourceModule);

            var expected = new DiagnosticDescription[]
                {
                    // (2,15): error CS8705: Interface member 'I1.M1()' does not have a most specific implementation. Neither 'I2.I1.M1()', nor 'I3.I1.M1()' are most specific.
                    // class Test1 : I2, I3
                    Diagnostic(ErrorCode.ERR_MostSpecificImplementationIsNotFound, "I2").WithArguments("I1.M1()", "I2.I1.M1()", "I3.I1.M1()").WithLocation(2, 15)
                };

            compilation1.VerifyDiagnostics(expected);

            var compilation2 = CreateCompilation(source1, options: TestOptions.DebugDll,
                                                 parseOptions: TestOptions.Regular,
                                                 targetFramework: TargetFramework.NetStandardLatest);
            compilation2.VerifyDiagnostics();

            foreach (var reference in new[] { compilation2.ToMetadataReference(), compilation2.EmitToImageReference() })
            {
                var compilation3 = CreateCompilation(source2, options: TestOptions.DebugDll, references: new[] { reference },
                                                     parseOptions: TestOptions.Regular,
                                                     targetFramework: TargetFramework.NetStandardLatest);
                validate(compilation3.SourceModule);
                compilation3.VerifyDiagnostics(expected);
            }

            static void validate(ModuleSymbol m)
            {
                var test1 = m.GlobalNamespace.GetTypeMember("Test1");
                var i1m1 = test1.InterfacesNoUseSiteDiagnostics().First().ContainingNamespace.GetTypeMember("I1").GetMember&lt;MethodSymbol&gt;("M1");
                Assert.Equal("void I1.M1()", i1m1.ToTestDisplayString());

                Assert.Null(test1.FindImplementationForInterfaceMember(i1m1));
            }
        }
```

Observed:
```
                    // (2,15): error CS8705: Interface member 'I1.M1()' does not have a most specific implementation. Neither 'I2.I1.M1()', nor 'I3.I1.M1()' are most specific.
                    // class Test1 : I2, I3
                    Diagnostic(ErrorCode.ERR_MostSpecificImplementationIsNotFound, "I2").WithArguments("I1.M1()", "I2.I1.M1()", "I3.I1.M1()").WithLocation(2, 15)
```

Suggested: Perhaps we should simply say that I1.M1() is not implemented as long as all conflicting candidates are re-abstractions.</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35914</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix declaration name completion when local functions present.</Title>
    <Description>Resolves https://github.com/dotnet/roslyn/issues/35891
</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35913</IssueID>
    <RepoID>1</RepoID>
    <Title>add value tuple dependency</Title>
    <Description>move ValueTuple dependency back in. 

https://github.com/dotnet/roslyn/pull/34860 (streamjsonrpc 2.0) turns out still require ValueTuple dependency</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35912</IssueID>
    <RepoID>1</RepoID>
    <Title>Codestyle: Require comments on specified members</Title>
    <Description>[Original developer community](https://developercommunity.visualstudio.com/idea/551465/对editorconfig-的-net-编码约定设置增加注释规则.html?childToView=579424#comment-579424
)

&gt; Add annotation rules to the .NET encoding convention settings of Editorconfig
&gt; if a field, property, or method is missing a comment, vs can have suggestions, warnings, or incorrect configuration.

Example:
```
dotnet_style_require_comments.applicable_kinds = field, method, property
dotnet_style_require_comments = true:suggestion
```
</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35911</IssueID>
    <RepoID>1</RepoID>
    <Title>An attempt to embed an interface with a re-abstraction of a method from base should produce an error</Title>
    <Description>```
        [Fact]
        public void NoPia_10()
        {
            var attributes = CreateCompilation(NoPiaAttributes, options: TestOptions.ReleaseDll, targetFramework: TargetFramework.NetStandardLatest);
            var attributesRef = attributes.EmitToImageReference();

            string pia = @"
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

[assembly: PrimaryInteropAssemblyAttribute(1,1)]
[assembly: Guid(""f9c2d51d-4f44-45f0-9eda-c9d599b58257"")]

[ComImport()]
[Guid(""f9c2d51d-4f44-45f0-9eda-c9d599b58279"")]
public interface ITest33
{
    void M1();
}

[ComImport()]
[Guid(""f9c2d51d-4f44-45f0-9eda-c9d599b58280"")]
public interface ITest44 : ITest33
{
    abstract void ITest33.M1();
}
";

            var piaCompilation = CreateCompilation(pia, options: TestOptions.ReleaseDll, references: new[] { attributesRef }, targetFramework: TargetFramework.NetStandardLatest);

            CompileAndVerify(piaCompilation, verify: VerifyOnMonoOrCoreClr);

            string consumer = @"
class UsePia
{
    public static void Main(ITest44 x)
    {
        x.M1();
    }
} 
";

            foreach (var reference in new[] { piaCompilation.ToMetadataReference(embedInteropTypes: true), piaCompilation.EmitToImageReference(embedInteropTypes: true) })
            {
                var compilation1 = CreateCompilation(consumer, options: TestOptions.ReleaseDll, references: new[] { reference, attributesRef }, targetFramework: TargetFramework.NetStandardLatest);

                compilation1.VerifyEmitDiagnostics(
                    // (4,29): error CS8711: Type 'ITest44' cannot be embedded because it has a non-abstract member. Consider setting the 'Embed Interop Types' property to false.
                    //     public static void Main(ITest44 x)
                    Diagnostic(ErrorCode.ERR_DefaultInterfaceImplementationInNoPIAType, "ITest44").WithArguments("ITest44").WithLocation(4, 29)
                    );
            }
        }
```</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35910</IssueID>
    <RepoID>1</RepoID>
    <Title>Unsafe.AsRef&lt;T&gt;(in T) loses nullability of T</Title>
    <Description>*(Duplicated from https://github.com/dotnet/corefx/issues/37861)*

It seems that passing a nullable-reference-type reference to System.Runtime.CompilerServices.Unsafe.AsRef&lt;T&gt;(in T) turns it into a non-nullable-reference-type reference:

![screenshot](https://user-images.githubusercontent.com/4752078/58172275-66053000-7c98-11e9-91a4-32682db50d26.png)

Curiously, this doesn't happen when assigning to the reference...

![screenshot2](https://user-images.githubusercontent.com/4752078/58172814-e6786080-7c99-11e9-9e57-f29963ecf12f.png)

...unless the previously referenced value isn't null:

![screenshot3](https://user-images.githubusercontent.com/4752078/58172829-f3954f80-7c99-11e9-863d-d5ce9c88c187.png)

Not sure if this is an issue with System.Runtime.CompilerServices.Unsafe (lack of nullability annotations?) or Roslyn or both...

I'm using Visual Studio 16.1.0 with .NET Core 3.0.100-preview5-011568.

&lt;details&gt;
&lt;summary&gt;Full code (click to expand)&lt;/summary&gt;

```csharp
using System;
using System.Runtime.CompilerServices;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            string? s = "Hello World";

            ref string? r1 = ref s;

            ref string? r2 = ref Unsafe.AsRef(in s);

            DangerousUpdate(in s);

            DangerousUpdateIfNotNull(in s);
        }

        static void DangerousUpdate(in string? s)
        {
            Unsafe.AsRef(in s) = null;
        }

        static void DangerousUpdateIfNotNull(in string? s)
        {
            if (s == null)
                throw new InvalidOperationException();

            Unsafe.AsRef(in s) = null;
        }
    }
}
```

```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
    &lt;NullableContextOptions&gt;enable&lt;/NullableContextOptions&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="4.6.0-preview6.19259.10" /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;
```

&lt;/details&gt;

</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35909</IssueID>
    <RepoID>1</RepoID>
    <Title>Integration test CPSProject_GeneralPropertyGroupUpdated failed in CI</Title>
    <Description>https://dev.azure.com/dnceng/public/_build/results?buildId=197521&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=4796290&amp;paneView=debug&amp;resultId=100389

```
Assert.Contains() Failure\r\nNot found: (filter expression)\r\nIn value: WhereEnumerableIterator&lt;XElement&gt; [&lt;PropertyGroup&gt;\r\n &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;\r\n&lt;/PropertyGroup&gt;]

Stack trace
   at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.VerifyPropertyOutsideConfiguration(XElement projectElement, String name, String value) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 31
   at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpUpdateProjectToAllowUnsafe.CPSProject_GeneralPropertyGroupUpdated() in /_/src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpUpdateProjectToAllowUnsafe.cs:line 44
Build 20190522.24 Failed

Showing filters 1 through 3
```</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35908</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Tuples - Tuple type is inferred as dynamic type in the caller when passing dynamic parameters to the callee</Title>
    <Description>**Version Used**: 7.3

**Steps to Reproduce**:

```C#
 class Program
    {
        static void Main(string[] args)
        {
            dynamic input = "";
            var val = Test(input);
            // val is dynamic here instead of (int X, int y). 
            // you cannot use val.X or val.Y
            // instead you should use val.Item1 or val.Item2
        }

        public static (int X, int y) Test(string x)
        {
            return (0, 0);
        }
    }
```
**Expected Behavior**:
We expect that _val_ be a tuple with strongly typed properties named X and Y, respectively.

**Actual Behavior**:
_val_ is inferred as a dynamic instance. Moreover, CLR cannot access _val_'s properties through X and Y instead we should use Item1 and Item2.
</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35907</IssueID>
    <RepoID>1</RepoID>
    <Title>Update SuggestedAction to track successful application</Title>
    <Description>Fixes #35909 by silently retrying to apply a code fix if the application failed due to concurrent changes in the workspace.</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35906</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid initializing fields to `null` in IL</Title>
    <Description>The compiler should avoid generating IL for fields that are explicitly initialized to `null`.

This is particularly important for non-nullable fields because it may be necessary to explicitly initialize those fields with `= null!` to suppress the nullable warning. The compiler should not generate extra code for those cases.

```C#
class Program
{
    object Field = null!;
}
```
The IL for `Program..ctor` (from ildasm):
```
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       15 (0xf)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldnull
    IL_0002:  stfld      object Program::Field
    IL_0007:  ldarg.0
    IL_0008:  call       instance void [mscorlib]System.Object::.ctor()
    IL_000d:  nop
    IL_000e:  ret
  }
```
</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35905</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

## From https://github.com/dotnet/arcade
- **Build**: 20190522.13
- **Date Produced**: 5/23/2019 1:51 AM
- **Commit**: 86e674361bdcefecbd8199ab62d0b1a6cb25703d
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19272.13

</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35904</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] "Go To Implementation" on an metadata-as-source interface method results in error</Title>
    <Description>Version 16.2.0 Preview 2.0 [28922.308.d16.2stg]

This is repeatable over and over again in my solution.

1. Right-click on a interface member that is implemented by a single method, and choose Go To Implementation

Expected: No error
Actual: Error:
```
---------------------------
Microsoft Visual Studio
---------------------------
Exception has been thrown by the target of an invocation.
---------------------------
OK   
---------------------------
```
Stack:
```
NullReferenceException: Object reference not set to an instance of an object.
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.Exec.__executeNextCommandTarget|1()	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.Execute&lt;Microsoft.VisualStudio.LanguageServer.Client.GotoImplementationCommandArgs&gt;(System.Func&lt;Microsoft.VisualStudio.Text.Editor.ITextView, Microsoft.VisualStudio.Text.ITextBuffer, Microsoft.VisualStudio.LanguageServer.Client.GotoImplementationCommandArgs&gt; argsFactory, System.Action nextCommandHandler)	Unknown
&gt;	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.ExecuteCustomCommandHelper&lt;Microsoft.VisualStudio.LanguageServer.Client.GotoImplementationCommandArgs&gt;(System.Type commandArgsType, System.Action nextCommandHandler)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.ExecuteCustomCommand(ref System.Guid pguidCmdGroup, uint commandId, System.Action next)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceFilter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteRoslyn.__executeNextCommandTarget|0() Line 280	C#
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers&lt;Microsoft.CodeAnalysis.Editor.Commands.GoToImplementationCommandArgs&gt;(System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Editor.ICommandHandler&lt;Microsoft.CodeAnalysis.Editor.Commands.GoToImplementationCommandArgs&gt;&gt; commandHandlers, Microsoft.CodeAnalysis.Editor.Commands.GoToImplementationCommandArgs args, System.Action lastHandler)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.Execute&lt;Microsoft.CodeAnalysis.Editor.Commands.GoToImplementationCommandArgs&gt;(Microsoft.VisualStudio.Utilities.IContentType contentType, Microsoft.CodeAnalysis.Editor.Commands.GoToImplementationCommandArgs args, System.Action lastHandler)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteGoToImplementation(Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType, System.Action executeNextCommandTarget) Line 902	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteRoslyn(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut, Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType) Line 286	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.Exec(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut) Line 68	C#
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.Intellisense.MultiCaretPreemptingFilterProvider.MultiCaretPreemptingFilter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Invoke(string verb, object pvaIn, out object pvaOut)	Unknown
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.PlatformUI.VsCommand.Execute(object parameter)	Unknown
 	PresentationFramework.dll!MS.Internal.Commands.CommandHelpers.CriticalExecuteCommandSource(System.Windows.Input.ICommandSource commandSource, bool userInitiated)	Unknown
 	PresentationFramework.dll!System.Windows.Controls.MenuItem.InvokeClickAfterRender(object arg)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler)	Unknown
 	WindowsBase.dll!System.Windows.Threading.DispatcherOperation.InvokeImpl()	Unknown
 	WindowsBase.dll!System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)	Unknown
 	WindowsBase.dll!MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)	Unknown
 	WindowsBase.dll!MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext executionContext, System.Threading.ContextCallback callback, object state)	Unknown
 	WindowsBase.dll!System.Windows.Threading.DispatcherOperation.Invoke()	Unknown
 	WindowsBase.dll!System.Windows.Threading.Dispatcher.ProcessQueue()	Unknown
 	WindowsBase.dll!System.Windows.Threading.Dispatcher.WndProcHook(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)	Unknown
 	WindowsBase.dll!MS.Win32.HwndWrapper.WndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)	Unknown
 	WindowsBase.dll!MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler)	Unknown
 	WindowsBase.dll!System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority priority, System.TimeSpan timeout, System.Delegate method, object args, int numArgs)	Unknown
 	WindowsBase.dll!MS.Win32.HwndSubclass.SubclassWndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	Microsoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService.PushMessageLoopOnContextMenuTrackingComponent.AnonymousMethod__230_1(object sender, Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs args)	Unknown
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FPreTranslateMessageCore(Microsoft.VisualStudio.OLE.Interop.MSG[] pMsg)	Unknown
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft.VisualStudio.OLE.Interop.IOleComponent.FPreTranslateMessage.AnonymousMethod__0()	Unknown
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.CallAndReturnOnException(System.Func&lt;int&gt; method, int retValueOnException)	Unknown
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft.VisualStudio.OLE.Interop.IOleComponent.FPreTranslateMessage(Microsoft.VisualStudio.OLE.Interop.MSG[] pMsg)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	Microsoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService.PushMessageLoopOnContextMenuTrackingComponent()	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.ShowContextMenu(System.IntPtr location, ref int result)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.Undo.UndoManagerCommandFilter.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.IntellisenseCommandFilter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.BraceCompletionCommandFilter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.Exec.__executeNextCommandTarget|1()	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.Execute&lt;Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowContextMenuCommandArgs&gt;(System.Func&lt;Microsoft.VisualStudio.Text.Editor.ITextView, Microsoft.VisualStudio.Text.ITextBuffer, Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowContextMenuCommandArgs&gt; argsFactory, System.Action nextCommandHandler)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.ExecuteShowContextMenuCommand(System.Action next, System.IntPtr location)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.ExecuteVisualStudio2000(uint commandId, System.IntPtr pvaIn, System.Action next)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceFilter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut, Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType) Line 520	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.Exec(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut) Line 40	C#
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.Intellisense.MultiCaretPreemptingFilterProvider.MultiCaretPreemptingFilter.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VsMouseProcessor.DisplayContextMenu(System.Windows.Point mousePosition)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VsMouseProcessor.HandlePreprocessRightButtonUp(System.Windows.Input.InputEventArgs e)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VsMouseProcessor.PreprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.WpfMouseProcessor.UIElement_MouseRightButtonUp.AnonymousMethod__0(Microsoft.VisualStudio.Text.Editor.IMouseProcessor p)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.WpfMouseProcessor.MouseProcessorHandler.AnonymousMethod__0()	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(object errorSource, System.Action call)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.WpfMouseProcessor.MouseProcessorHandler(System.Windows.RoutedEventArgs e, System.Action&lt;Microsoft.VisualStudio.Text.Editor.IMouseProcessor&gt; preprocess, System.Action defaultAction, System.Action&lt;Microsoft.VisualStudio.Text.Editor.IMouseProcessor&gt; postprocess)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.WpfMouseProcessor.UIElement_MouseRightButtonUp(object sender, System.Windows.Input.MouseButtonEventArgs e)	Unknown
 	PresentationCore.dll!System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(System.Delegate genericHandler, object genericTarget)	Unknown
 	PresentationCore.dll!System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate handler, object target)	Unknown
 	PresentationCore.dll!System.Windows.RoutedEventHandlerInfo.InvokeHandler(object target, System.Windows.RoutedEventArgs routedEventArgs)	Unknown
 	PresentationCore.dll!System.Windows.EventRoute.InvokeHandlersImpl(object source, System.Windows.RoutedEventArgs args, bool reRaised)	Unknown
 	PresentationCore.dll!System.Windows.UIElement.ReRaiseEventAs(System.Windows.DependencyObject sender, System.Windows.RoutedEventArgs args, System.Windows.RoutedEvent newEvent)	Unknown
 	PresentationCore.dll!System.Windows.UIElement.OnMouseUpThunk(object sender, System.Windows.Input.MouseButtonEventArgs e)	Unknown
 	PresentationCore.dll!System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(System.Delegate genericHandler, object genericTarget)	Unknown
 	PresentationCore.dll!System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate handler, object target)	Unknown
 	PresentationCore.dll!System.Windows.RoutedEventHandlerInfo.InvokeHandler(object target, System.Windows.RoutedEventArgs routedEventArgs)	Unknown
 	PresentationCore.dll!System.Windows.EventRoute.InvokeHandlersImpl(object source, System.Windows.RoutedEventArgs args, bool reRaised)	Unknown
 	PresentationCore.dll!System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject sender, System.Windows.RoutedEventArgs args)	Unknown
 	PresentationCore.dll!System.Windows.UIElement.RaiseTrustedEvent(System.Windows.RoutedEventArgs args)	Unknown
 	PresentationCore.dll!System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs args, bool trusted)	Unknown
 	PresentationCore.dll!System.Windows.Input.InputManager.ProcessStagingArea()	Unknown
 	PresentationCore.dll!System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs input)	Unknown
 	PresentationCore.dll!System.Windows.Input.InputProviderSite.ReportInput(System.Windows.Input.InputReport inputReport)	Unknown
 	PresentationCore.dll!System.Windows.Interop.HwndMouseInputProvider.ReportInput(System.IntPtr hwnd, System.Windows.Input.InputMode mode, int timestamp, System.Windows.Input.RawMouseActions actions, int x, int y, int wheel)	Unknown
 	PresentationCore.dll!System.Windows.Interop.HwndMouseInputProvider.FilterMessage(System.IntPtr hwnd, MS.Internal.Interop.WindowMessage msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)	Unknown
 	PresentationCore.dll!System.Windows.Interop.HwndSource.InputFilterMessage(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)	Unknown
 	WindowsBase.dll!MS.Win32.HwndWrapper.WndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)	Unknown
 	WindowsBase.dll!MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler)	Unknown
 	WindowsBase.dll!System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority priority, System.TimeSpan timeout, System.Delegate method, object args, int numArgs)	Unknown
 	WindowsBase.dll!MS.Win32.HwndSubclass.SubclassWndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam)	Unknown

```</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35903</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualStudioTextBufferSupportsFeatureService throws a bunch of first-chance exceptions</Title>
    <Description>Hit this a bunch while debugging:

GetContainedDocumentId can return null, this null is then used to lookup a ConcurrentDictionary which throws ArgumentException.

https://github.com/dotnet/roslyn/blame/f5af4fb3bdcada8f64444374790acac3dc0cd9fb/src/VisualStudio/Core/Def/Implementation/VisualStudioSupportsFeatureService.cs#L29

Typical stack:
```
 	mscorlib.dll!System.Collections.Concurrent.ConcurrentDictionary&lt;Microsoft.CodeAnalysis.DocumentId, Microsoft.VisualStudio.LanguageServices.Implementation.Venus.ContainedDocument&gt;.TryGetValue(Microsoft.CodeAnalysis.DocumentId key, out Microsoft.VisualStudio.LanguageServices.Implementation.Venus.ContainedDocument value)	Unknown
&gt;	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.SuggestionService.VisualStudioSupportsFeatureService.VisualStudioTextBufferSupportsFeatureService.SupportsCodeFixes(Microsoft.VisualStudio.Text.ITextBuffer textBuffer) Line 24	C#
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextBufferExtensions.SupportsCodeFixes(Microsoft.VisualStudio.Text.ITextBuffer buffer)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.SuggestedActionsSource.GetFixLevelAsync(Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider provider, Microsoft.CodeAnalysis.Document document, Microsoft.VisualStudio.Text.SnapshotSpan range, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.SuggestedActionsSource.GetSuggestedActionCategoriesAsync.AnonymousMethod__0()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;string&gt;&gt;.InnerInvoke()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.Execute()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecutionContextCallback(object obj)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()	Unknown
 	mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()	Unknown
 	mscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()	Unknown

```

//cc @genlu </Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35902</IssueID>
    <RepoID>1</RepoID>
    <Title>OOP: Remove DiagnosticData.Workspace</Title>
    <Description>Remove dependency on mutable state. The workspace the diagnostic data originated from is available thru `DiagnosticsUpdatedArgs` and the `DiagnosticData` do not need the reference. 

</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35901</IssueID>
    <RepoID>1</RepoID>
    <Title>NullableContextOptions no longer works</Title>
    <Description>_This issue has been moved from [VSTS ticketId 896657](https://developercommunity.visualstudio.com/content/problem/576567/nullablecontextoptions-no-longer-works.html)._

In our .csproj files, this used to enable nullable context:

```
&lt;NullableContextOptions&gt;enable&lt;/NullableContextOptions&gt;
```

Now, after upgrading to 16.2 preview 1, it no longer works.  The compiler throws errors as if we were not in a nullable context.  Surrounding code with `#nullable enable`/`restore` still works, but it's not feasible to do it for each and every code file in our solution.

---

### Original comments

#### Pierre Arnaud on 5/22/2019, 05:59 PM

I've the exact same issue on all my projects.&lt;br&gt;

#### Visual Studio Feedback System on 5/22/2019, 06:02 PM

We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.

#### Kexy Biscuit on 5/22/2019, 07:14 PM

Me too, this breaks nearly everything for me.

#### richf on 5/22/2019, 10:04 PM

Same problem.

Building from commandline does not have any issue

#### Anthony Trudeau on 5/23/2019, 08:20 AM

@VisualStudio on Twitter directed me to share my comments here after some messages there.

I'm on 16.1 within a new WPF project and using the element in the project file has no affect. There are no errors, warnings, or otherwise. Using the directive in the individual code files works as expected.
</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35900</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35899</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35898</IssueID>
    <RepoID>1</RepoID>
    <Title>'CS8602: Dereference of a possibly null reference' if it's a struct property, but not if it's a class property</Title>
    <Description>**Version Used**: VS 16.1

**Steps to Reproduce**:

Compile the following program with nullable reference types enabled

```C#
namespace ConsoleApp13
{
    class Program
    {
        static void Main(string[] args)
        {
            var s = default(S);
            // 2nd 's.Prop': warning CS8602: Dereference of a possibly null reference.
            if (s.Prop != null &amp;&amp; s.Prop.Trim().Length == 0) { }

            var c = new C();
            // 2nd 'c.Prop': no warning
            if (c.Prop != null &amp;&amp; c.Prop.Trim().Length == 0) { }
        }
    }

    struct S
    {
        public string? Prop =&gt; string.Empty;
    }

    sealed class C
    {
        public string? Prop =&gt; string.Empty;
    }
}
```

**Expected Behavior**:

No warnings

**Actual Behavior**:

Warnings if it's a struct, but not if it's a class.
</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35897</IssueID>
    <RepoID>1</RepoID>
    <Title>Microsoft.CodeAnalysis.EditorFeatures.Wpf NuGet package needs to declare a dependency on Microsoft.VisualStudio.InteractiveWindow</Title>
    <Description>**Version Used**: 
3.1.0-beta4-19261-04

The NuGet package https://www.nuget.org/packages/microsoft.codeanalysis.editorfeatures.wpf contains Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll which reference Microsoft.VisualStudio.InteractiveWindow.dll 2.0.0.0.

However the NuGet package doesn't declare this dependency. The NuGet package needs to declare an explicit dependency on https://www.nuget.org/packages/microsoft.visualstudio.interactivewindow</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35896</IssueID>
    <RepoID>1</RepoID>
    <Title>Warning given when the nullability of a method signature is non-nullable but the delegate expects nullable</Title>
    <Description>The following code currently warns:
```csharp
using System;

#nullable enable

public delegate void ContextCallback(object? state);

public class C {
    // warning CS8622: Nullability of reference types in type of parameter 'state' of 'void C.WaitOrTimerCallback_Context_t(object state)' doesn't match the target delegate 'ContextCallback'.
    private static readonly ContextCallback _ccbt = new ContextCallback(WaitOrTimerCallback_Context_t);
    
    private static void WaitOrTimerCallback_Context_t(object state) { }
}
```

I would expect no warning since the method signature does not allow nullable inputs which still fits with the requirements of the delegate signature.

I would expect a warning in the opposite case (a method whose parameter is nullable is passed to a delegate with a matching signature but where the corresponding parameter is non-nullable).</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35895</IssueID>
    <RepoID>1</RepoID>
    <Title>Get FullPath and deduplicate potential editorconfig files</Title>
    <Description>Work around https://github.com/microsoft/msbuild/issues/4392

/CC @tmeschter and @jasonmalinowski </Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35894</IssueID>
    <RepoID>1</RepoID>
    <Title>Attribute-typed Identifier Renaming Issue</Title>
    <Description>When pressing Ctrl+R+R to rename a Attribute-typed Identifier will end up an additional 'Attribute' word inserted into the new identifier.

For example, when i rename an attribute called 'ExampleAttribute' to 'InstanceAttribute' by replacing 'Example' with 'Instance', i will get 'InstanceAttributeAttribute'.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/550414/attribute-typed-identifier-renaming-issue.html
VSTS ticketId: 857934_
_These are the original issue comments:_

Visual Studio Feedback System on 4/29/2019, 01:23 AM (23 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35893</IssueID>
    <RepoID>1</RepoID>
    <Title>Class name namespace error</Title>
    <Description>Class name is considering as namespace

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/490101/class-name-namespace-error.html
VSTS ticketId: 820709_
_These are the original issue comments:_

Visual Studio Feedback System on 3/15/2019, 00:26 AM (68 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35892</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure unimplemented interface members are reported even in presence …</Title>
    <Description>…of unification warnings (#35422)

(cherry picked from commit 74d697a3ba9db727d8337d040f305bf71a566e3f)

Cherry-picking to 16.1.</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35891</IssueID>
    <RepoID>1</RepoID>
    <Title>Two local functions with same parmater offer unique names in Intellisense</Title>
    <Description>VSF_TYPE_MARKDOWNDeclaring two local functions with classes (structs, others?) as parameters results in intellisense suggesting that the parameters in the second function have a different name, even though there is no reason it cannot use the same name.

```
class Test
{
	void function()
	{
		void LocalFunction1(Test test) //intellisense will suggest test
		{ }

void LocalFunction2(Test test1) //intellisense will suggest test1 instead of test
		{ }
	}
}
```

The same behaviour can be observed for classes with more complex names

```
class TestClass
{
	void function()
	{

void LocalFunction1(TestClass testClass) //intellisense will suggest testClass
		{ }

void LocalFunction2(TestClass test) //intellisense will suggest test instead of testClass
		{ }
	}
}
```
May be related https://github.com/dotnet/roslyn/issues/31304

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/569267/two-local-functions-with-same-parmater-offer-uniqu.html
VSTS ticketId: 893063_
_These are the original issue comments:_

Visual Studio Feedback System on 5/15/2019, 07:16 PM (6 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 5/17/2019, 05:50 PM (4 days ago): &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/ . We'll keep you posted on any updates to this feedback.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35890</IssueID>
    <RepoID>1</RepoID>
    <Title>Bump the 16.1 version for future servicing releases</Title>
    <Description>
    </Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35889</IssueID>
    <RepoID>1</RepoID>
    <Title>ArgumentNullException when running RoslynDeployment</Title>
    <Description>**Version Used**: 

https://github.com/dotnet/roslyn/pull/35539
VS 16.1

**Steps to Reproduce**:

When I run RoslynDeployment with the debugger attached (I haven't tried without), and once VS is loaded I open an existing solution, I get the following exception:

```
System.ArgumentNullException
  HResult=0x80004003
  Message=Value cannot be null.
Parameter name: key
  Source=mscorlib
  StackTrace:
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Venus.ContainedDocument.TryGetContainedDocument(Microsoft.CodeAnalysis.DocumentId id) Line 66
	at E:\Git\roslyn\src\VisualStudio\Core\Def\Implementation\Venus\ContainedDocument.cs(66)
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.SuggestionService.VisualStudioSupportsFeatureService.SupportsCodeFixesWorker(Microsoft.CodeAnalysis.DocumentId id) Line 87
	at E:\Git\roslyn\src\VisualStudio\Core\Def\Implementation\VisualStudioSupportsFeatureService.cs(87)
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.SuggestionService.VisualStudioSupportsFeatureService.VisualStudioTextBufferSupportsFeatureService.SupportsCodeFixes(Microsoft.VisualStudio.Text.ITextBuffer textBuffer) Line 24
	at E:\Git\roslyn\src\VisualStudio\Core\Def\Implementation\VisualStudioSupportsFeatureService.cs(24)
Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextBufferExtensions.SupportsCodeFixes(Microsoft.VisualStudio.Text.ITextBuffer buffer) Line 66
	at E:\Git\roslyn\src\EditorFeatures\Core\Shared\Extensions\ITextBufferExtensions.cs(66)
Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.SuggestedActionsSource.GetFixLevelAsync(Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider provider, Microsoft.CodeAnalysis.Document document, Microsoft.VisualStudio.Text.SnapshotSpan range, System.Threading.CancellationToken cancellationToken) Line 806
	at E:\Git\roslyn\src\EditorFeatures\Core.Wpf\Suggestions\SuggestedActionsSource.cs(806)
Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.SuggestedActionsSource.GetSuggestedActionCategoriesAsync.AnonymousMethod__0() Line 1008
	at E:\Git\roslyn\src\EditorFeatures\Core.Wpf\Suggestions\SuggestedActionsSource.cs(1008)
```

It looks like we pass the result of `VisualStudioSupportsFeatureService.GetContainedDocumentId()`, which can return null, to `SupportsCodeFixesWorker`, which cannot accept null.

A bunch of errors also occur after this. I don't know if that is correlation or causation though. However roslyn fails to spot any semantic errors in the document after this.

</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35888</IssueID>
    <RepoID>1</RepoID>
    <Title>Reduce the impact of nullable attributes in metadata</Title>
    <Description>The current approach for representing nullable annotations in [metadata](https://github.com/dotnet/roslyn/blob/master/docs/features/nullable-reference-types.md#annotations) can result in a significant number of attributes.

Consider alternatives to reduce the number of attributes.</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35887</IssueID>
    <RepoID>1</RepoID>
    <Title>Inline temporary variable refactoring produces invalid code for while loop</Title>
    <Description>**Version Used**:  Visual Studio Community Edition 2019, 16.1.0
**Steps to Reproduce**:

1.  Create a sample application
2. Add this source code (with a matching namespace):

```c#
namespace ConsoleApp4
{
    internal class Program
    {
        private static string CalculateSomething()
            =&gt; "a";

        private static void Main(string[] args)
        {
            var d = default(string);
            do
            {
                d = CalculateSomething();
            } while (d != default);
        }
    }
}
```

3. move the cursor to `var d = ...`
4. open the quick actions menu / lightbulb-symbol
5. select _Inline temporary variable_

**Expected Behavior**:

6. refactoring is not provided because `d` can't be inlined 

**Actual Behavior**:

6. refactoring is provided, marked with `Conflicts detected`, produces the following code:

```c#
            var d = default(string);
            do
            {
                d = CalculateSomething();
            } while (default(string) != default);
```</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35886</IssueID>
    <RepoID>1</RepoID>
    <Title>Invalid warning IDE0059 when more than two assignments are on the same line</Title>
    <Description>VSF_TYPE_MARKDOWNIDE0059 can't handle more than two declaration/assignments on the same line. The following console app repros 

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using static System.Console;

    namespace InvalidWarningIDE0059
    {
        class Program
        {
            static void Main(string[] args)
            {
                int first, second, third, fourth = -1;
                first = DERP();
                second = DERP();
                third = DERP();
                fourth = DERP();
                WriteLine(first);
                WriteLine(second);
                WriteLine(third);
                WriteLine(fourth);
            }
            static int DERP()
            {
                return 1;
            }
        }
    }

The last variable when 2+ variables are declared and assigned on a single line triggers IDE0059. In this example, ```fourth``` is marked with the warning. If you remove ```fourth``` then ```third``` is.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/552602/invalid-warning-ide0059-when-more-than-two-assignm.html
VSTS ticketId: 860172_
_These are the original issue comments:_

Visual Studio Feedback System on 5/4/2019, 07:54 PM (17 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35885</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM: An attempt to use non virtual method with implementation declared in an interface from code targeting desktop framework should cause runtime capability error</Title>
    <Description>```
        &lt;Fact&gt;
        Public Sub MethodImplementation_31()

            Dim csSource =
"
public interface I1
{
    sealed string M1() =&gt; ""I1.M1"";
}
"
            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()

            Dim source1 =
&lt;compilation&gt;
    &lt;file name="c.vb"&gt;&lt;![CDATA[
Public Class C
    Shared Sub Main()
        Dim i1 as I1 = New Test()
        i1.M1()
    End Sub
End Class

Class Test
    Implements I1
End Class
]]&gt;&lt;/file&gt;
&lt;/compilation&gt;

            Dim comp1 = CreateCompilation(source1, options:=TestOptions.DebugExe, targetFramework:=TargetFramework.DesktopLatestExtended, references:={csCompiation})
            ' Expect an error similar to - error CS8501: Target runtime doesn't support default interface implementation.
            comp1.AssertTheseDiagnostics()
        End Sub
```</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35884</IssueID>
    <RepoID>1</RepoID>
    <Title>SourceLink 1.0.0-beta2-19270-01</Title>
    <Description>
    </Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35883</IssueID>
    <RepoID>1</RepoID>
    <Title>Deleting empty lines causes the cursor to indent</Title>
    <Description>VSF_TYPE_MARKDOWNIn Visual Studio 2019, if I have multiple emptly lines of code, I put my cursor on the first line to delete. Pressing the delete key deletes the following line, but also indents the cursor. If I keep pressing delete, the cursor moves more, up to 10 times.  This did not happen in Visual Studio 2015.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/560744/deleting-empty-lines-causes-the-cursor-to-indent.html
VSTS ticketId: 888905_
_These are the original issue comments:_

Visual Studio Feedback System on 5/8/2019, 02:48 AM (14 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35882</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense Suggesting Incorrect ExtensionMethod</Title>
    <Description>In a C# project (tested on .Net 7.3 and 7.2), when I have an extension method for a generic T, and constrain T to `where : struct, IGenericInterface&amp;lt;U&amp;gt;` intellisense seems incapable of resolving the generic interface constraint. As a result _all_ valuetypes now _look_ to be extended with my extension function when Intellisense provides suggestions during auto-complete -- even though it's not possible to compile using the extension function (which is correct). Intellisense should not be including these extension functions as suggestions.

I would be very interested in understanding if there is a limitation which prevents Intellisense from resolving the generic interface constraint which causes this issue. Otherwise it seems like a simple error.

See attached example .cs file

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/559194/intellisense-suggesting-incorrect-extensionmethod.html
VSTS ticketId: 888238_
_These are the original issue comments:_

Kevin MacAulay Vacheresse on 5/6/2019, 03:32 PM (15 days ago): &lt;p&gt;Here is the relevant example .cs&lt;/p&gt;

```C#
namespace Constraints
{
    public interface IMyInterface&lt;U&gt; { }

    public static class Extensions
    {
        public static void CustomExtension&lt;T, U&gt;(this T val, U otherVal)
            where T : struct, IMyInterface&lt;U&gt;
        { }
    }

    class Program
    {
        struct Foo { }

        static void Main(string[] args)
        {
            var foo = new Foo();

            // Uncomment and use auto-complete to see the 'CustomExtension&amp;lt;&amp;gt;' suggestion, even though Foo can be 
            //seen statically to not meet the interface constrain on IMyInterface

            //foo.
        }
    }
}
```

Visual Studio Feedback System on 5/6/2019, 07:50 PM (15 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Kevin MacAulay Vacheresse on 5/8/2019, 11:56 AM (13 days ago): &lt;p&gt;As I understand it, this https://blogs.msdn.microsoft.com/ericlippert/2009/12/10/constraints-are-not-part-of-the-signature/  applies here. However, while this failure to compile is acceptable, it seems that Intellisense should not be treating all types as candidates when we can deduce the code can never compile, and thus is not a  validate candidate.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35881</IssueID>
    <RepoID>1</RepoID>
    <Title>Incrorrect codefix for IDE0040 when field is volatile</Title>
    <Description>VSF_TYPE_MARKDOWNThe following C# field definition triggers IDE0040.

`volatile int _bytes;`

The code fix incorrectly removes `volatile` and turns the code to the following line.

`private int _bytes;`

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/551870/incrorrect-codefix-for-ide0040-when-field-is-volat.html
VSTS ticketId: 859770_
_These are the original issue comments:_

Visual Studio Feedback System on 4/29/2019, 11:57 PM (22 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Vatsalya Agrawal [MSFT] on 5/1/2019, 10:38 AM (20 days ago): &lt;p&gt;Thanks a lot for providing feedback. We could not reproduce the issue. Could you please share more detailed repro steps/repro project.&lt;/p&gt;

WMJ on 5/16/2019, 06:18 PM (5 days ago): See the screenshot and attached project.
WMJ on 5/16/2019, 06:17 PM (5 days ago): Hi, Have you ever try to reproduce that? It is very easy to reproduce.&lt;br&gt;&lt;br&gt;Create a new console app and add a field in the Program class:&lt;br&gt;&lt;br&gt;using System;&lt;br&gt;using System.Collections.Generic;&lt;br&gt;using System.Linq;&lt;br&gt;using System.Text;&lt;br&gt;&lt;br&gt;namespace ConsoleApp1&lt;br&gt;\{&lt;br&gt;	class Program&lt;br&gt;	\{&lt;br&gt;		volatile int _Field;&lt;br&gt;&lt;br&gt;		static void Main(string[] args) \{&lt;br&gt;		}&lt;br&gt;	}&lt;br&gt;}&lt;br&gt;&lt;br&gt;In the quick fix for field _Field, IDE0040, you will see it removes the volatile and inserts private there.&lt;br&gt;
Visual Studio Feedback System on 5/22/2019, 10:26 AM (8 min ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35880</IssueID>
    <RepoID>1</RepoID>
    <Title>Specification of the `foreach` translation and valid/invalid conversions</Title>
    <Description>I'm following the language specification to [rewrite `foreach` statements] (https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/statements#iteration-statements). All of the test cases I had so far worked correctly, but I just ran into a situation where the rewritten code fails to compile (this was partly discussed in gitter) with the more recent [extended (and tuple-aware) syntax](https://github.com/dotnet/roslyn/issues/35809).

 For convenience:

```
foreach (V v in x)
      embedded_statement
```

Becomes:

```
{
    E e = ((C)(x)).GetEnumerator();
    //...
        while (e.MoveNext()) {
            V v = (V)(T)e.Current;
            embedded_statement
        }
    //...
}
```

I'm interested on the statement `V v = (V)(T)e.Current;`, where `V` is the "declared" type in the original `foreach` and `T` is the element type.

This continues to work, even with the "double cast":

```
List&lt;(int, int)&gt; lll = null;
foreach (var (xx, yy) in lll)
            ;
```

It produces the assignment `var (xx, yy) =((int xx, int yy))((int, int))e.Current;`, which is well typed.

However, this breaks:

```
// this compiles to me on .NET Core
var ddd = new Dictionary&lt;int, int&gt;();
foreach (var (xxx, yyy) in ddd)
    ; 
```

Because it produces the assignment `var (xxx, yyy) =((int xxx, int yyy))(KeyValuePair&lt;int, int&gt;)e.Current;` which doesn't type: **Cannot convert type 'System.Collections.Generic.KeyValuePair&lt;int, int&gt;' to '(int, int)’***.

I have a [gist with a complete example](https://gist.github.com/ltcmelo/e9e28b3b5a1c99544cee8a192086e9cf). Interestingly, @CyrusNajmabadi claimed that the original code was **invalid**. But then, @canton7 mentioned that deconstruction is [available at least in one library](https://source.dot.net/#System.Private.CoreLib/shared/System/Collections/Generic/KeyValuePair.cs,77).

Is this just a matter of updating the language spec by eliminating the cast (the `V` part) for deconstruction `foreach`, as I think is what @CyrusNajmabadi suggests, or is there anything else here?









</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35879</IssueID>
    <RepoID>1</RepoID>
    <Title>"'using' statement can be simplified" breaks code if variable name has been used before</Title>
    <Description>**Version Used**: 
16.2.0 Preview 1.0

**Steps to Reproduce**:

1. Create a new C# 8 project with the following, compilable code:
```cs
using System.IO;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            using (Stream stream = File.OpenRead("test"))
            {
            }
            using (Stream stream = File.OpenRead("test"))
            {
            }
        }
    }
}
```
2. Accept VS' suggestion to simplify the second `using` by turning it into a using declaration (IDE0063).

**Expected Behavior**:
I expected the refactor to create compilable code like this:
```cs
        static void Main()
        {
            using (Stream stream = File.OpenRead("test"))
            {
            }
            using Stream stream2 = File.OpenRead("test"); // note the required unique name
        }
```

**Actual Behavior**:
The suggestion however does not check if a variable in the same scope has already been declared and generates the following which does not compile:
```cs
        static void Main()
        {
            using (Stream stream = File.OpenRead("test"))
            {
            }
            // CS0136 "A local or parameter named 'stream' cannot be declared in this scope
            // because that name is used in an enclosing local scope to define a local or parameter.
            using Stream stream = File.OpenRead("test");
        }
```

I couldn't find a similar issue about exactly this refactor, please close as duplicate if I am mistaken.</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35878</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix #33560 Handle tokens being equal for same line</Title>
    <Description>Fixes #33560 - If tokens are equal (i.e. a single token), then directly check for line break. </Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35877</IssueID>
    <RepoID>1</RepoID>
    <Title>Make importing constructors public to fix RS0034 (Exported parts should have ImportingConstructor)</Title>
    <Description>This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35875</IssueID>
    <RepoID>1</RepoID>
    <Title>Should not have select part of a field to generate constructor</Title>
    <Description>I always forget what I have to do to generate a constructor from a field. 

I'm not allowed to generate a constructor from the field with the following:

![image](https://user-images.githubusercontent.com/1103906/58165874-00cb3200-7ccc-11e9-91fe-2dbc86ab6ab9.png)
![image](https://user-images.githubusercontent.com/1103906/58165830-e42efa00-7ccb-11e9-9007-8a29264d2a79.png)
![image](https://user-images.githubusercontent.com/1103906/58165852-f315ac80-7ccb-11e9-89f9-68f19dec1465.png)

But I am if I do the following:
![image](https://user-images.githubusercontent.com/1103906/58165933-16405c00-7ccc-11e9-9793-3c9566ab82d1.png)
![image](https://user-images.githubusercontent.com/1103906/58166197-a383b080-7ccc-11e9-8e32-563dc6f9500b.png)


Why can I do some things to fields by having the cursor before, in or after the field, but I cannot generate a constructor from it?</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35874</IssueID>
    <RepoID>1</RepoID>
    <Title>InvalidProgramException when compiling program containing stackalloc Span&lt;bool&gt;</Title>
    <Description>**Version Used**: 
Visual  Studio 2019 16.2.0 Preview 
Microsoft (R) Visual C# Compiler version 3.0.19.21801 (18b0cfb6)
.Net Core v3.0.0-preview5

**Steps to Reproduce**:

Run the following program:
```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Math;

namespace ConsoleApp5
{
    class Program
    {
        private static readonly double mWeightThreshold = 0.7;


        private const  int mNumChars = 4;
        public static unsafe double Proximity(string aString1, string aString2)
        {            
            Span&lt;bool&gt; lMatched1 = stackalloc bool[aString1.Length];
            Span&lt;bool&gt; lMatched2 = stackalloc bool[aString2.Length];
            int lLen1 = aString1.Length;
            int lLen2 = aString2.Length;

            fixed (char* ptr1 = aString1)
            fixed (char* ptr2 = aString2)
            {

                if (lLen1 == 0)
                    return lLen2 == 0 ? 1.0 : 0.0;

                int lSearchRange = Max(0, Max(lLen1, lLen2) / 2 - 1);


                int lNumCommon = 0;
                for (int i = 0; i &lt; lLen1; ++i)
                {
                    int lStart = Max(0, i - lSearchRange);
                    int lEnd = Min(i + lSearchRange + 1, lLen2);
                    for (int j = lStart; j &lt; lEnd; ++j)
                    {
                        if (lMatched2[j]) continue;
                        if (ptr1[i] != ptr2[j])
                            continue;
                        lMatched1[i] = true;
                        lMatched2[j] = true;
                        ++lNumCommon;
                        break;
                    }
                }
                if (lNumCommon == 0) return 0.0;

                int lNumHalfTransposed = 0;
                int k = 0;
                for (int i = 0; i &lt; lLen1; ++i)
                {
                    if (!lMatched1[i]) continue;
                    while (!lMatched2[k]) ++k;
                    if (ptr1[i] != ptr2[k])
                        ++lNumHalfTransposed;
                    ++k;
                }
                
                int lNumTransposed = lNumHalfTransposed / 2;

                
                double lNumCommonD = lNumCommon;
                double lWeight = (lNumCommonD / lLen1
                                 + lNumCommonD / lLen2
                                 + (lNumCommon - lNumTransposed) / lNumCommonD) / 3.0;

                if (lWeight &lt;= mWeightThreshold) return lWeight;
                int lMax = Min(mNumChars, Min(lLen1, lLen2));
                int lPos = 0;
                while (lPos &lt; lMax &amp;&amp; ptr1[lPos] == ptr2[lPos])
                    ++lPos;
                if (lPos == 0) return lWeight;
                return lWeight + 0.1 * lPos * (1.0 - lWeight);
            }
        }

        static void Main(string[] args)
        {
            double prox = Proximity("Hello World", "Hello Peter");
        }
    }
}

```

The program will crash with an `InvalidProgramException`. Replacing the Span&lt;bool&gt; with bool* 
fixes the issue.
Problem not reproducible on 
Visual Studio 2019 16.1.0
Microsoft (R) Visual C# Compiler version 3.100.19.26603 (9d80dea7)

After looking up the exception, the official documents said that this is a compiler issue. Hope I raised it in the right place :smiley:. 
</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35873</IssueID>
    <RepoID>1</RepoID>
    <Title>CodeLens allways show English rather than local language in 16.1</Title>
    <Description>
    </Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35872</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove obsolete editor-layer IIndentationService</Title>
    <Description>The core interface moves to the workspace layer in https://github.com/dotnet/roslyn/pull/33978.  This issue tracks removing the older obsolete interface once we ensure no 3rd parties (i.e. TS/xaml) are using this.</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35871</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide context information for analyzer exceptions</Title>
    <Description>Fixes #30660</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35870</IssueID>
    <RepoID>1</RepoID>
    <Title>"Use compound assignment" leaves empty whitespace if expression spans lines</Title>
    <Description>**Version Used**: 
Version 16.2.0 Preview 2.0 [28920.253.d16.2stg]

**Steps to Reproduce**:

``` C#
            foo = foo ?? 
                string.Empty;
```

**Expected Behavior**:
``` C#
            foo ??= string.Empty;
```

**Actual Behavior**:
``` C#
            foo ??=                 string.Empty;
```</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35869</IssueID>
    <RepoID>1</RepoID>
    <Title>added code lens resource file in vsix</Title>
    <Description>add resource files for new code lens dlls in setup.</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35868</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Ability to assign to readonly fields from constructor-invoked methods.</Title>
    <Description>&lt;p&gt;To simplify a constructor, I sometimes separate some of the functionality into private methods.&lt;/p&gt; &lt;p&gt;Unfortunately, this doesn't work if I'm assigning to readonly fields.&lt;/p&gt; &lt;p&gt;It would be nice if the compiler was able to determine that these private methods are only being invoked from the constructor and allow me to assign to readonly fields from within.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/567798/c-ability-to-assign-to-readonly-fields-from-constr.html
VSTS ticketId: 892542_
_These are the original issue comments:_

Jane Wu [MSFT] on 5/15/2019, 01:08 AM (6 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35867</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35866</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35865</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35864</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Text Editor - Add spacing option for tuples</Title>
    <Description>VSF_TYPE_MARKDOWNThere is currently no option to set spacing preferences for tuples.
As a result, the automatic formatting will change something like:
( &amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot; )
into:
(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)
For those who prefer the first, please add &amp;quot;Insert space within element list parentheses (for tuples)&amp;quot;
in Text Editor &amp;gt; C# &amp;gt; Code Style &amp;gt; Formatting &amp;gt; Spacing.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/565361/c-text-editor-add-spacing-option-for-tuples.html
VSTS ticketId: 891843_
_These are the original issue comments:_

Jane Wu [MSFT] on 5/13/2019, 02:11 AM (8 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35863</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor the code handling different TextDocument kinds in the IDE layers</Title>
    <Description>We now have 3 distinct text document kinds: Document (regular source document), AdditionalDocument (additional files) and AnalyzerConfigDocument (editorconfig files). We have large number of places in the IDE layer where each client has to deal with all the 3 different document kinds, also leading to lot of code duplication. This issue tracks refactoring the code so that we have a central service/shim that handles all different document kinds and exposes APIs such that the client does not need to handle each document kind.

See following comments for some ideas on this work:
1. https://github.com/dotnet/roslyn/pull/35691/commits/4c0459a25a556db891b467ed713e53415374095b#r284291020
2. https://github.com/dotnet/roslyn/pull/35762/files#r286224367, https://github.com/dotnet/roslyn/pull/35762/files#r286224882
3. https://github.com/dotnet/roslyn/pull/35762/files#r286232360
4. https://github.com/dotnet/roslyn/pull/35762/files#r286227148
5. https://github.com/dotnet/roslyn/pull/35762/files#r286228639
6. https://github.com/dotnet/roslyn/pull/35762/files#r286235383
7. https://github.com/dotnet/roslyn/pull/35762/files#r286236054
8. https://github.com/dotnet/roslyn/pull/35762/files#r286239878</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35862</IssueID>
    <RepoID>1</RepoID>
    <Title>Audit the differences in TextDocument handling between different document kinds in the IDE layer</Title>
    <Description>This issue tracks auditing all our IDE code base where we have different implementation for either of the following document kinds: Document, AdditionalDocument and AnalyzerConfigDocument.

For example, see the following comments:
1. https://github.com/dotnet/roslyn/pull/35762/files#r286255564</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35861</IssueID>
    <RepoID>1</RepoID>
    <Title>Add Convert anonymous type to class refactoring for VB</Title>
    <Description>&lt;p&gt;This refactoring exists for C#, please add it to VB too.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/562754/add-convert-anonymous-type-to-class-refactoring-fo.html
VSTS ticketId: 889997_
_These are the original issue comments:_

Jane Wu [MSFT] on 5/9/2019, 03:20 AM (12 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35860</IssueID>
    <RepoID>1</RepoID>
    <Title>.editorconfig rules for private const fields don't seem to apply</Title>
    <Description>**Version Used**: 

Visual Studio Enterprise 2019 Preview 16.2.0 Preview 1.0

**Steps to Reproduce**:

1. Download the attached editorconfig.txt and rename it to .editorconfig
[editorconfig.txt](https://github.com/dotnet/roslyn/files/3204962/editorconfig.txt)
2. Create a project with some private const fields
3. Name the fields in the UPPERCASE_WITH_UNDERSCORES format

**Expected Behavior**:

VS should suggest that I change these names to PascalCase

**Actual Behavior**:

VS doesn't suggest anything</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35859</IssueID>
    <RepoID>1</RepoID>
    <Title>Use "preview" language version for Miscellaneous Files</Title>
    <Description>Since we don't know what type of files they are, we should always use the absolute, absolute latest, which is Preview for C#.

Fixes https://github.com/dotnet/roslyn/issues/35857</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35858</IssueID>
    <RepoID>1</RepoID>
    <Title>Find All Associated Types context menu option for namespaces in C# files</Title>
    <Description>&lt;p&gt;Within Visual Studio (all versions), occasionally I want to see how a namespace is being used within a file. Refactoring hints tell me when a namespace isn't being used so that I can remove it, but that doesn't help me if I want to see how a namespace is already being used. This information is necessary to allow me to make decisions to do the following:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Replace the using statement for a full namespace with a using alias directive when I'm only using one or two types within that namespace.&lt;/li&gt; &lt;li&gt;Remove a namespace entirely by replacing uses of it with something else (if, for example, I want to remove all uses of Linq in a project/file).&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;To facilitate this, it would be very helpful if Visual Studio provided a context sensitive menu option for namespaces in C# files that allows me to identify any type used within that file that is dependent on the using statement. That new capability, combined with the existing Find All References implementation for namespaces, will allow developers to manage their namespace usage properly in their C# projects.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/560270/find-all-associated-types-context-menu-option-for.html
VSTS ticketId: 888714_
_These are the original issue comments:_

Jane Wu [MSFT] on 5/8/2019, 02:46 AM (13 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35857</IssueID>
    <RepoID>1</RepoID>
    <Title>Misc files are not allowed to use C# 8.0</Title>
    <Description>**Version Used**: 
Version 16.2.0 Preview 2.0 [28920.253.d16.2stg]

**Steps to Reproduce**:

1.  Open VS 
2.  File -&gt; New -&gt; File -&gt; Visual C# file
3. Replace the file with the following:

``` C#
using System;

public class Class1
{
	public Class1(string bar)
	{
            string foo ??= bar;
	}
}

```

**Expected Behavior**:
No errors

**Actual Behavior**:

```
Severity	Code	Description	Project	File	Line	Suppression State
Error	CS8652	The feature 'coalescing assignment' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version.	Miscellaneous Files	C:\Users\davkean\AppData\Local\Temp\~vs29DB.cs	8	Active
Error	CS1002	; expected	Miscellaneous Files	C:\Users\davkean\AppData\Local\Temp\~vs29DB.cs	8	Active
Error	CS1525	Invalid expression term '??='	Miscellaneous Files	C:\Users\davkean\AppData\Local\Temp\~vs29DB.cs	8	Active
```</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35856</IssueID>
    <RepoID>1</RepoID>
    <Title>Unskip passing tests.</Title>
    <Description>Fixes #35611

@dotnet/roslyn-ide May I please have a review of these test changes?
</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35855</IssueID>
    <RepoID>1</RepoID>
    <Title>PROTOTYPE comment in ProjectState.cs</Title>
    <Description>There is a `PROTOTYPE` comment in `ProjectState.cs`.  We use such comments to track code that is not product-ready.  Please either remove the comment, file an issue, or fix the code.

``` c#
            // PROTOTYPE: why isn't this just a provided implementation?
            private sealed class WorkspaceAnalyzerConfigOptions : AnalyzerConfigOptions
            {
                private readonly ImmutableDictionary&lt;string, string&gt; _analyzerOptions;

                public WorkspaceAnalyzerConfigOptions(AnalyzerConfigOptionsResult analyzerConfigOptions)
                {
                    _analyzerOptions = analyzerConfigOptions.AnalyzerOptions;
                }

                public override bool TryGetValue(string key, out string value) =&gt; _analyzerOptions.TryGetValue(key, out value);
            }
```
</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35854</IssueID>
    <RepoID>1</RepoID>
    <Title>'Make local function static' removes empty line above local function</Title>
    <Description>**Version Used**: VS 16.1 and C#8 preview

**Steps to Reproduce**:

1. `Ctrl+.` on `LocalFunc` and hit `Make local function static`

```C#
using System;
namespace ConsoleApp9 {
    class Program {
        static void Main(string[] args) {
            Console.WriteLine("Hello World!");

            int LocalFunc() =&gt; 123;
        }
    }
}
```

**Expected Behavior**:

The empty line above the local function is preserved

```C#
using System;
namespace ConsoleApp9 {
    class Program {
        static void Main(string[] args) {
            Console.WriteLine("Hello World!");

            static int LocalFunc() =&gt; 123;
        }
    }
}
```

**Actual Behavior**:

The empty line above the local function is removed

```C#
using System;
namespace ConsoleApp9 {
    class Program {
        static void Main(string[] args) {
            Console.WriteLine("Hello World!");
            static int LocalFunc() =&gt; 123;
        }
    }
}
```</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35853</IssueID>
    <RepoID>1</RepoID>
    <Title>Update FindImplementationsForInterfaceMemberAsync to correctly handle ambiguous type returns</Title>
    <Description>`FindImplementationsForInterfaceMemberAsync` checks for forwarded types using `SymbolFinder.OriginalSymbolsMatch`, which expects non-null compilation for both the project containing the interface and the project containing the symbol to compare to. Until now, most instances have found equivalence without falling through, but in cases where the type forwarding isn't completely verified a non-null compilation for the interface symbol is needed as well. See [VerifyForwardedTypes](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/FindSymbols/SymbolFinder_Hierarchy.cs,4ace7ec72cd5181d) for the logic being used. 

In #35786 the type System.Text.Encoding is provided by a a NuGet reference and could be ambiguous based on the build target. The OOP service attempts to find the correct type resolution but needs the original symbol compilation to verify. 

Without this fix, FindAllReferences may cause a null deref and fail. 

Fixes #35786 </Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35852</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM: An attempt to embed an interface with non-abstract members should cause an error</Title>
    <Description>```
        &lt;Fact&gt;
        Public Sub NoPia_02()
            Dim attributesRef = GetCSharpCompiation(NoPiaAttributes).EmitToImageReference()

            Dim csSource =
"
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

[assembly: PrimaryInteropAssemblyAttribute(1,1)]
[assembly: Guid(""f9c2d51d-4f44-45f0-9eda-c9d599b58257"")]

[ComImport()]
[Guid(""f9c2d51d-4f44-45f0-9eda-c9d599b58279"")]
public interface ITest33
{
    void M1(){}
}
" + NoPiaAttributes

            Dim csCompiation = GetCSharpCompiation(csSource, {attributesRef}).EmitToImageReference(embedInteropTypes:=True)

            Dim source1 =
&lt;compilation&gt;
    &lt;file name="c.vb"&gt;&lt;![CDATA[
class UsePia 
    Sub Main(x as ITest33)
        x.M1()
    End Sub
End Class
]]&gt;&lt;/file&gt;
&lt;/compilation&gt;

            Dim comp1 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={attributesRef, csCompiation})
            ' Expect an error similar to - CS8711: Type 'ITest33' cannot be embedded because it has a non-abstract member. Consider setting the 'Embed Interop Types' property to false.
            comp1.AssertTheseDiagnostics()
        End Sub
```</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35851</IssueID>
    <RepoID>1</RepoID>
    <Title>FindMostSpecificImplementation swallows useSiteDiagnostics </Title>
    <Description>```private static Symbol FindMostSpecificImplementation(Symbol interfaceMember, NamedTypeSymbol implementingInterface)``` swallows useSiteDiagnostics an is used in a couple of places internally in the compiler. Need to make sure that dropping the diagnostics is not going to cause problems. </Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35850</IssueID>
    <RepoID>1</RepoID>
    <Title>Add initial checkpointing to the nullable walker.</Title>
    <Description>This adds the initial code for checkpointing the nullable walker, and defines the structure of a checkpoint. This PR does not do anything with the checkpoints yet: MemberSemanticModel gets the checkpoints, and then just throws them away without saving them. The intention is that it will save the checkpoints and use them in the speculative model in a follow up PR. @dotnet/roslyn-compiler @AlekseyTs @gafter for review.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35849</IssueID>
    <RepoID>1</RepoID>
    <Title>Can't build latest roslyn</Title>
    <Description>This is hte latest master.  I've pulled and restored things.  But if i try to build, i get:

```
5&gt;C:\Program Files\dotnet\sdk\3.0.100-preview4-010963\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.targets(136,5): error MSB4044: The "GenerateDepsFile" task was not given a value for the required parameter "CompileReferences".
```
</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35848</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for .editorconfig files to MSBuildWorkspace</Title>
    <Description>Just threading through files discovered to the workspace; no interesting changes here.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35847</IssueID>
    <RepoID>1</RepoID>
    <Title>string param = default shown as string param = null in virtual methods when overridden</Title>
    <Description>VSF_TYPE_MARKDOWNHi

I have a method

`protected override U CreateReply&amp;lt;U&amp;gt;(IContent content, Guid relationGuid = default, string code = default, string name = default)`

when overridden in a sub-class, it looks like this

`protected override U CreateReply&amp;lt;U&amp;gt;(IContent content, Guid relationGuid = default, string code = null, string name = null)`

It would be nice if optional string parameters declared as default is also set to default (instead of null) when overridden.

Probably not a big issue, other than &amp;quot;cosmetic&amp;quot;.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/570557/string-param-default-shown-as-string-param-null-in.html
VSTS ticketId: 893747_
_These are the original issue comments:_

Frode Gilberg on 5/16/2019, 03:38 AM (5 days ago): Correction. The first code-sample should be virtual (not override). Typing mistake
Visual Studio Feedback System on 5/16/2019, 10:58 PM (4 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35846</IssueID>
    <RepoID>1</RepoID>
    <Title>Decode pre- and post-condition nullable attributes</Title>
    <Description>Decode `[AllowNull]`, `[DisallowNull]`, `[MaybeNull]`, `[NotNull]`, `[MaybeNullWhen(bool)]`, `[NotNullWhen(bool)]`.

No changes to `NullableWalker` to consume these attributes yet.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35845</IssueID>
    <RepoID>1</RepoID>
    <Title>"IDE0059: Value assigned to variable is never used" is appearing with local function</Title>
    <Description>VSF_TYPE_MARKDOWNThe warning appears on variable &amp;quot;check&amp;quot; in the following code:

```
       public bool TestMethod()
        {
            bool check = true;
            LocalFunction();
            return check;

void LocalFunction()
            {
                check = false;
                Console.WriteLine(check);
            }
        }
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/575232/ide0059-value-assigned-to-variable-is-never-used-i.html
VSTS ticketId: 896188_
_These are the original issue comments:_

Visual Studio Feedback System on 5/20/2019, 09:35 PM (13 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35844</IssueID>
    <RepoID>1</RepoID>
    <Title>null-coalescing operator ?? not returning the correct value</Title>
    <Description>**Version Used**: 3.0

**Steps to Reproduce**:

1. int? x = default;
2. var y = x ?? default;

**Expected Behavior**: y should be **null**

**Actual Behavior**: y is 0

However if you explicitly specify the cast for default you'll get the correct value like this:
`var y = x ?? (int?)default;`</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35843</IssueID>
    <RepoID>1</RepoID>
    <Title>Make IRecursivePatternOperation public</Title>
    <Description>**Version Used**: 
3.0.0

**Description**
Right now, there is no way to analyze the operation behind the pattern matching code like this: `a is (var b, var c)`  without using Reflection. Please make `IRecursivePatternOperation` interface public.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35842</IssueID>
    <RepoID>1</RepoID>
    <Title>Add ImportingConstructor attribute to fix RS0034 (Exported parts should have ImportingConstructor)</Title>
    <Description>This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35841</IssueID>
    <RepoID>1</RepoID>
    <Title>Add missing constructors to fix RS0034 (Exported parts should have ImportingConstructor)</Title>
    <Description>This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35840</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

## From https://github.com/dotnet/arcade
- **Build**: 20190520.2
- **Date Produced**: 5/20/2019 1:26 PM
- **Commit**: 3b0760f8789d5d4bd146b36bd9051696d7a56bfa
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19270.2

## From https://github.com/dotnet/arcade
- **Build**: 20190521.7
- **Date Produced**: 5/22/2019 1:45 AM
- **Commit**: 7a6fb6528b2060cd9e3a3d92535f5b6fdc6b2e82
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19271.7

</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35839</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35838</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35837</IssueID>
    <RepoID>1</RepoID>
    <Title>Set non-blocking mode per textView</Title>
    <Description>Since 16.1, the Editor support blocking/non-blocking mode per textView. This fixes a situation when users turned the _non-blocking_ option ON for TypeScript/F# and could never turned it OFF.

There still can happen mixed scenarios with TypeScript and C# in the same file. However, the right fix for them would be to send the value to the Editor not via the option but as a result.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35836</IssueID>
    <RepoID>1</RepoID>
    <Title>Revisit speculative semantic handling of switch statements/expressions</Title>
    <Description>Because of the decision dag, it's complicated to get a checkpoint for switch expressions/statements if the speculative position is in the pattern section of the code. A simple example:

```C#
switch (o)
{
    case object o1 when o != null: break;
    /* Speculate here */ default: throw new Exception();
}
```

Currently, I'm taking state after the break, but we should revisit this to see whether this the behavior we want.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35835</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposal: Allow secondary invocations of Csc task to inherit default options without repeating them</Title>
    <Description>Whenever someone else in the build needs to invoke Csc, they generally want most options to be inherited from the defaults while controlling others. 

Existing use cases for such secondary invocations of Csc, WPF xaml builds, razor, and satellite assembly generation. WPF has a completely different approach today where it generates a secondary project and builds it. This solves the repetition problem, but comes with a whole other set of problems around that temporary project. Other ways of invoking CoreCompile more than once are also cumbersome.

This is a proposal to allow passing the inherited set of options decided by Microsoft.CSharp.Core.targets plus some customization while only having to write the part that is customized, and not having to repeat the part that isn't.

The core idea is to have an additional argument to the Csc task that can represent all of the other arguments. Csc invocations will fall back to this representation of the arguments for any argument that is not otherwise passed.

``` c#
class Csc : Microsoft.Build.Task {
   // New argument that can capture all of the other arguments
   public ITaskItem[] Arguments { get; set; }

   // Existing arguments, when passed, take precedence over new argument above
   ...
}
```

Then a new target is responsible for stashing the arguments that would be passed to Csc:

```xml
&lt;Target Name="PrepareCoreCompile" Returns="@(CompilationArguments)"&gt;
  &lt;!-- 
     Interprets the project properties and items as CoreCompile does today, but 
     instead of running Csc, produces @(CompilationArguments) that can be 
     passed to Csc later.
   --&gt;
  ...
&lt;/Target&gt;   
```

Then the CoreCompile Csc invocation reduces to:

``` xml
&lt;Target Name="CoreCompile" DependsOnTargets="PrepareCoreCompile"&gt;
  &lt;Csc Arguments="@(CompilationArguments)" /&gt;
&lt;/Target&gt;
```

And custom Csc invocation could be:
``` xml
&lt;Target Name="MyCustomCompile" DependsOnTargets="PrepareCoreCompile"&gt;
   &lt;Csc Arguments="@(CompilationArguments)"
            OutputAssembly="$(CustomOutputAssembly)"
            RefOnly="true" 
           /&gt;
&lt;/Target&gt;
```

This says compile as CoreCompile would, but change the output assembly to $(CustomOutputAssembly) and set RefOnly to true.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35834</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM: An attempt to use protected method declared in an interface from code targeting desktop framework doesn't cause runtime capability error</Title>
    <Description>```
        &lt;Fact&gt;
        Public Sub MethodImplementation_27()

            Dim csSource =
"
public interface I1
{
    protected static string M1()
    {
        return ""I1.M1"";
    }
}
"
            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()

            Dim source1 =
&lt;compilation&gt;
    &lt;file name="c.vb"&gt;&lt;![CDATA[
Public Class C
    Implements I1
    Shared Sub Main()
        System.Console.WriteLine(I1.M1())
    End Sub
End Class
]]&gt;&lt;/file&gt;
&lt;/compilation&gt;

            Dim comp1 = CreateCompilation(source1, options:=TestOptions.DebugExe, targetFramework:=TargetFramework.DesktopLatestExtended, references:={csCompiation})
            comp1.AssertTheseDiagnostics(
&lt;error&gt;
BC30390: 'I1.Function M1() As String' is not accessible in this context because it is 'Protected'.
        System.Console.WriteLine(I1.M1())
                                 ~~~~~
&lt;/error&gt;)
        End Sub
```

Expect to see an error similar to:
```
error CS8707: Target runtime doesn't support 'protected', 'protected internal', or 'private protected' accessibility for a member of an interface.
```

Observed: Only accessibility error is reported which will go away once https://github.com/dotnet/roslyn/issues/35827 is fixed.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35833</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35832</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow nullable variance for in/out params when converting method group to delegate</Title>
    <Description>Resolves #32563
Resolves #32564</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35831</IssueID>
    <RepoID>1</RepoID>
    <Title>Modify get contained document to accept null id as input.</Title>
    <Description>Liveshare is broken for 16.1 P4 or greater clients because a null check was misplaced in a refactoring.

[This method](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/VisualStudioSupportsFeatureService.cs#L57) returns null because liveshare uses their own workspace type.  This causes [TryGetContainedDocument ](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/VisualStudioSupportsFeatureService.cs#L87)to throw an argument exception as the id is null.

The fix implementing here is to either modify all the call sites to skip this call when null or return null when passed in null to TryGetContainedDocument.  In all reference locations I could find, a null check is performed before the result of TryGetContainedDocument was used, so this seems safe (and it's already TryGet)

Tested in a liveshare session that a &gt; 16.1p4 client can use preview code actions.</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35830</IssueID>
    <RepoID>1</RepoID>
    <Title>added code lens resource file in vsix</Title>
    <Description>I forgot to add new resource file to vsix for new code lens dll.</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35829</IssueID>
    <RepoID>1</RepoID>
    <Title>Non-virtual Private Protected members are not excluded from import by default</Title>
    <Description>Compare the errors reported for MethodImplementation_12 and MethodImplementation_15

```
        &lt;Fact&gt;
        Public Sub MethodImplementation_12()

            Dim csSource =
"
public interface I1
{
    internal static void M1()
    {
    }
}
"
            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()

            Dim source1 =
&lt;compilation&gt;
    &lt;file name="c.vb"&gt;&lt;![CDATA[
Public Class C
    Shared Sub Main()
        I1.M1()
    End Sub
End Class
]]&gt;&lt;/file&gt;
&lt;/compilation&gt;

            Dim comp1 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})
            comp1.AssertTheseDiagnostics(
&lt;error&gt;
BC30456: 'M1' is not a member of 'I1'.
        I1.M1()
        ~~~~~
&lt;/error&gt;)

            Dim comp2 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation}, options:=TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All))
            comp2.AssertTheseDiagnostics(
&lt;error&gt;
BC30390: 'I1.Sub M1()' is not accessible in this context because it is 'Friend'.
        I1.M1()
        ~~~~~
&lt;/error&gt;)
        End Sub

        &lt;Fact&gt;
        Public Sub MethodImplementation_15()

            Dim csSource =
"
public interface I1
{
    private protected static void M1()
    {
    }
}
"
            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()

            Dim source1 =
&lt;compilation&gt;
    &lt;file name="c.vb"&gt;&lt;![CDATA[
Public Class C
    Implements I1
    Shared Sub Main()
        I1.M1()
    End Sub
End Class
]]&gt;&lt;/file&gt;
&lt;/compilation&gt;

            Dim comp1 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})
            comp1.AssertTheseDiagnostics(
&lt;error&gt;
BC30390: 'I1.Sub M1()' is not accessible in this context because it is 'Private Protected'.
        I1.M1()
        ~~~~~
&lt;/error&gt;)
            Dim comp2 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation}, options:=TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All))
            comp2.AssertTheseDiagnostics(
&lt;error&gt;
BC30390: 'I1.Sub M1()' is not accessible in this context because it is 'Private Protected'.
        I1.M1()
        ~~~~~
&lt;/error&gt;)
        End Sub
```

Note that with default MetadataImportOptions MethodImplementation_12 reports the following error:
```
BC30456: 'M1' is not a member of 'I1'.
        I1.M1()
        ~~~~~
```
This indicates that the method was not imported.

Under the same conditions MethodImplementation_15 reports: 
```
BC30390: 'I1.Sub M1()' is not accessible in this context because it is 'Private Protected'.
        I1.M1()
        ~~~~~
```
This indicates that the method was imported.

Expected:
The method shouldn't be imported because it cannot be accessible outside of the assembly.  

The issue is not specific to VB or to DIM feature.</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35828</IssueID>
    <RepoID>1</RepoID>
    <Title>Add helper to simplify a common parsing pattern.</Title>
    <Description>
    </Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35827</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM: Unexpected accessibility error while trying to access protected method declared in an interface</Title>
    <Description>```
        &lt;Fact&gt;
        Public Sub MethodImplementation_13()

            Dim csSource =
"
public interface I1
{
    protected static void M1()
    {
        System.Console.WriteLine(""I1.M1"");
    }
}
"
            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()

            Dim source1 =
&lt;compilation&gt;
    &lt;file name="c.vb"&gt;&lt;![CDATA[
Public Class C
    Implements I1
    Shared Sub Main()
        I1.M1()
    End Sub
End Class
]]&gt;&lt;/file&gt;
&lt;/compilation&gt;

            Dim comp1 = CreateCompilation(source1, options:=TestOptions.DebugExe, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})
            CompileAndVerify(comp1, expectedOutput:=If(ExecutionConditionUtil.IsMonoOrCoreClr, "I1.M1", Nothing), verify:=VerifyOnMonoOrCoreClr)
        End Sub
```

Observed:
```
c.vb(4) : error BC30390: 'I1.Sub M1()' is not accessible in this context because it is 'Protected'.
```

Consuming public static methods works</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35826</IssueID>
    <RepoID>1</RepoID>
    <Title>Parsing for Parameter Nullchecking</Title>
    <Description>Contains parsing for general case, lambda case and lambda case with multiple parameters, as well as initial test cases.

Relates to https://github.com/dotnet/roslyn/issues/36024 (test plan)</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>30/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35825</IssueID>
    <RepoID>1</RepoID>
    <Title>don't suggest this in a static local function alternative</Title>
    <Description>This is the alternative option suggested in #35822, shown here for comparison.</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35824</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM: No error is reported for an attempt to implement an inaccessible interface method</Title>
    <Description>```
        &lt;Fact&gt;
        Public Sub MethodImplementation_07()

            Dim csSource =
"
public interface I1
{
    internal void M1();
}
"
            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()

            Dim source1 =
&lt;compilation&gt;
    &lt;file name="c.vb"&gt;&lt;![CDATA[
Public Class C
    Implements I1

    Sub M1() Implements I1.M1
    End Sub
End Class
]]&gt;&lt;/file&gt;
&lt;/compilation&gt;

            Dim comp1 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})
            comp1.AssertTheseDiagnostics(
&lt;errors&gt;
&lt;/errors&gt;
            )
        End Sub
```

Observed: No error is reported

Expected: An error saying something like: "'I1.M1' is inaccessible due to its protection level"</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35823</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM: Class is required to implement a method representing a re-abstraction of an interface method from base interface</Title>
    <Description>```
        &lt;Fact&gt;
        Public Sub MethodImplementation_06()

            Dim csSource =
"
public interface I1
{
    void M1();
}

public interface I2 : I1
{
    abstract void I1.M1();
}
"
            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()

            Dim source1 =
&lt;compilation&gt;
    &lt;file name="c.vb"&gt;&lt;![CDATA[
Public Class C
    Implements I2

    Sub M1() Implements I1.M1
        System.Console.WriteLine("C.M1")
    End Sub

    Shared Sub Main()
        Dim i1 As I1 = new C()
        i1.M1()
    End Sub
End Class
]]&gt;&lt;/file&gt;
&lt;/compilation&gt;

            Dim comp1 = CreateCompilation(source1, options:=TestOptions.DebugExe, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})
            CompileAndVerify(comp1, expectedOutput:=If(ExecutionConditionUtil.IsMonoOrCoreClr, "C.M1", Nothing), verify:=VerifyOnMonoOrCoreClr)
        End Sub
```

Observed:
```
c.vb(2) : error BC30149: Class 'C' must implement 'Sub I1.M1()' for interface 'I2'.
```</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35822</IssueID>
    <RepoID>1</RepoID>
    <Title>Dont suggest this in static local functions</Title>
    <Description>See #35644, #27719

### The Problem

Currently `Symbol.IsStatic` is not very well defined. The compiler assumes it means any/all of the following:

1. A type is marked static,
2. A member is marked static,
3. A member does not require an instance receiver (with the exception of a non-static constructor - I will need to investigate more there)
4. A member cannot capture `this`
5. For some reason a namespace is considered static, but an assembly is not 🤷

In general this has worked till now because these definitions have mostly coincided, and when they haven't it has usually been in an understandable way (eg. constants are static even though they are not marked static).

Unfortunately Local Functions break that:

Static local functions are marked static, cannot capture this, and do not require an instance receiver.

Non-Static local functions are not marked static, can capture this, but do not require an instance receiver.

Currently all local functions are marked static, in order to make the compiler work with the fact that they do not require an instance receiver. This causes two problems:

1. It is non-intuitive that a non-static local functions IsStatic returns true. Since this is a public API, that's a problem.

2. We need an API to tell us if a local function is static or not. Indeed the ultimate purpose of this PR is to prevent `this` being suggested in local functions, which depends on such an API.

### Solutions

We need to decide what IsStatic means:

#### Option 1.

Make non-static local functions IsStatic return false. Replace all usages of IsStatic where we are checking to see if a member Requires an instance receiver with a new property, RequiresInstanceReciever. This property can be internal, since it is only really of interest to the compiler.

**advantages**
IsStatic now matches our intuition much better.
We've now increased the explicitness of the compiler. Rather than mashing up lots of different concepts into one, we've begun seperating them out into different concepts.

**disadvantages**
This is risky. RequiresInstanceReciever now behaves exactly like IsStatic used to, but IsStatic behaves slightly differently. If we forget to replace all relevant usages of IsStatic with RequiresInstanceReciever, we may introduce subtle bugs that only occur with non-static local functions.

#### Option 2.

We currently have a temporary internal API `IsStaticLocalfunction`. Make this public and move it to IMethodSymbol. Document what IsStatic means.

**advantages**
Very low risk. Simple to do.

**disadvantages**
IsStatic now doesn't match our intuitions.
Rather than solving the problem, we've worked around it. We've just increased the technical debt of the codebase, rather than decreasing it.


### Approach taken here

The ideal solution is obviously the first, which is what I've done, so that the risk can be properly evaluated. I've created a pr for the second solution at #35825 so they can be compared.

Changing a call from `IsStatic` to `RequiresInstanceReciever` is always safe, since the latter behaves like the former used to.

Leaving a call as a call to `IsStatic` is dangerous, as `IsStatic` now has different behaviour.

For fields/events/properties `IsStatic` and `RequiresInstanceReciever` are synonyms.

I've gone through every usage of `IsStatic` in the compiler code (not tests/workspaces/IDE) and if it appears to be about receivers, and is not explicitly talking about a field property or event, I have replaced it with a call to `RequiresInstanceReciever`.

This requires changing 27 files.

Depending on the opinion of the roslyn team, I am happy to either take the alternative solution, do more work here, or drop this altogether.
</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35821</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM: Class cannot implement a virtual interface method</Title>
    <Description>```
        &lt;Fact&gt;
        Public Sub MethodImplementation_02()

            Dim csSource =
"
public interface I1
{
    void M1() 
    {
    }
}
"
            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()

            Dim source1 =
&lt;compilation&gt;
    &lt;file name="c.vb"&gt;&lt;![CDATA[
Public Class C
    Implements I1

    Sub M1() Implements I1.M1
        System.Console.WriteLine("C.M1")
    End Sub

    Shared Sub Main()
        Dim i1 As I1 = new C()
        i1.M1()
    End Sub
End Class
]]&gt;&lt;/file&gt;
&lt;/compilation&gt;

            Dim comp1 = CreateCompilation(source1, options:=TestOptions.DebugExe, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})
            CompileAndVerify(comp1, expectedOutput:=If(ExecutionConditionUtil.IsMonoOrCoreClr, "C.M1", Nothing), verify:=VerifyOnMonoOrCoreClr)
        End Sub
```

Observed:
```
c.vb(4) : error BC30401: 'M1' cannot implement 'M1' because there is no matching sub on interface 'I1'.
```</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35820</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM: Class is not required to implement a virtual interface method</Title>
    <Description>
```
        &lt;Fact&gt;
        Public Sub MethodImplementation_01()

            Dim csSource =
"
public interface I1
{
    void M1() 
    {
    }
}
"
            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()

            Dim source1 =
&lt;compilation&gt;
    &lt;file name="c.vb"&gt;&lt;![CDATA[
Public Class C
    Implements I1
End Class
]]&gt;&lt;/file&gt;
&lt;/compilation&gt;

            Dim comp1 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})
            comp1.AssertTheseDiagnostics(
&lt;errors&gt;
BC30149: Class 'C' must implement 'Sub M1()' for interface 'I1'.
    Implements I1
               ~~
&lt;/errors&gt;
            )
        End Sub
```

Observed: The expected error is not reported</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35819</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>

``` bash
git fetch --all
git checkout merges/rigibson/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/rigibson/master-to-master-vs-deps --force
```</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>20/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35818</IssueID>
    <RepoID>1</RepoID>
    <Title>IOperation SetParent Race Condition</Title>
    <Description>```
[30176]    at Microsoft.CodeAnalysis.Operation.SetParentOperation(IOperation parent) in D:\dd\roslyn6\src\Compilers\Core\Portable\Operations\Operation.cs:line 142

[30176]    at Microsoft.CodeAnalysis.Operation.SetParentOperation[T](T operation, IOperation parent) in D:\dd\roslyn6\src\Compilers\Core\Portable\Operations\Operation.cs:line 163

[30176]    at Microsoft.CodeAnalysis.Operations.ArgumentOperation..ctor(IOperation value, ArgumentKind argumentKind, IParameterSymbol parameter, IConvertibleConversion inConversionOpt, IConvertibleConversion outConversionOpt, SemanticModel semanticModel, SyntaxNode syntax, Boolean isImplicit) in D:\dd\roslyn6\src\Compilers\Core\Portable\Operations\OperationNodes.cs:line 306

[30176]    at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.CreateArgumentOperation(ArgumentKind kind, IParameterSymbol parameter, BoundExpression expression) in D:\dd\roslyn6\src\Compilers\CSharp\Portable\Operations\CSharpOperationFactory_Methods.cs:line 62

[30176]    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeArgumentsInEvaluationOrder(CSharpOperationFactory operationFactory, Binder binder, SyntaxNode syntax, ImmutableArray`1 arguments, Symbol methodOrIndexer, MethodSymbol optionalParametersMethod, Boolean expanded, ImmutableArray`1 argsToParamsOpt, Boolean invokedAsExtensionMethod) in D:\dd\roslyn6\src\Compilers\CSharp\Portable\Lowering\LocalRewriter\LocalRewriter_Call.cs:line 599

[30176]    at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.DeriveArguments(BoundNode boundNode, Binder binder, Symbol methodOrIndexer, MethodSymbol optionalParametersMethod, ImmutableArray`1 boundArguments, ImmutableArray`1 argumentNamesOpt, ImmutableArray`1 argumentsToParametersOpt, ImmutableArray`1 argumentRefKindsOpt, ImmutableArray`1 parameters, Boolean expanded, SyntaxNode invocationSyntax, Boolean invokedAsExtensionMethod) in D:\dd\roslyn6\src\Compilers\CSharp\Portable\Operations\CSharpOperationFactory_Methods.cs:line 337

[30176]    at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.DeriveArguments(BoundNode containingExpression) in D:\dd\roslyn6\src\Compilers\CSharp\Portable\Operations\CSharpOperationFactory_Methods.cs:line 280

[30176]    at Microsoft.CodeAnalysis.Operations.CSharpLazyInvocationOperation.CreateArguments() in D:\dd\roslyn6\src\Compilers\CSharp\Portable\Operations\CSharpOperationNodes.cs:line 799

[30176]    at Microsoft.CodeAnalysis.Operations.LazyInvocationOperation.get_Arguments() in D:\dd\roslyn6\src\Compilers\Core\Portable\Operations\OperationNodes.cs:line 3889

[30176]    at Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.&lt;get_Children&gt;d__8.MoveNext() in D:\dd\roslyn6\src\Compilers\Core\Portable\Operations\OperationNodes.cs:line 3805

[30176]    at Microsoft.CodeAnalysis.Operations.OperationExtensions.&lt;Descendants&gt;d__3.MoveNext() in D:\dd\roslyn6\src\Compilers\Core\Portable\Operations\OperationExtensions.cs:line 85

[30176]    at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)

[30176]    at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetOperationWorker(CSharpSyntaxNode node, CancellationToken cancellationToken) in D:\dd\roslyn6\src\Compilers\CSharp\Portable\Compilation\MemberSemanticModel.cs:line 1060

```

repro step.
first clone this repo - https://github.com/nopSolutions/nopCommerce
and enable full solution analysis in debug VS (assert is debug only assert)

....

another repro step.
with Roslyn, enable VB full solution analysis, and open 
src\EditorFeatures\VisualBasicTest\CodeActions\MoveType\BasicMoveTypeTestsBase.vb
with debug Roslyn bit.
</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35817</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable warnings for contravariant interface implementations</Title>
    <Description>**Version Used**: 
3.2.0-beta1-19266-05+04c76c9d58c7911e2fd199da145cd97bbf283438

**Steps to Reproduce**:
```C#
#nullable enable
class Program : IFoo
{
    static void Main() { }

    public bool MyEquals(object? o) =&gt; true;
}

interface IFoo
{
    bool MyEquals(object o);
}
```

**Expected Behavior**:
Compiles without warning.

**Actual Behavior**:
```
warning CS8614: Nullability of reference types in type of parameter 'o' doesn't match implicitly implemented member 'bool IFoo.MyEquals(object o)'.
```</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35816</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable Reference Type Changes</Title>
    <Description>Reacting to the [C# LDM](https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-15.md) changes to nullable reference types

- 6/10
    - [x] Support for `notnull` constraint @AlekseyTs (PR https://github.com/dotnet/roslyn/pull/36109)
    - [x] Use of `where T: object` is a warning (PR https://github.com/dotnet/roslyn/pull/36109)
    - [ ] Support for `AllowNull`, `DisallowNull`, `NotNull`, `MaybeNull`, `NotNullWhen(bool)`, `MaybeNullWhen(bool)` @jcouv @cston 
        - [x] basic scenarios (PR https://github.com/dotnet/roslyn/pull/35955)
        - [x] conditional attributes (PR https://github.com/dotnet/roslyn/pull/36172)
        - [x] fix namespace issue (PR https://github.com/dotnet/roslyn/pull/36369)
        - [ ] more scenarios involving return value (search for uses of `ReturnTypeWithAnnotations` in `NullableWalker`) (issue https://github.com/dotnet/roslyn/issues/36242)
        - [x] attributes on properties and indexers (PR https://github.com/dotnet/roslyn/pull/36444)
        - [x] attributes on fields
        - [x] attributes on fields implemented incorrectly (issue https://github.com/dotnet/roslyn/issues/36830)
        - [x] enforcing attributes on nullable value types (issue https://github.com/dotnet/roslyn/issues/36009, PR https://github.com/dotnet/roslyn/pull/36263)
        - [x] solve the `TryGetValue` scenario (PR https://github.com/dotnet/roslyn/pull/36284)
    - [x] Support for older attributes is deleted @jcouv @cston 
- 6/17
    - [x] Metadata format changed (@cston)
        - [x] omit private/internal members (PR https://github.com/dotnet/roslyn/pull/36398)
        - [x] omit trivial value types (PR https://github.com/dotnet/roslyn/pull/36519)
        - [x] optimize the representation with context attribute (PR https://github.com/dotnet/roslyn/pull/36152)
- 7/10
    - [x] `IComparable&lt;T&gt;` scenario
    - [x] Support for `Interlocked.CompareExchange` (issue https://github.com/dotnet/roslyn/issues/36911)
    - [x] Equality support (issue https://github.com/dotnet/roslyn/issues/36591)
    - [x] Use of `where T: object` is an error (PR https://github.com/dotnet/roslyn/pull/36269)
- RTW
    - [x] Support for `DoesNotReturn`, `DoesNotReturnIf(bool)` (PR https://github.com/dotnet/roslyn/pull/36810)
    - [ ]  `NotNullIfNotNull(string)` (issue https://github.com/dotnet/roslyn/issues/31549)

</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35815</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing warning with default expression converted to tuple</Title>
    <Description>The following program throws a `NullReferenceException` but there are no diagnostics at compile-time.

``` c#
#nullable enable

namespace ConsoleApp6
{
    class Program
    {
        static void Main(string[] args)
        {
            M(default);
        }

        static void M((string, int) p)
        {
            p.Item1.ToString();
        }
    }
}
```
</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35814</IssueID>
    <RepoID>1</RepoID>
    <Title>🧹 Remove the use of asynchronous APIs in analyzer</Title>
    <Description>
    </Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35813</IssueID>
    <RepoID>1</RepoID>
    <Title>ExceptionUtilities.UnexpectedValue in VisualBasicOperationFactory for BoundKind.TypeArguments</Title>
    <Description>1. Build `\src\Tools\AnalyzerRunner\AnalyzerRunner.csproj` (you might have to manually apply the work around in https://github.com/dotnet/roslyn/issues/35812 before building)
2. cd `$(RepoRoot)\artifacts\bin\AnalyzerRunner\Release\net472`
3. Execute `AnalyzerRunner.exe . $(RepoRoot)\Compilers.sln /concurrent`

Exception thrown in VisualBasicOperationFactory [here](http://source.roslyn.io/#Microsoft.CodeAnalysis.VisualBasic/Operations/VisualBasicOperationFactory.vb,348) for unhandled [BoundKind.TypeArguments](http://source.roslyn.io/#Microsoft.CodeAnalysis.VisualBasic/Generated/BoundNodes.xml.Generated.vb,80d4f4d60add9bd5,references)

```
 	Microsoft.CodeAnalysis.dll!Roslyn.Utilities.ExceptionUtilities.UnexpectedValue(object o) Line 18	C#
&gt;	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.Operations.VisualBasicOperationFactory.CreateInternal(Microsoft.CodeAnalysis.VisualBasic.BoundNode boundNode) Line 348	Basic
 	mscorlib.dll!System.Collections.Concurrent.ConcurrentDictionary&lt;Microsoft.CodeAnalysis.VisualBasic.BoundNode, Microsoft.CodeAnalysis.IOperation&gt;.GetOrAdd(Microsoft.CodeAnalysis.VisualBasic.BoundNode key, System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.BoundNode, Microsoft.CodeAnalysis.IOperation&gt; valueFactory)	Unknown
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.Operations.VisualBasicOperationFactory.Create(Microsoft.CodeAnalysis.VisualBasic.BoundNode boundNode) Line 84	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.Operations.VisualBasicOperationFactory.CreateFromArray(Of Microsoft.CodeAnalysis.VisualBasic.BoundNode, Microsoft.CodeAnalysis.IOperation)(System.Collections.Immutable.ImmutableArray(Of Microsoft.CodeAnalysis.VisualBasic.BoundNode) nodeArray) Line 90	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.Operations.VisualBasicLazyInvalidOperation.CreateChildren() Line 536	Basic
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.LazyInvalidOperation.Children.get() Line 3768	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationExtensions.Descendants(Microsoft.CodeAnalysis.IOperation operation, bool includeSelf) Line 99	C#
 	System.Collections.Immutable.dll!System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt;.Builder.AddRange(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; items)	Unknown
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder&lt;Microsoft.CodeAnalysis.IOperation&gt;.AddRange(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; items) Line 471	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind&gt;.GetOperationsToAnalyze(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt; operationBlocks) Line 2176	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions.__getOperationsToAnalyzeWithStackGuard|4(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt; operationBlocksToAnalyze) Line 1949	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions.__executeExecutableCodeActions|3() Line 1928	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.SyntaxReference decl, int declarationIndex, Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind&gt;.GroupedAnalyzerActions additionalPerSymbolActions, bool shouldExecuteSyntaxNodeActions, bool shouldExecuteOperationActions, bool shouldExecuteCodeBlockActions, bool shouldExecuteOperationBlockActions, bool isInGeneratedCode, System.Threading.CancellationToken cancellationToken) Line 1851	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool isGeneratedCodeSymbol, Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions additionalPerSymbolActionsOpt, System.Threading.CancellationToken cancellationToken) Line 1739	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 1060	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 1001	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 935	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 922	C#

```</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35812</IssueID>
    <RepoID>1</RepoID>
    <Title>AnalyzerRunner throws exceptions at MSBuildWorkspace.Create</Title>
    <Description>**Version Used**: 
VS2019 16.2 latest preview dogfood build

**Steps to Reproduce**:

1. Build `$(RepoRoot)\src\Tools\AnalyzerRunner\AnalyzerRunner.csproj` in Release mode
2. cd `$(RepoRoot)\artifacts\bin\AnalyzerRunner\Release\net472`
3. Execute `AnalyzerRunner.exe . $(RepoRoot)\Compilers.sln /concurrent`

**Expected Behavior**:
AnalyzerRunner executes fine

**Actual Behavior**:
AnalyzerRunner fails with exceptions trying to find MSBuild dependencies. If I manually edit AnalyzerRunner.csproj to replace `$(MicrosoftBuildLocatorVersion)` with `1.1.2` then it works fine. It seems current version of MSBuildLocator (1.0.3) doesn't work on latest VS2019 builds.</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35811</IssueID>
    <RepoID>1</RepoID>
    <Title>Automated Code Snippets</Title>
    <Description>Rather than creating code snippets, Visual Studio should be able to prescribe sensible methods to get from Object A to Object B. For example, I have an object, but it's not the right type to send to a particular method. I usually end up googling for samples and they're pretty easy to find, but I suspect some clever tidbits built into the IDE could improve on this approach. There are lots of other common things I encounter regularly like when creating an object with a nullable integer value, there are pretty standard ways to handle that in the code so you don't end up with exceptions. Think of all the time saved if the IDE were smart enough to help developers avoid null reference exception errors by proposing well written code. </Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35810</IssueID>
    <RepoID>1</RepoID>
    <Title>🧹 Remove IInProcessAnalyzer</Title>
    <Description>* Remove unnecessary uses of IInProcessAnalyzer
* ~~Ban the ongoing use of IInProcessAnalyzer~~

    RenameTrackingDiagnosticAnalyzer is the only remaining in-process analyzer, which is tracked by #35808. Use of IInProcessAnalyzer in new locations is not allowed.

* After changing `RenameTrackingDiagnosticAnalyzer` to extend `DocumentDiagnosticAnalyzer`, the `IInProcessAnalyzer` interface is removed entirely

    Closes #35808</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35809</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider renaming `ForEachVariableStatementSyntax`</Title>
    <Description>I just spent a few extra minutes debugging an issue which, ultimately, was caused by a lapse of mine: I never noticed such AST node `ForEachVariableStatementSyntax`.

I **think** that I understand the reason for the existence of "another foreach" node, given that `ForEachStatementSyntax` already has an identifier for the *singly* declared variable. Yet, I still wonder why not just creating an additional child node ...?

In the worst case, I'd suggest renaming `ForEachVariableStatementSyntax` to `ComplexForEachStatementSyntax` or something in the like. The current name is not very distinguishing and also misleading (i.e., i'd imply that the original `ForEachStatementSyntax` doesn't declare a variable).

</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35808</IssueID>
    <RepoID>1</RepoID>
    <Title>Update RenameTrackingDiagnosticAnalyzer to run out-of-process</Title>
    <Description>Currently `RenameTrackingDiagnosticAnalyzer` depends on data stored on `ITextBuffer` instances which is not not available out-of-process. This analyzer will cease to work in its current form when the analyzer infrastructure is moved out-of-process. The analyzer should be updated to remove the in-process dependency, or the analyzer for this feature should be replaced with an alternative implementation that does not rely on analyzers.</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35807</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Code Styles should honor the C# Language Level setting in the Solution explorer</Title>
    <Description>VSF_TYPE_MARKDOWN
​We have some legacy projects (.net 4.5/C#5) where we are using VS 2019.  
To keep the text editor from recommending using later features that are not supported in C# 5, we have set the language level to target the correct version.

This works in the text editor however the solution explorer doesn't seem to also honor the setting.

See the 2 screen shots to see what I mean.

Repro 
1. Create a .net Framework 4.5/C# 5.0 project
2. Set the target language to be C# 5.0
3. Write an if statement using the `as` keyword (or any other code that would trigger a c# 7 code styles recommendation)

Expected Result
1. *BOTH* visual studio and the solution explorer should *NOT* recommend the IDE0019 change

Actual Result
1. Solution explorer shows the recommendation as blue squiggly lines.

(I hate poorly written bug reports, hope this give you enough info).

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/569720/c-code-styles-should-honor-the-c-language-level-se.html
VSTS ticketId: 893249_
_These are the original issue comments:_

Visual Studio Feedback System on 5/16/2019, 02:35 AM (4 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 5/19/2019, 02:37 AM (30 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35806</IssueID>
    <RepoID>1</RepoID>
    <Title>Code Fixes/refactorings should add using statements if necessary and possible</Title>
    <Description>For example, when pull members up to base class is used, and the base class is in a separate document without a suitable using statement, the following happens:

```csharp
interface Interface
{
    public System.Threading.Tasks.Task PulledUp(System.Guid guid);
}
```

Instead I think it would be best if pull members up tried to preserve the names as they appeared in the original document. This means that it should add `using` statements if doing so will not cause conflicts.

Thus it should result in:

```csharp
using System;
using System.Threading.Tasks;

interface Interface
{
    public Task PulledUp(Guid guid);
}
```

Similiar applies to Implement members, generate variable, etc.</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35805</IssueID>
    <RepoID>1</RepoID>
    <Title>Add code fix for calling base constructor with missing arguments</Title>
    <Description>I would like a code fix "Add parameter Foo to constructor" in the following situation:

```csharp
abstract class Base
{
    protected Base(Foo foo) {}
}

class Derived : Base
{
    public Derived(Bar bar) {} //cs7036: There is no argument that corresponds to the required formal parameter 'Foo' of 'Base.Base(Foo)'
}
```

The result of the code fix should be:

```csharp
abstract class Base
{
    protected Base(Foo foo) {}
}

class Derived : Base
{
    public Derived(Bar bar, Foo foo) : base(foo) {} 
}
```

It should also be offered if the base constructor is explicitly called, but with missing arguments.

I will be happy to implement this myself, once I am done with the PR I am currently working on.</Description>
    <CreatedDate>20/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35804</IssueID>
    <RepoID>1</RepoID>
    <Title>Ignore nullability in operator overload resolution</Title>
    <Description>Fixes #35057</Description>
    <CreatedDate>19/05/2019</CreatedDate>
    <ClosedDate>20/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35803</IssueID>
    <RepoID>1</RepoID>
    <Title>Add using refactoring should take AddImportPlacement setting into account</Title>
    <Description>**Version Used**: 
VS2019 16.1 Preview 3

**Steps to Reproduce**:

1. Create empty c# project
2. Add .editorconfig file with "csharp_using_directive_placement = inside_namespace : error"
3. Use 'Add using' refactoring in any c# file without any using directives.

**Expected Behavior**:
Refactoring should add using directive inside namespace. 
If document already has any using directives - it should be added based on existing position (current behavior).

**Actual Behavior**:
Using directive is added outside namespace.

![2019-05-19_21-23-47](https://user-images.githubusercontent.com/17177729/57986379-cfa8f280-7a7c-11e9-9956-965220a695c0.gif)
</Description>
    <CreatedDate>19/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35802</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/05/2019</CreatedDate>
    <ClosedDate>19/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35801</IssueID>
    <RepoID>1</RepoID>
    <Title>NullContextOptions weird out when using nullable reference type and value tuple deconstruction</Title>
    <Description>Consider:

```C#
static void Main(string[] args)
{
    foreach (var (a, b) in GetCollection())
    {
        Console.WriteLine(a);
    }
}

static ICollection&lt;(int a, string? b)&gt; GetCollection()
{
    return new[]
    {
        (1, "A"),
        (2, null),
    };
}
```

This results in the compiler complaining about the nullability at the site of deconstruction:

![image](https://user-images.githubusercontent.com/174281/57974769-69d04400-7972-11e9-907a-20bf9c1bc911.png)

Reproduced using `SDK v3.0.100-preview6-011875`</Description>
    <CreatedDate>18/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35800</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/05/2019</CreatedDate>
    <ClosedDate>18/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35799</IssueID>
    <RepoID>1</RepoID>
    <Title>The color of VS2019 is so light, can I use VS2017 style in VS2019?</Title>
    <Description>ScrollBar in Diff window:
![image](https://user-images.githubusercontent.com/2529999/57968219-2689cb80-799a-11e9-9f73-4263fadb3984.png)

![image](https://user-images.githubusercontent.com/2529999/57968231-36091480-799a-11e9-9614-79cced2e567a.png)


Hightlight color in ContextMenu:
![image](https://user-images.githubusercontent.com/2529999/57968140-4967b000-7999-11e9-9c5d-84d39ec7ce15.png)

![image](https://user-images.githubusercontent.com/2529999/57968151-68fed880-7999-11e9-8e85-98733010c062.png)
</Description>
    <CreatedDate>18/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35798</IssueID>
    <RepoID>1</RepoID>
    <Title>Can't select the first item of the IntelliSence ContextMenu by Click.</Title>
    <Description>**Version Used**: 16.0.4

**Steps to Reproduce**:

1. type `int.`
2. IntelliSence is like this:
![image](https://user-images.githubusercontent.com/2529999/57967939-01478e00-7997-11e9-8f1e-95779c568865.png)
3. Click the first item `Equals`

**Expected Behavior**: Highlight `Equals`

**Actual Behavior**: Nothing
</Description>
    <CreatedDate>18/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35797</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/05/2019</CreatedDate>
    <ClosedDate>18/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35796</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35795</IssueID>
    <RepoID>1</RepoID>
    <Title>DIM interface overrides report being "sealed".</Title>
    <Description>Our symbol model reports that DIM overrides are "sealed", though the sealed modifier is forbidden.  The symbol model should reflect the language point of view, and the "sealed" modifier does not seem apropos.  From the metadata viewpoint, however, sealed is appropriate, so it would be fine to have `MetadataSealed` true (if there is such a thing).

The reason the method cannot be overridden is that it cannot be named, as it does not introduce a member according to the language specification. In the symbol model, its symbol is one that cannot be named.  Neither of these is the same as being "sealed".

(LDM previously decided that "sealed" isn't permitted because it doesn't make sense for an interface override)</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>20/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35794</IssueID>
    <RepoID>1</RepoID>
    <Title>"Make async void return Task" fix returns code with odd formatting</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.2.0 Preview 1.0 [28916.44.d16.2]
VisualStudio.16.IntPreview/16.2.0-pre.1.0+28916.44.d16.2
Microsoft .NET Framework
Version 4.8.03752

Installed Version: Enterprise

Visual C++ 2019   00435-60000-00000-AA045
Microsoft Visual C++ 2019

Application Insights Tools for Visual Studio Package   9.1.00429.1
Application Insights Tools for Visual Studio

Azure App Service Tools v3.0.0   16.1.429.50124
Azure App Service Tools v3.0.0

C# Tools   3.2.0-beta1-19263-09+9de7366b0d1c61488ea5ca31b46412bf31627e4c
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

Extensibility Message Bus   1.2.0 (master@8b56e20)
Provides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual C++ Wizards   1.0
Microsoft Visual C++ Wizards

Microsoft Visual Studio VC Package   1.0
Microsoft Visual Studio VC Package

Mono Debugging for Visual Studio   16.1.10 (1f552af)
Support for debugging Mono processes with Visual Studio.

NuGet Package Manager   5.1.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

Visual Basic Tools   3.2.0-beta1-19263-09+9de7366b0d1c61488ea5ca31b46412bf31627e4c
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual F# Tools 10.4 for F# 4.6   16.1.0-beta.19253.3+42526fe359672a05fd562dc16a91a43d0fe047a7
Microsoft Visual F# Tools 10.4 for F# 4.6

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

VisualStudio.Mac   1.0
Mac Extension for Visual Studio

Xamarin   16.2.0.178 (merge@fc2acf8fd)
Visual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.

Xamarin Designer   16.2.0.36 (remotes/origin/d16-2@25a031296)
Visual Studio extension to enable Xamarin Designer tools in Visual Studio.

Xamarin Templates   16.2.110 (a5e1b1f)
Templates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.

Xamarin.Android SDK   9.3.0.22 (HEAD/8e7764fdf)
Xamarin.Android Reference Assemblies and MSBuild support.
    Mono: mono/mono/2018-08@3cb36842fc4
    Java.Interop: xamarin/java.interop/d16-1@5ddc3e3
    LibZipSharp: grendello/LibZipSharp/d16-1@44de300
    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f
    ProGuard: xamarin/proguard/master@905836d
    SQLite: xamarin/sqlite/3.27.1@8212a2d
    Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-1@acabd26


Xamarin.iOS and Xamarin.Mac SDK   12.11.0.175 (ebb6e25)
Xamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.

**Steps to Reproduce**:

1. Create an async click handler.
2. Create a method with signature `async void SignIn()`
3. Add `await SignIn();` to method body.
4. Use code fix for "Make async void return Task"

**Expected Behavior**: Method signature is updated to "async Task SignIn()"

**Actual Behavior**: https://www.screencast.com/t/U3EOx3QjVw
</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35793</IssueID>
    <RepoID>1</RepoID>
    <Title>AssemblyInformationalVersionAttribute fails on SemVer2 strings</Title>
    <Description>**Version Used**:  `3.100.19.22309 (ce8ac3f7)`

**Steps to Reproduce**:

```C#
using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.2.3-p.4.5+metadata")]

namespace Version
{
    class Program
    {
        static void Main(string[] args)
        { }
    }
}
```

```sh-session
PS C:\src\manualversion&gt; csc Version.cs ; [System.Diagnostics.FileVersionInfo]::GetVersionInfo("C:\src\manualversion\version.exe") | fl                                                                                                                                   Microsoft (R) Visual C# Compiler version 3.100.19.22309 (ce8ac3f7)                                                                   Copyright (C) Microsoft Corporation. All rights reserved.


OriginalFilename  : ?
FileDescription   :
ProductName       :
Comments          :
CompanyName       :
FileName          : C:\src\manualversion\version.exe
FileVersion       : 0.0.0.0
ProductVersion    : 1.2.3-p.4.5+metadata
IsDebug           : False
IsPatched         : False
IsPreRelease      : False
IsPrivateBuild    : False
IsSpecialBuild    : False
Language          : Language Neutral
LegalCopyright    :
LegalTrademarks   :
PrivateBuild      :
SpecialBuild      :
FileVersionRaw    : 0.0.0.0
ProductVersionRaw : 0.0.0.0
```

**Expected Behavior**:

```
ProductVersionRaw : 1.2.3.0
```

This appears to be what you get if you have too many dots in the pre-release version section (after the dash). For instance, this works:

```c#
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.2.3-p-4.5+metadata")]
```

but this does not:

```C#
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.2.3-p-4.5.6+metadata")]
```

**Actual Behavior**:

```
ProductVersionRaw : 0.0.0.0
```

This manifests more importantly as a failure in

```powershell
(Get-Command ./version.exe).Version
```

Which is how it was reported to MSBuild after the first Arcade + semver2 MSBuild builds rolled out into internal VS channels.</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35792</IssueID>
    <RepoID>1</RepoID>
    <Title>Make all multiline statements collapsible</Title>
    <Description>I noticed that this statement is collapsible in the editor:
```C#
var multiline = string.Join("\r\n", new string[] {
                       "Class Test",
                        "     Dim x As Integer",
                        "     Dim Y As Integer",
                        "End Class"});
```

While this is not:
```C#
var multiline = string.Join("\r\n", 
                       "Class Test",
                        "     Dim x As Integer",
                        "     Dim Y As Integer",
                        "End Class");
```


I think any multiline statement (in VB and C#) should be collapsible, whether or not it contains `{}`.
</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35791</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData.json</Title>
    <Description>We are now inserting master-vs-deps to lab/d16.2stg

@jasonmalinowski @dotnet/roslyn-infrastructure </Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35790</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability warning reported assigning from uninitialized struct field</Title>
    <Description>The nullability warning is reasonable but redundant:
```C#
#pragma warning disable 649

class Program
{
    static void Main()
    {
        S x;
        S y = x;
        object z = y.F;
    }
}

struct S
{
    public object? F;
}
```
```
(8,15): error CS0165: Use of unassigned local variable 'x'
(9,20): warning CS8600: Converting null literal or possible null value to non-nullable type.
```</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35789</IssueID>
    <RepoID>1</RepoID>
    <Title>Code fix "use pattern match" messes with #region lines</Title>
    <Description>**Version Used**: 
Visual Studio 2017 15.9.12

**Steps to Reproduce**:

1. Write the code below
2. Apply the suggested code fix "use pattern match"

```
#region Sample

var str = obj as string;
if (str != null)
{
}

#endregion
```

**Expected Behavior**:

```
#region Sample

if (obj is string str)
{
}

#endregion
```

**Actual Behavior**:

```
#region Sample

#region Sample

if (obj is string str)
{
}

#endregion
```

If there is an `#endregion` line directly preceding the `#region` line (ignoring empty lines), this `#endregion` is inserted between the two `#region` lines.

All in all a pretty confusing experience. I'll better undo that code fix and write it myself. I don't trust the broken fix to not change something else in a place where I don't see it. (Like the cshtml formatting does all the time before you turn it off.)</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35788</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove `NullableContextOptions` from `Csc` task</Title>
    <Description>Follow-up on https://github.com/dotnet/roslyn/pull/35716

Razor SDK currently has a dependency on this property of the task, so we should be careful in removing it.</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35787</IssueID>
    <RepoID>1</RepoID>
    <Title>this addresses issue where we repeatedly trying to create different c…</Title>
    <Description>…ompilations in OOP causing a lot of allocations.

the issue was OOP solution crawler processing documents from different projects rather than per the same project. basically, void the benefit the solution crawler (processing same project one at a time so that all share the same compilation/symbols and etc)

the root cause was due to documents got removed and then readded to remote workspace solution. and that was happening because remote workspace could be moved backward.

fix is making sure that workspace can't ever move backward.

...

some background.

originally, RemoteWorkspace was added to OOP as pure cache. so that, when someone needs a solution matching one from VS, OOP doesn't need to recreate the solution from scratch.

so, it always has set RemoteWorkspace to last requested solution from VS (a snapshot of VSWorkspace.CurrentSolution)

what that means is if there are multiple requests from VS with snapshot1, snapshot2, snapshot1, snapshot3

remoteWorkspace.CurrentSolution could move from snapshot1 -&gt; snapshot2 -&gt; snapshot1 -&gt; snapshot3

it was all fine as pure cache since as a cache, there is no such concept of moving forward or backward. it is just a snapshot. and RemoteWorkspace is just something we need to have due to a solution having back pointer to a workspace and I can do incremental update more efficiently. but functionally, the workspace wasn't required.

this got more complicated when solution crawler is added to OOP to support "Find all reference" and "navigate to"

strictly, solution crawler doesn't care whether solution going backward. as long as we can diff 2 solutions correctly, going backward is just another change in solution and solution crawler handle those correctly.

problem is perf. now it causes unnecessary work. causing a lot of unnecessary allocation.

what makes it worse is that we mark document removed as high priority to process them faster. and we let solution crawler process high priority document in any order rather than per project. but since we allowed remote workspace solution to go back and forth, we end up marked a lot of document high priority since documents got removed and then re-added back. and we start to process them not in group causing even more allocations.

now, we only allow remote workspace to move forward. never backward.
...

this PR also includes 1 perf improvement. previously OOP used default IDocumentDifferenceService to detect document changes in solution crawler. but the default implementation was optimized for typing that is not suitable for OOP. and we end up always did more work than what we needed since the default implementation basically see whether a document is from an opened document and otherwise, it simply says everything changed. and in OOP, all document is closed.

new OOP specific service simply gets parse tree and diff to see what got changed. this is not good for typing case, but for OOP where it bulk updates solution, better than default implementation.</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>18/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35786</IssueID>
    <RepoID>1</RepoID>
    <Title>exception on "Find all references"</Title>
    <Description>@AArnott reported this issue.

```
05/17/2019 05:55:08 : Error : Microsoft.CodeAnalysis.Remote.CodeAnalysisService (37) : Exception: System.InvalidOperationException: Unexpected Null
   at Roslyn.Utilities.Contract.ThrowIfNull[T](T value, String message)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.VerifyForwardedTypes(Dictionary`2 equivalentTypesWithDifferingAssemblies, Compilation compilation, HashSet`1 verifiedKeys, Boolean isSearchSymbolCompilation)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.VerifyForwardedTypes(Dictionary`2 equivalentTypesWithDifferingAssemblies, ISymbol searchSymbol, ISymbol symbolToMatch, Solution solution, Compilation searchSymbolCompilation, Compilation symbolToMatchCompilation, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.OriginalSymbolsMatchCore(ISymbol searchSymbol, ISymbol symbolToMatch, Solution solution, Compilation searchSymbolCompilation, Compilation symbolToMatchCompilation, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.OriginalSymbolsMatch(ISymbol searchSymbol, ISymbol symbolToMatch, Solution solution, Compilation searchSymbolCompilation, Compilation symbolToMatchCompilation, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Shared.Extensions.ITypeSymbolExtensions.&lt;&gt;c__DisplayClass16_0.&lt;FindImplementationsForInterfaceMemberAsync&gt;b__1(ISymbol m)
   at System.Linq.ImmutableArrayExtensions.FirstOrDefault[T](ImmutableArray`1 immutableArray, Func`2 predicate)
   at Microsoft.CodeAnalysis.Shared.Extensions.ITypeSymbolExtensions.&lt;FindImplementationsForInterfaceMemberAsync&gt;d__16.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindImplementationsAsync&gt;d__50.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractMethodOrPropertyOrEventSymbolReferenceFinder`1.&lt;DetermineCascadedSymbolsAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
```

here is repro step from andrew

```
git clone https://github.com/aarnott/vs-streamjsonrpc.git
cd vs-streamjsonrpc\src 
git checkout RoslynBugRepro
streamjsonrpc.sln
```

Open the JsonMessageFormatter.cs file. I personally have all methods "collapsed" except WriteJToken, and I have the caret on the bufferTextWriter field reference on the first line of that method. Then I scroll down paste it a bit when the failure occurs.
</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35785</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35784</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>20/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35783</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35782</IssueID>
    <RepoID>1</RepoID>
    <Title>roslyn for benchmark.</Title>
    <Description>Who can tell me how to test the performance of roslyn?
This is the source issue [address](https://github.com/dotnet/BenchmarkDotNet/issues/1152).</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35781</IssueID>
    <RepoID>1</RepoID>
    <Title>Copy liveshare client into external access</Title>
    <Description>Feature branch.
Copy the client side handlers from liveshare to external access.

Note that everything in the external access project is just a straight copy of the liveshare client side implementation, with very minor changes where necessary to get them working inside roslyn.  The client side will be removed as soon as possible (once the content type issue with liveshare and razor is resolved).  These have been working for over a year already.

Also made a couple fixes to goto def and code actions on the server side to fix issues with older liveshare implementations.

TODO - Pull in fix for gotodef, find references once liveshare removes dependencies.</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35780</IssueID>
    <RepoID>1</RepoID>
    <Title>Elide an emit optimization that produces bad code near a stackalloc.</Title>
    <Description>Fixes #35764
Also fix the type of a bound node (argument to a ctor) so it agrees with the corresponding parameter.

@jcouv @jaredpar Should this be patched on some other branch?
</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35779</IssueID>
    <RepoID>1</RepoID>
    <Title>Go to base - adding to UI</Title>
    <Description>Fixes #20383
Adds https://github.com/dotnet/roslyn/pull/35704 to the UI</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35778</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35777</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35776</IssueID>
    <RepoID>1</RepoID>
    <Title>"Create and initialize field or property" from constructor parameter should remove naming styles from parameter before creating field/property name</Title>
    <Description>**Steps to Reproduce**:

1.  In Tools|Options create a naming rule for parameters to begin with `param_` and another naming rule for fields to begin with `field_`
2. In IDE, enter this code
```csharp
class C
    {
        public C(int param_v)
        {
        }
    }
```
3. Place cursor on `param_v` and Ctrl+.

**Expected Behavior**:
Should offer to "Create and initialize field `field_v`"

**Actual Behavior**:
Offers to "Create and initialize field `field_param_v`
![image](https://user-images.githubusercontent.com/25776963/57893225-f1914380-77f6-11e9-851f-41aae34993a2.png)
</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35775</IssueID>
    <RepoID>1</RepoID>
    <Title>Add parameters to constructor should respect naming style in new parameter name</Title>
    <Description>**Steps to Reproduce**:

1. In tools | Options, add a naming rule to require `_` as a prefix for parameters
2. Enter this code in IDE:
```csharp
 class C
    {
        private int v;
        public C()
        {
        }
    }
```
3. Select the `v` in `private int v;` and Ctrl+.

**Expected Behavior**:
When selecting `Add Parameter to C()` it should offer to add 'int _v' as the parameter

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/25776963/57892455-c9ecac00-77f3-11e9-8fe6-7ea1ec056167.png)

</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35774</IssueID>
    <RepoID>1</RepoID>
    <Title>RegisterOperationAction is not triggering for nested await/invocations</Title>
    <Description>**Version Used**: 
I'm assuming you need the dotnet CLI info since the analyzer is running from that C# version

dotnet --info:
```
.NET Core SDK (reflecting any global.json):
 Version:   3.0.100-preview5-011568
 Commit:    b487ff10aa

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.18362
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\GitHub\AspNetCore\.dotnet\x64\sdk\3.0.100-preview5-011568\

Host (useful for support):
  Version: 3.0.0-preview6-27706-03
  Commit:  66f7e1a107

.NET Core SDKs installed:
  3.0.100-preview5-011568 [C:\GitHub\AspNetCore\.dotnet\x64\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [C:\GitHub\AspNetCore\.dotnet\x64\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.2.1 [C:\GitHub\AspNetCore\.dotnet\x64\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [C:\GitHub\AspNetCore\.dotnet\x64\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.0.0-preview6-27706-03 [C:\GitHub\AspNetCore\.dotnet\x64\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.0.0-preview5-27626-15 [C:\GitHub\AspNetCore\.dotnet\x64\shared\Microsoft.WindowsDesktop.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download
```

**Steps to Reproduce**:

1. `git clone https://github.com/aspnet/AspNetCore.git` (and go into the directory)
2. `git checkout nimullen/operationactionbug`
2.5. If you want to use the same dotnet CLI as in this bug you can do `. activate` at the root of `AspNetCore`
3. `cd src/Mvc`
4. Run `./build.cmd`
5. `cd Mvc.Analyzers\src`
6. `dotnet pack`
7. Put the package in a local package source somewhere
8. Restore this app with that package source in scope: [AnalyzerTest.zip](https://github.com/dotnet/roslyn/files/3189193/AnalyzerTest.zip)
9. Run `dotnet build --no-incremental` on the project, wait for the debug dialog to pop up and attach.
10. Add a breakpoint inside of the:
```
context.RegisterOperationAction(context =&gt;
{
    Debugger.Launch();
}, OperationKind.Await, OperationKind.Invocation);
```
11. Hit F5


**Expected Behavior**:
`RegisterOperationAction` callback gets called for all of the awaits/invocations in `ExampleClass.g.cs`

**Actual Behavior**:
`RegisterOperationAction` callback never gets called</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35773</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullability of deeply-nested struct members</Title>
    <Description>Consider tracking nullability of `struct` members at arbitrary depth.

```C#
class Program
{
    static void Main()
    {
        (((((string x5, string y5) x4, string y4) x3,
            string y3) x2, string y2) x1, string y1) t = default;

        t.x1.x2.x3.x4.x5.ToString(); // warning on x5?
    }
}
```
See https://github.com/dotnet/roslyn/pull/35720#discussion_r284911184</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35772</IssueID>
    <RepoID>1</RepoID>
    <Title>When building a decision dag, recognize special CLR behavior of arrays.</Title>
    <Description>Fixes #35661</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35771</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate all overrides for Object when generating new class</Title>
    <Description>`ToString`, `Equals`, and `GetHashCode`

Either a quick action, or setting to have these generated with `add class` </Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35770</IssueID>
    <RepoID>1</RepoID>
    <Title>Suppport local functions, anonymous methods and lambdas in Analyzers RegisterSymbolStartAction(..., SymbolKind.Method)</Title>
    <Description>Was just playing around with Analyzers and found that when I do:

```C#
context.RegisterSymbolStartAction(context =&gt;
{
    var method = (IMethodSymbol)context.Symbol;

    Console.WriteLine(method.Name);

}, SymbolKind.Method);
```

It never gets called for local functions, anonymous methods or lambdas. Given that those three types eventually get represented with an `IMethodSymbol` it'd be great if they were hooked up similarly to method declarations within the `RegisterSymbolStartAction`.

I'm attempting to locate method-like bodies (method declarations, local functions, anonymous methods and lambdas), if they're not async, look for async invocations inside of them, if an await XYZ exist, log a specialized error on the parent method signature. I can do this today by going bottom up, looking for awaits and then seeing if they're contained in a non-async method; however, I'd rather not visit every expression/await statement in the project.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35769</IssueID>
    <RepoID>1</RepoID>
    <Title>Use of reabstraction of default interface methods on Mono causes System.TypeLoadException: VTable setup of type failed</Title>
    <Description>The underlying Mono issue is tracked by https://github.com/mono/mono/issues/14495

Affected compiler unit-tests are disabled on Mono.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35768</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 shown on unimplemented methods</Title>
    <Description>Starting with VS 2019 I am seeing IDE0060 for methods that contain only new NotImplementedException().  These place holder methods should not show this message.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35767</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0051 on private json constructors</Title>
    <Description>After moving to VS 2019 I started seeing IDE0051 showing up on all of my private JSON constructors.  This should not be shown or there should be an easy way to disable this.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35766</IssueID>
    <RepoID>1</RepoID>
    <Title>How to use MSBuildWorkspace on Ubuntu</Title>
    <Description>**Version Used:**
.NET CLI version 2.8.2

**Steps to Reproduce:**

1. I am trying to Analyze each document of a .csproj. For this purpose, i am using various API's provided by Roslyn Compiler.
2. I already had an application developed in .NET Framework which utilizes the MSBuildWorkspace class for loading the .csproj files and then their respective .cs files using the following code:
```
using (var workspace = MSBuildWorkspace.Create())
{
      Project currentProject = workspace.OpenProjectAsync(projectPath).Result;
       workspace.LoadMetadataForReferencedProjects = true;
       if (currentProject.HasDocuments)
       {
           foreach(Document document in currentProject.Documents)
           {
                  var name = document.Name;
            }
        }
}

```

3. The above code works well on a Windows machine for both .NET Framework based .csproj's and .NET Core based .csrpoj's input projects.

4. I had a new requirement for supporting the same application on Ubuntu 16.4 environment. As per my research on different forums related to Roslyn, writing the above .NET Framework based code using .NET Core can help in running the application on Ubuntu as well . But obviously, .NET Core does not support MSBuildWorkspace out of the box is what the research suggested.

5. How can i use **MSBuildWorkspace**  on Ubuntu OR What is the alternative for using **MSBuildWorkspace** ?</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35765</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullability of struct properties that are not auto-properties</Title>
    <Description>Fixes #29619</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35764</IssueID>
    <RepoID>1</RepoID>
    <Title>Invalid IL generated for stackalloc assigned to Span</Title>
    <Description>3.2.0-beta1-19253-08

**Steps to Reproduce**:

1. Compile System.Private.CoreLib

**Expected Behavior**:

Valid IL generated for `Environment.GetEnvironmentVariableCore` method

**Actual Behavior**:

Invalid IL generated for `Environment.GetEnvironmentVariableCore` method

The ECMA spec requires that IL stack is empty, apart from the size item, for localloc instruction.

Details in https://github.com/dotnet/coreclr/pull/24369#issuecomment-493130547</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35763</IssueID>
    <RepoID>1</RepoID>
    <Title>Aspnetcore allowing HashSet&lt;T&gt; -&gt; IList casting </Title>
    <Description>**Version**
Roslyn compiler 2.0

**Current behaviour**
Casting a `HashSet&lt;T&gt;` to `IList` fails at runtime, but is allowed by the compiler.

```c#
using System;
using System.Collections;
using System.Collections.Generic;
					
public class Program
{
	public class C {}

	public static void Main()
	{
		var hs = new HashSet&lt;C&gt;();
		var list = (IList)(hs);
	}
}
```

[See fiddle](https://dotnetfiddle.net/XSKbn7)

**Expected behaviour**
Shouldn't compile


</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35762</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract out the AnalyzerConfigDocument related changes from #35691</Title>
    <Description>This PR extracts out the AnalyzerConfigDocument related changes in the Workspaces/VS layer out of https://github.com/dotnet/roslyn/pull/35691. I have cherry-picked the first 4 and last 4 commits from that PR.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35761</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35760</IssueID>
    <RepoID>1</RepoID>
    <Title>MSBuild throws 'Cannot modify an evaluated object'</Title>
    <Description>For the original ticket, see See https://github.com/microsoft/msbuild/issues/4376

**Version Used**: 

16

**Steps to Reproduce**:

This happens when running dotnet-format combined with msbuild-sdk-extras.

For example, run it on https://github.com/wildgums/orc.controls

**Expected behavior**

The project should be loaded successfully (it can build, load, etc, but when running dotnet format, it fails.

**Actual behavior**

The project should be loaded successfully (it can build, load, etc, but when running dotnet format, it fails.

I've been investigating the source code, and found that it's correctly splitting multi-targeted builds, but then needs to re-check for the target version which it doesn't.

![image](https://user-images.githubusercontent.com/1246444/57850842-44f79780-77df-11e9-9c97-7dc351546a13.png)

So it's trying to remove a property that's been added while re-evaluating the project. Then the code should check for the value again (it might have been set by the re-evaluation).

I think the fix is to re-check for the property existence just before removing the property.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35759</IssueID>
    <RepoID>1</RepoID>
    <Title>include exception type in CommonObjectFormatter for scripting/interactive</Title>
    <Description>At the moment the exception formatter swallows the exception type (doesn't show it anywhere in the formatted exception output). 

This works reasonably well for most BCL exceptions, where the exception messages are mostly quite informative. However, for some of BCL types as well as tons of custom/3rd party code exceptions, where exception messages are often not of great quality, this is not ideal. The proposed change includes the exception type in the formatted exception output.

As a result, instead of

```
&gt; string s = null;
&gt; "foo".IndexOf(s)
Value cannot be null.
Parameter name: value
  + string.IndexOf(string, int, int, System.StringComparison)
  + string.IndexOf(string)
```

We now get:

```
&gt; string s = null;
&gt; "foo".IndexOf(s)
System.ArgumentNullException: Value cannot be null.
Parameter name: value
  + string.IndexOf(string, int, int, System.StringComparison)
  + string.IndexOf(string)
```

Here is an example with a custom exception. Instead of

```
&gt;  var processor = new ItemProcessor();
&gt; processor.Process(item);
Error occurred
  + ProcessingEngine.ItemProcessor.Process(object)
```

We now get:

```
&gt; var processor = new ItemProcessor();
&gt; processor.Process(item)
ProcessingEngine.StateValidationException: Error occurred
  + ProcessingEngine.ItemProcessor.Process(object)
```</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35757</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected nullability warning</Title>
    <Description>**Version Used**: 

```
.NET Core SDK (reflecting any global.json):
 Version:   3.0.100-preview6-011895
 Commit:    11245081d3

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.17134
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.0.100-preview6-011895\

Host (useful for support):
  Version: 3.0.0-preview6-27715-03
  Commit:  b0ecbd95b5
```

**Steps to Reproduce**:

Compile source code here - https://github.com/grpc/grpc-dotnet/blob/aa81c68bff297bfc9ec70367950b37e3791b4779/src/Grpc.NetCore.HttpClient/GrpcClientFactory.cs#L98-L112

**Expected Behavior**:

No null related warning.

**Actual Behavior**:

Returning `LazyInitializer.EnsureInitialized`'s result from this property generates a CS8600 warning.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35756</IssueID>
    <RepoID>1</RepoID>
    <Title> Support re-abstraction of interface members in derived interfaces</Title>
    <Description>
    </Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35755</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35754</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35753</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35752</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35751</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35750</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>18/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35749</IssueID>
    <RepoID>1</RepoID>
    <Title>Autocomplete eagerly completes before second `.` in Range declaration</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/34943</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35748</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for `#nullable (enable | disable | restore) [ warnings | annotations ])`</Title>
    <Description>- Add support for `#nullable (enable | disable | restore) [ warnings | annotations ])`
- Track a "nullable warning context"
- Add support for `/nullable:annotations`
- Add support for `/NoWarn:nullable`

https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-13.md

&gt; 1. There is a nullable warning context as a separate "bit". It can be set by default at project-level, and overridden with `#nullable` directives. It needs to be on to get nullable warnings at a given point in the source.
&gt; 2. Individual warnings continue to be able to be individually disabled at the project-level with `/NoWarn` and disabled or restored in source with `#pragma warning ...`.
&gt; 3. Additionally there is a "virtual warning identifier", `nullable` that can be used in `/NoWarn` at the project level, and that individually disables all warnings related to the nullable feature.

</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35747</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove support for "nullable" group in `#pragma warning ...`</Title>
    <Description>Tentative decision from https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-13.md but needs to be confirmed after discussion of `pragma warning enable ...`

Relates to https://github.com/dotnet/roslyn/issues/35748 (Add support for `#nullable (enable | disable | restore) [ warnings | annotations ])`)</Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35746</IssueID>
    <RepoID>1</RepoID>
    <Title>Use IVsSolution to look up IVsHierarchy by project GUID</Title>
    <Description>
    </Description>
    <CreatedDate>16/05/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35745</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1 into dev16.2-preview1-vs-deps</Title>
    <Description>A direct merge between these two for faster build production for dual checkin.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35744</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35743</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35742</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35741</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35740</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.1-vs-deps
git reset --hard upstream/release/dev16.1-vs-deps
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35739</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35738</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.2-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.2-preview1.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.2-preview1
git reset --hard upstream/release/dev16.2-preview1
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.2-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35737</IssueID>
    <RepoID>1</RepoID>
    <Title>🔬 Log exceptions for integration tests</Title>
    <Description>Gathering additional information to diagnose ongoing failures.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35736</IssueID>
    <RepoID>1</RepoID>
    <Title>Getting thousands of naming-style violations with latest VS build</Title>
    <Description>I'm seeing this error over basically the entirety of my codebase:

![image](https://user-images.githubusercontent.com/4564579/57811498-419cd700-771f-11e9-8605-3eb740661bae.png)

To get an idea, this is now upwards of tens of thousands of messages:

![image](https://user-images.githubusercontent.com/4564579/57811526-52e5e380-771f-11e9-99d0-823b4060d21f.png)

It effectively makes messages useless and very much clitters up the entire UI since nearly 100% of all our fields in all our projects are marked this way.  

This is def a regression and doesn't match our editorconfig rules (which state that private fields should begin with underscore). 

I'm running:

![image](https://user-images.githubusercontent.com/4564579/57811589-77da5680-771f-11e9-9f8d-348c8087e947.png)

I can provide more details if necessary.  But i really would like this fixed asap.  Thanks!</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35735</IssueID>
    <RepoID>1</RepoID>
    <Title>Code fix adding access modifier removes "extern"</Title>
    <Description>VSF_TYPE_MARKDOWNFor a static extern method (P/Invoke), I get the suggestion to add an access modifier. When I use it, the &amp;quot;private&amp;quot; is added but the &amp;quot;extern&amp;quot; is removed. This breaks the code.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/564842/code-fix-adding-access-modifier-removes-extern.html
VSTS ticketId: 891487_
_These are the original issue comments:_

Visual Studio Feedback System on 5/13/2019, 01:08 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35734</IssueID>
    <RepoID>1</RepoID>
    <Title>Separate script arguments from the script file for InteractiveCompiler tasks</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/17034

/CC  @tmat </Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>20/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35733</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure we give .editorconfig keys in the same order as in the file</Title>
    <Description>Right now our naming styles .editorconfig format implicitly relies on the order of keys being preserved from the .editorconfig file on disk into the `IDictionary&lt;string, object&gt;` that's handed to the parser. This is problematic in many ways, but until we either redesign the format to avoid the need of ordering, or make the ordering explicit, we should ensure we actually maintain that ordering.

Fixes #35488</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35732</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure NullableWalker.VisitConversion(BoundConversion) is only used for explicit conversions</Title>
    <Description>Enable asserts in `NullableWalker.VisitConversion(BoundConversion)`:
```C#
        public override BoundNode VisitConversion(BoundConversion node)
        {
            // https://github.com/dotnet/roslyn/issues/35732: Assert VisitConversion
            // is only used for explicit conversions.
            //Debug.Assert(node.ExplicitCastInCode);
            //Debug.Assert(node.ConversionGroupOpt != null);
            //Debug.Assert(node.ConversionGroupOpt.ExplicitType.HasType);

            ...
            return null;
        }

```
</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35731</IssueID>
    <RepoID>1</RepoID>
    <Title>Experimenting with multi-stage pipeline</Title>
    <Description>
    </Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35730</IssueID>
    <RepoID>1</RepoID>
    <Title>NoWarn is not respected in nullability analysis</Title>
    <Description>Consider this program:

```csharp
using System;

#nullable enable

namespace NullnessExample
{
    class Program
    {
        public void M(string? theString)
        {
            // In the project file, this warning code is suppressed, but the nowarn is ignored.
            Console.WriteLine($"Length is {theString.Length}");
        }
        static void Main(string[] args)
        {
            // Explicitly trigger a warning here, note that is gets suppressed
            while (false) { Console.Write(""); }

            Console.WriteLine("Hello World!");
        }
    }
}
```

And a corresponding project file:

```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
  &lt;/PropertyGroup&gt;

  &lt;PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'"&gt;
    &lt;NoWarn&gt;1701;1702; 8602; 0162&lt;/NoWarn&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;
```

**Expected**

No nullability warning.

**Actual**

The `CS8602` warning is still emitted.

The `CS0162` warning, by comparison, is correctly suppressed.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35729</IssueID>
    <RepoID>1</RepoID>
    <Title>Include dump file size in log output</Title>
    <Description>
    </Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35727</IssueID>
    <RepoID>1</RepoID>
    <Title>🚧 📝 Document external access patterns</Title>
    <Description>
    </Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35726</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Write secondary process dumps to a separate directory"</Title>
    <Description>🚧 Builds on #35603 (will rebase this to a single commit after that merges)

:x: Blocked on verifying ability of Azure Pipelines to correctly include the **xunit.console.x86.dmp** file in the build results following an integration test hang.

This reverts commit 80cdb06828c6773def553c9c3b3c3dcae9e5652d.
</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35725</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unused property NullableContextOptions</Title>
    <Description>🚧 Builds on #35603 (will rebase this PR to a single commit after that merges)

This reverts commit df6a3457218321bcc73ec1d34e30c82dc7707e45.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35724</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35723</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35722</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35721</IssueID>
    <RepoID>1</RepoID>
    <Title>Invalid color of an interpolated string parameter of the http URL.</Title>
    <Description>
The whole interpolated string including the parameter looks like a link and CTRL + click even follows it. I would expect `{param}` is not displayed as a link and has a different color.

![param](https://user-images.githubusercontent.com/34036102/57769514-663c8300-770e-11e9-803b-a0f555cec120.png)
Version: Visual Studio Community 16.0.4

</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35720</IssueID>
    <RepoID>1</RepoID>
    <Title>Copy nullable state of members unconditionally up to a certain depth</Title>
    <Description>Copy nullable state of members unconditionally up to a certain depth.

From a suggestion from @gafter.

The change allows copying tracked state for members of reference types without hitting cycles.
Fixes #31395</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35719</IssueID>
    <RepoID>1</RepoID>
    <Title>Unhandled Exception: System.NullReferenceException</Title>
    <Description>**Version Used**: 
Microsoft (R) Visual C# Compiler version 2.10.0.0 (b9fb1610)
or
Microsoft (R) Visual C# Compiler version 3.100.19.22309 (ce8ac3f7)
**Steps to Reproduce**:
run `csc //langversion:?`.

**Expected Behavior**:
`error CS2006: Command-line syntax error:` 
**Actual Behavior**:
```
Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CommandLineParser.&lt;ExpandFileNamePattern&gt;d__46.MoveNext()
   at Microsoft.CodeAnalysis.CommandLineParser.&lt;ParseFileArgument&gt;d__41.MoveNext()
   at System.Collections.Generic.List`1.InsertRange(Int32 index, IEnumerable`1 collection)
   at Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Parse(IEnumerable`1 args, String baseDirectory, String sdkDirectory, String additionalReferenceDirectories)
   at Microsoft.CodeAnalysis.CommonCompiler..ctor(CommandLineParser parser, String responseFile, String[] args, BuildPaths buildPaths, String additionalReferenceDirectories, IAnalyzerAssemblyLoader assemblyLoader)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompiler..ctor(CSharpCommandLineParser parser, String responseFile, String[] args, BuildPaths buildPaths, String additionalReferenceDirectories, IAnalyzerAssemblyLoader assemblyLoader)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.Run(String[] args, BuildPaths buildPaths, TextWriter textWriter, IAnalyzerAssemblyLoader analyzerLoader)
   at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.RunLocalCompilation(String[] arguments, BuildPaths buildPaths, TextWriter textWriter)
   at Microsoft.CodeAnalysis.CommandLine.BuildClient.RunCompilation(IEnumerable`1 originalArguments, BuildPaths buildPaths, TextWriter textWriter)
   at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.Run(IEnumerable`1 arguments, RequestLanguage language, CompileFunc compileFunc, IAnalyzerAssemblyLoader analyzerAssemblyLoader)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main(String[] args)
```</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35718</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix our readme badges</Title>
    <Description>- Fix the image URLs to point to the current configuration names
- Reorder the Spanish/Linux with Mono columns, because the labels were wrong.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>29/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35717</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust logo tests to recognize official build versions</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/35696

The official build uses a version that has multiple `-xyz` parts. So the compiler version output can look like this: `3.1.0-10-19264-03 (&lt;SHA&gt;)`. We have a couple of tests that parse this and replace the first part with `A.B.C-d` and the second part with `(HASH)`. But the regex only recognized a single optional `-xyz` part.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35716</IssueID>
    <RepoID>1</RepoID>
    <Title>Feed the NullableContextOptions msbuild property into Nullable</Title>
    <Description>Relates to https://github.com/aspnet/AspNetCore/issues/10218

The change from `NullableContextOptions` to `Nullable` broke Razor who has a direct dependency on `Csc` task.

VSTS issue: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/891963</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35715</IssueID>
    <RepoID>1</RepoID>
    <Title>share solution info creation code.</Title>
    <Description>we had basically same code to create solution info from checksum in production and test. this shares same code now. </Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35714</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35713</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35712</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.1-vs-deps
git reset --hard upstream/release/dev16.1-vs-deps
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35711</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.2-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.2-preview1.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.2-preview1
git reset --hard upstream/release/dev16.2-preview1
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.2-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35710</IssueID>
    <RepoID>1</RepoID>
    <Title>Warn on implicit copies for event assignment within readonly members</Title>
    <Description>Resolves #35610</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35709</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix bug where pattern-matching treats a type parameter as if it is a reference (which it might not be) (16.2p1)</Title>
    <Description>Dual-checkin of https://github.com/dotnet/roslyn/pull/35664

FYI @gafter @RikkiGibson </Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35708</IssueID>
    <RepoID>1</RepoID>
    <Title>Document Outline is empty</Title>
    <Description>When opening the Document Outline it shows _"There are no items to show for the selected document"_. This was in Roslyn codebase on `AbstractMoveToNamespaceCodeAction.cs`.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/565055/document-outline-is-empty.html
VSTS ticketId: 891693_

_These are the original issue comments:_

Andrew Hall 🤘 [MSFT] on 5/10/2019, 05:59 PM: &lt;p&gt;I'm not sure what the document outline is supposed to show. You can find the source used at &lt;a target='_blank' href="https://github.com/dotnet/roslyn/blob/master//src/Features/Core/Portable/MoveToNamespace/AbstractMoveToNamespaceCodeAction.cs"&gt;https://github.com/dotnet/roslyn/blob/master//src/Features/Core/Portable/MoveToNamespace/AbstractMoveToNamespaceCodeAction.cs&lt;/a&gt;&lt;/p&gt;

Visual Studio Feedback System on 5/13/2019, 00:49 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35707</IssueID>
    <RepoID>1</RepoID>
    <Title>WithAttributeList() adds attributes before documentation comment trivia</Title>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis.FxCopAnalyzers 2.9.1. 2.9.2 may have the same issue.

**Steps to Reproduce**:

1. Find a  FieldDeclarationSyntax, PropertyDeclatationSyntax, or TypeDeclarationSyntax node that has no attribute but has documentation comment.
2. Call WithAttributeList() to add attributes

**Expected Behavior**:
New attributes appears after the documentation comment.

**Actual Behavior**:
New attributes are added before the documentation comment trivia and results in compile error. WithAttributeList() works fine when the node already has attributes after documentation comment in which case new attributes are added right by the existing attributes.

Developers have to take steps to position new attributes:

https://codereview.stackexchange.com/questions/145231/adding-an-attribute-to-a-class-after-the-documentation-comment-trivia</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35706</IssueID>
    <RepoID>1</RepoID>
    <Title>Ambiguous references to Microsoft.VisualBasic.* compiling .NET Core 3.0 app with `-vbruntime:+`</Title>
    <Description>1. Create a VB Console App (.NET Core) using .NET Core 3.0 preview 6 SDK
1. Add `&lt;VBRuntime&gt;default&lt;/VBRuntime&gt;` to ConsoleApp1.vbproj
1. Change Program.vb to:
```VB
Module Program
    Sub Main()
        Console.WriteLine(My.Application)
    End Sub
End Module
```

Result:
```
vbc : error BC30560: 'User' is ambiguous in the namespace
    'Microsoft.VisualBasic.ApplicationServices'.
vbc : error BC30560: 'Computer' is ambiguous in the namespace
    'Microsoft.VisualBasic.Devices'.
...
```

The program compiles successfully with `&lt;VBRuntime&gt;none&lt;/VBRuntime&gt;`.</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35705</IssueID>
    <RepoID>1</RepoID>
    <Title>KeywordCompletionProvider does not consider CultureInfo.CurrentUICulture</Title>
    <Description>Under Czech Windows 10 I do `CultureInfo.CurrentUICulture = new CultureInfo( "en-US" )`. When  I then call `CompletionService.GetDescriptionAsync` I got different language results (Czech or English) depending on the type of the language element.

- For method `Console.Beep` it returns expected English result _"+1 overload"_ (provider is `Microsoft.CodeAnalysis.CSharp.Completion.Providers.SymbolCompletionProvider`)

- But for C# keyword `while` it returns Czech result _"klíčové slovo"_ instead of expected English _"keyword"_ (provider is `Microsoft.CodeAnalysis.CSharp.Completion.Providers.KeywordCompletionProvider`)

Version: Microsoft.CodeAnalysis.Analyzers version 2.9.2

</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35704</IssueID>
    <RepoID>1</RepoID>
    <Title>Go to base</Title>
    <Description>Implementation of #20383

There is a need for more PRs to add the feature to the context menu: one for Roslyn and another for VS. Will send them separately after merging this.</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35703</IssueID>
    <RepoID>1</RepoID>
    <Title>Unskip working test</Title>
    <Description>Fixes #25997

@dotnet/roslyn-compiler Please review this eensy test fix.</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35702</IssueID>
    <RepoID>1</RepoID>
    <Title>C# foreach smart indent doesn't work correctly for the 'else' part without a '{ }' block</Title>
    <Description>VSF_TYPE_MARKDOWNTyping a 'foreach' having an 'if' structure without {} around it doesn't indent the 'else' part correctly. For example, if I type the following lines, the indentation comes out as follows (dots added to simulate the indenation size of 4 spaces):

```
foreach(string arg in args)
....if (arg[0] == '-')
........options.Add(arg)
else   &lt;==== Wrong indentation.
........commands.Add(arg)
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/565314/c-foreach-smart-indent-doesnt-work-correctly-for-t.html
VSTS ticketId: 891808_
_These are the original issue comments:_

Visual Studio Feedback System on 5/13/2019, 01:53 AM (34 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35701</IssueID>
    <RepoID>1</RepoID>
    <Title>AccessViolationException in IVsPreviewChangesService.PreviewChanges</Title>
    <Description>**Version Used**: Integration test run for #35603 

```
Event Time (UTC): 5/14/2019 5:47:31 PM
Event ID: 1026
Data: Application: devenv.exe
Framework Version: v4.0.30319
Description: The process was terminated due to an unhandled exception.
Exception Info: System.AccessViolationException
   at Microsoft.VisualStudio.Shell.Interop.IVsPreviewChangesService.PreviewChanges(Microsoft.VisualStudio.Shell.Interop.IVsPreviewChangesEngine)
   at Microsoft.VisualStudio.LanguageServices.Implementation.Preview.PreviewDialogService.PreviewChanges(System.String, System.String, System.String, System.String, Microsoft.CodeAnalysis.Glyph, Microsoft.CodeAnalysis.Solution, Microsoft.CodeAnalysis.Solution, Boolean)
   at Microsoft.CodeAnalysis.Editor.Implementation.EncapsulateField.AbstractEncapsulateFieldCommandHandler.Execute(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.EncapsulateFieldCommandArgs, Microsoft.VisualStudio.Utilities.IUIThreadOperationScope)
   at Microsoft.CodeAnalysis.Editor.Implementation.EncapsulateField.AbstractEncapsulateFieldCommandHandler.ExecuteCommand(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.EncapsulateFieldCommandArgs, Microsoft.VisualStudio.Commanding.CommandExecutionContext)
   at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.VisualStudio.Commanding.ICommandHandler, System.__Canon, System.Action, Microsoft.VisualStudio.Commanding.CommandExecutionContext)
   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService+&lt;&gt;c__DisplayClass13_1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;Execute&gt;b__1()
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(System.Object, System.Action, System.Predicate`1&lt;System.Exception&gt;)
   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService+&lt;&gt;c__DisplayClass13_1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;Execute&gt;b__0()
   at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.VisualStudio.Commanding.ICommandHandler, System.__Canon, System.Action, Microsoft.VisualStudio.Commanding.CommandExecutionContext)
   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService+&lt;&gt;c__DisplayClass13_1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;Execute&gt;b__1()
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(System.Object, System.Action, System.Predicate`1&lt;System.Exception&gt;)
   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService+&lt;&gt;c__DisplayClass13_1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;Execute&gt;b__0()
   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.ExecuteCommandHandlerChain(Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerServiceState, System.Action, System.Action)
   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.Execute[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Func`3&lt;Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,System.__Canon&gt;, System.Action)
   at Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.ExecuteEncapsulateFieldCommand(System.Action)
   at Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.ExecuteVisualStudio2000(UInt32, IntPtr, System.Action)
   at Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceFilter.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget+&lt;&gt;c__DisplayClass36_0.&lt;ExecuteVisualStudio2000&gt;g__executeNextCommandTarget|0()
   at Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Generic.IList`1&lt;Microsoft.CodeAnalysis.Editor.ICommandHandler`1&lt;System.__Canon&gt;&gt;, System.__Canon, System.Action)
   at Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.Microsoft.CodeAnalysis.Editor.ICommandHandlerService.Execute[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.VisualStudio.Utilities.IContentType, System.__Canon, System.Action)
   at Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteEncapsulateField(Microsoft.VisualStudio.Text.ITextBuffer, Microsoft.VisualStudio.Utilities.IContentType, System.Action)
   at Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr, Microsoft.VisualStudio.Text.ITextBuffer, Microsoft.VisualStudio.Utilities.IContentType)
   at Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandFilterWrapper.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.Intellisense.MultiCaretPreemptingFilterProvider+MultiCaretPreemptingFilter.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindow.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Platform.WindowManagement.DocumentObjectSite.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Exec(System.Guid ByRef, UInt32, UInt32, IntPtr, IntPtr)
```
</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35700</IssueID>
    <RepoID>1</RepoID>
    <Title>Filter optprof to specific tests</Title>
    <Description>
    </Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35699</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35698</IssueID>
    <RepoID>1</RepoID>
    <Title>Show nullable annotations in the Change Signature dialog </Title>
    <Description>The underlying refactoring worked just fine, so this is a trivial update to UI.</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35697</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip failing compiler nologo tests</Title>
    <Description>See https://github.com/dotnet/roslyn/issues/35696.</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35696</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler nologo test failures</Title>
    <Description>These tests are failing master-vs-deps signed builds. Example build: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2672552&amp;view=ms.vss-test-web.test-result-details

```
Assert.Equal() Failure\r\n ↓ (pos 48)
Expected: ···iler version A.B.C-d (HASH)\\r\\nCopyright (C) Microsoft Corporat···
Actual: ···iler version A.B.C-d-19264-03 (HASH)\\r\\nCopyright (C) Microsoft···\r\n ↑ (pos 48)

at Microsoft.CodeAnalysis.CSharp.CommandLine.UnitTests.CommandLineTests.NoLogo_2() in /_/src/Compilers/CSharp/Test/CommandLine/CommandLineTests.cs:line 6247
```</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35695</IssueID>
    <RepoID>1</RepoID>
    <Title>Should we analyze tuples element-wise?</Title>
    <Description>I will collect a few examples to show how we treat tuples element-wise in type inference and with regards to variance, but we don't do so for nullability analysis.

```C#
#nullable enable
class Program
{
    static void F((object?, int?) t)
    {
        _ = ((object, int?))t; // not great warning CS8619: Nullability of reference types in value of type '(object?, int?)' doesn't match target type '(object, int?)'.
        _ = (object)t.Item1;

        _ = ((string?, int))t; // not great warning CS8619: Nullability of reference types in value of type '(object?, int?)' doesn't match target type '(string?, int)'.
        _ = (int)t.Item2;
    }
}
```</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35694</IssueID>
    <RepoID>1</RepoID>
    <Title>Code navigation is broken in Peek window</Title>
    <Description>**Version Used**: VS 2019

**Steps to Reproduce**:

1. Open a solution.
2. Use Alt-F12 to peek the definition of a symbol found in another file.
3. Try to use code navigation on symbols in peek window. For example: Shift-F12 (find all references) or F12 (go to definition).

**Expected Behavior**: References are found.

**Actual Behavior**: No references found if the file has not been opened before.
![image](https://user-images.githubusercontent.com/3832820/57692124-4772b980-7646-11e9-97fb-9029acd6aa25.png)

**Important note**: if you have the file opened in a normal tab, it works as expected. Proof:
![image](https://user-images.githubusercontent.com/3832820/57692269-a89a8d00-7646-11e9-8ded-47c1c02f1ef8.png)

Then:
![image](https://user-images.githubusercontent.com/3832820/57692420-04fdac80-7647-11e9-9e97-bf26a6295229.png)


</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35728</IssueID>
    <RepoID>1</RepoID>
    <Title>Codelens problems when mixing .NET standard with .NET FX</Title>
    <Description>**Visual Studio Version**:
Visual Studio Professional 2019 version 16.0.4


**Summary:**
When a .NET FX 4.7.2 project implements an interface defined in a .NET standard assembly, codelens doesn't show usage for implemented members.

An example solution which reproduces the problem is attached to this issue.

**Steps to Reproduce**:

1. 
Create 3 projects (see attached zip-file)
a. NET 4.7.2 library 'LibraryFX'
b. NET Standard 2.0 library 'LibraryStd'
c. NET 4.7.2 console application 'TestApp'

2. 
Define two identical interfaces in LibraryStd and LibraryFX (IClassStd and IClass FX):

in LibraryFx

    public interface IClassFX
    {
        void Method1();
    }

in LibraryStd

    public interface IClassStd
    {
        void Method1();
    }

3. 
In TestApp, reference the libraries and create a file Impl.cs implementing both interfaces.

    public class ClassStd : IClassStd
    {
        public void Method1() { }
    }
    public class ClassFX : IClassFX
    {
        public void Method1() { }
    }

4.
In Main, create instances of the classes and access the method through their interfaces:

        IClassFX fx = new ClassFX();
        fx.Method1();
        IClassStd std = new ClassStd();
        std.Method1();

5.
Open Impl.cs and inspect the codelens information.

**Expected Behavior**:
Codelens should show "2 references" for the methods in both ClassStd and ClassFX.

**Actual Behavior**:
Codelens shows 0 references for Method1 in ClassStd, and 2 references for Method1 in ClassFX.

If you use explicit interface implementation, codelens correctly shows 2 references:

    public class ClassStd : IClassStd
    {
        void IClassStd.Method1() { }
    }

**User Impact**:
Tracking down usage in larger solutions is hard, relying on using search instead of codelens.
[CodelensProblem.zip](https://github.com/dotnet/project-system/files/3176934/CodelensProblem.zip)
</Description>
    <CreatedDate>14/05/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35693</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35692</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose a CodeAction API for groups of nested code actions</Title>
    <Description>Closes #20049</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35691</IssueID>
    <RepoID>1</RepoID>
    <Title>Code actions to configure severity and IDE code style options with .editorconfig</Title>
    <Description>This PR revives the work done in https://github.com/dotnet/roslyn/pull/29332 to add a code action to configure severity of diagnostics and code action to configure code style option values. Unlike that PR, which relied on .editorconfig being marked as an additional file, this PR uses the newly added `AnalyzerConfigDocument` for .editorconfig files. Screenshots and a small working snippet is attached below:

**Top level menu:** Now we nest all configure and suppress code actions into a sub-menu to avoid clutter in lightbulb
![image](https://user-images.githubusercontent.com/10605811/58927565-fa917880-8703-11e9-9304-9e51510f4363.png)

**Create new .editorconfig with configured code style option value:**
![image](https://user-images.githubusercontent.com/10605811/58927869-282af180-8705-11e9-9d8d-e5ce1ad97902.png)

**Update existing .editorconfig with new code style option value:**
![image](https://user-images.githubusercontent.com/10605811/58927785-d3877680-8704-11e9-9f97-b5f3c78943ca.png)

**Create new .editorconfig with configured severity (also works for 3rd party analyzers):**
![image](https://user-images.githubusercontent.com/10605811/57649651-a8828a80-757d-11e9-8e35-6b338489807c.png)

**Update existing .editorconfig with new severity (also works for 3rd party analyzers):**
![image](https://user-images.githubusercontent.com/10605811/57649690-bb955a80-757d-11e9-8ff7-a73d5c0e9f25.png)

**Supports different syntax for IDE diagnostics with code style option(s):**
![image](https://user-images.githubusercontent.com/10605811/57650312-64908500-757f-11e9-8b1b-7b4d98d63853.png)

**Code action snippet:**
![Configure_Severity_Screenshot](https://user-images.githubusercontent.com/10605811/57649539-5fcad180-757d-11e9-8076-8d9ba615153b.gif)

**NOTE:** I also had to thread through AnalyzerConfigDocuments at bunch of places in the workspace layer to get the creating/updating of this new document kind via a code action to work as expected. I have added relevant tests.

**Future enhancements:**
Current code fix only adds/updates a single closest .editorconfig relative to the file with the diagnostic. In future, we might want to enable customization of this via options.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35690</IssueID>
    <RepoID>1</RepoID>
    <Title>Different .editorconfig severity strings are used to specify IDE code style options and dotnet_diagnostic.severity</Title>
    <Description>**Version Used**: 
Latest master source

I found out we use different editorconfig strings for severities specified through our code style options and the ones that the compiler looks for:

| DiagnosticSeverity | IDE Code style term | Compiler dotnet_diagnostic.severity term |
| ------- | ------- | ------- |
| Error | "error" | "error" |
| Warning | "warning" | "warn" |
| Info | "suggestion" | "info" |
| Hidden | "silent" or "refactoring" | "hidden" |
| Suppress | "none" | "suppress" |

So, user needs to use different terms for specifying severies, which seems very confusing:
```
[*.cs]

# CA1822: Mark members as static
dotnet_diagnostic.CA1822.severity = warn

# IDE0059: Unnecessary assignment of a value
csharp_style_unused_value_assignment_preference = discard_variable:warning
```

Compiler generates the following diagnostic if term `warning` is used for `dotnet_diagnostic.CA1822.severity`
```
CSC : warning InvalidSeverityInAnalyzerConfig: The diagnostic 'ca1822' was given an invalid severity 'warning' in the analyzer config file
```

**IDE code style:**
Documentation: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2019#language-code-styles
Implementation: http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/NamingStyles/EditorConfig/EditorConfigSeverityStrings.cs,5

**Compiler:**
https://github.com/dotnet/roslyn/blob/2f57d11ecc36d11c06fc862dcb0de37c96d305d2/src/Compilers/Core/Portable/CommandLine/AnalyzerConfigSet.cs#L158

I believe the compiler terms should be switched to follow the [already shipped terminology](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2019#language-code-styles) or at least the compiler should allow the terms from both columns in the table above

</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35689</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35688</IssueID>
    <RepoID>1</RepoID>
    <Title>VS2019 intellisense completes with bad quality results</Title>
    <Description>**Version Used**: Visual Studio 2019

Maybe my mind is playing tricks on me, but since I updated to VS 2019 I feel like I'm fighting a lot against Intellisense.

Specifically: I would very quickly type the beginning of what I'm intending to write, hit complete (tab, space, enter -- depends on the situation)... and not get the expected (best) result.
So I have to backspace, start again (slowly), get the "right" completion and move on.

This was not the case in VS2017, I could write code quickly, completing everything along the way.

Because writing code is the "core loop" of coder, having to stop and backspace because of bad Intellisense is *very irksome and a major frustration after my upgrade*.

I may be completely off, but I have a suspicion / theory about what has changed:

My guess is that new Intellisense is completely async and I am getting its best suggestion at the time I hit "complete". So when typing `int&lt;tab&gt;` I think I might get the completion for `in` if Intellisense has not finished filtering and sorting the `int` prefix.

I love the improved "snapiness" of VS 2019, but if I'm correct about Intellisense it should wait for the full suggestions to complete before completing text in editor.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35687</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable VB runtime tests on CoreClr</Title>
    <Description>
    </Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35686</IssueID>
    <RepoID>1</RepoID>
    <Title>Optimization proposal: In "o is (int x, int y)", consider attempting to unbox as ValueTuple&lt;int, int&gt;</Title>
    <Description>**Version Used**: 

Master (11 May 2019)

**Steps to Reproduce**:

```csharp
public void M(object o)
{
    if (o is (int x, int y))
    {
    }
}
```

[SharpLab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWAChsBmQgJnwGF8BvS/Dw27AFnwFkAFAHtgAKzgBjGPmEBKdpzYVOq/AEsAZvhEaoO9QDsZADyQbj+AJ5yFKtR2UOOAX0WvKLoA===).

**Expected Behavior**:

Generated code attempts to unbox `o` as a `ValueTuple&lt;int, int&gt;`, and does not box `x` and `y`.

**Actual Behavior**:

Generated code uses `ITuple`, and boxes both `x` and `y`.

**Discussion**:

I understand why the compiler has to emit code which uses `ITuple`. 

As a developer, if I want to try and unbox a `ValueTuple`, I instinctually reach for the syntax shown above. Given that it works, I probably won't be aware that both `x` and `y` get boxed, and that I should instead have written something like `if (o is ValueTuple&lt;int, int&gt;(var x, var y))`. 

The proposal is to optimize the specific case where the input is an `object`, and the pattern looks like something which could be used to create a `ValueTuple` (i.e. no sub-patterns, all types are known, etc). In this case, the compiler would try and unbox `o` to a `ValueTuple` of the relevant kind, before trying the `ITuple` route.

This would add some additional code size (although using `ITuple` is fairly wordy already), and some additional cost for the cases where `o` is not a `ValueTuple` (I'm not sure how often this would occur in practice). It would probably take a bit of effort to share common code between the `ValueTuple` path and the `ITuple` path for cases like `o is (int x, 3)`, if that's a worthwhile thing to do.

This *should* have no visible impact to the user (other than reduced allocations).

I [asked this on gitter](https://gitter.im/dotnet/roslyn?at=5cd88c9756271260f94efda5), and opinion was mixed on whether this was worthwhile. The suggestion was that I open the issue here and tag you, @gafter.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35685</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement support for CodeRefactoringProvider in NuGet packages</Title>
    <Description>Fixes #32705</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35684</IssueID>
    <RepoID>1</RepoID>
    <Title>Should `static bool IsDefault&lt;T&gt;(T xx = default) =&gt; xx == default;` compile?</Title>
    <Description>**Version Used**: 
sharplab.io(master/2.9.0)

**Steps to Reproduce**:
https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWAChsBmQgJnwGF8BvS/DwogNn2AHt+AG3wBJKABE4AMwgBXITCIAeACoA+ABSr8AD134AvPhQz5igJRH1eg4eMA7BUPIVOXXgOFjJZhTDo1LR19IxM/S2tbfABLKHwnIRd2TmJPQRFxKVl/aiDtaONTHMjDG1D7cJKYV3cAejq0vgyfbPMYABZ8kLsq9qsywqKImG0LVwBfIA=

**Expected Behavior**:
https://github.com/dotnet/csharplang/blob/98043cdc889303d956d540d7ab3bc4f5044a9d3b/proposals/csharp-7.1/target-typed-default.md
`xx == default` should be the same as `xx == default(T)`, and can't compile.

**Actual Behavior**:
`xx == default` is compile as `xx == null` without warns, and so `default(T) == default` is always false for struct.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35683</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35681</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35680</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35679</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35678</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix the master build</Title>
    <Description>
    </Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35677</IssueID>
    <RepoID>1</RepoID>
    <Title>Limit use of IBuiltInAnalyzer.OpenFileOnly</Title>
    <Description>* Explicitly default `OpenFileOnly` to false
* Remove unnecessary implementations of `OpenFileOnly` that just return false
* Separate the in-process analyzer restriction to a new marker interface `IInProcessAnalyzer`

This pull request does not contain functional/behavior changes. It is intended to separate concerns so we can strategically work toward the elimination of these interfaces.</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>20/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35676</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35675</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35674</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35673</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35672</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.2-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.2-preview1.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.2-preview1
git reset --hard upstream/release/dev16.2-preview1
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.2-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35671</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>12/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35670</IssueID>
    <RepoID>1</RepoID>
    <Title>PublicAPI checker crashing.</Title>
    <Description>I'm running into this in the https://github.com/dotnet/roslyn/pull/32999 PR.

When i make a public API change and attempt to add the item to the the unshipped.txt file i run into: 

```
System.AggregateException : One or more errors occurred. ---&gt; Object reference not set to an instance of an object.
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass17_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&gt; (Inner Exception #0) System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.&lt;&gt;c__DisplayClass8_0.&lt;TryGetSingleChangedText&gt;b__1(DocumentId id)
   at System.Linq.ImmutableArrayExtensions.Any[T](ImmutableArray`1 immutableArray,Func`2 predicate)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.TryGetSingleChangedText(Solution oldSolution,ImmutableArray`1 operationsList)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&lt;---
```

</Description>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>12/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35669</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't read the same property twice in pattern matching </Title>
    <Description>when accessed through the same underlying object, but references of different types.

Fix to https://github.com/dotnet/roslyn/issues/34933

Namely:

```csharp
using System;

public class Person {
    public string Name { get; set; }
}

public class Student : Person { }


public class C {
    public void M(Person p) {
        switch (p) {
            case { Name: "Bill" }:
                Console.WriteLine("Hey Bill!");
                break;
            case Student { Name: var name }:
                Console.WriteLine($"Hello student {name}!");
                break;
            case { Name: var name }:
                Console.WriteLine($"Hello non-student {name}!");
                break;
        }
    }
}
```

will now only evaluate Person.Name once.

There are a number of limitations to this - the tests describe the details in comments.</Description>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35668</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability analysis not flowing through switches</Title>
    <Description>**Version Used**: master

**Steps to Reproduce**:

Compile the following:

```csharp
using System;

#nullable enable

public class Person {
    public string? Name { get;}
}
public class C {
    public void M(Person p) {
        switch (p) {
            case { Name: var name } when name is null:
                Console.WriteLine("Hey anonymous");
            break;
            case { Name: var name }:
                Console.WriteLine($"Person has name of length { name.Length }!");
            break;
        }
    }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAGAAhwEYBuAWACgqBiAOwFcMMJgM4C47X2qqcAzEQBMBAAqIoAezoEA3lQJKiQkngD8BAHIQwHOQQDmcGKQC+VC5UEiCAYXmLlNnABYCAWQAUEhNNkADgCUjpTK4QRQAO5oMADGABYEXsGhEekEcdD62rpwIAQAbhAIBNx6BGYEUQlcZXkEaFBlTBggThkZJACcXgBEABJwAJ4EEHQyw2BSDFB9QRRhncrACHAQANaLy8pZUDk6egXFpeUcZu1LO+E9XgAkfb7+BAnQ9RVSAGYE7HSGMEkDGcAHQAGS4/ySZgAhPNttdVusth0IlZwlYzEA=

**Expected Behavior**: no warning

**Actual Behavior**: warning CS8602: Dereference of a possibly null reference. `Console.WriteLine($"Person has name of length { name.Length }!");`

This looks related to https://github.com/dotnet/roslyn/issues/34828, but that has been fixed, and this still occurs in master on sharplab.
</Description>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35667</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement Quick Info styles</Title>
    <Description>* Support emphasis in Quick Info (`&lt;em&gt;` and `&lt;i&gt;` elements in XML documentation comments)
* Support strong in Quick Info (`&lt;strong&gt;` and `&lt;b&gt;` elements in XML documentation comments)
* Support code font in Quick Info (`&lt;c&gt;`, `&lt;code&gt;`, `&lt;tt&gt;` elements in XML documentation comments)
* Support bullet and numbered lists in Quick Info
* Support definition lists in Quick Info
* Support navigating to `cref` items by clicking in Quick Info
* Support navigating to `href` hyperlinks in Quick Info (`&lt;see href` and `&lt;a href`)

### Images

⚠️ This picture is *slightly* outdated relative to current behavior (both links to https://google.com now render correctly, and the spacing for list items has changed slightly.
![image](https://user-images.githubusercontent.com/1408396/57576804-51ba6b00-742e-11e9-9646-3788f4e534e5.png)

![image](https://user-images.githubusercontent.com/1408396/57576812-7878a180-742e-11e9-8721-8b948fcdd170.png)
</Description>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35666</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35665</IssueID>
    <RepoID>1</RepoID>
    <Title>Create and initialize property/field for all unused constructor parameters</Title>
    <Description>This would save me some time regularly. Currently the best alternative I know of is to manually place the caret on each parameter and do Ctrl+., enter on each one. Sometimes there are three or four, other times there are more than ten.

ReSharper has the menu hierarchy 'Introduce get-only auto-property Foo' &gt; 'For all unused parameters'.</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35664</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix bug where pattern-matching treats a type parameter as if it is a reference (which it might not be)</Title>
    <Description>Fixes #35584

@agocke @cston @jcouv for review.  This is a serious bad-code-gen regression and should be fixed in 16.1.  I'm not certain that I am targeting the correct branch.

**Customer and scenario info**

**Who is impacted by this bug?**
Customers who use pattern-matching in C# 7 in VS2019.

**What is the customer scenario and impact of the bug?**
The scenario is a pattern-matching operation where the input is a type parameter and it is being matched into a variable of type `object` or some reference base type of the type parameter.  The compiler produces unverifiable code, omitting a necessary `box` instruction on the input.  This causes a runtime crash when the type parameter is instantiated with a value type.

**What is the workaround?**
None

**How was the bug found?**
Customer-reported

**If this fix is for a regression - what had regressed, when was the regression introduced, and why was the regression originally missed?**

This is a regression in VS2019 versus previous VS2017.  We rewrote the code generation for pattern-matching from scratch in VS2019 in order to add other (experimental for C# 8) pattern-matching features, and this particular interaction was missed in testing.  The test gap is fixed here.

Dual-checkin for 16.2p1: https://github.com/dotnet/roslyn/pull/35709
VSTS issue for ask-mode: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/892715</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35663</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35662</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35661</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch case doesn't match anymore in VS2019</Title>
    <Description>**Version Used**: 
Visual Studio 2019
**Example code**
```
public Type GetIntArrayType(object obj)
{
    switch (obj)
    {
        case int[] _ when obj.GetType() != typeof(uint[]):
            return typeof(int[]);
        case uint[] _:
            return typeof(uint[]);
        default:
            throw new Exception("Not an int array");
    }
}

Console.WriteLine(GetIntArrayType(new uint[0]));
```
**Expected Behavior**:
`System.UInt32[]`
**Actual Behavior**:
`System.Exception : Not an int array`

This code worked in VS2017, but no longer in VS2019. I suspect some optimization was done to skip cases that "can't match", but in this rather special case it is mistaken.

It will match `int[]`(!) but fail the condition and instead of testing the next case it jumps to default.

The fact that an uint array can be unboxed as an int array is strange as well, but the reason behind that is explained here: https://blogs.msdn.microsoft.com/ericlippert/2009/09/24/why-is-covariance-of-value-typed-arrays-inconsistent/

I understand that this is an edge case that you might not deem important enough to do anything about, but I wanted to let you know about this change in behavior from VS2017.</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35660</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify older compilers consuming newer library that uses the new constraints</Title>
    <Description>Ported issue from https://github.com/dotnet/roslyn/issues/22152#issuecomment-334331966</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35659</IssueID>
    <RepoID>1</RepoID>
    <Title>Make compilation outputs available via a workspace service</Title>
    <Description>Based on discussion on https://github.com/dotnet/roslyn/pull/34698. Instead of exposing paths/Streams on a project this change adds a workspace service that provides data from compiler output files.

The abstraction allows for the files to be in-memory or on a different machine. In the latter case it makes it possible to only transfer relevant parts of the output files rather then their entirety.

Fixes https://github.com/dotnet/roslyn/issues/34371</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35658</IssueID>
    <RepoID>1</RepoID>
    <Title>can stackalloc be allowed in ref struct constructors?</Title>
    <Description>**Version Used**: 

c# 7.3

**Steps to Reproduce**:

 ```
   public ref struct Matrix&lt;T&gt; where T: unmanaged
    {
        private readonly int w;
        private readonly int h;
        private readonly Span&lt;T&gt; span;

        public Matrix(int w, int h)
        {
            this.w = w;
            this.h = h;
            this.span = stackalloc T[w*h];
        }
```

results in error 
`CS8353: A result of a stackalloc expression of type 'Span&lt;T&gt;' cannot be used in this context because it may be exposed outside of the containing method` 

I think I understand the error message and why it is necessary to prevent it. 
But in this specific case the this.span is a field on a ref struct itself, so the stack will be maintained and the matrix itself cannot "be exposed outside the context".

</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>12/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35657</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.1-vs-deps
git reset --hard upstream/release/dev16.1-vs-deps
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35656</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.2-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.2-preview1.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.2-preview1
git reset --hard upstream/release/dev16.2-preview1
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.2-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35655</IssueID>
    <RepoID>1</RepoID>
    <Title>Use inferred nullability for delegate method in MethodTypeInferrer</Title>
    <Description>Fixes #32697 (Need to re-analyze method groups)
Fixes #33635 (We drop method group return nullability in nullability reinference)
Fixes #33637 (Method groups not inferred based on receiver type)
</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35654</IssueID>
    <RepoID>1</RepoID>
    <Title>make service hub log to include method that throw exception</Title>
    <Description>right now, exception log such as this, make it very hard without dump, what call is exactly failing.

we should make this log better.

...

05/10/2019 17:03:52 : Error : 1 :exception: System.ArgumentException: Object serialized to Array. JObject instance expected.

   at Newtonsoft.Json.Linq.JObject.FromObject(Object o, JsonSerializer jsonSerializer)

   at StreamJsonRpc.JsonMessageFormatter.TokenizeUserData(JsonRpcMessage jsonRpcMessage)

   at StreamJsonRpc.JsonMessageFormatter.Serialize(JsonRpcMessage message)

   at StreamJsonRpc.JsonMessageFormatter.Serialize(IBufferWriter`1 contentBuffer, JsonRpcMessage message)

   at StreamJsonRpc.HeaderDelimitedMessageHandler.Write(JsonRpcMessage content, CancellationToken cancellationToken)

   at StreamJsonRpc.PipeMessageHandler.WriteCoreAsync(JsonRpcMessage content, CancellationToken cancellationToken)

   at StreamJsonRpc.MessageHandlerBase.&lt;WriteAsync&gt;d__15.MoveNext()

--- End of stack trace from previous location where exception was thrown ---

   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)

   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

   at System.Threading.Tasks.ValueTask.ThrowIfCompletedUnsuccessfully()

   at StreamJsonRpc.JsonRpc.&lt;InvokeCoreAsync&gt;d__88`1.MoveNext()

--- End of stack trace from previous location where exception was thrown ---

   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)

   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

   at Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx.&lt;InvokeAsync&gt;d__10.MoveNext()

--- End of stack trace from previous location where exception was thrown ---

   at
</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35653</IssueID>
    <RepoID>1</RepoID>
    <Title>InlineTemporary: don't inline using declarations</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/35645</Description>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35652</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35651</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35650</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>12/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35649</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>12/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35648</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>12/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35647</IssueID>
    <RepoID>1</RepoID>
    <Title>Compilers emit unneeded NOP instruction after each call to a void method</Title>
    <Description>In Debug mode, the Roslyn compilers produce a NOP instruction after each invocation of a void method.  The comment in the compiler says

``` c#
                // DevDiv #15135.  When a method like System.Diagnostics.Debugger.Break() is called, the
                // debugger sees an event indicating that a user break (vs a breakpoint) has occurred.
                // When this happens, it uses ICorDebugILFrame.GetIP(out uint, out CorDebugMappingResult)
                // to determine the current instruction pointer.  This method returns the instruction
                // *after* the call.  The source location is then given by the last sequence point before
                // or on this instruction.  As a result, if the instruction after the call has its own
                // sequence point, then that sequence point will be used to determine the source location
                // and the debugging experience will be disrupted.  The easiest way to ensure that the next
                // instruction does not have a sequence point is to insert a nop.  Obviously, we only do this
                // if debugging is enabled and optimization is disabled.

                // From ILGENREC::genCall:
                //   We want to generate a NOP after CALL opcodes that end a statement so the debugger
                //   has better stepping behavior

                // CONSIDER: In the native compiler, there's an additional restriction on when this nop is
                // inserted.  It is quite complicated, but it basically seems to say that, if we thought
                // we could omit the temp-and-copy for a struct construction and it turned out that we
                // couldn't (perhaps because the assigned local was captured by a lambda), and if we're
                // not using the result of the constructor call (how can this even happen?), then we don't
                // want to insert the nop.  Since the consequence of not implementing this complicated logic
                // is an extra nop in debug code, this is likely not a priority.

                // CONSIDER: The native compiler also checks !(tree-&gt;flags &amp; EXF_NODEBUGINFO).  We don't have
                // this mutable bit on our bound nodes, so we can't exactly match the behavior.  We might be
                // able to approximate the native behavior by inspecting call.WasCompilerGenerated, but it is
                // not in a reliable state after lowering.

                _builder.EmitOpCode(ILOpCode.Nop);
```

However, I tried removing these NOP instructions as an experiment.  In the latest preview VS, I found no questionable debugging behavior without the NOP instructions, even for a call to `System.Diagnostics.Debugger.Break()`.  Is it possible our compilers can stop emitting the unneeded NOP?

/cc @tmat 
</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35646</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract Method should understand `using` declarations</Title>
    <Description>
![image](https://user-images.githubusercontent.com/12466233/57560034-61a45300-7339-11e9-949d-28d637133cc4.png)

```C#
using System;

class C2 : IDisposable
{
    void M()
    {
        using var x2 = new C2();
        x2.ToString();




        x2.ToString();

    }

    public void Dispose() =&gt; throw new NotImplementedException();
}
```

FYI @chsienki </Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35645</IssueID>
    <RepoID>1</RepoID>
    <Title>InlineVariable should not trigger for a `using` declaration</Title>
    <Description>![image](https://user-images.githubusercontent.com/12466233/57559966-1722d680-7339-11e9-97b2-50c0594e2fae.png)


FYI @chsienki 
</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35644</IssueID>
    <RepoID>1</RepoID>
    <Title>`this` keyword should not be recommended within a static local function</Title>
    <Description>![image](https://user-images.githubusercontent.com/12466233/57559770-5a307a00-7338-11e9-88a4-91745f45ce1a.png)
</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35643</IssueID>
    <RepoID>1</RepoID>
    <Title>Suggestion: Offer fix for upgrading project to Core 3</Title>
    <Description>In a project that targets Core 2, start using the default interface members feature.

You first get an error for the language version. We offer a fix for that.
Then you get an error for the target runtime. We could offer a fix for that too, or at least improve the error message.

![image](https://user-images.githubusercontent.com/12466233/57558728-be9d0a80-7333-11e9-84a6-b7fbc6b15eec.png)
</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35642</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Make compilation outputs available via a workspace service (#34809)"</Title>
    <Description>This reverts commit 3bdbd56045a21888b9cdd70b420f8ff5b711da77.

The original PR caused failures in VS tests which are preventing us from making insertions, so we're rolling back for now.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35641</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove some unnecessary &lt;SubType&gt;Code&lt;/SubType&gt;</Title>
    <Description>
    </Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35640</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35639</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35638</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix crash when using bad indexer type</Title>
    <Description>Inverted condition caused us to crash instead of giving an error message
when calling an indexer with a bad input type.

Fixes #35622</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35637</IssueID>
    <RepoID>1</RepoID>
    <Title>Error in "await foreach" in C# 8.0 beta</Title>
    <Description>**Version Used**: Visual Studio 2019 version 16.0.3, C# 8 (beta) and 3.0.100-preview4-011223

**Steps to Reproduce**:
When i try to compile this code
```csharp
public class Program
{
    public static async Task Main(string[] args)
    {
        try
        {
            try
            {
                await foreach (var item in NumGenerateAsync())
                {
                    switch (item)
                    {
                        case 5:
                            return;
                    }
                }
                
            }
            catch
            {
            }
        }
        finally
        {
            await Task.Delay(42);
        }
    }

    static async IAsyncEnumerable&lt;int&gt; NumGenerateAsync()
    {
        for (int i = 0; i &lt; 30; i++)
        {
            await Task.Delay(42);
            yield return i;
        }
    }
}
```
VS 2019 reports an error: "MSB6006 "csc.exe" exited with code -2146232797".

**Expected Behavior:**
But I think, this code is logically correct and I expect the code to be compiled

**Actual Behavior:**
"MSB6006 "csc.exe" exited with code -2146232797"

**Remarks:**
If I delete inner try-catch, or await statement in finally block - it works as expected.

To avoid this error I replace ``return`` with ``goto`` now:
```csharp
public static async Task Main(string[] args)
{
    try
    {
        try
        {
            await foreach (var item in NumGenerateAsync())
            {
                switch (item)
                {
                    case 5:
                        goto exit;
                }
            }
        exit:;
        }
        catch
        {
        }
    }
    finally
    {
        await Task.Delay(42);
    }
}
```</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35636</IssueID>
    <RepoID>1</RepoID>
    <Title>AddParensForClarity should consider `switch` expressions like `await e switch ...`</Title>
    <Description>(Filed from a note from @jcouv, he can answer questions about it.)</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35635</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to release/dev16.2-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps
git reset --hard upstream/release/dev16.2-preview1-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35634</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.2-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.2-preview1.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.2-preview1
git reset --hard upstream/release/dev16.2-preview1
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.2-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35633</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35632</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35631</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex Completion unit tests use hard-coded strings for localizable resources</Title>
    <Description>The following unit tests use hard-coded strings instead of the localized resources:

- Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests_Regex.TestCaretPlacement
- Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests_Regex.TestCaretPlacement

This guarantees they will fail when run under locales other than en.

Example failure:
```
Assert.Equal() Failure\r\n ↓ (pos 3)\r\nExpected: [ character-group ]\r\nActual: [ grupo de caracteres ]\r\n ↑ (pos 3)
   en Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) en C:\projects\xunit\src\xunit.assert\Asserts\StringAsserts.cs:línea 244
   en Xunit.Assert.Equal(String expected, String actual) en C:\projects\xunit\src\xunit.assert\Asserts\StringAsserts.cs:línea 174
   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.ModernCompletionTestState.VB$StateMachine_23_AssertSelectedCompletionItem.MoveNext() en /_/src/EditorFeatures/TestUtilities2/Intellisense/ModernCompletionTestState.vb:línea 246
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests_Regex.VB$StateMachine_5_TestCaretPlacement.MoveNext() en /_/src/EditorFeatures/Test2/IntelliSense/CSharpCompletionCommandHandlerTests_Regex.vb:línea 81
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:línea 264
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:línea 48
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExceptionAggregator.&lt;RunAsync&gt;d__9.MoveNext() en C:\projects\xunit\src\xunit.core\Sdk\ExceptionAggregator.cs:línea 90
```

The tests will be disabled. Please update them to use the localized resource rather than hard-coded strings.
</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35630</IssueID>
    <RepoID>1</RepoID>
    <Title>[QUESTION]Roslyn name pattern constants</Title>
    <Description>Someone could tell me where is the cs with roslyn constants for generation of name for lambda, async/await state machine etc.

I'm working on coverlet and would like to try some pattern recognition.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35629</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn dev16.1-vs-deps | 20190510</Title>
    <Description>
    </Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35628</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing Nullable warnings?</Title>
    <Description>**Version Used**: 

.NET Core 3, Preview 5, Visual Studio 2019 16.0.3

**Steps to Reproduce**:

In the following code, the last two lines in the method does not get any warnings about nullability

`
```
public class Test
{
    public void DoStuff(string? input)
    {
        string data = input;
        Console.WriteLine(data.Length);

        Console.WriteLine(input.Trim());

        string data2 = input;                 //No warning CS8602: Possible dereference of a null reference here?
        Console.WriteLine(data2.Length);      //and here?

    }
}
````


**Expected Behavior**:

Expected to get 6 warnings in this method, I only get 4 warnings.

**Actual Behavior**:

The last two lines does not get any null warnings.
</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35627</IssueID>
    <RepoID>1</RepoID>
    <Title>Use 'x is object' instead of '!(x is null)' or 'x != null'</Title>
    <Description>When true, `x is object` is preferred to `!(x is null)` for generated null inequality checks. The default value is true.

**Edit:** Per https://github.com/dotnet/roslyn/pull/35627#issuecomment-494230163, this is not an option and the new behavior is always used when generating non-null checks.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35626</IssueID>
    <RepoID>1</RepoID>
    <Title>Type of invalid invocation expression returns a type parameter instead of some kind of error</Title>
    <Description>**Version Used**: 

Microsoft.CodeAnalysis 3.0.0

**Steps to Reproduce**:

1. Use the following code:

```
    var syntaxTree = CSharpSyntaxTree.ParseText(@"
    public static class Class1
    {
        public static TResult Do&lt;TResult&gt;(this TResult param1, int param2) =&gt; param1;

        public static void Test()
        {
            var result1 = 
                1.Do(param2: 2);

            var result2 =
                result1.Do(param3: 3);
        }
    }
    ");
            CSharpCompilation compilation = CSharpCompilation.Create(
                "assemblyName",
                new[] { syntaxTree },
                new[]
                {
                    MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
                },
                new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

            var semanticModel = compilation.GetSemanticModel(syntaxTree);

            var invocations = syntaxTree.GetRoot()
                .DescendantNodes()
                .OfType&lt;MethodDeclarationSyntax&gt;()
                .Where(x =&gt; x.Identifier.Text == "Test")
                .SelectMany(x =&gt; x.DescendantNodes().OfType&lt;InvocationExpressionSyntax&gt;())
                .Select(x =&gt;new
                {
                    Type = semanticModel.GetTypeInfo(x).Type,
                    Line = x.GetLocation().GetLineSpan().EndLinePosition.Line
                })
                .ToList();

            foreach (var invocation in invocations)
            {
                Console.WriteLine(invocation.Line + ":" + invocation.Type);
            }
```

2. 
3. 

**Expected Behavior**:

The type of the following expression:

```
result1.Do(param3: 3)
```

Should be null. Or there should be a way to know that there is something wrong with this expression since there is no overload of Do that takes a parameter called param3.

**Actual Behavior**:

The type of the expression above is returned as TResult, the type parameter.


Note: the same is true for the following expression:

```
1.Do(param2: 2).Do(param3: 3)
```

That is, without the intermediate variable.

This behavior might be intentional. In this case, what API can I use to know that the type of the expression is actually invalid?</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35625</IssueID>
    <RepoID>1</RepoID>
    <Title> [loc][Query][Roslyn] Localizability of "TypeOrNamespaceUsageInfo_Qualify" </Title>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
Qualify

File Name:
Workspaces\Core\Portable\xlf\WorkspacesResources.xlf

==========================================
Query:
Would you please let me know if this string is translatable? If yes, would you please clarify its meaning?</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35624</IssueID>
    <RepoID>1</RepoID>
    <Title>[loc][Query][Roslyn] Localizability of "ref_local_or_expression" </Title>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
ref local or expression

File Name:
Features\CSharp\Portable\xlf\CSharpFeaturesResources.xlf

==========================================
Query:
What does "local" mean here?</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35623</IssueID>
    <RepoID>1</RepoID>
    <Title>[Range]Type of argument is not checked before try to access String or Span&lt;T&gt; with Range mode.</Title>
    <Description>
**Version Used**: 
Compiler version: '3.100.19.22309 (ce8ac3f7)'. Language version: 8.0.
VS2019 16.1.0 Preview3.0

**Steps to Reproduce**:
1. Set`&lt;LangVersion&gt;8.0&lt;/LangVersion&gt;` and `&lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;`.
2. Compile the below code()
```cs
using System;

public static class Program {
    public static void Main() {
//        string xxx = "str1";
        var xxx = new Span&lt;byte&gt;();
        var zzz = xxx["str2"];
//        var zzz = xxx[null];
//        var zzz = xxx[new object()];
        Console.WriteLine(zzz.ToString());
    }
}
```
***Seems also happen with `Span&lt;T&gt;`, but not for user-defined Types.***

**Expected Behavior**:
Seem not see any description for this with  https://github.com/dotnet/csharplang/blob/master/proposals/csharp-8.0/ranges.md
Maybe should not compile, as it does for CSharp 7.x

**Actual Behavior**:

When not use null, It compile well and always get an `System.ArgumentOutOfRangeException: startIndex cannot be larger than length of string.`

When use null, roslyn crashes.
```
Application: VBCSCompiler.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(BoundExpression receiver)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(BoundExpression receiver)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(BoundAssignmentOperator node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSequence(BoundSequence node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(BoundAssignmentOperator node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionStatement(BoundExpressionStatement node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(BoundNode node, Dictionary`2 locals, Boolean debugFriendly)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(BoundStatement src, Boolean debugFriendly, HashSet`1&amp; stackLocals)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(MethodSymbol method, BoundStatement boundBody, ILBuilder builder, PEModuleBuilder moduleBuilder, DiagnosticBag diagnostics, OptimizationLevel optimizations, Boolean emittingPdb)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DiagnosticBag diagnostics, DebugDocumentProvider debugDocumentProvider, ImportChain importChainOpt, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSequence(Microsoft.CodeAnalysis.CSharp.BoundSequence)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(Microsoft.CodeAnalysis.CSharp.BoundNode, System.Collections.Generic.Dictionary`2&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol,Microsoft.CodeAnalysis.CSharp.CodeGen.LocalDefUseInfo&gt;, Boolean)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(Microsoft.CodeAnalysis.CSharp.BoundStatement, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CodeGen.ILBuilder, Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.OptimizationLevel, Boolean)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt;)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
```</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35622</IssueID>
    <RepoID>1</RepoID>
    <Title>[Range]Type of argument is not checked before try to access String or Span&lt;T&gt; with Range mode.</Title>
    <Description>**Version Used**: 
Compiler version: '3.100.19.22309 (ce8ac3f7)'. Language version: 8.0.
VS2019 16.1.0 Preview3.0

This works well with `dotnet-sdk 3.0.100-preview4-011223`, `3.100.19.20907 (01f3eb10)`.

**Steps to Reproduce**:
1. Set`&lt;LangVersion&gt;8.0&lt;/LangVersion&gt;` and `&lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;`.
2. Compile the below code()
```cs
using System;

public static class Program {
    public static void Main() {
//        string xxx = "str1";
        var xxx = new Span&lt;byte&gt;();
        var zzz = xxx["str2"];
//        var zzz = xxx[null];
//        var zzz = xxx[Main()];
//        var zzz = xxx[new object()];
        Console.WriteLine(zzz.ToString());
    }
}
```
***Seems also happen with `Span&lt;T&gt;`, but not for user-defined Types.***

**Expected Behavior**:
Seem not see any description for this with  https://github.com/dotnet/csharplang/blob/master/proposals/csharp-8.0/ranges.md
Maybe should not compile, as it does for CSharp 7.x

**Actual Behavior**:

When not use null, It compile well and always get an `System.ArgumentOutOfRangeException: startIndex cannot be larger than length of string.`

When use null, roslyn crashes.
```
Application: VBCSCompiler.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(BoundExpression receiver)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(BoundExpression receiver)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(BoundAssignmentOperator node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSequence(BoundSequence node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(BoundAssignmentOperator node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionStatement(BoundExpressionStatement node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(BoundNode node, Dictionary`2 locals, Boolean debugFriendly)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(BoundStatement src, Boolean debugFriendly, HashSet`1&amp; stackLocals)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(MethodSymbol method, BoundStatement boundBody, ILBuilder builder, PEModuleBuilder moduleBuilder, DiagnosticBag diagnostics, OptimizationLevel optimizations, Boolean emittingPdb)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DiagnosticBag diagnostics, DebugDocumentProvider debugDocumentProvider, ImportChain importChainOpt, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSequence(Microsoft.CodeAnalysis.CSharp.BoundSequence)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(Microsoft.CodeAnalysis.CSharp.BoundNode, System.Collections.Generic.Dictionary`2&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol,Microsoft.CodeAnalysis.CSharp.CodeGen.LocalDefUseInfo&gt;, Boolean)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(Microsoft.CodeAnalysis.CSharp.BoundStatement, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CodeGen.ILBuilder, Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.OptimizationLevel, Boolean)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt;)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
```</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35621</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix three .editorconfig bugs</Title>
    <Description>These make the full end-to-end experience work.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35620</IssueID>
    <RepoID>1</RepoID>
    <Title>improve build + live dedup on full solution analysis on.</Title>
    <Description>we found a de-dup bug with full solution analysis.

basically, when we get errors, we categorize them as either syntax, semantic or other errors. it works fine for live but errors from build, we don't know what kind of errors they are. so we mark those with most common error kind (semantic) and mark that it is from build so that we can refresh them next time we do live analysis.

with full solution analysis off, it works fine since we fix those up when a file is opened. but for closed file with FSA, we sometimes fail to de-dup correctly due to our refresh optimization.

now we always refresh errors when build error is involved.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35619</IssueID>
    <RepoID>1</RepoID>
    <Title>Decide nullable context for implicit outer type</Title>
    <Description>```C#
        [Fact]
        public void ExplicitInterface_UsingOuterDefinition()
        {
            var text = @"
class Outer&lt;T&gt; where T : class
{
    internal class Inner&lt;U&gt; where U : class
    {
        protected internal interface Interface
        {
            void Method();
        }
        // The implemented interface is Outer&lt;T!&gt;.Inner&lt;U!&gt;.Interface
        internal class Derived6 : Outer&lt;T&gt;.Inner&lt;U&gt;.Interface
        {
            // The explicit interface is Outer&lt;T&gt;.Inner&lt;U!&gt;.Interface
            // Should it be Outer&lt;T!&gt;.Inner&lt;U!&gt;Instance instead?
            void Inner&lt;U&gt;.Interface.Method()
            {
            }
        }
    }
}
";
            CreateCompilation(text, options: WithNonNullTypesTrue()).VerifyDiagnostics(
                // (14,18): warning CS8643: Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type.
                //             void Inner&lt;U&gt;.Interface.Method()
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInExplicitlyImplementedInterface, "Inner&lt;U&gt;.Interface").WithLocation(14, 18)
                );
        }

        [Fact]
        public void ExplicitInterface_WithExplicitOuter()
        {
            var text = @"
class Outer&lt;T&gt; where T : class
{
    internal class Inner&lt;U&gt; where U : class
    {
        protected internal interface Interface
        {
            void Method();
        }
        // The implemented interface is Outer&lt;T!&gt;.Inner&lt;U!&gt;.Interface
        internal class Derived6 : Outer&lt;T&gt;.Inner&lt;U&gt;.Interface
        {
            // The explicit interface is Outer&lt;T!&gt;.Inner&lt;U!&gt;.Interface
            void Outer&lt;T&gt;.Inner&lt;U&gt;.Interface.Method()
            {
            }
        }
    }
}
";

            CreateCompilation(text, options: WithNonNullTypesTrue()).VerifyDiagnostics();
        }
```

Relates to https://github.com/dotnet/roslyn/pull/35613

Mads thinks this is likely a bug that should be fixed. The implicit behavior should match the explicit behavior.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35618</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35617</IssueID>
    <RepoID>1</RepoID>
    <Title>Add optprof test</Title>
    <Description>This test is now passing in master, so porting it to 16.2.

Here's PR that porting the test itself to rel/d16.2
https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/VS/pullrequest/180800?_a=overview

**Don't merge until verified RPS results from master.**

FYI @jinujoseph @vatsalyaagrawal @dotnet/roslyn-infrastructure </Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35616</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix commit of import completion</Title>
    <Description>Fix #35614, which is a regression introduced in #35434. I have also added a completion command handler test to cover this.

@dpoeschl @ivanbasov @jasonmalinowski @CyrusNajmabadi for review

@vatsalyaagrawal @jinujoseph We need this in 16.1


**Customer and scenario info**
**Who is impacted by this bug?**
Users who enabled import completion
**What is the customer scenario and impact of the bug?**
Committing import completion doesn't add using, which basically completely breaks this feature.
**What is the workaround?**
None
**How was the bug found?**
dogfooding
**If this fix is for a regression - what had regressed, when was the regression introduced, and why was the regression originally missed?**
This is a regression from previous inserted version. The regression was missed because (1) A through manual testing wasn't done at the time of merging (2) There's gap in our unit test, which is fixed as part of this PR.
</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35615</IssueID>
    <RepoID>1</RepoID>
    <Title>remove workaround once https://github.com/dotnet/roslyn/issues/35514 is fixed</Title>
    <Description>remove SolutionCrawlerRegistrationService.EnsureRegistration once the issue (https://github.com/dotnet/roslyn/issues/35514) is fixed.</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35614</IssueID>
    <RepoID>1</RepoID>
    <Title>Committing unimorted type item doesn't add the missing using directive</Title>
    <Description>
    </Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35613</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix GetHashCode on constructed types with annotated type arguments</Title>
    <Description>If you have `C&lt;T~&gt;` (definition) and a type `C&lt;T!&gt;` or `C&lt;T?&gt;` constructed from it, they should have the same value for `GetHashCode()`, namely the object-hash of the definition.

Fixes https://github.com/dotnet/roslyn/issues/30673

If this looks okay, then I'll extend this PR to also cover VB.

Fixes https://github.com/dotnet/roslyn/issues/30677

Tagging @AlekseyTs</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35612</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove PROTOTYPE comment from editorconfig</Title>
    <Description>A PROTOTYPE comment snuck its way into master. It described some a
possible interpretation for the editorconfig parser on line
continuations, but I don't think we should do it, so the correct fix is
to remove the comment.</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35611</IssueID>
    <RepoID>1</RepoID>
    <Title>PROTOTYPE(patterns2) comments should be replaced by an issue</Title>
    <Description>it looks like some patterns2 PROTOTYPE comments snuck in to master:
``` none
Code    File    Line    Column
[WpfFact(Skip = "PROTOTYPE(patterns2): need to implement indentation for recursive patterns")]    D:\repos\roslyn\src\EditorFeatures\CSharpTest\Formatting\Indentation\SmartIndenterEnterOnTokenTests.cs    1304    26
[WpfFact(Skip = "PROTOTYPE(patterns2): need to implement indentation for recursive patterns"), Trait(Traits.Feature, Traits.Features.SmartIndent)]    D:\repos\roslyn\src\EditorFeatures\CSharpTest\Formatting\Indentation\SmartIndenterTests.cs    2621    26
[WpfFact(Skip = "PROTOTYPE(patterns2): need to implement indentation for recursive patterns"), Trait(Traits.Feature, Traits.Features.SmartIndent)]    D:\repos\roslyn\src\EditorFeatures\CSharpTest\Formatting\Indentation\SmartIndenterTests.cs    2664    26
```
</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35610</IssueID>
    <RepoID>1</RepoID>
    <Title>WRN_ImplicitCopyInReadOnlyMember not given for event assignment</Title>
    <Description>```cs
using System;
public struct S {
    public event Action E;
    public readonly void M()
    {
        E += M2; // should warn about implicit copy
    }
    
    public static void M2() { }
}
```</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35609</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData for 16.2 Preview 1</Title>
    <Description>
    </Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35608</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PreReleaseVersionLabel to beta2 for master</Title>
    <Description>
    </Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35607</IssueID>
    <RepoID>1</RepoID>
    <Title>Referencing Microsoft.CodeAnalysis.Scripting NuGet package should bring in System.Runtime.Loader.dll</Title>
    <Description>VSMac is referencing Microsoft.CodeAnalysis.EditorFeatures NuGet package, which in turn brings in Microsoft.CodeAnalysis.Scripting.dll which references System.Runtime.Loader.dll. 

However the Loader.dll isn't being restored or copied to output.

https://github.com/dotnet/roslyn/blob/fd70a2aa33961bfe92afaecb68a1f15827b8b15b/src/Scripting/Core/Microsoft.CodeAnalysis.Scripting.csproj#L24-L30

For now it doesn't look like we use the codepaths that would result in runtime failures, but it would be nice to fix this properly.</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35606</IssueID>
    <RepoID>1</RepoID>
    <Title>Properties with mixed readonly accessors should skip escape checks where possible</Title>
    <Description>Related to #35146 and #35597

In some cases involving mixed readonly/non-readonly properties and indexers, we should be able to tell that passing a ref-like variable to a readonly member will not allow that variable to escape, but we're currently pessimistic and require that all accessors be 'readonly' in order to decide the variable won't escape.

```cs
using System;

public ref struct S
{
    int this[Span&lt;byte&gt; span] { readonly get =&gt; 0; set {} }

    static void M(S s)
    {
        Span&lt;byte&gt; span = stackalloc byte[10];
        // We know 'span' won't escape because the getter is readonly
        // but we still give an error today.
        _ = s[span];
    }
}
```</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35605</IssueID>
    <RepoID>1</RepoID>
    <Title>X64 testing</Title>
    <Description>Fixes integration test failures when run locally with the 64-bit test runner.</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>20/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35604</IssueID>
    <RepoID>1</RepoID>
    <Title>Work around integration test crash in light bulb controller</Title>
    <Description>See #35123</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35603</IssueID>
    <RepoID>1</RepoID>
    <Title>Use the hosted pool for integration tests</Title>
    <Description>
    </Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35602</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing nullable warning in generic methods</Title>
    <Description>**Version Used**: 

[Microsoft.Net.Tool@3.1.0-beta3-final](https://www.nuget.org/packages/Microsoft.Net.Compilers/3.1.0-beta3-final)

**Steps to Reproduce**:

1.  Unzip [TestNullable.zip](https://github.com/dotnet/roslyn/files/3162927/TestNullable.zip)
2.  Build

**Expected Behavior**:

- Have a possible null reference warning with all method calls using `possibleNullValue`.
- Have a warning on all methods that returns `possibleNullValue` asking to return a nullable.

**Actual Behavior**:

I only have a "possible null reference" warning on the last `Check(value)` (in the generic method). In fact I don't think the compiler really knows `possibleNullValue` can really be null so it looks like a bug to me (even if the warning is totally valid).

*Adding the code error here so that people don't have to open the .zip:*
```csharp
class Program
{
    static void Main(string[] args)
    {
        Get();
        GetGeneric&lt;string&gt;();
    }

    static void Check(object value) { }

    static string Get()
    {
        var possibleNullValue = JsonConvert.DeserializeObject&lt;string&gt;("null");

        if (possibleNullValue == null)
        {
            Console.WriteLine("null value");
        }

        Check(possibleNullValue);

        return possibleNullValue;
    }

    static T GetGeneric&lt;T&gt;()
    {
        var possibleNullValue = JsonConvert.DeserializeObject&lt;T&gt;("null");

        if (possibleNullValue == null)
        {
            Console.WriteLine("null value");
        }

        Check(possibleNullValue); // "Possible null reference" warning here

        return possibleNullValue;
    }
}
```

----
[jcouv updated:]
I think we've narrowed down to the most questionable/suspicious scenario:

```csharp
public static class JsonConvert
{
    public static T DeserializeObject&lt;T&gt;() =&gt; default;
}

#nullable safeonly

class NullTestWithoutContraint
{
    static T GetGeneric&lt;T&gt;()
    {
        var possibleNullValue = JsonConvert.DeserializeObject&lt;T&gt;();

       if (possibleNullValue is null) {} 
  
       return possibleNullValue;  // expecting a warning here, if T=string for example
    }
}
```
(see on [sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABAzAAmwEYA2QgJnwCkoB7AOwGEGA3RGAWACgBvb/AYQLEyAFXwAROFEQBLCABtZALzgB5YACs4AYxgAeUQD4AFAEp8AXiP4UcAGYQArgpgBubgF9u3AMT0XBQhgBTh8KAh7OAYFAE8fLmxKADlA0WkYAHVZGAALWicYZnoYBAhZEu4+LkFCUnxxAHE4GGb6OR1DUzN+QWra2pYIBHwAB1ooKFkQuFSFBQA1RScwy2o6JlZ2ADopGQR5JVUNbT0u8w8uXoHZe3wTccnp0LnF5bDZKHwA+YseT3wvWutWwAHYxhMpjNXksFCs3AIAPSI/DJWj4ADuw3oFQA5vhcog4MDvFxPEA==))</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35601</IssueID>
    <RepoID>1</RepoID>
    <Title>Infer method group based on receiver nullability</Title>
    <Description>Partially addresses #33637
Fixes #35274</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35600</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>09/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35599</IssueID>
    <RepoID>1</RepoID>
    <Title>Why `nameof` keyword is parsed to InvocationExpressionSyntax.</Title>
    <Description>![image](https://user-images.githubusercontent.com/1961216/57434472-0b221080-7276-11e9-9652-514d4fa85cdc.png)

Unlike `sizeof` keyword, `nameof` is always parsed to `InvocationExpressionSyntax`.&lt;br&gt;
Even this won't be compiled to an __invocation__ because they're not a runtime data.


With the current version of __roslyn__, I have to write something like below:
```cs
void OnInvocationExpression(node) {
    if (node.Identifier == "nameof") {
        if (TARGET_CS6_OR_ABOVE) {
            /* nameof must be treated as KEYWORD */ 
        }
        else {
           /* nameof must be treated as FUNCTION NAME */
        }
    }
    else 
         ; // Usual invocation syntax
}
```

If they're treated as __keyword__, it can be more simpler.
```cs
void OnNameofExpression(node) {
    /* always guranteed CS6 or above */
}
```</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35598</IssueID>
    <RepoID>1</RepoID>
    <Title>Semicolon is placed at a wrong place</Title>
    <Description>**Version Used**:  16.1.0 Preivew 1

**Steps to Reproduce**:
```using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTestProject7
{
    [TestClass]
    public class UnitTest1
    {
        private List&lt;int&gt; l = new List&lt;int&gt;()

        [TestMethod]
        public void TestMethod1()
        {
        }
    }
}

When I trying to type semicolon at the end of "private List&lt;int&gt; l = new List&lt;int&gt;()",
then the semicolon appears at the end of "[TestMethod]".
The semicolon should be placed at the end of "private List&lt;int&gt; l = new List&lt;int&gt;()".</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>09/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35597</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't check safe-to-escape of receiver arguments to readonly members</Title>
    <Description>Fixes #35146 but we'll need to create a new issue to track fixing escape analysis on properties where one accessor is readonly and the other is not.</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35596</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>09/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35595</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>09/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35594</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35593</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement external access API for CodeLens</Title>
    <Description>Builds on #35499</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35592</IssueID>
    <RepoID>1</RepoID>
    <Title>#nullable enable should detect nested initialization of fields</Title>
    <Description>**Version Used**: 
C# 8.0, .Net Core SDK 2.1.700

**Steps to Reproduce**:
With #nullable enable, "Non-nullable field is uninitialized" warning will show up if some field is not initialized in constructor. But sometimes we want to initialize some thing in a function so that it can be well structured, or we need to call an abstract function on children class. So this is bug is filed as a suggestion to consider detect nested initialization for #nullable enable. Thank you so much!
Code example: 

```
 public PipeProgressEventArgs(Stream stream)​
            : base(stream)​
        {​
            Initialize();​
        }​
​
        private void Initialize()​
        {​
            Progress = new ProgressEventArgs("Package", 12, ProgressType.Install);​
        }​
```

**Expected Behavior**:
No warning.
**Actual Behavior**:
 "Non-nullable field is uninitialized" shows up around the constructor.</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35591</IssueID>
    <RepoID>1</RepoID>
    <Title>F# Shim - Round 2</Title>
    <Description>This will actually remove F#'s use of Roslyn IVTs, except for `Microsoft.VisualStudio.LanguageServices`.

I've added a new project, `Microsoft.CodeAnalysis.ExternalAccess.FSharp.UnitTests`, in a `FSharpTest` folder next to `FSharp` in the `ExternalAccess` folder. Currently, it is just testing enums that were shimmed over. I will add a test for the Glyph enum which is related to this issue: https://github.com/dotnet/roslyn/issues/34971</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35590</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix metadata to project reference conversion bugs</Title>
    <Description>Fix three different bugs around our handling of metadata reference to project reference conversion. Each fix is small but is divided up into separate commits for convenience.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

This pull request has several bug fixes, all of which are necessary to unblock dogfooding for an internal customer trying to move to VS2019. In all cases, the effect to the user is they get error squiggles saying that types in their solution are missing, even though they have the projects loaded that contain those types. The user scenarios to get into this state would include (but aren't limited to):

1. A customer opens a .NET Core project that they have previously opened, and pulled newer source code to their machine while Visual Studio was closed. If the changes changed which project and solution configurations exist, the project may not reload correctly and cause the error squiggles.
2. A customer has a .NET Core project that sets TargetFrameworks, but not directly in the project file.
3. A user has a project that sets `&lt;TargetRefPath&gt;` to the same value as `TargetPath`. Unloading this project may cause the project to not unload/refresh correctly, causing other references to break, causing squiggles.
4. They have a "classic" .NET Project, and have generation of reference assemblies turned on. If you have a .NET Core project referencing this project, you will get missing types and stale IntelliSense.

### Bugs this fixes

- https://devdiv.visualstudio.com/DevDiv/_workitems/edit/857595
- https://devdiv.visualstudio.com/DevDiv/_workitems/edit/835377 may be fixed as well. We don't have a root cause for that issue, but suspect it's happening because an exception is being thrown in a specific code path; this PR fixes a bug which would throw an exception in that area.

### Workarounds, if any

The user could attempt to fix their projects but it's fairly tricky to do so. There's no way they could discover what the fixes are short of a debugging Roslyn.

### Risk

Low: each fix is straightforward.

### Performance impact

Low. Just some small logic changes.

### Is this a regression from a previous update?

Yes; these are bugs that were introduced during performance work in 16.0.

### Root cause analysis

There are three commits for three bugs being fixed here (each one is one of those cases above); the first two are subtle logic issues that require certain projects to hit, and we didn't have enough unit tests to test the underlying system directly. The third issue is also a non-standard (but very much supported) configuration and we just missed it in testing, and also didn't have enough tests.

Unit tests have been added for all the bugs.

### How was the bug found?

Internal customer report while trying to move from VS2017 to VS2019. The internal customer has been given privates and confirmed that the fixes fix their issue.

&lt;/details&gt;</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35589</IssueID>
    <RepoID>1</RepoID>
    <Title>Unneeded value assignment according to default constructor: Editorconfig rule and codefix</Title>
    <Description>[Original feedback from developer community](https://developercommunity.visualstudio.com/idea/536246/对editorconfig-的-net-编码约定设置增加默认值规则.html?childToView=559774#comment-559774)

**Summary:**
Today we have a fix to 'Remove redundant assignment'. This request is for a similar code analysis offering that would indicate (and offer a codefix to remove) an unneeded value assignment if the value assigned is the same as what is assigned by the default constructor. This rule should be included in our editorconfig rules.

```csharp
public class Class3
{
    public int A { get; set; } = 0;
}
public class Class2
{
    void M()
    {
        var test = new Class3 { A = 0 };
    }
}
```


</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35588</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.1-vs-deps
git reset --hard upstream/release/dev16.1-vs-deps
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35587</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35586</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35585</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35584</IssueID>
    <RepoID>1</RepoID>
    <Title>'Is' operator casts Int32 to null within constructor of generic type</Title>
    <Description>**Version Used**: Unsure - let me know how to determine, or if you need further information. Using VS2019 Enterprise, targeting .NET Framework 4.6.1, LangVersion 7.3, Microsoft.Net.Compilers 3.0.0.

**Steps to Reproduce**:

```
[Test]
public void UnexpectedlyCastToNull_ViaIsOperator_WhenGeneric()
{
    var nonGenericfoo = new NonGenericFoo(0);  // no problem

    var genericFoo = new GenericFoo&lt;int&gt;(0); // Kaboom exception thrown
}

private class NonGenericFoo
{
    public NonGenericFoo(int value)
    {
        if (value is object obj &amp;&amp; obj == null)
        {
            throw new Exception("Kaboom!");
        }
    }
}

private class GenericFoo&lt;T&gt;
{
    public GenericFoo(T value)
    {
        if (value is object obj &amp;&amp; obj == null)
        {
            throw new Exception("Kaboom!");
        }
    }
}
```

**Expected Behavior**:

I believe that if the expression `value is object obj` evaluates to `true`, then `obj` should be a non-null object. As such, the subsequent `obj == null` expression in the `GenericFoo` constructor should evaluate to false, and not throw the exception.

**Actual Behavior**:

The `is` operator in the `GenericFoo` constructor casts `value` to a null object, which then throws the "Kaboom!" exception.

Also relevant: if the value `1` is passed into the constructor instead of `0`, the test passes without any exception being thrown.</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35583</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpSimplifyTypeNamesDiagnosticAnalyzer throws InvalidCastException</Title>
    <Description>#### Package Version

Latest VS Int.Preview

#### Diagnostic ID

CSharpSimplifyTypeNamesDiagnosticAnalyzer

#### Repro steps

On a line where not all the symbols are resolved (in this case due to a failed design-time build and assemblies are missing), we see analyzer exceptions, including this one:

#### Actual behavior

```
Severity	Code	Description	Project	File	Line	Source	Suppression State	Tool	Detail Description
Error	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind''.			1	IntelliSense	Active	Microsoft.CodeAnalysis.CSharp.Features	Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Microsoft.VisualStudio.CMake.Package
SyntaxTree: D:\VS\src\vc\projbld\CMake\Package\Telemetry\Telemetry.cs
SyntaxNode: Microsoft.VisualStudio.Workspace ... [MemberAccessExpressionSyntax]@[35955..36052) (794,35)-(794,132)

System.InvalidOperationException: Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'
   at Microsoft.CodeAnalysis.CSharp.ConversionKindExtensions.IsImplicitConversion(ConversionKind conversionKind)
   at Microsoft.CodeAnalysis.CSharp.Conversion.get_IsExplicit()
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ConversionsAreCompatible(Conversion originalConversion, Conversion newConversion)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ForEachConversionsAreCompatible(SemanticModel originalModel, CommonForEachStatementSyntax originalForEach, SemanticModel newModel, CommonForEachStatementSyntax newForEach)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement, TForEachStatementSyntax newForEachStatement)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemanticsForNode(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode previousOriginalNode, SyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode originalRoot, Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(MemberAccessExpressionSyntax memberAccess, ExpressionSyntax reducedName, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(MemberAccessExpressionSyntax memberAccess, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan&amp; issueSpan, String&amp; diagnosticId, Boolean&amp; inDeclaration, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpressionCore(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan&amp; issueSpan, String&amp; diagnosticId, Boolean&amp; inDeclaration, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.SimplifyTypeNames.SimplifyTypeNamesDiagnosticAnalyzerBase`1.TrySimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, AnalyzerOptions analyzerOptions, Diagnostic&amp; diagnostic, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.&lt;&gt;c__DisplayClass2_0.&lt;AnalyzeNode&gt;g__descendIntoChildren|1(SyntaxNode n)
   at Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack.PushChildren(SyntaxNode node, Func`2 descendIntoChildren)
   at Microsoft.CodeAnalysis.SyntaxNode.&lt;DescendantNodesOnly&gt;d__167.MoveNext()
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.AnalyzeNode(SyntaxNodeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__50`1.&lt;ExecuteSyntaxNodeAction&gt;b__50_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35582</IssueID>
    <RepoID>1</RepoID>
    <Title>Unknown software exception when filtering nameof candidate list</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.1.0-pre.2.0+28822.285

**Steps to Reproduce**:
```C#
namespace Test16Bugs
{
    public class Program
    {
        private int _pointsPCA;
        public int PointsPcaEllipses { get; }

        static void Main()
        {
            M(nameof(|
        }
        static void M(params string[] s) { }
    }
}
```
(note that automatic brace completion is off)
1. Type `PCA` in capital letters. Note that the property is not listed in the candidate list:
![image](https://user-images.githubusercontent.com/10546952/57379542-66390200-71a7-11e9-89e4-5969ad1a2e0d.png)
2. Press `Alt+P` to filter the candidate list for properties.

**Expected Behavior**:
1. I would argue the property should be in the list as a case insensitive match.
2. Either way, if the list filter is not available, either pass they key to the VS (current behaviour when not crashing) or discard it (less annoying).

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/10546952/57379332-03e00180-71a7-11e9-942f-6aa867002c14.png)

</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35581</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35580</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35579</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring suggestion: encapsulate parameters in a class</Title>
    <Description>Probably not very often, but I could use a refactoring that would take parameters of a method and turn it into a class, similar to e.g. `XmlReaderSettings`:

```C#
public class C
{
    private string _name;
    private bool _flag;
    ...
    public static C Create(string name, bool flag)
    {
        _name = name;
        _flag = flag;
        ...
    }
}
...
public void Callsite()
{
    C c = C.Create("Name", flag: true);
}
```
would get refactored into
```C#
public class CSettings // possibly in a new file
{
    public string Name { get; set; }
    public bool Flag { get; set; }

    // could even contain the same signature constructor:
    public CSettings() { }
    public CSettings(string name, bool flag)
    {
         Name = name;
         Flag = flag;
    }
}
public class C
{
    private string _name;
    private bool _flag;
    ...
    public static C Create(CSettings settings)
    {
        if (settings == null)
            throw new ArgumentNullException(nameof(settings));

        _name = settings.name;
        _flag = settings.flag;
        ...
    }
}
...
public void Callsite()
{
    C c = C.Create(new CSettings("Name", flag: true)); // in case the constructor is generated
    // or
    C c = C.Create(new CSettings { Name = "Name", Flag = true }); // no constructor generated
}
```

That's a lot of work that refactoring could do easily. The only issue is that - as is the case with `XmlReader` too - typically one of the parameter is the core one and rest is the configuration. 

One option would be to make this part of the Change Signature (which it is): allow multiple selection in the parameter list and include a button to turn the selected parameters into a separate class.

The refactoring could end with the `CSettings` in rename mode.</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35578</IssueID>
    <RepoID>1</RepoID>
    <Title>CS1070 stating incorrect field name with local function</Title>
    <Description>**Version Used**: 
- 2.9.0
- 2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a
- [d79e5f](https://github.com/dotnet/roslyn/commit/d79e5f2ce4d2d74d2c34afdfe40953d9c7caf69a)

**Steps to Reproduce**:
Let the following code be analyzed/compiled
```C#
using System.Threading;					
public class Program
{
	static void Foo()
	{
		CancellationTokenRegistration ctr;
		void h() =&gt; ctr.Dispose();
		h();
	}
}
```
**Expected Behavior**:
error CS0170: Use of possibly unassigned field 'ctr'
in the body of the local function

**Actual Behavior**:
error CS0170: Use of possibly unassigned field 'm_index'
where h is called</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35577</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to namespace not supported on Visual Studio for Mac</Title>
    <Description>#34223 was recently merged, which leaves Visual Studio for Mac incomplete since we do not have a UI for the code fix.

![image](https://user-images.githubusercontent.com/49539/57343429-6090dd00-7111-11e9-842b-d94c6b095033.png)

We end up with the code fix in the lightbulb menu, but we have no UI. Roslyn needs a mechanism to prevent populating the menu if there is no UI available to complete the fix.

Going forward we are aiming to move EditorFeatures.Cocoa to Roslyn itself for the new VS-Platform based editor, but in the mean time the ability to not populate the menu when we don't have the required UI is needed.</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35576</IssueID>
    <RepoID>1</RepoID>
    <Title>Infer nested nullability for implicitly typed deconstruction variable:</Title>
    <Description>- Record the visited type of the right hand side in tuple deconstruction
- When the left hand side is 'var', re-infer the type from the visited right hand side
- Update test

Fixes https://github.com/dotnet/roslyn/issues/33019</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35575</IssueID>
    <RepoID>1</RepoID>
    <Title>Address many suggestions in the 'Features' projects.</Title>
    <Description>
    </Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35574</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35573</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35572</IssueID>
    <RepoID>1</RepoID>
    <Title>Ignore 'this' parameter when checking nullability of extension method delegate</Title>
    <Description>Fixes #30287
Fixes #30563</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>09/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35571</IssueID>
    <RepoID>1</RepoID>
    <Title>moved error and todo list initialization to VS workspace.</Title>
    <Description>we used to initialize those when packages are loaded. but with CPS, those packages are no longer automatically loaded with a solution open (perf win)

so now, it is moved to VSWorkspace ctor and it gets initialized when the workspace is created.

considered making it on demand but due to reversed dependency (error reporting happening in lower layer), required some plumbing so looked into how expensive the initialization is. and it turns out due to previous work done in these areas, initialization was quite cheap. any expensive one was already lazy or consumed by CPSProjectFactory already.

so, just moved initialization into VSWorkspace ctor and fixed MEF dependencies.

this partially handle this - https://github.com/dotnet/roslyn/issues/35514

but not FSA not running until file opened issue. that require a bit more work to move solution crawler inside of VSWorkspace ctor.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35570</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve determination of starting node for Complete Statement</Title>
    <Description>Fixes #35260 and improves handling of Do statements.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35569</IssueID>
    <RepoID>1</RepoID>
    <Title>nullability not applied properly for properties used in a constructor</Title>
    <Description>**Version Used**:
VS 2019 16.0.3, C#8.0 in .Net Core 2.1

**Steps to Reproduce**:
#nullable enable

namespace TestApp
{
    class Class1
    {
        public string A { get; set; }

        public Class1 (string a)
        {
            A = A.Trim();
        }
    }
}

**Expected Behavior**:
Nullability warning on A.Trim() for de-referencing a null value as A is definitely null at that point in the code.

**Actual Behavior**:
No nullability warnings, but it does generate an unused parameter 'a' since the code should have been "A = a.Trim();"</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35568</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature Request: Add initialise in constructor refactoring</Title>
    <Description>Would it be possible to add a refactoring to initilise a field or an autoproperty in a constructor?

When selecting a field or a autoproperty, which is not set in any location, this refactoring should appear.

It should add to every constructor a parameter of the same type as the field/property, and set the field from this parameter.

If no constructor exists, it should create a default constructor, and do this.

For example:

```csharp
//before:
public class Class
{
    int [|x|]; //lightbulb suggestion: initialise x in constructor
    public Class(){}
}

//after:
public class Class
{
    int x;
    public Class(int x)
    {
        this.x = x;
    }
}
```

Resharper has this code fix, and I find it invaluable.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35567</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35566</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35565</IssueID>
    <RepoID>1</RepoID>
    <Title>Localize "General" groupbox header in the Formatting&gt;General option page</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/859456

Reusing the loc'd strings from VSPackage.resx in the same project, done manually.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35564</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider variance with nullability of lambda parameter in delegate conversion</Title>
    <Description>Consider relaxing nullability checking for lambda parameters in delegate conversions. Currently the compiler reports warnings for the following:
```C#
using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Action&lt;object&gt; a1;
        a1 = F1;
        a1 = (object? o) =&gt; { }; // warning

        Action&lt;IEnumerable&lt;object&gt;&gt; a2;
        a2 = F2;
        a2 = (IEnumerable&lt;object?&gt; e) =&gt; { }; // warning
    }

    static void F1(object? o) { }

    static void F2(IEnumerable&lt;object?&gt; e) { }
}
```
```
warning CS8622: Nullability of reference types in type of parameter 'o' of 'lambda expression'
    doesn't match the target delegate 'Action&lt;object&gt;'.
warning CS8622: Nullability of reference types in type of parameter 'e' of 'lambda expression'
    doesn't match the target delegate 'Action&lt;IEnumerable&lt;object&gt;&gt;'.
```
</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35563</IssueID>
    <RepoID>1</RepoID>
    <Title>Set the initial directory for generate .editorconfig file from settings</Title>
    <Description>Fixes #32987</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35562</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35561</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35560</IssueID>
    <RepoID>1</RepoID>
    <Title>EditorFeatures NuGet package needs to declare a dependency on Scripting</Title>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis.EditorFeatures/3.1.0-beta4-19254-08

EditorFeatures.dll references Microsoft.CodeAnalysis.Scripting.dll but this dependency is not specified in the NuGet package.
</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35559</IssueID>
    <RepoID>1</RepoID>
    <Title>"Format document" no longer removes unused using directives</Title>
    <Description>VSF_TYPE_MARKDOWNIn the previous version of Visual Studio, &amp;quot;Format document&amp;quot; (or CTRL+E, D) would format the code and also remove unnecessary using directives. 

In VS2019 the unnecessary using directives are no longer being removed.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/550620/format-document-no-longer-removes-unused-using-dir.html
VSTS ticketId: 858086_
_These are the original issue comments:_

Visual Studio Feedback System on 4/29/2019, 10:56 PM (7 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35558</IssueID>
    <RepoID>1</RepoID>
    <Title>SyntaxFactory and discards</Title>
    <Description>**Version Used**: 3.0.0

Consider the following code:

```c#
using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

class Program
{

    static void Main()
    {
        string code = @"
class C
{
    static void Main()
    {
        _ = 0;
    }
}";

        var file = SyntaxFactory.ParseCompilationUnit(code);

        void Compile()
        {
            var tree = SyntaxFactory.SyntaxTree(file);
            var compilation = CSharpCompilation.Create(null)
                .AddSyntaxTrees(tree)
                .AddReferences(MetadataReference.CreateFromFile(typeof(object).Assembly.Location));

            var diagnostics = compilation.GetDiagnostics();

            if (!diagnostics.Any())
                Console.WriteLine("No diagnostics");

            foreach (var diagnostic in diagnostics)
            {
                Console.WriteLine(diagnostic);
            }
        }

        Compile();

        var identifier = file.DescendantNodes().OfType&lt;IdentifierNameSyntax&gt;().Single();
        file = file.ReplaceNode(identifier, SyntaxFactory.IdentifierName("_"));

        Compile();
    }
}
```

It parses a simple piece of code and compiles it. Then, it replaces the parsed identifier `_` with one created using `SyntaxFactory.IdentifierName("_")` and compiles again.

I would expect both to compile by interpreting the `_` as a discard, but they don't; the output of the program above is:

```
No diagnostics
(6,1): error CS0103: The name '_' does not exist in the current context
```

As far as I can tell, this happens because the identifier token created by `SyntaxFactory` does not have its contextual kind set up correctly:

```c#
var fromFactory = SyntaxFactory.Identifier("_");
var parsed = ((IdentifierNameSyntax)SyntaxFactory.ParseExpression("_")).Identifier;

SyntaxKind ContextualKind(SyntaxToken token)
{
    var property = typeof(SyntaxToken).GetProperty("RawContextualKind", BindingFlags.NonPublic | BindingFlags.Instance);

    return (SyntaxKind)(int)property.GetValue(token);
}

Console.WriteLine(ContextualKind(fromFactory));
Console.WriteLine(ContextualKind(parsed));
```

This prints:

```
IdentifierToken
UnderscoreToken
```

There is an overload of `SyntaxFactory.Identifier` which accepts `SyntaxKind contextualKind`, so it is possible to use `SyntaxFactory` to create the right identifier token. But shouldn't the simpler overload do this automatically?</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35557</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove safeonly option</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/35408</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>18/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35556</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35555</IssueID>
    <RepoID>1</RepoID>
    <Title>Should the suppression operator affect the output value of a ref argument</Title>
    <Description>```C#
string s = "";
M(ref s!); // where void M(ref string? x)
// should there be a warning for assignment from parameter x to argument s? Currently we do not produce that warning
s.ToString(); // what is the state of s? Currently it is non-null
```

In the current definition of the operator, there are two effects: change the state of an expression (`s` in this example) to non-null, and suppression conversion warnings related to nullability.

Relates to https://github.com/dotnet/roslyn/pull/35538#pullrequestreview-234647721


</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35554</IssueID>
    <RepoID>1</RepoID>
    <Title>Use .NET Standard API for named pipes on Unix</Title>
    <Description>Use new pipe API for compiler server on Unix

The default behavior for the NamedPipeServerStream API is to take a pipe
name and then construct a named pipe in the background using that name.
In Windows this involves creating a file in a special namespace in the
file system. On Unix, named pipes are implemented using Unix Domain
Sockets, which are actual files, and the CoreFX behavior is to create
them in the temporary directory. Unfortunately, Unix Domain Sockets also
often have a max path length limitation and the temporary directory
could be arbitrarily long, meaning that any attempt to create a named
pipe may fail on Unix.

To remedy this, CoreFX introduced an API which allows you to pass a full
path instead of just a pipe name. If a fully-qualifed path is passed,
the new behavior is used. We can use this functionality to improve
reliability of pipe name creation by using the "/tmp" directory on Unix,
which by the POSIX specification is always required to be a valid
temporary directory, and by using a fixed-length pipe name that is lower
than any known Unix Domain Socket path length restriction.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35553</IssueID>
    <RepoID>1</RepoID>
    <Title>CommitFormatter can lead to deadlock</Title>
    <Description>The following code will deadlock Visual Studio if `GetOptionsAsync` has a main thread dependency.

https://github.com/dotnet/roslyn/blob/d79e5f2ce4d2d74d2c34afdfe40953d9c7caf69a/src/EditorFeatures/VisualBasic/LineCommit/CommitFormatter.vb#L48

Implementation of a fix for this is blocked on dotnet/roslyn-analyzers#2400.

🔗 https://developercommunity.visualstudio.com/content/problem/526877/navagation-bars.html</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35552</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement external access layer for dotnet/project-system</Title>
    <Description>Builds on #35499

See #35070</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35550</IssueID>
    <RepoID>1</RepoID>
    <Title>unconstrained type parameter is null compiles when not targeting C# 8</Title>
    <Description>**Version Used**: VS 16.0.3

**Steps to Reproduce**:

Compile the following program with LangVersion set to 7.3

```csharp
public class C {
    public bool M&lt;T&gt;(T t) {
        return t is null;
    }
}
```

**Expected Behavior**: Error: Cannot convert null to type parameter 'T' because it could be a non-nullable value type.

**Actual Behavior**: Compiles without error.
</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35549</IssueID>
    <RepoID>1</RepoID>
    <Title>Parse error reported for `F&lt;T&gt;!`</Title>
    <Description>```C#
delegate void D();
class Program
{
    static void F&lt;T&gt;() =&gt; throw null!;
    static void G&lt;T&gt;()
    {
        _ = new D(F&lt;T&gt;!);
    }
}
```
```
(7,24): error CS1525: Invalid expression term ')'
```</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35548</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35547</IssueID>
    <RepoID>1</RepoID>
    <Title>Report nullability mismatches for delegate creation expressions</Title>
    <Description>Fixes #32499
Fixes #32698</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35546</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure we set _isSubscribedToSolutionEvents</Title>
    <Description>If we don't set this, we'll subscribe to solution events multiple times which isn't great. Our event handler is idempotent so it'll still do the right thing, but we'll just be wasting extra time processing notifications that won't do anything.

Fixes https://github.com/dotnet/roslyn/issues/35372</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35545</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio steals focus when a breakpoint is hit</Title>
    <Description>1. Start some C# project (e.g. a console app)
2. Set a breakpoint
3. Minimize VS
4. Switch to some other app such as a browser
5. When the breakpoint is hit VS steals focus.

If you happen to be typing at the moment you will now type random text into the code editor triggering EnC.

This is extremely annoying. Please do not take focus (ever).

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/510613/visual-studio-steals-focus-when-a-breakpoint-is-hi.html
VSTS ticketId: 832932_
_These are the original issue comments:_

Visual Studio Feedback System on 3/31/2019, 08:28 PM (35 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Steven Knox on 4/4/2019, 00:02 PM (32 days ago): &lt;p&gt;Such an annoying bug/issue&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35544</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor ApplyConversion into VisitConversion</Title>
    <Description>Refactors out ApplyConversion into a more aptly named VisitConversion. Adjusts the parameters to take the node being converted, and optionally the original boundconversion. When the boundconversion is passed it, the calculated nullability is now tracked through nested levels of conversions between the top-level boundconversion and the underlying converted node. Removed TrackInferredTypesThroughConversions, as this is now being handled by VisitConversion.

This PR additionally fixes a conversion issue where user-defined conversions that added nullability were not then marking the result type of that conversion as nullable.

Fixes https://github.com/dotnet/roslyn/issues/35334
Fixes https://github.com/dotnet/roslyn/issues/34302
Fixes https://github.com/dotnet/roslyn/issues/35039

@dotnet/roslyn-compiler for review.</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35543</IssueID>
    <RepoID>1</RepoID>
    <Title>Use AssemblyInformationalVersionAttribute value for logo and version</Title>
    <Description>As described in https://github.com/dotnet/roslyn/issues/35140, the contents of `AssemblyFileVersionAttribute` are no longer the value we should use.

~~This is a small regression as~~
- ~~the output of `csc -version` (and the logo) will now read something like `3.1.0-beta2-19209-07+b02e2c50a2f2aeabb5b4e5d850c65ad8686848e3` instead of something like `3.1.0-beta2-19209-07`,~~
- ~~the output of `#error version` will now read something like `3.1.0-beta2-19209-07+b02e2c50a2f2aeabb5b4e5d850c65ad8686848e3` instead of something like `3.1.0-beta2-19209-07 (b02e2c50a2f)`.~~

Update: after discussion with Tomas about expected format of the version stored in assembly information attribute, I restored the original behavior. We'll print something like `3.1.0-beta2-19209-07` as the version (ie. SHA removed) and we'll still print the short SHA separately. It looks something like: `3.1.0-beta2-19209-07 (b02e2c50a2f)`.

Fixes https://github.com/dotnet/roslyn/issues/35140</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>09/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35542</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to a newer version of CoreCLR</Title>
    <Description>Microsoft.NETCore.App 3.0.0-preview6-27706-07, SDK version 3.0.100-preview6-011773</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35541</IssueID>
    <RepoID>1</RepoID>
    <Title>Account for nullability in array conversion to interface</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/34827</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35540</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion from unimported types should strip "Attribute" from attributes</Title>
    <Description>When a namespace is unimported, the completion list for attributes doesn't strip the word "Attribute" from the end.

Before importing:
![image](https://user-images.githubusercontent.com/754264/57257204-9b115180-700d-11e9-99b7-df7a460579f6.png)

After importing:
![image](https://user-images.githubusercontent.com/754264/57257233-a9f80400-700d-11e9-8ea1-18e7c160cacd.png)

It would be ideal if both experiences were the same, or at the very least the actual completion dropped the "Attribute" suffix so the resulting code was more idiomatic.</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35539</IssueID>
    <RepoID>1</RepoID>
    <Title>Add Generate Parameter Code Fix</Title>
    <Description>![image](https://user-images.githubusercontent.com/29174528/57248363-15f06180-703a-11e9-853e-55a5d590a975.png)

Fix to https://github.com/dotnet/roslyn/issues/35496</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35538</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust nullability warning on ref argument</Title>
    <Description>Allow:
```C#
string? x = "hello";
M(ref x); // where void M(ref string)
```

While still warning for type mismatch in nested positions:
```C#
List&lt;string?&gt; x = ...;
M(ref x); // where void M(ref List&lt;string&gt;)
```

Fixes https://github.com/dotnet/roslyn/issues/34874</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35537</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35536</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35535</IssueID>
    <RepoID>1</RepoID>
    <Title>Ignore annotations analyzing method calls for attributes</Title>
    <Description>Ignore annotations on method parameters when analyzing method calls within a `BoundAttribute`.

This is a simple solution to avoid cycles binding attributes at the expense of additional nullable warnings. The additional warnings should only occur in error cases.

Fixes #35056.</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35534</IssueID>
    <RepoID>1</RepoID>
    <Title>Confirm desired behavior for type inference on ref parameters</Title>
    <Description>In the scenario below, we currently infer `string?` for `y`. But, from discussion with Neal, it is conceivable that we should rather infer `string!`.

```C#
#nullable enable

public class C 
{
    void M2()
    {
        string? x = "hello";
        var y = M(ref x);
        y.ToString(); // possible de-reference
    }

    T M&lt;T&gt;(ref T t) 
    {
        throw null!;
    }
}
```
([sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWAChGABAZguYCYKBhCxgN6MKIjgBYKAWU4AKAJTDRQhqNUcAjAAYA/BQAeFALwUARAAs4xAPYmA3IrUUAbhAQUAnkakyEcAGb6cvYqjh4AdAAqVgDKMAgAlrgA5vK2FAD06RQADlZQUPFklChwALS+fojUAMZwDhQAvoz1EVIAPBEAfD7+FK0wcvwhIsqhFDBmCFYA7hQExACEwapNDA1AA===))

Relates to https://github.com/dotnet/roslyn/issues/34874

From discussion with Mads, we could probably infer `string!` in this scenario.</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35533</IssueID>
    <RepoID>1</RepoID>
    <Title>The program text fragment with the initialization of the dictionary Is not formatted properly.</Title>
    <Description>VSF_TYPE_MARKDOWNThere is no Proper alignment when inserting the trailing parenthesis **&amp;quot;}&amp;quot;** or the &amp;quot;Format Document&amp;quot; command (**Ctrl-K, Ctrl-D**).
The Correct formatting can only be obtained by **manually** adding dictionary values.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/507237/the-program-text-fragment-with-the-initialization.html
VSTS ticketId: 829994_
_These are the original issue comments:_

Visual Studio Feedback System on 3/27/2019, 09:37 PM (39 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Enbi Zhang [MSFT] on 4/3/2019, 00:19 AM (33 days ago): &lt;p&gt;Thanks for your feedback.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Could you provide a video or gif for reproduce steps?&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;

Konstantin 'Office 365' Dyakov on 4/3/2019, 01:33 AM (33 days ago): &lt;p&gt;Я могу дать вам файл с текстом, который не форматируется.&lt;/p&gt;

Konstantin 'Office 365' Dyakov on 4/3/2019, 01:55 AM (33 days ago): &lt;p&gt;Вот такой файл. &lt;a target='_blank' href="https://developercommunity.visualstudio.com/storage/attachments/66234-ctrlkd-testcs.zip"&gt;ctrlkd-testcs.zip&lt;/a&gt;&lt;/p&gt;

Wendy Wang [MSFT] on 4/3/2019, 11:16 PM (32 days ago): &lt;p&gt;Translated from Bing:&lt;/p&gt;&lt;p&gt;Here's a file.&lt;a target='_blank' href="https://developercommunity.visualstudio.com/storage/temp/66234-ctrlkd-testcs.zip"&gt;ctrlkd-testcs.zip&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;

Wendy Wang [MSFT] on 4/3/2019, 11:16 PM (32 days ago): &lt;p&gt;Translated from Bing:&lt;/p&gt;&lt;p&gt;I can give you a file with text that is not formatted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;

Visual Studio Feedback System on 4/9/2019, 10:57 PM (26 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35532</IssueID>
    <RepoID>1</RepoID>
    <Title>Add Sort Usings command back to the Edit &gt; IntelliSense menu</Title>
    <Description>![sort usings](https://user-images.githubusercontent.com/611219/57242858-7c00c880-6fe9-11e9-8cc4-ef3ba658399d.gif)

Closes https://github.com/dotnet/roslyn/issues/22469</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35531</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract Interface ... creates file with interface but does not navigate to it.</Title>
    <Description>VSF_TYPE_MARKDOWN## Steps to reproduce
- Create class
- Press Ctrl + '.'.
- Select 'Extract interface... '
- Press Ok in dialog
## Result
- File with interface is created but it is not being navigated to.
## Expected
- Fil with interface is created, opened and selected.

This works in VS 2017 but in VS 2019 it stopped working. Same issue in multiple PCs.

I have found this issue when I was trying to implement custom refactroing by inheriting **CodeActionWithOptions** which returns **DocumentNavigationOperation** and nothing happened.
I have checked roslyn source codes for extract interface which does the same thing I found out that it does not work for 'Extract interface' either.

## Maybe useful information
I have inherited **DocumentNavigationOperation** and debugged **Apply** method. I could see that document id I am using for navigation is different then the one which exists in workspace parameter of method.
For some reason it changed during **ApplyChangesOperation**. Maybe it can help you.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/556922/extract-interface-creates-file-with-interface-but.html
VSTS ticketId: 881201_
_These are the original issue comments:_

Visual Studio Feedback System on 5/4/2019, 08:19 PM (38 hours ago): We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35530</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35529</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35528</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35527</IssueID>
    <RepoID>1</RepoID>
    <Title>Find in Files is wasting screen estate</Title>
    <Description>VSF_TYPE_MARKDOWNIt seems you're trying to copy ReSharper's wasteful UI in Find in Files. In Visual Studio 2017 I can have a window show me 8 results in a very narrow window. In Visual Studio 2019 the extra useless UI and groupings makes it by default show *two and a half results*, if I scroll down. At first glance I get *half a result*. So you can see how this is a lot worse than previously. I either have to make the UI a lot taller and waste space, or live with very small amount of results at a time.

Please allow a setting where I can disable the &amp;quot;Matching lines...&amp;quot; and &amp;quot;Find all...&amp;quot; things, or move them to the top with the options for which files to find in and what grouping to use etc. Or some other way that will make the feature useful again. The functionality in VS2017 is enough usually.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/519940/find-in-files-is-wasting-screen-estate.html
VSTS ticketId: 841186_
_These are the original issue comments:_

Visual Studio Feedback System on 4/8/2019, 01:05 AM (28 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35526</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Make compilation outputs available via a workspace service</Title>
    <Description>(Original PR #34809)

This change broke some unit tests on the VS side with a `System.Reflection.ReflectionTypeLoadException : Unable to load one or more of the requested types.` 

See https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/179585 for details.

</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35525</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve discoverability of code refactorings</Title>
    <Description>A bunch of recent customer surveys done by @kendrahavens identified that quite a few customers find our refactorings to be not discoverable. The refactorings that they requested were already implemented by us, but they needed Kendra to point out where to put the cursor or how to change the selection span for these to show up in the light bulb menu. The same concern does not apply to code fixes due to visual cue from the squiggle/suggestion dots in the UI, and pressing Ctrl + dot anywhere on the line shows up the fix, ordering being based on the distance from the diagnostic span. Note that the primary reason why we don't show up all the refactorings available on a given line are to avoid overloading the light bulb menu, which is already quite noisy. We need to fine tune the experience here to find a balance between discoverability of actions and overloading the light bulb menu.

We have talked about adding 2 different discoverability enhancements to address these concerns:

1. **Show additional actions in light bulb menu**
Improve the discoverability of the refactorings in the light bulb, by showing additional, but likely less relevant actions, that are applicable for positions _near_ the current cursor or selection span. Most relevant refactorings would still be show at the top of the menu and these additional actions will either be shown at the bottom of the menu or nested within a separate menu towards the bottom. Internal discussions have led to bunch of different implementation suggestions on how to achieve this (discussed below), but the primary conclusion being that we need to somehow _associate a fix span/ideal span with each registered code action within a refactoring, so the engine can prioritize the ordering and/or nesting of these refactorings based on promixity of this span with current cursor position or selection span_.
Possible implementation approaches that came out:
   1. **Implementation 1**: Convert all the IDE refactorings that are not selection based into a pair of diagnostic analyzer reporting hidden diagnostics + code fix. The diagnostic span would be the ideal span for the code actions.

      PROS:
         1. All refactorings available on any position in a line show up in the light bulb, solving the discoverability concerns. 
         2. We get other useful analyzer/fixer features for free: fix all, ability to bump up the severity to see squiggles/error list entries across a wider scope, etc.

      CONS:
         1. Likely to overload the light bulb menu with lot more actions now showing up. If so, one option might be to move all the code actions registered for hidden diagnostics whose span does not intersect with current position into a nested menu near the bottom of the light bulb menu.
         2. This approach adds quite a bit of implementation cost as we need to refactor code in each code refactoring into a pair of diagnostic analyzer/code fix.

   2. **Implementation 2**: Currently, the refactoring service executes naively for identifying available actions for current cursor position or span. It passes in the entire line span or selection span into each refactoring, and then treats all registered refactorings to be on par with each other. This forces our refactorings to then be implemented in a restrictive manner, so they are not offered everywhere on the line and do not overload the light bulb menu. This whole setup relies on the assumption that users are already aware about where to put their cursor or what span to select to get the relevant refactorings, which does not seem to be true as mentioned at the start of this post. This proposal tries to remove this assumption by making the following changes:
      1. Change the code refactoring service to perform multiple passes instead of just one. It first identifies the current token/node at the position or selection span and identifies available actions. These would be the most relevant refactorings that get offered at the top level of the light bulb menu. Then the service walks up the parent node and asks available actions for the parent and siblings of previous token/node. These actions would automatically be assigned a lower priority and will be shown under a nested menu near the bottom. These additional nearby actions would serve as a discoverability point for beginner users, while also not polluting the menu for advanced users.
      2. Change all the refactorings so they only register an action if the input text span exactly matches the token/node that is most relevant to it.

     PROS:
         1. We do not alter the existing light bulb menu significantly for advanced/experienced users, while adding a new discoverability point for beginner users to discover new potential actions in nearby locations.
         2. The implementation for each refactoring is greatly simplified and unified as they only work when input span exactly matches it's fixed span.

      CONS: 
         1. We might end up with a perf hit due to the code refactoring service doing multiple passes. We would need perf measurements to identify if this indeed a concern as most refactorings would just bail out upfront. 
         2. We need to experiment/decide if a nested menu is indeed a good discoverability point as beginner users might not know that they need to dive into a nested menu at the bottom.

   3. **Implementation 3**: Allow refactorings to specify a span in [RegisterRefactoring](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeRefactorings/CodeRefactoringContext.cs,51) callback. This would serve as the virtual diagnostic span for the code action. We would need to change all the refactorings to then operate on all the nodes/tokens of interest in the input context span and register refactorings for each node/token with their span. The code refactoring service would be changed to prioritize refactorings whose registered span is a close match to current position/span, and show the rest of refactorings in a nested menu or towards the bottom of the menu.

     PROS: Get the similar user experience as prior approaches, with potentially lesser implementation cost then approach i. and avoid multiple passes that are needed in approach ii.

     CONS: Adds implementation complexity in each refactoring of identifying multiple nodes/tokens of interest and then register each action with a span.

   4. **Implementation 4**: Enforce common [helpers](https://github.com/dotnet/roslyn/blob/master/src/Features/Core/Portable/CodeRefactoringHelpers.cs) that each code refactoring ought to use to determine it's applicability span and bail out if that is not the case. We need to ensure we polish and/or extend the existing helpers, make them public as appropriate and audit all existing or just the problematic refactorings to ensure they are using these helpers.

2. **New UI for viewing available actions in a broader scope**: Create a separate tool window to show available code actions within a given scope (document/project/solution, with document being the default). Few open questions:
   1. Should the refactorings shown in this window be opt-in to avoid polluting it with common refactorings that show up everywhere?
   2. Should the tool window automatically be opened and brought to focus when user invokes light bulb and/or applies a code action? If not, how would we make this UI discoverable for users?
   3. Should the actions list in the window be ordered such that the actions closer to current cursor are near the top?
   We would potentially start with a simple UI, that only works for document scope to start with, and iterate on improving it to work with broader scopes.
</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35524</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

## From https://github.com/dotnet/arcade
- **Build**: 20190503.8
- **Date Produced**: 5/4/2019 2:00 AM
- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19253.8

## From https://github.com/dotnet/arcade
- **Build**: 20190504.1
- **Date Produced**: 5/4/2019 12:58 PM
- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19254.1

## From https://github.com/dotnet/arcade
- **Build**: 20190505.2
- **Date Produced**: 5/5/2019 2:25 PM
- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19255.2

## From https://github.com/dotnet/arcade
- **Build**: 20190506.12
- **Date Produced**: 5/7/2019 5:12 AM
- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19256.12

## From https://github.com/dotnet/arcade
- **Build**: 20190507.7
- **Date Produced**: 5/8/2019 12:49 AM
- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19257.7

## From https://github.com/dotnet/arcade
- **Build**: 20190508.5
- **Date Produced**: 5/8/2019 10:17 PM
- **Commit**: 9005cee9510d23535c09bd9b6be7c426e526c067
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19258.5

## From https://github.com/dotnet/arcade
- **Build**: 20190509.9
- **Date Produced**: 5/10/2019 12:31 AM
- **Commit**: 155080ecb738e189db75f8f2461ebad75d955aa7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19259.9

## From https://github.com/dotnet/arcade
- **Build**: 20190510.2
- **Date Produced**: 5/10/2019 8:01 PM
- **Commit**: 810920cf8a5fc183585304193f8b4e4e189497e9
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19260.2

## From https://github.com/dotnet/arcade
- **Build**: 20190511.1
- **Date Produced**: 5/11/2019 1:13 PM
- **Commit**: 136dfbfa8a6173dadc107bf7393bdeaceecb4d3a
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19261.1

## From https://github.com/dotnet/arcade
- **Build**: 20190512.1
- **Date Produced**: 5/12/2019 12:58 PM
- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19262.1

## From https://github.com/dotnet/arcade
- **Build**: 20190513.3
- **Date Produced**: 5/13/2019 6:32 PM
- **Commit**: e6712584bba6e2f0e35a3704793c459ff97c09af
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19263.3

## From https://github.com/dotnet/arcade
- **Build**: 20190514.13
- **Date Produced**: 5/15/2019 2:37 AM
- **Commit**: 670f6ee1a619a2a7c84cfdfe2a1c84fbe94e1c6b
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19264.13

## From https://github.com/dotnet/arcade
- **Build**: 20190516.2
- **Date Produced**: 5/16/2019 8:24 AM
- **Commit**: 37c11672ee11dc2b3365b95a29e0c012f44032be
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19266.2

## From https://github.com/dotnet/arcade
- **Build**: 20190516.4
- **Date Produced**: 5/16/2019 7:11 PM
- **Commit**: 61cc7d4d347300835925ce5245bfc3ecb6b621d7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19266.4

## From https://github.com/dotnet/arcade
- **Build**: 20190517.7
- **Date Produced**: 5/18/2019 4:34 AM
- **Commit**: 55ce2900743cb609e51e2c6487e87e42eb627880
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19267.7

## From https://github.com/dotnet/arcade
- **Build**: 20190518.2
- **Date Produced**: 5/18/2019 3:22 PM
- **Commit**: 6d0514d3da59137630b9add5b5e619bce2631f02
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19268.2

## From https://github.com/dotnet/arcade
- **Build**: 20190520.1
- **Date Produced**: 5/20/2019 8:30 AM
- **Commit**: e913fb3b02d4089a91ff91c041c5f6e7c29038b0
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19270.1

</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35523</IssueID>
    <RepoID>1</RepoID>
    <Title>Ambiguous implicit conversion in tuple literal</Title>
    <Description>**Version Used**: 
Latest, master from May 4, 2019.

**Steps to Reproduce**:

```cs
internal readonly struct Pair
{
    public Pair(string name, string type)
    {
        Name = name;
        Type = type;
    }

    internal string Name { get; }
    internal string Type { get; }

    public override string ToString() =&gt; $"{Name}: {Type}";

    public static implicit operator Pair((string, int) t) =&gt; new Pair(t.Item1, "int");

    public static implicit operator Pair((string, uint) t) =&gt; new Pair(t.Item1, "uint");
}

internal static class Program
{
    private static void Render(Pair pair)
    {
        System.Console.WriteLine(pair);
    }

    private static void Main()
    {
        const uint u = 23;
        Render(("u", u)); // u: uint

        const int m = -1;
        Render(("-", m)); // -: int

        const int i = 42;
        Render(("i", i)); // Error CS0457

        var t = ("t", i);
        Render(t); // t: int
    }
}
```

**Expected Behavior**:
Compiles fine.

**Actual Behavior**:
```
error CS0457: Ambiguous user defined conversions 'Pair.implicit operator Pair((string, int))' and 'Pair.implicit operator Pair((string, uint))' when converting from '(string, int i)' to 'Pair'
```

![Online compiler](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BLAdvBXCAGwAIE4IUB7XYgT1NgQFcBjGUgBQmwQFgAUAG8hpcaQACAZm68EACkkBGAAykiYOEilrSMegAc4ASjETRgiddIA5CFtIBeDQ7gBuczdIAVI3Gd9f08rCQBfIS9SPAIiMhV1e0dhUgBzOBh3UgjQ8RjEON11P2NSFPTM7MjcqVlqADdEBGwUAITfagBlGGbcVIUTZwA+UgASACJhJLgwkDKSmfGQqJldADZosENibDZsTmpjBAgYagQ5PgUlNR0YwZhBpxHcOAB3C8UYADoASXgwZQ6cYxcYmZY1VYqDbYLY7PYHI4nM4fK4JHQsO76R7PN4o75/OAAoEY/CgkI5IT5QgkdZSABMugA7EJLNZDM16ic2soNpIACykABKcFwrUUPD4pEM8jMNVZ3l0XxUAE4FNK+GCohSauzsJz4LT+aQALK8XADKLy7xsWiwUgkzgsQJ06QhBVCkViq7jFjjdEmMGkAD0Qftcwd1XdNtwdpipDAgQAtMo3QrhaLEN7E374wGsiHSIm5jFIwro7H8NFAny6anvOmvQpgTnsHng6GAKIIBDIgDCnVUfIArMzBFFrJzzpwXE2YC3NTVrA3Mw986GYMX8FqhNqhEA===)</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35522</IssueID>
    <RepoID>1</RepoID>
    <Title>I got this massage when ever use csc</Title>
    <Description>This compiler is provided as part of the Microsoft (R) .NET Framework, but only
supports language versions up to C# 5, which is no longer the latest version. For compilers that support newer versions of the C# programming language, see HTTP
://go.microsoft.com/fwlink/?LinkID=533240</Description>
    <CreatedDate>05/05/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35521</IssueID>
    <RepoID>1</RepoID>
    <Title>VS hung after "Add parameter to method" LightBulb action</Title>
    <Description>VSF_TYPE_MARKDOWNI added a paramteter to a method call and invoked LightBulb to add it to method signature. After that VS hung, but without ghosting.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/547480/vs-hung-after-add-parameter-to-method-lightbulb-ac.html
VSTS ticketId: 856118_
_These are the original issue comments:_

Visual Studio Feedback System on 4/26/2019, 01:24 AM (9 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 4/28/2019, 03:27 AM (7 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>05/05/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35520</IssueID>
    <RepoID>1</RepoID>
    <Title>Use .NET Standard API for named pipes on Unix</Title>
    <Description>Use new pipe API for compiler server on Unix

The default behavior for the NamedPipeServerStream API is to take a pipe
name and then construct a named pipe in the background using that name.
In Windows this involves creating a file in a special namespace in the
file system. On Unix, named pipes are implemented using Unix Domain
Sockets, which are actual files, and the CoreFX behavior is to create
them in the temporary directory. Unfortunately, Unix Domain Sockets also
often have a max path length limitation and the temporary directory
could be arbitrarily long, meaning that any attempt to create a named
pipe may fail on Unix.

To remedy this, CoreFX introduced an API which allows you to pass a full
path instead of just a pipe name. If a fully-qualifed path is passed,
the new behavior is used. We can use this functionality to improve
reliability of pipe name creation by using the "/tmp" directory on Unix,
which by the POSIX specification is always required to be a valid
temporary directory, and by using a fixed-length pipe name that is lower
than any known Unix Domain Socket path length restriction.</Description>
    <CreatedDate>05/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35519</IssueID>
    <RepoID>1</RepoID>
    <Title>Strange bug about const</Title>
    <Description>**Version Used**: 16.0.3

**Steps to Reproduce**:

1. Type this code:
```
    class Program
    {
        const int length = 5;

        static void Main(string[] args)
        {
            int len = 2;
            if (len &lt; length)
                Console.WriteLine("OK");
        }
    }
```
2. Find All References for `length`

result:
![bug](https://user-images.githubusercontent.com/2529999/57193341-83ce5780-6f6c-11e9-8fa7-423756d8257f.png)

**Expected Behavior**: `if (len &lt; length)`

**Actual Behavior**: `if (len &lt; )`
</Description>
    <CreatedDate>05/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35518</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate wrong dependency property callback function</Title>
    <Description>@vsfeedback commented on [Fri May 03 2019](https://github.com/dotnet/wpf/issues/645)

1.New a WpfApp;
2.In MainWindow class, use propdp+Tab to generate a dependency property;
e.g.

```csharp
 public int MyProperty
        {
            get { return (int)GetValue(MyPropertyProperty); }
            set { SetValue(MyPropertyProperty, value); }
        }

        // Using a DependencyProperty as the backing store for MyProperty.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty MyPropertyProperty =
            DependencyProperty.Register("MyProperty", typeof(int), typeof(MainWindow), new FrameworkPropertyMetadata(0,FrameworkPropertyMetadataOptions.Inherits, OnMyPropertyChanged));
```

3.mouse over &amp;quot;OnMyPropertyChanged&amp;quot; and generate method &amp;quot;MainWindow.OnMyPropertyChanged&amp;quot; by visual studio

4.The method's return type and second's parameter type is wrong as :

    ```csharp
        private static object OnMyPropertyChanged( DependencyObject d, object baseValue)
        {
            throw new NotImplementedException();
        }
    ```

the ture methos is :

```csharp
        private static void OnMyPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs baseValue)
        {
            throw new NotImplementedException();
        }
```

this problem also occurs in visual studio 2019 professional edition.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/539816/generate-wrong-dependency-property-callback-functi.html
VSTS ticketId: 851201_
_These are the original issue comments:_

Visual Studio Feedback System on 4/19/2019, 02:18 AM (14 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)

---

@thomasclaudiushuber commented on [Sat May 04 2019](https://github.com/dotnet/wpf/issues/645#issuecomment-489305705)

That's an interesting one. It looks like Visual Studio has a problem to find the correct constructor overload if FrameworkPropertyMetadata is used. Everything works like expected for the base class PropertyMetadata.

It's enough to create a new WPF project and put this in the MainWindow.xaml.cs file:

```csharp
    public static readonly DependencyProperty MyPropertyProperty =
        DependencyProperty.Register("MyProperty", typeof(int), typeof(MainWindow), 
          new PropertyMetadata(0, OnMyPropertyChanged));
```

When you look at this in VS, you'll see that only OnMyPropertyChanged is underlined in red:

![image](https://user-images.githubusercontent.com/7116546/57176121-44144c80-6e54-11e9-8769-a1962a29a1e7.png)

When you put the cursor on it to generate the method, VS will generate it with the right parameters. You can see this here in the preview:

![image](https://user-images.githubusercontent.com/7116546/57176135-6efea080-6e54-11e9-9e2c-fb403fdbbee5.png)

But now let's use the FrameworkPropertyMetadata class instead of PropertyMetadata like this:

```csharp
    public static readonly DependencyProperty MyPropertyProperty =
        DependencyProperty.Register("MyProperty", typeof(int), typeof(MainWindow), 
          new FrameworkPropertyMetadata(0, OnMyPropertyChanged));
```

Now VS also underlines the zero, the specified default value, with a red squiggle. It says it can't convert that int value into a PropertyChangedCallback:

![image](https://user-images.githubusercontent.com/7116546/57176151-aa996a80-6e54-11e9-9b1c-261e420ecbaf.png)

Now, when you put the cursor on the OnMyPropertyChanged method and press CTRL+. to generate that method, the preview shows that the second parameter is not matching the delegates signature anymore:

![image](https://user-images.githubusercontent.com/7116546/57176164-d3216480-6e54-11e9-839e-74e587071eba.png)



---

@weltkante commented on [Sat May 04 2019](https://github.com/dotnet/wpf/issues/645#issuecomment-489310547)

Thats a bug in VS not in WPF. You are getting a `CoerceValueCallback` generated because VS picks the constructor overload `FrameworkPropertyMetadata(PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback)` when it generates the method. You also can notice this because it complains about zero not being convertible to `PropertyChangedCallback`

This Issue was redirected wrongly, it should be moved over to Roslyn.

---

@thomasclaudiushuber commented on [Sat May 04 2019](https://github.com/dotnet/wpf/issues/645#issuecomment-489312086)

@weltkante Yep, I agree, it's a tooling bug, not a WPF bug.

---

@vatsan-madhavan commented on [Sat May 04 2019](https://github.com/dotnet/wpf/issues/645#issuecomment-489352122)

Moving this issue to dotnet/roslyn and closing since this looks like a intellisense-only problem and not a bug in WPF. 

</Description>
    <CreatedDate>04/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35517</IssueID>
    <RepoID>1</RepoID>
    <Title>Move type to carries extra preceding #endregion</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.1.0-pre.2.0+28822.285

**Steps to Reproduce**:

```C#
public class Foo
{
    #region Region1
    class Xyz {}
    #endregion

    #region Region
    public class Bar // Move type to 'Bar.cs'
    {
    }
    #endregion
}
```

**Actual Behavior**:
```C#
    public partial class Foo
    {
        #endregion

        #region Region
        public class Bar // Move type to 'Bar.cs'
        {
        }
        #endregion
    }
```

**Expected Behavior**:
```C#
    public partial class Foo
    {
        #region Region
        public class Bar // Move type to 'Bar.cs'
        {
        }
        #endregion
    }
```

(related #19613)</Description>
    <CreatedDate>04/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35516</IssueID>
    <RepoID>1</RepoID>
    <Title>Use 'Nullable' for Csc Task property</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/35432 based on LDM decision earlier this week.

Note: I left the compilation option and enum named `NullableContextOptions`.</Description>
    <CreatedDate>04/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35515</IssueID>
    <RepoID>1</RepoID>
    <Title>Return an immutable workspace from Solution.Workspace </Title>
    <Description>A `Solution` instance is supposed to be (observably) immutable, but the class has a reference back to the `Workspace` the solution belongs to. This makes it easy for features to access a mutable `Workspace` state when they shouldn't and impossible to share solutions across workspaces.

Some of the information stored currently on `Workspace` should be moved to the `Solution` (e.g. some stateless workspace services).

We have a couple options:
1) Return `null`
2) Return an instance of an internal subclass of `Workspace`, which will provide the information we moved to the `Solution` instance via the existing `Workspace` APIs. It would throw `NotSupportedException` when the information is not available from the `Solution`.

[1] would break a lot of components, [2] would break less, so let's go with [2].</Description>
    <CreatedDate>04/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35514</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] Errors never show up in the Error List if you've never opened a C# source file</Title>
    <Description>This regressed in 16, probably due to changes around package loads.

**Version Used**: 
16+

**Steps to Reproduce**:

1. Git clone https://github.com/Treit/VisualStudio2019ErrorListIssue
2. Delete .vs directory
3. Open VisualStudio2019ErrorListIssue\HelloWorld\HelloWorld.sln
4. Build

**Expected Behavior**:
Build fails and errors show up

**Actual Behavior**:
Build fails and errors never show up</Description>
    <CreatedDate>04/05/2019</CreatedDate>
    <ClosedDate>03/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35513</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.1-vs-deps
git reset --hard upstream/release/dev16.1-vs-deps
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/05/2019</CreatedDate>
    <ClosedDate>04/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35512</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix yaml to pick up full branch name</Title>
    <Description>Combining those two powershell steps didn't work, so I'm settling for this now. We can fix it later.
@tmat @dpoeschl 

FYI @jaredpar just to share the pain. [Some context](https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;tabs=yaml):
&gt; 
Build.SourceBranchName | The name of the branch the build was queued for.  Git repo branch or pull request: The last path segment in the ref. For example, in refs/heads/master this value is master. In refs/heads/feature/tools this value is tools.
-- | --




@jinujoseph for approval, infra-only change.</Description>
    <CreatedDate>04/05/2019</CreatedDate>
    <ClosedDate>04/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35511</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35510</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement external access APIs for Apex</Title>
    <Description>
    </Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35509</IssueID>
    <RepoID>1</RepoID>
    <Title>more fix</Title>
    <Description>
    </Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35508</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't emit readonly attributes on members within readonly structs</Title>
    <Description>Resolves #35114

This has a minor consequence which is that 'readonly' is going to roundtrip less often from metadata now--hence the deleted parameter in one of the tests. The effective readonly-ness will always round trip, though, so it shouldn't cause any ill effects in practice.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35507</IssueID>
    <RepoID>1</RepoID>
    <Title>MoveToNamespace crashes when moving a type in "System" namespace</Title>
    <Description>
```C#
namespace System
{
    $$class A
    {

    }
}
```

Using "Move to namespace..." code refactor with cursor on `$$` location 

```
System.ArgumentException : An element with the same key but a different value already exists. Key: System.Other.ThrowHelper
   at System.Collections.Immutable.ImmutableDictionary`2.HashBucket.Add(TKey key,TValue value,IEqualityComparer`1 keyOnlyComparer,IEqualityComparer`1 valueComparer,KeyCollisionBehavior behavior,OperationResult&amp; result)
   at System.Collections.Immutable.ImmutableDictionary`2.AddRange(IEnumerable`1 items,MutationInput origin,KeyCollisionBehavior collisionBehavior)
   at System.Collections.Immutable.ImmutableDictionary`2.AddRange(IEnumerable`1 pairs,Boolean avoidToHashMap)
   at System.Collections.Immutable.ImmutableDictionary`2.AddRange(IEnumerable`1 pairs)
   at System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary[TSource,TKey,TValue](IEnumerable`1 source,Func`2 keySelector,Func`2 elementSelector,IEqualityComparer`1 keyComparer,IEqualityComparer`1 valueComparer)
   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`2.MoveItemsInNamespaceAsync[TNamespaceDeclarationSyntax,TNamedTypeDeclarationSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`2.MoveTypeToNamespaceAsync[TNamespaceDeclarationSyntax,TNamedTypeDeclarationSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceCodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOperationsAsync(&lt;Unknown Parameters&gt;)
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass17_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35506</IssueID>
    <RepoID>1</RepoID>
    <Title>Change accessibility of explicit implementations in interfaces to 'private'.</Title>
    <Description>Related to #32054.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35505</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix formatting for switch expression is doing nothing</Title>
    <Description>**Version Used**: 16.1.0 Preview 3 [28829.227.d16.1]

```C#
        public static AbstractMoveToNamespaceCodeAction Generate(IMoveToNamespaceService changeNamespaceService, MoveToNamespaceAnalysisResult analysisResult)
            =&gt; analysisResult.Container switch
            {
                MoveToNamespaceAnalysisResult.ContainerType.NamedType =&gt; (AbstractMoveToNamespaceCodeAction)new MoveTypeToNamespaceCodeAction(changeNamespaceService, analysisResult),
                MoveToNamespaceAnalysisResult.ContainerType.Namespace =&gt; new MoveItemsToNamespaceCodeAction(changeNamespaceService, analysisResult),
                _ =&gt; throw ExceptionUtilities.UnexpectedValue(analysisResult.Container)
            };
```

Produces IDE0055. Clicking the light bulb &gt; fix formatting does nothing


![7139bdc3-8352-4be6-a2c9-86c84b2d3830](https://user-images.githubusercontent.com/475144/57167103-61dca580-6db1-11e9-93b7-ec592f88c84e.gif)
</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>31/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35504</IssueID>
    <RepoID>1</RepoID>
    <Title>Optimize codegen for pattern index access</Title>
    <Description>Pattern System.Index indexers currently call GetOffset on the System.Index
argument, even if the argument is hat operator. If the argument is a hat
operator, we can skip the creation of the intermediate System.Index type
and directly emit the offset calculation.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35503</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix logging for option value change</Title>
    <Description>I have verified this fix with VS telemetry monitor.
@heejaechang @jasonmalinowski 

@jinujoseph @vatsalyaagrawal Need to take this to shiproom for 16.1, our telemetry for option change is broken.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35502</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData.json in master</Title>
    <Description>**Copied from https://github.com/dotnet/roslyn/pull/35497 but for `master`**

Seems we are missing the entry for new release/dev16.1-vs-deps branch, which might be causing optprof run failure</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35501</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35500</IssueID>
    <RepoID>1</RepoID>
    <Title>Add external access APIs for legacy code analysis</Title>
    <Description>Implements the APIs required to complete #35080.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35499</IssueID>
    <RepoID>1</RepoID>
    <Title>More external access</Title>
    <Description>Add external access projects for additional partners.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>20/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35498</IssueID>
    <RepoID>1</RepoID>
    <Title>Use .NET Standard API for named pipes on Unix</Title>
    <Description>Use new pipe API for compiler server on Unix

The default behavior for the NamedPipeServerStream API is to take a pipe
name and then construct a named pipe in the background using that name.
In Windows this involves creating a file in a special namespace in the
file system. On Unix, named pipes are implemented using Unix Domain
Sockets, which are actual files, and the CoreFX behavior is to create
them in the temporary directory. Unfortunately, Unix Domain Sockets also
often have a max path length limitation and the temporary directory
could be arbitrarily long, meaning that any attempt to create a named
pipe may fail on Unix.

To remedy this, CoreFX introduced an API which allows you to pass a full
path instead of just a pipe name. If a fully-qualifed path is passed,
the new behavior is used. We can use this functionality to improve
reliability of pipe name creation by using the "/tmp" directory on Unix,
which by the POSIX specification is always required to be a valid
temporary directory, and by using a fixed-length pipe name that is lower
than any known Unix Domain Socket path length restriction.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>05/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35497</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData.json</Title>
    <Description>Seems we are missing the entry for new release/dev16.1-vs-deps branch, which might be causing optprof run failure

@dpoeschl @tmat @jasonmalinowski @dotnet/roslyn-infrastructure 

@jinujoseph @vatsalyaagrawal For approval, this is an infra-only change</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35496</IssueID>
    <RepoID>1</RepoID>
    <Title>Add generate parameter to Generate Variable code fix options.</Title>
    <Description>Would it be possible for this list to contain an extra option, generate parameter 'configurationServiceFactory'?

![image](https://user-images.githubusercontent.com/29174528/57149204-1c28d880-6dc3-11e9-9a63-e0ec04a35d09.png)

</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>27/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35495</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate IntelliCode IVTs to the External Access pattern</Title>
    <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* [Microsoft.VisualStudio.Completion.Tests](https://devdiv.visualstudio.com/DevDiv/_git/Pythia?path=%2Fsrc%2FPythiaExt%2FPythia.csproj)

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35494</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve diagnostic messaging for unused value assignment and unused p…</Title>
    <Description>…arameter diagnostics

Fixes #35203

1. Improve the message for unused value assignment diagnostic to make it clear that we are flagging an unnecessary assignment, not an unused variable
2. Add descriptions for unused value assignment and unused parameter diagnostics to allow users to specify special discard symbol names that are respected by the analyzer. There are various cases where user wants to retain unused parameters (signature compat, documentation) and unnecessary assignments to locals (ease of debugging), but do not want to blanket suppress these diagnostics.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35493</IssueID>
    <RepoID>1</RepoID>
    <Title>Question: How to add the class itself as reference to CSharpCompilation</Title>
    <Description>I want to add the entire program as a reference to my CSharpCompilation.
 In my case, I can NOT use 
`MetadataReference.CreateFromFile(typeof(Program).Assembly.Location),`
Because the result would be null, as I am loading a .Net inside PowerShell with 
`$asm = [Reflection.Assembly]::Load` and execute it this way:

`$type = $asm.GetType("TestApp.Program")`
`$main = $type.GetMethod("Main")`
`$main.Invoke($null, $null)`

I had few tries by converting the Assembly.GetExecutingAssembly() to bytes and then bytes to MemoryStream and tried to add that as a reference by `MetadataReference.CreateFromStream(TestStream)`
but no luck so far, it shows me the following error:
`Metadata file '&lt;in-memory assembly&gt;' could not be opened -- PE image doesn't contain managed metadata.`

Appreciate if you can help. Thank you very much!

**Edit: Using .Net 4.7.2 and Microsoft.CodeAnalysis.CSharp = v3.0.0.**

EDIT: I am converting the assembly to MemoryStream with the following code:

```byte[] bytes;
MemoryStream stream = new MemoryStream();
BinaryFormatter formatter = new BinaryFormatter();
formatter.AssemblyFormat = System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Full;
formatter.Serialize(stream, typeof(Program).Assembly);
bytes = stream.ToArray();
Stream TestStream= new MemoryStream(bytes);```</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>04/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35492</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove legacy IVTs</Title>
    <Description>Closes #35071
Closes #35072
Closes #35090
Closes #35091
Closes #35098</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35491</IssueID>
    <RepoID>1</RepoID>
    <Title>[C# 8.0]" Simplify dispose statement" removes whitespace from indented arguments</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

``` C#
            using (StreamReader value = new StreamReader("")) // &lt;!-- Simplify using
            {
                if (Foo(
                    "String1",
                    "String2",
                    "String3"))
                    { 
                    
                    Console.WriteLine("Foo");
                }
            }
```
**Expected Behavior**:

``` C#

            using StreamReader value = new StreamReader("");
            if (Foo(
                "String1",
                "String2",
                "String3"))
            {

                Console.WriteLine("Foo");
            }
```
**Actual Behavior**:

``` C#
            using StreamReader value = new StreamReader("");
            if (Foo(
"String1",
"String2",
"String3"))
            {

                Console.WriteLine("Foo");
            }
```
</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35490</IssueID>
    <RepoID>1</RepoID>
    <Title>Local functions has problem with callie resolving</Title>
    <Description>Using VS ’17 E I got badly resolved callee from withing local function if local function has same name as method called.

1. [Image](http://software919.sweb.cz/Local%20Method%20Error.png)
2. Example

    void MethodX()
    {
      void WriteData() { WriteData(3); }
    }
    void WriteData(int number)  {   }</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35489</IssueID>
    <RepoID>1</RepoID>
    <Title>[C# 8.0] Make local function static removes preceding blank line</Title>
    <Description>**Version Used**: 
Version 16.1.0 Preview 4.0 [28901.261.d16.1stg]

**Steps to Reproduce**:


``` C#
            return Task.FromResult(result);

            (bool designTime, bool designTimeShared) GetDesignTimePropsForItem(IImmutableDictionary&lt;string, string&gt; item)
            {
              
            }
```

**Expected Behavior**:
``` C#
            return Task.FromResult(result);

            static (bool designTime, bool designTimeShared) GetDesignTimePropsForItem(IImmutableDictionary&lt;string, string&gt; item)
            {
       
            }
```
**Actual Behavior**:
``` C#
            return Task.FromResult(result);
            static (bool designTime, bool designTimeShared) GetDesignTimePropsForItem(IImmutableDictionary&lt;string, string&gt; item)
            {
       
            }
```

</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>02/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35488</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression in 16.1] Static field naming rules have started applying to constants</Title>
    <Description>This is a regression in 16.1. 

We have different rules for static fields vs consts, in 16.1 the former has started enforcing the latter.

**Version Used**: 
VS 15.9: No warning
VS 16.0: No warning
VS 16.1: Warning

**Steps to Reproduce**:

.editorconfig
```
dotnet_naming_rule.parameters_must_be_camel_cased.symbols                                             = parameter_symbols
dotnet_naming_rule.parameters_must_be_camel_cased.style                                               = camel_case_style
dotnet_naming_rule.parameters_must_be_camel_cased.severity                                            = warning

dotnet_naming_rule.constants_must_be_pascal_cased.symbols                                             = constant_symbols
dotnet_naming_rule.constants_must_be_pascal_cased.style                                               = pascal_case_style
dotnet_naming_rule.constants_must_be_pascal_cased.severity                                            = warning

dotnet_naming_rule.private_static_fields_must_be_camel_cased_and_prefixed_with_s_underscore.symbols   = private_static_field_symbols
dotnet_naming_rule.private_static_fields_must_be_camel_cased_and_prefixed_with_s_underscore.style     = camel_case_and_prefix_with_s_underscore_style
dotnet_naming_rule.private_static_fields_must_be_camel_cased_and_prefixed_with_s_underscore.severity  = warning

dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.symbols   = private_field_symbols
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.style     = camel_case_and_prefix_with_underscore_style
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.severity  = warning

# Symbols
dotnet_naming_symbols.externally_visible_symbols.applicable_kinds                                     = class,struct,interface,enum,property,method,field,event,delegate
dotnet_naming_symbols.externally_visible_symbols.applicable_accessibilities                           = public,internal,friend,protected,protected_internal,protected_friend,private_protected

dotnet_naming_symbols.interface_symbols.applicable_kinds                                              = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities                                    = *

dotnet_naming_symbols.parameter_symbols.applicable_kinds                                              = parameter
dotnet_naming_symbols.parameter_symbols.applicable_accessibilities                                    = *

dotnet_naming_symbols.constant_symbols.applicable_kinds                                               = field
dotnet_naming_symbols.constant_symbols.required_modifiers                                             = const
dotnet_naming_symbols.constant_symbols.applicable_accessibilities                                     = *

dotnet_naming_symbols.private_static_field_symbols.applicable_kinds                                   = field
dotnet_naming_symbols.private_static_field_symbols.required_modifiers                                 = static,shared
dotnet_naming_symbols.private_static_field_symbols.applicable_accessibilities                         = private

dotnet_naming_symbols.private_field_symbols.applicable_kinds                                          = field
dotnet_naming_symbols.private_field_symbols.applicable_accessibilities                                = private

# Styles
dotnet_naming_style.camel_case_style.capitalization                                                   = camel_case

dotnet_naming_style.pascal_case_style.capitalization                                                  = pascal_case

dotnet_naming_style.camel_case_and_prefix_with_s_underscore_style.required_prefix                     = s_
dotnet_naming_style.camel_case_and_prefix_with_s_underscore_style.capitalization                      = camel_case

dotnet_naming_style.camel_case_and_prefix_with_underscore_style.required_prefix                       = _
dotnet_naming_style.camel_case_and_prefix_with_underscore_style.capitalization                        = camel_case

dotnet_naming_style.pascal_case_and_prefix_with_I_style.required_prefix                               = I
dotnet_naming_style.pascal_case_and_prefix_with_I_style.capitalization                                = pascal_case
```

``` C#
    class Program
    {
        private const string Bar = "Foo";
        
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
```

**Expected Behavior**:
No warning

**Actual Behavior**:
```
Severity	Code	Description	Project	File	Line	Suppression State
Warning	IDE1006	Naming rule violation: Missing prefix: 's_'	ConsoleApp413	C:\Users\davkean\Source\Repos\ConsoleApp413\ConsoleApp413\Program.cs	8	Active

```
</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35487</IssueID>
    <RepoID>1</RepoID>
    <Title>CS7038: 'Failed to emit module' declaring and then assigning `ReadOnlySpan&lt;char&gt;`</Title>
    <Description>**Version Used**: 
3.100.19.20907 (01f3eb10)

**Steps to Reproduce**:

Compile this.
```C#
void FailToEmitDll(ReadOnlySpan&lt;char&gt; span) {
    ReadOnlySpan&lt;char&gt; temp;
    temp = 1 switch
    {
        _ =&gt; span
    };
}
```
**Expected Behavior**:
It compiles.

**Actual Behavior**:
`1&gt;CSC : error CS7038: Failed to emit module 'Tests'.`

**Workaround**
Change the declaration-and-assignment of `temp` to read:
```
var temp = 1 switch (…)
```
Similar to #33275.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35486</IssueID>
    <RepoID>1</RepoID>
    <Title>made default namespace Solution/Project APIs public</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/35173

This will allow OmniSharp (and by proxy, C# extension in VS Code) to offer SyncNamespace refactoring.

Just putting this out there 😇</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35485</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn compilation doesnt go hand-in-hand with MSBuild</Title>
    <Description>**Version Used**: 
15.0
**Steps to Reproduce**:

1. Add a #pragma suppression in code for warning type CS0618 (obsolete field/property use)
2. Roslyn compilation actually fails and in the .sarif output, it spits out this violation s a warning but also indicates that its suppressed in source.
3. MSBuild "thinks" compilation succeeded as this warning is suppressed in code. But because roslyn compilation actually fails, the output assembly is not generated. MSBuild throws no compliation errors when actually the assembly has not been compiled.

**Expected Behavior**:
MSBuild should show compilation error as roslyn has actually not compiled it. 
**Actual Behavior**:
No compilation error is shown unless the following is added to the .csproj &lt;WarningsNotAsErrors&gt;CS0618&lt;/WarningsNotAsErrors&gt;</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35483</IssueID>
    <RepoID>1</RepoID>
    <Title>Update analyzers to follow recommended patterns</Title>
    <Description>* Fix violations of RS1025 (Configure generated code analysis)
* Fix violations of RS1026 (Enable concurrent execution)

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35482</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of CA2237 (Mark ISerializable types with serializable)</Title>
    <Description>This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35481</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.EditorFeatures.UnitTests</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35480</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.EditorFeatures</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>20/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35479</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.CSharp.Features</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35478</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.VisualBasic.Features</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35477</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.UnitTests</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35476</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.VisualBasic.Workspaces</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35475</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.CSharp.Workspaces</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35474</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35473</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.1-vs-deps
git reset --hard upstream/release/dev16.1-vs-deps
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35472</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.VisualBasic</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35471</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Roslyn.Test.Utilities</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35470</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.Workspaces</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35469</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.CSharp</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35468</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35467</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of RS1024 in Microsoft.VisualStudio.LanguageServices</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35466</IssueID>
    <RepoID>1</RepoID>
    <Title> Use expected syntax for intentional reference equality test</Title>
    <Description>This is a prerequisite to updating our diagnostic analyzer package in #35439.

The new `ISymbol` comparison analyzer (RS1024) has exclusions in it for the most common patterns used in C# compiler code for intentionally comparing symbols using reference equality. The cast-to-object pattern was established primarily because the C# compiler code almost always operates on concrete symbol types, and these types have an overridden `operator==`. This change updates the outlying cases, typically cases where the cast-to-object was unnecessary due to the use of interfaces as operands, to follow the patterns used elsewhere in the code.

In addition to the C# cases, there is one outlier case in VB code. The VB compiler code does not have a pattern for intentional reference comparison of `ISymbol`, so the analyzer allows the use of `Is` and `IsNot` for *concrete* symbol types (classes that implement `ISymbol`). This does not impact user scenarios because concrete symbol types are only allowed inside the compiler itself. All of the VB compiler code uses concrete types to interfaces for performance, so this was the only case that couldn't be automatically handled by the analyzer.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35465</IssueID>
    <RepoID>1</RepoID>
    <Title>🧹 Fix incorrect inheritance of MEF export attributes</Title>
    <Description>This pull request updates our exporting attributes to correctly represent their MEF inheritance behavior.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35464</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix mismatched use of MEF 1 and 2</Title>
    <Description>This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35463</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix lambda lowering for cast to generic ReadOnlySpan&lt;T&gt;</Title>
    <Description>Fixes #31685

The problem to be solved is to generate good code for
``` c#
ReadOnlySpan&lt;byte&gt; s = new byte[] { 1, 2, 3 };
```

There is an implicit conversion operator declared in `ReadOnlySpan&lt;T&gt;` that converts from `T[]` to `ReadOnlySpan&lt;T&gt;`.  However, in the particular case above we would like to elide creation of the array and create a read-only span that wraps the underlying data in the assembly.  There are primitives for doing this.

This was previously done in the compiler by eliding the lowering of the conversion to a bound call.  Lowering would instead preserve the user-defined conversion in the tree.  Then, in emit we would recognize that particular conversion and either perform the optimization if possible, or simply produce a call to the conversion method.  However, that had an unfortunate side-effect (bug), which this PR addresses.

Normally, the lowering phase would translate an invocation of a user-defined conversion operator into a `BoundCall`.  Subsequent phases of the compiler that need to rewrite symbols (such as lambda lowering and iterator rewriting, when the enclosing method is generic) would inherit the proper handling of rewriting symbols from the bound tree rewriter that is generated from `BoundNodes.xml`.  Unfortunately, the symbol appearing inside the conversion is not rewritten by that generated code, and there is no simple way to make it do so.  The bug report #31685 describes symptoms of this underlying issue.

There are a number of approaches one could take to address this issue:
1. Attempt to rehabilitate the original approach by extending the generated rewriter to handle conversions that may contain symbols.  That would require extending a few internal APIs and the bound tree rewriter.
2. Have the emit phase recognize a call to this particular conversion operator, and perform the optimization on that basis.
3. Add a new `BoundNode` that represents this particular optimizable pattern (which we would lower to), and let the generated bound node rewriter handle the contained symbol in subsequent phases where needed.

The approach here takes the third approach.  We back out the implementation of the optimization and add a new implementation based on a newly added bound node.
</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35462</IssueID>
    <RepoID>1</RepoID>
    <Title>Be resilient to project-system throwing when we try to inform it about 'designer' attributes in the BG.</Title>
    <Description>Continuation of https://github.com/dotnet/roslyn/pull/35383.  

As far as the relevant parties can tell, there is no way to really call SetProjectItemDesignerTypeAsync without having to deal with a potential ObjectDisposedException because of the project being unloaded.  

The change makes us resilient to that exception, while allowing us to get the most benefit of the new async API.  Primarily, being able to both call it on the BG, and to call it concurrently (since the project system will batch calls).  </Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35461</IssueID>
    <RepoID>1</RepoID>
    <Title>made error navigation and de-duplication a bit better with mapped span…</Title>
    <Description>… error such as

// A.cs having
// #line 2 RandomeFile.txt
//       ErrorHere
// #line default

previously, we didn't do the de-dup correctly and navigate correctly.

now, it at least do that better. but there is still question wehther current behavior is what we want or not.

...

handle this situation better - https://github.com/dotnet/roslyn/issues/35448

and root issue - https://github.com/dotnet/roslyn/issues/34950</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35460</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix typo in OptProf test name</Title>
    <Description>Fix typo in the test class name, this is why the new test wasn't picked up

https://devdiv.visualstudio.com/DevDiv/_git/VS?path=%2Fsrc%2FTests%2FManagedLangs%2FOptProfTests.cs&amp;version=GBmaster&amp;line=15&amp;lineStyle=plain&amp;lineEnd=16&amp;lineStartColumn=1&amp;lineEndColumn=1

@tmat 
@vatsalyaagrawal @jinujoseph This is a infrastructure only change</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35459</IssueID>
    <RepoID>1</RepoID>
    <Title>Use boxed `TypeWithAnnotations` instead of builder</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/35450</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35458</IssueID>
    <RepoID>1</RepoID>
    <Title>The Deconstruct method should optionally return Boolean</Title>
    <Description>Fir example:

```c#
public static bool Deconstruct&lt;T&gt;(this T[] arr, out T item0, out T item1)
{
    if (arr.Length != 2)
    {
        item0 = item1 = default; // ref parameters would be useful here, no need to initialize out parameters
        return false;
    }

    item0 = arr[0];
    item1 = arr[1];

    return true;
}
```

Actually, it can be more then just Boolean. It be can some IDeconstructionResult, but at least Boolean can be really useful.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35457</IssueID>
    <RepoID>1</RepoID>
    <Title>Clicking rapidly on Intellisense suggestion box scroll arrows causes it to close unexpectedly</Title>
    <Description>VSF_TYPE_MARKDOWNClicking at about the rate of a double click on the scroll bar arrows closes the intellisense suggestion box, rather than scrolling.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/551321/clicking-rapidly-on-intellisense-suggestion-box-sc.html
VSTS ticketId: 859269_
_These are the original issue comments:_

Visual Studio Feedback System on 4/29/2019, 09:27 PM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35456</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove support for base access with explicit base type.</Title>
    <Description>Related to #32054.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35455</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35454</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.1-vs-deps
git reset --hard upstream/release/dev16.1-vs-deps
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35453</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35452</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35451</IssueID>
    <RepoID>1</RepoID>
    <Title>Review uses of `Interlocked` writes on multiple fields</Title>
    <Description>The following pattern is not thread-safe:
```C#
// initialization
Interlocked.CompareExchange(ref a, ...);
Interlocked.CompareExchange(ref b, ...); // when b is set, the initialization is considered complete
```
```C#
// consumption
if (b != null)
    Use(a);
```
because the runtime may re-order reads in the consumption code:
```C#
var temp = a;
if (b != null)
    Use(temp);
```

We need to review the codebase for instances of this pattern.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35450</IssueID>
    <RepoID>1</RepoID>
    <Title>Use `StrongBox&lt;TypeWithAnnotations&gt;` instead of `TypeWithAnnotations.Builder`</Title>
    <Description>We discussed three patterns:
1.	Piecemeal Interlock (implemented by https://github.com/dotnet/roslyn/pull/35373)
2.	Lock
3.	StrongBox&lt;TypeWithAnnotations&gt;

The downside of (1) is that, if we have a bug where two threads want to set different values, we could end up in a very strange mixed state (parts of struct initialized by one thread, and other parts by the other).
Comparing (3) and (2), both require allocations, but (3) is more lightweight (no lock) and also more similar to our current pattern for reference types.
We decided to use (3).
</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35449</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix having the wrong syntax trees after adding an .editorconfig </Title>
    <Description>Adding an .editorconfig requires us to update the compilation with new syntax trees that contain the per-tree diagnostic options for the compiler. When I created the CompilationTranslationAction, I accidentally passed the old ProjectState instead of the new ProjectState which meant we'd remove and re-add all the old trees instead of the new trees.



### Customer scenario

Customer tries to turn on our new .editorconfig support. After adding a new .editorconfig, Visual Studio might crash.

### Bugs this fixes

Bug not filed; discovered during other feature work.

### Workarounds, if any

It's limited to new code, so you can turn off the new support, but that kinda defeats the point.

### Risk

Low, and is restricted to new codepaths that are under the feature flag.

### Performance impact

None.

### Is this a regression from a previous update?

No, new feature code.

### Root cause analysis

A typo in a function, and we didn't (yet) have the tests in place. There are now tests.

### How was the bug found?

Feature validation testing.

</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35448</IssueID>
    <RepoID>1</RepoID>
    <Title>duplicated items from build and live errors for #line pragma</Title>
    <Description>```csharp
using System;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
#line 2 "Test.txt"
            Console.WriteLin("Hello World!"); // Intentional typo to show error
#line default
        }
    }
}
```

build and we get this
![image](https://user-images.githubusercontent.com/1333179/57100533-07b9e280-6cd4-11e9-95cf-40b207a62336.png)

we shouldn't have duplicated item.
</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35447</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to release/dev16.1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into release/dev16.1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-release/dev16.1-vs-deps
git reset --hard upstream/release/dev16.1-vs-deps
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-release/dev16.1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35446</IssueID>
    <RepoID>1</RepoID>
    <Title>Code generation involving some literals does not work correctly</Title>
    <Description>For instance, I want to generate something like:

```C#
class A
{
    public A() : this(2.0d)
    {
    }

    public A(double value)
    {
    }
}
```

What we do with ``value`` is really beside the point. The point is the ``double`` literal ``d`` is dropped from the ``Literal`` specification. As is the ``f`` if I wanted to specify a ``float`` literal.

There are ``double`` and ``float`` versions of ``Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal``, right? i.e.

```C#
public static SyntaxToken Literal(float value);
public static SyntaxToken Literal(double value);
```

By contrast, the ``long`` version of the same *does* respect the literal specification, i.e. ``2L``,

```C#
public static SyntaxToken Literal(long value);
```
</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35445</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable Deconstruction in foreach loops:</Title>
    <Description>- Visit deconstruction in foreach loops, rather than handling it directly
- Add / update tests

Fixes https://github.com/dotnet/roslyn/issues/35131
Fixes https://github.com/dotnet/roslyn/issues/33017</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35444</IssueID>
    <RepoID>1</RepoID>
    <Title>`for (;;)` should not be reformatted as `for (; ; )`</Title>
    <Description>**Version Used**: 16.0.3

This has bugged me way back in VS2017 or earlier. I tend to use `while (true)` now, but touching codebases (mine or others') with `for (;;)` is a pain.

Moving @CyrusNajmabadi's [comment](https://github.com/dotnet/csharplang/issues/2475#issuecomment-487769142):

&gt; &gt; An alternative is for (;;), but various tools reformat it to for (; ; ) and it looks like a hack.
&gt; 
&gt; This seems like an IDE bug. I went and looked at the code here and it loos like we try to support this, but then it fails spectacularly. We legit check:
&gt; 
&gt; ```cs
&gt;             // Semicolons in an empty for statement.  i.e.   for(;;)
&gt;             if (previousParentKind == SyntaxKind.ForStatement
&gt;                 &amp;&amp; this.IsEmptyForStatement((ForStatementSyntax)previousToken.Parent))
&gt;             {
&gt; ```
&gt; 
&gt; So we know it's empty, but then we go and just do random stuff with the spacing. As if anyone would actually want `for (; ; )` here. Very bizarre.

@sharwell's [comment](https://github.com/dotnet/csharplang/issues/2475#issuecomment-487775162):

&gt; The behavior has changed a few times. During a review of [DotNetAnalyzers/StyleCopAnalyzers#633](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/633) we determined that the `for` syntax is rarely used in C# code.
&gt; 
&gt; We intentionally chose `for (; ;)` as the formatting in StyleCop Analyzers ([DotNetAnalyzers/StyleCopAnalyzers#1489](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/1489)).

</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35443</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch expressions cannot infer shared type</Title>
    <Description>**Version Used**: 
Visual Studio Version 16.0.3 + dotnet core 3.0.100-preview3-010431

**Steps to Reproduce**:

```csharp
object Foo(string x)
{
    return x switch
    {
        "a" =&gt; 1,
        "b" =&gt; "hi",
        _ =&gt; throw null
    };
}
```

**Expected Behavior**:

Given the signature of `Foo`, the compiler should be able to infer that the return type of the `switch` expression is `object`.

**Actual Behavior**:

The compiler returns error

&gt; CS8506 C# No best type was found for the switch expression.

If I add a cast to `object` in any of the cases in the `switch` statement (e.g. `"a" =&gt; (object)1`) then the code compiles.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35442</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

## From https://github.com/dotnet/arcade
- **Build**: 20190501.6
- **Date Produced**: 5/2/2019 7:15 AM
- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19251.6

## From https://github.com/dotnet/arcade
- **Build**: 20190502.2
- **Date Produced**: 5/2/2019 7:00 PM
- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19252.2

</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35441</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35440</IssueID>
    <RepoID>1</RepoID>
    <Title>"Initialize Interactive with Project" should also hook up app.config/web.config of the project</Title>
    <Description>**Version Used**: Visual Studio 2019 16.0.3

**Steps to Reproduce**:

1. Run "Initialized Interactive with Project" from a web application with connection strings in the web.config
2. Instantiate a EF6 DbContext
3. Try using it

**Expected Behavior**:

The connection strings from the web.config of the project I ran "Initialize Interactive with Project" on are used.

**Actual Behavior**:
```
&gt; #reset
Resetting execution engine.
Loading context from 'CSharpInteractive.rsp'.
[...]
&gt; #r "eCS.PaRK.dll"
&gt; using eCS.PaRK;
&gt; AppDomain.CurrentDomain.SetupInformation.ConfigurationFile
"c:\\devel\\vs2019\\common7\\ide\\commonextensions\\microsoft\\managedlanguages\\vbcsharp\\interactivecomponents\\InteractiveHost64.exe.config"
&gt; var entities = new eCS.PaRK.Model.PaRKEntities();
&gt; entities.BOM.FirstOrDefault()
No connection string named 'PaRKEntities' could be found in the application config file.
  + System.Data.Entity.Internal.LazyInternalConnection.get_ConnectionHasModel()
  + System.Data.Entity.Internal.LazyInternalContext.InitializeContext()
  + System.Data.Entity.Internal.InternalContext.Initialize()
  + System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(System.Type)
  + InternalSet&lt;TEntity&gt;.Initialize()
  + InternalSet&lt;TEntity&gt;.get_InternalContext()
  + DbQuery&lt;TResult&gt;.System.Linq.IQueryable.get_Provider()
  + System.Linq.Queryable.FirstOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)
```</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35439</IssueID>
    <RepoID>1</RepoID>
    <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
    <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35438</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposal: member of type optimization for simplifier</Title>
    <Description>The following hypothesis might be usable for optimizing the simplifier:

&gt; When attempting to simplify `T.X` to `X` in any scope, where `T` is a named type, one of the following must be true for the simplification to succeed (necessary but not sufficient):
&gt;
&gt; 1. `T` is a containing type of the current binder
&gt; 2. A `using static` directive for `T` is provided

@jaredpar @gafter can you evaluate this hypothesis for correctness with respect to C# and VB?</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35437</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposal: symbol group equivalence optimization for simplifier</Title>
    <Description>The following hypothesis might be usable for optimizing the simplifier:

&gt; When attempting to simplify `A.B.C` in any scope, if the set of symbols named `C` within the current binder is non-empty and only contains symbols in the container `A.B`, then the qualified reference `A.B.C` may be simplified to `C`.

@jaredpar @gafter can you evaluate this hypothesis for correctness with respect to C# and VB?</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35436</IssueID>
    <RepoID>1</RepoID>
    <Title>"go to definition" generated from metadata renders [NullableAttribute]</Title>
    <Description>**Version Used**: 
16.1.0 Preview 2.0 [28822.285.d16.1

**Steps to Reproduce**:
Create an assembly that uses nullable annotations.  Then reference that assembly from a project, use a symbol from it, and go to definition.  Rather than seeing nullable annotations, the compiler-generated attributes show up:
![image](https://user-images.githubusercontent.com/2642209/57054586-6dba5180-6c63-11e9-96c9-bb9623e17d69.png)

cc: @dotnet/nullablefc </Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35435</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 15.9.7 InvalidOperationException Unexpected Null</Title>
    <Description>Occured in VS 15.9.7

While typing in the IDE I got the follow error: ExtractMethodCodeRefactoringProvider encountered an error and has been disabled. Here is the stacktrace:

```
System.InvalidOperationException : Unexpected Null
   at Roslyn.Utilities.Contract.ThrowIfNull[T](T value,String message)
   at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.ExpressionCodeGenerator.GetCallSiteContainerFromExpression()
   at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpMethodExtractor.CSharpCodeGenerator.ExpressionCodeGenerator.GetOutermostCallSiteContainerToProcess(CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&amp;lt;Unknown Parameters&amp;gt;)
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/464228/vs-1597-invalidoperationexception-unexpected-null.html
VSTS ticketId: 796901_
_These are the original issue comments:_

Visual Studio Feedback System on 2/21/2019, 00:31 AM (69 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35434</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid caching VS completion item</Title>
    <Description>Due to several reasons:

1. VS item holds a reference to CompletionSource, which holds a references to ITextView. We don't want to keep it alive. Also we have no control on how CompletionSource is used by Editor, so there might be problems too.

2. VS item has a property bag, which might contains anything.

I misunderstood how CWT work earlier, it turns out the CWT based cache is holding VS items alive indefinitely (released only when Roslyn item cache is cleared)

We need to talk to editor team to figure out the best solution, meanwhile, this change caches the data required to creating VS item instead. This way, we will pay the cost of creating a new VS completion item every time, but still avoid the cost of calculating those data based on cached Roslyn completion item.

I will update the PR with profiling data later. But so far, the perf of this change passed my eye test, no noticeable perf issue found.

@CyrusNajmabadi @jasonmalinowski @dpoeschl Please review.

@jinujoseph @vatsalyaagrawal I think this fix is a must-have for 16.1.

---


**Customer and scenario info**

**Who is impacted by this bug?**
Users who turned on import completion

**What is the customer scenario and impact of the bug?**
Memory leak. There might be other issues caused by this when user use import completion we haven't found, since the VS item cached contains a old completion source.

**What is the workaround?**
Don't turn on Import Completion

**How was the bug found?**
dogfooding

**If this fix is for a regression - what had regressed, when was the regression introduced, and why was the regression originally missed?**

No, this feature is added in 16.1</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35433</IssueID>
    <RepoID>1</RepoID>
    <Title>Debugger shows property as field</Title>
    <Description>Fixes https://developercommunity.visualstudio.com/content/problem/507057/debugger-shows-property-as-field.html</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35432</IssueID>
    <RepoID>1</RepoID>
    <Title>Change msbuild property to "Nullable"</Title>
    <Description>From LDM today (5/1/2019), we landed on `Nullable` rather than `NullableContextOptions` or `NullableReferenceTypes`.
The property should be a string, since it will accept "enable", "disable" and a couple other values.

Tagging @KathleenDollard @rainersigwald to confirm the name is okay in the msbuild ecosystem.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35431</IssueID>
    <RepoID>1</RepoID>
    <Title>False CA2000</Title>
    <Description>**Version Used**: 2.9.2

**Steps to Reproduce**:

Minimum repro (referencing Microsoft.PowerShell.SDK):

```c#
    public sealed class ModuleFixture : IDisposable
    {
        readonly Runspace _runspace;

        public ModuleFixture()
        {
            var state = InitialSessionState.CreateDefault();

            // This bypasses the execution policy (InitialSessionState.ExecutionPolicy isn't available with PowerShell 5)
            state.AuthorizationManager = new AuthorizationManager("Microsoft.PowerShell");

            _runspace = RunspaceFactory.CreateRunspace(state);
            _runspace.Open();
        }

        public void Dispose()
        {
            _runspace.Dispose();
        }
    }
```

**Expected Behavior**:

No warning. The runspace is disposed with the ModuleFixture.

**Actual Behavior**:

CA2000 warning on `RunspaceFactory.CreateRunspace(state)`.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35430</IssueID>
    <RepoID>1</RepoID>
    <Title>Partially infer generic arguments to generic 'extension' methods</Title>
    <Description>In my project we are using quite some fluent api's and it would be nice if the compiler / language can partly invert generic parameters based on passed arguments. This to make code better readable.

```
namespace Test
{
	public class Program
	{
		public static void Main()
		{
			var api = new Original&lt;int&gt;();
			
			// this is what I have to write
			var extended = api.Extend&lt;int, long&gt;();
			
			// but it would be nice if I could write the following because the first generic parameter could be inverted from the passed argument
			// var extended = api.Extend&lt;long&gt;();
		}
	}

	public interface IMyFluidApi&lt;T&gt;
	{
		void Print();
	}

	public class Original&lt;T&gt; : IMyFluidApi&lt;T&gt;
	{
		public void Print() =&gt; Console.WriteLine(typeof (T).FullName);
	}

	public class Wrapper&lt;T, TExtended&gt; : IMyFluidApi&lt;T&gt;
	{
		private readonly IMyFluidApi&lt;T&gt; _original;
		public Wrapper(IMyFluidApi&lt;T&gt; original) =&gt; _original = original;
		public void Print() =&gt; Console.WriteLine(typeof (TExtended).FullName);
	}

	public static class MyClassExtensions
	{
		public static IMyFluidApi&lt;T&gt; Extend&lt;T, TExtended&gt;(this IMyFluidApi&lt;T&gt; api) =&gt; new Wrapper&lt;T, TExtended&gt;(api);
	}
}
```</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35429</IssueID>
    <RepoID>1</RepoID>
    <Title>False "remove unused fields" &amp; methods from XAML events</Title>
    <Description>**Version Used**: latest

**Steps to Reproduce**:

1. Clone https://github.com/NuGetPackageExplorer/NuGetPackageExplorer
2. Look at the information roslyn detects

**Expected Behavior**:
It should not have suggestions for removing unused parameters from event handlers where the signature matters. It also misses one event entirely and sees it as unused.

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/1427284/57051494-c7b11c00-6c4f-11e9-8140-79f4393a6897.png)
</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35428</IssueID>
    <RepoID>1</RepoID>
    <Title>Add nullable annotations to Roslyn CodeAnalysis public APIs</Title>
    <Description>We should place proper nullable annotations on the public APIs of the compilers.

(Though possibly not on the APIs that have sources in VB)
</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35427</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove some restrictions for base access expression.</Title>
    <Description>- Allow ```base(object)``` in interfaces
- System.Object members should be available of off ```base(&lt;some interface type&gt;)```.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35426</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35425</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35424</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio 2019: in Console App cannot use unicode \u8377 or \u20B9</Title>
    <Description>VSF_TYPE_MARKDOWNit gives me console. Writeline(&amp;quot;\u8377&amp;quot;); gives result: ?

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/540833/visual-studio-2019-in-console-app-cannot-use-unico.html
VSTS ticketId: 852172_
_These are the original issue comments:_

Visual Studio Feedback System on 4/22/2019, 01:24 AM (9 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35423</IssueID>
    <RepoID>1</RepoID>
    <Title>Add import completion telemetry</Title>
    <Description>1.  Some refactoring of LogAggregator and add a new statistic log aggregator which doesn't require keeping all the data points. 
2. Change import completion provider to use new log aggregator, to reduce telemetry events
~~3. Add telemetry for measuring VS item cache hit rate~~

This replaces the per completion session telemetry event with a new per VS session event `vs/ide/vbcs/intellisense/completionproviders/data`, which include the following properties. Those numbers show us

1. statistics about the number of references of the project triggered the completion
2. statistics about the number of unimportant types for all completion sessions
3. statistics about the total time spent in the type import completion provider for each session

```
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionitemcount.count
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionitemcount.maximum
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionitemcount.mean
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionitemcount.minimum
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionitemcount.range
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionreferencecount.count
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionreferencecount.maximum
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionreferencecount.mean
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionreferencecount.minimum
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionreferencecount.range
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionticks.count
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionticks.maximum
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionticks.mean
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionticks.minimum
vs.ide.vbcs.intellisense.completionproviders.data.typeimportcompletionticks.range
```


@jinujoseph @vatsalyaagrawal This is telemetry change, can we get this for 16.1?

FYI @heejaechang @dpoeschl @dotnet/roslyn-ide 

-----


**Customer and scenario info**
**Who is impacted by this bug?**
Us. This change reduces the number of telemetry events from one per completion session to one per VS session.
**What is the customer scenario and impact of the bug?**
N/A
**What is the workaround?**
N/A
**How was the bug found?**
N/A
**If this fix is for a regression - what had regressed, when was the regression introduced, and why was the regression originally missed?**
N/A</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35422</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure unimplemented interface members are reported even in presence of unification warnings</Title>
    <Description>
    </Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35421</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up YAML</Title>
    <Description>Going forward our release branches will all be under release/*. This
adds a glob for release/* so future release branches will just work. It
also removes all the old branches to which this change will not flow.</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35420</IssueID>
    <RepoID>1</RepoID>
    <Title>No add reference option</Title>
    <Description>No add reference option appears after right-click reference

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/498243/no-add-reference-option.html
VSTS ticketId: 823203_
_These are the original issue comments:_

Visual Studio Feedback System on 3/19/2019, 11:51 PM (42 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35419</IssueID>
    <RepoID>1</RepoID>
    <Title>Tool Tips reporting erronious information</Title>
    <Description>VSF_TYPE_MARKDOWNTool Tips is reporting that a type variable with the same name as a class is the class.

Example code:
```
void Main()
{
	var thing1 = new MyFoo();
	var thing2 = new Record();
	var thing3 = new Bar();
	Console.WriteLine(thing1.Method(thing2));
	Console.WriteLine(thing1.Method(thing3));
}

public abstract class Foo
{
	public abstract int Method&amp;lt;T&amp;gt;(T input) where T : IFoo;
}

public interface IFoo
{
	bool Set { get; }
}

public class Bar : IFoo
{
	public bool Set =&amp;gt; false;
}

public class Record : IFoo
{
	public bool Set =&amp;gt; true;
}

public class MyFoo : Foo
{
	public override int Method&amp;lt;Record&amp;gt;(Record input)
	{		
		if (input.Set)
			return 1;
			
		return 0;
	}
}
```

Tool tips is showing that for this line: `public override int Method&amp;lt;Record&amp;gt;(Record input)` 'Record' is the class Record and not a type variable called 'Record', which is confusing. If things were as the tool tips is reporting than this line: `Console.WriteLine(thing1.Method(thing3));` should throw a compiler error. But the program runs just fine.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/525287/tool-tips-reporting-erronious-information.html
VSTS ticketId: 843615_
_These are the original issue comments:_

Visual Studio Feedback System on 4/10/2019, 00:49 AM (21 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35418</IssueID>
    <RepoID>1</RepoID>
    <Title>Update language feature status</Title>
    <Description>
    </Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35417</IssueID>
    <RepoID>1</RepoID>
    <Title>Getting IDE0008 while casting to an obvious type </Title>
    <Description>**Version Used**: 
Visual Studio 2019 16.0.3
.NET 4.7.2

**Steps to Reproduce**:
I have this code `var id = (ulong?)reader.ReadAsDecimal();` and it's giving me an IDE0008 warning.  This is not at all right as I can clearly see that the casted type will be a nullable ulong.

**Expected Behavior**:
I should not be getting IDE0008

**Actual Behavior**:
I'm getting IDE0008</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35416</IssueID>
    <RepoID>1</RepoID>
    <Title>Hebrew Character handling in Visual Studio 2019</Title>
    <Description>VSF_TYPE_MARKDOWNHey support,

I was making a console application in visual studio and wanted to use some unicode characters.
After inserting the (ﬡ) 'Hebrew Litter Wide Alef' (U+FB21) in the Console.WriteLine(&amp;quot;ﬡ&amp;quot;); method, I wasn't able to remove the character when I wanted to. This may be related to the right-left reading of the alphabet in other languages.

Kind regards,

Carlos Schipper

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/531862/hebrew-character-handling-in-visual-studio-2019.html
VSTS ticketId: 847290_
_These are the original issue comments:_

Visual Studio Feedback System on 4/15/2019, 02:00 AM (16 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35415</IssueID>
    <RepoID>1</RepoID>
    <Title>"Use Auto Property" should not fade fields as unnecessary</Title>
    <Description>VSF_TYPE_MARKDOWNIf a field is only set in the constructor and accessed in a property declared with an arrow, then the field higlight will be the same as for unused fields; however, using a real getter which access the field does indeed display the correct syntax highlighting.


```
public class Foo
{
    public Foo(int x)
    {
        this.a = x;
        this.b = x;
    }

    public int A =&amp;gt; this.a;
    public int B { get { return this.b; } }

    private readonly int a; // incorrectly colorized as if it were not being used
    private readonly int b; // correctly colorized
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/530412/incorrect-syntax-coloring-for-used-field.html
VSTS ticketId: 846287_
_These are the original issue comments:_

Visual Studio Feedback System on 4/12/2019, 02:08 AM (19 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35414</IssueID>
    <RepoID>1</RepoID>
    <Title>Expand Complete Statement to complete delegate declaration statements</Title>
    <Description>Fixes #34051</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35413</IssueID>
    <RepoID>1</RepoID>
    <Title>Parallel.ForEach double tab snippet is wrong</Title>
    <Description>VSF_TYPE_MARKDOWNIn Visual Studio 2019, open a CSharp project.
In a .cs file, type **Parallel.ForE**, then, the autocompletion will show you &amp;quot;Parallel.Foreach&amp;quot; and suggest you to press the Tab key twice to insert the snippet.

However, if you press Tab twice, the snippet is the &amp;quot;foreach&amp;quot; snippet and not the &amp;quot;Parallel.ForEach&amp;quot; snippet.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/549971/parallelforeach-double-tab-snippet-is-wrong.html
VSTS ticketId: 857791_
_These are the original issue comments:_

Visual Studio Feedback System on 4/29/2019, 00:09 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35412</IssueID>
    <RepoID>1</RepoID>
    <Title>Return original and suppressed nullability for `!` operator</Title>
    <Description>Currently, when you `SemanticModel.GetTypeInfo` an expression `e!`, the resulting `Nullability` and `ConvertedNullability` are both `NotNull`.  However, it would be possible for us to return the "original" nullability, so that for example in an expression such as `null!` we return `MayBeNull` for the original nullability and `NotNull` for the converted nullability.

See also https://github.com/dotnet/roslyn/pull/35384
</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35411</IssueID>
    <RepoID>1</RepoID>
    <Title>Use more robust initialization for TypeWithAnnotations.Builder (#35373)</Title>
    <Description>(cherry picked from commit c421f1249d1c2ba94e7703037ec49b4341f3b9f4)</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35410</IssueID>
    <RepoID>1</RepoID>
    <Title>Bump version for the next 16.0 servicing release.</Title>
    <Description>
    </Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35409</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharp_FixupSpanDuringResolvableConflict_NeedsEscaping failed in CI</Title>
    <Description>https://dev.azure.com/dnceng/public/_build/results?buildId=175271&amp;view=logs</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35408</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove "safeonly" options for nullable ref types feature</Title>
    <Description>At LDM today we decided to remove the "safe only" options (that are essentially the same as the enabled option with CS8600 disabled).  We'll write something telling people how and why to control CS8600 separately.
</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>18/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35407</IssueID>
    <RepoID>1</RepoID>
    <Title>Merges/master to features/lsp support</Title>
    <Description>automatic bot didn't work due to conflicts. doing manual FI.</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35406</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable: Cannot use a type without a warning - constraint always fails</Title>
    <Description>**Version Used**: 
sharplab with master (Apr 30)

**Steps to Reproduce**:

```csharp
#nullable enable
using System;

public interface IEquatable2&lt;T&gt;
{
  bool Equals(T a, T b);
}

public class Foo: IEquatable2&lt;Foo?&gt;
{
  public bool Equals(Foo? a, Foo? b)
  {
    return true;
  }
}

public class Bar&lt;T&gt; where T : IEquatable2&lt;T&gt;
{
}

public class C {
    public void M() {
      Type a = typeof(Bar&lt;Foo&gt;);
      Type b = typeof(Bar&lt;Foo?&gt;);
    }
}
```

**Expected Behavior**:

No warnings.

**Actual Behavior**:

2 Warnings:

```
    warning CS8631: The type 'Foo' cannot be used as type parameter 'T' in the generic type or method 'Bar&lt;T&gt;'. Nullability of type argument 'Foo' doesn't match constraint type 'IEquatable2&lt;Foo&gt;'.
    warning CS8631: The type 'Foo?' cannot be used as type parameter 'T' in the generic type or method 'Bar&lt;T&gt;'. Nullability of type argument 'Foo?' doesn't match constraint type 'IEquatable2&lt;Foo?&gt;'.
```

Sorry for the title but it's hard to write a sentence from above repro

cc: @dotnet/nullablefc </Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35405</IssueID>
    <RepoID>1</RepoID>
    <Title>Add an apply colors button to re-apply enhanced colors</Title>
    <Description>The PR adds a button to the Text Editor &gt; C# / Basic &gt; Advanced options pages that will forcibly apply colors for the classifications targeted by enhanced colors. It applies Enhanced Colors or Defaults Colors based on the state of the `use enhanced colors` checkbox. 

![apply enhanced colors](https://user-images.githubusercontent.com/611219/57033083-d2909000-6c00-11e9-934a-1f2d1ce31c29.gif)

Closes https://github.com/dotnet/roslyn/issues/33708</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35404</IssueID>
    <RepoID>1</RepoID>
    <Title>IPackageInstallerService queries the source for NuGet, for what purpose? </Title>
    <Description>Follow up to https://github.com/dotnet/roslyn/pull/35364. 

The service that recommends packages based on the APIs used queries nuget for the sources enabled? 

What's the purpose of this? 
Does it query the sources on its own, or is it used to simply pass them back to nuget when calling the IVSPackageInstaller/IVSPackageInstaller2 APIs. 

@sharwell </Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35403</IssueID>
    <RepoID>1</RepoID>
    <Title>Project cleanup</Title>
    <Description>
    </Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35402</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense on lambdas as method arguments in Visual Studio 2019 is not working</Title>
    <Description>VSF_TYPE_MARKDOWN
```
public void Test(Action&lt;IOption&gt; act)
{
    ...
}

public void Consume()
{
    Test(opt =&gt; opt.
}        
```

The intellisense popup when dotting opt in the above example, is the intellisense for the action delegate and not the IOption parameter.

Doing the following works fine

`Action&lt;IOption&gt; act = opt =&gt; opt. Something();`

So it's only when used as a parameter for a method call that the problem exists.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/550945/intellisense-on-lambdas-as-method-arguments-in-vis.html
VSTS ticketId: 859078_
_These are the original issue comments:_

Visual Studio Feedback System on 4/29/2019, 07:53 PM (38 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35401</IssueID>
    <RepoID>1</RepoID>
    <Title>Replace Static Symbol with specific Static Identifier classifications</Title>
    <Description>Because the of how the VS Editor works, the additive `Symbol - Static` classification would get precedence over the identifier type classifications. In these cases, it would be impossible for users to make all classes bold without making also making all static symbols bold, since static classes would also be tagged as static symbols.

This PR creates individual static identifier type classifications for the identifiers that were being tagged as static symbols. This also removes the concept of additive classifications.

Closes https://github.com/dotnet/roslyn/issues/32770
Closes https://github.com/dotnet/roslyn/issues/35400</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35400</IssueID>
    <RepoID>1</RepoID>
    <Title>Bold font doesn't work on static class names</Title>
    <Description>VSF_TYPE_MARKDOWNWhen I set bold font on `User Types - Classes` option, it affects only non-static class names.

What is expected: It affects all class names, static and non-static. This behavior was in VS2017, now it is broken.

I've also noticed a new option -- `Symbol - static`. But it doesn't help me since it makes names of static members bold. However, I want to have class names bold, but the method names to be normal, like it was in VS2017.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/519110/bold-font-doesnt-work-on-static-class-names.html
VSTS ticketId: 840070_
_These are the original issue comments:_

Sergey Tetkin on 4/4/2019, 05:58 PM (26 days ago): &lt;p&gt;In addition to my initial message.&lt;/p&gt;&lt;p&gt;How it looks now:&lt;/p&gt;&lt;p&gt;&lt;img src="https://developercommunity.visualstudio.com/storage/attachments/66734-vs2019-02.png"&gt;&lt;/p&gt;&lt;p&gt;How I expect to see it:&lt;/p&gt;&lt;p&gt;&lt;img src="https://developercommunity.visualstudio.com/storage/attachments/66735-vs2017-01.png"&gt;&lt;/p&gt;

Visual Studio Feedback System on 4/8/2019, 01:51 AM (23 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 4/8/2019, 07:26 PM (22 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

Joey Robichaud [MSFT] on 4/22/2019, 03:18 PM (8 days ago): &lt;p&gt;This issue has been identified as a duplicate of an earlier reported feedback linked here:  https://developercommunity.visualstudio.com/content/problem/513865/fonts-and-colors-setting-for-identifier.html . If you reported or voted here, your vote has been applied to the original issue. Everyone else can add their vote directly at the above linked feedback. Voting helps increase the priority of the issue by consolidating customer impact under one feedback. Thank you!&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35399</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35398</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35397</IssueID>
    <RepoID>1</RepoID>
    <Title>use the source instead of the name to find nuget packages</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/27010</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35396</IssueID>
    <RepoID>1</RepoID>
    <Title>Update yml files for `release/*` branches</Title>
    <Description>
    </Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35395</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData for "release/" branch prefix</Title>
    <Description>
    </Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35394</IssueID>
    <RepoID>1</RepoID>
    <Title>NullReferenceException in CodeElementCache when the .cs extension is exported from an extension</Title>
    <Description>When I create a VS extension that exports a content type for the .cs extension, VS crashes when a .cs file is opened. The crash is in Microsoft.VisualStudio.CodeSense.Roslyn.CodeElementCache.

Extension code:

```
using System.ComponentModel.Composition;
using Microsoft.VisualStudio.Utilities;

internal static class FileAndContentTypeDefinitions
{
    [Export]
    [Name(&amp;quot;CSharpE&amp;quot;)]
    [BaseDefinition(&amp;quot;CSharp&amp;quot;)]
    internal static ContentTypeDefinition cSharpEContentTypeDefinition;

    [Export]
    [FileExtension(&amp;quot;.cs&amp;quot;)]
    [ContentType(&amp;quot;CSharpE&amp;quot;)]
    internal static FileExtensionToContentTypeDefinition cSharpEFileExtensionDefinition;
}
```

Full extension project is in an attachment.

Exception stack trace:

```
System.NullReferenceException
   at Microsoft.VisualStudio.CodeSense.Roslyn.CodeElementCache+&amp;lt;RebuildAsync&amp;gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.VisualStudio.CodeSense.Editor.Roslyn.CodeElementTagger+&amp;lt;UpdateSnapshotAsync&amp;gt;d__15.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(System.Threading.Tasks.Task)
   at Microsoft.VisualStudio.CodeSense.Editor.Tagger`1+&amp;lt;&amp;gt;c__DisplayClass22_1+&amp;lt;&amp;lt;UpdateSnapshotAsync&amp;gt;b__0&amp;gt;d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at System.Threading.Tasks.AlmTaskExtensions+&amp;lt;FireAndForget&amp;gt;d__1.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+&amp;lt;&amp;gt;c.&amp;lt;ThrowAsync&amp;gt;b__6_0(System.Object)
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory+SingleExecuteProtector.TryExecute()
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory+SingleExecuteProtector+&amp;lt;&amp;gt;c.&amp;lt;.cctor&amp;gt;b__20_0(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)
   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
   at MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext, System.Threading.ContextCallback, System.Object)
   at System.Windows.Threading.DispatcherOperation.Invoke()
   at System.Windows.Threading.Dispatcher.ProcessQueue()
   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)
   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/347756/nullreferenceexception-in-codeelementcache-when-th.html
VSTS ticketId: 695305_
_These are the original issue comments:_

Jinu Joseph [MSFT] on 10/7/2018, 05:03 AM (206 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

Visual Studio Feedback System on 5/1/2019, 02:22 AM (7 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35393</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense window is incorrectly sized</Title>
    <Description>**Version Used**: latest

**Steps to Reproduce**:
Turn on the experimenal intellisense completion feature. Type `new X` 

**Expected Behavior**:
IntelliSense dialog is sized correctly


**Actual Behavior**:
Dialog is too narrow until you scroll, then it resizes correctly. Initially it cuts off the namespaces. My display is set at 200% display scaling.

![image](https://user-images.githubusercontent.com/1427284/57019717-3f059200-6bf5-11e9-8d5d-a5e4266949c9.png)

/cc @davkean </Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35392</IssueID>
    <RepoID>1</RepoID>
    <Title>Test Method not catching an exception, thus not producing a result.</Title>
    <Description>This thrown exception at [DesktopRuntimeEnviroment.cs#L245](https://github.com/dotnet/roslyn/blob/8b154a48f7e867747599a04f5e2481f4956011c8/src/Test/Utilities/Portable/Platform/Desktop/DesktopRuntimeEnvironment.cs#L245) can cause the method `CompileAndVerify` to not produce a result at all. I'd expect all exceptions to be caught with these methods. 

Note: True this result is due to *(me)* producing an incorrect lowering for the feature. Any how this isn't about that but the issue with the test runner.
[Code](https://github.com/AdamSpeight2008/roslyn-AdamSpeight2008/tree/Failures/ContinueForID)

Set breakpoint [here](https://github.com/AdamSpeight2008/roslyn-AdamSpeight2008/blob/c543e255205bfd9744023397bd7b7ca5ac9b2738/src/Compilers/VisualBasic/Test/Semantic/Binding/Binder_Statements_Tests.vb#L872)
Set breakpoint [here](https://github.com/AdamSpeight2008/roslyn-AdamSpeight2008/blob/c543e255205bfd9744023397bd7b7ca5ac9b2738/src/Compilers/VisualBasic/Test/Semantic/Binding/Binder_Statements_Tests.vb#L910)
Test this unit test with debug. (as if you are stepping through the code.)
I'd expect the second breakpoint `End Sub` to be hit.</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>14/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35391</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35390</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35389</IssueID>
    <RepoID>1</RepoID>
    <Title>Nulalble enum constraint</Title>
    <Description>**Version Used**: 
C# 7.3 (on Framework 4.7.2 and Core 2.2)

**Steps to Reproduce**:
1. Create a project, set C# version to 7.3
2. Declare method
```cs
public void MethodWithEnum&lt;T&gt;(T? arg) where T : Enum { }
```

**Expected Behavior**:
Method which works only with Nullable enums

**Actual Behavior**:
**CS8627** - A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.
**CS8652** - The feature 'nullable reference types' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version.

**Workaround**:
`public static void MethodWithEnum&lt;T&gt;(T? arg) where T : struct, Enum { }`

Nullable&lt;T&gt; has constraint `where T : struct` but can be used with enum.
In C# 7.3 it is possible to use `where T : Enum`:
```cs
enum MyEnum
{
    Value
}
public static void Method&lt;T&gt;(T arg) where T : Enum { }
public static void Main()
{
    MyEnum? value = null;
    Method(value.Value);
}
```

Therefore, the following code should work correctly: `public static void MethodWithEnum&lt;T&gt;(T? arg) where T : Enum { }`</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35388</IssueID>
    <RepoID>1</RepoID>
    <Title>check whether existing analyzer that return true for OpenFileOnly is returning right value</Title>
    <Description>some have concerns that some analyzers return wrong value for OpenFileOnly (http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/Diagnostics/IBuiltInAnalyzer.cs,28)

so someone should go through all our analyzers to check whether they return correct value.</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35387</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense for the Is pattern match</Title>
    <Description>Using `is` pattern matching expression is a convenient way to check not null and define a new local variable:
```csharp
List&lt;int&gt; list = new List&lt;int&gt;();
if (list is List&lt;int&gt; notnullList)
{

}
```
It would be nice if there is a intellisense for the type `List&lt;int&gt;` after typing the space after `is` since the type of the variable `list` is already known. In the case of left side of `is` is a expression, the intellisense could be even more helpful to infer the return type of the expression.
</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35386</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor Code Model for OOP</Title>
    <Description>Split the implementation into two parts - one that only operates on Roslyn syntax and semantic nodes and is VS independent, and the other that constructs code model objects from `SyntaxNodeKey`. Move the former to OOP and communicate with VS using `SyntaxNodeKey`.</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35385</IssueID>
    <RepoID>1</RepoID>
    <Title>merge features/nested-stackalloc</Title>
    <Description>This code was previously reviewed in the feature branch features/nested-stackalloc.  We are treating it as a language "bug fix".

@dotnet/roslyn-compiler Please check for any unexpected merge artifacts.
</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35384</IssueID>
    <RepoID>1</RepoID>
    <Title>GetTypeInfo on suppressed expressions should return the type from the underlying expression</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32661. Added a note to https://github.com/dotnet/roslyn/issues/35046 that this behavior needs to be documented.

@dotnet/roslyn-compiler @gafter for review.</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35383</IssueID>
    <RepoID>1</RepoID>
    <Title>fixed issue where analyzer run after project is already removed from VS.</Title>
    <Description>fix https://github.com/dotnet/roslyn/issues/35360

### Customer scenario

User has CPS project opened in a VS, and user unloaded the project and a while later, VS crashes.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/35360

### Workarounds, if any

None.

### Risk

Low. since fix is simply catching the exception and ignore. risk should be low.

### Performance impact

No significant impact.

### Is this a regression from a previous update?

Yes.

### Root cause analysis

we added support for the designer attribute such as "form" for CPS in https://github.com/dotnet/roslyn/pull/34785 but missed exception handling where the CPS project is already unloaded at the time we do the actual analysis.

this fix basically detects such case (exception) and ignore the exception.

### How was the bug found?

dogfooding
</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>35382</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
</Issues>
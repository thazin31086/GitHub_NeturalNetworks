<PullRequests>
  <PullRequest>
    <IssueID>33191</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>Marusyk</FixedByID>
    <Title>Remove calls to empty RuntimeHelpers.PrepareConstrainedRegions()</Title>
    <Description>Remove calls to empty `RuntimeHelpers.PrepareConstrainedRegions()`

Issue #33179 

Skipped (please let me know if need some action on these):

- System.DirectoryServices.Protocols
- System.Diagnostics.EventLog
- System.Data.OleDb
- System.Data.Odbc
- [src/libraries/Common/src/System/Diagnostics/NetFrameworkUtils.cs](https://github.com/dotnet/runtime/blob/master/src/libraries/Common/src/System/Diagnostics/NetFrameworkUtils.cs#L67)
- [src/installer/managed/Microsoft.NET.HostModel/AppHost/MachOUtils.cs](https://github.com/dotnet/runtime/blob/master/src/installer/managed/Microsoft.NET.HostModel/AppHost/MachOUtils.cs#L203)
- [src/coreclr/tests/src/GC/Performance/Tests/LowLatencyTest.cs](https://github.com/dotnet/runtime/blob/master/src/coreclr/tests/src/GC/Performance/Tests/LowLatencyTest.cs#L112)
- System.Reflection.Metadata - reverted

Please review,
Thank you in advance</Description>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33191</PullRequestID>
        <IssueID>33179</IssueID>
        <Title>Remove calls to empty RuntimeHelpers.PrepareConstrainedRegions()</Title>
        <Description>There are ~140 calls to RuntimeHelpers.PrepareConstrainedRegions(). In .NET Core this has no implementation. The calls can be removed.

https://source.dot.net/#System.Private.CoreLib/RuntimeHelpers.cs,5bb48d7700e1ad2e,references

(Except in libraries that we still ship for .NET Framework, except I don't believe any of these are calls from those.)</Description>
        <CreatedDate>04/03/2020</CreatedDate>
        <ClosedDate>16/03/2020</ClosedDate>
        <Labels>
          <Label>area-Meta</Label>
          <Label>easy</Label>
          <Label>untriaged</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33182</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[arm][ios] Follow branch islands when determining method entry addresses.</Title>
    <Description>!! This PR is a copy of mono/mono#19126,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Fixes https://github.com/mono/mono/issues/18612; `aot_code_low_addr` and
`aot_code_high_addr` were set to a range that included only first-level
branch islands, so `find_aot_module` would fail early when passed a
genuine function address.

This change only affects monotouch for now.

Why not use relative offsets stored in a read-only section? One reason
is that llvm-as cannot handle a `.long` directive containing a
subtraction expression involving externally-defined symbols. The AOT
method address table and AOT LLVM-generated code are currently emitted
in separate object files, so the method address table would include
expressions with undefined symbols.

Related: https://xamarin.github.io/bugzilla-archives/70/707/bug.html</Description>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>09/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33182</PullRequestID>
        <IssueID>19126</IssueID>
        <Title>FxCop: 3 types in System.Security.Permissions have incorrect or missing serialization constructors</Title>
        <Description>This came from running FxCop analyzers on corefx. Reproduce steps found [here](https://gist.github.com/alexperovich/eabc4e9053ee8aca5bcda8caa379ea87).

"E:\corefx\src\src.builds" (default target) (1) -&gt;
"E:\corefx\src\System.Security.Permissions\src\System.Security.Permissions.builds" (Build target) (415) -&gt;
"E:\corefx\src\System.Security.Permissions\src\System.Security.Permissions.csproj" (Build target) (416) -&gt;
  System\Security\XmlSyntaxException.cs(17,18): error CA2229: Declare serialization constructor for sealed type XmlSyntaxException as private [E:\corefx\src\System.Security.Permissions\src\System.Security.Permissions.csproj]
  System\Security\Policy\Hash.cs(11,33): error CA2229: Serializable type Hash doesn't have a serialization constructor [E:\corefx\src\System.Security.Permissions\src\System.Security.Permissions.csproj]
  System\Security\Policy\HashMembershipCondition.cs(11,33): error CA2229: Serializable type HashMembershipCondition doesn't have a serialization constructor [E:\corefx\src\System.Security.Permissions\src\System.Security.Permissions.csproj]
</Description>
        <CreatedDate>27/10/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Security</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33175</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jashook</FixedByID>
    <Title>Run crossgen in parallel in crossgen_comparison.py</Title>
    <Description>This will hopefully reduce the runtime of crossgen_compairision.py and address #33172 </Description>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>26/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33175</PullRequestID>
        <IssueID>33172</IssueID>
        <Title>Reduce the run time of crossgen_comparison</Title>
        <Description>Currently the crossgen comparison job takes anywhere between 30 minutes and 2 hours. Ideally the corssgen comparison runtime should be ~5 minutes.

The quicker the helix submission finishes the less contention there will be on the arm queue.</Description>
        <CreatedDate>04/03/2020</CreatedDate>
        <ClosedDate>26/03/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33161</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>briansull</FixedByID>
    <Title>Added PerfScore support for IF_LARGExxx instruction formats</Title>
    <Description>Fixes #33138 </Description>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33161</PullRequestID>
        <IssueID>33138</IssueID>
        <Title>Test failure in JIT/Regression/VS-ia64-JIT/V1.2-M02/b28158/b28158/b28158.sh</Title>
        <Description>failed in job: [runtime-coreclr outerloop 20200303.6](https://dev.azure.com/dnceng/public/_build/results?buildId=545440&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=17260168&amp;resultId=105964&amp;paneView=debug)


Error message:
`
\nAssert failure(PID 8876 [0x000022ac], Thread: 8876 [0x22ac]): Assertion failed '!"PerfScore: unhandled instruction"' in 'test:Main():int' during 'Emit code' (IL size 267730)\n\n File: /__w/6/s/src/coreclr/src/jit/emit.cpp Line: 1145\n Image: /root/helix/work/correlation/crossgen\n\n/root/helix/work/workitem/JIT/Regression/VS-ia64-JIT/V1.2-M02/b28158/b28158/b28158.sh: line 157: 8876 Aborted __Command=$_DebuggerFullPath "$CORE_ROOT/crossgen" /Platform_Assemblies_Paths $CORE_ROOT:$PWD /in b28158.org /out b28158.dll\nManaged assembly not found: No such file or directory\n\nReturn code: 1\nRaw output file: /root/helix/work/workitem/JIT/Regression/Reports/JIT.Regression/VS-ia64-JIT/V1.2-M02/b28158/b28158/b28158.output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nPerfScore: unhandled instruction: adr, format IF_LARGEADR\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun b28158.dll ''\nin ReleaseLock\nExpected: 100\nActual: 255\nEND EXECUTION - FAILED\nTest Harness Exitcode is : 1\nTo run the test:\n&gt; set CORE_ROOT=/root/helix/work/correlation\n&gt; /root/helix/work/workitem/JIT/Regression/VS-ia64-JIT/V1.2-M02/b28158/b28158/b28158.sh\nExpected: True\nActual: False
`</Description>
        <CreatedDate>04/03/2020</CreatedDate>
        <ClosedDate>04/03/2020</ClosedDate>
        <Labels>
          <Label>arch-arm64</Label>
          <Label>area-CodeGen-coreclr</Label>
          <Label>os-linux</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33137</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>alanisaac</FixedByID>
    <Title>Additional code coverage in System.Text.Json - no public constructors</Title>
    <Description>Part of #32341

Added tests covering cases where deserializing collections without a public, parameterless constructor should throw a `NotSupportedException`.</Description>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33137</PullRequestID>
        <IssueID>32341</IssueID>
        <Title>Help get System.Text.Json test coverage to 100% (or close to it)</Title>
        <Description>Let's try to get the test coverage of all components of the JSON stack closer to 100%, where feasible. 
We are in pretty good shape (well over 90%+). It tends to be much easier to maintain the bar once we hit 100% since any drop becomes clear/visible.

One component that is effectively at 100% is `JsonElement`. Let's see if we can get there for the rest.

That said, we shouldn't bend over backwards to try to get to 100% for things like testing all the conditions of a `Debug.Asserts` or return line after a throw. If some code is unreachable or not used, update/delete it.

**Some test improvements are relatively easy to do, so I encourage folks who want to help contribute to `System.Text.Json` to start there.** Others might require more work to bridge the test gap.

``

**Here are some good starting points:**
1) JsonDocumentOptions
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/Document/JsonDocumentOptions.cs#L12
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74575890-90410100-4f3d-11ea-8465-915f9258ba39.png)

2) JsonHelpers
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/JsonHelpers.cs#L12
- [ ] a) 
![image](https://user-images.githubusercontent.com/6527137/74576082-5ae8e300-4f3e-11ea-9971-d02d4655a73e.png)
- [x] b)
![image](https://user-images.githubusercontent.com/6527137/74576101-69cf9580-4f3e-11ea-892a-324d16b4f4db.png)
- [ ] c)
![image](https://user-images.githubusercontent.com/6527137/74576111-705e0d00-4f3e-11ea-93bd-42ac793c918f.png)
- [ ] d)
![image](https://user-images.githubusercontent.com/6527137/74576127-823fb000-4f3e-11ea-8368-e831991fa1e1.png)

3) JsonClassInfo
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonClassInfo.cs#L17
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74575800-304a5a80-4f3d-11ea-9863-3b8cd2da9f70.png)
- [x] b)
![image](https://user-images.githubusercontent.com/6527137/74575813-43f5c100-4f3d-11ea-8fd8-357158ec440b.png)
- [ ] c)
![image](https://user-images.githubusercontent.com/6527137/74575828-55d76400-4f3d-11ea-8a0f-9e404966450f.png)

4) JsonPropertyInfo
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonPropertyInfo.cs#L14
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576152-94b9e980-4f3e-11ea-8d48-f33598b02e9f.png)

5) JsonPropertyInfoOfTTypeToConvert
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonPropertyInfoOfTTypeToConvert.cs#L14
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576187-ae5b3100-4f3e-11ea-9343-4ad968f6779f.png)

6) JsonReaderHelper
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/Reader/JsonReaderHelper.cs#L13
- [x] a)
![image](https://user-images.githubusercontent.com/6527137/74576240-d9de1b80-4f3e-11ea-8219-8d3a46c40307.png)

7) JsonSerializer
https://github.com/dotnet/runtime/blob/527adf211a45046876d680480e45131b5334fcf6/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Read.HandleMetadata.cs#L10
- [x] a)
![image](https://user-images.githubusercontent.com/6527137/74576415-79031300-4f3f-11ea-9809-ac9476b2ad99.png)
- [ ] b)
![image](https://user-images.githubusercontent.com/6527137/74576351-3ccfb280-4f3f-11ea-9b02-f6a8950488db.png)
- [ ] c)
![image](https://user-images.githubusercontent.com/6527137/74576396-6d175100-4f3f-11ea-8235-686224c13a8f.png)
- [ ] d)
![image](https://user-images.githubusercontent.com/6527137/74576426-86200200-4f3f-11ea-91a1-3b9fe2f22854.png)
- [ ] e)
![image](https://user-images.githubusercontent.com/6527137/74576434-91732d80-4f3f-11ea-8e65-7e3130d218c3.png)
- [x] f)
![image](https://user-images.githubusercontent.com/6527137/74576440-9d5eef80-4f3f-11ea-9702-f3284a13805c.png)

8) JsonSerializerOptions
https://github.com/dotnet/runtime/blob/527adf211a45046876d680480e45131b5334fcf6/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializerOptions.cs#L15
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576453-ae0f6580-4f3f-11ea-9318-3572e57f50d9.png)

9) ArrayConverter
https://github.com/dotnet/runtime/blob/527adf211a45046876d680480e45131b5334fcf6/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/Converters/Collection/ArrayConverter.cs#L14
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576494-d72ff600-4f3f-11ea-8658-0a94794b053f.png)

10) ConcurrentStackOfTConverter
https://github.com/dotnet/runtime/blob/527adf211a45046876d680480e45131b5334fcf6/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/Converters/Collection/ConcurrentStackOfTConverter.cs#L11
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576522-fcbcff80-4f3f-11ea-92c9-4727db1a0a5f.png)

11) JsonConverterOfT.cs
https://github.com/dotnet/runtime/blob/b95e523a3003a5744506239ceaac2aafa3ac9a9d/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonConverterOfT.cs#L14
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576556-355cd900-4f40-11ea-8d04-9ffd25ec2003.png)
- [ ] b)
![image](https://user-images.githubusercontent.com/6527137/74576562-3beb5080-4f40-11ea-8d0f-1e2812086f9e.png)
- [ ] c)
![image](https://user-images.githubusercontent.com/6527137/74576573-43125e80-4f40-11ea-8494-3b425f8d2be8.png)


cc @Jozkee, @layomia, @steveharter </Description>
        <CreatedDate>14/02/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Text.Json</Label>
          <Label>easy</Label>
          <Label>increase-code-coverage</Label>
          <Label>test enhancement</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33132</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>MBurtsev</FixedByID>
    <Title>ConcurrentDictionary perfomance optimization</Title>
    <Description>This PR addresses [#33131](https://github.com/dotnet/runtime/issues/33131)

The performance optimization ConcurrentDictionary&lt;TKey, TValue&gt;. </Description>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33132</PullRequestID>
        <IssueID>33131</IssueID>
        <Title>ConcurrentDictionary perfomance optimization</Title>
        <Description>Lock-Free hash table implementation. 
1. [Article](https://www.linkedin.com/pulse/lock-free-hash-table-maksim-burtsev/)
2. [Benchmarks](https://github.com/MBurtsev/MBur.ConcurrentDictionary)
3. All tests passed
``

API changes:
This class was written from scratch. The new design does not use concurrencyLevel for load balancing. Therefore, users no longer need to pay attention to this. In this regard, 3 new constructors without concurrencyLevel were added. Older constructors also work, but they are marked as obsolete. In addition, another overload of AddOrUpdate (TKey key, TValue addValue, TValue updateValue) was added. 
Thus, the new class is fully compatible with the existing code that used it.</Description>
        <CreatedDate>04/03/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Collections</Label>
          <Label>tenet-performance</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33120</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Convert PLT table and call site to execute only on AMD64.</Title>
    <Description>!! This PR is a copy of mono/mono#19114,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Current implementation embedded critical runtime information directly into PLT slot. It also depends on finding call site in generic trampoline reading call target from instruction stream in order to locate PLT slot in use and then read GOT offset as well as PLT info offset from PLT slot instruction stream.

This is problematic on platforms where code is execute only. Fix changes how the metadata needed in order to correctly patch PLT is discovered. Instead of depending on reading instruction stream, it is loaded into R11 (scratch reg free to be used when calling through PLT on AMD64) in PLT slot before jmp takes place that moves control over to generic trampoline.

The PLT slot is the only place where we have access to both GOT index (used in jmp) and PLT info offset (currently embedded after jmp instruction) and since both are 32-bit indexes, they are combined into a 64-bit imm constant that is moved directly into register. That should have minimal
overhead and should complete within 1 cycle and since imm constant is part of the instruction stream currently executed, it shouldn't incur any additional cache misses.

The additional load into R11 with a 64-bit imm constant will increase the size of PLT slots. Currently a PLT slot is 10 bytes, that will increase to 16 bytes (15 byte + 1 byte alignment). This is however still cheaper than alternatives that would burn 1 trampoline/PLT slot or setup lookup tables in image or calculated at runtime, all-consuming much more memory in total. Also note that using this approach is optional and runtime needs to be built using MONO_ARCH_CODE_EXEC_ONLY in order to use it, so it’s only an opt in features on platforms that can't read from the instructions stream.

Current implementation is AMD64 only, but same pattern could be applied to other architectures if needed.</Description>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>10/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33120</PullRequestID>
        <IssueID>19114</IssueID>
        <Title>Add actual net463 Target Framework Moniker</Title>
        <Description>Since it's not released yet, we're mapping `net463` to `.Net 4.6.2`. 
We need to add a .Net 4.7 TFM to enable certain tests that require APIs available only in the new version.
</Description>
        <CreatedDate>26/10/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-libraries</Label>
          <Label>enhancement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33117</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>mdh1418</FixedByID>
    <Title>[mono] Include filename in Invalid image error messages</Title>
    <Description>Fixes #31649 
Fixes #31650 

**Testing**:
Reproduced Error via
`&lt;Runtime Repo Root&gt;/build.sh /p:RuntimeFlavor=mono`
Removing `[ActiveIssue("https://github.com/dotnet/runtime/issues/31650", TestRuntimes.Mono)]` in AssemblyTests.cs
Running `dotnet msbuild /t:RebuildAndTest /p:XunitMethodName=System.Reflection.Tests.AssemblyTests.LoadFile_NoSuchPath_ThrowsFileNotFoundException`

Fixing issue resulted in no errors.</Description>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>10/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33117</PullRequestID>
        <IssueID>31649</IssueID>
        <Title>[mono] Test failed on Helix: System.Reflection.Tests.AssemblyTests.LoadFile_ValidPEBadIL_ThrowsBadImageFormatExceptionWithPath</Title>
        <Description>`System.Reflection.Tests.AssemblyTests.LoadFile_ValidPEBadIL_ThrowsBadImageFormatExceptionWithPath` fails on Helix. It will be skipped with ActiveIssue in #2087.

``</Description>
        <CreatedDate>03/02/2020</CreatedDate>
        <ClosedDate>03/03/2020</ClosedDate>
        <Labels>
          <Label>area-AssemblyLoader-mono</Label>
          <Label>runtime-mono</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33117</PullRequestID>
        <IssueID>31650</IssueID>
        <Title>[mono] Test failed on Helix: System.Reflection.Tests.AssemblyTests.LoadFile_NoSuchPath_ThrowsFileNotFoundException</Title>
        <Description>`System.Reflection.Tests.AssemblyTests.LoadFile_NoSuchPath_ThrowsFileNotFoundException` fails on Helix. It will be skipped with ActiveIssue in #2087.

``</Description>
        <CreatedDate>03/02/2020</CreatedDate>
        <ClosedDate>03/03/2020</ClosedDate>
        <Labels>
          <Label>area-AssemblyLoader-mono</Label>
          <Label>runtime-mono</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33116</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>mdh1418</FixedByID>
    <Title>Revert "[mono] Include filename in Invalid image error messages"</Title>
    <Description>Reverts dotnet/runtime#32560
Did not check the mono mirror PR! </Description>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33116</PullRequestID>
        <IssueID>32560</IssueID>
        <Title>[mono] Include filename in Invalid image error messages</Title>
        <Description>Fixes #31649 
Fixes #31650 

**Testing**:
Reproduced Error via
`&lt;Runtime Repo Root&gt;/build.sh /p:RuntimeFlavor=mono`
Removing `[ActiveIssue("https://github.com/dotnet/runtime/issues/31650", TestRuntimes.Mono)]` in AssemblyTests.cs
Running `dotnet msbuild /t:RebuildAndTest /p:XunitMethodName=System.Reflection.Tests.AssemblyTests.LoadFile_NoSuchPath_ThrowsFileNotFoundException`

Fixing issue resulted in no errors.</Description>
        <CreatedDate>19/02/2020</CreatedDate>
        <ClosedDate>03/03/2020</ClosedDate>
        <Labels>
          <Label>area-AssemblyLoader-mono</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33110</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>ManickaP</FixedByID>
    <Title>Fixed heap corruption in HttpListener</Title>
    <Description>Fixes #31997 

In non-blocking `HttpListenerResponse.Close`, `RequestContextBase` was being disposed multiple times from different threads. This fix ensures that the underlying `IntPtr` is freed only once, even in multi-threaded scenarios.

Full explanation here: https://github.com/dotnet/runtime/issues/31997#issuecomment-594020740</Description>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33110</PullRequestID>
        <IssueID>31997</IssueID>
        <Title>Heap corruption in System.Net.HttpListener tests</Title>
        <Description>Hit in https://github.com/dotnet/runtime/pull/31991 on Libraries Test Run release coreclr Windows_NT x86 Release:

Stacktrace of the crash from https://helix.dot.net/api/2019-06-17/jobs/55fc485f-ed44-4531-8009-fb6441da25d1/workitems/System.Net.HttpListener.Tests/files/dotnet.exe.1880.dmp :

``</Description>
        <CreatedDate>09/02/2020</CreatedDate>
        <ClosedDate>03/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net</Label>
          <Label>bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33104</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[Loader] Change mono_trace level from info to debug</Title>
    <Description>!! This PR is a copy of mono/mono#19110,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Fixes mono/mono#18795

**Testing:**
Created HelloWorld script
Set environment variable `export MONO_LOG_LEVEL=info`
Compiled and executed script before and after these changes were applied
```
mdhwang:~/Desktop$ ls -al csc_*txt mono_*txt
-rw-r--r--@ 1 mdhwang  staff   4270 Mar  3 10:12 csc_after.txt
-rw-r--r--@ 1 mdhwang  staff  56698 Mar  3 10:14 csc_before.txt
-rw-r--r--@ 1 mdhwang  staff    176 Mar  3 10:12 mono_after.txt
-rw-r--r--@ 1 mdhwang  staff   3617 Mar  3 10:14 mono_before.txt
```
There is a noticeable difference in log output sizes, and the logs created after the changes were applied mainly contain `Loading reference 0 of _ asmctx _` as desired in the issue.</Description>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33104</PullRequestID>
        <IssueID>19110</IssueID>
        <Title>Loading assemblies with dependencies at runtime</Title>
        <Description>Trying to implement loose coupling approach in my new application i've run into problem. 
I have a main application, an assembly with abstractions and an assembly which i want to load dynamically. The actual loading code is:

`foreach (var path in paths)
                {
                    var fullPath = Path.Combine(System.AppContext.BaseDirectory, path);
                    if (!File.Exists(fullPath)) continue;
                    var asm = AssemblyLoadContext.Default.LoadFromAssemblyPath(fullPath);
                    moduleTypes.AddRange(
                        asm.GetTypes().Where(mytype =&gt; mytype.GetInterfaces().Contains(typeof(IDynamicModule))));
                }`

After that i instatiate IDynamicModule classes and make them do some work. On the `GetTypes()` operation i'm getting an exception:
`{System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.EntityFrameworkCore, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. Не удается найти указанный файл.
File name: 'Microsoft.EntityFrameworkCore, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'}`

(Entity Framework is referenced by dynamic assembly).
Playing with framework and assembly versions i've somehow managed to load the assembly and run some code in it, but when it comes to actually working with `DbContext` i'm also getting the same exception but for `Npgsql.EntityFrameworkCore.PostgreSQL`.

Looks like there are some problems with loading assemblies that have their own references on external modules. I've implemented sample project illustrating this problem. 

https://github.com/pushist1y/ErrorReproductions/tree/master/DotNetCoreAssemblyLoading
</Description>
        <CreatedDate>26/10/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Reflection</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33104</PullRequestID>
        <IssueID>18795</IssueID>
        <Title>48 warnings during clean build</Title>
        <Description>All of them similar to:

``
</Description>
        <CreatedDate>30/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-Meta</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33102</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>MihaZupan</FixedByID>
    <Title>Return the original value in Interlocked.Or/And</Title>
    <Description>From [discussion in #33042](https://github.com/dotnet/runtime/pull/33042#discussion_r386962984) make `Interlocked.Or` and `Interlocked.And` return the original value instead of the updated one.

There aren't yet any usages in libraries that look at the returned value.

cc: @jkotas, @GrabYourPitchforks, @tannergooding</Description>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33102</PullRequestID>
        <IssueID>33042</IssueID>
        <Title>Make Uri Thread-Safe</Title>
        <Description>Fixes #19130, contributes to #24239 (I will update the docs after we ensure thread-safety across all members).

Instead of locking on a string (could have even been the same instance the user passed into the ctor) and on the `_info`, we can perform the necesarry synchronization around Flags by using Interlocked.

`UriInfo` and `MoreInfo` fields are updated without synhronization, meaning that we may perform some duplicated work but not corrupt the state, The fields are always assigned-only in one go / written to before we share the instance (for example, we will set some `UriInfo.Offset` fields before saving the local instance to the shared `_info` field),</Description>
        <CreatedDate>02/03/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Net</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33099</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[interp] Optimize delegate invokes</Title>
    <Description>!! This PR is a copy of mono/mono#19065,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33099</PullRequestID>
        <IssueID>19065</IssueID>
        <Title>Test failure: System.Net.Tests.FtpWebRequestTest/GetResponse_ServerNameNotInDns_ThrowsWebException</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.Net.Tests.FtpWebRequestTest/GetResponse_ServerNameNotInDns_ThrowsWebException` has failed.

Assert.Equal() Failure\r
    Expected: NameResolutionFailure\r
    Actual:   ConnectFailure

``

Build : Master - 20161023.01 (Core Tests)
Failing configurations:
- Windows.7.Amd64
  - AnyCPU-Debug
  - AnyCPU-Release

Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20161023.01/workItem/System.Net.Requests.Tests/analysis/xunit/System.Net.Tests.FtpWebRequestTest~2FGetResponse_ServerNameNotInDns_ThrowsWebException
</Description>
        <CreatedDate>24/10/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33098</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AndyAyersMS</FixedByID>
    <Title>JIT: remove GTF_INX_REFARR_LAYOUT</Title>
    <Description>When morphing `GT_INDEX` nodes, we were inadvertently also setting
`GTF_IND_NONFAULTING` for the `GT_IND` subtree for ref type arrays, because
`GTF_IND_NONFAULTING` has the same value as `GTF_INX_REFARR_LAYOUT`.

This turns out to be safe since in general there is an upstream bounds check to
cover the null check from the indexing operation, so the fact that we were
claiming the `GT_IND` can't fault is ok.

A no diff change would remove the `GTF_INX_REFARR_LAYOUT` flag and then modify
`fgMorphArrayIndex` to set `GTF_IND_NONFAULTING` for ref type arrays with bounds
checks:
```
    // If there's a bounds check, the the indir won't fault.
    if (bndsChk &amp;&amp; (tree-&gt;gtType == TYP_REF))
    {
        tree-&gt;gtFlags |= GTF_IND_NONFAULTING;
    }

    tree-&gt;gtFlags |= GTF_EXCEPT;
```

But there's no good reason to limit the above change to ref type arrays and no
good reason to OR in `GTF_EXCEPT` when there are bounds checks.

Once we do the more general fix we see diffs, so we might as well further clean
up the related constraint in the importer found under `REDO_RETURN_NODE`.

Closes #32647.</Description>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>07/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33098</PullRequestID>
        <IssueID>32647</IssueID>
        <Title>Delete `GTF_INX_REFARR_LAYOUT`</Title>
        <Description>This flag should be no longer needed. Deleting it is causing unexpected assembly diffs that need to be investigated. More context: https://github.com/dotnet/runtime/pull/32521#issuecomment-589567814</Description>
        <CreatedDate>21/02/2020</CreatedDate>
        <ClosedDate>07/03/2020</ClosedDate>
        <Labels>
          <Label>area-CodeGen-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33090</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>davidwrighton</FixedByID>
    <Title>Fix incorrect r2r codegen for hardware instrinsics</Title>
    <Description>Use of Vector dot product and Vector3/4 constructors may generate code that is not compatible with an SSE2 capable CPU.

This fix adjusts the set of rules for filtering the intrinsics when compiling System.Private.CoreLib, and makes the behavior in crossgen2 match that of crossgen1.

Fixes #32175 </Description>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33090</PullRequestID>
        <IssueID>32175</IssueID>
        <Title>crossgen2 codegen for with AVX instructions differs from crossgen1 generated one</Title>
        <Description>In both cases, the code was compiled with optimizations on.
One example of part of code of a method with such a difference is `System.Numerics.Matrix4x4 System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3)`:
Crossgen1:
``
There are more differences in the body of the method, this is just a small example.</Description>
        <CreatedDate>12/02/2020</CreatedDate>
        <ClosedDate>04/03/2020</ClosedDate>
        <Labels>
          <Label>area-crossgen2-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33064</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>hoyosjs</FixedByID>
    <Title>Add CrossOS DAC build back</Title>
    <Description>Fixes #32808</Description>
    <CreatedDate>02/03/2020</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33064</PullRequestID>
        <IssueID>32808</IssueID>
        <Title>Fix issues in cross-os DAC build.</Title>
        <Description>#32322 got reverted due to several issues that were impacting official builds. To get it back in we'll have to

- [x] All assets need to have unique names. This includes logs and binlogs. We could use a delayed expansion variable to prepend a `linuxdac_` to the assets needed. Not sure how to do this in some cases like arcade 
- [x] Several command-line arguments must be preserved. The original command-line was 
``

See that importantly this omits the build ID and the CI parameters, both of which are necessary so the machine state and caches are consistent and we have correct versioning information in the build. I haven't tested what happens for additional parameters used by sourcebuild.


- [x] There's a bunch of things we shouldn't be doing which we do by running the scripts twice. Make sure this doesn't happen (like generating sources, toolsets and package restores).

cc: @sdmaclea </Description>
        <CreatedDate>25/02/2020</CreatedDate>
        <ClosedDate>03/03/2020</ClosedDate>
        <Labels>
          <Label>area-Diagnostics-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33062</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[debugger] Implementing step through multithreaded code.</Title>
    <Description>!! This PR is a copy of mono/mono#19103,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;I've changed the variable the_ss_req to an array, in this array I saved all the single steps requisitions received and whenever the debugger stops in a possible singles step I get the right requisition in the array and answer it.
It is necessary to change debugger-libs together, because we can send a single step for thread A and receive an answer of thread B, so we shouldn't cancel the single step requisition for thread A, because it wasn't answered yet.
If the change in debugger-libs is not synchronised together if mono we will not have any side effect, the multithreaded step just don't work as nowadays.

Fixes mono/mono#14456

</Description>
    <CreatedDate>02/03/2020</CreatedDate>
    <ClosedDate>24/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33062</PullRequestID>
        <IssueID>19103</IssueID>
        <Title>WebUtility.HtmlDecode does not decode all HTML5 character entities</Title>
        <Description>The current character entity replace dictionary used inside WebUtility uses the entity set as defined in HTML4, see https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Extensions/src/System/Net/WebUtility.cs#L757.

However, the HTML5 spec defines additional entities, see https://www.w3.org/TR/html5/syntax.html#named-character-references.

I'm willing to send a PR to include the new named character references, if this that would be an acceptable change to the behavior of WebUtility.HtmlDecode. Any specific guidance with respect to making this change? Are there specific areas that need to be addressed?
</Description>
        <CreatedDate>26/10/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>Design Discussion</Label>
          <Label>area-System.Net</Label>
          <Label>enhancement</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33062</PullRequestID>
        <IssueID>14456</IssueID>
        <Title>Dead link in framework guidlines</Title>
        <Description>At the bottom of https://github.com/dotnet/corefx/wiki/Framework-Design-Guidelines-Digest there's a link to http://code.msdn.microsoft.com/codeanalysis which redirects and says "The Archive Gallery has been retired."
</Description>
        <CreatedDate>20/04/2015</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33060</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>elinor-fung</FixedByID>
    <Title>Support COM objects with dynamic keyword</Title>
    <Description>This is a port of the support (which is in Framework and the IronLanguages DLR) for using the dynamic keyword with COM objects.

The actual support is in `Microsoft.CSharp`. The tests are under coreclr, since that is set up to test against a native COM server. I did a couple passes to make the ported sources fit in the runtime repo (I'm sure there's more that could be done).

The vast majority of this is a simple copy of the previous support. The commits in this PR are:
- Straight copy of all the sources (first commit [21a9e9a](https://github.com/dotnet/runtime/pull/33060/commits/21a9e9a754e2453bb90a1e8a362e04460b219a28))
- Changes (next 15 commits) to get it building and working
- New tests
- Additional clean-up/consolidation to make it fit a bit better in this repo.

cc @jaredpar @cston 

Resolves #12587</Description>
    <CreatedDate>02/03/2020</CreatedDate>
    <ClosedDate>05/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33060</PullRequestID>
        <IssueID>12587</IssueID>
        <Title>Dynamic keyword not working against COM objects</Title>
        <Description>I'm working on porting one of my applications (Markdown Monster) to .NET Core 3.0 and it's going good except for my COM interop functionality that uses `dynamic` to access various COM components inside of the Web Browser control. 

Using raw Reflection instead of dynamic works, but it would be a lot of code in my case that has to be converted to make the Interop with with the more clumsy syntax and type casting.

Specifically I'm getting back objects from the Web Browser control and then use dynamic to call other functionality. All of that doesn't work with .NET Core. I previously mentioned this and at the time it looked like there was already work underway to make this work in 3.0, with no fixes scheduled for 2.x.  I talked about this in a [blog post here](https://weblog.west-wind.com/posts/2019/Jan/22/COM-Object-Access-and-dynamic-in-NET-Core-2x).  The original discussion I referenced that mentioned fixes for 3.0 where in https://github.com/dotnet/corefx/issues/32630.

But now we're in 3.0 Preview and it's still not working.

Here's what I am doing:

``



### Status
There were previous issues open on this some time ago and at the time the word was that .NET Core 3.0 was going to fix this.  It's not working on 2.x either at the time the call was won't fix for 2.x but will fix for 3.0.

Apparently it's not fixed in 3.0.

Is there any definite word on whether this will get addressed?

For me this is pretty big blocker in this app. I have tons of interop calls, and using dynamic is a key language feature that makes this code much more manageable (and also more performant due dynamic's internal caching etc) than using Reflection. 

FWIW I already have an abstraction layer around the Editor/COM interop calls, but dynamic is such a core feature that it never occurred to me to abstract that further. I think if you want decent Windows Desktop support dynamic really should be working with COM objects.


Using latest .NET Core 3.0 Preview 4 SDK.



</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>05/03/2020</ClosedDate>
        <Labels>
          <Label>area-Interop-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33035</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>NextTurn</FixedByID>
    <Title>Remove unused locals in System.Runtime.WindowsRuntime</Title>
    <Description>Contributes to #30457

I didn't find the definition of `CoreDispatcher.RunAsync` but it must return a task.</Description>
    <CreatedDate>02/03/2020</CreatedDate>
    <ClosedDate>02/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33035</PullRequestID>
        <IssueID>30457</IssueID>
        <Title>Review unused locals across corefx</Title>
        <Description>Experimenting with various analyzers, I used SonarAnalyzers.CSharp to highlight all unused locals.

In dotnet/corefx#39956, I fixed some, but there remain a bunch across the repo.  We could consider enabling the rule permanently, but there's enough noise that we may not want to.  Even so, it'd probably be worth reviewing the remaining failures to ensure nothing important has slipped through.

#### D:\repos\corefx\src\Microsoft.Diagnostics.Tracing.EventSource.Redist\src\Microsoft.Diagnostics.Tracing.EventSource.Redist.csproj
- [ ] D:\repos\corefx\src\Common\src\CoreLib\System\Diagnostics\Tracing\EventSource.cs(2698,18): warning S1481: Remove the unused local variable 'shouldReport'.
- [ ] D:\repos\corefx\src\Common\src\CoreLib\System\Diagnostics\Tracing\EventSource.cs(3082,20): warning S1481: Remove the unused local variable 'fullTypeNameToFind'.

#### D:\repos\corefx\src\System.Configuration.ConfigurationManager\src\System.Configuration.ConfigurationManager.csproj
- [ ] System\Configuration\ApplicationSettingsBase.cs(729,24): warning S1481: Remove the unused local variable 'temp'.

#### D:\repos\corefx\src\System.Data.Common\src\System.Data.Common.csproj
- [x] System\Data\DataColumnCollection.cs(807,28): warning S1481: Remove the unused local variable 'column'.
- [x] System\Data\xmlsaver.cs(1496,32): warning S1481: Remove the unused local variable 'prefix'.
- [x] System\Data\xmlsaver.cs(1497,36): warning S1481: Remove the unused local variable 'tNode'.
- [x] System\Data\xmlsaver.cs(2495,20): warning S1481: Remove the unused local variable 'val'.
- [x] System\Data\xmlsaver.cs(2782,17): warning S1481: Remove the unused local variable 'countTopTable'.
- [x] System\Data\xmlsaver.cs(952,24): warning S1481: Remove the unused local variable 'dsCompositor'.
- [x] System\Data\XMLSchema.cs(2368,28): warning S1481: Remove the unused local variable 'targetNamespace'.
- [x] System\Data\XMLSchema.cs(2540,17): warning S1481: Remove the unused local variable 'initialTableCount'.
- [x] System\Data\XMLSchema.cs(786,27): warning S1481: Remove the unused local variable 'table'.

#### D:\repos\corefx\src\System.Data.OleDb\src\System.Data.OleDb.csproj
- [x] OleDbConnection.cs(521,32): warning S1481: Remove the unused local variable 'exception'.
- [x] OleDbConnectionInternal.cs(324,29): warning S1481: Remove the unused local variable 'outerConnection'.
- [x] OleDbConnectionInternal.cs(824,18): warning S1481: Remove the unused local variable 'isopen'.
- [x] OleDbConnectionInternal.cs(825,35): warning S1481: Remove the unused local variable 'constr'.
- [x] OleDbDataAdapter.cs(267,50): warning S1481: Remove the unused local variable 'hresult'.
- [x] OleDbDataAdapter.cs(441,34): warning S1481: Remove the unused local variable 'hresult'.
- [x] OleDbDataReader.cs(1169,22): warning S1481: Remove the unused local variable 'info'.
- [x] OleDbDataReader.cs(2166,30): warning S1481: Remove the unused local variable 'nullsVal'.
- [x] OleDbTransaction.cs(111,34): warning S1481: Remove the unused local variable 'hr'.
- [x] RowBinding.cs(482,30): warning S1481: Remove the unused local variable 'hr'.
- [x] SafeHandles.cs(163,30): warning S1481: Remove the unused local variable 'hr'.

#### D:\repos\corefx\src\System.Data.SqlClient\src\System.Data.SqlClient.csproj
- [ ] System\Data\Sql\SqlSer.cs(111,41): warning S1481: Remove the unused local variable 'udtAttr'.
- [ ] System\Data\Sql\SqlSer.cs(31,20): warning S1481: Remove the unused local variable 'k'.
- [ ] System\Data\SqlClient\SqlCommand.cs(3134,24): warning S1481: Remove the unused local variable 'val'.
- [ ] System\Data\SqlClient\TdsParser.cs(6856,37): warning S1481: Remove the unused local variable 'metaData'.

#### D:\repos\corefx\src\System.DirectoryServices.AccountManagement\src\System.DirectoryServices.AccountManagement.csproj
- [ ] System\DirectoryServices\AccountManagement\AD\ADStoreCtx.cs(1765,43): warning S1481: Remove the unused local variable 'adsGroup'.
- [ ] System\DirectoryServices\AccountManagement\AD\ADStoreCtx.cs(2235,22): warning S1481: Remove the unused local variable 'ldapAttributesUsed'.
- [ ] System\DirectoryServices\AccountManagement\AuthZSet.cs(47,20): warning S1481: Remove the unused local variable 'hUser'.
- [ ] System\DirectoryServices\AccountManagement\SAM\SAMMembersSet.cs(104,26): warning S1481: Remove the unused local variable 'nativeMembers'.
- [ ] System\DirectoryServices\AccountManagement\SAM\SAMStoreCtx_LoadStore.cs(787,20): warning S1481: Remove the unused local variable 'stringizedSid'.
- [ ] System\DirectoryServices\AccountManagement\SAM\SAMUtils.cs(97,20): warning S1481: Remove the unused local variable 'className'.

#### D:\repos\corefx\src\System.DirectoryServices\src\System.DirectoryServices.csproj
- [ ] System\DirectoryServices\ActiveDirectory\ActiveDirectorySchemaClass.cs(1001,22): warning S1481: Remove the unused local variable 'schemaGuid'.
- [ ] System\DirectoryServices\ActiveDirectory\ActiveDirectorySchemaProperty.cs(1090,22): warning S1481: Remove the unused local variable 'schemaGuid'.
- [ ] System\DirectoryServices\ActiveDirectory\ActiveDirectorySite.cs(1332,29): warning S1481: Remove the unused local variable 'status'.
- [ ] System\DirectoryServices\ActiveDirectory\ActiveDirectorySite.cs(422,36): warning S1481: Remove the unused local variable 'tmp'.
- [ ] System\DirectoryServices\ActiveDirectory\ConfigSet.cs(439,24): warning S1481: Remove the unused local variable 'entryName'.
- [ ] System\DirectoryServices\ActiveDirectory\DirectoryServer.cs(112,28): warning S1481: Remove the unused local variable 'dn'.
- [ ] System\DirectoryServices\ActiveDirectory\GlobalCatalog.cs(266,34): warning S1481: Remove the unused local variable 'schemaContext'.
- [ ] System\DirectoryServices\ActiveDirectory\Utils.cs(1450,26): warning S1481: Remove the unused local variable 'propertiesToLoad2'.
- [ ] System\DirectoryServices\ActiveDirectory\Utils.cs(692,21): warning S1481: Remove the unused local variable 'result'.
- [ ] System\DirectoryServices\ActiveDirectory\Utils.cs(785,20): warning S1481: Remove the unused local variable 'crossRefDN'.
- [ ] System\DirectoryServices\PropertyCollection.cs(113,50): warning S1481: Remove the unused local variable 'propList'.

#### D:\repos\corefx\src\System.Drawing.Common\src\System.Drawing.Common.csproj
- [ ] System\Drawing\Pen.cs(586,27): warning S1481: Remove the unused local variable 'oldColor'.
- [ ] System\Drawing\Printing\PrinterSettings.Windows.cs(489,29): warning S1481: Remove the unused local variable 'nRead'.
- [ ] System\Drawing\SolidBrush.cs(103,27): warning S1481: Remove the unused local variable 'oldColor'.

#### D:\repos\corefx\src\System.IO.FileSystem.AccessControl\src\System.IO.FileSystem.AccessControl.csproj
- [ ] System\Security\AccessControl\FileSecurity.cs(618,20): warning S1481: Remove the unused local variable 'fullPath'.
- [ ] System\Security\AccessControl\FileSecurity.cs(645,20): warning S1481: Remove the unused local variable 'fullPath'.

#### D:\repos\corefx\src\System.IO.FileSystem.DriveInfo\src\System.IO.FileSystem.DriveInfo.csproj
- [ ] D:\repos\corefx\src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.MountPoints.cs(26,21): warning S1481: Remove the unused local variable 'result'.
- [ ] System\IO\DriveInfo.Windows.cs(97,22): warning S1481: Remove the unused local variable 'success'.

#### D:\repos\corefx\src\System.IO.FileSystem\src\System.IO.FileSystem.csproj
- [ ] D:\repos\corefx\src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.MountPoints.cs(26,21): warning S1481: Remove the unused local variable 'result'.

#### D:\repos\corefx\src\System.IO.MemoryMappedFiles\src\System.IO.MemoryMappedFiles.csproj
- [ ] System\IO\MemoryMappedFiles\MemoryMappedView.Windows.cs(65,24): warning S1481: Remove the unused local variable 'tempHandle'.

#### D:\repos\corefx\src\System.IO.Ports\src\System.IO.Ports.csproj
- [ ] System\IO\Ports\SerialPort.cs(1015,17): warning S1481: Remove the unused local variable 'startTicks'.
- [ ] System\IO\Ports\SerialPort.cs(1028,17): warning S1481: Remove the unused local variable 'beginReadPos'.

#### D:\repos\corefx\src\System.Management\src\System.Management.csproj
- [ ] System\Management\ManagementObject.cs(2307,31): warning S1481: Remove the unused local variable 'wbemServices'.
- [ ] System\Management\ManagementScope.cs(974,26): warning S1481: Remove the unused local variable 'loc'.
- [ ] System\Management\ManagementScope.cs(975,20): warning S1481: Remove the unused local variable 'punk'.
- [ ] System\Management\WMIGenerator.cs(3040,42): warning S1481: Remove the unused local variable 'isRetTypeTimeInterval'.
- [ ] System\Management\WMIGenerator.cs(7349,40): warning S1481: Remove the unused local variable 'cmie3'.

#### D:\repos\corefx\src\System.Net.HttpListener\src\System.Net.HttpListener.csproj
- [ ] System\Net\Windows\HttpListener.Windows.cs(764,20): warning S1481: Remove the unused local variable 'verb'.
- [ ] System\Net\Windows\WebSockets\WebSocketProtocolComponent.cs(252,44): warning S1481: Remove the unused local variable 'responseHeaders'.

#### D:\repos\corefx\src\System.Net.Requests\src\System.Net.Requests.csproj
- [ ] System\Net\FtpControlStream.cs(414,31): warning S1481: Remove the unused local variable 'request'.

#### D:\repos\corefx\src\System.Net.Security\src\System.Net.Security.csproj
- [ ] System\Net\CertificateValidationPal.Unix.cs(62,21): warning S1481: Remove the unused local variable 'errorCode'.

#### D:\repos\corefx\src\System.Numerics.Tensors\src\System.Numerics.Tensors.csproj
- [ ] System\Numerics\Tensors\Tensor.cs(1228,17): warning S1481: Remove the unused local variable 'outerLength'.

#### D:\repos\corefx\src\System.Private.DataContractSerialization\src\System.Private.DataContractSerialization.csproj
- [ ] System\Runtime\Serialization\ReflectionXmlFormatReader.cs(58,20): warning S1481: Remove the unused local variable 'requiredMembers'.
- [ ] System\Runtime\Serialization\SchemaExporter.cs(453,50): warning S1481: Remove the unused local variable 'extension'.
- [ ] System\Runtime\Serialization\XmlFormatReaderGenerator.cs(122,26): warning S1481: Remove the unused local variable 'isFactoryType'.
- [ ] System\Xml\XmlBufferReader.cs(494,20): warning S1481: Remove the unused local variable 'buffer'.
- [ ] System\Xml\XmlBufferReader.cs(503,20): warning S1481: Remove the unused local variable 'buffer'.
- [ ] System\Xml\XmlBufferReader.cs(847,20): warning S1481: Remove the unused local variable 'buffer'.

#### D:\repos\corefx\src\System.Private.Xml\src\System.Private.Xml.csproj
- [ ] System\Xml\Core\XsdValidatingReader.cs(1440,17): warning S1481: Remove the unused local variable 'startDepth'.
- [ ] System\Xml\Core\XsdValidatingReaderAsync.cs(337,17): warning S1481: Remove the unused local variable 'startDepth'.
- [ ] System\Xml\Dom\XmlNode.cs(469,21): warning S1481: Remove the unused local variable 'node'.
- [ ] System\Xml\Dom\XmlNode.cs(838,29): warning S1481: Remove the unused local variable 'doc'.
- [ ] System\Xml\Schema\ContentValidator.cs(1317,17): warning S1481: Remove the unused local variable 'symbolsCount'.
- [ ] System\Xml\Schema\ContentValidator.cs(1922,17): warning S1481: Remove the unused local variable 'positionsCount'.
- [ ] System\Xml\Schema\FacetChecker.cs(471,35): warning S1481: Remove the unused local variable 'baseRestriction'.
- [ ] System\Xml\Schema\Inference\Infer.cs(927,42): warning S1481: Remove the unused local variable 'subelement'.
- [ ] System\Xml\Schema\Inference\Infer.cs(936,42): warning S1481: Remove the unused local variable 'subelement'.
- [ ] System\Xml\Schema\Inference\Infer.cs(948,42): warning S1481: Remove the unused local variable 'subelement'.
- [ ] System\Xml\Serialization\Compiler.cs(81,26): warning S1481: Remove the unused local variable 'originalAssembly'.
- [ ] System\Xml\Serialization\ReflectionXmlSerializationReader.cs(1760,33): warning S1481: Remove the unused local variable 'allMemberMappings'.
- [ ] System\Xml\Serialization\ReflectionXmlSerializationWriter.cs(1257,35): warning S1481: Remove the unused local variable 'member'.
- [ ] System\Xml\Serialization\ReflectionXmlSerializationWriter.cs(206,24): warning S1481: Remove the unused local variable 'enumTypeName'.
- [ ] System\Xml\Serialization\ReflectionXmlSerializationWriter.cs(363,30): warning S1481: Remove the unused local variable 'arrayTypeDesc'.
- [ ] System\Xml\Serialization\SchemaObjectWriter.cs(1036,25): warning S1481: Remove the unused local variable 't'.
- [ ] System\Xml\Serialization\SchemaObjectWriter.cs(1091,25): warning S1481: Remove the unused local variable 't'.
- [ ] System\Xml\Serialization\SchemaObjectWriter.cs(1117,25): warning S1481: Remove the unused local variable 't'.
- [ ] System\Xml\Serialization\SchemaObjectWriter.cs(1139,25): warning S1481: Remove the unused local variable 't'.
- [ ] System\Xml\Serialization\SchemaObjectWriter.cs(974,25): warning S1481: Remove the unused local variable 't'.
- [ ] System\Xml\Serialization\XmlReflectionImporter.cs(1564,30): warning S1481: Remove the unused local variable 'targetTypeDesc'.
- [ ] System\Xml\Serialization\XmlSerializationReader.cs(188,20): warning S1481: Remove the unused local variable 'ns'.
- [ ] System\Xml\Serialization\XmlSerializationReader.cs(189,20): warning S1481: Remove the unused local variable 'ns2'.
- [ ] System\Xml\Serialization\XmlSerializationReader.cs(2118,35): warning S1481: Remove the unused local variable 'elements'.
- [ ] System\Xml\Serialization\XmlSerializationReader.cs(3428,18): warning S1481: Remove the unused local variable 'useReflection'.
- [ ] System\Xml\Serialization\XmlSerializationReader.cs(3568,18): warning S1481: Remove the unused local variable 'useReflection'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(1877,22): warning S1481: Remove the unused local variable 'saveTypeDesc'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(2564,35): warning S1481: Remove the unused local variable 'member'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(3434,22): warning S1481: Remove the unused local variable 'choiceUseReflection'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(3681,30): warning S1481: Remove the unused local variable 'useReflection'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(4064,22): warning S1481: Remove the unused local variable 'useReflection'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(4066,24): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(1629,32): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(1656,28): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(1798,28): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(1916,24): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(2022,24): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(2318,26): warning S1481: Remove the unused local variable 'typeDesc'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(394,35): warning S1481: Remove the unused local variable 'member'.
- [ ] System\Xml\Xsl\Xslt\CompilerScopeManager.cs(277,36): warning S1481: Remove the unused local variable 'prevFlags'.
- [ ] System\Xml\Xsl\Xslt\QilGenerator.cs(2345,17): warning S1481: Remove the unused local variable 'startPos'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(1936,18): warning S1481: Remove the unused local variable 'isParam'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(2154,20): warning S1481: Remove the unused local variable 'collation'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(474,25): warning S1481: Remove the unused local variable 'ctxInfo'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(503,25): warning S1481: Remove the unused local variable 'ctxInfo'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(573,25): warning S1481: Remove the unused local variable 'ctxInfo'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(849,20): warning S1481: Remove the unused local variable 'collation'.
- [ ] System\Xml\Xsl\XsltOld\CopyAction.cs(40,20): warning S1481: Remove the unused local variable 'value'.

#### D:\repos\corefx\src\System.Runtime.Extensions\src\System.Runtime.Extensions.csproj
- [ ] D:\repos\corefx\src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.MountPoints.cs(26,21): warning S1481: Remove the unused local variable 'result'.

#### D:\repos\corefx\src\System.Runtime.Serialization.Formatters\src\System.Runtime.Serialization.Formatters.csproj
- [ ] System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs(257,17): warning S1481: Remove the unused local variable 'byteLength'.
- [ ] System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs(358,18): warning S1481: Remove the unused local variable 'genId'.
- [ ] System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs(702,20): warning S1481: Remove the unused local variable 'objName'.
- [ ] System\Runtime\Serialization\ObjectManager.cs(282,26): warning S1481: Remove the unused local variable 'originalHolder'.

#### D:\repos\corefx\src\System.Runtime.WindowsRuntime.UI.Xaml\src\System.Runtime.WindowsRuntime.UI.Xaml.csproj
- [ ] System\Windows\GridLength.cs(118,18): warning S1481: Remove the unused local variable 'listSeparator'.

#### D:\repos\corefx\src\System.Runtime.WindowsRuntime\src\System.Runtime.WindowsRuntime.csproj
- [ ] System\Threading\WindowsRuntimeSynchronizationContext.cs(121,17): warning S1481: Remove the unused local variable 'ignored'.
- [ ] System\Threading\WindowsRuntimeSynchronizationContext.cs(146,17): warning S1481: Remove the unused local variable 'ignored'.

#### D:\repos\corefx\src\System.Security.AccessControl\src\System.Security.AccessControl.csproj
- [ ] System\Security\AccessControl\ACL.cs(603,24): warning S1481: Remove the unused local variable 'ace'.
- [ ] System\Security\AccessControl\SecurityDescriptor.cs(291,17): warning S1481: Remove the unused local variable 'length'.

#### D:\repos\corefx\src\System.Security.Cryptography.Algorithms\src\System.Security.Cryptography.Algorithms.csproj
- [x] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [x] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.

#### D:\repos\corefx\src\System.Security.Cryptography.Cng\src\System.Security.Cryptography.Cng.csproj
- [x] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [x] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.
- [x] System\Security\Cryptography\ECDiffieHellmanCng.Key.cs(85,28): warning S1481: Remove the unused local variable 'key'.
- [x] System\Security\Cryptography\ECDsaCng.Key.cs(73,28): warning S1481: Remove the unused local variable 'key'.

#### D:\repos\corefx\src\System.Security.Cryptography.Csp\src\System.Security.Cryptography.Csp.csproj
- [x] D:\repos\corefx\src\Common\src\Interop\Windows\Advapi32\SafeProvHandle.cs(113,22): warning S1481: Remove the unused local variable 'ignoredSuccess'.
- [ ] System\Security\Cryptography\CapiHelper.DSA.Shared.cs(181,29): warning S1481: Remove the unused local variable 'magic'.
- [ ] System\Security\Cryptography\CapiHelper.DSA.Shared.cs(223,29): warning S1481: Remove the unused local variable 'magic'.
- [ ] System\Security\Cryptography\CapiHelper.DSA.Shared.cs(282,18): warning S1481: Remove the unused local variable 'bType'.
- [ ] System\Security\Cryptography\CapiHelper.Shared.cs(166,22): warning S1481: Remove the unused local variable 'bType'.
- [ ] System\Security\Cryptography\CapiHelper.Shared.cs(167,22): warning S1481: Remove the unused local variable 'bVersion'.
- [ ] System\Security\Cryptography\CapiHelper.Shared.cs(173,21): warning S1481: Remove the unused local variable 'magic'.

#### D:\repos\corefx\src\System.Security.Cryptography.Encoding\src\System.Security.Cryptography.Encoding.csproj
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.

#### D:\repos\corefx\src\System.Security.Cryptography.OpenSsl\src\System.Security.Cryptography.OpenSsl.csproj
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.

#### D:\repos\corefx\src\System.Security.Cryptography.Pkcs\src\System.Security.Cryptography.Pkcs.csproj
- [ ] D:\repos\corefx\src\Common\src\Interop\Windows\Advapi32\SafeProvHandle.cs(113,22): warning S1481: Remove the unused local variable 'ignoredSuccess'.
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.
- [x] Internal\Cryptography\Pal\Windows\PkcsPalWindows.Encrypt.cs(73,21): warning S1481: Remove the unused local variable 'tag'.

#### D:\repos\corefx\src\System.Security.Cryptography.X509Certificates\src\System.Security.Cryptography.X509Certificates.csproj
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.
- [ ] Internal\Cryptography\Pal.Windows\CertificatePal.PrivateKey.cs(248,25): warning S1481: Remove the unused local variable 'dwErrorCode'.
- [x] Internal\Cryptography\Pal.Windows\Native\SafeHandles.cs(188,30): warning S1481: Remove the unused local variable 'success'.
- [x] Internal\Cryptography\Pal.Windows\StorePal.Import.cs(167,18): warning S1481: Remove the unused local variable 'ignore'.
- [ ] System\Security\Cryptography\X509Certificates\X509Certificate2.cs(362,20): warning S1481: Remove the unused local variable 'fullPath'.

#### D:\repos\corefx\src\System.Security.Cryptography.Xml\src\System.Security.Cryptography.Xml.csproj
- [x] System\Security\Cryptography\Xml\SignedXml.cs(418,20): warning S1481: Remove the unused local variable 'hashvalue'.

#### D:\repos\corefx\src\System.Security.Principal.Windows\src\System.Security.Principal.Windows.csproj
- [ ] System\Security\Principal\WindowsIdentity.cs(625,30): warning S1481: Remove the unused local variable 'groupCount'.

#### D:\repos\corefx\src\System.ServiceModel.Syndication\src\System.ServiceModel.Syndication.csproj
- [ ] System\ServiceModel\Syndication\Atom10FeedFormatter.cs(606,20): warning S1481: Remove the unused local variable 'localName'.
- [ ] System\ServiceModel\Syndication\Atom10FeedFormatter.cs(607,20): warning S1481: Remove the unused local variable 'nameSpace'.

#### D:\repos\corefx\src\System.ServiceProcess.ServiceController\src\System.ServiceProcess.ServiceController.csproj
- [ ] System\ServiceProcess\ServiceBase.cs(484,22): warning S1481: Remove the unused local variable 'statusResult'.</Description>
        <CreatedDate>01/08/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-Meta</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33028</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[amd64] Obtain the trampoline argument in the generic_trampoline in the AOT case without decoding the call instruction.</Title>
    <Description>!! This PR is a copy of mono/mono#19091,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>01/03/2020</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33028</PullRequestID>
        <IssueID>19091</IssueID>
        <Title>CI failure in DateTimeFormatInfoGetInstance.GetInstance_ExpectedCurrent</Title>
        <Description>See https://ci.dot.net/job/dotnet_corefx/job/master/job/windows_nt_release_prtest/2074

``
</Description>
        <CreatedDate>25/10/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Globalization</Label>
          <Label>test-run-core</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33022</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[cxx] Remove static initializers.</Title>
    <Description>!! This PR is a copy of mono/mono#19089,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;In a current shipping Visual C++, 19.21.27702.2,
there is a bug involving const member data in structs, where for example:

static const struct a { // const on this line in either case
  const int b; // const on this line
} c = {1};

will have a static initializer, run usually reliably before main, but:

static const struct a { // const on this line in either case
  int b; // no const on this line
} c = {1};

will not.
The semantic difference is minuscule, so much so, that the first form
is relatively rare, and the bug shipped.

Just always use the second form.

The difference is that if you have a non-const a, b is still const, I guess.
If you have a const a, then no difference.

You can find these easily:

cd ...
for %a in (*.exe *.dll) do link /dump /disasm %a &gt; %a.txt
findstr /c:"dynamic initializer" *.txt

Which could be automated and tested in CI.

This probably not an actual problem, but it is needlessly inefficient,
and potentially a problem. The timing/ordering of the initializers
is a bit not deterministic. You get writable data where you expect
read only.

It is in fact a compiler bug, fixed in later releases.
But it has been shipping for a while, I first noticed it over two years
ago, in code of mine that it caused to not work (a delayload implementation
which runs before main).</Description>
    <CreatedDate>01/03/2020</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33022</PullRequestID>
        <IssueID>19089</IssueID>
        <Title>Add IReadOnlyList&lt;T&gt; constructor to ReadOnlyCollection&lt;T&gt;</Title>
        <Description>In some places in `System.Linq.Expressions` we implement `IList&lt;T&gt;` with all mutating methods throwing exceptions, just to be able to pass it to the constructor of `ReadOnlyCollection&lt;T&gt;`. An additional constructor overload with `IReadOnlyList&lt;T&gt;` would be useful to reduce code bloat.
</Description>
        <CreatedDate>25/10/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>api-needs-work</Label>
          <Label>area-System.Collections</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33021</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>Revert "Change debug info default variable tracking system"</Title>
    <Description>Reverts dotnet/runtime#2107</Description>
    <CreatedDate>01/03/2020</CreatedDate>
    <ClosedDate>01/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33021</PullRequestID>
        <IssueID>2107</IssueID>
        <Title>Change debug info default variable tracking system</Title>
        <Description>Varible Scope info is being disabled. Variable
Live Range is being enabled. Debug info generated
for debug code is the same, changes only impact on
optimized code.

Variable Live Range updates variable's location
each time something happens to variable's
liveness. For more information see
https://github.com/dotnet/runtime/blob/master/docs/design/features/variabletracking.md</Description>
        <CreatedDate>23/01/2020</CreatedDate>
        <ClosedDate>26/02/2020</ClosedDate>
        <Labels>
          <Label>area-CodeGen-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33019</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>alanisaac</FixedByID>
    <Title>Additional code coverage in System.Text.Json</Title>
    <Description>Part of #32341

**Note 1**

In order to get coverage on the following lines, I added a missing test case using `JsonDocument.Parse` with a large, invalid base64 string _without_ an escaped character.  The test data previously used `[InlineData(...)]` attributes where the large strings were generated from the `[InlineData(null)]` case, using `null` as a sentinel value.  I weighed a few different options for how to add this new case, and eventually settled on moving the test data to its own class and using `[MemberData(...)]` instead to simplify the tests themselves.  Certainly open to suggestions! 

https://github.com/dotnet/runtime/blob/11b37df0e50e45465b2071b191c365d84e8932ac/src/libraries/System.Text.Json/src/System/Text/Json/Reader/JsonReaderHelper.Unescaping.cs#L162-L166

**Note 2**
There was a missing case in cyclic tests that validates that `EffectiveMaxDepth` is set to 64 when `MaxDepth` is set to 0 (lines).  I ended up splitting `WriteCyclicFail`, which had two logical subgroups into `WriteCyclic` and `WriteCyclicFail`.

https://github.com/dotnet/runtime/blob/527adf211a45046876d680480e45131b5334fcf6/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializerOptions.cs#L203</Description>
    <CreatedDate>29/02/2020</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33019</PullRequestID>
        <IssueID>32341</IssueID>
        <Title>Help get System.Text.Json test coverage to 100% (or close to it)</Title>
        <Description>Let's try to get the test coverage of all components of the JSON stack closer to 100%, where feasible. 
We are in pretty good shape (well over 90%+). It tends to be much easier to maintain the bar once we hit 100% since any drop becomes clear/visible.

One component that is effectively at 100% is `JsonElement`. Let's see if we can get there for the rest.

That said, we shouldn't bend over backwards to try to get to 100% for things like testing all the conditions of a `Debug.Asserts` or return line after a throw. If some code is unreachable or not used, update/delete it.

**Some test improvements are relatively easy to do, so I encourage folks who want to help contribute to `System.Text.Json` to start there.** Others might require more work to bridge the test gap.

``

**Here are some good starting points:**
1) JsonDocumentOptions
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/Document/JsonDocumentOptions.cs#L12
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74575890-90410100-4f3d-11ea-8465-915f9258ba39.png)

2) JsonHelpers
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/JsonHelpers.cs#L12
- [ ] a) 
![image](https://user-images.githubusercontent.com/6527137/74576082-5ae8e300-4f3e-11ea-9971-d02d4655a73e.png)
- [x] b)
![image](https://user-images.githubusercontent.com/6527137/74576101-69cf9580-4f3e-11ea-892a-324d16b4f4db.png)
- [ ] c)
![image](https://user-images.githubusercontent.com/6527137/74576111-705e0d00-4f3e-11ea-93bd-42ac793c918f.png)
- [ ] d)
![image](https://user-images.githubusercontent.com/6527137/74576127-823fb000-4f3e-11ea-8368-e831991fa1e1.png)

3) JsonClassInfo
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonClassInfo.cs#L17
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74575800-304a5a80-4f3d-11ea-9863-3b8cd2da9f70.png)
- [x] b)
![image](https://user-images.githubusercontent.com/6527137/74575813-43f5c100-4f3d-11ea-8fd8-357158ec440b.png)
- [ ] c)
![image](https://user-images.githubusercontent.com/6527137/74575828-55d76400-4f3d-11ea-8a0f-9e404966450f.png)

4) JsonPropertyInfo
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonPropertyInfo.cs#L14
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576152-94b9e980-4f3e-11ea-8d48-f33598b02e9f.png)

5) JsonPropertyInfoOfTTypeToConvert
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonPropertyInfoOfTTypeToConvert.cs#L14
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576187-ae5b3100-4f3e-11ea-9343-4ad968f6779f.png)

6) JsonReaderHelper
https://github.com/dotnet/runtime/blob/f5874b08b53665ce950b76b628deb63abecaee85/src/libraries/System.Text.Json/src/System/Text/Json/Reader/JsonReaderHelper.cs#L13
- [x] a)
![image](https://user-images.githubusercontent.com/6527137/74576240-d9de1b80-4f3e-11ea-8219-8d3a46c40307.png)

7) JsonSerializer
https://github.com/dotnet/runtime/blob/527adf211a45046876d680480e45131b5334fcf6/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Read.HandleMetadata.cs#L10
- [x] a)
![image](https://user-images.githubusercontent.com/6527137/74576415-79031300-4f3f-11ea-9809-ac9476b2ad99.png)
- [ ] b)
![image](https://user-images.githubusercontent.com/6527137/74576351-3ccfb280-4f3f-11ea-9b02-f6a8950488db.png)
- [ ] c)
![image](https://user-images.githubusercontent.com/6527137/74576396-6d175100-4f3f-11ea-8235-686224c13a8f.png)
- [ ] d)
![image](https://user-images.githubusercontent.com/6527137/74576426-86200200-4f3f-11ea-91a1-3b9fe2f22854.png)
- [ ] e)
![image](https://user-images.githubusercontent.com/6527137/74576434-91732d80-4f3f-11ea-8e65-7e3130d218c3.png)
- [x] f)
![image](https://user-images.githubusercontent.com/6527137/74576440-9d5eef80-4f3f-11ea-9702-f3284a13805c.png)

8) JsonSerializerOptions
https://github.com/dotnet/runtime/blob/527adf211a45046876d680480e45131b5334fcf6/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializerOptions.cs#L15
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576453-ae0f6580-4f3f-11ea-9318-3572e57f50d9.png)

9) ArrayConverter
https://github.com/dotnet/runtime/blob/527adf211a45046876d680480e45131b5334fcf6/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/Converters/Collection/ArrayConverter.cs#L14
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576494-d72ff600-4f3f-11ea-8658-0a94794b053f.png)

10) ConcurrentStackOfTConverter
https://github.com/dotnet/runtime/blob/527adf211a45046876d680480e45131b5334fcf6/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/Converters/Collection/ConcurrentStackOfTConverter.cs#L11
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576522-fcbcff80-4f3f-11ea-92c9-4727db1a0a5f.png)

11) JsonConverterOfT.cs
https://github.com/dotnet/runtime/blob/b95e523a3003a5744506239ceaac2aafa3ac9a9d/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonConverterOfT.cs#L14
- [ ] a)
![image](https://user-images.githubusercontent.com/6527137/74576556-355cd900-4f40-11ea-8d04-9ffd25ec2003.png)
- [ ] b)
![image](https://user-images.githubusercontent.com/6527137/74576562-3beb5080-4f40-11ea-8d0f-1e2812086f9e.png)
- [ ] c)
![image](https://user-images.githubusercontent.com/6527137/74576573-43125e80-4f40-11ea-8494-3b425f8d2be8.png)


cc @Jozkee, @layomia, @steveharter </Description>
        <CreatedDate>14/02/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Text.Json</Label>
          <Label>easy</Label>
          <Label>increase-code-coverage</Label>
          <Label>test enhancement</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33018</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>cshung</FixedByID>
    <Title>Fixing GC large memory test failure</Title>
    <Description>Fixes #32966 </Description>
    <CreatedDate>29/02/2020</CreatedDate>
    <ClosedDate>02/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33018</PullRequestID>
        <IssueID>32966</IssueID>
        <Title>Outerloop failures GC/LargeMemory missing projects</Title>
        <Description>``

From merges in master e.g. https://dev.azure.com/dnceng/public/_build/results?buildId=540488&amp;view=logs&amp;jobId=721a035e-086a-5f66-d7c2-78d896701c82&amp;j=721a035e-086a-5f66-d7c2-78d896701c82&amp;t=d90f58c6-db3f-521d-96d8-db7a4001b9f4</Description>
        <CreatedDate>28/02/2020</CreatedDate>
        <ClosedDate>02/03/2020</ClosedDate>
        <Labels>
          <Label>area-GC-coreclr</Label>
          <Label>blocking-outerloop</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33014</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>alanisaac</FixedByID>
    <Title>[Debug] IndexOutOfRangeException when extension data doesn't have two generic parameters</Title>
    <Description>WIP for #33011

@layomia, I added the proposed tests and code change, but I still see the tests failing in debug through both VS and the CLI (EX: `Process terminated. Assertion failed`).  

I'm new to contributing to the runtime, so I wasn't sure if it was better to put this discussion in an issue or PR, but chose PR to better discuss the code changes.  Also, pardon my newbie questions: 

- The proposed change was surprising to me: should I expect that `#if DEBUG` would change the behavior of tests running in Debug configuration?
- Is there a reason to keep the `Debug.Assert` statements here at all?  If conceptually `System.Text.Json` supports dictionaries that don't match the conditions tested by the `Debug.Assert` statements, what is their purpose?</Description>
    <CreatedDate>29/02/2020</CreatedDate>
    <ClosedDate>02/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33014</PullRequestID>
        <IssueID>33011</IssueID>
        <Title>[Debug] IndexOutOfRangeException when extension data doesn't have two generic parameters</Title>
        <Description>_From @alanisaac in https://github.com/dotnet/runtime/pull/32952#discussion_r385989189. This issue exists only in debug mode. The fix could look like [this](https://gist.github.com/layomia/d77aeea5d3250785de5a7aa4dee95c46#file-create_data_extension_property-cs-L8-L20). We'll need tests for dictionary types with 0, 1, and 3 generic parameters._

I've added additional collection classes and tests for these cases.

When trying to test for these cases I noticed that classes that implement `IDictionary&lt;TKey, TValue&gt;` but do not have two generic type parameters end up throwing `IndexOutOfRangeException` on de-serialization when marked with `[JsonExtensionData]`.  Should this also be a `NotSupportedException` instead?

For example, by using the `StringToGenericIDictionaryWrapper&lt;TValue&gt;` class already in this test project, the following simple test will reproduce the `IndexOutOfRangeException`:

``</Description>
        <CreatedDate>29/02/2020</CreatedDate>
        <ClosedDate>02/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Text.Json</Label>
          <Label>bug</Label>
          <Label>easy</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33006</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[aot] Add support for emitting the method address table as a table of normal pointers in the data segment.</Title>
    <Description>!! This PR is a copy of mono/mono#19086,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>29/02/2020</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33006</PullRequestID>
        <IssueID>19086</IssueID>
        <Title>GCNotifiicationTests failed in CI</Title>
        <Description>https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_windows_nt_debug_prtest/73/consoleText

``
</Description>
        <CreatedDate>25/10/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Runtime</Label>
          <Label>test bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32983</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>microkatz</FixedByID>
    <Title>Unittests and fixed issue where with parsing of digest challenge - opaque fails with empty string</Title>
    <Description>Added two digest unittests that test that whether or not opaque is an empty string, the qop value is read to incorporate the correct hash algorithm for the digest challenge. Also adjusted the conditional in the challenge parse function to allow the opaque value to be an empty string and continue parsing.

Fixes #32943 </Description>
    <CreatedDate>28/02/2020</CreatedDate>
    <ClosedDate>01/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>32983</PullRequestID>
        <IssueID>32943</IssueID>
        <Title>Digest challenge - opaque fails with empty string</Title>
        <Description>According to [RFC 7616](https://tools.ietf.org/html/rfc7616#section-1.1), the key 'opaque' is utilized by servers to transport state information for the digest challenge. There is not a requirement that says the value cannot be an empty string.

If a server sends a digest challenge as follows:
`WWW-Authenticate: Digest realm="Use service as User Name in order to log in to the respective level",nonce="6afd170437eb5144258b308f7c491d96",opaque="",stale=FALSE,algorithm=MD5,qop="auth"`

Then in DigestResponse::Parse in the file [AuthenticationHelper.Digest.cs](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.Digest.cs#L51), the .Net Core parser for the challenge will break out without having read the rest of the http digest challenge. As a result, the authentication helper will not user the correct Digest Hash scheme because it failed to read the qop value in the challenge.</Description>
        <CreatedDate>27/02/2020</CreatedDate>
        <ClosedDate>01/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net.Http</Label>
          <Label>bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34343</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>mdh1418</FixedByID>
    <Title>[FileSystem] ReAdd check for same device</Title>
    <Description>Fixes #34330 </Description>
    <CreatedDate>31/03/2020</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34343</PullRequestID>
        <IssueID>34330</IssueID>
        <Title>Change in FileSystem.Unix.File.Move possibly introduced bug</Title>
        <Description>While porting https://github.com/dotnet/corefx/pull/40611 to Mono, @baulig noticed a deleted line 
checking the `Dev` fields of the `struct FileStatus` outputs of `LStat` for the source and destination files. No discussion was made about that change, which seems incorrect, and the comment on the next line even alludes to the removed check.

The line:
https://github.com/dotnet/corefx/pull/40611/files#r401020707

The Mono discussion:
https://github.com/mono/corefx/pull/395/files#r400813984

//cc original reviewers @stephentoub @carlossanlop @JeremyKuhne </Description>
        <CreatedDate>31/03/2020</CreatedDate>
        <ClosedDate>31/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.IO</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34331</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>aik-jahoda</FixedByID>
    <Title>Disable test on windows and enable on other platforms</Title>
    <Description>The change enables test only on OpenSSL platforms. 
Two years ago, the test was disabled for MacOs, however, I decided to enable it as it passes.

Contributes to #33558 </Description>
    <CreatedDate>31/03/2020</CreatedDate>
    <ClosedDate>01/04/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34331</PullRequestID>
        <IssueID>33558</IssueID>
        <Title>Failing test after Remote executor fix</Title>
        <Description>There is a fix (dotnet/arcade#4912) of remote executor which causes flaky/false-positive tests.
There is a list of test which starts fail after the remote executor fix is applied: see attached PR #33560
- [ ] `Proxy_UseEnvironmentVariableToSetSystemProxy_RequestGoesThruProxy`
- [x] `HttpClientUsesSslCertEnvironmentVariables` - fixed in PR #34331</Description>
        <CreatedDate>13/03/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Net.Http</Label>
          <Label>test bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34327</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[debugger] Adding static to ss_req_acquire and ss_req_count</Title>
    <Description>!! This PR is a copy of mono/mono#19390,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Adding static to ss_req_acquire and ss_req_count
Fixes mono/mono#19389</Description>
    <CreatedDate>31/03/2020</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34327</PullRequestID>
        <IssueID>19390</IssueID>
        <Title>netcoreapp11 methods did not get exposed in System.Runtime package</Title>
        <Description>Today when .NET Core 1.1 got released I wanted to make use of the new `GC.GetAllocatedBytesForCurrentThread ` method which got exposed [here](https://github.com/dotnet/corefx/pull/12489) by @jkotas .

However I can't do so, I get `error CS0117: 'GC' does not contain a definition for 'GetAllocatedBytesForCurrentThread'` error when trying to use it.

`dotnet --version: 1.0.0-preview2-1-003155`

My project.json file:
``

I took a look at the System.Runtime.cs file and it's [using](https://github.com/dotnet/corefx/blob/master/src/System.Runtime/ref/System.Runtime.cs#L1252) the new moniker netcoreapp11 in few #ifdefs but none of these methods are exposed in System.Runtime. Moreover when I go to `.nuget\packages\System.Runtime\4.3.0\lib` I can see that there is no separate version for netcoreapp1.1. Anyway when I run the program an use `typeof(GC).GetTypeInfo().Assembly.Location` I get `C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.1.0\System.Private.CoreLib.ni.dll` which has the method exposed.

My question is: how can I use this method without reflection? Am I doing something wrong?</Description>
        <CreatedDate>16/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-libraries</Label>
          <Label>bug</Label>
          <Label>packaging</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34327</PullRequestID>
        <IssueID>19389</IssueID>
        <Title>Path.GetTempPath does not return a user specific folder on Unix systems</Title>
        <Description>On Unix systems Path.GetTempPath returns "/tmp" unless the TMPDIR envvar is set.

According to the documentation, this method returns the path of the current user's temporary folder.
On Windows it returns: "%USERPROFILE%\AppData\Local\Temp".

This is causing an issue for the NuGet.Client because the program assumes it is the owner of the temp directory, see https://github.com/NuGet/Home/issues/2793.</Description>
        <CreatedDate>16/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.IO</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34315</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>Revert "Revert "Switch reverse PInvoke to the NativeCallable plan""</Title>
    <Description>Fix #33581</Description>
    <CreatedDate>31/03/2020</CreatedDate>
    <ClosedDate>01/04/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34315</PullRequestID>
        <IssueID>33581</IssueID>
        <Title>Remove UMThunkStub for all non-x86 scenarios</Title>
        <Description>With the completion of support for NativeCallableAttribute being public - https://github.com/dotnet/runtime/pull/33005, there is some additional cleanup that can now occur. The `UMThunkStub()` calls written in assembly can now be replaced by the newly added JIT helpers for Reverse P/Invoke Enter/Exit.

https://github.com/dotnet/runtime/blob/a1af0f2ad6cf51107a636dbe280cf939abd46b34/src/coreclr/src/vm/jithelpers.cpp#L5064-L5095

The x86 case must still use the `UMThunkStub()`, but all other can now be removed.

/cc @jkoritzinsky @jkotas @janvorli </Description>
        <CreatedDate>14/03/2020</CreatedDate>
        <ClosedDate>01/04/2020</ClosedDate>
        <Labels>
          <Label>area-Interop-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34307</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>elinor-fung</FixedByID>
    <Title>Check for COM registration functions on base types of registered type</Title>
    <Description>We were only looking for functions with the `ComRegisterFunction` and `ComUnregisterFunction` attributes directly on the type being registered. This change updates that logic to also look at the base types of the type being registered. If a register/unregister function is defined on both the base and derived types, only the one on the derived type will be called. This matches the behaviour in Framework.

Fix #869 </Description>
    <CreatedDate>31/03/2020</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34307</PullRequestID>
        <IssueID>869</IssueID>
        <Title>[ComRegisterFunction]/[ComUnregisterFunction] decorated public static methods do not run during regsvr32 registration</Title>
        <Description>Hello,
I have discovered that contrary to documentation in .NET Core, [ComRegisterFunction] and [ComUnregisterFunction] are not called by the COM registration system if they are not in a public class decorated by `[ComVisible(true)]` and a `[Guid(...)]` in the immediate assembly being registered.

See repo for a playground project:
https://github.com/rwasef1830/netcore31comregistrationbugs

In the playground project, building and attempting to register the comhost dll will cause the message box from the registration function inside the immediate main assembly to be called. The other one is ignored entirely, even if the main one is removed entirely.

2nd behavior: If you make the class containing the register/unregister functions non-public or removed the COM exposure attributes (ComVisible, Guid), the functions will get ignored entirely.

This is a breaking behavior from .NET Framework and contrary to advice that the registration functions should be internal. In addition regasm called com registration functions even in dependent assemblies, even if the enclosing classes were non-public and non-com-exposed.

Hope that clarifies it.

Migrated from https://github.com/dotnet/core-sdk/issues/5852
@AaronRobinsonMSFT </Description>
        <CreatedDate>14/12/2019</CreatedDate>
        <ClosedDate>31/03/2020</ClosedDate>
        <Labels>
          <Label>area-Interop-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34299</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[runtime] Fix a problem with PR #19361.</Title>
    <Description>!! This PR is a copy of mono/mono#19374,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;&lt;!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
--&gt;</Description>
    <CreatedDate>30/03/2020</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34299</PullRequestID>
        <IssueID>19374</IssueID>
        <Title>Assign ActivityId in System.Transactions EventSource to the transaction id</Title>
        <Description>Will allow us to trace all the events associated with a given transaction</Description>
        <CreatedDate>15/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Transactions</Label>
          <Label>enhancement</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34295</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>Restore TargetArchitecture default</Title>
    <Description>Fixes #34292</Description>
    <CreatedDate>30/03/2020</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34295</PullRequestID>
        <IssueID>34292</IssueID>
        <Title>Linux build --subsetCategory CoreCLR broken on x64 host</Title>
        <Description>From the root directory, a build of the tip is failing like this

``</Description>
        <CreatedDate>30/03/2020</CreatedDate>
        <ClosedDate>31/03/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-coreclr</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34291</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>janvorli</FixedByID>
    <Title>Fix wrong assert in cgroups code</Title>
    <Description>There is an assert in FindCgroupPath that fires when hierarchy_root
and cgroup_path_relative_to_mount are equal, which is the case for
cgroups that are not named. This assert checks that the common
path in those two variables ends with / which is only the case
with named groups.

We have never seen this assert to fire because cgroups initialization
happens before the debugger support initialization in PAL and so
asserts are disabled at that point. I am going to fix that in a
separate PR.

This problem was discovered with the standalone GC where the assert
actually fires as it uses a plain C assert function.

This change fixes the assert to account for the case when both the
paths are the same.

Close #34287</Description>
    <CreatedDate>30/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34291</PullRequestID>
        <IssueID>34287</IssueID>
        <Title>Assertion `cgroup_path_relative_to_mount[common_path_prefix_len] == '/'' failed</Title>
        <Description>I have been trying to add cgroupv2 support to coreclr and ran into this assertion. I have a test a program that `#include`s `cgroup.cpp` and then calls various cgroup methods in it.

``

A fix might be as simple as generalizing the `assert` to handle the case where `cgroup_path_relative_to_mount[common_path_prefix_len]`  is `NULL`.

cc @janvorli </Description>
        <CreatedDate>30/03/2020</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <Labels>
          <Label>area-PAL-coreclr</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34270</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>Allow coreclr_create_delegate to return pointers to NativeCallable methods</Title>
    <Description>Fixes #34266</Description>
    <CreatedDate>30/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34270</PullRequestID>
        <IssueID>34266</IssueID>
        <Title>Allow coreclr_create_delegate to return pointers to NativeCallable methods</Title>
        <Description>Also, use it for methods that are implemented in the runtime and target of `coreclr_create_delegate`.

This will allow the methods to AOTed among other things.</Description>
        <CreatedDate>30/03/2020</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <Labels>
          <Label>area-Interop-coreclr</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34265</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[wasm] Throw an exception from Monitor.Wait () in non-threaded mode.</Title>
    <Description>!! This PR is a copy of mono/mono#19363,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;&lt;!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
--&gt;</Description>
    <CreatedDate>29/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34265</PullRequestID>
        <IssueID>19363</IssueID>
        <Title>[ARM/Linux] Error during cross building for arm32</Title>
        <Description>Build environment: x64 Ubuntu 14.04 
Build target: arm32
commit: ece35f9
Build option: release, skiptests, enable outloop

error log in msbuild.log

``

I've get error, but can use build results in corefx/bin directory. </Description>
        <CreatedDate>14/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-libraries</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34262</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[runtime] Allocate the memory for gshared gparams from image sets.</Title>
    <Description>!! This PR is a copy of mono/mono#19361,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Fixes https://github.com/mono/mono/issues/18127.




&lt;!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
--&gt;</Description>
    <CreatedDate>29/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34262</PullRequestID>
        <IssueID>19361</IssueID>
        <Title>Test failure: System.Net.Security.Tests.SslStreamSystemDefaultTest/SslStream_DefaultTlsConfigurationApm_Ok</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.Net.Security.Tests.SslStreamSystemDefaultTest/SslStream_DefaultTlsConfigurationApm_Ok` has failed.

System.Security.Authentication.AuthenticationException : The remote certificate is invalid according to the validation procedure.

        Stack Trace:

           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Net.Security.SslState.WriteCallback(IAsyncResult transportResult)
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Net.Security.SslState.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)
       at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result)
       at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)
       at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
       at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
       at System.Net.Security.Tests.SslStreamSystemDefaultTest.TestBase.&lt;RunTest&gt;d__3.MoveNext()
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
       at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
       at System.Net.Security.Tests.SslStreamSystemDefaultTest.&lt;SslStream_DefaultTlsConfigurationApm_Ok&gt;d__1.MoveNext()
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
Build : Master - 20161112.02 (Core Tests)
Failing configurations:
- Windows.7.Amd64
  - AnyCPU-Debug
  - AnyCPU-Release

Failed tests:
SslStream_DefaultTlsConfigurationApm_Ok
SslStream_DefaultTlsConfigurationAsync_Ok
SslStream_DefaultTlsConfigurationSync_Ok

Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20161112.02/workItem/System.Net.Security.Tests</Description>
        <CreatedDate>14/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net.Security</Label>
          <Label>test-run-core</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34251</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>Switch reverse PInvoke to the NativeCallable plan</Title>
    <Description>Fixes #33581 (except x86)</Description>
    <CreatedDate>29/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34251</PullRequestID>
        <IssueID>33581</IssueID>
        <Title>Remove UMThunkStub for all non-x86 scenarios</Title>
        <Description>With the completion of support for NativeCallableAttribute being public - https://github.com/dotnet/runtime/pull/33005, there is some additional cleanup that can now occur. The `UMThunkStub()` calls written in assembly can now be replaced by the newly added JIT helpers for Reverse P/Invoke Enter/Exit.

https://github.com/dotnet/runtime/blob/a1af0f2ad6cf51107a636dbe280cf939abd46b34/src/coreclr/src/vm/jithelpers.cpp#L5064-L5095

The x86 case must still use the `UMThunkStub()`, but all other can now be removed.

/cc @jkoritzinsky @jkotas @janvorli </Description>
        <CreatedDate>14/03/2020</CreatedDate>
        <ClosedDate>01/04/2020</ClosedDate>
        <Labels>
          <Label>area-Interop-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34230</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>elinor-fung</FixedByID>
    <Title>Fix EnumerableViewOfDispatch.GetEnumerator ref counting</Title>
    <Description>This function would end up increasing the ref count via `Variant.ToObject` and `Marshal.GetIUnknownForObject`, but not decreasing it, thus leaking the object.

Fixes #32747</Description>
    <CreatedDate>28/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34230</PullRequestID>
        <IssueID>32747</IssueID>
        <Title>Memory leak when using NetFwTypeLib in .Net Core 3.1</Title>
        <Description>Hi,

I think I found a bug (memory leak), but barely know what I'm doing, so bear with me. Hopefully, I got this issue in the right place here in github for starters?

It's very simple to reproduce and my current environment is .Net Core 3.1 using Visual Studio 2019 on Windows 10 (and release version on Windows Server 2016).  Steps to reproduce:

1. Create a new "Console App (.NET Core)"
2. Add a reference to NetFwTypeLib
3. Run the following 12 lines of code:

``
Watch the memory grow non-stop. It works ok otherwise.

The issue seems to be at the "INetFwRule firewallRule" line. If you remove the .Where linq clause, the result is the same; the memory grows for each passing loop and never releases until the app is terminated.

I used this same two lines of code in .Net Framework 4.6.1 with no abnormal memory consumption.

Currently, I use those two lines of code in a traffic monitor app I created for my internet facing servers and watch the memory grow to as high as 12GB in a day or so (depends how many ips I'm blocking), then I just terminate it and restart it. So, it seems to be not only not releasing memory, but also eating an abnormally high amount for a single or empty record?

I got shredded on Stackoverflow with this (as many assumed I wanted them to memory profile my app or otherwise discover what the issue is), so I'm hoping you all see the light and have little more tolerance.

In the meantime (assuming there's a leak), do you maybe know a work around? or other "fix"? Thanks.

</Description>
        <CreatedDate>19/02/2020</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <Labels>
          <Label>area-Interop-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34224</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>elinor-fung</FixedByID>
    <Title>Fix for changed host behaviour on app crash</Title>
    <Description>Switch back to only handling synchronous exceptions in host components.
Add native hosting tests for components with unhandled exceptions.

Fix #34093</Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34224</PullRequestID>
        <IssueID>34093</IssueID>
        <Title>App crashes now crash differently</Title>
        <Description>Apps when they throw from main now terminate in ucrtbase.dll instead of kernelbase.dll.
The problem is that the urctbase exception can't be handled by `__try {} __except(...){}` when manually invoking `hostfxr_run_app` in native code. Which causes problems with InProcess IIS now crashing instead of handling the app failure.

We've narrowed the change to https://github.com/dotnet/runtime/compare/97d1f9698cfa20054a2909ad2e4e9c4ee20a7520..b0351370ccd132d95c97b75312fc36adaacc2664

And the most likely commit to affect anything relevant is dotnet/runtime@b035137

Simple repro with newer hostpolicy.dll vs old hostpolicy.dll:

* `dotnet new console`
* `throw new Exception();` in Main
* Observe event viewer showing fault in ucrtbase instead of kernelbase

Before:
``</Description>
        <CreatedDate>25/03/2020</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <Labels>
          <Label>area-Host</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34223</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Fix the coreclr outerloop build</Title>
    <Description>Revert the warn as error as it's causing the coreclr outerloop build to
break. Investigated fixing the warnings but there are a mix of C# and IL
warnings. The latter I'm less sure of the fix. Reverting to unblock and
will investigate the warnings in parallel.

closes #34220</Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>28/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34223</PullRequestID>
        <IssueID>34220</IssueID>
        <Title>coreclr outerloop test build failure</Title>
        <Description>https://dev.azure.com/dnceng/public/_build/results?buildId=576645&amp;view=logs&amp;j=8524357e-1450-5e10-a984-883a50af28d9&amp;t=ede4d230-8340-53fe-3e6a-8c3ab5208a8a

``

@jaredpar </Description>
        <CreatedDate>27/03/2020</CreatedDate>
        <ClosedDate>28/03/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-coreclr</Label>
          <Label>blocking-outerloop</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34221</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AndyAyersMS</FixedByID>
    <Title>JIT: allow CORINFO_HELP_READYTORUN_GENERIC_HANDLE to be optimized</Title>
    <Description>This helper is idempotent and exception free, so enable it for value numbering.
Also, no need to spill the entire eval stack for a virtual stub calls.

Addresses part of #7723.</Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>28/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34221</PullRequestID>
        <IssueID>7723</IssueID>
        <Title>JIT: review properties of jit helpers</Title>
        <Description>Some helpers are missing explicit entries in the helper classifier code at `HelperCallProperties::init()`. Seems like we should adopt a policy where all helper properties are spelled out explicitly and the default case asserts, so when a new helper is added we know we should go add the properties.

For instance `CORINFO_HELP_READYTORUN_GENERIC_HANDLE` is not listed and calls to it likely can be removed if the result is unused.

category:cq
theme:helpers
skill-level:expert
cost:medium</Description>
        <CreatedDate>24/03/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-CodeGen-coreclr</Label>
          <Label>enhancement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34207</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>maryamariyan</FixedByID>
    <Title>Disable flaky Microsoft.Extensions.Caching.Memory tests</Title>
    <Description>Related to: #33993</Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>27/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34207</PullRequestID>
        <IssueID>33993</IssueID>
        <Title>Test failures: Microsoft.Extensions.Caching.Memory flakiness</Title>
        <Description>``


https://helix.dot.net/api/2019-06-17/jobs/e7ed99d0-5a25-4792-8b58-04c5a0009c69/workitems/Microsoft.Extensions.Caching.Memory.Tests/console

---
UPDATE:
Failures not just on Mono. The flakiness reported in https://github.com/dotnet/runtime/issues/34128 and disabled in PR https://github.com/dotnet/runtime/pull/34142</Description>
        <CreatedDate>24/03/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-Microsoft.Extensions</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34206</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>eerhardt</FixedByID>
    <Title>Add RuntimeInformation.RuntimeIdentifier</Title>
    <Description>This value returns the Runtime Identifier (RID) of the current machine.

Contributes to #26780

Most of the tests are disabled because we use an old host to run our tests. When we update to a host with the new code, the tests can be enabled. I'll keep #26780 open until the tests are enabled.</Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>28/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34206</PullRequestID>
        <IssueID>26780</IssueID>
        <Title>Move appropriate parts of Microsoft.DotNet.PlatformAbstractions.RuntimeEnvironment into the shared framework</Title>
        <Description>### Rationale

It is often the case, when working with .NET Core that you want to do something based on the current platform/architecture. In many cases, this can include needing to interop with tools published using a particular "runtime identifier".

Today, the RuntimeIdentifier is only exposed through the `Microsoft.DotNet.PlatformAbstractions.RuntimeEnvironment.GetRuntimeIdentifier()` API and is not exposed as part of CoreFX. This requires referencing an additional package, and prevents it from being used in certain scenarios (such as evaluation time in MSBuild).

As such, I propose that we expose a mechanism to get the `RID` for the current execution environment at runtime.

### Proposed API
``

The above API will return the value of a new AppContext variable `RUNTIME_IDENTIFIER`. This variable will be passed by the `dotnet.exe` host, and can be passed by any other native host when the runtime is loaded.

DISCUSSION: Should we still maintain a managed fallback code path for when this AppContext variable isn't present? For example if the app was loaded from a different native host that didn't set this variable.

### Additional Notes

This would allow switching on the active `RID` from an MSBuild project/props/targets file, which would allow greater versatility in consuming native tools from a package during build time (or from a user program at runtime).

It may be worth reviewing the other APIs exposed via `Microsoft.DotNet.PlatformAbstractions.RuntimeEnvironment` and determining which others, if any, should also be exposed: https://github.com/dotnet/core-setup/blob/master/src/managed/Microsoft.DotNet.PlatformAbstractions/RuntimeEnvironment.cs

### Updates

- eerhardt: Add proposal for `OperatingSystem` and `OperatingSystemVersion` so `Microsoft.DotNet.PlatformAbstractions.RuntimeEnvironment` can be completely removed/deprecated/etc.

- vihofer: Choosing _OS_ over _OperatingSystem_ as we already use _OS_ in `IsOSPlatform`. `OperatingSystemPlatform` is already accessible through `IsOSPlatform(Platform)`. RuntimeArchitecture is already exposed as `ProcessArchitecture`. The `RuntimeVersions` proposal is already covered by [dotnet/coreclr#22664](https://github.com/dotnet/coreclr/pull/22664) and doesn't require an api review. 

- eerhardt: Remove proposal for `OSName` and `OSVersion`, we will drop support for these APIs. Callers can instead call `Ntdll.RtlGetVersionEx` on Windows, or read `/etc/os-release` on Unix.
Change `RuntimeIdentifier` from a property to a method call, since the proposed behavior will invoke a method: `AppContext.GetData()`, which isn't appropriate for a property.</Description>
        <CreatedDate>11/07/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>api-approved</Label>
          <Label>area-System.Runtime</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34206</PullRequestID>
        <IssueID>26780</IssueID>
        <Title>Move appropriate parts of Microsoft.DotNet.PlatformAbstractions.RuntimeEnvironment into the shared framework</Title>
        <Description>### Rationale

It is often the case, when working with .NET Core that you want to do something based on the current platform/architecture. In many cases, this can include needing to interop with tools published using a particular "runtime identifier".

Today, the RuntimeIdentifier is only exposed through the `Microsoft.DotNet.PlatformAbstractions.RuntimeEnvironment.GetRuntimeIdentifier()` API and is not exposed as part of CoreFX. This requires referencing an additional package, and prevents it from being used in certain scenarios (such as evaluation time in MSBuild).

As such, I propose that we expose a mechanism to get the `RID` for the current execution environment at runtime.

### Proposed API
``

The above API will return the value of a new AppContext variable `RUNTIME_IDENTIFIER`. This variable will be passed by the `dotnet.exe` host, and can be passed by any other native host when the runtime is loaded.

DISCUSSION: Should we still maintain a managed fallback code path for when this AppContext variable isn't present? For example if the app was loaded from a different native host that didn't set this variable.

### Additional Notes

This would allow switching on the active `RID` from an MSBuild project/props/targets file, which would allow greater versatility in consuming native tools from a package during build time (or from a user program at runtime).

It may be worth reviewing the other APIs exposed via `Microsoft.DotNet.PlatformAbstractions.RuntimeEnvironment` and determining which others, if any, should also be exposed: https://github.com/dotnet/core-setup/blob/master/src/managed/Microsoft.DotNet.PlatformAbstractions/RuntimeEnvironment.cs

### Updates

- eerhardt: Add proposal for `OperatingSystem` and `OperatingSystemVersion` so `Microsoft.DotNet.PlatformAbstractions.RuntimeEnvironment` can be completely removed/deprecated/etc.

- vihofer: Choosing _OS_ over _OperatingSystem_ as we already use _OS_ in `IsOSPlatform`. `OperatingSystemPlatform` is already accessible through `IsOSPlatform(Platform)`. RuntimeArchitecture is already exposed as `ProcessArchitecture`. The `RuntimeVersions` proposal is already covered by [dotnet/coreclr#22664](https://github.com/dotnet/coreclr/pull/22664) and doesn't require an api review. 

- eerhardt: Remove proposal for `OSName` and `OSVersion`, we will drop support for these APIs. Callers can instead call `Ntdll.RtlGetVersionEx` on Windows, or read `/etc/os-release` on Unix.
Change `RuntimeIdentifier` from a property to a method call, since the proposed behavior will invoke a method: `AppContext.GetData()`, which isn't appropriate for a property.</Description>
        <CreatedDate>11/07/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>api-approved</Label>
          <Label>area-System.Runtime</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34201</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AaronRobinsonMSFT</FixedByID>
    <Title>Unwrap the TargetInvocationException when a IDispatch invoke throws.</Title>
    <Description>Unwrap the `TargetInvocationException` thrown during an `IDispatch` invoke. This matches the behavior of .NET Framework.

Fixes #33050 

The decision to not add support for `BindingFlags.DoNotWrapExceptions` in the native side of this code path is due to the desire to avoid altering the `IDispatch` code paths that largely mimics .NET Framework. Keeping them as close as possible helps investigate bugs and since no new investment is being made in this area the code is largely frozen in place anyways.

/cc @jkoritzinsky @elinor-fung </Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>27/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34201</PullRequestID>
        <IssueID>33050</IssueID>
        <Title>When calling into COM API, behavior is different when a COM exception is thrown between desktop and core</Title>
        <Description>When calling into a COM API that errors in .NET Desktop, a COMException is thrown. In .NET Core, a TargetInvocationException is raised with an inner exception of COMException is thrown. This is a breaking change for any app that relies on COM API calls throwing a COMException for flow control.

Example repro:

``

While the workaround is simple -- catch TargetInvocationException and look for an InnerException of COMException -- this breaks any shipped code that relies on the .NET Desktop behavior of being able to catch COMException for flow control.</Description>
        <CreatedDate>02/03/2020</CreatedDate>
        <ClosedDate>27/03/2020</ClosedDate>
        <Labels>
          <Label>area-Interop-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34199</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>bartonjs</FixedByID>
    <Title>Use separate key instances for span/array/array+offset test classes</Title>
    <Description>Because the key object generation was done in the algorithm-specific base class,
the triplet of interface types was using the key instances in parallel.

By moving the static variable (and initialization thereof) to each of the derived
classes, the key objects are unique per class, which matches the test parallelism.

Making the classes be part of the same test collection would also solve this problem,
which would save on a few random keygens, but would likely overall take more
time due to the number of tests that would be moved to sequential execution.

Fixes #34045.</Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>28/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34199</PullRequestID>
        <IssueID>34045</IssueID>
        <Title>Cryptograph.Csp tests are failing intermittently</Title>
        <Description>
### Console Log Summary

``


### Builds
|Build|Pull Request | Test Failure Count|
| --- | --- | --- |
|[#569968](https://dev.azure.com/dnceng/public/_build/results?buildId=569968)|#33175|1|
|[#570519](https://dev.azure.com/dnceng/public/_build/results?buildId=570519)|#33420|1|
|[#570525](https://dev.azure.com/dnceng/public/_build/results?buildId=570525)|#33990|1|
|[#570636](https://dev.azure.com/dnceng/public/_build/results?buildId=570636)|Rolling|1|
|[#570708](https://dev.azure.com/dnceng/public/_build/results?buildId=570708)|#32592|1|
|[#570791](https://dev.azure.com/dnceng/public/_build/results?buildId=570791)|#33970|1|
|[#570811](https://dev.azure.com/dnceng/public/_build/results?buildId=570811)|#33953|1|
|[#571061](https://dev.azure.com/dnceng/public/_build/results?buildId=571061)|#33984|1|
|[#571274](https://dev.azure.com/dnceng/public/_build/results?buildId=571274)|#34027|1|
|[#571286](https://dev.azure.com/dnceng/public/_build/results?buildId=571286)|Rolling|1|
|[#571338](https://dev.azure.com/dnceng/public/_build/results?buildId=571338)|#33942|1|
|[#571351](https://dev.azure.com/dnceng/public/_build/results?buildId=571351)|#33881|2|
|[#571369](https://dev.azure.com/dnceng/public/_build/results?buildId=571369)|#33831|1|
### Configurations
- netcoreapp5.0-OSX-Debug-x64-CoreCLR_release-OSX.1013.Amd64.Open
- netcoreapp5.0-OSX-Debug-x64-CoreCLR_release-OSX.1014.Amd64.Open
- netcoreapp5.0-OSX-Debug-x64-Mono_release-OSX.1013.Amd64.Open
- netcoreapp5.0-OSX-Debug-x64-Mono_release-OSX.1014.Amd64.Open
- netcoreapp5.0-Windows_NT-Debug-x64-Mono_release-(Windows.Nano.1809.Amd64.Open)windows.10.amd64.serverrs5.open@&lt;!-- --&gt;mcr.microsoft.com/dotnet-buildtools/prereqs:nanoserver-1809-helix-amd64-08e8e40-20200107182504
- netcoreapp5.0-Windows_NT-Debug-x86-CoreCLR_release-Windows.10.Amd64.Server19H1.Open
- netcoreapp5.0-Windows_NT-Release-x64-CoreCLR_release-Windows.7.Amd64.Open
- netcoreapp5.0-Windows_NT-Release-x64-CoreCLR_release-Windows.81.Amd64.Open
### Helix Logs
|Build|Pull Request|Console|Core|Test Results|
| --- | --- | --- | --- | --- |
|[#569968](https://dev.azure.com/dnceng/public/_build/results?buildId=569968)|#33175|[console.62a44bd3.log](https://helix.dot.net/api/2019-06-17/jobs/02d37d97-5431-4cea-b5e1-89e61312f4c2/workitems/System.Security.Cryptography.Csp.Tests/files/console.62a44bd3.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/02d37d97-5431-4cea-b5e1-89e61312f4c2/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#570519](https://dev.azure.com/dnceng/public/_build/results?buildId=570519)|#33420|[console.6cc569df.log](https://helix.dot.net/api/2019-06-17/jobs/9c8ef8bf-523d-453d-a8c9-f6c37d9a8afe/workitems/System.Security.Cryptography.Csp.Tests/files/console.6cc569df.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/9c8ef8bf-523d-453d-a8c9-f6c37d9a8afe/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#570525](https://dev.azure.com/dnceng/public/_build/results?buildId=570525)|#33990|[console.37ba0ba2.log](https://helix.dot.net/api/2019-06-17/jobs/501ab26a-d191-466f-a587-d0814867f743/workitems/System.Security.Cryptography.Csp.Tests/files/console.37ba0ba2.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/501ab26a-d191-466f-a587-d0814867f743/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#570636](https://dev.azure.com/dnceng/public/_build/results?buildId=570636)|Rolling|[console.79919bed.log](https://helix.dot.net/api/2019-06-17/jobs/483e1cf3-6225-4cf0-826b-b87131c8c110/workitems/System.Security.Cryptography.Csp.Tests/files/console.79919bed.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/483e1cf3-6225-4cf0-826b-b87131c8c110/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#570708](https://dev.azure.com/dnceng/public/_build/results?buildId=570708)|#32592|[console.474b5dfa.log](https://helix.dot.net/api/2019-06-17/jobs/ef9e215b-1a6e-45bc-a5ff-0021eb55c9b9/workitems/System.Security.Cryptography.Csp.Tests/files/console.474b5dfa.log)|||
|[#570791](https://dev.azure.com/dnceng/public/_build/results?buildId=570791)|#33970|[console.6bc06f50.log](https://helix.dot.net/api/2019-06-17/jobs/42da9283-1e54-41ce-9a6e-b7dc77d834f5/workitems/System.Security.Cryptography.Csp.Tests/files/console.6bc06f50.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/42da9283-1e54-41ce-9a6e-b7dc77d834f5/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#570811](https://dev.azure.com/dnceng/public/_build/results?buildId=570811)|#33953|[console.f49ee02a.log](https://helix.dot.net/api/2019-06-17/jobs/e21b8f8d-0699-4ff8-b58d-b53732e6331c/workitems/System.Security.Cryptography.Csp.Tests/files/console.f49ee02a.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/e21b8f8d-0699-4ff8-b58d-b53732e6331c/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#571061](https://dev.azure.com/dnceng/public/_build/results?buildId=571061)|#33984|[console.58ed13a7.log](https://helix.dot.net/api/2019-06-17/jobs/8a8eeb5b-f889-445b-b394-dfc70d938c59/workitems/System.Security.Cryptography.Csp.Tests/files/console.58ed13a7.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/8a8eeb5b-f889-445b-b394-dfc70d938c59/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#571274](https://dev.azure.com/dnceng/public/_build/results?buildId=571274)|#34027|[console.298ca928.log](https://helix.dot.net/api/2019-06-17/jobs/8d799ac0-266b-48b7-9ea2-2dbd4e33e20a/workitems/System.Security.Cryptography.Csp.Tests/files/console.298ca928.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/8d799ac0-266b-48b7-9ea2-2dbd4e33e20a/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#571286](https://dev.azure.com/dnceng/public/_build/results?buildId=571286)|Rolling|[console.85804e12.log](https://helix.dot.net/api/2019-06-17/jobs/ecc03c9f-52d1-49d2-bc7c-5a943179e5a4/workitems/System.Security.Cryptography.Csp.Tests/files/console.85804e12.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/ecc03c9f-52d1-49d2-bc7c-5a943179e5a4/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#571338](https://dev.azure.com/dnceng/public/_build/results?buildId=571338)|#33942|[console.5c51842e.log](https://helix.dot.net/api/2019-06-17/jobs/83c402c0-1c47-4b15-99ae-1e9c1d4b8452/workitems/System.Security.Cryptography.Csp.Tests/files/console.5c51842e.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/83c402c0-1c47-4b15-99ae-1e9c1d4b8452/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#571351](https://dev.azure.com/dnceng/public/_build/results?buildId=571351)|#33881|[console.aff7c6bf.log](https://helix.dot.net/api/2019-06-17/jobs/b9a53863-7311-40c5-abfc-7efbb71b2d12/workitems/System.Security.Cryptography.Csp.Tests/files/console.aff7c6bf.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/b9a53863-7311-40c5-abfc-7efbb71b2d12/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#571351](https://dev.azure.com/dnceng/public/_build/results?buildId=571351)|#33881|[console.60e947ec.log](https://helix.dot.net/api/2019-06-17/jobs/7c3cbaae-94e4-417d-8227-0ab2c9f0c170/workitems/System.Security.Cryptography.Csp.Tests/files/console.60e947ec.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/7c3cbaae-94e4-417d-8227-0ab2c9f0c170/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|
|[#571369](https://dev.azure.com/dnceng/public/_build/results?buildId=571369)|#33831|[console.7ecc7dfb.log](https://helix.dot.net/api/2019-06-17/jobs/25487a3d-b96f-4eb2-94d0-fc41b8839cd6/workitems/System.Security.Cryptography.Csp.Tests/files/console.7ecc7dfb.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/25487a3d-b96f-4eb2-94d0-fc41b8839cd6/workitems/System.Security.Cryptography.Csp.Tests/files/testResults.xml)|

</Description>
        <CreatedDate>24/03/2020</CreatedDate>
        <ClosedDate>28/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Security</Label>
          <Label>blocking-clean-ci</Label>
          <Label>intermittent</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34184</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>sandreenko</FixedByID>
    <Title>Make `compCurBB` available for `fgMorphBlockReturn`.</Title>
    <Description>We were calling `tree = fgMorphCopyBlock(tree)`  in `fgMergeBlockReturn` and it could call `optAssertionGen(asg)` that would use `compCurBB` in several places like https://github.com/dotnet/runtime/blob/d6e3a0fcbb644c272c0dd2695c0053e62e2827c5/src/coreclr/src/jit/assertionprop.cpp#L2731

We have not seen a failure because we did not have struct returns and `tree-&gt;OperIsCopyBlkOp()` check was always false.

No diffs x64(crossgen, pmi, SPMI).

Easier to review by commits with whitespace changes disables:

04eccab3955: Extract `fgMergeBlockReturn`.
I wanted to call it `fgMorphBlockReturn`, but morph is already a very vague verb in the Jit, tried to use a more precise one.

315288b7712: Add a function header.

8347f1c5c72: Make `compCurBB` available for `fgMorphBlockReturn`.
When we generate an assignment we could need to create a new assertion, that requires `compCurBB` to be available.

c9ee223a537: Delete `INVALID_POINTER_VALUE`.
I would like to remove it because:
1) it was under debug only;
2) there were no null checks for `compHndBBtab` because it is a dependent variable
so there was no need to distinguish valid null pointer from a bad invalid pointer;
3) that was the only place where this mechanism was used.

1f60a915b67: Allow to CSE the merge return ASG.
I can't see a reason why it should not be allowed.
The issue with the previous version was that we did not actually know what we were marking: GT_ASG, GT_COMMA, something else? Was the idea to mark individual ASG under COMMA?

Failures are unrelated.

Preparation for #33225.</Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34184</PullRequestID>
        <IssueID>33225</IssueID>
        <Title>Don't retype struct as primitive types in import.</Title>
        <Description>This change adds `COMPlus_JitNoStructRetyping` that prevents struct retyping for `call struct` and `return struct` cases. Currently, this retyping is happening in importer, we want to move it to lower.
The current retyping forbids later phases to do optimization with these values, for example, it affects code for inlined methods
``


code size changes for my small `StructABI\structreturn.cs` test, improvements happen when we inline the constructor method:


Overall, right now, it is a regression, I will start fixing them in the next change. Maybe I will push them to this PR or merge this PR with the flag disabled and fix the regressions in the next.
</Description>
        <CreatedDate>05/03/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>arch-x64</Label>
          <Label>area-CodeGen-coreclr</Label>
          <Label>os-windows</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34183</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>sandreenko</FixedByID>
    <Title>Fix undetermined SPMI behavior.</Title>
    <Description>The observed behavior was very funny: I was getting hundreds of diffs with the same -b and -d jit, but when I turned JitDump on they were all disappearing, took me a while to catch the issue.

The new field was added in #32270, @fadimounir please notify jit-contrib if you add or delete fields from `struct CORINFO_*`, because we need to mirror that in SPMI.

It will require a new SPMI collection (the old will fail with buffer overread).</Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>27/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34183</PullRequestID>
        <IssueID>32270</IssueID>
        <Title>Dynamic generic dictionary expansion feature</Title>
        <Description>TODO:
- [x] Update JITInterface GUID in corinfo.h after https://github.com/dotnet/runtime/pull/1378#issuecomment-580944654

These changes introduce dynamic size expansion for generic dictionary layouts when we run out of slots.
The original implementation allowed for an expansion, but using a linked list structure, which made it
impossible to use fast lookup slots once we're out of slots in the first bucket.

This new implementation allows for the usage of fast lookup slots always, for all generic lookups.

This also removes the constraint we had on R2R, where we disabled the usage of fast slots all-together.

**_NOTE:_**
This is a much simpler implementation than the original commit which got reverted due to failures related to collectible assemblies (https://github.com/dotnet/coreclr/pull/26262). The difference between these changes and the original ones is that dictionary expansion for types and methods is now done lazily, on-demand, whenever we attempt to read a value beyond the size of a given dictionary. This makes uses of the newly added JIT support from https://github.com/dotnet/runtime/pull/31957. The bug with collectible assemblies have been also fixed, and I added a test to cover various interesting aspects of the feature.

**_BONUS:_**
Part of these changes is some cleanup work to really simplify the R2R dictionary access stubs. These stubs are now much more compact with fewer instructions and better registry usage (many #ifdef UNIX_AMD64_ABI blocks removed from the amd64 stub)

cc @dotnet/crossgen-contrib </Description>
        <CreatedDate>14/02/2020</CreatedDate>
        <ClosedDate>25/02/2020</ClosedDate>
        <Labels>
          <Label>area-VM-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34181</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>wfurt</FixedByID>
    <Title>fix TLS13 procesing on windows</Title>
    <Description>This is follow-up on #32925. While that PR made it generally safe e.g. avoided concurrent decrypt/encrypt beyond OpenSSL it did not  address few remaining issues.

With TLS1.3 "renegotiation" can happen without any read. That left framing  `unknown` and caused exception visible in #1720. That also left some test hanging because of incorrect logic in `ForceAuthenticationAsync`.

We do not have CI to cover this but all tests are passing on my insider preview build. 
TLS13 test should light-up when we have newer Windows versions in CI and when registry is set.  (right now TLS13 is opt-in feature) 

fixes #1720

 </Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34181</PullRequestID>
        <IssueID>32925</IssueID>
        <Title>rework locking in SslStream to support TLS1.3</Title>
        <Description>The locking code in SslStream was broken for quite a while without us noticing. We bump to it with OpenSSL 1.1.1 and TLS1.3 but the fix was to add locking to PAL: https://github.com/dotnet/corefx/pull/37736. I run to the same problems when working on #1720. When MessageDecrypt decides to start renegotiation (there is no real renegotiation in TLS1.3 but on Windows, we still do get  SEC_I_RENEGOTIATE as we need to pass data to `lsass` process. 

I started to fix it but after chatting with @stephentoub we decided to go with a simplistic approach: We grab synchronous lock around DecryptData/EncryptData and if renegotiation is happening we would use create TaskCompletionSource encrypt can wait on for completion. 

With this, the code is pretty simple and old craft can be removed so as the change to OpenSSL PAL. 

Performance seems to be about the same. On Windows, I get results bellow and it changes slightly between runs. On Linux, there was already lock and performance remains the same as well.

|                          Method |                                                                                                                  Toolchain |        Mean |     Error |    StdDev |      Median |         Min |         Max | Ratio | RatioSD |  Gen 0 | Gen 1 | Gen 2 | Allocated |
|-------------------------------- |--------------------------------------------------------------------------------------------------------------------------- |------------:|----------:|----------:|------------:|------------:|------------:|------:|--------:|-------:|------:|------:|----------:|
|       DefaultHandshakeIPv4Async | master\CoreRun.exe |    780.6 us |  18.41 us |  21.20 us |    780.2 us |    750.4 us |    821.4 us |  1.00 |    0.03 | 3.1250 |     - |     - |  13.62 KB |
|       DefaultHandshakeIPv4Async |  newLocking\CoreRun.exe |    781.1 us |  17.16 us |  19.76 us |    777.3 us |    743.8 us |    811.4 us |  1.00 |    0.00 |      - |     - |     - |  13.68 KB |
|                                 |                                                                                                                            |             |           |           |             |             |             |       |         |        |       |       |           |
|       DefaultHandshakeIPv6Async | master\CoreRun.exe |    767.2 us |  14.24 us |  13.98 us |    770.5 us |    726.9 us |    783.2 us |  0.99 |    0.04 | 2.8409 |     - |     - |  13.61 KB |
|       DefaultHandshakeIPv6Async |  newLocking\CoreRun.exe |    769.2 us |  20.27 us |  23.34 us |    773.5 us |    733.6 us |    800.2 us |  1.00 |    0.00 | 2.9762 |     - |     - |  13.68 KB |
|                                 |                                                                                                                            |             |           |           |             |             |             |       |         |        |       |       |           |
|       DefaultHandshakePipeAsync | master\CoreRun.exe |    763.1 us |  18.29 us |  21.06 us |    760.5 us |    731.8 us |    804.2 us |  1.02 |    0.04 | 2.9762 |     - |     - |   15.8 KB |
|       DefaultHandshakePipeAsync |  newLocking\CoreRun.exe |    749.4 us |  16.23 us |  18.69 us |    742.2 us |    724.0 us |    783.1 us |  1.00 |    0.00 | 3.1250 |     - |     - |  15.86 KB |
|                                 |                                                                                                                            |             |           |           |             |             |             |       |         |        |       |       |           |
| TLS12HandshakeECDSA256CertAsync | master\CoreRun.exe |  4,279.7 us |  53.66 us |  50.19 us |  4,267.0 us |  4,210.0 us |  4,398.6 us |  1.00 |    0.02 |      - |     - |     - |   18.8 KB |
| TLS12HandshakeECDSA256CertAsync |  newLocking\CoreRun.exe |  4,289.8 us |  85.58 us |  80.06 us |  4,266.8 us |  4,187.0 us |  4,488.5 us |  1.00 |    0.00 |      - |     - |     - |  18.79 KB |
|                                 |                                                                                                                            |             |           |           |             |             |             |       |         |        |       |       |           |
|  TLS12HandshakeRSA1024CertAsync | master\CoreRun.exe |  3,713.6 us |  33.65 us |  29.83 us |  3,714.3 us |  3,635.7 us |  3,747.2 us |  1.00 |    0.02 |      - |     - |     - |  18.98 KB |
|  TLS12HandshakeRSA1024CertAsync |  newLocking\CoreRun.exe |  3,722.3 us |  68.32 us |  60.56 us |  3,723.6 us |  3,621.7 us |  3,827.1 us |  1.00 |    0.00 |      - |     - |     - |  19.11 KB |
|                                 |                                                                                                                            |             |           |           |             |             |             |       |         |        |       |       |           |
|  TLS12HandshakeRSA2048CertAsync | master\CoreRun.exe |  4,624.0 us |  45.38 us |  42.45 us |  4,636.7 us |  4,524.7 us |  4,697.6 us |  1.00 |    0.01 |      - |     - |     - |  19.37 KB |
|  TLS12HandshakeRSA2048CertAsync |  newLocking\CoreRun.exe |  4,604.8 us |  47.08 us |  44.03 us |  4,602.3 us |  4,542.0 us |  4,691.7 us |  1.00 |    0.00 |      - |     - |     - |  19.42 KB |
|                                 |                                                                                                                            |             |           |           |             |             |             |       |         |        |       |       |           |
|  TLS12HandshakeRSA4096CertAsync | master\CoreRun.exe | 10,789.4 us | 187.44 us | 175.33 us | 10,735.4 us | 10,540.6 us | 11,047.1 us |  0.97 |    0.02 |      - |     - |     - |  20.16 KB |
|  TLS12HandshakeRSA4096CertAsync |  newLocking\CoreRun.exe | 11,072.6 us | 186.93 us | 165.71 us | 11,052.7 us | 10,839.1 us | 11,502.9 us |  1.00 |    0.00 |      - |     - |     - |  20.17 KB |


I did run SslStress for a while and I did not see any issues. 

fixes #32920
contributes to #1720 </Description>
        <CreatedDate>27/02/2020</CreatedDate>
        <ClosedDate>20/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net.Security</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34181</PullRequestID>
        <IssueID>1720</IssueID>
        <Title>TLS1.3 does not work on Windows</Title>
        <Description>While TLS1.3 is not fully supported in releases Windows version It is available for opt-in in some recent one. I used internal preview and I verified that schannel can handle connect to TLS13 Azure endpoint as well as it can connect to my local Linux server running OpenSSL 1.1.1.

However when IO try to connect using .NET I get:
``

further more, When TLS1.3 was originally added to .NET OpenSSL was only one working implementation.  Currently  TLS1.3 tests will not run on TLS1.3 capable Windows server as well as other test break when  1.3 is enabled. </Description>
        <CreatedDate>14/01/2020</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net.Security</Label>
          <Label>bug</Label>
          <Label>os-windows</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34181</PullRequestID>
        <IssueID>1720</IssueID>
        <Title>TLS1.3 does not work on Windows</Title>
        <Description>While TLS1.3 is not fully supported in releases Windows version It is available for opt-in in some recent one. I used internal preview and I verified that schannel can handle connect to TLS13 Azure endpoint as well as it can connect to my local Linux server running OpenSSL 1.1.1.

However when IO try to connect using .NET I get:
``

further more, When TLS1.3 was originally added to .NET OpenSSL was only one working implementation.  Currently  TLS1.3 tests will not run on TLS1.3 capable Windows server as well as other test break when  1.3 is enabled. </Description>
        <CreatedDate>14/01/2020</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net.Security</Label>
          <Label>bug</Label>
          <Label>os-windows</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34176</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>ericstj</FixedByID>
    <Title>Include doc files in Extensions transport package</Title>
    <Description>Include src-generated xml docs in transport package. 

Fixes #34172 </Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>27/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34176</PullRequestID>
        <IssueID>34172</IssueID>
        <Title>We need the xml docs for Extensions packages in the Microsoft.Extensions.Internal.Transport</Title>
        <Description>Looks like the internal transport package only includes the ref and impl dlls. We also include xml docs in our ref packs, so can you add those to the transport package as well?</Description>
        <CreatedDate>26/03/2020</CreatedDate>
        <ClosedDate>27/03/2020</ClosedDate>
        <Labels>
          <Label>area-Microsoft.Extensions</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34155</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Clean up warnings building CLR tests</Title>
    <Description>The CLR test build was producing two different warnings:
1. Invalid use of C# nullable reference types
1. Double import of disableversioncheck.targets

Unwinding the double import was tricky due to the way several of the
projects in this tree were double built with different variables which
changed the directories that code was imported from. Eventually settled
on an old C++ trick of using a set variable to avoid the future double
import.

Not particularly happy with this trick but also not a clear way to
unwind the double imports here.

Overall these warnings snuck into the build because warn as error was
disabled for all the MSBuild invocations. That was apparently due to
coreclr#19922 which has long since been closed. Hence I flipped back on
warn as error here.</Description>
    <CreatedDate>26/03/2020</CreatedDate>
    <ClosedDate>27/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34155</PullRequestID>
        <IssueID>19922</IssueID>
        <Title>Add ValueTuple type forward to CoreRT</Title>
        <Description>ValueTuple was implemented in CoreRT. ~~Once it ships (I'm not sure which release or timeframe that will be),~~ The corefx package will need to type forward to CoreRT.

FYI @jkotas </Description>
        <CreatedDate>13/01/2017</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Runtime</Label>
          <Label>enhancement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34154</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>janvorli</FixedByID>
    <Title>Fix debug symbol generation</Title>
    <Description>The debug symbol generation got recently broken. For most of the
shared libraries, the debug symbols were stripped twice due to
the fact that install_clr for them was invoked twice - once for
the default install location and once for the sharedFramework
location and the stripping was executed in both of them. First
stripping stripped the symbols off the target binary and set
so called debuglink in the binary to point to the symbol file.
This debuglink includes a crc32 of the dbg symbols file.
The second stripping tried to strip symbols from the already
stripped binary. That resulted in a small dbg symbols file
that didn't actually contain any useful symbols. Moreover,
it is not possible to set a debuglink in a binary if it is
already set there. So the second attempt failed and the crc
was left set to the crc of the previous debug. Thus when
debugger loads such a binary, it cannot find the debug symbols
file, as the crc doesn't match. And even if it matched, the
data would have no value.

The fix is to modify install_clr so that it has an extra
optional argument to specify the secondary install location and
use just one install_clr per target. The function then does the
stripping just once and the actual installation once or twice
depending on the secondary location argumenbt presence.

Close #34108</Description>
    <CreatedDate>26/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34154</PullRequestID>
        <IssueID>34108</IssueID>
        <Title>Native debugging with symbols is broken on Linux/arm64</Title>
        <Description>It appears that #33716 causes the following issues on Linux/arm64 (it could be on other architectures as well)

This is what shows up when I run gdb
``

cc @janvorli @am11</Description>
        <CreatedDate>26/03/2020</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <Labels>
          <Label>area-CodeGen-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34153</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Need to convert from uint instead of cast here to maintain consistenc…</Title>
    <Description>!! This PR is a copy of mono/mono#19333,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;…y with mono_gchandle_new_weakref_internal.

Looks like this was missed in: https://github.com/Unity-Technologies/mono/commit/941a335ea0f20c22a02a7947945f53787a56b2d3

&lt;!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
--&gt;
</Description>
    <CreatedDate>26/03/2020</CreatedDate>
    <ClosedDate>27/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34153</PullRequestID>
        <IssueID>19333</IssueID>
        <Title>Move the WebSockets implementation from HttpListener to System.Net.WebSockets</Title>
        <Description>To allow usage of the implementation in other contracts we would also need to expose a public API similar to:
https://github.com/dotnet/corefx/blob/master/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/ManagedWebSocket.cs#L37-L41
</Description>
        <CreatedDate>11/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34127</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>aik-jahoda</FixedByID>
    <Title>Disable PostAsyncExpect100Continue_NonSuccessResponse_RequestBodyNotSent test</Title>
    <Description>#31220 reports failing test. Now the test fails regularly and it worth disabling it.</Description>
    <CreatedDate>26/03/2020</CreatedDate>
    <ClosedDate>27/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34127</PullRequestID>
        <IssueID>31220</IssueID>
        <Title>End of Stream in PostAsyncExpect100Continue_NonSuccessResponse_RequestBodyNotSent test</Title>
        <Description>System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.PostAsyncExpect100Continue_NonSuccessResponse_RequestBodyNotSent
``
https://dev.azure.com/dnceng/public/_build/results?buildId=393660&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=12233140&amp;resultId=157765&amp;paneView=debug

netcoreapp-Linux-Debug-x64-(Alpine.310.Amd64.Open)ubuntu.1604.amd64.Open</Description>
        <CreatedDate>19/10/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Net.Http</Label>
          <Label>bug</Label>
          <Label>disabled-test</Label>
          <Label>test-run-core</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34119</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>ManickaP</FixedByID>
    <Title>Disable all PlatformHandlerTest_Cookies_Http2 for WinHttpHandler.</Title>
    <Description>Disables all Cookie tests for HTTP/2 ove WinHttpHandler.
Contributes to #12043</Description>
    <CreatedDate>26/03/2020</CreatedDate>
    <ClosedDate>26/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34119</PullRequestID>
        <IssueID>12043</IssueID>
        <Title>Test Failed: GetAsync_SetCookieContainer_CookieSent failed</Title>
        <Description>**Job:** (JitStress - arm64)
https://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_tieredcompilation_tst/122/

**Failed tests:**
System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Cookies_Http2.GetAsync_SetCookieContainer_CookieSent

**Log:**
``</Description>
        <CreatedDate>15/02/2019</CreatedDate>
        <ClosedDate>26/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net.Http</Label>
          <Label>blocking-clean-ci</Label>
          <Label>test-run-core</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34113</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>Add back MetaDataGetDispenser export for profilers</Title>
    <Description>Contributes to #34014</Description>
    <CreatedDate>26/03/2020</CreatedDate>
    <ClosedDate>26/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34113</PullRequestID>
        <IssueID>34014</IssueID>
        <Title>Add MetaDataGetDispenser export as public API for profilers</Title>
        <Description>Since ilasm didn't need the export for MetaDataGetDispenser any more it was removed in
https://github.com/dotnet/runtime/commit/a6cbdae05eaa017e8e11eb1954c9525c62e5dfe0#diff-9246b6a12f41551eeb91940bd9905151L30 .

MetaDataGetDispenser is needed for profilers to access interfaces like IMetaDataEmit.

Already talked to @jkotas about this.</Description>
        <CreatedDate>24/03/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-Diagnostics-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34107</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>echesakovMSFT</FixedByID>
    <Title>Always set InstructionSet_ArmBase in PAL_GetJitCpuCapabilityFlags </Title>
    <Description>`PAL_GetJitCpuCapabilityFlags` should always set `InstructionSet_ArmBase`.
Otherwise based on an algorithm added in #33936 https://github.com/dotnet/runtime/blob/951bc705231bad09371339c321ae4c0e1283cb4d/src/coreclr/src/inc/corinfoinstructionset.h#L180-L195 we will end up with AdvSimd, Crc32 removed from the set of supported ISAs, but not their 64-bit counterparts AdvSimd_Arm64 and Crc32_Arm64.

This was a reason of failure as seen in https://github.com/dotnet/runtime/pull/33749#issuecomment-604000341 where code guarded with `AdvSimd.IsSupported` was just removed by JIT as dead but code guarded with `AdvSimd.Arm64.IsSupported` as in `System.Collections.BitArray..ctor(Boolean[] values)` was throwing `System.PlatformNotSupportedException` from JIT.

cc @davidwrighton @CarolEidt @tannergooding </Description>
    <CreatedDate>26/03/2020</CreatedDate>
    <ClosedDate>26/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34107</PullRequestID>
        <IssueID>33936</IssueID>
        <Title>Reenable unified instruction set logic</Title>
        <Description>Revert #33901 to reenable #33730. The issue was that the runtime was incorrectly disabling use in the jit compiler for all hardware intrinsics on 64 bit platforms at runtime. Fixed by calling `Set64BitInstructionSetVariants` before `EnsureValidInstructionSetSupport`.</Description>
        <CreatedDate>22/03/2020</CreatedDate>
        <ClosedDate>24/03/2020</ClosedDate>
        <Labels>
          <Label>area-CodeGen-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34095</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>janvorli</FixedByID>
    <Title>Bump maximum ICU library version in Unix System.Globalization.Native</Title>
    <Description>The maximum major version of ICU library that we start scanning at was set to 70
(50 as the minimum supported version + 20) long time ago. The available version
of ICU is approaching that limit (it is at 67 now).
This change bumps the max scanned version to 80 to give us enough head space
for a couple of years (guessing based on the current release rate)

Close #34092</Description>
    <CreatedDate>25/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>34095</PullRequestID>
        <IssueID>34092</IssueID>
        <Title>Update maximum ICU library version we scan in System.Globalization.Native on Unix</Title>
        <Description>The maximum major version of ICU library that we start scanning at was set to 70 (50 as the minimum supported version + 20) long time ago. The available version of ICU is approaching that limit (it is at 67 now), so we need to bump that soon to make sure globalization will work with versions higher than 70.</Description>
        <CreatedDate>25/03/2020</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Globalization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2351</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>manne</FixedByID>
    <Title>Nullable annotate for Microsoft.Win32.Registry</Title>
    <Description>Contributes to #2339 </Description>
    <CreatedDate>29/01/2020</CreatedDate>
    <ClosedDate>18/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2351</PullRequestID>
        <IssueID>2339</IssueID>
        <Title>Annotate remainder of .NET Core assemblies for nullable reference types</Title>
        <Description>In .NET Core 3.0, we annotated System.Private.CoreLib for nullable reference types, along with the reference assemblies that surface those types, and the implementations for all of the partial facades behind those reference assemblies.  That represents something around 20% of the surface area.  Post-.NET Core 3.0, we plan to annotate the rest.

Our desired approach to annotating an assembly is to only do so once all of its dependencies are annotated.  That way, the assembly can be annotated as a unit, and barring any bugs that need to be fixed in a dependency, we won't need to spend time fixing up new warnings in higher-level assemblies as lower-level assemblies are annotated. This leads to a semi-ordering of how assemblies should be annotated, from the "bottom up". Here is a rough grouping.  We can annotate everything in group 1 (in parallel if desired), then everything in group 2 (in parallel if desired), etc.  There is of course more parallelism than this available, as not every assembly in group N has a dependency on every assembly in group N - 1, but the graph is complicated and this is easier to visualize and reason about.

We will:

- Submit individual PRs, one for each assembly. Each PR should include changes to both the src and the ref. Each PR should contain only changes related to the nullable annotations/attributes, no other changes.
- PRs can be merged once the annotations have been appropriately reviewed in PR.
- API reviews will happen subsequently, after PRs have been merged, in batch based on everything in master.

cc: @dotnet/nullablefc, @cartermp 

#### 0 (Completed in .NET Core 3.0) ####
- [x] System.Buffers
- [x] System.Collections
- [x] System.Collections.Concurrent
- [x] System.Diagnostics.Contracts
- [x] System.Diagnostics.Debug
- [x] System.Diagnostics.StackTrace
- [x] System.Diagnostics.Tools
- [x] System.Diagnostics.Tracing
- [x] System.Memory
- [x] System.Numerics.Vectors
- [x] System.Reflection.Emit
- [x] System.Reflection.Emit.ILGenerator
- [x] System.Reflection.Emit.Lightweight
- [x] System.Reflection.Primitives
- [x] System.Resources.ResourceManager
- [x] System.Runtime
- [x] System.Runtime.Extensions
- [x] System.Runtime.InteropServices
- [x] System.Runtime.Intrinsics
- [x] System.Runtime.Loader
- [x] System.Security.Principal
- [x] System.Text.Encoding.Extensions
- [x] System.Threading
- [x] System.Threading.Overlapped
- [x] System.Threading.Tasks
- [x] System.Threading.Thread
- [x] System.Threading.ThreadPool
- [x] System.Threading.Timer

#### 1 ####
- [x] Microsoft.Win32.Primitives
- [x] System.Collections.NonGeneric
- [x] System.Collections.Specialized
- [x] System.ComponentModel
- [x] System.ComponentModel.Primitives
- [x] System.Console
- [x] System.Diagnostics.DiagnosticSource
- [x] System.Drawing.Primitives
- [x] System.IO.Compression
- [x] System.IO.Pipelines
- [x] System.Linq
- [x] System.Linq.Parallel
- [x] System.Net.WebHeaderCollection
- [x] System.ObjectModel
- [x] System.Reflection.DispatchProxy
- [x] System.Reflection.TypeExtensions
- [x] System.Resources.Writer
- [x] System.Runtime.CompilerServices.Unsafe
- [x] System.Runtime.CompilerServices.VisualC
- [x] System.Runtime.InteropServices.RuntimeInformation
- [x] System.Runtime.Numerics
- [x] System.Runtime.Serialization.Formatters
- [x] System.Runtime.Serialization.Primitives
- [x] System.Security.Cryptography.Primitives
- [x] System.Security.Principal
- [x] System.Text.Encoding.CodePages
- [x] System.Text.Encodings.Web
- [x] System.Text.Json
- [x] System.Text.RegularExpressions
- [x] System.Threading.Channels
- [x] System.Threading.Tasks.Parallel
- [x] System.Transactions.Local
- [x] System.Web.HttpUtility

#### 2 ####
- [x] System.Collections.Immutable
- [x] System.ComponentModel.EventBasedAsync
- [x] System.IO.Compression.Brotli
- [x] System.IO.FileSystem
- [x] System.IO.FileSystem.DriveInfo
- [x] System.IO.FileSystem.Watcher
- [x] System.IO.MemoryMappedFiles
- [x] System.Linq.Expressions
- [x] System.Reflection.Metadata
- [x] System.Security.Claims
- [x] System.Security.Cryptography.Encoding

#### 3 ####
- [x] Microsoft.Win32.SystemEvents
- [x] System.ComponentModel.Composition
- [x] System.Diagnostics.FileVersionInfo
- [x] System.Dynamic.Runtime
- [x] System.IO.Compression.ZipFile
- [x] System.Linq.Queryable
- [x] System.Reflection.MetadataLoadContext
- [x] System.Security.AccessControl
- [x] System.Security.Cryptography.Algorithms
- [x] System.Security.Principal.Windows

#### 4 ####
- [x] Microsoft.Win32.Registry
- [x] System.Diagnostics.Process
- [x] System.Diagnostics.TraceSource
- [x] System.Drawing.Common
- [x] System.IO.FileSystem.AccessControl
- [x] System.IO.IsolatedStorage
- [x] System.IO.Pipes
- [x] System.Net.Primitives
- [x] System.Net.WebSockets
- [x] System.Security.Cryptography.Cng
- [x] System.Security.Cryptography.Csp
- [x] System.Security.Cryptography.OpenSsl
- [x] System.Security.Cryptography.X509Certificates

#### 5 ####
- [x] Microsoft.VisualBasic.Core
- [x] System.IO.Pipes.AccessControl
- [x] System.Net.NameResolution
- [x] System.Net.Ping
- [x] System.Net.Security
- [x] System.Net.ServicePoint
- [x] System.Net.Sockets
- [x] System.Security.Cryptography.Pkcs

#### 6 ####
- [x] System.Net.NetworkInformation
- [x] System.Net.WebProxy

#### 7 ####
- [x] System.Net.Http

#### 8 ####
- [x] System.Net.Requests
- [x] System.Net.WebSockets.Client
- [x] System.Utf8String.Experimental
- [x] System.Runtime.WindowsRuntime
- [x] System.Runtime.WindowsRuntime.UI.Xaml
- [ ] Microsoft.CSharp
- [ ] System.Private.Xml (this and the below System.Xml.* contracts should all be done together)
- [ ] System.Xml.ReaderWriter
- [ ] System.Xml.XDocument
- [ ] System.Xml.XmlDocument
- [ ] System.Xml.XmlSerializer
- [ ] System.Xml.XPath
- [ ] System.Xml.XPath.XDocument

#### 9 ####
- [ ] System.ComponentModel.TypeConverter
- [ ] System.Data.Common
- [ ] System.Data.DataSetExtensions
- [ ] System.Diagnostics.TextWriterTraceListener
- [ ] System.Net.HttpListener
- [x] System.Net.Mail
- [x] System.Net.WebClient
- [ ] System.Private.DataContractSerialization
- [ ] System.Private.Xml.Linq
- [ ] System.Runtime.Serialization.Json
- [ ] System.Runtime.Serialization.Xml

#### 10 (part of netcoreapp but reference netstandard) ####
With netstandard not annotated, we will need to be cognizant of the fact that all dependencies will be viewed as oblivious.
- [ ] System.ComponentModel.Annotations
- [x] System.Threading.Tasks.Dataflow

#### 11 (not part of netcoreapp but reference netcoreapp) ####
- [ ] System.DirectoryServices
- [ ] System.Data.Odbc
- [ ] System.Diagnostics.EventLog
- [ ] System.DirectoryServices.Protocols
- [ ] System.Security.Permissions
- [ ] System.ServiceProcess.ServiceController
- [ ] System.Windows.Extensions

#### 12 (built from dotnet/runtime but not in netcoreapp and reference netstandard) ####
With netstandard not annotated, we will need to be cognizant of the fact that all dependencies will be viewed as oblivious:
- [ ] Microsoft.Win32.Registry.AccessControl =&gt; netstandard
- [ ] System.CodeDom =&gt; netstandard
- [ ] System.ComponentModel.Composition.Registration =&gt; netstandard, System.Reflection.Context
- [ ] System.Composition.AttributedModel =&gt; netstandard
- [ ] System.Composition.Convention =&gt; netstandard, System.Composition.AttributedModel
- [ ] System.Composition.Hosting =&gt; netstandard, System.Composition.Runtime
- [ ] System.Composition.Runtime =&gt; netstandard
- [ ] System.Composition.TypedParts =&gt; netstandard, System.Composition.Runtime, System.Composition.AttributedModel, System.Composition.Hosting
- [ ] System.Configuration.ConfigurationManager =&gt; netstandard, System.Security.Cryptography.ProtectedData
- [ ] System.Data.OleDb =&gt; netstandard, System.Diagnostics.PerformanceCounter, System.Configuration.ConfigurationManager
- [ ] System.Diagnostics.PerformanceCounter =&gt; System.Configuration.ConfigurationManager
- [ ] System.DirectoryServices.AccountManagement =&gt; System.Configuration.ConfigurationManager
- [ ] System.IO.Packaging =&gt; netstandard
- [ ] System.IO.Ports =&gt; netstandard
- [ ] System.Management =&gt; System.CodeDom
- [ ] System.Net.Http.WinHttpHandler =&gt; netstandard
- [ ] System.Numerics.Tensors =&gt; netstandard
- [ ] System.Reflection.Context =&gt; netstandard
- [ ] System.Resources.Extensions =&gt; netstandard
- [ ] System.Runtime.Caching =&gt; netstandard, System.Configuration.ConfigurationManager
- [ ] System.Security.Cryptography.ProtectedData =&gt; netstandard
- [ ] System.Security.Cryptography.Xml =&gt; netstandard
- [ ] System.ServiceModel.Syndication =&gt; netstandard
- [ ] System.Threading.AccessControl =&gt; netstandard

#### 13 ####
- [ ] Remove `#nullable enable` from individual files after all dependent projects annotated  </Description>
        <CreatedDate>27/08/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-Meta</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2338</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>marek-safar</FixedByID>
    <Title>Add missing method dependency to Mono SPC</Title>
    <Description>Fixes #2227</Description>
    <CreatedDate>29/01/2020</CreatedDate>
    <ClosedDate>03/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2338</PullRequestID>
        <IssueID>2227</IssueID>
        <Title>Enabling IL trimming of Mono System.Private.CoreLib causes an assertion</Title>
        <Description>When enabling trimming after https://github.com/dotnet/runtime/pull/2141 we get the following assert during tests:

``</Description>
        <CreatedDate>27/01/2020</CreatedDate>
        <ClosedDate>03/02/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-mono</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2328</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>sdmaclea</FixedByID>
    <Title>Limit jit format.py to src/coreclr/src/jit</Title>
    <Description>Fixes #2322</Description>
    <CreatedDate>29/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2328</PullRequestID>
        <IssueID>2322</IssueID>
        <Title>Corrupt linux format.patch</Title>
        <Description>My pull request introduced some CoreCLR JIT format errors.

The format.patch artifact was corrupt.  It contained superfluous diffs.  The superfluous diffs included files from mono which my PR didn't touch as well as a diff of format.patch itself.

``</Description>
        <CreatedDate>29/01/2020</CreatedDate>
        <ClosedDate>29/01/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2323</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>sdmaclea</FixedByID>
    <Title>Remove format.patch</Title>
    <Description>This file was added accidentally as part of #1735</Description>
    <CreatedDate>29/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2323</PullRequestID>
        <IssueID>1735</IssueID>
        <Title>Improvements for null check folding.</Title>
        <Description>optFoldNullChecks attempts to remove GT_NULLCHECK nodes that are
post-dominated by indirections on the same variable. These changes
implement a number of improvements.

1. Recognize more patterns.
Before these changes only the following pattern was recognized:

    `x = comma(nullcheck(y), add(y, const1))`

    followed by

    `indir(add(x, const2))`

    where `const1 + const2` is sufficiently small.

    With these changes the following patterns are recognized:

    `nullcheck(x)`
    or
    `x = comma(nullcheck(y), add(y, const1))`

    followed by

    `indir(x)`
    or
    `indir(add(x, const2))`

    where `const1 + const2` is sufficiently small.

2. Indirections now include GT_ARR_LENGTH nodes.

3. Morph has an optimization
`((x+icon1)+icon2)` =&gt; `(x+(icon1+icon2))`
These changes generalize it to handle commas:
`((comma(y, x+icon1)+icon2)` =&gt; `comma(y, x+(icon1+icon2))`

    That exposes more trees to null check folding.

4. Fix a bug in flow transformations that could lose `BBF_HAS_NULLCHECK` flag
on some basic blocks, which led to missing opportunities for null check folding.

5. Make safety checks in `optCanMoveNullCheckPastTree`
(for trees between the `GT_NULLCHECK` and the indirection) both more correct
and less conservative. For example, we were not allowing any assignments
if we were inside try; however, assignments to compiler temps are safe since
they won't be visible in handlers.

5. Increase the maximum number of trees we check between `GT_NULLCHECK` and
the indirection from 25 to 50.

7. Refactor the code and move pattern recognition and safety checks to
helper methods.

This addresses all relevant examples from https://github.com/dotnet/coreclr/issues/23903 .</Description>
        <CreatedDate>14/01/2020</CreatedDate>
        <ClosedDate>17/01/2020</ClosedDate>
        <Labels>
          <Label>area-CodeGen-coreclr</Label>
          <Label>optimization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2312</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>caioproiete</FixedByID>
    <Title>Add UTF8NoBOM property to `System.Text.Encoding` class</Title>
    <Description>This PR adds a new property to the `System.Text.Encoding` class called `UTF8NoBOM` with an instance of the `UTF8Encoding` class configured to _not_ include the [byte order mark (BOM)](https://en.wikipedia.org/wiki/Byte_order_mark).

I opted to use the name `UTF8NoBOM` because it's the name used in the internal [`EncodingCache`](https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/src/libraries/System.Private.CoreLib/src/System/IO/EncodingCache.cs#L11) class that is referenced in several places throughout the codebase.

For consistency with other properties of the `Encoding` class such as `UTF8` for example, The argument `throwOnInvalidBytes` is not set on the constructor and it will use the default (`false`). This means we wouldn't be able to replace references to [`EncodingCache.UTF8NoBOM`](https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/src/libraries/System.Private.CoreLib/src/System/IO/EncodingCache.cs#L11) with references to `Encoding.UTF8NoBOM` as they have different behavior.

Resolves #2136 if we want to stop here for now, unless we want to also add other similar properties together such as `UnicodeNoBOM` and `UTF32NoBOM`, etc. as [suggested in #2136](https://github.com/dotnet/runtime/issues/2136#issuecomment-578340678).</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2312</PullRequestID>
        <IssueID>2136</IssueID>
        <Title>Add UTF8NoBom property to System.Text.Encoding class</Title>
        <Description>The `System.Text.Encoding.UT8` encodes using BOM which is generally not recommended.

Can we have a `UTF8NoBom` property for convenience ?</Description>
        <CreatedDate>24/01/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>api-suggestion</Label>
          <Label>area-System.Text.Encoding</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2312</PullRequestID>
        <IssueID>2136</IssueID>
        <Title>Add UTF8NoBom property to System.Text.Encoding class</Title>
        <Description>The `System.Text.Encoding.UT8` encodes using BOM which is generally not recommended.

Can we have a `UTF8NoBom` property for convenience ?</Description>
        <CreatedDate>24/01/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>api-suggestion</Label>
          <Label>area-System.Text.Encoding</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2309</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[wasm][debugger] Cancel Existing Single Step Request When Creating New</Title>
    <Description>!! This PR is a copy of mono/mono#18608,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;When stepping out of a c# breakpoint into the runtime (or JS... Not sure if that's accurate),
multiple single step requests can be created when the breakpoint is hit again.  In order to handle this scenario for wasm, we just cancel the existing one.

NOTE: The debugger args addition seemed a better way to handle this than outright canceling in debugger-engine. If there are implications in doing this, I can take it out.</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>30/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2309</PullRequestID>
        <IssueID>18608</IssueID>
        <Title>Unify implementation of WebUtility and HttpUtility</Title>
        <Description>System.Net.WebUtility and System.Web.HttpUtility have very similar functionality. We should either augment the code in WebUtility to accept Encoding and expose new members, or share the implementation code between the 2 libraries.
</Description>
        <CreatedDate>16/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net</Label>
          <Label>enhancement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2308</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkoritzinsky</FixedByID>
    <Title>Use Arcade-provided IBCMerge support for System.Private.CoreLib.</Title>
    <Description>Move System.Private.CoreLib to use the built-in IBCMerge support provided by Arcade instead of the custom scripting in build.cmd.

Fixes dotnet/coreclr#24751</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2308</PullRequestID>
        <IssueID>24751</IssueID>
        <Title>The `System.Json.JsonObject.Save(System.IO.Stream)` method produces invalid json.</Title>
        <Description>The "json" this method writes to the stream puts a comma between keys and values, and does not separate the next key from the previous value with a comma. E.g. when you expect the output `{"foo":"bar","baz":"frop"}`, you will actually get something like `{"foo","bar""baz","frop"}`. This bug has existed since the `JsonObject` class was invented in 2008, see [here](https://github.com/mono/mono/commit/66ecab0058cbf5c8aaa1c9ca89da52752d465eb4#diff-6a07ba1015d9ca7fc1b5b5a10859b17eR162). Perhaps the best fix would be to remove the override of `JsonValue.Save(Stream)` in `JsonObject` entirely; clearly nobody is using it (or this bug would have been noticed before), and the base implementation on `JsonValue` actually does the right thing.</Description>
        <CreatedDate>21/01/2018</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-Meta</Label>
          <Label>bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2307</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>bartonjs</FixedByID>
    <Title>Update test OS matrix</Title>
    <Description>* Update all docker-based configurations to the latest tags
* Remove Alpine 3.8 (near EOL)
* Add Alpine 3.11
* Remove Fedora 28 (EOL)
* Add Fedora 30
* Add OSX 10.15 to fullMatrix runs

Fixes #1864 (corefx/2.1 is already done, corefx/3.1 is TBD; I don't know if anyone is looking at coreclr/2.1 or coreclr/3.1)</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>30/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2307</PullRequestID>
        <IssueID>1864</IssueID>
        <Title>Update Fedora version used for testing</Title>
        <Description>It looks like Fedora 2 9 is out of support.  See:
https://fedoraproject.org/wiki/End_of_life
https://fedoraproject.org/wiki/Releases

Discussed here:
https://github.com/dotnet/core-eng/issues/8619

We also need to port this fix back to servicing where we originally noticed this.

We should also designate someone as our distro-lifecycle-champion so that we can proactively plan for these things rather than react to breaks that occur afterwards.
</Description>
        <CreatedDate>17/01/2020</CreatedDate>
        <ClosedDate>30/01/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2299</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[interp] Fix virtual calls in mixed mode</Title>
    <Description>!! This PR is a copy of mono/mono#18526,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Alternative to https://github.com/mono/mono/pull/18475 which doesn't ignore mixed mode virtual call performance. It is 20% faster with this approach.

Fixes https://github.com/mono/mono/issues/14206</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2299</PullRequestID>
        <IssueID>18526</IssueID>
        <Title>Port some missing threading types/members (Thread abort/interrupt/suspend, etc.)</Title>
        <Description>``</Description>
        <CreatedDate>12/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Threading</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2296</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>wfurt</FixedByID>
    <Title>fix FileSystemWatcher_Unix_DoesNotLeak test</Title>
    <Description>FileSystemWatcher_Unix_DoesNotLeak tried to test the leak by running as many iterations needed to exhaust OS file descriptor limit in case of a leak. That can take a long time as well as it is then dependent on CI configuration. It seems like when the limit was increated recently that made this test super slow and timing out/killed in 15 minutes.   

Since no special privilege is needed to _decrese_ current limit, this change uses `RemoteExecutor` to spawn a new process, setting limit very low and running predictable number of iterations. It can now consistently finish in ~ 2 minutes regardless of the OS limit. 
(assuming it is at least 200) 

While working on the test I rolled back fix for #40888 and I verified the test fails. 
Note that when a process runs out of fds it can fail in unusual ways - like claiming it runs out of memory or failing to load type. 

fixes  #2185</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>06/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2296</PullRequestID>
        <IssueID>2185</IssueID>
        <Title>System.IO.FileSystem.Watcher.Tests failing on Libraries OSX Outerloop CI runs</Title>
        <Description>There is no explicit failure listed in the logs. Possible these are just timing out. 

``

Builds
- https://dev.azure.com/dnceng/public/_build/results?buildId=493872
- https://dev.azure.com/dnceng/public/_build/results?buildId=491012
- https://dev.azure.com/dnceng/public/_build/results?buildId=490329

Test Runs
- netcoreapp5.0-OSX-Release-x64-OSX.1013.Amd64.Open
- netcoreapp5.0-OSX-Release-x64-OSX.1013.Amd64.Open
- netcoreapp5.0-OSX-Release-x64-OSX.1014.Amd64.Open
</Description>
        <CreatedDate>25/01/2020</CreatedDate>
        <ClosedDate>06/02/2020</ClosedDate>
        <Labels>
          <Label>area-System.IO</Label>
          <Label>os-mac-os-x</Label>
          <Label>test-run-core</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2295</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>josalem</FixedByID>
    <Title>Change reinterpret_cast use to memcpy</Title>
    <Description>* prevents unaligned address access on some ARM OSes that fault on that
---
Changes use of `reinterpret_cast` to `memcpy` in EventPipe IPC read/write operations.

resolves #2067 

I'm going to be doing some local tests to convince myself that memory is still being accounted for.  I'll flip the bit on PR status after that.

CC - @tommcdon </Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>13/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2295</PullRequestID>
        <IssueID>2067</IssueID>
        <Title>Bus error when parsing EventPipeProviderConfiguration</Title>
        <Description>Target platform: **Tizen armel** (32bit ARM processes on 64bit HW)

SIGBUS is raised at the following line if `bufferCursor` points to an unaligned address.

https://github.com/dotnet/runtime/blob/03f8ed5f9eb6fb8f4667f14e0d83a77434dad179/src/coreclr/src/vm/eventpipeprotocolhelper.cpp#L159-L161

``

- It tries to parse 8 bytes (`uint64_t`) from `0xf360bb05` (unaligned) but it seems it's not allowed for this platform.
- Reading a 4-byte (`uint32_t`) value is completely okay.
- The cursor points at an odd number address because `TryParseRundownRequested()` increases it by a boolean size.
- To reproduce the error, just run [_dotnet-counters monitor_](https://github.com/dotnet/diagnostics/blob/master/documentation/dotnet-counters-instructions.md) with default providers. However I couldn't reproduce on non-Tizen armel machine.

/cc @jkotas @alpencolt</Description>
        <CreatedDate>23/01/2020</CreatedDate>
        <ClosedDate>13/02/2020</ClosedDate>
        <Labels>
          <Label>area-Tracing-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2282</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>MichalStrehovsky</FixedByID>
    <Title>Emit Partial/PlatformNeutralSource flags in R2R header</Title>
    <Description>I added the partial flag to the legacy crossgen in dotnet/coreclr#22680 but crossgen2 was missing it. Also added platform neutral source since it's easy.</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2282</PullRequestID>
        <IssueID>22680</IssueID>
        <Title>System.Drawing.Tests.FontTests failing locally on master</Title>
        <Description>These tests are failing locally on my machine (Windows 10 Fall Creators Update, 16232.1004):

``
</Description>
        <CreatedDate>09/07/2017</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Drawing</Label>
          <Label>test bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2281</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>alnikola</FixedByID>
    <Title>HttpClient throws TimeoutException wrapped by TaskCancellationException when request times out</Title>
    <Description>Currently, HttpClient throws the same TaskCancellationException regardless of the request cancellation reason that can be caller's cancellation, all pending request cancellation or timeout. This makes it impossible to handle a request timeout in a way different from all other cases (e.g. special retry logic).

This PR adds a timeout detection logic into HttpClient. It watches for all TaskCancelledExceptions and catches the ones triggered by the timeout timer. Then, it creates two new exceptions and build a hierarchy. The first is a TimeoutException having its InnerException set to the original TaskCancelledException. The second is a new TaskCancelledException having its InnerException set to that new TimeoutException, but preserving the original stack trace, message and cancellation token. Finally, this top-level TaskCancelledException gets thrown.

Fixes #21965</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>19/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2281</PullRequestID>
        <IssueID>21965</IssueID>
        <Title>HttpClient throws TaskCanceledException on timeout</Title>
        <Description>HttpClient is throwing a TaskCanceledException on timeout in some circumstances. This is happening for us when the server is under heavy load. We were able to work around by increasing the default timeout. The following MSDN forum thread captures the essence of the experienced issue: https://social.msdn.microsoft.com/Forums/en-US/d8d87789-0ac9-4294-84a0-91c9fa27e353/bug-in-httpclientgetasync-should-throw-webexception-not-taskcanceledexception?forum=netfxnetcom&amp;prof=required

Thanks</Description>
        <CreatedDate>25/05/2017</CreatedDate>
        <ClosedDate>19/02/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net.Http</Label>
          <Label>enhancement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2278</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>YohDeadfall</FixedByID>
    <Title>Eliminated info creation for non-public properties</Title>
    <Description>Since JSON serialization doesn't support private properties at all, there is no need to create info for them. Previously discussed in #2242.</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>02/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2278</PullRequestID>
        <IssueID>2242</IssueID>
        <Title>JSON serializer should not support non-public properties by default</Title>
        <Description>While working on #2192 observed that the serializer opt-ins non-public member support. At least it blocks field serialization support from behaving the same way as for properties. In worst case as @Drawaes said the issue leads to data leaks.

The issue exists starting from the first PR of JSON serializer (see [#35609](https://github.com/dotnet/corefx/pull/35609/files#diff-d94322d11e50b60b48c128b06c14bf1dR13)).</Description>
        <CreatedDate>27/01/2020</CreatedDate>
        <ClosedDate>28/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Text.Json</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2276</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AndyAyersMS</FixedByID>
    <Title>Enable inline type checks for all type equality cases</Title>
    <Description>Now that method tables are not shared by distinct types, we can always emit
inlined type equality tests.

Closes #1258.</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2276</PullRequestID>
        <IssueID>1258</IssueID>
        <Title>JIT should be able to optimize `typeof(T) == obj.GetType()`</Title>
        <Description>Once https://github.com/dotnet/runtime/pull/1201 is merged, any type that can have a heap instance, including arrays, will have the TypeHandle -- MethodTable equivalence.

As such, `typeof(T) == obj.GetType()` should be always optimizable into a handle/methodtable compare.</Description>
        <CreatedDate>02/01/2020</CreatedDate>
        <ClosedDate>29/01/2020</ClosedDate>
        <Labels>
          <Label>area-CodeGen-coreclr</Label>
          <Label>optimization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2269</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>mikem8361</FixedByID>
    <Title>Fix unhandled exception line number issues</Title>
    <Description>There are a few paths to get the place (DebugStackTrace::DebugStackTraceElement::InitPass2) where
the offset/ip needs an adjustment:

1) The System.Diagnostics.StackTrace constructors that take an exception object. The stack trace in
   the exception object is used (from the _stackTrace field).
2) Processing an unhandled exception for display (ExceptionTracker::ProcessOSExceptionNotification).
3) The System.Diagnostics.StackTrace constructors that don't take an exception object that get the
   stack trace of the current thread.

For cases #1 and #2 the StackTraceInfo/StackTraceElement structs are built when the stack trace
for an exception is generated and is put in the private _stackTrace Exception object field. The
IP in each StackTraceElement is decremented for hardware exceptions and not for software exceptions because the CrawlFrame isInterrupted/hasFaulted fields are not initialized (always false). This is backwards for h/w exceptions leaf node frames but really can't be changed to be compatible with other code in the runtime and SOS.

The fIsLastFrameFromForeignStackTrace BOOL in the StackTraceElement/DebugStackTraceElement structs have been replaced with INT "flags" field defined by the StackTraceElementFlags enum. There is a new flag that is set (STEF_IP_ADJUSTED) if the IP has been already adjusted/decremented. This flag is used to adjust the native offset when it is converted to an IL offset for source/line number lookup in DebugStackTraceElement::InitPass2().

When the stack trace for an exception is rendered to a string (via the GetStackFramesInternal FCALL)
the internal GetStackFramesData/DebugStackTraceElement structs are initialized. This new "flags"
field is passed from the StackTraceElement to the DebugStackTraceElement struct.

For case #3 all this happens in the GetStackFramesInternal FCALL called from the managed constructor building the GetStackFramesData/DebugStackTraceElement structs directly.

Fixes issues #27765 and #25740.</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>30/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2269</PullRequestID>
        <IssueID>1</IssueID>
        <Title>WIP: repo consolidation scouting kick-off - make clr build locally on Windows</Title>
        <Description>This is my first contribution to the scouting to let other people
see the first problems I'm hitting as I believe them to be mostly
general. With this small change I now have at least the native part
of CoreCLR build running - I'm not yet past that so then I'll see
what other problems I hit when building the managed components,
building and running tests.

As you can easily see, the first (and so far the only) problem is
the split of the two roots (subrepo root vs. repo root) making the
build script fail when trying to locate "msbuild.ps1" which is now
under a repo-global eng folder. I can imagine it may be undesirable
to query GIT in the build script; in this particular case we have
multiple alternate ways to proceed (keep the duplicates of
msbuild.ps1? autodetecting the root based on some well-known file?).

Thanks

Tomas</Description>
        <CreatedDate>15/10/2019</CreatedDate>
        <ClosedDate>29/10/2019</ClosedDate>
        <Labels />
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2269</PullRequestID>
        <IssueID>2</IssueID>
        <Title>Get core-setup building in the consolidated repo.</Title>
        <Description>These were the changes I needed to make to get core-setup building in the consolidated repo, as well as some suggestions from @ViktorHofer.

- Combine Core-Setup and CoreFX's `eng/Build.props`. Move `Subset.props` to the root `eng` directory.
- Convert most usages of `$(RepoRoot)` to a new MSBuild property `$(SetupRoot)` which points to the root of the setup directory.
- Fix some pointers to files to package.
- Add "libraries" subset for CoreFX project.
- Add "setup" subset that includes all Core-Setup default subsets.

I felt it was easiest to allow the setup build to output to the root `artifacts` directory as per Arcade convention, so there were a few changes I needed to make to enable the tests to work from there:

- Updated paths to test assets to match new repo structure.
- Updated test-emitted Directory.Build.props/Directory.Build.targets to find the new repo root.
- Fix some bugs in the test setup that accidentally added dependencies on the repository's global.json.

I'll start working on porting back relevant pre-work back to core-setup, and ready a patch to add to dotnet/consolidation for changes that are only relevant after migration.</Description>
        <CreatedDate>16/10/2019</CreatedDate>
        <ClosedDate>29/10/2019</ClosedDate>
        <Labels />
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2269</PullRequestID>
        <IssueID>3</IssueID>
        <Title>Define a root README.md</Title>
        <Description>The current README.md is a copy from corefx. We need to write one for the consolidated runtime repository. This should also contain the build table that is generated in setup: https://github.com/dotnet/core-setup#daily-builds

cc @danmosemsft @terrajobst </Description>
        <CreatedDate>17/10/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <Labels />
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2269</PullRequestID>
        <IssueID>27765</IssueID>
        <Title>Set clientDomain in SmtpClient</Title>
        <Description>(moved from https://github.com/dotnet/core/issues/2031)

The old implementation of SmtpClient (https://referencesource.microsoft.com/#system/net/System/Net/mail/SmtpClient.cs) was able to use the clientDomain from configuration `MailConfiguration.Smtp.Network.ClientDomain;` 

``

solving problems like this one: https://stackoverflow.com/questions/37410598/fqdn-with-smtpclient-in-powershell

But in the .Net Core implementation https://github.com/dotnet/corefx/blob/master/src/System.Net.Mail/src/System/Net/Mail/SmtpClient.cs only the fallback to `IPGlobalProperties.GetIPGlobalProperties().HostName;` is implemented.

Unfortunately, I get a SmtpException because my Smtp server requires fully-qualified hostnames: 

![image](https://user-images.githubusercontent.com/720953/47702891-98790e00-dc1e-11e8-8b22-bf734e411323.png)

Maybe we can find a solution by changing the SMTP server, but our admins say that FQDN check is a POSTFIX default setting, so I'm surprised I'm the only one having this problem. 

Thanks 



</Description>
        <CreatedDate>30/10/2018</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net</Label>
          <Label>enhancement</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2269</PullRequestID>
        <IssueID>25740</IssueID>
        <Title>[Desktop] Test failure: PlatformHandler_HttpClientHandlerTest/ AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection</Title>
        <Description>Failed on NETFX CI leg:
``</Description>
        <CreatedDate>03/04/2018</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net.Http</Label>
          <Label>test bug</Label>
          <Label>test-run-desktop</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2268</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>CarolEidt</FixedByID>
    <Title>Fix UpperVector save asserts</Title>
    <Description>Not all helper calls have standard kill sets.
Fix #2181</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>01/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2268</PullRequestID>
        <IssueID>2181</IssueID>
        <Title>Assertion failed 'localVarInterval-&gt;assignedReg-&gt;isCalleeSave'</Title>
        <Description>On Linux/arm64, JitStress=1 or JitStress=2, JIT/HardwareIntrinsics/General/Vector128_1/Vector128_1_ro/Vector128_1_ro.sh fails with:

``

Example in CI:
https://dev.azure.com/dnceng/public/_build/results?buildId=496122&amp;view=results</Description>
        <CreatedDate>25/01/2020</CreatedDate>
        <ClosedDate>01/02/2020</ClosedDate>
        <Labels>
          <Label>JitStress</Label>
          <Label>arch-arm64</Label>
          <Label>area-CodeGen-coreclr</Label>
          <Label>os-linux</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2263</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[wasm][debugger] Initial support for proxying flat sessions</Title>
    <Description>!! This PR is a copy of mono/mono#18602,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;
&lt;!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
--&gt;
</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>30/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2263</PullRequestID>
        <IssueID>18602</IssueID>
        <Title>Remove fake win10-arm64 System.Data.SqlClient.sni support from release/1.1.0</Title>
        <Description>https://github.com/dotnet/corefx/pull/11804 adds a runtime reference to `runtime.native.System.Data.SqlClient.sni` on `runtime.win10-arm64.runtime.native.System.Data.SqlClient.sni` `4.3.0-beta-24514-00`. Just before shipping 1.1.0 we should remove it. We want to keep testing it while release/1.1.0 gets changes, but don't want to partially ship win10-arm64 support.

Specifically, the lines in [runtime.native.System.Data.SqlClient.sni.pkgproj](https://github.com/dotnet/corefx/blob/8779b2ac824c5e0b18b504e4b15111a98cc77940/src/Native/pkg/runtime.native.System.Data.SqlClient.sni/runtime.native.System.Data.SqlClient.sni.pkgproj#L15-L17) bringing in that package and [the then-unused dependencies.props entry](https://github.com/dotnet/corefx/blob/c35abaa4240fbfab3a6324d5340efcf8bf685d1b/dependencies.props#L19-L20) should be removed.

/cc @ianhays @gkhanna79 @wtgodbe @weshaggard @ericstj 
</Description>
        <CreatedDate>16/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Data.SqlClient</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2249</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AndyAyersMS</FixedByID>
    <Title>Support 32 byte alignment of code on xarch</Title>
    <Description>Update jit and runtime to allow jit to ask for code to be 32 byte aligned.
Request 32 byte alignment for Tier1 methods on x86/x64.

Add minimal crossgen support; one can imagine requesting or choosing 32 byte
alignment for crossgenned code, but that is left as future work.

This should provide some measure of performance stability, in particular for
microbenchmarks or other code where performance depends crucially on a few
branches.

It may or may not improve performance. If/when there are regressions we can
contemplate updating the jit to add intra-method padding to address alignment
sensitive code layout (e.g. dotnet/coreclr#11607).

This will require a jit GUID update in addition to the changes here.</Description>
    <CreatedDate>27/01/2020</CreatedDate>
    <ClosedDate>15/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2249</PullRequestID>
        <IssueID>11607</IssueID>
        <Title>Port AMSI scanning for assembly loads</Title>
        <Description>.NET Framework 4.8 includes passing all assemblies loaded from byte arrays to [AmsiScanBuffer](https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nf-amsi-amsiscanbuffer) on Windows 10. This makes it more difficult for malware to hide in .NET programs We should port this to Core.</Description>
        <CreatedDate>05/12/2018</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-AssemblyLoader-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2246</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>YohDeadfall</FixedByID>
    <Title>Added opt-in flag to enable non-public members</Title>
    <Description>Fixes #2242. It's a breaking change.

Unfortunately, not able to test locally because of:

```
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(231,5): error MSB8065: Custom build for item "D:\Repos\dotnet\runtime\artifacts\obj\native\netcoreapp5.0-Windows_NT-Debug-x64\CMakeFiles\fe7a6c5df725904c22996c4fd4406c45\INSTALL_force.rule" succeeded, but specified output "d:\repos\dotnet\runtime\artifacts\obj\native\netcoreapp5.0-windows_nt-debug-x64\cmakefiles\install_force" has not been created. This may cause incremental build to work incorrectly. [D:\Repos\dotnet\runtime\artifacts\obj\native\netcoreapp5.0-Windows_NT-Debug-x64\install.vcxproj] [D:\Repos\dotnet\runtime\src\libraries\Native\build-native.proj]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(231,5): error MSB8065: Custom build for item "D:\Repos\dotnet\runtime\artifacts\obj\native\netcoreapp5.0-Windows_NT-Debug-x64\CMakeFiles\fe7a6c5df725904c22996c4fd4406c45\INSTALL_force.rule" succeeded, but specified output "d:\repos\dotnet\runtime\artifacts\obj\native\netcoreapp5.0-windows_nt-debug-x64\cmakefiles\install_force" has not been created. This may cause incremental build to work incorrectly. [D:\Repos\dotnet\runtime\artifacts\obj\native\netcoreapp5.0-Windows_NT-Debug-x64\install.vcxproj] [D:\Repos\dotnet\runtime\src\libraries\Native\build-native.proj]
```</Description>
    <CreatedDate>27/01/2020</CreatedDate>
    <ClosedDate>28/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2246</PullRequestID>
        <IssueID>2242</IssueID>
        <Title>JSON serializer should not support non-public properties by default</Title>
        <Description>While working on #2192 observed that the serializer opt-ins non-public member support. At least it blocks field serialization support from behaving the same way as for properties. In worst case as @Drawaes said the issue leads to data leaks.

The issue exists starting from the first PR of JSON serializer (see [#35609](https://github.com/dotnet/corefx/pull/35609/files#diff-d94322d11e50b60b48c128b06c14bf1dR13)).</Description>
        <CreatedDate>27/01/2020</CreatedDate>
        <ClosedDate>28/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Text.Json</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2232</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AndyAyersMS</FixedByID>
    <Title>JIT: remove inlining restriction for some methods that throw</Title>
    <Description>We were blocking inlines for methods that throw with more than one thing on the
evaluation stack. There was already logic for the non-inlining case to flush
the stack and preserve pending side effects. So we can simply remove the
inlining restriction.

Fixes #2156.</Description>
    <CreatedDate>27/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2232</PullRequestID>
        <IssueID>2156</IssueID>
        <Title>Possible JIT inlining optimization: removing multiple argument null checks</Title>
        <Description>Would it make sense for the JITer to eliminate redundant "if null then throw" (i.e. `if (arg == null) throw Exception();`) checks for a given argument if it is not possible for that argument value to have changed between the checks? As far as I can tell this does not currently happen, even for simple cases.

For example:
``</Description>
        <CreatedDate>24/01/2020</CreatedDate>
        <ClosedDate>29/01/2020</ClosedDate>
        <Labels>
          <Label>area-CodeGen-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2225</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[aot] Add support for making direct cross-assembly calls in llvm mode.</Title>
    <Description>!! This PR is a copy of mono/mono#18505,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>27/01/2020</CreatedDate>
    <ClosedDate>31/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2225</PullRequestID>
        <IssueID>18505</IssueID>
        <Title>Compat work for CharUnuicode (for Linux)</Title>
        <Description>add the implementation of new added APIs 
</Description>
        <CreatedDate>11/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Globalization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2219</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Update locale tables - add Tatar CLDR files tt.xml and tt_RU.xml</Title>
    <Description>!! This PR is a copy of mono/mono#18525,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Fixes mono/mono#18524

The `tt.xml` and `tt_RU.xml` files were added in CLDR 34: http://cldr.unicode.org/index/downloads/cldr-34

Upgrading to v34 (or the latest v36) introduced a larger number of new cultures.  I went with the smallest change possible to have Tatar added.

I wasn't sure if this warranted a test in `CultureInfoTest.cs`, let me know if that would be required and I am happy to add.</Description>
    <CreatedDate>27/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2219</PullRequestID>
        <IssueID>18525</IssueID>
        <Title>Port some missing threading types/members (Overlapped, etc.)</Title>
        <Description>- [x] M:System.Threading.ThreadPool.BindHandle(System.IntPtr)
- [ ] M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)
- [ ] T:System.Threading.Overlapped
- [ ] M:System.Threading.Overlapped.#ctor
- [ ] M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)
- [ ] M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)
- [ ] P:System.Threading.Overlapped.AsyncResult
- [ ] P:System.Threading.Overlapped.EventHandle
- [ ] P:System.Threading.Overlapped.EventHandleIntPtr
- [ ] M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)
- [ ] M:System.Threading.Overlapped.get_AsyncResult
- [ ] M:System.Threading.Overlapped.get_EventHandle
- [ ] M:System.Threading.Overlapped.get_EventHandleIntPtr
- [ ] M:System.Threading.Overlapped.get_OffsetHigh
- [ ] M:System.Threading.Overlapped.get_OffsetLow
- [ ] P:System.Threading.Overlapped.OffsetHigh
- [ ] P:System.Threading.Overlapped.OffsetLow
- [ ] M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)
- [ ] M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)
- [ ] M:System.Threading.Overlapped.set_AsyncResult(System.IAsyncResult)
- [ ] M:System.Threading.Overlapped.set_EventHandle(System.Int32)
- [ ] M:System.Threading.Overlapped.set_EventHandleIntPtr(System.IntPtr)
- [ ] M:System.Threading.Overlapped.set_OffsetHigh(System.Int32)
- [ ] M:System.Threading.Overlapped.set_OffsetLow(System.Int32)
- [ ] M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)
- [ ] M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)
- [ ] M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)
</Description>
        <CreatedDate>12/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Threading</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2219</PullRequestID>
        <IssueID>18524</IssueID>
        <Title>Port some missing threading types/members (SynchronizationContext wait, etc.)</Title>
        <Description>``
</Description>
        <CreatedDate>12/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Threading</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2217</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>MichalStrehovsky</FixedByID>
    <Title>Delete orphaned file</Title>
    <Description>Became orphaned in #172.</Description>
    <CreatedDate>27/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2217</PullRequestID>
        <IssueID>172</IssueID>
        <Title>Unifying many of the R2R and COR constants between crossgen2 and the r2rdump tools</Title>
        <Description>We have many duplications... It would be nice to unify them.

cc @dotnet/crossgen-contrib </Description>
        <CreatedDate>21/11/2019</CreatedDate>
        <ClosedDate>23/11/2019</ClosedDate>
        <Labels>
          <Label>area-ReadyToRun-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2215</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>janvorli</FixedByID>
    <Title>Fix x86 InlinedCallFrame popping during EH</Title>
    <Description>There is a bug in InlinedCallFrame popping on x86 during EH with R2R
compiled code. The code is popping this frame if it is at the top of
the explicit frames stack before executing catch handler. But it
is missing a check to see if the frame was actually in the unwound part
of the stack. So in some corner cases, it can end up popping a frame
that belongs to an active pinvoke somewhere up the call chain.

The fix is to do the popping only if the InlinedCallFrame is located at
an address smaller than the resume ESP.

Close #2240</Description>
    <CreatedDate>27/01/2020</CreatedDate>
    <ClosedDate>03/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2215</PullRequestID>
        <IssueID>2240</IssueID>
        <Title>[Windows x86] InlinedCallFrame popping during EH corrupts Frame chain</Title>
        <Description>From https://github.com/dotnet/runtime/pull/1929#issuecomment-578290763

The problem is in the Windows x86 path here: https://github.com/dotnet/coreclr/pull/24199/files#diff-5eb922d9071dbbd2c84a9fa5f4468ea0R1880

We are missing a check like this: https://github.com/dotnet/coreclr/pull/24199/files#diff-d5e4cb27da3539140a16dc576906b925R1857

It results into unwinding too many Frames that sometime leads to asserts about corrupted Frame chain and crashes.</Description>
        <CreatedDate>27/01/2020</CreatedDate>
        <ClosedDate>03/02/2020</ClosedDate>
        <Labels>
          <Label>area-ExceptionHandling-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2212</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>ManickaP</FixedByID>
    <Title>CredScan suppression based on local run.</Title>
    <Description>Follow up on #1993.

Created suppression config file with all found occurrences from local run of [CredScan](https://strikecommunity.azurewebsites.net/articles/4114/credential-scanner-overview.html). None of them was harmful, mostly test sources, examples in comments or harmless constants.

The suppression file placed in ```.config/CredScanSuppressions.json``` according to the discussion in previous PR and [CredScan doc](https://strikecommunity.azurewebsites.net/articles/4125/credscan-local-suppression.html).

Results available here [cred_scan_results.tsv](https://gist.github.com/ManickaP/98baa3b0f47150d3c34efee482c30c69)</Description>
    <CreatedDate>26/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2212</PullRequestID>
        <IssueID>1993</IssueID>
        <Title>Unblock code mirror: perform one-time AzDO secret scanning bypass for false positives</Title>
        <Description>Our code mirror from GitHub to AzDO is not working, blocking official builds: https://dev.azure.com/dnceng/internal/_build/results?buildId=491921&amp;view=logs&amp;j=a3453f18-ed27-56b8-78ee-81a7631275fb&amp;t=31021d3c-3c27-555b-7ff0-047656185682&amp;l=19

``

These are obviously not secrets:

https://github.com/dotnet/runtime/blob/0cab4ab744df7231439796be6f2f040c56056339/src/libraries/Common/tests/System/Net/Http/HttpClientHandlerTest.DefaultProxyCredentials.cs#L93

https://github.com/dotnet/runtime/blob/0cab4ab744df7231439796be6f2f040c56056339/src/libraries/Common/tests/System/Net/Http/PostScenarioTest.cs#L27

I believe we have bypassed this check before, but the error was reactivated by https://github.com/dotnet/runtime/pull/1676 moving the files around. That PR's merge commit is also the first commit our AzDO repo is lacking.

---

The instructions say that we need to push an empty commit with the message `**BYPASS_SECRET_SCANNING**` to bypass it, so after submitting this PR I'm going to fast-forward merge it to `master`. This will trigger the mirroring build to run again with this commit at the tip of `master` and succeed, if the instructions in the error message are correct.

If another PR gets merged before this PR gets reviewed (blocking the FF merge I need to do) I'm going to rebase this PR and FF merge it immediately afterwards.</Description>
        <CreatedDate>22/01/2020</CreatedDate>
        <ClosedDate>22/01/2020</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2203</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>Unify remaining CoreLib interop files</Title>
    <Description>Fixes #1232</Description>
    <CreatedDate>26/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2203</PullRequestID>
        <IssueID>1232</IssueID>
        <Title>Unify corelib interop files with common ones</Title>
        <Description>As an artefact of the repo merge we have files duplicated between src\libraries\Common\src\Interop and src\libraries\System.Private.CoreLib\src\Interop

The list is these (just going by file name)
``

In each case we should verify the content is the same (or unify it) then delete the System.Private.CoreLib copies in favor of the common ones, updating src\libraries\System.Private.CoreLib\src\System.Private.CoreLib.Shared.projitems and src\coreclr\src\System.Private.CoreLib\System.Private.CoreLib.csproj to match

@jkotas I thought we had a work item for unifying interop stuff but I couldn't find it. Maybe it was already complete and this is another.</Description>
        <CreatedDate>01/01/2020</CreatedDate>
        <ClosedDate>27/01/2020</ClosedDate>
        <Labels>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2197</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AndyAyersMS</FixedByID>
    <Title>JIT: emit gc updates from RRR instruction forms</Title>
    <Description>These do not produce GC refs, so make sure we end any GC liveness for the
destination register.

Also, make sure all gc stress modes announce themselves in the jit dump log.

Fixes #2186.</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>28/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2197</PullRequestID>
        <IssueID>2186</IssueID>
        <Title>jit\HardwareIntrinsics\X86\Bmi1\Bmi1_ro fails under jitstress/gcstress</Title>
        <Description>With
``
Have not done stress mode isolation yet.</Description>
        <CreatedDate>25/01/2020</CreatedDate>
        <ClosedDate>28/01/2020</ClosedDate>
        <Labels>
          <Label>GCStress</Label>
          <Label>JitStress</Label>
          <Label>arch-x86</Label>
          <Label>area-CodeGen-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2196</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>CPU utilization computation fixes</Title>
    <Description>- On Unix, move scalling for total number of processors from PAL to managed side, so that it can use container limit aware ProcessorCount
- Delete asserts for CPU utilization being between 0 and 100. These asserts can fail due to races or rounding errors.
- Converted a few classes to structs

Fixes #2195</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>25/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2196</PullRequestID>
        <IssueID>2195</IssueID>
        <Title>SystemNative_GetCpuUtilization assert failing under load</Title>
        <Description>So far I've only seen it on Mono.
See https://github.com/dotnet/runtime/issues/2153#issuecomment-578320515
``
https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/src/libraries/Native/Unix/System.Native/pal_time.c#L165

cc: @akoeplinger </Description>
        <CreatedDate>25/01/2020</CreatedDate>
        <ClosedDate>25/01/2020</ClosedDate>
        <Labels>
          <Label>area-Threading-mono</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2192</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>YohDeadfall</FixedByID>
    <Title>Added field support to JSON serializer</Title>
    <Description>Fixes #876.

/cc @steveharter @ahsonkhan</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2192</PullRequestID>
        <IssueID>876</IssueID>
        <Title>JsonSerializer should support field as well as properties</Title>
        <Description>@mazhou-msft proposed value tuple serialization which requires field serialization which isn't supported yet. See dotnet/corefx#36240 for reference.

@karelz I would like to take this one too and make it separately from dotnet/corefx#36240.

---

## Problems

Because the feature wasn't released as a part of .NET Core 3.0, now it causes a breaking change. Only users which serialize types with public fields will be affected.

To solve the problem @layomia suggested to add a public property named `IncludeFields` to `JsonSerializerOptions` to  opt-in field serialization

**Open questions**

* Which of the existing property-level attributes should be applied to fields? Should JsonExtensionData apply to fields?
* Which of the options in JsonSerializerOptions should apply to fields? Should PropertyNamingPolicy, PropertyNameCaseInsensitive apply to fields, or do we need new options?
* Should readonly fields be supported for deserialization? Should there be an option to ignore readonly fields for serialization (an equivalent to IgnoreReadOnlyProperties)?
* How should JSON property name collisions be handled? This is discussed further in #30964 (comment).</Description>
        <CreatedDate>30/03/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Text.Json</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2189</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>Merging small assemblies (part 1/N)</Title>
    <Description>Contributes to #2138</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2189</PullRequestID>
        <IssueID>2138</IssueID>
        <Title>Reduce number of runtime assemblies that a typical app has to load</Title>
        <Description>For histroric reasons, .NET Core runtime has many small facades and partial facades that do not serve any meaninful purpose anymore. We should consider merging some of them to reduce number of assemlies that a typical app has to load. Unfortunately, we cannot delete them because of backward compatibility.

Example of merged facade looks like: [System.AppContext](https://github.com/dotnet/runtime/tree/master/src/libraries/System.AppContext/). Notice that ref has type-forwards only and src has no implementation files.

List of proposed merges:

- [ ] Merge into System.Private.CoreLib\src:
  - [x] System.Threading.Thread\src
  - [x] System.Diagnosics.Tools\src
  - [x] System.Security.Principal\src
  - [ ] System.Runtime\src
  - [ ] System.Runtime.Extensions\src

- [ ] Merge into System.Runtime\ref:
  - [x] System.Buffers\ref
  - [x] System.Diagnosics.Debug\ref
  - [x] System.Resources.ResourceManager\ref
  - [ ] System.Runtime.Loader\ref
  - [ ] System.Text.Encoding.Extensions\ref
  - [x] System.Threading.Tasks\ref
  - [ ] System.Threading.ThreadPool\ref
  - [x] System.Threading.Timer\ref
  - [ ] System.Threading.Thread\ref
  - [x] System.Diagnosics.Tools\ref
  - [ ] System.Security.Principal\ref
  - [ ] System.Runtime.Extensions\ref

- [ ] Misc other cleanup
  - [x] Stop building packages for System.Reflection.Emit.*
  - [x] Stop building packages for System.Reflection.TypeExtensions
  - [ ] Simplify build configurations for implementations that just foward to other contracts (e.g. System.AppContext\src can have just a single configuration)
  - [x] Delete System.Reflection.Emit.*\src\Resources\Strings.resx
  - [x] Delete System.Buffers\src\Resources\Strings.resx
  - [x] Delete System.Threading.Timer\src\ApiCompatBaseline.uapaot.txt
  - [x] Merge System.Reflection.Emit.*\ref\System.Reflection.Emit.*.netcore.cs into System.Reflection.Emit\ref\System.Reflection.Emit.*.cs
  - [x] Delete System.IO.UnmanagedMemoryStream\ref\System.IO.UnmanagedMemoryStream.cs
  - [x] Delete System.Reflection\ref\System.Reflection.cs

- [ ] Wave 2: It is less obvious that the merging is a good idea for these (big enough, platform specific, etc.) We may still do some merging for them, based on the experience from the Wave 1 above:
   - [ ] System.Diagnostics.Contracts
   - [ ] System.Diagnostics.Tracing
   - [ ] System.Numerics.Vectors
   - [ ] System.Reflection.Emit
   - [ ] System.Reflection.Primitives
   - [ ] System.Threading.Overlapped
   - [ ] System.Memory
   - [ ] System.Reflection.TypeExtensions
   - [ ] System.Threading
   - [ ] System.Collections
   - [ ] System.Collections.Concurrent
</Description>
        <CreatedDate>24/01/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-Meta</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2180</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkoritzinsky</FixedByID>
    <Title>Fix S.R.CS.U and Microsoft.CSharp assembly version downgrade from 3.1-&gt;5.0</Title>
    <Description>Allow the System.Runtime.CompilerServices.Unsafe and the runtime Microsoft.CSharp assembly versions to match the defaults (in this case 5.0.0).

Fixes #1918 </Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2180</PullRequestID>
        <IssueID>1918</IssueID>
        <Title>Assembly version of `Microsoft.CSharp` and `System.Runtime.CompilerServices.Unsafe` in 5.0 is older than the ones in 3.1?</Title>
        <Description>Tested with nightly builds of netcoreapp5.0, this will make app use out of box assembly instead of inbox ones when they are reference from other place.

Seems they are the only two assembly which have older version:

Microsoft.CSharp: 4.0.4 in 5.0, and 4.0.5 in 3.1 and nuget(4.7.0)
System.Runtime.CompilerServices.Unsafe: 4.0.5 in 5.0, and 4.0.6 in 3.1 and nuget(4.7.0)
</Description>
        <CreatedDate>19/01/2020</CreatedDate>
        <ClosedDate>12/02/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-libraries</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2179</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Contributing: fix typos</Title>
    <Description>!! This PR is a copy of mono/mono#18585,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;
&lt;!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
--&gt;
</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>25/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2179</PullRequestID>
        <IssueID>18585</IssueID>
        <Title>OutOfMemoryException in System.Numerics.Tests.logTest.RunLargeValueLogTests on Ubuntu</Title>
        <Description>Running OuterLoop Ubuntu14.04 Debug in CI for dotnet/corefx#11765:

``
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Numerics</Label>
          <Label>test bug</Label>
          <Label>test-run-core</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2178</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[utils] Default to g_print in mono_counters_dump if the stream is NULL</Title>
    <Description>!! This PR is a copy of mono/mono#18582,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;This makes `mono_counters_dump` actually work on Android. If either this added default behavior or the macro is too terrible I can explore other options, but I'm tired and this was fast.</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2178</PullRequestID>
        <IssueID>18582</IssueID>
        <Title>Reapply changes made to Xml libraries since the move to System.Private.Xml since they got lost in merge from dev/api</Title>
        <Description>When we moved the implementation of Xml from the old contracts into System.Private.Xml, we lost the history since to git's point of view, they are two different files now. The problem is that this move happened in a different branch (dev/xml) so when we merged that back to dev/api and then to master, we lost all of the changes that were made in master after the move. This work item is to track the work that must be done to re-apply these changes back to the files now under System.Private.Xml.

cc: @weshaggard @danmosemsft @krwq @shmao 
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Xml</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2177</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[eglib] Use the stdout handler with g_printf</Title>
    <Description>!! This PR is a copy of mono/mono#18581,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Done to unblock the externs. More work should probably be done, see mono/mono#18580. </Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2177</PullRequestID>
        <IssueID>18581</IssueID>
        <Title>Add tests for several System.Reflection types</Title>
        <Description>- System.Reflection.Module
- System.Reflection.Pointer
- System.Reflection.RuntimeReflectionExtensions
- System.Reflection.TypeDelegator
- System.Reflection.TypeInfo
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Reflection</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2177</PullRequestID>
        <IssueID>18580</IssueID>
        <Title>Source Breaking change in System.Runtime 4.1 with MemberInfo.GetCustomAttributes</Title>
        <Description>When upgrading package versions of System.Runtime from 4.0 to 4.1 the following code will have errors on both lines when it compiled successfully before.

``

This is caused by two new instance methods on MemberInfo that hide the extension methods in CustomAttributeExtensions. The new methods return `object[]` when the extension methods return `IEnumerable&lt;Attribute&gt;`

To maintain compatibility with desktop we cannot change the return type of the new members to match. We need to document the breaking change.
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>api-ready-for-review</Label>
          <Label>area-System.Reflection</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2175</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Fix for -mminimal-toc detection, enable BTLS on FreeBSD PowerPC</Title>
    <Description>!! This PR is a copy of mono/mono#18578,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Fixes mono/mono#18554 by making autoconf actually check if `-mminimal-toc` works instead of assuming on powerpc. Tested with FreeBSD 12.x and 13.x on powerpc64 ELFv2.
While we are in here, also enable BTLS which has passed testing. 🎉
Big thanks to @pkubaj and linimon@ for assistance testing this.</Description>
    <CreatedDate>24/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2175</PullRequestID>
        <IssueID>18578</IssueID>
        <Title>httpclient default proxy</Title>
        <Description>Hello Guys,

Is there a way for httpclient to pick up the default system proxy like http_proxy on linux ? 

For now we are providing a the proxy manually to the httpclient, using the HttpClientHandler class.

Thank you !
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net</Label>
          <Label>os-linux</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2175</PullRequestID>
        <IssueID>18554</IssueID>
        <Title>Arithmetic expressions don't work with enums properly</Title>
        <Description>See the following example for Add:

``

My understanding is that Linq Expressions try to mimic C#'s behaviour as much as possible, so this could be an area to align with C#.

/cc @bartdesmet @VSadov  @JonHanna @stephentoub 
</Description>
        <CreatedDate>14/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Linq.Expressions</Label>
          <Label>bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33619</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>handlespeed</FixedByID>
    <Title>Remove unused variable for System.Net.Requests, as part of #30457</Title>
    <Description>src/libraries/System.Net.Requests/src/System/Net/FtpControlStream.cs, remove unused variable 'request' in L414.

Partially Fix #30457</Description>
    <CreatedDate>16/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33619</PullRequestID>
        <IssueID>30457</IssueID>
        <Title>Review unused locals across corefx</Title>
        <Description>Experimenting with various analyzers, I used SonarAnalyzers.CSharp to highlight all unused locals.

In dotnet/corefx#39956, I fixed some, but there remain a bunch across the repo.  We could consider enabling the rule permanently, but there's enough noise that we may not want to.  Even so, it'd probably be worth reviewing the remaining failures to ensure nothing important has slipped through.

#### D:\repos\corefx\src\Microsoft.Diagnostics.Tracing.EventSource.Redist\src\Microsoft.Diagnostics.Tracing.EventSource.Redist.csproj
- [ ] D:\repos\corefx\src\Common\src\CoreLib\System\Diagnostics\Tracing\EventSource.cs(2698,18): warning S1481: Remove the unused local variable 'shouldReport'.
- [ ] D:\repos\corefx\src\Common\src\CoreLib\System\Diagnostics\Tracing\EventSource.cs(3082,20): warning S1481: Remove the unused local variable 'fullTypeNameToFind'.

#### D:\repos\corefx\src\System.Configuration.ConfigurationManager\src\System.Configuration.ConfigurationManager.csproj
- [ ] System\Configuration\ApplicationSettingsBase.cs(729,24): warning S1481: Remove the unused local variable 'temp'.

#### D:\repos\corefx\src\System.Data.Common\src\System.Data.Common.csproj
- [x] System\Data\DataColumnCollection.cs(807,28): warning S1481: Remove the unused local variable 'column'.
- [x] System\Data\xmlsaver.cs(1496,32): warning S1481: Remove the unused local variable 'prefix'.
- [x] System\Data\xmlsaver.cs(1497,36): warning S1481: Remove the unused local variable 'tNode'.
- [x] System\Data\xmlsaver.cs(2495,20): warning S1481: Remove the unused local variable 'val'.
- [x] System\Data\xmlsaver.cs(2782,17): warning S1481: Remove the unused local variable 'countTopTable'.
- [x] System\Data\xmlsaver.cs(952,24): warning S1481: Remove the unused local variable 'dsCompositor'.
- [x] System\Data\XMLSchema.cs(2368,28): warning S1481: Remove the unused local variable 'targetNamespace'.
- [x] System\Data\XMLSchema.cs(2540,17): warning S1481: Remove the unused local variable 'initialTableCount'.
- [x] System\Data\XMLSchema.cs(786,27): warning S1481: Remove the unused local variable 'table'.

#### D:\repos\corefx\src\System.Data.OleDb\src\System.Data.OleDb.csproj
- [x] OleDbConnection.cs(521,32): warning S1481: Remove the unused local variable 'exception'.
- [x] OleDbConnectionInternal.cs(324,29): warning S1481: Remove the unused local variable 'outerConnection'.
- [x] OleDbConnectionInternal.cs(824,18): warning S1481: Remove the unused local variable 'isopen'.
- [x] OleDbConnectionInternal.cs(825,35): warning S1481: Remove the unused local variable 'constr'.
- [x] OleDbDataAdapter.cs(267,50): warning S1481: Remove the unused local variable 'hresult'.
- [x] OleDbDataAdapter.cs(441,34): warning S1481: Remove the unused local variable 'hresult'.
- [x] OleDbDataReader.cs(1169,22): warning S1481: Remove the unused local variable 'info'.
- [x] OleDbDataReader.cs(2166,30): warning S1481: Remove the unused local variable 'nullsVal'.
- [x] OleDbTransaction.cs(111,34): warning S1481: Remove the unused local variable 'hr'.
- [x] RowBinding.cs(482,30): warning S1481: Remove the unused local variable 'hr'.
- [x] SafeHandles.cs(163,30): warning S1481: Remove the unused local variable 'hr'.

#### D:\repos\corefx\src\System.Data.SqlClient\src\System.Data.SqlClient.csproj
- [ ] System\Data\Sql\SqlSer.cs(111,41): warning S1481: Remove the unused local variable 'udtAttr'.
- [ ] System\Data\Sql\SqlSer.cs(31,20): warning S1481: Remove the unused local variable 'k'.
- [ ] System\Data\SqlClient\SqlCommand.cs(3134,24): warning S1481: Remove the unused local variable 'val'.
- [ ] System\Data\SqlClient\TdsParser.cs(6856,37): warning S1481: Remove the unused local variable 'metaData'.

#### D:\repos\corefx\src\System.DirectoryServices.AccountManagement\src\System.DirectoryServices.AccountManagement.csproj
- [ ] System\DirectoryServices\AccountManagement\AD\ADStoreCtx.cs(1765,43): warning S1481: Remove the unused local variable 'adsGroup'.
- [ ] System\DirectoryServices\AccountManagement\AD\ADStoreCtx.cs(2235,22): warning S1481: Remove the unused local variable 'ldapAttributesUsed'.
- [ ] System\DirectoryServices\AccountManagement\AuthZSet.cs(47,20): warning S1481: Remove the unused local variable 'hUser'.
- [ ] System\DirectoryServices\AccountManagement\SAM\SAMMembersSet.cs(104,26): warning S1481: Remove the unused local variable 'nativeMembers'.
- [ ] System\DirectoryServices\AccountManagement\SAM\SAMStoreCtx_LoadStore.cs(787,20): warning S1481: Remove the unused local variable 'stringizedSid'.
- [ ] System\DirectoryServices\AccountManagement\SAM\SAMUtils.cs(97,20): warning S1481: Remove the unused local variable 'className'.

#### D:\repos\corefx\src\System.DirectoryServices\src\System.DirectoryServices.csproj
- [ ] System\DirectoryServices\ActiveDirectory\ActiveDirectorySchemaClass.cs(1001,22): warning S1481: Remove the unused local variable 'schemaGuid'.
- [ ] System\DirectoryServices\ActiveDirectory\ActiveDirectorySchemaProperty.cs(1090,22): warning S1481: Remove the unused local variable 'schemaGuid'.
- [ ] System\DirectoryServices\ActiveDirectory\ActiveDirectorySite.cs(1332,29): warning S1481: Remove the unused local variable 'status'.
- [ ] System\DirectoryServices\ActiveDirectory\ActiveDirectorySite.cs(422,36): warning S1481: Remove the unused local variable 'tmp'.
- [ ] System\DirectoryServices\ActiveDirectory\ConfigSet.cs(439,24): warning S1481: Remove the unused local variable 'entryName'.
- [ ] System\DirectoryServices\ActiveDirectory\DirectoryServer.cs(112,28): warning S1481: Remove the unused local variable 'dn'.
- [ ] System\DirectoryServices\ActiveDirectory\GlobalCatalog.cs(266,34): warning S1481: Remove the unused local variable 'schemaContext'.
- [ ] System\DirectoryServices\ActiveDirectory\Utils.cs(1450,26): warning S1481: Remove the unused local variable 'propertiesToLoad2'.
- [ ] System\DirectoryServices\ActiveDirectory\Utils.cs(692,21): warning S1481: Remove the unused local variable 'result'.
- [ ] System\DirectoryServices\ActiveDirectory\Utils.cs(785,20): warning S1481: Remove the unused local variable 'crossRefDN'.
- [ ] System\DirectoryServices\PropertyCollection.cs(113,50): warning S1481: Remove the unused local variable 'propList'.

#### D:\repos\corefx\src\System.Drawing.Common\src\System.Drawing.Common.csproj
- [ ] System\Drawing\Pen.cs(586,27): warning S1481: Remove the unused local variable 'oldColor'.
- [ ] System\Drawing\Printing\PrinterSettings.Windows.cs(489,29): warning S1481: Remove the unused local variable 'nRead'.
- [ ] System\Drawing\SolidBrush.cs(103,27): warning S1481: Remove the unused local variable 'oldColor'.

#### D:\repos\corefx\src\System.IO.FileSystem.AccessControl\src\System.IO.FileSystem.AccessControl.csproj
- [ ] System\Security\AccessControl\FileSecurity.cs(618,20): warning S1481: Remove the unused local variable 'fullPath'.
- [ ] System\Security\AccessControl\FileSecurity.cs(645,20): warning S1481: Remove the unused local variable 'fullPath'.

#### D:\repos\corefx\src\System.IO.FileSystem.DriveInfo\src\System.IO.FileSystem.DriveInfo.csproj
- [ ] D:\repos\corefx\src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.MountPoints.cs(26,21): warning S1481: Remove the unused local variable 'result'.
- [ ] System\IO\DriveInfo.Windows.cs(97,22): warning S1481: Remove the unused local variable 'success'.

#### D:\repos\corefx\src\System.IO.FileSystem\src\System.IO.FileSystem.csproj
- [ ] D:\repos\corefx\src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.MountPoints.cs(26,21): warning S1481: Remove the unused local variable 'result'.

#### D:\repos\corefx\src\System.IO.MemoryMappedFiles\src\System.IO.MemoryMappedFiles.csproj
- [ ] System\IO\MemoryMappedFiles\MemoryMappedView.Windows.cs(65,24): warning S1481: Remove the unused local variable 'tempHandle'.

#### D:\repos\corefx\src\System.IO.Ports\src\System.IO.Ports.csproj
- [ ] System\IO\Ports\SerialPort.cs(1015,17): warning S1481: Remove the unused local variable 'startTicks'.
- [ ] System\IO\Ports\SerialPort.cs(1028,17): warning S1481: Remove the unused local variable 'beginReadPos'.

#### D:\repos\corefx\src\System.Management\src\System.Management.csproj
- [ ] System\Management\ManagementObject.cs(2307,31): warning S1481: Remove the unused local variable 'wbemServices'.
- [ ] System\Management\ManagementScope.cs(974,26): warning S1481: Remove the unused local variable 'loc'.
- [ ] System\Management\ManagementScope.cs(975,20): warning S1481: Remove the unused local variable 'punk'.
- [ ] System\Management\WMIGenerator.cs(3040,42): warning S1481: Remove the unused local variable 'isRetTypeTimeInterval'.
- [ ] System\Management\WMIGenerator.cs(7349,40): warning S1481: Remove the unused local variable 'cmie3'.

#### D:\repos\corefx\src\System.Net.HttpListener\src\System.Net.HttpListener.csproj
- [ ] System\Net\Windows\HttpListener.Windows.cs(764,20): warning S1481: Remove the unused local variable 'verb'.
- [ ] System\Net\Windows\WebSockets\WebSocketProtocolComponent.cs(252,44): warning S1481: Remove the unused local variable 'responseHeaders'.

#### D:\repos\corefx\src\System.Net.Requests\src\System.Net.Requests.csproj
- [ ] System\Net\FtpControlStream.cs(414,31): warning S1481: Remove the unused local variable 'request'.

#### D:\repos\corefx\src\System.Net.Security\src\System.Net.Security.csproj
- [ ] System\Net\CertificateValidationPal.Unix.cs(62,21): warning S1481: Remove the unused local variable 'errorCode'.

#### D:\repos\corefx\src\System.Numerics.Tensors\src\System.Numerics.Tensors.csproj
- [ ] System\Numerics\Tensors\Tensor.cs(1228,17): warning S1481: Remove the unused local variable 'outerLength'.

#### D:\repos\corefx\src\System.Private.DataContractSerialization\src\System.Private.DataContractSerialization.csproj
- [ ] System\Runtime\Serialization\ReflectionXmlFormatReader.cs(58,20): warning S1481: Remove the unused local variable 'requiredMembers'.
- [ ] System\Runtime\Serialization\SchemaExporter.cs(453,50): warning S1481: Remove the unused local variable 'extension'.
- [ ] System\Runtime\Serialization\XmlFormatReaderGenerator.cs(122,26): warning S1481: Remove the unused local variable 'isFactoryType'.
- [ ] System\Xml\XmlBufferReader.cs(494,20): warning S1481: Remove the unused local variable 'buffer'.
- [ ] System\Xml\XmlBufferReader.cs(503,20): warning S1481: Remove the unused local variable 'buffer'.
- [ ] System\Xml\XmlBufferReader.cs(847,20): warning S1481: Remove the unused local variable 'buffer'.

#### D:\repos\corefx\src\System.Private.Xml\src\System.Private.Xml.csproj
- [ ] System\Xml\Core\XsdValidatingReader.cs(1440,17): warning S1481: Remove the unused local variable 'startDepth'.
- [ ] System\Xml\Core\XsdValidatingReaderAsync.cs(337,17): warning S1481: Remove the unused local variable 'startDepth'.
- [ ] System\Xml\Dom\XmlNode.cs(469,21): warning S1481: Remove the unused local variable 'node'.
- [ ] System\Xml\Dom\XmlNode.cs(838,29): warning S1481: Remove the unused local variable 'doc'.
- [ ] System\Xml\Schema\ContentValidator.cs(1317,17): warning S1481: Remove the unused local variable 'symbolsCount'.
- [ ] System\Xml\Schema\ContentValidator.cs(1922,17): warning S1481: Remove the unused local variable 'positionsCount'.
- [ ] System\Xml\Schema\FacetChecker.cs(471,35): warning S1481: Remove the unused local variable 'baseRestriction'.
- [ ] System\Xml\Schema\Inference\Infer.cs(927,42): warning S1481: Remove the unused local variable 'subelement'.
- [ ] System\Xml\Schema\Inference\Infer.cs(936,42): warning S1481: Remove the unused local variable 'subelement'.
- [ ] System\Xml\Schema\Inference\Infer.cs(948,42): warning S1481: Remove the unused local variable 'subelement'.
- [ ] System\Xml\Serialization\Compiler.cs(81,26): warning S1481: Remove the unused local variable 'originalAssembly'.
- [ ] System\Xml\Serialization\ReflectionXmlSerializationReader.cs(1760,33): warning S1481: Remove the unused local variable 'allMemberMappings'.
- [ ] System\Xml\Serialization\ReflectionXmlSerializationWriter.cs(1257,35): warning S1481: Remove the unused local variable 'member'.
- [ ] System\Xml\Serialization\ReflectionXmlSerializationWriter.cs(206,24): warning S1481: Remove the unused local variable 'enumTypeName'.
- [ ] System\Xml\Serialization\ReflectionXmlSerializationWriter.cs(363,30): warning S1481: Remove the unused local variable 'arrayTypeDesc'.
- [ ] System\Xml\Serialization\SchemaObjectWriter.cs(1036,25): warning S1481: Remove the unused local variable 't'.
- [ ] System\Xml\Serialization\SchemaObjectWriter.cs(1091,25): warning S1481: Remove the unused local variable 't'.
- [ ] System\Xml\Serialization\SchemaObjectWriter.cs(1117,25): warning S1481: Remove the unused local variable 't'.
- [ ] System\Xml\Serialization\SchemaObjectWriter.cs(1139,25): warning S1481: Remove the unused local variable 't'.
- [ ] System\Xml\Serialization\SchemaObjectWriter.cs(974,25): warning S1481: Remove the unused local variable 't'.
- [ ] System\Xml\Serialization\XmlReflectionImporter.cs(1564,30): warning S1481: Remove the unused local variable 'targetTypeDesc'.
- [ ] System\Xml\Serialization\XmlSerializationReader.cs(188,20): warning S1481: Remove the unused local variable 'ns'.
- [ ] System\Xml\Serialization\XmlSerializationReader.cs(189,20): warning S1481: Remove the unused local variable 'ns2'.
- [ ] System\Xml\Serialization\XmlSerializationReader.cs(2118,35): warning S1481: Remove the unused local variable 'elements'.
- [ ] System\Xml\Serialization\XmlSerializationReader.cs(3428,18): warning S1481: Remove the unused local variable 'useReflection'.
- [ ] System\Xml\Serialization\XmlSerializationReader.cs(3568,18): warning S1481: Remove the unused local variable 'useReflection'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(1877,22): warning S1481: Remove the unused local variable 'saveTypeDesc'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(2564,35): warning S1481: Remove the unused local variable 'member'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(3434,22): warning S1481: Remove the unused local variable 'choiceUseReflection'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(3681,30): warning S1481: Remove the unused local variable 'useReflection'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(4064,22): warning S1481: Remove the unused local variable 'useReflection'.
- [ ] System\Xml\Serialization\XmlSerializationWriter.cs(4066,24): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(1629,32): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(1656,28): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(1798,28): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(1916,24): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(2022,24): warning S1481: Remove the unused local variable 'fullTypeName'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(2318,26): warning S1481: Remove the unused local variable 'typeDesc'.
- [ ] System\Xml\Serialization\XmlSerializationWriterILGen.cs(394,35): warning S1481: Remove the unused local variable 'member'.
- [ ] System\Xml\Xsl\Xslt\CompilerScopeManager.cs(277,36): warning S1481: Remove the unused local variable 'prevFlags'.
- [ ] System\Xml\Xsl\Xslt\QilGenerator.cs(2345,17): warning S1481: Remove the unused local variable 'startPos'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(1936,18): warning S1481: Remove the unused local variable 'isParam'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(2154,20): warning S1481: Remove the unused local variable 'collation'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(474,25): warning S1481: Remove the unused local variable 'ctxInfo'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(503,25): warning S1481: Remove the unused local variable 'ctxInfo'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(573,25): warning S1481: Remove the unused local variable 'ctxInfo'.
- [ ] System\Xml\Xsl\Xslt\XsltLoader.cs(849,20): warning S1481: Remove the unused local variable 'collation'.
- [ ] System\Xml\Xsl\XsltOld\CopyAction.cs(40,20): warning S1481: Remove the unused local variable 'value'.

#### D:\repos\corefx\src\System.Runtime.Extensions\src\System.Runtime.Extensions.csproj
- [ ] D:\repos\corefx\src\Common\src\CoreLib\Interop\Unix\System.Native\Interop.MountPoints.cs(26,21): warning S1481: Remove the unused local variable 'result'.

#### D:\repos\corefx\src\System.Runtime.Serialization.Formatters\src\System.Runtime.Serialization.Formatters.csproj
- [ ] System\Runtime\Serialization\Formatters\Binary\BinaryFormatterWriter.cs(257,17): warning S1481: Remove the unused local variable 'byteLength'.
- [ ] System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs(358,18): warning S1481: Remove the unused local variable 'genId'.
- [ ] System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs(702,20): warning S1481: Remove the unused local variable 'objName'.
- [ ] System\Runtime\Serialization\ObjectManager.cs(282,26): warning S1481: Remove the unused local variable 'originalHolder'.

#### D:\repos\corefx\src\System.Runtime.WindowsRuntime.UI.Xaml\src\System.Runtime.WindowsRuntime.UI.Xaml.csproj
- [ ] System\Windows\GridLength.cs(118,18): warning S1481: Remove the unused local variable 'listSeparator'.

#### D:\repos\corefx\src\System.Runtime.WindowsRuntime\src\System.Runtime.WindowsRuntime.csproj
- [ ] System\Threading\WindowsRuntimeSynchronizationContext.cs(121,17): warning S1481: Remove the unused local variable 'ignored'.
- [ ] System\Threading\WindowsRuntimeSynchronizationContext.cs(146,17): warning S1481: Remove the unused local variable 'ignored'.

#### D:\repos\corefx\src\System.Security.AccessControl\src\System.Security.AccessControl.csproj
- [ ] System\Security\AccessControl\ACL.cs(603,24): warning S1481: Remove the unused local variable 'ace'.
- [ ] System\Security\AccessControl\SecurityDescriptor.cs(291,17): warning S1481: Remove the unused local variable 'length'.

#### D:\repos\corefx\src\System.Security.Cryptography.Algorithms\src\System.Security.Cryptography.Algorithms.csproj
- [x] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [x] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.

#### D:\repos\corefx\src\System.Security.Cryptography.Cng\src\System.Security.Cryptography.Cng.csproj
- [x] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [x] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.
- [x] System\Security\Cryptography\ECDiffieHellmanCng.Key.cs(85,28): warning S1481: Remove the unused local variable 'key'.
- [x] System\Security\Cryptography\ECDsaCng.Key.cs(73,28): warning S1481: Remove the unused local variable 'key'.

#### D:\repos\corefx\src\System.Security.Cryptography.Csp\src\System.Security.Cryptography.Csp.csproj
- [x] D:\repos\corefx\src\Common\src\Interop\Windows\Advapi32\SafeProvHandle.cs(113,22): warning S1481: Remove the unused local variable 'ignoredSuccess'.
- [ ] System\Security\Cryptography\CapiHelper.DSA.Shared.cs(181,29): warning S1481: Remove the unused local variable 'magic'.
- [ ] System\Security\Cryptography\CapiHelper.DSA.Shared.cs(223,29): warning S1481: Remove the unused local variable 'magic'.
- [ ] System\Security\Cryptography\CapiHelper.DSA.Shared.cs(282,18): warning S1481: Remove the unused local variable 'bType'.
- [ ] System\Security\Cryptography\CapiHelper.Shared.cs(166,22): warning S1481: Remove the unused local variable 'bType'.
- [ ] System\Security\Cryptography\CapiHelper.Shared.cs(167,22): warning S1481: Remove the unused local variable 'bVersion'.
- [ ] System\Security\Cryptography\CapiHelper.Shared.cs(173,21): warning S1481: Remove the unused local variable 'magic'.

#### D:\repos\corefx\src\System.Security.Cryptography.Encoding\src\System.Security.Cryptography.Encoding.csproj
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.

#### D:\repos\corefx\src\System.Security.Cryptography.OpenSsl\src\System.Security.Cryptography.OpenSsl.csproj
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.

#### D:\repos\corefx\src\System.Security.Cryptography.Pkcs\src\System.Security.Cryptography.Pkcs.csproj
- [ ] D:\repos\corefx\src\Common\src\Interop\Windows\Advapi32\SafeProvHandle.cs(113,22): warning S1481: Remove the unused local variable 'ignoredSuccess'.
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.
- [x] Internal\Cryptography\Pal\Windows\PkcsPalWindows.Encrypt.cs(73,21): warning S1481: Remove the unused local variable 'tag'.

#### D:\repos\corefx\src\System.Security.Cryptography.X509Certificates\src\System.Security.Cryptography.X509Certificates.csproj
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(105,21): warning S1481: Remove the unused local variable 'tag'.
- [ ] D:\repos\corefx\src\Common\src\System\Security\Cryptography\Asn1Reader\AsnReader.cs(130,21): warning S1481: Remove the unused local variable 'tag'.
- [ ] Internal\Cryptography\Pal.Windows\CertificatePal.PrivateKey.cs(248,25): warning S1481: Remove the unused local variable 'dwErrorCode'.
- [x] Internal\Cryptography\Pal.Windows\Native\SafeHandles.cs(188,30): warning S1481: Remove the unused local variable 'success'.
- [x] Internal\Cryptography\Pal.Windows\StorePal.Import.cs(167,18): warning S1481: Remove the unused local variable 'ignore'.
- [ ] System\Security\Cryptography\X509Certificates\X509Certificate2.cs(362,20): warning S1481: Remove the unused local variable 'fullPath'.

#### D:\repos\corefx\src\System.Security.Cryptography.Xml\src\System.Security.Cryptography.Xml.csproj
- [x] System\Security\Cryptography\Xml\SignedXml.cs(418,20): warning S1481: Remove the unused local variable 'hashvalue'.

#### D:\repos\corefx\src\System.Security.Principal.Windows\src\System.Security.Principal.Windows.csproj
- [ ] System\Security\Principal\WindowsIdentity.cs(625,30): warning S1481: Remove the unused local variable 'groupCount'.

#### D:\repos\corefx\src\System.ServiceModel.Syndication\src\System.ServiceModel.Syndication.csproj
- [ ] System\ServiceModel\Syndication\Atom10FeedFormatter.cs(606,20): warning S1481: Remove the unused local variable 'localName'.
- [ ] System\ServiceModel\Syndication\Atom10FeedFormatter.cs(607,20): warning S1481: Remove the unused local variable 'nameSpace'.

#### D:\repos\corefx\src\System.ServiceProcess.ServiceController\src\System.ServiceProcess.ServiceController.csproj
- [ ] System\ServiceProcess\ServiceBase.cs(484,22): warning S1481: Remove the unused local variable 'statusResult'.</Description>
        <CreatedDate>01/08/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-Meta</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33615</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AaronRobinsonMSFT</FixedByID>
    <Title>GC coverage can now occur in scenarios where a thread doesn't exist.</Title>
    <Description>Properly handle this case and assert some invariant.

Fixes #33612 

/cc @jkotas </Description>
    <CreatedDate>16/03/2020</CreatedDate>
    <ClosedDate>17/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33615</PullRequestID>
        <IssueID>33612</IssueID>
        <Title>Test failure: Interop/NativeCallable/NativeCallableTest/NativeCallableTest.sh</Title>
        <Description>**Job:**
[runtime-coreclr gcstress0x3-gcstress0xc:20200315.1](https://dev.azure.com/dnceng/public/_build/results?buildId=560162)
**Error:**
``
**Stack trace:**
`
at Interop_NativeCallable._NativeCallableTest_NativeCallableTest_._NativeCallableTest_NativeCallableTest_sh() in /__w/1/s/artifacts/tests/coreclr/Linux.arm.Checked/TestWrappers/Interop.NativeCallable/Interop.NativeCallable.XUnitWrapper.cs:line 140
`
**Details:**
https://dev.azure.com/dnceng/public/_build/results?buildId=560162&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=17644952&amp;resultId=101937&amp;paneView=debug</Description>
        <CreatedDate>16/03/2020</CreatedDate>
        <ClosedDate>17/03/2020</ClosedDate>
        <Labels>
          <Label>GCStress</Label>
          <Label>arch-arm32</Label>
          <Label>area-Interop-coreclr</Label>
          <Label>os-linux</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33607</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[FreeBSD] Fix for libinotify support and compile</Title>
    <Description>!! This PR is a copy of mono/mono#19234,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Resolves mono/mono#18528 in for both detection and compiling. This should backport cleanly to next release.

Tested on 12.1-RELEASE with libinotify; configure detects features correctly, compiles successfully, resolves some observed issues during run.

```
#define HAVE_SYS_INOTIFY_H 1
#define HAVE_LIBINOTIFY 1
#define HAVE_INOTIFY_INIT 1
#define HAVE_INOTIFY_ADD_WATCH 1
#define HAVE_INOTIFY_RM_WATCH 1
#define HAVE_INOTIFY 1
```</Description>
    <CreatedDate>15/03/2020</CreatedDate>
    <ClosedDate>20/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33607</PullRequestID>
        <IssueID>19234</IssueID>
        <Title>Excessive Executable Flags on macOS</Title>
        <Description>(I originally asked about this at dotnet/cli#4260 some two months ago, but never received a response until today. However, since it is not .NET CLI-specific, I figured asking here would be a better idea.)

One of the things that has been driving me crazy about .NET Core is that on my Mac (running macOS Sierra, version 10.12.1), any and every file created by a .NET Core program is marked as executable (specifically, they all have the mode 711). Note that this only affects files created by a Core program; already existing files that are opened or modified remain at their existing mode. This is totally unnecessary, and furthermore complicates interoperability with programs that don’t expect every file to be executable (such as the Mac’s GUI file-management subsystem). Could this possibly be changed? Thanks!</Description>
        <CreatedDate>04/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.IO</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33607</PullRequestID>
        <IssueID>18528</IssueID>
        <Title>Test failure: System.Net.Security.Tests.ServerNoEncryptionTest/ServerNoEncryption_ClientNoEncryption_ConnectWithNoEncryption</Title>
        <Description>Opened on behalf of @karajas

The test `System.Net.Security.Tests.ServerNoEncryptionTest/ServerNoEncryption_ClientNoEncryption_ConnectWithNoEncryption` has failed.

``

Failing configurations:
- OSX.1011.Amd64
  - AnyCPU-Release
</Description>
        <CreatedDate>12/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33603</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>bartonjs</FixedByID>
    <Title>Don't delete private keys detected from SerializedCert imports</Title>
    <Description>Collection imports didn't have the problem, they already only set the delete marker for PFX-type imports.

Fixes #33543.</Description>
    <CreatedDate>15/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33603</PullRequestID>
        <IssueID>33543</IssueID>
        <Title>Importing a single SerializedCert with CERT_KEY_PROV_INFO_PROP_ID attempts to delete the key on Dispose.</Title>
        <Description>The typical code would look like. And upon out of scope of using, the Network Service permission will
be deleted.

using (X509Certificate2 cert = new X509Certificate2(bytes))
                    {
                        thumbprint = cert.Thumbprint;
                    }
</Description>
        <CreatedDate>13/03/2020</CreatedDate>
        <ClosedDate>16/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Security</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33602</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>vitek-karas</FixedByID>
    <Title>Include apphost_version parameter in download URLs for both GUI and CLI apps</Title>
    <Description>So far the code only included the `&amp;apphost_version=&lt;version&gt;` URL parameter in the URL used by the error dialog in GUI apps. The error written to stderr/trace would not have that parameter in its URL.

This change include this parameter in all cases. This also means that comhost/ijwhost and so on will also include the `apphost_version` parameter in their error codes and it will be the version of the comhost/ijwhost and so on. This is not 100% correct, but for the purposed of the website this should be enough (for now we don't see a reason to differentiate between the various hosting scenarios).

Adds a new test to cover this case.

Fixes #33569 </Description>
    <CreatedDate>15/03/2020</CreatedDate>
    <ClosedDate>17/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33602</PullRequestID>
        <IssueID>33569</IssueID>
        <Title>Apphost should include apphost_version in the download URL in CLI apps</Title>
        <Description>If the apphost can't find any runtime at all, it will print out a URL with the download location of .NET Core runtimes. If it's a GUI app that URL will include the version of the apphost in a parameter `apphost_version=&lt;version&gt;`. But if it's a CLI app, only architecture and RID will be included, the apphost version will not be there.

Including the apphost version can help the `dot.net` website to determine which runtime to offer for download.</Description>
        <CreatedDate>13/03/2020</CreatedDate>
        <ClosedDate>17/03/2020</ClosedDate>
        <Labels>
          <Label>area-Host</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33599</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>tarekgh</FixedByID>
    <Title>Fix Reading the Currency Formats</Title>
    <Description>Fixes #946

We have encountered 2 locales that have a negative currency format which we failed to read them correctly. The fix here is to allow such formats and read them successfully. Also returning the removed assert which is useful in catching such cases.

```
luy       :  ¤- #,##0      // .NET format should be "C- n"
luy_KE    : ¤- #,##0      // .NET format should be "C- n"
```</Description>
    <CreatedDate>14/03/2020</CreatedDate>
    <ClosedDate>17/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33599</PullRequestID>
        <IssueID>946</IssueID>
        <Title>System.Globalization.Native shim: Unknown Numeric Patterns</Title>
        <Description>System.Globalization.Native shim had this assert (since forever): https://github.com/dotnet/runtime/blob/1983518fa4c901d35bb3ac7b1f76d7fa810c3543/src/coreclr/src/corefx/System.Globalization.Native/pal_localeNumberData.c#L203

This codepath was not exercised on debug builds of the shim due to test hole. I have confirmed it by test-only PR #890.  This test hole got fixed as side-effect of moving the shim under libraries (#875).

I am commenting our the assert against this issue. This issues is about investigating whether the unknown number patterns are expected or whether there are fixes required to recognize them.</Description>
        <CreatedDate>16/12/2019</CreatedDate>
        <ClosedDate>17/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Globalization</Label>
          <Label>enhancement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33586</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>NextTurn</FixedByID>
    <Title>Fix indentations of nameof</Title>
    <Description>dotnet/corefx#6209</Description>
    <CreatedDate>14/03/2020</CreatedDate>
    <ClosedDate>14/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33586</PullRequestID>
        <IssueID>6209</IssueID>
        <Title>RyuJIT is not eliminating known constant typed branches (dead code)</Title>
        <Description>For some reason this code is not being optimized:

``

I know this is a somewhat 'unorthodox' use of C# generics, but it is just too tempting to be able to optimize an algorithm that we need it to be portable without having to write C++ for all the architectures supported by CoreCLR. 

@CarolEidt If you want to look for potential general optimization opportunities, the actual code can be found at: https://github.com/Corvalius/ravendb/blob/lz4-131/src/Sparrow/Compression/LZ4.cs 
</Description>
        <CreatedDate>24/06/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-CodeGen-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33584</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[wasm] Add a sample for collecting coverage data.</Title>
    <Description>!! This PR is a copy of mono/mono#19223,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>14/03/2020</CreatedDate>
    <ClosedDate>14/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33584</PullRequestID>
        <IssueID>19223</IssueID>
        <Title>Parts of the System.Security.Cryptography.* namespace missing in package: dotnet-dev-1.0.0-preview2.1-003155</Title>
        <Description>I installed the dotnet-dev-1.0.0-preview2.1-003155 package on ubuntu:16.04 but it seems that parts of the System.Security.Cryptography.* namespace are missing. Thus i get a
`System.DllNotFoundException: Unable to load DLL 'System.Security.Cryptography.Native': The specified module could not be found.` exception.
The docker container microsoft/dotnet:1.0.0-preview2.1-sdk however contains the missing parts of the namespace.
Is this an issue or am i doing something wrong?</Description>
        <CreatedDate>03/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Security</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33560</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>aik-jahoda</FixedByID>
    <Title>Disable not working test containing RemoteExecutor</Title>
    <Description>These tests are disabled because of dotnet/arcade#4912
They will be reenabled by #33558
</Description>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33560</PullRequestID>
        <IssueID>4912</IssueID>
        <Title>JIT Minopts Failures (Checked x64)</Title>
        <Description>These tests fail with Complus_JitMinOpts=1 set on windows, checked, x64.

~~\JIT\opt\Tailcall\TailcallVerifyWithPrefix\TailcallVerifyWithPrefix.exe~~
\JIT\SIMD\CircleInConvex\CircleInConvex.exe
~~\JIT\SIMD\VectorArgs\VectorArgs.exe~~
\JIT\SIMD\VectorReturn\VectorReturn.exe
~~\JIT\jit64\regress\ddb\87766\ddb87766\ddb87766.exe~~

---

Output for:

CircleInConvex.exe

Assert failure(PID 53020 [0x0000cf1c], Thread: 26564 [0x67c4]): Assertion failed '(allRegs(theInterval-&gt;registerType) &amp; mask) != 0' in 'System.Linq.Enumerable:Last(ref):struct' (IL size 101)

 File: d:\fork\public\coreclr\src\jit\lsra.cpp Line: 738

---

Output for:

VectorReturn.exe

Assert failure(PID 41084 [0x0000a07c], Thread: 13388 [0x344c]): Assertion failed '!"Incompatible types for gtNewTempAssign"' in 'VectorTest:F2(float):struct' (IL size 97)

 File: d:\fork\public\coreclr\src\jit\gentree.cpp Line: 10974
</Description>
        <CreatedDate>08/01/2016</CreatedDate>
        <ClosedDate>30/01/2020</ClosedDate>
        <Labels>
          <Label>area-CodeGen-coreclr</Label>
          <Label>bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33560</PullRequestID>
        <IssueID>33558</IssueID>
        <Title>Failing test after Remote executor fix</Title>
        <Description>There is a fix (dotnet/arcade#4912) of remote executor which causes flaky/false-positive tests.
There is a list of test which starts fail after the remote executor fix is applied: see attached PR #33560
- [ ] `Proxy_UseEnvironmentVariableToSetSystemProxy_RequestGoesThruProxy`
- [x] `HttpClientUsesSslCertEnvironmentVariables` - fixed in PR #34331</Description>
        <CreatedDate>13/03/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Net.Http</Label>
          <Label>test bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33552</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[jit] Add support for emitting r4/r8 constants outside of the text segment.</Title>
    <Description>!! This PR is a copy of mono/mono#19219,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33552</PullRequestID>
        <IssueID>19219</IssueID>
        <Title>Test failure: System.IO.Tests.WaitForChangedTests/CreatedDeleted_Success(changeType: Created)</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.IO.Tests.WaitForChangedTests/CreatedDeleted_Success(changeType: Created)` has failed.

Assert.Equal() Failure\r
    Expected: Created\r
    Actual:   0

        Stack Trace:

           at System.IO.Tests.WaitForChangedTests.CreatedDeleted_Success(WatcherChangeTypes changeType) in D:\A\_work\26\s\corefx\src\System.IO.FileSystem.Watcher\tests\FileSystemWatcher.WaitForChanged.cs:line 149
Build : Master - 20161102.03 (Full Framework Tests)
Failing configurations:
- Windows.10.Amd64
  - AnyCPU-Release

Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20161102.03/workItem/System.IO.FileSystem.Watcher.Tests/analysis/xunit/System.IO.Tests.WaitForChangedTests~2FCreatedDeleted_Success(changeType:%20Created)</Description>
        <CreatedDate>03/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.IO</Label>
          <Label>test bug</Label>
          <Label>test-run-desktop</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33548</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Remove useless ip += from MINT_JMP, it is assigned later.</Title>
    <Description>!! This PR is a copy of mono/mono#19217,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>18/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33548</PullRequestID>
        <IssueID>19217</IssueID>
        <Title>Test failure: System.Net.WebSockets.Client.Tests.CancelTest / ReceiveAsync_Cancel_Success (server: ws://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.Net.WebSockets.Client.Tests.CancelTest/ReceiveAsync_Cancel_Success(server: ws://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)` has failed.

Assert.Equal() Failure
                  ? (pos 4)
    Expected: The 'System.Net.WebSockets.InternalClientWebS···
    Actual:   The remote party closed the WebSocket connect···
                  ? (pos 4)

        Stack Trace:

           at System.Net.WebSockets.Client.Tests.ClientWebSocketTestBase.&lt;TestCancellation&gt;d__8.MoveNext()
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
       at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
       at System.Net.WebSockets.Client.Tests.CancelTest.&lt;ReceiveAsync_Cancel_Success&gt;d__3.MoveNext()
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
Build : Master - 20161102.03 (Core Tests)
Failing configurations:
- Suse.132.Amd64
  - AnyCPU-Debug

Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20161102.03/workItem/System.Net.WebSockets.Client.Tests/analysis/xunit/System.Net.WebSockets.Client.Tests.CancelTest~2FReceiveAsync_Cancel_Success(server:%20ws:~2F~2Fcorefx-net.cloudapp.net~2FWebSocket~2FEchoWebSocket.ashx)</Description>
        <CreatedDate>03/11/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Net</Label>
          <Label>disabled-test</Label>
          <Label>os-linux</Label>
          <Label>test bug</Label>
          <Label>test-run-core</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33547</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>Fix line endings under src/mono</Title>
    <Description>Fixes #2222</Description>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33547</PullRequestID>
        <IssueID>2222</IssueID>
        <Title>Some mono files show as modified on Linux even with clean checkout</Title>
        <Description>I guess that it is most likely caused by wrong line endings, as there was a problem recently with the same symptoms caused by that. I get the following output from git status even though my local repo clone is completely clean:
``
Trying to do `git checkout --` on any of these files has no effect.</Description>
        <CreatedDate>27/01/2020</CreatedDate>
        <ClosedDate>13/03/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-mono</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33545</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>swaroop-sridhar</FixedByID>
    <Title>HostModel: Remove deprecated API</Title>
    <Description>Some depricated APIs were maintained in #33413 so that SDK build is green.
Now that the SDK is updated https://github.com/dotnet/sdk/pull/10849, remove the unused APIs.

Also move out a test-only methods from the product to the test helpers.</Description>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33545</PullRequestID>
        <IssueID>33413</IssueID>
        <Title>Implement Bundler version 2</Title>
        <Description>Implement support for single-file version 2 layout as described in https://github.com/dotnet/designs/blob/master/accepted/2020/single-file/bundler.md

The supporting changes are:
* Implement new HostModel interfaces to communicate additional information from the SDK to the HostModel
   * The SDK changes will be done in an upcoming PR.
   * Some depricated APIs are maintained so that SDK build doesn't break in the meantime]
* Handle various bundling options described in https://github.com/dotnet/designs/blob/master/accepted/2020/single-file/design.md#optional-settings
   * This requires ability to recognize native binaries for various architectures.
   * Added ability to minimaly parse ELF binaries. PE/MachO support already exists.
   * Refactored out PE processing from BinaryUtils, so that PE-ELF-MachO parsers have similar abstractions.
* Create bundles with the appropriate layout (`v1` for `netcoreapp3.0`, `v2` for `net5`)
* Consume the new layout from the host bundle process/extraction code.
* Test cases</Description>
        <CreatedDate>10/03/2020</CreatedDate>
        <ClosedDate>12/03/2020</ClosedDate>
        <Labels>
          <Label>area-HostModel</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33540</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[runtime] Coverage profiler improvements.</Title>
    <Description>!! This PR is a copy of mono/mono#19213,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33540</PullRequestID>
        <IssueID>19213</IssueID>
        <Title>Test failure: System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test/NoCallback_RevokedCertificate_NoRevocationChecking_Succeeds</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test/NoCallback_RevokedCertificate_NoRevocationChecking_Succeeds` has failed.

System.Net.Http.HttpRequestException : An error occurred while sending the request.\r
    ---- System.Net.Http.WinHttpException : The handle is in the wrong state for the requested operation

        Stack Trace:

           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
       at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
       at System.Net.Http.HttpClient.&lt;FinishSendAsync&gt;d__58.MoveNext()
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
       at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
       at System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test.&lt;NoCallback_RevokedCertificate_NoRevocationChecking_Succeeds&gt;d__9.MoveNext()
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
    ----- Inner Stack Trace -----
       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
       at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
       at System.Net.Http.WinHttpHandler.&lt;StartRequest&gt;d__105.MoveNext()
Build : Master - 20161102.03 (Core Tests)
Failing configurations:
- Windows.7.Amd64
  - AnyCPU-Debug

Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20161102.03/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test~2FNoCallback_RevokedCertificate_NoRevocationChecking_Succeeds</Description>
        <CreatedDate>03/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net.Http</Label>
          <Label>bug</Label>
          <Label>os-windows</Label>
          <Label>test-run-core</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33539</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>eanova</FixedByID>
    <Title>Remove TS_UserSuspendPending enum</Title>
    <Description>This PR removes the unused TS_UserSuspendPending enum as well as flag usage.

@AaronRobinsonMSFT 
@jkotas 

Fixes #33441</Description>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33539</PullRequestID>
        <IssueID>33441</IssueID>
        <Title>Remove the TS_UserSuspendPending enum value</Title>
        <Description>Based on the following snippet in multiple places in the runtime, the `TS_UserSuspendPending` value should be removed.

https://github.com/dotnet/runtime/blob/308ab659f4098bc7df7ed3b1a87a90a209604349/src/coreclr/src/vm/threadsuspend.cpp#L1673-L1674</Description>
        <CreatedDate>10/03/2020</CreatedDate>
        <ClosedDate>13/03/2020</ClosedDate>
        <Labels>
          <Label>area-VM-coreclr</Label>
          <Label>untriaged</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33535</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>echesakovMSFT</FixedByID>
    <Title>[Arm64] Implement Store Hardware Intrinsic</Title>
    <Description>Implements **Store** Arm64 hardware intrinsic

Fixes #24771

Also addresses Brian's feedback and *partly* Bruce's feedback received on #33461

I decided to have a separate PR for @BruceForstall suggestions concerning finding a proper names for `emitDispVectorElemList` and other functions.</Description>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>19/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33535</PullRequestID>
        <IssueID>24771</IssueID>
        <Title>API Proposal : Arm64 Load &amp; Store</Title>
        <Description>*Edit:* Removed `StaticCast` as that is handled by `Vector128.As*`. Kept the Load/Store APIs as generic with note that the actual implementation is exploded and supports all 10 primitive types

``C#
namespace System.Runtime.Intrinsics.Arm
{
    public abstract class AdvSimd 
    {
        public abstract class Arm64
        {
            /// &lt;summary&gt;
            /// Vector load
            ///
            /// Corresponds to vector form of ARM64 LDR
            /// &lt;/summary&gt;
            public static unsafe Vector64&lt;T&gt;  LoadVector64&lt;T&gt;(void* address) where T : struct { throw null; }
            public static unsafe Vector128&lt;T&gt; LoadVector128&lt;T&gt;(void* address) where T : struct { throw null; }
    
            /// &lt;summary&gt;
            /// Vector store
            ///
            /// Corresponds to vector form of ARM64 STR
            /// &lt;/summary&gt;
            public static unsafe void Store&lt;T&gt;(void* address, Vector64&lt;T&gt;  source) where T : struct { throw null; }
            public static unsafe void Store&lt;T&gt;(void* address, Vector128&lt;T&gt; source) where T : struct { throw null; }
        }
    }
}

</Description>
        <CreatedDate>23/01/2018</CreatedDate>
        <ClosedDate>19/03/2020</ClosedDate>
        <Labels>
          <Label>api-approved</Label>
          <Label>arch-arm64</Label>
          <Label>area-System.Runtime.Intrinsics</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33535</PullRequestID>
        <IssueID>33461</IssueID>
        <Title>[Arm64] Vector Load/Store structure instructions</Title>
        <Description>This adds support in the JIT emitter for **Vector Load/Store structure instructions**:
- LD1 (1-4 registers)
- LD2
- LD3
- LD4
- LD1R
- LD2R
- LD3R
- LD4R
- ST1 (1-4 registers)
- ST2
- ST3
- ST4

in the following addressing modes:

- Base register only
- Post-indexed by a 64-bit register
- Post-indexed by an immediate, equal to the number of bytes transferred

I supported multiple structures as well as single structure variants.

This also adds support in JitDump for printing 
* SIMD vector register list, e.g. `ld1     {v5.16b, v6.16b, v7.16b, v8.16b}, [x9]`
* SIMD vector element list, .e.g `st1     {v0.b}[3], [x1],#1`

PerfScore numbers are according to Arm Cortex-A55 Software Optimization Guide

I validated the correctness of the instructions' encodings by comparing JitDump with WinDbg u command output. I attached the outputs of both:
[jitDump.txt](https://github.com/dotnet/runtime/files/4319885/jitDump.txt)
[windbg-u.txt](https://github.com/dotnet/runtime/files/4319886/windbg-u.txt)

Examples of the instruction usages can be found in codegenarm64.cpp in Arm64 emitter unit tests collection.

This is needed for https://github.com/dotnet/runtime/issues/24771</Description>
        <CreatedDate>11/03/2020</CreatedDate>
        <ClosedDate>14/03/2020</ClosedDate>
        <Labels>
          <Label>arch-arm64</Label>
          <Label>area-CodeGen-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33534</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>fadimounir</FixedByID>
    <Title>Fix for issue 32731</Title>
    <Description>Fix for #32731

Couple of fixes here:
1) Remove an assert in the TypeSystem's virtual function resolution (assert is too restrictive). Example: resolving `Base.Func` on an instance of `Derived`:
``` c#
class Base
{
    virtual void Func() { }
    virtual void MethodImplForFunc()
    {
        .override Base.Func()
    }
}
class Derived : Base
{
    override void MethodImplForFunc() { }
}
```
The assert was verifying that Base.Func was in the unification group of `Derived`. It would only be in the unification group of `Base` (where it gets removed later because of the methodImpl, and cause the assert at the derived type's level in the recursion)

2) Port some inlining rules from crossgen1 - One of them fixes an issue where we would incorrectly inline a virtual method that has a MethodImpl associated with it (test = self_override5)

3) Remove an assert from R2RDump related to the composite work (assert needs to be after loading _readyToRunHeaderRVA, and is actually already at the right place a few lines below)</Description>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>18/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33534</PullRequestID>
        <IssueID>32731</IssueID>
        <Title>Test failure in  Loader\\classloader\\MethodImpl\\self_override5\\self_override5.cmd</Title>
        <Description>failed in job: [runtime-coreclr crossgen2 outerloop 20200222.1](https://dev.azure.com/dnceng/public/_build/results?buildId=533489&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=16936746&amp;resultId=101201&amp;paneView=debug)


Error message
`
\r\nReturn code: 1\r\nRaw output file: C:\h\w\B45D0A3D\w\9CDB08F6\e\Loader\classloader\Reports\Loader.classloader\MethodImpl\self_override5\self_override5.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n 1 file(s) copied.\r\n" "C:\h\w\B45D0A3D\p\crossgen2\crossgen2" C:\h\w\B45D0A3D\w\9CDB08F6\e\Loader\classloader\MethodImpl\self_override5\self_override5.org -o:C:\h\w\B45D0A3D\w\9CDB08F6\e\Loader\classloader\MethodImpl\self_override5\self_override5.dll --targetarch:x64 -O --inputbubble -r:"C:\h\w\B45D0A3D\p\System..dll" -r:"C:\h\w\B45D0A3D\p\Microsoft..dll" -r:"C:\h\w\B45D0A3D\p\mscorlib.dll" -r:C:\h\w\B45D0A3D\w\9CDB08F6\e\Loader\classloader\MethodImpl\self_override5\.dll"\r\nWarning: No files matching C:\h\w\B45D0A3D\w\9CDB08F6\e\Loader\classloader\MethodImpl\self_override5\.dll\r\nEmitting R2R PE file: C:\h\w\B45D0A3D\w\9CDB08F6\e\Loader\classloader\MethodImpl\self_override5\self_override5.dll\r\n "C:\h\w\B45D0A3D\p\corerun.exe" self_override5.dll \r\nIn MyFoo::DoBarOverride\r\nIn MyBar::DoBar\r\nFAIL: expected MyBar::DoBarOverride to execute, but another method was executed instead.\r\nFAIL\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n&gt; set CORE_ROOT=C:\h\w\B45D0A3D\p\r\n&gt; C:\h\w\B45D0A3D\w\9CDB08F6\e\Loader\classloader\MethodImpl\self_override5\self_override5.cmd\r\nExpected: True\r\nActual: False
`</Description>
        <CreatedDate>24/02/2020</CreatedDate>
        <ClosedDate>18/03/2020</ClosedDate>
        <Labels>
          <Label>arch-x64</Label>
          <Label>area-crossgen2-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33530</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AntonLapounov</FixedByID>
    <Title>Enable crossgen2smoke test for ARM64</Title>
    <Description>* Enable crossgen2smoke test for ARM64.
* Re-enable NullableWithExplicitLayoutTest sub-test.
* Restore setting the image base removed by #31663.</Description>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>17/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33530</PullRequestID>
        <IssueID>31663</IssueID>
        <Title>Initial Crossgen2 changes for composite R2R support</Title>
        <Description>This change adds the new command-line option "--composite",
a new type of input files "--unrooted-input-file" for files that should
be made part of the composite image but only rooted as hit by the
dependency analysis, not automatically as the normal input files
(to reduce the size of framework built along with the app) and new
Crossgen2 logic for producing the additional R2R metadata needed
by composite images including rewriting of input MSIL by injecting
a "component R2R header" on them that forwards the native code
to the composite image. With a set of runtime changes out for
a separate PR I'm able to make first steps in running composite R2R
in the CoreCLR runtime.

Thanks

Tomas</Description>
        <CreatedDate>03/02/2020</CreatedDate>
        <ClosedDate>19/02/2020</ClosedDate>
        <Labels>
          <Label>area-crossgen2-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33516</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[interp] Do cfold for a few more unary operators</Title>
    <Description>!! This PR is a copy of mono/mono#19200,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;That are accessing the stack value at level -2.</Description>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>18/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33516</PullRequestID>
        <IssueID>19200</IssueID>
        <Title>FileStream.ReadAsync with FILE_FLAG_NO_BUFFERING at end of non-sector-aligned file causes ERROR_INVALID_PARAMETER</Title>
        <Description>I was doing some perf testing with `FILE_FLAG_NO_BUFFERING` and found that it doesn't seem to work with async whole-`FileStream` reads. I think the bug is FileStream.cs around [here](https://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem/src/System/IO/FileStream.Win32.cs#L919). `numBytes` gets set to a non-sector-aligned value and reused for the `ReadFileNative` which [is illegal with FILE_FLAG_NO_BUFFERING](https://msdn.microsoft.com/en-us/library/windows/desktop/cc644950(v=vs.85).aspx).

 I'm testing with .NET 4.6.2, so the source looks a bit different, but the same bug appears to be there.

If I set `numBytes = 512` in the debugger (original read size), everything works as expected for the 2nd-to-last-read. On the last `ReadAsync` (the one that should return 0 because EOF has been reached), `numBytes` is `0` so we do a seemingly-needless `SeekCore(0, SeekOrigin.Current);` then a `ReadFileNative(_handle, bytes, offset, numBytes, intOverlapped, out hr);`, which causes a `hr = 87` (`ERROR_INVALID_PARAMETER`) - apparently 0 byte reads are also illegal :) 

I wasn't quite sure where the fix should go, but it seems like using a separate variable to determine how much to `SeekCore` and returning early when `numBytes = 0` would fix the problem.

Note that using the synchronous `Read` without `FileOptions.Asynchronous` also works around this problem.

Here's a minimal repro:
``</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.IO</Label>
          <Label>enhancement</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33513</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[metadata] Disable three icalls on netcore monodroid</Title>
    <Description>!! This PR is a copy of mono/mono#19198,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;They aren't used there.
</Description>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>12/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33513</PullRequestID>
        <IssueID>19198</IssueID>
        <Title>Members of DataContractSerializer that are in NS2.0 are missing</Title>
        <Description>``

@zhenlan @shmao </Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-Serialization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33500</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>eiriktsarpalis</FixedByID>
    <Title>[CBOR] Implement Map support for CborReader and CborWriter</Title>
    <Description>Contributes to #32046 and #32047.</Description>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33500</PullRequestID>
        <IssueID>32046</IssueID>
        <Title>Create a stateful CBOR reader</Title>
        <Description>Create a reader for CBOR (Concise Binary Object Representation), as defined in [IETF RFC 7049](https://tools.ietf.org/html/rfc7049).

* Initial implementation should be done directly into a test project
* Assume a new, netstandard2.0-based package (hedged bet)
* After the reader and writer are stable and feature complete, schedule an API review
* After API review, and associated changes, split things into ref/src/test with the declared package.

Rough project plan (approximately a PR for each stage, and 3-5 days of work)

* [x] Support reading "unsigned" (positive) integers, negative integers, definite-length byte strings, definite-length text strings, as well as content-agnostic structure (e.g. "what kind of thing is next" and "skip this value").
* [x] Support reading definite length arrays.
* [x] Support reading definite length maps
  * Note that maps are like `Dictionary&lt;object, object&gt;`... key types are heterogeneous.
* [x] Support reading indefinite-length byte strings and text strings
  * Nesting is not permitted
* [x] Support reading indefinite-length arrays and maps
  * Nesting is permitted, but mean distinct objects.
* [ ] Support reading major type 7 (float: half, single, double; boolean: true false; null; undefined; and "not yet defined" values
* [ ] Support reading tags, especially with Skip and as map keys.
  * What does the read method return? Where is the reader positioned after reading the tag?
* [ ] Support important tagged types
  * The two DateTimeOffset types
  * Maybe the two BigInteger types
  * The "Self-describing" type
* [ ] Add support for reader "conformance levels" / "canonicalization modes"
  * To start: lax, IETF RFC 7049 section 3.9, and CTAP2 canonical CBOR encoding form (https://fidoalliance.org/specs/fido-v2.0-ps-20190130/fido-client-to-authenticator-protocol-v2.0-ps-20190130.pdf, section 6)

The reader is needed before the writer, so writing/testing the writer should not hold up a functioning reader.</Description>
        <CreatedDate>10/02/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Security</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33500</PullRequestID>
        <IssueID>32047</IssueID>
        <Title>Create a stateful CBOR writer</Title>
        <Description>Create a reader for CBOR (Concise Binary Object Representation), as defined in [IETF RFC 7049](https://tools.ietf.org/html/rfc7049).

* Initial implementation should be done directly into a test project
* Assume a new, netstandard2.0-based package (hedged bet)
* After the reader and writer are stable and feature complete, schedule an API review
* After API review, and associated changes, split things into ref/src/test with the declared package.

Rough project plan (approximately a PR for each stage, and 3-5 days of work)

* [x] Support writing "unsigned" (positive) integers, negative integers, definite-length byte strings, definite-length text strings, as well as common structure (e.g. producing output).
* [x] Support writing arrays (definite length only).
* [x] Support writing maps (definite length only), in caller order.
  * Note that maps are like `Dictionary&lt;object, object&gt;`... key types are heterogeneous.
* [ ] Support writing maps (definite length only) in canonical order.
  * Probably involves giving the writer a canonicalization mode
* [ ] Support writing major type 7 (float: half, single, double; boolean: true, false; null; undefined)
* [ ] Support writing single values, raw, with "single value" validation.
* [ ] Support writing tags
* [ ] Support important tagged types
  * The two DateTimeOffset types
  * Maybe the two BigInteger types

</Description>
        <CreatedDate>10/02/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Security</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33498</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jashook</FixedByID>
    <Title>Remove the copy of core_root by using core_root as the corelation dir</Title>
    <Description>Follow up pr to address feedback from #33436</Description>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>12/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33498</PullRequestID>
        <IssueID>33436</IssueID>
        <Title>cross-crossgen job, reduce workitem size</Title>
        <Description>The work item should be ~1/2 the size of the older workitem. The largest difference will be the bin/* folder will now be ommitted.

Workitem size goes from 750m to 350m, decided to print the elapsed runtime as well into the console log. Which will help with https://github.com/dotnet/runtime/pull/33175</Description>
        <CreatedDate>10/03/2020</CreatedDate>
        <ClosedDate>11/03/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33492</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>davmason</FixedByID>
    <Title>Remove asserts that were firing during rejit tests</Title>
    <Description>#32250 had some asserts that would fire under certain situations with our rejit tests. The rejit path no longer suspends the runtime so that assert was removed, and call counting can happen for a non default code version with rejit since the IL is updated, so that assert was updated.</Description>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33492</PullRequestID>
        <IssueID>32250</IssueID>
        <Title>Improve call counting mechanism</Title>
        <Description>- Commit 1
  - Reverts commit f954c6bb80a21d9c44a6ee751d935a0573f7226a, which reverted PR https://github.com/dotnet/runtime/pull/1457 due to issues
- Commit 2
  - Fixes crashes and assertion failures seen by the original change, fixes https://github.com/dotnet/runtime/issues/29934
  - The crashes were caused by commit https://github.com/dotnet/runtime/pull/1457/commits/6aa3c7083735895c2e687a77e3636080edb366c3 in the original PR
  - Call counting infos cannot be deleted when the corresponding call counting stubs may still run, because:
    - The remaining call count decremented by the stub is in the call counting info
    - The only way to get a code version / method desc from a stub is to go through the call counting info
  - Got one repro of the assertion failure in https://github.com/dotnet/runtime/issues/22786 and https://github.com/dotnet/runtime/issues/24664 (fixes https://github.com/dotnet/runtime/issues/24664) and it is most likely caused by the same issue, following heap corruption from modifying a deleted call counting info where the memory is reused for an object used by code versioning, messing up some data and making it look like the code version is not active when it actually is according to the dump
  - Fixed with a partial revert of the above commit. Added back the `Complete` stage and then call counting infos are deleted only after it's ensured that call counting stubs won't be used (shortly before deleting them).
- Commit 3
  - Public static functions of `CallCountingManager` that may be called through the debugger may occur before static initialization, added a check for null as suggested in https://github.com/dotnet/runtime/pull/29892
</Description>
        <CreatedDate>13/02/2020</CreatedDate>
        <ClosedDate>03/03/2020</ClosedDate>
        <Labels>
          <Label>area-TieredCompilation-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33491</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[test][mono] Capture the ExceptionDispatchInfo when rethrowing from TaskContinuation</Title>
    <Description>!! This PR is a copy of mono/mono#19168,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;In `task.GetAwaiter().OnCompleted(action)` if `action` throws, the `TaskContinuation.RunOrScheduleAction` method will catch the exception and then call `RuntimeAugments.ReportUnhandledException`.  We must not simply throw the exception again - in that case we will lose all the frames leading up to the `catch` in `RunOrScheduleAction`.  Instead use `ExceptionDispatchInfo` to capture the original throw.

Addresses https://github.com/mono/mono/issues/19166
</Description>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33491</PullRequestID>
        <IssueID>19168</IssueID>
        <Title>[Debian Stretch][unsupported] libcrypto.so segfault on Debian Testing</Title>
        <Description>Moved from https://github.com/PowerShell/PowerShell/issues/2564

I'm using the Ubuntu 16.04 package, I suspect that some of the dependencies are incompatible and the version ranges on the .deb are too broad so it's not marking it as an incompatibility. Ubuntu has OpenSSL 1.0.2g while Debian has 1.0.2j. Maybe that's what's causing the issue? However, The dotnet package does not specify any particular OpenSSL version though, it just specifies a dependency on `libssl1.0.0`

Repro:

``</Description>
        <CreatedDate>01/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Security</Label>
          <Label>bug</Label>
          <Label>os-unsupported</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33489</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[debugger] [coop] assertion when `socket_transport_send` called from the crash reporter</Title>
    <Description>!! This PR is a copy of mono/mono#19191,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;If there is a crash and the debugger is attached, we call mini_get_dbg_callbacks ()-&gt;send_crash().

That call ends up in mono_debugger_agent_send_crash which does all kinds of questionable stuff like trying to take the loader lock. Eventually it ends up calling socket_transport_send which tries to do a transition to GC Safe mode.
I inserted a MONO_ENTER_GC_UNSAFE in mono_debugger_agent_send_crash function and this fixes the assert.

Fixes mono/mono#18794
</Description>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33489</PullRequestID>
        <IssueID>19191</IssueID>
        <Title>Test failure: System.Xml.Tests.InsertAfterTests/InsertAfterReplacesDupRefAttr</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.Xml.Tests.InsertAfterTests/InsertAfterReplacesDupRefAttr` has failed.

Assert.Same() Failure\r
    Expected: XmlAttribute []\r
    Actual:   XmlAttribute []

        Stack Trace:

           at System.Xml.Tests.InsertAfterTests.InsertAfterReplacesDupRefAttr() in D:\A\_work\32\s\corefx\src\System.Private.Xml\tests\XmlDocument\XmlAttributeCollectionTests\InsertAfterTests.cs:line 251
Build : Master - 20161031.01 (Full Framework Tests)
Failing configurations:
- Windows.10.Amd64
  - AnyCPU-Debug
  - AnyCPU-Release

Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20161031.01/workItem/System.Xml.XmlDocument.Tests/analysis/xunit/System.Xml.Tests.InsertAfterTests~2FInsertAfterReplacesDupRefAttr</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Xml</Label>
          <Label>test-run-desktop</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33489</PullRequestID>
        <IssueID>18794</IssueID>
        <Title>AsyncTransactionScopeTests.AsyncTSTest failed in CI</Title>
        <Description>http://dotnet-ci.cloudapp.net/job/dotnet_corefx/job/master/job/osx_debug_prtest/821/consoleText

``
</Description>
        <CreatedDate>30/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Transactions</Label>
          <Label>test bug</Label>
          <Label>test-run-core</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33485</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>elinor-fung</FixedByID>
    <Title>Use registered ComWrappers for object &lt;-&gt; COM interface</Title>
    <Description>Fix #33329 

If a global `ComWrappers` instance is registered, use it for conversion between object and COM interfaces. This includes the `Marshal` APIs, interface marshaler for p/invokes, and COM activation.</Description>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>25/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33485</PullRequestID>
        <IssueID>33329</IssueID>
        <Title>Marshal.GetIUnknownForObject() and Marshal.GetObjectForIUnknown() should be updated to use ComWrappers API.</Title>
        <Description>Update `Marshal.GetIUnknownForObject()` and `Marshal.GetObjectForIUnknown()` to check and possibly use the globally registered `ComWrappers` instance created in  https://github.com/dotnet/runtime/pull/32091.

/cc @jkoritzinsky @scottj1s</Description>
        <CreatedDate>07/03/2020</CreatedDate>
        <ClosedDate>25/03/2020</ClosedDate>
        <Labels>
          <Label>area-Interop-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33478</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Disable the IL verifier for now, it can't handle code compiled without /features:peverify-compat</Title>
    <Description>!! This PR is a copy of mono/mono#19144,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;See https://github.com/mono/mono/issues/18572#issuecomment-595924767.

Fixes https://github.com/mono/mono/issues/18572.</Description>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33478</PullRequestID>
        <IssueID>19144</IssueID>
        <Title>ConvertTimeFromToUtc_UnixOnly test failing in CI</Title>
        <Description>Examples:
https://ci.dot.net/job/dotnet_corefx/job/master/job/ubuntu16.10_debug_prtest/6/consoleText

``
</Description>
        <CreatedDate>30/10/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Globalization</Label>
          <Label>test-run-core</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33469</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[arm] Fix branch island disassembly for arm64 and thumb.</Title>
    <Description>!! This PR is a copy of mono/mono#19188,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Followup to https://github.com/mono/mono/pull/19126 and
https://github.com/mono/mono/pull/19169.

Bring arm64 `mono_arch_get_call_target` in line with other platforms by
returning NULL on failure instead of asserting. Bits 30-26 in an arm64
unconditional branch are exactly 0b00101, so 0x1f (0b11111) is used as a
mask to determine if the branch uses an immediate target--0x7 (0b111)
would incorrectly match against branches using register targets. The
extracted immediate is now sign extended in a branch-free way.

Avoid following blx entries in the method address table; ld64 can emit 4
different instruction sequences for islands involving thumb, and I'd
rather not implement support for them all now because 32-bit iOS is old
and large unlinked assemblies seem rare.</Description>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33469</PullRequestID>
        <IssueID>19188</IssueID>
        <Title>Test failure: System.Xml.Tests.AsyncReaderLateInitTests/ReadAfterInitializationWithUriOnAsyncReaderTrows</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.Xml.Tests.AsyncReaderLateInitTests/ReadAfterInitializationWithUriOnAsyncReaderTrows` has failed.

Assert.Throws() Failure\r
    Expected: typeof(System.Xml.XmlException)\r
    Actual:   typeof(System.AggregateException): One or more errors occurred.

        Stack Trace:

           at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
       at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)
       at System.Xml.XmlTextReaderImpl.FinishInitUriString()
       at System.Xml.XmlTextReaderImpl.Read()
       at System.Xml.Tests.AsyncReaderLateInitTests.&lt;&gt;c__DisplayClass8_0.&lt;ReadAfterInitializationWithUriOnAsyncReaderTrows&gt;b__0() in D:\A\_work\32\s\corefx\src\System.Private.Xml\tests\XmlReader\Tests\AsyncReaderLateInitTests.cs:line 86
Build : Master - 20161031.01 (Full Framework Tests)
Failing configurations:
- Windows.10.Amd64
  - AnyCPU-Debug
  - AnyCPU-Release

Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20161031.01/workItem/System.Xml.RW.XmlReader.Tests/analysis/xunit/System.Xml.Tests.AsyncReaderLateInitTests~2FReadAfterInitializationWithUriOnAsyncReaderTrows</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Xml</Label>
          <Label>test bug</Label>
          <Label>test-run-desktop</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33468</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[interp][32bit] Fix warning about precedence/parentheses.</Title>
    <Description>!! This PR is a copy of mono/mono#19184,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;/s/mono2/mono/mini/interp/transform.c:3166:25: note: place parentheses around
      the '&amp;&amp;' expression to silence this warning
        if (mt &gt;= MINT_TYPE_I1 &amp;&amp; mt &lt;= MINT_TYPE_I4
            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~</Description>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33468</PullRequestID>
        <IssueID>19184</IssueID>
        <Title>Test failure: System.Reflection.Emit.Tests.DynamicMethodGetILGenerator1/GetILGenerator_Module(skipVisibility: False)</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.Reflection.Emit.Tests.DynamicMethodGetILGenerator1/GetILGenerator_Module(skipVisibility: False)` has failed.

System.FieldAccessException : Attempt by method 'DynamicClass.Method(System.Reflection.Emit.Tests.IDClass, Int32)' to access field 'System.Reflection.Emit.Tests.IDClass._id' failed.

        Stack Trace:

           at Method(IDClass , Int32 )
       at System.Reflection.Emit.Tests.DynamicMethodGetILGenerator1.VerifyILGenerator(IntDelegate instanceCallBack, IDClass target, Int32 newId) in D:\A\_work\32\s\corefx\src\System.Reflection.Emit.Lightweight\tests\DynamicMethodGetILGenerator.cs:line 90
       at System.Reflection.Emit.Tests.DynamicMethodGetILGenerator1.GetILGenerator_Module(Boolean skipVisibility) in D:\A\_work\32\s\corefx\src\System.Reflection.Emit.Lightweight\tests\DynamicMethodGetILGenerator.cs:line 85
Build : Master - 20161031.01 (Full Framework Tests)
Failing configurations:
- Windows.10.Amd64
  - AnyCPU-Debug
  - AnyCPU-Release

Failed tests:
GetILGenerator_Module
ILGenerator_Int_Module

Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20161031.01/workItem/System.Reflection.Emit.Lightweight.Tests/analysis/xunit/System.Reflection.Emit.Tests.DynamicMethodGetILGenerator1~2FGetILGenerator_Module(skipVisibility:%20False)

https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20161031.01/workItem/System.Reflection.Emit.Lightweight.Tests/analysis/xunit/System.Reflection.Emit.Tests.DynamicMethodGetILGenerator1~2FILGenerator_Int_Module(skipVisibility:%20False)</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Reflection.Emit</Label>
          <Label>test-run-desktop</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33461</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>echesakovMSFT</FixedByID>
    <Title>[Arm64] Vector Load/Store structure instructions</Title>
    <Description>This adds support in the JIT emitter for **Vector Load/Store structure instructions**:
- LD1 (1-4 registers)
- LD2
- LD3
- LD4
- LD1R
- LD2R
- LD3R
- LD4R
- ST1 (1-4 registers)
- ST2
- ST3
- ST4

in the following addressing modes:

- Base register only
- Post-indexed by a 64-bit register
- Post-indexed by an immediate, equal to the number of bytes transferred

I supported multiple structures as well as single structure variants.

This also adds support in JitDump for printing 
* SIMD vector register list, e.g. `ld1     {v5.16b, v6.16b, v7.16b, v8.16b}, [x9]`
* SIMD vector element list, .e.g `st1     {v0.b}[3], [x1],#1`

PerfScore numbers are according to Arm Cortex-A55 Software Optimization Guide

I validated the correctness of the instructions' encodings by comparing JitDump with WinDbg u command output. I attached the outputs of both:
[jitDump.txt](https://github.com/dotnet/runtime/files/4319885/jitDump.txt)
[windbg-u.txt](https://github.com/dotnet/runtime/files/4319886/windbg-u.txt)

Examples of the instruction usages can be found in codegenarm64.cpp in Arm64 emitter unit tests collection.

This is needed for https://github.com/dotnet/runtime/issues/24771</Description>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>14/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33461</PullRequestID>
        <IssueID>1</IssueID>
        <Title>WIP: repo consolidation scouting kick-off - make clr build locally on Windows</Title>
        <Description>This is my first contribution to the scouting to let other people
see the first problems I'm hitting as I believe them to be mostly
general. With this small change I now have at least the native part
of CoreCLR build running - I'm not yet past that so then I'll see
what other problems I hit when building the managed components,
building and running tests.

As you can easily see, the first (and so far the only) problem is
the split of the two roots (subrepo root vs. repo root) making the
build script fail when trying to locate "msbuild.ps1" which is now
under a repo-global eng folder. I can imagine it may be undesirable
to query GIT in the build script; in this particular case we have
multiple alternate ways to proceed (keep the duplicates of
msbuild.ps1? autodetecting the root based on some well-known file?).

Thanks

Tomas</Description>
        <CreatedDate>15/10/2019</CreatedDate>
        <ClosedDate>29/10/2019</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33456</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Fix warnings about misleading indentation.</Title>
    <Description>!! This PR is a copy of mono/mono#19186,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;This is subtle and not actually misleading,
because it tends to be space tab or space tab, not wrong
number of tabs or significant wrong number of spaces.

/s/mono2/mono/metadata/class.c:4010:6: warning: misleading indentation;
      statement is not part of the previous 'if' [-Wmisleading-indentation]
                                 if (mono_class_implement_interface_slo...

/s/mono2/mono/metadata/class.c:4039:3: warning: misleading indentation;
      statement is not part of the previous 'if' [-Wmisleading-indentation]
        if (m_class_is_delegate (target) &amp;&amp; mono_class_has_variant_gener...

/s/mono2/mono/mini/driver.c:1780:4: warning: misleading indentation; statement
      is not part of the previous 'if' [-Wmisleading-indentation]
                if (strncmp (argv [i], "--debugger-agent=", 17) == 0) {</Description>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33456</PullRequestID>
        <IssueID>19186</IssueID>
        <Title>Test failure: System.Collections.Specialized.Tests.HttpUtilityTest/UrlDecodeToBytes(decoded: \"http://127.0.0.1:8080/appDir/page.aspx?foo=b%ar\", encoded: \"http://127.0.0.1:8080/appDir/page.aspx?foo=b%%u00...</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.Collections.Specialized.Tests.HttpUtilityTest/UrlDecodeToBytes(decoded: \"http://127.0.0.1:8080/appDir/page.aspx?foo=b%ar\", encoded: \"http://127.0.0.1:8080/appDir/page.aspx?foo=b%%u00...` has failed.

Assert.Equal() Failure\r
                                     ? (pos 45)\r
    Expected: ···Dir/page.aspx?foo=b%ar\r
    Actual:   ···Dir/page.aspx?foo=b%%u0061r\r
                                     ? (pos 45)

        Stack Trace:

           at System.Collections.Specialized.Tests.HttpUtilityTest.UrlDecodeToBytes(String decoded, String encoded) in D:\A\_work\32\s\corefx\src\System.Web.HttpUtility\tests\HttpUtility\HttpUtilityTest.cs:line 413
Build : Master - 20161031.01 (Full Framework Tests)
Failing configurations:
- Windows.10.Amd64
  - AnyCPU-Debug
  - AnyCPU-Release

Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20161031.01/workItem/System.Web.HttpUtility.Tests/analysis/xunit/System.Collections.Specialized.Tests.HttpUtilityTest~2FUrlDecodeToBytes(decoded:%20%5C%22http:~2F~2F127.0.0.1:8080~2FappDir~2Fpage.aspx%3Ffoo=b%25ar%5C%22,%20encoded:%20%5C%22http:~2F~2F127.0.0.1:8080~2FappDir~2Fpage.aspx%3Ffoo=b%25%25u00...</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net.Http</Label>
          <Label>test-run-desktop</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33453</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[mini] Fix warning about unused variables.</Title>
    <Description>!! This PR is a copy of mono/mono#19182,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;/s/mono2/mono/mini/mini-generic-sharing.c:1415:9: warning: unused variable
      'param_names' [-Wunused-variable]
        char **param_names;</Description>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33453</PullRequestID>
        <IssueID>19182</IssueID>
        <Title>Test failure: System.PrivateUri.Tests.UriRelativeResolutionTest/Uri_Relative_SimplePartialPathWithScheme_Unicode_ReturnsPartialPathWithScheme</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.PrivateUri.Tests.UriRelativeResolutionTest/Uri_Relative_SimplePartialPathWithScheme_Unicode_ReturnsPartialPathWithScheme` has failed.

System.NullReferenceException : Object reference not set to an instance of an object.

        Stack Trace:

           at System.Uri.CreateUriInfo(Flags cF)
       at System.Uri.EnsureUriInfo()
       at System.Uri.ParseRemaining()
       at System.Uri.InitializeUri(ParsingError err, UriKind uriKind, UriFormatException&amp; e)
       at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind)
       at System.PrivateUri.Tests.UriRelativeResolutionTest.Uri_Relative_SimplePartialPathWithScheme_Unicode_ReturnsPartialPathWithScheme() in D:\A\_work\32\s\corefx\src\System.Private.Uri\tests\FunctionalTests\UriRelativeResolutionTest.cs:line 152
Build : Master - 20161031.01 (Full Framework Tests)
Failing configurations:
- Windows.10.Amd64
  - AnyCPU-Debug
  - AnyCPU-Release

Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20161031.01/workItem/System.Private.Uri.Functional.Tests/analysis/xunit/System.PrivateUri.Tests.UriRelativeResolutionTest~2FUri_Relative_SimplePartialPathWithScheme_Unicode_ReturnsPartialPathWithScheme</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net</Label>
          <Label>test-run-desktop</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33452</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[wasm] Fix warnings about unused variables.</Title>
    <Description>!! This PR is a copy of mono/mono#19181,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;/s/mono2/mono/mini/mini-runtime.c:2284:15: warning: unused variable 'ji'
      [-Wunused-variable]
        MonoJitInfo *ji;</Description>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33452</PullRequestID>
        <IssueID>19181</IssueID>
        <Title>Test failure: System.IO.Tests.RenamedEventArgsTests/RenamedEventArgs_ctor(changeType: 0, directory: \"\", name: \"\", oldName: \"\")</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.IO.Tests.RenamedEventArgsTests/RenamedEventArgs_ctor(changeType: 0, directory: \"\", name: \"\", oldName: \"\")` has failed.

System.ArgumentException : Absolute path information is required.

        Stack Trace:

           at System.Security.Util.StringExpressionSet.CreateListFromExpressions(String[] str, Boolean needFullPath)
       at System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess access, AccessControlActions control, String[] pathListOrig, Boolean checkForDuplicates, Boolean needFullPath, Boolean copyPathList)
       at System.Security.Permissions.FileIOPermission..ctor(FileIOPermissionAccess access, String path)
       at System.IO.RenamedEventArgs.get_OldFullPath()
       at System.IO.Tests.RenamedEventArgsTests.RenamedEventArgs_ctor(WatcherChangeTypes changeType, String directory, String name, String oldName) in D:\A\_work\32\s\corefx\src\System.IO.FileSystem.Watcher\tests\Args.RenamedEventArgs.cs:line 29
Build : Master - 20161031.01 (Full Framework Tests)
Failing configurations:
- Windows.10.Amd64
  - AnyCPU-Debug
  - AnyCPU-Release


Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20161031.01/workItem/System.IO.FileSystem.Watcher.Tests/analysis/xunit/System.IO.Tests.RenamedEventArgsTests~2FRenamedEventArgs_ctor(changeType:%200,%20directory:%20%5C%22%5C%22,%20name:%20%5C%22%5C%22,%20oldName:%20%5C%22%5C%22)</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.IO</Label>
          <Label>test bug</Label>
          <Label>test-run-desktop</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33451</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[wasm] Fix warnings about unused variables.</Title>
    <Description>!! This PR is a copy of mono/mono#19179,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;/s/mono2/mono/metadata/sgen-mono.c:2883:16: warning: unused variable
      'last_major_gc_warned' [-Wunused-variable]
        static gint32 last_major_gc_warned = -1;
                      ^
/s/mono2/mono/metadata/sgen-mono.c:2884:16: warning: unused variable
      'num_degraded' [-Wunused-variable]
        static gint32 num_degraded = 0;
                      ^
/s/mono2/mono/metadata/sgen-mono.c:2886:9: warning: unused variable
      'major_gc_count' [-Wunused-variable]
        gint32 major_gc_count = mono_atomic_load_i32 (&amp;mono_gc_stats.maj...
               ^



&lt;!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
--&gt;
</Description>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33451</PullRequestID>
        <IssueID>19179</IssueID>
        <Title>DateTimeFormatInfo tests need argument validation updated</Title>
        <Description>AbbreviatedDayNames_Set_Invalid() and the like check exception argument strings which have changed.

(System.Globalization)</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Globalization</Label>
          <Label>test bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33446</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>am11</FixedByID>
    <Title>Add CoreCLR build pipeline for GCC</Title>
    <Description>Fixes #33346</Description>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>12/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33446</PullRequestID>
        <IssueID>33346</IssueID>
        <Title>Need GCC build pipeline</Title>
        <Description>We have been waiting for a long time to add gcc build pipeline. I'm looking for help from the build team.</Description>
        <CreatedDate>08/03/2020</CreatedDate>
        <ClosedDate>12/03/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33439</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>ivdiazsa</FixedByID>
    <Title>Moved warning disables from warningcontrol.h to configurecompiler.cmake</Title>
    <Description>This PR moves warning disables to be collected in just one place, rather than scattered throughout multiple places. Originally in issue #9043, all warnings would be moved to `warningcontrol.h`. However, as per discussion with @janvorli, due to the nature of the current build system, it seems more plausible to have these disables in `configurecompiler.cmake`.</Description>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>12/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33439</PullRequestID>
        <IssueID>9043</IssueID>
        <Title>Move disable warning options from compileoptions.cmake to warningcontrol.h</Title>
        <Description>From https://github.com/dotnet/coreclr/pull/14272#discussion_r141993057
&gt; I have just realized we have the warning disabling at two places. One is here and the other is in the compileoptions.cmake:
https://github.com/dotnet/coreclr/blob/master/compileoptions.cmake#L94
It seems it would be better to have them at one place only.

Remove from compileoptions.cmake:
`add_compile_options(/wd4960 /wd4961 /wd4603 /wd4627 /wd4838 /wd4456 /wd4457 /wd4458 /wd4459 /wd4091 /we4640)`

and Add to src/inc/warningcontrol.h:
``

cc @janvorli</Description>
        <CreatedDate>30/09/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-Infrastructure-coreclr</Label>
          <Label>enhancement</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33437</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>ViktorHofer</FixedByID>
    <Title>Revert "Enable restore for ref and src projects in libraries"</Title>
    <Description>Reverts dotnet/runtime#33242 until we get a newer NuGet which cuts down the time the build spends inside the graph evaluation, drastically.

cc @ericstj</Description>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>10/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33437</PullRequestID>
        <IssueID>33242</IssueID>
        <Title>Enable restore for ref and src projects in libraries</Title>
        <Description>Fixes https://github.com/dotnet/runtime/issues/29953
Contributes towards https://github.com/dotnet/runtime/issues/31844

Upfront restore is now taking far too long, presumably because of project evaluation or multiple globs. I'm considering making restore implicit (during the build of the refs, sources and tests) so that the initial restore only handles the depproj files. Under a switch the restore target would still be able to upfront restore everything (CI mode).

Later when we removed all depproj files and sequenced _everything_ into the build, we can remove the `-restore` action which is passed to the Arcade's Build.proj so that the `-restore` action is only invoked on demand (CI or before going offline, ie airplane).

### Requires
- [x] https://github.com/dotnet/arcade/pull/4989
- [x] https://github.com/dotnet/arcade/pull/4992
- [x] https://github.com/dotnet/arcade/pull/4993
- [x] https://github.com/dotnet/arcade/pull/4996
- [ ] https://github.com/dotnet/sdk/pull/10794

cc @Anipik @joperezr @safern</Description>
        <CreatedDate>05/03/2020</CreatedDate>
        <ClosedDate>10/03/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-libraries</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33431</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[interp] Add more Math intrinsics</Title>
    <Description>!! This PR is a copy of mono/mono#19174,  please do not edit or review it in this repo !!&lt;br/&gt;Do not automatically approve this PR:&lt;br/&gt;&lt;br/&gt;* Consider how the changes affect configurations in this repo,&lt;br/&gt;* Check effects on files that are not mirrored,&lt;br/&gt;* Identify test cases that may be needed in this repo.&lt;br/&gt;&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Fixes https://github.com/dotnet/runtime/issues/33233
</Description>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33431</PullRequestID>
        <IssueID>19174</IssueID>
        <Title>Test failure: System.IO.Compression.Tests.zip_CreateTests/CreateNormal(folder: \"empty\", seekable: False)</Title>
        <Description>Opened on behalf of @jiangzeng

The test `System.IO.Compression.Tests.zip_CreateTests/CreateNormal(folder: \"empty\", seekable: False)` has failed.

System.NotSupportedException : This stream does not support seeking

        Stack Trace:

           at WrappedStream.get_Position() in D:\A\_work\32\s\corefx\src\System.IO.Compression\tests\Utilities\WrappedStream.cs:line 91
       at System.IO.Compression.ZipArchive.WriteFile()
       at System.IO.Compression.ZipArchive.Dispose(Boolean disposing)
       at System.IO.Compression.ZipArchive.Dispose()
       at System.IO.Compression.Tests.ZipFileTestBase.&lt;CreateFromDir&gt;d__20.MoveNext() in D:\A\_work\32\s\corefx\src\Common\tests\System\IO\Compression\ZipTestHelper.cs:line 327
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
       at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
       at System.IO.Compression.Tests.zip_CreateTests.&lt;CreateNormal&gt;d__1.MoveNext() in D:\A\_work\32\s\corefx\src\System.IO.Compression\tests\ZipArchive\zip_CreateTests.cs:line 69
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
    --- End of stack trace from previous location where exception was thrown ---
       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
Build : Master - 20161031.01 (Full Framework Tests)
Failing configurations:
- Windows.10.Amd64
  - AnyCPU-Debug
  - AnyCPU-Release

Fail for tests:
CreateNormal
CreateNormal_Unicode

Details:
https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20161031.01/workItem/System.IO.Compression.Tests/analysis/xunit/System.IO.Compression.Tests.zip_CreateTests~2FCreateNormal(folder:%20%5C%22empty%5C%22,%20seekable:%20False)

https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fdesktop~2Fcli~2F/build/20161031.01/workItem/System.IO.Compression.Tests/analysis/xunit/System.IO.Compression.Tests.zip_CreateTests~2FCreateNormal_Unicode(folder:%20%5C%22unicode%5C%22,%20seekable:%20False)</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.IO.Compression</Label>
          <Label>test bug</Label>
          <Label>test-run-desktop</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33410</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>tarekgh</FixedByID>
    <Title>Mark PerformanceCounter_PerformanceData is a stress test.</Title>
    <Description>Fixes #33372
This change to avoid running this test by default which can cause a timeout in CI.</Description>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>10/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33410</PullRequestID>
        <IssueID>33372</IssueID>
        <Title>Long running test: System.Diagnostics.Tests.InstanceDataTests.InstanceDataCollectionCollection_CopyTo</Title>
        <Description>https://dev.azure.com/dnceng/public/_build/results?buildId=551597&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=17416796&amp;resultId=180795&amp;paneView=attachments

Configurations:
- netcoreapp5.0-Windows_NT-Release-x86-CoreCLR_release-Windows.10.Amd64.Server19H1.ES.Open
- netcoreapp5.0-Windows_NT-Debug-x64-CoreCLR_release-Windows.10.Amd64.Server19H1.ES.Open

``

4808.1n2wfgek.bux.dmp: https://helix.dot.net/api/2019-06-17/jobs/ddf1dfcc-a4c5-4f13-9f9a-c49d9ca60a55/workitems/System.Diagnostics.PerformanceCounter.Tests/files/4808.1n2wfgek.bux.dmp

console.8477c80a.log: https://helix.dot.net/api/2019-06-17/jobs/ddf1dfcc-a4c5-4f13-9f9a-c49d9ca60a55/workitems/System.Diagnostics.PerformanceCounter.Tests/files/console.8477c80a.log

@tarekgh @Anipik can you please take a look?</Description>
        <CreatedDate>09/03/2020</CreatedDate>
        <ClosedDate>10/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Diagnostics.Tracing</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33409</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>stephentoub</FixedByID>
    <Title>[release/5.0-preview2] Fix overaggressive CanBeMadeAtomic check for Set + Notone</Title>
    <Description>Port #33405 to release/5.0-preview2</Description>
    <CreatedDate>09/03/2020</CreatedDate>
    <ClosedDate>10/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>33409</PullRequestID>
        <IssueID>33405</IssueID>
        <Title>Fix overaggressive CanBeMadeAtomic check for Set + Notone</Title>
        <Description>We're erroneously converting a set loop to be atomic when it's followed by a notone where the notone's character is in the set.  But if we for example have `[ab]*[^a]`, we can't make the loop atomic, because the `[ab]*` can actually give back something (a `b`) that the `[^a]` will match.  The fix is simply to delete the erroneous, overaggressive checks.

cc: @danmosemsft, @eerhardt, @pgovind </Description>
        <CreatedDate>09/03/2020</CreatedDate>
        <ClosedDate>10/03/2020</ClosedDate>
        <Labels>
          <Label>area-System.Text.RegularExpressions</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2225</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[aot] Add support for making direct cross-assembly calls in llvm mode.</Title>
    <Description>!! This PR is a copy of mono/mono#18505,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>27/01/2020</CreatedDate>
    <ClosedDate>31/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2225</PullRequestID>
        <IssueID>18505</IssueID>
        <Title>Compat work for CharUnuicode (for Linux)</Title>
        <Description>add the implementation of new added APIs 
</Description>
        <CreatedDate>11/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Globalization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2219</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Update locale tables - add Tatar CLDR files tt.xml and tt_RU.xml</Title>
    <Description>!! This PR is a copy of mono/mono#18525,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Fixes mono/mono#18524

The `tt.xml` and `tt_RU.xml` files were added in CLDR 34: http://cldr.unicode.org/index/downloads/cldr-34

Upgrading to v34 (or the latest v36) introduced a larger number of new cultures.  I went with the smallest change possible to have Tatar added.

I wasn't sure if this warranted a test in `CultureInfoTest.cs`, let me know if that would be required and I am happy to add.</Description>
    <CreatedDate>27/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2219</PullRequestID>
        <IssueID>18525</IssueID>
        <Title>Port some missing threading types/members (Overlapped, etc.)</Title>
        <Description>- [x] M:System.Threading.ThreadPool.BindHandle(System.IntPtr)
- [ ] M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)
- [ ] T:System.Threading.Overlapped
- [ ] M:System.Threading.Overlapped.#ctor
- [ ] M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)
- [ ] M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)
- [ ] P:System.Threading.Overlapped.AsyncResult
- [ ] P:System.Threading.Overlapped.EventHandle
- [ ] P:System.Threading.Overlapped.EventHandleIntPtr
- [ ] M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)
- [ ] M:System.Threading.Overlapped.get_AsyncResult
- [ ] M:System.Threading.Overlapped.get_EventHandle
- [ ] M:System.Threading.Overlapped.get_EventHandleIntPtr
- [ ] M:System.Threading.Overlapped.get_OffsetHigh
- [ ] M:System.Threading.Overlapped.get_OffsetLow
- [ ] P:System.Threading.Overlapped.OffsetHigh
- [ ] P:System.Threading.Overlapped.OffsetLow
- [ ] M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)
- [ ] M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)
- [ ] M:System.Threading.Overlapped.set_AsyncResult(System.IAsyncResult)
- [ ] M:System.Threading.Overlapped.set_EventHandle(System.Int32)
- [ ] M:System.Threading.Overlapped.set_EventHandleIntPtr(System.IntPtr)
- [ ] M:System.Threading.Overlapped.set_OffsetHigh(System.Int32)
- [ ] M:System.Threading.Overlapped.set_OffsetLow(System.Int32)
- [ ] M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)
- [ ] M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)
- [ ] M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)
</Description>
        <CreatedDate>12/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Threading</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2219</PullRequestID>
        <IssueID>18524</IssueID>
        <Title>Port some missing threading types/members (SynchronizationContext wait, etc.)</Title>
        <Description>``
</Description>
        <CreatedDate>12/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Threading</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2217</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>MichalStrehovsky</FixedByID>
    <Title>Delete orphaned file</Title>
    <Description>Became orphaned in #172.</Description>
    <CreatedDate>27/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2217</PullRequestID>
        <IssueID>172</IssueID>
        <Title>Unifying many of the R2R and COR constants between crossgen2 and the r2rdump tools</Title>
        <Description>We have many duplications... It would be nice to unify them.

cc @dotnet/crossgen-contrib </Description>
        <CreatedDate>21/11/2019</CreatedDate>
        <ClosedDate>23/11/2019</ClosedDate>
        <Labels>
          <Label>area-ReadyToRun-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2215</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>janvorli</FixedByID>
    <Title>Fix x86 InlinedCallFrame popping during EH</Title>
    <Description>There is a bug in InlinedCallFrame popping on x86 during EH with R2R
compiled code. The code is popping this frame if it is at the top of
the explicit frames stack before executing catch handler. But it
is missing a check to see if the frame was actually in the unwound part
of the stack. So in some corner cases, it can end up popping a frame
that belongs to an active pinvoke somewhere up the call chain.

The fix is to do the popping only if the InlinedCallFrame is located at
an address smaller than the resume ESP.

Close #2240</Description>
    <CreatedDate>27/01/2020</CreatedDate>
    <ClosedDate>03/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2215</PullRequestID>
        <IssueID>2240</IssueID>
        <Title>[Windows x86] InlinedCallFrame popping during EH corrupts Frame chain</Title>
        <Description>From https://github.com/dotnet/runtime/pull/1929#issuecomment-578290763

The problem is in the Windows x86 path here: https://github.com/dotnet/coreclr/pull/24199/files#diff-5eb922d9071dbbd2c84a9fa5f4468ea0R1880

We are missing a check like this: https://github.com/dotnet/coreclr/pull/24199/files#diff-d5e4cb27da3539140a16dc576906b925R1857

It results into unwinding too many Frames that sometime leads to asserts about corrupted Frame chain and crashes.</Description>
        <CreatedDate>27/01/2020</CreatedDate>
        <ClosedDate>03/02/2020</ClosedDate>
        <Labels>
          <Label>area-ExceptionHandling-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2212</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>ManickaP</FixedByID>
    <Title>CredScan suppression based on local run.</Title>
    <Description>Follow up on #1993.

Created suppression config file with all found occurrences from local run of [CredScan](https://strikecommunity.azurewebsites.net/articles/4114/credential-scanner-overview.html). None of them was harmful, mostly test sources, examples in comments or harmless constants.

The suppression file placed in ```.config/CredScanSuppressions.json``` according to the discussion in previous PR and [CredScan doc](https://strikecommunity.azurewebsites.net/articles/4125/credscan-local-suppression.html).

Results available here [cred_scan_results.tsv](https://gist.github.com/ManickaP/98baa3b0f47150d3c34efee482c30c69)</Description>
    <CreatedDate>26/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2212</PullRequestID>
        <IssueID>1993</IssueID>
        <Title>Unblock code mirror: perform one-time AzDO secret scanning bypass for false positives</Title>
        <Description>Our code mirror from GitHub to AzDO is not working, blocking official builds: https://dev.azure.com/dnceng/internal/_build/results?buildId=491921&amp;view=logs&amp;j=a3453f18-ed27-56b8-78ee-81a7631275fb&amp;t=31021d3c-3c27-555b-7ff0-047656185682&amp;l=19

``

These are obviously not secrets:

https://github.com/dotnet/runtime/blob/0cab4ab744df7231439796be6f2f040c56056339/src/libraries/Common/tests/System/Net/Http/HttpClientHandlerTest.DefaultProxyCredentials.cs#L93

https://github.com/dotnet/runtime/blob/0cab4ab744df7231439796be6f2f040c56056339/src/libraries/Common/tests/System/Net/Http/PostScenarioTest.cs#L27

I believe we have bypassed this check before, but the error was reactivated by https://github.com/dotnet/runtime/pull/1676 moving the files around. That PR's merge commit is also the first commit our AzDO repo is lacking.

---

The instructions say that we need to push an empty commit with the message `**BYPASS_SECRET_SCANNING**` to bypass it, so after submitting this PR I'm going to fast-forward merge it to `master`. This will trigger the mirroring build to run again with this commit at the tip of `master` and succeed, if the instructions in the error message are correct.

If another PR gets merged before this PR gets reviewed (blocking the FF merge I need to do) I'm going to rebase this PR and FF merge it immediately afterwards.</Description>
        <CreatedDate>22/01/2020</CreatedDate>
        <ClosedDate>22/01/2020</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2203</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>Unify remaining CoreLib interop files</Title>
    <Description>Fixes #1232</Description>
    <CreatedDate>26/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2203</PullRequestID>
        <IssueID>1232</IssueID>
        <Title>Unify corelib interop files with common ones</Title>
        <Description>As an artefact of the repo merge we have files duplicated between src\libraries\Common\src\Interop and src\libraries\System.Private.CoreLib\src\Interop

The list is these (just going by file name)
``

In each case we should verify the content is the same (or unify it) then delete the System.Private.CoreLib copies in favor of the common ones, updating src\libraries\System.Private.CoreLib\src\System.Private.CoreLib.Shared.projitems and src\coreclr\src\System.Private.CoreLib\System.Private.CoreLib.csproj to match

@jkotas I thought we had a work item for unifying interop stuff but I couldn't find it. Maybe it was already complete and this is another.</Description>
        <CreatedDate>01/01/2020</CreatedDate>
        <ClosedDate>27/01/2020</ClosedDate>
        <Labels>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2197</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AndyAyersMS</FixedByID>
    <Title>JIT: emit gc updates from RRR instruction forms</Title>
    <Description>These do not produce GC refs, so make sure we end any GC liveness for the
destination register.

Also, make sure all gc stress modes announce themselves in the jit dump log.

Fixes #2186.</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>28/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2197</PullRequestID>
        <IssueID>2186</IssueID>
        <Title>jit\HardwareIntrinsics\X86\Bmi1\Bmi1_ro fails under jitstress/gcstress</Title>
        <Description>With
``
Have not done stress mode isolation yet.</Description>
        <CreatedDate>25/01/2020</CreatedDate>
        <ClosedDate>28/01/2020</ClosedDate>
        <Labels>
          <Label>GCStress</Label>
          <Label>JitStress</Label>
          <Label>arch-x86</Label>
          <Label>area-CodeGen-coreclr</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2196</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>CPU utilization computation fixes</Title>
    <Description>- On Unix, move scalling for total number of processors from PAL to managed side, so that it can use container limit aware ProcessorCount
- Delete asserts for CPU utilization being between 0 and 100. These asserts can fail due to races or rounding errors.
- Converted a few classes to structs

Fixes #2195</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>25/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2196</PullRequestID>
        <IssueID>2195</IssueID>
        <Title>SystemNative_GetCpuUtilization assert failing under load</Title>
        <Description>So far I've only seen it on Mono.
See https://github.com/dotnet/runtime/issues/2153#issuecomment-578320515
``
https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/src/libraries/Native/Unix/System.Native/pal_time.c#L165

cc: @akoeplinger </Description>
        <CreatedDate>25/01/2020</CreatedDate>
        <ClosedDate>25/01/2020</ClosedDate>
        <Labels>
          <Label>area-Threading-mono</Label>
          <Label>untriaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2192</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>YohDeadfall</FixedByID>
    <Title>Added field support to JSON serializer</Title>
    <Description>Fixes #876.

/cc @steveharter @ahsonkhan</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2192</PullRequestID>
        <IssueID>876</IssueID>
        <Title>JsonSerializer should support field as well as properties</Title>
        <Description>@mazhou-msft proposed value tuple serialization which requires field serialization which isn't supported yet. See dotnet/corefx#36240 for reference.

@karelz I would like to take this one too and make it separately from dotnet/corefx#36240.

---

## Problems

Because the feature wasn't released as a part of .NET Core 3.0, now it causes a breaking change. Only users which serialize types with public fields will be affected.

To solve the problem @layomia suggested to add a public property named `IncludeFields` to `JsonSerializerOptions` to  opt-in field serialization

**Open questions**

* Which of the existing property-level attributes should be applied to fields? Should JsonExtensionData apply to fields?
* Which of the options in JsonSerializerOptions should apply to fields? Should PropertyNamingPolicy, PropertyNameCaseInsensitive apply to fields, or do we need new options?
* Should readonly fields be supported for deserialization? Should there be an option to ignore readonly fields for serialization (an equivalent to IgnoreReadOnlyProperties)?
* How should JSON property name collisions be handled? This is discussed further in #30964 (comment).</Description>
        <CreatedDate>30/03/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-System.Text.Json</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2189</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkotas</FixedByID>
    <Title>Merging small assemblies (part 1/N)</Title>
    <Description>Contributes to #2138</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2189</PullRequestID>
        <IssueID>2138</IssueID>
        <Title>Reduce number of runtime assemblies that a typical app has to load</Title>
        <Description>For histroric reasons, .NET Core runtime has many small facades and partial facades that do not serve any meaninful purpose anymore. We should consider merging some of them to reduce number of assemlies that a typical app has to load. Unfortunately, we cannot delete them because of backward compatibility.

Example of merged facade looks like: [System.AppContext](https://github.com/dotnet/runtime/tree/master/src/libraries/System.AppContext/). Notice that ref has type-forwards only and src has no implementation files.

List of proposed merges:

- [ ] Merge into System.Private.CoreLib\src:
  - [x] System.Threading.Thread\src
  - [x] System.Diagnosics.Tools\src
  - [x] System.Security.Principal\src
  - [ ] System.Runtime\src
  - [ ] System.Runtime.Extensions\src

- [ ] Merge into System.Runtime\ref:
  - [x] System.Buffers\ref
  - [x] System.Diagnosics.Debug\ref
  - [x] System.Resources.ResourceManager\ref
  - [ ] System.Runtime.Loader\ref
  - [ ] System.Text.Encoding.Extensions\ref
  - [x] System.Threading.Tasks\ref
  - [ ] System.Threading.ThreadPool\ref
  - [x] System.Threading.Timer\ref
  - [ ] System.Threading.Thread\ref
  - [x] System.Diagnosics.Tools\ref
  - [ ] System.Security.Principal\ref
  - [ ] System.Runtime.Extensions\ref

- [ ] Misc other cleanup
  - [x] Stop building packages for System.Reflection.Emit.*
  - [x] Stop building packages for System.Reflection.TypeExtensions
  - [ ] Simplify build configurations for implementations that just foward to other contracts (e.g. System.AppContext\src can have just a single configuration)
  - [x] Delete System.Reflection.Emit.*\src\Resources\Strings.resx
  - [x] Delete System.Buffers\src\Resources\Strings.resx
  - [x] Delete System.Threading.Timer\src\ApiCompatBaseline.uapaot.txt
  - [x] Merge System.Reflection.Emit.*\ref\System.Reflection.Emit.*.netcore.cs into System.Reflection.Emit\ref\System.Reflection.Emit.*.cs
  - [x] Delete System.IO.UnmanagedMemoryStream\ref\System.IO.UnmanagedMemoryStream.cs
  - [x] Delete System.Reflection\ref\System.Reflection.cs

- [ ] Wave 2: It is less obvious that the merging is a good idea for these (big enough, platform specific, etc.) We may still do some merging for them, based on the experience from the Wave 1 above:
   - [ ] System.Diagnostics.Contracts
   - [ ] System.Diagnostics.Tracing
   - [ ] System.Numerics.Vectors
   - [ ] System.Reflection.Emit
   - [ ] System.Reflection.Primitives
   - [ ] System.Threading.Overlapped
   - [ ] System.Memory
   - [ ] System.Reflection.TypeExtensions
   - [ ] System.Threading
   - [ ] System.Collections
   - [ ] System.Collections.Concurrent
</Description>
        <CreatedDate>24/01/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>area-Meta</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2180</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>jkoritzinsky</FixedByID>
    <Title>Fix S.R.CS.U and Microsoft.CSharp assembly version downgrade from 3.1-&gt;5.0</Title>
    <Description>Allow the System.Runtime.CompilerServices.Unsafe and the runtime Microsoft.CSharp assembly versions to match the defaults (in this case 5.0.0).

Fixes #1918 </Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2180</PullRequestID>
        <IssueID>1918</IssueID>
        <Title>Assembly version of `Microsoft.CSharp` and `System.Runtime.CompilerServices.Unsafe` in 5.0 is older than the ones in 3.1?</Title>
        <Description>Tested with nightly builds of netcoreapp5.0, this will make app use out of box assembly instead of inbox ones when they are reference from other place.

Seems they are the only two assembly which have older version:

Microsoft.CSharp: 4.0.4 in 5.0, and 4.0.5 in 3.1 and nuget(4.7.0)
System.Runtime.CompilerServices.Unsafe: 4.0.5 in 5.0, and 4.0.6 in 3.1 and nuget(4.7.0)
</Description>
        <CreatedDate>19/01/2020</CreatedDate>
        <ClosedDate>12/02/2020</ClosedDate>
        <Labels>
          <Label>area-Infrastructure-libraries</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2179</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Contributing: fix typos</Title>
    <Description>!! This PR is a copy of mono/mono#18585,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;
&lt;!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
--&gt;
</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>25/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2179</PullRequestID>
        <IssueID>18585</IssueID>
        <Title>OutOfMemoryException in System.Numerics.Tests.logTest.RunLargeValueLogTests on Ubuntu</Title>
        <Description>Running OuterLoop Ubuntu14.04 Debug in CI for dotnet/corefx#11765:

``
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Numerics</Label>
          <Label>test bug</Label>
          <Label>test-run-core</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2178</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[utils] Default to g_print in mono_counters_dump if the stream is NULL</Title>
    <Description>!! This PR is a copy of mono/mono#18582,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;This makes `mono_counters_dump` actually work on Android. If either this added default behavior or the macro is too terrible I can explore other options, but I'm tired and this was fast.</Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2178</PullRequestID>
        <IssueID>18582</IssueID>
        <Title>Reapply changes made to Xml libraries since the move to System.Private.Xml since they got lost in merge from dev/api</Title>
        <Description>When we moved the implementation of Xml from the old contracts into System.Private.Xml, we lost the history since to git's point of view, they are two different files now. The problem is that this move happened in a different branch (dev/xml) so when we merged that back to dev/api and then to master, we lost all of the changes that were made in master after the move. This work item is to track the work that must be done to re-apply these changes back to the files now under System.Private.Xml.

cc: @weshaggard @danmosemsft @krwq @shmao 
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Xml</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2177</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[eglib] Use the stdout handler with g_printf</Title>
    <Description>!! This PR is a copy of mono/mono#18581,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Done to unblock the externs. More work should probably be done, see mono/mono#18580. </Description>
    <CreatedDate>25/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2177</PullRequestID>
        <IssueID>18581</IssueID>
        <Title>Add tests for several System.Reflection types</Title>
        <Description>- System.Reflection.Module
- System.Reflection.Pointer
- System.Reflection.RuntimeReflectionExtensions
- System.Reflection.TypeDelegator
- System.Reflection.TypeInfo
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Reflection</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2177</PullRequestID>
        <IssueID>18580</IssueID>
        <Title>Source Breaking change in System.Runtime 4.1 with MemberInfo.GetCustomAttributes</Title>
        <Description>When upgrading package versions of System.Runtime from 4.0 to 4.1 the following code will have errors on both lines when it compiled successfully before.

``

This is caused by two new instance methods on MemberInfo that hide the extension methods in CustomAttributeExtensions. The new methods return `object[]` when the extension methods return `IEnumerable&lt;Attribute&gt;`

To maintain compatibility with desktop we cannot change the return type of the new members to match. We need to document the breaking change.
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>api-ready-for-review</Label>
          <Label>area-System.Reflection</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2175</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Fix for -mminimal-toc detection, enable BTLS on FreeBSD PowerPC</Title>
    <Description>!! This PR is a copy of mono/mono#18578,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Fixes mono/mono#18554 by making autoconf actually check if `-mminimal-toc` works instead of assuming on powerpc. Tested with FreeBSD 12.x and 13.x on powerpc64 ELFv2.
While we are in here, also enable BTLS which has passed testing. 🎉
Big thanks to @pkubaj and linimon@ for assistance testing this.</Description>
    <CreatedDate>24/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2175</PullRequestID>
        <IssueID>18578</IssueID>
        <Title>httpclient default proxy</Title>
        <Description>Hello Guys,

Is there a way for httpclient to pick up the default system proxy like http_proxy on linux ? 

For now we are providing a the proxy manually to the httpclient, using the HttpClientHandler class.

Thank you !
</Description>
        <CreatedDate>15/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Net</Label>
          <Label>os-linux</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2175</PullRequestID>
        <IssueID>18554</IssueID>
        <Title>Arithmetic expressions don't work with enums properly</Title>
        <Description>See the following example for Add:

``

My understanding is that Linq Expressions try to mimic C#'s behaviour as much as possible, so this could be an area to align with C#.

/cc @bartdesmet @VSadov  @JonHanna @stephentoub 
</Description>
        <CreatedDate>14/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Linq.Expressions</Label>
          <Label>bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2163</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[merp] Add  tests for crashing via POSIX signal</Title>
    <Description>!! This PR is a copy of mono/mono#18532,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>24/01/2020</CreatedDate>
    <ClosedDate>07/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2163</PullRequestID>
        <IssueID>18532</IssueID>
        <Title>Restore System.Reflection.Assembly load APIs</Title>
        <Description>These APIs need to be exposed from System.Reflection:

``
</Description>
        <CreatedDate>13/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Reflection</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2158</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>vcsjones</FixedByID>
    <Title>Initialize HashSizeValue for digest algorithms.</Title>
    <Description>The abstract types SHAx and MD5 did not set HashSizeValue, which would lead to derived types to have HashSize a value of 0. This initializes the field to match .NET Framework behavior.

Fixes #2133 

cc @bartonjs </Description>
    <CreatedDate>24/01/2020</CreatedDate>
    <ClosedDate>25/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2158</PullRequestID>
        <IssueID>2133</IssueID>
        <Title>SHA1.HashSize does not behave the same as in .NET Framework</Title>
        <Description>Code:

``

On .NET Framework, this prints `160`. On .NET Core, it prints `0`. Of course, it's a fairly easy fix to just override `HashSize`, but this seems like an incompatibility that might need to be addressed. I'd imagine there's a good chance it affects other algorithms as well.</Description>
        <CreatedDate>24/01/2020</CreatedDate>
        <ClosedDate>25/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Security</Label>
          <Label>bug</Label>
          <Label>tenet-compatibility</Label>
          <Label>up-for-grabs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2157</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>mikedn</FixedByID>
    <Title>Prevent LocalAddressVisitor from morphing x86 vararg params</Title>
    <Description>`fgMorphStackArgForVarArgs` has no support for local address node nor `LCL_FLD` nodes.

The `fgMorphStackArgForVarArgs` fix done in #737 is obviously not enough to support such nodes.

The varargs test tests a ton of cases except taking the address of a parameter in a vararg method...</Description>
    <CreatedDate>24/01/2020</CreatedDate>
    <ClosedDate>28/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2157</PullRequestID>
        <IssueID>737</IssueID>
        <Title>Start generating LCL_FLDs in LocalAddressVisitor</Title>
        <Description>Continuing from #305 - this starts generating `LCL_FLD` nodes in `LocalAddressVisitor`, before global morph. For now this only handles the most simple case - `TYP_STRUCT` variable field access. Later I'll expand it to also handle SIMD and primitive type variables (I actually have the primitive case mostly done but decided to leave it out for simplicity) and eventually I'll also use this to generate struct typed `LCL_FLD`s that are useful for both `ADDR` and `ASG` removal.

Despite trying to limit this to `TYP_STRUCT` variables, it still affects a bit SIMD variables due to contiguous field assignment that now has to recognize `LCL_FLD` in addition to `FIELD` and `INDEX`. And since it recognizes `LCL_FLD`s it also produces a `LCL_FLD` when combining assignments which results in a small CQ improvement in some Matrix methods.</Description>
        <CreatedDate>10/12/2019</CreatedDate>
        <ClosedDate>16/12/2019</ClosedDate>
        <Labels>
          <Label>area-CodeGen-coreclr</Label>
          <Label>optimization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2149</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[merp] MONO_DEBUG=no-gdb-stacktrace shouldn't disable MERP</Title>
    <Description>!! This PR is a copy of mono/mono#18567,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Only prevent `gdb` or `lldb` from being invoked.

MERP is controlled by separate mechanisms --- configure flags for crash
reporting and an explicit opt-in icall.

The existing code collects crashed process data in-process, but it writes the
data out (using mono_merp_invoke) in the forked child process.  This is a bit
surprising, but in the interest of not disturbing the code too much, this PR
doesn't change that.  We should revisit `dump_native_stacktrace` again in the
future and rationalize these decisions.

Addresses https://github.com/mono/mono/issues/18565



&lt;!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
--&gt;
</Description>
    <CreatedDate>24/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>runtime</RepoID>
        <PullRequestID>2149</PullRequestID>
        <IssueID>18567</IssueID>
        <Title>Missing a couple API from S.Globalization</Title>
        <Description>These are the only remaining pieces of System.Globalization that are missing from Core but are in .NET Standard 2.0

``
</Description>
        <CreatedDate>14/09/2016</CreatedDate>
        <ClosedDate>31/01/2020</ClosedDate>
        <Labels>
          <Label>area-System.Globalization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>2146</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>aik-jahoda</FixedByID>
    <Title>Remove "ActiveIssue" attribute from test</Title>
    <Description>Removes forgotten attributes. I re-test it on macOS and the test works fine.
Fixes dotnet/corefx#42507</Description>
    <CreatedDate>24/01/2020</CreatedDate>
    <ClosedDate>28/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2135</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>wfurt</FixedByID>
    <Title>improve handling of kSecTrustResultRecoverableTrustFailure</Title>
    <Description>According do the documentation for kSecTrustResultRecoverableTrustFailure

&gt;This value indicates that you should not trust the chain as is, but that the chain could be trusted with some minor change to the evaluation context, such as ignoring expired certificates or adding another anchor to the set of trusted anchors.

This change implements the last suggestion. With this, we can connect to `apple.com` and `icloud.com` via TLS.

I did not want to add a dependency on another external server so I did not add any test for this change. We could possibly add Outerloop test to verify we can fetch from apple.com.

fixes #805</Description>
    <CreatedDate>24/01/2020</CreatedDate>
    <ClosedDate>31/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2110</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AndyAyersMS</FixedByID>
    <Title>JIT: merge fgMorph into compCompile</Title>
    <Description>This gives us a single method that controls most of the jit's phase behavior.
Largely a manual inline, though I updated some comments and changed one assert.

Follow up from #1309; also see #2109.</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>25/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2105</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AndyAyersMS</FixedByID>
    <Title>JIT: fix another jitstress/gcstress issue with profiler leave hook</Title>
    <Description>Need to also report the hidden return buffer pointer as GC live, in case it
happens to refer to a heap location (method invoked via reflection).

Also did some minor cleanup; we weren't using `returnsGCr` in `emitEndCodeGen`
and we were munging return value liveness unnecessarily when not emitting
a profiler leave hook.

Fixes remaining cases in #1971.</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>25/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2099</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Optimize "constant_string".Length</Title>
    <Description>!! This PR is a copy of mono/mono#16898,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;```csharp
static int Test() =&gt; "Hello".Length; // replace with just `5`
```
Before:
```asm
movabs rax,0x7fd6c1758160
mov    eax,DWORD PTR [rax]
ret 
```
Now:
```asm
mov    eax,0x5
ret
```

Also, handles cases after inlining, e.g.:
```csharp
bool Validate(string str)
{
    return str.Length &gt; 0 &amp;&amp; str.Length &lt;= 100;
}

bool Test()
{
    return Validate("Hello");  // Validate() will be inlined
}
```
New codegen for `Test`:
```asm
mov    eax, 1     ; return true
ret  
```

I have a similar PR for CoreCLR: https://github.com/dotnet/runtime/pull/1378
jit-diff report found &gt;30k bytes of improvements.</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>20/02/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2096</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[threading] Switch to a native implementation of LowLevelLifoSemaphore</Title>
    <Description>!! This PR is a copy of mono/mono#18557,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;This change is motivated on two main fronts. The first is maintainability - the current managed implementation is difficult to understand and I worry diagnosing any potential issues would be a massive time sink. The second is performance - the current implementation appears to suffer from significant lock contention when running the TechEmpower plaintext benchmark. My hope is that the simpler, cleaner native implementation here will avoid both problems, but I don't want to merge it until we have benchmarking data. However, even if the numbers are similar, I still think it's worth merging just from a maintainability perspective.

The native LifoSemaphore implementation has only ever been tested on posix-like platforms, so Windows behavior is unknown. Currently the Windows implementation of LowLevelLifoSemaphore is very different, so unless we have need for the LifoSemaphore elsewhere in the runtime this isn't a concern.

Many thanks to @filipnavara for the initial implementation.</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>23/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2089</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[jit] Avoid generating wbarriers for vtype stores to the stack.</Title>
    <Description>!! This PR is a copy of mono/mono#18556,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;The existing heuristic doesn't work with llvm.</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>31/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2081</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[jit] Compute has_references correctly for gshared types whose constraint is a generic valuetype.</Title>
    <Description>!! This PR is a copy of mono/mono#18552,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>25/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2080</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>Initial CMAKE build system support.</Title>
    <Description>!! This PR is a copy of mono/mono#18091,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>23/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2079</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[debugger] Access invalid memory address using PointerValue Command.</Title>
    <Description>!! This PR is a copy of mono/mono#18537,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Creating a fork process to access address that came from IDE using PointerValue. The IDE can send an invalid address and it was crashing mono.

Fixes mono/mono#18191 </Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>26/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2076</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[debugger] Native thread not executing managed code considered as terminated </Title>
    <Description>!! This PR is a copy of mono/mono#18501,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;If a thread was suspended and doesn't have any managed stack, it was considered as terminated, but it wasn't really terminated because it can execute managed code again, and stop in a breakpoint so if the execution arrives in debugger_agent_breakpoint_from_context we reset the flag terminated to FALSE.


Fixes mono/mono#18106 </Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>23/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2073</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[interp] context can be uninitialized for get_resume_state callback</Title>
    <Description>!! This PR is a copy of mono/mono#18533,  please do not edit or review it in this repo !!&lt;br/&gt;!! Merge the PR only after the original PR is merged !!&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;`jit_tls-&gt;interp_context` gets initialized lazily, that is, upon the first interpreter execution on a specific thread (e.g. via interp_runtime_invoke). However, with mixed mode the execution can purely happen in AOT code upon the first interaction with the managed debugger.

Stack trace:

```
  thread #1, name = 'tid_407', queue = 'com.apple.main-thread'
    frame #0: 0x0000000190aedc94 libsystem_kernel.dylib`__psynch_cvwait + 8
    frame #1: 0x0000000190a0f094 libsystem_pthread.dylib`_pthread_cond_wait$VARIANT$armv81 + 672
    frame #2: 0x000000010431318c reloadcontext.iOS`mono_os_cond_wait(cond=0x0000000104b9ba78, mutex=0x0000000104b9ba30) at mono-os-mutex.h:219:8
    frame #3: 0x0000000104312a68 reloadcontext.iOS`mono_coop_cond_wait(cond=0x0000000104b9ba78, mutex=0x0000000104b9ba30) at mono-coop-mutex.h:91:2
    frame #4: 0x0000000104312858 reloadcontext.iOS`suspend_current at debugger-agent.c:3021:4
    frame #5: 0x000000010431be18 reloadcontext.iOS`process_event(event=EVENT_KIND_BREAKPOINT, arg=0x0000000145d09ae8, il_offset=0, ctx=0x0000000149015c20, events=0x0000000000000000, suspend_policy=2) at debugger-agent.c:4058:3
    frame #6: 0x0000000104310cf4 reloadcontext.iOS`process_breakpoint_events(_evts=0x000000028351a680, method=0x0000000145d09ae8, ctx=0x0000000149015c20, il_offset=0) at debugger-agent.c:4722:3
    frame #7: 0x000000010432f1c8 reloadcontext.iOS`mono_de_process_breakpoint(void_tls=0x0000000149014e00, from_signal=0) at debugger-engine.c:1141:2
    frame #8: 0x000000010430f238 reloadcontext.iOS`debugger_agent_breakpoint_from_context(ctx=0x000000016f656790) at debugger-agent.c:4938:2
    frame #9: 0x00000001011b73a4 reloadcontext.iOS`sdb_breakpoint_trampoline + 148
    frame #10: 0x00000001008511b4 reloadcontext.iOS`reloadcontext_iOS_Application_Main_string__(args=0x000000010703a030) at Main.cs:14
    frame #11: 0x00000001010f9730 reloadcontext.iOS`wrapper_runtime_invoke_object_runtime_invoke_dynamic_intptr_intptr_intptr_intptr + 272
    frame #12: 0x00000001042fd8b8 reloadcontext.iOS`mono_jit_runtime_invoke(method=0x0000000145d09ae8, obj=0x0000000000000000, params=0x000000016f656f20, exc=0x0000000000000000, error=0x000000016f656ff8) at mini-runtime.c:3162:3
    frame #13: 0x0000000104411950 reloadcontext.iOS`do_runtime_invoke(method=0x0000000145d09ae8, obj=0x0000000000000000, params=0x000000016f656f20, exc=0x0000000000000000, error=0x000000016f656ff8) at object.c:3052:11
    frame #14: 0x000000010440c4dc reloadcontext.iOS`mono_runtime_invoke_checked(method=0x0000000145d09ae8, obj=0x0000000000000000, params=0x000000016f656f20, error=0x000000016f656ff8) at object.c:3220:9
    frame #15: 0x0000000104415ae0 reloadcontext.iOS`do_exec_main_checked(method=0x0000000145d09ae8, args=0x000000010703a030, error=0x000000016f656ff8) at object.c:5184:3
    frame #16: 0x00000001044144ac reloadcontext.iOS`mono_runtime_exec_main_checked(method=0x0000000145d09ae8, args=0x000000010703a030, error=0x000000016f656ff8) at object.c:5281:9
    frame #17: 0x0000000104414500 reloadcontext.iOS`mono_runtime_run_main_checked(method=0x0000000145d09ae8, argc=1, argv=0x000000016f6570d0, error=0x000000016f656ff8) at object.c:4734:9
    frame #18: 0x00000001042d3b54 reloadcontext.iOS`mono_jit_exec_internal(domain=0x0000000145f00130, assembly=0x0000000281ba2900, argc=1, argv=0x000000016f6570d0) at driver.c:1320:13
    frame #19: 0x00000001042d39a4 reloadcontext.iOS`mono_jit_exec(domain=0x0000000145f00130, assembly=0x0000000281ba2900, argc=1, argv=0x000000016f6570d0) at driver.c:1265:7
    frame #20: 0x0000000104597994 reloadcontext.iOS`::xamarin_main(argc=5, argv=0x000000016f657a80, launch_mode=XamarinLaunchModeApp) at monotouch-main.m:483:8
    frame #21: 0x00000001008510dc reloadcontext.iOS`main(argc=5, argv=0x000000016f657a80) at main.m:104:11
    frame #22: 0x0000000190af8360 libdyld.dylib`start + 4
[...]
* thread #5, name = 'Debugger agent', stop reason = signal SIGABRT
  * frame #0: 0x0000000190aedec4 libsystem_kernel.dylib`__pthread_kill + 8
    frame #1: 0x0000000190a0d724 libsystem_pthread.dylib`pthread_kill$VARIANT$armv81 + 216
    frame #2: 0x000000019095d844 libsystem_c.dylib`abort + 100
    frame #3: 0x00000001045871b4 reloadcontext.iOS`log_callback(log_domain=0x0000000000000000, log_level="error", message="* Assertion at ../../../../../mono/mini/interp/interp.c:7176, condition `context' not met\n", fatal=4, user_data=0x0000000000000000) at runtime.m:1213:3
    frame #4: 0x0000000104544fc8 reloadcontext.iOS`eglib_log_adapter(log_domain=0x0000000000000000, log_level=G_LOG_LEVEL_ERROR, message="* Assertion at ../../../../../mono/mini/interp/interp.c:7176, condition `context' not met\n", user_data=0x0000000000000000) at mono-logger.c:405:2
    frame #5: 0x000000010456093c reloadcontext.iOS`monoeg_g_logstr(log_domain=0x0000000000000000, log_level=G_LOG_LEVEL_ERROR, msg="* Assertion at ../../../../../mono/mini/interp/interp.c:7176, condition `context' not met\n") at goutput.c:134:2
    frame #6: 0x0000000104560598 reloadcontext.iOS`monoeg_g_logv_nofree(log_domain=0x0000000000000000, log_level=G_LOG_LEVEL_ERROR, format="* Assertion at %s:%d, condition `%s' not met\n", args="e\x12z\x04\x01") at goutput.c:149:2
    frame #7: 0x000000010456061c reloadcontext.iOS`monoeg_assertion_message(format="* Assertion at %s:%d, condition `%s' not met\n") at goutput.c:184:22
    frame #8: 0x0000000104560674 reloadcontext.iOS`mono_assertion_message(file="../../../../../mono/mini/interp/interp.c", line=7176, condition="context") at goutput.c:203:2
    frame #9: 0x000000010459b570 reloadcontext.iOS`interp_get_resume_state(jit_tls=0x000000014900d000, has_resume_state=0x000000016fc7a9f4, interp_frame=0x000000016fc7a9e8, handler_ip=0x000000016fc7a9e0) at interp.c:7176:2
    frame #10: 0x0000000104319420 reloadcontext.iOS`compute_frame_info(thread=0x0000000104fe4130, tls=0x0000000149014e00, force_update=1) at debugger-agent.c:3422:3
    frame #11: 0x0000000104320d40 reloadcontext.iOS`thread_commands(command=1, p="", end="", buf=0x000000016fc7acf8) at debugger-agent.c:9048:3
    frame #12: 0x000000010431cca0 reloadcontext.iOS`debugger_thread(arg=0x0000000000000000) at debugger-agent.c:10132:10
    frame #13: 0x000000010447eb04 reloadcontext.iOS`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x000000016fc7b000) at threads.c:1232:3
    frame #14: 0x000000010447e788 reloadcontext.iOS`start_wrapper(data=0x000000028203ef40) at threads.c:1305:8
    frame #15: 0x0000000190a11d8c libsystem_pthread.dylib`_pthread_start + 15
[...]
```

Thanks to @drasticactions for helping me to reproduce.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1050615



&lt;!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
--&gt;
</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>23/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2072</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>MichalStrehovsky</FixedByID>
    <Title>Match blittability rules in crossgen2 with CoreCLR</Title>
    <Description>Fixes #483. Structs with pointer-typed fields are blittable.

After #1866 we no longer have to worry about the recursion because the code path that recursed into pointed-to types was deleted.

Cc @dotnet/crossgen-contrib </Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>23/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2071</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>am11</FixedByID>
    <Title>Pass native build args from top-level scripts</Title>
    <Description>Add ability to pass `--cross`, `--clangx.y`, `--gccx.y` and `--cmakeargs` to native scripts via top-level `build.sh`. e.g.

```sh
./build.sh --subsetCategory coreclr --clang8 --cross --cmakeargs -DFeatureX=1 --cmakeargs Y='testing'
./build.sh --subsetCategory installer --gcc5 --cross --cmakeargs -DFeatureX=1 --cmakeargs Y='testing'
./build.sh --subsetCategory libraries --clang --cross --cmakeargs -DFeatureX=1 --cmakeargs Y='testing'
```

Also address CR feedback from PRs #1753 and #1602 (in separate commits).</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>30/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2065</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>Youssef1313</FixedByID>
    <Title>Fix typos</Title>
    <Description>Found more occurrences of the typos in #2061

The work done here is made by simple search &amp; replace.

I'll point to replaces that needs attention in a review.</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>23/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2055</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>AndyAyersMS</FixedByID>
    <Title>JIT: fix jitstress/gcstress issue with return value liveness</Title>
    <Description>The jit was not extending return value liveness properly for methods that
returned a ref-wrapped struct, if jitstress caused code to be added between
the final body statement and the epilog (eg a profile leave hook).

Fixes many of the cases in #1971.</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>23/01/2020</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2052</IssueID>
    <RepoID>runtime</RepoID>
    <FixedByID>monojenkins</FixedByID>
    <Title>[runtime] Report crash when receiving crashing signals</Title>
    <Description>This PR is synchronized with mono/mono#18243.&lt;br/&gt;Do not edit this PR, changes here are overwritten when pushing to the other PR.&lt;br/&gt;Please merge both PRs at the same time.&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;The default handlers for SIGTRAP, SIGSYS on macOS and Linux crash the process, so we now have Mono report this.

This change also changes the presentation of the signal name on the stacktrace report dumped on error (from e.g. "SIGSEGV" to "segv").</Description>
    <CreatedDate>23/01/2020</CreatedDate>
    <ClosedDate>06/02/2020</ClosedDate>
    <Issues />
  </PullRequest>
</PullRequests>
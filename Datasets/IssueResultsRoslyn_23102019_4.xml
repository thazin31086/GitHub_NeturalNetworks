<Issues>
  <Issue>
    <IssueID>36896</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable nullable for BoundNodes</Title>
    <Description>
    </Description>
    <CreatedDate>30/06/2019</CreatedDate>
    <ClosedDate>02/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36895</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix typo in EmitStreamSignKind</Title>
    <Description>Just a small typo fix in an internal enum I happened to stumble across :)</Description>
    <CreatedDate>29/06/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36894</IssueID>
    <RepoID>1</RepoID>
    <Title>When should variance be permitted for nullable type arguments?</Title>
    <Description>I encountered the following couple of scenarios just now:

```cs
#nullable enable

using System.Threading.Tasks;

public class C {
    public Task&lt;string?&gt; M1() {
        // warning CS8619: Nullability of reference types in value of type
        // 'Task&lt;string&gt;' doesn't match target type 'Task&lt;string?&gt;'.
        return Task.FromResult("hello");
    }

    public void M2(Task&lt;string?&gt; task) { }
    public void M3()
    {
        // warning CS8620: Argument of type 'Task&lt;string&gt;' cannot be used for
        // parameter 'task' of type 'Task&lt;string?&gt;' in 'void C.M2(Task&lt;string?&gt; task)'
        // due to differences in the nullability of reference types.
        M2(Task.FromResult("hello"));
    }
}
```

I see a few fixes users can do for this:
1. change to `Task.FromResult("hello")!`
2. change to `Task.FromResult&lt;string?&gt;("hello")`
3. `Task.FromResult((string?)"hello")` ~~(this gets marked as redundant by the IDE)~~

It feels like there should be some way to allow nullable variance of certain type parameters so that such workarounds aren't necessary. Interface types can have `in`/`out` modifiers on their type parameters but this doesn't work for types like `Task&lt;T&gt;`.</Description>
    <CreatedDate>29/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36893</IssueID>
    <RepoID>1</RepoID>
    <Title>Features/nullable dogfood</Title>
    <Description>
    </Description>
    <CreatedDate>29/06/2019</CreatedDate>
    <ClosedDate>29/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36892</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/06/2019</CreatedDate>
    <ClosedDate>29/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36891</IssueID>
    <RepoID>1</RepoID>
    <Title>VB Formatting of LineContinuation Wrong after _ ' Comment </Title>
    <Description>**Version Used**: 
16.2.0 Preview 3.0
**Steps to Reproduce**:
Type the following into the IDE
```VB
    Private Private ReadOnly s_originCategoryCodeTextExpression As Regex = New Regex(
 _  ' Beginning of line and any amount of whitespace.
    "^\s*" _
 _ ' Match a [optional project number prefix 'ddd&gt;'], single letter + colon + remaining filename, or
 _ ' string with no colon followed by a colon.
      &amp; "(((?&lt;ORIGIN&gt;(((\d+&gt;)?[a-zA-Z]?:[^:]*)|([^:]*))):)" _
 _ ' Origin may also be empty. In this case there's no trailing colon.
      &amp; "|())" _
 _ ' Match the empty string or a string without a colon that ends with a space
      &amp; "(?&lt;SUBCATEGORY&gt;(()|([^:]*? )))" _
 _ ' Match 'error' or 'warning'.
      &amp; "(?&lt;CATEGORY&gt;(error|warning))" _
 _ ' Match anything starting with a space that's not a colon/space, followed by a colon. 
 _ ' Error code is optional in which case "error"/"warning" can be followed immediately by a colon.
      &amp; "( \s*(?&lt;CODE&gt;[^: ]*))?\s*:" _
 _ ' Whatever's left on this line, including colons.
      &amp; "(?&lt;TEXT&gt;.*)$",
       RegexOptions.IgnoreCase)
```

**Expected Behavior**:
Formatting like C# where lines starting from the second are indented OR a Space _ then enough spaces to indent the comment or code to line up 4 space to the right of "Private" OR the comments and blank lines the way they are but the code lines correctly indented.
```C#
    private static readonly Regex s_originCategoryCodeTextExpression = new Regex
        (
        @"^\s*"
        // Match a [optional project number prefix 'ddd&gt;'], single letter + colon + remaining filename, or
        // string with no colon followed by a colon.
        + @"(((?&lt;ORIGIN&gt;(((\d+&gt;)?[a-zA-Z]?:[^:]*)|([^:]*))):)"
        // Origin may also be empty. In this case there's no trailing colon.
        + "|())"
        // Match the empty string or a string without a colon that ends with a space
        + "(?&lt;SUBCATEGORY&gt;(()|([^:]*? )))"
        // Match 'error' or 'warning'.
        + @"(?&lt;CATEGORY&gt;(error|warning))"
        // Match anything starting with a space that's not a colon/space, followed by a colon. 
        // Error code is optional in which case "error"/"warning" can be followed immediately by a colon.
        + @"( \s*(?&lt;CODE&gt;[^: ]*))?\s*:"
        // Whatever's left on this line, including colons.
        + "(?&lt;TEXT&gt;.*)$",
        RegexOptions.IgnoreCase
        );
```
**Actual Behavior**:
The code is all left aligned with one space before the _</Description>
    <CreatedDate>29/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36890</IssueID>
    <RepoID>1</RepoID>
    <Title>Expand introduced using statement to include encompassed locals</Title>
    <Description>Track all local variable declarations and last usages. Expand the using statement's contained statements to include local lifetime of encompassed variables.

Fixes https://github.com/dotnet/roslyn/issues/35237</Description>
    <CreatedDate>29/06/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36889</IssueID>
    <RepoID>1</RepoID>
    <Title>Port ResultProviders tests to support .NET Core</Title>
    <Description>There happen issues with Expression Evaluator working with .NET Core applications. These issue could be caused either by Roslyn or by Debugger or by CoreClr.

Roslyn Result Provider tests now are .NET Framework dependent. They are not running against .NET Core. So, it is hard to investigate EE + .NET Core issues.</Description>
    <CreatedDate>29/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36888</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/06/2019</CreatedDate>
    <ClosedDate>29/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36887</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36886</IssueID>
    <RepoID>1</RepoID>
    <Title>Relax the rule that tries to get rid of this./me. in Roslyn code.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/36874</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>02/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36885</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate IL at compile time for System.Text.RegularExpressions.Regex(constantString, RegexOptions.Compile)</Title>
    <Description>I don't know if this is the right place to suggest this, but here's an idea.  (I thought about doing this in the linker since I saw some people working on optimizations of this kind there, but maybe the compiler is the best place to do this kind of thing.)

The framework provides a RegexCompiler that will generate IL during instantiation of a Regex object, and generate dynamic methods to match a regular expression.

What if the compiler could look at the parameter to the constructor to this object, and if it's a constant string, it would use the RegexCompiler from the framework (so no semantic differences would exist), and snatch the IL from there, to create an anonymous object devoid of dynamic methods?

In theory this could be done regardless if RegexOptions.Compiled is specified in the flags or not.

If the invariant culture flag is also specified, that could be "baked in" this anonymous object. (Most code using the Regex objects I've seen here on GitHub do not pass this flag, but it's something that many of them could to match some simpler expressions that do not match culture-dependant classes.)

This would (most likely) decrease initialization time for quite a few programs, make those methods available for R2R JITting, etc.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36884</IssueID>
    <RepoID>1</RepoID>
    <Title>Cast is redundant is not suggested for nullable generic type</Title>
    <Description>For the following code, `M1&lt;string?&gt;` can be simplified to `M1`, but is not offered as a fix. 

```C#
#nullable enable
class Program
{
    void M()
    {
        string? s1 = null;
        string? s2 = M1(s1);
    }

    static T M1&lt;T&gt;(T t) where T : class? =&gt; t;
}
```</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36883</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert NullableContextAttribute metadata compaction</Title>
    <Description>
    </Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36882</IssueID>
    <RepoID>1</RepoID>
    <Title>C# 8 Intellisense "Introduce 'using' statement" should use **simple** using statement</Title>
    <Description>VSF_TYPE_MARKDOWNWhen we get the warning &amp;quot;Disposable object created by '' is never disposed&amp;quot;, C# 8 intellisense should us the **simple** using statement ( e.g. using var s = new MemoryStream(); ) instead of the using block statement.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/619119/c-8-intellisense-introduce-using-statement-should.html
VSTS ticketId: 936507_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/25/2019, 01:31 AM (3 days ago): &lt;markdown&gt;&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
&lt;/markdown&gt;</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36881</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't update analyzed nullability for parameter conversions</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/35012</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36880</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability rewriter is O(2^n) when visiting converted tuple literals</Title>
    <Description>The generated Nullability rewriter contains a method that begins

``` c#
        public override BoundNode VisitConvertedTupleLiteral(BoundConvertedTupleLiteral node)
        {
            BoundTupleLiteral sourceTuple = (BoundTupleLiteral)this.Visit(node.SourceTuple);
            ImmutableArray&lt;BoundExpression&gt; arguments = this.VisitList(node.Arguments);
```

The bound trees in `node.Arguments` share part of the expression tree with `node.SourceTuple`.  Consequently, they will be visited twice.  When tuples are nested *n* deep, nodes at the leaves will be visited O(2&lt;sup&gt;*n*&lt;/sup&gt;) times.

We want to avoid repeated visits of a given node, so this needs to be revised.

/cc @chsienki </Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36879</IssueID>
    <RepoID>1</RepoID>
    <Title>Move ComputeRefAsync of some Refactorings to common helpers 1/n</Title>
    <Description>#35525 and #35180</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36878</IssueID>
    <RepoID>1</RepoID>
    <Title>Add tests for C# simplification around NRT</Title>
    <Description>Shows #34723 is currently fixed. However, it looks like simplification for NRT is currently not working. There's an added test that is skipped for now, pending issue filing (or current issue)</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36877</IssueID>
    <RepoID>1</RepoID>
    <Title>'Convert switch statement to expression' loses comments on statements</Title>
    <Description>```c#

                switch (containingMember)
                {
                    case MethodDeclarationSyntax method:
                        // string M() { return null; }
                        // async Task&lt;string&gt; M() { return null; }
                        // IEnumerable&lt;string&gt; M() { yield return null; }
                        return TryGetReturnType(method.ReturnType, method.Modifiers, onYield);

                    case LocalFunctionStatementSyntax localFunction:
                        // string local() { return null; }
                        // async Task&lt;string&gt; local() { return null; }
                        // IEnumerable&lt;string&gt; local() { yield return null; }
                        return TryGetReturnType(localFunction.ReturnType, localFunction.Modifiers, onYield);

                    case PropertyDeclarationSyntax property:
                        // string x { get { return null; } }
                        // IEnumerable&lt;string&gt; Property { get { yield return null; } }
                        return TryGetReturnType(property.Type, modifiers: default, onYield);

                    default:
                        return null;
                }
```

Get converted to

```c#
                return containingMember switch
                {
                    MethodDeclarationSyntax method =&gt; TryGetReturnType(method.ReturnType, method.Modifiers, onYield),
                    LocalFunctionStatementSyntax localFunction =&gt; TryGetReturnType(localFunction.ReturnType, localFunction.Modifiers, onYield),
                    PropertyDeclarationSyntax property =&gt; TryGetReturnType(property.Type, modifiers: default, onYield),
                    _ =&gt; null,
                };
```</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36876</IssueID>
    <RepoID>1</RepoID>
    <Title>'Convert switch statement to expression' breaks code.</Title>
    <Description>Conversion on:

```c#
                long target;
                try
                {
                    switch (origin)
                    {
                        case SeekOrigin.Begin:
                            target = offset;
                            break;

                        case SeekOrigin.Current:
                            target = checked(offset + position);
                            break;

                        case SeekOrigin.End:
                            target = checked(offset + length);
                            break;

                        default:
                            throw new ArgumentOutOfRangeException(nameof(origin));
                    }
                }
                catch (OverflowException)
                {
                    throw new ArgumentOutOfRangeException(nameof(offset));
                }

                if (target &lt; 0)
                {
                    throw new ArgumentOutOfRangeException(nameof(offset));
                }
```

Produced:

```c#
                try
                {
                    var target = origin switch
                    {
                        SeekOrigin.Begin =&gt; offset,

                        SeekOrigin.Current =&gt; checked(offset + position),

                        SeekOrigin.End =&gt; checked(offset + length),

                        _ =&gt; throw new ArgumentOutOfRangeException(nameof(origin)),
                    };
                }
                catch (OverflowException)
                {
                    throw new ArgumentOutOfRangeException(nameof(offset));
                }

                if (target &lt; 0)
                {
                    throw new ArgumentOutOfRangeException(nameof(offset));
                }
```</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36875</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix IntelliCode-related Completion Tests</Title>
    <Description>Fixing up a mis-merge.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36874</IssueID>
    <RepoID>1</RepoID>
    <Title>Should we disable "name can be simplified" for Roslyn IDE for usages of `this.`</Title>
    <Description>Right now there are several thousand messages in the IDE code that `name can be simplified` because of hte usage of `this.Foo` (which could be converted to `Foo`).  

I don't actually this this is warranted.  I think it's reasonable for `this` to be in the code for added clarity (i.e. i'm accessing some instance property, not some static member or potentially a type somewhere).

Should we disable/change this to be permissive for IDE code?

I'm ok with any decision made here.  But i will want us to actually make our code consistent with the rule if the severity is not 'none' since this fills my message list with literally thousands of messages.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>02/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36873</IssueID>
    <RepoID>1</RepoID>
    <Title>Another thousand cleanup suggestions in IDE</Title>
    <Description>
    </Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36872</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing "CS8656: Call to non-readonly member from a 'readonly' member results in an implicit copy of 'this'" warning on pattern-based indexers usage</Title>
    <Description>**Version Used**: 

master branch 06/28/2019

**Steps to Reproduce**:

Compile the following code:
```c#
struct S {
    public int Count =&gt; 0;
    public readonly int this[int index] =&gt; 42;
    
    public readonly void M() {
        var t = this[^1]; // missing CS8656
    }
}

struct S2 {
    public int Length =&gt; 0;
    public /*readonly*/ int Slice(int a, int b) =&gt; 1;
    
    public readonly void M() {
        var t = this[..]; // missing CS8656
    }
}

namespace System {
  public struct Index {
      public Index(int index, bool fromEnd) { }
      public int GetOffset(int length) =&gt; 0;
  }
    
  public struct Range {
      public Range(Index start, Index end) { }
      public Index Start =&gt; default;
      public Index End =&gt; default;
  }
}
```

**Expected Behavior**:

Two compiler warnings CS8656 at indexer invocations.

**Actual Behavior**:

No warnings.

p.s. `readonly` state of synthesized pattern-based indexer must be the `&amp;&amp;` combination of `readonly` states of the `Count`/`Length` properties and `int` indexer/`Slice()` methods involved in pattern.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36871</IssueID>
    <RepoID>1</RepoID>
    <Title>Reintroduce sequence diagrams generation from c# code</Title>
    <Description>&lt;p&gt;This was part of previous Visual Studio versions and is key to understand/document/share/communicate about existing flows and potential optimizations.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/612434/reintroduce-sequence-diagrams-generation-from-c-co.html
VSTS ticketId: 927465_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/19/2019, 00:40 AM (9 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36870</IssueID>
    <RepoID>1</RepoID>
    <Title>Namespace info for class in tooltip</Title>
    <Description>&lt;p&gt;In a code you can have constructor call:&lt;/p&gt; &lt;pre&gt;var obj = new SomeClass()
&lt;/pre&gt;&lt;p&gt;When you hover mouse over class name, you see tooltip: &amp;quot;SomeClass.SomeClass(args)&amp;quot;. Obviously unnecessary name duplicate and no info about namespace. It could be more informative to see tooltip like:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Namespace1.Namespace2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;constructor SomeClass(args)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Then namespace do not disturb you from reading arguments and we eliminate reading of class name twice (it annoys, esp. with variable width font). Frequently you have in code just constructor calls, so you have no way to quickly get class' namespace.&lt;/p&gt; &lt;p&gt;One more improvement is to show &amp;quot;standard&amp;quot; namespaces of .NET in different color (in tooltip).&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/609058/namespace-info-for-class-in-tooltip.html
VSTS ticketId: 922875_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/17/2019, 01:16 AM (11 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36869</IssueID>
    <RepoID>1</RepoID>
    <Title>Turn on nullable semantic analysis by default</Title>
    <Description>Commit 1 ties the nullable semantic analysis to whether or not we will run the nullable walker during compilation.
Commit 2 fixes some DebugVerifier asserts caught after the verifier is run over more code.
Commit 3 updates the method compiler to not use the rewritten method body for emit.
Commit 4 adjusts IOperation to correctly retrieve anonymous properties, and adds a test. Caught by the debug bootstrap compiler.
Commit 5 adjust the BoundAnonymousObjectCreation handling and fixes https://github.com/dotnet/roslyn/issues/35044, thanks @cston for pointing out the correct way to do the comparisons.

Fixes https://github.com/dotnet/roslyn/issues/35374.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>05/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36868</IssueID>
    <RepoID>1</RepoID>
    <Title>Supply formatting options to control location of `:` in multi-line base-lists or constructor initializers</Title>
    <Description>From https://github.com/dotnet/roslyn/pull/36867

&gt; Can you please open an issue for this? I think it would also be nice to have a similar formatting rule for specifying BaseList of a type declaration.

We should have a way to allow users to specify where the `:` should go if an inheritance list is wrapped or a this()/base() list is wrapped.  For example, in Roslyn the vast majority (95%+ of this/base calls include the `:` with the `this/base` if `this/base` is wrapped).

There should be options to help enforce this, which woudl then cause warnings for violations by the formatting anlayzer.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36867</IssueID>
    <RepoID>1</RepoID>
    <Title>Format this()/base() calls uniformly in the IDE.</Title>
    <Description>It's always been an annoyance of mine how these calls are inconsistent across the IDE.  I did a check to see what the numbers were like, and it was about 350 (across the entire codebase, around 150 in the IDE) of the form:

```c#
public Foo(...) :
    this(...)
{
}
```

And about *16,000* of the form:

```c#
public Foo(...)
    : this(...)
{
}
```

That's less than 3% of the code uses the first form.  So this PR just makes the IDE codebase consistent here on this one style.

Note: in the future, i'd love a formatting rule that checked fort his (and would be happy to contribute it).  that way you'd get a nice squigle if you didn't write it either on the same line, or in this form.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36866</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove reflection now that IRecursivePatternOperation is public</Title>
    <Description>See https://github.com/dotnet/roslyn/pull/36709#discussion_r296939885

We should remove this IDE reflection based hack that was added for this API: http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Extensions/OperationExtensions.cs,64

`case IOperation iop when iop.GetType().GetInterfaces().Any(i =&gt; i.Name == "IRecursivePatternOperation"):`

/cc @mavasani 
</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36865</IssueID>
    <RepoID>1</RepoID>
    <Title>.editorconfig not respecting object initializer rule</Title>
    <Description>**Version Used**: 
Visual Studio 16.1.4

**Steps to Reproduce**:

I have my `.editorconfig` set up for my project, and it mostly works well, but I've seen a problem where it doesn't seem to recognize my object initializer preference. This feels similar to #30529, but I'm still having the problem even though that was marked as resolved.

In my `.editorconfig`, I have the following settings (among more, which I can post if needed to see if there's something else overriding it):

```editorconfig
csharp_new_line_before_open_brace = all
csharp_new_line_before_members_in_object_initializers = true
```

**Expected Behavior**:

I want my object intialization to look like this: 

```csharp
var obj = new MyObject
{
    Prop1 = 7373,
    Prop2 = "Hello world",
};
```
**Actual Behavior**:

When I run the code cleanup, it reformats the object initialization to:

```csharp
var obj = new MyObject {
    Prop1 = 7373,
    Prop2 = "Hello world",
};
```</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36864</IssueID>
    <RepoID>1</RepoID>
    <Title>use JTF to avoid hang on OperationProgress API</Title>
    <Description>OperationProgress API we use to detect whether a solution is fully loaded calls into various providers that attribute to solution load. and some of them, unfortunately, require UI thread to proceed. 

according to the platform team, it is almost impossible to get rid of those restrictions since one of those providers could be a legacy component which we might not even have a control on it.

so now OperationProgress API (Workspace Status API is our abstraction) is only allowed to be used with await or JTF.Run on UI thread, we can never call it with "Wait" on UI thread otherwise, we can get into a deadlock.

this goes over all usage of OperationProgress API and uses JTF when needed.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>03/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36863</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190703.19
- **Date Produced**: 7/3/2019 10:58 PM
- **Commit**: 733f8297b68dd824044a77d955e62305b9dc43d5
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19353.19

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)













</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>11/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36862</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36861</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>03/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36860</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36859</IssueID>
    <RepoID>1</RepoID>
    <Title>"Tables" in code</Title>
    <Description>Hi All,
This is really more of a C# formatting question rather than a C# language question.  If this isn't the right place to discuss this, I'll be happy to move the question to the recommended location.  If you are reading this via email, I'm sure the formatting won't be right.  Please make sure to look at this through the web.

Often times when I'm writing code, I have "tables" where I define things.  A table might look like this:
````
            var T1 = new Dictionary&lt;BillState, int&gt;() {
                [BillState.Awaiting_Approval     ] = 0001,
                [BillState.Awaiting_Payment      ] = 0002,
                [BillState.Deleted               ] = 0010,
                [BillState.Draft                 ] = 0310,
                [BillState.Paid                  ] = 1234,
                [BillState.Void                  ] = 9999,
            };
            
````
or this:
````
var T2 = new List&lt;CustomObject&gt;() {
   {0001, true , Enum.Value1},
   {1001, false, Enum.Value2},
   {3001, true , Enum.Value3},
};
````

You'll notice that I'm trying to use formatting to make the code much more readable and easier to edit (I can just press the insert key on my keyboard and type over a value or use control+alt+shift to select a region and type over it).

The challenge is, when I press semicolon, my "table" gets formatted into something much less readable like this:
````
var T1 = new Dictionary&lt;BillState, int&gt;() {
                [BillState.Awaiting_Approval] = 0001,
                [BillState.Awaiting_Payment] = 0002,
                [BillState.Deleted] = 0010,
                [BillState.Draft] = 0310,
                [BillState.Paid] = 1234,
                [BillState.Void] = 9999,
            };
````

is there a way to tell VS/C# to respect whitespace in table-like structures?
</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36858</IssueID>
    <RepoID>1</RepoID>
    <Title>crash on VB signature help</Title>
    <Description>&lt;Obsolete(MefConstruction.ImportingConstructorMessage, /**/ error:= true)&gt;

invoke signature help on /**/ explicitly.

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller.Session.GetSelectedItem(Model currentModel, SignatureHelpItems items, ISignatureHelpProvider provider, Boolean&amp; userSelected)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller.Session.&lt;ComputeModelInBackgroundAsync&gt;d__4.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&lt;ComputeModelInBackgroundAsync&gt;d__4.MoveNext()
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(System.ExceptionArgument, System.ExceptionResource)
   at System.Collections.Generic.List`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].get_Item(Int32)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session.GetSelectedItem(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpItems, Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider, Boolean ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&lt;ComputeModelInBackgroundAsync&gt;d__4.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&lt;ComputeModelInBackgroundAsync&gt;d__4, Microsoft.CodeAnalysis.EditorFeatures, Version=3.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ComputeModelInBackgroundAsync&gt;d__4 ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session.ComputeModelInBackgroundAsync(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider&gt;, Microsoft.VisualStudio.Text.SnapshotPoint, Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.DisconnectedBufferGraph, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&lt;&gt;c__DisplayClass3_0.&lt;ComputeModel&gt;b__0(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ModelComputation`1+&lt;&gt;c__DisplayClass17_0[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;ChainTaskAndNotifyControllerWhenFinished&gt;b__0(System.Threading.Tasks.Task`1&lt;System.__Canon&gt;)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass15_0`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWithFromAsync&gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36857</IssueID>
    <RepoID>1</RepoID>
    <Title>[System.ArgumentException] "No C#-Symbol.\r\nParametername: typeArguments"</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Professional 2019 Preview
Version 16.2.0 Preview 3.0
German Language

**Steps to Reproduce**:
1.  Open large code file
2.  Try to write a lambda inside a `Linq` Expression inside a object initializer

```csharp
IEnumerable&lt;MyListObject&gt; mylist;

// many code lines

var test = new TestObject
{
    MyProperty = mylist.Max(found =&gt; found  // &lt;-- crash here
}
```

**Expected Behavior**:
Don't crash, and show completion

**Actual Behavior**:
 Crash on completion on the lambda property or after the lambda arrow
and restart Visual Studio

**Message**:
"Kein C#-Symbol.\r\nParametername: typeArguments"

**Stack Trace (with VS attach process)**
```
   bei Microsoft.CodeAnalysis.CSharp.Symbols.SymbolExtensions.EnsureCSharpSymbolOrNull[TSource,TDestination](TSource symbol, String paramName) in /_/src/Compilers/CSharp/Portable/Symbols/SymbolExtensions.cs: Zeile336
   bei Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol.Microsoft.CodeAnalysis.IMethodSymbol.Construct(ITypeSymbol[] arguments) in /_/src/Compilers/CSharp/Portable/Symbols/MethodSymbol.cs: Zeile1217
   bei Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.Instantiate(IMethodSymbol method, IList`1 invocationTypes) in /_/src/Workspaces/CSharp/Portable/LanguageServices/CSharpTypeInferenceService.TypeInferrer.cs: Zeile623
   bei Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.&lt;&gt;c__DisplayClass21_0.&lt;InferTypeInArgument&gt;b__2(IMethodSymbol m) in /_/src/Workspaces/CSharp/Portable/LanguageServices/CSharpTypeInferenceService.TypeInferrer.cs: Zeile564
   bei System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
   bei System.Collections.Generic.List`1..ctor(IEnumerable`1 collection) in f:\dd\ndp\clr\src\BCL\system\collections\generic\list.cs: Zeile99
   bei System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   bei Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.InferTypeInArgument(Int32 index, IEnumerable`1 methods, ArgumentSyntax argumentOpt) in /_/src/Workspaces/CSharp/Portable/LanguageServices/CSharpTypeInferenceService.TypeInferrer.cs: Zeile578
   bei Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.InferTypeInInvocationExpression(InvocationExpressionSyntax invocation, Int32 index, ArgumentSyntax argumentOpt) in /_/src/Workspaces/CSharp/Portable/LanguageServices/CSharpTypeInferenceService.TypeInferrer.cs: Zeile464
   bei Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.InferTypeInArgument(ArgumentSyntax argument, Nullable`1 previousToken) in /_/src/Workspaces/CSharp/Portable/LanguageServices/CSharpTypeInferenceService.TypeInferrer.cs: Zeile283
   bei Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.InferTypesWorker_DoNotCallDirectly(SyntaxNode node) in /_/src/Workspaces/CSharp/Portable/LanguageServices/CSharpTypeInferenceService.TypeInferrer.cs: Zeile184
   bei Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService.AbstractTypeInferrer.InferTypes(SyntaxNode expression, Boolean filterUnusable) in /_/src/Workspaces/Core/Portable/LanguageServices/TypeInferenceService/AbstractTypeInferenceService.AbstractTypeInferrer.cs: Zeile51
   bei Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.InferTypeInAnonymousFunctionExpression(AnonymousFunctionExpressionSyntax anonymousFunction) in /_/src/Workspaces/CSharp/Portable/LanguageServices/CSharpTypeInferenceService.TypeInferrer.cs: Zeile1555
   bei Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.InferTypeInLambdaExpression(LambdaExpressionSyntax lambdaExpression, Nullable`1 previousToken) in /_/src/Workspaces/CSharp/Portable/LanguageServices/CSharpTypeInferenceService.TypeInferrer.cs: Zeile1548
   bei Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.InferTypesWorker_DoNotCallDirectly(Int32 position) in /_/src/Workspaces/CSharp/Portable/LanguageServices/CSharpTypeInferenceService.TypeInferrer.cs: Zeile244
   bei Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService.InferTypes(SemanticModel semanticModel, Int32 position, String nameOpt, CancellationToken cancellationToken) in /_/src/Workspaces/Core/Portable/LanguageServices/TypeInferenceService/AbstractTypeInferenceService.cs: Zeile81
   bei Microsoft.CodeAnalysis.Shared.Extensions.ITypeInferenceServiceExtensions.InferType(ITypeInferenceService typeInferenceService, SemanticModel semanticModel, Int32 position, Boolean objectAsDefault, CancellationToken cancellationToken) in /_/src/Workspaces/Core/Portable/Shared/Extensions/ITypeInferenceServiceExtensions.cs: Zeile88
   bei Microsoft.CodeAnalysis.CSharp.Completion.Providers.EnumAndCompletionListTagCompletionProvider.&lt;ProvideCompletionsAsync&gt;d__1.MoveNext() in /_/src/Features/CSharp/Portable/Completion/CompletionProviders/EnumAndCompletionListTagCompletionProvider.cs: Zeile76
```


</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36856</IssueID>
    <RepoID>1</RepoID>
    <Title> csc.exe crash when I use System.Text.Json.Serialization</Title>
    <Description>**Version Used**: 
dotnet core 3.0 preview6
vs2019 preview  version 16.2.0 preview3.0

crash code 
``` csharp
  class Program
    {
        static void Main(string[] args)
        {
            Console.ReadLine();
        }

        private static async Task Serialize()
        {
            System.Text.Json.Serialization.JsonSerializer.Parse&lt;string&gt;(await TestAsync());
        }

        private static Task&lt;byte[]&gt; TestAsync()
        {
            return null;
        }
    }
```
Expected Behavior:
Expected a successfully compiled program

Actual Behavior:
Crashes with an hard error and exitcode -2146232797

The stacktrace :
``` none
&gt; Application: csc.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.NotImplementedException: The method or operation is not implemented.
   at Microsoft.CodeAnalysis.CSharp.BoundNode.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitReadOnlySpanFromArray(BoundReadOnlySpanFromArray node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitExpressionStatement(BoundExpressionStatement node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitSequencePoint(BoundSequencePoint node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Analysis.ScopeTreeBuilder.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Analysis.ScopeTreeBuilder.Build()
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Analysis.ScopeTreeBuilder.Build(BoundNode node, MethodSymbol topLevelMethod, HashSet`1 methodsConvertedToDelegates, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Analysis.Analyze(BoundNode node, MethodSymbol method, Int32 topLevelMethodOrdinal, MethodSymbol substitutedSourceMethod, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, ArrayBuilder`1 closureDebugInfo, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Rewrite(BoundStatement loweredBody, NamedTypeSymbol thisType, ParameterSymbol thisParameter, MethodSymbol method, Int32 methodOrdinal, MethodSymbol substitutedSourceMethod, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, HashSet`1 assignLocals)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.BoundNode.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitReadOnlySpanFromArray(Microsoft.CodeAnalysis.CSharp.BoundReadOnlySpanFromArray)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitSequencePoint(Microsoft.CodeAnalysis.CSharp.BoundSequencePoint)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter+Analysis+ScopeTreeBuilder.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter+Analysis+ScopeTreeBuilder.Build()
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter+Analysis+ScopeTreeBuilder.Build(Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol&gt;, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter+Analysis.Analyze(Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Boolean, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator ByRef, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
```</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36855</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix code actions projects</Title>
    <Description>Fix the server handlers to respond to updates in the LSP package.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36854</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle synthesized top-level types in EnC symbol matcher</Title>
    <Description>The symbol matcher does not handle embedded attributes that the compiler emits to support features like `ref readonly`, nullable reference types, etc. The matcher needs to be aware of these attributes so that we can perform EnC on code that emits them.

This change comprises of several refactoring-only commits that clean up and simplify related code,
fix to https://github.com/dotnet/roslyn/issues/36926 and finally changes to symbol matcher to be able to match synthesized top-level types in potentially synthesized namespaces.

Also remove rude edits related to using `ref readonly` returns, `in` parameters and `ref` structs.
</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36853</IssueID>
    <RepoID>1</RepoID>
    <Title>Throw exception in PlaceCaret</Title>
    <Description>
    </Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>02/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36852</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposal: Support for static classes to implement from interfaces</Title>
    <Description>I have this issue where I need a static class to implement from an interface. Appearently the IL has support for it but C# compiler / language does not.

```c#
public class Program {
  public static void Main(string[] argv) {
    LittleEndian.WriteUInt(new MemoryStream(), (ushort)2);
  }
}

public interface Endianness {
  void WriteUInt16(Stream stream, ushort value);
}
public class LittleEndian : Endianness {
  public void WriteUInt16(Stream stream, ushort value) {
    stream.WriteByte((byte)(value &amp; 0xff));
    stream.WriteByte((byte)((value &gt;&gt; 8) &amp; 0xff));
  }
}
```</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36851</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36850</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36849</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36848</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36847</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36846</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36845</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/06/2019</CreatedDate>
    <ClosedDate>29/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36844</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify snapshots are being created for all relevant BoundNodes</Title>
    <Description>Currently we miss some BoundNodes when creating snapshots. We need to verify that we're creating snapshots for everything that we should be. Currently, the known list of nodes is:
* `BoundArrayInitialization`
* `BoundLambda`
* `BoundConversion`
* Patterns
* `BoundMethodGroup`
* `BoundTypeExpression`

These nodes are likely being visited directly by a visitor and not passing through the standard mechanisms, and so we're not creating a snapshot for the. Re-enable the assert in `NullableWalker.DebugVerifier.Visit`.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36843</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData.json</Title>
    <Description>
    </Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36842</IssueID>
    <RepoID>1</RepoID>
    <Title>Bump master to 3.3.0-beta2</Title>
    <Description>
    </Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36841</IssueID>
    <RepoID>1</RepoID>
    <Title>Small Compiler Refactors</Title>
    <Description>Did a couple of small refactors as separate commits.

Commit 1: Unify our two EnumerableExtensions static classes. Fixes https://github.com/dotnet/roslyn/issues/36590
Commit 2: Add DebuggerHidden or DebuggerStepThrough to more visitor boilerplate methods to allow for easier debugging.

@jcouv this is what I mentioned in Teams earlier.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36840</IssueID>
    <RepoID>1</RepoID>
    <Title>cannot build latest master</Title>
    <Description>I get this error:

```
1&gt;------ Build started: Project: Microsoft.CodeAnalysis, Configuration: Debug Any CPU ------
1&gt;C:\Program Files\dotnet\sdk\3.0.100-preview6-012264\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets(257,7): error MSB4064: The "DesignTimeBuild" parameter is not supported by the "ResolvePackageAssets" task. Verify the parameter exists on the task, and it is a settable public instance property.
1&gt;C:\Program Files\dotnet\sdk\3.0.100-preview6-012264\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets(234,5): error MSB4063: The "ResolvePackageAssets" task could not be initialized with its input parameters.
1&gt;Done building project "Microsoft.CodeAnalysis.csproj" -- FAILED.
2&gt;------ Build started: Project: Microsoft.CodeAnalysis.Workspaces, Configuration: Debug Any CPU ------
2&gt;C:\Program Files\dotnet\sdk\3.0.100-preview6-012264\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets(257,7): error MSB4064: The "DesignTimeBuild" parameter is not supported by the "ResolvePackageAssets" task. Verify the parameter exists on the task, and it is a settable public instance property.
2&gt;C:\Program Files\dotnet\sdk\3.0.100-preview6-012264\Sdks\Microsoft.NET.Sdk\targets\Microsoft.PackageDependencyResolution.targets(234,5): error MSB4063: The "ResolvePackageAssets" task could not be initialized with its input parameters.
2&gt;Done building project "Microsoft.CodeAnalysis.Workspaces.csproj" -- FAILED.
```

I have cleaned and restored.  I am on:

![image](https://user-images.githubusercontent.com/4564579/60301020-37a4f100-98e5-11e9-8cf7-2b8238845868.png)
</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36839</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0055 tries to move a ternary operator a strange place</Title>
    <Description>This line:

https://github.com/dotnet/roslyn/blob/e65f0cb2a986fc7176e5221e31521c804135c88b/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol_ImplementationChecks.cs#L1051

is flagged by IDE0055. When applying the fix it wants to outdent that : a lot, which doesn't make any sense at all.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36838</IssueID>
    <RepoID>1</RepoID>
    <Title>Pattern matching is giving IDE0055 formatting around operators</Title>
    <Description>In code like this:

https://github.com/dotnet/roslyn/blob/e65f0cb2a986fc7176e5221e31521c804135c88b/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker.cs#L1401

We're saying there's something wrong with the space between the } and the &amp;&amp; which doesn't really make sense.

Full list of issues I think:

    F:\Projects\Roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(1401,118): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Compilers\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.csproj]
    F:\Projects\Roslyn\src\Compilers\CSharp\Portable\Binder\DecisionDagBuilder.cs(1035,115): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Compilers\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.csproj]
    F:\Projects\Roslyn\src\Compilers\CSharp\Portable\Binder\DecisionDagBuilder.cs(1036,112): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Compilers\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.csproj]

FYI to @heejaechang and @sharwell.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36836</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix header reading for Narrator on Pull Members Up dialog</Title>
    <Description>With a StackPanel in the custom header, Narrator reads the StackPanel class name. We could implement [ITableItemProvider](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.automation.provider.itableitemprovider) with a custom user control to correctly handle this, or just use a `CheckBox.Content` property to display the text. Now Narrator correctly reads the checkbox content when the header value needs to be read. </Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36835</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0055 flagging on uses of pattern matching with expression bodied members</Title>
    <Description>In Roslyn.sln right now there's a bunch of these:

	F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\CodeGeneration\CSharpSyntaxGenerator.cs(1591,9): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Workspaces.csproj]
	F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\CodeGeneration\CSharpSyntaxGenerator.cs(1592,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Workspaces.csproj]
	F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\CodeGeneration\CSharpSyntaxGenerator.cs(1593,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Workspaces.csproj]
	F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\CodeGeneration\CSharpSyntaxGenerator.cs(1594,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Workspaces.csproj]
	F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\CodeGeneration\CSharpSyntaxGenerator.cs(1595,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Workspaces.csproj]
	F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\CodeGeneration\CSharpSyntaxGenerator.cs(1596,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Workspaces.csproj]
	F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\CodeGeneration\CSharpSyntaxGenerator.cs(1597,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Workspaces.csproj]
	F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\CodeGeneration\CSharpSyntaxGenerator.cs(1598,9): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Workspaces\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Workspaces.csproj]
	F:\Projects\Roslyn\src\Features\CSharp\Portable\MisplacedUsingDirectives\MisplacedUsingDirectivesCodeFixProvider.cs(249,9): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Features\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Features.csproj]
	F:\Projects\Roslyn\src\Features\CSharp\Portable\MisplacedUsingDirectives\MisplacedUsingDirectivesCodeFixProvider.cs(250,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Features\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Features.csproj]
	F:\Projects\Roslyn\src\Features\CSharp\Portable\MisplacedUsingDirectives\MisplacedUsingDirectivesCodeFixProvider.cs(251,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Features\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Features.csproj]
	F:\Projects\Roslyn\src\Features\CSharp\Portable\MisplacedUsingDirectives\MisplacedUsingDirectivesCodeFixProvider.cs(252,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Features\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Features.csproj]
	F:\Projects\Roslyn\src\Features\CSharp\Portable\MisplacedUsingDirectives\MisplacedUsingDirectivesCodeFixProvider.cs(253,9): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Features\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.Features.csproj]
	F:\Projects\Roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(82,9): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Features\Core\Portable\Microsoft.CodeAnalysis.Features.csproj]
	F:\Projects\Roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(83,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Features\Core\Portable\Microsoft.CodeAnalysis.Features.csproj]
	F:\Projects\Roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(84,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Features\Core\Portable\Microsoft.CodeAnalysis.Features.csproj]
	F:\Projects\Roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(85,13): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Features\Core\Portable\Microsoft.CodeAnalysis.Features.csproj]
	F:\Projects\Roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(86,9): warning IDE0055: Fix formatting [F:\Projects\Roslyn\src\Features\Core\Portable\Microsoft.CodeAnalysis.Features.csproj]

An example is here:

https://github.com/dotnet/roslyn/blob/e65f0cb2a986fc7176e5221e31521c804135c88b/src/Features/CSharp/Portable/MisplacedUsingDirectives/MisplacedUsingDirectivesCodeFixProvider.cs#L247-L253

The analyzer is firing I guess insisting that the code shouldn't be indented so much. Ignoring what the style is, I couldn't actually *fix* it and make the warning go away; the code fix also didn't really work.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>31/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36834</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix formatting issues being flagged by the analyzer</Title>
    <Description>This doesn't fix all the issues: I'm filing bugs for the other ones where things seem broken.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36833</IssueID>
    <RepoID>1</RepoID>
    <Title>Wire GetSpeculativeTypeInfo with nullability information</Title>
    <Description>@dotnet/roslyn-compiler @chsienki for review. /cc @jasonmalinowski @ryzngard 

Fixes https://github.com/dotnet/roslyn/issues/35037</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>29/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36832</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullchecked Lambdas and Local Functions + Constructor Tests</Title>
    <Description>
    </Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>03/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36831</IssueID>
    <RepoID>1</RepoID>
    <Title>[WIP] Allow completion to be triggered from background thread</Title>
    <Description>_PR For Personal Review Only_

Experiment with initializing completion on the worker thread</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36830</IssueID>
    <RepoID>1</RepoID>
    <Title>Debug.Assert() does not change tracked nullability of field</Title>
    <Description>```C#
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

class C&lt;T&gt;
{
    [AllowNull, MaybeNull] T F = default!;

    void M()
    {
        Debug.Assert(F != null);
        F.ToString();
    }
}
```
```
(11,9): warning CS8602: Dereference of a possibly null reference.
```
cc @safern

Relates to https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-15.md (attributes for nullability analysis)</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36829</IssueID>
    <RepoID>1</RepoID>
    <Title>[IOperation] Provide an abstraction for invocations to external methods</Title>
    <Description>Hello, I will provide an example of something that I can't analyze using the IOperation abstraction today.

Source code under analysis:
```
static void Main(string[] args)
{
   int i = Method_Name(...);            
}

[DllImport("[Name]", CallingConvention = CallingConvention.Cdecl)]
public static extern int Method_Name(...);
```

When you want to get the IOperation instance from the invocation syntax expression you get an Invalid Operation. Even more, you can't get the declared symbol. 

The most that I can do today is try to get the symbol info, and I get the following information:
* Symbol: null
* CandidateSymbol: Method System.Int32 MyNamespace.Program.Method_Name(...)
* CandidateReason: OverloadResolutionFailure

I suppose that is not possible to obtain the real symbol due to the dynamic behavior of this. 
But I guess if we can do something more than providing an Invalid Operation.
Probably, we can consider adding another abstraction like ExtenalInvocationOperation.

Thanks in advance for your feedback. 
Regards, 
Alex. 
</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36828</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36827</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36826</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36825</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36824</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36823</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36822</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36821</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36820</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36819</IssueID>
    <RepoID>1</RepoID>
    <Title>Please make C# editor capable of pinning section headers</Title>
    <Description>See https://twitter.com/jckarter/status/1140131108564062213 for an explanation.

</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36818</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix couple of false positives in unused parameter analyzer</Title>
    <Description>1. Do not flag parameters whose name has not yet been written (empty string). Fixes #36817
2. Do not flag parameters of partial method definition part. Fixes #36816</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36817</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 Remove Unused Parameter reported for code I'm still working on</Title>
    <Description>VSF_TYPE_MARKDOWNI'm adding a new parameter to a method that already exists. As I'm typing the type of the parameter, VS immediately suggests I should fix the &amp;quot;error&amp;quot; of having an unused parameter by suppressing the IDE0060 code warning. However, in this scenario I haven't even typed in the parameter's *name* yet, so there's no point warning me about an unused parameter because the code isn't even valid!

Please see the screenshot where I've typed in `IMemoryCache` as the type name for my constructor parameter, but I haven't typed in the parameter name. The suppression suggestion shouldn't show up until I at least have a variable name.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/586149/ide0060-remove-unused-parameter-reported-for-code.html
VSTS ticketId: 900624_
_These are the original issue comments:_

Visual Studio Feedback System on 5/29/2019, 01:18 AM (29 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 5/30/2019, 07:50 PM (27 days ago): &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/ . We'll keep you posted on any updates to this feedback.&lt;/p&gt;

Visual Studio Feedback System on 6/10/2019, 06:19 PM (16 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>29/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36816</IssueID>
    <RepoID>1</RepoID>
    <Title>False positive of IDE0060 on a partial method with parameters</Title>
    <Description>VSF_TYPE_MARKDOWNWhen defining a partial method such as 

```
    Partial Private Sub ShowIdeMessage(msg As String)
    End Sub
```
IDE0060 is shown in the messages with the suggestion to remove the parameter
This should not happen because the parameter can be needed in the real implementation.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/448246/false-positive-of-ide0060-on-a-partial-method-with.html
VSTS ticketId: 788478_
_These are the original issue comments:_

Johan Gillis on 2/11/2019, 01:21 AM (136 days ago): &lt;p&gt;another false positive:&lt;/p&gt;&lt;p&gt;following code gives: IDE0060 Remove unused parameter 'xyz' &lt;/p&gt;&lt;pre&gt;    Private Function ExtractInfo(xyz As XDocument) As String
        Dim txt = xyz.Root.&amp;lt;ad&amp;gt;.&amp;lt;title&amp;gt;.&amp;lt;tx&amp;gt;.Value &amp; vbCrLf
        Return txt
    End Function
&lt;br&gt;&lt;/pre&gt;

Visual Studio Feedback System on 2/19/2019, 06:58 PM (127 days ago): &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact.See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq  . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/  . We'll keep you posted on any updates to this feedback.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>29/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36815</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190626.44
- **Date Produced**: 6/27/2019 6:59 AM
- **Commit**: d39a62deaf3aa4e03c0b7dadc320a517e0e00187
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19326.44

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36814</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpGenerateVariableCodeFixProvider/GenerateMethodCodeFixProvider crash with `ArgumentException : Not a C# symbol.`</Title>
    <Description>**Version Used**: 
Compiler version: '3.2.0-beta3-19312-05 (5905d757)'. Language version: default.
VS2019 16.2preview3(used to be work in 16.1.3)

**Steps to Reproduce**:
The same Exception message as #36702, but seems totally different stack. Not sure if it's related.

1. Type the below incompleted code
```cs
System.Runtime.CompilerServices.StrongBox&lt;int&gt; x = null;
//or any incompleted code(not exists field) here. Change int to var not crashes.
int val = System.Threading.Volatile.Read(ref x.Va);//Value
```

2. Put mouse or cursor near `x.Va`

**Expected Behavior**:
Not crash, just compile failed with some incompleted code.

**Actual Behavior**:
see CSharpGenerateVariableCodeFixProvider/GenerateMethodCodeFixProvider crash.

```cs
System.ArgumentException : Not a C# symbol.
Parameter name: typeArguments
   at Microsoft.CodeAnalysis.CSharp.Symbols.SymbolExtensions.EnsureCSharpSymbolOrNull[TSource,TDestination](TSource symbol,String paramName)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol.Microsoft.CodeAnalysis.IMethodSymbol.Construct(ITypeSymbol[] arguments)
   at Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.Instantiate(IMethodSymbol method,IList`1 invocationTypes)
   at Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.&lt;&gt;c__DisplayClass21_0.&lt;InferTypeInArgument&gt;b__2(IMethodSymbol m)
   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.InferTypeInArgument(Int32 index,IEnumerable`1 methods,ArgumentSyntax argumentOpt)
   at Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.InferTypeInInvocationExpression(InvocationExpressionSyntax invocation,Int32 index,ArgumentSyntax argumentOpt)
   at Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.InferTypeInArgument(ArgumentSyntax argument,Nullable`1 previousToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpTypeInferenceService.TypeInferrer.InferTypesWorker_DoNotCallDirectly(SyntaxNode node)
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService.AbstractTypeInferrer.InferTypes(SyntaxNode expression,Boolean filterUnusable)
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService.InferTypes(SemanticModel semanticModel,SyntaxNode expression,String nameOpt,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.GenerateMember.GenerateVariable.AbstractGenerateVariableService`3.State.DetermineFieldType(SemanticDocument semanticDocument,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.GenerateMember.GenerateVariable.AbstractGenerateVariableService`3.State.TryInitializeSimpleName(TService service,SemanticDocument semanticDocument,TSimpleNameSyntax simpleName,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateVariable.AbstractGenerateVariableService`3.State.TryInitializeAsync[TService,TSimpleNameSyntax,TExpressionSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateVariable.AbstractGenerateVariableService`3.State.GenerateAsync[TService,TSimpleNameSyntax,TExpressionSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateVariable.AbstractGenerateVariableService`3.GenerateVariableAsync[TService,TSimpleNameSyntax,TExpressionSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.GenerateMember.AbstractGenerateMemberCodeFixProvider.RegisterCodeFixesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```
</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36813</IssueID>
    <RepoID>1</RepoID>
    <Title>EE formatters for IntPtr and UIntPtr</Title>
    <Description>Fixes Roslyn part of https://developercommunity.visualstudio.com/content/problem/491378/vb-intptr-error-bc30657-topointer-has-a-return-typ.html</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36812</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve file structure view</Title>
    <Description>[Original DevComm feedback](https://developercommunity.visualstudio.com/idea/472007/希望添加类似resharper的-file-structure功能窗口.html?childToView=623413#comment-623413)

Edited quote:
&gt; ... Add a file structure feature similar to resharper that can view the structure of the current document. Although you can view this in the solution explorer and above the current file, navigating the current document is not very convenient, nor very intuitive.

Currently some file structure UI is provided in the Solution Explorer:
![image](https://user-images.githubusercontent.com/8293542/60225230-c0b31e00-983a-11e9-8ef4-ca3bebc569ff.png)

Another user provided specific improvements they'd like to see in this experience:

&gt; The class properties and methods displayed in solution explorer are nice but there are drawbacks :
&gt; 1. It's only shown when manually continuing to expand the tree : when opening a new file, i would love to automatically view it's structure because I use it a lot on every classes.
&gt; 2. It's very very hard to compare several file structure on a quick view : when displayed on another window, I can see similarities or difference between different file structure simply by quickly switching between file tabs. 
&gt; 3. There are not differences between what is overridden or not
&gt; 4. No file regions display : most of the time, regions are used to group methods/class.
&gt; 5. The method/properties name and type have the same color : it would be great to use the same editor colors
&gt; 6. No method/properties highlight I'm currently writing/clicking on : not mandatory but would be appreciated
&gt; 
&gt; I work a lot with very big files (more than 4000 lines and about 100 properties/methods) and I do a lot of code refactoring to try to clean up the mess.
&gt; To me, the file structure window is very important and the biggest missing thing in Visual Studio.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36811</IssueID>
    <RepoID>1</RepoID>
    <Title>Update VS editor SDK version</Title>
    <Description>New version contains completion expander support.

@ivanbasov @jinujoseph @vatsalyaagrawal </Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36810</IssueID>
    <RepoID>1</RepoID>
    <Title> Honor DoesNotReturn and DoesNotReturnIf</Title>
    <Description>Implements part of https://github.com/dotnet/roslyn/issues/35816</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36809</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36808</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36807</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36806</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36805</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36804</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 16.3P1 into features/lspSupport</Title>
    <Description>the new base LSP protocol project has been merged into 16.3P1. Manually merge 16.3P1 branch into features/lspSupport to fix merge conflicts</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36803</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 3p1 to master vs deps</Title>
    <Description>part of the snap. master-vs-deps will now mean 16.3-preview2
/cc @JoeRobich</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36802</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "use the source instead of the name to find nuget packages"</Title>
    <Description>reverts https://github.com/dotnet/roslyn/pull/35397

CC: @RikkiGibson 	@jinujoseph 	@heejaechang 	</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36801</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 16.3-preview1 to master</Title>
    <Description>part of the snap. master will now mean 16.3-preview2
/cc @JoeRobich</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36800</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC support of static local functions</Title>
    <Description>
    </Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36799</IssueID>
    <RepoID>1</RepoID>
    <Title> Skip BasicEditAndContinue tests</Title>
    <Description>Same as #36764 but merging into 16.3 p2</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36798</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip BasicEditAndContinue tests</Title>
    <Description>same as #36764 but merging into 16.3 P1</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36797</IssueID>
    <RepoID>1</RepoID>
    <Title>Debug.Assert failure in AsyncExceptionHandlerRewriter.VisitTryStatement with lock statement in async method</Title>
    <Description>`Debug.Assert()` failure in `AsyncExceptionHandlerRewriter.VisitTryStatement` compiling:
```C#
using System;
using System.Threading.Tasks;

class Program
{
    static async Task F(object o)
    {
        bool b;
        lock (o)
        {
            b = true;
        }
        try
        {
            G();
        }
        catch (Exception)
        {
            await F(o);
        }
    }

    static void G()
    {
    }
}
```</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36796</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose DocumentExtensions.IsGeneratedCode(Document, CancellationToken)</Title>
    <Description>https://github.com/dotnet/roslyn/blob/a571221b42a6166fefe2e1ad016a8af59645fd40/src/Workspaces/Core/Portable/Shared/Extensions/DocumentExtensions.cs#L194-L198

It looks like a useful helper.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36795</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge snap commit to master-vs-deps</Title>
    <Description>the signed build from this merge will go into 16.2-p4</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36794</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing "CS8656: Call to non-readonly member from a 'readonly' member results in an implicit copy of 'this'" warning on inner field method calls</Title>
    <Description>**Version Used**: 

master branch 06/26/2019

**Steps to Reproduce**:

Compile the following code:
```
struct A {
    int X;
    public void Incr() =&gt; X++;

    public readonly void Readonly() {
        Incr(); // CS8656: Call to non-readonly member 'I.Incr()' from a 'readonly' member results in an implicit copy of 'this'.
    }
}

struct B {
    A _inner;
    
    public readonly void Readonly() {
        _inner/*copy*/.Incr(); // Missing CS8656
    }
    
    public void Mutable() {
        _inner.Incr();
    }
}
```
[sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+sEFcDGMABAIJEDeAsAFBF1ECWAdsQBoDcN9RAAgMy8ALEQCSTfAgAUASiIBeAHxFW6dJ2pd6/IgjgQUAeyYAbAJ5CiAJT2GTpmRU3c6YiTPZEA9J6IBhAMoAHABsAKzBIH4QxsZEMAZETEYAtLr6RmZEYHBgwIhEAOQiAHSuUtIFRABmCAZgRBCFabZmldm5+bpQuMYwUIxMDYMMYAAOxgz4DMT4BqPmBlWFMAAWDFAFxU5EAL40exrUOATEAEKOtPRkAPrMTIjq3NvazRnmPMLW6XYOVJfORFuTHuCE8ACpZvMwZ5SuJyh5vEQALLrKDMADmfiCYWC2wOT3+vAEH2RuBgEGAxjgv223CBINhbmkj3oBwONCAA=)

**Expected Behavior**:

Compiler warning
&gt; CS8656: Call to non-readonly member 'A.Incr()' from a 'readonly' member results in an implicit copy of 'this'.

**Actual Behavior**:

No warnings, field `_inner` being copied at runtime to prevent `this` mutation.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36793</IssueID>
    <RepoID>1</RepoID>
    <Title>Flow dev16.2 to dev16.2-vs-deps</Title>
    <Description>
    </Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36792</IssueID>
    <RepoID>1</RepoID>
    <Title>Flow to master-vs-deps</Title>
    <Description>In preparation for snap</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36791</IssueID>
    <RepoID>1</RepoID>
    <Title>Update  xUnit2018 diagnostic severity</Title>
    <Description>Since we merged https://github.com/dotnet/roslyn/pull/36566, we've been seeing the following error in CI builds - "The diagnostic 'xunit2018' was given an invalid severity 'suppress' in the analyzer config file"

This updated the editorconfig to use `none` instead of `suppress`</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36790</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix couple of unit tests that started failing after #36566 merged fro…</Title>
    <Description>…m master to release\dev16.3-preview1

Not sure why the unit test failures were not caught by the merge PR, as these tests are failing consistently in CI for PRs targeting release\dev16.3-preview1</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36789</IssueID>
    <RepoID>1</RepoID>
    <Title>Bring in last compiler changes before snap</Title>
    <Description>This is the state of master at 12pm, which was the version snapped for .NET Core p7</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36788</IssueID>
    <RepoID>1</RepoID>
    <Title>"Inline temporary variable" breaks code for 'out' parameter</Title>
    <Description>**Version Used**: Visual Studio 2019 version 16.1

```
static void GetPath()
{
    DirectoryInfo root = null;
    var files = GetAllMarkdownFiles(@"C:\\temp", out root);

    string fullPath = Path.Combine(root.FullName, @"..\\file.txt");
}

private static object GetAllMarkdownFiles(string inputDirectory, out DirectoryInfo rootDirectory)
{
    throw new NotImplementedException();
}
```

Put your cursor in `root` in the first line of the GetPath() method, then select “Inline temporary variable” from the light bulb menu.

**Expected Behavior**: Code that works at run time.

**Actual Behavior**: It generates:

```
static void GetPath()
{
   DirectoryInfo root = null;
   var files = GetAllMarkdownFiles(@"C:\\temp", out root);

   string fullPath = Path.Combine(((DirectoryInfo)null).FullName, @"..\\file.txt");
}
```

`((DirectoryInfo)null).FullName` does not work.
</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36787</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Add NullableContextAttribute (#36152)"</Title>
    <Description>This reverts commit f886470244e177758ed3309de479ae8a9a27e143.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36786</IssueID>
    <RepoID>1</RepoID>
    <Title>Pull members up to base type breaks existing usages if the method is private</Title>
    <Description>VSF_TYPE_MARKDOWNHi,

The &amp;quot;Pull members up to base type&amp;quot; refactor, when the method being pulled is private, will keep its visibility and will break existing usages on the current derived type.

My expectation would be to use this refactor when I create a method in a derived type and want all derived types of a certain base type to be able to use it as well. If the method is not changed to &amp;quot;protected&amp;quot; instead of private, that doesn't happen and all the usages of that function in the current class are broken.

To repro:
1. Create a base class A and a derived class B.
2. Create a private method in class B and use it from somewhere inside that class.
3. Use the &amp;quot;Pull members up to base type&amp;quot; refactor to pull that private method up to A.
4. All usages are broken.

I'm reporting this because I would not see any other possible use for this refactor in a private method than being able to access it from all classes derived from the base, and right now I am forced to go onto the base class and manually change the visibility of the method.

Thanks,
David

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/599195/pull-members-up-to-base-type-breaks-existing-usage.html
VSTS ticketId: 911340_
_These are the original issue comments:_

Visual Studio Feedback System on 6/10/2019, 01:36 AM (16 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 6/26/2019, 09:53 AM (51 min ago): &lt;markdown&gt;&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36785</IssueID>
    <RepoID>1</RepoID>
    <Title>Delete unused experiment names added in merge.</Title>
    <Description>@sandyarmstrong pointed out these experiment names accidentally got added back in a merge somewhere.  They were removed in https://github.com/dotnet/roslyn/pull/35271</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36784</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip nullable transform for simple value types</Title>
    <Description>
    </Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36783</IssueID>
    <RepoID>1</RepoID>
    <Title>Go to definition from implementation</Title>
    <Description>VSF_TYPE_MARKDOWNHello,

The go to definition/implementation works very good except in one case: If you are at the 'implementation' of a method the 'go to definition' does not work:

Expected behaviour: Go to the definition in an interface (if any)
Observed behaviour: Go to the current implemtation (as if clicking go to implementation).

The same applies for peek at definition.

As a result there is no 'two' click method to go from a method implementation to its interface definition...

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/618939/go-to-definition-from-implementation.html
VSTS ticketId: 936445_
_These are the original issue comments:_

Visual Studio Feedback System on 6/24/2019, 08:27 PM (37 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36782</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE wrongly reports "Cast is Redundant" for an implicit conversion</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Preview 19.3, C# 7.3 (also tried 8.0 beta)

**Steps to Reproduce**:

```c#
using System;

namespace WrongRedundantCastWarning
{
	struct Flag
	{
		public Flag(int value) =&gt; this.Value = value;

		public int Value { get; }

		// This cast is wrongly reported as redundant
		public static FlagSet operator ~(Flag flag) =&gt; ~(FlagSet)flag;
	}

	struct FlagSet
	{
		public FlagSet(int value) =&gt; this.Value = value;

		public int Value { get; }

		public static implicit operator FlagSet(Flag flag) =&gt; new FlagSet(flag.Value);

		public static FlagSet operator ~(FlagSet flagSet) =&gt; new FlagSet(~flagSet.Value);
	}

	class Program
	{
		static readonly Flag One = new Flag(1);
		static readonly Flag Two = new Flag(2);

		static void Main(string[] args)
		{
			var flipped = ~Two;

			Console.WriteLine(flipped.Value);
		}
	}
}
```

The example has two types (Flag and FlagSet), with an implicit conversion defined from Flag to FlagSet.

Both types define the bitwise complement operator (~).

The implementation of Flag's bitwise complement operator invokes the implementation in FlagSet by casting itself to a FlagSet.  This cast is not redundant -- without it, no conversion takes place, and the operator just calls itself leading to StackOverflowException.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36781</IssueID>
    <RepoID>1</RepoID>
    <Title>Calling AddDocument() on a SDK-Style Project Adds a Compile Element</Title>
    <Description>**Version Used**: 
Visual Studio 2019
.NET Core 3.0, Preview 6
Referenced packages:
```
    &lt;PackageReference Include="Microsoft.Build.Locator" Version="1.2.2" /&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis" Version="3.1.0" /&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="3.1.0" /&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.Workspaces.MSBuild" Version="3.1.0" /&gt;
```
**Steps to Reproduce**:

Create a .NET Core console app with the packages listed above, and change the Program.cs file to this:
```
using Microsoft.Build.Locator;
using Microsoft.CodeAnalysis.MSBuild;
using System.Linq;
using System.Threading.Tasks;

namespace RoslynAddDocumentIssue
{
	class Program
	{
		static async Task Main(string[] args)
		{
			MSBuildLocator.RegisterDefaults();

			var workspace = MSBuildWorkspace.Create();
			var solution = await workspace.OpenSolutionAsync(args[0]);
			var project = solution.Projects.ToList()[0];
			solution = project.AddDocument("Foo.cs", "public class Foo { }").Project.Solution;

			workspace.TryApplyChanges(solution);
		}
	}
}
```

Run the application, passing in a solution with one project that uses the SDK style .csproj file.
**Expected Behavior**:
A file Foo.cs is added to the project, but nothing changes in the .csproj file
**Actual Behavior**:
The .csproj file has the following entry added:
```
  &lt;ItemGroup&gt;
    &lt;Compile Include="Foo.cs" /&gt;
  &lt;/ItemGroup&gt;
```
This works, but it's a bit annoying because SDK-style projects don't need code files listed explicitly to include them in the project. I could simply add the file to the right folder such that the project would "see" it, but then if `TryApplyChanges()` failed, the file would still exist, which would lead to an inconsistent state.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36779</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190626.2
- **Date Produced**: 6/26/2019 8:36 AM
- **Commit**: 4b3d46cc75969c4e2de5786ec2b10a430b26dd9f
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19326.2

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36778</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36777</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36776</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36775</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36774</IssueID>
    <RepoID>1</RepoID>
    <Title> [loc][Query][Roslyn] Localizability of "such_as___comma__1_comma__2_comma_etc" </Title>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
Avoid unnecessary value assignments in your code, as these likely indicate redundant value computations. If the value computation is not redundant and you intend to retain the assignment, then change the assignment target to a local variable whose name starts with an underscore and is optionally followed by an integer, such as '_', '_1', '_2', etc. These are treated as special discard symbol names.

File Name:
Features\Core\Portable\xlf\FeaturesResources.xlf

==========================================
Query:
Our current translation deviates from the source, but we believe in conveys the idea correctly. Backtranslation:

These names are considered special names for the variables being released?

If our guess is not correct, please advise on the meaning

0; "(...) such_as___comma__1_comma__2_comma_etc"
0; "(...) special_discard_symbol_names"</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36773</IssueID>
    <RepoID>1</RepoID>
    <Title>[loc][Query][Roslyn] Localizability of "AddAssemblyReference"</Title>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
Add an assembly reference to '{0}'

File Name:
Tools\ExternalAccess\FSharp\xlf\ExternalAccessFSharpResources.xlf

==========================================
Query:
Does "to" refer to "Add to" or does it refer to "reference to"? Assumed the former, please confirm or advise.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>11/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36771</IssueID>
    <RepoID>1</RepoID>
    <Title>pass source instead of name for package lookup</Title>
    <Description>fixes issue identified by @heejaechang 	here: https://github.com/dotnet/roslyn/pull/35397#issuecomment-505362593</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36770</IssueID>
    <RepoID>1</RepoID>
    <Title>Editing tests for support nullable in ENC</Title>
    <Description>
    </Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36769</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should always warn about passing nullable reference to a non-nullable reference</Title>
    <Description>

**Steps to Reproduce**:

```cs
#nullable enable
public class C
{
  string? field;
  public void M()
  {
    field = "";      
    M(ref field);
  }
  
  void M(ref string s1)
  {
    field = null;
    s1.ToString();
  }
}

class Program
{
  static void Main()
  {
    new C().M();
  }
}
```

**Expected Behavior**:
Warning for `M(ref field);`

**Actual Behavior**:
No warnings. The program crashes at runtime with a `NullReferenceException`.

**Notes**
Roslyn does not issue a warning in the code above because `field` does not contain a null value at the moment of an invocation. However, since it's passed by reference any changes to its value will be observable in the callee. It is always unsafe to pass a reference which might contain null values to an argument which does not accept nulls.

Note that the same crash without nullability warnings is achievable even without creating an alias since Roslyn verifies nullability at the moment of evaluating an argument instead of an invocation. E.g. the following issue has the same root cause: https://github.com/dotnet/roslyn/issues/36768

**Version Used**: 

```
Branch master (21 Jun 2019)
Latest commit 898bed by Heejae Chang:
added NFW to get some data on incremental parsing bug where source si� (#36620)

* added NFW to get some data on incremental parsing bug where source size and tree size is different

* more comments
```</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36768</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should verify state of byref arguments at the moment of an invocation instead of evaulation the argument itself</Title>
    <Description>

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
public class C
{
  string? field;
  public void M()
  {
    field = "";
    M(in field, field = null);
  }
  
  void M(in string s1, string? s2)
  {
    s1.ToString();
  }
}

class Program
{
  static void Main()
  {
    new C().M();
  }
}
```

**Expected Behavior**:
Warning for the invocation `M(ref field, field = null)`

**Actual Behavior**:
No warnings. The code crashes at runtime with a `NullReferenceException`

**Notes**
Since field is passed by reference its value is not copied after evaluating the argument and its state in the callee will reflect any mutations done in the consequent arguments.

**Version Used**: 

```
Branch master (21 Jun 2019)
Latest commit 898bed by Heejae Chang:
added NFW to get some data on incremental parsing bug where source si� (#36620)

* added NFW to get some data on incremental parsing bug where source size and tree size is different

* more comments
```
</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36767</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36766</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36765</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36764</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip BasicEditAndContinue tests</Title>
    <Description>This is the first step outlined in #36763</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36763</IssueID>
    <RepoID>1</RepoID>
    <Title>BasicEditAndContinue Integration Tests Failing</Title>
    <Description>A recent update to the preview version of Visual Studio that is used for integration tests has caused Basic EnC tests to consistently fail. 

To unblock contributors we made the Integration tests non-required for PRs. 

- [x] We should instead Skip these tests.
- [x] Return Integration tests to their required state.
- [x] Unskip these tests when a fix is in place.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>03/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36762</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve integration test logging</Title>
    <Description>Write all log information for each first chance exception to a single file (as opposed to multiple log files per exception).</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36761</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not warn about an oblivious mismatch for an explicitly implemented interface.</Title>
    <Description>Related to #35619.

Only the last commit needs a review, previous are coming from https://github.com/dotnet/roslyn/pull/35613.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36760</IssueID>
    <RepoID>1</RepoID>
    <Title>Update BasicEditAndContinue tests to report fatal NREs</Title>
    <Description>
    </Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36759</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto readonly modifier deletes comments</Title>
    <Description>Write the following C# code inside a class:

```
//Any comment
private int a, b;
```

Don't use these members anywhere. Visual Studio will suggest adding the &amp;quot;readonly&amp;quot; modifier to them. Pressing alt+enter then adding the modifier adds it as expected, but REMOVES the comment above.
Expected behavior: comment will stay untouched.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/617233/auto-readonly-modifier-deletes-comments.html
VSTS ticketId: 935590_
_These are the original issue comments:_

Visual Studio Feedback System on 6/24/2019, 01:08 AM (38 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36758</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0044 'Add readonly modifier' reported on field exposed by reference</Title>
    <Description>VSF_TYPE_MARKDOWNWhen implementing a ref property, Visual Studio 16.1.3 suggests adding the readonly modifier to the backing field:

```
class Foo
{
    private int _bar; // IDE0044 Add readonly modifier
    public ref int Bar =&gt; ref _bar;
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/617707/ide0044-add-readonly-modifier-reported-on-field-ex.html
VSTS ticketId: 935990_
_These are the original issue comments:_

Visual Studio Feedback System on 6/24/2019, 01:19 AM (37 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>02/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36757</IssueID>
    <RepoID>1</RepoID>
    <Title>Dead link in object. Equals snippet</Title>
    <Description>VSF_TYPE_MARKDOWNUse the equals snippet, which generates smth like below. The links to the guidelines are dead. Sad.

```csharp
 public override bool Equals(object obj)
        {
            //       
            // See the full list of guidelines at
            //   http://go.microsoft.com/fwlink/?LinkID=85237    --&amp;gt; dead
            // and also the guidance for operator== at
            //   http://go.microsoft.com/fwlink/?LinkId=85238    --&amp;gt; dead
            //

if (obj == null || GetType() != obj. GetType())
            {
                return false;
            }

// TODO: write your implementation of Equals() here
            throw new NotImplementedException();
            return base. Equals(obj);
        }
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/617955/dead-link-in-objectequals-snippet.html
VSTS ticketId: 936159_
_These are the original issue comments:_

Visual Studio Feedback System on 6/24/2019, 02:39 AM (36 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36756</IssueID>
    <RepoID>1</RepoID>
    <Title>Quick actions show different options on selection</Title>
    <Description>&lt;p&gt;Quick actions show different options depending on whether a cursor is placed on an identifier or a character of the identifier is selected. For example, it is not possible to generate a constructor parameter from a field when a cursor is placed on this field's name, it's only possible when at least one character of this name is selected.&lt;/p&gt;&lt;p&gt;I'd like to be able to generate constructor parameters without having to use selection first.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/618566/quick-actions-show-different-options-on-selection.html
VSTS ticketId: 936358_
_These are the original issue comments:_

Visual Studio Feedback System on 6/24/2019, 03:25 AM (35 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36755</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect cast is redundant in switch expression with nullable value type.</Title>
    <Description>**Version Used**: 
&lt;img width="213" alt="Capture" src="https://user-images.githubusercontent.com/5749229/60136351-cc2e1880-9758-11e9-9740-d59d084c05f3.PNG"&gt;

**Steps to Reproduce**:

Input this code
```csharp
class Program
{
    void M()
    {
        string numberString = "One";
        Numbers? number = numberString switch
        {
            "One" =&gt; (Numbers?)Numbers.One,
            "Two" =&gt; Numbers.Two,
            _ =&gt; null,
        };
    }
}

enum Numbers
{
    One,
    Two
}
```
The cast `(Numbers?)` in case "One" is marked as unnecessary.
&lt;img width="260" alt="Capture2" src="https://user-images.githubusercontent.com/5749229/60136716-cab12000-9759-11e9-96a6-b12df9aef7c2.PNG"&gt;

Removing the cast causes a compiler error.
`Error	CS0037	Cannot convert null to 'Numbers' because it is a non-nullable value type`
&lt;img width="255" alt="Capture3" src="https://user-images.githubusercontent.com/5749229/60136762-f03e2980-9759-11e9-8bf4-d99cebd5512b.PNG"&gt;

A few followup notes
1.  It is a little confusing that casting the first element of the switch expression is required, even if I explicitly define the expected return type as Numbers?.  The IDE also offers no assistance that casting the first member of the switch expression may fix the compiler error.
2.  Converting a switch statement to switch expression in this instance yields invalid code (it doesn't add the appropriate cast to the first case).
</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36754</IssueID>
    <RepoID>1</RepoID>
    <Title>Use toolset version from Arcade</Title>
    <Description>
    </Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36753</IssueID>
    <RepoID>1</RepoID>
    <Title>Code fixer for `TOpen?` to suggest using nullability attributes</Title>
    <Description>For unconstrained type `T`:
- `T? M() ...` could be fixed to `[MaybeNull] T M() ...`
- `void M(T? x) ...` could be fixed to `void M([AllowNull] T x) ...`
- `void M(ref T? x) ...` could be fixed to `void M([AllowNull, MaybeNull] ref T x) ...`

Thanks @RikkiGibson for the idea</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36752</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36751</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36750</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36749</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36748</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36747</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36746</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36745</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should assume the worst nullability when a variable mentioned in multiple byref arguments</Title>
    <Description>**Version Used**: 

```
Branch master (21 Jun 2019)
Latest commit 898bed by Heejae Chang:
added NFW to get some data on incremental parsing bug where source si� (#36620)

* added NFW to get some data on incremental parsing bug where source size and tree size is different

* more comments
```

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
using System;
public class C {
    
    static void Main()
    {
        new C().M("");
    }
    
    void M(string? s)
    {
        M(out s, out s);
        s.ToString();
    }

    void M(out string? s1, out string s2)
    {
        s2 = "";
        s1 = null;
    }
}
```

**Expected Behavior**:
Warning for `s.ToString()` since `s` is passed to an out parameter which is explicitly declared as nullable.

**Actual Behavior**:
Roslyn does not report any warnings for the code above. The program crashes at runtime with a `NullReferenceException`

**Notes**
Roslyn should merge nullability annotations for all parameters effectively using the worst of available annotations since there's no way to know in which order out parameters will be assigned. Currently Roslyn uses the last annotation i.e. the warning will appear if you reverse the order of parameters in `M` since the nullable parameter will become the last.

There's a similar problem with `ref` parameters. If you change `out` to `ref` in the code above whether you'll receive a warning for `s.ToString()` or not depends on the order of `ref` parameters in `M`. Although there's always an additional warning for passing `string?` to `ref string` in this case, I believe that the warning for `s.ToString()` should not depend on the declaration of `M`
</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36744</IssueID>
    <RepoID>1</RepoID>
    <Title>csi.exe does not print its git SHA like csc.exe</Title>
    <Description>**Version Used**: 

3.2.0-beta4-19321-04 (0a7bde20)

**Steps to Reproduce**:

1. VS command prompt from dogfooding channel
2. csi.exe

**Expected Behavior**:

You can see the SHA in the information printed before a prompt is shown. 

**Actual Behavior**:

Where the SHA would go (between parens) is blank

```
C:\Users\nicholg&gt;csi
Microsoft (R) Visual C# Interactive Compiler version 3.2.0-beta4-19321-04 ()
Copyright (C) Microsoft Corporation. All rights reserved.
```

Oddly, csc.exe works fine
```
C:\Users\nicholg&gt;csc
Microsoft (R) Visual C# Compiler version 3.2.0-beta4-19321-04 (0a7bde20)
Copyright (C) Microsoft Corporation. All rights reserved.
```

cc @tmat</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36743</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 16.3 p1</Title>
    <Description>Flow the DiagnosticSuppressor fix into the -vs-deps branch /cc @mavasani @petrroll </Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36742</IssueID>
    <RepoID>1</RepoID>
    <Title>Highlight references to symbol under caret not working for symbols used in tuple types (value tuples)</Title>
    <Description>VSF_TYPE_MARKDOWNWhen a variable (local variable or class field) is used in a value tuple, placing the cursor on the symbol in value tuple, does not highlight the other references. This only happens when the symbol is used as a single value in a member of a value tuple. When the symbol is used in an expression, the highlighting works correctly.

Code example:

var value = 1;       // #1
    var x = (value, 2);  // #2

If the cursor is on `value` in line #2, the other `value` in line #1 is not highlighted, and the shortcut keys for navigation between highlighted references (Ctrl+Shift+Up/Down arrow) will do nothing.
If the cursor is placed on the first usage (line #1) it works correctly.

Also this code sample works with no problem:

var value = 1;
    var x = (value + 1, 2);

because `value` is used in an expression.

It just happens in VS 2019.
It is all fine in VS 2017.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/620242/highlight-references-to-symbol-under-caret-not-wor.html
VSTS ticketId: 937020_
_These are the original issue comments:_

Visual Studio Feedback System on 6/25/2019, 04:00 AM (7 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36741</IssueID>
    <RepoID>1</RepoID>
    <Title>Parameters in "Generate Constructor" refactorings should adhere to naming styles </Title>
    <Description>Parameters in "Generate Constructor" refactorings should adhere to naming styles </Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36740</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle lazy loading of analyzer command handlers</Title>
    <Description>Fixes #36304</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36739</IssueID>
    <RepoID>1</RepoID>
    <Title>Requesting "Close All Regions" in document ability</Title>
    <Description>VSF_TYPE_MARKDOWNPlease add a tools for closing all Regions in the currently open document. The tool should allow operation by hot-key and toolbar/menu item.

NOTE: By &amp;quot;Regions&amp;quot;,  I am referring to areas of code withing a #Region&amp;quot;&amp;quot;/#End Region block. It should NOT close unfolded sections of code such as methods and classes.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/612877/requesting-close-all-regions-in-document-ability.html
VSTS ticketId: 934093_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/19/2019, 00:39 AM (6 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36738</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Code Style import editorconfig file</Title>
    <Description>VSF_TYPE_MARKDOWNThe C# Code Style window has a export to editorconfig but an import button would be helpful.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/612206/c-code-style-import-editorconfig-file.html
VSTS ticketId: 927394_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/19/2019, 00:40 AM (6 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36737</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring tool: make function async</Title>
    <Description>VSF_TYPE_MARKDOWNIt would be great to have right click -&amp;gt; refactoring tools -&amp;gt; MAKE METHOD ASYNC.
This would make the current function async, and update its callers to await and become async too, recursively.
Functions with out and ref parameters would change their signature to have only 'in' parameters and return all values within a tuple.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/608719/refactoring-tool-make-function-async.html
VSTS ticketId: 919128_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/17/2019, 01:29 AM (8 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36736</IssueID>
    <RepoID>1</RepoID>
    <Title>Emit NullableContextAttribute for local functions and lambdas</Title>
    <Description>See https://github.com/dotnet/roslyn/pull/36152#discussion_r296959203</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36735</IssueID>
    <RepoID>1</RepoID>
    <Title>Reference count for const variables.</Title>
    <Description>VSF_TYPE_MARKDOWNGetting code lens reference counts for properties and methods is immensely useful. It would also be handy to get counts for const variables as well.

ie,
```
public class Foo
{
   // Awesome to see a reference count here.
   public const string NameOfThingNeededForAttributeValue = &amp;quot;Bar&amp;quot;;
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/606869/reference-count-for-const-variables.html
VSTS ticketId: 918151_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/14/2019, 01:29 AM (11 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36734</IssueID>
    <RepoID>1</RepoID>
    <Title>Add workarounds to IDE analyzers for missing IOperation/CFG support for using declarations</Title>
    <Description>Workaround for #32100
1. https://github.com/dotnet/roslyn/commit/a08f86e3d5ec1701fc6ccd3c0e3538341832c2ad: Workaround in dispose analyzer
2. https://github.com/dotnet/roslyn/commit/b0a9514603afde201b10caf990e035fc5d92a2f1: Workaround in unused parameter/value analyzer</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36733</IssueID>
    <RepoID>1</RepoID>
    <Title>Couple of AD0001 fixes for unused parameter analyzer</Title>
    <Description>1. https://github.com/dotnet/roslyn/commit/3146d928ef5eeb0244e34ea6536ade1069e8f844: Handle generic local function usages in finally region in symbol usage analysis. Fixes #36715

2. https://github.com/dotnet/roslyn/commit/ee61cc53ff02b55df8c9d756235c0e1085dafa4b: Fix AD0001 from unhandled UnusedParametersPreference. Fixes #34830</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36732</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190624.24
- **Date Produced**: 6/25/2019 1:31 AM
- **Commit**: 062febd818fa51e82c7192782a6b6e6429cc81c8
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19324.24

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36731</IssueID>
    <RepoID>1</RepoID>
    <Title>Show nullability flow analysis in Quick Info</Title>
    <Description>If you mouse over a local, field, etc., and we have computed nullable flow analysis for it, we'll tell you whether the compiler thinks the item is null or not at that point.

![image](https://user-images.githubusercontent.com/201340/60065460-c123ab80-96b8-11e9-8dbf-a83c6bf3d1d1.png)

The symbol shown on the first line is always shown with the declared nullability; we decided to keep it that way out of concerns that it differing from the declared nullability (without a clear statement of what is different) would be too confusing -- a simple, straightforward sentence more easily expresses the message, and putting 'here' in the message clarifies that it's a piece of information depending on the exact invocation point, which is somewhat a first for Quick Info.

I don't like that this is rebinding the symbol after we lost it in the quick info infrastructure. There is more cleanup I'd like to do here of the Quick Info code but that'll wait for another PR -- it went into weeds far deeper than I expected at first.

Closes #36191.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36730</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect results when using "Show items from unimported namespaces" to complete generic types</Title>
    <Description>**Steps to Reproduce**:

I was trying to complete System.Collections.Generics.List&lt;T&gt;, but I got the non-generic version of this type:

![TypeCompletionForGenerics](https://user-images.githubusercontent.com/1103906/60062863-3d140700-973e-11e9-9df7-4f7c445121bf.gif)


**Expected Behavior**:
`List&lt;T&gt;` to be committed.

**Actual Behavior**:
List was committed.
</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36729</IssueID>
    <RepoID>1</RepoID>
    <Title>Refact select fix foreach &amp; PullMemberUp</Title>
    <Description>Further work on #35180 

Based on #36592 that can't be merged due to conflicts described in #36697. 
Only the last commit is new.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36728</IssueID>
    <RepoID>1</RepoID>
    <Title>make sure we only create OB when VS is running in IDE mode. all comma…</Title>
    <Description>…nd line mode (and all its variations) we don't need to create OB

fix - https://devdiv.visualstudio.com/DevDiv/_workitems/edit/936590</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36727</IssueID>
    <RepoID>1</RepoID>
    <Title>Move EnC manager implementation down to Features layer (16.3 P1)</Title>
    <Description>Replaces legacy EnC manager implementation with a new one.

The previous implementation of the EnC manager in the debugger communicated with language services via project system coupled interfaces (`IVsENCRebuildableProjectCfg*`). This had many limitations, including necessity to perform IO synchronously on UI thread, lack of support for multi-targeting, necessity to make buffers readonly while application is running and for projects whose modules were not loaded to the debugee process etc.

The new architecture completely removes the dependency on Project System. The debugger communicates with language services via a MEF component. Language services export
1) `IDebugStateChangeListener` 
The implementation of this interface receives callbacks from the debugger when the debug state changes:

```C#
        void EnterBreakState(BreakStateKind kind);
        void ExitBreakState();
        void StartDebugging();
        void StopDebugging();
```

2) `IEditAndContinueManagedModuleUpdateProvider`

The implementation responds to the debugger's requests for updates in managed modules. 
The debugger sends these requests when changes made in source files need to be applied due to a user action (e.g. "continue" in break mode, change current IP while in break mode, etc.).

### Avoiding read-only buffers ###
Previously we made buffers read only in scenarios where we couldn't apply the change at the end of the current edit session ("continue"). This could be for multiple reasons:

1) Changing source files while the application is running
Changes can only be applied when the debuggee is stopped. 

We let the user made changes while the debuggee is running. We report a warning for these changes notifying the user that the changes are not being applied while the debugee is running. 

When the debugger stops on a breakpoint in a modified source, the source won't match the one that's being executed so based on the settings the debugger may display a dialog saying so. We will follow up to improve that experience, but not going to block the change on it.

2) Changing source files of projects during edit session whose corresponding module is not loaded to the debugee
Since the modules are not loaded we can't apply the delta at the end of the edit session (there is no module in the debugee process to apply the delta to).

We calculate the EnC deltas for all projects changed during edit session regardless of whether their modules are loaded or not. At the end of the session we apply deltas only to modules that are loaded, but we remember all the deltas we calculated for next opportunity to apply changes. Such opportunity occurs when a module is loaded while the debuggee is running. At that point the debuggee is stopped while the even is processed and we can apply all deltas that were made to the project that corresponds to the module. Note that this also handles the case where multiple instances of the same module are loaded to the debuggee (e.g. to different AppDomains or AssemblyLoadContexts). The previous design didn't account for this scenario resulting in bugs like https://github.com/dotnet/roslyn/issues/34253.

3) Other reasons that disallow EnC (e.g. being stopped at exception, the debuggee process not supporting EnC, etc.).

We do not block the user from making changes in the source files. Instead we report regular errors like we do for other Rude Edits. We use new APIs added to Concord to support querying for availability of EnC for specific module.

Fixes https://github.com/dotnet/roslyn/issues/10203.
Fixes https://github.com/dotnet/roslyn/issues/11656.
Fixes https://github.com/dotnet/roslyn/issues/18917.
Fixes https://github.com/dotnet/roslyn/issues/21170.
Fixes https://github.com/dotnet/roslyn/issues/27373.
Fixes https://github.com/dotnet/roslyn/issues/27735.
Fixes https://github.com/dotnet/roslyn/issues/29223.
Fixes https://github.com/dotnet/roslyn/issues/34253.
Fixes [DevDiv 750649](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/750649)
Fixes [DevDiv 551604](https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/551604)

See also https://github.com/dotnet/roslyn/issues/18350.
</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36726</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix build errors in Microsoft.CodeAnalysis.dll</Title>
    <Description>The dev16.3-preview1 build is broken. I think some sync issue came up that prevented these diagnostics from occurring until after both PRs got merged. Here are the diagnostics I'm seeing:

```
F:\src\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\DiagnosticSuppressor.cs(15,64): error RS1026: Enable concurrent execution [F:\src\roslyn\src\Compilers\Core\Portable\Microsoft.CodeAnalysis.csproj]
F:\src\roslyn\src\Compilers\Core\Portable\DiagnosticAnalyzer\DiagnosticSuppressor.cs(15,64): error RS1025: Configure generated code analysis [F:\src\roslyn\src\Compilers\Core\Portable\Microsoft.CodeAnalysis.csproj]
```

This PR fixes the problem by applying the code fixes for these diagnostics.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36725</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36724</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36723</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36722</IssueID>
    <RepoID>1</RepoID>
    <Title>Learn from calls to Equals methods in NullableWalker</Title>
    <Description>Resolves #36591

This changes the NullableWalker so that we can learn from calls to:
-  `static bool object.Equals(object, object)`,
- `static bool object.ReferenceEquals(object, object)`
- `bool object.Equals(object)` and overrides
- `bool IEquatable&lt;T&gt;(T)` and implementations
- `bool IEqualityComparer&lt;T&gt;(T, T)` and implementations

Scenarios where we can learn new things about null state:

```cs
object.[Reference]Equals(maybeNull, notNull) // when true, changes maybeNull to not-null
object.[Reference]Equals(notNull, null) // when true, changes notNull to maybe-null
object.[Reference]Equals(maybeNull, null) // when false, changes notNull to maybe-null
notNull.Equals(maybeNull) // when true, changes maybeNull to not-null
notNull.Equals(maybeNull) // when true, changes maybeNull to not-null
notNull.Equals(null) // when true, changes nonNull to maybe-null
```

The `notNull.Equals(null)` scenario is a little silly (if you called Equals on a null, didn't you already throw?) But I think that this is just such an antipattern that it doesn't matter if we don't do the perfect thing here.

I tried to think of situations where we could get in trouble when using object.ReferenceEquals on nullable value types, but I couldn't think of any where we incorrectly rule out a diagnostic in a scenario that throws an exception at runtime.</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36721</IssueID>
    <RepoID>1</RepoID>
    <Title>EE (VB) IntPtr: error BC30657: 'ToPointer' has a return type that is not supported or parameter types that are not supported.</Title>
    <Description>VSF_TYPE_MARKDOWNHi there,

I ran into problems when I opened an existing VB solution in VS19: while the type IntPtr is accepted during coding at runtime I get

error BC30657: 'ToPointer' has a return type that is not supported or parameter types that are not supported.

In VS15 the same code yields no errors and IntPtr works as expeced, e.g. `Process.MainWindowHandle` or `Control.FromHandle`.

**So currently I can not use VS19 to continue on my VB solution :-(**

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/491378/vb-intptr-error-bc30657-topointer-has-a-return-typ.html
VSTS ticketId: 821877_
_These are the original issue comments:_

Visual Studio Feedback System on 3/17/2019, 08:09 PM (98 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 3/22/2019, 10:45 AM (94 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

Larry Robertson on 4/8/2019, 04:59 PM (76 days ago): &lt;p&gt;I have the same problem in Visual Basic 2019 (April 2, 2019 Preview Release Version 5)&lt;/p&gt;&lt;p&gt;It seems that if you declare a variable as type IntPtr and initalize it to IntPtr.Zero the error is thrown at runtime.&lt;/p&gt;&lt;p&gt;If you declare a variable as integer and initalize it to IntPtr.Zero no error is thrown at runtime.&lt;/p&gt;&lt;p&gt;Declaring as integer is out of the question because it breaks code throughout my application&lt;/p&gt;&lt;p&gt;Simple recreation of the problem only takes one line of code the variable intptrWindowHandle below will throw the BC30657 error.&lt;/p&gt;&lt;pre&gt;Dim intptrWindowHandle As IntPtr = IntPtr.Zero&lt;/pre&gt;

Larry Gotkin on 5/5/2019, 10:24 AM (50 days ago): &lt;p&gt;I'm having the same problem with the latest VS19 release 16.0.3.  I can't find any indication this problem is being worked at Microsoft.  Anyone have any information on whether this problem will be fixed?&lt;/p&gt;

Robert Glaubauf on 5/6/2019, 02:57 AM (49 days ago): &lt;p&gt;Hi Larry, thx a lot for your vote! Unfortunately there is no hint that Microsoft works at this issue. It's almost two month I've reported this and frankly, I can't understand there is no reaction: seems no one needs IntPtr though this is no alien type. Back in March I've already prepared a new vm-ware for our development but this machine including &lt;strong&gt;VS19 is in deep slumber&lt;/strong&gt; and I am back to VS 15 - what a pity!&lt;/p&gt;

Robert Glaubauf on 5/6/2019, 03:51 AM (49 days ago): &lt;p&gt;Bad new guys, I just made the upgrade of my VS19 to the most recent version 16.1.0 Preview 2 as of April 24 but that does not change anything &lt;strong&gt;so I still can not use VS19 :-(&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;

Ken Reagan on 5/14/2019, 01:13 PM (41 days ago): &lt;p&gt;Still broke in the May patch, what a shock, NOT!!!!!!!!!!!&lt;/p&gt;

Robert Glaubauf on 5/31/2019, 01:58 AM (24 days ago): Still not working in version 16.2.0 Preview 1.0 as of May 21st :-(((
Hugh A. Calvin on 6/10/2019, 09:28 PM (13 days ago): &lt;p&gt;I created an empty form and put a toolbox Button on it.  I put "Button1.text = "Press me" in the code behind.  Inspecting the Button1 properties, the Handle has the same error - BC30657.  I inspected another running application, and the TreeView1 control Handle has the Handle error as well.  It looks like this issue may be common among a large number of controls.  I'm using VS Enterprise 2019, vsn 16.1.2.  Hope this helps... &lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36720</IssueID>
    <RepoID>1</RepoID>
    <Title>BackspacingAfterConflictResolutionPreservesTrackingSpans failed in CI</Title>
    <Description>https://dev.azure.com/dnceng/public/_build/results?buildId=236958&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=5878384&amp;resultId=167291&amp;paneView=debug

```
Assert.Equal() Failure
Expected: &lt;SelectManyIterator&gt;d__17&lt;KeyValuePair&lt;String, ImmutableArray&lt;TextSpan&gt;&gt;, Span&gt; [[48..63)]
Actual: List&lt;Span&gt; [[48..55)]
```

```
 at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 91
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_4_VerifyAnnotatedTaggedSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 44
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_7_VerifySpansAndBufferForConflictResolution.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 69
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_17_BackspacingAfterConflictResolutionPreservesTrackingSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 591
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36719</IssueID>
    <RepoID>1</RepoID>
    <Title>set "DeferUntilIntellisenseIsReady"=dword:00000000 for csharp and VB …</Title>
    <Description>…editor so that we opt out from C#/VB editors waiting for solution load to complete

this basically make csproj to behave same as cps where VS let users to open C# or VB code file before solution is fully loaded.</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36718</IssueID>
    <RepoID>1</RepoID>
    <Title>Unwrap nullability-wrapped symbols in object initializer completion </Title>
    <Description>This slipped through because we didn't have any tests at all for the case where we are using the type-inferrer to infer the case like:

    a = new A { B = { } }

where the inner one doesn't have a `new B` before it. The scenario wasn't new but just happened to be the precise case that was broken.

Fixes #36702</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36717</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Refactoring: move to namespace not available for enums</Title>
    <Description>VSF_TYPE_MARKDOWNYou can use refactoring for moving classes and interfaces, but not enums. When pressing Ctrl-. the 'Move to namespace...' option on an enum is not available.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/609047/c-refactoring-move-to-namespace-not-available-for.html
VSTS ticketId: 922868_
_These are the original issue comments:_

Visual Studio Feedback System on 6/17/2019, 02:18 AM (7 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 6/17/2019, 10:24 AM (7 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36716</IssueID>
    <RepoID>1</RepoID>
    <Title>ArgumentOutOfRangeException from CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer in AspNetCore solution </Title>
    <Description>**Version Used**: 
16.2 Preview 2

**Steps to Reproduce**:

1. Clone https://github.com/aspnet/AspNetCore and install dependencies
2. Enable full solution analysis.
3. Run `restore.cmd`
4. Open `src\MusicStore\MusicStore.sln`
5. Wait

**Expected Behavior**:
No `AD0001` failure

**Actual Behavior**:
```
Severity    Code    Description Project File    Line    Suppression State   Detail Description
Error   AD0001  Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.ArgumentOutOfRangeException' with message 'Specified argument was out of the range of valid values.
Parameter name: localFunction'. Microsoft.AspNetCore.Mvc.RazorPages     1   Active  Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Microsoft.AspNetCore.Mvc.RazorPages
ISymbol: ApplyConventions (Method)
System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.
Parameter name: localFunction
   at Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraphExtensions.GetLocalFunctionControlFlowGraphInScope(ControlFlowGraph controlFlowGraph, IMethodSymbol localFunction, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.AddDescendantOperationsInRange(ControlFlowGraph cfg, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, PooledHashSet`1 operationsBuilder, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.GetOrCreateSymbolWritesInBlockRange(Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.HandleCatchOrFilterOrFinallyInitialization(BasicBlock basicBlock, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.GetOrCreateBlockAnalysisData(BasicBlock basicBlock, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.SetCurrentAnalysisData(BasicBlock basicBlock, BasicBlockAnalysisData data, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.RunCore(ImmutableArray`1 blocks, DataFlowAnalyzer`1 analyzer, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, TBlockAnalysisData initialAnalysisData, ArrayBuilder`1 unreachableBlocksToVisit, SortedSet`1 outOfRangeBlocksToVisit, PooledDictionary`2 continueDispatchAfterFinally, PooledHashSet`1 dispatchedExceptionsFromRegions, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.&lt;RunCore&gt;g__StepThroughSingleFinally|1_2(ControlFlowRegion finally, TBlockAnalysisData&amp; currentAnalysisData, &lt;&gt;c__DisplayClass1_0&amp; )
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.&lt;RunCore&gt;g__StepThroughFinally|1_1(ControlFlowRegion region, Int32 destinationOrdinal, TBlockAnalysisData&amp; currentAnalysisData, &lt;&gt;c__DisplayClass1_0&amp; )
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.&lt;RunCore&gt;g__FollowBranch|1_0(BasicBlock current, ControlFlowBranch branch, TBlockAnalysisData currentAnalsisData, &lt;&gt;c__DisplayClass1_0&amp; )
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.RunCore(ImmutableArray`1 blocks, DataFlowAnalyzer`1 analyzer, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, TBlockAnalysisData initialAnalysisData, ArrayBuilder`1 unreachableBlocksToVisit, SortedSet`1 outOfRangeBlocksToVisit, PooledDictionary`2 continueDispatchAfterFinally, PooledHashSet`1 dispatchedExceptionsFromRegions, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.Run(ControlFlowGraph controlFlowGraph, DataFlowAnalyzer`1 analyzer, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.RunAnalysis(ControlFlowGraph cfg, ISymbol owningSymbol, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeUnusedValueAssignments(OperationBlockAnalysisContext context, Boolean isComputingUnusedParams, PooledHashSet`1 symbolUsageResultsBuilder, Boolean&amp; hasBlockWithAllUsedSymbolWrites)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
```</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36715</IssueID>
    <RepoID>1</RepoID>
    <Title>ArgumentOutOfRangeException from CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer in AspNetCore solution </Title>
    <Description>**Version Used**: 
16.2 Preview 2

**Steps to Reproduce**:

1. Clone https://github.com/aspnet/AspNetCore and install dependencies
2. Enable full solution analysis.
3. Run `restore.cmd`
4. Open `src\MusicStore\MusicStore.sln`
5. Wait

**Expected Behavior**:
No `AD0001` failure

**Actual Behavior**:
```
Severity    Code    Description Project File    Line    Suppression State   Detail Description
Error   AD0001  Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.ArgumentOutOfRangeException' with message 'Specified argument was out of the range of valid values.
Parameter name: localFunction'. Microsoft.AspNetCore.Mvc.RazorPages     1   Active  Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Microsoft.AspNetCore.Mvc.RazorPages
ISymbol: ApplyConventions (Method)
System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.
Parameter name: localFunction
   at Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraphExtensions.GetLocalFunctionControlFlowGraphInScope(ControlFlowGraph controlFlowGraph, IMethodSymbol localFunction, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.AddDescendantOperationsInRange(ControlFlowGraph cfg, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, PooledHashSet`1 operationsBuilder, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.GetOrCreateSymbolWritesInBlockRange(Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.HandleCatchOrFilterOrFinallyInitialization(BasicBlock basicBlock, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.GetOrCreateBlockAnalysisData(BasicBlock basicBlock, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.SetCurrentAnalysisData(BasicBlock basicBlock, BasicBlockAnalysisData data, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.RunCore(ImmutableArray`1 blocks, DataFlowAnalyzer`1 analyzer, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, TBlockAnalysisData initialAnalysisData, ArrayBuilder`1 unreachableBlocksToVisit, SortedSet`1 outOfRangeBlocksToVisit, PooledDictionary`2 continueDispatchAfterFinally, PooledHashSet`1 dispatchedExceptionsFromRegions, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.&lt;RunCore&gt;g__StepThroughSingleFinally|1_2(ControlFlowRegion finally, TBlockAnalysisData&amp; currentAnalysisData, &lt;&gt;c__DisplayClass1_0&amp; )
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.&lt;RunCore&gt;g__StepThroughFinally|1_1(ControlFlowRegion region, Int32 destinationOrdinal, TBlockAnalysisData&amp; currentAnalysisData, &lt;&gt;c__DisplayClass1_0&amp; )
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.&lt;RunCore&gt;g__FollowBranch|1_0(BasicBlock current, ControlFlowBranch branch, TBlockAnalysisData currentAnalsisData, &lt;&gt;c__DisplayClass1_0&amp; )
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.RunCore(ImmutableArray`1 blocks, DataFlowAnalyzer`1 analyzer, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, TBlockAnalysisData initialAnalysisData, ArrayBuilder`1 unreachableBlocksToVisit, SortedSet`1 outOfRangeBlocksToVisit, PooledDictionary`2 continueDispatchAfterFinally, PooledHashSet`1 dispatchedExceptionsFromRegions, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.Run(ControlFlowGraph controlFlowGraph, DataFlowAnalyzer`1 analyzer, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.RunAnalysis(ControlFlowGraph cfg, ISymbol owningSymbol, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeUnusedValueAssignments(OperationBlockAnalysisContext context, Boolean isComputingUnusedParams, PooledHashSet`1 symbolUsageResultsBuilder, Boolean&amp; hasBlockWithAllUsedSymbolWrites)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
```</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36714</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable Analysis Pay-for-play</Title>
    <Description>Make nullable analysis conditional on whether the user enabled the nullable feature, either on the command line or via a nullable enable directive.

Fixes https://github.com/dotnet/roslyn/issues/36131. This makes the condition global, so if there are any nullable enables in the entire project it'll turn on the NullableWalker for the whole project. If we want to make this more fine-grained, we can do that in a follow-up. @dotnet/roslyn-compiler for review.</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36713</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unused method from sighelp</Title>
    <Description>
    </Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36712</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable tests for fixed scenarios on Mono.</Title>
    <Description>Closes #35769.</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36711</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose better named extension points to go from ITextSnapshot-&gt;Document</Title>
    <Description>I thought i created this PR already, but i couldn't actually find it.

This PR adds to nicer named extensions for mapping from an ITextSnapshot to a Document or Documents.  Instead of:

`GetOpenDocumentInCurrentContextWithChanges` and
`GetRelatedDocumentsWithChanges` there is now simply:

1. `GetDocument`
2. `GetDocuments`

Reasons for the change: the above members were wordy in a way that wasn't really helpful.  First, `WithChanges` is rather meaningless and pointless in the Roslyn world.  There isn't a way to get documents 'without changes', and in our immutable world, why would there ever be an expectation that you would ever be getting a Document that didn't match exactly the text of the snapshot you were asking about?  Second 'current context' is also meaningless.  'context' is not a roslyn concept and isn't really clear at all about what it would mean.  What is the "current context" what would it mean to get a document not in that context?  It's also a word (like "provider" or "service") that doesn't really add anything.

There are really only two scenarios here.  One is simple, and is the majority case for customers, and one is slightly advanced, but necessary for some people.  Specifically, almost all customers simply want to get from their ITextSnapshot the user is editing to a Document.  That is now simply done as `GetDocument`.  Some customers need to handle the very advanced case of this being a linked/shared doc, in which case they can call `GetDocuments`.  Both methods explain their purpose and link to each other, stating why you'd want one over the other.

</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>04/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36710</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose IHierarchyItemToProjectIdMap functionality publicly (feature request)</Title>
    <Description>**Feature Request**:

Expose functionality for easy mapping between `IVSHierarchy` and `ProjectId` - [functionality that already exists but is internal](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/HierarchyItemToProjectIdMap.cs#L24).

**Use Case**:

In my VSIX extension I have a `EnvDTE.Project` object, but I'd like to convert this to a `Microsoft.CodeAnalysis.Project`. It looks like I need to first get the `ProjectId`, so that I can call `workspace.CurrentSolution.GetProject(projectId)`, but I can't find how to get the `projectId`.

**Context**

I'm wanting to display a custom tree in the solution explore underneath projects of a particular capability. The tree displays some dependencies of the project, and certain types that are exposed by those dependencies. I'm hooking the `_dispReferencesEvents_ReferenceAddedEventHandler` event, getting the `Reference.SourceProject`, and from that I'm trying to get it's `projectId` to bring the project into the roslyn code analysis world (for discovering type information etc.)

tagging @jasonmalinowski, as suggested by @CyrusNajmabadi on dotnet/roslyn</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36709</IssueID>
    <RepoID>1</RepoID>
    <Title>Make IRecursivePatternOperation public</Title>
    <Description>Fixes #35843
</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36708</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename IsNotNullableIfReferenceType to IsNotNullable</Title>
    <Description>All the affected APIs are also covering nullable value types now.</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36707</IssueID>
    <RepoID>1</RepoID>
    <Title>Porblem setting C# Decimal values</Title>
    <Description>When setting a &amp;quot;decimal&amp;quot; value and writing it to the Console like so:

decimal negexp = 9.012345678901234567890123456e-26m;
Console.WriteLine($&amp;quot;{test:E28}&amp;quot;);

I get:
9.0100000000000000000000000000E-026

but SHOULD be: 9.0123456789012345678901234560E-026.

I also tried smaller (negative) exponents:

negexp = 9.012345678901234567890123456e-16m;
Console.WriteLine($&amp;quot;{test:E28}&amp;quot;);

and got:
9.0123456789000000000000000000E-016

and:

negexp = 9.012345678901234567890123456e-6m;
Console.WriteLine($&amp;quot;{test:E28}&amp;quot;);

and got:
0.0000090123456789012345678901

and:

negexp = 9.012345678901234567890123456e-2m;
Console.WriteLine($&amp;quot;{test:E28}&amp;quot;);

and got:
0.0901234567890123456789012346.

I also tried it with a positive exponent:

decimal posexp = 9.012345678901234567890123456e+26m;
Console.WriteLine($&amp;quot;{test:E28}&amp;quot;);

and got:
9.0123456789012345678901234560E+026

which is correct. 

So the acccuracy lost depends on the magnitude of the (negative) exponent and appears to be a pretty serious bug (unless I'm doing something wrong). I believe that these numbers are well within the advertised accuracy of the &amp;quot;decimal&amp;quot; data type according to the documentation.

I found it hard to believe that nobody has noticed this yet, but I DID do a search with no luck. Sorry if I missed it somewhere.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/506155/porblem-setting-c-decimal-values.html
VSTS ticketId: 828612_
_These are the original issue comments:_

Visual Studio Feedback System on 3/27/2019, 01:18 AM (89 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36706</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate Class in new file quick fix in Shared Project shows error</Title>
    <Description>VSF_TYPE_MARKDOWN1. Editing an existing class that is located in a Shared Project.
2. Add a base class (that doesn't exist)
3. Click on identifier name and choose &amp;quot;Generate Class in new file&amp;quot;
4. UI can lock up for a period of time
5. &amp;quot;'GenerateTypeCodeFixProvider' encountered an error and has been disabled' message displayed

Stack trace is as follows:
```text
System.AggregateException : One or more errors occurred. ---&amp;gt; Files and folders cannot:
-be empty strings
- contain any of the following characters: / ? : &amp;amp; \ * &amp;quot; &amp;lt; &amp;gt; | # %
- contain Unicode control characters
- contain surrogate characters
- be system reserved names, including 'CON', 'AUX', 'PRN', 'COM1' or 'LPT2'
- be '.' or '..'

Please enter a valid name.
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&amp;lt;&amp;gt;c__DisplayClass17_0. &amp;lt;InvokeCore&amp;gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&amp;gt; (Inner Exception #0) System.Runtime.InteropServices.COMException : Files and folders cannot:
-be empty strings
- contain any of the following characters: / ? : &amp;amp; \ * &amp;quot; &amp;lt; &amp;gt; | # %
- contain Unicode control characters
- contain surrogate characters
- be system reserved names, including 'CON', 'AUX', 'PRN', 'COM1' or 'LPT2'
- be '.' or '..'

Please enter a valid name.
   at EnvDTE.ProjectItems.AddFolder(String Name,String Kind)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.Extensions.ProjectExtensions.CreateFolder(ProjectItems currentItems,String container)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.Extensions.ProjectExtensions.FindOrCreateFolder(Project project,IEnumerable`1 containers)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.AddDocumentToFolder(Project project,DocumentId documentId,IEnumerable`1 folders,String documentName,SourceCodeKind sourceCodeKind, SourceText initialText,String filePath,Boolean isAdditionalDocument)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.AddDocumentCore(DocumentInfo info,SourceText initialText,Boolean isAdditionalDocument)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyDocumentAdded(DocumentInfo info,SourceText text)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;lt;---
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/618057/generate-class-in-new-file-quick-fix-in-shared-pro.html
VSTS ticketId: 936225_
_These are the original issue comments:_

Visual Studio Feedback System on 6/24/2019, 03:04 AM (6 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36705</IssueID>
    <RepoID>1</RepoID>
    <Title>/Users/vsts/.nuget/packages/microsoft.net.compilers/3.1.1/tools/Microsoft.CSharp.Core.targets(59,5): error MSB6006: "csc.exe" exited with code 8. </Title>
    <Description>CI:  VSTS
.NET Core:  2.2.105
OS:  MacOS
```
##[error]Error: The process '/Users/vsts/hostedtoolcache/dncs/2.2.105/x64/dotnet' failed with exit code 1
##[error]Dotnet command failed with non-zero exit code on the following projects : 
```
I think this problem is the same as this one.（https://github.com/dotnet/roslyn/issues/36616 ）
How to solve it?</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36704</IssueID>
    <RepoID>1</RepoID>
    <Title>Honor attributes on fields</Title>
    <Description>Part of https://github.com/dotnet/roslyn/issues/35816 (work items for attributes)</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36703</IssueID>
    <RepoID>1</RepoID>
    <Title>Should nullability attributes be honored on ref return values?</Title>
    <Description>We could update the attribute target for `DisallowNull` to allow this target, then we would warn for assigning a maybe-null value to it (for example `RefReturning() = maybeNull;`).

```C#
        [Fact]
        public void DisallowNull_RefReturnValue_05()
        {
            var source0 =
@"using System.Diagnostics.CodeAnalysis;
public class A
{
    public static T? F1&lt;T&gt;(T t) where T : class =&gt; throw null!;
    [return: DisallowNull] public static ref T? F2&lt;T&gt;(T t) where T : class =&gt; throw null!;
}";
            var comp = CreateNullableCompilation(new[] { DisallowNullAttributeDefinition, source0 });
            comp.VerifyDiagnostics(
                // (5,14): error CS0592: Attribute 'DisallowNull' is not valid on this declaration type. It is only valid on 'property, indexer, field, parameter' declarations.
                //     [return: DisallowNull] public static ref T? F2&lt;T&gt;(T t) where T : class =&gt; throw null!;
                Diagnostic(ErrorCode.ERR_AttributeOnBadSymbolType, "DisallowNull").WithArguments("DisallowNull", "property, indexer, field, parameter").WithLocation(5, 14)
                );

            var source1 =
@"using System.Diagnostics.CodeAnalysis;
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.All)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}
public class A
{
    public static ref T? F1&lt;T&gt;(T t) where T : class =&gt; throw null!;
    [return: DisallowNull] public static ref T? F2&lt;T&gt;(T t) where T : class =&gt; throw null!;
    static void Main()
    {
        object? y = new object();
        F1(y) = y;
        F2(y) = y; // DisallowNull is ignored
    }
}";
            var comp2 = CreateNullableCompilation(source1);
            comp2.VerifyDiagnostics();
        }
```

Tagging @stephentoub. What do you think?</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36702</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpSemanticModel.ToLanguageSpecific throws ArgumentException</Title>
    <Description>**Version Used**: VS 16.2 Preview 4 (29021.251.d16.2stg)

**Steps to Reproduce**:

1. Create a new C# console application (.NET Core or .NET Framework)
2. In the main method, type these characters individually (do not copy-paste): `var ts = new TraceSource("hi") {  Switch = { ` (trailing space should follow the open curly brace)

**Expected Behavior**:

Auto-completion assists in writing out the nested initializers by offering property names.

**Actual Behavior**:

Roslyn promptly throws an exception and offers no completion within the nested initializers. VS shows the exception as an infobar across the top, with an offer to view the log. 

![image](https://user-images.githubusercontent.com/3548/60021624-94877980-964f-11e9-9f87-574e80f78e2a.png)

Looking at the log file reveals the following callstack:

```
System.ArgumentException: Not a C# symbol.
Parameter name: container
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.ToLanguageSpecific(INamespaceOrTypeSymbol container)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.LookupSymbolsCore(Int32 position, INamespaceOrTypeSymbol container, String name, Boolean includeReducedExtensionMethods)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractObjectInitializerCompletionProvider.&lt;ProvideCompletionsAsync&gt;d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&lt;GetContextAsync&gt;d__32.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&lt;ComputeNonEmptyCompletionContextsAsync&gt;d__26.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&lt;GetCompletionsAsync&gt;d__24.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CompletionSource.&lt;GetCompletionContextAsync&gt;d__22.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.&lt;CallExtensionPointAsync&gt;d__36`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

Even when I use copy-paste or edit an existing code block with a nested initializer like this to avoid the exception infobar being displayed, I still get no completion assist within this syntax.</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36701</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190623.4
- **Date Produced**: 6/24/2019 7:07 AM
- **Commit**: 9946534da4f73e6242ca105f6798ab58119c9ab0
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19323.4

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36700</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36699</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36698</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36697</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36696</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect resolve of equality operators of unconstrained generic types when compared with 'default' literal</Title>
    <Description>**Version Used**: 
http://sharplab.io, master branch on 21 Jun 2019

**Steps to Reproduce**:
Compile the following program:
```csharp
public class C {        
  static void Main() {
    Console.WriteLine(HasDefaultValue(0));
  }
  static bool HasDefaultValue&lt;T&gt;(T arg) =&gt; arg != default ? true : false;      
}
```
**Expected Behavior**:
error CS0019: Operator '!=' cannot be applied to operands of type 'T' and 'default'
**Actual Behavior**:
No errors
</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36695</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn is unable to correcltly infer variables implicitly checked for null when expression under cast is not trivial</Title>
    <Description>**Version Used**:

Branch master (21 Jun 2019)
Latest commit 898bed by Heejae Chang:
added NFW to get some data on incremental parsing bug where source si� (#36620)

* added NFW to get some data on incremental parsing bug where source size and tree size is different

* more comments 

**Steps to Reproduce**:

Compile the following code
```cs
#nullable enable
interface IV&lt;T&gt; { T V { get; } }

class C
{
  void M1&lt;T,V&gt;(V v) where T : V where V : class, IV&lt;V&gt;
  {
    // this check correctly infers that 'v' is not null in then branch
    if (((T) v)?.ToString() != null)
    {
        v.ToString();
    }
      
    // this check also correctly infers that 'v' is not null in then branch
    if (((T) v?.V) != null)
    {
        v.ToString();
    }
 
    // this check does not infer that 'v' is not null in then branch
    if (((T) v?.V)?.ToString() != null)
    {
        v.ToString();
    }

    // if you dereference the result instead of using it in a conditional access combined with a null check
    // Roslyn will correctly infer that result of ((T) v?.V) being not null guarantees that 'v' is not null too
    ((T) v?.V).ToString();
    v.ToString();
  }
}
```

**Expected Behavior**:
Roslyn applies the same rules to infer implicitly null-checked variables when it processes dereference e.g. `x.ToString()` and comparison with null e.g. `x != null`.

**Actual Behavior**:
Roslyn warns about `v` possibly containing a null value after checking that `((T) v?.V)?.ToString() != null`

**Notes**
Roslyn already checks implicitly checked variables through casts and null conditional accesses as demonstrated by the first `if` in the code above.
However using conditional access in the casted expression prevents Roslyn from correctly unwrapping it when processing null checks even though the same works with explicit dereferences</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36694</IssueID>
    <RepoID>1</RepoID>
    <Title>The namespace for "Show items from unimported namespaces" is not visible as you are typing</Title>
    <Description>![UnimportedNamespaces](https://user-images.githubusercontent.com/1103906/59992057-3083a600-968d-11e9-89c6-85c751119c22.gif)
</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36693</IssueID>
    <RepoID>1</RepoID>
    <Title>Attributes have a "attribute" suffix when "Show items from unimported namespaces" is turned on</Title>
    <Description>Unlike when they are in scope, attributes in unimported namespaces show up and are committed with the "attribute" syntax.

**Expected Behavior**:
![image](https://user-images.githubusercontent.com/1103906/59991880-72601c80-968c-11e9-8519-43c36d8e8bc6.png)

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/1103906/59991842-48a6f580-968c-11e9-8c64-13791e86c23c.png)



</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36692</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0067 fires for using declaration with escape </Title>
    <Description>**Version Used**: 16.2.0-pre.2.0+29006.145

**Steps to Reproduce**:

IDE0067 "disposable object never disposed" should not fire in `M1` and does not fire in `M2`.

```c#
void M1(string path)
{
    using var stream = File.OpenRead(path); // IDE0067 fires
    S(stream);
}

void M2(string path)
{
    using (var stream = File.OpenRead(path)) // IDE0067 does not fire here
        S(stream);
}

static void S(Stream s)
{
}
```

**Expected Behavior**:

No diagnostic.

**Actual Behavior**:

Diagnostic.</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36691</IssueID>
    <RepoID>1</RepoID>
    <Title>(Feature request) support for simple .NET core project run without .csproj file </Title>
    <Description>**Version Used**: 
2.1.7 
**Steps to Reproduce**:

1. in a blank folder, create a new file named `Program.cs` with a simple 
```
using Systems; 
void Main() 
{}
```
2. open `cmd` in this folder, input `dotnet run .`  

**Expected Behavior**:
dotnet with scan all cs files in folder and build, then run the Main() 
if there is 2 Main(), throw an exception 

**Actual Behavior**:
Exception throw, required a `.csproj` to build/run 

**Note**
If dotnet core support this feature, it will be incredible easy for teachers to use C# for teaching simple thing like HelloWorld, if, for, while, and demo Algorithm instead of using Python. 
P/S: 
I know we could open the folder in cmd, run `dotnet new console` then edit the `Program.cs` generated. 
</Description>
    <CreatedDate>23/06/2019</CreatedDate>
    <ClosedDate>23/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36690</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/06/2019</CreatedDate>
    <ClosedDate>23/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36689</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36688</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36687</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36686</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36685</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36684</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36683</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36682</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualBasicRemoveUnusedValuesCodeFixProvider crashes</Title>
    <Description>**Version Used**:  VS 2019 16.1.3 but also seeing issue with git version 99f88ce03be3f8a524d9a855258cd9f8cdbe2c08

**Steps to Reproduce**:

1. Create a VB classlib targeting netfx 472
2. Paste this into Class1.vb
```
Public Class Class1
    Sub Method()
        For Each a In New Integer() {1, 2, 3}
            a = 1
            Console.WriteLine(a)
        Next
    End Sub
End Class
```
3. place character on a after For Each `For Each |a` and trigger light bulb, I used ctrl+. but clicking it seems to do the same thing. 

**Expected Behavior**:
Get a code fix suggestion to remove unused variable (IDE hints about this by fading the variable).
I don't believe it should be offered at all for the foreach variable as removing it will break the code.
**Actual Behavior**:
![image](https://user-images.githubusercontent.com/874927/59962062-bca49a80-94e0-11e9-89ab-e410b8b47c81.png)

```
System.InvalidOperationException : The item specified is not the element of a list.
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.NodeListEditor.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitForEachBlock(ForEachBlockSyntax node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.BaseListEditor.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.NodeListEditor.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.NodeListEditor.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitMethodBlock(MethodBlockSyntax node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.BaseListEditor.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.NodeListEditor.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.NodeListEditor.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitClassBlock(ClassBlockSyntax node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.BaseListEditor.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.NodeListEditor.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.NodeListEditor.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.BaseListEditor.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.NodeListEditor.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.InsertNodeInList(SyntaxNode root,SyntaxNode nodeInList,IEnumerable`1 nodesToInsert,Boolean insertBefore)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.InsertNodesInListCore(SyntaxNode nodeInList,IEnumerable`1 nodesToInsert,Boolean insertBefore)
   at Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesBefore[TRoot](TRoot root,SyntaxNode nodeInList,IEnumerable`1 newNodes)
   at Microsoft.CodeAnalysis.VisualBasic.CodeGeneration.VisualBasicSyntaxGenerator.InsertDeclarationsBeforeInternal(SyntaxNode root,SyntaxNode declaration,IEnumerable`1 newDeclarations)
   at Microsoft.CodeAnalysis.VisualBasic.CodeGeneration.VisualBasicSyntaxGenerator._Closure$__309-0._Lambda$__0(SyntaxNode r)
   at Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PreserveTrivia[TNode](TNode node,Func`2 nodeChanger)
   at Microsoft.CodeAnalysis.VisualBasic.CodeGeneration.VisualBasicSyntaxGenerator.InsertNodesBefore(SyntaxNode root,SyntaxNode declaration,IEnumerable`1 newDeclarations)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertChange.Apply(SyntaxNode root,SyntaxGenerator generator)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()
   at async Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedValuesCodeFixProvider`11.FixAllAsync[TExpressionSyntax,TStatementSyntax,TBlockSyntax,TExpressionStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TForEachStatementSyntax,TSwitchCaseBlockSyntax,TSwitchCaseLabelOrClauseSyntax,TCatchStatementSyntax,TCatchBlockSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```
</Description>
    <CreatedDate>22/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36681</IssueID>
    <RepoID>1</RepoID>
    <Title>C# SymbolMatcher tests for nullables</Title>
    <Description>
    </Description>
    <CreatedDate>22/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36680</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36679</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36678</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't treat zero-length deconstruction as an error when binding patterns.</Title>
    <Description>Fixes #36496

This is a tiny bug fix for a compiler "crash".
@dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36677</IssueID>
    <RepoID>1</RepoID>
    <Title>recognize @code as code block</Title>
    <Description>razor added new @code block. add support for new code block in roslyn.

for old razor version, IsCodeBlock won't get called since razor will not treat code in @code as C# code block, in new razor version where @code is added, razor will recognize it as C# code block and call us which we will in turn check new @code along with existing @ tags for code blocks.

addressing https://github.com/aspnet/AspNetCore/issues/10942</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36676</IssueID>
    <RepoID>1</RepoID>
    <Title>INamedTypeSymbol properties for tuples vs short tuples</Title>
    <Description>The LDM [recently confirmed](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-11-05.md) that the nongeneric struct type `ValueTuple` is a tuple type (with zero elements).  However, the `INamedTypeSymbol` APIs `TupleUnderlyingType` and `TupleElements` do not currently treat it as such.

This may be related to https://github.com/dotnet/roslyn/issues/20648. Assigning to @AlekseyTs as I think it makes sense to address this at the same time as that.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36674</IssueID>
    <RepoID>1</RepoID>
    <Title>Make Dispose analyzers (IDE0067 and IDE0069) more conservative</Title>
    <Description>1. Make IDE0069 (DisposableFieldsShouldBeDisposed) conservative by bailing out on disposable types that don't have the Dispose implementation, but rely on base type implementing it and having virtual helper methods for dispose functionality

2. Make IDE0067 (DisposeObjectsBeforeLosingScope) conservative by bailing out on disposable objects that are passed as arguments to methods in metadata.

Requires updating to a new FlowAnalysisUtilities version.
Fixes #36498</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36673</IssueID>
    <RepoID>1</RepoID>
    <Title>IEventSymbol has a mysterious NullableAnnotation</Title>
    <Description>```C#
#nullable enable

class C
{
	event EventHandler Goo;
}
```

How does one observe nullability on an `IEventSymbol`? </Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36672</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 15.9.8 Unknown Hard Error ArgumentOutOfRangeException</Title>
    <Description>VSF_TYPE_MARKDOWNTyping or pasting this line of code into the IDE will immediately cause a crash with error message: Unknown Hard Error.

```
A a&amp;lt;int, ItrPtr, =
```

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.ArgumentOutOfRangeException: Position is not within syntax tree with full span [5573..5733)
Parameter name: position
Actual value was 5538.
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.CheckAndAdjustPosition(Int32 position, SyntaxToken&amp;amp; token)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetAdjustedNodePosition(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetDeclaredSymbol(LocalFunctionStatementSyntax declarationSyntax, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLambdaOrLocalFunctionParameterSymbol(ParameterSyntax parameter, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetDeclaredSymbol(ParameterSyntax declarationSyntax, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDeclaredSymbol(ParameterSyntax declarationSyntax, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetDeclaredSymbolCore(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetDeclaredSymbolsCore(SyntaxNode declaration, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.IsDiagnosticSuppressed(String id, Location location, SuppressMessageInfo&amp;amp; info)
   at Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.ApplySourceSuppressions(Diagnostic diagnostic, ISymbol symbolOpt)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.FilterDiagnosticsSuppressedInSource(ImmutableArray`1 diagnostics, Compilation compilation, SuppressMessageAttributeState suppressMessageState)
   at Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder.StoreAnalysisResult(AnalysisScope analysisScope, AnalyzerDriver driver, Compilation compilation, Func`2 getAnalyzerActionCounts, Boolean fullAnalysisResultForAnalyzersInScope)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&amp;lt;ComputeAnalyzerDiagnosticsCoreAsync&amp;gt;d__64.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.FatalError.Report(System.Exception, System.Action`1&amp;lt;System.Exception&amp;gt;)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&amp;lt;ComputeAnalyzerDiagnosticsCoreAsync&amp;gt;d__64.MoveNext()
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.CheckAndAdjustPosition(Int32, Microsoft.CodeAnalysis.SyntaxToken ByRef)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetAdjustedNodePosition(Microsoft.CodeAnalysis.SyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetDeclaredSymbol(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLambdaOrLocalFunctionParameterSymbol(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetDeclaredSymbol(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDeclaredSymbol(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetDeclaredSymbolCore(Microsoft.CodeAnalysis.SyntaxNode, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetDeclaredSymbolsCore(Microsoft.CodeAnalysis.SyntaxNode, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.IsDiagnosticSuppressed(System.String, Microsoft.CodeAnalysis.Location, Microsoft.CodeAnalysis.Diagnostics.SuppressMessageInfo ByRef)
   at Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.ApplySourceSuppressions(Microsoft.CodeAnalysis.Diagnostic, Microsoft.CodeAnalysis.ISymbol)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.FilterDiagnosticsSuppressedInSource(System.Collections.Immutable.ImmutableArray`1&amp;lt;Microsoft.CodeAnalysis.Diagnostic&amp;gt;, Microsoft.CodeAnalysis.Compilation, Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState)
   at Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder.StoreAnalysisResult(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver, Microsoft.CodeAnalysis.Compilation, System.Func`2&amp;lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerActionCounts&amp;gt;, Boolean)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&amp;lt;ComputeAnalyzerDiagnosticsCoreAsync&amp;gt;d__64.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&amp;lt;ComputeAnalyzerDiagnosticsCoreAsync&amp;gt;d__64, Microsoft.CodeAnalysis, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&amp;lt;ComputeAnalyzerDiagnosticsCoreAsync&amp;gt;d__64 ByRef)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1&amp;lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&amp;gt;, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&amp;lt;&amp;gt;c__DisplayClass57_2+&amp;lt;&amp;lt;ComputeAnalyzerDiagnosticsAsync&amp;gt;b__1&amp;gt;d.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&amp;lt;&amp;gt;c__DisplayClass57_2+&amp;lt;&amp;lt;ComputeAnalyzerDiagnosticsAsync&amp;gt;b__1&amp;gt;d, Microsoft.CodeAnalysis, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&amp;lt;&amp;lt;ComputeAnalyzerDiagnosticsAsync&amp;gt;b__1&amp;gt;d ByRef)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&amp;lt;&amp;gt;c__DisplayClass57_2.&amp;lt;ComputeAnalyzerDiagnosticsAsync&amp;gt;b__1()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/485564/vs-1598-unknown-hard-error-argumentoutofrangeexcep.html
VSTS ticketId: 817403_
_These are the original issue comments:_

Visual Studio Feedback System on 3/11/2019, 11:52 PM (101 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36671</IssueID>
    <RepoID>1</RepoID>
    <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3</Title>
    <Description>This is a simplified version of #35439. Diagnostics will be addressed as part of the 16.3 release.

Closes #35941</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36670</IssueID>
    <RepoID>1</RepoID>
    <Title>Pass feature flags to the remote workspace</Title>
    <Description>This implements IExperimentationService in the remote workspace; any request for feature flags is forwarded to the main Visual Studio process and the feature flag is queried there.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36669</IssueID>
    <RepoID>1</RepoID>
    <Title>Guard against runaway parsing of the switch expression arms.</Title>
    <Description>Fixes #36427
In DEBUG builds it will fail an assertion in offending scenarios allowing us to diagnose the underlying issue.
There are no tests as I do not know how to reproduce the customer-reported issue.
But the stack trace suggests that this change is likely to paper over the symptoms until diagnosed.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36668</IssueID>
    <RepoID>1</RepoID>
    <Title>Add more nullability awareness in code generation</Title>
    <Description>Fixes #30324 </Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36667</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn shouldn't consider variables non-null if their user-defined conversion result is not null</Title>
    <Description>**Version Used**: 

Branch master (21 Jun 2019)
Latest commit 898bed by Heejae Chang:
added NFW to get some data on incremental parsing bug where source si� (#36620)

* added NFW to get some data on incremental parsing bug where source size and tree size is different

* more comments

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
class C { }

class D
{
    static void Main()
    {
        new D().M(null);
    }
    
    void M(C? c)
    {
        ((D)c).ToString();
        c.ToString();
    }
    
    public static implicit operator D(C? c) =&gt; new D();
}
```

**Expected Behavior**:
`Possible dereference of a null reference` warning for `c.ToString();`
The type of variable `c` is explicitly marked as nullable.
The conversion operator used explicitly declares in its signature that it returns non-nullable result even if null was passed.

**Actual Behavior**:
No warnings. The program crashes at runtime with a `NullReferenceException`.

</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36666</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion ignores information from pattern matcher when calculating the best completion item</Title>
    <Description>During the completion (both old and new), we filter items using PatternMatcher. Then PatternMatcher calculates what `PatternMatchKind` occurs. There is an order of `PatternMatchKind` from strong (exact) to weak. It goes over case-sensitive and insensitive, prefix or substring matches.

Then, in completion we have a list of matched items. All they are matched at least with the very weak _match kind_. We perform calculation of the best item, the item to be selected in the completion (there are separate algorithms for deletion and for everything else). Here, instead of using the `PatternMatchKind` we compare items between each other once again.

We should try using `PatternMatchKind` instead.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36665</IssueID>
    <RepoID>1</RepoID>
    <Title>Public API analyzer does not warn on missing API files</Title>
    <Description>**Version Used**: 2.4.3

**Steps to Reproduce**:

1. Add public API analyzer to a new solution, with some public members
2. Do not add PublicAPI.Unshipped.txt or PublicAPI.Shipped.txt to the solution
3. Run public API analyzers

**Expected Behavior**:
Warning about missing PublicAPI files, or at very least analyzer functionality not related to PublicAPI files (EG RS0027).

**Actual Behavior**:
Analyzer silently fails with no warnings.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36664</IssueID>
    <RepoID>1</RepoID>
    <Title>movetypecoderefactoringprovider encountered an error - invalid name</Title>
    <Description>VSF_TYPE_MARKDOWNattempting to move class '**MadeContactOption**' to a separate file

is it because the class name contains the string '**CON**'?

========================================

stacktrace is

System.AggregateException : One or more errors occurred. ---&amp;gt; Files and folders cannot:
-be empty strings
- contain any of the following characters: / ? : &amp;amp; \ * &amp;quot; &amp;lt; &amp;gt; | # %
- contain Unicode control characters
- contain surrogate characters
- be system reserved names, including '**CON**', 'AUX', 'PRN', 'COM1' or 'LPT2'
- be '.' or '.. '

Please enter a valid name.
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&amp;lt;&amp;gt;c__DisplayClass17_0.&amp;lt;InvokeCore&amp;gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&amp;gt; (Inner Exception #0) System.Runtime.InteropServices.COMException : Files and folders cannot:
-be empty strings
- contain any of the following characters: / ? : &amp;amp; \ * &amp;quot; &amp;lt; &amp;gt; | # %
- contain Unicode control characters
- contain surrogate characters
- be system reserved names, including 'CON', 'AUX', 'PRN', 'COM1' or 'LPT2'
- be '.' or '.. '

Please enter a valid name.
   at EnvDTE.ProjectItems.AddFolder(String Name,String Kind)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.Extensions.ProjectExtensions.CreateFolder(ProjectItems currentItems,String container)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.Extensions.ProjectExtensions.FindOrCreateFolder(Project project,IEnumerable`1 containers)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.AddDocumentToFolder(Project project,DocumentId documentId,IEnumerable`1 folders,String documentName,SourceCodeKind sourceCodeKind, SourceText initialText,String filePath,Boolean isAdditionalDocument)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.AddDocumentCore(DocumentInfo info,SourceText initialText,Boolean isAdditionalDocument)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyDocumentAdded(DocumentInfo info,SourceText text)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&amp;lt;Unknown Parameters&amp;gt;)&amp;lt;---

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/556923/movetypecoderefactoringprovider-encountered-an-err.html
VSTS ticketId: 881451_
_These are the original issue comments:_

Visual Studio Feedback System on 5/5/2019, 02:29 AM (47 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 5/6/2019, 01:43 AM (46 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

James Bradt on 5/6/2019, 07:14 AM (46 days ago): &lt;p&gt;some more info. the project the file exists in is a shared project (.shproj)&lt;/p&gt;

bugreporter5367 on 5/23/2019, 01:09 PM (28 days ago): I got the same error and stacktrace:&lt;br&gt;&lt;br&gt;In a WinForms project that references a SharedProject I clicked on a class and through Quick Actions selected 'Move type to Class1.cs'.
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36663</IssueID>
    <RepoID>1</RepoID>
    <Title>Support nullable variance in interface and partial method implementation.</Title>
    <Description>Closes #35227.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36662</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36661</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36660</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36659</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36658</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36657</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36656</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn does not reset variables' nullness to default state when they are passed in a ref argument</Title>
    <Description>**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
using System;

class C
{
  static void Main(string[] args)
  {
    new C().M2();
  }

  public void M1(__arglist)
  {
    var argIterator = new ArgIterator(__arglist);
    var typedReference = argIterator.GetNextArg();
    __refvalue(typedReference, string?) = null;
  }

  public void M2()
  {
    string? x = "";
    M1(__arglist(ref x));
    x.ToString();
  }
}
```

**Expected Behavior**:
`CS8602 Dereference of a possibly null reference.` reported for `x.ToString();`

**Actual Behavior**:
No warnings. The program crashes at runtime with a `NullReferenceException`

**Version Used**: 

Branch master (21 Jun 2019)
Latest commit 898bed by Heejae Chang:
added NFW to get some data on incremental parsing bug where source si� (#36620)

* added NFW to get some data on incremental parsing bug where source size and tree size is different

* more comments

</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36655</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose the default SymbolDisplayFormat used by ToMinimalDisplayString</Title>
    <Description>This suggestion is related to the issue reported in https://github.com/dotnet/roslyn/issues/36654.

I'm looking for a way to have `ToMinimalDisplayString` exhibit the `global::` qualification (which, BTW, I think should be automatically included when **required** for the scope in question). However, I wouldn't like to create a full `SymbolDisplayFormat` object on my own, because I'd miss the defaults.

Could you please somehow expose this default? Then, I'd use reuse it and just tweak the `SymbolDisplayGlobalNamespaceStyle` option.
</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36654</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect output of ToMinimalDisplayString() with namespace hiding</Title>
    <Description>**Version Used**:  2.10

**Steps to Reproduce**: Consider the 2 files below.

*test1.cs*
```
using System;
namespace Abc.System {}
namespace Abc
{
    public class Test
    {
        public void fff()
        {
            Video vvv = null;
            foreach (var ooo in vvv.getlist()) {}
        }
    }
}
```

*test2.cs*
```
using System.Collections.Generic;
class Video
{
    public IEnumerable&lt;int&gt; getlist() { return null; }
}
```

**Actual Behavior**:

If I get the `ITypeSymbol` of `vvv.getlist()` and its minimal display string through `ToMinimalDisplayString()` (in the span of the in the `foreach` statement), I get `System.Collections.Generic.IEnumerable&lt;int&gt;`, which is **not** correct.

**Expected Behavior**:

Given that the minimal display string is expected to be semantically correct within the scope in question, the correct value of it should, in my opinion, be `global::System.Collections.Generic.IEnumerable&lt;int&gt;`.

NOTE: This behaviour would lead to a compilation error if the computed string is being use for any sort of code rewriting.

NOTE 2: I'm using the default display format, which, I believe, should account for such case.

### UPDATE ###

See https://github.com/dotnet/roslyn/issues/36655 as well.
</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36653</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn master-vs-deps | 20190621</Title>
    <Description>
    </Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36652</IssueID>
    <RepoID>1</RepoID>
    <Title>Range syntax breaks refactors in visual studio</Title>
    <Description>Not sure if this is the right repo to report it, as it is related to VS.

When using an expression like
```csharp
var substring = string.Value[0..^5];
```

Almost all refactos in VS Crash when I try to use them. (I'm using D16.2 VS)
![image](https://user-images.githubusercontent.com/6995051/59922716-40c62780-93e6-11e9-911f-17eaa306f4c6.png)
</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36651</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190622.2
- **Date Produced**: 6/22/2019 12:46 PM
- **Commit**: 48aed493ffa093728bc9ffd17be0e5957f77aade
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19322.2

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)





</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36650</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36649</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36648</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36647</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36646</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36645</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36644</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36675</IssueID>
    <RepoID>1</RepoID>
    <Title>Compile error in abstract generic class with generic constraint to itself error on using this keyboard to call a method that expects that generic class.</Title>
    <Description>I found a compile error when using generic constraints in an abstract class (`Entity&lt;T&gt;`)that restricts the generic type to inherit from the abstract class itself (`where T : Entity&lt;T&gt;`) and then use methods inside de class using the this keyword. Since its an abstract class, 'this' will always be an object that inherits the abstract class, but the compiler gives an error.

I don't know if this is because the runtime can't support this, that the compiler doesn't support this edge case or this is by the language design (some context on this Eric's post: https://blogs.msdn.microsoft.com/ericlippert/2008/05/19/a-generic-constraint-question/).

The code to play with this issue:

```csharp
public abstract class Entity&lt;T&gt; where T : Entity&lt;T&gt;
{
	Guid Id { get; }
	long Version { get; }
	public List&lt;IEvent&lt;T&gt;&gt; PendingEvents { get; protected set; }
	public List&lt;IEvent&lt;T&gt;&gt; AppliedEvents { get; protected set; }

	public void Load() { ApplyDefaults(this); } // The error is here, on this

	public static void ApplyDefaults(T something) { }
}

public interface IEvent&lt;T&gt; where T : Entity&lt;T&gt;
{
	Guid EventId { get; }
	string EventType { get; }
}

public class Order : Entity&lt;Order&gt;
{
}

public class OrderCreated : IEvent&lt;Order&gt;
{
	public Guid EventId =&gt; throw new NotImplementedException();
	public string EventType =&gt; throw new NotImplementedException();
}
```

The last two classes (`Order`) is just to give some context, but unnecessary. 

_**I know that I can avoid this with other class design (and I'll have to) but with the language specs I think this must be supported by the compiler and its just an edge cased that has been overlooked**_</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36643</IssueID>
    <RepoID>1</RepoID>
    <Title>Questionable IDE0067 when awaiting class-member Task containing IDisposable</Title>
    <Description>**Version Used**: 
16.2.0 Preview 2.0

**Steps to Reproduce**:

```csharp
using System.IO;
using System.Threading.Tasks;

public class C
{
    private readonly Task&lt;FileStream&gt; fileStreamTask;
    public C() =&gt; fileStreamTask = Task.Run(() =&gt; File.OpenRead("")); // async resource initialization

    public async Task M()
    {
        var stream = await fileStreamTask; // IDE0067
        await stream.FlushAsync(); // more code using `stream`
    }
    // Dispose[Async]
}
```

**Expected Behavior**:
The Task holding the `IDisposable` has class scope. Disposing the contents breaks successive calls to M(). IDE0067 should not be reported.

**Actual Behavior**:
IDE0067 and a code fix that breaks the semantics.

On a side note: The cursor positions that show the code fix doesn't match the indicator: The smudge is placed under the letters `aw` of `await`, while the code fix is only available before and after the `=` and before the `a`.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36642</IssueID>
    <RepoID>1</RepoID>
    <Title>Backspace completion disappears if entire identifier is removed</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/36546

This fixes a regression comparing with the old completion.

Clicking backspace at `Console.W$$` should trigger a completion not ignore it even if DismissLastCharacter is set. 

The old completion does not dismiss with `DismissLastCharacter` if session does not exist yet. In the new completion, we are not guaranteed that the Update call we're processing was sent for the first trigger. There can be skipped updates with fast typing. So, it seems reasonable if we ignore `DismissLastCharacter` if we started with backspace/delete.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36641</IssueID>
    <RepoID>1</RepoID>
    <Title>Source server support broken in VS</Title>
    <Description>I was trying to debug Roslyn in VS. I was able to get symbols from symweb, but when I hit a breakpoint, it was unable to find the source.

I don't know if this is a VS bug or a bug with Roslyn source server support.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36640</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense changes existing, correct variable to differently capitalized type of the same name</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/36513

```
void M()
{
        Structure structure;
        structure.$$
}
```
Typing backspace at $$ starts completion for `structure`. It should prefer the one matches the case of the text already typed, i.e. `structure` rather than `Structure`. 

We have the issue in the old completion as well. Thank you, @mqudsi for pointing to this!</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36639</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36638</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36637</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36636</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36635</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36634</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36633</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36632</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36631</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect IDE0004 Cast is redundant on interplation</Title>
    <Description>VSF_TYPE_MARKDOWNVisual Studio 2019 (16.1.2) incorrectly reports the cast in the following expression as redundant:
`object x = (IFormattable)$"";`

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/605169/incorrect-ide0004-cast-is-redundant-on-interplatio.html
VSTS ticketId: 917467_
_These are the original issue comments:_

Visual Studio Feedback System on 6/13/2019, 01:53 AM (7 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36630</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotation on overridden indexer parameter not enforced</Title>
    <Description>```C#
        [Fact]
        public void DisallowNull_Indexer_OtherParameters_OverridingGetterOnly()
        {
            var lib_cs =
@"using System.Diagnostics.CodeAnalysis;
public class Base
{
    public virtual string this[[DisallowNull] string? s] { get =&gt; throw null!; set =&gt; throw null!; }
}
public class C : Base
{
    public override string this[string? s] { set =&gt; throw null!; }
}
";

            var lib = CreateNullableCompilation(new[] { DisallowNullAttributeDefinition, lib_cs });

            var source = @"
class D
{
    static void M1(string? s, string s2)
    {
        new C()[s].ToString(); // 1, expecting a warning here
        new C()[s2].ToString();
    }
}";

            var comp = CreateNullableCompilation(source, references: new[] { lib.EmitToImageReference() });
            comp.VerifyDiagnostics();

            var comp2 = CreateNullableCompilation(new[] { source, lib_cs, DisallowNullAttributeDefinition });
            comp2.VerifyDiagnostics();
        }
```

Follow-up issue from https://github.com/dotnet/roslyn/pull/36444
Relates to https://github.com/dotnet/roslyn/issues/35816 (work items for annotations)</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36629</IssueID>
    <RepoID>1</RepoID>
    <Title>Attempt at implementing a new `enum_member` editorconfig SymbolKind</Title>
    <Description>This PR is a novice attempt at fixing #24209 (almost a year after I said I would 😬). Per @sharwell's comments on that issue, I basically just mirrored what he to resolve issue #23336 (specifically commit 10d8f1a). A few notes:

- I did not even attempt to get the Roslyn solution to build while working on this, so I'm not sure if I introduced new compiler errors.
- I probably needed to add a unit test to `src/EditorFeatures/CSharpTest/Diagnostics/NamingStyles/NamingStylesTests.cs`, but it wasn't very clear to me what that test should be.
- I only looked at the files that were affected by Sam's earlier commit. Idk if there are other files that also need to be tweaked to get `enum_member` working.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36628</IssueID>
    <RepoID>1</RepoID>
    <Title>Semantic model tuple types</Title>
    <Description>Correctly report nullability of tuples in the semantic model: 
- Store the original tuple literal rather than just its type
- Visit the original literal without diagnostics only in the nullability walker to understand its type
- Update the generator to allow force visiting fields in the nullable re-writer
- Update various tuple tests to be correct

Related: #35010
</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36627</IssueID>
    <RepoID>1</RepoID>
    <Title>Unable to create a delegate pointing to a static local function from within the function</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/59884314-cc9b6d80-936c-11e9-8139-dffe186182a4.png)

**Steps to Reproduce**:

```C#
    using System.Linq;

    class Node
    {
        public int Value;
        public Node[] Children = Array.Empty&lt;Node&gt;();
    }

    class Program
    {
        static void Main()
        {
            static int f(Node n)
                =&gt; n.Value + n.Children.Sum(f);
        }
    }
```

**Expected Behavior**:

Compiles w/o errors.

**Actual Behavior**:

`Error CS8422: A static local function cannot contain a reference to 'this' or 'base'.`</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36626</IssueID>
    <RepoID>1</RepoID>
    <Title>New CSPROJ format: Conditional compilation code not correctly visualized</Title>
    <Description>When using the new CSPROJ fomat conditional code elements are not correctly visualized.
Inactive code es expected to be printed in gray.

Visual Studio: 15.3.5

Example:
Switching betwenn Debug and Release mode does not change the color of the two 'Console.WriteLine' statements:

#if DEBUG
            Console.WriteLine(&amp;quot;DEBUG&amp;quot;);
#endif

#if !DEBUG
            Console.WriteLine(&amp;quot;NOT DEBUG&amp;quot;);
#endif

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/140199/new-csproj-format-conditional-compilation-code-not.html
VSTS ticketId: 516771_
_These are the original issue comments:_

Jinu Joseph [MSFT] on 11/1/2017, 00:37 PM (596 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

Igor Pietraszko on 4/21/2018, 08:56 AM (425 days ago): &lt;p&gt;I have noticed the same behaviour but if I shut down VS2017 and then reopen it and go to the file in question, the correct code block is highlighted.  I am on VS2017 15.6.6.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36625</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler should optimize conversion from boolean to integer</Title>
    <Description>**Version Used**: 3.1.1

**Steps to Reproduce**:

```csharp
public static class C
{
    public static int M1(int i) =&gt; i &lt; 0 ? 1 : 0;
    public static bool M2(int i) =&gt; i &lt; 0;
}
```
Compile with "Optimize Code" enabled.

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxNMAfAdhMcoAOEAxnAAQByAsAFADetZTZAAgMysCMAbKwExkAwo2YMazCaw4seZAJZYYZALKcAFAqVyAlGQC8APnlkAPGQAMZAPxlOZEBYDcIyVK69gAe08AbFXw1FeV1DYzNzZ3FmAF9aWJogA===

**Expected Behavior**:
Same IL code for both methods.

**Actual Behavior**:
```
.method public hidebysig static 
    int32 M1 (
        int32 i
    ) cil managed 
{
    // Method begins at RVA 0x2050
    // Code size 8 (0x8)
    .maxstack 8

    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: blt.s IL_0006

    IL_0004: ldc.i4.0
    IL_0005: ret

    IL_0006: ldc.i4.1
    IL_0007: ret
} // end of method C::M1

.method public hidebysig static 
    bool M2 (
        int32 i
    ) cil managed 
{
    // Method begins at RVA 0x2059
    // Code size 5 (0x5)
    .maxstack 8

    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: clt
    IL_0004: ret
} // end of method C::M2
```</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36624</IssueID>
    <RepoID>1</RepoID>
    <Title>Import completion should timeout if computing items takes too long</Title>
    <Description>It should keep the computation going to populate the cache, so the next time completion is triggered the data will be available.

This is to avoid blocking completion for the very first time it's triggered. Telemetry shows that for most people it might take at least 6s for the import completion to return (30s in the most extreme case). 

An alternative would be pre-calculate the data and warm up the cache before completion is triggered.
</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36623</IssueID>
    <RepoID>1</RepoID>
    <Title>Use the arcade toolset project to build in determinism</Title>
    <Description>The previous version didn't restore the toolset fully, so if anything in the build needs toolset imports, that will fail.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36622</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor and add helper functions for naming style rules for constructor refactorings</Title>
    <Description>In response to these comments,
https://github.com/dotnet/roslyn/pull/36220#commitcomment-33883215
https://github.com/dotnet/roslyn/pull/36220#commitcomment-33883237

</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36621</IssueID>
    <RepoID>1</RepoID>
    <Title>Unable to disable current statement highlightment in VS2017 for C#</Title>
    <Description>When in debug C#, entire line of current statement's code  become black over yellow. I use visual assist for highlighting and I prefer not to see this yellow line.
Editing `Options/Environment/Fonts and Colors/Current Statement` is not solving my issue. I dont want a single foreground color, I want VisualAssist to aplly it's highlighting, but I cant find a way to completely disable `Current statement highlighting`

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/524514/unable-to-disable-current-statement-highlightment.html
VSTS ticketId: 843367_
_These are the original issue comments:_

Visual Studio Feedback System on 4/9/2019, 11:59 PM (71 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36620</IssueID>
    <RepoID>1</RepoID>
    <Title>added NFW to get some data on incremental parsing bug where source si…</Title>
    <Description>…ze and tree size is different</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36619</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't analyse generated code</Title>
    <Description>VSF_TYPE_MARKDOWNI'm working on a project that uses a lot of generated code and VS2019 shows a lot of activity analysing it on every build. It would be useful to be able to specify files / folders to exclude from analysis. 

Annoyingly in this specific case the files are dumped in with other, non generated files and they're not named anything useful to distinguish them from regular code so I'd need the ability to specify specific files rather than a heuristic.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/613709/dont-analyse-generated-code.html
VSTS ticketId: 934239_
_These are the original issue comments:_

Visual Studio Feedback System on 6/20/2019, 02:05 AM (8 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36618</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP: Use IVsSolution to look up IVsHierarchy by project GUID</Title>
    <Description>Requires https://github.com/dotnet/project-system/issues/4930 to be fixed.

https://github.com/dotnet/roslyn/issues/36516</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36617</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn does not provide a way to suppress nullability warnings on the left side of a compound assignments</Title>
    <Description>**Version Used**: 

Branch master (19 Jun 2019)
Latest commit e1146e by Sam Harwell:
Merge pull request #36366 from sharwell/order-naming-rules

Implement subset-based ordering for naming rules

**Steps to Reproduce**:

```cs
#nullable enable
class D
{
    void M(D? d)
    {
        d += d; // CS8604
        // d! += d; // does not compile
        // (d)! += d; // does not compile
    }
    
    public static extern D operator +(D d1, D? d2);
}
```

**Expected Behavior**:
You can suppress nullability warnings in the compound assignment since nullability analysis might be incorrect.

**Actual Behavior**:
There's no way to suppress it with a `!`. 
</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36616</IssueID>
    <RepoID>1</RepoID>
    <Title>Microsoft.CSharp.Core.targets(59,5): error on linux.</Title>
    <Description>I used travis-ci to build project.  
Here is the build configuration:
```yaml
language: csharp
solution: Natasha.sln
mono: none
dotnet: 2.2
dist: xenial
sudo: required

before_install:
  - sudo apt-get install nuget

env:
  global:
    - DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    - DOTNET_CLI_TELEMETRY_OPTOUT: 1

install:
  - dotnet restore

script:
  - dotnet build -c Release
```

Here is the error message: [build--log](https://api.travis-ci.com/v3/job/209616911/log.txt)
You can turn to the bottom few lines.  


`
&#x1B;[39;49m&#x1B;[39;49m&#x1B;[31m/home/travis/.nuget/packages/microsoft.net.compilers/3.1.1/tools/Microsoft.CSharp.Core.targets(59,5): error : Got a SIGABRT while executing native code. This usually indicates [/home/travis/build/dotnetcore/Natasha/Natasha/Natasha.csproj]
&#x1B;[39;49m&#x1B;[39;49m&#x1B;[31m/home/travis/.nuget/packages/microsoft.net.compilers/3.1.1/tools/Microsoft.CSharp.Core.targets(59,5): error : a fatal error in the mono runtime or one of the native libraries  
...................
`  

How can I solve this problem?</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36615</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36614</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36613</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36612</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36611</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36610</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36609</IssueID>
    <RepoID>1</RepoID>
    <Title>Components/Controls/UserControls inconsistently get marked with sub type</Title>
    <Description>**Version Used**: 
Version 16.2.0 Preview 4.0 [29018.107.d16.2stg]

**Steps to Reproduce**:

All steps start with:

1. File -&gt; New -&gt; Windows Forms App (.NET Core)

#### User Control does not get marked with sub type

1. Add -&gt; New Item -&gt; User Control

####  Custom Control does not get marked with sub type

**Expected**: Icon to change to "UserControl", when double-click, Control designer should open

1. Add -&gt; New Item -&gt; Custom Control

**Expected**: Icon to change to "Component", when double-click Component designer should open

#### Changing Form -&gt; Component should fix up sub type

1. Add -&gt; New Item -&gt; Windows Form
2. Right-click -&gt; View Code
3. Change base class to Component

**Expected**: Icon to change to "Component", when double-click Component designer should open
</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36608</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE offers refactoring to convert switch statement to expression</Title>
    <Description>**Version Used**: 
3.2.0-beta4-19312-10

**Steps to Reproduce**:

```csharp
using System;
public class C {
    public enum Kind {
        Created,
        Moved,
    }
    
    class EventArgs1 : EventArgs {}
    class EventArgs2 : EventArgs {}
    
    event EventHandler&lt;EventArgs1&gt; Created;
    event EventHandler&lt;EventArgs2&gt; Moved;
    
    public object GetHandler(Kind kind)
    {
        switch (kind)
        {
            case Kind.Created:
                return Created;
            case Kind.Moved:
        	return Moved;
            default:
                throw new InvalidOperationException();
        }
    }
}
```

**Expected Behavior**:
IDE offers to convert to switch statement and gets it right (adds object casts) or doesn't offer the refactoring.

**Actual Behavior**:
Refactors the code to this, which doesn't build:

```csharp
static object GetHandler (Kind kind)
{
	return kind switch
	{
		Kind.Created =&gt; Created,
		Kind.Copied =&gt; Copied,
		_ =&gt; throw new InvalidOperationException (),
	};
}
```</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36607</IssueID>
    <RepoID>1</RepoID>
    <Title>Set focus to editor before finding text</Title>
    <Description>Closes #36401</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36606</IssueID>
    <RepoID>1</RepoID>
    <Title>show progress in task center for solution crawler</Title>
    <Description>right now, task center solution crawler progress uses an indeterministic progress bar. that makes it hard for users to know how much works are left in the queue.

change it so that it shows "m out of n" progress so that it is easier for users to know when BG work will finish.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36605</IssueID>
    <RepoID>1</RepoID>
    <Title>Add some nullability tests for Generate Type and fix one bug</Title>
    <Description>Closes https://github.com/dotnet/roslyn/issues/30316</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36604</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust the NullableAttribute type emitted by the compiler</Title>
    <Description>The corefx API review process yielded some minor tweaks, even though the type won't be included in Core 3.

Here's the final API shape is documented [here](https://github.com/dotnet/corefx/issues/36222#issue-423989497). Note that it uses `ReadOnlySpan` for the flags.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>08/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36603</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36602</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36601</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36600</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36599</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36598</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36597</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3 to release/dev16.2-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3 into release/dev16.2-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-to-release/dev16.2-preview3-vs-deps
git reset --hard upstream/release/dev16.2-preview3-vs-deps
git merge upstream/release/dev16.2-preview3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-to-release/dev16.2-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36596</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36595</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36594</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36592</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix - local function - refactorings not available when selection is used </Title>
    <Description>WIP on fixing low-hanging fruits from #35180

Includes some new Helpers for determining whether current position/span is desirable for refactoring.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36591</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable analysis should learn from calls to well-known Equals methods</Title>
    <Description>From @jcouv:

Update the null-state at the end of an invocation of a recognized method
https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-15.md#equality-postconditions

Comparison with null literal (or null constant): `object.Equals(x, null)`
- learn that `x` is null in when-true branch
- learn that `x` is not-null in when-false branch

Comparison with a not-null expression: `object.Equals(x, notNull)`
- learn that `x` is not-null in when-true branch
- for `object.Equals(x?.y, notNull)`, learn that x was not-null (the same as `x?.y == notNull`)

`object.Equals(x, maybeNull)`
- learn nothing about x

Open question: what are all the methods we recognize? So far:

- `Object.ReferenceEquals`
- `Object.Equals` 
- `IEqualityComparer&lt;T&gt;.Equals` 
- `EqualityComparer&lt;T&gt;.Equals` 
- `IEquatable&lt;T&gt;.Equals`


Also add some tests around user-defined `==` (we learn the same thing regardless of if it's builtin or user-defined)</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36590</IssueID>
    <RepoID>1</RepoID>
    <Title>Unify EnumerableExtensions Classes</Title>
    <Description>https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/Portable/Collections/EnumerableExtensions.cs
https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/Portable/InternalUtilities/EnumerableExtensions.cs

Same static class, different namespaces. We shouldn't have two of these.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36589</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected default formatting for multi-line switch expressions</Title>
    <Description>Type the following code (IDE will format it as follows):
```
            var i = 3;
            var str = i switch
            {
                1 =&gt; "1",
                2 =&gt; "2",
                3 =&gt; "3",
            };
```

Expected: The body of the expression should be indented to the right.
Like this:
```
            var str = i switch
                {
                    1 =&gt; "1",
                    2 =&gt; "2",
                    3 =&gt; "3",
                };
```

Or even better like this:
```
            var i = 3;
            var str = i switch
                      {
                          1 =&gt; "1",
                          2 =&gt; "2",
                          3 =&gt; "3",
                      };
```

Motivation - improved readability.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36588</IssueID>
    <RepoID>1</RepoID>
    <Title>Usage of flow analysis attributes should warn outside of annotation context</Title>
    <Description>From [LDM notes on 15th May](https://github.com/dotnet/csharplang/blob/a2d95c7debf0c3e48bc491b744977f0c9d88b929/meetings/2019/LDM-2019-05-15.md):

&gt; The attributes count as “nullable annotations” (with the exception of the Flow attributes that aren’t directly related to nullability) and yield a warning if applied where the annotation context is disabled.

The implementation doesn't appear to do this today.

```cs
#nullable disable
using System.Diagnostics.CodeAnalysis;

internal class C&lt;T&gt; where T : class
{
    // 'out T value' should warn, but doesn't
    public bool TryGetValue([MaybeNullWhen(false)] out T value)
    {
        value = default!;
        return false;
    }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4GIB2BXANliwtwAEAJgJZR4ECwAULQAIAMh9AjAHQAipEA5mgHtYpAMZR2AYQHE4AQTQQsATyjkA3LVoKwcKAAcIIomy49+QmKPFSZ8xSvK0A3rUJvCAbVkwYCUsAx4AFUKXjgACm9ff0C4ABUIBDCYcQAFRIgdeAQAGkJZHAEAdwBZbEs9AkIAXkIAM0UoOABKAF1Xd3oAZkImxThiFgAmQhKIJWA4ADlsLAB1AAs4NCi/APhCEHyfNdiOtxcad2OWHrGJ6dnF5dWY+HDgAQEsQiKltGbCJ0IAX33f2h/Og0UhobIKF70EYSAA8cQAfK8lggiHFNsNnP9uoRHs9CHEEEoAOJwGAANUUGAiHnOkxmOGuaHCDSwTTahAEgXxhAAbpSWv9Did3HysFSaiQ4A1ygBCDRHYUsADs9UacHlxyBPyAA==</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36587</IssueID>
    <RepoID>1</RepoID>
    <Title>Should some synthesized methods be marked as readonly?</Title>
    <Description>Migrated from #32911 ([discussion](https://github.com/dotnet/roslyn/pull/34260#issuecomment-474994280))

&gt; @jcouv: something to consider for a follow-up: I see that we're only adding the IsReadOnlyAttribute for source method symbols. I wonder if there are other method symbols we should consider (some synthesized ones in particular). 

&gt; @RikkiGibson: Not certain. There's a few requirements for this to provide a benefit:
&gt;
&gt; 1. must be an instance method on a struct type
&gt; 2. must be called on a `ref readonly`/`in` variable
&gt;
&gt; Might be useful to enumerate any cases where (1) is true and then determine if (2) could be true for it.

</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36586</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix stack overflow error in Complete Statement </Title>
    <Description>Fixes [AB#923157](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/923157)</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36585</IssueID>
    <RepoID>1</RepoID>
    <Title>Automatically dismiss "Find Source" dialog if it appears during tests</Title>
    <Description>Sometimes the following dialog appears during integration tests:

![image](https://user-images.githubusercontent.com/1408396/59777586-91b90d00-927a-11e9-8ba1-58dfa36a6a7b.png)

When the **Find Source** dialog appears, it should be automatically dismissed to avoid cascading test failures. The test which triggered the dialog should report a test failure.

📝 Currently the most common cause of this dialog is a product bug where documents fail to save (e.g. https://github.com/dotnet/roslyn/issues/34637#issuecomment-478657402). However, the test improvement to address this will be a good overall reliability improvement.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36584</IssueID>
    <RepoID>1</RepoID>
    <Title>Use IFeatureServiceFactory to disable async completion</Title>
    <Description>Closes #33807</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36583</IssueID>
    <RepoID>1</RepoID>
    <Title>Runtime Exception : Unable to cast object of type 'Microsoft.VisualStudio.ComponentModelHost.ComponentModel' to type 'Microsoft.VisualStudio.ComponentModelHost.IComponentModel'.</Title>
    <Description>**Version Used:**
3.1.0

 **Visual Studios Version Used  :** 
Visual Studios 2017 Community Version 15.9.13


**Steps to Reproduce:**

Create a .VSIX project using Visual Studios 2017 Community Version 15.9.13

Add Nuget References to following:
```
Microsoft.CodeAnalysis (3.1.0.0)
Microsoft.VisualStudio.LanguageServices(3.1.0.0)
Microsoft.VisualStudio.ComponentModelHost (16.0.0.0)
```

Following code is used for getting the current solution instance:
```
var componentModel = (Microsoft.VisualStudio.ComponentModelHost.IComponentModel)Microsoft.VisualStudio.Shell.Package.GetGlobalService(typeof(Microsoft.VisualStudio.ComponentModelHost.SComponentModel));
VisualStudioWorkspace workspace = componentModel.GetService&lt;VisualStudioWorkspace&gt;();
```

When we run the .VSIX package in debug mode and try to run the above code an exception is thrown : **System.InvalidCastException
  HResult=0x80004002
  Message=Unable to cast object of type 'Microsoft.VisualStudio.ComponentModelHost.ComponentModel' to type 'Microsoft.VisualStudio.ComponentModelHost.IComponentModel'.**

**Important points:**

**I am trying to build a .vsix for VS 2017**.
I am having Visual Studios 2015 Update 3 Community version, Visual Studios 2017 Community Version 15.9.13 and Visual Studios 2019 (2) Version 16.1.1 installed on my machine.

The Microsoft.VisualStudio.LanguageServices dll and Microsoft.VisualStudio.ComponentModelHost.dll  has Copy Local option set to True.

The GAC entries that i can see are as below:

  ```
Microsoft.VisualStudio.ComponentModelHost, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL
  Microsoft.VisualStudio.ComponentModelHost, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL
  Microsoft.VisualStudio.ComponentModelHost.Implementation, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL
  Microsoft.VisualStudio.ComponentModelHost.Implementation, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL
```

**Expected Behavior:**
The current Solution should be loaded in the VisualStudioWorkspace reference.

**Actual Behavior:**
System.InvalidCastException
  HResult=0x80004002
  Message=Unable to cast object of type 'Microsoft.VisualStudio.ComponentModelHost.ComponentModel' to type 'Microsoft.VisualStudio.ComponentModelHost.IComponentModel'.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36582</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix diagnostic suppressor feature for compiler warnings in presence o…</Title>
    <Description>…f /warnaserror

Follow up to #36067
Fixes #36215</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36581</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190619.25
- **Date Produced**: 6/19/2019 10:49 PM
- **Commit**: bd50b2bcc787a8c62e2e114fb54704b645cc1c3a
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19319.25

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)



</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36580</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36579</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36578</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36577</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36576</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36575</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36574</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36573</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36572</IssueID>
    <RepoID>1</RepoID>
    <Title>ArgumentNullException in C# Interactive</Title>
    <Description>**Version Used**: 
Microsoft (R) Visual C# Interactive Compiler version 3.2.0-beta2-19303-01 ()
VS2019 16.2.0 Preview 2.0

**Steps to Reproduce**:

1. Open `C# Interactive` in VS2019
2. Press the below code: `new int[0] { }`
3. Press an `Enter` after the `]`

**Expected Behavior**:
No Error happen

**Actual Behavior**:
Gold bar with the below stacktrace(only show once before restart)
```cs
System.ArgumentNullException: Value cannot be null. Parameter name: point

 at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.CheckedMapUpToBuffer(SnapshotPoint point, PointTrackingMode trackingMode, Predicate`1 match, PositionAffinity affinity)
 at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapUpToBuffer(SnapshotPoint point, PointTrackingMode trackingMode, PositionAffinity affinity, ITextBuffer targetBuffer)
 at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapUpToSnapshot(SnapshotPoint position, PointTrackingMode trackingMode, PositionAffinity affinity, ITextSnapshot targetSnapshot)
 at Microsoft.CodeAnalysis.Editor.Implementation.Formatting.Indentation.AbstractSmartTokenFormatterCommandHandler.CanHandleOurselves(ITextView view, ITextBuffer subjectBuffer)
 at Microsoft.CodeAnalysis.Editor.Implementation.Formatting.Indentation.AbstractSmartTokenFormatterCommandHandler.ExecuteCommandWorker(ReturnKeyCommandArgs args, CancellationToken cancellationToken)
 at Microsoft.CodeAnalysis.Editor.Implementation.Formatting.Indentation.AbstractSmartTokenFormatterCommandHandler.ExecuteCommand(ReturnKeyCommandArgs args, Action nextHandler, CommandExecutionContext context)
 at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)
 at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.&lt;&gt;c__DisplayClass13_1`1.&lt;Execute&gt;b__1()
 at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call, Predicate`1 exceptionFilter)
  --- End of stack trace from previous location where exception was thrown ---
 at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36570</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyzer classes cannot be created because assembly 'Microsoft.CodeAnalysis.Analyzers' is not found</Title>
    <Description>**Version Used**: 
The one shipped with VS2019 16.1.3

**Steps to Reproduce**:
I'm not sure how to reproduce this issue, but it is related to the analyzers that are used if you have a ASP.NET Core web project in your solution. Sometimes when I open my solution in Visual Studio the errors (see below) are there.
With VS2017 I could reproduce it quite easily even with a completely empty project (just created from the Web API template). See dotnet/roslyn-analyzers#2340 for details. But with VS2019 the error happens **far** less often, so I can't really test what exactly triggers it.

**Expected Behavior**:
No warnings should be shown in the error list of Visual Studio.

**Actual Behavior**:
The error list of Visual Studio shows these warnings:

Note: The first exception says that it searches for version 1.1.0.0 of the assembly Microsoft.CodeAnalysis.Analyzers. All other exceptions search for version 3.1.0.0.

`An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpDiagnosticDescriptorCreationAnalyzer cannot be created from C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.codeanalysis.analyzers\1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden..`

`An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.FixAnalyzers.CSharpFixerWithFixAllAnalyzer cannot be created from C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.codeanalysis.analyzers\1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden..`

`An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpRegisterActionAnalyzer cannot be created from C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.codeanalysis.analyzers\1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden..`

`An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpReportDiagnosticAnalyzer cannot be created from C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.codeanalysis.analyzers\1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden..`

`An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpDiagnosticAnalyzerFieldsAnalyzer cannot be created from C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.codeanalysis.analyzers\1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden..`

3x the same exception:
`Analyzer 'Microsoft.CodeAnalysis.CSharp.Analyzers.CSharpImmutableObjectMethodAnalyzer' threw an exception of type 'System.TypeInitializationException' with message 'The type initializer for 'Microsoft.CodeAnalysis.CSharp.Analyzers.CSharpImmutableObjectMethodAnalyzer' threw an exception.'.
'System.TypeInitializationException: The type initializer for 'Microsoft.CodeAnalysis.CSharp.Analyzers.CSharpImmutableObjectMethodAnalyzer' threw an exception. ---&gt; System.IO.FileNotFoundException: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden.`

My initial report of this issue for VS2017: dotnet/roslyn-analyzers#2340
Maybe related: #32226</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36569</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview 1 into features/lspSupport to pickup RDT changes</Title>
    <Description>Draft for now once I figure out whether a merge or cherry-pick is better.  Creating now so hopefully CI runs.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36568</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider if SuppressionDescriptor should be a struct</Title>
    <Description>https://github.com/dotnet/roslyn/pull/36067 adds a new public API `SuppressionDescriptor` which is analogous to `DiagnosticDescriptor` - `DiagnosticSuppressor` declaratively provides its supported suppression descriptors, similar to the way that `DiagnosticAnalyzer` provides its supported diagnostic descriptors. `SuppressionDescriptor` is a class in the PR for consistency with `DiagnosticDescriptor`. It was suggested [here](https://github.com/dotnet/roslyn/pull/36067#discussion_r295020664) that it could be a struct. This issue tracks whether or not to make this change.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36567</IssueID>
    <RepoID>1</RepoID>
    <Title>Make metadata properties more efficient</Title>
    <Description>In heap dumps of large CPS solutions, ~15% of the heap is taken up by VisualStudioProject instances. The issue is VisualStudioProject._allMetadataReferences. While most metadata references have the default metadata properties, every time a metadata reference is added the code currently adds an entry in _allMetadataReferences pointing to a list of metadata properties. First, if the metadata properties are default and there's only one reference, we're wasting space by allocating the list in the first place. But second, this list starts with an initial capacity of 4, which means that we're wasting quadruple the space. For every metadata reference. Of which there are a _lot_ in .NET Core.

The solution is just to optimize the case where there is only one of the metadata reference and it has the default properties. So:

* `!_allMetadataReferences.TryGetValue(path, out var list)` means "we have not seen this reference"
* `_allMetadataReferences.TryGetValue(path, out var list) &amp;&amp; list == null` means "we have seen only one of this reference and its metadata properties are the default ones."
* Otherwise, we've either seen this reference multiple times, or the one time we saw it its metadata properties were not the default.

I chose not to optimize the remove path (i.e. you have multiple references and you remove every one except the default properties) because it seemed to be a pretty esoteric situation.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36566</IssueID>
    <RepoID>1</RepoID>
    <Title>Change dotnet_diagnostic.*.severity settings to match code style</Title>
    <Description>The code style settings we already had in a .editorconfig file supplied a set of terms to set different diagnostic severities. The terms don't match the underlying compiler enum, but we will adopt them for setting compiler diagnostic settings as well to keep the values consistent inside a .editorconfig file.

Fixes https://github.com/dotnet/roslyn/issues/35690</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36565</IssueID>
    <RepoID>1</RepoID>
    <Title>Set a non-fatal error handler that rethrows exceptions</Title>
    <Description>Without this our unit tests will throw non-fatal exceptions and just march on silently, making us unaware of bad things happening.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36564</IssueID>
    <RepoID>1</RepoID>
    <Title>Cherry pick rdt</Title>
    <Description>Cherry pick the rdt changes made on the 16.3 preview branch.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36563</IssueID>
    <RepoID>1</RepoID>
    <Title>Wire NullableWalker snapshotting to the public SpeculativeSemanticModel apis</Title>
    <Description>This PR wires ups the speculative semantic models created for `StatementSyntax`es in method and property bodies to the snapshots we are now creating in NullableWalker. We use a binary search to find the appropriate snapshot for a given position, restore a walker for that position, and then run analysis on that restored information. I have some minimal testing to verify that this speculative model works as expected within a statement and expression, but I expect that we will add more tests as we verify the results of the NullableAnalysis rewriting.

FYI @jasonmalinowski.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36562</IssueID>
    <RepoID>1</RepoID>
    <Title>existing code loaded everyone in VS who MEF exported ITableColumnDefi…</Title>
    <Description>…nition. now we make sure we only load one that we care</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36561</IssueID>
    <RepoID>1</RepoID>
    <Title>[RPS] Additional Image loads as part of initializing the Csharp language service</Title>
    <Description>[This ](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/FindReferences/StreamingFindUsagesPresenter.cs#L53) logic ends up importing all implementations of `ITableColumnDefinition` which is essentially the base interface for any component that has a table control (Test Explorer being one of them since 16.2). This causes unnecessary image loads on solution open/project creation. 

Filing this to track fixing this to be more specific to the column definitions that Roslyn needs.

Additional odities - I haven't seen this repro in IntPreview bits though(VisualStudio.16.IntPreview/16.2.0-pre.4.0+29017.117.d16.2stg) and this specific code has not changed.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36560</IssueID>
    <RepoID>1</RepoID>
    <Title>Use block body for getter not available in expression-bodied getter</Title>
    <Description>Given the following code in a getter:

```C#
class C
{
	int Prop { get =&gt; 1; }
}
```

When I `CTRL+.` on the getter, I am not offered a refactoring to move to a block body. I _am_ offered a refactoring to move the whole thing to an expression-bodied property. Not useful if I'm looking to expand the body of the getter.

![image](https://user-images.githubusercontent.com/2371880/59728178-ce8af280-91ed-11e9-812a-7eac8223211a.png)
</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36559</IssueID>
    <RepoID>1</RepoID>
    <Title>Make RemoteHost to start itself when someone ask for it.</Title>
    <Description>right now, RemoteHost is designed to start when package is loaded or first workspace event is fired.

if there is someone who ask for it before those, they will think remote host is disabled. 

consider changing remote host to start itself when someone ask for it before roslyn pre-emptively starts it if remote host is enabled.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36558</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36557</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36556</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36555</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36554</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36553</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow `#nullable` as a shorthand for `#nullable enable`</Title>
    <Description>I expect `#nullable enable` will be the most common usage of `#nullable` directive, so it makes sense to give it a shorter form and nicer default.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36552</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 16.3 into features/lspSupport</Title>
    <Description>merging 16.3 changes into features/lspSupport</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36551</IssueID>
    <RepoID>1</RepoID>
    <Title>Apply a hang mitigating timeout to UI thread operations</Title>
    <Description>
    </Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36550</IssueID>
    <RepoID>1</RepoID>
    <Title>Completely remove or restore support for `#pragma warning *enable*`</Title>
    <Description>In earlier designs of nullability, the `enable` setting was pretty useful for the nullability feature.
But now, users can enable nullable warnings with `#nullable enable warnings` instead.

The question is whether `#pragma warning enable ...` still stands on its own as a feature to be included in C# 8.0, or whether we should remove it.

In recent LDM, we said we need to come back to this question: https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-13.md#removing-support-for-pragma-warning-enable-

Update: this was made an error for C# 8. We should discuss whether to re-enable it past C# 8 (verifying the behavior is understood and desirable) or remove it entirely.

Tagging @AlekseyTs @gafter @RikkiGibson </Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36549</IssueID>
    <RepoID>1</RepoID>
    <Title>Update compiler toolset to arcade version</Title>
    <Description>Fixes #36037</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36548</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve codegen for ??= in Nullable Value Type scenarios</Title>
    <Description>Because of concerns with the underlying code of `TransformCompoundAssignmentLHS` (https://github.com/dotnet/roslyn/issues/36443), we're not currently using `BoundSpillSequence`s to lower ??= in the nullable value type case. We can improve codegen by using these after we're sure that the causes of https://github.com/dotnet/roslyn/issues/36443 are fixed.

Current codegen form:
```c#
var tmp = lhsRead.GetValueOrDefault()
lhsRead.HasValue ? tmp : { /* sequence */ tmp = loweredRight; transformedLhs = tmp; tmp }
```

Better form:
```C#
var tmp = lhsRead.GetValueOrDefault();
if (lhsRead.GetValueOrDefault())
{
	tmp = loweredRight;
	transformedLhs = tmp;
}
tmp
```

This better form needs a `BoundSpillSequence`.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36547</IssueID>
    <RepoID>1</RepoID>
    <Title>[WIP] Lower foreach over List&lt;T&gt; to for-loop</Title>
    <Description># General

Lowering foreach iteration over List&lt;T&gt; to for loop, when applicable.

It came to me as quite the surprise when I found out that roslyn doesn't actually lower foreach loops to for
when iterating through a List&lt;T&gt;.  
Upon looking at the List&lt;T&gt; implementation I found out, that the reason why this isn't as trivial as for T[] is because List&lt;T&gt; keeps track of an internal version, which changes each time the list is modified.
As that internal version is not exposed publically this optimization would require a change in the List&lt;T&gt; API to allow the said version to be accessed.

By moving all the List&lt;T&gt;.Enumerator logic onto the callsite itself it would drastically increase performance in certain scenarios.
I would still need some further confirmation that this is actually a side-effect less optimization, I myself couldn't think of 
any possible things that could go wrong, but I may be completely missing something.

Currently using the Capacity property as a placeholder until the internal version of List&lt;T&gt; is exposed.

# Demonstration

## Initial C# code

```csharp
foreach (var x in some_list)
{
    // Do something with x
}
```

## Previous Roslyn translation 

```csharp
var enumerator = some_list.GetEnumerator();
try
{
    while (enumerator.MoveNext())
    {
        // Do something with enumerator.Current
    }
}
finally
{
    enumerator.Dispose();
}
```

## New roslyn translation

```csharp
int version = some_list.Version; // Version property does not currently exist
int i = 0;
while (i &lt; some_list.Count)
{
    // Do something with some_list[i]
    if (version != some_list.Version)
    {
        throw new InvalidOperationException(); // Matching Exception message still needs to be passed to .ctor
    }
    i++;
}
```

# Benefits

Pro:
- Massive performance benefits when body of loop performs little work
    - In case of summing the length of all strings in List\&lt;string\&gt; up to 2.5x better performance
    - However, as the body of the loop does more work the benefits start to disintegrate
- ~~No allocation of Enumerator object~~ (Actually it shouldn't allocate as it is a struct Enumerator)

Con:
- Increased IL size (6 bytes per loop)
- Necessity of modifying the List\&lt;T\&gt; API in order to expose internal version 

## Benchmarks

This benchmark just sums up a list of integers for the first three results and the lengths of a list of strings for the last three.

![](https://media.discordapp.net/attachments/406551726896709632/590884755126353943/unknown.png)

# Considerations

There are a couple more things that have to be considered:

- Would this cause any side-effects?
- Would it cause issues when allowing lowering of types that derive from List\&lt;T\&gt;?
- Is it a good idea to expose the internal version field of List\&lt;T\&gt;?
    - If not, maybe a hashed version?
- Could/Should this be implemented in RyuJit to do runtime checking for List\&lt;T\&gt;, as e.g. IList\&lt;T\&gt; would not be lowered?

# Todo

Things that are yet to be completed, assuming aforementioned considerations are not going to be an issue:
- Add Tests
- Investigate/Implement possibility of allowing lowering of types that derive from List\&lt;T\&gt;
- Add API to expose internal version of List\&lt;T\&gt;
- Modify invoking InvalidOperationException constructor to take correct string argument
    - I am actually not quite sure how to do this as the no parameter constructor is already added as a WellKnownMember,
        so I can't add another one in WellKnownMembers.cs that takes one parameter, any help is appreciated!
- Modify PR to change WellKnownMember from System_Collections_Generic_List_T__get_Capacity to System_Collections_Generic_List_T__get_Version,
    once the Version API has been added</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36546</IssueID>
    <RepoID>1</RepoID>
    <Title>Backspace completion disappears if entire identifier is removed</Title>
    <Description>**Version Used**: 16.2 Preview 2

:link: https://developercommunity.visualstudio.com/content/problem/567910/vs2019-intellisense-worst-than-vs2010.html

**Steps to Reproduce**:

1. In a VB method, type `Console.W`
2. Press &lt;kbd&gt;Backspace&lt;/kbd&gt;

**Expected Behavior**:

Completion is visible, just as though the user just typed `.`.

**Actual Behavior**:

Completion disappears.
</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36545</IssueID>
    <RepoID>1</RepoID>
    <Title>VB line commit should add missing argument parentheses</Title>
    <Description>**Version Used**: 16.2 Preview 2

:link: https://developercommunity.visualstudio.com/content/problem/567910/vs2019-intellisense-worst-than-vs2010.html

**Steps to Reproduce**:

1. Type the following VB code:

    ```vb
    Console.WriteLine "Text"
    ```

2. Press &lt;kbd&gt;Enter&lt;/kbd&gt;

**Expected Behavior**:

Parentheses are automatically added:

```vb
Console.WriteLine("Text")
```

**Actual Behavior**:

The text is not changed, and error BC30800 is reported saying:

&gt; Method arguments must be enclosed in parentheses.
</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36544</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0040 warning </Title>
    <Description>Visual Studio 2019 16.2.0 Preview 2.0

IDE0040 warning generated on partial classes even if one of the partial class declarations have one.

Steps:
1. Create a partial class definition with an access modifier for the type.
2. Create a partial class definition for the same type without the modifier.

```csharp
public static partial class ContainerConfig
{}

static partial class ContainerConfig   //IDE0040
{ }
```

Expected Behavior:
This is debatable but the general rule of thumb (from my observation) for partials is to only specify the type (class/struct) and name of the partial class in all but one declaration. This reduces the likelihood of making a mistake that conflicts with one of the other declarations. The language will use whichever one has the access modifier and therefore, while it is not explicitly set on all the partial declarations, it is inferred from the partial declaration that has it.

Actual Behavior:
The partial declarations that don't have the modifier are flagged with a warning.
</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36543</IssueID>
    <RepoID>1</RepoID>
    <Title>Change Range precedence to be just below unary</Title>
    <Description>Fixes #34483, #36112</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36542</IssueID>
    <RepoID>1</RepoID>
    <Title>For To Foreach Bug CS1656</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/36506</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36541</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should not infer oblivious annotations when nullable context is enabled</Title>
    <Description>
**Steps to Reproduce**:
Compile the following code:
```cs
#nullable enable
interface I1&lt;T&gt; { T Prop { get; set; } }

class D
{
    void M(ref I1&lt;I1&lt;string?&gt;&gt; i1, ref I1&lt;I1&lt;string&gt;?&gt; i2, bool b)
    {
        var x = b ? ref i1 : ref i2;

        x.Prop.Prop.ToString();
        x.Prop.Prop = null;
        x.Prop.ToString();
        x.Prop = null;
    }        
}
```

**Expected Behavior**:
`x` is inferred to some type you can write explicitly. Consequently `x.Prop` and `x.Prop.Prop` are either nullable or non-nullable and either dereferneces of these properties or assignments of null values to them reported as warnings.

**Actual Behavior**:
No warnings are reported for usages of `x` and its properties.

**Notes**
It looks like `x` is inferred to a type with oblivious annotations (except for the top-level annotation which is notnull) since neither dereferences of `x.Prop` and `x.Prop.Prop` nor assigning `null` values to them produce any warnings.

Note that you cannot achieve the same warnings behavior with explicitly specified type usage. I.e.
`I1&lt;I1&lt;string&gt;&gt; x = ...` produces warnings for assignments of null values
`I1&lt;I1&lt;string?&gt;&gt; x = ...` produces warnings for the first dereference of `x.Prop.Prop` and assignment of null to `x.Prop`
`I1&lt;I1&lt;string&gt;?&gt; x = ...` produces warnings for the first dereference of `x.Prop` and assignment of null to `x.Prop.Prop`
`I1&lt;I1&lt;string?&gt;?&gt; x = ...` produces warnings for the first dereferences of `x.Prop` and `x.Prop.Prop`

**Version Used**: 

Branch master (18 Jun 2019)
Latest commit d4afae by Andrew Hall:
Disable move type when the options service isn't present (#36334)

Use MEF to provide implementation contract
</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36540</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn does not provide a way to suppress nullability mismatch warnings in conditional operators</Title>
    <Description>**Version Used**: 

Branch master (18 Jun 2019)
Latest commit d4afae by Andrew Hall:
Disable move type when the options service isn't present (#36334)

Use MEF to provide implementation contract

**Steps to Reproduce**:

```cs
#nullable enable
interface I1&lt;T&gt; { }

class D
{
    void M(ref I1&lt;I1&lt;string?&gt;&gt; i1, ref I1&lt;I1&lt;string&gt;?&gt; i2, bool b)
    {
        _ = (b!! ? ref i1!!! : ref i2!!!)!!;
    }        
}
```

**Expected Behavior**:
Nullability warnings are suppressed

**Actual Behavior**:
`warning CS8619: Nullability of reference types in value of type 'I1&lt;I1&lt;string?&gt;&gt;' doesn't match target type 'I1&lt;I1&lt;string&gt;?&gt;'.`
</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36539</IssueID>
    <RepoID>1</RepoID>
    <Title>Formatter benchmark</Title>
    <Description>
    </Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36538</IssueID>
    <RepoID>1</RepoID>
    <Title>ITypeSymbolExtensions.FindImplementationsForInterfaceMemberAsync uses CPU inefficiently</Title>
    <Description>**Version Used**: 16.1.3

The following scenario needs a controlled benchmarking setup.

### Steps to Reproduce

https://developercommunity.visualstudio.com/content/problem/606520/servicehubhostclrx86-32-bit-high-cpu-returns-in-20.html
https://dev.azure.com/devdiv/DevDiv/_workitems/edit/917965

### Details

* 47.4% ITypeSymbolExtensions.FindImplementations, most of which is evaluating the `FirstOrDefault` call(s) here:

    https://github.com/dotnet/roslyn/blob/9d80dea7fe1b14043b9b2ac4d0b59ed26f508742/src/Workspaces/Core/Portable/Shared/Extensions/ITypeSymbolExtensions.cs#L281

* 21.3% ITypeSymbolExtensions.GetOriginalInterfacesAndTheirBaseInterfaces, most of which is HashSet manipulation
* 20.2% SymbolFinder.OriginalSymbolsMatch here

    https://github.com/dotnet/roslyn/blob/9d80dea7fe1b14043b9b2ac4d0b59ed26f508742/src/Workspaces/Core/Portable/Shared/Extensions/ITypeSymbolExtensions.cs#L178

* 6.8% SymbolFinder.FindSourceDefinitionAsync, most of which is SymbolKey.Resolve</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36537</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36535</IssueID>
    <RepoID>1</RepoID>
    <Title>Maybe `null` warning when value cannot be `null`</Title>
    <Description>## Version Used
Used the 3.0.0-preview7-27812-08 SDK and related `dotnet` tooling for repro.

## Steps to Reproduce
1. Create a console application containing the following in its `Program` class:
    ``` c#
    #nullable enable
        static void Main(string[] args)
        {
            string? one = Environment.GetEnvironmentVariable("one");
            string? two = Environment.GetEnvironmentVariable("two");
            if (one == null &amp;&amp; two == null)
            {
                Console.WriteLine("both null");
            }
            else if (one != null &amp;&amp; two != null)
            {
                Console.WriteLine("both non-null");
            }
            else if (one != null)
            {
                Console.WriteLine("one is non-null");
            }
            else
            {
                Console.WriteLine(two.Length);
            }
        }
    #nullable disable
    ```
2. update to a recent SDK using global.json:
    ``` json
    {
      "sdk": {
        "version": "3.0.100-preview5-011568"
      }
    }
    ```
3. build the project (`dotnet build`)

## Expected Behavior
Compiles cleanly

## Actual Behavior
Emits a warning (which in the original case becomes an error due to `/p:TreatWarningsAsErrors=true"`)
```
Program.cs(26,35): warning CS8602: Dereference of a possibly null reference. [...\NullableCon
sole\NullableConsole.csproj]
```
The complaint is about the `two` variable dereference though `two` cannot be `null` at line 26 because `one` is `null` and the `one == null &amp;&amp; two == null` is handled earlier.

### See also
- Discussion started at https://github.com/aspnet/AspNetCore/pull/11201#discussion_r294103926
- Repro project available at https://github.com/dougbu/NullableConsole

### CC
 @jaredpar @jasonmalinowski @agocke @jcouv</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36534</IssueID>
    <RepoID>1</RepoID>
    <Title>added basic completion statement telemetry</Title>
    <Description>added very basic telemetry to make dashboard to track how often new feature is being used. 

see other features dashboard here
block comment - https://devdiv.visualstudio.com/DevDiv/_dashboards/dashboard/2faa643f-88ea-48b3-8e14-d96874ef9662
type import completion - https://devdiv.visualstudio.com/DevDiv/_dashboards/dashboard/73a410a4-f68c-404f-938a-ab5f821532f9

I didn't add undo tracking telemetry for now. it looks like due to the way code is written, I need a bit of refactoring to add that telemetry, so didn't add it for now. but what I added should at least give us some idea how often it is used in the wild.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36533</IssueID>
    <RepoID>1</RepoID>
    <Title>"Extract Interface ..." preserves banner at the top of the file</Title>
    <Description>Fixes #23855 

Original from PR #26223 </Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36532</IssueID>
    <RepoID>1</RepoID>
    <Title>SourceEventSymbol.ComputeIsWindowsRuntimeEvent is improperly handling WinRT events implemented in derived interfaces</Title>
    <Description>```
        private bool ComputeIsWindowsRuntimeEvent()
        {
            // Interface events don't override or implement other events, so they only
            // depend the output kind.
            if (this.containingType.IsInterfaceType())
            {
                return this.IsCompilationOutputWinMdObj();
            }
            ...
```
Now that we have DIM (Default Interface Methods), the comment "Interface events don't override or implement other events" is not accurate any more. Returning from the '''if``` in that case is likely cause an unexpected behavior of the compiler.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36531</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36530</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36529</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36528</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36527</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36526</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36525</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36524</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36523</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove duplication in AbstractSymbolCompletionProvider.CreateItems</Title>
    <Description>We had two overloads of AbstractSymbolCompletionProvider.CreateItems, once which handles the case of a single file and one that handles linked files. The code is almost identical, but the linked file one incorrectly handled the case of not having any symbols. Rather than fixing the bug in just that branch, I'm refactoring it to simply remove the second copy so both the single file and linked file cases
go through the same helper. The intent here is to avoid hiding simple bugs that had nothing to do with linked files in the linked-file-only path.

Fixes #36080 by virtue of deleting the offending code entirely. No new tests are added since I've confirmed that the existing tests (once the refactoring was complete) would have been sufficient for discovering this problem.</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36522</IssueID>
    <RepoID>1</RepoID>
    <Title>Change order of C# completion providers to get better completions for type parameter T</Title>
    <Description>Copy of https://github.com/dotnet/roslyn/pull/27930
Fixes https://github.com/dotnet/roslyn/issues/24960
Credits to @jhinder</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36521</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't complete statement when typing semicolon inside comments in an argument list</Title>
    <Description>This fix is for https://developercommunity.visualstudio.com/content/problem/605241/typing-a-semicolon-within-a-function-argument-list.html

</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36520</IssueID>
    <RepoID>1</RepoID>
    <Title>LocalsWindowUpdatesAfterLocalGetsItsTypeUpdatedDuringEnC</Title>
    <Description>Failed with

```
System.NullReferenceException : Object reference not set to an instance of an object.
```

```
Server stack trace: 
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass8_0.&lt;PlaceCaret&gt;b__0(IWpfTextView view)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass13_0.&lt;GetExecuteOnActionViewCallback&gt;b__0(CancellationToken cancellationToken)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent.&lt;&gt;c__DisplayClass6_0.&lt;InvokeOnUIThread&gt;b__0()
   at System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Windows.Threading.DispatcherOperation.Wait(TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherOperation operation, CancellationToken cancellationToken, TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken, TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent.InvokeOnUIThread(Action`1 action)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.ExecuteOnActiveView(Action`1 action)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.PlaceCaret(String marker, Int32 charsOffset, Int32 occurrence, Boolean extendSelection, Boolean selectBlock)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.SelectText(String text)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.&lt;&gt;c__DisplayClass19_0.&lt;ReplaceText&gt;b__0(IWpfTextView view)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass13_0.&lt;GetExecuteOnActionViewCallback&gt;b__0(CancellationToken cancellationToken)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent.&lt;&gt;c__DisplayClass6_0.&lt;InvokeOnUIThread&gt;b__0()
   at System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Windows.Threading.DispatcherOperation.Wait(TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherOperation operation, CancellationToken cancellationToken, TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken, TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent.InvokeOnUIThread(Action`1 action)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.ExecuteOnActiveView(Action`1 action)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.ReplaceText(String oldText, String newText)
   at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
   at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)

Exception rethrown at [0]: 
   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
   at System.Runtime.Remoting.Proxies

```


https://dev.azure.com/dnceng/public/_build/results?buildId=227877&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=5653270&amp;resultId=100247&amp;paneView=debug</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36519</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not include value types in NullableAttribute byte[]</Title>
    <Description>Do not include a `0` entry in the `byte[]` for non-generic value types. The `0` is still included for generic value types, tuples, and type parameters constrained to value types.</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36518</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract open file tracker</Title>
    <Description>Re doing https://github.com/dotnet/roslyn/pull/36006 with a fix.

Reverts https://github.com/dotnet/roslyn/pull/36465 and adds fix.

TODO - Re-run DDRIT on this to make sure it passes (in progress).  </Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36517</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix crash where type inference doing method inference needs to drop nullability</Title>
    <Description>I added a test to ensure the inferrer no longer crashes, but https://github.com/dotnet/roslyn/issues/36046 still blocks the ability for it to actually pass. The test is then added skipped until that works.</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36516</IssueID>
    <RepoID>1</RepoID>
    <Title>IVsHierarchy Project GUID might not be initialized at the time AbstractLegacyproject reads it</Title>
    <Description>Once https://github.com/dotnet/project-system/issues/4930 is fixed roll back https://github.com/dotnet/roslyn/pull/36512 and then apply https://github.com/dotnet/roslyn/pull/36461.</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36515</IssueID>
    <RepoID>1</RepoID>
    <Title>Disambiguation for zero- and one-element positional patterns</Title>
    <Description>From today's LDM:

## Pattern-Matching

### Nople pattern syntax

Is `()` OK as a zero-element positional pattern?  Is `var ()` OK?

Resolution: Yes for both.  To be scheduled.

### Oneple pattern syntax

We previously said that a type is required in a positional pattern with one element.  But that doesn't work as a disambiguation.

What about this

``` c#
  bool M(SomeTypeThatImplementsItuple it) =&gt; it is WhatType(3) {P:4};
```

Here, what type could we possibly write if we are trying to match using `ITuple`?

I think a better disambiguation rule is to require a property subpattern (even if the empty `{}`) whenever a positional pattern has only one nested pattern and no type.

Approved (resolution): the presence of a property part disambiguates from an expression even without a type.  To be scheduled.
</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36514</IssueID>
    <RepoID>1</RepoID>
    <Title>Change precedence of Range</Title>
    <Description>Below is an excerpt from an unedited version of today's LDM notes specifying a change to the syntax for Range.  This needs to be implemented and tested.

## Range

There are some syntactic ambiguities in the `Range` specification and implementation.  See https://github.com/dotnet/roslyn/issues/34483.  Principal among them are the fact that the specification gives no meaning to `a * .. b` but the compiler accepts it, producing a tree with precedence inversion.  One fix is to simply produce a syntax error in these cases.  However I believe this is likely to be confusing to the user.

These issues can be resolved by the following proposed precedence change:

1. `e1 .. e2` should be at a precedence between shift and additive (as currently specified).
2. `.. e` should be at unary precedence, like all the other prefix operators.
3. `e ..` should be at primary precedence, like all the other postfix operators.

Note that a single token look-ahead is required to distinguish between cases 1 and 3.  Nevertheless, this may result in some confusingly inconsistent parsing behavior.

``` c#
_ = a + b .. c; // (a + b) .. c
_ = a + b ..;   // a + (b ..)
```

This confusion could be eliminated by moving the precedence of the binary form from where it is (between *shift* and *additive*) to between *unary* and *multiplicative*:

``` c#
_ = a + b .. c; // a + (b .. c)
_ = a + b ..;   // a + (b ..)
```

This final syntactic proposal is summarized by the following grammar:

``` c#
multiplicative_expression
    : range_expression
    | multiplicative_expression '*' range_expression
    | multiplicative_expression '/' range_expression
    | multiplicative_expression '%' range_expression
    ;

range_expression
    : unary_expression
    | range_expression '..' unary_expression
    ;

unary_expression
    : prefix_range
    ; // plus all the other forms

prefix_range:
    : '..' unary_expression
    ;

primary_no_array_creation_expression:
    : primary_range
    ; // plus all the other forms

primary_range:
    : primary_expression '..'
    | '..'
    ;
```

There remain some small ambiguities (which admittedly are *caused* by using difference precedence levels).

- Is `.. ..` to be parsed as `.. (..)` or `(..) ..`?
- Is `.. .. e` to be parsed as `.. (.. e)` or `(..) .. (e)`?
- Is `.. e ..` to be parsed as `.. (e ..)` or `(.. e) ..`?
- Is `e1 .. .. e2` to be parsed as `e1 .. (.. e2)` or `(e1 ..) .. e2`?

Note that these are all semantic errors (as there is no form of the range operator that takes a range as an operand).

I suggest the former in all cases, which would permit limited look-ahead in the parser (look-ahead would be needed to distinguish the parses of `.. .. e` from `.. ..` for a different resolution).

An alternative approach is to simply move the precedence to the suggested level for all forms of `..` and give an error for precedence inversions, which should now be much less likely.

Anothed ambiguity arises from combination with other operators that have both a unary and binary form.  What is the meaning of `.. + a` or `.. - a`?
1. `.. (+ a)`
2. `(..) + a`

Do we have some systematic way of answering such questions?

Resolution: Make the proposed precedence changes per syntax above, and the disambiguaation rule is that if the token following `..` could start an expression, then it is the right-hand-side operand of the range operator.

</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36513</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense changes existing, correct variable to differently capitalized type of the same name</Title>
    <Description>**Version Used**: Visual Studio 16.2.0 Preview 1.0

**Steps to Reproduce**:

1. Create a C# file with a struct `Structure` and an instance of that `Structure structure`
2. Attempt to autocomplete `structure.`, backspace over the `.` then type in `.` again. 
3. Rinse and repeat.

**Expected Behavior**:

Autocomplete/Intellisense will always provide completions for the valid local variable `structure`. Autocomplete/IntelliSense will never change the `structure` that I typed to `Structure`.

**Actual Behavior**:

As of Visual Studio 16 (perhaps specifically a later preview build), sometimes the `structure` I had previously typed out will be changed to `Structure`. *This appears to be a race condition*, as it does not reproduce every time. 

This is a demonstration of the bug: https://www.youtube.com/watch?v=cEnwzAPYTFc&amp;feature=youtu.be

I am sorry I do not have a 100% reproducible case, but this has been observed for awhile now on multiple PCs since upgrading to Visual Studio 2019 preview.</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36512</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert 35746</Title>
    <Description>In [this PR](https://github.com/dotnet/roslyn/pull/35746) we inadvertently made a change that would cause the language service to fail to initialize if there was no project guid.

Unfortunately there are a lot of projects in the world that depend on this behavior and it is unlikely that we could ship this way.

fixes [AB#915798](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/915798)

CC: @jinujoseph @jasonmalinowski 	@tmat 	</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36511</IssueID>
    <RepoID>1</RepoID>
    <Title>Possibly mistranslated string for "Project" in zh-Hans</Title>
    <Description>(Forked from https://devdiv.visualstudio.com/DevDiv/_workitems/edit/904849)

Can translators please double check this string:

https://github.com/dotnet/roslyn/blob/b07e89b7b30dd36bdfe4cc20c582bfbd980b7846/src/Features/Core/Portable/xlf/FeaturesResources.zh-Hans.xlf#L1546-L1550

It looks incorrect and also matches the Czech string here (are they both wrong, or just one?):

https://github.com/dotnet/roslyn/blob/b07e89b7b30dd36bdfe4cc20c582bfbd980b7846/src/Features/Core/Portable/xlf/FeaturesResources.cs.xlf#L1546-L1550</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36510</IssueID>
    <RepoID>1</RepoID>
    <Title>Can't bang away warning when nullability of constraint type doesn't match </Title>
    <Description>```cs
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

#nullable enable

public class C {
    public int FooMethodIComparer&lt;T, TComparer&gt;(T value, TComparer comparer) where TComparer : IComparer&lt;T&gt;?
    {
        if (comparer == null)
        {
            return FooMethodIComparable(value, new Foo&lt;T, Comparer&lt;T&gt;&gt;(value, Comparer&lt;T&gt;.Default));
        }
        
        // warning CS8631: The type 'TComparer' cannot be used as type parameter 'TComparer' in 
        // the generic type or method 'Foo&lt;T, TComparer&gt;'. Nullability of type argument 
        // 'TComparer' doesn't match constraint type 'System.Collections.Generic.IComparer&lt;T&gt;'.
        return FooMethodIComparable(value, new Foo&lt;T, TComparer&gt;(value, comparer));
    }
    
    public int FooMethodIComparable&lt;T, TComparable&gt;(T value, TComparable comparable) where TComparable : IComparable&lt;T&gt;
    {
        
        return comparable.CompareTo(value);
    }
}

public class Foo&lt;T, TComparer&gt; : IComparable&lt;T&gt; where TComparer : IComparer&lt;T&gt;
{
	private readonly T _value;
    private readonly TComparer _comparer;
    
    public Foo(T value, TComparer comparer)
    {
    	_value = value;
        _comparer = comparer;
    }

    public int CompareTo(T other) =&gt; _comparer.Compare(_value, other);
}
```

I think people should be allowed to bang this warning away on the generic type use

 ```cs
return FooMethodIComparable(value, new Foo&lt;T, TComparer!&gt;(value, comparer));
```

Gives a syntax error. So this forces me to either use a pragma warning disable, or make my class `Foo&lt;T, TComparer&gt;` to accept an `IComparer&lt;T&gt;?` and then bang away the call to `_comparer!.Compare(_value, other)` because I know `_comparer` will not be null.

Also, when I'm creating the instance of this class, the compiler can identify that `TComparer` is will not be null at the callsite because I'm doing a null check on it:
```cs
if (comparer == null)
{
    return FooMethodIComparable(value, new Foo&lt;T, Comparer&lt;T&gt;&gt;(value, Comparer&lt;T&gt;.Default));
}

return FooMethodIComparable(value, new Foo&lt;T, TComparer&gt;(value, comparer));
```

[Repro can be found here](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEBMBGAsAKBQBgAIUMAWAblwOIwDoAlAVwDsYBLMOWgYQHswADmwA2iAMqIAbmwDGcKJRy4AxM0bDhEYKMJxmW0bioBmYmkLdCAb1yE7xU21aEAYr14BZODAAWvACYAknyCEAiIADwAKgA0hFEhAmGIAHwAFFGEkhDCjHBxCfxJ4QiEMkXJCACUhADuPohw8YmVhCCEwRUl0SkA/Lb2Njj2I4RsAGaEaeWhJYQAvPOEahpVA6PW6xv2KADsru5evgGdswZwadm5+ctwtQe80XEt3VEp6Vd5z12Rb7QAInBxhB1DAqlVFNtCABfLYjOE7fZuTzePxBF7nS45L63e7Ip7NH4ID7Ym4zYqIcGQ+yw4b2LYoRzOZFHNGnYrnAmFM7aODpTKfG7cjm8spdc41eqNQk8nTtdlhTlvLZDKEIux7MWyrgvOBRXhY64Qra02kmMwPLm64ltDoY3k9OoNcIyimleXWnq4IYASAECDY2XghHCEH8vGYwgAnvFCAB9QXUuz+wMQYOh8ORmPC1px8mVJOEBmmZEZLKkgrWrVutZ0uyq+w+hOkhbl66FkZ5omt/MlQtmusOMbOXX6su8XyUhYpeO9xA8H5pZvXOIT53GnDQoA===)

So maybe the warning on `FooMethodIComparable(value, new Foo&lt;T, TComparer&gt;` should never be produced?

cc: @dotnet/nullablefc @cston </Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36509</IssueID>
    <RepoID>1</RepoID>
    <Title>Error for legal code</Title>
    <Description>VSF_TYPE_MARKDOWNThere is a lot of small problems with new Visual Studio which I didn't have with previous versions. One of those small things which really annoy me is the thing that I want to report in this issue. I am sorry if it's duplicate, I wasn't able to find any.

Consider following code with cursor position marked $$
```csharp
var hostBuilder = new HostBuilder()
    .ConfigureLogging((host, logging) =&gt; logging
        .AddConsole()
        .SetMinimumLevel$$);
```

Last two lines are marked as error which needs to be fixed. There is not even suggestion to use extension method with `LogLevel` after typing `(`. Only after fully typing 

```csharp
var hostBuilder = new HostBuilder()
    .ConfigureLogging((host, logging) =&gt; logging
        .AddConsole()
        .SetMinimumLevel(LogLevel.Debug));
```

ide realizes it's valid code. This behaviour is annoying because I want to be able to have same experience as for first extension in chain as for second and following extensions. I hope I described this issue well. In case more information is necessary I will provide any information you ask for because this thing annoy me really a lot. 

I am also sending screenshot with this feedback.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/608774/error-for-legal-code.html
VSTS ticketId: 922750_
_These are the original issue comments:_

Visual Studio Feedback System on 6/17/2019, 01:58 AM (8 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36508</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixed IDE services touching `notnull` constraint</Title>
    <Description>
    </Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36507</IssueID>
    <RepoID>1</RepoID>
    <Title>[QUESTION] Should IDE0067 be disabled in UnitTest ?</Title>
    <Description>**Version Used**:
`global.json` &gt; `2.2.300`
`&lt;LangVersion&gt;latest&lt;/LangVersion&gt;`
Vs2019 16.2.0

**Steps to Reproduce**:

1. `dotnet new xunit`
2. Add a Unit test method
3. `var foo = new HttpRequestMessage`
4. Should i be warned about it ?

I do have a `Directory.Build.props` in the `test` folder so i guess there is a way to change that behavior ?

**Expected Behavior**:
Not sure but since unit test are short lived in their own `dotnet test` execution, should this be raised ?
But is that intended to affect unit test ? It's going to add "noise" in the test when someone go read them.
I don't mind adding it for good reasons but since unit test are short lived / process destroyed right after, i'm really surprised</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36506</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 16.1.3 - For To Foreach Bug CS1656</Title>
    <Description>VS 16.1.3 converts this for:

```csharp
void M(System.Collections.Generic.List&lt;(string s1, string s2)&gt; list)
{
    for (int i = 0; i &lt; list. Count; i++)
    {
        list[i] = ("a", "b");
    }
}
```

To this foreach:

```csharp
void M(System.Collections.Generic.List&lt;(string s1, string s2)&gt; list)
{
    foreach ((string s1, string s2) v in list)
    {
        v = ("a", "b");
    }
}
```

Which fails to compile with CS1656.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/608684/vs-1613-for-to-foreach-bug-cs1656.html
VSTS ticketId: 919078_
_These are the original issue comments:_

Visual Studio Feedback System on 6/17/2019, 01:46 AM (7 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36505</IssueID>
    <RepoID>1</RepoID>
    <Title>implement interface quickfix doesn't implement methods with default implementations</Title>
    <Description>VSF_TYPE_MARKDOWNThe Implement Interface Quickfix doesn't work the way I expect it to WRT to interfaces with default implementations, it completely ignores interfaces with default implementations. I can't scaffold a new class with all members.

The Implement Interface quickfix does not appear if an interface is comprised of only default implementations.

```C#
    public interface IBlah
    {
        Thing GetThing() =&gt; throw new NotImplementedException();
    }

    public class Blah : IBlah
    {
    }
```

The implement interface quickfix does not implement methods with default implementations

```C#
    public interface IBlah
    {
        Thing GetThing() =&gt; throw new NotImplementedException();

        Thing GetAnotherThing();
    }

    public class Blah : IBlah
    {
        public Thing GetAnotherThing()
        {
            throw new NotImplementedException();
        }
    }
```

The current behaviour of the Implement Interface quickfix seems to assume that there will only be one revision of an interface and nobody in the future will want to write an implementation from scratch.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/609081/implement-interface-quickfix-doesnt-implement-meth.html
VSTS ticketId: 922870_
_These are the original issue comments:_

Steve Goodwin on 6/16/2019, 02:06 AM (31 hours ago): I'd prefer to see an attribute that allows methods to opt-out of being scaffolded, and the default behaviour is to implement the entire interface.&lt;br&gt;&lt;br&gt;    public interface IBlah&lt;br&gt;    \{&lt;br&gt;        [Scaffold(false)]&lt;br&gt;        Thing GetThing() =&gt; throw new NotImplementedException();&lt;br&gt;&lt;br&gt;        Thing GetAnotherThing();&lt;br&gt;    }&lt;br&gt;
Visual Studio Feedback System on 6/17/2019, 02:17 AM (7 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Steve Goodwin on 6/17/2019, 03:28 AM (5 hours ago): I've been having a think about this, and it's a conflict between traits where interface implementation is intentional and extending an existing interface where, IMO, the most likely implementation will be:&lt;br&gt;&lt;br&gt;    MyNewMethod() =&gt; throw new NotImplementedException();&lt;br&gt;&lt;br&gt;Given 100% of existing .Net interfaces are pure interfaces, I suggest the Implement Interface's quickfix behaviour I've observed is not desirable as it's current behaviour is not going to be useful for years.&lt;br&gt;&lt;br&gt;
Steve Goodwin on 6/17/2019, 03:33 AM (5 hours ago): Oh! Another argument against current behaviour. If I have a non-async interface with say 50 methods, and then introduce a new version with async versions of the 50 methods, that's going to tedious to copy and paste the 50 methods into my class.&lt;br&gt;&lt;br&gt;I'll stop now :-)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36504</IssueID>
    <RepoID>1</RepoID>
    <Title>[VB] Type inference fails on inner type of jagged array literals</Title>
    <Description>**Version Used**: VS2015

**Code to Reproduce**: (also available in [fiddle](https://dotnetfiddle.net/mT682w))

```vb
'This works, and prints: 'System.String[]'
Dim array1 As String() = {}
Console.WriteLine(array1.GetType()) 

'The following line fails at runtime with the error: 
'"System.InvalidCastException: Unable to cast object of type 
'System.Object[]' to type 'System.String[]'."
Dim array2 As String()() = {({})}
Console.WriteLine(array2(0).GetType()) 'Never executes, but would say 'System.Object[]'.
```
**Expected Behavior**:
Type inference should type the RHS of the expression {({})} as declared on the left side: `String()()` i.e. an array of an array of String.

**Actual Behavior**:
The outer array `{ ... }` on the RHS is correctly typed as `String()` like on the LHS, but the inner array `({})` is incorrectly typed as `Object()`, which results in the error message above.

(Also, this is not caught at compile-time, only at runtime, which just crashed our production app.)

Further reference:
https://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable#to-initialize-a-jagged-array-variable-by-using-array-literals</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36503</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should infer discard's type from assignment source and shouldn't warn about mismatching nullability with a discard</Title>
    <Description>**Version Used**: 

Branch master (15 Jun 2019)
Latest commit 34d366 by Jason Malinowski:
Merge pull request #36345 from jasonmalinowski/unskip-test

Re-enable MSBuildWorkspaceTests.TestEditorConfigDiscovery

**Steps to Reproduce**:

```cs
#nullable enable
interface I&lt;in T&gt; {}

class C
{
  void M4(I&lt;I&lt;string?&gt;&gt; i1, I&lt;I&lt;string&gt;?&gt; i2)  
  {
    _ = i2 ?? i1; // incorrect warning
    I&lt;I&lt;string&gt;?&gt; x = i2 ?? i1; // correct warning. This is the inferred type of `_` at the line above according to the warning message
    I&lt;I&lt;string?&gt;&gt; y = i2 ?? i1; // this line proves that i2 and i1 doesn't have warnings from conversions in null coalescing expression
    var z = i2 ?? i1; // this line proves that type inference works correctly with 'var' but not with discards

    var q = (_ = i2 ?? i1); // inferring incorrect type for `_ = i2 ?? i1` changes type of `q`
    q = z; // and makes nullability of `q` and `z` incompatible
  }
}
```

**Expected Behavior**:
No warnings for the line `_ = i2 ?? i1;`

**Actual Behavior**:
`warning CS8619: Nullability of reference types in value of type 'I&lt;I&lt;string?&gt;&gt;' doesn't match target type 'I&lt;I&lt;string&gt;?&gt;'.` is reported for `_ = i2 ?? i1;`

**Notes**
I've explained the problem in comments to the original code.
There's no problems converting `i1` or `i2` to the result type of a null coalescing expression as proven by the lines 3 and 4. The inferred result type of the discard is incorrect, it should be the same as `var`.

I believe discards should always have its type equal to the source of assignment. Otherwise adding a discard will change the result type as demonstrated by the variable `q` in the code above</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36502</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 "Use discard" changes semantics with "using"</Title>
    <Description>**Version Used**: 
3.2.0-beta3-19307-02+a87b8ee11cb50f233d288cf86b99e315a408afa4

**Steps to Reproduce**:
1. Use this program
```C#
using System;

class Program
{
    static void Main()
    {
        using var write = new WriteOnDispose();
        Console.WriteLine("almost done");
    }

    class WriteOnDispose : IDisposable
    {
        public void Dispose() =&gt; Console.WriteLine("done");
    }
}
```

2. Refactor:
![image](https://user-images.githubusercontent.com/2642209/59606591-88e00400-90df-11e9-97cf-4a80268787fc.png)

3. See the resulting program:
```C#
using System;

class Program
{
    static void Main()
    {
        _ = new WriteOnDispose();
        Console.WriteLine("almost done");
    }

    class WriteOnDispose : IDisposable
    {
        public void Dispose() =&gt; Console.WriteLine("done");
    }
}
```

**Expected Behavior**:
Either the refactoring shouldn't be offered, or it should be done in a way that doesn't remove the `using`.  After refactoring the program should still output:
```
almost done
done
```


**Actual Behavior**:
The `using` gets removed, which means the disposable's Dispose method is never invoked.  The refactored program only outputs:
```
almost done
```</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36501</IssueID>
    <RepoID>1</RepoID>
    <Title>DocumentId is changing in newly added Document after workspace applies changes</Title>
    <Description>**Version Used**: 
It happens in VS2019, it does not happen in VS2017

**Steps to Reproduce**:

1.  Try to run this example:
```
using System.Collections.Generic;
using System.Composition;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeRefactorings;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Formatting;
using Microsoft.CodeAnalysis.Simplification;
using Microsoft.CodeAnalysis.Text;

namespace ImplementNotifyPropertyChangedCS {
    [ExportCodeRefactoringProvider(LanguageNames.CSharp, Name = "SampleRefactoring"), Shared]
    internal partial class SampleCodeRefactoringProvider : CodeRefactoringProvider {
        public sealed override Task ComputeRefactoringsAsync(CodeRefactoringContext context) {
            Document document = context.Document;
            CancellationToken cancellationToken = context.CancellationToken;
            CodeAction action = CodeAction.Create(
                "Sample Refactoring",
                c =&gt; ExecuteAsync(document, c),
                equivalenceKey: nameof(SampleCodeRefactoringProvider));

            context.RegisterRefactoring(action);
            return Task.CompletedTask;
        }

        private async Task&lt;Document&gt; ExecuteAsync(Document document, CancellationToken cancellationToken) {
            var code = @"using System;
namespace SampleRefactoring
{
    public class SampleClass
    {
    }
}";
            var newDocument = document.Project.AddDocument("SampleClass.cs", SourceText.From(code));
            var documentId = newDocument.Id;
            newDocument = await Formatter.FormatAsync(newDocument, Formatter.Annotation, cancellationToken: cancellationToken).ConfigureAwait(false);
            await Application.Current.Dispatcher.InvokeAsync(() =&gt; {
                var workspace = document.Project.Solution.Workspace;
                workspace.TryApplyChanges(newDocument.Project.Solution);
                var addedDocument = workspace.CurrentSolution.GetDocument(documentId);
                Debug.Assert(addedDocument != null);
            });
            return document;
        }
    }
}
```

**Expected Behavior**:
addedDocument is not null

**Actual Behavior**:
addedDocument is null. There is proper document in the solution, but it has different DocumentId
</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36500</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Building, Debugging, and Testing on Windows.md</Title>
    <Description>Added direct link to the "Upgrading existing Windows PowerShell" heading and clarified that you still have to upgrade Power Shell even if you are on Windows 8.1 (like I am) not just Windows 7.</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36499</IssueID>
    <RepoID>1</RepoID>
    <Title>How to compile scripts efficiently?</Title>
    <Description>When compiling dynamically, are there any optimization options, such as ScriptString with Inline-Attribute, configuration with Release-Options, and so on?

I hope to be able to compile high-performance code.

Here is the code:
https://github.com/dotnetcore/Natasha/blob/master/Natasha/Engine/ComplieModule/ScriptComplieEngine.cs#L148-L159

In addition, although my needs have been met now, I would like to ask if there will be any significant improvements in the future for CSharpCompilation.

</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36498</IssueID>
    <RepoID>1</RepoID>
    <Title>Inconsistent behavior for report of IDE0067(DisposeObjectsBeforeLosingScope)</Title>
    <Description>**Version Used**: 
`3.2.0-beta2-19303-01 (c9689b7a)`

**Steps to Reproduce**:
See IDE0067 is reported in some case but not for others.
```cs
using System.Collections.Generic;
using System.Threading;

public class Class1
{
    readonly List&lt;CancellationTokenSource&gt; list1 = new List&lt;CancellationTokenSource&gt;();
    readonly Stack&lt;CancellationTokenSource&gt; list2 = new Stack&lt;CancellationTokenSource&gt;();

    public void Test001()
    {
        list1.Add(new CancellationTokenSource());//1:not reported
        list2.Push(new CancellationTokenSource());//2:reported
        var cts = new CancellationTokenSource();//3:reported
        CancellationTokenRegistration cr = cts.Token.Register(() =&gt; { });//4:not reported
        //cr.Dispose();//CancellationTokenRegistration is IDisposable
    }
}
```
**Expected Behavior**:
1 and 2 should both be reported or not;
3 is OK;
4 should be reported.

**Actual Behavior**:
IDE0067 is reported for 2,3 but not for 1,4</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36497</IssueID>
    <RepoID>1</RepoID>
    <Title>UseImplicitType incorrectly offered on `out _ `</Title>
    <Description>![image](https://user-images.githubusercontent.com/12466233/59576565-2a7e3b80-9075-11e9-8d0f-b085f873b16f.png)
</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36496</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler "Failed to emit module" with empty var tuple pattern</Title>
    <Description>The following program does not compile:
``` c#
public class C
{
    public static void Main() { }
    public void M(C c)
    {
        if (c is var ()) { }
    }
    public void Deconstruct() { }
}
```
The error is "error CS7038: Failed to emit module"
</Description>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36495</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider adding a way to add information to all reported diagnostics</Title>
    <Description>I'm building a tool to process the errorlog and I need to know the assembly, type and member each diagnostic of a successful compilation for each reported diagnostic.</Description>
    <CreatedDate>16/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36494</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not suggest or diagnose use compound assignment when right hand of…</Title>
    <Description>… binary operator is a throw expression

Fixes https://github.com/dotnet/roslyn/issues/36467</Description>
    <CreatedDate>16/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36493</IssueID>
    <RepoID>1</RepoID>
    <Title>Preserve local function preceding whitespace for Issue #35489</Title>
    <Description>This resolves #35489 by preserving the original trivia in the 'Make local function static' code fix. </Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>02/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36492</IssueID>
    <RepoID>1</RepoID>
    <Title>Bug: Generic Default Value Literal with == operator</Title>
    <Description>**Version Used**:  7.3

**Steps to Reproduce**:

1. Attempt to compile the following

```c#
public void Foo&lt;T&gt;(T value){

    if (value == default)
}
```
**Expected Behavior**: Compile error similar to `value == default(T)`

```c#
public void Foo&lt;T&gt;(T value){

    if (value == default(T)) // &lt;--- compile error as expected
}
```


**Actual Behavior**: compiles into a null check for all types including value types and leads to situations where when `T is int` and `value=0`, `value == default` evaluates to false.
</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>25/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36491</IssueID>
    <RepoID>1</RepoID>
    <Title>Show &lt;value&gt; documentation in Metadata as Source and Object Browser</Title>
    <Description>* Show `&lt;value&gt;` documentation in Metadata as Source
* Show `&lt;value&gt;` documentation in Object Browser

This establishes the initial data flow and first features as a prerequisite for #31618 and #8627.</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36490</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36489</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36488</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36487</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36486</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36485</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36484</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36483</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36482</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36481</IssueID>
    <RepoID>1</RepoID>
    <Title>return Guid.Default if no Guid is present in the project</Title>
    <Description>In [this PR](https://github.com/dotnet/roslyn/pull/35746) we inadvertently made a change that would cause the language service to fail to initialize if there was no project guid.

Unfortunately there are a lot of projects in the world that depend on this behavior and it is unlikely that we could ship this way.

fixes [AB#915798](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/915798)

CC: @jinujoseph </Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36480</IssueID>
    <RepoID>1</RepoID>
    <Title>Code Fix for IDE0067 makes code not compile (sometimes?)</Title>
    <Description>**Version Used**: 
VS2019 16.2.0 Preview 2.0
.NET Core (tried with 2.1 and 3.0 Preview 5)

**Steps to Reproduce**:

1. Create new .NET Core project (console, class lib, etc.)
2. Add this code:
```c#
using System;

class Program
{
    static void Main()
    {
        var x = new FooDisposable();

        var y = x.GetSomething();

        Console.WriteLine(y);
    }

    public class FooDisposable : IDisposable
    {
        public int GetSomething() =&gt; 1;
        public void Dispose() =&gt; throw new NotImplementedException();
    }
}
```
3. Accept the code fix suggestion to wrap `x` in a `using` statement for the `new FooDisposable()` expression:
![image](https://user-images.githubusercontent.com/202643/59542216-8c924180-8eb9-11e9-8e65-3468b0a1b030.png)
4. It generates invalid code:
```c#
        using (var x = new FooDisposable())
        {
            var y = x.GetSomething();
        }

        Console.WriteLine(y); // 'y' is no longer in scope here
```

NOTE: For some reason I can't always get this code fix to show up. Sometimes it shows up, sometimes it doesn't, with the exact same code. If I undo/redo/edit the code I can toggle it, but not consistently.

**Expected Behavior**:
I thought code fixes should generate working code - at least in relatively trivial cases? E.g.:
```c#
        using (var x = new FooDisposable())
        {
            var y = x.GetSomething();
            Console.WriteLine(y); // 'y' is still in scope
        }
```

**Actual Behavior**:
Invalid code is generated
</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36479</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36478</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36477</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36476</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36475</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36474</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36473</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36472</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion in a tuple isn't always treated as an expression</Title>
    <Description>1. Update a new console app with this code:

```
static void Main(string[] args)
{
    (int i, string s) tuple;
    Main(args);
}
```

2. Before Main(args), try to write:

```
tuple = (default, null)
```

**Expected:** `default` appears in the completion list
**Actual:** it doesn't.

**Note:** this doesn't happen if you remove the call. I suspect because we're then parsing it as a tuple instead of a cast.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36471</IssueID>
    <RepoID>1</RepoID>
    <Title>Method Declaration and Indexed Variable Lowering/Code Gen</Title>
    <Description>Related to #36024

This only covers the base case of method declarations and indexed variables. __arglist is prototyped due to the question of handling its parameters (right now null-checked parameters to arglist are being incorrectly typed as postfix expressions).</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36470</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix configuration of accessibilities in editorconfig</Title>
    <Description>🤦‍♂️</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36469</IssueID>
    <RepoID>1</RepoID>
    <Title>Added null checks on F# external access services</Title>
    <Description>We need to check for nulls when we map F# types to Roslyn types, vice versa, for the shim work. We got a crash in `FSharpSignatureHelpProvider` for this reason. I fixed the sig help provider, but I also put more null checks in the other places that potentially could need it.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36468</IssueID>
    <RepoID>1</RepoID>
    <Title>Use implicit type Fix All should simplify deconstructions</Title>
    <Description>**Version Used**: 16.2 Preview 2

**Steps to Reproduce**:

1. Always prefer `var`
2. Write a deconstruction variable declaration as:

    ```csharp
    (bool x, bool y) = (true, true);
    ```

3. Apply a Fix All in Document to use implicit types

**Expected Behavior**:

```csharp
var (x, y) = (true, true);
```

**Actual Behavior**:

```csharp
(var x, var y) = (true, true);
```</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36467</IssueID>
    <RepoID>1</RepoID>
    <Title>Coalesce expressions do not allow throw expressions on the right hand side</Title>
    <Description>**Version Used**: 16.2 Preview 2

**Steps to Reproduce**:

```csharp
diagnosticId = diagnosticId ?? throw new ArgumentNullException(nameof(diagnosticId));
```

**Expected Behavior**:

No suggestion is made to use `??=` shorthand.

**Actual Behavior**:

A diagnostic appears, and the code fix changes the statement to the following invalid code:

```csharp
diagnosticId ??= throw new ArgumentNullException(nameof(diagnosticId));
```</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36466</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid emitting NullableAttribute annotations for lambdas and local functions</Title>
    <Description>See https://github.com/dotnet/roslyn/pull/36398#discussion_r293925385.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36465</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Extract the RDT implementation for Misc files and VS open file tracker"</Title>
    <Description>Reverts dotnet/roslyn#36006</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36464</IssueID>
    <RepoID>1</RepoID>
    <Title>(rebased) Add 'annotations' and 'warnings' support to nullable directive</Title>
    <Description>Resolves #35730. Resolves #35748. Resolves #35747.

You may wish to review this PR commit-by-commit, as several of the commits are just boilerplate to add or remove keywords from syntax nodes, etc.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36463</IssueID>
    <RepoID>1</RepoID>
    <Title>Shorten a resource ID</Title>
    <Description>The resource in question has an ID that is 414 characters long. This is
apparently too long for some of the tools used by the loc team, blocking
parts of their processes. The exact failure mechanism is not well
understood but in order to avoid problems with the final loc pass for
16.2 I'm just going to go ahead and shorten it.

Unfortunately no one knows how long resource IDs can be before they
cause problems. At the suggestion of the loc team I'm shortening this
one by 50 characters which lines up nicely with a natural break in the ID.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36462</IssueID>
    <RepoID>1</RepoID>
    <Title>Add EditorFeatures.WPF dependency to F# ExternalAccess</Title>
    <Description>When EditorFeatures.WPF package reference was marked as private assets in M.VS.LanguageServices those that implicitly depended on it need to explicitly depend on it.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36461</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP: Get IVsHierarchy from AbstractProject if not available via IVsSolution</Title>
    <Description>Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/915798</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36460</IssueID>
    <RepoID>1</RepoID>
    <Title>Stack overflow in MoveCaretToSemicolonPosition</Title>
    <Description>From @David Pugh (internal customer) 
No repro, but I do have a dump: \\dep-2b\public\devenv.exe.17096.dmp
-- when editing in C# in d16.2stg 28922.88 (~3 weeks old)

```
Part of the callstack is below:
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.SyntaxNavigator.GetLastToken(Microsoft.CodeAnalysis.SyntaxToken token, System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken, bool&gt; predicate, System.Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia, bool&gt; stepInto) Line 280          C#
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.SyntaxNavigator.GetLastToken(Microsoft.CodeAnalysis.SyntaxNode current, System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken, bool&gt; predicate, System.Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia, bool&gt; stepInto) Line 156          C#
Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.SyntaxNavigator.GetPreviousToken(Microsoft.CodeAnalysis.SyntaxToken current, System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken, bool&gt; predicate, bool searchInsideCurrentTokenLeadingTrivia, System.Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia, bool&gt; stepInto) Line 612                C#
Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.FindTokenOnLeftOfPosition(Microsoft.CodeAnalysis.SyntaxNode root, int position, bool includeSkipped, bool includeDirectives, bool includeDocumentationComments) Line 680   C#
Microsoft.CodeAnalysis.CSharp.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CSharp.CompleteStatement.CompleteStatementCommandHandler.GetStartingNode(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.VisualStudio.Text.SnapshotPoint caret) Line 95    C#
Microsoft.CodeAnalysis.CSharp.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CSharp.CompleteStatement.CompleteStatementCommandHandler.MoveCaretToSemicolonPosition(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.TypeCharCommandArgs args, Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.VisualStudio.Text.SnapshotPoint caret, Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsService syntaxFacts, Microsoft.CodeAnalysis.SyntaxNode currentNode, bool isInsideDelimiters) Line 132 C#
Microsoft.CodeAnalysis.CSharp.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CSharp.CompleteStatement.CompleteStatementCommandHandler.MoveCaretToSemicolonPosition(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.TypeCharCommandArgs args, Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.VisualStudio.Text.SnapshotPoint caret, Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsService syntaxFacts, Microsoft.CodeAnalysis.SyntaxNode currentNode, bool isInsideDelimiters) Line 153 C#
Microsoft.CodeAnalysis.CSharp.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CSharp.CompleteStatement.CompleteStatementCommandHandler.MoveCaretToSemicolonPosition(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.TypeCharCommandArgs args, Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.VisualStudio.Text.SnapshotPoint caret, Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsService syntaxFacts, Microsoft.CodeAnalysis.SyntaxNode currentNode, bool isInsideDelimiters) Line 153 C#
Microsoft.CodeAnalysis.CSharp.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CSharp.CompleteStatement.CompleteStatementCommandHandler.MoveCaretToSemicolonPosition(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.TypeCharCommandArgs args, Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.VisualStudio.Text.SnapshotPoint caret, Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsService syntaxFacts, Microsoft.CodeAnalysis.SyntaxNode currentNode, bool isInsideDelimiters) Line 134 C#
Microsoft.CodeAnalysis.CSharp.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CSharp.CompleteStatement.CompleteStatementCommandHandler.MoveCaretToSemicolonPosition(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.TypeCharCommandArgs args, Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.VisualStudio.Text.SnapshotPoint caret, Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsService syntaxFacts, Microsoft.CodeAnalysis.SyntaxNode currentNode, bool isInsideDelimiters) Line 153 C#
Microsoft.CodeAnalysis.CSharp.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.CSharp.CompleteStatement.CompleteStatementCommandHandler.MoveCaretToSemicolonPosition(Microsoft.VisualStudio.Text.Editor.Commanding.Commands.TypeCharCommandArgs args, Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.VisualStudio.Text.SnapshotPoint caret, Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsService syntaxFacts, Microsoft.CodeAnalysis.SyntaxNode currentNode, bool isInsideDelimiters) Line 153 C#
```</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36459</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a bunch of nullability support to some code generation helpers</Title>
    <Description>This adds more generic plumbing for nullability support to some common helpers. This will ultimately be tested by the code that calls these helpers (which is probably going to be metadata as source which should come very soonish.)</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36458</IssueID>
    <RepoID>1</RepoID>
    <Title>Add nullability support to use local function</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/30322</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36457</IssueID>
    <RepoID>1</RepoID>
    <Title>Report error for explicit use of NullablePublicOnlyAttribute in source</Title>
    <Description>Report error for:
```C#
using System.Runtime.CompilerServices;
[module: NullablePublicOnly]
```</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>03/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36456</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Revert RestrictedIVTs in M.VS.LanguageServices.csproj"</Title>
    <Description>Reverts dotnet/roslyn#36445

The underlying issue was a XAML project (StanCore) not referencing Microsoft.CodeAnalysis.Workspaces, the assembly where `RestrictedInternalsVisibleToAttribute` is defined. The XAML compiler examines assembly attributes, and the lack of this reference meant an exception was thrown when the restricted IVT attribute usage was reached.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36455</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3 to release/dev16.2-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3 into release/dev16.2-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-to-release/dev16.2-preview3-vs-deps
git reset --hard upstream/release/dev16.2-preview3-vs-deps
git merge upstream/release/dev16.2-preview3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-to-release/dev16.2-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36454</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2-vs-deps to release/dev16.2-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2-vs-deps into release/dev16.2-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-vs-deps-to-release/dev16.2-preview3-vs-deps
git reset --hard upstream/release/dev16.2-preview3-vs-deps
git merge upstream/release/dev16.2-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-vs-deps-to-release/dev16.2-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36453</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36452</IssueID>
    <RepoID>1</RepoID>
    <Title>Go To Definition and Go To Implementation do not focus Tab Group</Title>
    <Description>**Version Used**: 
16.1.3

**Steps to Reproduce**:
![image](https://user-images.githubusercontent.com/15267485/59499540-e2ee8880-8e97-11e9-9ba1-6a3bfcaf92e0.png)

1. Open Class1 in one Tab Group
2. Open Class2 and its interface their own Tab Groups
3. Make sure the caret is NOT on the Foo() line in both Class2 and IClass2
4. In Class1.CallFoo(), put caret on the call to Foo()
5. Now "Go To Definition".
6. The IClass2 editor reacts and makes the Foo definition selected, but the caret is still in Class1:
![image](https://user-images.githubusercontent.com/15267485/59500156-2a294900-8e99-11e9-81e2-527d0217f5af.png)
7. Press Ctrl+Tab to select the IClass2 editor, you can now see that the caret is at the right position but the editor never got activated.

**Expected Behavior**:
When Go To Definition or Go To Implementation is selected, the target editor should be activated even if it is in a different Tab Group.
**Actual Behavior**:
The target Editor is not activated, but the text of the target method is selected in its editor.
This goes for both Go To Definition and Go To Implementation.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36451</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36450</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36449</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36448</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2 to release/dev16.2-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2 into release/dev16.2-preview2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-to-release/dev16.2-preview2-vs-deps
git reset --hard upstream/release/dev16.2-preview2-vs-deps
git merge upstream/release/dev16.2-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-to-release/dev16.2-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36447</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36446</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2 to release/dev16.2-preview3</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2 into release/dev16.2-preview3.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-to-release/dev16.2-preview3
git reset --hard upstream/release/dev16.2-preview3
git merge upstream/release/dev16.2-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-to-release/dev16.2-preview3 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36445</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert RestrictedIVTs in M.VS.LanguageServices.csproj</Title>
    <Description>Fixes failing cloudbuild which is blocking insertion - https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=2765773&amp;_a=summary</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36444</IssueID>
    <RepoID>1</RepoID>
    <Title>Honor Disallow/AllowNull and Maybe/NotNull on properties</Title>
    <Description>- `DisallowNull` on a property means that we'll warn if you assign a maybe-null state to that property (in assignment or compound assignment).
- `AllowNull` means that we relax the type of the property for the purpose of assigning to it.
- `MaybeNull` and `NotNull` affect the null-state of the property (RValue).

Indexer properties are also covered.

I've made some improvements to operator scenarios I encountered, but we have a follow-up issue to analyze operators and honor attributes more throroughly.

Relates to https://github.com/dotnet/roslyn/issues/35816 (work items for annotation attributes)
Closes https://github.com/dotnet/roslyn/issues/28792 (expect no warning on `t?.ToString()` for unconstrained `T`)</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36443</IssueID>
    <RepoID>1</RepoID>
    <Title>Compound Assignment when ref temps are required crashes the compiler</Title>
    <Description>```C#
using System;
using System.Threading.Tasks;
struct S
{
    int? i;

    static async Task Main()
    {    

        S s = default;
        Console.WriteLine(s.i += await GetInt());
    }

    static Task&lt;int?&gt; GetInt() =&gt; Task.FromResult((int?)1);
}
```
This code crashes the compiler with the following stack:
&lt;details&gt;

```
Message: 
    System.InvalidOperationException : Unexpected value 'Local' of type 'Microsoft.CodeAnalysis.CSharp.BoundKind'
    
  Stack Trace: 
    at ThrowingTraceListener.Fail(String message, String detailMessage) in ThrowingTraceListener.cs line: 24
    at TraceListener.Fail(String message)
    at TraceInternal.Fail(String message)
    at Debug.Assert(Boolean condition, String message)
    at ExceptionUtilities.UnexpectedValue(Object o) in ExceptionUtilities.cs line: 18
    at MethodToStateMachineRewriter.HoistExpression(BoundExpression expr, AwaitExpressionSyntax awaitSyntaxOpt, Int32 syntaxOffset, RefKind refKind, ArrayBuilder`1 sideEffects, ArrayBuilder`1 hoistedFields, Boolean&amp; needsSacrificialEvaluation) in MethodToStateMachineRewriter.cs line: 606
    at MethodToStateMachineRewriter.HoistExpression(BoundExpression expr, AwaitExpressionSyntax awaitSyntaxOpt, Int32 syntaxOffset, RefKind refKind, ArrayBuilder`1 sideEffects, ArrayBuilder`1 hoistedFields, Boolean&amp; needsSacrificialEvaluation) in MethodToStateMachineRewriter.cs line: 549
    at MethodToStateMachineRewriter.HoistRefInitialization(SynthesizedLocal local, BoundAssignmentOperator node) in MethodToStateMachineRewriter.cs line: 484
    at MethodToStateMachineRewriter.VisitAssignmentOperator(BoundAssignmentOperator node) in MethodToStateMachineRewriter.cs line: 779
    at BoundAssignmentOperator.Accept(BoundTreeVisitor visitor) in BoundNodes.xml.Generated.cs line: 1507
    at BoundTreeVisitor.Visit(BoundNode node) in BoundTreeVisitors.cs line: 145
    at BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) in BoundTreeRewriter.cs line: 97
    at BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) in BoundTreeVisitors.cs line: 223
    at BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) in BoundTreeVisitors.cs line: 204
    at BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in BoundTreeRewriter.cs line: 84
    at MethodToStateMachineRewriter.Visit(BoundNode node) in MethodToStateMachineRewriter.cs line: 658
    at AsyncMethodToStateMachineRewriter.VisitExpressionStatement(BoundExpressionStatement node) in AsyncMethodToStateMachineRewriter.cs line: 272
    at BoundExpressionStatement.Accept(BoundTreeVisitor visitor) in BoundNodes.xml.Generated.cs line: 3023
    at BoundTreeVisitor.Visit(BoundNode node) in BoundTreeVisitors.cs line: 145
    at BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in BoundTreeRewriter.cs line: 87
    at MethodToStateMachineRewriter.Visit(BoundNode node) in MethodToStateMachineRewriter.cs line: 658
    at BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) in BoundTreeRewriter.cs line: 37
    at BoundTreeRewriter.VisitList[T](ImmutableArray`1 list) in BoundTreeRewriter.cs line: 26
    at MethodToClassRewriter.VisitBlock(BoundBlock node) in MethodToClassRewriter.cs line: 139
    at MethodToStateMachineRewriter.&lt;&gt;n__0(BoundBlock node)
    at &lt;&gt;c__DisplayClass42_0.&lt;VisitBlock&gt;b__0() in MethodToStateMachineRewriter.cs line: 665
    at MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped) in MethodToStateMachineRewriter.cs line: 301
    at MethodToStateMachineRewriter.VisitBlock(BoundBlock node) in MethodToStateMachineRewriter.cs line: 665
    at BoundBlock.Accept(BoundTreeVisitor visitor) in BoundNodes.xml.Generated.cs line: 2673
    at BoundTreeVisitor.Visit(BoundNode node) in BoundTreeVisitors.cs line: 145
    at BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in BoundTreeRewriter.cs line: 87
    at MethodToStateMachineRewriter.Visit(BoundNode node) in MethodToStateMachineRewriter.cs line: 658
    at BoundTreeRewriter.VisitSequencePoint(BoundSequencePoint node) in BoundNodes.xml.Generated.cs line: 9546
    at BoundSequencePoint.Accept(BoundTreeVisitor visitor) in BoundNodes.xml.Generated.cs line: 2614
    at BoundTreeVisitor.Visit(BoundNode node) in BoundTreeVisitors.cs line: 145
    at BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in BoundTreeRewriter.cs line: 87
    at MethodToStateMachineRewriter.Visit(BoundNode node) in MethodToStateMachineRewriter.cs line: 658
    at BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) in BoundTreeRewriter.cs line: 37
    at BoundTreeRewriter.VisitList[T](ImmutableArray`1 list) in BoundTreeRewriter.cs line: 26
    at MethodToClassRewriter.VisitBlock(BoundBlock node) in MethodToClassRewriter.cs line: 139
    at MethodToStateMachineRewriter.&lt;&gt;n__0(BoundBlock node)
    at &lt;&gt;c__DisplayClass42_0.&lt;VisitBlock&gt;b__0() in MethodToStateMachineRewriter.cs line: 665
    at MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped) in MethodToStateMachineRewriter.cs line: 301
    at MethodToStateMachineRewriter.VisitBlock(BoundBlock node) in MethodToStateMachineRewriter.cs line: 665
    at BoundBlock.Accept(BoundTreeVisitor visitor) in BoundNodes.xml.Generated.cs line: 2673
    at BoundTreeVisitor.Visit(BoundNode node) in BoundTreeVisitors.cs line: 145
    at BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in BoundTreeRewriter.cs line: 87
    at MethodToStateMachineRewriter.Visit(BoundNode node) in MethodToStateMachineRewriter.cs line: 658
    at AsyncMethodToStateMachineRewriter.VisitBody(BoundStatement body) in AsyncMethodToStateMachineRewriter.cs line: 255
    at AsyncMethodToStateMachineRewriter.GenerateMoveNext(BoundStatement body, MethodSymbol moveNextMethod) in AsyncMethodToStateMachineRewriter.cs line: 121
    at AsyncRewriter.GenerateMoveNext(SynthesizedImplementationMethod moveNextMethod) in AsyncRewriter.cs line: 269
    at AsyncRewriter.GenerateMethodImplementations() in AsyncRewriter.cs line: 140
    at StateMachineRewriter.Rewrite() in StateMachineRewriter.cs line: 114
    at AsyncRewriter.Rewrite(BoundStatement bodyWithAwaitLifted, MethodSymbol method, Int32 methodOrdinal, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, AsyncStateMachine&amp; stateMachineType) in AsyncRewriter.cs line: 81
    at MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) in MethodCompiler.cs line: 1346
    at MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) in MethodCompiler.cs line: 1099
    at MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) in MethodCompiler.cs line: 507
    at &lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() in MethodCompiler.cs line: 397
    at &lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() in UICultureUtilities.cs line: 136
    at Task.InnerInvoke()
    at Task.Execute()
    at --- End of stack trace from previous location where exception was thrown ---
```

&lt;/details&gt;

The issue here is that `TransformCompoundAssignmentLHS` can return a `ref` local for the [following case](https://github.com/dotnet/roslyn/blob/d5b8d64b4d840b26c947abd2a00b1070cbee55f0/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_CompoundAssignmentOperator.cs#L622-L635):

https://github.com/dotnet/roslyn/blob/d5b8d64b4d840b26c947abd2a00b1070cbee55f0/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_CompoundAssignmentOperator.cs#L490-L493

The fix is likely to simply issue an understandable error here, instead of throwing an UnreachableCode exception. FYI @jcouv @agocke.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36442</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36441</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36440</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36439</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36438</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36437</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36436</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36435</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert Implement RestrictedInternalsVisibleToAttribute</Title>
    <Description>Reverts https://github.com/dotnet/roslyn/pull/36151

- Revert "Report a warning for missing 'Partner' attribute"
This reverts commit 27288268dff14f19f337cf23242a08b45d59eb34.

- Revert "Move partner-exposed code into an 'Api' namespace"
This reverts commit c1492aa2b600a5d8c11225582a344b612c26ed8b.

- Revert "Remove Microsoft.CodeAnalysis.ExternalAccess.LegacyCodeAnalysis"
This reverts commit 9e1189fb53808486fe595b0584d994f4c8f5218b.

- Revert "Provide external access APIs for LegacyCodeAnalysis"
This reverts commit 7d918b2919f7605354b85ae2db1f9bc4c17507bd.

- Revert "Define RestrictedInternalsVisibleToAttribute"
This reverts commit ebd2fb79e756fa6023e21f33037227abca63d0d1.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36434</IssueID>
    <RepoID>1</RepoID>
    <Title>Add 'annotations' and 'warnings' support to nullable directive</Title>
    <Description>Resolves #35730. Implements part of #35748, specifically:

&gt; - Add support for `#nullable (enable | disable | restore) [ warnings | annotations ])`
&gt; - Track a "nullable warning context"

I'd like to break the remaining parts into another PR for reviewability. `#pragma warning nullable (enable|disable|restore)` is not completely stripped out, but it no longer affects what diagnostics get produced (i.e. it doesn't add or remove from the pragma map)</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36433</IssueID>
    <RepoID>1</RepoID>
    <Title>Loc the Naming Specification Symbol Kinds</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/824308/

In Naming Styles, we previously hadn't been localizing the "Symbol Kinds" list, along with the other two lists there (Accessibilities and Modifiers). We've decided to loc just the "Symbol Kinds" list because the other two lists are exclusively language keywords.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36432</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master into lsp to pickup new RDT changes.</Title>
    <Description>
    </Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36431</IssueID>
    <RepoID>1</RepoID>
    <Title>Better compiler feedback on its determination of a lambda expression's type in C# (VB? C++?)</Title>
    <Description>VSF_TYPE_MARKDOWNThe C# compiler error message:

CS0173 Type of conditional expression cannot be determined because there is no implicit conversion between 'lambda expression' and 'lambda expression'

leaves the developer with very little information about why the compiler thinks the two lambdas in the conditional expression are not the same.

I've provided an example case below, but it's just an example to demonstrate a larger issue. This isn't about this example specifically.  The larger issue is having the compile report the &amp;quot;method signature&amp;quot; it is seeing when working with a lambda rather than just the generic &amp;quot;lambda expression&amp;quot; would be of great benefit.  The developer could then easily see in the reported signature where the compiler most likely is in need of better clarification.

A lot of times the developer can poke around and guess. However I was just faced with a conditional expression where I could find no reason why the compile throught the two lambdas had different signatures.

In my example the lambdas were even so simple and straight-forward they could be expressed as expression bodies (or not, I've tried both ways). The conditional expression result was being assigned to a strongly typed delegate type so no ambiguity there.  Even adding explicit types to the lambda's parameters didn't resolve it.

I finally gave up and resorted to an if-then-else where the compiler demonstrated it had no problem with either lambda separately.

But again, the main point is really having the compiler report the &amp;quot;method signature&amp;quot; it is seeing for a lambda rather than only &amp;quot;lambda expression&amp;quot; could prove very useful to developers in various situations.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/600000/better-compiler-feedback-on-its-determination-of-a.html
VSTS ticketId: 915678_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/11/2019, 00:06 AM (2 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36430</IssueID>
    <RepoID>1</RepoID>
    <Title>Better compiler feedback on its determination of a lambda expression's type in C# (VB? C++?)</Title>
    <Description>VSF_TYPE_MARKDOWNThe C# compiler error message:

CS0173 Type of conditional expression cannot be determined because there is no implicit conversion between 'lambda expression' and 'lambda expression'

leaves the developer with very little information about why the compiler thinks the two lambdas in the conditional expression are not the same.

I've provided an example case below, but it's just an example to demonstrate a larger issue. This isn't about this example specifically.  The larger issue is having the compile report the &amp;quot;method signature&amp;quot; it is seeing when working with a lambda rather than just the generic &amp;quot;lambda expression&amp;quot; would be of great benefit.  The developer could then easily see in the reported signature where the compiler most likely is in need of better clarification.

A lot of times the developer can poke around and guess. However I was just faced with a conditional expression where I could find no reason why the compile throught the two lambdas had different signatures.

In my example the lambdas were even so simple and straight-forward they could be expressed as expression bodies (or not, I've tried both ways). The conditional expression result was being assigned to a strongly typed delegate type so no ambiguity there.  Even adding explicit types to the lambda's parameters didn't resolve it.

I finally gave up and resorted to an if-then-else where the compiler demonstrated it had no problem with either lambda separately.

But again, the main point is really having the compiler report the &amp;quot;method signature&amp;quot; it is seeing for a lambda rather than only &amp;quot;lambda expression&amp;quot; could prove very useful to developers in various situations.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/600000/better-compiler-feedback-on-its-determination-of-a.html
VSTS ticketId: 915678_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/11/2019, 00:06 AM (2 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36429</IssueID>
    <RepoID>1</RepoID>
    <Title>C# "where T : enum"</Title>
    <Description>VSF_TYPE_MARKDOWNOver the years we keep finding ourselves using generics where one of the parms is invariably required to be an enum. Currently the best restriction which can be placed on the parm is &amp;quot;where T : struct&amp;quot;. So rather than imposing an enum restriction at compile time, the restriction gets deferred to runtime.

We actually do impose an explicit check at runtime (assuming we remember) up-front in constructors to signal the problem as early as possible with as minimum a testing sequence as possible. However even static constructors do not run until the class is actually used. The explicit check specifically for Type.IsEnum helps ensure the compiler's willingness to do implicit type conversions isn't masking a problem. 

This would be a nice stepping stone toward (in the future) introducing an Enum&amp;lt;T&amp;gt; class to &amp;quot;modernize&amp;quot; the use of the very ancient Enum class.  The class having extension methods would go a long way toward &amp;quot;moderizing&amp;quot; code that manipulates enums. Of course such a class &amp;quot;could&amp;quot; be introduced without &amp;quot;where T : enum&amp;quot; (we have such a class), but it might lead to backward compatibility concerns if it were to be converted to &amp;quot;where T : enum&amp;quot; after having been introduced as &amp;quot;where T : struct&amp;quot;.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/602871/c-where-t-enum.html
VSTS ticketId: 916592_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/12/2019, 02:24 AM (36 hours ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36428</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix parsing bug in invalid using statements</Title>
    <Description>Don't exit early when parsing invalid local declarations if we know that it couldn't be a local function

Fixes https://github.com/dotnet/roslyn/issues/36413</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36427</IssueID>
    <RepoID>1</RepoID>
    <Title>UI Slowdown and crash - VS2019 Preview 3</Title>
    <Description>Hello,
While editing my code, the UI become suddendly slow.  
It constantly use 25~% of the cpu and progressivly increase it's ram usage, at this point i don't even touch it because it too slow, and the RAM usage is up to 3.5Go, and after a few minutes it crash.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/458384/ui-slowdown-and-crash-vs2019-preview-3.html
VSTS ticketId: 793211_
_These are the original issue comments:_

Visual Studio Feedback System on 2/15/2019, 00:58 AM (118 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_

Nicolas VANDEGINSTE solved on 2/27/2019, 03:30 PM (105 days ago), 0 votes: &lt;p&gt;I discovered that this problem happen when i touch the new switch statements.&lt;/p&gt;
</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36426</IssueID>
    <RepoID>1</RepoID>
    <Title>Eating too much RAM</Title>
    <Description>&lt;p&gt;VSF_TYPE_MARKDOWNHi,&lt;/p&gt;&lt;p&gt;I have installed vs 2019 4.4 update and after that debugging on it is a nightmare.
It’s using too much RAM, going more than 2.8 gb, and is very slow,
just can’t event go through steps, causing raise of a development time.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/508582/eating-too-much-ram-1.html
VSTS ticketId: 830935_
_These are the original issue comments:_

Visual Studio Feedback System on 3/28/2019, 08:00 PM (76 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36425</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36424</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36423</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36422</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36421</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36420</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36419</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36418</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36417</IssueID>
    <RepoID>1</RepoID>
    <Title>The #r directive do not support relative path to local assemblies</Title>
    <Description>Stable version 3.1.0 from GitHub

Try to reference any local dll with the r# directive using a relative path.
1. #r ".\MyLib.dll"
2. Then from code try to call that script by passing its content to 
string scriptContent = File.ReadAllText("pathToCsxFile.csx");
CSharpScript.EvaluateAsync(scriptContent)

**Expected Behavior**:
The script will run fine and load the assembly.

**Actual Behavior**:
The method will throw the following exception: error CS0006: Metadata file '.\MyLib.dll' could not be found. If you have an absolute path like #r "D:\Absolute\Path\To\MyLib.dll", the script will run just fine.

See this post for more details and for a proof that different persons are experiencing the issue:
https://stackoverflow.com/questions/56545907/the-r-directive-in-c-sharp-script-does-not-support-relative-paths/56551834?noredirect=1#comment99726286_56551834</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>16/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36416</IssueID>
    <RepoID>1</RepoID>
    <Title>Add nullable to IntroduceVariableService</Title>
    <Description>Use symbol info on exrpressions to get the nullable type if applicable

Fixes #30318</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36415</IssueID>
    <RepoID>1</RepoID>
    <Title>Stamp emitted assemblies with compiler version</Title>
    <Description>In our discussion about how we emit nullable attributes and we're breaking the format in Core 3 preview7, we realized it would be useful for troubleshooting purposes to record the compiler version into assemblies.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36414</IssueID>
    <RepoID>1</RepoID>
    <Title>MSBuildWorkspace failing (with a WARNING) when loading a .csproj with COMReference</Title>
    <Description>**Version Used**: 
2.10

**Steps to Reproduce**:

I have a `.csproj` with the following `&lt;COMReference&gt;`.

```
  &lt;ItemGroup&gt;
    &lt;COMReference Include="ATLLib"&gt;
      &lt;Guid&gt;{44EC0535-400F-11D0-9DCD-00A0C90391D3}&lt;/Guid&gt;
      &lt;VersionMajor&gt;1&lt;/VersionMajor&gt;
      &lt;VersionMinor&gt;0&lt;/VersionMinor&gt;
      &lt;Lcid&gt;0&lt;/Lcid&gt;
      &lt;WrapperTool&gt;tlbimp&lt;/WrapperTool&gt;
      &lt;Isolated&gt;False&lt;/Isolated&gt;
      &lt;EmbedInteropTypes&gt;True&lt;/EmbedInteropTypes&gt;
    &lt;/COMReference&gt;
    &lt;COMReference Include="stdole"&gt;
      &lt;Guid&gt;{00020430-0000-0000-C000-000000000046}&lt;/Guid&gt;
      &lt;VersionMajor&gt;2&lt;/VersionMajor&gt;
      &lt;VersionMinor&gt;0&lt;/VersionMinor&gt;
      &lt;Lcid&gt;0&lt;/Lcid&gt;
      &lt;WrapperTool&gt;primary&lt;/WrapperTool&gt;
      &lt;Isolated&gt;False&lt;/Isolated&gt;
      &lt;EmbedInteropTypes&gt;True&lt;/EmbedInteropTypes&gt;
    &lt;/COMReference&gt;
  &lt;/ItemGroup&gt;
````

This project is **successfully** compiled with a plain `msbuild` invocation from the command line (no extra arguments or properties specified). This is the log output for the corresponding COM reference resolution.

```
Target "ResolveComReferences" in file "C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\bin\Microsoft.Common.CurrentVersion.targets" from project "C:\Users\leandromelo\Documents\Visual Studio 2017\Projects\WebApplication1COMRef\WebApplication1COMRef\WebApplication1COMRef.csproj" (target
 "ResolveReferences" depends on it):
Task "MakeDir"
Done executing task "MakeDir".
Using "ResolveComReference" task from assembly "Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
Task "ResolveComReference"
  Creating new cache file at "obj\Debug\WebApplication1COMRef.csproj.ResolveComReference.cache".
  Resolving COM reference for item "stdole" with a wrapper "primary".
  Determining dependencies of the COM reference "stdole".
  Resolved COM reference for item "stdole": "C:\Windows\assembly\GAC\stdole\7.0.3300.0__b03f5f7f11d50a3a\stdole.dll".
  Resolving COM reference for item "ATLLib" with a wrapper "tlbimp".
  Determining dependencies of the COM reference "ATLLib".
  Processing COM reference "ATLLib" from path "C:\Windows\SysWOW64\atl.dll". Type 'IDocHostUIHandlerDispatch' imported.
```

However, when I tried to build the same project through the `MSBuildWorspace` - I used `MSBuildLocator.RegisterDefaults()` prior to `MSBuildWorkspace.Create` and, in fact, I only have one MSBuild version in the system, I get the following WARNING in regards to that COM reference.

````
[Failure] Msbuild failed when processing the file 'C:\Users\leandromelo\Documents\Visual Studio 2017\Projects\WebApplication1COMRef\WebApplication1COMRef\WebApplication1COMRef.csproj' with message: C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin\Microsoft.Common.CurrentVersion.targets: (2729, 5): The "ResolveComReference" task could not be instantiated from "Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a". Could not load file or assembly 'Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.
````

Note that in both cases (i.e., through the command line and through API) the `ResolveComReference` task refers to same version of `Microsoft.Build.Tasks.Core`, which is expected. So I don't understand what is going wrong here.

I have a tried some alternatives (too many to enumerate) for tweaking search paths like adding specific MSBuild properties through `/p:name=value` and setting certain environment variables, but nothing solved the issue. 

Does anyone have an insight to share?
</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36413</IssueID>
    <RepoID>1</RepoID>
    <Title>Incremental parsing breaks and crashes VS when adding using variable declaration with incorrect modifiers</Title>
    <Description>Start with the following code:

```C#
namespace N
{
    public class C
    {
        public void F()
        { 
           public readonly int Temp = 0;
           var z = 1;
        }
    }
}
```

Then type `using` in front of `public readonly int Temp = 0;`. 

```C#
namespace N
{
    public class C
    {
       
        public void F()
        { 
          using public readonly int Temp = 0;
          var z = 1;
        }
    }
}
```

VS crashes.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36412</IssueID>
    <RepoID>1</RepoID>
    <Title>problem with intellisense/autocomplete in an IF statement in VB.Net</Title>
    <Description>VSF_TYPE_MARKDOWNDepending upon whether parentheses &amp;quot;()&amp;quot; are used or not, the Visual Studio editor seems to have difficulty with intellisense/autocomplete in VB.Net IF statements.  

For example, in VB.net, what I want to end up with is something like this:

if( gclsEnvironment.LogLevel &amp;gt; 6 )then
    call HandleLogOutput()
    end if

If I type this without using parentheses, autocomplete and intellisense works fine, as expected.  If I try to type it with parentheses, it doesn't work - neither autocomplete nor intellisense.  (In older versions of VS, it did.)  What I end up doing is typing it without parentheses and then going back and adding in parentheses afterwards.  I just like, and am used to, the look of parentheses setting off the logical statement.

All I am asking it that you restore the behavior of previous versions of VS and not penalize me for typing parentheses in VB.Net IF statements.

Thanks,

Bob Kiser

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/604698/problem-with-intellisenseautocomplete-in-an-if-sta.html
VSTS ticketId: 917202_
_These are the original issue comments:_

Visual Studio Feedback System on 6/12/2019, 09:24 PM (13 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36411</IssueID>
    <RepoID>1</RepoID>
    <Title>[Feature Request] Support Module Initialization in C#</Title>
    <Description>WPF used to build one of its assemblies, `PresentationCore`, as a hybrid between C++/CLI and C#.  In an effort to reduce our dependencies on `NetModule` and make our build cleaner, we split the C++/CLI portion into a new DLL.

We relied on the use of Module Initialization in `PresentationCore` in order to properly configure defaults for WPF applications.  Due to the split, this was no longer possible to do purely in code as we had used the C++/CLI portion to add this before.

This is now accomplished via IL injection via IL(D)Asm in order to add this back to a pure C# assembly.  This isn't a very sustainable way of doing this and we're worried about this breaking in the future.

WPF would like a supported way to add a module initializer to a C# assembly.  Perhaps a compiler flag/msbuild property that allows a developer to specify a type/function to call on initialization of the module.

You can see how WPF is doing this (a fairly common idiom):
* [Injected IL](https://github.com/dotnet/wpf/blob/master/eng/WpfArcadeSdk/tools/InjectModuleInitializer/ModuleInitializer.il)
* [Assembly level implementation of the initializer](https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationCore/ModuleInitializer.cs)

Something like this would provide an easy way to access this functionality with, it seems to me, minimal risk to breaking existing builds.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36410</IssueID>
    <RepoID>1</RepoID>
    <Title>Tweak interaction of outbound annotations (`[MaybeNull, NotNullWhen(false)]`)</Title>
    <Description>It’s going to be common to interpret [MaybeNull][NotNullWhen(true)] as meaning “not null when true, may be null otherwise”, and I think that would be the most reasonable behavior.


- MaybeNullWhen(b) and NotNullWhen(b) override the effect of MaybeNull and NonNull for the given b.

Relates to https://github.com/dotnet/roslyn/issues/36073</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36409</IssueID>
    <RepoID>1</RepoID>
    <Title>[Feature Request] Add ability to limit types compiled into reference assemblies</Title>
    <Description>WPF makes extensive use of InternalsVisibleTo in its own builds.  However, we don't want these items to show up in reference assemblies.  This is because we don't ship a reference assembly for every runtime assembly and the internal surface area generates dangling references to these intentionally excluded assemblies.

We'd like some way of configuring the output of types into a reference assembly, perhaps akin to what [GenAPI does](https://github.com/dotnet/corefx/blob/master/eng/DefaultGenApiDocIds.txt) with exclusion/inclusion files.  At the very least, we'd like to be able to turn off the inclusion of internal surface area via some compiler switch/msbuild property.

Related to https://github.com/dotnet/wpf/issues/932.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36408</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3 to release/dev16.2-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3 into release/dev16.2-preview3-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-to-release/dev16.2-preview3-vs-deps
git reset --hard upstream/release/dev16.2-preview3-vs-deps
git merge upstream/release/dev16.2-preview3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-to-release/dev16.2-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36407</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3 into master.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36406</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure NullableWalker.AsMemberOfType locates the right new container for the member.</Title>
    <Description>Fixes #36018.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36405</IssueID>
    <RepoID>1</RepoID>
    <Title>[feature request] Ability to control where  methods are generated</Title>
    <Description>Consider adding the ability to choose where to add all methods with methods etc., or on bottom of class (potentially within a #region)

copied from https://github.com/OmniSharp/omnisharp-vscode/issues/2392</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36404</IssueID>
    <RepoID>1</RepoID>
    <Title>VBCSCompiler reports documentation comments as SingleCommentTrivia</Title>
    <Description>**Version Used**: 
VBCS Compiler distributed with

- Visual Studio 2017 15.9.13 and previous
- Visual Sudio 2019 16.1.3

This DOES NOT happen within Visual Studio itself, only in the VBCSCompiler.exe

**Steps to Reproduce**:
1. Create a .net standard project and add the attached nuget: [ReproDocComment.1.0.0.zip](https://github.com/dotnet/roslyn/files/3286818/ReproDocComment.1.0.0.zip)
2. Create one class with xml documentation comments
3. Build the project
4. Open Errors List and select "Build Only"

**Expected Behavior**:
No Error should be displayed

**Actual Behavior**:
The Errors List contains one warning about the class not having documentation

**Also note**
- This happens because no leading trivia of the type declaration syntax node is of type DocumentationCommentTriviaSyntax
- This also happens when calling DescendantTrivia() on a (root) node. The return value of Kind() on the found trivia is never SyntaxKind.DocumentationCommentExteriorTrivia, and instead is SyntaxKind.SingleLineCommentTrivia
- This does not occur in devenv.exe itself. All working fine there, and the unit tests of the attached reproduction project all pass.
</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36403</IssueID>
    <RepoID>1</RepoID>
    <Title>IPropertySymbol missing accessor</Title>
    <Description>The Roslyn `SymbolInfo` and `IOperation` APIs of the SemanticModel return an IPropertySymbol missing the get-accessor even though the compiled code clearly was using a get-accessor.

(Related to #25057 and #26867, because Roslyn doesn't provide an API to get the Accessor against which it has compiled I'm trying to figure it out myself, but this fails when Roslyn compiles against a different property symbol than what it gives to my analyzer.)

**Version Used**: nuget stable 3.1.0

**Steps to Reproduce**
&lt;details&gt;&lt;summary&gt;Source Code&lt;/summary&gt;

```C#
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Operations;
using Microsoft.CodeAnalysis.Text;

namespace RoslynBindingBugTest
{
    class Program
    {
        static void Test()
        {
            var doc = new XmlDocument();
            doc.LoadXml("&lt;root test='hi'/&gt;");
            var text = doc.DocumentElement.Attributes["test"].InnerText;
            System.Diagnostics.Debug.Assert(text == "hi");
        }

        const string kSource = @"
using System;
using System.Xml;

class Program
{
    static void Main(String[] args)
    {
        var doc = new XmlDocument();
        doc.LoadXml(""&lt;root test='hi'/&gt;"");
        var text = doc.DocumentElement.Attributes[""test""].InnerText;
    }
}
";
        static void Main(string[] args)
        {
            Test(); // make sure it actually compiles &amp; executes

            var ws = new AdhocWorkspace();
            var proj = ws.AddProject(ProjectInfo.Create(ProjectId.CreateNewId(), VersionStamp.Create(), "Test", "Test", LanguageNames.CSharp)
                .WithMetadataReferences(typeof(Program).Assembly.GetReferencedAssemblies().Select(x =&gt; MetadataReference.CreateFromFile(Assembly.Load(x.FullName).Location)))).Id;
            var doc = ws.AddDocument(proj, "Test.cs", SourceText.From(kSource)).Id;
            var cp = ws.CurrentSolution.GetProject(proj).GetCompilationAsync().Result;
            var diag = cp.GetDiagnostics();
            System.Diagnostics.Debug.Assert(diag.Length == 0);
            var model = cp.GetSemanticModel(ws.CurrentSolution.GetDocument(doc).GetSyntaxTreeAsync().Result);
            var access = model.SyntaxTree.GetRoot().DescendantNodes(x =&gt; !(x is MemberAccessExpressionSyntax)).OfType&lt;MemberAccessExpressionSyntax&gt;().Where(x =&gt; x.Name.ToString() == "InnerText").Single();
            var operation = model.GetOperation(access);
            var syminfo = model.GetSymbolInfo(access);
            System.Diagnostics.Debug.Assert(operation is IPropertyReferenceOperation propRefOp &amp;&amp; propRefOp.Property.GetMethod != null);
            System.Diagnostics.Debug.Assert(syminfo.Symbol is IPropertySymbol propSym &amp;&amp; propSym.GetMethod != null);
        }
    }
}
```
&lt;/details&gt;

**Expected Behavior**:
Property symbol contains the get-accessor against which the program is compiled.

**Actual Behavior**:
Property symbol does not contain a get-accessor even though the program clearly uses one.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36402</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow EnCWhileDebuggingFromImmediateWindow to fail in 16.2 Preview 2</Title>
    <Description>See #36401 

Work in Roslyn is blocked on all branches until this propagates. Fix by the editor is required for 16.2 Preview 3 or this will fail again.

/cc @olegtk </Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36401</IssueID>
    <RepoID>1</RepoID>
    <Title>EnCWhileDebuggingFromImmediateWindow fails with focus error</Title>
    <Description>**Version Used**: 16.2.0 Preview 2.0

Starting with a recent update to the integration test machines, the `EnCWhileDebuggingFromImmediateWindow` test fails because focus is changed to the Output window instead of leaving it on the source document.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36400</IssueID>
    <RepoID>1</RepoID>
    <Title>ArgumentOutOfRangeException from Analyzers</Title>
    <Description>**Version Used**: 
Visual Studio Professional 2019 16.1.3

**Steps to Reproduce**:

I was replacing `\n` line endings with `\r\n` in some code when this happened.

**Expected Behavior**:
No exception should occur.

**Actual Behavior**:
```
System.ArgumentOutOfRangeException : 'end' must not be less than 'start'
Parameter name: end
   at Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(Int32 start,Int32 end)
   at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpSelectionValidator.GetAdjustedSpan(SourceText text,TextSpan textSpan)
   at Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpSelectionValidator.GetInitialSelectionInfo(SyntaxNode root,SourceText text,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.CSharp.ExtractMethod.CSharpSelectionValidator.GetValidSelectionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

Maybe related to #28983?</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36399</IssueID>
    <RepoID>1</RepoID>
    <Title>move to sha256</Title>
    <Description>it is required for d16.2

fix - https://devdiv.visualstudio.com/DevDiv/_workitems/edit/788328</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36398</IssueID>
    <RepoID>1</RepoID>
    <Title>Add option to emit nullable metadata for public members only</Title>
    <Description>Relates to https://github.com/dotnet/roslyn/issues/35816 (work items for annotations and metadata compaction)</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36397</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] Get errors when you open two Visual Studio instances with different versions of Roslyn build tasks</Title>
    <Description>**Version Used**: 
16.1.2 and 16.2.0 Preview 3.0 [29010.160.d16.2stg]

**Steps to Reproduce**:

1.  Open Roslyn.sln in 16.2.0 keeping it open
2.  Open Roslyn.sln in 16.1.2

**Expected Behavior**:

No errors

**Actual Behavior**:

```
Severity	Code	Description	Project	File	Line	Suppression State
Error	MSB4064	The "AnalyzerConfigFiles" parameter is not supported by the "Csc" task. Verify the parameter exists on the task, and it is a settable public instance property.	Roslyn.PerformanceTests	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	64	
Error	MSB4063	The "Csc" task could not be initialized with its input parameters. 	Roslyn.PerformanceTests	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	59	
Error	MSB4064	The "AnalyzerConfigFiles" parameter is not supported by the "Csc" task. Verify the parameter exists on the task, and it is a settable public instance property.	Microsoft.CodeAnalysis.ExternalAccess.Apex	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	64	
Error	MSB4063	The "Csc" task could not be initialized with its input parameters. 	Microsoft.CodeAnalysis.ExternalAccess.Apex	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	59	
Error	MSB4064	The "AnalyzerConfigFiles" parameter is not supported by the "Csc" task. Verify the parameter exists on the task, and it is a settable public instance property.	Microsoft.CodeAnalysis.ExternalAccess.LegacyCodeAnalysis	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	64	
Error	MSB4063	The "Csc" task could not be initialized with its input parameters. 	Microsoft.CodeAnalysis.ExternalAccess.LegacyCodeAnalysis	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	59	
Error	MSB4064	The "AnalyzerConfigFiles" parameter is not supported by the "Csc" task. Verify the parameter exists on the task, and it is a settable public instance property.	Microsoft.CodeAnalysis.ExternalAccess.IntelliTrace	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	64	
Error	MSB4063	The "Csc" task could not be initialized with its input parameters. 	Microsoft.CodeAnalysis.ExternalAccess.IntelliTrace	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	59	
Error	MSB4064	The "AnalyzerConfigFiles" parameter is not supported by the "Csc" task. Verify the parameter exists on the task, and it is a settable public instance property.	Microsoft.CodeAnalysis.ExternalAccess.LiveShare	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	64	
Error	MSB4063	The "Csc" task could not be initialized with its input parameters. 	Microsoft.CodeAnalysis.ExternalAccess.LiveShare	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	59	
Error	MSB4064	The "AnalyzerConfigFiles" parameter is not supported by the "Csc" task. Verify the parameter exists on the task, and it is a settable public instance property.	Microsoft.CodeAnalysis.ExternalAccess.FSharp.UnitTests	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	64	
Error	MSB4063	The "Csc" task could not be initialized with its input parameters. 	Microsoft.CodeAnalysis.ExternalAccess.FSharp.UnitTests	C:\Program Files (x86)\Microsoft Visual Studio\2019\RTM\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets	59	

```

The build tasks are supposed to versioned every build for avoid this. Looks like this was regressed again.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36396</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn OOP does not use MEF part rejection</Title>
    <Description>The [OOP MEF composition](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Workspace/Host/Mef/MefHostServices.cs,41) currently does not have part rejection enabled. The usefulness of part rejection is that it allows dependency graphs to be used for option export. If a feature depends on something that doesn't exist, it can then also not be exported and avoid being lit up. The workaround right now is to use `AllowDefault = true` on imports and check for null. 

This differs from the VS Mef behavior, which does use part rejection and puts the error in a logs file. We need to decide the best approach here so future service composition can be consistent. This was noticed in #36334 where one of the proposed fixes was to use part rejection to correctly disallow a feature on VS for Mac. </Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36395</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't show full attribute type name if in attribute name context</Title>
    <Description>Fix #35540
Also Fix #35124 to show correct suffix for generics in VB.

I also contemplated a different approach , which involves 
1. unseal CompletionItem, 
2. Derive a ImportCompletionItem from it
3. add mutable states to ImportCompletionItem , i.e. "IsAttribute", "IsGeneric", etc, and return different display/suffix/sort/etc. text, based on the current state.

Pros: this approach might be simpler as it requires less code change.

Cons: We will not be able to cache any data for creating VS completion items for generic/attribute types, so they will be calculated every time. In contrast, the current appraoch I'm using only need to do calculation in following scenarios (which is arguably rare):
- For generic types, if cache items are created for one language but completion is triggered by code written in another. e.g. if the first completion is triggered in C# project, but later an edit is being made in VB code.
- for attribute types, if completion is triggered in attribute name context.

@CyrusNajmabadi @jasonmalinowski @dpoeschl

TODO:

- [x] perf analysis
- [ ] Add tests for triggering completion in multiple files.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36394</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36393</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36392</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36391</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36390</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36389</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36388</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36387</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36386</IssueID>
    <RepoID>1</RepoID>
    <Title>ISymbol - added missing tag</Title>
    <Description>Fixes https://github.com/dotnet/docs/issues/12737

Minor style guide fixes as well</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36385</IssueID>
    <RepoID>1</RepoID>
    <Title>C#: Naming rule violation with camelCase formatting applied will conflict with static void Main() method inside classes.</Title>
    <Description>&lt;p&gt;Steps to reproduce:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Set the C# naming rules to allow camelCase naming applied everywhere, just to be able to get maximum coverage for debugging this issue. &lt;/li&gt;&lt;li&gt;Replace all PascalCase rules to camelCase rules.&lt;/li&gt;&lt;li&gt;Set all rules to throw errors, instead of giving suggestions.&lt;/li&gt;&lt;li&gt; Create a new C# file in a brand new C# project.&lt;/li&gt;&lt;li&gt; Create a simple Hello World program. &lt;/li&gt;&lt;li&gt; Observe how the camelCase naming rule violation do not give or provide exceptions to certain methods, like the Main() method, which requires the capital M.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;a href="https://developercommunity.visualstudio.com/storage/attachments/76052-capture.png"&gt; Image:76052-capture.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I would like to request a feature to the naming rules convention options, to allow exceptions for Main(). Since, in Visual Studio 2019, we have the option for users to give them custom naming rules, if we were to extremely apply our camelCase naming rules to C#, eventually, the &amp;quot;Main()&amp;quot; method will annoy the users.&lt;/p&gt;&lt;p&gt;Or maybe it could be fixed? I don't know at this point. Hence my feedback.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/588353/c-naming-rule-violation-with-camelcase-formatting.html
VSTS ticketId: 901455_
_These are the original issue comments:_

Visual Studio Feedback System on 5/29/2019, 07:03 PM (13 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36384</IssueID>
    <RepoID>1</RepoID>
    <Title>Change Signature reorder parameters should reorder InlineData arguments</Title>
    <Description>**Version Used**: 16.2 Preview 2

**Steps to Reproduce**:

1. Create an xunit test theory with two parameters
2. Add test cases with `[InlineData]`
3. Use the Change Signature dialog to reverse the order of the two parameters

**Expected Behavior**:

The arguments to each of the `InlineData` attributes should be reversed.

**Actual Behavior**:

The arguments to `InlineData` are not reversed.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36383</IssueID>
    <RepoID>1</RepoID>
    <Title>Spaces in declaration statements</Title>
    <Description>VSF_TYPE_MARKDOWNGiven the following in .editorconfig:
csharp_space_around_declaration_statements = ignore
csharp_space_between_method_call_name_and_opening_parenthesis = false

In VS2010 'csharp_space_around_declaration_statements = ignore'  only affected the accessibility, type, and name -- it did not affect the initializer if one was specified. (.editorconfig was not supported in VS2010, but I'm writing about the equivalent Text Editor option.)

In VS2019 'csharp_space_around_declaration_statements = ignore' affects the whole statement - other spacing options (e.g. 'csharp_space_between_method_call_name_and_opening_parenthesis = false' are ignored)

Attached before.png shows is the original input.

Attached after.png shows that 'csharp_space_between_method_call_name_and_opening_parenthesis = false' is ignored in the declaration statements.

Changing the meaning of 'csharp_space_around_declaration_statements = ignore' is probably not doable as it would break existing formatting, but in the UI (Options/Text Editor/C#/Code Style/Formatting/Spacing/Ignore spaces in declaration statements) it would be good to have a sub-option to specify that the spaces are not ignored in the initializer.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/603361/spaces-in-declaration-statements.html
VSTS ticketId: 916945_
_These are the original issue comments:_

Visual Studio Feedback System on 6/12/2019, 00:02 AM (16 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36382</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData.json for divisional snap</Title>
    <Description>
    </Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36381</IssueID>
    <RepoID>1</RepoID>
    <Title>Hit NRE in completion (GetDescriptionAsync)</Title>
    <Description>**Version Used**: 

Version 16.2.0 Preview 2.0 [28930.63.d16.2stg]

**Steps to Reproduce**:

I don't have repro steps, just saw an NRE reported in goldbar with the following exception stack in activity log:

```
System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.Completion.CommonCompletionProvider.&lt;GetDescriptionAsync&gt;d__2.MoveNext()
 --- End of stack trace from previous location where exception was thrown
 ---    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CompletionSource.&lt;GetDescriptionAsync&gt;d__23.MoveNext()
 --- End of stack trace from previous location where exception was thrown ---
    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.&lt;CallExtensionPointAsync&gt;d__35`1.MoveNext() ---
 End of stack trace from previous location where exception was thrown ---
    at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36380</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix #33560 Handle equal tokens where Text is not available.</Title>
    <Description>Fixes #33560
I updated the helper method `AreTwoTokensOnSameLine` to exit early when the provided tokens are equal. This prevents an exception from being thrown when equal tokens are provided and the `SyntaxTree` is null or the `SyntaxTree.TryGetText()` call fails. I added unit tests to cover basic regressions as well as the erroneous case above.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36379</IssueID>
    <RepoID>1</RepoID>
    <Title> Replace `dynamic` with `object` when substituting constraints.</Title>
    <Description>Fixes #36276.
</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36378</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot untick "Show C# and Visual Basic References"</Title>
    <Description>VSF_TYPE_MARKDOWNI would like to remove the text above methods which says &amp;quot;x references | y exceptions&amp;quot; but when I go to Tools&amp;gt;Options&amp;gt;Text Editor&amp;gt;All Lanaguages&amp;gt;CodeLens I find the &amp;quot;Show C# and Visual Basic References&amp;quot; checkbox is ticked and greyed out. I would rather not disable CodeLens outright to disable this text.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/590497/cannot-untick-show-c-and-visual-basic-references.html
VSTS ticketId: 903135_
_These are the original issue comments:_

Visual Studio Feedback System on 6/2/2019, 11:19 PM (9 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36377</IssueID>
    <RepoID>1</RepoID>
    <Title>Go To Definition does not work correctly with delegate and operator</Title>
    <Description>VSF_TYPE_MARKDOWNVS2019 goes to the operator definition when I perform &amp;quot;Go to Defenition&amp;quot; on &amp;quot;Foo.Test&amp;quot;, but I expect it to show me the method &amp;quot;Test&amp;quot;

```
public sealed class Foo
    {
        public delegate int IntDelegate();

public static int Test()
        {
            return 1;
        }

public static void Bar1()
        {
            Console.WriteLine((Foo)Foo.Test);
        }

public static explicit operator Foo(IntDelegate intDelegate)
        {
            return new Foo();
        }
    }
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/587895/go-to-definition-does-not-work-correctly-with-dele.html
VSTS ticketId: 901152_
_These are the original issue comments:_

Visual Studio Feedback System on 5/29/2019, 11:39 PM (13 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36376</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36375</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36374</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36373</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36372</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36371</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36370</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36369</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix namespace for nullable annotations attributes</Title>
    <Description>Relates to https://github.com/dotnet/roslyn/issues/35816 (work items for nullable annotation attributes)</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36368</IssueID>
    <RepoID>1</RepoID>
    <Title>Update editor packages</Title>
    <Description>This is a prerequisite for #35667, broken out for independent review and validation.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36367</IssueID>
    <RepoID>1</RepoID>
    <Title>"Use coalesce expression" (IDE0029) generates incorrect code</Title>
    <Description>
    </Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36366</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement subset-based ordering for naming rules</Title>
    <Description>Fixes #36355

From my previous investigation:

&gt; I reviewed some naming rules and found that many cases will be correct if we follow a best-effort subset ordering. For example, consider the following rules:
&gt; 
&gt; 1. Non-private static fields are PascalCase
&gt; 2. Non-private readonly fields are PascalCase
&gt; 3. Constants are PascalCase
&gt; 4. Static fields are s_camelCase
&gt; 5. Fields are _camelCase
&gt; 
&gt; The potential points of confusion are:
&gt; 
&gt; 1. Rule (1) and rule (4). In this case, rule (1) is strictly more specific than rule (4), so it would take precedence
&gt; 2. Rule (2) and rule (4). In this case, neither rule is strictly more specific than the other
&gt; 3. Rule (2) and rule (5). In this case, rule (2) is strictly more specific than rule (5), so it would take precedence
&gt; 4. Rule (4) and rule (5). In this case, rule (4) is strictly more specific than rule (5), so it would take precedence
&gt; 
&gt; I did note that whenever an overlap arises that isn’t a strict-subset relation, e.g. rule (2) and rule (4), it’s possible to define a new rule which covers exactly the intersection. In this case it would be a rule for “non-private static readonly fields”. I would propose to order the rules as follows, and allow the user to add a missing rule in the event an incorrect result is produced in the intersection:
&gt; 
&gt; 1. If the accessibilities of rule A are a subset of those in rule B, apply rule A first (accessibilities are “match any”)
&gt; 2. Otherwise, if the required modifiers of rule A are a superset of those in rule B, apply rule A first (required modifier are “match all”)
&gt; 3. Otherwise, if the symbols of rule A are a subset of those in rule B, apply rule A first (symbols are “match any”)

This change implements the above ordering proposal, with a final fallback to rule name order to ensure the order is deterministic for any given configuration.

Update 13 June:

Based on an evaluation of .editorconfig files on GitHub with naming rules, the following changes were made to the ordering:

1. Ordering by modifiers occurs before ordering by accessibility. This change accounts for the fact that people frequently have ordering for all static members, and separately have ordering for non-private instance fields.
2. When sorting, the 'const' modifier is treated as always including 'static' and 'readonly' (so 'const' matches a subset of the symbols matched by 'static' and/or 'readonly').
3. The final sort by names uses the _rule_ name instead of the _style_ name.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36365</IssueID>
    <RepoID>1</RepoID>
    <Title>VBC emits BC32035, BC30012 when `#If` block splits attributes from class declaration in SDK projects</Title>
    <Description>**Version Used**: VS 2019 or VS 2017

**Steps to Reproduce**:

1. Unzip the repro solution: [VBCompilerRegression.zip](https://github.com/dotnet/roslyn/files/3281619/VBCompilerRegression.zip)

2. Build the solution in VS

**Expected Behavior**:

Both (nearly identical) projects build successfully

**Actual Behavior**:

While the class .vbproj (non-SDK style) project builds successfully, the SDK style project fails to build with this error:

```
D:\temp\VBCompilerRegression\ClassLibrary2\TestAssembly.Version.vb(2,1): error BC32035: Attribute specifier is not a complete statement. Use a line continuation to apply the attribute to the following statement. [D:\temp\VBCompilerRegression\Clas
sLibrary1\VBSdkStyle.vbproj]
D:\temp\VBCompilerRegression\ClassLibrary2\TestAssembly.Version.vb(1,1): error BC30012: '#If' block must end with a matching '#End If'. [D:\temp\VBCompilerRegression\ClassLibrary1\VBSdkStyle.vbproj]
```

It seems the VB compiler allows this syntax for regular vbproj projects:

```vb
#If NETSTANDARD Or NETFRAMEWORK Or NETCOREAPP Then
&lt;System.CodeDom.Compiler.GeneratedCode("Nerdbank.GitVersioning.Tasks","2.3.179.31651")&gt;
#End If
Partial Friend NotInheritable Class ThisAssembly
```

But the .NET SDK style vbproj does *not* allow it. Why would that be? Isn't it valid (or invalid) VB syntax either way?</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36364</IssueID>
    <RepoID>1</RepoID>
    <Title>Odd suggested parameter names in some cases</Title>
    <Description>**Version Used**: VS 16.2.0 Preview 2.0

The suggested parameter names don't seem to be very good in some cases.

For `IEnumerable&lt;string&gt;`, the suggested name is `vs`, which does not make sense to me:

![](https://user-images.githubusercontent.com/287848/59351545-f0ccce00-8d1e-11e9-9105-26f22c5b4ca1.png)

For `IEnumerable&lt;T&gt;`, the suggested name is `ts`, which makes sense, but I think is almost never correct. Maybe it would make sense to have a special case for `T`?

![image](https://user-images.githubusercontent.com/287848/59351652-2ec9f200-8d1f-11e9-902e-b0a21b3fcf29.png)

</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36363</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36362</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36361</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36360</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36359</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36358</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36357</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36356</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36355</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] Wrong naming rules are being enforced for static fields</Title>
    <Description>**Version Used**: 
Works in 15.9, 16.1.2, regressed in 16.2.

**Steps to Reproduce**:

With this editor config: https://github.com/dotnet/project-system/blob/master/.editorconfig#L112.

``` VB
Private Shared ReadOnly s_propertyDescriptorCollectionHash As New Hashtable
```
**Expected Behavior**:
No errors

**Actual Behavior**:
```
Severity	Code	Description	Project	File	Line	Suppression State
Error	IDE1006	Naming rule violation: Missing prefix: '_'	Microsoft.VisualStudio.Editors	E:\project-system2\src\Microsoft.VisualStudio.Editors\ResourceEditor\Resource.vb	273	Active
```</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36354</IssueID>
    <RepoID>1</RepoID>
    <Title>Invalid 'for to foreach' refactoring</Title>
    <Description>**Version Used**: 16.1.1

**Steps to Reproduce**:
```cs
        class Item { public string Value; }

        static void Test()
        {
            var first = new { list = new List&lt;Item&gt;() };
            var second = new { list = new List&lt;Item&gt;() };

            for (var i = 0; i &lt; first.list.Count; i++)
            {
                first.list[i].Value = second.list[i].Value;
            }
        }
```

**Expected Behavior**: No suggestions

**Actual Behavior**: Suggests to convert to foreach anyways


![image](https://user-images.githubusercontent.com/3105979/59330388-945db480-8d06-11e9-8ac4-f24986d9ed0f.png)
</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36353</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] Naming style rules are no longer being enforced or used</Title>
    <Description>This works in 15.9 &amp; 16.1.2 and has regressed in Version 16.2.0 Preview 3.0 [29010.160.d16.2stg].

EditorConfig: https://github.com/dotnet/project-system/blob/master/.editorconfig#L115.

Naming style rules (at least for fields) are no longer being enforced or used.

15.9/16.1.2:
![image](https://user-images.githubusercontent.com/1103906/59329588-93427c80-8d32-11e9-8f92-c1c1f13418da.png)

16.2:
![image](https://user-images.githubusercontent.com/1103906/59329652-b705c280-8d32-11e9-9a95-373ce846ff07.png)

The warnings are 16.2 are the new ones telling me that they can be literals.</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36352</IssueID>
    <RepoID>1</RepoID>
    <Title>You need to resolve types before naming suggestions for IEnumerable/collections work</Title>
    <Description>Until you've resolved a type, you don't get useful suggestions:

Unresolved:
![image](https://user-images.githubusercontent.com/1103906/59322284-c546e500-8d18-11e9-9dbc-2b47d819d661.png)

Resolved:
![image](https://user-images.githubusercontent.com/1103906/59322270-b9f3b980-8d18-11e9-9465-4ca6755e8759.png)

Maybe this should be name based instead of type based?
</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36351</IssueID>
    <RepoID>1</RepoID>
    <Title>Move down one line when applying ToggleLineComment with no selection</Title>
    <Description>When user applies ToggleLineComment with no selection, it is very useful to have the caret move down one line, so the user can apply the command repeatedly.

If needed, this could be a setting in Tools-&gt;Options (on by default).

(See #27198)</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36350</IssueID>
    <RepoID>1</RepoID>
    <Title>Leave caret unchanged when applying ToggleBlockComment</Title>
    <Description>When applying ToggleBlockComment, can the caret stay to the right of the character it was previously to the right of?

(See #27198)</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36349</IssueID>
    <RepoID>1</RepoID>
    <Title>Leave selection unchanged when applying ToggleLineComment</Title>
    <Description>When user applies ToggleLineComment to a selection, can the selection be left untouched?


--------------------------------------------
#27198 (comment)

Really nice to see this in Visual Studio 16.1!!

Obviously, it will be better when applied to a single-key shortcut instead of a chord.

Also, the changing of caret position and selection is really annoying. It keeps moving my caret to the end of the line, which is not helpful.

Notes:

For ToggleLineComment applied to a single line with no selection, it would be more useful if it moved the caret down one line. (And keep the caret at the same column position)
This could be a setting in Tools-&gt;Options (on by default)
Leave the caret where it started. When applying ToggleLineComment there is no need for the selection to change. Also, there is no need for the caret to move. It can stay where it was. Just need to apply comment markers to the start of each line involved in the selection. (Except for the last line if caret at posn 0).</Description>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36348</IssueID>
    <RepoID>1</RepoID>
    <Title>Future enhancements for code actions to configure code style options and diagnostic severity in editorconfig</Title>
    <Description>1. [Bug Fix] Expand the editorconfig updater to handle per-file sections. See 
https://github.com/dotnet/roslyn/pull/35691#discussion_r291290905
2. [Feature] change the default scope to Sln

3. [Feature] Potentially Codecleanup UI to show all possible options that's applied on the doc. Add code action to fill an existing editorconfig or generate a new editorconfig with all the missing code style settings

6.  [Feature] Add code action to fill an existing editorconfig or generate a new editorconfig with all the effective diagnostic ID and severity entries for all the analyzers executing on the project (built in and third party).

3. [Feature]  Possibly add FixAll support to enable customized discovery of editorconfig to update. The default behavior finds the closest editorconfig to the source file with the diagnostic walking up the ancestor directories upto the project directory, and creating a new editorconfig in the project directory if none exist. We may likely want to allow users to customize this to always walk up to the project or solution level editorconfig (updating all intermediate editorconfigs on the path up the ancestor directories).

4. [Skip] Original implementation only updates the code style option/severity in the editorconfig in the sources, but does not update the Workspace wide options or severities. We may want to expose an option to control whether the code action should also update the Workspace wide settings.

</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36347</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix stack overflow in requesting syntax directives</Title>
    <Description>Fixes #36346</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36346</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Parser can stack overflow when GetDirectives is called on a SyntaxNodeOrToken</Title>
    <Description>See https://developercommunity.visualstudio.com/content/problem/565382/compiling-causes-a-stack-overflow-error.html

While the compiler as a whole may not handle extremely deep trees, it seems reasonable to harden the public surface area of the parser.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36345</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable MSBuildWorkspaceTests.TestEditorConfigDiscovery</Title>
    <Description>Besides unskipping the test, we also had to update our test harness. We have to locate an MSBuild on the machine which is suitable for our use, once we found one we just used that. On our machines we have both 15.9 and 16.2 (as of this writing), but we always picked 15.9. Now, we look for the highest version and will add binding redirects to that one; we can also filter tests to a specific minimum version if necessary. It's critical we always find the highest version when first setting up -- we have to add binding logic to make sure we load that; if we loaded a lower version for a test that had a lower minimum version, we wouldn't be able to run another test later.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>15/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36344</IssueID>
    <RepoID>1</RepoID>
    <Title>Move remote workspace from liveshare into Roslyn.</Title>
    <Description>~~TODO - Implement Open file tracker for liveshare (pending completion of https://github.com/dotnet/roslyn/pull/36006 )~~
~~TODO - Remove extension version downgrade if 16.3 and binding redirects in place OR package own DLL (if that work is completed)~~
~~TODO - Figure out how to handle dependency of MS.VS.LiveShare.WebEditors which has dependency on MS.VS.Cascade.Contracts which appears to be no longer in existence.~~</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36343</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36342</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36341</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36340</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36339</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36338</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3 to release/dev16.2-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3 into release/dev16.2-preview3-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-to-release/dev16.2-preview3-vs-deps
git reset --hard upstream/release/dev16.2-preview3-vs-deps
git merge upstream/release/dev16.2-preview3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-to-release/dev16.2-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36337</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36336</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36335</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3 into master.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36334</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable move type when the options service isn't present</Title>
    <Description>Fixes #35577 </Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36333</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate ctor does not include parameters for base class ctor</Title>
    <Description>VSF_TYPE_MARKDOWNWhen you generate a ctor for a class using Ctrl-. a dialog is shown to allow you to pick which properties to initialize. However, there is no ability to choose which base class ctor should be invoked, and thus no parameters will be added for this.

To be useful in this scenario, the dialog should allow you to also choose which base class ctor to invoke, and include the required fields in the generated ctor.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/508491/generate-ctor-does-not-include-parameters-for-base.html
VSTS ticketId: 830580_
_These are the original issue comments:_

Visual Studio Feedback System on 3/28/2019, 11:56 PM (74 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Cytheria Ji [MSFT] on 3/31/2019, 07:28 PM (71 days ago): &lt;p&gt;Thank you for submitting feedback on Visual Studio.&lt;/p&gt;&lt;p&gt;Could you please provide your project language and screenshot to us for further investigation?&lt;/p&gt;

Visual Studio Feedback System on 4/2/2019, 00:08 AM (70 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 4/3/2019, 00:43 AM (69 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_

Morten Mertner solved on 4/1/2019, 09:40 AM (71 days ago), 0 votes: &lt;p&gt;I am using C#. Currently on iPad so no screenshot, but there is only one dialog displayed for Generate Constructor, so don’t see much value in me posting a copy of it here.&lt;/p&gt;
</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36332</IssueID>
    <RepoID>1</RepoID>
    <Title>Move DIM proposal to C# 8 folder</Title>
    <Description>Relates to https://github.com/dotnet/csharplang/pull/2592 (moving proposals to C# 8 folder on csharplang)</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36331</IssueID>
    <RepoID>1</RepoID>
    <Title>completion: CTRL+Space is not applicable in Delete/Backspace triggered session</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/35301</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36330</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable code actions to configure code style options and diagnostic severity from light bulb</Title>
    <Description>https://github.com/dotnet/roslyn/pull/35691 adds support for new code actions to configure code style options and diagnostic severity from light bulb, but the code actions were disabled by https://github.com/dotnet/roslyn/pull/35691/commits/55416aad645aee9556db2e77bd30b1999b509ed0 towards the end of the PR. Enabling these code actions is blocked on following items:

1. All the editorconfig features in compiler, project system and IDE layers are enabled by default. In absence of any of this hooks, the code action does not work as expected.
2. https://github.com/dotnet/roslyn/issues/35690 leads to the generated severity entries by this code action not being respected by the compiler.

Once the above two have been resolved, we should revert the following commits from https://github.com/dotnet/roslyn/pull/35691, which should enable the code actions and unskip relevant tests:
1. https://github.com/dotnet/roslyn/pull/35691/commits/55416aad645aee9556db2e77bd30b1999b509ed0
2. https://github.com/dotnet/roslyn/pull/35691/commits/1be6eafaf6b6b8033a183fc26cd8eca129cb1259</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36329</IssueID>
    <RepoID>1</RepoID>
    <Title>Change `??=` for nullable value types as specified in LDM</Title>
    <Description>Implement the changes from https://github.com/dotnet/csharplang/pull/2591. `a ??= b`, where `a` is `int?` and `b` is `int` now has a type of `int` instead of `int?`, and a different lowered form. @cston @dotnet/roslyn-compiler for review.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36328</IssueID>
    <RepoID>1</RepoID>
    <Title>Add back constructor to ProjectExternalErrorReporter</Title>
    <Description>This constructor is still used by F#.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36327</IssueID>
    <RepoID>1</RepoID>
    <Title>Add editor format classifications for member declarations vs member usage</Title>
    <Description>When VS Mac switched from TextMate to Roslyn classification. One of the things that TextMate did was classify member/method declarations and usages/references differently.

#3976 was recently closed as fixed due to #31231, but this did not actually seem to implement support for the usage vs declaration classification. So while Roslyn does now have richer classification, it's still missing this this particular case which many users found useful in VS Mac.

See also https://github.com/mono/monodevelop/issues/4506, which was filed originally when VS Mac moved to Roslyn classification.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>06/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36326</IssueID>
    <RepoID>1</RepoID>
    <Title>Update 'Use pattern matching' to recognize other null checks</Title>
    <Description>* Recognize `is object` as a non-null check
* Recognize `is null` as a null check

Fixes #36315</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36325</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36324</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36323</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36322</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36321</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36320</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36319</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36318</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36317</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 2019 Disables Extension on Add Missing Usings</Title>
    <Description>VSF_TYPE_MARKDOWN
Visual Studio 2019 is crashes when I press &amp;quot;Ctrl + Space&amp;quot; and higlight &amp;quot;Add missing usings&amp;quot;.  This disables the feature from the context menu.  I was trying to added the missing using for  `DuplicateKeyException` from `System.Data.Linq.DuplicateKeyException`
```
System.NotImplementedException : The method or operation is not implemented.
   at Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedDocumentAsync(CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.GetChangesForCodeActionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.ApplyFixesAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.AddMissingImportsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsRefactoringProvider.AddMissingImports(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&amp;lt;&amp;gt;c__DisplayClass11_0.&amp;lt;GetPreviewAsync&amp;gt;b__0(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&amp;lt;Unknown Parameters&amp;gt;)
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/516580/vs-2019-disables-extension-on-add-missing-usings.html
VSTS ticketId: 838562_
_These are the original issue comments:_

Visual Studio Feedback System on 4/4/2019, 00:38 AM (68 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 4/4/2019, 01:46 AM (68 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

sethg on 4/4/2019, 11:12 AM (67 days ago): Not that it changes the issue, but I did find that System.Data.Linq.DuplicateKeyException was not the actual exception I was looking for.
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36316</IssueID>
    <RepoID>1</RepoID>
    <Title>RenameTagProducerTests.RenamingEscapedIdentifiers Failed</Title>
    <Description>Failed during signed build [Test Logs](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2754501&amp;view=ms.vss-test-web.test-result-details)

```
      Assert.Equal() Failure
      Expected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[24..26)]
      Actual:   List&lt;Span&gt; [[23..26), [24..26)]
      Stack Trace:
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(91,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(31,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_3_VerifyTaggedSpans.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(72,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_7_VerifySpansAndBufferForConflictResolution.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(518,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_16_RenamingEscapedIdentifiers.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36315</IssueID>
    <RepoID>1</RepoID>
    <Title>'Use pattern matching' doesn't recognize 'is object' as a non-null check</Title>
    <Description>**Version Used**: 16.2 Preview 1

**Steps to Reproduce**:

```csharp
int Method(object obj) {
  var str = obj as string;
  if (str is object) {
    return 1;
  }

  return 0;
}
```

**Expected Behavior**:

A code fix is offered to use pattern matching:

```csharp
int Method(object obj) {
  if (obj is string str) {
    return 1;
  }

  return 0;
}
```

**Actual Behavior**:

No code fix is offered.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36314</IssueID>
    <RepoID>1</RepoID>
    <Title>Update default naming styles to support 'private protected'</Title>
    <Description>Fixes #36313</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36313</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix name violation for private protected</Title>
    <Description>VSF_TYPE_MARKDOWNProblem 1)
Define interface named `abc` wit accessibility modifier `private protected`. There is no suggestion to fix name violation to `IAbc`. That's inconsistent because for `private`, `protected`, `public`, `internal` and `protected internal` there is suggestion for fix.

Problem 2) 
Generate .editorconfig from settings. The following code is generated. I think that there should be also `private_protected` included.

```editorconfig
dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.interface.required_modifiers = 
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/587679/fix-name-violation-for-private-protected.html
VSTS ticketId: 901099_
_These are the original issue comments:_

Visual Studio Feedback System on 5/29/2019, 10:53 PM (12 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36312</IssueID>
    <RepoID>1</RepoID>
    <Title>Can't change the severity of a dotnet_naming_style</Title>
    <Description>**Version Used**: 
Visual Studio v16.1.1
dotnet v 2.2.300

**Steps to Reproduce**:
Add this to the .editorconfig file:
dotnet_naming_style.private_field_style.capitalization = camel_case
dotnet_naming_style.private_field_style.required_prefix = _
dotnet_naming_style.private_field_style.severity = warning

**Expected Behavior**:
Private field name with no '_' at the beginning should trigger a warning,

**Actual Behavior**:
Private field name with no '_' at the beginning trigger an error,</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36311</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement code cleanup for documents</Title>
    <Description>See #30165
Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/754127</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36310</IssueID>
    <RepoID>1</RepoID>
    <Title>?. operator and await question (potential bug)</Title>
    <Description>Hi Guys!

Have a look at following sample:



```csharp
using System;
using System.Threading.Tasks;

namespace ConsoleApp15
{
    public class Foo
    {
        public void Bar() { }
        public async Task Bar2() { await Task.Delay(0);  return; }
    }
    class Program
    {
        static async Task Main(string[] args)
        {
            Foo foo = null;
            foo?.Bar(); // Not throws
            await foo?.Bar2(); // Throws

            Console.WriteLine("Hello World!");
        }
    }
}
```

Here when I call Bar I use ?. operator and expect method to not be called and it is not called and no exception thrown. Right on the next line I expect exactly the same behaviour but I do get NullReferenceException. Is that something expected? (If it is then I would say it looks very inconsistent)

VS 2019 16.1.1
C# Latest Minor

Thank you


</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36309</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36308</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36307</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2-vs-deps to release/dev16.2-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2-vs-deps into release/dev16.2-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-vs-deps-to-release/dev16.2-preview3-vs-deps
git reset --hard upstream/release/dev16.2-preview3-vs-deps
git merge upstream/release/dev16.2-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-vs-deps-to-release/dev16.2-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36306</IssueID>
    <RepoID>1</RepoID>
    <Title>Split the restore, build, and test steps in CI</Title>
    <Description>
    </Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36305</IssueID>
    <RepoID>1</RepoID>
    <Title>Recognize ElementAt in ForToForeach refactoring</Title>
    <Description>```cs
void M(ICollection&lt;T&gt; collection)
{
    for (int i = 0; i &lt; collection.Count; ++i)
        collection.ElementAt(i).M();
}
```
-&gt;
```cs
void M(ICollection&lt;T&gt; collection)
{
    foreach (var item in collection)
        item.M();
}
```</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36304</IssueID>
    <RepoID>1</RepoID>
    <Title>Crash on right-click a analyse rule in Solution-Explorer</Title>
    <Description>Visual Studio crash when I right-click on a analyse rule in the solution explorer in a .NET Core 3.0 project. There is no additional information about the crash.

I have start Visual Studio with the `/Log` switch, but the log file contains no errors and no warnings and Visual Studio don't restart always.

Question: Is there another way to get a crash log from Visual Studio 2019?

I have noticed that the ruleset-window don't show the rule name of a changed rule and the rule-set window show only changed rules and not all rules. 

![2019-06-11 10_43_45-PowerCalculator](https://user-images.githubusercontent.com/17874713/59258569-817cae80-8c38-11e9-92e9-76285793db2a.png)

**Version Used**: 
Microsoft Visual Studio Professional 2019 Preview
Version 16.2.0 Preview 1.0
German language

**Steps to Reproduce**:
1. Start Visual Studio 2019 
2. Open a project with a AnlyseTools
3. Right-click on a rule in the Solution-Explorer

**Expected Behavior**:
* Don't crash on right-click a analyse rule in the Solution-Explorer and show the context menu for this rule

**Actual Behavior**:
* Crash on right-click a analyse rule in the Solution-Explorer

**Current workaround for me**
1. Start Visual Studio 2019 
2. Open a minimal project with a Anlysetools (.NET Standard 2.1)
3. Right-click on a rule in the Solution-Explorer (context menu is shown)
4. Open another project with Anlysetools (.NET Core 3.0)
5. Right-click on a rule in the Solution-Explorer (context menu is shown)
6. -&gt; works fine
</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36303</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36302</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36301</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36300</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36299</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36298</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview3 to release/dev16.2-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview3 into release/dev16.2-preview3-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview3-to-release/dev16.2-preview3-vs-deps
git reset --hard upstream/release/dev16.2-preview3-vs-deps
git merge upstream/release/dev16.2-preview3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview3-to-release/dev16.2-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36297</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36296</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to release/dev16.2-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview2-vs-deps
git reset --hard upstream/release/dev16.2-preview2-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36295</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36294</IssueID>
    <RepoID>1</RepoID>
    <Title>VS2019, C# : Cannot peek inside an active peek unless the current peek target is already opened as a proper file (applies only to non-std peek target symbols)</Title>
    <Description>VSF_TYPE_MARKDOWNSteps:

1. Have different files with different custom types and methods.
2. Close them all except one that uses types/methods from other files.
3. Peek into any such custom type or method definition.
4. Inside that peek window, only symbols from the standard library and symbols local to the target file (of the peek) are properly highlighted and you can peek at them.
5. If you open the file of the target of (3), the peek window in (4) should have the proper highlighting and you can peek at them properly.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/482007/vs2019-c-cannot-peek-inside-an-active-peek-unless.html
VSTS ticketId: 814177_
_These are the original issue comments:_

Visual Studio Feedback System on 3/7/2019, 08:11 PM (95 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 3/8/2019, 00:55 AM (94 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

Sara Shi [MSFT] on 3/12/2019, 02:47 AM (90 days ago): &lt;p&gt;Thank you for your feedback! I tried to repro the issue, &lt;/p&gt;&lt;ol&gt;
&lt;li&gt;Create a console app, add Box.cs&lt;/li&gt;&lt;li&gt; add reference of Box.cs in Program.cs&lt;/li&gt;&lt;li&gt; set caret at Box, invoke 'peek Definition'&lt;/li&gt;&lt;li&gt;inside the peek window, set caret at symbols ,invoke 'peek definition'&lt;p&gt;&lt;img src="https://developercommunity.visualstudio.com/storage/temp/62980-capture1.png"&gt;&lt;/p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/li&gt;&lt;li&gt;open Box.cs, we can invoke peek window.&lt;p&gt;&lt;img src="https://developercommunity.visualstudio.com/storage/temp/62981-capture2.png"&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Could you confirm if my steps are correct and what do you mean of step 4,5? Could you provide some more detailed description or screenshots follow the attached project &lt;a target='_blank' href="https://developercommunity.visualstudio.com/storage/attachments/62970-consoleappc.zip"&gt;consoleappc.zip&lt;/a&gt; to help us better understand this scenario? &lt;/p&gt;&lt;p&gt;We look forward to hearing from you!&lt;/p&gt;

Muhammad Nael [MSFT] on 3/12/2019, 06:22 AM (90 days ago): &lt;p&gt;Hi!&lt;/p&gt;&lt;p&gt;I modified the project and included it with 2 screenshots. If `Thing` in `Box` were a symbol from the .NET 'standard library' (I don't know what else to call it), it wouldn't have the same issue. The issue shows in the `Box.cs-closed` screenshot.&lt;/p&gt;&lt;p&gt;* Box.cs is not open. `Thing` is not highlighted and cannot be peeked into.&lt;/p&gt;&lt;p&gt;&lt;img src="https://developercommunity.visualstudio.com/storage/attachments/63049-boxcs-closed.png"&gt;&lt;/p&gt;&lt;p&gt;* Box.cs is open and `Thing` is properly highlighted and reachable by peek in the peek into Box.cs from Program.cs.&lt;/p&gt;&lt;p&gt;&lt;img src="https://developercommunity.visualstudio.com/storage/attachments/63050-boxcs-opened.png"&gt;&lt;/p&gt;

Visual Studio Feedback System on 3/12/2019, 09:35 PM (89 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

Visual Studio Feedback System on 4/10/2019, 03:03 AM (61 days ago): &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/ . We'll keep you posted on any updates to this feedback.&lt;/p&gt;

Leon(Work) Yang on 6/4/2019, 01:35 PM (6 days ago): &lt;strong&gt;(private comment)&lt;/strong&gt;&lt;p&gt;similar issue with Mouse Click got to definition, the peek view is not recursive , I guess it's same root cause.&lt;/p&gt;&lt;p&gt;&lt;a target='_blank' href="https://developercommunity.visualstudio.com/storage/attachments/76837-mouseclickgotodefinition.png"&gt;mouseclickgotodefinition.png&lt;/a&gt;&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36293</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense not shown for overloaded methods, one with enums</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/36187</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36292</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Version.props for 16.3 preview 1</Title>
    <Description>
    </Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36291</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Version.props for 16.2 preview 4</Title>
    <Description>
    </Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36290</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36289</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36288</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36287</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.1-vs-deps to release/dev16.2-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.1-vs-deps into release/dev16.2-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.1-vs-deps-to-release/dev16.2-preview2-vs-deps
git reset --hard upstream/release/dev16.2-preview2-vs-deps
git merge upstream/release/dev16.1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.1-vs-deps-to-release/dev16.2-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36286</IssueID>
    <RepoID>1</RepoID>
    <Title>Propogate nullable type information for EncapsulateFieldService </Title>
    <Description>Fixes #30320 	

Make sure to use `WithNullability` when passing the type.
Add a test for `string?` property generation</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36285</IssueID>
    <RepoID>1</RepoID>
    <Title>Test plan for "generic attributes"</Title>
    <Description>[Championed issue](https://github.com/dotnet/csharplang/issues/124) 
Latest [LDM notes](https://github.com/dotnet/csharplang/blob/master/meetings/2017/LDM-2017-02-21.md#generic-attributes).

## Specification
- [ ] Specification checked in to `csharplang`

## Compiler
- [ ] test consuming a generic attribute from a C# 7 compiler

## Productivity
- [ ] verify typing and completion behavior in IDE</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36284</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust type of out var based on parameter state</Title>
    <Description>This PR fixes the problem with `TryGetValue(key, out var value)`. Previously we would have warned on output assignment to `value`. Now we adjust the type of `var` so that there is no warning.

In `var x = MaybeNull(y);` we use the null-state of the return value to determine the type of `var`. If the return value is annotated with `[MaybeNull]`, the null-state will be maybe-null even if the inference type arguments for the method are un-annotated, and the type of the `var` will be annotated.

Similarly, we want the null-state of the out parameters to help determine the type of out vars. So `MaybeNull(y, out var x)` can result in a `var` with an annotated type.

Relates to https://github.com/dotnet/roslyn/issues/35816 (list of work items related to nullable annotation attributes)</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36283</IssueID>
    <RepoID>1</RepoID>
    <Title>Reduce dependencies</Title>
    <Description>A few issues were found when validating NuGet packages for the 16.2 preview2 release.

1. It looks like Microsoft.CodeAnalysis.editorfeatures.common is missing from NuGet and is preventing me from installing Microsoft.VisualStudio.LanguageServices.3.2.0-beta2-final.nupkg as it is dependent on it. (https://github.com/dotnet/roslyn/issues/30662)
2. ~~Also I’m getting this error on upgrade that Microsoft.CodeAnalysis.FlowAnalysis.Utilities is missing (from Microsoft.CodeAnalysis.Features) as well.~~ We will publish the required packages to NuGet and unlist.

@tmat and @jasonmalinowski  please take a look</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36282</IssueID>
    <RepoID>1</RepoID>
    <Title>Build is working in VS 2019, but failing using VS 2017 / .NET CLI / Rider</Title>
    <Description>VSF_TYPE_MARKDOWNI'm aware what kind of compiler is used in VS 2019. We have a situation, where build is failing on VS 2017 / .NET CLI / Rider, but is working fine on VS 2019. I have prepared a simple solution for &amp;quot;easy to reproduce&amp;quot; problem.

1. Download Test.7z
2. Unpack
3. Build using:
a) VS 2019 - will work
b) VS 2017 - will fail
c) Rider - will fail
d) .NET CLI (`dotnet build Test.sln`)- will fail

With following errors:
&amp;gt;Build FAILED.
&amp;gt;Class1.cs(22,18): error CS0121: The call is ambiguous between the following methods or properties: 'AsyncResultExtensionsRightOperand.Ensure(Result, Func&amp;lt;Task&amp;lt;bool&amp;gt;&amp;gt;, string)' and 'ResultExtensions.Ensure(Result, Func&amp;lt;bool&amp;gt;, string)' [Test\ Test.csproj]
&amp;gt;    0 Warning(s)
&amp;gt;    1 Error(s)
&amp;gt;Time Elapsed 00:00:01.08

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/599156/build-is-working-in-vs-2019-but-failing-using-vs-2.html
VSTS ticketId: 911332_
_These are the original issue comments:_

sygnowski.p on 6/7/2019, 05:29 AM (3 days ago): I've created a repository with example code in GitHub:  https://github.com/sygnowskip/build-problem 
Jeff Schwartz [MSFT] on 6/7/2019, 03:36 PM (2 days ago): &lt;p&gt;Thank you &lt;a rel="user" href="https://developercommunity.visualstudio.com/users/165367/df688de8-3d38-4599-a530-0d93562c4a9e.html" nodeid="165367"&gt;@sygnowski.p&lt;/a&gt; for the feedback and repro.  I have a few additional questions...  Are you seeing these all fail on the same machine or different machines?  What version of the SDK are you using?  (dotnet --list-sdks)&lt;/p&gt;&lt;p&gt;I gave your repro a try on 2.1.601 and the issue did not repro, but on 2.1.202 it did.  Have you tried updating to the latest 2.1, or 2.2 version?&lt;/p&gt;&lt;p&gt;https://dotnet.microsoft.com/download/dotnet-core/2.1&lt;/p&gt;

Pawel Sygnowski on 6/7/2019, 11:28 PM (2 days ago): &lt;p&gt;I've tested it on two machines:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Windows 10 with following SDKs installed:&lt;br&gt;2.1.300&lt;br&gt;2.1.403&lt;br&gt;2.1.500&lt;br&gt;2.1.505&lt;br&gt;2.1.700&lt;br&gt;2.2.100&lt;/li&gt;&lt;li&gt;Mojave macOS with following SDKs installed:&lt;br&gt;1.0.0-preview2-1-003177&lt;br&gt;1.0.1&lt;br&gt;2.0.0&lt;br&gt;2.1.403&lt;br&gt;2.1.505&lt;br&gt;2.2.101&lt;br&gt;2.2.107&lt;/li&gt;&lt;/ul&gt;And the same issue is on both of them (also, I've asked few of my friends to build this and they have the same issue, but I don't know which SDK's they have on their machines).&lt;br&gt;&lt;br&gt;&lt;p&gt;As you suggest, I've installed the newest available .NET Core SDK - 2.2.300.&lt;/p&gt;&lt;p&gt;I've tested it again using the newest SDK and the results are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;VS 2019 16.1.2 - build is working fine&lt;/li&gt;&lt;li&gt;Rider 2019.1.2 - build is working fine&lt;/li&gt;&lt;li&gt;.NET CLI - build is working fine&lt;/li&gt;&lt;li&gt;VS 2017 15.9.12 - build is still not working, with the same issue as above&lt;/li&gt;&lt;/ul&gt;

Visual Studio Feedback System on 6/9/2019, 08:19 PM (17 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Jeff Schwartz [MSFT] on 6/10/2019, 09:01 AM (4 hours ago): &lt;p&gt;&lt;a rel="user" href="https://developercommunity.visualstudio.com/users/165386/444ee3ff-b973-6f10-ad3d-04c9f042ea7b.html" nodeid="165386"&gt;@Pawel Sygnowski&lt;/a&gt; thank you for all the details.  I am glad to hear the latest SDK is working in all but VS 2017.  This question may be better answered on https://github.com/dotnet/sdk.  I am going to also move it to my colleague on the SDK team.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36281</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 16.1.2 - Suppress In Source Pragma Restore Statement On Wrong Line</Title>
    <Description>VSF_TYPE_MARKDOWNWhen I use 'Suppress in source' on the `return` line in the following code: 
```
public class Class
{
    public void Test()
    {
        if (1 == 2)
        {
            return; /// &amp;lt;see cref=&amp;quot;Class&amp;quot;/&amp;gt;
        }
    }
}
```

The `pragma warning restore` line is put after the closing brace of the if statement.
```
public class Class
{
    public void Test()
    {
        if (1 == 2)
        {
#pragma warning disable CS0162 // Unreachable code detected
            return; /// &amp;lt;see cref=&amp;quot;Class&amp;quot;/&amp;gt;
        }
#pragma warning restore CS0162 // Unreachable code detected
    }
}
```

Shouldn't it be directly after the return statement?
```
public class Class
{
    public void Test()
    {
        if (1 == 2)
        {
#pragma warning disable CS0162 // Unreachable code detected
            return; /// &amp;lt;see cref=&amp;quot;Class&amp;quot;/&amp;gt;
#pragma warning restore CS0162 // Unreachable code detected
        }
    }
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/599633/vs-1612-suppress-in-source-pragma-restore-statemen.html
VSTS ticketId: 911721_
_These are the original issue comments:_

Visual Studio Feedback System on 6/10/2019, 02:33 AM (8 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 6/10/2019, 10:54 AM (95 sec ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36280</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36279</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36278</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36277</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36276</IssueID>
    <RepoID>1</RepoID>
    <Title>Inconsistent handling of `dynamic` generic type constraint when overriding is involved.</Title>
    <Description>```
#nullable enable
class TestDynamic1&lt;T&gt;
{
    public virtual void M&lt;S&gt;() where S : T
    {
    }
}

class TestDynamic2 : TestDynamic1&lt;dynamic&gt;
{
    public override void M&lt;S&gt;()
    {
    }

    void Test()
    {
        base.M&lt;object?&gt;();
        this.M&lt;object?&gt;();
    }
}
```

Observed:
```
.cs(17,9): warning CS8631: The type 'object?' cannot be used as type parameter 'S' in the generic type or method 'TestDynamic1&lt;dynamic&gt;.M&lt;S&gt;()'. Nullability of type argument 'object?' doesn't match constraint type 'dynamic'.
```

Expected to get an additional similar warning for the ```this.M&lt;object?&gt;()``` method ```TestDynamic2.M&lt;S&gt;()```. Both methods have the same signatures and constraints.

I think this is caused by the fact that 
```
        public static TypeParameterBounds ResolveBounds(
            this TypeParameterSymbol typeParameter,
            AssemblySymbol corLibrary,
            ConsList&lt;TypeParameterSymbol&gt; inProgress,
            ImmutableArray&lt;TypeWithAnnotations&gt; constraintTypes,
            bool inherited,
            CSharpCompilation currentCompilation,
            ArrayBuilder&lt;TypeParameterDiagnosticInfo&gt; diagnosticsBuilder,
            ref ArrayBuilder&lt;TypeParameterDiagnosticInfo&gt; useSiteDiagnosticsBuilder)
```
in ConstraintsHelper filters out `dynamic` constraint. That method shouldn't filter out any constraints. The `dynamic` constraint should be filtered out or converted to `object` in the same places where we decide if `object` constraint should be filtered out or not.</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36275</IssueID>
    <RepoID>1</RepoID>
    <Title>Update publish data for 16.2-preview3 snap</Title>
    <Description>
    </Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36274</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide API for IAssemblySymbol to retrieve type forwards</Title>
    <Description>There's already an internal API on PEModuleSymbol, GetForwardedTypes, but I don't think it's ready to be made public. We should actually do some design work to figure out how we want this API to behave.</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36273</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn allows implicit nullability conversions in return types of ref-returning delegates</Title>
    <Description>**Version Used**: 

Branch master (22 May 2019)
Latest commit 04252e by Neal Gafter:
Unskip passing tests. (#35856)

Fixes #35611

**Steps to Reproduce**:

Compile and run the following code
```cs
#nullable enable
class Program
{
    static void Main()
    {
        new C().Test();
    }
}
public class C {
    public string f = "";
    public void Test() {
        D d = M;
        ref string? s = ref d();
        s = null;
        f.ToString();
    }
    
    public ref string M() =&gt; ref f;
}

delegate ref string? D();
```

**Expected Behavior**:
Warning for conversion `D d = M` since `M` returns a non-nullable reference whereas `D` returns a nullable reference.

**Actual Behavior**:
No warnings at all in the code above. The program crashes at runtime with a `NullReferenceException`.

**Notes**
Note that such nullability mismatch in disallowed e.g. in ref parameters.</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36272</IssueID>
    <RepoID>1</RepoID>
    <Title>Track ref returns for Make Field Readonly</Title>
    <Description>🚧 Builds on #36271

Fixes #33009</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36271</IssueID>
    <RepoID>1</RepoID>
    <Title>Define IReturnOperation.RefKind</Title>
    <Description>Fixes #26310</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36270</IssueID>
    <RepoID>1</RepoID>
    <Title>No warnings for a loop with byte indexer and Int32 condition.</Title>
    <Description>**Version Used**: 
3.100.19.26603 (9d80dea7).
Also tried on "master" at [sharplab.io](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEBMBGAsAKHQAgAV9cBvXfS/FDANmoBZ8BZCASwDsAKASgqvI4qw/JxgBtALr54sfAF58HOAHdRHCQGYADNskBufiPwAzAPYJ8XYAE94ohfm36HAHhlxYAOgAycDgDmMAAWLmwA1OF8QsYiNACcXGw8hjGUAL646UA)

**Steps to Reproduce**:
1. Compile the following code:
```csharp
using System;
class P 
{
    static void Main()
    {
        int[] test = new int[300];
        for (byte i = 0; i &lt; test.Length; i++)
            Console.WriteLine(i);
    }
}
```
**Expected Behavior**:
a warning e.g.: 
```
test.Length is int and can be outside the range of type 'byte'
```

**Actual Behavior**:
No warnings generated. The loop is endless.


However, the following code does generate a warrning:
```csharp
for (byte i = 0; i &lt; 300; i++) {}
```
```
warning CS0652: Comparison to integral constant is useless; 
the constant is outside the range of type 'byte'
```

Sorry if there is already an issue for this but I couldn't find any.</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36269</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove support for explicit `object` generic type constraints</Title>
    <Description>Part of https://github.com/dotnet/roslyn/issues/35816</Description>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>13/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36268</IssueID>
    <RepoID>1</RepoID>
    <Title>Use 64-bit OOP for systems with 32GiB+ memory</Title>
    <Description>
    </Description>
    <CreatedDate>09/06/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36267</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle missing private metadata from reference assemblies</Title>
    <Description>Some reference assemblies omit information about private fields. To avoid treating structures in these assemblies as immutable, we only consider types immutable if they contain information about one or more
private fields.

This is a workaround for issues like dotnet/standard#678.</Description>
    <CreatedDate>09/06/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36266</IssueID>
    <RepoID>1</RepoID>
    <Title>C# - make readonly field refactoring ignores MEF Import attributes</Title>
    <Description>When Managed Extensibility Framework (MEF) is used with its [Import] attribute on private field which is not assigned elsewhere, &amp;quot;Add readonly modifier&amp;quot; refactoring is suggested. When realized, readonly modifier makes the code to fail at runtime when MEF tries to inject the imported object.

When this refactoring is auto applied during document formatting, it is error prone to check it untill runtime.

See the attached picture.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/343070/c-make-readonly-field-refactoring-ignores-mef-impo.html
VSTS ticketId: 691047_
_These are the original issue comments:_

Jinu Joseph [MSFT] on 10/14/2018, 08:59 PM (237 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>09/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36265</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36264</IssueID>
    <RepoID>1</RepoID>
    <Title>Use speculative semantic model in simplifier</Title>
    <Description>Fixes #32427

Supersedes #33081</Description>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36263</IssueID>
    <RepoID>1</RepoID>
    <Title>Report passing a maybe-null int? to [DisallowNull] parameter</Title>
    <Description>We should warn for passing a maybe-null value to a `[DisallowNull]` parameter that has a nullable value type. 
Note: when implementing attributes on fields and properties, we'll have to do the same, since the check was not folded into `VisitConversion` or `ReportNullableAssignmentIfNecessary`.

Relates to https://github.com/dotnet/roslyn/issues/35816 (attributes work)</Description>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36262</IssueID>
    <RepoID>1</RepoID>
    <Title>Pass arguments to StreamJsonRpc as arrays</Title>
    <Description>Works around microsoft/vs-streamjsonrpc#272 so our integration tests don't throw exceptions when we run them on machines with 16.1 installed.</Description>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36261</IssueID>
    <RepoID>1</RepoID>
    <Title>Testing Proposal: Continue Exit For ForEach with an Identifier</Title>
    <Description>Testing out [Proposal: Continue Exit For ForEach with an Identifier](https://github.com/dotnet/vblang/blob/de165d8928997a76c0207bb1bed84b2a93c04fab/proposals/proposal-Continue-Exit-For-With-Loop-Identifier.md)</Description>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36260</IssueID>
    <RepoID>1</RepoID>
    <Title>System.MissingMethodException </Title>
    <Description>Hello,

I have a small problem. I am using ROSLYN compiler and tried to invoke RoslynTest.ComputeClass.Compute method, but I got run-time error "System.MissingMethodException: 'Method RoslynTest.ComputeClass.Compute was not found.' The method is in short code in variable g_code in RoslynTest.RoslynInterface.InitCompiler and complette source code in MS VS 2019 is here:

https://drive.google.com/file/d/1TRKshJhApC2ByC961I9f__axjTyGCdnm/view?usp=sharing

and also in in text below. The problem is caused thanks to array-type variable passing to method in 

InvokeCode(ref MyData[,] t_array )

if simple variable e.g. Int32 A is used instead of "MyData[,] t_array" no "MissingMethodException" arose.

Can someone help me where is problem ?

Problem describtion is also here:
https://social.msdn.microsoft.com/Forums/vstudio/en-US/693c34e2-ae7f-4a7c-8de7-4a01012dc396/roslyn-systemmissingmethodexception?forum=csharpgeneral

Many thanks

Jerry 


</Description>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36259</IssueID>
    <RepoID>1</RepoID>
    <Title>No associated IFieldSymbol is provided for a field-like event</Title>
    <Description>If you create a compilation with the following syntax:

```cs
public class Foo
{
    public int X { get; }

    private event EventHandler Y;
}
```

And you get the ITypeSymbol for the type declaration from the symbolic model, it contains an IFieldSymbol representing the backing field for the property but none for the backing field of the event:

![](https://files.gitter.im/dotnet/roslyn/m0CW/image.png)

Why is an associated IFieldSymbol surfaced for an autoprop but not an auto event?
Is there any chance that an associated IFieldSymbol might not be surfaced for an autoprop in some circumstances if I got the containing ITypeSymbol from a TypeDeclarationSyntax? 

@CyrusNajmabadi reproduced this and asked me to file since this doesn't seem right to him.

https://github.com/dotnet/roslyn/blob/611578d74c11a34da7142f6d62dbb9f0610c4cec/src/Compilers/Core/Portable/Symbols/IFieldSymbol.cs#L17-L24

https://github.com/dotnet/roslyn/blob/611578d74c11a34da7142f6d62dbb9f0610c4cec/src/Compilers/CSharp/Portable/Symbols/Source/SourceFieldLikeEventSymbol.cs#L74-L80</Description>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36258</IssueID>
    <RepoID>1</RepoID>
    <Title>Finalizer constructor</Title>
    <Description>&lt;p&gt;With the code below the TestClass finaliser is called despite the fact that the constructor is never called. This happens with -toolsversion:4.0 but not for 3.5 or 2.0.&lt;/p&gt; &lt;p&gt;FinaliserBug.cs:&lt;/p&gt; &lt;pre&gt;namespace FinaliserBug
{
    class TestClass
    {
        public TestClass(string arg) { System.Console.WriteLine(&amp;quot;constructor&amp;quot;); }
        ~TestClass() { System.Console.WriteLine(&amp;quot; finaliser &amp;quot;); }
    }

class Program
    {
        static void Main(string[] args)
        {
            System.Console.WriteLine(&amp;quot;begin&amp;quot;);
            try
            {
                new TestClass(args[args. Length]);
                System.Console.WriteLine(&amp;quot;constructed&amp;quot;);
            }
            catch
            {
                System.Console.WriteLine(&amp;quot;bang!&amp;quot;);
            }
            System.Console.WriteLine(&amp;quot;end&amp;quot;);
        }
    }
}
&lt;/pre&gt;&lt;p&gt;FinaliserBug.msbuild:&lt;/p&gt;&lt;pre&gt;&amp;lt;Project xmlns=&amp;quot;http://schemas.microsoft.com/developer/msbuild/2003&amp;quot;&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Compile Include=&amp;quot;FinaliserBug.cs&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
  &amp;lt;Target Name=&amp;quot;Build&amp;quot;&amp;gt;
    &amp;lt;Csc Sources=&amp;quot;@(Compile)&amp;quot;/&amp;gt;  
  &amp;lt;/Target&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/pre&gt;&lt;p&gt;Build:&lt;/p&gt;&lt;pre&gt;C:\Temp\FinaliserBug&amp;gt;c:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild -toolsversion:4.0 FinaliserBug.msbuild
Microsoft (R) Build Engine version 4.7.3190.0
[Microsoft .NET Framework, version 4.0.30319.42000]
Copyright (C) Microsoft Corporation. All rights reserved.

Build started 18/05/2019 12:48:13 PM.
Project &amp;quot;C:\Temp\FinaliserBug\FinaliserBug.msbuild&amp;quot; on node 1 (default targets).
Build:
  C:\Windows\Microsoft.NET\Framework\v4.0.30319\Csc.exe /out:FinaliserBug.exe FinaliserBug.cs
Done Building Project &amp;quot;C:\Temp\FinaliserBug\FinaliserBug.msbuild&amp;quot; (default targets).

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:01.16
&lt;/pre&gt;&lt;p&gt;Actual output:&lt;/p&gt;&lt;pre&gt;C:\Temp\FinaliserBug&amp;gt;FinaliserBug.exe
begin
bang!
end
 finaliser 
&lt;/pre&gt;&lt;p&gt;Expected output:&lt;/p&gt;&lt;pre&gt;C:\Temp\FinaliserBug&amp;gt;FinaliserBug.exe
begin
bang!
end
&lt;/pre&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/573390/finalizer-constructor.html
VSTS ticketId: 895482_
_These are the original issue comments:_

Sascha Sanches on 5/18/2019, 01:30 AM (20 days ago): &lt;p&gt;Hi,&lt;/p&gt;&lt;p&gt;the argument args[args.Length] will cause an exception. The index is one too large: indexing the array is normally from 0 to .Length - 1 inclusive.&lt;/p&gt;

Visual Studio Feedback System on 5/19/2019, 07:21 PM (19 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36257</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36256</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36255</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36254</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36253</IssueID>
    <RepoID>1</RepoID>
    <Title>Diagnostic Id refactoring</Title>
    <Description>
    </Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36252</IssueID>
    <RepoID>1</RepoID>
    <Title>IsCompletionActive returns false when no text view is active</Title>
    <Description>
    </Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>09/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36251</IssueID>
    <RepoID>1</RepoID>
    <Title>Filter out missing import fixes that would add references</Title>
    <Description>Allow the user to choose when they want to add and which references they want to add to their project.

Resolves #34398, since the error is triggered by a foreground assertion when adding Framework assembly references.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36250</IssueID>
    <RepoID>1</RepoID>
    <Title>🔬 Show the exception in the gold bar</Title>
    <Description>
    </Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36249</IssueID>
    <RepoID>1</RepoID>
    <Title>Add only LSP server projects without liveshare dependencies.</Title>
    <Description>Editor team wishes to start testing out LSP stuff with Roslyn.  So push this to master so we can start work on that.  Also will help make the overall insertion easier, won't have to handle both the new dependencies and liveshare switch in the same insertion.

The implementations are copied from liveshare.  The additional work I did was adding tests and setting up the projects.
This only includes the pieces that don't have a UI dependency / other liveshare dependency.  Those will be moved later on.

This will need cleanup - tracked in https://github.com/dotnet/roslyn/projects/45

~~TODO - Run val build~~</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36248</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense suggests name that does not match convention</Title>
    <Description>**Version Used**: Visual Studio 2019 version 16.2 Preview 1

**Steps to Reproduce**:

1. Open Roslyn.sln
2. Type `CancellationToken` and press &lt;kbd&gt;Space&lt;/kbd&gt; in a parameter list

**Expected Behavior**:

Naming suggestions:

* cancellationToken
* cancellation
* token

**Actual Behavior**:

Naming suggestions:

* cancellationToken
* cancellation
* token
* CancellationToken
* Cancellation
* Token
</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36247</IssueID>
    <RepoID>1</RepoID>
    <Title>Param nullchecking binding</Title>
    <Description>Working cases for binding parameter nullchecking.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36246</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable Assert in DiagnosticsUpdatedArgs</Title>
    <Description>```
Debug.Assert(diagnostics.All(d =&gt; d.ProjectId == projectId &amp;&amp; d.DocumentId == documentId));
```

fails for `EditAndContinueDiagnosticUpdateSource`. 

This should be addressed by https://github.com/dotnet/roslyn/pull/36010. Enable the assert once the PR is merged.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36245</IssueID>
    <RepoID>1</RepoID>
    <Title>Wait for project system before waiting for workspace</Title>
    <Description>Resolves flakiness problems in several tests, including:

* `VerifySyntaxErrorSquiggles`
* `VerifySemanticErrorSquiggles`
* `ErrorLevelWarning`
* `ErrorsDuringMethodBodyEditing`</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36244</IssueID>
    <RepoID>1</RepoID>
    <Title>Can't run tests in VS anymore.</Title>
    <Description>This is after moving to the latest roslyn/master.  

Nothing i do seems to help.  I've cleaned git.  I've restored.  I've restarted VS.  I've fully rebuilt roslyn.  But eveyr time i try to run tests in some dll i get an error like:

```
[6/7/2019 11:36:35.821 AM Error] System.InvalidOperationException: The following TestContainer was not found 'C:\github\roslyn\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests\Release\net472\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.dll'
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;GetTestContainerAsync&gt;d__47.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.TestContainerConfigurationQueryByTestsBase.&lt;QueryTestContainerConfigurationsAsync&gt;d__6.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.TestContainerConfigurationQueryByTestsBase.&lt;GetContainersToUpdateInternalAsync&gt;d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.TestContainerConfigurationQuery.&lt;GetContainersToUpdateAsync&gt;d__11.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;UpdateVsHierarchyContainers&gt;d__40.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;UpdateContainersInternalAsync&gt;d__38.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;UpdateContainersAsync&gt;d__37.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.DiscoveryOperation.&lt;DetectChangedContainers&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.DiscoveryOperation.&lt;StartDiscoverTestsAsync&gt;d__12.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.RunOperation.&lt;RunTestsAsync&gt;d__17.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.Operation.&lt;&lt;Execute&gt;b__39_0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Extensibility.ILoggerExtensions.&lt;CallWithCatchAsync&gt;d__6`1.MoveNext()
[6/7/2019 11:36:35.821 AM Error] System.InvalidOperationException: Operation is not valid due to the current state of the object.
   at Microsoft.VisualStudio.TestWindow.Controller.OperationData.Microsoft.VisualStudio.TestWindow.Controller.IOperationData.OperationSetFinished(Operation operation)
   at Microsoft.VisualStudio.TestWindow.Controller.Operation.&lt;Execute&gt;d__39.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Extensibility.ILoggerExtensions.&lt;CallWithCatchAsync&gt;d__6`1.MoveNext()
[6/7/2019 11:36:35.827 AM Error] System.InvalidOperationException: The following TestContainer was not found 'C:\github\roslyn\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests\Release\net472\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.dll'
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;GetTestContainerAsync&gt;d__47.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.TestContainerConfigurationQueryByTestsBase.&lt;QueryTestContainerConfigurationsAsync&gt;d__6.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.TestContainerConfigurationQueryByTestsBase.&lt;GetContainersToUpdateInternalAsync&gt;d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.TestContainerConfigurationQuery.&lt;GetContainersToUpdateAsync&gt;d__11.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;UpdateVsHierarchyContainers&gt;d__40.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;UpdateContainersInternalAsync&gt;d__38.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;UpdateContainersAsync&gt;d__37.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.DiscoveryOperation.&lt;DetectChangedContainers&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.DiscoveryOperation.&lt;StartDiscoverTestsAsync&gt;d__12.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.RunOperation.&lt;RunTestsAsync&gt;d__17.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.Operation.&lt;&lt;Execute&gt;b__39_0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Extensibility.ILoggerExtensions.&lt;CallWithCatchAsync&gt;d__6`1.MoveNext()
[6/7/2019 11:45:58.530 AM Error] System.InvalidOperationException: The following TestContainer was not found 'C:\github\roslyn\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests\Release\net472\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.dll'
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;GetTestContainerAsync&gt;d__47.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.TestContainerConfigurationQueryByTestsBase.&lt;QueryTestContainerConfigurationsAsync&gt;d__6.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.TestContainerConfigurationQueryByTestsBase.&lt;GetContainersToUpdateInternalAsync&gt;d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.TestContainerConfigurationQuery.&lt;GetContainersToUpdateAsync&gt;d__11.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;UpdateVsHierarchyContainers&gt;d__40.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;UpdateContainersInternalAsync&gt;d__38.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Client.TestContainer.TestContainerProvider.&lt;UpdateContainersAsync&gt;d__37.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.DiscoveryOperation.&lt;DetectChangedContainers&gt;d__5.MoveNext()https://github.com/dotnet/roslyn/issues
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.DiscoveryOperation.&lt;StartDiscoverTestsAsync&gt;d__12.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.RunOperation.&lt;RunTestsAsync&gt;d__17.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.Operation.&lt;&lt;Execute&gt;b__39_0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Extensibility.ILoggerExtensions.&lt;CallWithCatchAsync&gt;d__6`1.MoveNext()
```</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36243</IssueID>
    <RepoID>1</RepoID>
    <Title>Surround with messes the next line when whole lines are selected</Title>
    <Description>VSF_TYPE_MARKDOWN1. Start with the following code:

```C#
namespace SurroundWith
{
    using System;

class Program
    {
        static void Main(string[] args)
        {
            var a = MayFail();
        }

static int MayFail()
        {
            return (new Random()). Next(2) == 0 ? 42 : throw new Exception(&amp;quot;nope&amp;quot;);
        }
    }
}
```

2. Select the whole `var a = MayFail();` line: put the cursor at the start of the line and press Shift+Down arrow.
3. Go to Edit -&amp;gt; IntelliSense -&amp;gt; Surround With, select `try` in the &amp;quot;surround with&amp;quot; menu;
4. Notice that the closing brace for the `Main` function is now on the same line as the closing brace for the `catch` statement and separated by a bunch of spaces.

I expect not to have my braces messed up as a result of using that feature.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/588197/surround-with-messes-the-next-line-when-whole-line.html
VSTS ticketId: 901370_
_These are the original issue comments:_

Visual Studio Feedback System on 5/29/2019, 07:37 PM (8 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Vatsalya Agrawal [MSFT] on 6/7/2019, 09:34 AM (90 min ago): &lt;p&gt;Thank you for providing feedback, and we're sorry to hear it's not behaving as you expect. Based on your description so far, we were unable to reproduce the issue. Brace alignment in the latest preview is working as expected when we executed the repro steps. Could you please upgrade to latest preview and try again.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;If the problem persists, please provide a sample project where this issue is occurring.&lt;/p&gt;

Andrei Grigorev [MSFT] on 6/7/2019, 10:06 AM (59 min ago): &lt;p&gt;Yes, it still reproduces in the latest preview and it reproduces in *any* project, you don't need any specific one for that. To reproduce you *must* follow the step 2 to the point. The selection must happen top to bottom and include the line break. The cursor must end up on the next line. See the screenshot.&lt;/p&gt;&lt;p&gt;&lt;img src="https://developercommunity.visualstudio.com/storage/temp/77596-vs-selection.png"&gt;&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36242</IssueID>
    <RepoID>1</RepoID>
    <Title>More scenarios for nullability attributes</Title>
    <Description>More scenarios involving return value (search for uses of `ReturnTypeWithAnnotations` in `NullableWalker`):
- Test increment operator with different nullability on input and output, as well as attribute on output (VisitIncrementOperator)
- GetEnumerator with attribute on output (VisitForEachExpression)
- Current property with attribute on output (VisitForEachIterationVariables)
- Unary operator (VisitUnaryOperator, lifted and unlifted scenarios)
- Logical operator (InferResultNullability)
- GetAwaiter with attribute on output

Some other scenarios:
- `[DisallowNull]` on input of a conversion method
- `[AllowNull]` on input of a conversion method

Relates to https://github.com/dotnet/roslyn/issues/35816</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36241</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing possible dereference of null reference warning for range / index from end access to nullable strings</Title>
    <Description>**Version Used**: 

```
Branch master (22 May 2019)
Latest commit 04252e by Neal Gafter:
Unskip passing tests. (#35856)

Fixes #35611
```

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
class C
{
  static void Main()
  {
    M1(null);
    M2(null);
  }

  static void M1(string? s)
  {
    _ = s[^1];
  }
  
  static void M2(string? s)
  {
    _ = s[1..10];
  }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGFGBvRiipgIwA2fgBYKAWQgBLXAAoAlLwo8GfPhIFyCxBQG5lGltqKF9ygL6NlgkU3Ga5ggAwB+ClCVqVhigH0KAF4PAG0APQEAXQNvK28bYTFJYxd3T2VVdX8g0IEAOjyBZ2jLRjjGGjA4KAAHCABjSkFuXyZnfnyAJXxcGGkqvPYAezAa6XIEAGVEADdpRqgY1oBmCgQ4CBQh3EIATw8YBHx6mApOiFwAczhfTKz1JlWASVwUOAAPCkmYCARTrgo1xgego5W8934z1eHwoAFFXipAXBgaDrOD7o8zhdrnIXm9PrBfjAkBQ8TDqCgvBC+HdqepvkScoS/jE6Vl4SgchTWdSwXTMbYsVdKAy/gBBGC46EEn5/BRBAB8FFwcAA7kKccziaTpXkOeYGL4sgLEudhXDXhKpfiqK95YElSr1WacWT3nlRdqKQajQ9VoKXZQxcRFcq1Rq4NaPh7Zdq3Xq7Ut0VkQhJkQALIYoJ6jQhyNMwTPZ3MAeRqfW2UDyYsul3WUCg0hmcBehFkskuCkivr4mJLADN+1BkWLXgAZaiXQsUADiyIHQ5H48nhbkslO5Cuhap1NpbPXByJPLZOptWrdOU9x/3/YocnPuqeUAAYggRvqe2ytTlN1P0xQAFpDz+eMADUIEIfA4GvOk4EIYdPzpb9ggffE8nAyDoLRE8+APblEPUC8KQvYIORg6lpFvORiMfF83zAD9kxwikfxXf8gJotCMKg8iITghCmJPFjgk46NuKww1BPuSi7zkfB1wUFilTkhTf2nTBMDveTegUb9lO0mBFLtAiaRM+5CzfdUnQoMUEEufAql6Et8BgAdA1hd5GnLaRtkUXj7j5HCmAAdjDdUF2HGBRxQCct3Te9YxJFigK1A06UCiFMXWTZtj2A4jhOCgIqXGK2M/Pd+VWA9iv+JEUTiHDIQoA9Yr/REgRBDK2T7QdIui1rVwPIZeuREkDzU9MdxPCqcJqnJhsXYEzKyAb/2CCb/KyLrKqSAAROB6krQ5jklIYXOa3oKAWyKSTO05xrYqa2Rmk9ruRHIas26kJpyVavr4BreV8OIwTRSpqjqRoOhadE2g6PJul6fo4EGEYxgmaYEDmBZryyjYth2fZYAK04LxAUlYQAR3wCAfjIOAAB43QVW5PxqBAm1pyhsoJvKDz8GYIJ47DqVTDMsxzGo8wLItJcIMsK1wKsazrapG2bVt2yuLtP0xN010uwXMJJYAhiGQgKH7eiORyfsIOHJ6she6SqKNqCKAZihnEd3dlvUCyhis8NbPsxzXJctzsTgDyvMVvyzO2iiqKt99jKkukBaFyhggAPzdiTGv4m50+pTPMJyfP/MTvgAHoa4oAAVdNKH7c3CEDjsKHZzn4AoQ6leOk4hgQKAKEgWQ8vqbL4E5VuEC7xBb2yqBtgoGAhgoCB7DX5u++b+oAGsoDZjnBd7/WD3zn3TJLvgy/d4JK8/auKDr+uGagBzIAQXYFXYafKAXFPDCGoQx1yd1ppbaQI9ThwTgGHPIDMa6fzAN/X+ut/SJAvJ6UM1l9beyTHSN+HsUFoL/gAzeuBgGfFAeAq4m9TjADgLsbYnISCwCoOQBBSDSG/HQVJE0IgLw2wdGFahcgc4EJFhCMWhYJa5nzOLYsUsFY+SVtWWs9Z1Yth2FrTs3YBGYKEdKCgr4RiegNqcK+5UzIyTkPnD2Xtr73GdnSAOQd1QhwctQcOrl+zuU8nAbyvk0o4RfsaUKeDpT2KzqEiEL9ZGywUTLeRKjgnqJVlopsOi2y4A7DrQxHRjE2jMQxV4liKDWKkq49QdiHGe29mZGpEJ3FiK8WHZyfiAmxzUfHW+qJJKNRCmI/WedYlV2kfcYhH8v58IVJ0ZE+AEBKx3pQWQNp86IOQbMn+LNCkHnEjY/pQIml+1wlRe+lAGnOKGaFHOlz/r3CLmcjEoUHkJ2fpM40qxTbm1JHRVOnJRGXMcc4QhosUnKOlkouWqjKwaNVg2bJms8nawMTtA8c4/GLQqRNZxzSLqnDektQZOE7FPlKYxRqWRiWsTioBO89yr6POef0mlI1TjBHeaSk8wziUTJ5RiVYQxmwIA5m8CgvyLZUxpvBOQQxgAACsDpWNiaGBx0hR4XgAGTav8A4wIwQ5BRneAoK+eRuUYMlWbaV1N7Z3gvEMQsiB7RKhBYaq6zqEAWqfoK75V1RXirWZdLFAAJaA6ZhhvEUKGS1hTBT9ClvMaQRKaiIFpsPcRl81WiNKRY5lwMyhAA

**Expected Behavior**:
Warnings for possible dereference of a null reference for both `s[^1]` and `s[1..10]` since they access the string without checking it for null via `.Length` and `.Substring` respectively.

**Actual Behavior**:
No warnings. Both expressions crash with a `NullReferenceException` at runtime.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36240</IssueID>
    <RepoID>1</RepoID>
    <Title>Debugger stepping out of async ValueTask method simply continues execution of program</Title>
    <Description>VSF_TYPE_MARKDOWN1. Create a .NET (Core) console application with the code below.
1. Hit F11 to begin stepping into the program.
1. Continue pressing F11 till the program exits.

**Expected**
Each statement and closing curly brace is stepped to.

**Actual**
At the exiting curly brace of the `async ValueTask` method, Step Into simply Runs the rest of the program instead of stepping back to the 2 calling methods.

```cs
using System;
using System.Threading.Tasks;

namespace StepIntoRepro
{
    class Program
    {
        static void Main(string[] args)
        {
            StepIntoValueTaskMethod(). Wait();
        }

public static async Task StepIntoValueTaskMethod()
        {
            await DoValueTask(false);
        }

private static async ValueTask DoValueTask(bool yield)
        {
            if (!yield)
            {
                return;
            }

await Task.Yield();
        }
    }
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/591002/debugger-stepping-out-of-async-valuetask-method-si.html
VSTS ticketId: 903574_
_These are the original issue comments:_

Visual Studio Feedback System on 6/3/2019, 02:28 AM (4 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36239</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable preview SDKs for all builds</Title>
    <Description>This build prerequisite is not exposed as an MSBuild property or target, so we enable the setting for the current user instead.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36238</IssueID>
    <RepoID>1</RepoID>
    <Title>[AggregateException] On wrong TargetFrameworks setting</Title>
    <Description>Hello,

I try to change the target framework version of my project
from `netcoreapp3.0` to `netcoreapp3.0; netstandard2.1`,
but I haven't used the correct separator, so i used the `,` instead of the `;` and visual studio crash internal and show a yellow banner with a button to show the protocol.

**Version Used**: 
Visual Studio 2019 Preview
Version 16.2.0 Preview 1.0
German language

**Steps to Reproduce**:
1. Open a .NET Core project
2. Open the *.csproj file
3. Change TargetFrameworks to a not supported string like (`netcoreapp3.0, netstandard2.1`)

**Expected Behavior**:
* Should not crash
* Should show information (banner or message-box) about the wrong target framework string

When possible, show the support target framework versions as a list or similar or show a link to https://docs.microsoft.com/en-us/dotnet/standard/frameworks

**Actual Behavior**:
```
=====================
System.AggregateException: Mindestens ein Fehler ist aufgetreten. ---&gt; NuGet.Frameworks.FrameworkException: Ungültiger Frameworkbezeichner "".
   bei NuGet.Frameworks.NuGetFramework.GetShortFolderName(IFrameworkNameProvider mappings)
   bei NuGet.SolutionRestoreManager.VsSolutionRestoreService.&lt;&gt;c.&lt;ToPackageSpec&gt;b__11_0(TargetFrameworkInformation tfi)
   bei System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   bei System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   bei System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   bei NuGet.SolutionRestoreManager.VsSolutionRestoreService.ToPackageSpec(ProjectNames projectNames, IEnumerable TargetFrameworks, String originalTargetFrameworkstr, String msbuildProjectExtensionsPath)
   bei NuGet.SolutionRestoreManager.VsSolutionRestoreService.ToDependencyGraphSpec(ProjectNames projectNames, IVsProjectRestoreInfo projectRestoreInfo, IVsProjectRestoreInfo2 projectRestoreInfo2)
   bei NuGet.SolutionRestoreManager.VsSolutionRestoreService.NominateProjectAsync(String projectUniqueName, IVsProjectRestoreInfo projectRestoreInfo, IVsProjectRestoreInfo2 projectRestoreInfo2, CancellationToken token)
   bei NuGet.SolutionRestoreManager.VsSolutionRestoreService.NominateProjectAsync(String projectUniqueName, IVsProjectRestoreInfo2 projectRestoreInfo, CancellationToken token)
   bei Microsoft.VisualStudio.ProjectSystem.VS.PackageRestore.PackageRestoreInitiator.PackageRestoreInitiatorInstance.&lt;NominateProjectRestoreAsync&gt;d__12.MoveNext()
--- Ende der Stapelüberwachung vom vorhergehenden Ort, an dem die Ausnahme ausgelöst wurde ---
   bei System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   bei System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   bei Microsoft.VisualStudio.Threading.JoinableTask.&lt;JoinAsync&gt;d__68.MoveNext()
--- Ende der Stapelüberwachung vom vorhergehenden Ort, an dem die Ausnahme ausgelöst wurde ---
   bei System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   bei System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   bei Microsoft.VisualStudio.ProjectSystem.VS.PackageRestore.PackageRestoreInitiator.PackageRestoreInitiatorInstance.&lt;OnRestoreInfoChangedAsync&gt;d__11.MoveNext()
--- Ende der Stapelüberwachung vom vorhergehenden Ort, an dem die Ausnahme ausgelöst wurde ---
   bei System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   bei System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   bei Microsoft.VisualStudio.ProjectSystem.DataReceivingBlockSlim`1.&lt;ProcessInputQueueAsync&gt;d__5.MoveNext()
--- Ende der Stapelüberwachung vom vorhergehenden Ort, an dem die Ausnahme ausgelöst wurde ---
   bei System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   bei Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Rethrow(Exception ex)
   bei Microsoft.VisualStudio.ProjectSystem.ProjectErrorReporting.&lt;&gt;c__DisplayClass6_0.&lt;SubmitErrorReport&gt;b__0()
   bei Microsoft.VisualStudio.ProjectSystem.ExceptionFilter.&lt;&gt;c__DisplayClass2_0.&lt;Guard&gt;g__action|0()
   bei GuardMethodClass.GuardMethod(Func`1 , Func`2 , Func`2 )
   --- Ende der internen Ausnahmestapelüberwachung ---
---&gt; (Interne Ausnahme #0) NuGet.Frameworks.FrameworkException: Ungültiger Frameworkbezeichner "".
   bei NuGet.Frameworks.NuGetFramework.GetShortFolderName(IFrameworkNameProvider mappings)
   bei NuGet.SolutionRestoreManager.VsSolutionRestoreService.&lt;&gt;c.&lt;ToPackageSpec&gt;b__11_0(TargetFrameworkInformation tfi)
   bei System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   bei System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   bei System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   bei NuGet.SolutionRestoreManager.VsSolutionRestoreService.ToPackageSpec(ProjectNames projectNames, IEnumerable TargetFrameworks, String originalTargetFrameworkstr, String msbuildProjectExtensionsPath)
   bei NuGet.SolutionRestoreManager.VsSolutionRestoreService.ToDependencyGraphSpec(ProjectNames projectNames, IVsProjectRestoreInfo projectRestoreInfo, IVsProjectRestoreInfo2 projectRestoreInfo2)
   bei NuGet.SolutionRestoreManager.VsSolutionRestoreService.NominateProjectAsync(String projectUniqueName, IVsProjectRestoreInfo projectRestoreInfo, IVsProjectRestoreInfo2 projectRestoreInfo2, CancellationToken token)
   bei NuGet.SolutionRestoreManager.VsSolutionRestoreService.NominateProjectAsync(String projectUniqueName, IVsProjectRestoreInfo2 projectRestoreInfo, CancellationToken token)
   bei Microsoft.VisualStudio.ProjectSystem.VS.PackageRestore.PackageRestoreInitiator.PackageRestoreInitiatorInstance.&lt;NominateProjectRestoreAsync&gt;d__12.MoveNext()
--- Ende der Stapelüberwachung vom vorhergehenden Ort, an dem die Ausnahme ausgelöst wurde ---
   bei System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   bei System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   bei Microsoft.VisualStudio.Threading.JoinableTask.&lt;JoinAsync&gt;d__68.MoveNext()
--- Ende der Stapelüberwachung vom vorhergehenden Ort, an dem die Ausnahme ausgelöst wurde ---
   bei System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   bei System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   bei Microsoft.VisualStudio.ProjectSystem.VS.PackageRestore.PackageRestoreInitiator.PackageRestoreInitiatorInstance.&lt;OnRestoreInfoChangedAsync&gt;d__11.MoveNext()
--- Ende der Stapelüberwachung vom vorhergehenden Ort, an dem die Ausnahme ausgelöst wurde ---
   bei System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   bei System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   bei Microsoft.VisualStudio.ProjectSystem.DataReceivingBlockSlim`1.&lt;ProcessInputQueueAsync&gt;d__5.MoveNext()
--- Ende der Stapelüberwachung vom vorhergehenden Ort, an dem die Ausnahme ausgelöst wurde ---
   bei System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   bei Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Rethrow(Exception ex)
   bei Microsoft.VisualStudio.ProjectSystem.ProjectErrorReporting.&lt;&gt;c__DisplayClass6_0.&lt;SubmitErrorReport&gt;b__0()
   bei Microsoft.VisualStudio.ProjectSystem.ExceptionFilter.&lt;&gt;c__DisplayClass2_0.&lt;Guard&gt;g__action|0()
   bei GuardMethodClass.GuardMethod(Func`1 , Func`2 , Func`2 )&lt;---

===================
```

Have a good weekend
</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36237</IssueID>
    <RepoID>1</RepoID>
    <Title>fixed DeclarationNameCompletionProvider when used via Nuget package</Title>
    <Description>`Microsoft.CodeAnalysis.CSharp.Features` doesn't declare `Humanizer` as a dependency - instead it uses `PrivateAssets="all"`. 
`PrivateAssets` is intended for build-time dependencies only, so the result is that the produced Nuget package doesn't contain the Humanizer.dll nor does it list it as a dependency.

This is a regression that started with Roslyn 2.11.x-beta and continues into Roslyn 3.x, because it [used to work](https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp.Features/2.10.0).

The consequence of the missing `Humanizer` is that the `DeclarationNameCompletionProvider` silently breaks when used via the Nuget package. It ends up throwing an exception about missing `Humanizer` reference but that exception [is swallowed](https://github.com/dotnet/roslyn/blob/master/src/Features/CSharp/Portable/Completion/CompletionProviders/DeclarationNameCompletionProvider.cs#L70).

This actually broke declaration name completion in [OmniSharp](https://github.com/OmniSharp/omnisharp-roslyn/pull/1520) and shipped into the latest version of C# extension for VS Code. The current workaround is to reference Humanizer directly in the host application, but obviously the Nuget package should be fixed too.

For the record - repro steps:

```
          // reference Microsoft.CodeAnalysis.CSharp.Features Nuget

          var host = MefHostServices.Create(MefHostServices.DefaultAssemblies);
          var workspace = new AdhocWorkspace(host);

            var code = @"using System;

            public class MyClass
            {
                public static void MyMethod(int value)
                {
                    MyClass 
                }
            }";

            var projectInfo = ProjectInfo.Create(ProjectId.CreateNewId(), VersionStamp.Create(), "MyProject", "MyProject", LanguageNames.CSharp).
                WithMetadataReferences(new[] { MetadataReference.CreateFromFile(typeof(object).Assembly.Location) });
            var project = workspace.AddProject(projectInfo);
            var document = workspace.AddDocument(project.Id, "MyFile.cs", SourceText.From(code));

            var completionService = CompletionService.GetService(document);
            var results = await completionService.GetCompletionsAsync(document, code.LastIndexOf("MyClass ") + 8);

            // results is null (exception gets swallowed), instead of a completion list with entries like "my", "myClass", "My", "MyClass"
```</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36236</IssueID>
    <RepoID>1</RepoID>
    <Title>Rapid renaming causes ANE</Title>
    <Description>**Version Used**: 16.1.2+29001.49

**Steps to Reproduce**:

1. Have a source file with more than one property
2. Focus one property
3. Press &lt;kbd&gt;F2&lt;/kbd&gt; to initiate a rename
4. Focus another property
5. Press &lt;kbd&gt;F2&lt;/kbd&gt; again, quickly followed by &lt;kbd&gt;Esc&lt;/kbd&gt;

```
System.ArgumentNullException: Value cannot be null.
Parameter name: relativeSourceFilePath
   at Microsoft.Requires.NotNull[T](T value, String parameterName)
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.HandleBeforeRefactorFailure(Int32 promptContinueOnFail, String relativeSourceFilePath, String errorMessage, HashSet`1 failedFiles)
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.&lt;&gt;c__DisplayClass744_0.&lt;&lt;HandleBeforeRefactorNotify&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()
   at Microsoft.VisualStudio.Threading.JoinableTask`1.CompleteOnCurrentThread()
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1 asyncMethod, JoinableTaskCreationOptions creationOptions)
   at Microsoft.VisualStudio.ProjectSystem.ProjectMultiThreadedService.ExecuteSynchronously[T](Func`1 asyncAction)
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.&lt;&gt;c__DisplayClass577_0.&lt;HrInvoke&gt;b__0()
   at Microsoft.VisualStudio.ProjectSystem.VS.HResult.Invoke(Func`1 action, IServiceProvider vsShellServiceProvider, IProjectFaultHandlerService projectFaultHandlerService, UnconfiguredProject project)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Rethrow(Exception ex)
   at Microsoft.VisualStudio.ProjectSystem.ProjectErrorReporting.&lt;&gt;c__DisplayClass6_0.&lt;SubmitErrorReport&gt;b__0()
   at Microsoft.VisualStudio.ProjectSystem.ExceptionFilter.&lt;&gt;c__DisplayClass2_0.&lt;Guard&gt;g__action|0()
   at GuardMethodClass.GuardMethod(Func`1 , Func`2 , Func`2 )
```

**Expected Behavior**:

Second rename is cancelled.

**Actual Behavior**:

Yellow error bar. Logged exception.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36235</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36234</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36233</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36232</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36231</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36230</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36229</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36228</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36227</IssueID>
    <RepoID>1</RepoID>
    <Title>Find All References on a method parameters from an interface is inconsistent to methods from an interface</Title>
    <Description>Given the following code:

```
    public interface I
    {
        void M(string param);
    }

    public class C : I
    {
        public void M(string param)
        {
        }

        public void M1()
        {
            M(param: "zz");
        }
    }

    public class D
    {
        public void M2()
        {
            new C().M(param: "zz");
        }

        public void M3(I i)
        {
            i.M(param: "zz");
        }
    }
```

If I invoke Find All References on any `M`, be it call, definition, or concrete implementation, I get the same 3 results covering C.M and I.M. 

Invoking FAR on `param` is inconsistent with this: Invoking it on the implementation (ie, in C.M) returns the 2 calls to the concrete implementation only (ie, calls in M1 and M2) and invoking it on the definition or the interface call, returns only 1 reference to the interface call in M3.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36226</IssueID>
    <RepoID>1</RepoID>
    <Title>Get SVsSolution service instead of IVsSolution</Title>
    <Description>Follow up on previous [PR feedback](https://github.com/dotnet/roslyn/pull/35746).</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36225</IssueID>
    <RepoID>1</RepoID>
    <Title>Make VSWorkspace.GetProjectGuid accessible to XAML</Title>
    <Description>Enables proper fix for https://github.com/dotnet/roslyn/issues/36223.

DevDiv change: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/185383?_a=overview</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36224</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove assert</Title>
    <Description>
    </Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36223</IssueID>
    <RepoID>1</RepoID>
    <Title>Reenable GetHierarchy assertion</Title>
    <Description>Once XAML designer is fixed to not use this API on background thread</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36222</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36221</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable preview SDKs for CI builds</Title>
    <Description>
    </Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36220</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove naming styles before generating field/property/parameter in constructor related refactorings</Title>
    <Description>Fixes #35776
Fixes #35775
Fixes #36741</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36219</IssueID>
    <RepoID>1</RepoID>
    <Title>Use pattern-matching in MetadataWriter for readability and possibly performance.</Title>
    <Description>
    </Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>04/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36218</IssueID>
    <RepoID>1</RepoID>
    <Title>Definite assignment not detected in conditional access</Title>
    <Description>The following sample program produces an error, even though we might expect that within the "then" block an assignment is known to have occurred.

```cs
public class C
{
    static void M1(C c)
    {
        string s1;
        if (c?.M(out s1) == true)
        {
            Console.WriteLine(s1); // error CS0165: Use of unassigned local variable 's1'
        }
    }
    
    bool M(out string s) { s = ""; return true; }
}
```

Compare to this similar program which does detect a definite assignment.
```cs
public class C
{
    static void M2(C c)
    {
        string s2;
        if (c != null &amp;&amp; c.M(out s2))
        {
            Console.WriteLine(s2); // OK
        }
    }
    
    bool M(out string s) { s = ""; return true; }
}
```</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36217</IssueID>
    <RepoID>1</RepoID>
    <Title>Apply Venus location mapping when creating the TODO item</Title>
    <Description>Tracking todo in VisualStudioBaseTodoListTable.cs</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36216</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix build with RTM VS image</Title>
    <Description>Specify a preview version in sdk/version so that VS can use preview SDK without having to check the "Use Previews" box.

Do not put an exact version there because it would be preferred when trying to dogfood a newer version. Also, it would duplicate arcade's tools/dotnet field, which is unnecessary.</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36215</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix diagnostic suppressor feature for compiler warnings in presence of /warnaserror</Title>
    <Description>Tracks the work reverted from https://github.com/dotnet/roslyn/pull/36067 as par of https://github.com/dotnet/roslyn/pull/36067#discussion_r291283127.

Following unit tests should be unskipped as part of this work:
1. C#:  `TestSuppression_CompilerParserWarningAsError`
2. VB: `TestSuppression_CompilerWarningAsError`</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36214</IssueID>
    <RepoID>1</RepoID>
    <Title>New class templates should have using directives inside the namespace</Title>
    <Description>VSF_TYPE_MARKDOWNMany people use ReSharper or StyleCop. Those have a rule enabled by default that the using directives should be inside the namespace declaration. It has been widely debated why that rule is recommended so it should be default for new classes in Visual Studio.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/593327/new-class-templates-should-have-using-directives-i.html
VSTS ticketId: 904651_
_These are the original issue comments:_

Jane Wu [MSFT] on 6/4/2019, 03:39 AM (2 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36213</IssueID>
    <RepoID>1</RepoID>
    <Title>Drag/Drop Using statement</Title>
    <Description>&lt;p&gt;Allow dragging a project reference to the using block of a C# file and have it automatically create the correct using statement for that reference.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/589391/dragdrop-using-statement.html
VSTS ticketId: 902201_
_These are the original issue comments:_

Jane Wu [MSFT] on 5/31/2019, 01:54 AM (6 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36211</IssueID>
    <RepoID>1</RepoID>
    <Title>Tuple Declaration Hiding</Title>
    <Description>VSF_TYPE_MARKDOWNNew code editor suggestion. I love Tuples but they elongate the method declaration. The suggestion is to allow a toggle to collapse them. For example...

```
private static (bool showHelp, bool deleteExistingFiles, string inputFolder, string outputFolder, bool pauseCommandWindow, List&amp;lt;string&amp;gt; Files) ProcessCommandLineArguments(string[] args)
```
... to something like this:

```
private static (tuple... ») ProcessCommandLineArguments(string[] args)
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/582406/tuple-declaration-hiding.html
VSTS ticketId: 899239_
_These are the original issue comments:_

Jane Wu [MSFT] on 5/27/2019, 01:08 AM (10 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36210</IssueID>
    <RepoID>1</RepoID>
    <Title>Query code for occurance of X (Roslyn)</Title>
    <Description>VSF_TYPE_MARKDOWNIn our company (like so many others) we have issues with DateTime.. 

What i'd like to do, is to find EVERY occurance where DateTime is converted to or from string. 

eg: 
- Every Implicit Cast
- Every Explicit Cast
- Every Parse

I imagine that Roslyn could locate all of these occurances for me ?

I'm not sure how the query language or function should be made, but it would be of great help.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/580464/query-code-for-occurance-of-x-roslyn.html
VSTS ticketId: 897603_
_These are the original issue comments:_

Jane Wu [MSFT] on 5/24/2019, 03:43 AM (13 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36209</IssueID>
    <RepoID>1</RepoID>
    <Title>Information about referenced symbols is not complete even when RegisterCompilationAction</Title>
    <Description>**Version Used**: 2.6.1

**Steps to Reproduce**:

1. Create assembly Assembly1, declare an interface 
```csharp
public interface IFoo
{ 
    void Foo([SomeAttribute] string str); 
}
``` 
2. Create assembly Assembly2, reference Assembly1 and create an implementation of interface 
```csharp
 public class Program : IFoo
 {
    public void Foo(string str)
    {
        Console.Out.WriteLine(s); 
    }
}
```
3. Now create minimal analyzer, that should check this code:
```csharp
        public override void Initialize(AnalysisContext context)
        {
            context.RegisterCodeBlockAction(CodeBlockAction);
        }

        private static void CodeBlockAction(CodeBlockAnalysisContext codeBlockContext)
        {
            if (codeBlockContext.OwningSymbol?.Kind != SymbolKind.Method)
            {
                return;
            }

            if (!(codeBlockContext.OwningSymbol is IMethodSymbol methodSymbol) || methodSymbol.IsAbstract)
            {
                return;
            }

            var allAttributes = methodSymbol.ContainingType.Interfaces
                .SelectMany(i =&gt; i.GetMembers(methodSymbol.Name).OfType&lt;IMethodSymbol&gt;())
                .SelectMany(d =&gt; d.Parameters)
                .SelectMany(p =&gt; p.GetAttributes())
                .Select(a =&gt; a.AttributeClass)
                .ToArray();

            if (allAttributes.Length &gt; 0)
            {
                var diagnostic = Diagnostic.Create(_someDescription, codeBlockContext.CodeBlock.GetLocation());
                codeBlockContext.ReportDiagnostic(diagnostic);
            }
      }
```
**Expected Behavior**:
Building produces warning.
**Actual Behavior**:
No warning shown in build log
**More information**:
Actualy visual studio will show the warning when you open document, because analyzer will be triggered one more time, and at this moment all correct information is provided.
Also I got the same result with RegisterSemanticModelAction and RegisterCompilationAction. I think that's incorect behavior, when it's imposible to get information about referenced symbols even with RegisterCompilationAction.
A bit more information [here](https://stackoverflow.com/questions/56473004/iparametersymbol-getattributes-does-not-return-actual-symbols)</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36208</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio/Visual Basic debugger won't show the values of members of a structure on mouse hover when they're inside "with / end with" statements</Title>
    <Description>**Version Used**: Visual Studio 2017 / Visual Basic

**Steps to Reproduce**:

1. Create a structure. For example:
```
Public Structure Test
  Public SubVar_A As Byte
  Public SubVar_B As Byte          
End Structure
```

2. Create an object with that structure. For example:
`Public TestObject As Test`

3. Use a "with / end with" statement to access the members of TestObject. For example:
```
with TestObject
  .SubVar_A=10
  .SubVar_B=20
end with
```

4. Place a debug breakpoint at .SubVar_B=20, run the program, and once execution stops at the breakpoint hover the mouse over .SubVar_A or .SubVar_B to see their values. Nothing will show. Even if you add them to the Watch list, their values won't show. If, however, you don't use "with / end with" statements, and instead use "TestObject.SubVar_A=10", hovering the mouse over it will show the value when debugging.

**Expected Behavior**: It was expected that hovering the mouse over .SubVar_A or .SubVar_B would show their values when debugging.

**Actual Behavior**: The values won't show.
</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36207</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36206</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36205</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36204</IssueID>
    <RepoID>1</RepoID>
    <Title>[loc][Query][Roslyn] Localizability of the "cmdidCSharpOrganizeSortUsings"</Title>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
SortUsings

ID:
0; "cmdidCSharpOrganizeSortUsings"

File Name:
VisualStudio\Core\Def\xlf\Commands.vsct.xlf

==========================================
Query:
Please confirm if this string can be translated</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36203</IssueID>
    <RepoID>1</RepoID>
    <Title>Useless overload resolution error when using static class as generic type argument</Title>
    <Description>**Version Used**: 

Visual Studio 2019 Enterprise v16.1

**Steps to Reproduce**:

Try and compile this code:

```csharp
using System.IO;

public class Serializer
{
    public static object Deserialize&lt;T&gt;(Stream s) =&gt; throw null;
    public static object Deserialize&lt;T&gt;(TextReader tr) =&gt; throw null;
}

public static class IShouldNotBeUsed { }

public class Victim
{
    public object Foo(Stream s)
    {
     	return Serializer.Deserialize&lt;IShouldNotBeUsed&gt;(s);
    }
    
    public object Bar(TextReader tr)
    {
     	return Serializer.Deserialize&lt;IShouldNotBeUsed&gt;(tr);
    }
}
```

**Expected Behavior**:

An error message warning that I am trying to use a static class as a generic type argument.

**Actual Behavior**:

error CS1503: Argument 1: cannot convert from 'System.IO.Stream' to 'System.IO.TextReader'
error CS1503: Argument 1: cannot convert from 'System.IO.TextReader' to 'System.IO.Stream'

**Notes**:

If I assign the result of `Deserialize&lt;&gt;` to a local variable, instead of returning it, I get [CS0723](https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0723).

Sharplab playground [here](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxAN0QSwGYE8kAmIA1AD4ACADAATkCMAdAJIDyA3ALABQ35AzLQBM1AMpYIAG0wAvRNwDe3astoD6ANmoB7YACs4AYxjUAInCjipsgDwAVAHwAKETARwIYalACU1ALz21DAAFghaAO7UAHYArhISnFwqqrR0mjr6RqbmljJwdk62cAAeMABK7gSIQQi+AUGhEdFxCdwAvty8amlC1EwiwVpxBAByWjAAQnAAqhYE1PLUHTxc/L0AaphGmGAKSiprGYbGAGJaWs6u7p4++8qKSckAkOQA7KK5sggMZhYImJI8tZ+oNhmNJjM5k4fIlkstkncUkcshMIAhHEVShUIFUEDVvIiHslqC93mJ/oCvj8chSrPkQUMJKNxlNZnACE5XN5YSplm0gA=).</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36202</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 wrong span for unused assignment</Title>
    <Description>**Version Used**: 
3.1.0-beta4-19261-04

**Steps to Reproduce**:

```csharp
void StreamCopy (Stream source, Stream destination, int start, int length)
{
	var buffer = new byte[1024 * 8];
	var read = 0;
	var left = length;
	while ((read = source.Read (buffer, 0, Math.Min (left, buffer.Length))) != 0) {
		destination.Write (buffer, 0, read);
		left -= read;
	}
}
```

**Expected Behavior**:
`= 0` or `0` is highlighted as unused.

**Actual Behavior**:
&lt;img width="314" alt="Screenshot 2019-06-06 at 08 28 50" src="https://user-images.githubusercontent.com/109974/59009148-24968800-8835-11e9-9f9a-7ab2c712107e.png"&gt;

We can see the analyzer knows what's redundant here:
&lt;img width="331" alt="Screenshot 2019-06-06 at 08 26 15" src="https://user-images.githubusercontent.com/109974/59009157-2d875980-8835-11e9-82ed-62efa6b3cb0a.png"&gt;
</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36201</IssueID>
    <RepoID>1</RepoID>
    <Title>Problem with C# lambda expression auto-formatting</Title>
    <Description>VSF_TYPE_MARKDOWNI'm writing a C# lambda expression somewhat like this:

```csharp
    static Action action(() =&gt;
    {
        doThings();
    });
```
At least that's how I meant it. I had typed it like this:
```csharp
    static Action action( () =&gt; // with a space right here
    {
        doThings();
    });
```
When I deleted and retyped the semicolon at the end to auto format it, this happened:
```csharp
    static Action action(() =&gt;
   {
       doThings();
   });
```
It shifts all of the text over by as many spaces as there are between the two `(`s, I tested it. This wasn't a difficult bug to deal with, but I thought I'd report it, because I'm fairly sure this is unintended.

Thanks to whoever read through this.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/597221/problem-with-c-lambda-expression-auto-formatting.html
VSTS ticketId: 909893_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36200</IssueID>
    <RepoID>1</RepoID>
    <Title>filter tests for async completion</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/29110</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36199</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36198</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36197</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36196</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36195</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider a field assigned if it is not equal to its default value</Title>
    <Description>This is a possible way to resolve #33391. Will need to consider whether the assumption in this solution is sound and if we're alright with its implications.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36194</IssueID>
    <RepoID>1</RepoID>
    <Title>`this` not recommended between parens in incomplete code</Title>
    <Description>```csharp
        public void something()
        {
            int z = (t$$)
            object o = new object();
        }
```

`this` is not recommended at the caret. It is recommended if I add a semicolon at the end of the line.
</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36193</IssueID>
    <RepoID>1</RepoID>
    <Title>Test inferred tuple type for default expression</Title>
    <Description>Resolves #33344 by adding a test. It seems similar to the `Tuple_Default_03` test.

Would like to know if this covers what we were concerned about in the issue or if more work is needed.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36192</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify x64 configuration for AnalyzerRunner</Title>
    <Description>
    </Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36191</IssueID>
    <RepoID>1</RepoID>
    <Title>QuickInfo should display null-state and declared type</Title>
    <Description>
    </Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36190</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable TypingHelpDirectiveWorks for legacy completion</Title>
    <Description>This test is flaky in legacy completion, but legacy completion is slated for removal so the test failures were not fully investigated.

This change addresses failures of this test with the following message:

```
System.Exception : Unable to find expected content in REPL within 10000 milliseconds and no exceptions were thrown. Actual content:\r\n[[Resetting execution engine.\r\nLoading context from 'CSharpInteractive.rsp'.]]

Server stack trace: 
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InteractiveWindow_InProc.WaitForPredicate(Func`1 getValue, Func`2 isExpectedValue)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InteractiveWindow_InProc.WaitForLastReplOutputContains(String outputText)
   at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
   at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)

Exception rethrown at [0]: 
   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InteractiveWindow_InProc.WaitForLastReplOutputContains(String outputText)
   at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractive.TypingHelpDirectiveWorks() in /_/src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpInteractive.cs:line 101
```

During the investigation, I observed that each of the failure cases was preceded by an exception thrown in `ChainTaskAndNotifyControllerWhenFinished` in the awaiter's `GetResult` on this line:

https://github.com/dotnet/roslyn/blob/c78f1e594997b0dae930551101f690708b4db764/src/EditorFeatures/Core/Implementation/IntelliSense/ModelComputation.cs#L150

The failure does not appear to be caused by an _unhandled_ exception, but rather the exception appears to be an observable symptom of a race condition which occurs only when this test is going to fail.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36189</IssueID>
    <RepoID>1</RepoID>
    <Title>Duplicate CA1822 warnings after installing fxcop and building</Title>
    <Description>**Version Used**: 
29004.99
**Steps to Reproduce**:

1. Create a new C# .net core Console app
2. Add a new class file
3. Adjust the code for the class to include:
```
public class Class1
    {
        public int Method1()
        {
            return 22;
        }
    }
```
4. Install latest Microsoft.CodeAnalysis.FxCopAnalyzers NuGet package
5. Observe CA1822 in the error list for Method1()
6. Build
**Expected Behavior**:
Only one entry for CA1822 appears
**Actual Behavior**:
2 entries appear. 1 from Intellisense and 1 from Build

![image](https://user-images.githubusercontent.com/10537189/58993012-26167080-87a1-11e9-952b-1e1a282ed44e.png)
</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36188</IssueID>
    <RepoID>1</RepoID>
    <Title>Dont try and check tuple conversions in error cases:</Title>
    <Description>- When checking an identity converison, also check for a bound tuple if the type isn't a tuple (as we might have a bound tuple with an error type)
- When checking a tuple conversion, don't call GenerateConversion in the error case, as we don't have a target type to generate against
- Update tests

Fixes #35157</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36187</IssueID>
    <RepoID>1</RepoID>
    <Title>Odd IntelliSense Behavior with Overloaded Methods</Title>
    <Description>VSF_TYPE_MARKDOWNWhen you type the following code:

```
private enum A
{
	A,
	B,
}

private void Get(A a) { }
private void Get(string a) { }

private void Test()
{
	Get(
}
```

When you type the `(` after the `Get` in the `Test` method, VS suggests to autocomplete the first parameter of type `A`, which is exactly expected.

See this picture: https://cdn.discordapp.com/attachments/369794346142269441/577795445443657728/unknown.png

But when you change the declaration order of the two `Get` methods, like this:

```
private enum A
{
	A,
	B,
}

private void Get(string a) { }
private void Get(A a) { }

private void Test()
{
	Get(
}
```

And now if you type `(`, you get no suggestions. Notice that the first overloaded method that shows up is still the one with the `A` parameter, and not the `string` one.

See this picture: https://cdn.discordapp.com/attachments/369794346142269441/577795671596335124/unknown.png

Pressin the default `Ctrl+Space` does not help either.

**Expected behavior:** When the `Get(A a)` method is selected as the current overload, pressing `Ctrl+Space` should suggest to complete that given parameter.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/567651/odd-intellisense-behavior-with-overloaded-methods.html
VSTS ticketId: 892502_
_These are the original issue comments:_

Visual Studio Feedback System on 5/14/2019, 09:42 PM (21 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Vatsalya Agrawal [MSFT] on 5/15/2019, 00:11 PM (21 days ago): &lt;p&gt;Thank you for providing feedback, and we're sorry to hear it's not behaving as you expect. Based on your description so far, we were unable to reproduce the issue. Pressing Ctrl + Space seems to be suggesting the right parameter. If possible please provide a sample project where this issue is occurring.&lt;/p&gt;

matej.zajacik on 5/15/2019, 00:33 PM (21 days ago): &lt;strong&gt;(private comment)&lt;/strong&gt;&lt;p&gt;Thank you for the reply!&lt;/p&gt;&lt;p&gt;When the declaration order is `Get(A a)` and then `Get(string a)`, everything works okay. Right after typing `(`, it does the expected thing, that is suggesting the enum `A` (the first picture). But when the order is `Get(string a)` and then `Get(A a)`, I get no suggestion at all (the second picture). When I press `Ctrl+Space`, it suggests to use the `ToString()` method:&lt;/p&gt;&lt;p&gt;&lt;a target='_blank' href="https://developercommunity.visualstudio.com/storage/attachments/73607-intellisenseissue00.png"&gt;intellisenseissue00.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The project: &lt;a target='_blank' href="https://developercommunity.visualstudio.com/storage/attachments/73608-intellisenseissue.zip"&gt;intellisenseissue.zip&lt;/a&gt;&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36186</IssueID>
    <RepoID>1</RepoID>
    <Title>Update some LDM champs from 7.3</Title>
    <Description>/cc @jaredpar </Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36185</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect semantic model type information for converted tuple literal</Title>
    <Description>The following proposed test fails where marked:

``` c#
        [Fact]
        [WorkItem(36185, "https://github.com/dotnet/roslyn/issues/36185")]
        public void GetTypeInfo_03()
        {
            var source = @"
class C
{
    static void Main()
    {
        M((1, ""hello""));
        M((2, null));
    }
    public static void M((short, string) x) { }
}
" + trivial2uple + trivial3uple + tupleattributes_cs;

            var tree = Parse(source, options: TestOptions.Regular);
            var comp = CreateCompilation(tree);
            comp.VerifyDiagnostics();

            var model = comp.GetSemanticModel(tree, ignoreAccessibility: false);
            var nodes = tree.GetCompilationUnitRoot().DescendantNodes();

            var n1 = nodes.OfType&lt;TupleExpressionSyntax&gt;().ElementAt(0);

            Assert.Equal(@"(1, ""hello"")", n1.ToString());
            Assert.Equal("(System.Int32, System.String)", model.GetTypeInfo(n1).Type.ToTestDisplayString());
            Assert.Equal("(System.Int16, System.String)", model.GetTypeInfo(n1).ConvertedType.ToTestDisplayString());
            Assert.Equal(ConversionKind.ImplicitTupleLiteral, model.GetConversion(n1).Kind);

            var n2 = nodes.OfType&lt;TupleExpressionSyntax&gt;().ElementAt(1);

            Assert.Equal(@"(2, null)", n2.ToString());
            Assert.Null(model.GetTypeInfo(n2).Type);
            Assert.Equal("(System.Int16, System.String)", model.GetTypeInfo(n2).ConvertedType.ToTestDisplayString());
            Assert.Equal(ConversionKind.ImplicitTupleLiteral, model.GetConversion(n2).Kind);
        }
```
</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36184</IssueID>
    <RepoID>1</RepoID>
    <Title>⏱ Syntax tree benchmarks</Title>
    <Description>Add a run profile for benchmarking SyntaxTreeInfoIncrementalAnalyzerProvider.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36183</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix typo in task namespace in docs</Title>
    <Description>Task docs has `Sytem.Threading.Tasks` instead of `System.Threading.Tasks`.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36182</IssueID>
    <RepoID>1</RepoID>
    <Title>The debugger is unable to evaluate this expression</Title>
    <Description>**Version Used**: 16.1.1

**Steps to Reproduce**:

1. 
```
class Program
{
    static void Main()
    {
        var demos = new[] { new Demo() };
        demos = new[] { new Demo(), new Demo() };
    }
}

class Demo
{
    public override string ToString() =&gt; "Test";
}
```
2. Add a breakpoint in the line: `demos = new[] { new Demo(), new Demo() };`
3. F5
4. Expand `demos` in Autos window: there's no problem
5. F10
6. Expand `demos` in Autos window: `The debugger is unable to evaluate this expression`

![pic](https://user-images.githubusercontent.com/2529999/58974457-001abb80-87f5-11e9-92ae-1e4ef5a1eaa9.gif)

</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36181</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing compilation error CS0165 with unassigned ImmutableArray</Title>
    <Description>**Version Used**: 
Visual Studio 2017 + 2019, .NET Core 2.1 + Framework 4.7.2 tested

**Steps to Reproduce**:

1. Create C# Console project with  System.Collections.Immutable 1.5.0 nugget package
2. 
```
using System;
using System.Collections.Immutable;

namespace ImmutableArrayRoslyn
{
    class NotInitiliazedVariableTest
    {
        public void M()
        {
            ImmutableArray&lt;int&gt; notInitializedVariable;
            Console.WriteLine(notInitializedVariable.Length);
        }
    }
}
```
3. Build

**Expected Behavior**:
The compiler should raise the error CS0165	"Use of unassigned local variable 'notInitializedVariable'" to be raised

For example that error is correctly raised if we add the following method
```
public void OK() {
            int notInitializedVariable;
            Console.WriteLine(notInitializedVariable);
}
```

**Actual Behavior**:
No error is shown and behavior during runtime can be unexpected

The following file shows another sample using a function
[SampleBug.zip](https://github.com/dotnet/roslyn/files/3258054/SampleBug.zip)
</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36180</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto-Restore sometimes causes invisible unhandled exception in SDK-style projects</Title>
    <Description>## Details about Problem
Sometimes when opening an SDK-style project, while loading into VS, an unhandled exception occurs during the NuGet auto-restore (seemingly caused by a race condition with the project loading). It is not visible to the user, but shows up while debugging the Experimental VS and opening an SDK project. Concern is whether this could cause a future hard-to-find bug during auto-restore, and perhaps work is happening on the Project before project loading is complete.



An exception of type 'System.InvalidOperationException' occurred in mscorlib.dll but was not handled in user code
System.InvalidOperationException: 'The operation failed as details for project ConsoleApp7 could not be loaded.'
at NuGet.PackageManagement.VisualStudio.NetCorePackageReferenceProject.GetPackageSpecsAsync(DependencyGraphCacheContext context) in C:\NuGet.Client\src\NuGet.Clients\NuGet.PackageManagement.VisualStudio\Projects\NetCorePackageReferenceProject.cs:line 144
at NuGet.VisualStudio.VsPackageInstallerServices.d__8.MoveNext() in C:\NuGet.Client\src\NuGet.Clients\NuGet.VisualStudio.Implementation\Extensibility\VsPackageInstallerServices.cs:line 116
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
at System.Runtime.CompilerServices.TaskAwaiter1.GetResult() at NuGet.VisualStudio.VsPackageInstallerServices.&lt;&gt;c__DisplayClass10_0.&lt;&lt;GetInstalledPackages&gt;b__0&gt;d.MoveNext() in C:\NuGet.Client\src\NuGet.Clients\NuGet.VisualStudio.Implementation\Extensibility\VsPackageInstallerServices.cs:line 193 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread() at Microsoft.VisualStudio.Threading.JoinableTask1.CompleteOnCurrentThread()
at Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func1 asyncMethod, JoinableTaskCreationOptions creationOptions) at Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func1 asyncMethod)
at NuGet.VisualStudio.VsPackageInstallerServices.GetInstalledPackages(Project project) in C:\NuGet.Client\src\NuGet.Clients\NuGet.VisualStudio.Implementation\Extensibility\VsPackageInstallerServices.cs:line 166
at Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.ProcessProjectChange(Solution solution, ProjectId projectId)

## Detailed repro steps so we can see the same problem
Repro for both @donnie-msft (on VS 16.2.0 prev3) and @dominoFire, but is inconsistent, and may take a few attempts.:

1. Launch experimental VS.

2. Ensure Exception Handling settings will break on any unhandled exception.

3. Open an SDK-style solution (preferably new and un-compiled which seems to more consistently repro).

4. If the race condition occurs, then the Restore will cause the above exception while the solution is loading and restoring. 
</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36179</IssueID>
    <RepoID>1</RepoID>
    <Title>Write Roslyn assembly version to DependentAssemblyVersions file</Title>
    <Description>Writing the Roslyn assembly version to this file allows the RIT to automatically update binding redirects during insertion.

I ran a fake insertion with the Roslyn version set to 9.9.0 and the files where updated accordingly - https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/184921?_a=files</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36178</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing intellisense error and weird diagnostic when indexing ReadOnlyMemory&lt;T&gt;</Title>
    <Description>**Version Used**: 
16.1.1, netcoreapp2.2, LangVersion=latest

**Steps to Reproduce**:

```csharp
public class C
{
    public void M()
    {
        System.ReadOnlyMemory&lt;int&gt; a = default;
        var b = a[0];
    }
}
```

**Expected Behavior**:
There should be an IntelliSense diagnostic and a compiler diagnostic that `ReadOnlyMemory&lt;T&gt;` doesn't have an indexer.

**Actual Behavior**:
There's no IntelliSense error, b is typed as `ReadOnlyMemory&lt;int&gt;`. When compiling, there's  diagnostic `CS0656: Missing compiler required member 'System.Range.get_Start'`.

It looks like some C# 8 features are leaking.
</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36177</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0016 codefix can change behaviour</Title>
    <Description>**Version Used**: 16.1.1+28922.388

**Steps to Reproduce**:

```csharp
object _o;
bool _b;
void M(object o)
{
    if (o == null)
        throw new ArgumentNullException(nameof(o));
    _b = true;
    _o = o;
}
```

IDE0016 fires and wants to change the code to:

```csharp
object _o;
bool _b;
void M(object o)
{
    _b = true;
    _o = o ?? throw new ArgumentNullException(nameof(o));
}
```

**Expected Behavior**:

No change in behaviour.

**Actual Behavior**:

Potential change in behaviour due to throw being moved after side effecty code.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36176</IssueID>
    <RepoID>1</RepoID>
    <Title>pass in cancellation token to bail out early in HasReferenceToAssembly</Title>
    <Description>this particular code path can take a long time if metadata reference hasn't created its symbols yet.

this can get really bad if we try to show code lens for something like IDispose.Dipose and it tries to create all metdata references in the solution.

since it is not cancellable, just passing by a Dipose method can cause this to occupy CPU 100% for several seconds and there is no way to make it go away.

now we pass in cancellation token so that we can bail out  sooner.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36175</IssueID>
    <RepoID>1</RepoID>
    <Title>'CS8629: Nullable value type may be null' reported when it can not be null after HasValue</Title>
    <Description>This occurs with C# 8

```
public struct Foo
{
    int get_value( )
   {
        int? value = get_value_from_somewhere( );

        // This test will not generate a 'Nullable value type may be null' 
        // if( value == null ) return 0;

        // This test will not generate a 'Nullable value type may be null' 
        // if( !value.HasValue ) return 0;

        // This test will generate a 'Nullable value type may be null' 
        if( value.HasValue == false ) return 0;

        return value.Value; // Warning on this line
    }

    // In reality do something that may or may not return a value
    int? get_value_from_somewhere( ) =&gt; 0; 
}
```
I think the last test is simple enough that it should not generate a warning

</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36174</IssueID>
    <RepoID>1</RepoID>
    <Title>Add CodeTriage badge to dotnet/roslyn</Title>
    <Description>Adds a badge showing the number of people helping this repo on CodeTriage.

[![Open Source Helpers](https://www.codetriage.com/dotnet/roslyn/badges/users.svg)](https://www.codetriage.com/dotnet/roslyn)


## What is CodeTriage?

CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed

[Read more about the CodeTriage project](https://www.codetriage.com/what).

## Why am I getting this PR?

Your project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to [CodeTriage](https://www.codetriage.com/what)? Roughly about 3 years ago, [The-Q](https://github.com/The-Q) added this project to CodeTriage in order to start contributing. Since then, 266 people have subscribed to help this repo.

## What does adding a badge accomplish?

Adding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.

You can see an example of a CodeTriage badge on these popular OSS READMEs:

- [![Email clients like GMAIL do not render SVG images](https://www.codetriage.com/rails/rails/badges/users.svg)](https://www.codetriage.com/rails/rails) https://github.com/rails/rails
- [![Email clients like GMAIL do not render SVG images](https://www.codetriage.com/crystal-lang/crystal/badges/users.svg)](https://www.codetriage.com/crystal-lang/crystal) https://github.com/crystal-lang/crystal

## Have a question or comment?

While I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.

If you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.

Thanks for making your project Open Source! Any feedback is greatly appreciated.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36173</IssueID>
    <RepoID>1</RepoID>
    <Title>Fully update the type inferrer and add tests for generate field</Title>
    <Description>"Fixes" generate field in that this really just fixes up the rest of the TypeInferrer -- at this point once that was fixed the feature just lit up. Added some basic tests to cover.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36172</IssueID>
    <RepoID>1</RepoID>
    <Title>MaybeNullWhen and NotNullWhen attribute affects callers</Title>
    <Description>Design notes:

1. In an invocation, we first visit the arguments and save the results. We unsplit after each argument, except for those marked with `AssertsTrue`/`AssertsFalse` (which will be renamed to `DoesNotReturnIf(bool)` later on) where we drop half of the state.

2. We then do type inference.

3. We then validate inbound values and conversions, considering pre-condition attributes. This all happens in an unsplit state.

4. We then validate outbound values and apply post-condition attributes:
    - for `ref` and `out` arguments, we track an assignment from parameter to argument 
    - for `in`/by-value, we don't do any assignment, but we can still learn from various attributes


Relates to https://github.com/dotnet/roslyn/issues/35816
LDM notes: https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-15.md

Fixes https://github.com/dotnet/roslyn/issues/35949 (complexity issue with lambdas in invocations with nullability annotation attributes) because `VisitArgumentsEvaluateHonoringAnnotations` used to visit arguments more, but that was removed. We now visit lambdas as often as in initial binding.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36171</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36170</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36169</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36168</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36167</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36166</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove prebuilts during source-build</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/36036
Fixes https://github.com/dotnet/roslyn/issues/36035
Fixes https://github.com/dotnet/roslyn/issues/36034
Fixes https://github.com/dotnet/roslyn/issues/36033
Fixes https://github.com/dotnet/roslyn/issues/36032
Fixes https://github.com/dotnet/roslyn/issues/36031</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36165</IssueID>
    <RepoID>1</RepoID>
    <Title>Use MSBuild Locator's AppDomainManager</Title>
    <Description>Starting with #36113, AnalyzerRunner uses the AppDomainManager from [SourceBrowser](https://github.com/KirillOsenkov/SourceBrowser/) to work around https://github.com/Microsoft/MSBuildLocator/issues/16. Once MSBuild Locator ships its own copy of a custom AppDomainManager, the changes in commit fbc4b38f8d1de75163e10b5f8af07451d77a1d14 should be updated to use that version instead, and the references to SourceBrowser removed from dotnet/roslyn.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36164</IssueID>
    <RepoID>1</RepoID>
    <Title>NullableWalker.LearnFromNullTest should not blindly strip conversions</Title>
    <Description>```C#
        private int LearnFromNullTest(BoundExpression expression, ref LocalState state)
        {
            var expressionWithoutConversion = RemoveConversion(expression, includeExplicitConversions: true).expression;
            var slot = MakeSlot(expressionWithoutConversion);
            return LearnFromNullTest(slot, expressionWithoutConversion.Type, ref state);
        }
```

Depending on the conversion, we can learn something about `x` when we learn that `(C)x` is null.
For instance, in an implicit reference conversion.

Also, in a scenario with a user-defined conversion `operator C(X x)` with non-null input and output, I think we can infer from the contract that `x` was null if the output was null.

```C#
        [Fact]
        public void MaybeNull_OnExplicitConversion()
        {
            var c = CreateCompilation(new[] { @"
using System.Runtime.CompilerServices;
public class A
{
    public static explicit operator C(A? a) =&gt; throw null!;
}
public class C
{
    public void Main()
    {
        A a = new A();
        _ = IsNull((C)a)
            ? a.ToString()
            : a.ToString();
    }
    public static bool IsNull([MaybeNull] C c) =&gt; throw null!;
}
", MaybeNullAttributeDefinition }, options: WithNonNullTypesTrue());

            // Both diagnostics are unexpected 
            // We should not blindly strip conversions when learning that a value is null.
            // In this case, we shouldn't infer that `a` may be null from the fact that `(C)a` may be null.
            // Tracked by https://github.com/dotnet/roslyn/issues/36164
            c.VerifyDiagnostics(
                // (13,15): warning CS8602: Dereference of a possibly null reference.
                //             ? a.ToString()
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "a").WithLocation(13, 15),
                // (14,15): warning CS8602: Dereference of a possibly null reference.
                //             : a.ToString();
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "a").WithLocation(14, 15)
                );
        }

```</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36163</IssueID>
    <RepoID>1</RepoID>
    <Title>Override completion must not include inaccessible parameter attributes</Title>
    <Description>Fixes #5646</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36162</IssueID>
    <RepoID>1</RepoID>
    <Title>Large file with Lambda compilation is slow (Minutes instead of seconds)</Title>
    <Description>**Version Used**: 16.0.462+g62fb89029d

**Steps to Reproduce**:
Create file with a large array with a delegate that uses a lambda (Compiles in 8-9 minutes)
Create same file instead have delegate point to function (Compiles in 4 seconds)

This was discovered by converting a large auto generate C files to C#
ATTACHED is a program that will generate the below steps.


1.  Create large file that uses lambdas:
```C#
namespace Test0 {
     class C {
          internal delegate void FuncCallback(C c);
          internal FuncCallback Func;
          internal static C[] LargeArray = new C[] {
               // Repeat this 70000x
              new C() { Func  = (C c)=&gt; {} },
              //
         };
     }
}
```

2. Create large file that uses explicit function calls
```C#
namespace Test1
[Program.txt](https://github.com/dotnet/roslyn/files/3254454/Program.txt)


{
    class C
    {
        internal delegate void FuncCallback(C c);
        internal FuncCallback Func;
        internal static C[] LargeArray = new C[] {
               // Repeat this 70000x
              new C() { Func = AutoFuncX },
              //
         };
        // Repeat, each item in array gets its own function so ~70000 functions
        static void AutoFuncX(C c)
        { // ... }
        }
    }
}
```

**Expected Behavior**:
Lambda compilation should be near parity of explicit functions.

**Actual Behavior**:
VS crashes, building takes minutes.

[Program.txt](https://github.com/dotnet/roslyn/files/3254456/Program.txt)
</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36161</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid in-process captures in UpdateReferencesAync</Title>
    <Description>This change produced a 220MB (6.7%) allocation reduction in the scenario described by #36158.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36160</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider consolidating the error messages CS8713, CS8376 and CS0449 together. </Title>
    <Description>[jcouv update:]

- `CS8713` no longer seems to exist
- ` // (1,65): error CS8376: The 'unmanaged' constraint must come before any other constraints`
- `// (8,60): error CS0449: The 'class' or 'struct' constraint must come before any other constraints`</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36159</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve performance of Formatter.Format method</Title>
    <Description>I need help with this request, as it requires `SyntaxToken.Position` to switch to `public` to be accessible from `TokenStream`, but `TokenStream.cs` is shared with a project, that references `Microsoft.CodeAnalysis` from NuGet, where `SyntaxToken.Position` is still internal. What are the steps here? First merge `Position` becoming public, wait for it to get out to NuGet, then release the rest?

This change includes the following improvements, affecting `Formatter.Format` performance:
1. Instead of performing full binary search on the token stream, it first guesses approximate token position based on average token length to narrow search scope.
2. `TokenOrderComparer` used for binary search does not access `SyntaxToken.FullSpan` property unless necessary, as it is very compute-intensive. Instead, it uses newly exposed `SyntaxToken.Position` first.
3. Cached delegate references to functions of the same instance used in `TokenStream.GetOriginalColumn` and some other functions has been replaced with a generic over struct types, which avoids delegate dispatch.

Overall speedup is over 40% on a 2.5MB file

This addresses #36157</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36158</IssueID>
    <RepoID>1</RepoID>
    <Title>Manual allocation performance testing: AnalyzerRunner for SymbolTreeInfoIncrementalAnalyzerProvider on Roslyn.sln</Title>
    <Description>**Version Used**: ba24589046961e98198518b7a82c78ab5d42b677

### Scenario details

This test executes the SymbolTreeInfoIncrementalAnalyzerProvider with the following configuration:

* Database persistence is enabled (SQLite at this time)
* The database does not exist in advance
* Full solution analysis is disabled for both C# and Visual Basic

### Steps to run the test

1. Delete the **%TEMP%\\RoslynTests\\AnalyzerRunner\\temp-db** folder (if it exists)

1. Run AnalyzerRunner in release mode with the following command line (this is the **IIncrementalAnalyzer SymbolTreeInfoIncrementalAnalyzerProvider** profile)

    &gt; $(OutDir) $(SolutionDir)Roslyn.sln /stats /ia SymbolTreeInfoIncrementalAnalyzerProvider /persist /profileroot $(SolutionDir)artifacts\\profileRoot

1. Start PerfView GC-only profiling during the 5 second delay before project analysis starts
    * Make sure to use a circular buffer large enough to hold the complete result data
    * For 64-bit profiling, PerfView will need to start before AnalyzerRunner starts. The 5-second delay is still helpful as it will show up in the trace as a 5-second period of no allocations.

1. Stop profiling when the AnalyzerRunner completes</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36157</IssueID>
    <RepoID>1</RepoID>
    <Title>Formatter.Format is very slow (2.5 MB file over 10 minutes)</Title>
    <Description>**Version Used**: dev16.0

**Steps to Reproduce**:

```csharp
string sourceCode = File.ReadAllText(args[0]);
var ast = CSharpSyntaxTree.ParseText(sourceCode);
// generate some work for the formatter
var unformatted = new WhitespaceRemover().Visit(ast.GetRoot());
var workspace = new AdhocWorkspace();
workspace.Options = workspace.Options
    .WithChangedOption(FormattingOptions.NewLine, LanguageNames.CSharp, "\n");
var stopwatch = Stopwatch.StartNew();
var reformatted = Formatter.Format(unformatted, workspace, workspace.Options);
string newCode = reformatted.GetText().ToString();
Console.WriteLine($"formatting: {stopwatch.ElapsedMilliseconds / 1000}s");

...

public class WhitespaceRemover : CSharpSyntaxRewriter
{
    public override SyntaxTrivia VisitTrivia(SyntaxTrivia trivia) =&gt; default;
    public override SyntaxNode Visit(SyntaxNode node) =&gt; node == null ? null : base.Visit(node).WithoutTrivia();
}
```

**Expected Behavior**: formatting should take reasonable time

**Actual Behavior**: 2.5MB file takes over 10 minutes to format on i7 8700K
</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36156</IssueID>
    <RepoID>1</RepoID>
    <Title>mark NFW from OOP critical</Title>
    <Description>currently, whenever OOP throws an exception, we show infobar saying "restart VS". whenever that happens, we report NFW. now those NFW will be marked as critical and we will stop reporting NFW after that in VS.

basically making critical NFW behavior same as fatal watson in VS. and management will treat critical NFW same as fatal watson.

also, now we will show callstack like code fix exception when info bar is shown

![image](https://user-images.githubusercontent.com/1333179/58910771-3bb96680-86cb-11e9-8eab-bfaa80f60a41.png)
</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36154</IssueID>
    <RepoID>1</RepoID>
    <Title>Update ILAsm and ILDasm version to match expected SDK version</Title>
    <Description>As pointed out by @AlekseyTs, #36042 should have also bumped the ILAsm and ILDasm version numbers.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36153</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unused parameter does not do anything when clicked</Title>
    <Description>VSF_TYPE_MARKDOWNI see a parameter in my constructor with a greyed out identifer and the 3 green dots under it. I hover over it and see the message that the parameter is unused. I click on the light bulb icon next to the message but nothing happens.

The parameter is correctly being identified as unused.
The menu offering the option to remove the parameter does not appear. Nor is the parameter removed.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/593322/remove-unused-parameter-does-not-do-anything-when.html
VSTS ticketId: 904617_
_These are the original issue comments:_

Visual Studio Feedback System on 6/3/2019, 08:13 PM (14 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 6/4/2019, 09:07 AM (73 min ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36152</IssueID>
    <RepoID>1</RepoID>
    <Title>Add NullableContextAttribute</Title>
    <Description>Emit a `NullableContextAttribute` at each type and method where the `byte` value is the most common `NullableAttribute` (and `NullableContextAttribute`) value within that scope. The redundant `NullableAttribute` (and `NullableContextAttribute`) attributes within the scope are dropped.

This is the third part of three changes to address https://github.com/dotnet/roslyn/issues/35888.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36151</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement RestrictedInternalsVisibleToAttribute</Title>
    <Description>* Define RestrictedInternalsVisibleToAttribute, and hook up code generation (see dotnet/roslyn-analyzers#2498)
* Define external access APIs for LegacyCodeAnalysis (supersedes #35500; see #35080)
* Remove Microsoft.CodeAnalysis.ExternalAccess.LegacyCodeAnalysis</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36150</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36149</IssueID>
    <RepoID>1</RepoID>
    <Title>Support null checking with property in Nullable Reference Type analysis</Title>
    <Description>```c#
class Foo
{
    public TaskCompletionSource&lt;bool&gt;? _completionSource;

    public bool IsStopped =&gt; !(_completionSource is null);
    // or
    public bool IsStopped =&gt; _completionSource != null;

    public void Bar()
    {
        if (IsStopped)
        {
            // Possible dereference
            _completionSource.SetResult(true);
        }

        if (!(_completionSource is null))
        {
            // This is fine
            _completionSource.SetResult(true);
        }
    }
}
```

I know I can stick a dammit operator in there, was just wondering if there are plans to support such null checks in analysis.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36148</IssueID>
    <RepoID>1</RepoID>
    <Title>"Enable navigation to decompiled sources." does not support stepping into decompiled source</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Professional 2019 Preview
Version 16.2.0 Preview 1.0
VisualStudio.16.Preview/16.2.0-pre.1.0+28917.182
Microsoft .NET Framework
Version 4.7.03190

**Steps to Reproduce**:

1. Create a solution and include NuGet package https://github.com/chroma-sdk/Colore/blob/master/src/Corale.Colore/Core/Chroma.cs
2. Enable "Enable navigation to decompiled sources." and disable "Just My Code"
3. Press F12 to go to definition of Chroma class and put a breakpoint on 

       public override void SetAll(Color color)
        {
            _grid.Set(color);
            SetGuid(NativeWrapper.CreateKeyboardEffect(Effect.CustomKey, _grid));
        }

4. Run the solution and step into the decompiled source

**Expected Behavior**:
Expect a step in into the decompiled source


**Actual Behavior**:
Steps over the method. Does not go into the decompiled source

This works with ReSharper so I guess it's a missing feature for the Visual Studio version. I'm not sure if this is a Roslyn feature or some closed source Visual Studio one</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36147</IssueID>
    <RepoID>1</RepoID>
    <Title>Optimize indexer access of an inline range expression</Title>
    <Description>Introduces optimizations in lowering for an indexer access of the form
receiver[a..b]. With the optimizations, the generation of intermediate
System.Index and System.Range types will be avoided.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36146</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for Expand Filter</Title>
    <Description>Currently, the default behavior depends on the intelliSense option for unimported types. If completion for unimported types option is disabled, then the expanded items will only be displayed when user click the new "expander", which will not be remembered in subsequent completion list.

Also want to point out that, with expander, import completion will only be triggered on-demand. So when import completion is disabled, it won't run until the expander is actually selected.

Expander text: Add items from unimported namespaces ("Add" is added by editor by default)
Expander hotkey: Ctrl + J / ~~Alt + X~~ Alt + A

The corresponding editor change is here:
https://dev.azure.com/devdiv/DevDiv/_git/VS-Platform/pullrequest/182863

Animation:

![ExpandFilter](https://user-images.githubusercontent.com/788783/59472487-7cb02a00-8df3-11e9-924f-3a8615c49640.gif)


TODO: 

- [x] Consume new editor API when available, which will trnasfer the ownership of the expander from Roslyn to Editor and enable us to use "ctrl + j" to trigger the expander.
- [ ] change text for unimported types completion option to better reflect this? And move the option next to "don't show filter" option
- [x] Add tests

FYI @AmadeusW @ivanbasov @dpoeschl @CyrusNajmabadi 
</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36145</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36144</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36143</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36142</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36141</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.2-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36140</IssueID>
    <RepoID>1</RepoID>
    <Title>Change C# 8 to be the default, non-experimental language version</Title>
    <Description>This change can be made as soon as we fork off the last branch for a 16.2 release from master.</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36139</IssueID>
    <RepoID>1</RepoID>
    <Title>ExternalErrorDiagnosticUpdateSource and TableItem refactoring</Title>
    <Description>Removes dependency on VS types from ExternalErrorDiagnosticUpdateSource 
Simplifies DiagnosticData consturctors.</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36138</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up dead code in AbstractLegacyProject_IIntellisenseBuildTarget.cs</Title>
    <Description>https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/ProjectSystem/Legacy/AbstractLegacyProject_IIntellisenseBuildTarget.cs#L15-L72</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36137</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove Roslyn types from ProjectExternalErrorReporter</Title>
    <Description>1) remove usage of `ContainedDocument`: https://github.com/dotnet/roslyn/issues/36136
2) move `TryGetDocumentId` to `ExternalErrorDiagnosticUpdateSource`
3) Use Project VS GUID instead of `ProjectId`
</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36136</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove ContainedDocument</Title>
    <Description>Depends on
- [ ] TypeScript: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/736685 
- [ ] Razor: https://github.com/dotnet/roslyn/issues/36135
</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36135</IssueID>
    <RepoID>1</RepoID>
    <Title>make asp.net core razor to use new DynamicFile code path rather than ContainedDocument code path</Title>
    <Description>this is next step on moving razor to new DynamicFile code path.

first step enabled FAR on closed files.
this step will enable razor to use same internal document for open and close files.</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36134</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate assembly version without using the patch version.</Title>
    <Description>Specify the version number in pieces so we can generate the assembly version using just the major and minor version numbers.</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36133</IssueID>
    <RepoID>1</RepoID>
    <Title>Code style:  built-in types rule trumps apparent type rule, when type is not apparent</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.2.0 Preview 3.0 [29002.38.d16.2stg]
VisualStudio.16.IntPreview/16.2.0-pre.3.0+29002.38.d16.2stg
Microsoft .NET Framework
Version 4.8.03752

Installed Version: Enterprise

Visual C++ 2019   00435-60000-00000-AA784
Microsoft Visual C++ 2019

Application Insights Tools for Visual Studio Package   9.1.00429.1
Application Insights Tools for Visual Studio

ASP.NET and Web Tools 2019   16.2.154.3618
ASP.NET and Web Tools 2019

ASP.NET Web Frameworks and Tools 2019   16.2.154.3618
For additional information, visit https://www.asp.net/

Azure App Service Tools v3.0.0   16.2.154.3618
Azure App Service Tools v3.0.0

Azure Functions and Web Jobs Tools   16.2.154.3618
Azure Functions and Web Jobs Tools

C# Tools   3.2.0-beta2-19277-03+50ce8972ca70993faaa7c130a19cfd174452ee68
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

GitHub.VisualStudio   2.9.1.7781
A Visual Studio Extension that brings the GitHub Flow into Visual Studio.

Microsoft Azure Tools   2.9
Microsoft Azure Tools for Microsoft Visual Studio 0x10 - v2.9.20419.2

Microsoft Continuous Delivery Tools for Visual Studio   0.4
Simplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft Library Manager   1.0
Install client-side libraries easily to any web project

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual C++ Wizards   1.0
Microsoft Visual C++ Wizards

Microsoft Visual Studio Tools for Containers   1.1
Develop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit &amp; refresh your app without having to rebuild the container.

Microsoft Visual Studio VC Package   1.0
Microsoft Visual Studio VC Package

NuGet Package Manager   5.2.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

Snapshot Debugging Extension   1.0
Snapshot Debugging Visual Studio Extension Detailed Info

SQL Server Data Tools   16.0.61905.20080
Microsoft SQL Server Data Tools

Test Adapter for Boost.Test   1.0
Enables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.

Test Adapter for Google Test   1.0
Enables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.

TypeScript Tools   16.0.10529.2001
TypeScript Tools for Microsoft Visual Studio

Visual Basic Tools   3.2.0-beta2-19277-03+50ce8972ca70993faaa7c130a19cfd174452ee68
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual F# Tools 10.4 for F# 4.6   16.2.0-beta.19277.5+42c125e3cbb5cb06256a413c4e742199fb0df1f3
Microsoft Visual F# Tools 10.4 for F# 4.6

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

Visual Studio Tools for CMake   1.0
Visual Studio Tools for CMake

Visual Studio Tools for CMake   1.0
Visual Studio Tools for CMake

Visual Studio Tools for Containers   1.0
Visual Studio Tools for Containers

**Steps to Reproduce**:

1.  Use these .editorconfig rules:
```
csharp_style_var_elsewhere = false:warning
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
```
2.  Open this file:
```
using System.Collections.Generic;
using System.Reflection;

class A
{
    internal Dictionary&lt;string, int&gt; B { get; }
}

class C
{
    private void D(A a, PropertyInfo e)
    {
        /*1*/ var f = false;

        foreach (/*2*/ var g in a.B.Keys)
        {
        }

        /*3*/ var h = e.GetValue(this);
    }
}
```

**Expected Behavior**:
`csharp_style_var_when_type_is_apparent` will trump the `csharp_style_var_for_built_in_types` rule.
* /\*1\*/ will not warn, because the type is apparent.
* /\*2\*/ and /\*3\*/ will warn because the types are not apparent.

Irrespective of whether or not a type is built in, the goal is to encourage use of `var` when the type is apparent but encourage use of the explicit type when the type is not apparent.

**Actual Behavior**:
The `csharp_style_var_for_built_in_types` rule trumps the `csharp_style_var_when_type_is_apparent` rule.

No warnings are generated.</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36132</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect inferred nullability from type argument that involves user defined conversion</Title>
    <Description>

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable

class A { }
class B { public static implicit operator A(B? b) =&gt; new A(); }

class C
{
    void Test(A a, B? b)
    {
        A t1 = M&lt;A&gt;(a, b);
        A t2 = M(a, b); // CS8600
    }

    T M&lt;T&gt;(T t1, T t2) =&gt; t2;
}
```

**Expected Behavior**:
No warnings

**Actual Behavior**:
`CS8600: Converting null literal or possible null value to non-nullable type.`

**Notes**:
`B?` is convertible to `A`  so Roslyn does not warn for `M&lt;A&gt;(a, b)` since every argument correctly converts to the given type argument.
However Roslyn infers the type argument of `M(a, b)` to be `A?` even though both arguments are non-nullable when converted to `A`.
When Roslyn infers type arguments of an invocation it uses top-level nullability annotation from participating types. I.e. it uses annotation of `B?` ignoring the fact that it will be converted via a user-defined operator which returns explicitly non-nullable reference to `A`.

Here's the code that merges the top-level nullability without checking for actual conversion operators:
http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/Binder/Semantics/OverloadResolution/MethodTypeInference.cs,2848

**Version Used**: 

Branch master (22 May 2019)
Latest commit 04252e by Neal Gafter:
Unskip passing tests. (#35856)

Fixes #35611</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36131</IssueID>
    <RepoID>1</RepoID>
    <Title>Make nullable analysis pay-for-play</Title>
    <Description>One proposal is that we would not run nullability flow analysis on a compilation which has no opt-in (such as `-nullable:enable` or `#nullable enable`). We may do something more granular.

Note that `#nullable restore` would not count (as it is used in generated code.

Also note that this affects analyzers, so this decision will have to be communicated (the compiler can return `NotComputed` in such cases). We may add another mechanism for users to opt-in (for example a feature flag set by an IDE checkbox).

We should queue that work up right after attribute work (https://github.com/dotnet/roslyn/issues/35816).</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36130</IssueID>
    <RepoID>1</RepoID>
    <Title>Pass CancellationToken instead of CancellationTokenSource</Title>
    <Description>
    </Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36129</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid captures in SqlConnection.FlushSpecificWritesAsync</Title>
    <Description>This change produced a 484MB (6.8%) allocation reduction in the scenario described by #36114.</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36128</IssueID>
    <RepoID>1</RepoID>
    <Title>DisposableWaitAsync often completes synchronously</Title>
    <Description>This change produced a 535MB (7.5%) allocation reduction in the scenario described by #36114.</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36127</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid captures in SqlConnection.ReadBlob</Title>
    <Description>This change produced a 806MB (11.3%) allocation reduction in the scenario described by #36114.</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36126</IssueID>
    <RepoID>1</RepoID>
    <Title>GetWriteTaskAsync often completes synchronously</Title>
    <Description>This change produced a 595MB (8.3%) allocation reduction in the scenario described by #36114.</Description>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36125</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix bug with parsing a range expression.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/36122

Note: i believe this is a breaking change (if ranges have shipped).  That's because you *technically* could have written something like this before:

```c#
struct Whatever
{
     public static explicit operator Whatever(Range r) =&gt; ...;
}

//

(Whatever)..a
```

Previously, this would make a range, but then cast it to the Whatever type.  Now, this will properly think this is not a cast, changing the meaning to have the `(Whatever)` be the lower bound of the range.  I believe this is correct based on a reading of the spec (as well as beter matching a user's intuition):

Specifically:

&gt; To resolve cast_expression ambiguities, the following rule exists: A sequence of one or more tokens (White space) enclosed in parentheses is considered the start of a cast_expression only if at least one of the following are true:
&gt; 
&gt; 1. ~not applicable~
&gt; 2. The sequence of tokens is correct grammar for a type, and the token immediately following the closing parentheses is the token "~", the token "!", the token "(", an identifier (Unicode character escape sequences), a literal (Literals), or any keyword (Keywords) except as and is.

Since `..` is none of those tokens, this should not be a cast expression.

Now, if ranges are still in preview, then this is definitely safe to just fix right now.  If it's shipped, you'll have to make a breaking change call.  Personally, i think the risk is tiny so i think it's worth doing.</Description>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36124</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't offer 'convert if to conditional' if it crosses a preprocessor directive.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/36117

The original code actually had a preprocessor-directive check.  But the check was a little too narrow.  This PR expands the check to handle the broader case.  I also used this as an opportunity to unify a bunch of duplicate C#/VB code that was written prior to the great syntax unification.</Description>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36123</IssueID>
    <RepoID>1</RepoID>
    <Title>New test methods are not run until i restart VS</Title>
    <Description>I've been noticing this a while, but haven't gotten around to filing this until now.  For reasons i cannot figure out, the test-runner in VS never wants to run tests i've just added.  For example, i added this test:

![image](https://user-images.githubusercontent.com/4564579/58766842-82c32280-8538-11e9-9707-503797fbc24c.png)

The test then shows up in the test explorer:

![image](https://user-images.githubusercontent.com/4564579/58766849-8f477b00-8538-11e9-9f91-e2edcb68d7ea.png)

But no matter what i do, i cannot get any sort of test run to actually execute it.  Sayng "run test" in the method body doesn't work.   Right clicking on the test in the explorer and trying to run it doesn't work.

The output shows this:

```
[6/2/2019 1:14:14.794 PM Informational] ========== Run finished: 122 tests run (0:00:30.7122483) ==========
[6/2/2019 1:16:12.582 PM Informational] Executing test method: Microsoft.CodeAnalysis.Editor.VisualBasic.UnitTests.UseConditionalExpression.UseConditionalExpressionForReturnTests.TestMissingWhenCrossingPreprocessorDirective
[6/2/2019 1:16:12.837 PM Informational] ---------- Run started ----------
[6/2/2019 1:16:13.935 PM Warning] Test run will use DLL(s) built for framework .NETFramework,Version=v4.5 and platform X86. Following DLL(s) do not match framework/platform settings.
Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests.dll is built for Framework 4.7.2 and Platform AnyCPU.
Go to http://go.microsoft.com/fwlink/?LinkID=236877&amp;clcid=0x409 for more details on managing these settings.

[6/2/2019 1:16:14.555 PM Informational] [xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1-pre.build.4059 (32-bit Desktop .NET 4.0.30319.42000)
[6/2/2019 1:16:15.245 PM Informational] [xUnit.net 00:00:00.69]   Discovering: Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests
[6/2/2019 1:16:19.553 PM Informational] [xUnit.net 00:00:05.00]   Discovered:  Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests
[6/2/2019 1:16:19.638 PM Informational] [xUnit.net 00:00:05.08]   Starting:    Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests
[6/2/2019 1:16:23.650 PM Informational] [xUnit.net 00:00:09.09]   Finished:    Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests
[6/2/2019 1:16:23.832 PM Informational] [xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1-pre.build.4059 (32-bit Universal Windows)
[6/2/2019 1:16:24.121 PM Informational] ========== Run finished: 1 tests run (0:00:11.2767712) ==========
```

And, in the end i see:

![image](https://user-images.githubusercontent.com/4564579/58766866-d59cda00-8538-11e9-969b-0d68d8a8954b.png)

Basically, no matter what i do, *new* test methods just do not get picked up by the *execution* engine, though they are picked up by the UI.  

If i close and open VS, then things are fine and these tests are now run.

It's super annoying (esp. given how long it takes to restart VS).</Description>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36122</IssueID>
    <RepoID>1</RepoID>
    <Title>Apparent C# 8 bug in Range implementation</Title>
    <Description>**C# 8 beta - Visual Studio 16.1.1**: 



**Steps to Reproduce**:

```cs
        public static T[] FromStart&lt;T&gt;(this T[] Source, int Count, int Offset = 0)
        {
            return Source[(Offset)..(Offset + Count)];
        }
```


**Expected Behavior**:

Compiler treats this the same as:

```cs
        public static T[] FromStart&lt;T&gt;(this T[] Source, int Count, int Offset = 0)
        {
            return Source[Offset..(Offset + Count)];
        }
```

**Actual Behavior**:

Complains and issues CS0118.
</Description>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36121</IssueID>
    <RepoID>1</RepoID>
    <Title>Regular method missing return type should not be assumed to be a static constructor</Title>
    <Description>**Version Used**: 
 04252e from master, 21 May 19

**Steps to Reproduce**:
```c#
class X
{
    private static Foo(int i) {}
}
```
https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABATAAgA0BYAKAG8z9r8AHBASwDcJ59sBGANnwDEB7fgAoGAOxj4GASnzkAvmTlA===

**Expected Behavior**:
```
error CS1520: Method must have a return type
```

**Actual Behavior**:
```
error CS0515: 'X.X(int)': access modifiers are not allowed on static constructors
error CS1520: Method must have a return type
error CS0132: 'X.X(int)': a static constructor must be parameterless
```

In this case `Foo` is unlikely to be a failed attempt at a static constructor because (1) it has the wrong name (2) it has parameters (3) it has an access modifier. It is vastly more likely I just forgot the return type on a regular method.

If the method name does not match the type name, the compiler should not give diagnostics for static constructors. </Description>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36120</IssueID>
    <RepoID>1</RepoID>
    <Title>Support Go to Definition in Object Browser for imported assemblies</Title>
    <Description>VSF_TYPE_MARKDOWNCurrently, the `Go to Definition` command only works in `Object Browser` for the code in the solution. Symbols coming from external assemblies, like e.g. NuGet packages, do not support the `Go to Definition` command.

However, if I use and imported symbol in code, the C# editor will offer me the `Go to Definition` command and either show the API surface from the Assembly metadata, decompile the assembly and show the decompiled source, or use SourceLink to show the source code from an external repository.

It would be great if the `Object Browser` would offer the same capabilities and behaviour for `Go to Definition` as the code editor.

### Example

Considering the following C# source:

``` csharp
namespace MyNamespace
{
    class Class1
    {
        void Foo()
        {
            _ = Newtonsoft.Json.JsonConvert.Null;
        }
    }
}
```

If I place my cursor on `JsonConvert`, the context menu offers me the `Go to Definition` command which (because of my current settings) shows me the decompiled source of `JsonConvert` class in the `Newtonsoft.Json` assembly that I have referenced as a ` PackageReference` in my project file.

When opening `Object Browser` and setting `Browse` to `My Solution`, the referenced `Newtonsoft.Json` assembly is listed, but the `Go to Definition` command does not appear in the context menu of any of its containing types nor on any symbol defined on a type.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/589562/support-go-to-definition-in-object-browser-for-imp.html
VSTS ticketId: 902393_
_These are the original issue comments:_

Visual Studio Feedback System on 5/30/2019, 08:16 PM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36119</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2 to release/dev16.2-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2 into release/dev16.2-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-to-release/dev16.2-preview2-vs-deps
git reset --hard upstream/release/dev16.2-preview2-vs-deps
git merge upstream/release/dev16.2-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-to-release/dev16.2-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36118</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-preview2 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.2-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.2-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36117</IssueID>
    <RepoID>1</RepoID>
    <Title>"if statement can be simplified" does not respect preprocessor</Title>
    <Description>**Version Used**: 
VS 2019 16.1.1 (cannot test in Beta at the moment as it broke compiling my main project :( ).

**Steps to Reproduce**:
1. Create sample C# project with the following Main method:
```cs
private static int Main()
{
    bool check = true/*of course, some actual calculation would be done here*/;
#if DEBUG
    if (check)
        return 3;
#endif
    return 2;
}
```
This code has the requirements of returning 3 in DEBUG builds if `check` is `true`, otherwise 2. In non-DEBUG builds, it always returns 2.

**Expected Behavior**:
The if statement cannot be simplified due to the constraints put on it by the preprocessor `#if DEBUG`.

**Actual Behavior**:
However, VS suggests **IDE0046: 'if' statement can be simplified** to create the following:
```cs
private static int Main()
{
    bool check = true;
#if DEBUG
    return check ? 3 : 2;

#endif
}
```
This breaks the logic of any non-DEBUG build as the return is completely gone from them (it would even break compilation for normal methods requiring a return). The above requirements are not met anymore.</Description>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36116</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36115</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable some VB tests on CoreCLR</Title>
    <Description>
    </Description>
    <CreatedDate>01/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36114</IssueID>
    <RepoID>1</RepoID>
    <Title>Manual allocation performance testing: AnalyzerRunner for DiagnosticAnalyzerService on Roslyn.sln</Title>
    <Description>**Version Used**: ba24589046961e98198518b7a82c78ab5d42b677

### Scenario details

This test executes the DiagnosticAnalyzerService with the following configuration:

* Database persistence is enabled (SQLite at this time)
* The database does not exist in advance
* Full solution analysis is disabled for both C# and Visual Basic

### Steps to run the test

1. Delete the **%TEMP%\\RoslynTests\\AnalyzerRunner\\temp-db** folder (if it exists)

1. Run AnalyzerRunner in release mode with the following command line (this is the **IIncrementalAnalyzer DiagnosticAnalyzerService** profile)

    &gt; $(OutDir) $(SolutionDir)Roslyn.sln /stats /ia Diagnostic /persist /profileroot $(SolutionDir)artifacts\\profileRoot

1. Start PerfView GC-only profiling during the 5 second delay before project analysis starts
    * Make sure to use a circular buffer large enough to hold the complete result data
    * For 64-bit profiling, PerfView will need to start before AnalyzerRunner starts. The 5-second delay is still helpful as it will show up in the trace as a 5-second period of no allocations.

1. Stop profiling when the AnalyzerRunner completes</Description>
    <CreatedDate>01/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36113</IssueID>
    <RepoID>1</RepoID>
    <Title>Update AnalyzerRunner to support IIncrementalAnalyzer testing</Title>
    <Description>This is a supporting change for upcoming profile-based optimization of SQLite and the incremental analyzer infrastructure for VS for Mac scenarios.

/cc @Therzok </Description>
    <CreatedDate>01/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36112</IssueID>
    <RepoID>1</RepoID>
    <Title>Port DisposeAnalyzers to release/dev16.2-preview2</Title>
    <Description>Ports the following PRs from master to release/dev16.2-preview2:
1. https://github.com/dotnet/roslyn/pull/35248
2. https://github.com/dotnet/roslyn/pull/36097</Description>
    <CreatedDate>01/06/2019</CreatedDate>
    <ClosedDate>02/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36111</IssueID>
    <RepoID>1</RepoID>
    <Title>FAR crashes ServiceHub.RoslynCodeAnalysisService32.exe</Title>
    <Description>**Version Used**: eb082c8f9afb24b196d634adc3844de72af65259

**Steps to Reproduce**: Link to internal repo available upon request

**Expected Behavior**: FAR terminates

**Actual Behavior**: Gold bar indicates external process has crashed and FAR progress indicator loops forever

```
&gt;	Microsoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.Contract.ThrowIfNull&lt;System.__Canon&gt;(System.__Canon value, string message) Line 19	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.VerifyForwardedTypes(System.Collections.Generic.Dictionary&lt;Microsoft.CodeAnalysis.INamedTypeSymbol, Microsoft.CodeAnalysis.INamedTypeSymbol&gt; equivalentTypesWithDifferingAssemblies, Microsoft.CodeAnalysis.Compilation compilation, System.Collections.Generic.HashSet&lt;Microsoft.CodeAnalysis.INamedTypeSymbol&gt; verifiedKeys, bool isSearchSymbolCompilation) Line 530	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.VerifyForwardedTypes(System.Collections.Generic.Dictionary&lt;Microsoft.CodeAnalysis.INamedTypeSymbol, Microsoft.CodeAnalysis.INamedTypeSymbol&gt; equivalentTypesWithDifferingAssemblies, Microsoft.CodeAnalysis.ISymbol searchSymbol, Microsoft.CodeAnalysis.ISymbol symbolToMatch, Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Compilation searchSymbolCompilation, Microsoft.CodeAnalysis.Compilation symbolToMatchCompilation, System.Threading.CancellationToken cancellationToken) Line 519	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.OriginalSymbolsMatchCore(Microsoft.CodeAnalysis.ISymbol searchSymbol, Microsoft.CodeAnalysis.ISymbol symbolToMatch, Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Compilation searchSymbolCompilation, Microsoft.CodeAnalysis.Compilation symbolToMatchCompilation, System.Threading.CancellationToken cancellationToken) Line 468	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.OriginalSymbolsMatch(Microsoft.CodeAnalysis.ISymbol searchSymbol, Microsoft.CodeAnalysis.ISymbol symbolToMatch, Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.Compilation searchSymbolCompilation, Microsoft.CodeAnalysis.Compilation symbolToMatchCompilation, System.Threading.CancellationToken cancellationToken) Line 395	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Shared.Extensions.ITypeSymbolExtensions.FindImplementationsForInterfaceMemberAsync.AnonymousMethod__1(Microsoft.CodeAnalysis.ISymbol m) Line 178	C#
 	System.Collections.Immutable.dll!System.Linq.ImmutableArrayExtensions.FirstOrDefault&lt;Microsoft.CodeAnalysis.ISymbol&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ISymbol&gt; immutableArray, System.Func&lt;Microsoft.CodeAnalysis.ISymbol, bool&gt; predicate) Line 405	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Shared.Extensions.ITypeSymbolExtensions.FindImplementationsForInterfaceMemberAsync(Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt; typeSymbolAndProjectId, Microsoft.CodeAnalysis.ISymbol interfaceMember, Microsoft.CodeAnalysis.Solution solution, System.Threading.CancellationToken cancellationToken) Line 213	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementationsAsync(Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId symbolAndProjectId, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet&lt;Microsoft.CodeAnalysis.Project&gt; projects, System.Threading.CancellationToken cancellationToken) Line 250	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractMethodOrPropertyOrEventSymbolReferenceFinder&lt;Microsoft.CodeAnalysis.IMethodSymbol&gt;.DetermineCascadedSymbolsAsync(Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId&lt;Microsoft.CodeAnalysis.IMethodSymbol&gt; symbolAndProjectId, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet&lt;Microsoft.CodeAnalysis.Project&gt; projects, Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions options, System.Threading.CancellationToken cancellationToken) Line 33	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.Finders.PropertyAccessorSymbolReferenceFinder.DetermineCascadedSymbolsAsync(Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId&lt;Microsoft.CodeAnalysis.IMethodSymbol&gt; symbolAndProjectId, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet&lt;Microsoft.CodeAnalysis.Project&gt; projects, Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions options, System.Threading.CancellationToken cancellationToken) Line 23	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractReferenceFinder&lt;Microsoft.CodeAnalysis.IMethodSymbol&gt;.DetermineCascadedSymbolsAsync(Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId symbolAndProjectId, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.IImmutableSet&lt;Microsoft.CodeAnalysis.Project&gt; projects, Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchOptions options, System.Threading.CancellationToken cancellationToken) Line 749	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.DetermineAllSymbolsCoreAsync.AnonymousMethod__0() Line 136	C#
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.(ref Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;&gt;c__DisplayClass21_1.&lt;&lt;DetermineAllSymbolsCoreAsync&gt;b__0&gt;d stateMachine) Line 316	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.DetermineAllSymbolsCoreAsync.AnonymousMethod__0()	Unknown
```
</Description>
    <CreatedDate>01/06/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36110</IssueID>
    <RepoID>1</RepoID>
    <Title>Should warn when calling a method that returns a [MaybeNull] unconstrained type parameter</Title>
    <Description>When a method is declared to return `[MaybeNull] T`
``` c#
class X&lt;T&gt;
{
    [MaybeNull] T FirstOrDefault();
}
```
And is instantiated where `T` remains unconstrained
``` c#
class Y&lt;U&gt; : X&lt;U&gt;
{
    T M()
    {
        return base.FirstOrDefault(); // ?
    }
}
```
there should be a warning at the callsite just as there would be a warning for writing `default(U)`</Description>
    <CreatedDate>01/06/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36109</IssueID>
    <RepoID>1</RepoID>
    <Title>Add initial support for 'notnull' generic type constraint.</Title>
    <Description>See https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-15.md
Also fixes #36005.</Description>
    <CreatedDate>01/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36108</IssueID>
    <RepoID>1</RepoID>
    <Title>Move Misplaced Using diagnostic down to the feature layer</Title>
    <Description>Other codestyle diagnostics are in the Feature layer. This one was added to the wrong place.</Description>
    <CreatedDate>01/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>36107</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/06/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
</Issues>
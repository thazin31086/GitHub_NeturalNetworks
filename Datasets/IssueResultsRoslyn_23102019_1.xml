<Issues>
  <Issue>
    <IssueID>39459</IssueID>
    <RepoID>1</RepoID>
    <Title>Error during Roslyn based builds [CS8021]: No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options.</Title>
    <Description>All these snafus we have experienced appear to be on the heels of installing VS2019 side-by-side with VS2017. The same Roslyn compilation pipeline worked just fine for us prior to that.

We are not doing anything that exotic to resolve references. We do that using the conventional means via `PackageReference` in the appropriate version(s) for our needs. At this time I think that is `15.9.20`.

In our project specs:

```Xml
&lt;PropertyGroup&gt;
  &lt;MicrosoftBuildVersion&gt;[15.9.20,16)&lt;/MicrosoftBuildVersion&gt;
  &lt;MicrosoftCodeAnalysisCSharpVersion&gt;[2.10,3)&lt;/MicrosoftCodeAnalysisCSharpVersion&gt;
&lt;/PropertyGroup&gt;

&lt;ItemGroup&gt;
  &lt;PackageReference Include="Microsoft.Build" Version="$(MicrosoftBuildVersion)" /&gt;
  &lt;PackageReference Include="Microsoft.Build.Framework" Version="$(MicrosoftBuildVersion)" /&gt;
  &lt;PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="$(MicrosoftCodeAnalysisCSharpVersion)" /&gt;
  &lt;PackageReference Include="Microsoft.CodeAnalysis.Workspaces.MSBuild" Version="$(MicrosoftCodeAnalysisCSharpVersion)" /&gt;
&lt;/ItemGroup&gt;
```

We are in the midst of refactoring some of our compilation services to a separate solution/project for easier tracking, to begin with. I could post a project for that when we are ready. In the meantime, there is nothing that unusual about doing the above. Apart from apparently the `CS8021` error.

We will try the `Microsoft.Build.Locator` route to see what we can do to help that issue.</Description>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39458</IssueID>
    <RepoID>1</RepoID>
    <Title>Microsoft.CodeAnalysis.CSharp puts a lot of resource litters in the output folder</Title>
    <Description>I don't use CodeAnalysis at all. But I don't know why, my output folder contains a lot of folders related to cultural resources of `Microsoft.CodeAnalysis.CSharp`.

I've asked it first [here](https://github.com/aspnet/AspNetCore/issues/15255).

Can you create a clean output folder when there is no need for localization resources?</Description>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39457</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor task center progress reporting</Title>
    <Description>
    </Description>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39456</IssueID>
    <RepoID>1</RepoID>
    <Title>Add external access shims for TypeScript editor features layer.</Title>
    <Description>
    </Description>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39455</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle intellicode star in display text prefix</Title>
    <Description>Currently, commit-if-unique does not work in TypeScript and JavaScript files.
This is because TypeScript adds the IntelliCode star to completion items in the display text prefix and therefore they are not currently deduplicated from the perspective of the ItemManager.
Here, we update the implementation of `IsPreferredItem` to handle this case.

Note that we do not need to update the override for VSCompletionItems because there's no equivalent prefix field (also, I'm not convinced that that override is even used, but I'm not sure enough to remove it).</Description>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>23/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39454</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39453</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>23/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39452</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39451</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix for control flow graph when combining using declarations with labels</Title>
    <Description>This fixes an issue in CFG where we incorrectly handle using declarations that fall under labels. It follows a similar pattern to how we handle lowering in the local re-writer.</Description>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39450</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable logging of informational telemetry for analyzers/fixers/refact…</Title>
    <Description>…orings executed during Ctrl + .

If user enables informational RoslynEventSource telemetry following the steps at https://aka.ms/reportPerf, we log the execution times for each analyzer/fixer/refactorings when computing the code fixes and refactorings to show in the light bulb. This will help us identify slow analyzers/fixers/refactorings that lead to UI delays with "Gathering suggestions" dialog.</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39449</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable annotate TypeCompilationState and MessageID</Title>
    <Description>Bringing some annotation-only changes from my feature branch into master. /cc @jaredpar</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39448</IssueID>
    <RepoID>1</RepoID>
    <Title>Live Share - Support Empty Workspace</Title>
    <Description>Recently Live Share added the ability to share an empty workspace. In this case, `session.ListRootsAsync` will return an empty array. This adds checks for that scenario. Previously, Roslyn would throw an index out of range error. This also requires updates to other sections of the code that assume a non-null `_externalPath` and `_remoteRootPath`. Note that there's more work to be done to update these values once a workspace is opened. This fix will avoid an exception, but no files will be added to the remote workspace.</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39447</IssueID>
    <RepoID>1</RepoID>
    <Title>Detecting and fixing violations of naming rules</Title>
    <Description>Have a naming convention detection feature that offers to modify symbol names to match the others around them. 

**Steps to reproduce**:
1. Highlight the detected violations as warnings in the editor. 
2. Press Ctrl+. or Alt+Enter to trigger the Quick Actions and Refactorings menu. 
3. Have an option to `Detect Inconsistent Naming`
4. Have another fly out menu to `Find similar issues in file/solution`. 
5. All naming style violations will be displayed in a results window (similar to Find All References window). 
6. You can double click the detected violations and navigate to the code of the corresponding symbols. </Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39446</IssueID>
    <RepoID>1</RepoID>
    <Title>To have a better pattern to remove the OOP and Servicehub related IVT types</Title>
    <Description>Currently, we don't have a good pattern to give extern access when it comes to some classes related to OOP and ServiceHub related types.

Example:
Internal repos may have classes derives from the [ServiceHubServiceBase](https://github.com/dotnet/roslyn/blob/master/src/Workspaces/Remote/ServiceHub/Shared/ServiceHubServiceBase.cs)

Then it becomes troublesome, because this class can't be exposed via Interface and Wrapper types either they need to create their own ServiceHubBase. ([Example](https://github.com/Cosifne/testimpact/blob/dev/shech/SBDIVTRemove/src/Shared/ServiceHubBase/RolsynServiceHubBase.cs)) or move all the implementation to Roslyn

Problem of first approach:
Because PinnedSolutionInfo is internal, and session [classes ](https://github.com/dotnet/roslyn/blob/master/src/Workspaces/Core/Portable/Remote/RemoteHostSessionHelpers.cs)in Roslyn like KeepLiveSession will some time pass PinnedSolutionInfo to the target ([Example](https://github.com/dotnet/roslyn/blob/0a497dde742a8aa9e7fe5457eba4109b737b3a1e/src/Workspaces/Core/Portable/Remote/RemoteHostSessionHelpers.cs#L194)). Then the host has to accept object type parameter. And to make things worse, RPC will just pass the JObject as the type at runtime, then we need to manually deal with the deserilization ([Example](https://github.com/Cosifne/roslyn/blob/shech/SBDIVTCleanUp/src/Workspaces/Remote/ServiceHub/ExternalAccess/UnitTesting/Api/UnitTestingPinnedSolutionInfoWrapper.cs)

Problem of the second approach:
The servicehub host class may reference other type in other repo, and since there is no MEF on OOP side. Then other team may need to move more and more classes to Roslyn. ([Example](https://github.com/dotnet/testimpact/blob/53f45b513a433629f14fb56fa3bfd472251db1a9/src/SourceBasedTestDiscovery/SourceBasedTestDiscovery/SourceLocation/OOP/RemoteTestSourceLocationLookupService.cs#L24))</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39445</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect CS8169 nullability warning when using Select() without lambda</Title>
    <Description>**Version Used**: 
SDK 3.0.100 / Runtime 3.0.0

**Steps to Reproduce**:

Build the following code with nullable enabled.

```
using System.Collections.Generic;
using System.IO;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        string[] paths = new [] { "a", "b", "c" };

        // OK
        IEnumerable&lt;string&gt; x1 = paths.Select(x =&gt; Path.GetFileNameWithoutExtension(x));

        // CS8619
        IEnumerable&lt;string&gt; x2 = paths.Select(Path.GetFileNameWithoutExtension);
    }
}
```

Output:
```
Program.cs(15,34): warning CS8619: Nullability of reference types in value of type 'IEnumerable&lt;string?&gt;' doesn't match target type 'IEnumerable&lt;string&gt;'.
```

**Expected Behavior**:
The assignment to `x2` does not cause a CS8619 warning.

**Actual Behavior**:
The assignment to `x2` causes a CS8619 warning.</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39444</IssueID>
    <RepoID>1</RepoID>
    <Title>Document `-nullable:annotations` option</Title>
    <Description>
    </Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39443</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0068 False Positive</Title>
    <Description>**Version Used**: 
VS19 Community
**Steps to Reproduce**:
Code example:
 if (this.TryOpenReader(sourceName, out TextReader reader))
            {
                using (reader)
                {
                var m = new Model();
                Importer.Import(m, reader);
                return m;
                }
            }

where the TryOpenReader retruns true if it is successful in opening a reader, false otherwise.


**Expected Behavior**:
Would NOT expect to get an IDE0068 message.
**Actual Behavior**:
Get an IDE0068 Message on the out variable. Tried a couple of approaches, but none seem to clear it.</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39442</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39441</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39440</IssueID>
    <RepoID>1</RepoID>
    <Title>Fly out menus trigger too fast and get in the way of primary menus. </Title>
    <Description>Then menu rows are small, and the fly outs trigger too fast on hover, which often ends up triggering sub menus that then hide the original menu. 
</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39439</IssueID>
    <RepoID>1</RepoID>
    <Title>AbstractUseNullPropagationCodeFixProvider crashed with InvalidCastException</Title>
    <Description>**Version Used**: 
Version 16.4.0 Preview 3.0 [29421.117.master]

**Steps to Reproduce**:

This was a fix all in a very large code base, so I'm unsure of what code is causing it to crash:
```
System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax'.
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxFactsService.GetPartsOfConditionalExpression(SyntaxNode node,SyntaxNode&amp; condition,SyntaxNode&amp; whenTrue,SyntaxNode&amp; whenFalse)
   at async Microsoft.CodeAnalysis.UseNullPropagation.AbstractUseNullPropagationCodeFixProvider`8.FixAllAsync[TSyntaxKind,TExpressionSyntax,TConditionalExpressionSyntax,TBinaryExpressionSyntax,TInvocationExpression,TMemberAccessExpression,TConditionalAccessExpression,TElementAccessExpression](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.FixDocumentAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsCoreAsync(&lt;Unknown Parameters&gt;)
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass20_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39438</IssueID>
    <RepoID>1</RepoID>
    <Title>Lock resettable delay to prevent concurrent access.</Title>
    <Description>https://devdiv.visualstudio.com/DevDiv/_workitems/edit/994068

Possible reason. -&gt;
We get two simultaneous entrances into ProgressUpdated, one from sln crawler (1), one from [completion of previous ProgressUpdated](http://sourceroslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Diagnostics/DiagnosticProgressReporter.cs,150) (2)

At this point in time, the delay is null (b/c of (2)).  So they both hit the [construction of a new resettabledelay](http://sourceroslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Diagnostics/DiagnosticProgressReporter.cs,146).  Both append the continuation to their delay, but only one get stored in the field, let's say that (2) is in the field.

(Might be optional step) A third event comes in, [resetting the delay of the stored delay](http://sourceroslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Diagnostics/DiagnosticProgressReporter.cs,142), (2).

Eventually the unstored delay (1) completes resetting the field to null.
A fourth ProgressUpdated event comes in, sees null, tries to create a new delay.  Immediately after the constructor is hit, the previously stored delay (2) completes and sets the delay to null -&gt; null prt exception.

@jasonmalinowski now that I'm writing this down this is the scenario I can think of - does it sound right?</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39437</IssueID>
    <RepoID>1</RepoID>
    <Title>Code fixes never shows up if you navigate to it and the file has never been open before</Title>
    <Description>This is 100% repro and has occurred up on stage presenting the fixes.

**Visual Studio Version**:
Version 16.4.0 Preview 3.0 [29421.117.master]

**Summary**:

**Steps to Reproduce**:

Make sure Full Solution Analysis is turned on.

1. `git clone https://github.com/davkean/audio-switcher`
2. `cd audio-switcher`
3. `git checkout 9d8fa8d1d1dde083abc6d813617df05b088d88f1`
4. `src\AudioSwitcher.sln`
5. Open Error List and wait for "Use pattern matching" analysis message to appear
6. Double-click it to navigate to source code
7. Drop lightbulb

**Expected Behavior**:
![image](https://user-images.githubusercontent.com/1103906/67252753-0f5a8700-f4c0-11e9-9b60-449a59ebd03e.png)

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/1103906/67252740-079ae280-f4c0-11e9-9e4f-abfbc36604b8.png)</Description>
    <CreatedDate>22/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39436</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: Call AsyncIteratorMethodBuilder.Complete</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/39321

We need to call `AsyncIteratorMethodBuilder.Complete` to dispose of some resources it holds. We can do that when bringing the state machine to a finalized state (`-2`), that is when we'd call `AsyncTaskMethodBuilder.SetResult` in a plain async method.
But a completed instance cannot be re-used, so we also need to reset it in `GetAsyncEnumerator`.

For more context, here's the code we [currently produce](https://sharplab.io/#v2:D4AQTAjAsAUCAMACEEAsBuWDkQKyZiwGZkxEBhRAb1kTuRJAA5EBJAQQGcBPAOwGMAorwCuAWwCmAJwCGAIwA2EgDwBLXgBcAfIgCyACgCU1WvTMgAnMgBsAOgCaqiQoAmRgmfMQIyAOyJ4D3oAX1hgoA===).

Here's a sample showing an overview of the change:

``` csharp
	private sealed class &lt;M&gt;d__0 : IAsyncEnumerable&lt;int&gt;, IAsyncEnumerator&lt;int&gt;, IAsyncDisposable, IValueTaskSource&lt;bool&gt;, IValueTaskSource, IAsyncStateMachine
	{
		public int &lt;&gt;1__state;
		public AsyncIteratorMethodBuilder &lt;&gt;t__builder;
		public ManualResetValueTaskSourceCore&lt;bool&gt; &lt;&gt;v__promiseOfValueOrEnd;
		private int &lt;&gt;2__current;
		private bool &lt;&gt;w__disposeMode;
		private int &lt;&gt;l__initialThreadId;
		private TaskAwaiter &lt;&gt;u__1;

		[DebuggerHidden]
		public &lt;M&gt;d__0(int &lt;&gt;1__state)
		{
			this.&lt;&gt;1__state = &lt;&gt;1__state;
			&lt;&gt;l__initialThreadId = Environment.CurrentManagedThreadId;
                        &lt;&gt;t__builder = AsyncIteratorMethodBuilder.Create();
		}

		private void MoveNext()
		{
			int num = &lt;&gt;1__state;
			try
			{
                            ...
			}
			catch (Exception exception)
			{
				&lt;&gt;1__state = -2;
				&lt;&gt;v__promiseOfValueOrEnd.SetException(exception);
				&lt;&gt;t__builder.Complete(); // added
				return;
			}
			&lt;&gt;1__state = -2;
			&lt;&gt;v__promiseOfValueOrEnd.SetResult(result: false);
			&lt;&gt;t__builder.Complete(); // added
			return;
			IL_011f:
			&lt;&gt;v__promiseOfValueOrEnd.SetResult(result: true);
		}

		[DebuggerHidden]
		IAsyncEnumerator&lt;int&gt; IAsyncEnumerable&lt;int&gt;.GetAsyncEnumerator(CancellationToken token)
		{
			if (&lt;&gt;1__state == -2 &amp;&amp; &lt;&gt;l__initialThreadId == Environment.CurrentManagedThreadId)
			{
				&lt;&gt;1__state = -3;
				&lt;&gt;t__builder = AsyncIteratorMethodBuilder.Create(); // added
				&lt;&gt;w__disposeMode = false;
				return this;
			}
			return new &lt;M&gt;d__0(-3);
		}

            ...
	}
```</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39435</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect editor behavior during Rename Refactor</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784737/incorrect-editor-behavior-during-rename-refactor.html)._

---
&lt;ol&gt;&lt;li&gt;In a C# project, initiate a rename refactor on an identifier having more than one character.&lt;/li&gt;&lt;li&gt;Press Shift+Left Arrow to select one or more characters, but not all of them.&lt;/li&gt;&lt;li&gt;Type some characters.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;RESULT: The selected characters are deleted, but the typed characters appear at the beginning of the identifier.&lt;/p&gt;&lt;p&gt;EXPECT: The typed characters to overwrite the selected characters.&lt;/p&gt;

---
### Original Comments

#### Visual Studio Feedback System on 10/20/2019, 07:41 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/21/2019, 10:11 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39434</IssueID>
    <RepoID>1</RepoID>
    <Title>Autogeneration of interface implementation for IDiaStackWalkHelper is confused by indexed getter</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784552/autogeneration-of-interface-implementation-for-idi.html)._

---
After importing the DIA com type library in my C# project, I try to implement the IDiaStackWalkHelper interface. Using the automatic inteface implementation skeleton generation command results in an incorrect implementation of the `get_registerValue` method.

The generated skeleton thinks that `registerValue` is a normal property, when it is not. It's a named indexer, which isn't supported in C# and must be implemented as a pair of regular methods.

This error is instantly detected by intelisense who points out that the members aren't implemented.

---
### Original Comments

#### Visual Studio Feedback System on 10/21/2019, 03:00 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39433</IssueID>
    <RepoID>1</RepoID>
    <Title>weird indentation for tuple literal ending with lambda csharp</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784678/weird-indentation-for-tuple-literal-ending-with-la.html)._

---
If I write a lambda in a tuple and type a semicolon after the tuple or ask Visual Studio to fix indentation for the file, it adds a newline between the lambda’s closing curly brace and the tuple’s closing parenthesis. This seems odd. I would expect a newline between the opening parenthesis and first value in the tuple if this were considered the desired style. However, I don’t think it is the desired style for tuples.

I generally expect the styling of tuple parens to be the same as function argument list parens.

Before typing the semicolon:
```csharp
var plan = new List&lt;(int count, Action&lt;int&gt; action)&gt;();
plan.Add((2, i =&gt;
{
    Console.WriteLine($"Action (execution {i})");
}))
```


After typing the semicolon after the tuple.:
```csharp
var plan = new List&lt;(int count, Action&lt;int&gt; action)&gt;();
plan.Add((2, i =&gt;
{
    Console.WriteLine($"Action (execution {i})");
}
));
```

Expected:
```csharp
var plan = new List&lt;(int count, Action&lt;int&gt; action)&gt;();
plan.Add((2, i =&gt;
{
    Console.WriteLine($"Action (execution {i})");
}));
```

---
### Original Comments

#### Visual Studio Feedback System on 10/21/2019, 02:48 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39432</IssueID>
    <RepoID>1</RepoID>
    <Title>Semantic model assert</Title>
    <Description>Fixed invalid assert in `GetRemappedSymbols` for `AttributeSemanticModel`s. Since attribute models don't have a root symbol, we can't perform any symbol remapping in that context. Additionally updated the IDE test with the current baseline. @dotnet/roslyn-compiler @ryzngard for review.
Fixes https://github.com/dotnet/roslyn/issues/39427.</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39431</IssueID>
    <RepoID>1</RepoID>
    <Title>Link to http://sourceroslyn.io</Title>
    <Description>
    </Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39430</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0054 and IDE0063 triggered when NOT using C#8</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/752720/ide0054-and-ide0063-triggered-when-not-using-c8.html)._

---
Problem since upgrading to VS Community 2019 16.3.

.Net Framework projects only support C#7.3, but various C#8 hints are triggered which lead to code changes that look valid in the IDE but do not compile (&amp;quot;language feature XXX is not availabel in C#7.3&amp;quot;). 

I can prevent this by manually disabling the rules in a .ruleset file, but it would be better to disbale rules automatically that target a higher version.

---
### Original Comments

#### Visual Studio Feedback System on 9/28/2019, 07:27 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 9/30/2019, 00:25 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Tom Austin on 10/15/2019, 02:43 AM: 

&lt;p&gt;Is there anymore info on this? It's still an issue.&lt;/p&gt;

#### sean on 10/17/2019, 00:48 PM: 

&lt;p&gt;I am using VS Professional 16.3.5 and am experiencing this issue.&lt;/p&gt;&lt;p&gt;I am using a type that implements `IDisposable`.&lt;/p&gt;&lt;p&gt;My csproj is an SDK style project.&lt;/p&gt;&lt;p&gt;It has `&amp;lt;LangVersion&amp;gt;latest&amp;lt;/LangVersion&amp;gt;` and `&amp;lt;TargetFramework&amp;gt;net472&amp;lt;/TargetFramework&amp;gt;`, so it is not a .NET Core project.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Do I have to explicitly set `&amp;lt;LangVersion&amp;gt;7.3&amp;lt;/LangVersion&amp;gt;` to not get the `IDE0063` recommendation?&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39429</IssueID>
    <RepoID>1</RepoID>
    <Title>When pasting json into a comment in C# code, an error is shown</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/773139/when-pasting-json-into-a-comment-in-c-code-an-erro.html)._

---
This just happened to me, here is what I did:

1: Create a comment section in some C# code, using /* and */
2: Within the comment section, paste some json
3: Watch it show an yellow error bar at the top with the following exception:

StreamJsonRpc.RemoteMethodNotFoundException : Unable to find method 'SynchronizeTextAsync/3' on {no object} for the following reasons: An argument was not supplied for a required parameter.
   at async StreamJsonRpc.JsonRpc.InvokeCoreAsync[TResult](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx.InvokeAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)

---
### Original Comments

#### Visual Studio Feedback System on 10/12/2019, 00:03 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39428</IssueID>
    <RepoID>1</RepoID>
    <Title>Change inline rename dialog to be more uniquely identifiable</Title>
    <Description>Change the AutomationId of Inline Rename to be uniquely identifiable. This is to aid screen readers who need to work specifically around the behavior of inline rename, which has an unfriendly focus model for screen readers. </Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39427</IssueID>
    <RepoID>1</RepoID>
    <Title>Debug exception hit in TryGetSpeculativeSemanticModel</Title>
    <Description>```
Message:
    System.InvalidOperationException :
   
  Stack Trace:
    ThrowingTraceListener.Fail(String message, String detailMessage) line 24
    TraceListener.Fail(String message)
    TraceInternal.Fail(String message)
    Debug.Assert(Boolean condition)
    MemberSemanticModel.GetRemappedSymbols() line 160
    SyntaxTreeSemanticModel.CreateSpeculativeAttributeSemanticModel(Int32 position, AttributeSyntax attribute, Binder binder, AliasSymbol aliasOpt, NamedTypeSymbol attributeType) line 746
    CSharpSemanticModel.TryGetSpeculativeSemanticModel(Int32 position, AttributeSyntax attribute, SemanticModel&amp; speculativeModel) line 2554
```

Repro can be found in test commited to [this branch](https://github.com/ryzngard/roslyn/tree/repro/compiler_getremappedsymbols_debug_throw)

cc @333fred </Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39426</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow user to restrict scope of namespace rename changes</Title>
    <Description>From https://developercommunity.visualstudio.com/content/problem/738117/renaming-namespace-changes-namespaces-in-irreleven.html (and see also https://github.com/dotnet/roslyn/issues/3583):

&gt; I have a xamarin forms solution with the following projects,
&gt; 
&gt; * Demo
&gt; * Demo.Android
&gt; * Demo.iOS
&gt; 
&gt; I changed the default namespace of Demo from options to Demo.UI, renamed the Demo csproj into Demo.UI, renamed the directory Demo to Demo.UI and updated the .sln file to access the Demo project (now Demo.UI).
&gt; 
&gt; Then I tried renaming the namespace in App.xaml.cs from Demo to Demo.UI, by right clicking on Demo namespace and chosing Rename. But this changed namespaces in other projects as well.
&gt; 
&gt; Ex: AppDelegate.cs in Demo.iOs’s namespace changed to “Demo.UI.iOS”</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39425</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler server test failed in CI (KeepAliveAfterSingleConnection)</Title>
    <Description>https://dev.azure.com/dnceng/public/_build/results?buildId=395678

```  Microsoft.CodeAnalysis.CompilerServer.UnitTests.CompilerServerApiTest.KeepAliveAfterSingleConnection [STARTING]
System.NullReferenceException: Referencia a objeto no establecida como instancia de un objeto.
   en Microsoft.CodeAnalysis.CompilerServer.UnitTests.Extensions.&lt;&gt;c__DisplayClass0_0.&lt;ToTask&gt;b__0(Object _, Boolean timedOut) en /_/src/Compilers/Server/VBCSCompilerTests/Extensions.cs:línea 26
   en System.Threading._ThreadPoolWaitOrTimerCallback.WaitOrTimerCallback_Context(Object state, Boolean timedOut)
   en System.Threading._ThreadPoolWaitOrTimerCallback.WaitOrTimerCallback_Context_f(Object state)
   en System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   en System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   en System.Threading._ThreadPoolWaitOrTimerCallback.PerformWaitOrTimerCallback(Object state, Boolean timedOut)
```</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39423</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8603 code fix should support default expressions and literals</Title>
    <Description>**Version Used**: 16.4 Preview 2

**Steps to Reproduce**:

```csharp
string Method1()
{
  return default(string);
}

string Method2()
{
  return default;
}
```

Apply a code fix on each `return` statement.

**Expected Behavior**:

```csharp
string? Method1()
{
  return default(string);
}

string? Method2()
{
  return default;
}
```

**Actual Behavior**:

No code fix is provided.
</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39422</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8603 code fix should support conditional access operator</Title>
    <Description>**Version Used**: 16.4 Preview 2

**Steps to Reproduce**:

```csharp
string Method(bool? value)
{
  return value?.ToString();
}
```

Apply a code fix for CS8603 on the conditional operator.

**Expected Behavior**:

```csharp
string? Method(bool? value)
{
  return value?.ToString();
}
```

**Actual Behavior**:

No code fix is provided.

📝 The code fix should use a unique Equivalence Key for this situation.</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39421</IssueID>
    <RepoID>1</RepoID>
    <Title>Use LangVersion 8 in tests rather than Preview</Title>
    <Description>
    </Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39420</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8603 code fix should support ternary expressions with explicit null</Title>
    <Description>**Version Used**: 16.4 Preview 2

**Steps to Reproduce**:

```csharp
string Method(bool value) {
  return value ? "text" : null;
}
```

Apply a code fix for CS8603 on the return statement.

**Expected Behavior**:

```csharp
string? Method(bool value) {
  return value ? "text" : null;
}
```

**Actual Behavior**:

No code fix is provided.</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39419</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove shortcircuit of status query for commands with handlers.</Title>
    <Description>Instead of intercepting QueryStatus in AbstractOleCommandTarget we will allow the request to bubble up for commands with command handlers.

fixes #39416</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39418</IssueID>
    <RepoID>1</RepoID>
    <Title>Visualizing Deferred Execution Calls in Visual Studio 2019</Title>
    <Description>I’d like to see somehow visualized in VS,  show the user that the line of code is “deferred execution”. Of course, this is done a lot in LINQ queries and other calls like AsParallel on a collection.
 
For example, doing collection.AsParallel() in a loop doesn’t do anything unless something comes after it like ForAll(). The same sort of idea for LINQ queries too. I am thinking that analyzers might be able to help with this too.

Not sure the best way to visualize this in Visual Studio 2019. Always willing to discuss.
</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39417</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8600: Should report on methods that returns ConfiguredTaskAwaitable</Title>
    <Description>**Version Used**: Visual Studio 2019 Version 16.3.5

**Steps to Reproduce**:

```csharp
static class TaskExtensions
{
    public static ConfiguredTaskAwaitable&lt;TResult&gt; NoSync&lt;TResult&gt;(this Task&lt;TResult&gt; task)
    {
        return task.ConfigureAwait(false);
    }
}

class Request
{
    public string? Name { get; }
    public Task&lt;string?&gt; GetName() =&gt; Task.FromResult(Name);
}

class Handler
{
    public async Task Handle(Request request)
    {
        string a = request.Name;    // &lt;-- CS8600
        string b = await request.GetName().ConfigureAwait(false);    // &lt;-- CS8600
        string c = await request.GetName().NoSync();    // &lt;-- No warning here
    }
}
```

**Expected Behavior**:
`CS8600` to be reported when using `NoSync` method extension.

**Actual Behavior**:
`CS8600` is not reported when using `NoSync` method extension.</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39416</IssueID>
    <RepoID>1</RepoID>
    <Title>Right-Click Remove and Sort Text Glitched</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784377/right-click-remove-and-sort-text-glitched.html)._

---
Right clicking in a C# file has the third entry reading &amp;quot;Remove and Sort&amp;quot; rather than &amp;quot;Remove and Sort **_Usings_&amp;quot;.**  Is this intentional?

---
### Original Comments

#### Visual Studio Feedback System on 10/21/2019, 02:06 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/21/2019, 10:16 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39415</IssueID>
    <RepoID>1</RepoID>
    <Title>BrowserHelper.GetHelpLink output is non-deterministic</Title>
    <Description>We use a new GUID per AppDomain. If this is actually needed it needs to be tied to a client session, for example.</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39414</IssueID>
    <RepoID>1</RepoID>
    <Title>EditorConfig user interface </Title>
    <Description>**Goal**:
Create a user interface to eliminate tension when configuring analyzer rules. This should also work for third-party analyzer packages.

**Current Behavior**:

1. Can configure the severity level of an analyzer through an EditorConfig file:
![image](https://user-images.githubusercontent.com/46729679/67224795-d9959f80-f3e6-11e9-9c75-67365d8004ac.png)

2. Can configure the severity level of an analyzer through the editor and error list:
![analyzer-severity](https://user-images.githubusercontent.com/46729679/67225134-81ab6880-f3e7-11e9-96f5-43f8ff82bc96.PNG)

3. Can configure the severity level of an analyzer through Tools Options:
![image](https://user-images.githubusercontent.com/46729679/67225663-7c9ae900-f3e8-11e9-865e-c7f16d2dbcea.png)

**Issues with current options**:

- It is difficult to configure naming conventions. 

- It is difficult to remember and understand the EditorConfig syntax.

- The current tools options UI is only for code style / IDE analyzers and should have one UI for every type of analyzer.

- The current tools options UI is hard to use without a search bar. 

- The current tools options UI has to be manually updated each time a new analyzer is created. 

**Expected Behavior**:

Have a dynamic EditorConfig settings UI similar to [VS Code’s Settings UI](https://code.visualstudio.com/docs/getstarted/settings):
![image](https://user-images.githubusercontent.com/46729679/67225850-c5eb3880-f3e8-11e9-93ec-29824ef4db46.png)

The EditorConfig settings UI should work for third party analyzers:
VS Code already supports this with extensions in their settings UI page by using [contribution points](https://code.visualstudio.com/api/references/contribution-points#contributes.commands). </Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39413</IssueID>
    <RepoID>1</RepoID>
    <Title>Using dynamic on macOS .NET Core 3 results in CS0656 Missing compiler required member </Title>
    <Description>**Version Used**: 
VS4MAC
Latest .NET 3.0, 3.3.1

**Steps to Reproduce**:

1. Create compilation passing dynamic as a parameter
``` C#
private string generateCalculatorClass(string className, string formula)
        {
            var calculator = @$"
                using DatasetCalcul;
                using System.Runtime;
                using System.Dynamic;
                using System.Collections.Generic;
                namespace DatasetCalcul
                {{
                    public  class {className}
                    {{
                        public void Perform(dynamic _)
                        {{
                            {formula}
                        }}
                    }}
                }}";
            return calculator;
        }
``` 
2. 
Compile like this for example...
``` C#
        private void CreateCompilation()
        {
            var syntaxTree = CSharpSyntaxTree.ParseText(_generatedCode,
                CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp8)
                .WithKind(SourceCodeKind.Regular));
            string assemblyName = Guid.NewGuid().ToString();
            var references = GetAssemblyReferences();
            var compilation = CSharpCompilation.Create(
                assemblyName,
                new[] { syntaxTree },
                references,
                new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
            _compilation = compilation;
        }

        private static IEnumerable&lt;MetadataReference&gt; GetAssemblyReferences()
        {
            var references = new MetadataReference[]
            {
                MetadataReference.CreateFromFile(typeof(object).GetTypeInfo().Assembly.Location),
                MetadataReference.CreateFromFile(typeof(Object).GetTypeInfo().Assembly.Location),
                MetadataReference.CreateFromFile(typeof(ExpandoObject).GetTypeInfo().Assembly.Location),
                MetadataReference.CreateFromFile(typeof(Dictionary&lt;string,object&gt;).GetTypeInfo().Assembly.Location),
                MetadataReference.CreateFromFile(Assembly.Load(new AssemblyName("Microsoft.CSharp")).Location)
                // A bit hacky, if you need it
                //MetadataReference.CreateFromFile(Path.Combine(typeof(object).GetTypeInfo().Assembly.Location, "..", "mscorlib.dll")),
            };
            return references;
        }

        private void CompileAndLoadAssembly()
        {
            using (var ms = new MemoryStream())
            {
                var result = _compilation.Emit(ms);
                ThrowExceptionIfCompilationFailure(result);
                ms.Seek(0, SeekOrigin.Begin);
                var assembly = System.Runtime.Loader.AssemblyLoadContext.Default.LoadFromStream(ms);
                _generatedAssembly = assembly;
            }
        }
```
3. Emit the compilation
``` C#
        public async Task&lt;object&gt; AddColumn(object instance, string name, string formula)
        {

            GenerateCode(name, formula);
            CreateCompilation();
            CompileAndLoadAssembly();

            var calculatorType = _generatedAssembly.GetType($"DatasetCalcul.{name}");
            var calculatorInstance = Activator.CreateInstance(calculatorType);
            var calculateMethod = calculatorType.GetTypeInfo().GetDeclaredMethod("Perform");
            var calculationResult = calculateMethod.Invoke(calculatorInstance, new object[] { instance });
            return instance;

        }
```


**Expected Behavior**:
Modification of passed dpyamic object instance.

**Actual Behavior**:
CS0656: Missing compiler required member 'Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo.Create
</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39412</IssueID>
    <RepoID>1</RepoID>
    <Title>Release/dev16.5 preview1</Title>
    <Description>NA</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39411</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect concatenation of localized string fragments</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/603108/incomprehensible-warning-german.html)._

---
I know that the localisation quality of Visual Studio is constantly decreasing. Now it sometimes reaches the point of total incomprehensibility (does that word exist?).

The warning in German reads &amp;quot;Erwartete Aufgabe wird zurückgegeben kein Wert.&amp;quot; See attached screenshot.

What is that warning trying to tell me? I don't get it.

If I try to translate this broken sentence into English, it might sound something like &amp;quot;Expected task is being returned, no value.&amp;quot; Do you know what that means?

Please tell your localisation team to do some work. And no, any kind of contextless automatic machine translation is the worst you can do. Really really bad. Machines don't have a clue what they're doing, but they're very certain about it!

---
### Original Comments

#### Visual Studio Feedback System on 6/12/2019, 02:03 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 6/12/2019, 02:20 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Visual Studio Feedback System on 8/7/2019, 02:35 PM: 

&lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: &lt;a target='_blank' href="https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq"&gt;https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq&lt;/a&gt;. In case you need answers to common questions or need assisted support, be sure to use &lt;a target='_blank' href="https://visualstudio.microsoft.com/vs/support/"&gt;https://visualstudio.microsoft.com/vs/support/&lt;/a&gt;. We’ll keep you posted on any updates to this feedback.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39410</IssueID>
    <RepoID>1</RepoID>
    <Title>Dialog asking to rename the class has inverted buttons</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784920/dialog-asking-to-rename-the-class-has-inverted-but.html)._

---
[regression] [worked-in:not sure the version]
When renaming a source file for a class in any C# project, Visual Studio asks to rename the type name as well.
Attached you can find the picture of the dialog box asking to rename the file.

Dialog text:
&amp;quot;You are renaming a file. Would you also like to perform a rename in this project of all references to the code element 'Class1'?&amp;quot;

If I press Yes, the rename operation is **NOT** done.
If I press No, the type is renamed.
The Yes and No actions are inverted.

Please restore the old, correct behavior

---
### Original Comments

#### Visual Studio Feedback System on 10/20/2019, 10:42 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39409</IssueID>
    <RepoID>1</RepoID>
    <Title>Question/Suggestion: Optimize nullable bool &amp; if check</Title>
    <Description>Hi Guys,

I was surprised to see that when we have bool? and need to check if it's true in if statement then doing it using just like:
```csharp
if (v == true)
{
}
```
works way slower than if we would explicitly do
```csharp
if (v.GetValueorDefault())
{
}
```


In the first case, when we call it like if (v == true) I see compiler emits an unnecessary call to the HasValue
```csharp
        bool? flag = v;
        bool flag2 = true;
        if ((flag.GetValueOrDefault() == flag2) &amp; flag.HasValue)
        {
        }
```

Is that something expected and made on purpose?
Here is a link to the SharpLab to demonstrate the difference in the generated assembler.


https://sharplab.io/#v2:C4LghgzgtgPgAgBgAQGUAWYBOAHAMmAIwDoAlAVwDtgBLKAUwG4BYAKDgCYBGV1uTgNiQckAYSQBvVkmlCBQgCxIAZggAUBAPYaANgH4kANwCUUmZJYzLSakqSqDRAOJ1gANTDaydAPKYAInRKYGTawKpGJhZW0ubR0XwAnKoARIQAxslGzFHRAL6m0vksBbKCcIpKnOpaeoaRlrFxNnYGSAC8bUjAmF71cY1xMokp6ZnZg0WWRblAA=
</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39408</IssueID>
    <RepoID>1</RepoID>
    <Title>Suggested LINQ refactoring is not correct</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/740980/suggested-linq-refactoring-is-not-correct.html)._

---
In WPF project
IDE Suggest to convert LINQ in follow code, but converted result is compile error

(WrapPanelMain is an instance of WrapPanel)
            foreach (var item in WrapPanelMain.Children)
            {
            }

---
### Original Comments

#### Visual Studio Feedback System on 9/20/2019, 01:31 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/17/2019, 04:54 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Ivan Basov [MSFT] on 10/18/2019, 11:55 AM: 

&lt;p&gt;Thank you for your feedback!&lt;/p&gt;
&lt;p&gt;I tried Convert To Linq with the following code:&lt;br&gt;
void Do(Panel panel, bool mode)&lt;br&gt;
{&lt;br&gt;
foreach(var item in panel.Children)&lt;br&gt;
{&lt;br&gt;
CheckBox ch = item as CheckBox;&lt;br&gt;
if (ch != null) ch.IsChecked = mode;&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;The converted foreach looks like the following one:&lt;br&gt;
foreach (var ch in from item in panel.Children&lt;br&gt;
let ch = item as CheckBox&lt;br&gt;
where ch != null&lt;br&gt;
select ch)&lt;br&gt;
{&lt;br&gt;
ch.IsChecked = mode;&lt;br&gt;
}&lt;br&gt;
which seems to be correct and he build succeeded. Could you please let us know what code is generated in you case?&lt;/p&gt;

#### Akira Kawamata on 10/19/2019, 00:34 AM: 

&lt;p&gt;In Visual Studio 16.3.5...&lt;/p&gt;&lt;p&gt;private void checkAllCommon(bool mode)&lt;br&gt;{&lt;br&gt;    foreach (var item in WrapPanelMain.Children)&lt;br&gt;    {&lt;br&gt;        CheckBox ch = item as CheckBox;&lt;br&gt;        if (ch != null) ch.IsChecked = mode;&lt;br&gt;    }&lt;br&gt;}&lt;/p&gt;&lt;p&gt; converted to...&lt;/p&gt;&lt;p&gt;private void checkAllCommon(bool mode)&lt;br&gt;{&lt;br&gt;    foreach (var ch in from item in WrapPanelMain.Children&lt;br&gt;                       let ch = item as CheckBox&lt;br&gt;                       where ch != null&lt;br&gt;                       select ch)&lt;br&gt;    {&lt;br&gt;        ch.IsChecked = mode;&lt;br&gt;    }&lt;br&gt;}&lt;/p&gt;&lt;p&gt; Error Message is...&lt;/p&gt;&lt;p&gt;エラー CS1934 ソース型 'UIElementCollection' のクエリ パターンの実装が見つかりませんでした。'Select' が見つかりません。範囲変数 'item'  の型を明示的に指定してください。 WpfApp3 C:\xdelme\WpfApp3\WpfApp3\MainWindow.xaml.cs 29 アクティブ&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>21/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39407</IssueID>
    <RepoID>1</RepoID>
    <Title>Update HideBaseCodeFixProvider to follow preferred modifier order</Title>
    <Description>To fit the default preferred order (IDE0036).

![image](https://user-images.githubusercontent.com/45985406/67158828-ca273f80-f36f-11e9-9d1d-c3eb6feef7a1.png)
![image](https://user-images.githubusercontent.com/45985406/67158831-d7dcc500-f36f-11e9-99cb-015db5e03054.png)</Description>
    <CreatedDate>20/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39406</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8321/IDE0051 false negative on recursive functions</Title>
    <Description>**Version Used**: Visual Studio 2019 Version 16.4

**Steps to Reproduce**:

```cs
class Program
{
    public static void Main()
    {
        int i;
        void Local(int _) =&gt; Local(i);

        static void StaticLocal() =&gt; StaticLocal();
    }

    private void Method() =&gt; this.Method();

    private static void StaticMethod() =&gt; StaticMethod();
}
```

**Expected Behavior**:

CS8321 is reported on `Local` and `StaticLocal`.
IDE0051 is reported on `Method` and `StaticMethod`.

**Actual Behavior**:

CS8321 is not reported on `Local` and `StaticLocal`.
IDE0051 is not reported on `Method` and `StaticMethod`.</Description>
    <CreatedDate>20/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39405</IssueID>
    <RepoID>1</RepoID>
    <Title>ChangedText.WithChanges crashes when new deletion larger than old</Title>
    <Description>Do we also need to handle the case where the new deletion is larger than the old? It looks like the following fails with or without this PR:
```C#
var original = SourceText.From("01234");
var change1 = original.WithChanges(new TextChange(new TextSpan(1, 3), "aa"));
var change2 = change1.WithChanges(new TextChange(new TextSpan(1, 3), "bb"));

var changes = change2.GetTextChanges(original);
Assert.Equal("0aa4", change1.ToString());
Assert.Equal("0bb", change2.ToString());
```
We can log a bug for this case and handle it separately.

_Originally posted by @cston in https://github.com/dotnet/roslyn/pull/39258_

/cc @ashmind</Description>
    <CreatedDate>20/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39404</IssueID>
    <RepoID>1</RepoID>
    <Title>Adding readonly modifier via quick fix deletes preceding blank line</Title>
    <Description>**Version Used**: 3.4.0-beta1 (and 3.3.0)

**Steps to Reproduce**:

```csharp
        const string c1 = "hi";
        const string c2 = "world";

        int x = 5;
```

1. Hover over `x`.
2. Lightbulb will appear. Click it.
3. Select "Add readonly modifier"

**Expected Behavior**:

```csharp
        const string c1 = "hi";
        const string c2 = "world";

        readonly int x = 5;
```

**Actual Behavior**:

```csharp
        const string c1 = "hi";
        const string c2 = "world";
        readonly int x = 5;
```

I'm curious if this is related to https://github.com/dotnet/roslyn/issues/36759 (which appears to be fixed via https://github.com/dotnet/roslyn/pull/36994).

_Originally reported via https://developercommunity.visualstudio.com/content/problem/703857/adding-readonly-modifer-via-altenter-delets-blank.html_
</Description>
    <CreatedDate>20/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39403</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39402</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39401</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion: support local language identifiers and en-us keywords</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/29938

Tests borrowed from https://github.com/dotnet/roslyn/pull/30391
Idea of implementation is suggested by @jasonmalinowski </Description>
    <CreatedDate>19/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39400</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/10/2019</CreatedDate>
    <ClosedDate>19/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39399</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/10/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39398</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/10/2019</CreatedDate>
    <ClosedDate>19/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39397</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up help link</Title>
    <Description>Removes ProjectType parameter from Bing help link query.
Adds `Language` property to `DiagnosticData` so that it doesn't need to be calculated from `ProjectId` and `Workspace` later.

Fixes perf issue tracked by: https://github.com/dotnet/roslyn/issues/26717
Fixes: https://github.com/dotnet/roslyn/issues/37722

Recommended to review each commit separately.</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39396</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix brace code style for switch expressions (fix for #36913)</Title>
    <Description>This fixes #36913 where `switch` expressions don't honor the user setting `NewLinesForBracesInControlBlocks`.

/cc @sharwell @CyrusNajmabadi </Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39395</IssueID>
    <RepoID>1</RepoID>
    <Title>Performance fix in analyzer driver for CFG based analyzers</Title>
    <Description>We expose public APIs on IOperation related analysis contexts to allow flow based analyzers to fetch ControlFlowGraph for the operation block. Additionally, the analyzer driver caches the CFGs for operation block (when first requested by some flow based analyzer) to allow sharing CFGs between flow based analyzers. However, we were holding onto these for the entire lifetime of the compilation. This change fixes that by removing the CFG entry once a particular operation block has been fully analyzed.

Fixes VSFeedback issue [#998181](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/998181)

Verified no performance regression in benchmarks:

1. Before this commit:
```
|                      Method | UnrollFactor |        Mean |    Error |   StdDev |      Median |         Min |         Max |       Gen 0 |      Gen 1 |     Gen 2 |  Allocated |
|---------------------------- |------------- |------------:|---------:|---------:|------------:|------------:|------------:|------------:|-----------:|----------:|-----------:|
|       CompileMethodsAndEmit |           16 |  4,950.5 ms | 26.68 ms | 24.96 ms |  4,942.9 ms |  4,912.7 ms |  4,996.9 ms |  83000.0000 | 24000.0000 |         - |  506.23 MB |
|           SerializeMetadata |           16 |    294.6 ms |  2.77 ms |  2.72 ms |    294.0 ms |    289.5 ms |    298.8 ms |   3000.0000 |  1000.0000 |         - |   33.21 MB |
|              GetDiagnostics |            1 |  3,661.5 ms | 15.32 ms | 12.79 ms |  3,659.7 ms |  3,642.0 ms |  3,679.7 ms |  78000.0000 | 21000.0000 |         - |  389.27 MB |
| GetDiagnosticsWithAnalyzers |            1 | 13,329.6 ms | 78.06 ms | 73.02 ms | 13,296.6 ms | 13,219.2 ms | 13,459.5 ms | 232000.0000 | 63000.0000 | 2000.0000 | 1399.55 MB |
```

2. After this commit:
```
|                      Method | UnrollFactor |        Mean |    Error |   StdDev |      Median |         Min |         Max |       Gen 0 |      Gen 1 |     Gen 2 |  Allocated |
|---------------------------- |------------- |------------:|---------:|---------:|------------:|------------:|------------:|------------:|-----------:|----------:|-----------:|
|       CompileMethodsAndEmit |           16 |  4,957.1 ms | 45.94 ms | 40.72 ms |  4,945.3 ms |  4,911.2 ms |  5,061.0 ms |  83000.0000 | 22000.0000 |         - |  506.41 MB |
|           SerializeMetadata |           16 |    289.0 ms |  3.66 ms | 10.02 ms |    287.8 ms |    273.5 ms |    318.1 ms |   3000.0000 |          - |         - |   33.21 MB |
|              GetDiagnostics |            1 |  3,659.9 ms | 14.19 ms | 12.57 ms |  3,656.7 ms |  3,644.3 ms |  3,686.5 ms |  78000.0000 | 21000.0000 |         - |  389.26 MB |
| GetDiagnosticsWithAnalyzers |            1 | 13,408.3 ms | 75.15 ms | 58.67 ms | 13,411.2 ms | 13,295.4 ms | 13,498.3 ms | 234000.0000 | 63000.0000 | 3000.0000 | 1409.24 MB |
```</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39394</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-use semantic model when attempting to compute suppress message att…</Title>
    <Description>…ribute based suppressions

Current implementation always creates a new semantic model for decoding local suppress message attributes (applied to each symbol). This change attempts to re-use the cached semantic models held by the analyzer driver to avoid rebinding cost.

Fixes VSFeedback issue [#973445](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/973445)

Verified no regression in perf benchmarks:

Before this change:
```
|                      Method | UnrollFactor |        Mean |     Error |    StdDev |      Median |         Min |         Max |       Gen 0 |      Gen 1 |     Gen 2 |  Allocated |
|---------------------------- |------------- |------------:|----------:|----------:|------------:|------------:|------------:|------------:|-----------:|----------:|-----------:|
|       CompileMethodsAndEmit |           16 |  4,857.7 ms |  10.11 ms |   7.89 ms |  4,859.1 ms |  4,841.8 ms |  4,868.6 ms |  83000.0000 | 24000.0000 |         - |  505.41 MB |
|           SerializeMetadata |           16 |    280.2 ms |   2.79 ms |   4.09 ms |    280.1 ms |    273.4 ms |    289.3 ms |   3000.0000 |  1000.0000 |         - |    33.2 MB |
|              GetDiagnostics |            1 |  3,580.0 ms |   6.14 ms |   5.13 ms |  3,580.2 ms |  3,572.5 ms |  3,592.2 ms |  78000.0000 | 22000.0000 |         - |  388.35 MB |
| GetDiagnosticsWithAnalyzers |            1 | 13,022.7 ms | 128.31 ms | 157.58 ms | 12,990.0 ms | 12,846.8 ms | 13,534.0 ms | 254000.0000 | 68000.0000 | 3000.0000 | 1523.64 MB |
```

After this change:
```
|                      Method | UnrollFactor |        Mean |    Error |   StdDev |      Median |         Min |         Max |       Gen 0 |      Gen 1 |     Gen 2 |  Allocated |
|---------------------------- |------------- |------------:|---------:|---------:|------------:|------------:|------------:|------------:|-----------:|----------:|-----------:|
|       CompileMethodsAndEmit |           16 |  4,864.4 ms | 33.31 ms | 31.15 ms |  4,850.4 ms |  4,836.0 ms |  4,928.2 ms |  83000.0000 | 22000.0000 |         - |   505.5 MB |
|           SerializeMetadata |           16 |    284.4 ms |  2.31 ms |  2.05 ms |    284.7 ms |    279.9 ms |    286.9 ms |   3000.0000 |          - |         - |   33.21 MB |
|              GetDiagnostics |            1 |  3,603.0 ms | 17.84 ms | 14.90 ms |  3,601.8 ms |  3,586.8 ms |  3,640.6 ms |  77000.0000 | 18000.0000 |         - |  388.32 MB |
| GetDiagnosticsWithAnalyzers |            1 | 13,003.7 ms | 68.14 ms | 63.74 ms | 13,002.5 ms | 12,857.8 ms | 13,124.9 ms | 255000.0000 | 68000.0000 | 3000.0000 | 1524.79 MB |
```</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39393</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix switch expression conversion creates broken code due to unspecific var return</Title>
    <Description>Fixes #38771 and fixes #39363 

Also changed the result of an existing test that seems to result in a compiler error.</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39392</IssueID>
    <RepoID>1</RepoID>
    <Title>Extern local functions</Title>
    <Description>
    </Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39391</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Intellisense: Disable most recently used members</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/741677/c-intellisense-disable-most-recently-used-members.html)._

---
I'd like to be able to disable this feature: https://docs.microsoft.com/en-us/visualstudio/ide/visual-csharp-intellisense?view=vs-2019#most-recently-used-members

If I have a type **DateTime** and a variable **dateTime** and I've _most recently_ typed **DateTime**, then typing **datet.. ** doesn't autocomplete to **dateTime** but **DateTime**.

Which ends up happening a lot eg:

&amp;gt;var dateTime = DateTime.Now;
&amp;gt;dateT [TAB] =&amp;gt; DateTime.

It's also mentioned here: https://stackoverflow.com/questions/43922535/autocomplete-case-issue

PLEASE let me turn this off. :)

---
### Original Comments

#### Visual Studio Feedback System on 9/22/2019, 07:52 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/17/2019, 04:56 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39390</IssueID>
    <RepoID>1</RepoID>
    <Title>Bad IL format from Memory Stream</Title>
    <Description>_From @lpeixotoo on Friday, October 18, 2019 12:51:39 AM_

# Bad IL format from Memory Stream

Hello guys,

I'm trying to run a basic compilation sample by 

- Compiling a source code;
- Emiting it into a memory stream;
- Loading and Invoking;

using a docker environment with:

- NET Core SDK (reflecting any global.json):
  Version:   3.0.100
 Commit:    04339c3a26
- Runtime Environment:
 OS Name:     ubuntu
 OS Version:  18.04
 OS Platform: Linux
 RID:         ubuntu.18.04-x64
 Base Path:   /usr/share/dotnet/sdk/3.0.100/

# General

I've based myself in this [article](https://joshvarty.com/2016/01/16/learn-roslyn-now-part-16-the-emit-api/).

A reproducible repository can be found [here](https://github.com/lpeixotoo/assembly-core).

## Sample Code

For a quick follow up, here's my code

```c#
using System;
using System.IO;                           
using System.Reflection;                   
using Microsoft.CodeAnalysis;              
using Microsoft.CodeAnalysis.CSharp;       
using Xunit;

namespace DotNetLib                        
{                                          
    public  class Lib                
    {                                      
                                           
        [Fact]                                   
        public int Compile()
        {                                  

           var tree = CSharpSyntaxTree.ParseText(@"
           using System;
           public class MyClass
           {
               public static void Main()
               {
                   Console.WriteLine(""Hello World!"");
               }
           }");
           
           var mscorlib = MetadataReference.CreateFromFile(typeof(object).Assembly.Location);
           var compilation = CSharpCompilation.Create("MyCompilation",
               syntaxTrees: new[] { tree }, references: new[] { mscorlib });
           
           //Emit to stream
           var ms = new MemoryStream();
           var emitResult = compilation.Emit(ms);

           //Load into currently running assembly. Normally we'd probably
           //want to do this in an AppDomain
           var ourAssembly = Assembly.Load(ms.GetBuffer());
           var type = ourAssembly.GetType("MyClass");
           
           //Invokes our main method and writes "Hello World" :)
           type.InvokeMember("Main", BindingFlags.Default | BindingFlags.InvokeMethod, null, null, null);
 	       return 0;                          
        }
    }                                      
}

```

Am i doing something wrong?




_Copied from original issue: dotnet/core#3654_</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39389</IssueID>
    <RepoID>1</RepoID>
    <Title>ProjectExternalErrorReporter: Avoid subscribing to solution build events multiple times and leaking the object</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1002916</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>19/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39388</IssueID>
    <RepoID>1</RepoID>
    <Title>Lots of code refactoring providers crashes when entering [ before a function argument.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/778350/lots-of-code-refactoring-providers-crashes-when-en.html)._

---
The following refactoring providers crashes when I try to type a `[` before a function argument with almost the same stacktrace:

- **ReplacePropertyWithMethodsCodeRefactoringProvider**
- **ReplaceMethodWithPropertyCodeRefactoringProvider**
- **CSharpIntroduceUsingStatementCodeRefactoringProvider**
- **CSharpConvertAnonymousTypeToClassCodeRefactoringProvider**
- **CSharpInitializeMemberFromParameterCodeRefactoringProvider**
- **CSharpAddParameterCheckCodeRefactoringProvider**

Stacktrace (I just put one as an example since all are the same down to `at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContextExtensions.TryGetRelevantNodeAsync[TSyntaxNode](&amp;lt;Unknown Parameters&amp;gt;)`:

```
System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.
Parameter name: position
   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)
   at Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.GetInitialToken(SyntaxNode root,Int32 position,Boolean includeSkipped,Boolean includeDirectives,Boolean includeDocumentationComments)
   at Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.FindTokenOnRightOfPosition(SyntaxNode root,Int32 position,Boolean includeSkipped,Boolean includeDirectives,Boolean includeDocumentationComments)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSyntaxFactsService.GetStartOfNodeExcludingAttributes(SyntaxNode node)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSyntaxFactsService.IsOnHeader[THoleSyntax](Int32 position,SyntaxNode ownerOfHeader,SyntaxNodeOrToken lastTokenOrNodeOfHeader,ImmutableArray`1 holes)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSyntaxFactsService.IsOnHeader(Int32 position,SyntaxNode ownerOfHeader,SyntaxNodeOrToken lastTokenOrNodeOfHeader)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxFactsService.IsOnParameterHeader(SyntaxNode root,Int32 position,SyntaxNode&amp;amp; parameter)
   at Microsoft.CodeAnalysis.CodeRefactorings.AbstractRefactoringHelpersService`2. &amp;lt;ExtractNodesInHeader&amp;gt;d__7.MoveNext()
   at System.Linq.Enumerable. &amp;lt;OfTypeIterator&amp;gt;d__95`1.MoveNext()
   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()
   at Microsoft.CodeAnalysis.CodeRefactorings.AbstractRefactoringHelpersService`2.AddNonHiddenCorrectTypeNodes[TSyntaxNode](IEnumerable`1 nodes,ArrayBuilder`1 resultBuilder,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.CodeRefactorings.AbstractRefactoringHelpersService`2.GetRelevantNodesAsync[TExpressionSyntax,TArgumentSyntax,TSyntaxNode](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContextExtensions.GetRelevantNodesAsync[TSyntaxNode](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContextExtensions.TryGetRelevantNodeAsync[TSyntaxNode](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.ReplacePropertyWithMethods.AbstractReplacePropertyWithMethodsService`5.GetPropertyDeclarationAsync[TIdentifierNameSyntax,TExpressionSyntax,TCrefSyntax,TStatementSyntax,TPropertySyntax]( &amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.ReplacePropertyWithMethods.ReplacePropertyWithMethodsCodeRefactoringProvider.ComputeRefactoringsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

---
### Original Comments

#### Visual Studio Feedback System on 10/15/2019, 11:25 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/18/2019, 09:43 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>23/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39387</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39386</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39385</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39384</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39383</IssueID>
    <RepoID>1</RepoID>
    <Title>How to use Span&lt;T&gt; in Interactive Window ?</Title>
    <Description>**Version Used**: 
`VS2017 15.9.17`

**Steps to Reproduce**:

1. Project install NuGet package `System.Memory`
2. Initialize interactive with project
3. Type `new byte[] { 1, 2, 3 }.AsSpan().ToArray()` then Enter

**Expected Behavior**:
Ouput an array

**Actual Behavior**:

无法加载引用程序集来执行。
  + Span&lt;T&gt;..ctor(T[])
  + System.MemoryExtensions.AsSpan&lt;T&gt;(T[])

![image](https://user-images.githubusercontent.com/4510984/67086252-e5107d00-f1d2-11e9-9367-6a8f6a62c632.png)
</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39382</IssueID>
    <RepoID>1</RepoID>
    <Title>Undoing "Move type" in a SDK-style project does not remove the added class</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1.  Create a  new  C# Console App (.NET Core) with the following in Program.cs:
```
using System;

namespace ConsoleApp101
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }

    class Bar
    {
    }

}

``` 
3. CTRL+. on `Bar` and choose Move type to "Bar.cs"
4. CTRL+Z to undo

**Expected Behavior**:
For the newly added file to removed

**Actual Behavior**:
Actual, the newly added file is not removed. 

In .NET Framework legacy based projects, it is.

//cc @ryzngard </Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39381</IssueID>
    <RepoID>1</RepoID>
    <Title>Variable suggestions show duplicated filter buttons on completion window</Title>
    <Description>Not sure I understand what these filters do, the have the same tooltip:

![image](https://user-images.githubusercontent.com/1103906/67065886-bc30bd80-f1bb-11e9-8cec-1daabb8b1022.png)
</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39380</IssueID>
    <RepoID>1</RepoID>
    <Title>Configure/Suppress code fixes are duplicated if the same issue exists on the same line</Title>
    <Description>When you have the same issue on the same line, Configure/Suppress code fixes get duplicated for each issue. These 6 menus items should be collapsed into 3 menu items:

![image](https://user-images.githubusercontent.com/1103906/67060090-4ae70f80-f1a7-11e9-8e78-824841759fc6.png)
</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39379</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39378</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39377</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39376</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39375</IssueID>
    <RepoID>1</RepoID>
    <Title>Find References doesnt show implicit cast operator reference</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/729263/find-references-doesnt-show-implicit-cast-operator.html)._

---
When class contains implicit cast operator , it's reference is not shown .

---
### Original Comments

#### Visual Studio Feedback System on 9/11/2019, 03:33 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39374</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor error</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/728995/refactor-error-1.html)._

---
I have this code

```
        Private Function HaveCalculationModeSetToInterpolation(ValidatedItem As Model.Form, value As String) As Boolean  
            Try  
                Dim r As New Stimulsoft.Report.StiReport  
                r.LoadFromString(value)  
                Return r.CalculationMode = Stimulsoft.Report.StiCalculationMode.Interpretation  
            Catch ex As Exception  
                Return False  
            End Try  
        End Function
```
trying to introduce using statement on the r variable causes this error

```
System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax' to type 'Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax'.  
   at Microsoft.CodeAnalysis.IntroduceUsingStatement.AbstractIntroduceUsingStatementCodeRefactoringProvider`2.FindSiblingStatementContainingLastUsage(TStatementSyntax declarationSyntax,ILocalSymbol localVariable,SemanticModel semanticModel,ISyntaxFactsService syntaxFactsService,CancellationToken cancellationToken)  
   at Microsoft.CodeAnalysis.IntroduceUsingStatement.AbstractIntroduceUsingStatementCodeRefactoringProvider`2.GetStatementsToSurround(TLocalDeclarationSyntax declarationStatement,ILocalSymbol localVariable,SemanticModel semanticModel,ISyntaxFactsService syntaxFactsService,CancellationToken cancellationToken)  
   at async Microsoft.CodeAnalysis.IntroduceUsingStatement.AbstractIntroduceUsingStatementCodeRefactoringProvider`2.IntroduceUsingStatementAsync[TStatementSyntax,TLocalDeclarationSyntax](&amp;lt;Unknown Parameters&amp;gt;)  
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&amp;lt;Unknown Parameters&amp;gt;)  
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)  
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)  
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&amp;lt;Unknown Parameters&amp;gt;)  
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&amp;lt;&amp;gt;c__DisplayClass11_0. &amp;lt;GetPreviewAsync&amp;gt;b__0(&amp;lt;Unknown Parameters&amp;gt;)  
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&amp;lt;Unknown Parameters&amp;gt;)
```

---
### Original Comments

#### Visual Studio Feedback System on 9/10/2019, 05:13 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39373</IssueID>
    <RepoID>1</RepoID>
    <Title>Minor using decl fixes</Title>
    <Description>Some minor cleanup for using declarations

Fixes https://github.com/dotnet/roslyn/issues/28892
Fixes https://github.com/dotnet/roslyn/issues/32318</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39372</IssueID>
    <RepoID>1</RepoID>
    <Title>UsingStatement should put the statement in a member body before parsing</Title>
    <Description>I found that writing parsing tests via `UsingStatement()` instead of `UsingTree()` can miss bugs because the test will not check `LanguageParser.IsPossibleStatement` (and probably other checks) before trying to parse. When the statement appears in real code (i.e. in a member body), the parser kicks out on parsing the statement, probably because it guesses that the user forgot a closing brace on the block body.

We should either change UsingStatement to more closely mimic the context that `ParseStatementCore` is called in, or just make UsingStatement put the statement in a simple member body before parsing so that these kinds of bugs can be caught more easily.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39371</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable test, passing as expected</Title>
    <Description>
    </Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39370</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove dedicated tuple type symbol</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/20648</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39369</IssueID>
    <RepoID>1</RepoID>
    <Title>MonoGlobalAssemblyCache: faster resolves + resolve facade assemblies</Title>
    <Description>
### Summary

Overall this PR improves assembly resolution in `csi` when running on Mono by resolving facade assemblies like `netstandard.dll`. It also employs a few tricks to reduce resolution time (~4.5x faster according to `Stopwatch` on my machine across 50 iterations before and after).

### Details

1. Don't special case `mscorlib.dll` - we already will have a reference to it, and the changes in (2) allow it to still resolve. Remove `GetCorlibPaths`.

2. Have `GetCacAssemblyPaths` bail early if it finds an assembly that lives alongside `mscorlib.dll`, or in the `Facades` directory. This These assemblies in Mono are considered "core" and will always symlink directly to the GAC. Resolve facade assemblies as well now. The Mono distribution of `csi` has shipped with a response file that explicitly referenced `Facades/netstandard.dll` and `Facades/System.Runtime.dll` and this change obsoletes that. As a consequence, local builds of `csi.exe` now work.

3. Minor perf work around converting a public key token to a string by deferring that conversion until only necessary, and use `byte.ToString` instead of `StringBuilder.AppendFormat`. Also use a `PooledStringBuilder`.

4. `Tuple` → `ValueTuple`</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39368</IssueID>
    <RepoID>1</RepoID>
    <Title>Design proposal: C# Editor Settings UI, delimiters spacing, simplification (low priority)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/775024/design-proposal-c-editor-settings-ui-delimiters-sp.html)._

---
For your consideration,

The current Editor Settings UI for spacing could be improved. These settings are split into two, usually disjunct due to lexicographical sorting, settings -- one for &amp;quot;before&amp;quot; and one for &amp;quot;after&amp;quot; -- using checkboxes. This is f.ex. breaking semantical (and syntactical) locality.

Proposal:
Convert to 4-state combobox settings.
- Space before
- Space after
- None
- Both

Pros:
- It could clean up the UI. F.ex. semantical locality would be preserved.
- It could reclaim vertical space.
- It could clean up the code (one single implementation of applicable choices).
- It could simplify documentation of the settings.
- It would simplify localization. Each setting would require one single localization string; the choices would be common for all consumers of the combobox.

Cons:
- Would possibly require redesign/implementation of columnar settings list.

Example in attached mockup image. I am not a graphical artist. Wording in the png is equally for expository purposes only. It is purely to present the concept.

Proposal intentionally limited to delimiter spacing, and C#. There are likely other settings groups that could benefit from similar multi-state common ancestry, common even across editors/languages.

---
### Original Comments

#### Jane Wu [MSFT] on 10/13/2019, 07:39 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39367</IssueID>
    <RepoID>1</RepoID>
    <Title>VS2019 Enhanced colors - add static methods</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/753037/vs2019-enhanced-colors-add-static-methods.html)._

---
&lt;p&gt;Hi,&lt;/p&gt;&lt;p&gt;Please add static methods to the list of things that can get enhanced colors. The Enhanced Syntax Highlighting extension has this, and it would be great to have it built in. Thanks.&lt;/p&gt;

---
### Original Comments

#### Fiona Niu[MSFT] on 9/29/2019, 01:07 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39366</IssueID>
    <RepoID>1</RepoID>
    <Title>QuickInfo cut off in 16.4p2</Title>
    <Description>![image](https://user-images.githubusercontent.com/4564579/67043125-2f640200-f0de-11e9-99d6-139f106918e8.png)

That's the quick info for:

```c#
        //
        // Summary:
        //     Gets the TValue associated with the specified key.
        //
        // Parameters:
        //   key:
        //     The type of the key.
        //
        // Returns:
        //     The value associated with the specified key. If no results are found, the operation
        //     throws an exception.
```

Note the cutoff after "If no..."</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39365</IssueID>
    <RepoID>1</RepoID>
    <Title>Add test for #34921</Title>
    <Description>Adds a missing test to cover #34921 

Fixes #34921</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39364</IssueID>
    <RepoID>1</RepoID>
    <Title>Code Actions fail to show up 100% of the time after upgrading to 16.4p2</Title>
    <Description>It just hangs here forever:

![image](https://user-images.githubusercontent.com/4564579/67041599-d21a8180-f0da-11e9-89e7-91cec90e62e6.png)

I have submitted an issue using VS feedback with `@sharwell` in the title of it.  </Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39363</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0047 Remove unnecessary parentheses fails to appear for switch expressions</Title>
    <Description>**Version Used**: 16.4.0 P1

**Steps to Reproduce**:
1. Have a switch expression that contains unnecessary parentheses.
2. Pull up code fixes menu.

![switchbug](https://user-images.githubusercontent.com/16968319/67036612-c88c1c00-f0d0-11e9-8f15-333bcb19aabc.png)

![switchbug2](https://user-images.githubusercontent.com/16968319/67036734-fcffd800-f0d0-11e9-80df-067aaa6700e7.png)

**Expected Behavior**: Code fix option IDE0047 appears to remove unnecessary parentheses.

**Actual Behavior**: No code fix shown. IDE0047 does appear for the local variable declaration on line 16, so this seems to be an issue specific to switch expressions.
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39362</IssueID>
    <RepoID>1</RepoID>
    <Title>'CS8602 Dereference of a possibly null reference' in a local function</Title>
    <Description>**Version Used**: New in VS 16.4p2, not present in 16.4p1 or 16.3.5

The local function is never called from a point where `value` might be null:

```cs
class C
{
    void M()
    {
        string? value = null;
        value = "Hi";

        LocalFunction();

        void LocalFunction()
        {
            // CS8602 Dereference of a possibly null reference.
            // ↓
            value.ToString();
        }
    }
}
```
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39361</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect 'CS8629 Nullable value type may be null' on implicitly-cast operand of lifted operator</Title>
    <Description>**Version Used**: New in VS 16.4p2, not present in 16.4p1 or 16.3.5

No warning should be shown because the operator is lifted and therefore expects nulls:

```cs
#nullable enable

struct Foo
{
    public static implicit operator DateTime?(Foo? value) =&gt; default;

    bool M(Foo? x, DateTime y)
    {
        // CS8629 Nullable value type may be null.
        //     ↓
        return x == y;
    }
}
```

The other operators also trigger this bug.
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39360</IssueID>
    <RepoID>1</RepoID>
    <Title>Task List (C#), find "TODO" etc even when in para's</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/768827/task-list-c-find-todo-etc-even-when-in-paras.html)._

---
Place the following code in a .cs file (that's in a project).

Open the &amp;quot;Task List&amp;quot; view.

Expected: TODO 1-5 listed.

Actual: Only TODO 1,3,5 listed.

Since this may be an intentional limitation, I post this as a suggestion to reconsider that design decision, and fix it to work as expected. In case this behavior is as unexpected to Microsoft as it is to us, feel free to move it to the Bugs section.

```
class RFE_TaskListCommentsEvenWhenInPara
{
  /// &amp;lt;summary&amp;gt;
  /// some text, followed by para, since these comment blocks don't handle br - Bad Design(tm).
  /// TODO: 1. This comment in summary will visible in the Task List view.
  /// &amp;lt;para&amp;gt;TODO: 2. This comment in para in summary should also be visible in the Task List view.&amp;lt;/para&amp;gt;
  /// &amp;lt;/summary&amp;gt;
  /// &amp;lt;remarks&amp;gt;
  /// TODO: 3. This comment in remarks summary will visible in the Task List view.
  /// &amp;lt;para&amp;gt;TODO: 4. This comment in para in remarks should also be visible in the Task List view.&amp;lt;/para&amp;gt;
  /// &amp;lt;/remarks&amp;gt;
  void tst()
  {
    // TODO: 5. This comment in method will be visible in the Task List view.
  }
}
```

---
### Original Comments

#### Jane Wu [MSFT] on 10/10/2019, 00:14 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39358</IssueID>
    <RepoID>1</RepoID>
    <Title>RFE: C# analyzer/refactoring for implicit bool conversion types</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/771012/rfe-c-analyzerrefactoring-for-implicit-bool-conver.html)._

---
I won't comment on neither the suitability nor the sanity of the following example.
Suffice it to say it is a boiled down representation of a very widespread existing library, meaning the interface is in fact carved in stone.
```
// C#
class RFE_AutoBoolDeduction
{
  class foo
  {
    public static implicit operator bool(foo f) { return true; }
  }
  void tst(foo f)
  {
    // expected:
    //  1. &amp;quot;(bool)&amp;quot; getting &amp;quot;dimmed&amp;quot; to display it's redundant (whether or not prepended by a negation operator),
    //  2. refactoring (&amp;quot;lightbulb&amp;quot;) to remove it
    // actual: *crickets*
    if (!( bool)f)
    {
    }
  }
}
```

---
### Original Comments

#### Jane Wu [MSFT] on 10/10/2019, 11:49 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39359</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyze solution with WPF projects - MSBuildWorkspace</Title>
    <Description>**Version Used**: VS 2017, 

**Steps to Reproduce**:
Added binding redirect to config file
```
&lt;dependentAssembly&gt;
        &lt;assemblyIdentity name="Microsoft.Build" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" /&gt;
        &lt;bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" /&gt;
    &lt;/dependentAssembly&gt;
```

 ```
var properties = new Dictionary&lt;string, string&gt;() {                                 
                                    { "DesignTimeBuild", "true" },
                                    { "BuildingInsideVisualStudio", "true" }
                                };
var sourceCodePath = "path to wpf project";
var msBuildWorkSpace = MSBuildWorkspace.Create(properties);
var solution = msBuildWorkSpace.OpenSolutionAsync(sourceCodePath).Result;
foreach (Microsoft.CodeAnalysis.Project project in solution.Projects)
{
  var projectCompilation = solution.GetProject(project.Id).GetCompilationAsync().Result;
}

```
project compilation fails with this error "error CS5001: Program does not contain a static 'Main' method suitable for an entry point"

**Expected Behavior**:
No compilation errors.
**Actual Behavior**:
error CS5001: Program does not contain a static 'Main' method suitable for an entry point</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39357</IssueID>
    <RepoID>1</RepoID>
    <Title>RFE: C# refactoring preview, add user-setting 'Preview Delay'</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/771202/rfe-c-refactoring-preview-add-user-setting-preview.html)._

---
Scenario:
When engaging refactoring on a large code block, the refactoring preview can consume quite a lot of time (multiple seconds) to preview the refactoring. This can (and do) become a problem in multiple scenarios, f.ex.
- if you are seasoned, or just fast, and know exactly what the refactoring will do.
- if you are not interested in the default refactoring at all, but are now held waiting for several seconds, perhaps for each option, to scroll down to the actual refactoring you are after
- the &amp;quot;jerkyness&amp;quot; introduced by all these delays can make you unintentionally engage the wrong refactoring when using keyboard to scroll in a list (say 10 in total, and you want to get to entry 5). This is not a hypothesis, this is a fact I have myself experienced, and been hurt by, multiple times (more than a few hundred).
- ...

Suggestion:
Add a setting
- Delay Time (ms) until preview is generated.

It could be set to a default of zero, to keep current behaviour, while allowing more seasoned users to turn it up to prevent this delay/these delays.

It could (maybe even should?) also allow a timeout of -1, meaning it would never automatically pop up the preview, but instead display a prompt for input generate and display the preview (for the selected refactoring).

Sidenote:
An optional setting &amp;quot;Delay Threshold (min # of lines affected)&amp;quot; could at first blush seem like logical too, but it's obviously impossible for the editor to know how many lines a specific refactoring will affect, so that's a No.

---
### Original Comments

#### Jane Wu [MSFT] on 10/10/2019, 11:49 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39356</IssueID>
    <RepoID>1</RepoID>
    <Title>RFE: (C# only?) Make Rename progress dialog less greedy of system interaction with "parent" frame window</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/774480/rfe-c-only-make-rename-progress-dialog-less-greedy.html)._

---
Problem:
When doing a refactoring rename operation, especially noticable in C# if you rename a namespace, it can take a _long_ time (we're talking minutes, which for even larger projects can probably become both hours and days).
During this time, the Visual Studio Frame window is completely unresponsive, making it impossible for user to interact with to the point it can't even be minimized to get it out of the way.

Suggestion:
Make the Rename progress dialog Task less UI-greedy. Allow interaction with normal system-provided (frame-) window operations; especially minimize.

---
### Original Comments

#### Jane Wu [MSFT] on 10/12/2019, 00:00 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39355</IssueID>
    <RepoID>1</RepoID>
    <Title>Add switch-case collapse</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/776275/add-switch-case-collapse.html)._

---
&amp;quot;switch&amp;quot; already has it, might as well add to &amp;quot;case&amp;quot;. Having to type #region is kind of annoying.

---
### Original Comments

#### Jane Wu [MSFT] on 10/14/2019, 07:53 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39354</IssueID>
    <RepoID>1</RepoID>
    <Title>version with wildcards and determinism - AssemblyInfo.cs</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/777498/version-with-wildcards-and-determinism-assemblyinf.html)._

---
Hello, 

I have a sugestion:
update the message 
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion(&amp;quot;1.0.*&amp;quot;)]
// **and set the &amp;lt;Determinism&amp;gt;false&amp;lt;/Determinism&amp;gt; in project file as shown below:**
&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;Configuration Condition=&amp;quot; '$(Configuration)' == '' &amp;quot;&amp;gt;Debug&amp;lt;/Configuration&amp;gt;
    &amp;lt;Platform Condition=&amp;quot; '$(Platform)' == '' &amp;quot;&amp;gt;AnyCPU&amp;lt;/Platform&amp;gt;
    &amp;lt;ProjectGuid&amp;gt;{559EFE43-8D23-4FEE-A9E6-A2D70AB5C855}&amp;lt;/ProjectGuid&amp;gt;
    &amp;lt;OutputType&amp;gt;Library&amp;lt;/OutputType&amp;gt;
    &amp;lt;AppDesignerFolder&amp;gt;Properties&amp;lt;/AppDesignerFolder&amp;gt;
    &amp;lt;RootNamespace&amp;gt;DataAccess&amp;lt;/RootNamespace&amp;gt;
    &amp;lt;AssemblyName&amp;gt;DataAccess&amp;lt;/AssemblyName&amp;gt;
    &amp;lt;TargetFrameworkVersion&amp;gt;v4.7.2&amp;lt;/TargetFrameworkVersion&amp;gt;
    &amp;lt;FileAlignment&amp;gt;512&amp;lt;/FileAlignment&amp;gt;
//    **&amp;lt;Deterministic&amp;gt;false&amp;lt;/Deterministic&amp;gt;**
  &amp;lt;/PropertyGroup&amp;gt;

This will avoid the error message:
Error	CS8357	The specified version string contains wildcards, which are not compatible with determinism.
 Either remove wildcards from the version string, or disable determinism for this compilation	
DataAccess	C:\Users\anton\source\repos\OperatorNotificationSystem\DataAccess\Properties\AssemblyInfo.cs	35	Active

thanks,

Antonio Herrero Lopes

---
### Original Comments

#### Jane Wu [MSFT] on 10/15/2019, 07:27 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39353</IssueID>
    <RepoID>1</RepoID>
    <Title>Add warning if generic type passed to OfType cannot possibly match</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/776488/add-warning-if-generic-type-passed-to-oftype-canno.html)._

---
In code like this:

ICollection&amp;lt;TypeA&amp;gt; collection;
collection. OfType&amp;lt;TypeB&amp;gt;()

If TypeA is not assignable from TypeB, then the compiler should show a warning. I know OfType is an extension method and its behavior does not require any such constraint, but surely its purpose is defeated if that's not the case. There is already a precedent for this warning, when, for example &amp;quot;TypeA as TypeB&amp;quot; would be an impossible cast.

---
### Original Comments

#### Jane Wu [MSFT] on 10/14/2019, 07:52 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39352</IssueID>
    <RepoID>1</RepoID>
    <Title>Highlight same code entity in multiple files.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/780549/highlight-same-code-entity-in-multiple-files.html)._

---
When I select variable, function or any other code entity it is highlighred everywhere in the file, and it is very convenient.
Unfortunately when I create multiple Tab Groups and have multiple files side by side highliting is not working across files.

For example, when I select class name in one file same name is not highlighted in the other file.

---
### Original Comments

#### Jane Wu [MSFT] on 10/16/2019, 08:27 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39351</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn Formatter adds newline following block comment</Title>
    <Description>Originally reported - https://github.com/dotnet/format/issues/362

In a C# project, create a file named Test.cs

**Test.cs**
```csharp
using System;

/**/
```

Ensure there is no newline following the block comment and invoke the formatter (Ctrl+K+D). 

*Expected Result*

No change to the file.

*Actual Result*

There is now a newline following the block comment.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39350</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch expression that returns lambda crashes VS right after typing open brace</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/761865/switch-expression-that-returns-lambda-crashes-vs-r.html)._

---
&lt;p&gt;Paste following code to crash VS:&lt;br&gt;
&lt;code&gt;var x = ((Func&amp;lt;int, decimal&amp;gt;)(0 switch { 0 =&amp;gt; _ =&amp;gt; {}}))(0);&lt;/code&gt;&lt;/p&gt;

---
### Original Comments

#### Visual Studio Feedback System on 10/7/2019, 01:08 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/8/2019, 02:45 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Visual Studio Feedback System on 10/9/2019, 11:22 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39349</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39348</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39347</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39346</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39345</IssueID>
    <RepoID>1</RepoID>
    <Title>"Make field readonly" doesn't consider designer writes</Title>
    <Description>**Version Used**: Version 16.4.0 Preview 3.0 [29416.158.master]

**Steps to Reproduce**:

## `C.cs`

```c#
partial class C
{
    private object _foo; // IDE0044 Add readonly modifier

    public C()
    {
        _foo = new object();
    }

    public int O() =&gt; _foo.GetHashCode();
}
```

## `C.Designer.cs`

```c#
partial class C
{
    void M()
    {
        _foo = null;
    }
}
```

**Expected Behavior**:

Do not suggest adding `readonly` modifier when field has writes from designer files.

**Actual Behavior**:

Adding `readonly` is suggested.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39344</IssueID>
    <RepoID>1</RepoID>
    <Title>"Remove redundant assignment" can break code logic</Title>
    <Description>**Version Used**: Version 16.4.0 Preview 3.0 [29416.158.master]

**Steps to Reproduce**:

```c#
void M(int i)
{
    bool b = false;
    try
    {
        if (i == 0)
        {
            b = true; // IDE0059 Unnecessary assignment of a value
        }
    }
    finally
    {
        if (!b)
        {
            Console.WriteLine("Exception");
        }
    }
}
```

**Expected Behavior**:

Does not remove assignment to `b`.

**Actual Behavior**:

Removes assignment to `b`.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39342</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix var being treated as unknown type</Title>
    <Description>Closes #38947

Still working out a couple things on this one. Advice is very much appreciated, especially on some of the specifics on how you guys want this implemented, but I think I got the general idea down.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39341</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC: Compare document content before performing IO while stepping</Title>
    <Description>Avoid IO during stepping unless a source file is modified. Stepping currently blocks the UI thread. Even if the debugger made stepping completely asynchronous it is desirable that it's as fast as possible in the common case when no files are modified.

Addresses perf regression observed in RPS [958005](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/958005) and PerfWatson [979191](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/979191).


</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39339</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39338</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39337</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39336</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39335</IssueID>
    <RepoID>1</RepoID>
    <Title>Use ConstructWithNullability in InferTypeInAwaitExpression</Title>
    <Description>The inferred type may include nullability information, and will fail to be recognized as a symbol without using the correct construct call. 

Fixes #39333 </Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39334</IssueID>
    <RepoID>1</RepoID>
    <Title>follow up for Go to base: support metadata references and bug fixes</Title>
    <Description>Addressing feedback at https://github.com/dotnet/roslyn/pull/39055#pullrequestreview-302246824</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39333</IssueID>
    <RepoID>1</RepoID>
    <Title>VB.NET Return Await causes code fix providers to crash in 16.3.4</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/776481/vbnet-return-await-causes-code-fix-providers-to-cr.html)._

---
I am able to reproduce in a new VB.NET console application targetting .NET Framework 4.7.2, and typing the following into the default Module1.vb module - how fast you type varies when exactly the errors show.  This seems to be triggered by `Return Await`, since just `Return something` doesn't seem to cause the errors.

```
Module Module1

    Sub Main()

    End Sub

End Module

Class Testing

    Private Async Function WaitForIt() As Task(Of Boolean)
        Return Await tas  '&amp;lt;-- crashes here, was starting to type Task.Delay(1000)
    End Function

End Class
```

I first see an exception message at the top:

An exception of type ArgumentException has been encountered.  This may be cause by an extension.

Log file attached for that.  Then several code fix providers crash.

'GenerateParameterizedMemberCodeFixProvider' encountered an error and has been disabled.
'VisualBasicGenerateVariableCodeFixProvider' encountered an error and has been disabled.
'VisualBasicSpellCheckCodeFixProvider' encountered an error and has been disabled.

Stack traces in the order listed above...

```
System.ArgumentException : Not a VB symbol.
Parameter name: typeArguments
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SymbolExtensions.EnsureVbSymbolOrNothing[TSource,TDestination](TSource symbol,String paramName)
   at Microsoft.CodeAnalysis.VisualBasic.Symbol.ConstructTypeArguments(ITypeSymbol[] typeArguments)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol.INamedTypeSymbol_Construct(ITypeSymbol[] typeArguments)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicTypeInferenceService.TypeInferrer._Closure$__19-0._Lambda$__0(TypeInferenceInfo t)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()
   at System.Linq.Enumerable.&amp;lt;DistinctIterator&amp;gt;d__64`1.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at System.Collections.Immutable.ImmutableArray.CreateRange[T](IEnumerable`1 items)
   at System.Collections.Immutable.ImmutableArray.ToImmutableArray[TSource](IEnumerable`1 items)
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService.AbstractTypeInferrer.Filter(IEnumerable`1 types,Boolean filterUnusable)
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService.AbstractTypeInferrer.InferTypes(SyntaxNode expression,Boolean filterUnusable)
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService.InferTypes(SemanticModel semanticModel,SyntaxNode expression,String nameOpt,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Shared.Extensions.ITypeInferenceServiceExtensions.InferTypes(ITypeInferenceService service,SemanticModel semanticModel,SyntaxNode expression,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateMethodService`4.State.TryInitializeSimpleName(TService service,SemanticDocument semanticDocument,TSimpleNameSyntax simpleName,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateMethodService`4.State.TryInitializeMethodAsync(TService service,SemanticDocument document,SyntaxNode node,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateMethodService`4.State.GenerateMethodStateAsync[TService,TSimpleNameSyntax,TExpressionSyntax,TInvocationExpressionSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateMethodService`4.GenerateMethodAsync[TService,TSimpleNameSyntax,TExpressionSyntax,TInvocationExpressionSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.GenerateMember.AbstractGenerateMemberCodeFixProvider.RegisterCodeFixesAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

```
System.ArgumentException : Not a VB symbol.
Parameter name: typeArguments
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SymbolExtensions.EnsureVbSymbolOrNothing[TSource,TDestination](TSource symbol,String paramName)
   at Microsoft.CodeAnalysis.VisualBasic.Symbol.ConstructTypeArguments(ITypeSymbol[] typeArguments)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol.INamedTypeSymbol_Construct(ITypeSymbol[] typeArguments)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicTypeInferenceService.TypeInferrer._Closure$__19-0._Lambda$__0(TypeInferenceInfo t)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()
   at System.Linq.Enumerable.&amp;lt;DistinctIterator&amp;gt;d__64`1.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at System.Collections.Immutable.ImmutableArray.CreateRange[T](IEnumerable`1 items)
   at System.Collections.Immutable.ImmutableArray.ToImmutableArray[TSource](IEnumerable`1 items)
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService.AbstractTypeInferrer.Filter(IEnumerable`1 types,Boolean filterUnusable)
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService.AbstractTypeInferrer.InferTypes(SyntaxNode expression,Boolean filterUnusable)
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService.InferTypes(SemanticModel semanticModel,SyntaxNode expression,String nameOpt,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.GenerateMember.GenerateVariable.AbstractGenerateVariableService`3.State.DetermineFieldType(SemanticDocument semanticDocument,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.GenerateMember.GenerateVariable.AbstractGenerateVariableService`3.State.TryInitializeSimpleName(TService service,SemanticDocument semanticDocument,TSimpleNameSyntax simpleName,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateVariable.AbstractGenerateVariableService`3.State.TryInitializeAsync[TService,TSimpleNameSyntax,TExpressionSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateVariable.AbstractGenerateVariableService`3.State.GenerateAsync[TService,TSimpleNameSyntax,TExpressionSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateVariable.AbstractGenerateVariableService`3.GenerateVariableAsync[TService,TSimpleNameSyntax,TExpressionSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.GenerateMember.AbstractGenerateMemberCodeFixProvider.RegisterCodeFixesAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

```
System.ArgumentException : Not a VB symbol.
Parameter name: typeArguments
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.SymbolExtensions.EnsureVbSymbolOrNothing[TSource,TDestination](TSource symbol,String paramName)
   at Microsoft.CodeAnalysis.VisualBasic.Symbol.ConstructTypeArguments(ITypeSymbol[] typeArguments)
   at Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol.INamedTypeSymbol_Construct(ITypeSymbol[] typeArguments)
   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicTypeInferenceService.TypeInferrer._Closure$__19-0._Lambda$__0(TypeInferenceInfo t)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()
   at System.Linq.Enumerable.&amp;lt;DistinctIterator&amp;gt;d__64`1.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at System.Collections.Immutable.ImmutableArray.CreateRange[T](IEnumerable`1 items)
   at System.Collections.Immutable.ImmutableArray.ToImmutableArray[TSource](IEnumerable`1 items)
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService.InferTypes(SemanticModel semanticModel,Int32 position,String nameOpt,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext.ComputeInferredTypes(Workspace workspace,SemanticModel semanticModel,Int32 position,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.SyntaxContext..ctor(Workspace workspace,SemanticModel semanticModel,Int32 position,SyntaxToken leftToken,SyntaxToken targetToken,Boolean isTypeContext,Boolean isNamespaceContext,Boolean isNamespaceDeclarationNameContext,Boolean isPreProcessorDirectiveContext,Boolean isRightOfNameSeparator,Boolean isStatementContext,Boolean isAnyExpressionContext,Boolean isAttributeNameContext,Boolean isEnumTypeMemberAccessContext,Boolean isNameOfContext,Boolean isInQuery,Boolean isInImportsDirective,Boolean isWithinAsyncMethod,Boolean isPossibleTupleContext,Boolean isPatternContext,Boolean isRightSideOfNumericType,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.VisualBasicSyntaxContext..ctor(Workspace workspace,SemanticModel semanticModel,Int32 position,SyntaxToken leftToken,SyntaxToken targetToken,SyntaxToken touchingToken,Boolean isTypeContext,Boolean isNamespaceContext,Boolean isNamespaceDeclarationNameContext,Boolean isPreProcessorDirectiveContext,Boolean isRightOfNameSeparator,Boolean isSingleLineStatementContext,Boolean isExpressionContext,Boolean isAttributeNameContext,Boolean isEnumTypeMemberAccessContext,Boolean isNameOfContext,Boolean isInLambda,Boolean isInQuery,Boolean isInImportsDirective,Boolean isCustomEventContext,Boolean isPossibleTupleContext,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.VisualBasicSyntaxContext.VB$StateMachine_19_CreateContextAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.VisualBasic.Completion.Providers.KeywordCompletionProvider.VB$StateMachine_2_CreateContextAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Completion.Providers.AbstractKeywordCompletionProvider`1.RecommendCompletionItemsAsync[TContext](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetUnionItemsFromDocumentAndLinkedDocumentsAsync[T](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Completion.Providers.AbstractKeywordCompletionProvider`1.ProvideCompletionsAsync[TContext](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.GetContextAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.ComputeNonEmptyCompletionContextsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.GetCompletionsWithAvailabilityOfExpandedItemsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.GetCompletionsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.SpellCheck.AbstractSpellCheckCodeFixProvider`1.CreateSpellCheckCodeIssueAsync[TSimpleName](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.SpellCheck.AbstractSpellCheckCodeFixProvider`1.CheckNodeAsync[TSimpleName](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.SpellCheck.AbstractSpellCheckCodeFixProvider`1.RegisterCodeFixesAsync[TSimpleName](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

---
### Original Comments

#### Visual Studio Feedback System on 10/14/2019, 11:32 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39332</IssueID>
    <RepoID>1</RepoID>
    <Title>If I'm trying to reference a new class, property, etc. that only newer frameworks/standard/core target, some helpful refactor recommendations would be nice. I find I spend a lot of time trying to understand when given features came in for what version....</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/776570/if-im-trying-to-reference-a-new-class-property-etc.html)._

---
If I'm trying to reference a new class, property, etc. that only newer frameworks/standard/core target, some helpful refactor recommendations would be nice. I find I spend a lot of time trying to understand when given features came in for what version. Having that built into the IDE so I can make more intelligent choices would be helpful.

---
### Original Comments

#### Visual Studio Feedback System on 10/14/2019, 11:55 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39331</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a special diagnostic for when the parser is not making progress in loops</Title>
    <Description>See `IsMakingProgress(ref int)`:

https://github.com/dotnet/roslyn/blob/1ccaa91e9ea9fbfccbdf47afc938644af927f425/src/Compilers/CSharp/Portable/Parser/SyntaxParser.cs#L1107

This method Debug.Asserts so that we know there's an infinite loop bug in the parser in debug mode. In release mode, it just returns 'false' so that the related loop terminates and compilation finishes (expected to finish with syntax errors.)

I think we should consider making it so this method also adds a special diagnostic which requests the user to report an issue, so that when users inadvertently put the parser into an unexpected no-progress state, we can find out about it and address any underlying issues.

/cc @jcouv</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39330</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip RenamingEscapedIdentifiers</Title>
    <Description>Related to #29483

flaky build (see attempt 1): https://dev.azure.com/dnceng/public/_build/results?buildId=390082&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=12097348&amp;resultId=138635&amp;paneView=debug</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39329</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract Method changes 'using var' semantic to 'out parameter' semantic</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/760023/extract-method-changes-using-var-semantic-to-out-p.html)._

---
Using 'Extract Method' in a block containing 'using var' causes the resulting method to assign the variables to out parameters and contains no using expression.

---
### Original Comments

#### Visual Studio Feedback System on 10/6/2019, 11:35 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/8/2019, 02:04 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39328</IssueID>
    <RepoID>1</RepoID>
    <Title>ExtractInterfaceCodeRefactoringProvider encountered an error and has been disabled</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/547144/extractinterfacecoderefactoringprovider-encountere.html)._

---
This happens everytime. The class that I am trying to extract interface from is defined in a shared project (shproj).

The stack trace:
```
System.AggregateException : One or more errors occurred. ---&amp;gt; Files and folders cannot be:
- Empty strings 
- System reserved names, including 'CON', 'AUX', PRN', 'COM1' or 'LPT2' 
- contain only '.'
- have any of the following characters: / ? : &amp;amp; \ * &amp;quot; &amp;lt; &amp;gt; | # %
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&amp;lt;&amp;gt;c__DisplayClass18_0.&amp;lt;InvokeCore&amp;gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&amp;gt; (Inner Exception #0) System.InvalidOperationException : Files and folders cannot be:
- Empty strings 
- System reserved names, including 'CON', 'AUX', PRN', 'COM1' or 'LPT2' 
- contain only '.'
- have any of the following characters: / ? : &amp;amp; \ * &amp;quot; &amp;lt; &amp;gt; | # %
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Utilities.ValidateFileName(IServiceProvider serviceProvider,String filePath)
   at async Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProjectItems.&amp;lt;&amp;gt;c__DisplayClass2_0.&amp;lt;AddFolder&amp;gt;b__0(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProject.&amp;lt;&amp;gt;c__DisplayClass68_0`1.&amp;lt;Mutate&amp;gt;b__0[T](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.&amp;lt;&amp;gt;c__DisplayClass569_0.&amp;lt;Mutate&amp;gt;b__0(&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()
   at Microsoft.VisualStudio.ProjectSystem.ProjectMultiThreadedService.ExecuteSynchronously(Func`1 asyncAction)
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.Mutate(Func`1 asyncAction,Boolean includesFileSystemChange,String telemetryActivity)
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProject.Mutate[T](Func`1 asyncAction,Boolean includesFileSystemChange,String telemetryActivity)
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProjectItems.AddFolder(String name,String kind)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.Extensions.ProjectExtensions.CreateFolder(ProjectItems currentItems,String container)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.Extensions.ProjectExtensions.FindOrCreateFolder(Project project,IEnumerable`1 containers)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.AddDocumentToFolder(AbstractProject hostProject,Project project,DocumentId documentId,IEnumerable`1 folders,String documentName, SourceCodeKind sourceCodeKind,SourceText initialText,String filePath,Boolean isAdditionalDocument)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.AddDocumentCore(DocumentInfo info,SourceText initialText,Boolean isAdditionalDocument)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyDocumentAdded(DocumentInfo info,SourceText text)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;lt;---
```

---
### Original Comments

#### Visual Studio Feedback System on 4/26/2019, 00:29 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 5/6/2019, 04:37 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39327</IssueID>
    <RepoID>1</RepoID>
    <Title>C#, Rename file to match class name unexpectedly fails to trigger</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/761952/c-rename-file-to-match-class-name-unexpectedly-fai.html)._

---
I have Ctrl-W mapped to Edit.ExpandSelection.

Prerequisite: Have a class in a .cs file where filename and class name don't match.

Repro actions:
- Place the cursor (using kbd) somewhere in the middle of the class name, in the definition of the class.
- Ctrl-W, to select the whole class name.
- Engage `EditorContextMenus.CodeWindow.QuickActionsForPosition` (defaultmapped to Ctrl-'.' I believe).

Result: You are not even presented with the choices to rename neither the file nor the class.

Expected: Whether no selection is active, or exacly _one_ selection is active where the classname is partially or fully included in a selection, together with zero or more leading and/or trailing whitespace, the refactoring should be suggested.

From the behavior it seems the bug is the refactoring fails to even understand the cursor is on a class name if a selection is active.

Feel free to replace &amp;quot;class name&amp;quot; with &amp;quot;typename&amp;quot;, as it seems likely this bug should affect all kinds of non-predefined typenames.

---
### Original Comments

#### Visual Studio Feedback System on 10/7/2019, 00:55 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/8/2019, 01:57 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39326</IssueID>
    <RepoID>1</RepoID>
    <Title>Duplication word  when rename property</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/761897/duplication-word-when-rename-property.html)._

---
Note: VS 2019 Community 16.3.1

**Act**
We have two members, for excample:

```
private const string _sidSearchFilter = &amp;quot;(&amp;amp;(objectClass=user)(objectClass=person)(objectGUID={0}))&amp;quot;;
private const string _emailAttribute = &amp;quot;mail&amp;quot;;
```

**Arrange**
Rename them, click &amp;quot;Ctrl+R&amp;quot;

**Assert**
1) For `_sidSearchFilter`, rename preview will be as `_sidSearchFilter` - _**ok**_;
2) For `_emailAttribute`, rename preview will be as `_emailAttributeAttribute` - _**Is it ok?**_;

---
### Original Comments

#### Visual Studio Feedback System on 10/7/2019, 01:03 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/8/2019, 01:57 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39325</IssueID>
    <RepoID>1</RepoID>
    <Title>Go to implementation throws AggregateException</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/745946/go-to-implementation-throws-aggregateexception.html)._

---
&lt;p&gt;[regression] [worked-in:16.2.3]&lt;br&gt;
After upgrading to 16.3 the Go to Implementation command (Ctrl+F12 in the default shortcuts) no longer work and throws an AggregateException.&lt;/p&gt;&lt;p&gt;Update: this works properly on a dotnet core solution. The project where this fails is a larger (50+ csproj) legacy dotnet framework solution. The main project type is ASP.NET.&lt;/p&gt;&lt;p&gt;I tried disabling all plugins but the error persists.&lt;/p&gt;&lt;p&gt;Please see the attached logs/recording for more details.&lt;/p&gt;&lt;p&gt;This is the stack trace for the error:&lt;/p&gt;
&lt;pre&gt;System.AggregateException: One or more errors occurred. ---&amp;gt; System.AggregateException: One or more errors occurred. ---&amp;gt; System.AggregateException: One or more errors occurred. ---&amp;gt; System.NullReferenceException: Object reference not set to an instance of an object.at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;lt;CreateIndexAsync&amp;gt;d__8.MoveNext() --- End of stack trace from previous location where exception was thrown --- at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject) --- End of inner exception stack trace --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;AddSourceTypesInProjectAsync&amp;gt;d__30.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;FindTypesInProjectAsync&amp;gt;d__20.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;FindTypesAsync&amp;gt;d__18.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;&amp;gt;c__DisplayClass9_0.&amp;lt;&amp;lt;FindTypesFromCacheOrComputeAsync&amp;gt;b__0&amp;gt;d.MoveNext() --- End of inner exception stack trace --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;FindTypesFromCacheOrComputeAsync&amp;gt;d__9.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;FindTransitivelyImplementingStructuresAndClassesAsync&amp;gt;d__13.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;lt;FindImplementationsAsync&amp;gt;d__50.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;lt;FindImplementationsAsync&amp;gt;d__49.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;lt;FindImplementationsWorkerAsync&amp;gt;d__4.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;lt;FindImplementationsAsync&amp;gt;d__3.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;lt;FindImplementationsAsync&amp;gt;d__2.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.Editor.FindUsages.AbstractFindUsagesService.&amp;lt;FindImplementationsAsync&amp;gt;d__2.MoveNext() --- End of inner exception stack trace --- at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)at Microsoft.CodeAnalysis.Editor.GoToImplementation.GoToImplementationCommandHandler.StreamingGoToImplementation(Document document, Int32 caretPosition, IFindUsagesService findUsagesService, IStreamingFindUsagesPresenter streamingPresenter, CancellationToken cancellationToken, String&amp;amp; messageToShow)at Microsoft.CodeAnalysis.Editor.GoToImplementation.GoToImplementationCommandHandler.ExecuteCommand(Document document, Int32 caretPosition, IFindUsagesService streamingService, CommandExecutionContext context)at Microsoft.CodeAnalysis.Editor.GoToImplementation.GoToImplementationCommandHandler.ExecuteCommand(GoToImplementationCommandArgs args, CommandExecutionContext context)at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.&amp;lt;&amp;gt;c__DisplayClass13_1`1.&amp;lt;&amp;lt;span class=&amp;quot;hljs-selector-tag&amp;quot;&amp;gt;Execute&amp;lt;/span&amp;gt;&amp;gt;&amp;lt;span class=&amp;quot;hljs-selector-tag&amp;quot;&amp;gt;b__1&amp;lt;/span&amp;gt;()&amp;lt;span class=&amp;quot;hljs-selector-tag&amp;quot;&amp;gt;at&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-selector-tag&amp;quot;&amp;gt;Microsoft&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-selector-class&amp;quot;&amp;gt;.VisualStudio&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-selector-class&amp;quot;&amp;gt;.Text&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-selector-class&amp;quot;&amp;gt;.Utilities&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-selector-class&amp;quot;&amp;gt;.GuardedOperations&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-selector-class&amp;quot;&amp;gt;.CallExtensionPoint&amp;lt;/span&amp;gt;(&amp;lt;span class=&amp;quot;hljs-selector-tag&amp;quot;&amp;gt;Object&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-selector-tag&amp;quot;&amp;gt;errorSource&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;hljs-selector-tag&amp;quot;&amp;gt;Action&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-selector-tag&amp;quot;&amp;gt;call&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;hljs-selector-tag&amp;quot;&amp;gt;Predicate&amp;lt;/span&amp;gt;`1 exceptionFilter) ---&amp;gt; (Inner Exception #0) System.AggregateException: One or more errors occurred. ---&amp;gt; System.AggregateException: One or more errors occurred. ---&amp;gt; System.NullReferenceException: Object reference not set to an instance of an object.at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;lt;CreateIndexAsync&amp;gt;d__8.MoveNext() --- End of stack trace from previous location where exception was thrown --- at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject) --- End of inner exception stack trace --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;AddSourceTypesInProjectAsync&amp;gt;d__30.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;FindTypesInProjectAsync&amp;gt;d__20.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;FindTypesAsync&amp;gt;d__18.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;&amp;gt;c__DisplayClass9_0.&amp;lt;&amp;lt;FindTypesFromCacheOrComputeAsync&amp;gt;b__0&amp;gt;d.MoveNext() --- End of inner exception stack trace --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;FindTypesFromCacheOrComputeAsync&amp;gt;d__9.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;FindTransitivelyImplementingStructuresAndClassesAsync&amp;gt;d__13.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;lt;FindImplementationsAsync&amp;gt;d__50.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;lt;FindImplementationsAsync&amp;gt;d__49.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;lt;FindImplementationsWorkerAsync&amp;gt;d__4.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;lt;FindImplementationsAsync&amp;gt;d__3.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;lt;FindImplementationsAsync&amp;gt;d__2.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.Editor.FindUsages.AbstractFindUsagesService.&amp;lt;FindImplementationsAsync&amp;gt;d__2.MoveNext() ---&amp;gt; (Inner Exception #0) System.AggregateException: One or more errors occurred. ---&amp;gt; System.NullReferenceException: Object reference not set to an instance of an object.at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;lt;CreateIndexAsync&amp;gt;d__8.MoveNext() --- End of stack trace from previous location where exception was thrown --- at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject) --- End of inner exception stack trace --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;AddSourceTypesInProjectAsync&amp;gt;d__30.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;FindTypesInProjectAsync&amp;gt;d__20.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;FindTypesAsync&amp;gt;d__18.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;&amp;gt;c__DisplayClass9_0.&amp;lt;&amp;lt;FindTypesFromCacheOrComputeAsync&amp;gt;b__0&amp;gt;d.MoveNext() ---&amp;gt; (Inner Exception #0) System.NullReferenceException: Object reference not set to an instance of an object.at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;lt;CreateIndexAsync&amp;gt;d__8.MoveNext() --- End of stack trace from previous location where exception was thrown --- at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;lt;--- &amp;lt;--- &amp;lt;--- 
&lt;/pre&gt;

---
### Original Comments

#### Visual Studio Feedback System on 9/24/2019, 11:19 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39324</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove analyzer workarounds for using declarations</Title>
    <Description>Remove workarounds introduced introduced in https://github.com/dotnet/roslyn/pull/36734 as #32100 is now implemented.
</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39323</IssueID>
    <RepoID>1</RepoID>
    <Title>C# formatter's "Make private fields readonly" option fails to consider separated partial classes</Title>
    <Description>VS Enterprise 16.3.5

**Steps to Reproduce**:
using the following code - using separate files - If used in the same file behavior is as expected.
Apply code-cleanup - including "Make private fields readonly when possible"
```
	partial class MyTest : Form
	{
		private bool _disposed;
	}

	partial class MyTest
	{
		protected override void Dispose(bool disposing)
		{
			if(!_disposed)
				base.Dispose(disposing);
                       _disposed = true;
		}
	}
```

**Expected Behavior**:
```
	internal partial class MyTest : Form
	{
		private bool _disposed;;
	}

	internal partial class MyTest
	{
		protected override void Dispose(bool disposing)
		{
			if (!_disposed)
			{
				base.Dispose(disposing);
			}
                       _disposed = true;
		}
	}
```
**Actual Behavior**:
```
	internal partial class MyTest : Form
	{
		private readonly bool _disposed = true;
	}

	internal partial class MyTest
	{
		protected override void Dispose(bool disposing)
		{
			if (!_disposed)
			{
				base.Dispose(disposing);
			}
			_disposed = true; // this line fails to compile 
		}
	}
```</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39322</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not wait for output writer thread to complete when aborting execution in IW</Title>
    <Description>Joining the threads might cause deadlock if Dispose is executing on UI thread since the output writing threads are dispatching to UI thread to write the output.

Fixes https://github.com/dotnet/roslyn/issues/36022

</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39320</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39319</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39318</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```
Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39317</IssueID>
    <RepoID>1</RepoID>
    <Title>Naming rule fix generates code with errors</Title>
    <Description>**Version Used**: 16.4p2

**Steps to Reproduce**:

Code with the following along with an `.editorconfig` rule (based on the Roslyn one):

```
# Static readonly fields are PascalCased
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.symbols                               = private_static_readonly_field_symbols
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.style                                 = pascal_case_style
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.severity                              = warning
```

![image](https://user-images.githubusercontent.com/1427284/66938671-9ff01d80-f00f-11e9-901f-fffb0c49713e.png)


**Expected Behavior**:
An alternate fix or automatic suppression of the warning when a property matches the target name already.

**Actual Behavior**:
Code generates a conflict with a property that already exists.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39316</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable virtual/override recommender on private protected members</Title>
    <Description>Fixes #39263 </Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39315</IssueID>
    <RepoID>1</RepoID>
    <Title>VB implementation of WriteDocumentationCommentXml does not respect filterTree</Title>
    <Description>During review of [DevDiv 999063](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/999063), I found that syntax trees were reconstituted 115603 times in less than 100 seconds, including 217 cases for just **src/Compilers/VisualBasic/Portable/Lowering/Rewriter.vb**. CPU analysis suggests that the trees are being requested by this method:

```
Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation+DocumentationCommentCompiler.WriteDocumentationCommentXml
```

I noticed that this block:

https://github.com/dotnet/roslyn/blob/1de29ff0ae5661a0ac4b8208ac42570bce4c9417/src/Compilers/CSharp/Portable/Compiler/DocumentationCommentCompiler.cs#L108-L113

is not present in the corresponding VB compiler method:

https://github.com/dotnet/roslyn/blob/1de29ff0ae5661a0ac4b8208ac42570bce4c9417/src/Compilers/VisualBasic/Portable/Compilation/DocumentationComments/DocumentationCommentCompiler.vb#L59-L65</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39314</IssueID>
    <RepoID>1</RepoID>
    <Title>Optimize boxing of boolean values</Title>
    <Description>It happens rather often in applications that there is implicit conversion `boolean-&gt;object` that causes boxing (and memory allocation in a heap) of a boolean value each and every time the conversion is called. This can produce quite significant memory allocations if such conversions happen in a hot path. Is it worth optimizing this specific conversion at compile time by a compiler? Bellow there is a workaround in C# however compiler can solve this more conventionally by emitting similar byte code at compile-time.

```csharp
public static class BoolExtensions
{
    private static readonly object boxedFalse = false; // one-time boxing
    private static readonly object boxedTrue = true; // one-time boxing

    public static object Boxed(this bool value)
    {
        return value ? boxedTrue : boxedFalse;
    }
}
```</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39313</IssueID>
    <RepoID>1</RepoID>
    <Title>Invalid suggestion: use var instead of explicit type</Title>
    <Description>**Version Used**: 16.4p2

**Steps to Reproduce**:

![image](https://user-images.githubusercontent.com/1427284/66927603-12580200-effe-11e9-8326-6c389c7a9455.png)

Code like that, where the .Parent property returns `PackagePart?`.

**Expected Behavior**:
No IDE0007 message

**Actual Behavior**:
IDE0007 message.

When the quick fix runs, and it puts `for(var cursor = this ...`, yields a different warning since it'd be trying to assign a nullable to a non-nullable.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39312</IssueID>
    <RepoID>1</RepoID>
    <Title>[Feature request] Formatting: an option to not indent directly-nested control statements except `if`</Title>
    <Description>Sample code:
```csharp
foreach (var type in typeof(TModel).EnumerateBaseTypes())
    foreach (var field in type.GetFields(activator_flags))
        perform(targetShadowModel, field, newModel, t =&gt; t.shadowProp.BindTo(t.modelProp));
```
JetBrains Rider has an option to indent it into:
```csharp
foreach (var type in typeof(TModel).EnumerateBaseTypes())
foreach (var field in type.GetFields(activator_flags))
    perform(targetShadowModel, field, newModel, t =&gt; t.shadowProp.BindTo(t.modelProp));
```

Currently roslyn only do this style on nested `using`s. Nested loops won't get confusing comparing to nested `if` with `else`, so this option should be reasonable.

Rider has option on `using`, `fixed`, `lock`, `for`, `foreach` and `while`.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39311</IssueID>
    <RepoID>1</RepoID>
    <Title>Bug: Null-forgiving operator suppresses CS8620 warning</Title>
    <Description>**Version Used**: 3.3.1

**Steps to Reproduce**:
```cs
List&lt;string?&gt; list = new List&lt;string?&gt;();
List&lt;string&gt; list1 = list.Where(x =&gt; x != null).ToList(); // warning CS8619
List&lt;string&gt; list2 = list.Where(x =&gt; x != null).ToList&lt;string&gt;(); // warning CS8620
List&lt;string&gt; list3 = list.Where(x =&gt; x != null)!.ToList(); // warning CS8619
List&lt;string&gt; list4 = list.Where(x =&gt; x != null)!.ToList&lt;string&gt;(); // no warning here (bug)
```

**Expected Behavior**:
`list1`: warning CS8619: Nullability of reference types in value of type 'List&lt;string?&gt;' doesn't match target type 'List&lt;string&gt;'.

`list2`: warning CS8620: Argument of type 'IEnumerable&lt;string?&gt;' cannot be used for parameter 'source' of type 'IEnumerable&lt;string&gt;' in 'List&lt;string&gt; Enumerable.ToList&lt;string&gt;(IEnumerable&lt;string&gt; source)' due to differences in the nullability of reference types.

`list3`: warning CS8619: Nullability of reference types in value of type 'List&lt;string?&gt;' doesn't match target type 'List&lt;string&gt;'.

**`list4`: warning CS8620: Argument of type 'IEnumerable&lt;string?&gt;' cannot be used for parameter 'source' of type 'IEnumerable&lt;string&gt;' in 'List&lt;string&gt; Enumerable.ToList&lt;string&gt;(IEnumerable&lt;string&gt; source)' due to differences in the nullability of reference types.**

**Actual Behavior**:
`list1`: warning CS8619: Nullability of reference types in value of type 'List&lt;string?&gt;' doesn't match target type 'List&lt;string&gt;'.

`list2`: warning CS8620: Argument of type 'IEnumerable&lt;string?&gt;' cannot be used for parameter 'source' of type 'IEnumerable&lt;string&gt;' in 'List&lt;string&gt; Enumerable.ToList&lt;string&gt;(IEnumerable&lt;string&gt; source)' due to differences in the nullability of reference types.

`list3`: warning CS8619: Nullability of reference types in value of type 'List&lt;string?&gt;' doesn't match target type 'List&lt;string&gt;'.

**`list4`: no warning**</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39310</IssueID>
    <RepoID>1</RepoID>
    <Title>Local method System.BadImageFormatException error</Title>
    <Description>The following causes a `System.BadImageFormatException` to throw when the local method is called:

```c#
        [TestMethod]
        public void Invalid_Program()
        {
            Invalid_Program2&lt;int&gt;();

            static void Invalid_Program2&lt;T&gt;()
            {
                int x = 0;
                var y = (T)(dynamic)x;
            }
        }
```

Moving the local method out of the outer method so it becomes a normal method works fine. I believe this is a somewhat recent regression, somewhere between a .NET Core 3.0 beta and 3.0 release version as I do believe this was working at some point but I may be wrong about that.

This is compiled in a .NET Standard 2.1 library with C# 8 enabled in VS2019 with .NET Core 3.0 release version installed.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39309</IssueID>
    <RepoID>1</RepoID>
    <Title>msft bot not merging PRs</Title>
    <Description>Creating this issue to keep track of PRs that don't get automerged.

https://github.com/dotnet/roslyn/pull/39303
https://github.com/dotnet/roslyn/pull/39304
https://github.com/dotnet/roslyn/pull/39306
(automerged after I deleted and re-added the auto-merge label)
</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39308</IssueID>
    <RepoID>1</RepoID>
    <Title>Updating dotnet/versions occasionally errors with 'Update is not a fast forward'</Title>
    <Description>Example builds:
https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3145509 
https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3143639

When publishing build info updates to dotnet/version in quick succession as done here
https://github.com/dotnet/roslyn/blob/master/eng/publish-assets.ps1#L122
it will sometimes fail with
```
Publishing E:\A\_work\3542\s\artifacts\packages\Release\NonShipping to channel dev16.4
Error updating versions: Could not update dotnet/versions 'heads/master' to '4e2d35b8002d79592594d73903d830f8db1ed632': Update is not a fast forward
   at Microsoft.DotNet.VersionTools.Automation.GitHubApi.GitHubClient.&lt;PatchReferenceAsync&gt;d__24.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.DotNet.VersionTools.Automation.GitHubVersionsRepoUpdater.&lt;UpdateBuildInfoAsync&gt;d__6.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at RoslynPublish.Program.&lt;Go&gt;d__1.MoveNext() in /_/src/Tools/RoslynPublish/Program.cs:line 64
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at RoslynPublish.Program.Main(String[] args) in /_/src/Tools/RoslynPublish/Program.cs:line 19
```

The tool [queries ](https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.VersionTools/Automation/GitHubVersionsRepoUpdater.cs#L81)the master branch for latest commits, then applies a commit with the new build info.  When this happens multiple times in succession, occasionally the query for the latest commits will not return the latest commit.

Example:
In [this build](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3143639), we see
```
Publishing E:\A\_work\3542\s\artifacts\packages\Release\Shipping to channel dev16.4
Publishing E:\A\_work\3542\s\artifacts\packages\Release\NonShipping to channel dev16.4
Error updating versions: Could not update dotnet/versions 'heads/master' to '4e2d35b8002d79592594d73903d830f8db1ed632': Update is not a fast forward
```

Looking at the master branch log, we see a successful [commit ](https://github.com/dotnet/versions/commit/8db4b41f383c084eb31ccd8f0de9da2824107c99) for the first dev16.4 channel publish, but no further successful commits.  Looking at the [hash of the failed commit](https://github.com/dotnet/versions/commit/4e2d35b8002d79592594d73903d830f8db1ed632), we see that it's parent is actually `1dc94d9` which is the commit prior to applying the first successful commit.  The parent commit should be the id of the previous commit, `8db4b4`

https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3145509 has a similar failure, but it published two successful commits before failing.  

It seems like we need to add a delay in between attempts to publish to dotnet/versions to account for github delays in processing.
</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39307</IssueID>
    <RepoID>1</RepoID>
    <Title>Move much of local function data flow to AbstractFlowPass</Title>
    <Description>Our design for local function flow analysis is now pretty well decided
-- local functions are assumed to preserve state transitions through
calls within the method.

For definite assignment, this means that variables which are definitely
assigned inside the local function are assigned on calls to the local
function. This functionality has mostly been moved to AbstractFlowPass.

The remaining functionality, namely producing diagnostics based on the
flow state, is analysis-specific, so I've refactored this to remain in
definite assignment, but use stubs that are present in AbstractFlowPass.

This is the first of a few PRs that should eventually address #38548. My plan is:

1. Move a lot of the local function machinery into flow analysis.
2. Add support for non-monotonic transfer functions to local function analysis.
3. Use (1) and (2) to implement nullable analysis over local functions.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39306</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39305</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39304</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39303</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39302</IssueID>
    <RepoID>1</RepoID>
    <Title>Ignore await in completion when triggers completion between two dots</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/39150

We already provide completion between two dots which also can be treated as a range expression. However, if there is the `await` keyword before the expression, we are in stuck. </Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39301</IssueID>
    <RepoID>1</RepoID>
    <Title>DRAFT changes.  On hold pending #20648</Title>
    <Description>Address issues with flow analysis slot container types and changing types during inference in the nullable walker
Fixes #39220
Fixes #39297
Fixes #33428</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39300</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: Avoid leave.s opcode jumping out of a finally block</Title>
    <Description>There were two problems with the original implementation:
- within a `try` statement, we should only jump to the `finallyEntry` label for disposal when we're inside the `try` or a `catch` block, but not if we're inside that `finally` block.
- even with that fixed, we were still producing a `leave.s` to jump out of a `finally`, which is illegal. So we now jump to the end of the current finally instead.

``` csharp
try
{
}
finally
{
    try
    {
    }
    finally
    {
    }
    // disposal code inserted after finally to jump to next relevant finally should not straight jump to "exit" label (invalid leave.s instruction), but instead to the end of the enclosing finally, "finallyExit"
    ...
    finallyExit:
}
exit:
```

This is illustrated by the commits in this PR.

Fixes https://github.com/dotnet/roslyn/issues/38961
FYI @stephentoub </Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39299</IssueID>
    <RepoID>1</RepoID>
    <Title>Regression: #r completion in Interactive Window is broken</Title>
    <Description>**Version Used**: 
Version 16.4.0 Preview 3.0 [29415.53.master]

**Steps to Reproduce**:

1. create `C:\Temp` directory and add files `a.dll`, `b.dll` to it.
2. In Interactive Window type:

```
&gt; #r "c:\Temp\a.d
```

and hit `Tab`. 

**Expected Behavior**:

```
&gt; #r "c:\Temp\a.dll
```

**Actual Behavior**:

```
&gt; #r "c:\Temp\a.a.dll
```

The pre-selection is also broken:
![image](https://user-images.githubusercontent.com/41759/66867954-3dd0e300-ef51-11e9-8fb3-2257d6623624.png)

This works correctly in VS 2017.

Another odd behavior:

Type 

```
&gt; #reset 32
```

hit Enter.

![image](https://user-images.githubusercontent.com/41759/66947416-b3978600-f007-11e9-82f9-6c3287be63f9.png)

The completion UI stays open.
</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39298</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn doesn't understand 'string.IsNullOrWhiteSpace(x) == false' null check</Title>
    <Description>**Version Used**: 
.NET Core SDK 3.0.100

**Steps to Reproduce**:
Compile the following code:

```cs
#nullable enable
class C
{
    string? field;

    void M1(C c)
    {
        if (!string.IsNullOrWhiteSpace(c.field))
        {
            c.field.ToString();
        }
    }

    void M2(C c)
    {
        if (string.IsNullOrWhiteSpace(c.field) == false)
        {
            c.field.ToString(); // incorrect CS8602
        }
    }
}
```

**Expected Behavior**:
Both methods report no warnings

**Actual Behavior**:
`M2` has an incorrect warning `CS8602: Dereference of a possibly null reference` reported for `c.field.ToString()`

Might be related to #39264 ?</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39297</IssueID>
    <RepoID>1</RepoID>
    <Title>NullableWalker violates invariants of slot and slot parents</Title>
    <Description>I tried adding the following assertion

``` c#
                HashSet&lt;DiagnosticInfo&gt; discardedUseSiteDiagnostics = null;
                Debug.Assert(
                    symbol.Kind != SymbolKind.Field || // we only check fields, but the NullableWalker also works with properties
                    containingSlot == 0 &amp;&amp; !symbol.RequiresInstanceReceiver() ||
                    symbol.ContainingType.Equals(variableBySlot[containingSlot].Symbol.GetTypeOrReturnType().Type, TypeCompareKind.AllIgnoreOptions) ||
                    compilation.Conversions.IsBaseClass(variableBySlot[containingSlot].Symbol.GetTypeOrReturnType().Type, symbol.ContainingType, ref discardedUseSiteDiagnostics));
```

before the following line in `LocalDataFlowPass.cs`

``` c#
                variableBySlot[slot] = identifier;
```

but there are a number of failures (of this assertion) in `NullableWalker`.  It is possible that some of these are symptoms of https://github.com/dotnet/roslyn/issues/20648 but I believe at least the failure in `NullableReferenceTypesTests.Conversions_TupleConversions_03` and two other tests is a deeper problem.  I am skipping those tests to make progress on https://github.com/dotnet/roslyn/issues/39220, and I removing the assertion for now.  The assertion should be readded after https://github.com/dotnet/roslyn/issues/20648 has been fixed and any issues causing the assertion to fail should be reevaluated.

</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39296</IssueID>
    <RepoID>1</RepoID>
    <Title>Editor: syntax node is not within syntax tree</Title>
    <Description>**[Happens in 16.4.0-preview-3.0-[29409.185.master]**

_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/774122/editor-syntax-node-is-not-within-syntax-tree.html)._

---
[regression] [worked-in:Not sure about prev, 16.3 works for sure]
1. Get latest Int Preview Visual Studio. 
1. git clone https://github.com/NuGet/NuGet.Client
1. Follow the instructions up to configure.ps1
1. Open NuGet.sln in Visual Studio. 

After the solution was fully loaded the moment I started type, a yellow bar popped with, 
an error occured, see log file. Clicking on that opens the activity log in the default xml viewer. 

In there I found the below. 
Note that there could be other problems, but this error was related to types of issues I was seeing. 

```
&amp;lt;entry&amp;gt;
    &amp;lt;record&amp;gt;2738&amp;lt;/record&amp;gt;
    &amp;lt;time&amp;gt;2019/10/11 18:15:44.663&amp;lt;/time&amp;gt;
    &amp;lt;type&amp;gt;Error&amp;lt;/type&amp;gt;
    &amp;lt;source&amp;gt;Editor or Editor Extension&amp;lt;/source&amp;gt;
    &amp;lt;description&amp;gt;System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.ArgumentException: Syntax node is not within syntax tree&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.CheckSyntaxNode(CSharpSyntaxNode syntax)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore(SyntaxNode node, CancellationToken cancellationToken)&amp;amp;#x000D;&amp;amp;#x000A;   at SyntaxTree.VisualStudio.Unity.Documentation.UnityQuickInfoSource.&amp;amp;lt;GetRelatedFieldSymbolAsync&amp;amp;gt;d__7.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at SyntaxTree.VisualStudio.Unity.Documentation.UnityQuickInfoSource.&amp;amp;lt;GetDocumentationFromSymbolAsync&amp;amp;gt;d__5.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at SyntaxTree.VisualStudio.Unity.Documentation.UnityQuickInfoSource.&amp;amp;lt;GetQuickInfoItemAsync&amp;amp;gt;d__4.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Language.Intellisense.Implementation.AsyncQuickInfoSession.&amp;amp;lt;ComputeSourceContentAsync&amp;amp;gt;d__39.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Language.Intellisense.Implementation.AsyncQuickInfoSession.&amp;amp;lt;UpdateAsync&amp;amp;gt;d__32.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Language.Intellisense.Implementation.AsyncQuickInfoPresentationSession.&amp;amp;lt;UpdateAsync&amp;amp;gt;d__5.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;---&amp;amp;gt; (Inner Exception #0) System.ArgumentException: Syntax node is not within syntax tree&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.CheckSyntaxNode(CSharpSyntaxNode syntax)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore(SyntaxNode node, CancellationToken cancellationToken)&amp;amp;#x000D;&amp;amp;#x000A;   at SyntaxTree.VisualStudio.Unity.Documentation.UnityQuickInfoSource.&amp;amp;lt;GetRelatedFieldSymbolAsync&amp;amp;gt;d__7.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at SyntaxTree.VisualStudio.Unity.Documentation.UnityQuickInfoSource.&amp;amp;lt;GetDocumentationFromSymbolAsync&amp;amp;gt;d__5.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at SyntaxTree.VisualStudio.Unity.Documentation.UnityQuickInfoSource.&amp;amp;lt;GetQuickInfoItemAsync&amp;amp;gt;d__4.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Language.Intellisense.Implementation.AsyncQuickInfoSession.&amp;amp;lt;ComputeSourceContentAsync&amp;amp;gt;d__39.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;amp;lt;---&amp;amp;#x000D;&amp;amp;#x000A;&amp;lt;/description&amp;gt;
  &amp;lt;/entry&amp;gt;
```

---
### Original Comments

#### Visual Studio Feedback System on 10/11/2019, 08:09 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/15/2019, 02:09 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39295</IssueID>
    <RepoID>1</RepoID>
    <Title>Rely on PDB document table for identification of design-time-only source files</Title>
    <Description>Use document list in PDB as the definitive indicator of whether a source file is design-time-only or not. This is now possible due to https://github.com/dotnet/roslyn/pull/39136.

Fixes https://github.com/dotnet/roslyn/issues/39271.
Fixes ADO [899910](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/899910): Pop up a "Edit and Continue" dialog without ENC about C# uwp app</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39294</IssueID>
    <RepoID>1</RepoID>
    <Title>Blazor preview 5.  When using intellisense to create an override in the @functions block the entire block disappears.  </Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/591477/blazor-preview-5-when-using-intellisense-to-create.html)._

---
Type my function and then 

```
@functions
{

OrganizationView[] oragnizations;
    override oni

}
```

At this point I have the overrides list up in intellisense so I hit tab.  After that I get this....

```
@functions
{}
```

And loose all that I typed before.

---
### Original Comments

#### Visual Studio Feedback System on 6/3/2019, 02:32 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Robert Haken on 6/3/2019, 04:25 PM: 

Same here.
#### Visual Studio Feedback System on 6/3/2019, 10:31 PM: 

&lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/ . We'll keep you posted on any updates to this feedback.&lt;/p&gt;

#### Visual Studio Feedback System on 10/10/2019, 10:15 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39293</IssueID>
    <RepoID>1</RepoID>
    <Title>CodeRefactoringService IntroduceVariable fails with ArgumentOutOfRangeException</Title>
    <Description>**Version Used**: 
Version 16.4.0 Preview 3.0 [29409.185.master]

![image](https://user-images.githubusercontent.com/41759/66856739-b5dfde80-ef3a-11e9-8a5a-28f9e7a0654c.png)

while editing `src\EditorFeatures\Test\EditAndContinue\EditAndContinueWorkspaceServiceTests.cs` in Roslyn.sln.

```
System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.
Parameter name: position
   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)
   at Microsoft.CodeAnalysis.CodeRefactoringHelpers.IsNodeUnderselected(SyntaxNode node,TextSpan selection)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitializeAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GenerateAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39292</IssueID>
    <RepoID>1</RepoID>
    <Title>Emit ldloca/ldflda instruction instead of ldloc/ldfld to inspect value types in Expression Evaluation</Title>
    <Description>**Version Used**: 
All

**Description**:
Currently, while debugging, Roslyn generates the following IL for locals during expression evaluation (Autos/Local/Watch windows)

Eg.
```
=&gt; $0000: ldloc &lt;index&gt;
    $0001: ret 
```

For value types, this ends up creating a copy of the local which has the following issues:

a)	It is expensive, since the debugger's IL interpreter does a deep copy of all fields to push it on the stack
b)	In certain cases (such as using visualizers) we want to modify the local. Currently for these cases this is not possible since we are dealing with the returned copy.

The IL generated instead should be:

`ldloc a &lt;index&gt;`
or
`ldflda &lt;field&gt;`
ret

**Steps to Reproduce**:
Inspect a local that is a value type in watch window.</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39291</IssueID>
    <RepoID>1</RepoID>
    <Title>Non-nullable backing field of property marked uninitialized when property is assigned a value in constructor</Title>
    <Description>**Version Used**: 
dotnet 3.0.100

**Steps to Reproduce**:

1. Run `dotnet new console` in an empty directory.
2. Enable nullable reference types by specifying `&lt;Nullable&gt;enable&lt;/Nullable&gt;` in the `.csproj` file.
3. In `Program.cs`, paste in the following code:
```csharp
using System;

namespace ConsoleApp1
{
    internal static class Program
    {
        private static void Main()
        {
            var obj = new MyClass("Some name");
            Console.WriteLine(obj.Name);
        }
    }

    public class MyClass
    {
        private string _name;

        public MyClass(string name)
        {
            Name = name;
        }

        public string Name
        {
            get =&gt; _name;
            set
            {
                if (value == null)
                    throw new ArgumentNullException(nameof(value));
                if (value.Length &gt; 10)
                    throw new ArgumentException("Name is too long.");

                _name = value;
            }
        }
    }

}
```
3. Run `dotnet build`

**Expected Behavior**:
A build without warnings.

**Actual Behavior**:
The build ends with the following warning:
```
warning CS8618: Non-nullable field '_name' is uninitialized. Consider declaring the field as nullable.
```</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39290</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8602 No warning/error should be given when using string.IsNullOrEmpty and returning that same string within ?: operator</Title>
    <Description>**Version Used**: 
dotnet 3.0.100
Visual Studio 2019 version 16.3.4

**Steps to Reproduce**:
```C#
class Test
{
    public string? MyVar { get; set; }
    public string Computed =&gt; !string.IsNullOrEmpty(MyVar) ? MyVar : string.Empty;
}
```

**Expected Behavior**:
No warning/error should be given here, as the NullOrEmpty check suggests that `null` is never returned.

**Actual Behavior**:
The compiler throws a warning (or error when WarningsAsErrors is enabled) that the condition is possibly returning null.</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39289</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide a hidden diagnostic for unnecessary suppression operator</Title>
    <Description>Correct implementation of the "Unnecessary suppression operator" analyzer would benefit from a hidden compiler diagnostic similar to the one reported for unnecessary using directives. This diagnostic would be available for _all_ unnecessary suppression operators (including ones in generated code). The IDE team would provide an analyzer that reported the locations which are not in generated code (similar to IDE0005).</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39288</IssueID>
    <RepoID>1</RepoID>
    <Title>Update AbstractEditAndContinueAnalyzer.HasBackingField for NRT changes</Title>
    <Description>The following exclusion was added in #39184.

https://github.com/dotnet/roslyn/blob/f2ce0fa23ef602861e00fdd9d44a9be9e9fce8fd/src/Features/Core/Portable/EditAndContinue/AbstractEditAndContinueAnalyzer.cs#L2699-L2705</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39287</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39286</IssueID>
    <RepoID>1</RepoID>
    <Title> [loc][Query][Roslyn] Localizability of 0; "cmdidErrorListSetSeverityHidden|ButtonText"</Title>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
&amp;Silent

File Name:
VisualStudio\Core\Def\xlf\Commands.vsct.xlf

==========================================
Query:
Is silent translatable in this context?
It seems to be a command (other strings):
Now interpreted as "not logged". Please confirm or advise. This concerns the following strings: 
Silent 0; "cmdidErrorListSetSeverityHidden|LocCanonicalName"
Silent 0; "cmdidSetSeverityHidden|LocCanonicalName"
0; "cmdidErrorListSetSeverityHidden|ButtonText"
0; "cmdidErrorListSetSeverityHidden|LocCanonicalName"
</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39321</IssueID>
    <RepoID>1</RepoID>
    <Title>IAsyncEnumerable possible memory leak</Title>
    <Description>Following code creates "Event" objects. Looks like that no references to them are kept, but last created (and returned) in each stream is not garbage collected. Is this incorrect usage or bug?

```c#
class Program
{
    static async Task Main(string[] args)
    {
        var counter = 0;
        while (true)
        {
            await Test(counter++);
            GC.Collect();
        }
    }

    static async Task Test(int counter)
    {
        await foreach (var e in CreateEventSource(counter))
        {
            Console.WriteLine(e);
        }
    }

    static async IAsyncEnumerable&lt;Event&gt; CreateEventSource(int counter)
    {
        for (var i = 0; i &lt; 100; i++)
        {
            await Task.Delay(1); // this line can be commented and then "Events" 
            yield return new Event(counter, i);
        }
    }
}

class Event
{
    private readonly int _counter;
    private readonly int _i;

    public Event(int counter, int i)
    {
        _counter = counter;
        _i = i;
    }

    public override string ToString()
        =&gt; $"({_counter}, {_i})";
}
```

Using TargetFramework netcoreapp3.0

```
&gt; dotnet --info
Пакет SDK для .NET Core (отражающий любой global.json):
 Version:   3.0.100
 Commit:    04339c3a26

Среда выполнения:
 OS Name:     Windows
 OS Version:  10.0.16299
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.0.100\

Host (useful for support):
  Version: 3.0.0
  Commit:  7d57652f33

.NET Core SDKs installed:
  2.1.104 [C:\Program Files\dotnet\sdk]
  2.1.201 [C:\Program Files\dotnet\sdk]
  2.1.202 [C:\Program Files\dotnet\sdk]
  2.1.300 [C:\Program Files\dotnet\sdk]
  2.1.302 [C:\Program Files\dotnet\sdk]
  2.1.503 [C:\Program Files\dotnet\sdk]
  2.1.504 [C:\Program Files\dotnet\sdk]
  2.1.602 [C:\Program Files\dotnet\sdk]
  2.2.105 [C:\Program Files\dotnet\sdk]
  3.0.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.2 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.8 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.3 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.2 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.8 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.3 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.0.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.0.7 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.0.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.2 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.8 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.3 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
```</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39284</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39283</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39282</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39281</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch source writer entirely over to using interpolations.</Title>
    <Description>
    </Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39280</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn C#/VB language server fails to start</Title>
    <Description>**Version Used**: 
Visual Studio 2019 16.3 and later

**Steps to Reproduce**:

This is an intermittent repro that appears to be the result of the Roslyn language server returning a null connection when its ILanguageClient is called.

1. Open a C# or VB solution
2. Attempt to search for code in Ctrl+Q search box

**Expected Behavior**:
Symbols appear in the box.

**Actual Behavior**:
Occasionally, the language client fails to start due to a null connection being returned by Roslyn's language client.</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39279</IssueID>
    <RepoID>1</RepoID>
    <Title>Publish packages to Azure DevOps public feeds instead of MyGet</Title>
    <Description>**[dotnet5](https://dev.azure.com/dnceng/public/_packaging?_a=feed&amp;feed=dotnet5)** feed

- Microsoft.CodeAnalysis.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Common.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Compilers.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Scripting.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Scripting.Common.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Workspaces.Common.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Workspaces.MSBuild.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.CSharp.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.CSharp.CodeStyle.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.CSharp.Features.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.CSharp.Scripting.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.CSharp.Workspaces.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.VisualBasic.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.VisualBasic.CodeStyle.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.VisualBasic.Features.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.VisualBasic.Workspaces.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Build.Tasks.3.4.0-beta3-final.nupkg
- Microsoft.Net.Compilers.3.4.0-beta3-final.nupkg
- Microsoft.Net.Compilers.Toolset.3.4.0-beta3-final.nupkg
- Microsoft.NETCore.Compilers.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Debugging.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.PooledObjects.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Features.3.4.0-beta3-final.nupkg

[**vssdk**](https://dev.azure.com/azure-public/vside/_packaging?_a=feed&amp;feed=vssdk) feed

- Microsoft.CodeAnalysis.EditorFeatures.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.EditorFeatures.Common.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.EditorFeatures.Text.3.4.0-beta3-final.nupkg
- Microsoft.VisualStudio.LanguageServices.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.CSharp.EditorFeatures.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.InteractiveHost.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.EditorFeatures.Wpf.3.4.0-beta3-final.nupkg

[**vs-impl**](https://dev.azure.com/azure-public/vside/_packaging?_a=feed&amp;feed=vs-impl) feed

- Microsoft.VisualStudio.IntegrationTest.Utilities.3.4.0-beta3-19514-03.nupkg
- Microsoft.CodeAnalysis.LanguageServer.Protocol.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.ExternalAccess.Apex.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.ExternalAccess.CodeLens.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.ExternalAccess.Debugger.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.ExternalAccess.FSharp.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.ExternalAccess.IntelliTrace.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.ExternalAccess.ProjectSystem.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.ExternalAccess.Razor.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.ExternalAccess.TypeScript.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.ExternalAccess.UnitTesting.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.ExternalAccess.Xamarin.Remote.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Remote.Razor.ServiceHub.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Remote.ServiceHub.3.4.0-beta3-final.nupkg
- Microsoft.CodeAnalysis.Remote.Workspaces.3.4.0-beta3-final.nupkg
- Microsoft.VisualStudio.LanguageServices.LiveShare.3.4.0-beta3-final.nupkg
- Microsoft.VisualStudio.LanguageServices.Razor.RemoteClient.3.4.0-beta3-final.nupkg

TODO:
- Should Feetures/EditorFeatures be published to `dotnet-core` or `vssdk` feed?
</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39278</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable /warnAsError in non-Correctness runs</Title>
    <Description>I have had a few instances lately where my build is fine locally, but I get warnings in CI due to nullability changes in the base branch. This means I have to merge the base branch in, fix it locally, and push back up before getting any test results.

It feels like we might as well put warnAsError in the Correctness build *only* so this kind of thing does not prevent developers from getting test results.

/cc @jaredpar @JoeRobich @dotnet/roslyn-infrastructure </Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39277</IssueID>
    <RepoID>1</RepoID>
    <Title>Test CI error messages</Title>
    <Description>
    </Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39276</IssueID>
    <RepoID>1</RepoID>
    <Title>error MSB6006: "csc.dll" exited with code 137</Title>
    <Description>@khteh commented on [Thu Oct 10 2019](https://github.com/dotnet/cli/issues/12870)

## Steps to reproduce

![Screenshot from 2019-10-11 10-54-24](https://user-images.githubusercontent.com/3871483/66621543-3e970b80-ec17-11e9-925d-7a2ac8db224f.png)

## Expected  behavior


## Actual behavior


## Environment data
`dotnet --info` output:
```
$ dn --info
.NET Core SDK (reflecting any global.json):
 Version:   3.0.100
 Commit:    04339c3a26

Runtime Environment:
 OS Name:     ubuntu
 OS Version:  19.04
 OS Platform: Linux
 RID:         ubuntu.19.04-x64
 Base Path:   /usr/share/dotnet-3.0.100/sdk/3.0.100/

Host (useful for support):
  Version: 3.0.0
  Commit:  7d57652f33

.NET Core SDKs installed:
  3.0.100 [/usr/share/dotnet-3.0.100/sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.NETCore.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download
```






</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39275</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix multi-line error messages in Azure DevOps runs</Title>
    <Description>Example test failure message: https://dev.azure.com/dnceng/public/_build/results?buildId=381807&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=11806886&amp;paneView=debug&amp;resultId=122183

It appears as:
`\r\nExpected:\r\n                Diagnostic(ErrorCode.ERR_AttributesInLocalFuncDecl, \"[EnumeratorCancellation]\").WithLocation(13, 70)\r\nActual:\r\n                // (13,70): error CS8652: The feature 'local function attributes' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version.\r\n                //         async System.Collections.Generic.IAsyncEnumerable&lt;int&gt; local([EnumeratorCancellation] CancellationToken token)\r\n                Diagnostic(ErrorCode.ERR_FeatureInPreview, \"[EnumeratorCancellation]\").WithArguments(\"local function attributes\").WithLocation(13, 70)\r\nDiff:\r\n++&gt;                 Diagnostic(ErrorCode.ERR_FeatureInPreview, \"[EnumeratorCancellation]\").WithArguments(\"local function attributes\").WithLocation(13, 70)\r\n--&gt;                 Diagnostic(ErrorCode.ERR_AttributesInLocalFuncDecl, \"[EnumeratorCancellation]\").WithLocation(13, 70)\r\nExpected: True\r\nActual:   False
`

But it's expected to render the line breaks like so:

```
Expected:
                Diagnostic(ErrorCode.ERR_AttributesInLocalFuncDecl, "[EnumeratorCancellation]").WithLocation(13, 70)
Actual:
                // (13,70): error CS8652: The feature 'local function attributes' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version.
                //         async System.Collections.Generic.IAsyncEnumerable&lt;int&gt; local([EnumeratorCancellation] CancellationToken token)
                Diagnostic(ErrorCode.ERR_FeatureInPreview, "[EnumeratorCancellation]").WithArguments("local function attributes").WithLocation(13, 70)
Diff:
++&gt;                 Diagnostic(ErrorCode.ERR_FeatureInPreview, "[EnumeratorCancellation]").WithArguments("local function attributes").WithLocation(13, 70)
--&gt;                 Diagnostic(ErrorCode.ERR_AttributesInLocalFuncDecl, "[EnumeratorCancellation]").WithLocation(13, 70)
Expected: True
Actual:   False debugger eval code:1:9
```

Let's play with emitting some multiline error messages manually, try different line endings, maybe check that nothing is interfering/rewriting the error message such as a trace listener.</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39274</IssueID>
    <RepoID>1</RepoID>
    <Title>Attempt to normalize Location paths before creating URIs</Title>
    <Description>The URI path parsing is not the same as Windows path parsing and
sometimes produces incorrect results. However, a canonical Windows
path should produce an equivalent URI. This change uses GetFullPath
for absolute paths passed to the ErrorLogger to normalize the path
before passing it to URIs. For relative paths we try to normalize
the directory separators, but there's no equivalent transformation
that guarantees correctness.

Fixes #37737</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39273</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable optprof check for flow analysis assembly</Title>
    <Description>
    </Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39272</IssueID>
    <RepoID>1</RepoID>
    <Title>Document compiler package usage</Title>
    <Description>Cleaning up the documentation on our compiler toolset packages to make
the supported use cases explicitly clear. Previously this information
was only avaliable in scattered issues throughout the repsitory
([example](https://github.com/dotnet/roslyn/issues/38312)).

The package description is likely the best place for this information.</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39271</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC does not show diagnostic when editing files without method bodies</Title>
    <Description>After adding files without method bodies to PDBs (https://github.com/dotnet/roslyn/pull/39136), 
`BreakMode_RudeEdits_DocumentWithoutSequencePoints` fails with no diagnostics (rude edits) on editing a file without method bodies. It seems more work to be done with `CommitedSolution.cs`</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39270</IssueID>
    <RepoID>1</RepoID>
    <Title>'Add parameter to method' Quick Action can add wrong parameter</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/772301/add-parameter-to-method-quick-action-can-add-wrong.html)._

---
The 'Add parameter' Quick Action can add the wrong parameter in specific situations.
For instance, this will happen when an existing parameter accepts a base class of the passed argument type. 
Is this behaviour by design, or can this be fixed/improved?

Here is some code sample to reproduce the problem:
```
class BaseClass { }

class MyClass : BaseClass
{
    void TestFunc()
    {
        MyClass param1 = new MyClass();
        int newparam = 1;

// The 'Add parameter' Quick Action on the following method call adds the wrong parameter.
        // It should add an 'int newparam' parameter.
        // But instead it adds a 'MyClass param11' parameter.
        MyFunc(param1, newparam);
    }

void MyFunc(BaseClass param1) { }
}

```

---
### Original Comments

#### Visual Studio Feedback System on 10/10/2019, 08:06 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39269</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39268</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39267</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39266</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39265</IssueID>
    <RepoID>1</RepoID>
    <Title>Keyword recommender doesn't know about struct's readonly members</Title>
    <Description>**Version Used**: 
VS 16.3.4

```csharp
struct S
{
    readonly $$
}
```
No `void` keyword here. A `readonly void` method could still modify global state using the value of instance state, so still meaningful.

---

```csharp
struct S
{
    public $$ int X() =&gt; 1;
}
```
`readonly` presents here.

---

```csharp
struct S
{
    public int X
    {
        $$ get =&gt; 1;
    }
}
```
No `readonly` here.

---

```csharp
struct S
{
    public int X
    {
        $$
    }
}
```
No `readonly` here.

---

```csharp
struct S
{
    public int X
    {
        readonly $$
    }
}
```
Recommending types instead of accessor keywords.</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39264</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn doesn't understand pattern-matching null check for properties</Title>
    <Description>**Version Used**: 

```
Branch master (23 Sep 2019)
Latest commit 89b4f60 by Charles Stoner:
Allow conversion of collection initializer Add extension method this arg (#38732)
```

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C
{
    string? field;

    void M1(C c)
    {
        if (c.field == null) return;
        
        c.field.ToString();
    }
    
    void M2(C c)
    {
        if (c is { field: null }) return;
        
        c.field.ToString(); // incorrect CS8602
    }
}
```

**Expected Behavior**:
Both methods report no warnings; If `c.field` is null method returns in both cases before using it.

**Actual Behavior**:
`M2` has an incorrect warning `CS8602: Dereference of a possibly null reference` reported for `c.field.ToString()`

**Notes**
It's actually even worse since such null checks makes Roslyn think that `field` is checked for null but does not update it to non-null on the false branch. Consequently Roslyn reports the warning even if `field` is declared as **non-nullable** `string`
i.e.
```
#nullable enable
class C
{
    string field;
    
    void M2(C c)
    {
        if (c is { field: null }) return;
        
        c.field.ToString(); // incorrect CS8602
    }
}
```

Note that current behavior is quite annoyting since it does not allow me to hande nulls hvia separate patterns in switches e.g.:
```cs
#nullable enable
class C
{
    string? field;
    
    void M2(C c)
    {
        switch (c)
        {
            case { field: null }: break;
            case var copy:
            {
              copy.field.ToString(); // CS8602
              c.field.ToString(); // CS8602
              break;
            }
        }
    }
}
```</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39263</IssueID>
    <RepoID>1</RepoID>
    <Title>C# virtual keyword recommender does not support private protected members</Title>
    <Description>**Version Used**: Visual Studio 2019 Version 16.4

https://github.com/dotnet/roslyn/blob/7bc44488c661fd6bbb6c53f39512a6fe0cc5ef84/src/Features/CSharp/Portable/Completion/KeywordRecommenders/VirtualKeywordRecommender.cs#L12-L20</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39262</IssueID>
    <RepoID>1</RepoID>
    <Title>VB.NET code window doesn't scroll to the handler when selecting a control from the drop-down</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/21762/vbnet-code-window-doesnt-scroll-to-the-handler-whe.html)._

---
In VS2013, in the VB.NET code window, selecting a control from the controls list drop-down would cause the code window to auto-scroll to the handler for that control, if that control only had one handler.

This behaviour is no longer present in VS2017 RC - you have to select the event from the events drop-down to make the code window scroll.

I've illustrated the problem in the following video:

https://youtu.be/PhGAI_jw9PY

I've also attached a test case.

As I explain in the video, when a control has multiple handlers, fair enough - it wouldn't know which section of the code to jump to.  But for buttons there's usually only one, and for other controls too - combo boxes for instance often only have a SelectedIndexChanged event.

It would be great to put the auto-scroll behaviour from VS2013 back in - it's a small thing but makes a significant difference over time.

---
### Original Comments

#### Jane Wu [MSFT] on 8/9/2019, 03:17 AM: 

After 90 days of no priority changing activity, we’ve closed this report. We prioritize based on severity, similar reports, and the overall impact on users and scenarios. We've also learned that reports without fresh activity could indicate that the problem isn't a problem anymore. One of our goals is to give you more transparency around these decisions as resolving every problem that gets reported isn't always possible. Closing low priority tickets helps us manage our workload and focus on problems that impact most users. If you still face this issue in our latest version, please report it as a new problem.

#### Paul Haffner on 10/9/2019, 03:44 PM: 

&lt;p&gt;How are we meant to vote on this issue if it has been closed? This is a serious question, because the issue I raised, which is admittedly a duplicate of this one, has just been answered with the seemingly ridiculous request that I could come to this issue and vote for it.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39424</IssueID>
    <RepoID>1</RepoID>
    <Title>Possible bug in the flow analysis of nullable reference types</Title>
    <Description>I've just enabled the new nullable reference types feature.

In this example, `myObj` is nullable. But shouldn't the compiler understand that myObj won't be null in this case, since I'm testing for it in the if clause?

![image](https://user-images.githubusercontent.com/3394270/66725159-cc007880-ee2e-11e9-8720-04b72fd709b0.png)

I'm using .NET Core 3.0 in VS 2019.</Description>
    <CreatedDate>14/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39261</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove dead class diagram</Title>
    <Description>Is there anyone actually mentioning it? It hasn't changed for 4 years.
Visual editor in IDE always picks alphabetically first file for the partial classes.
Or we should get the outdated diagram removed instead?</Description>
    <CreatedDate>13/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39260</IssueID>
    <RepoID>1</RepoID>
    <Title>The "Convert to conditional expression" refactoring is sometimes mislabeled</Title>
    <Description>**Version Used**: VS 16.4.0 Preview 1.0

**Steps to Reproduce**:

Have code like the following:

```c#
if (AreSimilarCore(node1, node2))
{
    return true;
}

return false;
```

Invoke refactoring on the `if`.

**Actual Behavior**:

VS offers to simplify the code, with the suggestion being labeled as "Convert to conditional expression", even though the refactored code does not contain the conditional expression:

![](https://user-images.githubusercontent.com/287848/66714599-bbadb680-edb8-11e9-80e5-3bec4d6d4164.png)

**Expected Behavior**:

The refactoring is labeled accurately, e.g. with "Simplify if statement".</Description>
    <CreatedDate>13/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39259</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion doesn't show non-static local method in static method</Title>
    <Description>**Version Used**: 
Visual Studio 16.3.4

**Steps to Reproduce**:

```csharp
class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Hello World!");
        int X(int y) =&gt; y + 1;
        static int XS(int y) =&gt; y + 1;
        // caret here
    }

    void M()
    {
        int X(int y) =&gt; y + 1;
        // caret here, for comparison
    }
}
```

**Expected Behavior**:
Both `X` and `XS` should be available in the static method.
**Actual Behavior**:
Only `X` is available.

There should be misusage of `IsStatic` on static local methods.</Description>
    <CreatedDate>13/10/2019</CreatedDate>
    <ClosedDate>13/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39258</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix SourceText.GetChanges exception on merging certain changes</Title>
    <Description>Closes #22289
Closes #26305

See #22289 for full details on the bug.

#### Summary
After certain `WithChanges` calls, `SourceText.GetChanges` is no longer able to handle the `SourceText` state and throws `ArgumentOutOfRangeException` when called.

#### Notes
- Three of the new tests are failing without my change, other tests added just in case.
- I didn't follow "Hello World" pattern in tests, sorry. I found it a bit hard to remember the offsets when using actual words.
- Not fully confident in the change even though the tests pass. The flow is quite complicated and I feel the current coverage might be insufficient.</Description>
    <CreatedDate>13/10/2019</CreatedDate>
    <ClosedDate>20/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39257</IssueID>
    <RepoID>1</RepoID>
    <Title>Include severity values when generating preferred modifier order EditorConfig options</Title>
    <Description>Currently, severity values for `*_preferred_modifier_order` options are not written when generating EditorConfig files. This PR fixes that.

I also updated the `CodeStyleOption.NotificationOption` property to throw when it is assigned to null (it can't be made read-only since the setter is part of the shipped API). I'm not sure how much of a breaking change this is, so please let me know if you want me to revert these changes.</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39256</IssueID>
    <RepoID>1</RepoID>
    <Title>'Implement interface' doesn't handle NRT annotations when constructing a generic interface</Title>
    <Description>**Version Used**: VS 16.3.4

Using 'Implement interface` on classes A, B, C, and D adds incorrect or redundant annotations:

```cs
interface IFoo&lt;T&gt;
{
    [return: NotNull]
    T Bar([DisallowNull] T bar);

    [return: MaybeNull]
    T Baz([AllowNull] T bar);
}

class A : IFoo&lt;int&gt;
{
    [return: NotNull]
    public int Bar([DisallowNull] int bar)
    {
        throw new NotImplementedException();
    }

    [return: MaybeNull]
    public int Baz([AllowNull] int bar)
    {
        throw new NotImplementedException();
    }
}

class B : IFoo&lt;int?&gt;
{
    [return: NotNull]
    public int? Bar([DisallowNull] int? bar)
    {
        throw new NotImplementedException();
    }

    [return: MaybeNull]
    public int? Baz([AllowNull] int? bar)
    {
        throw new NotImplementedException();
    }
}

class C : IFoo&lt;string&gt;
{
    [return: NotNull]
    public string Bar([DisallowNull] string bar)
    {
        throw new NotImplementedException();
    }

    [return: MaybeNull]
    public string Baz([AllowNull] string bar)
    {
        throw new NotImplementedException();
    }
}

class D : IFoo&lt;string?&gt;
{
    [return: NotNull]
    public string? Bar([DisallowNull] string? bar)
    {
        throw new NotImplementedException();
    }

    [return: MaybeNull]
    public string? Baz([AllowNull] string? bar)
    {
        throw new NotImplementedException();
    }
}
```

Expected:

```cs
class A : IFoo&lt;int&gt;
{
    public int Bar(int bar)
    {
        throw new NotImplementedException();
    }

    public int Baz(int bar)
    {
        throw new NotImplementedException();
    }
}

class B : IFoo&lt;int?&gt;
{
    [return: NotNull]
    public int? Bar([DisallowNull] int? bar)
    {
        throw new NotImplementedException();
    }

    public int? Baz(int? bar)
    {
        throw new NotImplementedException();
    }
}

class C : IFoo&lt;string&gt;
{
    public string Bar(string bar)
    {
        throw new NotImplementedException();
    }

    // Would be nice to replace attributes with `string?`, but this causes "CS8613 Nullability
    // of reference types in return type doesn't match implicitly implemented member."
    // Point-in-time issue maybe?
    [return: MaybeNull]
    public string Baz([AllowNull] string bar)
    {
        throw new NotImplementedException();
    }
}

class D : IFoo&lt;string?&gt;
{
    // Would be nice to replace attributes with `string`, but this causes "CS8613 Nullability
    // of reference types in return type doesn't match implicitly implemented member."
    // Point-in-time issue maybe?
    [return: NotNull]
    public string? Bar([DisallowNull] string? bar)
    {
        throw new NotImplementedException();
    }

    public string? Baz(string? bar)
    {
        throw new NotImplementedException();
    }
}
```</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39255</IssueID>
    <RepoID>1</RepoID>
    <Title>Signature help sometimes fails to wrap, preventing the current parameter from being seen</Title>
    <Description>**Version Used**: VS 16.3.4

Repro:

```cs
public static class C
{
    public static void M()
    {
        var longVariableNameForSpacing = Method([||]
    }

    public static object Method(
        System.Collections.Generic.Dictionary&lt;string, string&gt; a,
        System.Collections.Generic.Dictionary&lt;string, string&gt; b,
        System.Collections.Generic.Dictionary&lt;string, string&gt; c,
        System.Collections.Generic.Dictionary&lt;string, string&gt; d,
        System.Collections.Generic.Dictionary&lt;string, string&gt; e)
    {
        return null;
    }
}
```

![image](https://user-images.githubusercontent.com/8040367/66706586-8c3c7280-ed02-11e9-9962-00880c4d2de7.png)

Pixel density is at 125% for these monitors, resolution 2560x1440.</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39254</IssueID>
    <RepoID>1</RepoID>
    <Title>Parse test analyzer data using InvariantCulture</Title>
    <Description>Fixes #39248.

I quickly went over all other references to `EnsureEnglishUICulture.PreferredOrNull` and to my knowledge this is the only place where it is used to parse numeric data, so I don't believe its behavior needs to be changed.</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39253</IssueID>
    <RepoID>1</RepoID>
    <Title>'Generate Equals' should use `is object` rather than `!= null`</Title>
    <Description>Mentioned by @sharwell at https://github.com/dotnet/roslyn/pull/39242#discussion_r334215178.  

My own awareness of `is object` began at https://twitter.com/jaredpar/status/1115019017297596416:

&gt; Think developers should embrace `is object` as the canonical non-null test in C#. It works in every version, won't compile when the expression type is a struct, logical opposite of `is null`, emits efficient IL, ... the only fault you can say is the name isn't obvious.

https://twitter.com/jaredpar/status/1171474157667643400:

&gt; Another developer converted to "x is object" as the canonical null check in C#. If I have to go dev by dev to achieve correctness then so be it.

(@jaredpar hope you don't mind me referencing your feed...)

After the 9.0 candidate https://github.com/dotnet/csharplang/issues/1350 makes it into the language, I believe the canonical non-null test will be `is not null`.</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39252</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Windows Build Instructions To Enable .NET Core SDK Previews</Title>
    <Description>Updates the Windows build instructions to reflect the new location of the enable previews of the .NET Core SDK option in Visual Studio 16.3.4. (See Screenshot below).

![Preview](https://user-images.githubusercontent.com/4162227/66704763-0b3ba600-ed17-11e9-9960-2ae66be7ffd1.JPG)
</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39251</IssueID>
    <RepoID>1</RepoID>
    <Title>Move C#-specific shared code style options to CSharpCodeStyleOptions</Title>
    <Description>Fixes #30042.

Most changes are fairly straightfoward, but one significant change is `GenerateConstructorFromMembersCodeRefactoringProvider` being made abstract and split into language-specific implementations.

To get around the issues of certain shared features depending on the now inaccessible PreferThrowExpression option, I added abstract methods for retrieving the value of the option that are overridden by the language-specific implementations. I'm not sure if it's the best way of handling it, but it minimizes the impact of the option being moved and was the solution I felt the most comfortable going with.</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39250</IssueID>
    <RepoID>1</RepoID>
    <Title>Implicit call to base constructor with optional parameter</Title>
    <Description>**Version Used**: 
C# 8 compiler

**Steps to Reproduce**:
Write this code:

```csharp
class Base
{
    public Base(int x = 0) { }
}

class Derived : Base { }
```

**Expected Behavior**:

I would expect this code to fail to compile. `Base` doesn't have a default constructor, so `Derived` should be required to explicitly call a base constructor. The fact that the base class constructor has an optional parameter shouldn't change that.

**Actual Behavior**:

The code compiles. The compiler implicitly emits a call to `base(0)`:

```il
IL_0000:  ldarg.0     
IL_0001:  ldc.i4.0    
IL_0002:  call        Base..ctor
IL_0007:  ret         
```
---
Is this behavior intentional or is it a bug ?</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39249</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate proper nullability annotation for IEquatable.Equals</Title>
    <Description>Fixes #39243, fixes #38069

If you take the first commit (adding tests) without the second commit (implementation change), you will actually get a debug assertion failure when the name simplifier tries to simplify the generated `[AllowNull]` name:

https://github.com/dotnet/roslyn/blob/97b75fcb5807881b0e768357b82c1a3476a3ec2c/src/Compilers/CSharp/Portable/Compilation/MemberSemanticModel.cs#L157-L162

I don't know how important this is.

Since `[AllowNull]` is no longer generated when generating the Equals method, it isn't interfering with this PR.

Stack trace:

&lt;details&gt;

```
   at System.Diagnostics.Debug.Assert(Boolean condition)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetRemappedSymbols() in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Compilation\MemberSemanticModel.cs:line 160
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.CreateSpeculativeAttributeSemanticModel(Int32 position, AttributeSyntax attribute, Binder binder, AliasSymbol aliasOpt, NamedTypeSymbol attributeType) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Compilation\SyntaxTreeSemanticModel.cs:line 746
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.TryGetSpeculativeSemanticModel(Int32 position, AttributeSyntax attribute, SemanticModel&amp; speculativeModel) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Compilation\CSharpSemanticModel.cs:line 2554
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.TryGetSpeculativeSemanticModel(SemanticModel semanticModel, Int32 position, AttributeSyntax attribute, SemanticModel&amp; speculativeModel) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\CSharpExtensions.cs:line 1136
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.CreateSpeculativeSemanticModelForNode(SyntaxNode nodeToSpeculate, SemanticModel semanticModel, Int32 position, Boolean isInNamespaceOrTypeContext) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Utilities\SpeculationAnalyzer.cs:line 142
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.CreateSpeculativeSemanticModelForNode(SyntaxNode originalNode, SyntaxNode nodeToSpeculate, SemanticModel semanticModel) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Utilities\SpeculationAnalyzer.cs:line 103
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.CreateSpeculativeSemanticModel(SyntaxNode originalNode, SyntaxNode nodeToSpeculate, SemanticModel semanticModel) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Utilities\SpeculationAnalyzer.cs:line 96
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.EnsureSpeculativeSemanticModel() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Utilities\AbstractSpeculationAnalyzer.cs:line 185
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.get_SpeculativeSemanticModel() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Utilities\AbstractSpeculationAnalyzer.cs:line 149
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode originalRoot, Boolean skipVerificationForCurrentNode) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Utilities\AbstractSpeculationAnalyzer.cs:line 419
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Utilities\AbstractSpeculationAnalyzer.cs:line 408
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(NameSyntax name, TypeSyntax reducedName, SemanticModel semanticModel, CancellationToken cancellationToken) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Extensions\ExpressionSyntaxExtensions.cs:line 2218
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Extensions\ExpressionSyntaxExtensions.cs:line 1774
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Extensions\ExpressionSyntaxExtensions.cs:line 809
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression, SemanticModel semanticModel, ExpressionSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Extensions\ExpressionSyntaxExtensions.cs:line 767
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node, SemanticModel semanticModel, OptionSet optionSet, CancellationToken cancellationToken) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\CSharpNameReducer.cs:line 48
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyNode[TNode](TNode node, SyntaxNode newNode, SyntaxNode parentNode, Func`5 simplifier) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\AbstractCSharpReducer.AbstractReductionRewriter.cs:line 125
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyExpression[TExpression](TExpression expression, SyntaxNode newNode, Func`5 simplifier) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\AbstractCSharpReducer.AbstractReductionRewriter.cs:line 149
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\CSharpNameReducer.Rewriter.cs:line 47
   at Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Syntax.Generated.cs:line 429
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Syntax\CSharpSyntaxRewriter.cs:line 39
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Main.Generated.cs:line 2615
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\CSharpNameReducer.Rewriter.cs:line 65
   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Syntax.Generated.cs:line 155
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Syntax\CSharpSyntaxRewriter.cs:line 39
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Main.Generated.cs:line 2615
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\CSharpNameReducer.Rewriter.cs:line 65
   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Syntax.Generated.cs:line 155
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Syntax\CSharpSyntaxRewriter.cs:line 39
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Main.Generated.cs:line 2615
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\CSharpNameReducer.Rewriter.cs:line 65
   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Syntax.Generated.cs:line 155
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Syntax\CSharpSyntaxRewriter.cs:line 39
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAttribute(AttributeSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Main.Generated.cs:line 3734
   at Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Syntax.Generated.cs:line 13507
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Syntax\CSharpSyntaxRewriter.cs:line 39
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken, SemanticModel semanticModel, Boolean simplifyAllDescendants) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\AbstractCSharpReducer.AbstractReductionRewriter.cs:line 188
   at Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;&gt;c__DisplayClass10_1.&lt;&lt;ReduceAsync&gt;b__0&gt;d.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Simplification\AbstractSimplificationService.cs:line 248
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;ReduceAsyncInternal&gt;d__9.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Simplification\AbstractSimplificationService.cs:line 137
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;ReduceAsync&gt;d__8.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Simplification\AbstractSimplificationService.cs:line 76
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Simplification.Simplifier.&lt;ReduceAsync&gt;d__14.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Simplification\Simplifier.cs:line 165
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;CleanupDocumentAsync&gt;d__29.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeAction.cs:line 274
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;PostProcessChangesAsync&gt;d__27.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeAction.cs:line 234
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;PostProcessAsync&gt;d__26.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeAction.cs:line 203
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;GetOperationsCoreAsync&gt;d__16.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeAction.cs:line 89
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.GenerateEqualsAndGetHashCodeFromMembers.GenerateEqualsAndGetHashCodeFromMembersCodeRefactoringProvider.GenerateEqualsAndGetHashCodeWithDialogCodeAction.&lt;ComputeOperationsAsync&gt;d__10.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Features\Core\Portable\GenerateEqualsAndGetHashCodeFromMembers\GenerateEqualsAndHashWithDialogCodeAction.cs:line 90
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.&lt;GetOperationsAsync&gt;d__1.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeActionWithOptions.cs:line 37
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.&lt;GetOperationsCoreAsync&gt;d__2.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeActionWithOptions.cs:line 51
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;VerifyActionAndGetOperationsAsync&gt;d__31.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\EditorFeatures\TestUtilities\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 565
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestActionAsync&gt;d__27.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\EditorFeatures\TestUtilities\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 404
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestAsync&gt;d__26.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\EditorFeatures\TestUtilities\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 388
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestInRegularAndScript1Async&gt;d__24.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\EditorFeatures\TestUtilities\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 351
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.GenerateEqualsAndGetHashCodeFromMembers.GenerateEqualsAndGetHashCodeFromMembersTests.&lt;TestImplementIEquatableOnClassInNullableContextWithAnnotatedMetadata&gt;d__53.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\EditorFeatures\CSharpTest\GenerateFromMembers\GenerateEqualsAndGetHashCodeFromMembers\GenerateEqualsAndGetHashCodeFromMembersTests.cs:line 1762
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```

&lt;/details&gt;</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39248</IssueID>
    <RepoID>1</RepoID>
    <Title>Tests in PerformanceTrackerServiceTests fail when the current English language culture uses a different number format</Title>
    <Description>When running the included tests on my Windows 10 machine, which has its display language set to English (United States) and its regional settings set to English (Sweden) (en-SE), four of the five tests in the `PerformanceTrackerServiceTests` class fail with the message "System.InvalidOperationException : Sequence contains no elements".

Digging a bit deeper shows that the cause of the exception is a section of code in the `PerformanceTrackerServiceTests.CreateMatrix()` method which tries to parse numeric values like `7.0` as doubles and fails to do so because the en-SE culture has its decimal separator set to a comma and not a period.

The format provider used to parse the numbers is resolved via `EnsureEnglishUICulture.PreferredOrNull`, which returns null if `CultureInfo.CurrentUICulture.Name` starts with "en" and `CultureInfo.InvariantCulture` otherwise. The intention seems to be to always try to fall back to the current culture if it appears to be a common English language culture like en-US or en-UK that have a lot of formatting settings in common, but this doesn't always work when the current culture is en-SE or some other less common culture.

I have fixed this issue locally by simply forcing the use of `CultureInfo.InvariantCulture` when parsing the numeric values in these particular tests, but I think it could also be worth looking into `EnsureEnglishUICulture.PreferredOrNull` and maybe restricting it to a strict subset of English language cultures that are known to work. Let me know if you would like me to submit my proposed changes as a pull request.</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39247</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39246</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39245</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39244</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39243</IssueID>
    <RepoID>1</RepoID>
    <Title>'Generate Equals' does not annotate Equals(T) to allow nulls and causes CS8604</Title>
    <Description>**Version Used**: 16.4p1

In .NET Core 3.0, `IEquatable.Equals` is annotated to accept a nullable parameter:

```cs
    public interface IEquatable&lt;T&gt;
    {
        bool Equals([AllowNull] T other);
    }
```

https://github.com/dotnet/coreclr/blob/v3.0.0/src/System.Private.CoreLib/shared/System/IEquatable.cs#L11

But on earlier versions of .NET Core, on .NET Standard, and on .NET Framework, in a project where NRTs are enabled, `IEquatable&lt;&gt;.Equals` does not have this attribute. The generated code in this situation is overly restrictive (**actual**):

```cs
#nullable enable

class Foo : IEquatable&lt;Foo&gt;
{
    public int Bar { get; }

    public override bool Equals(object? obj)
    {
        // CS8604 Possible null reference argument for parameter 'other' in 'bool Foo.Equals(
        // Foo other)'.
        //            ↓
        return Equals(obj as Foo);
    }

    public bool Equals(Foo other)
    {
        return other != null &amp;&amp;
               Bar == other.Bar;
    }
}
```

This code should be generated for all targets:

```cs
#nullable enable

class Foo : IEquatable&lt;Foo&gt;
{
    public int Bar { get; }

    public override bool Equals(object? obj)
    {
        return Equals(obj as Foo);
    }

    public bool Equals(Foo? other)
    {
        return other != null &amp;&amp;
               Bar == other.Bar;
    }
}
```</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39242</IssueID>
    <RepoID>1</RepoID>
    <Title>Use lifted operator in generated Equals if the underlying type's operator would have been used</Title>
    <Description>Closes #39236

</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39241</IssueID>
    <RepoID>1</RepoID>
    <Title>Able to navigate to generated file in blazor app</Title>
    <Description>In creating a new blazor app, with no modifications, I was getting errors in *.g.cs files and able to click the error list to navigate to them. 

![image](https://user-images.githubusercontent.com/475144/66690068-98f99180-ec42-11e9-82fc-ad0a851828a2.png)
</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39240</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion inside a switch expression on an enum should preselect the enum</Title>
    <Description>**Version Used**: 16.4.0 Preview 3.0 [29410.161.master]

**Steps to Reproduce**:

1. Create a new console app.
2. Start typing:

```csharp
            ConsoleColor color;
            var number = color switch {  
```

**Expected Behavior**: I expect that ConsoleColor is preselected since we're switching on an enum, just like we would do in a switch statement. I'd also expect that typing space after the { _immediately_ triggers completion just like it would in a switch block.

**Actual Behavior**: It doesn't do either of these behaviors.</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39239</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename tracking is active but uninvokable in ASP.NET projects</Title>
    <Description>**Steps to Reproduce**:

1. Create a new ASP.NET project of some kind that has a .razor file.
2. In the Razor file, go into the @code section or a @ expression, and change an identifier name.

**Expected Behavior**: No rename tracking is active.

**Actual Behavior**: we do our dotted outline showing it's active:

![image](https://user-images.githubusercontent.com/201340/66689472-dd376280-ec3f-11e9-9579-a1e50cd4eda1.png)

However, the command can't actually be invoked.

Seems we should either make it invokable (hard?) or at least don't track renames in buffers where the command is disabled.
</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39238</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect IDE0059: Unnecessary assignment of a value (simple example)</Title>
    <Description>The following assignment is not unnecessary, and not even a double assignment: 
```
Severity minLogLevel; 
try {
    minLogLevel = LogLevel;  // property accessor might fail
    if (severity &lt; minLogLevel)
        return;  // skip message
}
catch {  // ignore any error, but if the assignment failed, minLogLevel should have a meaningful value
    minLogLevel = Severity.Info;  // IDE0059 (Info value is 1)
}
```

The same thing happens if I move the assignment (here we do have a double assignment, but it is not unnecessary in case of errors, even if they all get caught, it does make a difference for the following code): 
```
Severity minLogLevel = Severity.Info;  // IDE0059 (Info value is 1)
try {
    minLogLevel = LogLevel;  // property accessor might fail
    if (severity &lt; minLogLevel)
        return;  // skip message
}
catch { }  // ignore any error, but if the assignment failed, minLogLevel should have a meaningful value
```
</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>11/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39237</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate SourceText and derived types</Title>
    <Description>
    </Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39236</IssueID>
    <RepoID>1</RepoID>
    <Title>'Generate Equals' should use lifted == operator on nullables if it would have used == for the underlying type</Title>
    <Description>**Version Used**: 16.3.4, 16.4p1

In any situation where `==` is *already* being generated as the most preferable option for a value type, I believe `==` would be the most preferable option for the nullable version of that value type:

Actual:

```cs
class Foo
{
    public decimal A { get; }
    public decimal? B { get; }

    public override bool Equals(object? obj)
    {
        return obj is Foo foo &amp;&amp;
               A == foo.A &amp;&amp;
               EqualityComparer&lt;decimal?&gt;.Default.Equals(B, foo.B);
    }
}
```

Expected:

```cs
class Foo
{
    public decimal A { get; }
    public decimal? B { get; }

    public override bool Equals(object? obj)
    {
        return obj is Foo foo &amp;&amp;
               A == foo.A &amp;&amp;
               B == foo.B;
    }
}
```

Would you accept a PR? I recently implemented https://github.com/dotnet/roslyn/issues/31984, so my head is still in this space.</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39235</IssueID>
    <RepoID>1</RepoID>
    <Title>LanguageVersionFacts.MapSpecifiedToEffectiveVersion(LanguageVersion.Preview) returns LanguageVersion.Preview</Title>
    <Description>**Version Used**: 

Microsoft.CodeAnalysis.CSharp v3.3.0.0 (C# 8 RTM, VS 16.3.3)

**Steps to Reproduce**:

Call `LanguageVersionFacts.MapSpecifiedToEffectiveVersion(LanguageVersion.Preview)`

**Expected Behavior**:

Should return LanguageVersion.CSharp8

**Actual Behavior**:

Returns LanguageVersion.Preview</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39234</IssueID>
    <RepoID>1</RepoID>
    <Title>MoveToNamespaceCodeActionProvider crashed with ArgumentOutOfRangeException in multi-targetFrameworks projects</Title>
    <Description>**Version Used**: 
VS2019 16.4.0Preview1

**Steps to Reproduce**:

1. Create an csproj and modify to multi targetFrameworks;
```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFrameworks&gt;netstandard2.0;net472&lt;/TargetFrameworks&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;

```
2. Create an cs file with 2 classes;
```cs
using System;

namespace ClassLibrary1.A
{
    public class Class1
    {
    }

    public class Class2
    {
    }
}
```
3. call `Quick Actions/Move to Namespace` on the last class `Class2`, type any namespace and click `OK`;

**Expected Behavior**:
It should work as it does with single-targetFramework projects

**Actual Behavior**:
```cs
System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.
Parameter name: span
   at Microsoft.CodeAnalysis.SyntaxNode.FindNode(TextSpan span,Boolean findInsideTrivia,Boolean getInnermostNodeForTie)
   at async Microsoft.CodeAnalysis.CSharp.ChangeNamespace.CSharpChangeNamespaceService.TryGetApplicableContainerFromSpanAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ChangeNamespace.AbstractChangeNamespaceService`3.TryGetApplicableContainersFromAllDocumentsAsync[TNamespaceDeclarationSyntax,TCompilationUnitSyntax,TMemberDeclarationSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CSharp.ChangeNamespace.CSharpChangeNamespaceService.GetValidContainersFromAllLinkedDocumentsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ChangeNamespace.AbstractChangeNamespaceService`3.ChangeNamespaceAsync[TNamespaceDeclarationSyntax,TCompilationUnitSyntax,TMemberDeclarationSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`2.MoveItemsInNamespaceAsync[TNamespaceDeclarationSyntax,TNamedTypeDeclarationSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`2.MoveTypeToNamespaceAsync[TNamespaceDeclarationSyntax,TNamedTypeDeclarationSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceCodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOperationsAsync(&lt;Unknown Parameters&gt;)
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass20_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
```</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39233</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix 'ref' parsing crash</Title>
    <Description>Closes #39072</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39232</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>11/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39231</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>11/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39230</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>11/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39229</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/10/2019</CreatedDate>
    <ClosedDate>11/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39228</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix IDE0009 false positive on local functions</Title>
    <Description>Fixes #38043 and adds relevant test.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39227</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust syntax equivalence to account for nullable directives</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38694. @dotnet/roslyn-compiler @CyrusNajmabadi for review.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39226</IssueID>
    <RepoID>1</RepoID>
    <Title>Local function attributes emit</Title>
    <Description>Related to #38801</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39225</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove CPS restriction for applying rename during code fix</Title>
    <Description>Fixes #37469 

There's no reason I know of to restrict this</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39224</IssueID>
    <RepoID>1</RepoID>
    <Title>Show code instead of designer, but only after trying to create the designer loader</Title>
    <Description>Related to https://github.com/dotnet/winforms-designer/issues/942

This is needed because the winforms designer would like to show a gold bar in VS if the user tries to load the new .NET Core designer without the VSIX installed. The existing logic goes to the "code" view immediately if the VSIX is not installed. 

I've removed the detection of the VSIX from this code, and will move that into `DesignerActivationService.CreateDesignerLoader()` in the Visual Studio source, which will allow us to show the error message before going to code view.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39223</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC: Recover from unexpected exceptions in Emit, ReadChecksum</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39222</IssueID>
    <RepoID>1</RepoID>
    <Title>Revisit TaskFactoryExtensions.SafeStartNew* methods</Title>
    <Description>The current implementation wraps the given action into try-catch with fail fast crash.
This is not the best approach in most cases (we should recover from the exception and report NFW if possible) and where it is it should be explicit.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39221</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename Crash</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/765196/重命名崩溃.html)._

---
Crash as soon as you rename

---
### Original Comments

#### Fiona Niu[MSFT] on 10/9/2019, 01:36 AM: 

&lt;p&gt;Thank you for taking the time to log this issue!&lt;br&gt;
I’ve tried to reproduce and investigate using the description, and attachments already provided. Unfortunately those aren’t enough and more information is needed in order to investigate it further.&lt;br&gt;
The easiest way to provide all the information is to use the Visual Studio Feedback Tool. This will ensure that we collect the needed information for you without worrying about what to provide (recording, dump file or ETL trace).&lt;br&gt;
Since this issue is now marked as Need More Info, that workflow is enabled in the Feedback Tool:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;• Open Visual Studio Feedback tool.
• Click the banner letting you know that you have problems requesting your attention.
• Click this problem from the list
• Click &amp;quot;View their request and respond&amp;quot; from the problem details banner
• Add a comment, in the Attachments/Record: click Start Recording
• When the Steps Recorder tool appears, perform the steps that reproduce the problem.
• When you're done, choose the Stop Record button.
• Wait a few minutes for Visual Studio to collect and package the information that you recorded.
• Submit. You will be able to see the comment on Developer Community. For security reasons, your files come directly to us and don't appear on Developer Community.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the full instructions, please see: &lt;a target='_blank' href="https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio-2017?view=vs-2017#when-further-information-is-needed-need-more-info"&gt;https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio-2017?view=vs-2017#when-further-information-is-needed-need-more-info&lt;/a&gt; . For information about what data is collected, see &lt;a target='_blank' href="https://docs.microsoft.com/en-us/visualstudio/ide/developer-community-privacy?view=vs-2017#data-we-collect"&gt;https://docs.microsoft.com/en-us/visualstudio/ide/developer-community-privacy?view=vs-2017#data-we-collect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We look forward to hearing from you!&lt;/p&gt;

#### Fiona Niu[MSFT] on 10/10/2019, 00:25 AM: 

&lt;p&gt;Thanks a lot for providing the information. We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps. We’ll close the new ticket with the requested information.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39220</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn doesn't handle inferred nullability in the presence of `goto`.</Title>
    <Description>**Version Used**: 
```
Branch master (23 Sep 2019)
Latest commit 89b4f60 by Charles Stoner:
Allow conversion of collection initializer Add extension method this arg (#38732)
```

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
class C&lt;T&gt;
{
  public C(T t) =&gt; Property = t;
  public T Property { get; }
}

class Program
{
  static void Main()
  {
    Test("");
  }
  
  static void Test(string? s)
  {
    if (s == null) return;
    
    hell:
    var c = GetC(s);
    switch (c)
    {
      case { Property: var prop }:
        prop.ToString();
        break;
    }
    
    s = null;
    goto hell;
  }
  
  public static C&lt;T&gt; GetC&lt;T&gt;(T t) =&gt; new C&lt;T&gt;(t);
}
```

**Expected Behavior**:
`warning CS8602: Dereference of a possibly null reference.` reported for `prop.ToString()`

**Actual Behavior**:
No warnings are reported for the program above. The program crashes at runtime with a `NullReferenceException`

**Notes**
If you specify the type of `c` explicitly i.e. `C&lt;string?&gt; c = GetC(s);` you'll get the correct warning.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39219</IssueID>
    <RepoID>1</RepoID>
    <Title>Default Interface Methods fail with generic constraints. Throws VerificationException.</Title>
    <Description>**Version Used**: net core 3.0.100

**Steps to Reproduce**:

```csharp
using System.Collections.Generic;
using System.Threading.Tasks;

class Program
{
    interface IApiControllerCRUD&lt;IEntity&gt;
    {
        async Task&lt;IEnumerable&lt;T&gt;&gt; GetAsync&lt;T&gt;() where T : IEntity
        {
            return new List&lt;T&gt;();
        }
    }

    class MyApiController : IApiControllerCRUD&lt;IMyEntity&gt; { }
        
    interface IMyEntity { }
    class MyEntity : IMyEntity { }
    class MyEntityViewModel : IMyEntity { }

    static async Task Main(string[] args)
    {
        IApiControllerCRUD&lt;IMyEntity&gt; api = new MyApiController();
        IEnumerable&lt;MyEntityViewModel&gt; sadFace = await api.GetAsync&lt;MyEntityViewModel&gt;();
    }
}
```

The exception I get: 
##
`System.Security.VerificationException`:
**Method DefaultInterfaceMethodsExceptionRepro.Program+IApiControllerCRUD`1[DefaultInterfaceMethodsExceptionRepro.Program+IMyEntity].GetAsync: type argument 'T' violates the constraint of type parameter 'T'.**</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39218</IssueID>
    <RepoID>1</RepoID>
    <Title>C#, Simplify init refactoring also for arrays</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/768513/c-simplify-init-refactoring-also-for-arrays.html)._

---
```
class RFE_SimplifyInit
{
  struct S { public int a, b; }
  void working()
  {
    S s = new S();
    s.a = 1;
    s.b = 2;
  }
  void rfe()
  {
    int[] rg = new int[2];
    rg[0] = 1;
    rg[1] = 2;
  }
}
```
Working example:
- Place cursor on line `S s =`.
- Invoke QuickActions.

Result: You get the option `Object initialization can be simplified`, and when executed you get the expected
```
S s = new S
{
  a = 1,
  b = 2
};
```

RFE:
- Place cursor on line `int[] rg =`.
- Invoke QuickActions.

Result: No option to simplify.

Expected: Option to simplify, with result
```
int[] rg = new int[2]
{
  1,
  2
};
```

Considerations, expected limitations:
For implementation simplicity, and to retain sematical correctness and sequence points in case init expressions are more complex, only consider the refactoring when array-elements assignments index-order is both sequential and starting from zero.

---
### Original Comments

#### Jane Wu [MSFT] on 10/10/2019, 00:14 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39217</IssueID>
    <RepoID>1</RepoID>
    <Title>Xml commit Support xml:lang</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/357090/xml-commit-support-xmllang.html)._

---
&lt;p&gt;I write some lib to release to nuget, But XML commit doc is one language only, I Need Localization it so Friendly to Non-native users.&lt;/p&gt;&lt;p&gt;Some like:&lt;/p&gt;&lt;pre&gt;       /// &amp;lt;summary&amp;gt;
        /// Check a variable is defined
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;summary xml:lang=&amp;quot;zh-CN&amp;quot;&amp;gt;
        /// 获取指定命名的变量是否存在
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;name&amp;quot;&amp;gt;Variable name&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;quot;name&amp;quot; xml:lang=&amp;quot;zh-CN&amp;quot;&amp;gt;变量名&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;Return True if variable has already been defined &amp;lt;/returns&amp;gt;
        /// &amp;lt;returns xml:lang=&amp;quot;zh-CN&amp;quot;&amp;gt;如果变量已经定义返回 True, 否则返回 false&amp;lt;/returns&amp;gt;
        public bool IsDefined(string name)
        {
            return mVariables.ContainsKey(name);
        }
&lt;/pre&gt;

---
### Original Comments

#### jock li on 10/14/2018, 01:07 AM: 

&lt;p&gt;I readed about https://docs.microsoft.com/en-us/nuget/create-packages/creating-localized-packages&lt;/p&gt;&lt;p&gt;But Maybe IDE auto split is better Experience.&lt;/p&gt;

#### Fiona Niu[MSFT] on 10/15/2018, 00:31 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about five business days on our next steps. &lt;/p&gt;
#### Dinakar Nethi [MSFT] on 11/13/2018, 05:51 PM: 

&lt;p&gt;Your suggestion has been queued up for prioritization.  Feature suggestions are prioritized based on the value to our broader developer community and the product roadmap. We may not be able to pursue this one immediately, but we will continue to monitor it up to 90 days for community input&lt;/p&gt;
</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39216</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable optimization for flow analysis utilities.</Title>
    <Description>Disable optimization for flow analysis package</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>11/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39215</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix AddImports codefix on implicit extension methods</Title>
    <Description>See #39155. If that's by-design and cannot be changed any more, please close that issue.
Fixes #25861, but missing unit test.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39214</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39213</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39212</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39211</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39210</IssueID>
    <RepoID>1</RepoID>
    <Title>error CS0029: Cannot implicitly convert type 'STCADPro.Model.SCFrequency [STCADPro.Model, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]' to 'STCADPro.Model.SCFrequency'</Title>
    <Description>Hi,

When running script using **CodeAnalysis**  I receive an exception saying I cannot convert to a type, but **the types are exactly the same!**   Please help! I'm stuck on this for a few days.

The code is something like:
```
var mscorlib = typeof(System.Object).Assembly;
var systemCore = typeof(System.Linq.Enumerable).Assembly;
var stcad = typeof(SCProjects).Assembly;
scriptOptions = ScriptOptions.Default.AddReferences(mscorlib, systemCore, stcad);
scriptOptions = scriptOptions.AddImports("System", "System.IO", "System.Threading.Tasks", "System.Linq","STCADPro.Model", "STCADPro.Physics");

var state_ = CSharpScript.RunAsync(@"", scriptOptions).Result;
state_ = state_.ContinueWithAsync("SCFrequency P3 = new SCFrequency();", scriptOptions).Result;
state_ = state_.ContinueWithAsync("SCFrequency P4 = P3; ", scriptOptions).Result;
````

That's basically initializing the script engine running first code (RunAsync) and then using the previous result as new state using ContinueWithAsync.  I think this is classic schema. I would put this into a loop as this has to be an interpreter (command line), a  REPL.

I added the assembly STCAD Pro using typeof(SCProjects).Assembly,  SCProjects is a class of that assembly. 

The problem comes in the last line with: SCFrequency P4 = P3  , the system does not understand P4 is the same type as P3.   
Interestingly if I parse all the code at once, it works. So I have the impression that between calls some reference to the assembly are lost and perhaps duplicated, and even it's the same assembly (and DLL file), it complains.

**Version Used**: 
CodeAnalysis:
2.4, but I tried also
3.4.0-beta1-final (latest available)

Visual Studio 2019 Community. 16.3.3.

**Steps to Reproduce**:

1.   Run the code above. It requires the STCAD Model library, I'm sorry I can't deliver this library. But I think is not related to the library but any other external library may have the same problem.
2.  Last line of script (SCFrequency P3 = P4;)  shall be executed without problem.  
3.  However there is an exception thrown, see below.

In this example the class used is SCFrequency, but I tried with other classes in the assembly STCAD Pro Model  and the problem also exists.

STCAD Pro Model is a Project which is in the same solution! It is added as a project reference and its DLL copied to the output folder. Except for this issue, everything works well in this app.
Actually this code is executed from a class **in the same assembly!**

**Exception received**

{"(1,18): error CS0029: Cannot implicitly convert type 'STCADPro.Model.SCFrequency [STCADPro.Model, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]' to 'STCADPro.Model.SCFrequency [C:\\Projects\\STCAD Pro 2018\\trunk\\STCAD Pro GUI\\bin\\Debug\\STCADPro.Model.dll]'"}

THANKS!
Ray</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39209</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate NamespaceOrTypeSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39208</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate TypeSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39207</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of ITypeParameterSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39206</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IAnonymousTypeTemplateSymbolInternal</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39205</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IPropertySymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39204</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of INamespaceSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39203</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IPointerTypeSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39202</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IRangeVariableSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39201</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IPreprocessingSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39200</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IParameterSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39199</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IModuleSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39198</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of ILocalSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39197</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of ILabelSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39196</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IFieldSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39195</IssueID>
    <RepoID>1</RepoID>
    <Title>Add nullable annotations to EnC impl</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39194</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IEventSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39193</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense provides wrong enum suggestions with overloads when different enums can be on the same position</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/736970/wrong-suggestion-in-messageboxshow-method.html)._

Type System.Windows.Forms.MessageBox.Show and begin to fill parameters like "string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon". When you reach the last parameter VS suggests you to enter an enum object belongs to MessageBoxButtons type instead of MessageBoxIcon type.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39192</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IErrorTypeSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39191</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IDynamicTypeSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39190</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IDiscardSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39189</IssueID>
    <RepoID>1</RepoID>
    <Title>Removed deprecated DPL code</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39188</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IAssemblySymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39187</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IArrayTypeSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39186</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate implementations of IAliasSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39185</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate core symbol types</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>11/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39184</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate remaining symbol interfaces</Title>
    <Description>This pull request includes interfaces except for `ISymbol` itself.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39183</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39182</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39181</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39180</IssueID>
    <RepoID>1</RepoID>
    <Title>Add annotations for most of ISymbol</Title>
    <Description>
    </Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>11/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39179</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39178</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix EnC for multi-targeted projects that emit embedded PDBs</Title>
    <Description>
    </Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39177</IssueID>
    <RepoID>1</RepoID>
    <Title>C# reference count shown as 0 for operators &lt;, &gt;</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/742322/c-reference-count-shown-as-0-for-operators.html)._

---
Shows:
        0 references
        static public bool operator &amp;lt;(OrderingMeasure a, OrderingMeasure b)
Although it's used

---
### Original Comments

#### Visual Studio Feedback System on 9/23/2019, 01:34 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39176</IssueID>
    <RepoID>1</RepoID>
    <Title>VB.NET code pattern snippet works within interpolated strings</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/743715/vbnet-code-pattern-snippet-works-within-interpolat.html)._

---
Place cursor of vb.net editor before the closing quote in string below and press Tab key
Dim SQLText As String=$&amp;quot;SELECT&amp;quot;

---
### Original Comments

#### Visual Studio Feedback System on 9/23/2019, 11:49 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39175</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Auto Format not working</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/746119/c-auto-format-not-working.html)._

---
Just started using C#.  None of the auto formatting works as does in VB.  For example braces aren't indented.  None of the code is properly indented either after typing.  All &amp;quot;Auto Format&amp;quot; options are on under Tools.... Options.... Text Editor... C#... Code Style... Formatting.  There is also no EditorConfig file.  This happens on all projects.   VB properly auto formats.  See attachments for screenshots. Visual Studio Enterprise 2019 Version 16.3.0. I did search various forums, but could not find any information.

---
### Original Comments

#### Visual Studio Feedback System on 9/25/2019, 03:12 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39174</IssueID>
    <RepoID>1</RepoID>
    <Title>Renaming local variable with "Attribute" suffix inserts another "Attribute" in the name</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/66525688-21ddc500-eaab-11e9-8021-34993d1ecfe1.png)

**Steps to Reproduce**:
 
```C#
class C
{
        void F()
        {
            C myAttribute = new C();
        }
}
```

Inline rename `myAttribute`.

**Expected Behavior**:

No `Attribute` duplication.

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/41759/66525732-4043c080-eaab-11e9-9a31-afc7b5ee9753.png)
</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39173</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense conditional conversion option finnicky</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/757387/intellisense-conditional-conversion-option-finnick.html)._

---
[regression] [worked-in:16.1]
```
if (! String.IsNullOrWhiteSpace(var))
return var
else
return var2;
```

It offered to simplify the String and convert to conditional. I simplified String first and then it lost the option to change the conditional. As soon as I converted string back to String, the option came back, I used it, then I changed String back to string.

---
### Original Comments

#### Visual Studio Feedback System on 10/3/2019, 02:08 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39172</IssueID>
    <RepoID>1</RepoID>
    <Title>VS replaces DateTime with Date</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/759557/vs-replaces-datetime-with-date.html)._

---
[regression]
If you type (in VB.Net):

mydatetimevariable = new datetime(

it is automatically replaced by:

mydatetimevariable = New Date()

---
### Original Comments

#### Visual Studio Feedback System on 10/7/2019, 02:16 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39171</IssueID>
    <RepoID>1</RepoID>
    <Title>switch expression "no best type found" conflicts with IDE0007 C# use 'var' instead of explicit type</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/759620/switch-expression-no-best-type-found-conflicts-wit.html)._

---
First of all I have a switch expression that returns instances of classes that all have a common superclass, so I would expect the switch expression to return the common superclass type instead of having a &amp;quot;no best type found&amp;quot; error.

Secondly, if I manually specify the type of the variable to put the result of the switch expression in, I get the IDE0007 suggestion.  If I follow the suggestion I'm back at the &amp;quot;no best type found&amp;quot; error.

---
### Original Comments

#### Visual Studio Feedback System on 10/7/2019, 02:19 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39170</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Editor, view scrolling in error when moving selected lines up/dn.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/761825/c-editor-view-scrolling-in-error-when-moving-selec.html)._

---
Use the following batch file to generate foo.cs
```
@echo off
setlocal
echo&gt;&gt;foo.cs class C
echo&gt;&gt;foo.cs {
call :GEN_FIELDS
call :GEN_METHODS
echo&gt;&gt;foo.cs }
goto :EOF

:GEN_FIELDS
echo&gt;&gt;foo.cs #region fields
for /l %%i in (1,1,100) do echo&gt;&gt;foo.cs int int%%i;
echo&gt;&gt;foo.cs #endregion
goto :EOF

:GEN_METHODS
for /l %%i in (1,1,100) do call :GEN_METHOD %%i
goto :EOF

:GEN_METHOD
echo&gt;&gt;foo.cs int fn%1() 
echo&gt;&gt;foo.cs {
echo&gt;&gt;foo.cs return int%1;
echo&gt;&gt;foo.cs }
goto :EOF
```

Add foo.cs to some project. I used a .NET Console project, but anything C# would do.

Open the file.
Hold Ctrl and type in order A K F M A Home
End
Ctrl-M, CTRL-M (to unfold the class).
Move to beginning of line, say, 449 (i.e. fn87).
Shift-Down once, to select.
Alt-Up a few times. Notice how the view (in error) scrolls upwards.
Now try either Alt-Down, or even Undo (Ctrl-Z). The view _continues_ to scroll upwards!

Expected: I shouldn't have to write this, but... the view should obviously not scroll like this unless it's required to keep selection/caret visible.

---
### Original Comments

#### Visual Studio Feedback System on 10/7/2019, 01:24 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39169</IssueID>
    <RepoID>1</RepoID>
    <Title>C#, Inconsistant Label Indentation when Formatting</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/763973/c-inconsistant-label-indentation-when-formatting.html)._

---
Formatting a section or document which contains labels can result in inconsistant indentation of labels. If a label followed a non-bracketed if statement, the label will be indented further than if it follows a a bracketed if statement

Sample 1:

```csharp
    void Foo()
    {
        if (true)
        {
            Console.WriteLine("True");
        }

    Cleanup:
        // Do Cleanup
        return;
    }
```

Sample 2:

```csharp
    void Bar()
    {
        if (true)
            Console.WriteLine("True");

        Cleanup:
        // Do Cleanup
        return;
    }
```

---
### Original Comments

#### Visual Studio Feedback System on 10/8/2019, 00:49 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39168</IssueID>
    <RepoID>1</RepoID>
    <Title>C# code formating of braces</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/767939/c-code-formating-of-braces.html)._

---
[regression] [worked-in:16.2.x]
1. In a C# code editor, Type the following code in editor, Ensure the cursor after the close curly bracket :
```
       if () { }|
```

2.  Press &amp;quot;Left Arrow&amp;quot; key, Move the cursor between the two braces:
```
       if () {|}
```
3. Press &amp;quot;Enter&amp;quot; key, Then the code looks like this:
```
       if () {
|}

```

### **But here's what I expect:**
```
       if () {
          |
       }
```
or
```
       if ()
       {
          |
       }

```
This problem occurred after the update VisualStudio and was **previously normal.**

Ok, so mush.
best regards

---
### Original Comments

#### Visual Studio Feedback System on 10/9/2019, 02:57 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39167</IssueID>
    <RepoID>1</RepoID>
    <Title>Explicit interface implementation 'RefCustomModifiers' is not inherited</Title>
    <Description>https://github.com/dotnet/roslyn/blob/82f09c4e6067d3a164000f1acf355ee8e774fad5/src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/Symbols/PlaceholderMethodSymbol.cs#L169-L178</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39166</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable nullable reference types in Roslyn</Title>
    <Description>This meta issue may be linked by sections of code in which nullable reference types is not yet enabled.

Note: this issue is referenced in source (do not close the issue without scrubbing the source)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39165</IssueID>
    <RepoID>1</RepoID>
    <Title>DeclaringCompilation is null in ExpressionCompiler tests</Title>
    <Description>Example:

https://github.com/dotnet/roslyn/blob/de140f9fd3f5dcb82f17916c0ca79de4cf094b61/src/ExpressionEvaluator/CSharp/Test/ExpressionCompiler/LocalsTests.cs#L1452

If you debug this test and set a breakpoint in Symbol.DeclaringCompilation, it will get hit on a LocalFunctionSymbol whose ContainingModule is a PEModuleSymbol. This results in the method returning a `null` DeclaringCompilation even though the symbol is in source.

I can't tell if this is by design or if it is a bug. But it results in a NRE when I try to make use of the DeclaringCompilation on a symbol--when that symbol also has a binder with a non-null Compilation on it.

/cc @dotnet/roslyn-compiler @tmat</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39164</IssueID>
    <RepoID>1</RepoID>
    <Title>use draft</Title>
    <Description>
    </Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39163</IssueID>
    <RepoID>1</RepoID>
    <Title>test commit</Title>
    <Description>
    </Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39162</IssueID>
    <RepoID>1</RepoID>
    <Title>test commit</Title>
    <Description>
    </Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39161</IssueID>
    <RepoID>1</RepoID>
    <Title>Test bootstrap</Title>
    <Description>testing bootstrap build because it's being finicky to run locally.</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39160</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpRemoveUnusedValuesCodeFixProvider crashes when refactoring</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/760888/csharpremoveunusedvaluescodefixprovider-crashes-wh.html)._

---
[regression] [worked-in:16.3.1]
Since updating to 16.3.2 I am getting the error &amp;quot;'CSharpRemoveUnusedValuesCodeFixProvider' encountered an error and has been disabled&amp;quot; every time I try to refactor to remove an usused value.  Restarting and repairing Visual Studio 2019 does not fix the issue.

Please see the stack trace provided by the error:

System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.AnnotationExtensions.WithAdditionalAnnotations[TNode](TNode node,SyntaxAnnotation[] annotations)
   at Microsoft.CodeAnalysis.MoveDeclarationNearReference.AbstractMoveDeclarationNearReferenceService`4.&amp;lt;&amp;gt;c__DisplayClass9_0. &amp;lt;MoveDeclarationToFirstReferenceAsync&amp;gt;b__0(SyntaxNode current,SyntaxGenerator generator)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()
   at async Microsoft.CodeAnalysis.MoveDeclarationNearReference.AbstractMoveDeclarationNearReferenceService`4.MoveDeclarationNearReferenceAsync[TService,TStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax]( &amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedValuesCodeFixProvider`11.AdjustLocalDeclarationsAsync[TExpressionSyntax,TStatementSyntax,TBlockSyntax,TExpressionStatementSyntax, TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TForEachStatementSyntax,TSwitchCaseBlockSyntax,TSwitchCaseLabelOrClauseSyntax,TCatchStatementSyntax,TCatchBlockSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedValuesCodeFixProvider`11.PostProcessDocumentCoreAsync[TExpressionSyntax,TStatementSyntax,TBlockSyntax,TExpressionStatementSyntax, TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TForEachStatementSyntax,TSwitchCaseBlockSyntax,TSwitchCaseLabelOrClauseSyntax,TCatchStatementSyntax,TCatchBlockSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedValuesCodeFixProvider`11.PostProcessDocumentAsync[TExpressionSyntax,TStatementSyntax,TBlockSyntax,TExpressionStatementSyntax, TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TForEachStatementSyntax,TSwitchCaseBlockSyntax,TSwitchCaseLabelOrClauseSyntax,TCatchStatementSyntax,TCatchBlockSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedValuesCodeFixProvider`11.FixAllAsync[TExpressionSyntax,TStatementSyntax,TBlockSyntax,TExpressionStatementSyntax, TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TForEachStatementSyntax,TSwitchCaseBlockSyntax,TSwitchCaseLabelOrClauseSyntax,TCatchStatementSyntax,TCatchBlockSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&amp;lt;&amp;gt;c__DisplayClass11_0. &amp;lt;GetPreviewAsync&amp;gt;b__0(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)

---
### Original Comments

#### Visual Studio Feedback System on 10/7/2019, 02:00 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/8/2019, 02:31 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39159</IssueID>
    <RepoID>1</RepoID>
    <Title>Infer indentation in files with IIndentationManagerService</Title>
    <Description>IIndentationManagerService is a new service from the editor that looks at the existing tabs and spaces in a file and attempts to determine what the prevailing format is. This is useful for repositories that may have not had an .editorconfig to specify what is happening, or for repositories that have such a mix that an .editorconfig may not be immediately useful.

Commit-at-a-time review is **very strongly recommended** because this PR mixes both feature implementation and also refactoring a bunch of test helpers.

# Task List

- [x] Correctly implementing ordering between this and .editorconfig.
- [x] Investigate issue where Introduce Variable still used the wrong formatting.
- [ ] Tests.</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39158</IssueID>
    <RepoID>1</RepoID>
    <Title>Using cref to itself inside inheritdoc crashes VS</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/761030/using-cref-to-itself-inside-inheritdoc-crashes-vs.html)._

---
This is a new issue as inheritdoc is just being added in 16.4.0 preview 1. This problem therefor only happens in 16.4.0 preview 1 (or later?). 

With the new feature, we can use /// &amp;lt;inheritdoc/&amp;gt; to define the same xml comments from the inheritted class on members that are inherited. /// &amp;lt;inheritdoc/&amp;gt; works fine, but /// &amp;lt;inheritdoc cref=&amp;quot;MyProperty&amp;quot; /&amp;gt; crashes Visual Studio to desktop ('CTD') upon hovering the mouse over MyProperty. 

To recreate:

1. Create a new .NET Core Console App.
2. Create a new interface: IMyClass with a member (can be property, method, ...) MyMember and add a summary to it with ///.
3. Create a new class: MyClass that implements IMyClass (add &amp;quot;: IMyClass&amp;quot;).
4. Implement the member MyMember. 
5. Add /// &amp;lt;inheritdoc /&amp;gt; above MyMember. So far so good.
6. Change &amp;lt;inheritdoc /&amp;gt; to &amp;lt;inheritdoc cref=&amp;quot;MyMember&amp;quot;/&amp;gt; and move your mouse over MyMember. VS will crash before it can show the tooltip.

---
### Original Comments

#### Visual Studio Feedback System on 10/6/2019, 09:24 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/8/2019, 01:54 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39157</IssueID>
    <RepoID>1</RepoID>
    <Title>Initial support for binary operators with native-sized integers</Title>
    <Description>
    </Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39156</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove code to generate type switches</Title>
    <Description>Requested in https://github.com/dotnet/roslyn/pull/38013#discussion_r330308187</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39155</IssueID>
    <RepoID>1</RepoID>
    <Title>Inconsist diagnostics on extension GetAwaiter</Title>
    <Description>After invesgating #25861, I've found that using `await` when missing `GetAwaiter()` *extension* method can results in 3 different error codes:
- **CS1061** No such instance or extension member
```csharp
    public class Foo
    {
        async void M(Foo foo)
        {
            await foo;
        }
    }
```
- **CS4036** Specialised  for WinRT async interfaces
```csharp
    public class Foo
    {
        async void M(Windows.Foundation.IAsyncAction ia)
        {
            await ia;
        }
    }
```
- **CS1929** Extension method overload resolution fail
```csharp
using System;
using System.Runtime.CompilerServices;

namespace A
{
    public class Foo
    {
        async void M(Foo foo)
        {
            await foo;
        }
    }

    public static class BarExtension
    {
        public static Extension.FooAwaiter GetAwaiter(this string s) =&gt; default;
    }
}

namespace A.Extension
{
    public static class FooExtensions
    {
        public static FooAwaiter GetAwaiter(this Foo foo) =&gt; default;
    }

    public struct FooAwaiter : INotifyCompletion
    {
        public bool IsCompleted { get; }
        public void OnCompleted(Action continuation) {}
        public void GetResult() {}
    }
}

```

Currently, add imports service can only recognize the first case **CS1061**.
Linq syntax provides a specialised **CS1929** and the general **CS1936**.
However, missing method for deconstruction provides one consist error code **CS8129**:
```csharp
using System;
using System.Runtime.CompilerServices;

namespace A
{
    public class Foo
    {
        async void M(Foo foo)
        {
            var (a, b) = foo;
        }
    }

    public static class BarExtension
    {
        // Reports CS8129 no matter existence of this method
        public static void Deconstruct(this string foo, out int a, out int b)
        {
            a = 1;
            b = 2;
        }
    }
}

namespace A.Extension
{
    public static class FooExtensions
    {
        public static void Deconstruct(this Foo foo, out int a, out int b)
        {
            a = 1;
            b = 2;
        }
    }
}
```
This makes code fix much easier to deal with it.
In all the three syntaxes, diagnostics span differs on existence of extension on other type.

Can we unify the error codes and diagnostics span for such scenarios? </Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39154</IssueID>
    <RepoID>1</RepoID>
    <Title>Support the 'language' attribute for &lt;code&gt; documentation elements</Title>
    <Description>Requested as part of #39140

🔗 [language attribute (Sandcastle Help File Builder XML Comments Guide)](http://ewsoftware.github.io/XMLCommentsGuide/html/1abd1992-e3d0-45b4-b43d-91fcfc5e5574.htm#language)</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39153</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39152</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39151</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39150</IssueID>
    <RepoID>1</RepoID>
    <Title>Degraded IntelliSense on RHS of await</Title>
    <Description>**Version Used**:  VS 16.4 P1

**Steps to Reproduce**:
```csharp
using System.IO;
using System.Threading.Tasks;

namespace ConsoleApp24
{
    class Program
    {
        static async Task Main(string[] args)
        {
            var request = new Request();
            var meh = await request$$.ReadAsStreamAsync();
        }
    }

    class Request
    {
        public Task&lt;Stream&gt; ReadAsStreamAsync() =&gt; null;
    }
}
```
1. Place cursor at `$$`
2. Type `.`
3. IntelliSense window does not open and cannot be prompted with `CTRL + Spacebar`

**Expected Behavior**:
IntelliSense window opens, suggesting members of `request`

**Actual Behavior**:
IntelliSense window denies me</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39148</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature: Add wrap all elements for initializer expressions</Title>
    <Description>Users will now be offered wrapping refactor options similar to functions with multiple arguments and parameters. The following refactor options are available for initializer expressions:

- Wrap every
- Unwrap and indent
- Wrap long list

I added 3 unit tests to test:

- Initializer that should offer no suggestion
- Small initializer with a few values
- Long initializer with 9 values

This implements the request from issue #37428</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39147</IssueID>
    <RepoID>1</RepoID>
    <Title>ViewsOfAClassPublicFunctionsInC++C#VB</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/753971/viewsofaclasspublicfunctionsinccvb.html)._

---
&lt;p&gt;&lt;/p&gt;&lt;p&gt;Hi there. This is just a suggestion to the Community and a request to engage with the Microsoft Development &lt;/p&gt;&lt;p&gt;Community. I am very keen to have your comments on this suggestion please. &lt;/p&gt;&lt;p&gt;My suggestion is to have a directive or tag along the lines of #region in C# in Visual Studio that groups sections of a class' public interface. &lt;/p&gt; &lt;p&gt;Hence this could then be viewed in Intellisense when writing code. &lt;/p&gt; &lt;p&gt;For example if you have a Car class that has different Drive functions &lt;/p&gt;&lt;p&gt;eg DriveFast, DriveSlow, DriveMedium and other public functions aswell. You could group the Drive functions under the Drive tag. Then in Intellisense in Visual Studio you &lt;/p&gt;&lt;p&gt;could drill down for example if you had a car variable aCar.&lt;/p&gt; &lt;p&gt;It would appear in Inteliisense as acar. Drive.DriveSlow and when you selected the function &lt;/p&gt;&lt;p&gt;it would appear in code as acar. DriveSlow. &lt;/p&gt;&lt;p&gt;This could be optional with functions appearing under their categories in Intellisense if they were tagged, &lt;/p&gt;&lt;p&gt;or not if they weren't. &lt;/p&gt; &lt;p&gt;So this would be a view of a class' public functions rather like a View of a database. &lt;/p&gt; &lt;p&gt;This could help in documentation, understanding, and writing code in Visual Studio and maybe lessen &lt;/p&gt;&lt;p&gt;the need to have Interfaces.&lt;/p&gt;

---
### Original Comments

#### Fiona Niu[MSFT] on 9/30/2019, 00:11 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;

#### Taher Hassan on 10/1/2019, 04:18 AM: 

&lt;p&gt;Hi Fiona,&lt;/p&gt;&lt;p&gt;Many thanks - that's excellent. I look forward to hearing what you think.&lt;/p&gt;&lt;p&gt;Many thanks and best regards, Taher Hassan&lt;/p&gt;
</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39146</IssueID>
    <RepoID>1</RepoID>
    <Title>Object creation can be simplified suggestion should be more clever</Title>
    <Description>[Original Developer Community feedback ](https://developercommunity.visualstudio.com/content/idea/754229/object-creation-can-be-simplified-suggestion-shoul.html)copied to preserve code format.

After applying object creation can be simplified refactoring suggestion, I moved some method calling code below so that more object.field/property = … could be grouped with the creation code block, however it seems I don’t get a newer suggestion to also place them in the simplified object creation block it created before

```csharp
MailMessage emailmessage = new MailMessage
        {
            SubjectEncoding = encoding, //...using Greek (ISO) encoding instead of UTF8 or other Unicode one, since mail clients at old XP machines usually can't show Unicode
            BodyEncoding = encoding,

            From = new MailAddress(EMAIL_FROM, EMAIL_FROM_NAME)
        };

        //*** moved code from this position (see *** below) that made the following 3 assignments not get refactored was here (however don't get new tip to refactor those 3 too inside the object creation block above, even though they all are of the form objectname.field/property = ...

         emailmessage.Subject = subject;

        // Plain text emails can't display images, so change body to HTML type
        emailmessage.IsBodyHtml = true;

        // public construct the alternate body as HTML 
        emailmessage.Body = EMAIL_HEADER + body + EMAIL_FOOTER;

       //*** moved code is here now...

        emailmessage.To.Add(toEmailAddress.Replace(';', ','));

        if (!string.IsNullOrEmpty(ccEmailAddress))
            emailmessage.CC.Add(ccEmailAddress.Replace(';', ','));

        if (!string.IsNullOrEmpty(bccEmailAddress))
            emailmessage.Bcc.Add(bccEmailAddress.Replace(';', ','));
```</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39145</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/static-lambdas</Title>
    <Description>
This is an automatically generated pull request from master into features/static-lambdas.

``` bash
git fetch --all
git checkout merges/master-to-features/static-lambdas
git reset --hard upstream/features/static-lambdas
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/static-lambdas --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39144</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39143</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39142</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring "Compute constant value" not available on constant-only-values.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/759053/refactoring-compute-constant-value-not-available-o.html)._

---
&lt;p&gt;Hi,&lt;/p&gt;&lt;p&gt;Today, there is a refactoring available to &lt;em&gt;Compute constant value&lt;/em&gt; if you have an expression like below:&lt;/p&gt;&lt;pre&gt;var foo = Some.Namespace.With.A.Constant + &amp;quot;my own string&amp;quot;;&lt;/pre&gt; &lt;p&gt;However, this does not appear on the simpler variant like this:&lt;/p&gt;&lt;pre&gt;var foo = Some.Namespace.With.A.Constant;&lt;/pre&gt; &lt;p&gt;In practice, I can just append &lt;strong&gt;+&amp;quot;&amp;quot;&lt;/strong&gt; to the value and then use the refactoring, but it should not be necessary.&lt;/p&gt; &lt;p&gt;Best regards, he who tries to get rid of some inter-solution dependencies in old stuff and wants to save some time next time.&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 10/8/2019, 05:29 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39141</IssueID>
    <RepoID>1</RepoID>
    <Title>Add ability to customize the xml comments format</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/406779/add-ability-to-customize-the-xml-comments-format.html)._

---
&lt;p&gt;I am using /// to generate documentation but would like to alter the template / snippet that is inserted.  I see there might be a way to do it with custom snippets, but seems like it should be a built in option.&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 12/13/2018, 05:51 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;
#### Dinakar Nethi [MSFT] on 1/4/2019, 03:28 PM: 

&lt;p&gt;Your suggestion has been queued up for prioritization.  Feature suggestions are prioritized based on the value to our broader developer community and the product roadmap. We may not be able to pursue this one immediately, but we will continue to monitor it up to 90 days for community input&lt;/p&gt;
</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39140</IssueID>
    <RepoID>1</RepoID>
    <Title>&lt;code&gt; tags in XML comments should render as monospaced, syntax highlighted code in the IntelliSense popups.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/721265/tags-in-xml-comments-should-render-as-monospaced-s.html)._

---
What it says on the tin :)

---
### Original Comments

#### Jane Wu [MSFT] on 9/3/2019, 07:50 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39139</IssueID>
    <RepoID>1</RepoID>
    <Title>&lt;see&gt; tags in XML docs should be clickable links in the IntelliSense popups.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/721266/tags-in-xml-docs-should-be-clickable-links-in-the.html)._

---
What it says on the tin :)

---
### Original Comments

#### Jane Wu [MSFT] on 9/3/2019, 07:50 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39138</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring -&gt; Rename should rename fields/variables/parameters</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/762598/refactoring-rename-should-rename-fieldsvariablespa.html)._

---
Often using DI we have things like

public MyClass(IFirstInterface firstInterface, ISecondInterface secondInterface)
{
    _firstInterface = firstInterface;
    _secondInterface = secondInterface;
}

Currently, if i rename IFirstInterface -&amp;gt; ISomethingElse it only renames the interface, not the fields, variables and parameters.

public MyClass(ISomethingElse firstInterface, ISecondInterface secondInterface)
{
    _firstInterface = firstInterface;
    _secondInterface = secondInterface;
}

Really it should go further and do the same as Resharper:

public MyClass(ISomethingElse somethingElse, ISecondInterface secondInterface)
{
    _somethingElse= somethingElse;
    _secondInterface = secondInterface;
}

---
### Original Comments

#### Jane Wu [MSFT] on 10/8/2019, 05:26 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39137</IssueID>
    <RepoID>1</RepoID>
    <Title>Require MSBuild 16.3 in compiler NuGet packages</Title>
    <Description>Fixes #38312</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39136</IssueID>
    <RepoID>1</RepoID>
    <Title>Include source files w/o method bodies in the PDB documents</Title>
    <Description>Fixes #38954

Currently the compiler does not list source files in the debug documents in the PDB that are part of the compilation but do not have any method body. These documents are only added in order to support sequence points.</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39135</IssueID>
    <RepoID>1</RepoID>
    <Title>Local function GetAttributes</Title>
    <Description>Related to #38801

- LangVersion errors on all local function attributes (incl. parameters and type parameters)
- GetAttributes()
- Attribute binding, rejecting attributes on invalid targets
~~- [ ] tests for speculative semantic model~~ moving to test plan

PTAL @dotnet/roslyn-compiler @cston</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39134</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix converted nullability on extract method</Title>
    <Description>Fixes #39075 

* Remove the IsObjectType check since it caused incorrect behavior when selecting an identifier of type Object. See TestExtractNullableObjectWithExplicitCast 
* Fix extension methods to correctly use converted nullability 
* Add some tests to show expected behavior with nullable reference types
* Work around #39122 by calling GetTypeInfo on the CastExpressionSyntax  directly</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39133</IssueID>
    <RepoID>1</RepoID>
    <Title>System.Runtime.CompilerServices.NullableAttribute is not returning if there are no even properties with null and without null.</Title>
    <Description>**Version Used**:  netcoreapp3.0, sdk - 3.0.100

**Steps to Reproduce**:
If a class has 3 nullable props and 3 non-nullable props ``NullableAttribute`` is **returned**.
But if a class has 3 nullable and 2 non nullable ''NullableAttribute'' is **not returned**.

Below program will work fine. 
But if you un-comment ``Content2`` or comment out ``dummy`` this will give 0 attrs.

That is everything must be even.

```csharp
class Program
{
    static void Main(string[] args)
    {
        var props = typeof(Todo).GetProperties();

        foreach (var propItem in props)
        {
            var attrs = propItem.GetCustomAttributes();
        }
    }
}


public class Todo
{
    public string? Content { get; set; }
    //public string? Content2 { get; set; }
    public Test? MyProperty { get; set; }

    public string dummy { get; set; } = string.Empty;
    public Test dummy2 { get; set; } = default!;
}

public class Test
{
    public int MyProperty { get; set; }
}
```

**Expected Behavior**:
``System.Runtime.CompilerServices.NullableAttribute`` must be returned for nullable properties.

**Actual Behavior**:
``System.Runtime.CompilerServices.NullableAttribute`` is not returned for nullable properties.
</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39132</IssueID>
    <RepoID>1</RepoID>
    <Title>[Proposal] String interpolation</Title>
    <Description>An option to expand the string interpolation to a call other than string.Format would be nice to have.

For example, I want
`logger.LogInformation($"Hello {name}")`
to be expanded to
`logger.LogInformation("Hello {0}", name)`
rather than
`logger.LogInformation(string.Format("Hello {0}", name))`

Compiler can require the method to have a specific signature and annotated with an attribute for this.</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39149</IssueID>
    <RepoID>1</RepoID>
    <Title>Why 'await' causing compiler error when that in an interpolated string?</Title>
    <Description>The following code cannot be compiled:
```C#
        private static async Task Main()
        {
            // compiler error CS0103 : The name 'await' does not exist in the current context
            var z = $"{await (Task.FromResult(string.Empty))}";

            // allowed
            var a = await Task.FromResult(string.Empty);
            var b = await (Task.FromResult(string.Empty));
            var c = $"{await Task.FromResult(string.Empty)}";

            Console.ReadLine();
        }
```</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39130</IssueID>
    <RepoID>1</RepoID>
    <Title>CS0618 shown in error when method uses obsolete element internally</Title>
    <Description>Visual Studio 16.3.2

I have a method using an obsolete element INTERANALLY - it is not used as parameter, nor is it actually returned.

I am getting offered to add the obsolete attribute to the method:

![image](https://user-images.githubusercontent.com/909612/66395471-c7276900-e9d7-11e9-9fbb-08edc63e501d.png)

This is factually incorrect. While the warning on the obsolete element is sensible, adding obsolete to the method would mark this method as obsolete - which is wrong. It may need rework, but it is not obsolete - it is still to be used.

This would be different if the obsolete element would be part of input or output parameters. But in this case, it is not - it is defined within the method body and then discarded.
</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39129</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.5-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.5-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.5-preview1
git reset --hard upstream/release/dev16.5-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.5-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39128</IssueID>
    <RepoID>1</RepoID>
    <Title>SyntaxFactory.MethodDeclaration no longer accepts SyntaxKind.EndOfFileToken for semicolonToken</Title>
    <Description>Previous to upgrading to 3.3.1 (was on 3.1.0) I was able to pass a SyntaxKind.EndofFileToken into semicolon parameter on the SyntaxFactory.MethodDeclaration method but after the upgrade to 3.3.1  now receive a runtime exception … System.ArgumentException: 'semicolonToken'. 


**Steps to Reproduce**:
 
 SyntaxFactory.MethodDeclaration(attributeLists: SyntaxFactory.List&lt;AttributeListSyntax&gt;(),
              modifiers: modifiers,
              returnType: SyntaxFactory.ParseTypeName("void"),
              explicitInterfaceSpecifier: interfaceSpecifier,
              identifier: SyntaxFactory.Identifier("On" + method.Name.Replace(" ", "")),
              typeParameterList: null,
              parameterList: parameterList,
              constraintClauses: SyntaxFactory.List&lt;TypeParameterConstraintClauseSyntax&gt;(),
              body: SyntaxFactory.Block()
            .WithOpenBraceToken(
                SyntaxFactory.Token(SyntaxKind.OpenBraceToken))
            .WithCloseBraceToken(
                SyntaxFactory.Token(SyntaxKind.CloseBraceToken)),                
                semicolonToken: SyntaxFactory.Token(SyntaxKind.EndOfFileToken)).NormalizeWhitespace();

2. Runs perfectly on 3.1.0

3. Switch to 3.3.1 to receive an argument exception "SemiColon"
 

**Expected Behavior**:
3.1.0 sample generation...

partial void OnInitializeConstructorParameters(RoleId roleId, ApplicationId appId, string name, string description, List&lt;Permission&gt; permissions)
        {
        }
**Actual Behavior**:
Runtime Argument Exception "SemiColon"</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39127</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable detection and addition of solution level .editorconfig as solu…</Title>
    <Description>…tion item

1. IDE code fix that adds new editorconfig for configuring code style/severity has been updated to create the file at root of the solution, instead of the project. Additionally, the code fix also automatically adds the file as a solution item.
2. We now detect if a new editorconfig is created at the root of the solution and provide an info bar to make it a solution item with a single click. User can choose to silence this suggestion so it never shows up again (workspace option).

Fixes #38746</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39126</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion for unimported extension methods</Title>
    <Description>Still a work-in-progress, but tests for common scenarios in C# are passing, so I think it's at least ready for a design review.

TODO:
- ~~Needs to Call into remote process for filtering, since that's where index is built.~~
- ~~Implement item description~~
- Tests for VB 
- ~~Determine the bail condition (e.g. if any of the filter items isn't calculated? And/Or a timebox? )~~ now it bails if any of the required filter is not already created. Using expander would force build them.
- Perf analysis (still some cleanup to do before this)
- ~~Telemetry~~

@CyrusNajmabadi Could you please give this a quick look and let me know if the implementation of  the filter makes sense? Thanks!</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39125</IssueID>
    <RepoID>1</RepoID>
    <Title>Using declaration ioperation</Title>
    <Description>IOperation and CFG support for using declarations

Fixes #32100</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39124</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39123</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39122</IssueID>
    <RepoID>1</RepoID>
    <Title>Calling GetTypeInfo on CastExpressionSyntax.Type returns wrong nullable information</Title>
    <Description>```c#
#nullable enable

using System;

class C
{
    void M()
    {
        object? o = null;
        var s = [|(string?)o|];
        Console.WriteLine(s);
    }
}
```

where `[||]` shows the CastExpressionSyntax being used. 

![image](https://user-images.githubusercontent.com/475144/66356903-a00e6000-e921-11e9-8cfd-ee7fb41f72a9.png)
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39121</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for static lambdas.</Title>
    <Description>Adds impl support for https://github.com/dotnet/csharplang/issues/275.

This should be reviewed with whitespace diffs off.

Followup to https://github.com/dotnet/roslyn/pull/39118

- [x] Update syntax model to support a modifiers list for lambdas (https://github.com/dotnet/roslyn/pull/39118).
- [x] Add parsing support for static lambdas (simple and parenthesized).
- [x] Add binding checking that static lambdas do not capture anything.
- [x] Tests.</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39120</IssueID>
    <RepoID>1</RepoID>
    <Title>IntroduceVariableCondeRefactoringProvider threw an exception</Title>
    <Description>```
System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.
Parameter name: position
   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)
   at Microsoft.CodeAnalysis.CodeRefactoringHelpers.IsNodeUnderselected(SyntaxNode node,TextSpan selection)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitializeAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GenerateAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39119</IssueID>
    <RepoID>1</RepoID>
    <Title>Add note about testing updated assembly versions</Title>
    <Description>/cc @jaredpar </Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39118</IssueID>
    <RepoID>1</RepoID>
    <Title>Relax the shape of lambdas in our syntax model to allow for a list of modifiers.</Title>
    <Description>~~WIP: personal review.~~ Now ready for review.

This is desirable if we add static lambdas (https://github.com/dotnet/csharplang/issues/275) as it means we don't put unnecessary syntax model restriction on people writing `static async a =&gt; ...` or `async static a =&gt; ...`.  Note: the language may choose that only one of these is legal.  But we won't restrict it in the model to make sure that parser resilience and modeling is high quality.</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39117</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor object from different directives</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/741362/refactor-object-from-different-directives.html)._

---
can we do refactoring of same object name from different setup in directives especially if the object inside #if(DEBUG) ?

```
#if (DEBUG)
	public static ConnectionString CurrentConnectionString = new ConnectionString(&amp;quot;DEVELOPEMENTsqlserver&amp;quot;,&amp;quot;db&amp;quot;,&amp;quot;mgmguardiana&amp;quot;,&amp;quot;password&amp;quot;,false);
#else
        public static ConnectionString CurrentConnectionString = new ConnectionString(&amp;quot;PRODUCTIONsqlserver&amp;quot;,&amp;quot;db&amp;quot;,&amp;quot;mgmguardiana&amp;quot;,&amp;quot;password&amp;quot;,false);;
#endif
    }
```

In this example, if I use ctrl+R+R in `CurrentConnectionString` assume that I'm in debug mode, any reference will be updated only under the current directive(DEBUG), and when switching to release mode, the codes may go broke and need to rename it again.

Current steps of refactoring
1. From screenshot in example at DEBUG mode, press CTRL+R+R to show rename the object of `CurrentConnectionString` into `RenamedConnection` and press ENTER
2. Run or build in debug mode, no errors will be raise.
3. Now switch to release assume that you are now ready to deploy the application
4. Run or build in release mode, errors will be made that all references of `RenamedConnection` are invalid
5. Refactor the `CurrentConnectionString` into `RenamedConnection` while still in release mode.
6. Run or build to test

---
### Original Comments

#### Jane Wu [MSFT] on 9/22/2019, 11:30 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39116</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid unnecessary casts when refactoring</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/742342/avoid-unnecessary-casts-when-refactoring.html)._

---
I love the refactoring features of Visual Studio, but I have seen multiple scenarios where it suggests adding unnecessary casts in order to do another refactoring. My most recent one being converting to a conditional expression. Here is the code before refactoring, the refactored code, and what I believe the code should be refactored to:

```
'Before Refactoring:
If useparallel Then : Me.itmNames.ItemsSource = Me.Players.AsParallel(). AsOrdered(). Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)})
Else : Me.itmNames.ItemsSource = Me.Players.Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)})
End If

'Refactored By Visual Studio 2019:
Me.itmNames.ItemsSource = If(useparallel,
	Me.Players.AsParallel(). AsOrdered(). Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)}),
	DirectCast(Me.Players.Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)}), Object))

'Refactored By Me (notice that I do not include the unnecessary DirectCast):
Me.itmNames.ItemsSource = If(useparallel,
	Me.Players.AsParallel(). AsOrdered(). Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)}),
	Me.Players.Select(Function(pd, index) New With {. Name = pd. Name, . Index = index, . ColumnWidth = Me.GetScoreColumnWidth(index)}))
```
This is, of course, not hard to change, but neither are things like removing unnecessary parentheses and some other refactorings. I just thought I would mention this as a refactoring improvement since it adds an extra method (as opposed to just making the code look prettier but still the same after being compiled).

---
### Original Comments

#### Jane Wu [MSFT] on 9/22/2019, 11:25 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39115</IssueID>
    <RepoID>1</RepoID>
    <Title>Search items from metadata in Go-To-All (Ctrl + T)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/746165/search-items-from-unimported-namespaces-ctrl-t.html)._

---
Please, add a feature to find items from unimported namespaces by pressing Ctrl + T, just like in the text editor itself.

---
### Original Comments

#### Игорь on 9/24/2019, 00:46 PM: 

(private comment, text removed)
#### Jane Wu [MSFT] on 9/25/2019, 01:53 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;

![94737-1](https://user-images.githubusercontent.com/46729679/66350517-62eda200-e910-11e9-8644-aca2b9800e45.jpg)

![94738-2](https://user-images.githubusercontent.com/46729679/66350523-654ffc00-e910-11e9-8f5d-7d1556f25ce9.jpg)

</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39114</IssueID>
    <RepoID>1</RepoID>
    <Title>Breakpoint Highlight - C #</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/736961/breakpoint-highlight-c.html)._

---
There is no settings to disable breakpoint LINE highlight. I see ther is one for C++ but not for C#.

The red is too strong, you also lose the context highligting on th eline of you set the colour to black or white.

---
### Original Comments

#### Jane Wu [MSFT] on 9/17/2019, 07:05 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39113</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for xmldoc tags on local functions (C# 7.0+)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/739055/add-support-for-xmldoc-tags-on-local-functions-c-7.html)._

---
Support for [local functions](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions) was added in C# 7.0, which is awesome.  However, decorating a local function with `&amp;lt;summary&amp;gt;...&amp;lt;/summary&amp;gt; ` tags will not produce any Intellisense in Visual Studio 2019 (as of version 16.2.5):
```
private static string GetText(string path, string filename)
{
    /// &amp;lt;summary&amp;gt;
    /// Append a path separator character to the specified file path.
    /// &amp;lt;/summary&amp;gt;
    string AppendPathSeparator(string filepath)
    {
        if (!filepath. EndsWith(@&amp;quot;\&amp;quot;))
           filepath += @&amp;quot;\&amp;quot;;

return filepath;   
    }

// No Intellisense for the &amp;quot;AppendPathSeparator&amp;quot; local function will appear here.
    var sr = File.OpenText(AppendPathSeparator(path) + filename);
    var text = sr. ReadToEnd();
    return text;
} 
```

It would be great to have some way of producing Intellisense for local functions.

---
### Original Comments

#### Jane Wu [MSFT] on 9/18/2019, 08:07 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39112</IssueID>
    <RepoID>1</RepoID>
    <Title>Update roslyn version for 16.5 preview 1</Title>
    <Description>Create the 16.5p1 branch.  Note that there isn't a VS branch for this yet, so I believe we don't need to update the publishdata/vs-deps branches.</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39111</IssueID>
    <RepoID>1</RepoID>
    <Title>Automatically fix naming style across file/project/solution</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/740419/automatically-fix-naming-style-across-fileprojects.html)._

---
Would love do see something like what Resharper does: https://www.jetbrains.com/help/resharper/Coding_Assistance__Naming_Style.html#detect

I especially need it when doing the following:
- I want to create C# classes from some json file. The Paste Special feature is great for that.
- However, the sample json files I have usually use camel case
- I need to change to Pascal case
- Today, VS only allows me to do it one by one, which becomes very tedious as I have tens of properties.

---
### Original Comments

#### Jane Wu [MSFT] on 9/20/2019, 01:16 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39110</IssueID>
    <RepoID>1</RepoID>
    <Title>Quick Class implementation</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/737464/quick-class-implementation.html)._

---
&lt;p&gt;I have not yet found a shortcut like this (if it exists please direct me to it).  I would like to be able to use a shortcut keyboard command (i.e. Ctrl+K Ctrl_C : Comment) to be able to instantiate a new class with all the properties set to their respective defaults.  Something like with the cursor being in &amp;quot;new CustomClass&amp;quot; the user could press &amp;quot;Ctrl+C Ctrl+I&amp;quot; for default Class Implementation. &lt;/p&gt;&lt;pre&gt;CustomClass myClass = new CustomClass {
    Property1 = &amp;quot;&amp;quot;, // String default
    Property2 = false, // Bool default
    Property3 = DateTime.Now, // DateTime Default
    etc........
}&lt;/pre&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 9/17/2019, 07:04 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39109</IssueID>
    <RepoID>1</RepoID>
    <Title>Surround code with curly braces</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/740318/surround-code-with-curly-braces.html)._

---
&lt;p&gt;Requested many times before:&lt;/p&gt;&lt;p&gt;If code is highlighted and I press { surround selected code with curly braces.  &lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 9/20/2019, 01:16 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39108</IssueID>
    <RepoID>1</RepoID>
    <Title>Add parameter wrap to code cleanup</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/748441/add-parameter-wrap-to-code-cleanup.html)._

---
Would like to have this feature in code cleanup: https://docs.microsoft.com/en-us/visualstudio/ide/reference/wrap-align-indent-parameters?view=vs-2019

That way, this could be apply to the entire file, project or solution.

Thanks!

---
### Original Comments

#### Jane Wu [MSFT] on 9/25/2019, 08:07 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39107</IssueID>
    <RepoID>1</RepoID>
    <Title>Add or change parameter in an existing method (ReSharper style)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/740946/add-or-change-parameter-in-an-existing-method-resh.html)._

---
&lt;p&gt;This previous feature suggestion was incorrectly marked as included in VS2017. This capability is still not available in the general case.&lt;/p&gt;&lt;p&gt;&lt;a href="https://developercommunity.visualstudio.com/content/idea/351698/refactoring-to-add-a-parameter-to-existing-method.html"&gt;https://developercommunity.visualstudio.com/content/idea/351698/refactoring-to-add-a-parameter-to-existing-method.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The steps provided here: &lt;/p&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/ide/reference/add-parameter?view=vs-2019"&gt;https://docs.microsoft.com/en-us/visualstudio/ide/reference/add-parameter?view=vs-2019&lt;/a&gt;&lt;/p&gt;&lt;p&gt;are not applicable generally.&lt;/p&gt;&lt;p&gt;I have&lt;/p&gt;&lt;p&gt;-An interface defining a code contract with a particular method&lt;/p&gt;&lt;p&gt;-Several classes implementing this method&lt;/p&gt;&lt;p&gt;The add parameter mentioned in the above public doc does not appear in my case (in VS 2019).&lt;/p&gt;&lt;p&gt;I additionally want the ability to&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change the type of an existing parameter&lt;/li&gt;&lt;li&gt;Add new parameters&lt;/li&gt;&lt;li&gt;Remove existing parameters&lt;/li&gt;&lt;li&gt;Rename existing parameters&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And I need these changes to take effect on every implementation of the method. Resharper has had this for years. When can we expect this same functionality in Vanilla VS 2019?&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 9/22/2019, 11:27 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39106</IssueID>
    <RepoID>1</RepoID>
    <Title>Go to Definition of Add method for collection element initializers</Title>
    <Description>Related to #38850

Scenario:

```cs
using System.Collections;

public class C : IEnumerable {
    public void Add(int i, object o) { }
    public void Add(int i) { }
    
    public static void M() {
        _ = new C { { 1, null }, { 2 }, 3 };
    }
    
    public IEnumerator GetEnumerator() =&gt; throw null!;
}
```

Expectation:
- Go to Definition on the curly brace at `{ 1, null }` or `{ 2 }` should go to the Add method referenced by the element initializer
- Go to Definition on the literal 3 probably can't go to the Add method, because the element initializer could be any sort of expression that would have its own definition that we actually want to go to. (any thoughts on this would be appreciated)</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39105</IssueID>
    <RepoID>1</RepoID>
    <Title>Add an IDE storage service benchmark</Title>
    <Description>This helps enable us to make changes to the storage service and ensure that we're not regressing perf.</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39104</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle a missing case in bad conversion error reporting.</Title>
    <Description>Fixes #39082</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39103</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/localsinit</Title>
    <Description>
    </Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39102</IssueID>
    <RepoID>1</RepoID>
    <Title>Use a singleton for AnalyzerActions.Empty</Title>
    <Description>**Version Used**: Unknown

:link: https://developercommunity.visualstudio.com/content/problem/531240/occasional-outofmemoryexception.html

One of the heap dumps showed 3,486,047 instances of Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions, but at most 5,000 were not empty. Using a singleton for the empty case would save a large amount of memory.

As a step past this, we could attempt avoid placing empty items in the dictionary at all, and internally treat missing the same as empty.</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39101</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable CA1829 for test code in Roslyn.sln</Title>
    <Description>See https://github.com/dotnet/roslyn/pull/39029/files#r331157299</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39100</IssueID>
    <RepoID>1</RepoID>
    <Title>NRT - Deeper analysis inside constructor for indirect intialization scenarios</Title>
    <Description>The `InitializeComponent` scenario:

```cs
public class Foo {
    public Foo() { // warning here about _x not being initialized
        InitializeComponent();
    }

    public InitializeComponent() {
         _x = "Foo";
         // initialize fields and stuff
    }

    private string _x;
}
```

Also, happened to me on the first project I'm updating with NRTs:

```cs
public class Foo {
    public Foo(Uri baseUrl) {
        baseUrl = null!; // current workaround
        BaseUrl = baseUrl;
    }

    private Uri _baseUrl;
    public Uri BaseUrl { get =&gt; _baseUrl; set { /* some logic*/ _baseUrl = value; } }
}
```

The compiler should follow on the method calls inside a constructor to a reasonable depth in order to determine nullability. </Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39098</IssueID>
    <RepoID>1</RepoID>
    <Title>Build system feedback</Title>
    <Description>As a first-time builder of any Roslyn code, I thought it could be interesting for you doing this on a daily basis to get some input from someone that tested it out for the first time.


Documentation:
- The instructions for kicking off "your first build" is Good Stuff. Short and concise; Four short bullet points. Very good. Gold Star.

- The "-help" switch to eng/build.ps1 should probably be mentioned on the build instructions page. I only found out about it (and other, including vital, options) by inspecting first the cmd files and then that ps-script itself.

- Disk space requirements could be specified on the Building wiki page. Probably updated on a schedule (every month or so?) and last date measured added to the documentation. Both for no-argument (i.e. Debug) builds and Release builds. At least a ballpark figure would be nice to have. It would have saved me a ton of wasted time and effort. I created a ten GiB VHD and thought  "This surely must be at least four times of what's required, but let's make it this extremely large to be really, really sure" - how wrong I was... but more on that later.


Flexibility/options:
- I'm missing an option to disable creation of any and all tests.

- I'm missing an option to disable creation of all the locale directories. To put it mildly, I am more than a little annoyed of all the thousands of locale directories VS itself spews all over the installation, laying waste to both precious disk space and adding filesystem fragmentation something fiercely. I had hoped I wouldn't have to see that repeated in the bin/* output, curtesy of a switch or two.

- Please, consider using filesystem links for immutable files, where available. Even NTFS has had hardlinks since the 90's. It's not instilling confidence to see gigabyte after gigabyte of redundant copies of the same files in umpteen places. So far into the build process there are f.ex. fourty (40!) copies of Microsoft.CodeAnalysis.Test.Resources.Proprietary.dll, racking up almost 4 GiB. The build has stalled so I don't know how many more redundant copies will be created. That's just the most prominent one. I'm sure there are plenty more.

- Ability to build a single DLL. If that's impossible due to limitations in _&amp;lt;something&amp;gt;_, at least building a single "package" of sorts. Maybe it's possible by going deeper than using Build.cmd? If so, some documentation pointing to the procedure from the short and sweet build instructions could be good.

In my case I knew exactly what I needed to get VS stop crashing. I needed to fix one single bug, and build a replacement for one single file, Microsoft.VisualStudio.LanguageServices.dll. Instead of being able to build just that DLL (from what I have found at least), I'm now continually fighting with disk-space running out, running `compact /c /f /s /exe:lzx artifacts\*` like a madman from a separate shell, while periodically Suspending all the build processes from the Resource Monitor, trying to keep up with the torrent of other stuff it's filling up the volume with - stuff I really  don't want produced. Yeah, it's partially a problem with me not allocating enough disk space, but I couldn't in my wildest imagination think I'd need over ten gigabyte to build a single DLL that's just a hair over 1.5 MB. That points back to the need for some documented info of how much disk space should be expected to be consumed.

- Many, many warnings about SourceLink "Source control information is not available". It seems a bit strange, considering it's a pristine git clone and `git` is indeed available in the path. Granted, it's better than `roslyn-analyzers`, where the same yapping produces build _errors_ instead (though that used a _slightly_ different, but still like `roslyn`itself a beta version), but it's still not good, and is not adding confidence.

Besides these issues, it seems the build system works pretty well. It could use some work to beat it into better shape, but overall it seems quite straightforward.

Thumbs up.

My 0.02.</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39097</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle null Display string in FxCopAnalyzersSuggestedActionCallback</Title>
    <Description>Fixes #39092
Also fix VisualStudioUnresolvedAnalyzerReference to correctly forward the Display value to the underlying analyzer reference.</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39096</IssueID>
    <RepoID>1</RepoID>
    <Title>build failure</Title>
    <Description>HEAD

Build ends prematurely with many errors of the following kind
```
W:\Roslyn\roslyn\src\Scripting\CSharpTest\InteractiveSessionReferencesTests.cs(12,47): error CS0122: 'TestCompilationFactory' is inaccessible due to its protection level [W:\Roslyn\roslyn\src\Scripting\CSharpTest\Micr
osoft.CodeAnalysis.CSharp.Scripting.UnitTests.csproj]
```

Ideas? Are you perhaps using a different way to build it than `Build.cmd`?</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39095</IssueID>
    <RepoID>1</RepoID>
    <Title>False positive IDE0060 on VB xml syntax</Title>
    <Description>**Version Used**: 
Visual Studio 16.3.2

**Steps to Reproduce**:
Found at https://github.com/dotnet/roslyn/blob/7f60b3849b6dd1c3ee64cd2d327cfc5ea6fa7b64/src/Compilers/Test/Utilities/VisualBasic/CompilationTestUtils.vb#L235-L247

Minimal repro:
```vb
Module Program
    Function M(xml As XElement) As Object
        Return xml.@name
    End Function
End Module
```

**Expected Behavior**:
The xml element is treated as used.
**Actual Behavior**:
IDE0060 reported.</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39094</IssueID>
    <RepoID>1</RepoID>
    <Title>SuppressMessage works in IDE but still produces warnings in build output</Title>
    <Description>**Version Used**: 
VS 16.3.2
**Steps to Reproduce**:

1. Create new c# .net core Console Project with following code
   ```c#
    using System;
  
    namespace ConsoleApp2
    {
        class Program
        {
            private string test;
    
            static void Main(string[] args)
            {
                var p = new Program() { test = "bl" };
                Console.WriteLine("Hello World!" + p.test);
            }
        }
    }

   ```
2. Enable nullable in `.csproj` (field `test` will show green squigles with non initilized non-nullable warning)
3.  Add Gloabl suppression file with
  ```c#
  [assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Code Quality", "CS8618:Non-nullable field is uninitialized. Consider declaring as nullable.", Justification = "&lt;Pending&gt;", Scope = "member", Target = "~F:ConsoleApp2.Program.test")]
  ```
  (warning in source code will vanish)

**Expected Behavior**:

Bild shows no warnings

**Actual Behavior**:
Build shows warning  `Program.cs(7,24,7,28): warning CS8618: Non-nullable field 'test' is uninitialized. Consider declaring the field as nullable.`</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39093</IssueID>
    <RepoID>1</RepoID>
    <Title>AbstractSymbolCompletionProvider `s_cachedDocuments` caches also cancelled task</Title>
    <Description>**Version Used**: 
any, but I have: `3.4.0-beta1-19462-14+2f21c63bb29a816d4a62191a1a0739deb64d387c`
**Steps to Reproduce**:
I assume this is hard to reproduce, it happened to me while debugging. Steps are something like this:
1. Move mouse to error so QuickFix(light bulb) would appear and then move to next 
2. You must do 2nd move at exact moment so `CreateContext` is canceled at https://github.com/dotnet/roslyn/blob/337078a/src/Features/Core/Portable/Completion/Providers/AbstractSymbolCompletionProvider.cs#L424
3. What will happen now is CancelledTask will be cached
4. Any following call will throw exception that task was cancelled with token not be cancelled...

**Expected Behavior**:
Successive calls return value instead of throwing `TaskCanceledException`
**Actual Behavior**:
It keeps throwing `TaskCanceledException`

What I think should happen... inside `GetOrCreateContext` method, it should not cache task if it's canceled...</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39092</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualStudioUnresolvedAnalyzerReference not overriding Display property provokes VS 16.3 crash.</Title>
    <Description>Regression from what shipped with VS 16.2.

https://github.com/dotnet/roslyn/blob/7f60b3849b6dd1c3ee64cd2d327cfc5ea6fa7b64/src/VisualStudio/Core/Def/Implementation/ProjectSystem/VisualStudioAnalyzer.cs#L135

does not override the `Display`property, meaning whoever uses that property will get a null value back despite the comment in `AnalyzerReference` suggesting the opposite.

Enter VS 16.3's `FxCopAnalyzersSuggestedActionCallback.IsNuGetInstalled()`

https://github.com/dotnet/roslyn/blob/829fe7d4fe75b243fc535454cf5c24c173dfe1ec/src/VisualStudio/Core/Def/Implementation/Diagnostics/FxCopAnalyzersSuggestedActionCallback.cs#L142-L144

Crash. Unhandled .NET exception.

Sure, it's VS acting up (and perhaps especially bad it's not handling this exception), but it seems this code is not doing what it `Should` (to quote)
https://github.com/dotnet/roslyn/blob/7f60b3849b6dd1c3ee64cd2d327cfc5ea6fa7b64/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerReference.cs#L29-L31

A quick (and dirty?) "fix" could be to just add an override for that property, forwarding to `_underlying.Display`, since that seems to have a non-null string, but I also believe this code needs a bit more unit testing, the baseclass comment "should" could benefit from some clarification (is it supposed to be dependable non-null, or is it an optional suggestion), and

@mavasani  that FxCop code needs to be fixed to not blindly trust reference values.

Since this is currently a show-stopper for us (we're at an effective stand still, not able to trust VS to not crash while editing code), perhaps that could be incentive to fast track a fix?

Edit: Just in case it helps understanding the issue, `_underlying.Display` contains the string
`Unresolved: MyProjPath\\mscorlib.dll`, where MyProjPath is the local filesystem absolute (with doubled-up backslashes) path to the directory holding the .csproj, which seems obvious to me since there are no dll's at all in that directory.</Description>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39091</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix: Underselection test bug</Title>
    <Description>+ Fix for #38708 
+ Enabled interleaving of {| and |] in tests (required for the issue regression tests)
+ Added general tests for IsUnderselected + machinery.</Description>
    <CreatedDate>06/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39090</IssueID>
    <RepoID>1</RepoID>
    <Title>Handling of non-nullable fields for classes with "Init" method</Title>
    <Description>I have a bunch of related classes that are constructed in 2 steps:
1) Object is instantiated, constructor is called
2) Init() method is called

The problem is that some fields are initialized in Init() method and are guaranteed to be non-null afterwards. However, the compiler complains that these fields are not initialized so I'm forced to either mark them as nullable (which I don't like) or do some tricks like explicitly initializing them with null! in the constructor to silence the compiler.
Have you considered allowing to annotate certain methods as "init methods"? The effect would be that non-null fields/properties would have to be initialized either in the constructor or in init method(s).
In cases when Init is in fact part of the object construction no other method should be called in between (maybe apart from setting some properties). This means it's usually safe to leave such fields/properties as not-null and once Init method is called it's safe to access them.</Description>
    <CreatedDate>06/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39089</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix symbol display for group by range variable</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38794.

The main change here is adding a `QueryContinuationSyntax` case to `GetQueryBody`, though that's a bit lost in the diff, because I also refactored the method to use `switch` expression.</Description>
    <CreatedDate>06/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39088</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP: Sqlite close on delete</Title>
    <Description>
    </Description>
    <CreatedDate>06/10/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39087</IssueID>
    <RepoID>1</RepoID>
    <Title>Test VB case sensitive behavior vs the specification</Title>
    <Description>We should test to see if the VB compiler complies with the language specification in handling case insensitivity.  Below are a few of the language specification's assertions.  If there is a mismatch, we will have to decide whether we want to change the compiler or the specification.

&gt; Case is unimportant in Visual Basic programs. For simplicity, all terminals will be given in standard casing, but any casing will match them. Terminals that are printable elements of the ASCII character set are represented by their corresponding ASCII characters. Visual Basic is also width insensitive when matching terminals, allowing full-width Unicode characters to match their half-width Unicode equivalents, but only on a whole-token basis. A token will not match if it contains mixed half-width and full-width characters.

See also https://en.wikipedia.org/wiki/Halfwidth_and_Fullwidth_Forms_(Unicode_block)

&gt; Identifiers are case insensitive, so two identifiers are considered to be the same identifier if they differ only in case. 
&gt; Note   The Unicode Standard one-to-one case mappings are used when comparing identifiers and any locale-specific case mappings are ignored.

&gt; It may be possible in other languages to create a declaration space that contains different kinds of entities with the same name (for example, if the language is case sensitive and allows different declarations based on casing). In that situation, the most accessible entity is considered bound to that name; if more than one type of entity is most accessible then the name is ambiguous. Public is more accessible than Protected Friend, Protected Friend is more accessible than Protected or Friend, and Protected or Friend is more accessible than Private.

</Description>
    <CreatedDate>05/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39086</IssueID>
    <RepoID>1</RepoID>
    <Title>Prevent removing all whitespace when formatting unrecognized whitespace charactes</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38895.

Also used C# tuple instead of `ValueTuple` as the return type of a related method.

---

As I understand it, the issue here is that:

1. Spacing formatting is suppressed within multiline collection initializers:

    https://github.com/dotnet/roslyn/blob/e8a7d91cc01b8904a876b362598a468337c169e7/src/Workspaces/CSharp/Portable/Formatting/Rules/SuppressFormattingRule.cs#L391-L396

2. When formatting is suppressed, whitespace-only trivia is still normalized to remove unknown whitespace characters:

    https://github.com/dotnet/roslyn/blob/e8a7d91cc01b8904a876b362598a468337c169e7/src/Workspaces/CSharp/Portable/Formatting/Engine/Trivia/TriviaDataFactory.cs#L151-L154

But when unknown whitespace characters are the only whitespace characters, this leads to zero whitespace between the two tokens and thus often to invalid code. This PR fixes that by replacing the unknown whitespace with a single space.

The result should be valid code, but likely one with weird whitespace formatting (see the unit test, where the `new C()` line has no indentation after formatting). I think it would be nice if formatting wasn't suppressed for multiline collection initializes, but I don't understand the reasons behind that and so I think it's outside the scope of this PR.</Description>
    <CreatedDate>05/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39085</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix Issue #9658</Title>
    <Description>Add doc to CSharpCompilation.ClassifyConversion method</Description>
    <CreatedDate>05/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39084</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20191021.4
- **Date Produced**: 10/21/2019 9:44 PM
- **Commit**: f104bcb28e4936b0c0ab7c0d8cb73892ab515e60
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 5.0.0-beta.19521.4

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)



































</Description>
    <CreatedDate>05/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39083</IssueID>
    <RepoID>1</RepoID>
    <Title>'Go to all' can't find local functions</Title>
    <Description>**Version Used**: VS 16.3

**Steps to Reproduce**:

1. `Ctrl+,`
2. Search for `LocalFunction`

```C#
using System;

namespace ConsoleApp9
{
    class Program
    {
        static void Main(string[] args)
        {
            static void LocalFunction() { }

            Console.WriteLine("Hello World!");
        }
    }
}
```

**Expected Behavior**:

The local function is found

**Actual Behavior**:

The local function is not found</Description>
    <CreatedDate>05/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39082</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch expression that returns lambda crashes VS right after typing block's open brace</Title>
    <Description>**Version Used**: VS Community 2019 Preview 16.4.0 Preview 1.0

**Steps to Reproduce**:

1. Paste: `var x = ((Func&lt;int, decimal&gt;)(0 switch { 0 =&gt; _ =&gt; {}}))(0);`
2. Visual Studio dies

**Expected Behavior**: I can start writing lambda block

**Actual Behavior**: VS crashes
</Description>
    <CreatedDate>05/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39081</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39080</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39079</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix generate method type parameter nullability</Title>
    <Description>
    </Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39078</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP: personal review</Title>
    <Description>
    </Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39077</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify C# syntax generators.</Title>
    <Description>It's probably a good idea to review this PR one commit at a time. 
This PR should also be reviewed with whitespace changes **OFF**.  Entire commits will become "only whitespace changed" doing that.

This PR simplifies the implementation of our syntax generator by using the existing (but uncommonly used) functionality to indent/dedent/block pieces of code.  Instead, most of our writing code had to manually insert spaces, making it super annoying to keep track of current indent and emit the write amount of spaces.

This has been a pain every time i've edited SourceWriter so i thought i would finally clean it up.  While i was in there, I also updated how we emit a few constructs to:

1. keep them formatted like we normally do in our codebase.
2. Use more modern constructs for brevity (i.e. `=&gt;`, `switch expressions` `conditional exprs`, and the like).
</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39076</IssueID>
    <RepoID>1</RepoID>
    <Title>Quick info doesn't show nullable type when mousing over var</Title>
    <Description>Paste the following into a C# 8 application:

```csharp
#nullable enable

namespace ConsoleApp65
{
    class C
    {
        void M()
        {
            object? o = null;
            var s = (string?)o;
        }
    }
}
```

Mouse over "var".

**Expected:** it shows System.String?
**Actual:** it shows System.String</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39075</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract method drops nullable annotation on explicit cast</Title>
    <Description>Copy into a C# 8.0 app:

```
#nullable enable

namespace ConsoleApp65
{
    class C
    {
        void M()
        {
            object? o = null;
            var s = (string?)o;
            Console.WriteLine(s);
        }
    }
}
```

Invoke extract method on the "o" in the "var s..." line. Do *not* select the cast, just the o.

**Expected:** the generated method returns string? because that's the explicit cast before it.
**Actual:** it returns just string which breaks code.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39074</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate method drops ? on class-constrained T</Title>
    <Description>Paste the following into a C# 8.0 app:

```
#nullable enable

namespace ConsoleApp65
{
    class C
    {
        public T? M&lt;T&gt;() where T : class
        {
            T? t = null;
            return M2(t);
        }
    }
}
```

Invoke Generate Method on M2.

**Expected:** M2 is generated with a parameter accepting T?
**Actual:** the parameter is just T so it doesn't work right</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39073</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion: save trigger location per item</Title>
    <Description>Attempt to fix https://github.com/dotnet/roslyn/issues/38596</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39072</IssueID>
    <RepoID>1</RepoID>
    <Title>OutOfMemoryException from parser while typing in VS</Title>
    <Description>typing the code below reliably triggers the crash in dogfood build 16.4 preview2 29403.147master, [||] is where the cursor is.

```cs
public class Foo
{
        public enum ReferenceType
        {
            None,
            Project,
            Metadata
        }

        public IEnumerable&lt;object[]&gt; GetSomething
            =&gt; (new[] { ReferenceType.None, ReferenceType.Project, ReferenceType.Metadata }).Select(refType =&gt; new[] { ref[||] });
}
```

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.Resize()
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateEntry(TKey key, TValue value)
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(TKey key, TValue value)
   at Microsoft.CodeAnalysis.GreenNode..ctor(UInt16 kind, DiagnosticInfo[] diagnostics, SyntaxAnnotation[] annotations)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken.MissingTokenWithTrivia.SetDiagnostics(DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.GreenNodeExtensions.WithDiagnosticsGreen[TNode](TNode node, DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.WithAdditionalDiagnostics[TNode](TNode node, DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.CreateMissingToken(SyntaxKind expected, SyntaxKind actual, Boolean reportError)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.EatToken(SyntaxKind kind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArrayInitializer()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseImplicitlyTypedArrayCreation()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNewExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePossibleRefExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaBody()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaExpression(SyntaxToken asyncToken)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentExpression(Boolean isIndexer)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentList(SyntaxToken&amp; openToken, SeparatedSyntaxList`1&amp; arguments, SyntaxToken&amp; closeToken, SyntaxKind openKind, SyntaxKind closeKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseParenthesizedArgumentList()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePostFixExpression(ExpressionSyntax expr)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePossibleRefExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArrowExpressionClause()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePropertyDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceOpt, SyntaxToken identifier, TypeParameterListSyntax typeParameterList)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatementCore(SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseClassOrStructOrInterfaceDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTypeDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatementCore(SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(SyntaxToken&amp; openBrace, NamespaceBodyBuilder&amp; body, SyntaxListBuilder&amp; initialBadNodes, SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceDeclarationCore(SyntaxListBuilder`1 attributeLists, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceDeclaration(SyntaxListBuilder`1 attributeLists, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(SyntaxToken&amp; openBrace, NamespaceBodyBuilder&amp; body, SyntaxListBuilder&amp; initialBadNodes, SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnitCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseWithStackGuard[TNode](Func`1 parseFunc, Func`1 createEmptyNodeFunc)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnit()
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChanges(SourceText newText, IReadOnlyList`1 changes)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(SourceText newText)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParse(TextAndVersion newTextAndVersion, TreeAndVersion oldTreeAndVersion, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;IncrementallyParseTreeAsync&gt;d__15.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.DocumentState+&lt;IncrementallyParseTreeAsync&gt;d__15.MoveNext()
   at System.Runtime.CompilerServices.ConditionalWeakTable`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Resize()
   at System.Runtime.CompilerServices.ConditionalWeakTable`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].CreateEntry(System.__Canon, System.__Canon)
   at System.Runtime.CompilerServices.ConditionalWeakTable`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Add(System.__Canon, System.__Canon)
   at Microsoft.CodeAnalysis.GreenNode..ctor(UInt16, Microsoft.CodeAnalysis.DiagnosticInfo[], Microsoft.CodeAnalysis.SyntaxAnnotation[])
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken+MissingTokenWithTrivia.SetDiagnostics(Microsoft.CodeAnalysis.DiagnosticInfo[])
   at Microsoft.CodeAnalysis.GreenNodeExtensions.WithDiagnosticsGreen[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.CodeAnalysis.DiagnosticInfo[])
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.WithAdditionalDiagnostics[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.CodeAnalysis.DiagnosticInfo[])
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.CreateMissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.SyntaxKind, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.EatToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArrayInitializer()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseImplicitlyTypedArrayCreation()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNewExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePossibleRefExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaBody()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentExpression(Boolean)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken ByRef, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax&gt; ByRef, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken ByRef, Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseParenthesizedArgumentList()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePostFixExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionSyntax)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePossibleRefExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArrowExpressionClause()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePropertyDeclaration(Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt;, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.TypeParameterListSyntax)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatementCore(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseClassOrStructOrInterfaceDeclaration(Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt;, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTypeDeclaration(Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt;, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatementCore(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken ByRef, NamespaceBodyBuilder ByRef, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder ByRef, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceDeclarationCore(Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt;, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceDeclaration(Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt;, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken ByRef, NamespaceBodyBuilder ByRef, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder ByRef, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnitCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseWithStackGuard[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Func`1&lt;System.__Canon&gt;, System.Func`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnit()
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChanges(Microsoft.CodeAnalysis.Text.SourceText, System.Collections.Generic.IReadOnlyList`1&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt;)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParse(Microsoft.CodeAnalysis.TextAndVersion, Microsoft.CodeAnalysis.TreeAndVersion, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.DocumentState+&lt;IncrementallyParseTreeAsync&gt;d__15.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.DocumentState+&lt;IncrementallyParseTreeAsync&gt;d__15, Microsoft.CodeAnalysis.Workspaces, Version=3.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;IncrementallyParseTreeAsync&gt;d__15 ByRef)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParseTreeAsync(Roslyn.Utilities.ValueSource`1&lt;Microsoft.CodeAnalysis.TreeAndVersion&gt;, Roslyn.Utilities.ValueSource`1&lt;Microsoft.CodeAnalysis.TextAndVersion&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.DocumentState+&lt;&gt;c__DisplayClass14_0.&lt;CreateLazyIncrementallyParsedTree&gt;b__0(System.Threading.CancellationToken)
   at Roslyn.Utilities.AsyncLazy`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].StartAsynchronousComputation(AsynchronousComputationToStart&lt;System.__Canon&gt;, Request&lt;System.__Canon&gt;, System.Threading.CancellationToken)
   at Roslyn.Utilities.AsyncLazy`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].GetValueAsync(System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.DocumentState+&lt;GetSyntaxTreeAsync&gt;d__42.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.DocumentState+&lt;GetSyntaxTreeAsync&gt;d__42, Microsoft.CodeAnalysis.Workspaces, Version=3.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;GetSyntaxTreeAsync&gt;d__42 ByRef)
   at Microsoft.CodeAnalysis.DocumentState.GetSyntaxTreeAsync(System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Document.GetSyntaxTreeAsync(System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Host.BackgroundParser+&lt;&gt;c__DisplayClass20_0.&lt;ParseDocumentAsync&gt;b__0()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()

```</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39071</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip TestExpanderWithImportCompletionDisabled</Title>
    <Description>related to #39070</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>06/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39070</IssueID>
    <RepoID>1</RepoID>
    <Title>[Flaky Test] TestExpanderWithImportCompletionDisabled</Title>
    <Description>Tracking re-enabling this test.

CI run with a failure (see attempt 1): https://dev.azure.com/dnceng/public/_build/results?buildId=375867

```
System.Threading.Tasks.TaskCanceledException : Se canceló una tarea.
en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.TestState.VB$StateMachine_63_WaitForUIRenderedAsync.MoveNext() en /_/src/EditorFeatures/TestUtilities2/Intellisense/TestState.vb:línea 495
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests.VB$StateMachine_209_TestExpanderWithImportCompletionDisabled.MoveNext() en /_/src/EditorFeatures/Test2/IntelliSense/CSharpCompletionCommandHandlerTests.vb:línea 5007
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:línea 264
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:línea 48
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExceptionAggregator.&lt;RunAsync&gt;d__9.MoveNext() en C:\projects\xunit\src\xunit.core\Sdk\ExceptionAggregator.cs:línea 90
```</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39069</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor merging types (dynamic, tuple names, nullability) into a single pass</Title>
    <Description>Fixes #30669</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39068</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn doesn't process code analysis attributes on deconstruction methods called in switches</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

```cs
#nullable enable
using System.Diagnostics.CodeAnalysis;
class C&lt;T&gt;
{
  void M1(C&lt;string&gt; c)
  {
    var (t1, t2) = c;
    t1.ToString(); // CS8602, correct
    t2.ToString();
  }
  
  void M2(C&lt;string&gt; c)
  {
    switch (c)
    {
      case var (t1, t2):
        t1.ToString(); // no warnings
        t2.ToString();
        break;
    }
  }

  public extern void Deconstruct([MaybeNull] out T t1, out T t2);
}
```

**Expected Behavior**:
`t1.ToString()` has `CS8602 Dereference of a possibly null reference.` warning as it's a variable assigned with `[MaybeNull] out T t1` 

**Actual Behavior**:
No warnings for `M2`</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39067</IssueID>
    <RepoID>1</RepoID>
    <Title>updates Roslyn to consume 16.4 version of Editor</Title>
    <Description>Update Roslyn to consume 16.4 version of the Editor.
This is the first 16.4 version of Editor which works (there were issues with shell packages), and merging of this PR will allow Editor team to continue with feature work</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39066</IssueID>
    <RepoID>1</RepoID>
    <Title>updates Roslyn to consume 16.4 version of Editor</Title>
    <Description>Update Roslyn to consume 16.4 version of the Editor.
This is the first 16.4 version of Editor which works (there were issues with shell packages), and merging of this PR will allow Editor team to continue with feature work</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39065</IssueID>
    <RepoID>1</RepoID>
    <Title>updates Roslyn to consume 16.4 version of Editor</Title>
    <Description>Update Roslyn to consume 16.4 version of the Editor</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39064</IssueID>
    <RepoID>1</RepoID>
    <Title>VB compiler can't compile when using non-standard line endings on Windows</Title>
    <Description>Repro steps:

```
P:\roslyn-bad&gt; rm -re -fo *
P:\roslyn-bad&gt; ii .
P:\roslyn-bad&gt; git init
Initialized empty Git repository in P:/roslyn-bad/.git/
P:\roslyn-bad&gt; git config --local core.autocrlf input
P:\roslyn-bad&gt; git config core.autocrlf
input
P:\roslyn-bad&gt; git remote add origin https://github.com/dotnet/roslyn.git
P:\roslyn-bad&gt; git fetch origin
remote: Enumerating objects: 78, done.
...
P:\roslyn-bad&gt; git reset --hard origin/master
P:\roslyn-bad&gt; .\bulid.cmd -restore
...
    x = "hi" : X$ = "hello"   ' error : x is of type Object. [P:\roslyn-bad\src\Compilers\VisualBasic\Portable\Microsoft.CodeAnalysis.VisualBasic.vb proj]
    3655 Warning(s)
    1 Error(s)

Time Elapsed 00:02:46.42
Build failed.
```

The error appears to be coming while processing [this line](https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Portable/Binding/ImplicitVariableBinder.vb#L29) in the VB compiler:

```basic
    '''     x = "hi": X$ = "hello"   ' error: x is of type Object.
```

On one hand the Roslyn repository does not supporting being used with line endings other than CRLF on Windows. Our tests and infrastructure depend on that. If you use anything other than CRLF there will be problems running tests. 

At the same time though the code should still compile. The compiler, SDK, etc ... should work fine across all line ending types. The fact this error is happening on a comment just makes the issue even more baffling. 

Want to understand why this is happening ... 
</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39063</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixed incorrect IDE0044 (Make field readonly) when the field is accessed by refeference.</Title>
    <Description>In OperationExtensions there is an extension method **GetValueUsageInfo** which should return whether a given operation performs any read, write, etc.

The **MakeFieldReadonlyDiagnosticAnalyzer** class uses this information to infer whether a field can be made readonly. GetValueUsageInfo doesn't perform any analysis when the operation's parent is variable initializer and in that case it always returns **ValueUsageInfo.Read** which causes the diagnostic analyzer to wrongly suggest to make a field readonly.

Here is example where it fails:

``` csharp
class Program
{
    int i;

    void M()
    {
        ref var value = ref i;
        value += 1;
    }
}
```
 I've added a case inside GetValueUsageInfo to correctly handle this situation and also introduced 2 new unit tests to verify it is working. I am unsure however if somewhere there isn't something that depends on the method returning incorrectly ValueUsageInfo.Read for such cases.

Fixes #38995.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39062</IssueID>
    <RepoID>1</RepoID>
    <Title>Compilation allows method to return without assigning out variable of custom value type</Title>
    <Description>**Version Used**: 
VS 15.9.11

**Steps to Reproduce**:
Compile the following program:
```
public static class Program
{
    public static void Main(string[] args)
    {
	DoesNotAssign(out var x);
    }

    internal static IDisposable DoesNotAssign(out CancellationToken cancellationToken)
    {
	return null;
    }
}
```

**Expected Behavior**:
Compiles with error "CS0177 The out parameter 'cancellationToken' must be assigned to before control leaves the current method"

**Actual Behavior**:
Compiles with no errors. X is set to the default cancellation token value.

**Notes**:
From my experimentation, this happens for `CancellationToken` or other custom value types (e. g. `internal struct Foo { }`, but does not happen for reference types or primitive value types (e. g. `int`, `string`).</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39061</IssueID>
    <RepoID>1</RepoID>
    <Title>Spelling fixes</Title>
    <Description>
    </Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39060</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39059</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39058</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview2-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39057</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview2 into master.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.4-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39056</IssueID>
    <RepoID>1</RepoID>
    <Title>Spelling fixes</Title>
    <Description>
    </Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39055</IssueID>
    <RepoID>1</RepoID>
    <Title>Go to base: support metadata references and bug fixes</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38700

1. Support Go to base in case with bases is in metadata.
2. Removes interfaces implemented by hidden by new/Shadows members from the base hierarchy, if the interface is not implemented below the hide. For example:
```
interface I { void M(); }
class C : I { public virtual void M(); }
class D : C { public new void M(); }
```
here 
```
I i = new D();
i.M(); 
```
calls `C.M()` not `D.M()`. Therefore, `I.M()` is not a base for `D.M()`. Fixed this.
3. Fixed a issue with overloads and interfaces.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39054</IssueID>
    <RepoID>1</RepoID>
    <Title>Add annotations for symbol-related types and interfaces</Title>
    <Description>🚧 Builds on #39053. After that one is merged, many files will drop out of this pull request.

Each commit was verified to compile successfully without new warnings, so reviewers do have the option of going commit-by-commit.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39053</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate more compiler internal types</Title>
    <Description>These are internal types. There may be some cases where an annotation was missed, but I used a working strategy of "when it doubt, prefer a non-nullable type if it builds successfully". This is a stepping stone for a follow-up pull request where I start to annotate `ISymbol` and derived types.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39052</IssueID>
    <RepoID>1</RepoID>
    <Title>ArrayBuilderExtensions.FreeAll is wrapped with nullable disable</Title>
    <Description>https://github.com/dotnet/roslyn/blob/7bf43667a1658911e4091d9e60695fe15b3bd2e0/src/Compilers/Core/Portable/Collections/ArrayBuilderExtensions.cs#L191-L200

According to https://github.com/dotnet/roslyn/pull/38882#discussion_r328916521, this is related to #38195.

/cc @333fred </Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39051</IssueID>
    <RepoID>1</RepoID>
    <Title>Add API for marking a syntax tree as generated</Title>
    <Description>Provides API to fix #3705.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39050</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39049</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39048</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview2 to release/dev16.4-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview2 into release/dev16.4-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview2-to-release/dev16.4-preview2-vs-deps
git reset --hard upstream/release/dev16.4-preview2-vs-deps
git merge upstream/release/dev16.4-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview2-to-release/dev16.4-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39047</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1-vs-deps to release/dev16.4-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1-vs-deps into release/dev16.4-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-vs-deps-to-release/dev16.4-preview2-vs-deps
git reset --hard upstream/release/dev16.4-preview2-vs-deps
git merge upstream/release/dev16.4-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-vs-deps-to-release/dev16.4-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39046</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC: Disable editor warning "changes made in project will not be applied while the application is running"</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/751628/disable-editor-warning-changes-made-in-project-wil.html)._

---
Please do not show this warning if _Enable Edit and Continue_ is disabled. The developer knows that the changes don't match with the current running application and the decorated source code is distracting.

---
### Original Comments

#### Visual Studio Feedback System on 9/28/2019, 08:23 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### oa on 10/1/2019, 04:25 AM: 

btw: Tools-&gt;Options-&gt;Fonts and Colors-&gt;Stale Code has no impact on the color of the drawn lines
#### Doug Meeker on 10/3/2019, 09:18 AM: 

&lt;p&gt;It looks like &lt;em&gt;Other Error&lt;/em&gt; is the one with default set to purple squiggles.  But that does not effect this error display either.&lt;/p&gt;

#### Visual Studio Feedback System on 10/3/2019, 02:31 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39043</IssueID>
    <RepoID>1</RepoID>
    <Title>Go To Member not working</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/749408/go-to-member-not-working-1.html)._

---
Sometimes the &amp;quot;Go To Member&amp;quot; functionality is not working. It is just showing &amp;quot;no results&amp;quot;. Running &amp;quot;Go To All&amp;quot; shows the corresponding symbols but also stuff from other files. A restart of Visual studio fixes the problem at least for some time. We are using Visual Studio 2019 16.3.1

---
### Original Comments

#### Visual Studio Feedback System on 9/26/2019, 11:34 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39042</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio says that cast to double is redundant when it is not (C#)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/750100/visual-studio-says-that-cast-to-double-is-redundan.html)._

---
&lt;p&gt;Visual Studio says “Cast is redundant” here:&lt;/p&gt;
&lt;pre&gt;            long x = 121645100408832000;
            return ((long)(double)x == x) &amp;amp;&amp;amp; ((long)(double)(x + 1) == x + 1);
&lt;/pre&gt;&lt;p&gt;If I “Remove Unnecessary Cast” as Visual Studio suggests, then the return value changes from false to true.&lt;/p&gt;

---
### Original Comments

#### Visual Studio Feedback System on 9/27/2019, 00:00 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39041</IssueID>
    <RepoID>1</RepoID>
    <Title>C# field rename refactoring messing up when space is included</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/750347/c-field-rename-refactoring-messing-up-when-space-i.html)._

---
Actual result:
If you (f.ex) rename a field in a class by hitting CTRL+R CTRL+R, then possibly type a name containing a trailing space, or if you just paste a name from clipboard containing a trailing space, the rename refactoring not only treats this as if the new identifier is to _have_  a space at the end, it adds that space _everywhere_ the identifier is used, and obviously also where it's defined.

Expected:
Strip any and all non-valid leading and trailing control characters. Hell, just abort the operation for all I care, but not this.

---
### Original Comments

#### Visual Studio Feedback System on 9/27/2019, 00:16 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39040</IssueID>
    <RepoID>1</RepoID>
    <Title>VS C# Editor, Advanced, Editor Help, "Split string literals on enter" broken</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/752445/vs-c-editor-advanced-editor-help-split-string-lite.html)._

---
&amp;quot;Split string literals on enter&amp;quot; has been broken since it was introduced, and still is in VS2019.

![image](https://user-images.githubusercontent.com/1408396/66427836-a5bf8080-e9c9-11e9-94bd-98508de86053.png)

Additionally, it's _completely_ broken if you use multi-carets. Then it doesn't even pretent to attempt to &amp;quot;Split string literals on enter&amp;quot;, it just splits and indents each caret without inserting quotes, totally destroying the string literal.

I can be more forgiving about the latter bug, since multi-caret was a later addition to the editor, &amp;lt;rant_mode=&amp;quot;on&amp;quot;&amp;gt;but please - stuff like this needs to be _checked_ before release&amp;lt;rant_mode=&amp;quot;off&amp;quot;&amp;quot;&amp;gt;.
Anyway, it's a clear bug and needs to be fixed. Should be no more than a few minutes of work after the main bug has been fixed.

---
### Original Comments

#### Visual Studio Feedback System on 9/28/2019, 09:18 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39039</IssueID>
    <RepoID>1</RepoID>
    <Title>Quick fix for inconsistent accessbility issue doesn't help</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/752631/quick-fix-for-inconsistent-accessbility-issue-does.html)._

---
The problem I got is in the following situation:
- a Response class is internal
- another class has a public property of that type

Suggested fixes are:
- Replace with methods
- Convert to full property

Expected: change visibility of the property or of the class or do something else entirely

---
### Original Comments

#### Visual Studio Feedback System on 9/28/2019, 10:57 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39038</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39037</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39036</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview2-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39035</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData.json</Title>
    <Description>based on Jason's feedback in #39016 </Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39034</IssueID>
    <RepoID>1</RepoID>
    <Title>Pool analyzer diagnostic reporters</Title>
    <Description>This has shown up as a significant source of allocations. The design
here is that when an analyzer reports a diagnostic we may need to filter
or alter it based on some configuration. Previously we stored the
configuration information by closing over captured variables, but that
could be very expensive if it's being done for every analyzer
invocation. Since we can only really execute one analyzer per running
thread on the machine, the actual number of concurrent objects we need
to create is approximately the number of running threads. Pooling is a
good solution to this problem.

Before:
```

|                      Method |    Mean |   Error |  StdDev |  Median |     Min |     Max |       Gen 0 |      Gen 1 |     Gen 2 | Allocated |
|---------------------------- |--------:|--------:|--------:|--------:|--------:|--------:|------------:|-----------:|----------:|----------:|
| GetDiagnosticsWithAnalyzers | 16.28 s | 0.149 s | 0.268 s | 16.23 s | 15.76 s | 16.97 s | 200000.0000 | 59000.0000 | 2000.0000 |   1.48 GB |
```

After:
```
|                      Method |    Mean |   Error |  StdDev |  Median |     Min |     Max |       Gen 0 |      Gen 1 |     Gen 2 | Allocated |
|---------------------------- |--------:|--------:|--------:|--------:|--------:|--------:|------------:|-----------:|----------:|----------:|
| GetDiagnosticsWithAnalyzers | 15.77 s | 0.176 s | 0.519 s | 15.67 s | 14.96 s | 17.07 s | 184000.0000 | 55000.0000 | 2000.0000 |   1.36 GB |
```

Note: I don't think this is that much faster -- my machine wasn't completely quiet during the noise measurements, but I do believe that bytes allocated is accurate and a significant improvement.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39033</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable support for bulk configuration of analyzer diagnostics for GeneralDiagnosticOption = Suppress</Title>
    <Description>See discussion here: https://github.com/dotnet/roslyn/pull/38886/files#r330788291</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39031</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix import completion crash in interactive window</Title>
    <Description>Fix NRE  in import completion when using interactive window 
#39027 

@tmat @ivanbasov Please review</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39030</IssueID>
    <RepoID>1</RepoID>
    <Title>Interactive VSIX build is missing CSI.EXE</Title>
    <Description>**Version Used**: latest

**Steps to Reproduce**:

1. Go to MyGet Roslyn
2. Download Interactive VSIX
3. Rename to ZIP and unpack

**Expected Behavior**:
CSI.EXE should be among the files

**Actual Behavior**:
CSI.EXE is nowhere to be found</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39029</IssueID>
    <RepoID>1</RepoID>
    <Title>Move consumed analyzer packages to newly published version 2.9.6</Title>
    <Description>The new analyzer package has a fix for the memory leak issue #38330
Also fix violations from newly added rules.

NOTE: I have opened this PR against master, but it may have to be retargeted to a different branch based on applicable bar for these changes.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39028</IssueID>
    <RepoID>1</RepoID>
    <Title>Methods marked with the JetBrains UsedImplicitly attribute have an IDE0051 warning</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/757757/methods-marked-with-the-jetbrains-usedimplicitly-a.html)._

---
[regression] [worked-in:15.9.16]
Methods marked with the JetBrains attribute [UsedImplicitly] are greyed out with an IDE0051 analysis warning
For instance using PropertyChanged.Fody for classes that implement INotifyPropertyChanged there is no need to call the private method OnPropertyChanged in the C# file. 
In Visual Studio 2017 the UsedImplicitly attribute was correctly recognised and there was no IDE0051 warning

```
using System.ComponentModel;
using System.Runtime.CompilerServices;
using JetBrains.Annotations;

namespace ExampleAnalysisIssue
{
    [UsedImplicitly]
    public sealed class Class1 : INotifyPropertyChanged
    {
        public int Data { get; set; }

public event PropertyChangedEventHandler PropertyChanged;

[NotifyPropertyChangedInvocator]
        [UsedImplicitly]
        private void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?. Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

```

---
### Original Comments

#### Visual Studio Feedback System on 10/3/2019, 00:11 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39027</IssueID>
    <RepoID>1</RepoID>
    <Title>NRE in AbstractTypeImportCompletionProvider</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/66147111-019d9a00-e5c3-11e9-964b-fb558919572c.png)

**Steps to Reproduce**:

1. Type teh following in the Interactive Window
```
&gt; var s = "x";
&gt; if (int.TryParse(s, out var 
```

```
System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractTypeImportCompletionProvider.&amp;lt;&amp;gt;c__DisplayClass8_0.&amp;lt;&amp;lt;AddCompletionItemsAsync&amp;gt;g__HandleReferenceAsync|2&amp;gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractTypeImportCompletionProvider.&amp;lt;AddCompletionItemsAsync&amp;gt;d__8.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Completion.Providers.AbstractTypeImportCompletionProvider.&amp;lt;ProvideCompletionsAsync&amp;gt;d__6.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&amp;lt;GetContextAsync&amp;gt;d__33.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&amp;lt;ComputeNonEmptyCompletionContextsAsync&amp;gt;d__27.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&amp;lt;GetCompletionsWithAvailabilityOfExpandedItemsAsync&amp;gt;d__25.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CompletionSource.&amp;lt;GetCompletionContextWorkerAsync&amp;gt;d__24.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.&amp;lt;CallExtensionPointAsync&amp;gt;d__36`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```
</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39026</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't build .NET FX assets in source-build</Title>
    <Description>These changes let us eliminate the prebuilt .NET FX reference assemblies from source-build.  In addition to the obvious TFM change, we need to change the Compilers package to include the `build/` files since that's how downstream repos pick up the Roslyn we build.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39025</IssueID>
    <RepoID>1</RepoID>
    <Title>ScriptState&lt;T&gt; should be serializable so it can be stored in non-InProc ASP.NET session state</Title>
    <Description>I was hoping to create an initial C# script (per website user), run it, cache its current state in ASP.NET Framework 4.7.2 session state, and then continue execution as website users type in subsequent commands (submitted to the website's serverside via AJAX).  The mechanism is described here:- https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples#-continue-script-execution-from-a-previous-state

But because my website uses `Microsoft.Web.Redis.RedisSessionStateProvider` and `Microsoft.AspNet.SessionState.SessionStateModuleAsync` for session state (i.e. it's not InProc), I think that this plan is doomed to failure because `ScriptState&lt;T&gt;` is not serializable.

Could `ScriptState&lt;T&gt;` (and any other participating classes) be made to be serializable to enable this usage?
</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39024</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Proposal: ability to refer to generic type</Title>
    <Description>Imagine if you have the following generic struct definition:

```c#
public struct Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;
        where TPart1 : struct, IPart&lt;T1&gt;
        where TPart2 : struct, IPart&lt;T2&gt;
        where TPart3 : struct, IPart&lt;T3&gt;
        where TPart4 : struct, IPart&lt;T4&gt;
    {

        // ... some code here

        private static readonly Func&lt;
            Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;,
            Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;&gt;[] Modifiers = GetModifiers().ToArray();

        private static IEnumerable&lt;Func&lt;Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;, Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;&gt;&gt; GetModifiers()
        {
            return Modifier.GetModifiers&lt;Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;&gt;(
                // ... some code here
            );
        }
```

If we could refer to the current closed type definition, code would be much more readable, for example by using Self:
```c#
public struct Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;
        where TPart1 : struct, IPart&lt;T1&gt;
        where TPart2 : struct, IPart&lt;T2&gt;
        where TPart3 : struct, IPart&lt;T3&gt;
        where TPart4 : struct, IPart&lt;T4&gt;
    {

        // ... some code here

        private static readonly Func&lt;Self, Self&gt;[] Modifiers = GetModifiers().ToArray();

        private static IEnumerable&lt;Func&lt;Self,Self&gt;&gt; GetModifiers()
        {
            return Modifier.GetModifiers&lt;Self&gt;(
                // ... some code here
            );
        }
```

If you believe it could be useful I would be happy to make a PR. I would need some guidance.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39023</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20191002.11
- **Date Produced**: 10/2/2019 11:34 PM
- **Commit**: da75c6547c64a91eb8a9cecf8c503331c2cc394a
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 5.0.0-beta.19502.11

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39022</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39021</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1-vs-deps to release/dev16.4-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1-vs-deps into release/dev16.4-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-vs-deps-to-release/dev16.4-preview2-vs-deps
git reset --hard upstream/release/dev16.4-preview2-vs-deps
git merge upstream/release/dev16.4-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-vs-deps-to-release/dev16.4-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39020</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-vs-deps to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-vs-deps into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-vs-deps-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-vs-deps-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39019</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview2 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.4-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39018</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable assert tracked by https://github.com/dotnet/roslyn/iss…</Title>
    <Description>@cston for review. This is a test-only change, despite being in production code, as it's a debug assert only.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39017</IssueID>
    <RepoID>1</RepoID>
    <Title>Update System.Collections.Immutable to 1.2.4.0 in VS</Title>
    <Description>#38809 updated System.Collections.Immutable to take advantage of new API but had to be reverted due to issues integrating into VS.

At this point, we get type load exceptions in test runs. It's possible that some more projects in VS need to have binding redirects added. Once we get that figured out by making a test insertion in a dev branch we can recreate #38809 and pull into master again.

/cc @agocke @tmat @ryzngard</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39016</IssueID>
    <RepoID>1</RepoID>
    <Title>Update config for snap</Title>
    <Description>Updates publish data and version for 16.4-p3 snap. Merge after we have everything we need merged for a good signed build out of master-vs-deps.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39015</IssueID>
    <RepoID>1</RepoID>
    <Title>Track local telemetry during remote LSP experimentation for comparison.</Title>
    <Description>track local telemetry for syntax classifications during LSP guest session.  the idea here is that walking the tree is fast, longest operation is actually building it, so that's the best comparison to make</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39014</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable warnAsError for correctness builds</Title>
    <Description>These changes setup the Correctness Test leg to fail when the formatting analyzer reports warnings. Other test legs will ignore these warnings and run unit tests as expected. Local builds (`.\build.cmd` and VS) will report warnings but not fail the build. </Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39013</IssueID>
    <RepoID>1</RepoID>
    <Title>NoWarn NU5128 instead of suppressing dependencies</Title>
    <Description>Our NuGet meta-packages were not being generated with package dependencies because they were being suppressed.  Temporary workaround for https://github.com/NuGet/Home/issues/8583</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39012</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39011</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39010</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39009</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to records</Title>
    <Description>
    </Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39008</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Use new Span/Memory APIs on System.Collections.Immutable"</Title>
    <Description>Reverts dotnet/roslyn#38809

Getting VS to be happy with the new System.Collections.Immutable version is proving pretty tricky, so we are gonna have this PR here in case we need to flow it in to get a working insertion.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39007</IssueID>
    <RepoID>1</RepoID>
    <Title>`default` needs explicit type in if cond expr</Title>
    <Description>**Version Used**: Visual Studio Community 2019 Preview v16.4.0 preview 1.0

**Steps to Reproduce**:
1. Check `.NET Core 3.0 SDK` in the Individual Components section of the installer
2. Compile this .NET Core console program:
```csharp
class Program
{
    public interface Iface { }
    static Iface GetImpl() =&gt; null;
    static void Main(string[] args)
    {
        var impl = GetImpl();

        if (impl != default)
        {

        }
    }
}
```

[Sharplab.io](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABATAAmwEYB2AWACgBvS/OwgZnwEsA7eBAMwgGM58Aktz74q+AL616xAGyDh/AOJwYAsAAcANgAoAlPgC8APnysArps0BuKXVmEALPgCyENtuIAGANoBdfBAIAOZQurai4fT4AG6BLBqahvjKqgl6NhSR9Myc+NrMCfgAhAb4KHDcFjBhFFFRNJm1dXSSTS2UrUA===) compiles this code successfully with `Default (3.3.1)` but fails on `master (23 Sep 2019)`.
 
**Expected Behavior**: compilation successful
Was there a spec change?

**Actual Behavior**:
Compilation fails on the `if` line:
```
Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0019	Operator '!=' cannot be applied to operands of type 'Program.Iface' and 'default'	default1	C:\Work\source\repos\default1\Program.cs	12	Active
```

Changing the condition to `impl != default(Iface)` fixes the error.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39006</IssueID>
    <RepoID>1</RepoID>
    <Title>F# External Access - Removed loc entries that are not used.</Title>
    <Description>This removes some resource entries that are not used in the resx file, specifically for F# external access. It effectively means we don't need to worry about loc for them. We also do not use these resources in FSharp.Editor.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39005</IssueID>
    <RepoID>1</RepoID>
    <Title>Delete tools that were migrated to roslyn-tools</Title>
    <Description>These live in https://github.com/dotnet/roslyn-tools and should have been deleted long ago.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39004</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix favorites for expansions of nullables</Title>
    <Description>Children of nullables in member expansions should support being added as favorites.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39003</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix incorrect diagnostic message for "using"</Title>
    <Description>This removes the incorrect phrase " or implement a suitable 'Dispose' method" when `using` a type that doesn't implement `IDisposable`.

For #33746.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39002</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39001</IssueID>
    <RepoID>1</RepoID>
    <Title>'Generate method' action does not appear on name token following `?.`</Title>
    <Description>**Version Used**: Visual Studio 16.3.1

'Generate method' should appear for `foo?.NonExistentMethodName`, whether `foo` is a reference or value type. It currently shows up for neither.

I ran into this in several unrelated projects when changing the type of `foo` somewhere else in the file and then wanting to generate the same methods that had been called on the type it used to have.

The workaround is to delete the `?` and add `.Value` if `foo` is a value-typed expression, generate the method, then manually undo.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39000</IssueID>
    <RepoID>1</RepoID>
    <Title>Crash in OOP tore down VS (hard crash, not yellow bar).</Title>
    <Description>Watson bucket and other relevant information.

```
Fault bucket 125730739576, type 5
Event Name: PerfWatsonVS12Data
Response: Not available
Cab Id: 1196763729810304088

Problem signature:
P1: PerfWatsonTcdb
P2: 0
P3: 0
P4: 0
P5: 0
P6: 
P7: 
P8: 
P9: 
P10: 

Attached files:
\\?\C:\Users\cyrus\AppData\Local\Temp\VSTelem.Out\201910021820_D16.4_16.4.29319.158_17696_b97f4571-7b9e-4f72-a70f-8ea07281a5cd.tcdb
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER6675.tmp.WERInternalMetadata.xml
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER66A5.tmp.xml
WPR_initiated_DiagTrackMiniLogger_OneTrace User Logger 20190930 1 Event Collector_0_inject.etl
\\?\C:\Users\cyrus\AppData\Local\Temp\WER66E5.tmp.etl
WPR_initiated_DiagTrackMiniLogger_WPR System Collector_inject.etl
\\?\C:\Users\cyrus\AppData\Local\Temp\WER66F5.tmp.etl
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER6706.tmp.csv
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER6765.tmp.txt
\\?\C:\Users\cyrus\AppData\Local\Temp\WER6A90.tmp.WERDataCollectionStatus.txt

These files may be available here:
\\?\C:\ProgramData\Microsoft\Windows\WER\ReportArchive\NonCritical_PerfWatsonTcdb_688f135dd185f2a8133a474a2518efc6ce6cc4a_00000000_cab_9769bf93-8256-46a3-9794-2743f97428f4

Analysis symbol: 
Rechecking for solution: 0
Report Id: 9769bf93-8256-46a3-9794-2743f97428f4
Report Status: 268435464
Hashed bucket: fb30d2b9a7acf0305d4da51668259751
Cab Guid: 797189b6-552d-47a5-b09b-c245836a2c58
```

```
Faulting application name: devenv.exe, version: 16.4.29319.158, time stamp: 0x5d845bb8
Faulting module name: unknown, version: 0.0.0.0, time stamp: 0x00000000
Exception code: 0x80131623
Fault offset: 0x62ac6b4a
Faulting process id: 0x4ee8
Faulting application start time: 0x01d578b6a67c1fc8
Faulting application path: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\Common7\IDE\devenv.exe
Faulting module path: unknown
Report Id: bff26ea4-c774-46df-9501-c81b19986300
Faulting package full name: 
Faulting package-relative application ID: 
```

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.InvalidOperationException: This instance must be flushed before being reinitialized.
   at Nerdbank.Streams.BufferTextWriter.Initialize(IBufferWriter`1 bufferWriter, Encoding encoding)
   at StreamJsonRpc.JsonMessageFormatter.WriteJToken(IBufferWriter`1 contentBuffer, JToken json)
   at StreamJsonRpc.JsonMessageFormatter.Serialize(IBufferWriter`1 contentBuffer, JsonRpcMessage message)
   at StreamJsonRpc.HeaderDelimitedMessageHandler.Write(JsonRpcMessage content, CancellationToken cancellationToken)
   at StreamJsonRpc.PipeMessageHandler.WriteCoreAsync(JsonRpcMessage content, CancellationToken cancellationToken)
   at StreamJsonRpc.MessageHandlerBase.&lt;WriteAsync&gt;d__15.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at StreamJsonRpc.JsonRpc.&lt;TransmitAsync&gt;d__115.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Threading.Tasks.ValueTask.ThrowIfCompletedUnsuccessfully()
   at StreamJsonRpc.JsonRpc.&lt;InvokeCoreAsync&gt;d__94`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.ServiceHub.Framework.RemoteServiceBroker.&lt;GetPipeAsync&gt;d__29.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.ServiceHub.Client.HubClient.&lt;GetPipeAsync&gt;d__33.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.ServiceHub.Client.HubClient.&lt;RequestServiceAsync&gt;d__30.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RetryRemoteCallAsync&gt;d__0`2.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RequestServiceAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.ConnectionManager.&lt;TryCreateNewConnectionAsync&gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.ConnectionManager.&lt;TryGetConnectionFromPoolAsync&gt;d__13.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.&lt;TryRunRemoteAsync&gt;d__13.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.SolutionChecksumUpdater.&lt;&gt;c__DisplayClass17_0.&lt;&lt;PushTextChanges&gt;b__0&gt;d.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Roslyn.Utilities.TaskExtensions.ReportFatalErrorWorker(System.Threading.Tasks.Task, System.Object)
   at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.TaskScheduler.TryRunInline(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.StandardTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessInnerTask(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessCompletedOuterTask(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InvokeCore(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()

```</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38999</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Formatter.OrganizeImportsAsync to make the cancellation token optional</Title>
    <Description>Resolves https://github.com/dotnet/roslyn/issues/38758</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38998</IssueID>
    <RepoID>1</RepoID>
    <Title>Delete some dead code from the rename test harness</Title>
    <Description>
    </Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38997</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 2019 intellisense "is" operator not suggesting enum values</Title>
    <Description>**Version Used**: 
VS 2019 16.3.1

**Steps to Reproduce**:

1. var a = DayOfWeek.Monday;
2. bool equalsMonday = a == DayOfWeek.Monday
3. bool isMonday = a is DayOfWeek.Monday

**Expected Behavior**:

Intellisense suggests DayOfWeek.{Monday, Tuesday,...} values after typing "DayOfWeek." for both line 2. and 3.

**Actual Behavior**:

Intellisense suggests this only for the 2nd line, not when using the is operator.

2:
![image](https://user-images.githubusercontent.com/26150359/66048405-c0a57700-e529-11e9-9cc1-6565868dd111.png)


3:
![image](https://user-images.githubusercontent.com/26150359/66048375-b3888800-e529-11e9-836b-6238986f8ac7.png)

</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38996</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20191001.4
- **Date Produced**: 10/1/2019 10:24 PM
- **Commit**: c21a409f11386d22c6083198176868d3974de832
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 5.0.0-beta.19501.4

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38995</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect IDE0044 (Make field readonly) when used with "ref"</Title>
    <Description>**Version Used**: 16.3.1

**Steps to Reproduce**:
``` csharp
using System;

class Program
{
    private static Int32 Value;

    static void Main()
    {
        ref var value = ref Value;
        value += 1;
    }
}
```
**Expected Behavior**: No errors / warnings / messages.

**Actual Behavior**:  IDE0044	Make field readonly.

Here is a counter example where it works as expected:
``` csharp
using System;

class Program
{
    private static Int32 Value;

    static void Main()
    {
        Increment( ref Value );
    }

    static void Increment( ref Int32 value ) =&gt; value += 1;
}
```
</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38994</IssueID>
    <RepoID>1</RepoID>
    <Title>Attribute async state machines for better introspection</Title>
    <Description>Hi,

I've recently written a PoC of an async builder that allows you to suspend the thread of execution to disk and rehydrate at a later point, or even on a different machine. It appears to work ok (as long as the captures are serializable obviously), but writing the code to demangle the state machine fields was tricky and I'm pretty sure it's not right now. I've attached the code but it would be really nice if the state machine builder put some attributes on the fields so we can inspect them. E.g. 

[StateMachineState] on the integer state field
[StateMachineInput("i")] for the method arguments
[StateMachineLocal("j")] for captured locals
[StateMachineAwaiter(index)] or similar for the awaiters

I don't think it needs a lot more. Having exposed the state machine builders I'm not sure the internals of state machines could be changed easily so I don't think this is adding much of a backwards compatibility issue.

On a side note, is it possible to remove the debug bypass on the statemachines to see what's happening under the cover more easily?

Thanks,
Ben Young

```csharp
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.ExceptionServices;
using System.Threading;
using System.Threading.Tasks;

namespace MethodBuilderTest
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Started");
            Flow.Run(() =&gt; MyFlowData());
        }

        static async FlowData MyFlowData()
        {
            int i = 0;
            var numbers = new List&lt;int&gt;();
            while (true)
            {
                await Letters(i++);
                numbers.Add(i);
                await Flow.Checkpoint();
                await Task.Delay(TimeSpan.FromSeconds(1));
                Console.WriteLine("  " + numbers.Count);
            }
        }

        static async FlowData Letters(int i)
        {
            for (int j = 0; j &lt; 5; ++j)
            {
                Console.WriteLine(i.ToString() + " " + (char)('A' + j));
                await Flow.Checkpoint();
                await Task.Delay(TimeSpan.FromSeconds(0.5));
            }
        }
    }

    static class Flow
    {
        internal static FlowContext FlowContext { get; set; }

        public static void Run(Func&lt;FlowData&gt; data)
        {
            FlowContext = new FlowContext();
            try
            {
                data().GetAwaiter().GetResult();
            }
            finally
            {
                FlowContext = null;
            }
        }

        public static FlowData Checkpoint()
        {
            var data = new FlowData();
            data.SetResult();
            return data;
        }
    }

    class FlowContext
    {
    }

    struct Void
    {
    }

    [AsyncMethodBuilder(typeof(FlowDataMethodBuilder))]
    class FlowData : INotifyCompletion
    {
        private ExceptionDispatchInfo exception;

        [JsonProperty]
        private bool hasResult;

        public FlowData GetAwaiter() =&gt; this;

        public void GetResult()
        {
            if (this.exception != null)
            {
                this.exception.Throw();
            }

            while (!this.hasResult)
            {
                Thread.Sleep(0);
            }
        }

        public bool IsCompleted =&gt; this.exception != null;

        public void OnCompleted(Action completion)
        {
            Task.Run(completion);
        }

        internal void SetException(Exception e)
        {
            this.exception = ExceptionDispatchInfo.Capture(e);
        }

        internal void SetResult()
        {
            this.hasResult = true;
        }
    }

    [AsyncMethodBuilder(typeof(FlowDataMethodBuilder))]
    class StateMachineFlowData : FlowData
    {
        public StateMachineFlowData(string name)
        {
            this.stateMachineName = name;
        }

        [JsonProperty]
        internal string stateMachineName;
    }

    class FlowState&lt;TStateMachine&gt; 
    {
        internal TStateMachine stateMachine;

        public void Debug()
        {
            Console.WriteLine($"{this.stateMachine.GetType().IsClass}");
            Console.WriteLine(string.Join(
                Environment.NewLine,
                this.Capture()
                    .Select(f =&gt; $"{f.Key} {f.Value}")));
        }

        public IReadOnlyDictionary&lt;string, object&gt; Capture()
        {
            return this.stateMachine
                    .GetType()
                    .GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)
                    .Select(f =&gt; new { Name = DemangleName(f.Name), Value = f.GetValue(this.stateMachine), Type = f.FieldType })
                    .Where(f =&gt; !string.IsNullOrEmpty(f.Name) &amp;&amp; !typeof(ICriticalNotifyCompletion).IsAssignableFrom(f.Type))
                    .ToDictionary(f =&gt; f.Name, f =&gt; f.Value);
        }

        public void RestoreState&lt;TBuilder&gt;(TBuilder builder, IReadOnlyDictionary&lt;string, object&gt; state)
        {
            var tr = __makeref(this.stateMachine);
            foreach (var field in this.stateMachine
                    .GetType()
                    .GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)
                    .Select(f =&gt; new { Name = DemangleName(f.Name), Field = f })
                    .Where(f =&gt; !string.IsNullOrEmpty(f.Name)))
            { 
                if(state.TryGetValue(field.Name, out var value) &amp;&amp; value != null)
                {
                    field.Field.SetValueDirect(tr, field.Field.FieldType.IsAssignableFrom(value.GetType()) ? value : Convert.ChangeType(value, field.Field.FieldType));
                }
            }

            this.stateMachine.GetType().GetField("&lt;&gt;t__builder").SetValueDirect(tr, builder);
        }

        private static string DemangleName(string name)
        {
            if(name.StartsWith("&lt;&gt;"))
            {
                if(name.Contains("__state"))
                {
                    return "state!";
                }
                else if(name.StartsWith("&lt;&gt;u_"))
                {
                    return "awaiter" + name.Substring("&lt;&gt;u_".Length) + "!";
                }

                return null;
            }
            else if (name.StartsWith("&lt;"))
            {
                return name.Substring(1, name.IndexOf('&gt;', 1) - 1) + "_local!";
            }

            return name;
        }
    }

    class FlowDataMethodBuilder
    {
        private readonly static JsonSerializer Serializer = JsonSerializer.Create(new JsonSerializerSettings
        {
            PreserveReferencesHandling = PreserveReferencesHandling.All,
            TypeNameHandling = TypeNameHandling.All,
            Formatting = Formatting.Indented
        });

        private string fileName;

        private Type stateMachineType;

        private object state;

        private StateMachineFlowData result;

        public static FlowDataMethodBuilder Create() =&gt; new FlowDataMethodBuilder();

        public FlowData Task =&gt; this.result;

        public void Start&lt;TStateMachine&gt;(ref TStateMachine stateMachine)
            where TStateMachine : IAsyncStateMachine
        {
            if(Flow.FlowContext == null)
            {
                throw new InvalidOperationException("No flow context");
            }

            this.stateMachineType = typeof(TStateMachine);
            this.fileName = this.FileName&lt;TStateMachine&gt;();
            this.result = new StateMachineFlowData(this.stateMachineType.FullName);

            var flow = EnsureState(ref stateMachine);

            this.RestoreState(flow);

            flow.stateMachine.MoveNext();
        }

        public void SetStateMachine(IAsyncStateMachine stateMachine)
        {
        }

        public void SetException(Exception exception)
        {
            if (this.result == null)
            {
                throw new InvalidOperationException("Task should be active already");
            }

            this.result.SetException(exception);
            File.Delete(this.fileName);
        }

        public void SetResult() 
        {
            if(this.result == null)
            {
                throw new InvalidOperationException("Task should be active already");
            }

            this.result.SetResult();
            File.Delete(this.fileName);
        }

        public void AwaitOnCompleted&lt;TAwaiter, TStateMachine&gt;(
            ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =&gt; this.HandleCompleted(ref awaiter, ref stateMachine, false);

        public void AwaitUnsafeOnCompleted&lt;TAwaiter, TStateMachine&gt;(
            ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =&gt; this.HandleCompleted(ref awaiter, ref stateMachine, true);

        internal void HandleCompleted&lt;TAwaiter, TStateMachine&gt;(ref TAwaiter awaiter, ref TStateMachine stateMachine, bool useCritical)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine
        {
            if (Flow.FlowContext == null)
            {
                throw new InvalidOperationException("No flow context");
            }

            var flow = EnsureState(ref stateMachine);

            //flow.Debug();

            if (awaiter is FlowData)
            {
                var writeState = flow.Capture();
                using (var writer = File.CreateText(this.fileName))
                {
                    Serializer.Serialize(writer, writeState);
                }

                if (Flow.FlowContext == null)
                {
                    throw new InvalidOperationException("No flow context set");
                }

                awaiter.OnCompleted(() =&gt; flow.stateMachine.MoveNext());
            }
            else
            {
                // TODO: Disable flow context here so async methods can't call back into flow
                if (useCritical)
                {
                    ((ICriticalNotifyCompletion)awaiter).UnsafeOnCompleted(() =&gt;
                    {
                        flow.stateMachine.MoveNext();
                    });
                }
                else
                {
                    awaiter.OnCompleted(() =&gt;
                    {
                        flow.stateMachine.MoveNext();
                    });
                }
            }
        }

        private void RestoreState&lt;TStateMachine&gt;(FlowState&lt;TStateMachine&gt; flow)
        {
            if (File.Exists(this.fileName))
            {
                using (var reader = File.OpenRead(fileName))
                {
                    var state = Serializer.Deserialize&lt;Dictionary&lt;string, object&gt;&gt;(new JsonTextReader(new StreamReader(reader)));

                    var subState = state.Where(o =&gt; o.Value is StateMachineFlowData).SingleOrDefault();
                    if(subState.Value != null)
                    {
                        var subBuilder = Create();
                        var stateMachineType = Type.GetType(((StateMachineFlowData)subState.Value).stateMachineName);
                        var method = typeof(FlowDataMethodBuilder).GetMethod("Start").MakeGenericMethod(stateMachineType);
                        var childStateMachine = Activator.CreateInstance(stateMachineType);
                        method.Invoke(subBuilder, new[] { childStateMachine });
                        state[subState.Key] = subBuilder.Task;
                    }


                    flow.RestoreState(this, state);
                }
            }
        }

        private string FileName&lt;TStateMachine&gt;() =&gt; string.Join('_', typeof(TStateMachine).Name.Split(Path.GetInvalidFileNameChars())) + ".json";

        private FlowState&lt;TStateMachine&gt; EnsureState&lt;TStateMachine&gt;(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine
        {
            FlowState&lt;TStateMachine&gt; flow;
            if (this.state == null)
            {
                flow = new FlowState&lt;TStateMachine&gt;();
                this.state = flow;
            }
            else if (this.state is FlowState&lt;TStateMachine&gt; existingFlow)
            {
                flow = existingFlow;
            }
            else
            {
                throw new InvalidOperationException("Changing statemachine is not supported");
            }

            flow.stateMachine = stateMachine;
            return flow;
        }
    }
}
```</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38993</IssueID>
    <RepoID>1</RepoID>
    <Title>Pattern matching: override deconstruct</Title>
    <Description>I'm not sure if this is the right place for this issue. If it is inappropriate for this repository, I would be thankful if you could direct me to a more suitable repository. Thank you in advance.

---

For pattern matching, I'd like to deconstruct a certain struct I made as follows:

	public struct Result&lt;T&gt;
	{
		public readonly bool IsSuccess;
		public readonly T Value;
		public readonly string? Message;

		private Result(bool success, T value, string? message) =&gt;
			(IsSuccess, Value, Message) = (success, value, message);

		public void Deconstruct(out bool success, out T value, out string? message) =&gt;
			(success, value, message) = (IsSuccess, Value, Message);

		public void Deconstruct(out bool success, out string? message) =&gt;
			(success, message) = (IsSuccess, Message);
		public void Deconstruct(out bool success, out T value) =&gt;
			(success, value) = (IsSuccess, Value);


		public static Result&lt;T&gt; Fail(string message) =&gt; new Result&lt;T&gt;(false, default, message);
		public static Result&lt;T&gt; Success(T value) =&gt; new Result&lt;T&gt;(true, value, null);
	}

so that I would be able to do something like this:

	switch (TryGetValue(ref input, ref length))
	{
		case (false, string e):
			return Result&lt;JsonNode&gt;.Fail(e);
		case (true, JsonNode value):
			values.Add(value);
			break;
	}

This currently doesn't compile, saying that the deconstruction is ambiguous, despite explicitly declaring their types.

This works:

	switch (TryGetValue(ref input, ref length))
	{
		case (false, _, var e):
			return Result&lt;JsonNode&gt;.Fail(e);
		case (true, var value, _):
			values.Add(value);
			break;
	}

but the `_` seems verbose to me.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38992</IssueID>
    <RepoID>1</RepoID>
    <Title>Add regex header support for configuring severity and IDE code style options with .editorconfig</Title>
    <Description>This PR builds off #35691 by fixing a few bugs mostly involving regex. It also changes which .editorconfig headers are generated for new rules based on the rule type and diagnostic file type.

The following are a few changes in the PR:

**1) Adds regex support for configuring severity level and IDE code style options from the editor** 
Previously, hard-coded and the majority of regex headers were not supported when configuring severity level and/or code options from the editor. Below is an example screenshot of the existing functionality with an .editorconfig file and program titled Program.cs:
![5](https://user-images.githubusercontent.com/16968319/66009806-f63a5980-e470-11e9-8c7d-02eca4c69545.png)
![1](https://user-images.githubusercontent.com/16968319/66006617-19aad780-e464-11e9-9834-b2696942c05b.png)
And the below is the updated functionality, which should work for any regex header:
![3](https://user-images.githubusercontent.com/16968319/66007080-bcb02100-e465-11e9-8d5a-239b8c0028b4.png)

**2) Deals with duplicate rules**
Previously, if a user specified a rule multiple times in an .editorconfig file with valid headers, then only the first rule would be changed when configuring the severity level and/or code style options from the editor. Now, only the last rule is changed in accordance with how duplicate rules are actually dealt with in an .editorconfig file.

**3) Verify first header in .editorconfig file is valid**
Previously, the first header in the file was always deemed to be valid no matter the name or file extension(s). The current change verifies that the first header in the .editorconfig file matches the name of the diagnostic file.

**4) Changes how new headers and existing rules are generated/configured**

_**Configuring existing rules:**_ We configure an existing rule in an .editorconfig file if its header contains the diagnostic file's extension.
For example, when working with a C# file, [\*], [\*.cs], [\*.{cs,vb}] would all be considered valid headers when configuring existing rules. Previously, for C# files, only [\*.cs] was recognized when configuring rules from the editor.

_**Generating new rules and headers:**_ If a rule is not present in the .editorconfig file under a valid header, then we generate it while taking into consideration whether the IsPerLanguage flag is set and whether the diagnostic is a compiler diagnostic.

First, we search for existing valid headers:
1) If the diagnostic's isPerLanguage = true, it means the rule is valid for both C# and VB. Thus, if there is a valid existing header containing both [\*.cs] and [\*.vb], then we prioritize it.
2) If isPerLanguage = false or we are dealing with a compiler diagnostic, it means the rule is only valid for one of the languages. Thus, we prioritize headers that contain only the file extension for the given language. 
3) If neither of the above hold true, we choose the last existing valid header. 
4) If no valid existing headers, we generate a new header.

When generating a new header:
1) If PerLanguage = true, we generate [*.{cs,vb}].
2) If PerLanguage = false or we have a compiler diagnostic, we generate [\*cs] or [\*.vb] depending on the header.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38991</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38990</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38989</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38988</IssueID>
    <RepoID>1</RepoID>
    <Title>Better array pattern index codegen</Title>
    <Description>Fixes #38942</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38987</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix regression in RemoveUnusedParametersAndValues analyzer</Title>
    <Description>My previous PR #38666 to improve performance for the analyzer introduced a functional regression in SymbolUsageAnalysis, which is fixed by this change.</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38986</IssueID>
    <RepoID>1</RepoID>
    <Title>Wrap Properties is unavailable in recoverable syntax failure conditions</Title>
    <Description>```cs
    public class Base
    {
        public Base(int i1, int i2)
        {
        }
    }

    public class Derived : Base
    {
        public Derived(int i1, int i2, int i3) : base (,)
        {

        }
    }
```

If I invoke `ctrl+.` on the parameter list of `Derived` here, I do not get offered a wrap parameter quick fix. Same for an incomplete method where the brackets are missing, but the signature is otherwise there. I understand that we're likely just bailing out in the presence of syntax errors, but it would be nice if we could be a bit smarter here, as offering the wrapping, at least in this scenario, is totally possible and, I think, has a well-defined output.</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38985</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable IDE dispose analyzers by default</Title>
    <Description>We are going to disable the DFA based IDE dispose analyzers (IDE0067, IDE0068 and IDE0069) by default as they need more performance tuning to handle large method bodies (method bodies which are 1000s of lines of code) with large control flow graphs.

#38984 has been filed to track turning these analyzers back on by default when the issue has been fixed.</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38984</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable IDE Dispose analyzers by default</Title>
    <Description>We are going to disable the DFA based IDE dispose analyzers (IDE0067, IDE0068 and IDE0069) by default as they need more performance tuning to handle large method bodies (method bodies which are 1000s of lines of code) with large control flow graphs.

Meanwhile, analyzers can be enabled by using the following editorconfig entries:
```
[*.{cs,vb}]
dotnet_diagnostic.IDE0067.severity = warning
dotnet_diagnostic.IDE0068.severity = warning
dotnet_diagnostic.IDE0069.severity = warning
```</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38983</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38981</IssueID>
    <RepoID>1</RepoID>
    <Title>Publish LSP document diagnostics only for relevant documents.</Title>
    <Description>fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/991786

now that there are LSP providers per language, document diagnostics should be published only for the relevant documents.</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38980</IssueID>
    <RepoID>1</RepoID>
    <Title>Check language version on relaxed ordering of parameter modifiers</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38486</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38979</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove IVsENCRebuildableProjectCfg interfaces, VSWorkspace dependency</Title>
    <Description>Project System removed usage of IVsENCRebuildableProjectCfg interfaces in https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/202232 and https://github.com/dotnet/project-system/pull/5515. Remove these interfaces from Roslyn.

Replace VisualStudioWorkspace imports with PrimaryWorkspace.</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38982</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable reference type: possible generics inconsistency</Title>
    <Description>Greetings,

with the new C# feature of nullable reference types there appears to be an inconsistency with generics:

```
static void Foo&lt;T&gt;(T State, Action&lt;T&gt; Bar)
{
  Bar(State);
}

void Main()
{
  string? Value = null;
  Foo(Value, a =&gt;
  {
    //Here "a" is of type "string" and not "string?"
  });
}
```

Shouldn't "a" be of type "string?"?</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38978</IssueID>
    <RepoID>1</RepoID>
    <Title>Programmatically (from Microsoft.CodeAnalysis.Project) check for &lt;CodeAnalysisRuleSet&gt;</Title>
    <Description>**Version Used**: 
3.3.1

**Steps to Reproduce**:

1. Programmatically load a project using workspace.OpenProjectAsync.
2. Inspect the available properties available on the returned project.

We are attempting to write a tool that will do validation on our project files as they go into source control to ensure they have the appropriate style-related settings in place.   This includes several checks, but there is one I haven't figured out how to do.  I am attempting to locate a way to identify whether a project has a &lt;CodeAnalysisRuleSet&gt; specified for all defined build configurations.

Am I missing a way to do this?

**Expected Behavior**:
A property or method is available to identify this.

**Actual Behavior**:
No property or method found to retrieve this data.</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38977</IssueID>
    <RepoID>1</RepoID>
    <Title>Spelling fixes</Title>
    <Description>
    </Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38976</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190930.3
- **Date Produced**: 9/30/2019 8:25 PM
- **Commit**: 238f1bbb23ba67616818d0b242c5b55a18edec55
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 5.0.0-beta.19480.3

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38975</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot apply null-conditional operator for Nullable&lt;T&gt; returned by null-conditional operator (CS0023)</Title>
    <Description>**Version Used**: 
Visual Studio Community 2019 Version 16.2.5


**Steps to Reproduce**:

```C#
class Foo {
	public ClassType ClassMember { get; }
	public StructType StructMember { get; }
	public int PrimitiveMember { get; }
}

class ClassType {
	public int Value { get; }
}

struct StructType {
	public int Value { get; }
}

static void Main(string[] args) {
	Foo foo = null;
	int? a = foo?.ClassMember?.Value;             // ok
	int? b1 = foo?.StructMember?.Value;           // CS0023
	int? b2 = (foo?.StructMember)?.Value;         // ok
	string c = foo?.PrimitiveMember?.ToString();  // CS0023
}
```

I think there is no difference between b1 and b2, but cannot build b1.
</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38974</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix NGEN failures</Title>
    <Description>Example failure: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/204591?_a=overview 

These changes remove some dependencies that were added as part of [this change](https://github.com/dotnet/roslyn/commit/66a912c9463eebe832cf742d2fe8bb2e1a4600ec#diff-8b8f08ffbf7b863fb3700c1718eeb4cb) , making Microsoft.VisualStudio.LanguageServer.Protocol and Microsoft.VisualStudio.LanguageServer.Protocol.Extensions depend on the same versions that VS provides. These binaries are intended to be versioned differently, and we ingest at a different cadence than VS. Once VS updated these dependencies we started to see NGEN failures with dll dependency resolution. </Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38973</IssueID>
    <RepoID>1</RepoID>
    <Title>Add feature to upgrade existing IDE-generated `GetHashCode` methods to use `System.HashCode` if available.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38959

Looks like:

![image](https://user-images.githubusercontent.com/4564579/65937102-9f327700-e3d3-11e9-8ece-07e5ad1fee32.png)

Works for the different GetHashCode variants we produce for C# and VB, as well as the Resharper style as well.

Todo: 

- [x] VB
- [x] tests.</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38972</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix docker caching by resetting cache only when mono changes</Title>
    <Description>We currently have a 'cache bust' mechanism, that prevents our docker image from caching the mono nightly install steps: We cache the initial install, then update the container every time we run the tests to get up to latest.

In general this is fine, but as the base image gets further away from the 'latest' update, the apt-upgrade takes longer and longer, leading to machine restore time being up to 50% of overall test time.

We have a couple of options, including not updating everything on the box, but this can lead to potentially weird issues where a 'fresh' container build would give different results to a cached one due to dependency differences, which we definitely want to avoid.

This change breaks the container build into two stages: an info stage and a build stage. The info stage simply gets the release info for Mono nightly. The main build then copies this file into the main container before updating. Docker is clever enough to use the hash of the file to determine if it should maintain the cache or not, meaning we'll only update the machine and its dependencies if a new nightly mono has actually been published since the last run. 

There are still some issues with this approach, mainly that running on different physical machines can end up with different dependency sets cached, but they should only ever be slightly out of date, so I'm hopeful we shouldn't see any actual issues.

I have some ideas how to fix this in a much more robust way, but it needs some thinking / infra investment, so this should be considered a medium term fix to try and get the Linux Mono legs to a better, but not perfect, state.


</Description>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38971</IssueID>
    <RepoID>1</RepoID>
    <Title>MSBuildWorkspace shouldn't attempt to remove properties declared in an imported file</Title>
    <Description>**Version Used**: 
16.3

**Steps to Reproduce**:

1. Use MSBuildWorkspace to load a project that uses https://github.com/onovotny/MSBuildSdkExtras

**Expected Behavior**:
Should work

**Actual Behavior**:
```
System.InvalidOperationException: Cannot modify an evaluated object originating in an imported file "C:\Users\Administrator\.nuget\packages\msbuild.sdk.extras\1.6.68\Build\Inference.targets".
   at Microsoft.Build.Shared.ErrorUtilities.ThrowInvalidOperation(String resourceName, Object[] args)
   at Microsoft.Build.Shared.ErrorUtilities.VerifyThrowInvalidOperation(Boolean condition, String resourceName, Object arg0)
   at Microsoft.Build.Evaluation.Project.RemoveProperty(ProjectProperty property)
   at Microsoft.CodeAnalysis.MSBuild.ProjectFile.&lt;GetProjectFileInfosAsync&gt;d__16.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader.Worker.&lt;DoOperationAndReportProgressAsync&gt;d__17`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader.Worker.&lt;LoadProjectFileInfosAsync&gt;d__19.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader.Worker.&lt;LoadProjectInfosFromPathAsync&gt;d__20.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
```

I suspect that this line is causing the issue:
https://github.com/dotnet/roslyn/blob/98ec28ef6f76a773a54a361ae939df51bcb9b92b/src/Workspaces/Core/MSBuild/MSBuild/ProjectFile/ProjectFile.cs#L78</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38970</IssueID>
    <RepoID>1</RepoID>
    <Title>Unify AnalyzerDriver.IsDiagnosticAnalyzerSuppressed with compiler's diagnostic filtering logic</Title>
    <Description>See https://github.com/dotnet/roslyn/pull/38792#discussion_r329812476</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38969</IssueID>
    <RepoID>1</RepoID>
    <Title>Add API Review notes</Title>
    <Description>Added the notes from today's compiler API review. Also addressed the CommandLineArguments part of the notes, restoring a previously removed API to prevent breaking changes. @agocke for review of this API, as you reviewed the SARIF change that removed it.

@AlekseyTs @chsienki @jasonmalinowski @AlekseyTs @jaredpar for quick review.</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38968</IssueID>
    <RepoID>1</RepoID>
    <Title>can't f5 into latest master</Title>
    <Description>When i try, i get this error in the VS that has launched:

```

SetSite failed for package [CSharpPackage]Source: 'Microsoft.VisualStudio.LanguageServices' Description: Could not load file or assembly 'System.Collections.Immutable, Version=1.2.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040) System.IO.FileLoadException: Could not load file or assembly 'System.Collections.Immutable, Version=1.2.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040) File name: 'System.Collections.Immutable, Version=1.2.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'   at Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractPackage`2.&lt;InitializeAsync&gt;d__8.MoveNext()   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)   at Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractPackage`2.InitializeAsync(CancellationToken cancellationToken, IProgress`1 progress)   at Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpPackage.&lt;&gt;n__0(CancellationToken cancellationToken, IProgress`1 progress)   at Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpPackage.&lt;InitializeAsync&gt;d__2.MoveNext() --- End of stack trace from previous location where exception was thrown ---    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.VisualStudio.Shell.AsyncPackage.&lt;&gt;c__DisplayClass19_0.&lt;&lt;Microsoft-VisualStudio-Shell-Interop-IAsyncLoadablePackageInitialize-Initialize&gt;b__1&gt;d.MoveNext() --- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.VisualStudio.Threading.JoinableTask.&lt;JoinAsync&gt;d__68.MoveNext() --- End of stack trace from previous location where exception was thrown ---    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()   at Microsoft.VisualStudio.Services.VsTask.RethrowException(AggregateException e)   at Microsoft.VisualStudio.Services.VsTask.InternalGetResult(Boolean ignoreUIThreadCheck)   at Microsoft.VisualStudio.Services.VsTask.GetResult() WRN: Assembly binding logging is turned OFF. To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1. Note: There is some performance penalty associated with assembly bind failure logging. To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].
--
```</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38967</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix language check for netcoreapp3.1</Title>
    <Description>Now checks if the version is &lt; netcoreapp3.0 or netstandard2.1 instead of checking
if they're not equal.</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38966</IssueID>
    <RepoID>1</RepoID>
    <Title>C# 8 by default for netcoreapp3.1</Title>
    <Description>It currently defaults to C# 7.3.</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38964</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38963</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38962</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38961</IssueID>
    <RepoID>1</RepoID>
    <Title>IAsyncEnumerable iterator method generates InvalidProgramException at runtime</Title>
    <Description>**Version Used**: Core 3.0.100

**Steps to Reproduce**:

1) Call this function:


        object _splitsLock = new object();
        public async IAsyncEnumerable&lt;SplitBatch&gt; GetSplits(IEnumerable&lt;string&gt; ids,
            DateTime from, DateTime to, [EnumeratorCancellation] CancellationToken ct)
        {
            if (to == from)
                yield break;
            try
            {
            }
            finally
            {
                lock (_splitsLock)
                    Console.WriteLine("");
            }
        }


**Expected Behavior**: No InvalidProgramException

**Actual Behavior**: InvalidProgramException

I stripped it of most code while still triggering the error. The lock in the finally block is needed to trigger the exception. Function is called from a grpc streaming server call in asp.net core.</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38960</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow conversion of GetAwaiter extension method this arg</Title>
    <Description>Fixes #30956</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38959</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE should detect previously generated 'GetHashCode' and offer to upgrade it to use System.HashCode if available.</Title>
    <Description>
    </Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38958</IssueID>
    <RepoID>1</RepoID>
    <Title>AnalyzerDriver is needs refactoring</Title>
    <Description>There are now many fields/properties that are confusing, including a mix of ConcurrentDictionary and Dictionary with no clear annotation on what the threading model of the type is.</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38957</IssueID>
    <RepoID>1</RepoID>
    <Title>Null assignable to non-null type via tuple default value</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/65908449-52bb4d00-e37b-11e9-9bd8-eefa999d862e.png)

**Steps to Reproduce**:

```C#
using System;

#nullable enable

class C
{
    private readonly int X = 1;

    static (C C, bool B) F()
    {
        return default;
    }

    static void Main()
    {
        var (c, _) = F();
        Console.WriteLine(c.X);
    }
}
```

**Expected Behavior**:

Warning on `return default`.

**Actual Behavior**:

No warning.

The warning is reported if we return `(default, default)` or `(null, false)`.</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38956</IssueID>
    <RepoID>1</RepoID>
    <Title>Compile without switch optimizations</Title>
    <Description># Issue Title

Is possible to specify some flags in the compiler for disable some optimizations? 

# General

As i know, when a switch have a lot of entries, is added a method `ComputeStringHash` is possible to prevent this optimizations?</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38955</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip flaky tests</Title>
    <Description>Skips all tests that have been mentioned as flaky in #29483 (some were already being skipped)

There is a PR out that is supposed to actually fix the tests, but it has been out for several months and still not merged, so I would like to just address this now as it is costing hours in code flow to have these tests fail intermittently.

/cc @jaredpar</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38954</IssueID>
    <RepoID>1</RepoID>
    <Title>Include source files w/o method bodies in the PDB documents</Title>
    <Description>Currently the compiler does not list source files in the debug documents in the PDB that are part of the compilation but do not have any method body. These documents are only added in order to support sequence points.

There are other scenarios than stepping that would benefit from all source files being captured in the PDB. For example, [Go To Definition](https://github.com/dotnet/roslyn/issues/24349), or validating that the assembly was built from specific source file content for auditing or [EnC](https://github.com/dotnet/roslyn/pull/38905). 

UPDATE:
Debugging of UWP and Blazor projects is currently broken because EnC is not able to determine the checksum of source files that are missing.

</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38953</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0008 (Use explicit type) Fix All operation is too broad</Title>
    <Description>**Version Used**: Visual Studio 16.4 Preview 1

**Steps to Reproduce**:

```
csharp_style_var_elsewhere = false:silent
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = false:silent
```

```csharp
class ClassName
{
  void Method()
  {
    var x = new object();
    var y = 0;
  }
}
```

Apply Fix All in Solution for the warning reported on `var y`.

**Expected Behavior**:

```csharp
class ClassName
{
  void Method()
  {
    var x = new object();
    int y = 0;
  }
}
```

**Actual Behavior**:

```csharp
class ClassName
{
  void Method()
  {
    object x = new object();
    int y = 0;
  }
}
```
</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38952</IssueID>
    <RepoID>1</RepoID>
    <Title>Spelling fixes</Title>
    <Description>
    </Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38951</IssueID>
    <RepoID>1</RepoID>
    <Title>Spelling fixes</Title>
    <Description>
    </Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38950</IssueID>
    <RepoID>1</RepoID>
    <Title>There's no way to get a display string for a NamedType with access modifiers</Title>
    <Description>**Version Used**: 

Microsoft.CodeAnalysis.CSharp (2.10.0)
Microsoft.CodeAnalysis.VisualBasic (2.10.0)

**Steps to Reproduce**:

Create a class:

```csharp
public class GenericType&lt;U, V&gt;
    where U : struct
    where V : class, System.IDisposable
{
    public System.Collections.Generic.IEnumerable&lt;U&gt; Method(V v) =&gt; null;
}
```

Declare a display format like this:

```csharp
private static SymbolDisplayFormat DeclarationDisplayFormat =
    new SymbolDisplayFormat(
            globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameOnly,
            genericsOptions:
                SymbolDisplayGenericsOptions.IncludeTypeParameters|
                SymbolDisplayGenericsOptions.IncludeTypeConstraints |
                SymbolDisplayGenericsOptions.IncludeVariance,
            memberOptions:
                SymbolDisplayMemberOptions.IncludeParameters |
                SymbolDisplayMemberOptions.IncludeType |
                SymbolDisplayMemberOptions.IncludeRef |
                SymbolDisplayMemberOptions.IncludeModifiers |
                SymbolDisplayMemberOptions.IncludeAccessibility |
                SymbolDisplayMemberOptions.IncludeExplicitInterface |
                SymbolDisplayMemberOptions.None,
            extensionMethodStyle:
                SymbolDisplayExtensionMethodStyle.Default,
            parameterOptions:
                SymbolDisplayParameterOptions.IncludeName |
                SymbolDisplayParameterOptions.IncludeType |
                SymbolDisplayParameterOptions.IncludeParamsRefOut |
                SymbolDisplayParameterOptions.IncludeDefaultValue |
                SymbolDisplayParameterOptions.IncludeExtensionThis |
                SymbolDisplayParameterOptions.None,
            propertyStyle:
                SymbolDisplayPropertyStyle.ShowReadWriteDescriptor,
            localOptions:
                SymbolDisplayLocalOptions.IncludeType |
                SymbolDisplayLocalOptions.IncludeRef |
                SymbolDisplayLocalOptions.None,
            kindOptions:
                SymbolDisplayKindOptions.IncludeMemberKeyword |
                SymbolDisplayKindOptions.IncludeTypeKeyword,
            miscellaneousOptions:
                SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                SymbolDisplayMiscellaneousOptions.UseSpecialTypes);
```

Call, `symbol.ToDisplayString(DeclarationDisplayFormat)` on the symbol for the class.

**Expected Behavior**:

`public class GenericType&lt;U, V&gt; where U : struct where V : class`

**Actual Behavior**:

`class GenericType&lt;U, V&gt; where U : struct where V : class`
</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38949</IssueID>
    <RepoID>1</RepoID>
    <Title>False-positive, wrong null-coalescing-operator ( ?? operator ) programmer-code-error.</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio 2019 Preview Version 16.4.0 Preview 1.0
dotnetcore 3.0.100
Windows 10 Pro
**Steps to Reproduce**:

1. Create *.cs file in VS and paste this code:
```
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace SomeNamespace
{
    internal class SomeClass
    {
        private static string ArrangeUsingRoslyn__SameLogic(string csCode)
        {
            var tree = CSharpSyntaxTree.ParseText(csCode);

            if (tree == null || tree.TryGetRoot(out SyntaxNode root) == false)
            {
                return csCode;
            }

            return root.ToFullString();
        }

        private static string ArrangeUsingRoslyn__SameLogic2(string csCode)
        {
            var tree = CSharpSyntaxTree.ParseText(csCode);

            if ((tree?.TryGetRoot(out SyntaxNode root) ?? false) == false)
            {
                return csCode;
            }

            return root.ToFullString();
        }
    }
}
```
3. ArrangeUsingRoslyn__SameLogic(...) and ArrangeUsingRoslyn__SameLogic2(...) contains the same logic.

**Expected Behavior**:

No errors detected in code.

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/6695244/65862640-5b118900-e377-11e9-8920-92ec2ec00ed0.png)
Error in code:
&gt; 'root' is not null here.
&gt; Use of unassigned local variable 'root'

Wrong null-coalescing-operator ( ?? operator ) parsing.</Description>
    <CreatedDate>30/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38948</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix typos</Title>
    <Description>
    </Description>
    <CreatedDate>29/09/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38947</IssueID>
    <RepoID>1</RepoID>
    <Title>Erroneous error!  IDE1007 The name 'var' does not exist in the current context</Title>
    <Description>Using VS 2019:  16.4.0 Preview 1.0

Consider this code:
```
using System;

namespace ConsoleApp3
{
    class Program
    {
        static void Main(string[] args)
        {
            Action a = () =&gt;
            {
                var (x, y) = (4, 5);
#warning Hi
            };
        }
    }
}
```

It's fine.  But the error window shows: `IDE1007 The name 'var' does not exist in the current context` and a red squiggly appears under the word 'var'.

It compiles without any errors, though.

Any of the following will remove the IDE1007 error:
- Don't deconstruct the tuple.  `var x = (4, 5)`
- Move the offending code into void Main() instead of in a lambda.
- Remove the #warning (The problem only exists if there are any warnings in the lambda's scope, whether naturally or by creating one with #warning)
</Description>
    <CreatedDate>29/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38946</IssueID>
    <RepoID>1</RepoID>
    <Title>NotNullIfNotNull does not work with implicit operator</Title>
    <Description>**Version Used**: master (23 Sep 2019) via https://sharplab.io

**Steps to Reproduce**:

```C#
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;

public class StringLike {
    readonly string s;
    
    [return: NotNullIfNotNull(nameof(s))]
    public static implicit operator string?(StringLike? s)
    {
        return s?.s;
    }
    
    [return: NotNullIfNotNull(nameof(s))]
    public static implicit operator StringLike?(string? s)
    {
        if (s == null) {
            return null;
        }
        return new StringLike(s);
    }
    
    [return: NotNullIfNotNull(nameof(s))]
    public static string? Cast(StringLike? s)
    {
        return s?.s;
    }
    
    [return: NotNullIfNotNull(nameof(s))]
    public static StringLike? Cast(string? s)
    {
        if (s == null) {
            return null;
        }
        return new StringLike(s);
    }
    
    
    StringLike(string s) {
        this.s = s;
    }
    
    public static string Default0 = new StringLike("default"); // get warning here
    public static StringLike Default1 = "default"; // get warning here
    public static string Default2 = Cast(new StringLike("default")); // no warning here
    public static StringLike Default3 = Cast("default"); // no warning here
}
```

**Expected Behavior**: `NotNullIfNotNull` should work with implicit cast the same as other static methods

**Actual Behavior**: named static methods work as expected, but implicit cast does not
</Description>
    <CreatedDate>29/09/2019</CreatedDate>
    <ClosedDate>29/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38945</IssueID>
    <RepoID>1</RepoID>
    <Title>[WIP] Use camelCase for variables and method arguments</Title>
    <Description>
    </Description>
    <CreatedDate>29/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38944</IssueID>
    <RepoID>1</RepoID>
    <Title>Erroneous suggestion IDE0067 for disposable object used in 'await using (...) { }'</Title>
    <Description>**Version Used**:
Version 16.4.0 Preview 1.0
VisualStudio.16.Preview/16.4.0-pre.1.0+29319.158

**Steps to Reproduce**:
Paste the following code into a project:
```cs
using System;
using System.IO;
using System.Threading.Tasks;

static class DisposingAnalysis
{
    static void ImplicitSync(ReadOnlySpan&lt;byte&gt; bytes)
    {
        //No suggestions, expected
        using var stream = new MemoryStream();
        stream.Write(bytes);
    }

    static async Task ImplicitAsync(ReadOnlyMemory&lt;byte&gt; bytes)
    {
        //No suggestions, expected
        await using var stream = new MemoryStream();
        await stream.WriteAsync(bytes);
    }

    static void ExplicitSync(ReadOnlySpan&lt;byte&gt; bytes)
    {
        //IDE0063: 'using' statement can be simplified, expected
        using (var stream = new MemoryStream())
        {
            stream.Write(bytes);
        }
    }

    static async Task ExplicitAsync(ReadOnlyMemory&lt;byte&gt; bytes)
    {
        //IDE0063 *AND* IDE0067: Disposable object created by 'new MemoryStream()' is never disposed
        await using (var stream = new MemoryStream())
        {
            await stream.WriteAsync(bytes);
        }
    }
}
```

**Expected Behavior**:
Only IDE0063 is reported for both of the explicit syntax methods to point out the new Implictly Scoped `using` Statement syntax.

**Actual Behavior**:
The combination of the older, explicitly-scoped syntax and async disposable makes the compiler/IDE think the object will not get disposed and reports IDE0067 in addition to the expected behavior.</Description>
    <CreatedDate>29/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38942</IssueID>
    <RepoID>1</RepoID>
    <Title>System.Index indexing for arrays does not use pattern-based Index</Title>
    <Description>https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAmARgFgAoHABgAIcCAWAblNJwGZq9KBhS0gb1MqDqBAGyU0AOxiUAsgApJMANoBdShAQIAlEMEBeAHzrNSgHoEV9SgHprlAO4ALAJ4B+AUI+CaYgMaONWTkaKlhtIUNKMLMLRhJdL2ExRSCAZQAHCAkAHkUjKHSJHUiCiRjLRIT4oR9xKSCAGTRYXKkjDFhi9thyuIBfIA==</Description>
    <CreatedDate>28/09/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38941</IssueID>
    <RepoID>1</RepoID>
    <Title>C# compiler should treat return value of SingleOrDefault as nullable for enumerables with reference types</Title>
    <Description>**Version Used**: .NET Core SDK 3.0.100

**Steps to Reproduce**:

```csharp
#nullable enable

public class DemoClass
{
    public object DemoMethod() =&gt; new object[0].SingleOrDefault();
}
```

**Expected Behavior**:

C# compiler detects the return value of SingleOrDefault as nullable and therefore emits warning CS8603.

**Actual Behavior**:

No warning is emitted.</Description>
    <CreatedDate>28/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>39032</IssueID>
    <RepoID>1</RepoID>
    <Title>System.InvalidOperationException: 'The project already references the target project.' and `Loading Intellsense` never finished in VS16.4Preview1/16.3.1</Title>
    <Description>**Version Used**: 
VS16.4Preview1

&lt;del&gt;Not sure but I remember that doesn't happen with latest preview version of VS16.3. It not happen with `Preview Features`/`Allow partial loading of projects during solution open` disabled.&lt;/del&gt;
It's strange that I can also see the same thing happen on VS16.3.1 today, or with `partial loading` disabled today. Just step 4 and 5 or 4.B is needed.

Not sure it's an issue of roslyn or VS.

**Steps to Reproduce**:

1. Enable `Preview Features`/`Allow partial loading of projects during solution open` in VS16.4Preview1, and restart.
2. Open the attached solutions(All cs files are removed. I tried to rename the projects and folders, but failed)
[Solution.zip](https://github.com/dotnet/roslyn/files/3665454/Solution.zip)

3. Wait and see whether the task `Loading Intellsense` can finish or not.(sometimes it even failed at the first time)

4. If it finished, click `File/Close Solutions`, and reopen the solution again.
5. Wait and see the task `Loading Intellsense` never finish.

4.B Maybe you can also see the same thing when you edit `Server.Core.csproj` online(inside VS with the whole solution open), just needed to change the `TargetFrameworks` from `net472;netcoreapp3.0` to `net472;netcoreapp2.1`, or revert.


**Expected Behavior**:
Intellsense should always end.

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/1819074/65815472-7a4ad200-e222-11e9-92ec-55db1f6c7535.png)
![image](https://user-images.githubusercontent.com/1819074/65815851-0eb73380-e227-11e9-9558-8642a83bdb9f.png)


It just never finished, but no CPU is used.

And attach an debugger on VS only show an strange exception throw by roslyn on the 3 projects unable to load.
```cs
System.InvalidOperationException: 'The project already references the target project.'
   at Microsoft.CodeAnalysis.SolutionState.CheckNotContainsProjectReference(ProjectId projectId, ProjectReference referencedProject)
   at Microsoft.CodeAnalysis.SolutionState.AddProjectReferences(ProjectId projectId, IEnumerable`1 projectReferences)
   at Microsoft.CodeAnalysis.Solution.AddProjectReferences(ProjectId projectId, IEnumerable`1 projectReferences)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.&lt;&gt;c__DisplayClass75_0.&lt;OnBatchScopeDisposed&gt;b__0(Solution solution)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyBatchChangeToWorkspace(Func`2 mutation)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.OnBatchScopeDisposed()
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.BatchScope.Dispose()
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject.EndBatch()
   at Microsoft.VisualStudio.ProjectSystem.LanguageServices.WorkspaceProjectContextHost.WorkspaceProjectContextHostInstance.&lt;ApplyProjectChangesUnderLockAsync&gt;d__19.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.VisualStudio.ProjectSystem.LanguageServices.WorkspaceProjectContextHost.WorkspaceProjectContextHostInstance.ApplyProjectChangesUnderLockAsync(IProjectVersionedValue`1 update, Boolean evaluation, CancellationToken cancellationToken)
   at Microsoft.VisualStudio.ProjectSystem.LanguageServices.WorkspaceProjectContextHost.WorkspaceProjectContextHostInstance.&lt;&gt;c__DisplayClass18_0.&lt;OnProjectChangedAsync&gt;b__0(CancellationToken ct)
   at Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedUnderLockAsync.&lt;&gt;c__DisplayClass7_0.&lt;ExecuteUnderLockCoreAsync&gt;b__0()
   at Microsoft.VisualStudio.Threading.ReentrantSemaphore.StackSemaphore.&lt;&gt;c__DisplayClass3_0.&lt;&lt;ExecuteAsync&gt;b__0&gt;d.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.VisualStudio.Threading.ReentrantSemaphore.StackSemaphore.&lt;&gt;c__DisplayClass3_0.&lt;ExecuteAsync&gt;b__0()
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.ExecuteJob[T](Func`1 asyncMethod, JoinableTask job)
   at Microsoft.VisualStudio.Threading.ReentrantSemaphore.ExecuteCoreAsync(Func`1 semaphoreUser)
   at Microsoft.VisualStudio.Threading.ReentrantSemaphore.StackSemaphore.&lt;ExecuteAsync&gt;d__3.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.VisualStudio.Threading.ReentrantSemaphore.StackSemaphore.ExecuteAsync(Func`1 operation, CancellationToken cancellationToken)
   at Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedUnderLockAsync.&lt;ExecuteUnderLockCoreAsync&gt;d__7.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedUnderLockAsync.ExecuteUnderLockCoreAsync(Func`2 action, CancellationToken cancellationToken)
   at Microsoft.VisualStudio.ProjectSystem.LanguageServices.WorkspaceProjectContextHost.WorkspaceProjectContextHostInstance.OnProjectChangedAsync(IProjectVersionedValue`1 update, Boolean evaluation)
   at Microsoft.VisualStudio.ProjectSystem.LanguageServices.WorkspaceProjectContextHost.WorkspaceProjectContextHostInstance.&lt;InitializeCoreAsync&gt;b__14_1(IProjectVersionedValue`1 e)
   at Microsoft.VisualStudio.ProjectSystem.ActionBlockSlimAsync`1.ProcessInputAsync(TInput input)
   at Microsoft.VisualStudio.ProjectSystem.DataReceivingBlockSlim`1.&lt;ProcessInputQueueAsync&gt;d__5.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.VisualStudio.ProjectSystem.DataReceivingBlockSlim`1.ProcessInputQueueAsync(InputDataBuffer inputQueue)
   at Microsoft.VisualStudio.ProjectSystem.DataReceivingBlockSlim`1.&lt;&gt;c.&lt;System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage&gt;b__2_0(Object s)
   at System.Threading.Tasks.Task`1.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```
And then an assert failed.
```cs
System.InvalidOperationException: 'Unexpected false'
   at Roslyn.Utilities.Contract.ThrowIfFalse(bool condition, string message)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject.EndBatch()
```

</Description>
    <CreatedDate>28/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38939</IssueID>
    <RepoID>1</RepoID>
    <Title>Broken Nuget package Microsoft.VisualStudio.Shell.15.0</Title>
    <Description>The first dependency of the latest version of package [`Microsoft.VisualStudio.Shell.15.0`](https://www.nuget.org/packages/Microsoft.VisualStudio.Shell.15.0/), [`Microsoft.ServiceHub.Framework`](https://www.nuget.org/packages/Microsoft.ServiceHub.Framework/), is broken. Can someone please forward this issue to the SDK team?</Description>
    <CreatedDate>28/09/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38938</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190927.2
- **Date Produced**: 9/27/2019 6:33 PM
- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 5.0.0-beta.19477.2

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>28/09/2019</CreatedDate>
    <ClosedDate>28/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38937</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow parsing of attributes on any statement.</Title>
    <Description>Tagging @RikkiGibson 

I recommend reading with whitespace diffs off.  This PR incorporates https://github.com/dotnet/roslyn/pull/38935.  If we can get that merged in first it will make this PR easier to read.

TODO: 
- [x] tests for all forms.</Description>
    <CreatedDate>28/09/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38936</IssueID>
    <RepoID>1</RepoID>
    <Title>Task already completed exception in Workspace.TryApplyChanges</Title>
    <Description>In my Visual Studio extension I create a temporary workspace like this:
```
Microsoft.CodeAnalysis.Workspace w = new Workspace();
Microsoft.CodeAnalysis.Project project = w.CurrentSolution.AddProject();
w.TryApplyChanges(project.Solution);
```
It worked fine for several years, but after the recent VS 2019 16.3.0 update it generates the following exception:

&gt; System.InvalidOperationException: An attempt was made to transition a task to a final state when it had already completed.
&gt;    at System.Threading.Tasks.TaskCompletionSource`1.SetResult(TResult result)
&gt;    at Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.LanguageServerClientEventListener.StartListening(Workspace workspace, Object serviceOpt)
&gt;    at Microsoft.CodeAnalysis.Host.DefaultWorkspaceEventListenerServiceFactory.Service.EnsureListeners()
&gt;    at Microsoft.CodeAnalysis.Workspace.GetEventHandlers[T](String eventName)
&gt;    at Microsoft.CodeAnalysis.Workspace.RaiseWorkspaceChangedEventAsync(WorkspaceChangeKind kind, Solution oldSolution, Solution newSolution, ProjectId projectId, DocumentId documentId)
&gt;    at Microsoft.CodeAnalysis.Workspace.OnProjectAdded_NoLock(ProjectInfo projectInfo, Boolean silent)
&gt;    at Microsoft.CodeAnalysis.Workspace.OnProjectAdded(ProjectInfo projectInfo, Boolean silent)
&gt;    at Microsoft.CodeAnalysis.Workspace.ApplyProjectAdded(ProjectInfo project)
&gt;    at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)
&gt;    at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution)

Note that it looks very much like a race condition, because I don't see the error when running the code first time on a "cold" machine. But when all assemblies are already in memory, the exception occurs every time.

Looking at source:
```
        public void StartListening(Workspace workspace, object serviceOpt)
        {
            // mark that roslyn solution is added
            _taskCompletionSource.SetResult(null);
        }
```
Maybe there should be a check that result is not yet set?
</Description>
    <CreatedDate>28/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38935</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify parsing of attributes</Title>
    <Description>I recommend reviewing this with whitespace changes *off*.

Our existing parsing strategy was pretty strange, given that we would create a mutable builder, fill it with parsed attributes, then pass that builder along.  This was confusing and potentially error prone as no downstream consumers were ever expected to continue mutating the list.  It also meant in several places we needed more complex try/finally logic to place things back in the pool.

I've moved to an approach where we just parse out hte attribute list on demand and then pass along to whoever wants to consume it.

~Note: i would like to do this next with modifiers.  Though i am *less* certain if that will be possible due to downstream consumers possibly wanting to mutate hte modifiers list after the initial parsing.~

Update: modifiers looks to be much harder/out-of-scope.  The mods list is definitely mutated post creation, making it less suitable for this sort of up-front realization of the list. </Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38934</IssueID>
    <RepoID>1</RepoID>
    <Title>Use Enhanced Colors For VB is only listed under C #</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/734508/use-enhanced-colors-for-vb-is-only-listed-under-c.html)._

---
Visual Basic options should be selectable under Visual Basic or listed in 2 places also the text should be &amp;quot;Use Enhanced Colors for C# and Visual Basic&amp;quot; not just &amp;quot;Basic&amp;quot;

---
### Original Comments

#### Jane Wu [MSFT] on 9/16/2019, 00:19 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38932</IssueID>
    <RepoID>1</RepoID>
    <Title>Collapse to Definitions does not collapse enum types</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/732602/ctrl-m-o不能折叠内部类型比如enum.html)._

---
Ctrl and M-O cannot collapse internal types such as enum

---
### Original Comments

#### Jane Wu [MSFT] on 9/16/2019, 00:23 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38931</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellsense left hand talk to right</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/730687/intellsense-left-hand-talk-to-right.html)._

---
There are a number of rules and tools to help the developer. One of these is being able to add a missing USING reference. Another is enforcing rules about where a USING statement should appear in a code file. PLEASE make it so the two understand each other. It's really annoying to have an automatically added 'anything' immediatley become a problem.

---
### Original Comments

#### Jane Wu [MSFT] on 9/11/2019, 11:44 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38930</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix expected test output for TestPragmaWarningDirectiveWithDocumentationComment2</Title>
    <Description>My bad y'all 😞 </Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38929</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix crash in flow analysis</Title>
    <Description>When we added support for tracking static fields as part of nullable
analysis, we used -1 for their containing slot. Negative numbers are
not meant to be used as actual slots and flowed through the flow analysis
code, they are only used as sentinels from slot-returning methods to indicate
that the variable in question is not tracked. The appropriate root
slot for a static variable is the same as the root slot for a top-level tracked
variable (like a local), which is 0.

Fixes #38725</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38928</IssueID>
    <RepoID>1</RepoID>
    <Title>show outlining for comments (separate option)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/725721/show-outlining-for-comments-separate-option.html)._

---
**Now:**
Show outlining for comments and preprocessor regions 

**Suggest:**
Show outlining for comments
Show outlining for preprocessor regions

---
### Original Comments

#### Jane Wu [MSFT] on 9/9/2019, 00:02 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38927</IssueID>
    <RepoID>1</RepoID>
    <Title>Copy fully qualified name of selected identifier</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/725281/copy-fully-qualified-name-of-selected-identifier.html)._

---
Often I want to share a class or a function or a member etc with another team member  and browsing in VS I can easily copy a name like &amp;quot;Foo&amp;quot; and send it to them but that is ambiguous for them to find in a very large codebase.

Instead I'd like to send them the fully qualified namespace &amp;quot;Team::Project::Component::Foo&amp;quot;
I find myself doing this a lot the hard way by hovering over the object to see it's intellisense info and typing tha tout manually which is error prone and tedious.

---
### Original Comments

#### Jane Wu [MSFT] on 9/5/2019, 11:22 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38925</IssueID>
    <RepoID>1</RepoID>
    <Title>Prevent unbound lambdas from remaining in the trees after initial binding</Title>
    <Description>In some cases, unbound lambdas remain in the bound tree after initial binding and have to be dealt with by later passes.  About this the code has a comment

``` c#
        // UNDONE: [MattWar]
        // UNDONE: Here we enable the consumer of an unbound lambda that could not be 
        // UNDONE: successfully converted to a best bound lambda to do error recovery 
        // UNDONE: by either picking an existing binding, or by binding the body using
        // UNDONE: error types for parameter types as necessary. This is not exactly
        // UNDONE: the strategy we discussed in the design meeting; rather there we
        // UNDONE: decided to do this more the way we did it in the native compiler:
        // UNDONE: there we wrote a post-processing pass that searched the tree for
        // UNDONE: unbound lambdas and did this sort of replacement on them, so that
        // UNDONE: we never observed an unbound lambda in the tree.
        // UNDONE:
        // UNDONE: I think that is a reasonable approach but it is not implemented yet.
        // UNDONE: When we figure out precisely where that rewriting pass should go, 
        // UNDONE: we can use the gear implemented in this method as an implementation
        // UNDONE: detail of it.
```

However, we now *do* have a place for this rewriting to go: `BindToTypeForErrorRecovery`

It would be nice to "clean" the initial bound tree of unbound lambdas.
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38924</IssueID>
    <RepoID>1</RepoID>
    <Title>Share name for semantic classification view tagger provider and buffe…</Title>
    <Description>…r tagger provider

Editor team has requested that we share the name on our semantic classification view tagger and bugger tagger providers. This allows them to implement the following strategy to avoid creating both taggers where possible:

1. Create the view taggers first.
2. Keep track of the names of the view tagger providers that created a tagger for a particular buffer.
3. Don’t call buffer tagger providers for a buffer if it has the same name as a view tagger provider that provided a tagger for that buffer.

This also requires that the returned tagger returns tags when either GetTags() or GetAllTags() is called.</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38923</IssueID>
    <RepoID>1</RepoID>
    <Title>Consolidate many quick fixes to simplify class creation.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/656674/consolidate-many-quick-fixes-to-simplify-class-cre.html)._

---
&lt;p&gt;When I create a new class in my project, it usually needs a handful of dependencies injected via constructor. Right now I do that by typing out a constructor parameter, pushing Alt-Enter to bring up &amp;quot;Quick Fixes&amp;quot;, then choosing the &amp;quot;create and initialize field&amp;quot; or &amp;quot;create and initialize property&amp;quot; fix as appropriate.&lt;/p&gt; &lt;p&gt;C# record types and representative constructors have spent at least half a decade in spec Hell, but I think the IDE has the tools to do this:&lt;/p&gt; &lt;ol&gt;
&lt;li&gt;Create a new type.&lt;/li&gt; &lt;li&gt;Type all of the constructor parameters.&lt;/li&gt; &lt;li&gt;When I Alt-Enter and choose Quick Fixes, I want a &amp;quot;create and initialize all&amp;quot; quick fix that does what it says for any parameters that aren't currently initialized.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;For example, suppose I had this constructor:&lt;/p&gt; &lt;pre&gt;public Example(IDependency dependency, ILogger logger) {}&lt;/pre&gt; &lt;p&gt;After the quick fix, this would be the result if I chose &amp;quot;create and initialize all as fields&amp;quot;.&lt;/p&gt; &lt;pre&gt;private readonly IDependency _dependency;
private readonly ILogger _logger;

public Example(IDependency dependency, ILogger logger)
{
    _dependency = dependency;
    _logger = logger;
}
&lt;/pre&gt;&lt;p&gt;Similar options would exist for properties. I'd use this many times daily.&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 7/23/2019, 01:53 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38922</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle reparenting LocalFunction TypeParameters with nullablility reinference</Title>
    <Description>```cs
using System;
#nullable enable
class C
{
    public static Action&lt;T&gt; Create&lt;T&gt;(T t, Action&lt;T&gt; a) =&gt; throw null!;
	public static T[] Create&lt;T&gt;(T t) =&gt; throw null!;

    public static void M(object? o)
    {
        var a = Create(o, o1 =&gt; {
            LocalFunction(o1);
            T LocalFunction&lt;T&gt;(T t) 
            {
                _ = Create(t); // Type argument for Create needs to be reparented
				var d = new D&lt;T&gt;(); // Type argument in D's substituted type needs to be reparented
				d.DoSomething(t); // Argument of the function needs to be reparented
				return d.Prop; // Return type needs to be reparented
            }
        });
    }
}
class D&lt;T&gt;
{
	public void DoSomething(T t) =&gt; throw null!;
	public T Prop { get; }
}
```

The parent of that type parameter T should be the given local function, and all usages of that type parameter need to be substituted as well. This includes:
* Regular usage as a type symbol
* Use in substitution for other type symbols
* Use as the return/argument types off of calls from other substituted types.</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38921</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect IDE0044 when NRTs are enabled, the class is generic, and the field is only set by a non-this reference</Title>
    <Description>Visual Studio 16.3.1 and 16.4p1

IDE0044 should not be reported.

```cs
class GenericClass&lt;T&gt;
{
    // IDE0044 Make field readonly
    private int field;

    public static void Method(GenericClass&lt;T&gt; instance)
    {
        instance.field++;
    }
}
```

Similarly:

```cs
class GenericClass&lt;T&gt;
{
    // IDE0044 Make field readonly
    private int field;

    public struct Helper
    {
        private readonly GenericClass&lt;T&gt; instance;

        public Helper(GenericClass&lt;T&gt; instance)
        {
            this.instance = instance;
        }

        public void Method()
        {
            instance.field++;
        }
    }
}
```

Csproj:
```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;latest&lt;/LangVersion&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;
```</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38920</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove experimentation for file rename with inline rename</Title>
    <Description>This is no longer an experiment. </Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38919</IssueID>
    <RepoID>1</RepoID>
    <Title>mbox shortcut changes in WPF</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/554389/mbox-shortcut-changes-in-wpf.html)._

---
&lt;p&gt;In WPF/C#, I used mbox shortcut. At that time, this code was inputed.&lt;/p&gt;&lt;pre&gt;System.Windows.Forms.MessageBox.Show(&amp;quot;Test&amp;quot;);
&lt;/pre&gt;&lt;p&gt;But I want to enter the code below in WPF.&lt;/p&gt;&lt;pre&gt;System.Windows.MessageBox.Show(&amp;quot;Test&amp;quot;);&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;&lt;pre&gt;using System.Windows;
// Some Code
MessageBox.Show(&amp;quot;Test&amp;quot;);  // Where I used shortcut&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 5/5/2019, 03:20 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
#### Kendra Havens [MSFT] on 9/27/2019, 11:03 AM: 

&lt;p&gt;Thank you for filing this feedback! I'm going to move this to our open source repository on GitHub for further discussion with the community.&lt;/p&gt;
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38918</IssueID>
    <RepoID>1</RepoID>
    <Title>Inline Rename: Cannot type "." when renaming namespace</Title>
    <Description>**Version Used**: 3.3

**Steps to Reproduce**:

1. Right-click a namespace in any C# file.
2. Select "Rename" menu item.
3. Type a new namespace that include a "." character.

**Expected Behavior**:

You can type or paste a "." character as long as it is a valid namespace string.

**Actual Behavior**:

You cannot type a "." character. If you attempt to paste one, the outline becomes red, and the popup in the corner of the editor says "The new name is not a valid identifier."

**Bonus**: In an ASP.NET Core app, if you hit return anyway at this point, a yellow bar appears indicating that a `NotSupportedException` has been raised.

```
    &lt;description&gt;System.NotSupportedException: Changing document &amp;apos;C:\Users\sandy\source\repos\WebApplication1\WebApplication1\Pages\_ViewImports.g.cs&amp;apos; is not supported.&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.CheckAllowedProjectChanges(ProjectChanges projectChanges)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.CheckAllowedSolutionChanges(SolutionChanges solutionChanges)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ApplyRename(Solution newSolution, IWaitContext waitContext)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.CommitCore(IWaitContext waitContext, Boolean previewChanges)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.&amp;lt;&amp;gt;c__DisplayClass76_0.&amp;lt;Commit&amp;gt;b__0(IWaitContext waitContext)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(String title, String message, Boolean allowCancel, Boolean showProgress, Action`1 action)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.Commit(Boolean previewChanges)&amp;#x000D;&amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteCommand(ReturnKeyCommandArgs args, CommandExecutionContext context)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.&amp;lt;&amp;gt;c__DisplayClass13_1`1.&amp;lt;Execute&amp;gt;b__1()&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call, Predicate`1 exceptionFilter)&amp;#x000D;&amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;#x000D;&amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&lt;/description&gt;
```

In a simple console app, you can hit return and the namespace rename will be successful.</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38917</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid a newline after type parameter attributes</Title>
    <Description>Fixes #38916
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38916</IssueID>
    <RepoID>1</RepoID>
    <Title>Formatting of type parameter with attribute includes a line break</Title>
    <Description>A line break is included in the formatting of a type parameter with an attribute.

Create a .NET Core 3.0 C# project and Go To Definition on `System.IEquatable&lt;T&gt;`:

&lt;img width="348" alt="GoToDefinition" src="https://user-images.githubusercontent.com/10732005/65788125-42069f00-e10f-11e9-8a48-37789d7c50b3.PNG"&gt;
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38915</IssueID>
    <RepoID>1</RepoID>
    <Title>typo: ahve -&gt; have</Title>
    <Description>
    </Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38914</IssueID>
    <RepoID>1</RepoID>
    <Title>'Suppress diagnostic' should appear before 'Configure diagnostic'</Title>
    <Description>**Version Used**: 16.4 Preview 1

**Steps to Reproduce**:

1. Expand the light bulb for a diagnostic
2. Attempt to suppress the diagnostic

**Expected Behavior**:

The localized action (suppress diagnostic) should appear before the project-wide action (configure diagnostic). This matches the default selection of 'Fix single' when 'Fix All' is also available.

**Actual Behavior**:

Suppressing diagnostics now takes several additional steps relative to earlier releases, because it is more deeply nested and not selected by default.
![image](https://user-images.githubusercontent.com/1408396/65779687-17134f80-e0fd-11e9-9793-ee6ad68434c8.png)
</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38912</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190926.6
- **Date Produced**: 9/27/2019 1:21 AM
- **Commit**: b449f372df1a3374ebdc85f42ff137dcda08776b
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 5.0.0-beta.19476.6

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38911</IssueID>
    <RepoID>1</RepoID>
    <Title>rename ProgressStatus.Stoped --&gt; Stopped</Title>
    <Description>Fixes #38039</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38910</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable version of unmanaged type should be unmanaged too</Title>
    <Description>**Version Used**: VS 16.3.1

Following code:
```C#
private static void Foo&lt;T&gt;()
    where T : unmanaged
{ }

private static unsafe void Bar()
{
    Foo&lt;int?&gt;();
}
```
reports error: "The type 'int? must be a non-nullable value type...'".

[Documentation](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/unmanaged-types) states: "Any user-defined struct type that contains fields of unmanaged types...". Don't know why it talks only about "user-defined" structs (maybe because of ```Span&lt;T&gt;```?) but I don't know about any reason for disallowing nullable types. They are just structs with two fields (```bool``` and ```T```). So when ```T``` is unmanaged than ```T?``` is unmanaged too.

I'm really depressed of this. I've expected constructed unmanaged types would have worked already in C# 7.3. Now I hoped it would be supported by 8.0 because of explicit addition of support for constructed unmanaged types but it's still not usable enough.
Now I'm workarounding this issue by using ```Unsafe``` class and using runtime checks for checking that ```T``` is unmanaged/blittable (allowing nullable types). It would be nice to have compile time support for this.

Thanks.</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38909</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8509 is not trigged when null is missing as a pattern when matching a nullable value type</Title>
    <Description>Dear Sir/Madam,

**Version Used**: 
Visual Studio 2019 16.3.1

**Steps to Reproduce**:

1. Use a switch expression on a nullable value type
2. Do not use the `null` pattern
```
bool? input = null;
input switch // No warning
{
    true =&gt; "true",
    false =&gt; "false"
};
```

**Expected Behavior**:

The expected behaviour is a warning forunexhaustive patterns, CS8509.
Just as in the following cases
```
double? input = null;
input switch // Warning	CS8509 The switch expression does not handle all possible inputs (it is not exhaustive).
{
    true =&gt; "true",
    null =&gt; "null"
};

#nullable enable
string? input = null;
input switch // Warning	CS8509 The switch expression does not handle all possible inputs (it is not exhaustive).
{
    { } =&gt; "not null",
};
```

**Actual Behavior**:
No warning while there is an unexhaustive pattern.

Thank you in advance.

Regards,
NiekGr</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>05/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38908</IssueID>
    <RepoID>1</RepoID>
    <Title>Add codefix for CS0708</Title>
    <Description>**Description**
This PR provides a code-fix for the compiler error `CS0708`.

**Issues fixed**
Fix #31838 </Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38907</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix smart indent with hard tabs (merge to master)</Title>
    <Description>This pull request merges #38893 forward to master (version 16.4 preview 2).</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38906</IssueID>
    <RepoID>1</RepoID>
    <Title>Improved formatting of comments and suppressions</Title>
    <Description>Review by commit is highly recommended to understand the state of the work (each commit is a distinct and non-breaking change).

Fixes #16681 
Fixes #38224</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38905</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC: Track documents that do not match the debuggee</Title>
    <Description>The current Project System design doesn't allow us to capture a solution snapshot at the start of a debug session that would reflect the exact content of the source files on disk the assembly was built with (https://github.com/dotnet/project-system/issues/5457). Roslyn relies on file system watches to detect changes in the source files. Events from the watcher may be handled by Roslyn at any point in time after the debugging started or not at all, since the OS does not guarantee the events to be triggered.

The PR adds a source file content checksum validation before the EnC service starts computation that depends on the content of a document at the start of the debug session. The validation compares the checksum stored in the PDB by the compiler with the current content of the file on disk. Documents are considered out-of-sync until the EnC service observes file content with matching checksum.

Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/970821
Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/992537

TODO:
To fix UWP apps [899910](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/899910) we would need to implement https://github.com/dotnet/roslyn/issues/38954. UWP generates an `.g.cs` file with an empty class, so the file is not listed in the PDB and also when launched for the first time the document that's added to the workspace is empty. Since there is no checksum to compare to the EnC service considers the empty document a baseline document and then reports rude edit when the file gets updated to the empty class.</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38904</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion: refactor FilterResult</Title>
    <Description>Due to getting rid of the old completion, we are allowed now to simplify more completion code:
1. Merge ExtendedFilterResult to FilterResult and rename both to MatchResult.
2. Remove FilterText from MatchResult - it is common for all MatchResult in the current ItemManager call.
3. Move HighlightedSpans to MatchResult because we calculate them based on Match. No need to create and maintain a separate collection of CompletionItemWithHighlight until responding to the Editor.
4. Extract TryCreateMatchResult from the loop of creating MatchResults.
5. Merge IsHardSelection with ShouldSoftSelectItem (one just called another and reverted result)

4. </Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>28/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38903</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38902</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38901</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38900</IssueID>
    <RepoID>1</RepoID>
    <Title>[IDE0069] Disposable fields when passed from the outside should not be disposed</Title>
    <Description>**Version Used**: 
Visual Studio 16.3.0

**Steps to Reproduce**:

According to [CA2213](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2213-disposable-fields-should-be-disposed?view=vs-2019) only disposable fields that were created locally should be disposed inside the `Dispose` method. But **If the object is created or assigned outside of type T, the rule does not fire. This reduces noise for cases where the containing type doesn't own the responsibility for disposing of the object.**.

It means that the following code should not trigger IDE0069:

```csharp
internal class FooBar : IDisposable
{
    private readonly Stream _d;

    public FooBar(Stream d)
    {
        _d = d;
    }

    public void Dispose()
    {
        throw new NotImplementedException();
    }

    public override string ToString()
    {
        return _d.ToString();
    }
}
```

But it does.

**Expected Behavior**:

`FooBar` should not have any IDE0069 diagnostics.

**Actual Behavior**:

The IDE0069 diagnostic is emitted for disposable fields passed via constructor
</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38899</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense is not very smart, suggests "struct" instead of "string"</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/726472/intellisense-is-not-very-smart-suggests-struct-ins.html)._

---
Let's say I'm defining a simple class in C#. Now I want to define a string member, so I type &amp;quot;public str&amp;quot;. At this point Intellisense suggests

struct

instead of

string

In order to autocomplete &amp;quot;string&amp;quot;, I must type &amp;quot;i&amp;quot; or else &amp;lt;up&amp;gt; once to focus it in the drop down.

This seems entirely wrong because string is much more likely to be used here; in fact struct is (I believe) not even legal here. &amp;quot;string&amp;quot; also comes fiirst alphabetically, so why suggest &amp;quot;struct&amp;quot; instead?

---
### Original Comments

#### Visual Studio Feedback System on 9/9/2019, 03:35 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38898</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect CS0411 (type argument inference failure) with three projects when one uses NRTs and one doesn't</Title>
    <Description>**Version Used**: Visual Studio 16.3.1

MSBuild at the command line and VS builds both incorrectly fail with this build output:

&gt; error CS0411: The type arguments for method 'ProjectAStaticClass.GenericMethod\&lt;T&gt;(IBaseInterface\&lt;T&gt;)'
cannot be inferred from the usage. Try specifying the type arguments explicitly.

If you remove `&lt;Nullable&gt;enable&lt;/Nullable&gt;` from ProjectA (see below) or add it to ProjectB, ProjectC will stop failing with this bogus error.

The error list sometimes shows this error until you navigate to it. Then it disappears. Other times the VS build fails and the error list stays showing 0 errors. If you specify the type argument, the IDE greys it because it's redundant.

Self-contained repro: [TypeArgumentInferenceFailure.zip](https://github.com/dotnet/roslyn/files/3660231/TypeArgumentInferenceFailure.zip)

Run Repro.ps1. (Adjust the msbuild path if you don't have VS 2019 Enterprise installed at the default location.)

/cc @jcouv, @333fred at @CyrusNajmabadi's recommendation</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38897</IssueID>
    <RepoID>1</RepoID>
    <Title>References to VB.NET methods are not showing up in CodeLens if they are in an aspx page.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/720917/references-to-vbnet-methods-are-not-showing-up-in.html)._

---
What steps will reproduce the problem?
1. Create a VB.NET class in project A with some methods
2. Create an aspx page in a separate project B in the same solution.
3. In one of the aspx pages, refereence one of your methods from project A.
4. Look at CodeLens  for your methods in project A.

What is the expected output? What do you see instead?
Expected: CodeLens shows usages of the methods.
Actual: CodeLens does not show usages of the methods; you hvae to use Find to find them.

---
### Original Comments

#### Visual Studio Feedback System on 9/4/2019, 00:26 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38896</IssueID>
    <RepoID>1</RepoID>
    <Title>The IDE does not respect 'open brace on new line' preferences for switch expressions.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/719582/the-ide-does-not-respect-open-brace-on-new-line-pr.html)._

---
The 'fix formatting' option and automatic formatting seem to really want to put the open brace on a new line in code such as the following:
```
allWires.Append(i switch {
	0 =&amp;gt; &amp;quot;CutFirstWire CutSecondWire&amp;quot;,
	1 =&amp;gt; &amp;quot; CutThirdWire&amp;quot;,
	2 =&amp;gt; &amp;quot; CutFourthWire&amp;quot;,
	3 =&amp;gt; &amp;quot; CutFifthWire&amp;quot;,
	_ =&amp;gt; &amp;quot;&amp;quot;
});
```
This occurs even with `csharp_new_line_before_open_brace = none` specified in `.editorconfig`, and there is no option in the GUI for switch expressions. Such an option should be added.

---
### Original Comments

#### Visual Studio Feedback System on 9/2/2019, 00:38 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38895</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio 2019 code format outputs wrong code when using Unicode character U+00A0 NBSP</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/715936/visual-studio-2019-code-format-outputs-wrong-code.html)._

---
See example code to reproduce the issue.
You can format with Edit/Advanced/Format Document

Note that both lines using `new T()` contain U+00A0 character, which is of Zs category, and thus a valid space.
The `{typeof(T),&amp;nbsp;new&amp;nbsp;T()}`  will become `{typeof(T),newT()},` after formatting resulting in compilation error.

Reproduced with 16.2.3

```
using System;
using System.Collections.Generic;

namespace Unicode
{
    public class T
    {
        internal static readonly Dictionary&amp;lt;Type, T&amp;gt; WillFailOnFormat = new Dictionary&amp;lt;Type, T&amp;gt;
        {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{typeof(T),&amp;nbsp;new&amp;nbsp;T()},
        };
        
internal&amp;nbsp;static&amp;nbsp;T&amp;nbsp;WillNotFailOnFormat&amp;nbsp;=&amp;nbsp;new&amp;nbsp;T();
    }
}

```

---
### Original Comments

#### Ivan LE LANN on 8/28/2019, 09:30 AM: 

It seems that special space characters in example code where sadly removed during submission process.&lt;br&gt;I cannot upload any attachment from work, so anyone wanting to reproduce will have to manually replace the ASCII space between "new" and "T" with U+00A0.&lt;br&gt;
#### Visual Studio Feedback System on 8/30/2019, 00:08 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38894</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to Platform team's Find All References Kind Column</Title>
    <Description>Delete a bunch of code on Roslyn side, which is no longer necessary as we don't own the Kind column anymore, it has been moved to the platform layer and shared with other teams.

I have also cleaned up some code in this space for newly added ContainingType and ContainingMember columns.

Fixes VSO bug [#822324](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/822324)</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>29/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38893</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix smart indent with hard tabs (16.3 servicing)</Title>
    <Description>Fixes #38798
Fixes #38819

### Customer scenario

When a user with indentation set to hard tabs is editing code, the code will not be correctly indented in some cases. These cases include:

* The caret is placed to the left of the first non-whitespace character, but not all the way left to column 1. For example, the caret is typically in an affected location if the user presses &lt;kbd&gt;Home&lt;/kbd&gt;.
* The caret is placed between two parts of a compound statement, such as the situation described by https://github.com/dotnet/roslyn/issues/38819#issuecomment-534728599.

### Bugs this fixes

#38798 
#38819 
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/987951 ([Public link](https://developercommunity.visualstudio.com/content/problem/745432/c-smart-indenting-is-broken-in-1630.html))

### Workarounds, if any

None.

### Risk

Low.

### Performance impact

Negligible. No significant changes to existing code paths.

### Is this a regression from a previous update?

Yes, regression from previous minor version.

### Root cause analysis

Hard tabs was an untested configuration for indentation. The existing test suite was updated to also test hard tabs for indentation in all scenarios previously covered by spaces only.

### How was the bug found?

Customer reported.

### Test documentation updated?

No.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38892</IssueID>
    <RepoID>1</RepoID>
    <Title>Optimize GetSolutionUpdateStatusAsync for stepping in absence of changes</Title>
    <Description>May fix https://devdiv.visualstudio.com/DevDiv/_workitems/edit/958005.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38891</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38890</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38889</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38888</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into master.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38887</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix an accidental reverse caused by a bad merge</Title>
    <Description>The change was originally made in PR #37894. However, it was later overwritten by auto-merge when flowing changes from 16.3 to 16.4p1 in this commit https://github.com/dotnet/roslyn/commit/7b852992edd8fddf1fce2854cedb764741c3087d

This PR restore the code to the correct state which matches what we shipped in 16.4p1

Thanks @RikkiGibson for noticing this issue!

FYI @ivanbasov @dotnet/roslyn-infrastructure </Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38886</IssueID>
    <RepoID>1</RepoID>
    <Title>Add editorconfig options to bulk configure analyzer diagnostics</Title>
    <Description>Fixes #38674

Following new editorconfig options are added to allow changing the default severity of analyzer diagnostics:
1. Category based configuration:
```
[*.cs]
dotnet_analyzer_diagnostic.category-{category}.severity = error | warning | suggestion | silent | none
```

2. All analyzer diagnostics bulk configuration:
```
[*.cs]
dotnet_analyzer_diagnostic.severity = error | warning | suggestion | silent | none
```

Specific diagnostic ID configuration always takes precedence over either of the above options.
Category based configuration takes precedence over all analyzer diagnostics bulk configuration.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38885</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 - Unneccessary assignment is not reported in a Test class using XUnit and Mock</Title>
    <Description>**Version Used**: 
16.3.0
.net core SDK 2.2.402

**Steps to Reproduce**:
I have some tests using Xunit and Mock, when  I use Setup in a mock IDE0059 is not reported.
Here is a little example

```csharp
using System;
using System.Threading.Tasks;
using Gbm.Api.Crm.Repositories.Abstractions;
using Moq;
using Xunit;


public class Ide0059Test
{
    [Fact]
    public void Test_IDE0059_Not_Firing()
    {
        Guid contractId = Guid.NewGuid();
        Guid accountId = Guid.NewGuid(); // ide0059 not reported

        var contractRepository = new Mock&lt;IContractRepository&gt;();
        contractRepository
           .Setup(m =&gt; m.FindByIdAsync(It.Is&lt;Guid&gt;(i =&gt; i == contractId)))
           .Returns(Task.FromResult((Crm.Repositories.Abstractions.DataContracts.Contract)null))
           .Verifiable();
    }
    [Fact]
    public void Test_IDE0059_Firing()
    {
        Guid contractId = Guid.NewGuid();
        Guid accountId = Guid.NewGuid(); // ide0059 error
        if (contractId != default)
        {
            Console.WriteLine(contractId);
        }
    }
}
```

**Expected Behavior**:
IDE0059 warning
**Actual Behavior**:
No warning
</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38884</IssueID>
    <RepoID>1</RepoID>
    <Title>Unable to find package Microsoft.DotNet.Arcade.Sdk while Restore.cmd</Title>
    <Description>This might be duplicated, or a dumb question, but I am having this issue and have no idea what's going on under the hood :( 

**Version Used**: 

Commit: `8c8cdca` (master)
VS 2019 16.3 
   * C#, VB, MSBuild, .NET Core and Visual Studio Extensibility are installed
   * "Use Previews" is checked

**Steps to Reproduce**:
```
$ git clean -dfx
$ .\Restore.cmd -v diag
```

**Expected Behavior**:
The toolset is supposed to be Restored.

**Actual Behavior**:
It tries to find the 'arcade' package in the wrong place.

```
PS C:\Users\enghq\workspace\roslyn&gt; git clean -dfx
Removing .dotnet/
Removing .tools/
Removing artifacts/
PS C:\Users\enghq\workspace\roslyn&gt; .\Restore.cmd -v diag
Roslyn.sln:
dotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-preview6-012264/dotnet-sdk-3.0.100-preview6-012264-win-x64.zip
dotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-preview6-012264/dotnet-sdk-3.0.100-preview6-012264-win-x64.zip
dotnet-install: Adding to current process PATH: "C:\Users\enghq\workspace\roslyn\.dotnet\". Note: This change will not be visible if PowerShell was run as a child process.
dotnet-install: Installation finished
Downloading vswhere
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\msbuild.exe /nologo /clp:Summary /clp:ErrorsOnly;NoSummary /m /nr:True /p:ContinuousIntegrationBuild=False /p:TreatWarningsAsErrors=false /p:__ToolsetLocationOutputFile=C:\Users\enghq\workspace\roslyn\artifacts\toolset\1.0.0-beta.19463.3.txt /t:__WriteToolsetLocation /v:diag C:\Users\enghq\workspace\roslyn\artifacts\toolset\restore.proj
02:11:30.856     0&gt;C:\Users\enghq\workspace\roslyn\artifacts\toolset\restore.proj : error : Unable to find package Microsoft.DotNet.Arcade.Sdk. No packages exist with this id in source(s): Microsoft Visual Studio Offline Packages, nuget.org
02:11:30.856     0&gt;C:\Users\enghq\workspace\roslyn\artifacts\toolset\restore.proj : error : C:\Users\enghq\workspace\roslyn\.dotnet\sdk\3.0.100-preview6-012264\Sdks\Microsoft.DotNet.Arcade.Sdk\Sdk not found. Check that a recent enough .NET Core SDK is installed and/or increase the version specified in global.json.
02:11:30.862     1&gt;C:\Users\enghq\workspace\roslyn\artifacts\toolset\restore.proj : error MSB4236: The SDK 'Microsoft.DotNet.Arcade.Sdk' specified could not be found.
Build failed.
```

**FYI**
`dotnet restore Roslyn.sln` also doesn't work. 
</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38883</IssueID>
    <RepoID>1</RepoID>
    <Title>Bump format version</Title>
    <Description>
    </Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38882</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable nullable reference types for compiler utilities</Title>
    <Description>Most of this is straightforward changes to use `#nullable enable` in the **InternalUtilities** folder. There are two points to call out especially (I'll point these out in the diff as well):

1. I added a behavior-changing generic type constraint for `Delegate`
1. I added `RoslynString` so we can use `IsNullOrEmpty`, similar to #38646 added `RoslynDebug`

All commits build successfully. Review by commit will provide simpler changes.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38881</IssueID>
    <RepoID>1</RepoID>
    <Title>Spelling fixes</Title>
    <Description>
    </Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38880</IssueID>
    <RepoID>1</RepoID>
    <Title>Spelling fixes</Title>
    <Description>
    </Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38879</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert to conditional expression refactoring disgards null-forgiving operator</Title>
    <Description>**Version Used**: Visual Studio 2019 Version 16.4

**Steps to Reproduce**:

```cs
#nullable enable

class Program
{
    public static string Method(bool empty)
    {
        if (empty)
        {
            return string.Empty;
        }

        return null!;
    }
}
```

**Expected Behavior**:

```cs
#nullable enable

class Program
{
    public static string Method(bool empty)
    {
        return empty ? string.Empty : null!;
    }
}
```

**Actual Behavior**:

```cs
#nullable enable

class Program
{
    public static string Method(bool empty)
    {
        return empty ? string.Empty : null;
    }
}
```</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38878</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense should not show GetType for span</Title>
    <Description>**Version Used**: master

**Steps to Reproduce**:

```csharp
using System;

public class C {
    public static void M() {
        var span = new int[]{}.AsSpan();
        span.GetType();
    }
}
```

The above fails to compile with the following error:

error CS0029: Cannot implicitly convert type 'System.Span&lt;int&gt;' to 'object'

Therefore it would be best if intellisense didn't suggest the GetType() method. Alternatively span could hide GetType with a working, non boxing implementation.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38877</IssueID>
    <RepoID>1</RepoID>
    <Title>Spelling fixes</Title>
    <Description>
    </Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38876</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0039 (Use local function) should not be reported, if casting would be required</Title>
    <Description>**Version Used**: 
VS2019 16.4 P1

**Steps to Reproduce**:
```csharp
        using System;

        public class Test
        {
            public void Example()
            {
                Func&lt;int, bool&gt; func = _ =&gt; true;

                Do(func);
            }

            public void Do(Func&lt;int, bool&gt; f) { }
            public void Do(Predicate&lt;int&gt; p) { }
        }
```

**Expected/Actual Behavior**:
IDE0039 is suggested, and codefix is available - it introduces local function, and then adds explicit cast to `Func`:
```csharp
static bool func(int _) =&gt; true;

Do((Func&lt;int, bool&gt;)func);
```

It probably makes no sense, right?</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38875</IssueID>
    <RepoID>1</RepoID>
    <Title>OpenSolutionAsync appears to die quietly</Title>
    <Description>**Version Used**: 
netcoreapp2.2 commandline project
VS Code (VS 2017 is installed as well)

    &lt;PackageReference Include="CommandLineParser" Version="2.6.0" /&gt;
    &lt;PackageReference Include="Gremlin.Net" Version="3.4.3" /&gt;
    &lt;PackageReference Include="Microsoft.Build" Version="16.0.461" ExcludeAssets="runtime"/&gt;
    &lt;PackageReference Include="Microsoft.Build.Framework" Version="16.0.461" ExcludeAssets="runtime" /&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis" Version="3.3.1" /&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="3.3.1" /&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="3.3.1" /&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.Workspaces.MSBuild" Version="3.3.1" /&gt;

**Steps to Reproduce**:

    internal class ConsoleProjectLoadProgress : IProgress&lt;ProjectLoadProgress&gt;
    {
        public void Report(ProjectLoadProgress value)
        {
            Console.WriteLine(value);
        }
    }

    internal class SourceAnalysis 
    {
        internal static void OnWorkspaceFailed(object sender, WorkspaceDiagnosticEventArgs args)
        {
            Console.WriteLine(args.Diagnostic.Message);
        }

        internal static async Task ProcessSolution(string path)
        {
            Console.WriteLine($"Loading {path}");
            using (var workspace = MSBuildWorkspace.Create())
            {
                workspace.WorkspaceFailed += OnWorkspaceFailed;

                var progress = new ConsoleProjectLoadProgress();
                var solution = await workspace.OpenSolutionAsync(path, progress);
                Console.WriteLine($"{path} loaded.");

**Expected Behavior**:

Message displayed on screen
Console.WriteLine($"{path} loaded.");

**Actual Behavior**:
It is not hitting the WorkspaceFailed delegate or the progress updater. It just exits with code 0.

I followed steps in https://stackoverflow.com/questions/25070323/roslyn-workspace-opensolutionasync-projects-always-empty to no avail

</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38874</IssueID>
    <RepoID>1</RepoID>
    <Title>#pragma warning disable nullable does not disable warning</Title>
    <Description>**Version Used**:
 VS Mac 8.3.0 - Roslyn 3.3.1-beta3-19454-05
VS Win 16.3

**Steps to Reproduce**:

Posted on the Developer Community forum:

https://developercommunity.visualstudio.com/content/problem/745884/vs-for-mac-does-not-respect-pragma-warning-nullabl.html

1. .NET Standard project with:
```
		&lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
		&lt;Nullable&gt;enable&lt;/Nullable&gt;
```
2. Add a public property to a class in the project.
3. Warnings about a non-nullable property shown in the editor.
4. Add a pragma to disable the check.

```
public class Class1
{
#pragma warning disable nullable
        public string Foo { get; set; }
#pragma warning restore nullable
}
```

**Expected Behavior**:

The documentation indicates that this feature is available and should remove the warning shown in the text editor.

https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references#nullable-contexts

**Actual Behavior**:

The warning about the non-nullable property is still shown in the text editor.

Using `#nullable disable' at the top of the file works.
Using the code CS8618 instead of nullable in the disable pragma also works.

There are a few existing Roslyn issues which are possibly related:

https://github.com/dotnet/roslyn/issues/36550
https://github.com/dotnet/roslyn/issues/35747

Not sure if the documentation is incorrect here.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38873</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix refout internal attribute constructor fatal exception</Title>
    <Description>Fix issue with "FATAL UNHANDLED EXCEPTION" being thrown by Roslyn when using /refout and compiling C# code that uses a custom attribute with an `internal` constructor. The issue below contains more details.

Fixes issue https://github.com/dotnet/roslyn/issues/38444</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38872</IssueID>
    <RepoID>1</RepoID>
    <Title>Can't install VS2019 since: VS_InstallerShell.exe has an invalid certificate</Title>
    <Description>download vs_enterprise__1063459011.1568747910.exe and excute, will generate:
C:\Program Files (x86)\Microsoft Visual Studio\Installer
But then the window is closed and vs2019 isn't installed.
Execute vs_installer.exe will show:
VS_InstallerShell.exe has an invalid certificate. Please ensure the appropriate Microsoft certificates are installed.

I search in internet, so many pepple have this problem.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38871</IssueID>
    <RepoID>1</RepoID>
    <Title>No warning or suggestion when non-nullable reference is compared against null</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio 2019 Community Version 16.3.1
.NET Core Version 3.0.100

In csproj we have this
```xml
&lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
&lt;/PropertyGroup&gt;
```

**Steps to Reproduce**:

1. 
```csharp
public class Foo
{
  public string Name { get; set; } = string.Empty;
}
```
2. 
```csharp
var foo = new Foo();
if (foo.Name == null)
{
  // stuff
}
```

**Expected Behavior**:
`if (foo.Name == null)` would produce warning or suggestion. I would prefer warning.

**Actual Behavior**:
No warning or suggestion from `if (foo.Name == null)`
</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38870</IssueID>
    <RepoID>1</RepoID>
    <Title>Add missing parsing test for TypeOf expr IsNot type</Title>
    <Description>
    </Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38869</IssueID>
    <RepoID>1</RepoID>
    <Title>`Remove unnecessary parentheses` not add an space for `when(++i &gt; 0)` when there is no space between `when` and `++i`</Title>
    <Description>**Version Used**: 
VS16.4.0Preview1/ master(SharpLab)

**Steps to Reproduce**:

1.  Copy the below code.
(Seems SharpLab has something wrong to remove the right parentheses)
```cs
using System;
public class C {
    public void M(int i) {
        switch (i)
        {
            case var x when(++x &gt; 0):
                Console.WriteLine(x);
                break;
            case var x when (++x &gt; 0):
                Console.WriteLine(x);
                break;
        }
        _ = i switch
        {
            var x when(++x &gt; 0) =&gt; 1,
            var x when  (++x &gt; 0) =&gt; 2,
        };
    }
}
```
2. Apply `Remove unnecessary parentheses`

**Expected Behavior**:
An space(` `) should be inserted between `when` and `++x` if there is not one, as it does with `x++`

**Actual Behavior**:
Not space is inserted.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38868</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate direct GetHashCode calls for value types</Title>
    <Description>Closes #31984.

⚠ I updated the PR to reflect my discovery at https://github.com/dotnet/roslyn/issues/31984#issuecomment-535310922.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38867</IssueID>
    <RepoID>1</RepoID>
    <Title>[WIP] Fix compiler package setup for CPS based projects</Title>
    <Description>
    </Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38866</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC: Investigate cases when semantic analysis results shouldn't be cached per document</Title>
    <Description>Tracking TODO in code.

It is possible that the result of Rude Edit semantic analysis of an unchanged document will change if there another document is updated. If we encounter a significant case of this we should consider caching such a result per project, rather then per document. Also, we might be observing an older semantics if the document that is causing the change is out-of-sync --
e.g. the binary was built with an overload C.M(object), but a generator updated class C to also contain C.M(string), which change we have not observed yet. Then call-sites of C.M in a changed document observed by the analysis will be seen as C.M(object) instead of the true C.M(string).</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38865</IssueID>
    <RepoID>1</RepoID>
    <Title>Crash in suppression</Title>
    <Description>Not sure how to repro this.

Got this error:

```

System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. Parameter name: length   at Microsoft.CodeAnalysis.Text.TextSpan..ctor(Int32 start, Int32 length)   at
 Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.PragmaHelpers.NormalizeTriviaOnTokens(AbstractSuppressionCodeFixProvider fixer, Document&amp; document, SuppressionTargetInfo&amp; suppressionTargetInfo)   at
 Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.&lt;GetSuppressionsAsync&gt;d__30.MoveNext() --- End of stack trace from previous location where exception was thrown ---    at
 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at
 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.&lt;GetSuppressionsAsync&gt;d__28.MoveNext() --- End of stack trace from previous location where exception was thrown ---    at
 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at
 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.&lt;PerformFunctionAsync&gt;d__3`1.MoveNext() --- End of stack trace from previous location where exception was thrown ---    at
 Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
--
```</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38864</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38863</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38862</IssueID>
    <RepoID>1</RepoID>
    <Title>Add test for SkipLocalsInit in default interface implementations</Title>
    <Description>Relates to https://github.com/dotnet/roslyn/issues/25780 (test plan for skip locals init)</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38861</IssueID>
    <RepoID>1</RepoID>
    <Title>Spelling fixes</Title>
    <Description>
    </Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>29/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38860</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid crash on concat on structs with ToString member</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38858</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38859</IssueID>
    <RepoID>1</RepoID>
    <Title>Add analyzer driver editorconfig option for end users to configure ge…</Title>
    <Description>…nerated code

Implements https://github.com/dotnet/roslyn/issues/38674#issuecomment-534621058
Fixes #3705</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38858</IssueID>
    <RepoID>1</RepoID>
    <Title>Enum with ToString member crashes in string concatenation</Title>
    <Description>@vertygo reported a crash in [another thread](https://github.com/dotnet/roslyn/issues/38725#issuecomment-534981484).
From investigating the crash dump file that he shared with me, I narrowed down a repro. The issue happens if you have an enum with a `ToString` member and use it in a string concatenation.

```C#
using System;
public class C 
{
    public void M(D c) 
    {
        _ = c + "";
    }
}
public enum D { A = 1, B = 2, ToString = 4 }
```

[sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAmARgFgAoHAZgAJ9KBhS0gb1MteqpwBZKBZACgAilAMYBKBiTaVmkqWwD6lALwjKAakoAiTQG4WbAL6kjZKnAB2AVzCUhjSgEFllAkkoAhZ3jcAVAPYAyjAIaOYA5s7cBkA=)</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38857</IssueID>
    <RepoID>1</RepoID>
    <Title>Crash in add-import</Title>
    <Description>Getting this callstack that is bringing down add-import:

```
System.InvalidOperationException : This instance must be flushed before being reinitialized.
   at Nerdbank.Streams.BufferTextWriter.Initialize(IBufferWriter`1 bufferWriter,Encoding encoding)
   at StreamJsonRpc.JsonMessageFormatter.WriteJToken(IBufferWriter`1 contentBuffer,JToken json)
   at StreamJsonRpc.JsonMessageFormatter.Serialize(IBufferWriter`1 contentBuffer,JsonRpcMessage message)
   at StreamJsonRpc.HeaderDelimitedMessageHandler.Write(JsonRpcMessage content,CancellationToken cancellationToken)
   at StreamJsonRpc.PipeMessageHandler.WriteCoreAsync(JsonRpcMessage content,CancellationToken cancellationToken)
   at async StreamJsonRpc.MessageHandlerBase.WriteAsync(&lt;Unknown Parameters&gt;)
   at async StreamJsonRpc.JsonRpc.TransmitAsync(&lt;Unknown Parameters&gt;)
   at System.Threading.Tasks.ValueTask.ThrowIfCompletedUnsuccessfully()
   at async StreamJsonRpc.JsonRpc.InvokeCoreAsync[TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.ServiceHub.Framework.RemoteServiceBroker.GetPipeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.ServiceHub.Client.HubClient.GetPipeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.ServiceHub.Client.HubClient.RequestServiceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.RetryRemoteCallAsync[TException,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.RequestServiceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.ConnectionManager.TryCreateNewConnectionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.TryCreateSessionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.TryCreateCodeAnalysisSessionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.TryRunCodeAnalysisRemoteAsync[T](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.GetFixesAsync[TSimpleNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportFeatureService`1.GetFixesForDiagnosticsAsync[TSimpleNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.RegisterCodeFixesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.CodeFixService.GetCodeFixesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
```

Something is up with OOP.</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38856</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/local-function-attributes</Title>
    <Description>
This is an automatically generated pull request from master into features/local-function-attributes.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/local-function-attributes
git reset --hard upstream/features/local-function-attributes
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/local-function-attributes --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38855</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide signature help for collection initializers</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38850

i recommend viewing with whitespace diffs off.

Looks like this:

![image](https://user-images.githubusercontent.com/4564579/65630637-acda9d80-df8a-11e9-93c8-92c9e2591705.png)

Todo:

- [x] VB support
- [x] Tests</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38854</IssueID>
    <RepoID>1</RepoID>
    <Title>show Potential Fixes</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/736875/show-potential-fixes-1.html)._

---
unable to see show potential fixes option if the list is huge (refer attachment for better understanding)

---
### Original Comments

#### Visual Studio Feedback System on 9/17/2019, 11:34 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 9/19/2019, 03:00 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38853</IssueID>
    <RepoID>1</RepoID>
    <Title>x == default is valid object equality for reference types</Title>
    <Description>Since we've received significant feedback on part of the compat break we took in 16.4p1, we're making a refinement to reduce the negative impact.
`t == default` for unconstrained types will remain an error (introduced in 16.4p1), but `x == default` will be re-allowed for reference types (could bind as object equality).

Fixes https://github.com/dotnet/roslyn/issues/38643
Relates to https://github.com/dotnet/roslyn/pull/37596 (16.4p1 breaking changes)</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38852</IssueID>
    <RepoID>1</RepoID>
    <Title>Falsy compiler warning: "Not exhaustive check" [CS8509]</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/744153/falsy-compiler-warning-not-exhaustive-check-cs8509.html)._

---
&lt;p&gt;If we use switch expression like this:&lt;/p&gt;
&lt;pre&gt;something switch {
    { } =&amp;gt; &lt;span class=hljs-number&gt;1,&lt;/span&gt;
    &lt;span class=hljs-keyword&gt;null&lt;/span&gt; =&amp;gt; &lt;span class=hljs-number&gt;2&lt;/span&gt;
}
&lt;/pre&gt;
&lt;p&gt;Complier will complain, that this switch is not exhaustive, because it does not include &lt;em&gt;discard arm&lt;/em&gt; (default).&lt;br&gt;
Since this is not true, then the warning should &lt;strong&gt;not&lt;/strong&gt; be reported here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; it is not even possible to somehow add the discard branch (in any place) to satify the compiler, becuase that would lead to the compilation error:&lt;br&gt;
Error CS8510: The pattern has already been handled by a previous arm of the switch expression.&lt;/p&gt;

---
### Original Comments

#### Visual Studio Feedback System on 9/24/2019, 01:08 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38851</IssueID>
    <RepoID>1</RepoID>
    <Title>[release/dev16.3-vs-deps] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:ef0a7d9c-37a9-4bca-b183-08d73687fe54)
## From https://github.com/dotnet/arcade
- **Build**: 20190924.3
- **Date Produced**: 9/24/2019 6:16 PM
- **Commit**: 0e9ffd6464aff37aef2dc41dc2162d258f266e32
- **Branch**: refs/heads/release/3.x
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19474.3

[marker]: &lt;&gt; (End:ef0a7d9c-37a9-4bca-b183-08d73687fe54)



</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38850</IssueID>
    <RepoID>1</RepoID>
    <Title>Signature help in collection inializers</Title>
    <Description>Collection initializers are just a syntactic sugar for calling an `Add()` method. When calling the `Add()` method explicitly, I get signature help:

&lt;img width="487" alt="ci1" src="https://user-images.githubusercontent.com/5169960/65613389-cc61ce00-df6a-11e9-949d-4f60050a5537.png"&gt;

However, when using the collection initializer syntax, I don't:

&lt;img width="237" alt="ci2" src="https://user-images.githubusercontent.com/5169960/65613387-cc61ce00-df6a-11e9-90b4-f904ed4c5b3e.png"&gt;

**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.4.0 Preview 2.0 [29322.22.master]
VisualStudio.16.IntPreview/16.4.0-pre.2.0+29322.22.master</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38849</IssueID>
    <RepoID>1</RepoID>
    <Title>Update IOperationTests_IDelegateCreationExpression.vb</Title>
    <Description>Spelling fix</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38848</IssueID>
    <RepoID>1</RepoID>
    <Title>Update TypeImportCompletionItem.cs</Title>
    <Description>Spelling fix</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38847</IssueID>
    <RepoID>1</RepoID>
    <Title>Update DecisionDagBuilder.cs</Title>
    <Description>Spelling fix</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38846</IssueID>
    <RepoID>1</RepoID>
    <Title>Update SyntaxGeneratorTests.cs</Title>
    <Description>Spelling fix</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38845</IssueID>
    <RepoID>1</RepoID>
    <Title>Update AbstractAddAccessibilityModifiersCodeFixProvider.cs</Title>
    <Description>Spelling fix</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38844</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect analysis: IDE0059 Unnecessary assignment of a value</Title>
    <Description>**Version Used**: 16.4

**Steps to Reproduce**:

1. Open up SignService.sln from https://github.com/dotnet/SignService
2. See messages

**Expected Behavior**:
No false analysis


**Actual Behavior**:
```
Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0059	Unnecessary assignment of a value to 'ppKey'	SignService	D:\dev\SignService\src\SignService\Utils\DistinguishedNameParser.cs	23	Active
Message	IDE0059	Unnecessary assignment of a value to 'ppVal'	SignService	D:\dev\SignService\src\SignService\Utils\DistinguishedNameParser.cs	23	Active
```
Those out variables are used in a while loop and then passed into `Marshal.PtrToStringUni`.

https://github.com/dotnet/SignService/blob/aa17184f886b647042c0d6d8323e2d21943e3fb5/src/SignService/Utils/DistinguishedNameParser.cs#L23-L30

The suggestion to use a discard is wrong.
</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38843</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38842</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0063 code fixer deletes indents</Title>
    <Description>**Version Used**: Visual Studio 2019 Version 16.3.0

**Steps to Reproduce**:
1. Set csproj's `LangVersion` to `latest`
2. Write a following code:
```cs
using System;
using System.IO;

class C
{
    static void Main()
    {
        // IDE0063 'using' statement can be simplified
        using (var stream = new MemoryStream())
        {
            _ = new Action(
                    () =&gt; { }
                );
        }
    }
}

```
3. Apply `Use simple 'using' statement`

**Expected Behavior**:
Code fixer keeps indents like this:
```cs
using System;
using System.IO;

class C
{
    static void Main()
    {
        // IDE0063 'using' statement can be simplified
        using var stream = new MemoryStream();
        _ = new Action(
                () =&gt; { }
            );
    }
}
```

**Actual Behavior**:
Code fixer deletes indents:
```cs
using System;
using System.IO;

class C
{
    static void Main()
    {
        // IDE0063 'using' statement can be simplified
        using var stream = new MemoryStream();
        _ = new Action(
() =&gt; { }
);
    }
}
```</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38841</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix crash that would happen when renaming in mixed f#/c# project.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/28474</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38840</IssueID>
    <RepoID>1</RepoID>
    <Title>Test output contains hundreds of useless messages.</Title>
    <Description>Messages are of the form:

```
[9/24/2019 5:42:57.705 PM Informational] Updating view 437433286
[9/24/2019 5:42:57.710 PM Informational] Updating view 437433286
[9/24/2019 5:42:58.251 PM Informational] [xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1-pre.build.4059 (32-bit Desktop .NET 4.0.30319.42000)
[9/24/2019 5:42:58.783 PM Informational] [xUnit.net 00:00:00.53]   Starting:    Microsoft.CodeAnalysis.EditorFeatures2.UnitTests
[9/24/2019 5:43:00.080 PM Informational] Trying to update view 437433286
[9/24/2019 5:43:00.080 PM Informational] Updating view 437433286
[9/24/2019 5:43:00.135 PM Informational] Updating view 437433286
```

Looks like someone may have left in unintentional debug spew, causing all these pointless "updating view" messages to go into the output log.</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38839</IssueID>
    <RepoID>1</RepoID>
    <Title>Update required version of VS in Building doc</Title>
    <Description>Now that we've merged 16.3-vs-deps back, we should update the required version of VS.</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38838</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38837</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38836</IssueID>
    <RepoID>1</RepoID>
    <Title>`is object` is not considered a "pure" null test</Title>
    <Description>```C#

using System;
#nullable enable
public class C {
    public void M(String s) {
        if (s is object) s.ToString();
        
        s.ToCharArray(); // no warning here?
    }
}
```</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38835</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix an RPS regression where we are eagerly loading all assemblies wit…</Title>
    <Description>…h ITableColumnDefinition implementations

Recent change #37802 to enable new containing type and containing member colums removed the perf optimization done in #36562 to ensure that we do not eagerly load all assemblies that contain ITableColumnDefinition implementations. This caused an RPS regression, which is fixed by this PR.</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38834</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.4 preview1-vs-deps into dev16.4 preview1</Title>
    <Description>Per @jaredpar, our policy for codeflow is the following:
	
1. Developers should always be able to build master in dotnet/roslyn with a publicly available version of VS. 
2. The version of VS should preferably be an RTM one but can be a preview if circumstances warrant it.

Now that 16.4 Preview 1 is out, I'd like to get vs-deps flows back so all our changes related to completion are all in the same branch, which will make it easier for us to make further code change in this area.

@dotnet/roslyn-infrastructure Please let me know if it's OK to do this, otherwise I will probably need to cherry pick those changes manually.</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38833</IssueID>
    <RepoID>1</RepoID>
    <Title>Pass the actual code action span to the server when calculating code …</Title>
    <Description>…actions.

Previously, liveshare was computing the diagnostics on the code action location and passing the diagnostic's span to the server.  This caused code actions that expect a caret position to never work if there was another diagnostic at the same location (e.g. move type to file, I've fixed that in https://github.com/dotnet/roslyn/pull/38787).

Either way, we shouldn't be modifying the user specified span.</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38832</IssueID>
    <RepoID>1</RepoID>
    <Title>Map string offsets to columns to ensure proper tab indentation.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38819</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38831</IssueID>
    <RepoID>1</RepoID>
    <Title>Change icon for target type completion filter</Title>
    <Description>Fix #37531 

![image](https://user-images.githubusercontent.com/788783/65548648-ae478f80-ded0-11e9-90b9-083cd4792087.png)
</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38830</IssueID>
    <RepoID>1</RepoID>
    <Title>Test plan for "function pointers"</Title>
    <Description>- [Proposal](https://github.com/dotnet/csharplang/blob/master/proposals/function-pointers.md)
- [Championed issue](https://github.com/dotnet/csharplang/issues/191)

- [ ] Specification checked in to `csharplang`.
- [ ] Tests based on specification...
</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38829</IssueID>
    <RepoID>1</RepoID>
    <Title>Update AnalysisContextInfoTests.cs</Title>
    <Description>Spelling fix</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38828</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Binder_Lookup.vb</Title>
    <Description>Spelling fix</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38827</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for SuppressMessageAttribute.MessageId </Title>
    <Description>There is no option to avoid consequent violation to suppressed rule applied to method. To do so analyzers should support [_MessageId_](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.suppressmessageattribute.messageid?view=netframework-4.8#System_Diagnostics_CodeAnalysis_SuppressMessageAttribute_MessageId) property.

    [SuppressMessage("SomeCat", "SomeRule")]
    void SomeMethod()
    {
     // line violating SomeRule
    } 

Relevant articles:
1. SuppressMessageAttribute Class/[Examples](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.suppressmessageattribute?view=netframework-4.8#examples)
2. Suppress code analysis warnings/[Suppress selective violations within a method body](https://docs.microsoft.com/en-us/visualstudio/code-quality/in-source-suppression-overview?view=vs-2019#suppress-selective-violations-within-a-method-body)

Further more if _MessageId_ is specified, _SuppressMessageAttribute_ is ignored, i.e. error is reported anyway (by _Managed Binary Analysis_).

`[SuppressMessage("SomeCat", "SomeRule, MessageId = "someVar")]`

_Pragma warning disable_ is not symbol based. Since using statements denotes code blocks, pragma can disable consequent violations also.</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38826</IssueID>
    <RepoID>1</RepoID>
    <Title>Update CompilerNuGetCheckerUtil.cs</Title>
    <Description>Spelling fixes</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38825</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix server capabilities initialization and remove previous experiment…</Title>
    <Description>… iteration.

Since we're going to test with the new tagger, remove the previous experiment implementation.</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38824</IssueID>
    <RepoID>1</RepoID>
    <Title>Update README.md</Title>
    <Description>Spelling fixes</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38823</IssueID>
    <RepoID>1</RepoID>
    <Title>Update utils.ps1</Title>
    <Description>Spelling fixes</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38822</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE1008 when constructor called without optional parameters inside incomplete lambda</Title>
    <Description>**Version Used**: .NET Core 3.0.100 (stable), Visual Studio Community 2019 version 16.3.0 (stable)

``` csharp
using System;

namespace Test
{
    public class InstanceType
    {
        public InstanceType(object? a = null) { }
    }

    public static class Example
    {
        public static void Test()
        {
            Action lambda = () =&gt;
            {
                var _ = new InstanceType();  // IDE1008: 'InstanceType' does not contain a constructor that takes that many arguments
                var _ = 0  // CS1002: ; expected
            };
        }
    }
}
```

There are two types of errors displayed in this code:

* CS1002: This is expected.  My cursor is at the end of this line; I'm currently writing the remainder of the lambda.  I haven't completed the line yet.
* IDE1008: This is unexpected even with my code in an incomplete state.

For this issue to occur, the following conditions have to be met:

* The constructor definition must have at least one optional parameter.
* The constructor call must omit at least one optional parameter.
* The constructor call must be inside a statement lambda.
* There must be an unterminated statement inside the lambda.

This is problematic in some scenarios.  For example, say I'm in the process of writing a lambda:

``` csharp
Action lambda = () =&gt;
{
    var a = new InstanceType();

    // ...

    a.  // My cursor is here.
};
```

I've written a line to instantiate an `InstanceType` and store it in `a`.  I want to do something with `a`, so I type `a.` expecting to see autocompletion options.  The autocompletion list will appear, but I'll also receive an error on my constructor call, which brings into question the validity of the autocompletion results--did I make a mistake that will cause `a` to be a different type from what I intended?  So I go back to fix the error before completing the line on which I'm currently working--but the error isn't real.

Now, I understand that this is incomplete code, so errors are expected to appear.  However, Visual Studio normally seems to be quite intelligent about handling incomplete code; for example, this problem doesn't occur in normal method bodies, only statement lambdas.  The errors it does display typically make sense, such as when non-void lambda doesn't have a return statement yet.</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38821</IssueID>
    <RepoID>1</RepoID>
    <Title>Test plan for "native ints"</Title>
    <Description>[Championed issue](https://github.com/dotnet/csharplang/issues/435)

- [ ] Specification checked in to `csharplang`.
</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38820</IssueID>
    <RepoID>1</RepoID>
    <Title>Test plan for "lambda discard parameters"</Title>
    <Description>[Championed issue](https://github.com/dotnet/csharplang/issues/111)

- [ ] Specification checked in to `csharplang` (PR https://github.com/dotnet/csharplang/pull/2901)
- [ ] `(_, _) =&gt; 0` with LangVersion 8 (error) (see `DiscardParameters_CSharp8`)
- [ ] `(_, _) =&gt; 0` with LangVersion Preview (ok) (see `DiscardParameters`)
- [ ] also works with explicit types `(int _, string _) =&gt; 0` (see `DiscardParameters_WithTypes`)
- [ ] also works in delegate syntax `delegate(int _, string _) { return 0; }` (see `DiscardParameters_InDelegates`)
- [ ] discard parameters in delegates do not allow attributes (see `DiscardParameters_InDelegates_WithAttribute`)
- [ ] discard parameters are not in scope and cannot be read from or written to (see `DiscardParameters_NotInScope`)
- [ ] that a single `_` is not a discard parameter (ie. is in scope and can be read from) (see `DiscardParameters_NotADiscardWhenSingleUnderscore`)
- [ ] Verify semantic model on discard parameters (see `DiscardParameters_NotInScope`)
    - [ ] parameter symbol has `IsDiscard` set to `true`
    - [ ] parameter symbol has `_` as name
    - [ ] parameter symbol has expected type and nullability
- [ ] variable named `_` allowed inside a lambda with discard parameters (see ` DiscardParameters`)
- [ ] discard parameters with `ref`, `in` and `out` parameters (see open question below) (see `DiscardParameters_RefAndOut`)
- [ ] multiple `_` parameters on local function (still error) (see `DiscardParameters_OnLocalFunction`)
- [ ] unicode underscore `\u005f` doesn't cound as discard (same as in other contexts) (see `DiscardParameters_UnicodeUnderscore`)
- [ ] `@_` is not a discard (same as in other contexts) (see `DiscardParameters_EscapedUnderscore`)
- [ ] test lambda in expression tree (disallow) (see `DiscardParameters_ExpressionTreeNotAllowed`)

Questions raised on team review today:
- [ ] LDM: confirm whether we want the discards to be in scope or block visibility in some way or disallow locals named `_` within a scope where discard parameters exist. Some scenarios:
    - `int _ = 1; Func&lt;int, int, int&gt; x = (_, _) =&gt; _++; /* this currently binding to the local declared outside the lambda? */`
    - `Func&lt;int, int, int&gt; x = (_, _) =&gt; { int _ = 1; return _; } /* this is currently allowed */`
- [ ] test `nameof(_)` (see `DiscardParameters_NotInScope_Nameof`)
- [ ] ~~verify `GetAttributes()` if we have a new symbol~~ (latest implementation removed the new parameter symbol)
- [ ] confirm desired debugging and EE behavior. Are the values visible? F# doesn't show discards while debugging, but we should try if we can.
- [ ] allow expression trees unless good reason not to (see `DiscardParameters`)
- [ ] test IDE rename
- [ ] test `GetDeclaredSymbol` (see `DiscardParameters_NotInScope`)
- [ ] test FindAllRefs
- [ ] LDM: should we extend the feature to local functions? (see lambda-to-local-function refactoring)

## Productivity
- [ ] converting from lambda with discards to local function (currently produces code with invalid parameters)
- [ ] no IDE diagnostic reporting that discard parameters are unused
- [ ] QuickInfo shows lambda parameter discards as `(discard) int _`
- [ ] IDE doesn't use a special classification for discards (same as in other contexts)

## Open issues for LDM:
- [ ] Should we produce a distinct error for `out` or `ref` discard?</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38819</IssueID>
    <RepoID>1</RepoID>
    <Title>Code formatting breaks briefly after code is fixed</Title>
    <Description>**Version Used**: 
Roslyn (Language Service)
3.3.1-beta3-19454-05+3b423bd305daf81076d4d7b105101361c2

**Steps to Reproduce**:

1. Put a C# file into a non-compilable state briefly and fix it. ie, a simple if block condition
2. Hit enter. The cursor isn't aligned to the expected location

**Expected Behavior**:
Correct indentation

**Actual Behavior**:
Only indents once


Tabs are used for all indenting in this file.

![incorrect_formatting_csharp](https://user-images.githubusercontent.com/49821/65534575-ff4d8880-debc-11e9-8fa4-088cd82141f2.gif)
</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38818</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Language Feature Status</Title>
    <Description>@jaredpar @gafter Let me know if we need more updates. 
@jaredpar We'll need to start thinking about assigning buddies.</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38817</IssueID>
    <RepoID>1</RepoID>
    <Title>roslyn analyzers (to check xml documentation) reporting error on build but later removed on live analysis</Title>
    <Description>**Version Used**: 2.9.2

**Steps to Reproduce**:
we have an analyzer to check XML comments on methods. While building the solution, Analyzer reports errors wrongly. it shows an error even if there are XML comments. These errors are later removed upon opening the file -

```
private static void AnalyzeMethodsToCheckXmlComments(SyntaxNodeAnalysisContext syntaxNodeAnalysisContext)
        {

           var a= syntaxNodeAnalysisContext.Node.SyntaxTree?.Options.DocumentationMode
                != DocumentationMode.None;
            if (a) { 
                var node = syntaxNodeAnalysisContext.Node as MethodDeclarationSyntax;

                if (node != null &amp;&amp; !node.Modifiers.Any(SyntaxKind.PublicKeyword))
                    return;

                var xmlTrivia = node?.GetLeadingTrivia()
                    .Select(i =&gt; i.GetStructure())
                    .OfType&lt;DocumentationCommentTriviaSyntax&gt;()
                    .FirstOrDefault();

                if (xmlTrivia == null)
                {
                    syntaxNodeAnalysisContext.ReportDiagnostic(
                        Diagnostic.Create(Rule, node?.Identifier.GetLocation(), "Missing Xml Comments."));
                    return;
                }

                var hasSummary = xmlTrivia.ChildNodes()
                    .OfType&lt;XmlElementSyntax&gt;()
                    .Any(i =&gt; i.StartTag.Name.ToString().Equals("summary"));

                if (!hasSummary)
                {
                    syntaxNodeAnalysisContext.ReportDiagnostic(
                        Diagnostic.Create(Rule, node.Identifier.GetLocation(), "Missing Summary in Xml Comments."));
                    return;
                }

                var allParamNameAttributes = xmlTrivia.ChildNodes()
                    .OfType&lt;XmlElementSyntax&gt;()
                    .Where(i =&gt; i.StartTag.Name.ToString().Equals("param"))
                    .SelectMany(i =&gt; i.StartTag.Attributes.OfType&lt;XmlNameAttributeSyntax&gt;()).ToList();

                foreach (var param in node.ParameterList.Parameters)
                {
                    var existsInXmlTrivia = allParamNameAttributes
                        .Any(i =&gt; i.Identifier.ToString().Equals(param.Identifier.Text));

                    if (existsInXmlTrivia)
                    {
                        continue;
                    }
                    syntaxNodeAnalysisContext.ReportDiagnostic(
                        Diagnostic.Create(ParameterRule, param.GetLocation(), "Parameter Not Documented in Xml Comments."));
                    return;
                }
            }
        }
```

**Expected Behavior**:
Errors should not show up on the build
**Actual Behavior**:
 Errors show up on build but removed when the file is opened</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38816</IssueID>
    <RepoID>1</RepoID>
    <Title>NetCore-CSharpCompilation does not resolve systemtypes like enum in referenced assemblies</Title>
    <Description>**Version Used**: 3.3.1 and many lower versions with NetCore3.0

**Steps to Reproduce**: ExampleCode:
```csharp
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharpCompilationTest
{
    class Program
    {
        const string document = @"
namespace ProjectWithAssembly
{
    public enum TestEnum
    {
        Hello, World
    }

}
";
        static void Main(string[] args)
        {
            var assemblies = new[] { typeof(object).Assembly.Location, typeof(TestEnum).Assembly.Location }.Select(path=&gt;MetadataReference.CreateFromFile(path)).ToList();
            var options = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);
            var complilation = CSharpCompilation.Create("ProjectWithAssembly", new SyntaxTree[] { SyntaxFactory.ParseSyntaxTree(document) }, assemblies, options);
            var enumType = complilation.GetTypeByMetadataName("CSharpCompilationTest.TestEnum");
            var alsoEnumType = complilation.GetTypeByMetadataName("ProjectWithAssembly.TestEnum");

            Console.WriteLine($"{enumType}:\t{enumType.TypeKind}\r\n{alsoEnumType}:\t{alsoEnumType.TypeKind}");
        }
    }

    public enum TestEnum
    {
        Hello, World
    }
}
```

**Expected Behavior**: Both TypeSymbols are `TypeKind.Enum`.

**Actual Behavior**: The TypeSymbol in the referenced assembly is `TypeKind.Class`. Seems like it can not link from the assembly to the CoreLib since the baseclass is ErrorType. This does work in netframework and maybe some earlier versions of net core.

I discovered this while investigating why docfx can not generate documentation correctly for netCore. [For Reference](https://github.com/dotnet/docfx/issues/4952).</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38815</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38814</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38813</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38812</IssueID>
    <RepoID>1</RepoID>
    <Title>C#8 compiler reports CS8620 for IEnumerable&lt;T?&gt; after filtering for not null</Title>
    <Description>**Version Used**: 
dotnet-sdk-3.0.100

**Steps to Reproduce**:
enable nullable
```csharp
public static void Run()
{
    var enumerable = Enumerable.Range(1, 10).Select(i =&gt; i % 2 == 0 ? null : i.ToString());
    var notNulls = enumerable.Where(item =&gt; item != null);
    Check(notNulls);
}
private static void Check(IEnumerable&lt;string&gt; notNull) { }
```

**Expected Behavior**:
no warning

**Actual Behavior**:
Warning CS8620 Argument of type 'IEnumerable&lt;string?&gt;' cannot be used for parameter 'notNull' of type 'IEnumerable&lt;string&gt;' in 'void Check(IEnumerable&lt;string&gt; notNull)' due to differences in the nullability of reference types.

my current workaround is
```csharp
    var notNulls = enumerable.Where(item =&gt; item != null).Select(item =&gt; item!);
```</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38811</IssueID>
    <RepoID>1</RepoID>
    <Title>support local functions inside static in signature help</Title>
    <Description>Fixes signature help part of https://github.com/dotnet/roslyn/issues/38074

Thank you for discussions, @svick , @CyrusNajmabadi , @miloush and @333fred !

Tests were copied from https://github.com/dotnet/roslyn/commit/62918fc39895da53eb4ce76b4a83a949746220e8
It is weird but I could not cherry-pick it.</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38810</IssueID>
    <RepoID>1</RepoID>
    <Title>Support SkipLocalsInit on event accessors</Title>
    <Description>Relates to https://github.com/dotnet/roslyn/issues/25780 (test plan for skip locals init)</Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38809</IssueID>
    <RepoID>1</RepoID>
    <Title>Use new Span/Memory APIs on System.Collections.Immutable</Title>
    <Description>
    </Description>
    <CreatedDate>24/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38808</IssueID>
    <RepoID>1</RepoID>
    <Title>Parse attributes on local function declarations</Title>
    <Description>Related to #38801

Attributes on local function parameters or type parameters are already parsed as expected but they simply give errors. This PR adds an AttributeLists property to LocalFunctionStatementSyntax and parses the attributes into that property.</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38807</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38806</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to release/dev16.3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-release/dev16.3-vs-deps
git reset --hard upstream/release/dev16.3-vs-deps
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38805</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into release/dev16.4-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38804</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 into release/dev16.4-preview1</Title>
    <Description>I'm planning to make another merge from dev16.4-preview1-vs-deps to dev16.4-preview, before flowing dev16.4 to master. Not sure if this is how we handled the code flow like this in the past. 

@dotnet/roslyn-infrastructure @jaredpar @agocke @JoeRobich </Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38803</IssueID>
    <RepoID>1</RepoID>
    <Title>Add options to configure background analysis in the IDE</Title>
    <Description>1. Option to **enable power save mode**: Fixes #38429. This option turns off all the background analysis and also turns off remote host (RoslynCodeAnalysis service hub process) for C# and VB projects to reduce memory consumption in this mode. This option turns off most of the background analyses that are executed by the solution crawler. We still execute the bare minimum analysis for a reasonable editing experience: compiler analyzer to get compiler warnings/errors and also execute the add usings and remove unncessary usings analyzers. We can tune this required analysis set in future, as required.

2. Option to **disable live analyzer execution**: There have been lot of requests in past to give users a single knob to turn on/off execution of all Roslyn analyzers in the IDE (third party analyzers + IDE code style analyzers which are enabled by default).

I have also hooked up the low virtual memory listener which detects low VM and used to turn off just the full solution analysis to now instead turn on a forced power save mode for the current VS session (which also turns off full solution analysis, along with other background analyses).

**TODOs:**
1. More manual testing
2. Get design consensus on the preferred option(s):
   1. 2 options (current PR): Options to configure Power save mode and Analyzer execution
   2. Single option to configure Power save mode only
   3. Multiple options: One top level option to configure Power save mode, with lot of individual options to control individual background analyses. This is less preferable due to overload of options and information for users.</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38802</IssueID>
    <RepoID>1</RepoID>
    <Title>Move optimization around use of Nullable type in Boolean Expressions into LocalRewriter and eliminate invalid optimization.</Title>
    <Description>Fixes #38305.

The goal of optimization is to eliminate the need to deal with instances of Nullable(Of Boolean) type as early as possible, and, as a result, simplify evaluation of built-in OrElse/AndAlso operators by eliminating the need to use three-valued Boolean logic. The optimization is possible because when an entire Boolean Expression is evaluated to Null, that has the same effect as if result of evaluation was False. However, we do want to preserve the original order of evaluation, according to language rules.</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38801</IssueID>
    <RepoID>1</RepoID>
    <Title>Test plan for "local function attributes"</Title>
    <Description>Championed issue: dotnet/csharplang#1888

- [ ] Specification checked in to `csharplang`.
- [ ] attribute on declaration
- [ ] attribute on return type
- [ ] attribute on type parameters
- [ ] attribute on parameters
- [ ] interaction with potentially ambiguous syntax?
- [ ] speculative semantic model #24135
- [ ] expected diagnostics when binding a local function statement in speculative semantic model
- [ ] Scrub references (skipped tests and such) referencing this issue
- [ ] test `Obsolete` attribute (and related), or disallow?
- [ ] test `Conditional` attribute
- [ ] test various nullability attributes
- [ ] test `CancellationToken` attribute on parameter of async-iterator local function
- [ ] MethodImplAttribute
- [ ] DllImportAttribute
- [ ] `static extern` local functions
- [ ] local functions with no body
- [ ] ExcludeFromCodeCoverageAttribute
- [ ] test restricted attributes such as IsReadOnlyAttribute, IsUnmanaged, ExtensionAttribute, etc.
- [ ] ...</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38800</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.3-vs-deps to dev16.3</Title>
    <Description>@dotnet/roslyn-infrastructure</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38799</IssueID>
    <RepoID>1</RepoID>
    <Title>Add telemetry for target type completion</Title>
    <Description>#38096
Want to monitor the perf and make sure it doesn't regress when rolling out to broader audience.

@dotnet/roslyn-ide </Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38798</IssueID>
    <RepoID>1</RepoID>
    <Title>Indent characters change from tabs to spaces at line break</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/742548/indent-characters-change-from-tabs-to-spaces-at-li.html)._

---
[regression] [worked-in:16.3 preview 1]
my settings
indenting: Smart
Tab size: 4
Indent size: 4
Keep tabs: true

The sample code is as follows.

```cs
namespace Sample
{
	public class Hoge
	{
		public int Test()
		{
			int x = 1;
			return x;
		}
	}
}
```

If you place a cursor at the beginning of &amp;quot;int x&amp;quot; and type enter key, the indent of the new line is incorrect.
There should be 3 tabs but 3 spaces as shown in the code below.

```cs
namespace Sample
{
	public class Hoge
	{
		public int Test()
		{
			
   int x = 1;
			return x;
		}
	}
}
```

In VS2019 (not preview) and previous VS2019 preview, the line was broken correctly like the following code.

```cs
namespace Sample
{
	public class Hoge
	{
		public int Test()
		{

			int x = 1;
			return x;
		}
	}
}
```

---
### Original Comments

#### Visual Studio Feedback System on 9/23/2019, 02:37 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38797</IssueID>
    <RepoID>1</RepoID>
    <Title>Documentation comment auto completion should not generate &lt;returns&gt; for indexers</Title>
    <Description>**Version Used**: Visual Studio 2019 Version 16.3

**Steps to Reproduce**:

```cs
public class Program
{
    public object this[int index]
    {
        get =&gt; throw new System.NotImplementedException();
        set =&gt; throw new System.NotImplementedException();
    }
}
```

**Expected Behavior**:

```cs
public class Program
{
    /// &lt;summary&gt;
    /// 
    /// &lt;/summary&gt;
    /// &lt;param name="index"&gt;&lt;/param&gt;
    /// &lt;value&gt;&lt;/value&gt;
    public object this[int index]
    {
        get =&gt; throw new System.NotImplementedException();
        set =&gt; throw new System.NotImplementedException();
    }
}
```

-or-

```cs
public class Program
{
    /// &lt;summary&gt;
    /// 
    /// &lt;/summary&gt;
    /// &lt;param name="index"&gt;&lt;/param&gt;
    public object this[int index]
    {
        get =&gt; throw new System.NotImplementedException();
        set =&gt; throw new System.NotImplementedException();
    }
}
```

**Actual Behavior**:

```cs
public class Program
{
    /// &lt;summary&gt;
    /// 
    /// &lt;/summary&gt;
    /// &lt;param name="index"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public object this[int index]
    {
        get =&gt; throw new System.NotImplementedException();
        set =&gt; throw new System.NotImplementedException();
    }
}
```</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38796</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0067 False Positive</Title>
    <Description>**Version Used**: VS2019 16.2.5 

**Steps to Reproduce**:
```csharp
        public override Stream ToStream&lt;T&gt;(T input)
        {
            if (input == null) throw new ArgumentNullException(nameof(input));

#pragma warning disable IDE0067 // Dispose objects before losing scope
            // This method creates a new stream.  It's pointless to return a disposed object.
            return ToStreamAsync(input).GetAwaiter().GetResult();
#pragma warning restore IDE0067 // Dispose objects before losing scope
        }
```

**Expected Behavior**:
Disposed state of the return value should be ignored.  It's never appropriate for a return value to be disposed when returned.  Particularly if the instance is created as new inside the method and then used as a return value.

**Actual Behavior**:
Get IDE0067 warning saying the object should be disposed before losing scope.
</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38795</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability-related bug producing BadImageFormatException</Title>
    <Description>While doing some NRE work on Npgsql, I came across a subtle bug that triggers a BadImageFormatException in runtime. Following is a minimal repro, using dotnet SDK 3.0.100-rc1-014190:

```c#
static class Program
{
    static void Main()
    {
        var x = typeof(Bar&lt;&gt;);
        Console.WriteLine(x);
    }
}

public class Bar&lt;T&gt;
{
    public override bool Equals(object? o) =&gt; o is Bar&lt;T&gt; range;
    public override int GetHashCode() =&gt; 0;
}
```

Disabling nullability specifically around the Equals method makes the error go away.

The repro is available in https://github.com/roji/CompilerNullabilityBug.</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38794</IssueID>
    <RepoID>1</RepoID>
    <Title>Quick info cannot show type for linq group variable declaration</Title>
    <Description>**Version Used**: 
VS 16.3 Preview 4

&lt;img width="355" alt="image" src="https://user-images.githubusercontent.com/5644458/65390432-5fdfa700-dd91-11e9-9d33-aa3b928a0e23.png"&gt;
&lt;img width="334" alt="image" src="https://user-images.githubusercontent.com/5644458/65390436-70901d00-dd91-11e9-968b-fdb90221027b.png"&gt;
</Description>
    <CreatedDate>22/09/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38793</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyzer driver perf optimization</Title>
    <Description>This change optimizes the analyzer driver to avoid redundant analyzer callbacks in presence of source file based suppressions to improve the overall performance for analyzer execution. Current editorconfig design allows user to configure diagnostic severities for specific source file(s). If user has suppressed all diagnostics that an analyzer can report on a specific file then executing the analyzer on such a file is redundant and can be avoided by the driver, except for the below cases:

1. Non-configurable analyzers: If an analyzer reports any non-configurable diagnostic, skipping any callbacks for this analyzer is not possible. User configurations will anyway not be respected and reported diagnostics cannot be suppressed.
2. Stateful analyzers (Compilation Start/End analyzers and Symbol Start/End analyzers): These analyzers have an analysis scope that is broader than a single file. They are handled separately based on whether or not they have registered to analyzer generate code:
   1. Registered to analyze generated code: Skipping any analyzer callbacks for these analyzers is not possible, it will break the analyzers as they need to analyze all parts of the symbol/compilation to function properly. See analyzer [API](http://source.roslyn.io/#q=ConfigureGeneratedCodeAnalysis) for configuring generated code callbacks.
   2. Not registered to analyze generated code: Skipping analyzer callbacks for suppressed files for these analyzers is fine. By definition, such analyzers do not require to analyze all files in compilation as it anyways skips generated code.
3. Symbol analyzers: Symbol analysis callbacks can only be skipped if the analyzer is suppressed on all files corresponding to symbol's declaration locations.</Description>
    <CreatedDate>22/09/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38792</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow disabled by default analyzers to be enabled with editorconfig e…</Title>
    <Description>…ntries.

We now mark analyzer as not suppressed if at least one syntax tree in compilation has DiagnosticOptions that has non-suppress severity.</Description>
    <CreatedDate>22/09/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38791</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler incorrectly interprets ?? operator and reports CS8602 on later dereference</Title>
    <Description>**Version Used**: .NET Core SDK 3.0.100-rc1-014190

**Steps to Reproduce**:

```
git clone https://github.com/aarnott/Nerdbank.Streams.git
cd Nerdbank.Streams
git checkout efceb295908f8d5fe1904ed139347fcf12c0871e
dotnet build src
```

**Expected Behavior**:

No warnings.

**Actual Behavior**:

```
StreamPipeReader.cs(128,97): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
StreamPipeWriter.cs(98,97): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
MultiplexingStream.Channel.cs(252,25): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
MultiplexingStream.Channel.cs(592,21): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
MultiplexingStream.Channel.cs(252,25): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
StreamPipeWriter.cs(98,97): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
StreamPipeReader.cs(128,97): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
MultiplexingStream.Channel.cs(592,21): warning CS8602: Dereference of a possibly null reference. [D:\git\Nerdbank.Streams\src\Nerdbank.Streams\Nerdbank.Streams.csproj]
```

Each of these warnings comes after a `??` operator. For example:

```cs
            if (this.flushCancellationSource?.IsCancellationRequested ?? true)
            {
                this.flushCancellationSource = new CancellationTokenSource();
            }

            using (var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, this.flushCancellationSource.Token))
```

The compiler flags the last dereference of `this.flushCancellationSource` as a possible null dereference even though the if check above guarantees otherwise.</Description>
    <CreatedDate>21/09/2019</CreatedDate>
    <ClosedDate>22/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38790</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38789</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable more xUnit analyzer rules</Title>
    <Description>This enables the following xUnit analyzer rules:

- xUnit2000 - literal or constant value should be first in Assert.Equal" is a valid assert, but very noisy. Will do the refactoring later
- xUnit2003 - do not use Assert.Equal for null value" is a valid assert, but very noisy right now 
- xUnit2004 - do not use Assert.Equal for boolean conditions" is a valid assert, but very noisy right now
- xUnit2007 - do not use Assert.IsType(typeof...)" is a valid assert, but very noisy right now 
- xUnit2015 - do not use typeof() expression to check the exception type. " is a valid assert, but very noisy right now 
</Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38788</IssueID>
    <RepoID>1</RepoID>
    <Title>Use default parameter values in flow analysis</Title>
    <Description>Closes #37903

/cc @jcouv. This flows data around in a somewhat disjunct way but I felt that adding lots of additional return values (i.e. `ImmutableArray&lt;BoundExpression&gt; arguments, ImmutableArray&lt;BoundExpression&gt; argumentsNoConversions, ImmutableArray&lt;Conversion&gt; conversions`) which "augment" the original arrays with the default parameter values was also kind of clumsy.</Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38787</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow selection in move type to file</Title>
    <Description>Currently, move type to file only works if you put the caret in the type name.  So use the new refactoring helpers to define the span where move type to file should be offered.</Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38786</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement lambda discard parameters</Title>
    <Description>In the new language version, when more than one parameter of a lambda/delegate is an underscore, we allow it and bind them as discard parameter symbols (which are like regular parameters, but is never in scope).

https://github.com/dotnet/csharplang/issues/111

Test plan: https://github.com/dotnet/roslyn/issues/38820</Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38785</IssueID>
    <RepoID>1</RepoID>
    <Title>Refresh features/compiler branch with latest bits from master</Title>
    <Description>
    </Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38784</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a comment explaining the recently added cycle detection code and its relation to the language specification.</Title>
    <Description>
    </Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>22/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38783</IssueID>
    <RepoID>1</RepoID>
    <Title>Operators are classified as methods in tooltips</Title>
    <Description>**Version Used**: VS 16.2

**Steps to Reproduce**:

- Hover over any of the operators below `==`, `!=`, `&lt;`

```C#
namespace ConsoleApp3
{
    class Program
    {
        static void Main(string[] args)
        {
            _ = 1 == 1;
            _ = 1 != 1;
            _ = 1 &lt; 1;
        }
    }
}
```

**Expected Behavior**:

They get the same color as shown in the editor

**Actual Behavior**:

They get the same color as methods

This also happens in the 'Find All References' window.</Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38782</IssueID>
    <RepoID>1</RepoID>
    <Title>Problem with using common .editorconfig file (imported in csproj) in Visual Studio 2019 Preview 4</Title>
    <Description>**Version Used**: 

Visual Studio 2019 Preview 4
Microsoft.CodeAnalysis.FxCopAnalyzers v2.9.4

**Steps to Reproduce**:

I want to streamlime code analysis and the respetive rules accross multiple projects and teams.

We used to do that by having a NuGet package that imported analyzers to projects (Microsoft.CodeAnalysis.FxCopAnalyzers and StyleCop.Analyzers) and defined a ruleset to define how each rule was handled by VS (error, warning, etc.).

I have been trying to setup this using a common .editorconfig file instead of the ruleset. The problem is that settings like the following just seem to be ignored when the .editorconfig file is imported from a shared folder.

```
dotnet_diagnostic.CA1062.severity = error
```

For the purpose of testing this, I have a very simple scenario that illustrates the problem.

The .editorconfig file is as follows:

```
[*.cs]
dotnet_diagnostic.CA1062.severity = error
#dotnet_code_quality.null_check_validation_methods = NotNull
```

Now this file is imported in a csproj like this:

```
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
    &lt;PropertyGroup&gt;
        &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
    &lt;/PropertyGroup&gt;
    &lt;Import Project="..\..\_Shared\Build.props" /&gt;
    &lt;ItemGroup&gt;
        &lt;PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.9.4"&gt;
            &lt;PrivateAssets&gt;All&lt;/PrivateAssets&gt;
        &lt;/PackageReference&gt;
    &lt;/ItemGroup&gt;
&lt;/Project&gt;
```

Build.props is like this:

```
&lt;Project&gt;
    &lt;PropertyGroup&gt;
    &lt;SkipDefaultEditorConfigAsAdditionalFile&gt;true&lt;/SkipDefaultEditorConfigAsAdditionalFile&gt;
    &lt;/PropertyGroup&gt;
    &lt;ItemGroup Condition="Exists('$(MSBuildThisFileDirectory)\.editorconfig')" &gt;
        &lt;AdditionalFiles Include="$(MSBuildThisFileDirectory)\.editorconfig" /&gt;
    &lt;/ItemGroup&gt;
&lt;/Project&gt;
```

**Expected Behavior**:

The following code is supposed to trigger an **error on CA1062** (validation of input):

```
public int Calculate(InputData input)
{
    SmartGuard.NotNull(nameof(input), input);
    if (this.Multiply)
    {
        return input.Value * 2;
    }
    else
    {
        return input.Value + 2;
    }
}
```

**Actual Behavior**:

But the result is a **warning**, which means that `CA1062.severity` is being ignored.

Now, if I change .editorconfig and uncomment the second line:

```
[*.cs]
dotnet_diagnostic.CA1062.severity = error
dotnet_code_quality.null_check_validation_methods = NotNull
```

The error goes way which means that `null_check_validation_methods` is being considered.

Why is that `CA1062.severity` is being ignored?

</Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>28/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38781</IssueID>
    <RepoID>1</RepoID>
    <Title>Static method isn't rendered in bold in nameof operator</Title>
    <Description>**Version Used**: Visual Studio 2019 Version 16.3

**Steps to Reproduce**:

```cs
public static class Type
{
    public static int Field;

    public static int Property { get; set; }

    public static void Method()
    {
        _ = nameof(Type);
        _ = nameof(Field);
        _ = nameof(Property);
        _ = nameof(Method); // Regular
        System.Action action = Method; // Bold
    }
}
```

**Expected Behavior**:

`Method` in `nameof` operator is rendered in bold.

**Actual Behavior**:

`Method` in `nameof` operator is rendered regularly.</Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38780</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38779</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid throw an first chance XmlException in `ISymbolExtensions.GetDocumentationComment()` when xmlText is empty?</Title>
    <Description>**Version Used**: 
master-vs-deps(9401294549bd1559b0b409f620ea639f309fe2b5)
Related to #36028

**Steps to Reproduce**:

1. Hover cursor on any params of non-override methods with document, or on any local vars in VS.

**Expected Behavior**:
No first chance exceptions should be throw.

**Actual Behavior**:
An `XmlException` is throw and catched. It's useless when `xmlText` is empty.</Description>
    <CreatedDate>20/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38778</IssueID>
    <RepoID>1</RepoID>
    <Title>Custom columns are blank when FAR on a literal</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1.  Open VS and create a console app with this code:
```csharp
    class Program
    {
        static void Main(string[] args)
        {
            string s = "asdf";
        }
    }
```
2. Select the string `"asdf"`, right click, and choose Find All References
3. If Containing Member, Containing Type, or Kind columns are not displayed, right click on the column labels in the FAR window and show them

**Expected Behavior**:
Containing Member should be Main
Containing Type should be Program 
Kind should be Read

**Actual Behavior**:
The columns are empty</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38777</IssueID>
    <RepoID>1</RepoID>
    <Title>Warning IDE0044 - not valid</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/734633/warning-ide0044-not-valid.html)._

---
The following class gives a warning on the field Foo &amp;quot;IDE0044 Make field readonly&amp;quot; which seems invalid.
Public Class Class1
    Private Foo(10) As Integer    ' or Dim Foo

Public Sub Bar()     ' or Private Sub
        Foo(0) = 1
    End Sub
End Class

Also the &amp;quot;Quick Actions&amp;quot; provided are not valid, for example making it a property.

---
### Original Comments

#### Visual Studio Feedback System on 9/16/2019, 02:14 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38776</IssueID>
    <RepoID>1</RepoID>
    <Title>Code Snippet replacement parameters do not respect spaces on insertion</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/734632/code-snippet-replacement-parameters-do-not-respect.html)._

---
What steps will reproduce the problem?
1. Create a code snippet that includes a literal replacement variable declaration, where the placeholder is separated from succeeding text by one or more spaces, as in:

```
&amp;lt;Snippet&amp;gt;
  &amp;lt;Code Language=&amp;quot;CSharp&amp;quot;&amp;gt;
    &amp;lt;![CDATA[
      public class Serializer : JsonConverter&amp;lt;$ClassName$&amp;gt;
      {
          public override $ClassName$ ReadJson(JsonReader reader, Type objectType, $ClassName$ existingValue)
          {
          }
      }
    ]]&amp;gt;
  &amp;lt;/Code&amp;gt;
  &amp;lt;Declarations&amp;gt;
    &amp;lt;Literal&amp;gt;
        &amp;lt;ID&amp;gt;ClassName&amp;lt;/ID&amp;gt;
        &amp;lt;ToolTip&amp;gt;Specify the name of the class to convert.&amp;lt;/ToolTip&amp;gt;
    &amp;lt;/Literal&amp;gt;
  &amp;lt;/Declarations&amp;gt;
&amp;lt;/Snippet&amp;gt;
```

2. Insert the snippet into a code file, press Tab, type the replacement parameter, e.g. &amp;quot;MyClass&amp;quot;, and then press Enter.
3. Observe the inserted code.

What is the expected output? What do you see instead?

Expected:

```
public class Serializer : JsonConverter&amp;lt;MyClass&amp;gt;
{
   public override MyClass ReadJson(JsonReader reader, Type objectType, MyClass existingValue)
   {
   }
}
```

Actual:

```
public class Serializer : JsonConverter&amp;lt;MyClass&amp;gt;
{
   public override MyClassReadJson(JsonReader reader, Type objectType, MyClassexistingValue)
   {
   }
}
```

Please provide any additional information below.

Spaces are removed after all instances of the inserted literal replacement parameter values, rendering the entire snippet feature no better than copy-and-paste, since the developer now has to manually examine the inserted code, searching for every occurrence of the substituted variable.

---
### Original Comments

#### Visual Studio Feedback System on 9/16/2019, 02:42 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38775</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense uses wrong types for lambdas passed using named parameters</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/734521/intellisense-uses-wrong-types-for-lambdas-passed-u.html)._

---
If you have a method which accepts multiple lambdas as arguments and use named parameters to pass the lambdas in a different order, IntelliSense within a passed lambda body will use the wrong types for completion against the lambda's parameters in the lambda body. That was a big sentence.

```csharp
void MethodWithMultipleLambdaArguments(
    Action&lt;(int x, int y)&gt; action,
    Action&lt;IEnumerable&lt;string&gt;&gt; checkThings = null)
{
    checkThings?.Invoke(new[]
    {
            "a",
            "b",
        });
    action((1, 2));
}

public void DoSomething()
{
    MethodWithMultipleLambdaArguments(checkThings: things =&gt;
    {
        things.«here»
    }, action: pair =&gt;
    {

    });
}
```

If you take the above code in a C# class in Visual Studio, remove the “«here»”, and then try completion from where “«here»” was, you will see something like this:

![autocompletion for `action`’s parameter shown when completing against `checkThings`’s parameter](https://i.imgur.com/RhFi3QR.png)

I think that there is something like incomplete type information being calculated because the lambda has a syntax error, preventing it from being fully resolved by the C# compiler. However, in this case, with named parameters, and a limited number of possible matching method overrides (in this case, exactly one), the compiler should have enough information to calculate the correct types for the lambda’s parameter.

---
### Original Comments

#### Visual Studio Feedback System on 9/16/2019, 03:48 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Nathan Phillip Brink (binki) on 9/16/2019, 06:43 AM: 

&lt;p&gt;P.S., in case it was not clear, the expected behavior would be to show the completions for `IEnumerable&amp;lt;string&amp;gt;` since that is the type of the `things` parameter.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38774</IssueID>
    <RepoID>1</RepoID>
    <Title>C# suggested parameter name is PascalCased</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/735864/c-suggested-parameter-name-is-pascalcased.html)._

---
What steps will reproduce the problem?
1. Write out a method signature including parameters.
2. After typing a parameter type, press space.

What is the expected output? What do you see instead?

I expect the C# language service to suggest a parameter name based on the type name in camelCase.
Instead, it shows it to me in PascalCase.

.NET naming has a very strong precedent for using camelCase for parameter names. C# used to do this properly, but it seems to have regressed recently.
See screenshot.

---
### Original Comments

#### Visual Studio Feedback System on 9/16/2019, 08:27 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38773</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0009 claims `this.` must precede reference to local method in delegate constructor</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/726242/ide0009-claims-this-must-precede-reference-to-loca.html)._

---
[regression] [worked-in:16.3]
What steps will reproduce the problem?

1. Have an .editorconfig file with `dotnet_style_qualification_for_method = true:warning`
1. Define a local method
2. Use that local method name as the argument to a delegate constructor.

What is the expected output? What do you see instead?

I expect no warnings.

I see an IDE0009 warning saying I must qualify the local method reference with `this.`.
Yet of course if I add `this.` then there's an error because local methods must not be qualified that way.

---
### Original Comments

#### Visual Studio Feedback System on 9/8/2019, 11:40 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38772</IssueID>
    <RepoID>1</RepoID>
    <Title>Copy value from field on MarshalByRef object to call ToString()</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/37830</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38771</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch expression conversion creates broken code due to unspecific var return</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/725942/switch-expression-conversion-creates-broken-code-d.html)._

---
Hence the following code:

```cs
using System;

namespace ConsoleApp1
{
    interface IFruit { }
    class Apple : IFruit { }
    class Banana : IFruit { }

class Program
    {
        static void Main(string[] args)
        {
            IFruit fruit;
            switch (args[0])
            {
                case &amp;quot;apple&amp;quot;:
                    fruit = new Apple();
                    break;
                case &amp;quot;banana&amp;quot;:
                    fruit = new Banana();
                    break;
                default:
                    throw new InvalidOperationException(&amp;quot;Unknown fruit.&amp;quot;);
            }
            Console.WriteLine(fruit. ToString());
        }
    }
}
```

The switch expression conversion suggests creating the following code:
```
var fruit = (args[0]) switch // C8506 No best type was found for the switch expression.
{
    &amp;quot;apple&amp;quot; =&amp;gt; new Apple(),
    &amp;quot;banana&amp;quot; =&amp;gt; new Banana(),
    _ =&amp;gt; throw new InvalidOperationException(&amp;quot;Unknown fruit.&amp;quot;),
};
```

However, the use of `var` causes the error `No best type was found for the switch expression.` which should be `IFruit`. There is no helper to change `var` explicitly to `IFruit`. If the conversion would've taken the original declaration of `IFruit` or the nearest compatible type, there would have been no problem.
```cs
IFruit fruit = (args[0]) switch
{
    &amp;quot;apple&amp;quot; =&amp;gt; new Apple(),
    &amp;quot;banana&amp;quot; =&amp;gt; new Banana(),
    _ =&amp;gt; throw new InvalidOperationException(&amp;quot;Unknown fruit.&amp;quot;),
};
```

I don't expect helpers to create broken code; and it would be nice to have this fixed :-)

---
### Original Comments

#### Visual Studio Feedback System on 9/9/2019, 01:17 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38770</IssueID>
    <RepoID>1</RepoID>
    <Title>Ctrl+click a URL in a string literal takes you to the String class definition instead of following the link</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/716317/ctrlclick-a-url-in-a-string-literal-takes-you-to-t.html)._

---
What steps will reproduce the problem?
1. Put a URL inside a C# string literal. Ex: &amp;quot;https://github.com/dotnet/corefx/issues/30691&amp;quot;
2. Inside the VS C# editior, click the URL while holding the Ctrl key

What is the expected output? What do you see instead?

I expect for the URL to be opened in my default browser. Instead, I get taken to the System.String class metadata or a decompiled version of the System.String reference assembly (which all no-op, but that's another issue).

---
### Original Comments

#### Visual Studio Feedback System on 8/29/2019, 07:12 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38769</IssueID>
    <RepoID>1</RepoID>
    <Title>Support for reinferred lambdas in GetSymbolInfo and GetDeclaredSymbol</Title>
    <Description>We now support exposing reinferred lambda symbols via GetSymbolInfo. As part of this, we have to recreate any local or parameter symbols who's `ContainingSymbol` would have been the original lambda symbol. As part of that, I've created a simple reinferred variable tracker as part of the NullableWalker, that is mutable inside a single pass of the walker and has a hierarchy of previous passes. SemanticModel will now use this for getting reinferred local symbols instead of recreating the symbols itself. @dotnet/roslyn-compiler for review.

Closes https://github.com/dotnet/roslyn/issues/38555 by linking to the original bug, and skips a new test.</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>06/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38768</IssueID>
    <RepoID>1</RepoID>
    <Title>Add latest features</Title>
    <Description>Added 16.2 and 16.3 Preview features</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38767</IssueID>
    <RepoID>1</RepoID>
    <Title>MoveToNamespace should support moving a single type from global NS </Title>
    <Description>Currently, this is supported only when the selected member is the only one declared in the global NS in the document.

</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38766</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature Request: NewLinesForBracesInMethodsWithMultilineParameters</Title>
    <Description>I was directed here from an `omnisharp-vscode` issue: https://github.com/OmniSharp/omnisharp-vscode/issues/3283

With dependency injection. I like my constructors formatted like this:

```
public MyClass(
    MyClass2 myClass2,
    MyClass3 myClass3
) {
    _myClass2 = myClass2;
    _myClass3 = myClass3;
}
```

However, the best I can do (that I know of) with the options given is:

```
public MyClass(
    MyClass2 myClass2,
    MyClass3 myClass3
) 
{ // gross
    _myClass2 = myClass2;
    _myClass3 = myClass3;
}
```

Is it possible to add a special option for that case? I'd still like a child constructor to appear like this:

```
public MyClass(
    MyClass2 myClass2,
    MyClass3 myClass3
) : base(myClass2, myClass3)
{
    _myClass2 = myClass2;
    _myClass3 = myClass3;
}
```</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38765</IssueID>
    <RepoID>1</RepoID>
    <Title>BoundBadExpression.Symbols has null elements</Title>
    <Description>When we assume that `BoundBadExpression.Symbols` contains no nulls, ImplicitArrayCreationExpression_Error_NonArrayInitExpr, TestPragmaWarningOnEveryNodes, and DontCrash all fail, as the array does have null elements. This is likely a bug in the compiler and we should fix that. When that's fixed, the annotation of the array should be updated back to `ImmutableArray&lt;Symbol&gt;`</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38764</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190923.5
- **Date Produced**: 9/24/2019 4:15 AM
- **Commit**: ef4b288de587f0b86e65b3950e9095f714808ade
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 5.0.0-beta.19473.5

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

















</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38763</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38762</IssueID>
    <RepoID>1</RepoID>
    <Title>Expand selection on method should include XML docs</Title>
    <Description>**Version Used**: 16.4.0-pre.2.0+29318.173.master

**Steps to Reproduce**:

```c#
class C
{
    /// &lt;summary&gt;A method&lt;/summary&gt;
    void M()
    {
    }
}
```

1. With the caret inside method `M`, invoke _Expand Selection_ until the selection spans `void M() { }`
2. Invoke _Expand Selection_ again

**Expected Behavior**:

Selection expands to include XML doc and method body.

**Actual Behavior**:

Ensure class `C` is selected.


This makes it hard to perform follow on actions such as:

- comment entire method without leaving invalid dangling documentation
- cut method to clipboard to paste somewhere else</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38761</IssueID>
    <RepoID>1</RepoID>
    <Title>The SyntaxKind Enum could be in a separate library.</Title>
    <Description>The `SyntaxKind Enum` should be in a separate library, as its source is duplicated in multiple projects in the solution. eg `Microsoft.CodeAnalysis.VisualBasic` and `VisualBasicSyntaxGenerator` 
This also the same for CSharp projects.

Maybe we should start to separate them out, along with the helper methods, to a library dll. So there isn't a mismatch.</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38760</IssueID>
    <RepoID>1</RepoID>
    <Title>Cache AnalyzerConfigOptionsResult instances</Title>
    <Description>A common case for editorconfig is for most of the source files to have the same
options specified, which means if we store options for each source file it's
likely we'll have many duplicate sets. This change adds a cache to AnalyzerConfigSet
to try to de-dup identical options dictionaries to a single shared instance.</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38759</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring: remove CompltetionItemFilter</Title>
    <Description>
    </Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38758</IssueID>
    <RepoID>1</RepoID>
    <Title>Confirm required CancellationToken for Formatter.OrganizeImportsAsync</Title>
    <Description>#38593 adds this method with a required cancellation token, which aligns with asynchronous usage analyzers that require cancellation tokens be passed to methods that take them. The new API deviates from existing patterns, so it should be confirmed in design review.</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38757</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38756</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify semantic model on suppression operator</Title>
    <Description>Uncommenting some verification in tests for suppressions.
Closes https://github.com/dotnet/roslyn/issues/32661
Closes https://github.com/dotnet/roslyn/issues/38343

Also closes https://github.com/dotnet/roslyn/issues/38543 (problem with binding of async lambdas allowing a void to be returned) by adding a test</Description>
    <CreatedDate>19/09/2019</CreatedDate>
    <ClosedDate>21/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38755</IssueID>
    <RepoID>1</RepoID>
    <Title>A C# option to indent/not indent `namespace` contents</Title>
    <Description>Added a C# formatting option to enable/disable (enabled by default) indentation for `namespace` contents.

Having this off is very useful for a couple of scenarios:
1. small screens, such as laptop screens
2. diff viewing, when two files have to be shown side by side (GitHub for example often has to wrap C# code because of long lines)

For example, with option off:
```csharp
namespace MyNamespace {

using System;

class MyClass
{
    int f;
}
}
```

Option on:
```csharp
namespace MyNamespace {

  using System;

  class MyClass
  {
    int f;
  }
}
```

Closes #24129</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38754</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix crash when moving type from global namespace</Title>
    <Description>Fixes internal bug
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/980758

@ryzngard @dotnet/roslyn-ide </Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38753</IssueID>
    <RepoID>1</RepoID>
    <Title>Use IContentType.IsOfType when checking for content type matches</Title>
    <Description>A bug found while investigating https://github.com/dotnet/roslyn/issues/36984, was that the CodeCleanupFixerProvider was providing no fixers due to expecting an exact match of the text buffer's content type. It is recommended to use `IsOfType` to perform the comparison and this is how we check ContentTypes elsewhere.</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38752</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix TakeIncrementalSnapshot crash</Title>
    <Description>Closes #37868

I can't think of any non-error scenarios where you would go into a conditional state on the LHS of an assignment operator, and learn something meaningful about the nullability of variables. So I fixed the crash by always unsplitting the state after visiting the left side of an assignment operator.</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38751</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix typo and add richer info to rename test failure message</Title>
    <Description>```diff
-There were additional related locations than were unasserted:
+There were additional related locations that were unasserted:
+Foo @Test1.cs[12..15)
+Bar @Test1.cs[30..33)
```

Ideas welcome.</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38750</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure target-typed constructs are bound during initial binding in an error scenario.</Title>
    <Description>Fixes #38686</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38749</IssueID>
    <RepoID>1</RepoID>
    <Title>Change the Using organizer to not use ElasticTrivia for the NewLine</Title>
    <Description>Code Cleanup removes and sorts usings prior to running the whitespace formatter. The Using organizer used elastic trivia for the newline that it introduced between using groups which would get eaten by the formatter.

Fixes #36984</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38748</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP: Change Signature - Add parameter</Title>
    <Description>
    </Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38747</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38746</IssueID>
    <RepoID>1</RepoID>
    <Title>Export EditorConfig from Tools Options to show up in Solution Explorer</Title>
    <Description>**Version Used**: 
Visual Studio 2019

**Steps to Reproduce**:

1. When I press **Generate .editorconfig file from settings** in Tools &gt; Options: 
![code style](https://user-images.githubusercontent.com/46729679/65167327-3290a300-d9f7-11e9-83f5-2d6258fd31c3.png)


2. File Explorer should open to ask where the EditorConfig should be saved (project or solution level):
![save-editorconfig](https://user-images.githubusercontent.com/46729679/65167441-6a97e600-d9f7-11e9-813b-b69c083c1582.png)

3. Once I select **Save** the EditorConfig should show up in Solution Explorer depending on where it was saved (under a specific project or solution)

Currently the EditorConfig is only saved at the solution level and have to right click on the solution name in the Solution Explorer and select add existing item for the EditorConfig to show up in Solution Explorer and I believe we can eliminate that step as well:
![Annotation 2019-09-18 093916](https://user-images.githubusercontent.com/46729679/65167845-3244d780-d9f8-11e9-930e-34778d2df067.png)


</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38745</IssueID>
    <RepoID>1</RepoID>
    <Title>Enhance local variable assignment tracking</Title>
    <Description>**Version Used**: 

Visual-Studio-2019-Version-16.2.5

**Steps to Reproduce**:

Consider the following code snippet:

```
void Foo(object key)
{
    IDictionary&lt;object, object&gt; dictionary = CreateDictionary(); // May return null
    // Bar() returns an object
    var foo = dictionary?.TryGetValue(key, out object fooValue) ?? false ? fooValue : Bar();
    //                                                                     ~~~~~~~~
}
```
**Expected Behavior**:

The compiler can statically prove, that in the branch `fooValue` is used, it is always assigned.

**Actual Behavior**:
The comiler errors:
&gt; The local variable `fooValue` might not be initialized before accessing.</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38744</IssueID>
    <RepoID>1</RepoID>
    <Title>'Convert switch statement to switch expression' (IDE0066) throws away comments</Title>
    <Description>example:

``` c#
using System;

static class P
{
    static void Main()
    {
        string input = Whatever();
        int size;
        // IDE0066 here
        switch(input)
        {
            case "abc": size = 12; break; // because magic
            case "def": size = 42; break; // important comment
            default: size = -1; break; // everything else
        }
        Console.WriteLine(size);
    }

    static string Whatever() =&gt; throw new NotImplementedException();
}
```

expected output:

``` c#
        var size = input switch
        {
            "abc" =&gt; 12, // because magic
            "def" =&gt; 42, // important comment
            _ =&gt; -1, // everything else
        };
```

actual output:

``` c#
        var size = input switch
        {
            "abc" =&gt; 12,
            "def" =&gt; 42,
            _ =&gt; -1,
        };
```

Note: I haven't thought through what this should do in the general case where comments could be on multiple lines, but; comments are important - throwing them away seems bad.</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38743</IssueID>
    <RepoID>1</RepoID>
    <Title>use var instead of explicit type incorrectly reported in non-nullable out variable declaration</Title>
    <Description>**Version Used**: VS 16.3 preview 1

**Steps to Reproduce**:

Set code style preferences to prefer var over explicit type.

Compile the following:

```csharp
#nullable enable
using System.Collections.Generic;

public class C {
    public void M() {
        var dic = new Dictionary&lt;string, string&gt;
        { {"key", "value"}};
        
        dic.TryGetValue("key", out string value);
    }
}
```
**Expected Behavior**:

No message to prefer var over explicit type, since `string` is different to `string?` 

**Actual Behavior**:

message to prefer var over explicit type.</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38742</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot supress nullable warning in out variable declaration </Title>
    <Description>**Version Used**: master

**Steps to Reproduce**:

```csharp
#nullable enable
using System.Collections.Generic;

public class C {
    public void M() {
        var dic = new Dictionary&lt;string, string&gt;
        { {"key", "value"}};
        
        dic.TryGetValue("key", out string value);
    }
}
```
produces the warning:

&gt; warning CS8600: Converting null literal or possible null value to non-nullable type.

Adding a null suppression operator as `dic.TryGetValue("key", out string value!);` is a syntax error. 

&gt; error CS1003: Syntax error, ',' expected
&gt; error CS1525: Invalid expression term ')'.

Adding a null suppression operator as `dic.TryGetValue("key", out string value)!;` is a semantic error.

&gt; error CS8598: The suppression operator is not allowed in this context
&gt; error CS0201: Only assignment, call, increment, decrement, await, and new object expressions can be used as a statement 

**Expected Behavior**:

Some way to suppress an nullable warning in out variable declaration 

**Actual Behavior**:

No way to suppress a nullable warning in out variable declaration 
</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38741</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn can tear down VS if a progression search gets cancelled</Title>
    <Description>**Version Used**: 
Version 16.4.0 Preview 2.0 [29316.148.master]

**Steps to Reproduce**:

I was searching Solution Explorer and VS was torn down with the following. I cannot reproduce this so looks like timing issue. Looks like if OperationCanceledException leaks out of these lambdas, VS is torn down: https://github.com/dotnet/roslyn/blob/7bc44488c661fd6bbb6c53f39512a6fe0cc5ef84/src/VisualStudio/Core/Def/Implementation/Progression/GraphQueryManager.cs#L156

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.Threading.Tasks.TaskCanceledException: A task was canceled.
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass6_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;g__outerFunction|0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean)
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].GetResultCore(Boolean)
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].get_Result()
   at Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphQueryManager+&lt;&gt;c__DisplayClass14_0.&lt;PopulateContextGraphAsync&gt;b__1(System.Threading.Tasks.Task`1&lt;Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphBuilder[]&gt;)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass5_0`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;b__0(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass2_0.&lt;SafeContinueWith&gt;g__continuationFunction|0(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass6_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;g__outerFunction|0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```
</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38740</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38739</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unnecessary nullable suppression</Title>
    <Description>I was looking at existing usages of nullable suppression operator in roslyn and noticed a couple of unnecessary ones.</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38738</IssueID>
    <RepoID>1</RepoID>
    <Title>Add cycle detection for more scenarios involving looking in base interfaces.</Title>
    <Description>Fixes #38735.</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38737</IssueID>
    <RepoID>1</RepoID>
    <Title>"Use simple 'using' statement" throws away compiler directives</Title>
    <Description>**Version Used**: 
Version 16.4.0 Preview 2.0 [29316.148.master]

Reported here: https://twitter.com/marcgravell/status/1173957452703895552.

**Steps to Reproduce**:

1. 
``` C#
    class Program
    {
        static void Demo()
        {
            // IDE0063 does the wrong thing here
            using (var obj = Dummy())
            {
#pragma warning disable CS0618, CS0612
#if !FOO
                LegacyMethod();
#endif
#pragma warning restore CS0618, CS0612
            }
        }
        static IDisposable Dummy() =&gt; throw new NotImplementedException();
        [Obsolete]
        static void LegacyMethod() =&gt; throw new NotImplementedException();
    }
```

**Expected Behavior**:
``` C#
    class Program
    {
        static void Demo()
        {
            // IDE0063 does the wrong thing here
            using var obj = Dummy();
#pragma warning disable CS0618, CS0612
#if !FOO
            LegacyMethod();
#endif
#pragma warning restore CS0618, CS0612
        }
        static IDisposable Dummy() =&gt; throw new NotImplementedException();
        [Obsolete]
        static void LegacyMethod() =&gt; throw new NotImplementedException();
    }
}
```

**Actual Behavior**:
``` C#
    class Program
    {
        static void Demo()
        {
            // IDE0063 does the wrong thing here
            using var obj = Dummy();
#pragma warning disable CS0618, CS0612
#if !FOO
            LegacyMethod();
        }
        static IDisposable Dummy() =&gt; throw new NotImplementedException();
        [Obsolete]
        static void LegacyMethod() =&gt; throw new NotImplementedException();
    }
```</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38736</IssueID>
    <RepoID>1</RepoID>
    <Title>Update immutable arrays of symbols in the NullabilityRewriter</Title>
    <Description>Will be necessary for the forthcoming lambda PR, but as this is a seperable change I'm breaking it out first.</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38735</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler stack overflow in cyclic base lookup (DIM)</Title>
    <Description>The following test case crashes after https://github.com/dotnet/roslyn/pull/38564 has been merged

``` c#
        [Fact]
        public void NestedTypes_33()
        {
            var source1 =
@"
interface I1 : IA&lt;int&gt;.NF { }

interface IQ&lt;T&gt; { }

interface IA&lt;T&gt; : IB&lt;IQ&lt;T&gt;&gt; { }

interface IB&lt;T&gt; : IA&lt;IQ&lt;T&gt;&gt; { }
";

            var compilation1 = CreateCompilation(source1, options: TestOptions.DebugDll,
                                                 parseOptions: TestOptions.Regular);

            compilation1.VerifyDiagnostics(
                // some errors are expected:
                // error CS0426: The type name 'NF' does not exist in the type 'IA&lt;int&gt;'
                // error CS0529: Inherited interface 'IB&lt;IQ&lt;T&gt;&gt;' causes a cycle in the interface hierarchy of 'IA&lt;T&gt;'
                // error CS0529: Inherited interface 'IA&lt;IQ&lt;T&gt;&gt;' causes a cycle in the interface hierarchy of 'IB&lt;T&gt;'
                );
            CompileAndVerify(compilation1);
        }
```

I suspect the problem is a missing check `BaseTypeAnalysis.TypeDependsOn(...)` in the name lookup code added in #38564.
</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38734</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for capture of implicit `this` parameter in MakeLocalFunctionStatic</Title>
    <Description>This is an unaddressed issue from #37629. Currently we don't make codefix/refactoring available if this is the case.</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38733</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert MakeLocalFunctionStatic refactoring to analyzer/codefix</Title>
    <Description>With .editorconfig support.

Suggested via code review comment:
https://github.com/dotnet/roslyn/pull/37629#pullrequestreview-288915669</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38732</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow conversion of collection initializer Add extension method this arg</Title>
    <Description>Fixes #38726</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38731</IssueID>
    <RepoID>1</RepoID>
    <Title>Detect when type/field declared in an interface shadows a member from base interface.</Title>
    <Description>Fixes #38711.</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38730</IssueID>
    <RepoID>1</RepoID>
    <Title>Workaround to unblock builds</Title>
    <Description>Same workaround as https://github.com/dotnet/roslyn/pull/38692</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38729</IssueID>
    <RepoID>1</RepoID>
    <Title>Mask the shift count during constant folding to imitate the X86 behavior when unspecified.</Title>
    <Description>Fixes #38720</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38728</IssueID>
    <RepoID>1</RepoID>
    <Title>Bad Change Preview</Title>
    <Description>Original code:
![image](https://user-images.githubusercontent.com/2371880/65068892-665bc200-d93e-11e9-9544-a0a8ef42c200.png)
Invoking ctrl+. on the `localFunction` variable:
![image](https://user-images.githubusercontent.com/2371880/65068874-5cd25a00-d93e-11e9-93c2-d7575735c1e0.png)

Note that the refactoring worked as you'd expect, but the preview didn't show the change.</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38727</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Arcade common folder</Title>
    <Description>Take the latest changes from Arcade to fix our signed build. [Test Build](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3059123) </Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38726</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect IL generated for struct collection initializer call to Add extension method</Title>
    <Description>Compile:
```C#
using System;
using System.Collections;

interface IAppend
{
    void Append(object o);
}

struct S : IEnumerable, IAppend
{
    IEnumerator IEnumerable.GetEnumerator() =&gt; null;
    void IAppend.Append(object o) { }
}

static class Program
{
    static void Add(this IAppend x, object y)
    {
        x.Append(y);
    }
    static void Main()
    {
        _ = new S() { 1, 2 };
    }
}
```
Execute:
```
Unhandled Exception: System.NullReferenceException:
    Object reference not set to an instance of an object.
   at Program.Add(IAppend x, Object y)
   at Program.Main()
```
See https://github.com/dotnet/roslyn/issues/30956#issuecomment-435804724 for related issue with `await new S()`.</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38725</IssueID>
    <RepoID>1</RepoID>
    <Title>"csc.exe" exited with code -2146232797</Title>
    <Description>**Version Used**: 
16.3.0 Preview 1
16.3.0 Preview 2
16.3.0 Preview 3
16.3.0 Preview 4

**Steps to Reproduce**:

I can't tell, the only thing I see in VS is a one-line error message in build output:
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets(59,5): error MSB6006: "csc.exe" exited with code -2146232797.

At least I found this in the event log which should be related:
```
Application: csc.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.IndexOutOfRangeException: Index was outside the bounds of the array.
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.IsCapturedInLocalFunction(Int32 slot)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.GetCapturedBitmask(BitVector&amp; state)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.RecordCapturedChanges(BitVector&amp; oldState, BitVector&amp; newState)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.RecordChangedVars(LocalState&amp; oldWrites, LocalState&amp; newWrites, BitVector&amp; oldReads, BitVector&amp; newReads)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitLocalFunctionStatement(BoundLocalFunctionStatement localFunc)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(BoundBlock block)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitForEachStatement(BoundForEachStatement node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(BoundBlock block)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(BoundBlock block)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.UnassignedFieldsWalker.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Analyze(Boolean&amp; badRegion, Optional`1 initialState)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Analyze(Boolean&amp; badRegion, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.UnassignedFieldsWalker.Analyze(CSharpCompilation compilation, MethodSymbol method, BoundNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.IsCapturedInLocalFunction(Int32)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.GetCapturedBitmask(Microsoft.CodeAnalysis.BitVector ByRef)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.RecordCapturedChanges(Microsoft.CodeAnalysis.BitVector ByRef, Microsoft.CodeAnalysis.BitVector ByRef)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.RecordChangedVars(LocalState ByRef, LocalState ByRef, Microsoft.CodeAnalysis.BitVector ByRef, Microsoft.CodeAnalysis.BitVector ByRef)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitLocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.BoundLocalFunctionStatement)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitForEachStatement(Microsoft.CodeAnalysis.CSharp.BoundForEachStatement)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Scan(Boolean ByRef)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Scan(Boolean ByRef)
   at Microsoft.CodeAnalysis.CSharp.UnassignedFieldsWalker.Scan(Boolean ByRef)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Analyze(Boolean ByRef, Microsoft.CodeAnalysis.Optional`1&lt;LocalState&gt;)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Analyze(Boolean ByRef, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.UnassignedFieldsWalker.Analyze(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
```

It's a huge WPF project being part of a huge solution (&gt;130 projects) so I can't give any code. Please give a hint how to narrow this down (or get the jit debugger attached to the failing csc process).

(BTW: There is no problem with the release version of VS2019 16.2.x)</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38724</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38723</IssueID>
    <RepoID>1</RepoID>
    <Title>Type pattern: definite assignment false positive for struct that has only reference type properties and is declared in another assembly</Title>
    <Description>**Version Used**: 
Visual Studio 16.2.5
MSBuild 16.2.37902+b5aaefc9f
csc.exe 3.2.1-beta4-19408-03

**Steps to Reproduce**:
You need two assemblies for this, `Lib` and `App`, where `App` references `Lib`.
```csharp
// Lib
namespace Lib
{
	public struct StructWithStringProp
	{
		public string Text { get; set; }
	}
}

// App
namespace App
{
	internal class CallSites
	{
		private static string ExternalStringPropCallSite(Lib.StructWithStringProp? nullable)
		{
			bool flag = nullable is Lib.StructWithStringProp notNull;
			return flag ? notNull.ToString() : "";
		}
	}
}
```

**Expected Behavior**:
error CS0165: Use of unassigned local variable 'notNull'

**Actual Behavior**:
The code compiles.

**Additional information**:
If you make any of the following changes, the code stops compiling and the expected error appears:
- replace struct's property with a field
- change struct's property type from `string` to, let's say, `int`
- move struct declaration from Lib to App

You can check out a solution that illustrates all these permutations and their effect on the compiler behavior [here](https://github.com/HellBrick/RoslynPatternMatchingDefiniteAssignmentIssue).</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38722</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] CodeLens does not work for Visual Basic</Title>
    <Description>**Version Used**: 
Version 16.4.0 Preview 2.0 [29316.148.master]

**Steps to Reproduce**:
![image](https://user-images.githubusercontent.com/1103906/65011523-26550900-d957-11e9-89fe-bb7106b94db1.png)

**Expected Behavior**:
CodeLens to show

**Actual Behavior**:
Space is reserved for CodeLens but the lenses themselves don't show up.</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38721</IssueID>
    <RepoID>1</RepoID>
    <Title>Spelling fixes</Title>
    <Description>
    </Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38720</IssueID>
    <RepoID>1</RepoID>
    <Title>Make constant folding of `&lt;&lt;` and `&gt;&gt;` host platform independent</Title>
    <Description>Constant folding of `&lt;&lt;` and `&gt;&gt;` in the C# compiler depends on the (undefined) behavior of the underlying platform when the shift amount is greater than the size of the shifted value.  We should mask the shift amount to get deterministic behavior matching the X86 behavior.

Here is the offending source:
``` c#
                case BinaryOperatorKind.IntLeftShift:
                    return valueLeft.Int32Value &lt;&lt; valueRight.Int32Value;
                case BinaryOperatorKind.LongLeftShift:
                    return valueLeft.Int64Value &lt;&lt; valueRight.Int32Value;
                case BinaryOperatorKind.UIntLeftShift:
                    return valueLeft.UInt32Value &lt;&lt; valueRight.Int32Value;
                case BinaryOperatorKind.ULongLeftShift:
                    return valueLeft.UInt64Value &lt;&lt; valueRight.Int32Value;
                case BinaryOperatorKind.IntRightShift:
                    return valueLeft.Int32Value &gt;&gt; valueRight.Int32Value;
                case BinaryOperatorKind.LongRightShift:
                    return valueLeft.Int64Value &gt;&gt; valueRight.Int32Value;
                case BinaryOperatorKind.UIntRightShift:
                    return valueLeft.UInt32Value &gt;&gt; valueRight.Int32Value;
                case BinaryOperatorKind.ULongRightShift:
                    return valueLeft.UInt64Value &gt;&gt; valueRight.Int32Value;
```
</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38719</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38718</IssueID>
    <RepoID>1</RepoID>
    <Title>Make certain parts of the nuget search update system non-cancellable.</Title>
    <Description>These codepaths only ever passed in CancellationToken.None in (outside of tests).  As such, it's just somewhat confusing to actually attempt to use the token for any sort of real rpc purpose.  The token just exists so that tests can effectively cause the system to bail out of its infinite looping.  

In the real OOP scenario, we just allow the normal process teardown mechanism to clean things up.  So we don't actually need to have anything control that loop.  Again, this is how things have always worked.  So we basically have several years worth of information showing this lifetime management approach works and doesn't need changing. 

This PR just makes things clearer and reduces the chance for confusion here.

--

Note: to reiterate.  There should be no runtime change in behavior here.  This change just codifies what our existing implementation already does, and reduces confusion due to the existence of a cancellation token being used in non-test scenarios that had no effect.</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38717</IssueID>
    <RepoID>1</RepoID>
    <Title>正在下载用于nuget.org的intellisense index-Downloading intellisense index for nuget.org</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/576978/正在下载用于nugetorg的intellisense-index.html)._

---
&lt;p&gt;VSF_TYPE_MARKDOWNDownloading the IntelliSense index for nuget.org is running all the time, unable to debug the program, prompt to install the Android SDK when debugging the program&lt;/p&gt;

---
### Original Comments

#### Visual Studio Feedback System on 5/22/2019, 00:45 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### 冰尘 on 5/23/2019, 07:54 AM: 

I has this problem too. This prolbem was found since VisualStudio2019 upgrade to v16.1.0
#### Visual Studio Feedback System on 5/24/2019, 11:30 AM: 

&lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/ . We'll keep you posted on any updates to this feedback.&lt;/p&gt;

#### Eduardo Gasparoto Semprebon on 5/28/2019, 05:31 AM: 

&lt;p&gt;Same issue here, using 16.1.1.&lt;/p&gt;&lt;p&gt;Already tried to clear the solution, deleted the .vs folder... Nothing&lt;/p&gt;

#### jim liu on 6/2/2019, 00:02 AM: 

I repair the installation solved this  issue.
#### 彬彬 廖 on 6/11/2019, 05:26 PM: 

&lt;p&gt;I repair the installation, and still can't solve this issue.&lt;/p&gt;&lt;p&gt;my computer works in offline mode.&lt;/p&gt;

#### Mayuresh Sawardekar on 6/18/2019, 08:40 AM: 

&lt;p&gt;Any update on the issue above ? Even repairing the installation did not help.&lt;/p&gt;

#### Cagri (Charlie) Aslan [MSFT] on 6/18/2019, 11:35 AM: 

&lt;p&gt;Thanks for the feedback. Is it possible for you to use the 'record' functionality in the 'send feedback' tool and capture VS when it is having the problem? It will get us perf traces that should let us figure out what's going on. Thanks!&lt;/p&gt;

#### Mayuresh Sawardekar on 6/18/2019, 01:27 PM: 

Hopefully the video comes through. Thanks
#### David Roth on 6/18/2019, 00:33 PM: 

&lt;p&gt;After upgrading to 16.1.3 yesterday, I do not see this issue anymore&lt;/p&gt;

#### Mayuresh Sawardekar on 6/18/2019, 00:44 PM: 

&lt;p&gt;I am on VS 2019 v16.1.3 . I am not able to see "record functionality" in "send feedback". All I see is "Report a problem" and "Suggest a feature"&lt;/p&gt;

#### Cagri (Charlie) Aslan [MSFT] on 6/18/2019, 00:46 PM: 

&lt;p&gt;This might help: &lt;a target='_blank' href="https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019"&gt;https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019&lt;/a&gt;&lt;/p&gt;

#### Mayuresh Sawardekar on 6/18/2019, 01:31 PM: 

&lt;p&gt;&lt;a rel="user" href="https://developercommunity.visualstudio.com/users/480/140a11e6-f6dc-4ab9-96df-c5c26b5dd5e1.html" nodeid="480"&gt;@Cagri (Charlie) Aslan [MSFT]&lt;/a&gt; : I did send over the VS capture via the "send feedback" tool. Hopefully it came through.&lt;/p&gt;

#### Cagri (Charlie) Aslan [MSFT] on 6/18/2019, 01:43 PM: 

&lt;p&gt;It says it is still uploading. I'll check again in a couple of hours. Thanks!&lt;/p&gt;

#### Mayuresh Sawardekar on 6/19/2019, 06:25 AM: 

&lt;p&gt;&lt;a rel="user" href="https://developercommunity.visualstudio.com/users/480/140a11e6-f6dc-4ab9-96df-c5c26b5dd5e1.html" nodeid="480"&gt;@Cagri (Charlie) Aslan [MSFT]&lt;/a&gt;  Any update on it yet ?&lt;/p&gt;

#### 419830883 on 6/26/2019, 08:30 PM: 

&lt;p&gt;In 16.1.4,this problem still exists.Is there any solution?&lt;/p&gt;

#### 刘涛 on 6/26/2019, 08:37 PM: 

&lt;p&gt;我目前的解决办法是通过Android Studio 中Android Sdk tool 下载对应的SDK与工具 到C:\Program Files (x86)\Android\android-sdk暂时解决的,&lt;/p&gt;&lt;p&gt;关于Bug修复进度Allen在帮忙跟进&lt;/p&gt;&lt;p&gt;https://developercommunity.visualstudio.com/content/problem/600284/xamarinandroid-sdk-manager-offline-mode-after-upgr.html&lt;/p&gt;&lt;p&gt;Translated from Bing:&lt;/p&gt;&lt;p&gt;My current solution is to download the corresponding SDK and tools from Android Sdk tool in Android Studio to C:\Program Files (x86)\Android\android-sdk for temporary solution.&lt;/p&gt;&lt;p&gt;Allen is helping to follow up on the bug fix progress&lt;/p&gt;&lt;p&gt;Https://developercommunity.visualstudio.com/content/problem/600284/xamarinandroid-sdk-manager-offline-mode-after-upgr.html&lt;/p&gt;

#### Eduardo Gasparoto Semprebon on 6/27/2019, 01:07 AM: 

&lt;p&gt;Still same issue in 16.1.4. I don't have Android SDK in the machine.&lt;/p&gt;

#### Mayuresh Sawardekar on 6/27/2019, 04:50 AM: 

&lt;p&gt;I too dont have Android SDK in the machine. Help needed to resolve this issue.&lt;/p&gt;

#### John Burke on 6/28/2019, 11:40 AM: 

&lt;p&gt;I am having the issue as well.  Upgraded to 16.1.4 and it still exists.  Anything I can do to workaround?&lt;/p&gt;

#### 419830883 on 7/9/2019, 08:44 PM: 

&lt;p&gt;This issue has been solved in 16.1.6,thanks for everyone!&lt;/p&gt;

#### John Burke on 7/11/2019, 10:56 AM: 

&lt;p&gt;I upgraded to 16.1.6 and it is not fixed.  Still getting the message.&lt;/p&gt;

#### Ray on 8/23/2019, 01:55 AM: 

It's now 16.2.3 and.... you guessed it: issue is still here!  &lt;br&gt;&lt;br&gt;Removed nuget.org from VS.NET setting and solution settings, restarted several times, reinstalled VS.NET, told my mum about it...  and it just refuses to move on like a bad date. &lt;br&gt;&lt;br&gt;Thankfully I don't have OCD otherwise this would drive me crazy
#### zebal on 9/13/2019, 05:23 AM: 

&lt;p&gt;I have the same issue, VS 16.2.5&lt;/p&gt;&lt;p&gt;Fresh installed system and VS.&lt;/p&gt;&lt;p&gt;"Downloading intellisense index for nuget.org"&lt;/p&gt;&lt;p&gt;Firewall is open.&lt;/p&gt;&lt;p&gt;This should be fixed, what information do you need?&lt;/p&gt;

#### Rob Relyea [MSFT] on 9/13/2019, 03:42 PM: 

&lt;p&gt;No idea which component is trying to download some intellisense index from &lt;a target='_blank' href="http://nuget.org"&gt;nuget.org&lt;/a&gt;.&lt;br&gt;
I strongly believe this is not the NuGet team trying to do this.&lt;/p&gt;
&lt;p&gt;It would be interesting to figure out who might be downloading an intellisense index via &lt;a target='_blank' href="http://nuget.org"&gt;nuget.org&lt;/a&gt;.&lt;br&gt;
Which component of VS? Which workload are you running?&lt;/p&gt;
&lt;p&gt;Does this only happen when you have a solution loaded?&lt;br&gt;
Etc…&lt;/p&gt;
&lt;p&gt;-Rob Relyea&lt;br&gt;
NuGet Team.&lt;/p&gt;

#### Ge Ge on 9/13/2019, 11:08 PM: 

&lt;p&gt;&lt;a rel="user" href="https://developercommunity.visualstudio.com/users/1707/fd314950-9f6e-4bf9-90a0-982362e25620.html" nodeid="1707"&gt;@Rob Relyea [MSFT]&lt;/a&gt; "Downloading intellisense index for nuget.org" will only show in the Background Task button (in the bottom left of the screen). And yes, it seems only happen when having a solution loaded.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;My solution:&lt;/p&gt;&lt;p&gt;1. Use VPN to finish the download.&lt;/p&gt;&lt;p&gt;2. If it doesn't work, go to Options &amp;gt; NuGet Package Manager &amp;gt; Package Sources, and delete "nuget.org" item (back up the info if you want). Restart VS 2019, problem solved. And then you can add the "nuget.org" back.&lt;/p&gt;&lt;p&gt;At least works for me :P&lt;/p&gt;

#### zebal on 9/14/2019, 05:20 AM: 

&lt;p&gt;&lt;a rel="user" href="https://developercommunity.visualstudio.com/users/1707/fd314950-9f6e-4bf9-90a0-982362e25620.html" nodeid="1707"&gt;@Rob Relyea [MSFT]&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It's a background task in VS usually starting together with intellisense (that is when intellisense is doing parsing job on load of solution). and so far only when loading Unreal Engine 4 project.&lt;/p&gt;&lt;p&gt;It happens randomly, sometime yes sometimes not, I usually restart VS to get rid of it thanks to to its randomness.&lt;/p&gt;&lt;p&gt;I tried to reproduce the issue why recording my system with perfview but the problem didn't occur :(&lt;/p&gt;&lt;p&gt;I also tried the suggestion to remove and re-add nuget.org link in options, but can't tell if that solved the issue, it's too early to conclude, I'm sure this background task will come back once, and if so I'll record system and send you pefview logs.&lt;/p&gt;

#### Visual Studio Feedback System on 9/14/2019, 01:35 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions

#### Ge Ge solved on 7/25/2019, 09:04 PM, 0 votes: 

&lt;p&gt;Use VPN to finish the download.&lt;/p&gt;&lt;p&gt;If it doesn't work, go to Options &amp;gt; NuGet Package Manager &amp;gt; Package Sources, and delete "nuget.org" item (make a screen shot if you want). Restart VS 2019, problem solved. And then it won't start donwloading any more if you add the "nuget.org" back.&lt;/p&gt;

#### 419830883 solved on 7/9/2019, 08:43 PM, -3 votes: 

&lt;p&gt;This issue has been solved in 16.1.6,thanks for everyone!&lt;/p&gt;
</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38716</IssueID>
    <RepoID>1</RepoID>
    <Title>Add an analyzer, codefix for organize imports</Title>
    <Description>This came up during the design review for https://github.com/dotnet/roslyn/pull/38593

I'd like the ability to have an analyzer to report on unorganized imports with a code fix to automatically sort the usings.  Ideally the severity could be configured by editor config as well and used by fix all.

This will prevent comments like [this ](https://github.com/dotnet/roslyn/pull/38410#discussion_r320898797) from occurring so often :) as the sorting would be enforced automatically.

We should of course share the implementation of the code fix with the current sort usings command.
</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38715</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring to consolidate mis-matched accessibility modifiers on partial types</Title>
    <Description>Related to https://github.com/dotnet/roslyn/issues/36544

We would like to provide a code fix to consolidate the accessibility modifiers on partial types that have mismatched accessibility modifiers.

This would be a codefix for diagnostic id
1.  CS0262 for C# and
2.  BC30925 for VB

that would offer to consolidate the accessibility modifiers to any of the modifiers already specified on the partial type.</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38714</IssueID>
    <RepoID>1</RepoID>
    <Title>Refine diagnostic for switch expression that is not exhaustive</Title>
    <Description>Fixes #38571</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38713</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust syntax disambiguation for ref ternary.</Title>
    <Description>Fixes #38679</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38712</IssueID>
    <RepoID>1</RepoID>
    <Title>editorconfig doesn't detect vars or update notification type</Title>
    <Description>**Version Used**: 
29316.52.master

**Steps to Reproduce**:

1. Clone this repo https://github.com/gothinkster/aspnetcore-realworld-example-app
2. Right click on solution or project and click Add/Create EditorConfig (Intellicode) menu
3. Go to line 64 and toggle require Var vs explicit types and toggle notification from suggestion to warning to error.
4. Open Create.CS and startup.cs (both of these have vars)

**Expected Behavior**:
Error list shows error according to configuration in step 3

**Actual Behavior**:
It may find a var in create.cs but not startup.cs. Changes to the notification type from suggestion to error to warning doesn't have any impact. Changing true to false and back doesnt affect warning either.</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38711</IssueID>
    <RepoID>1</RepoID>
    <Title>Warning is not reported for a type shadowing a declaration from base interface.</Title>
    <Description>```

        [Fact]
        public void NestedTypes_33()
        {
            var source1 =
@"
interface I1
{
    interface I2
    { }
}

interface I3 : I1
{
    interface I2
    {
    }
}

class C1
{
    public interface I4
    { }
}

class C3 : C1
{
    public interface I4
    {
    }
}
";

            var compilation1 = CreateCompilation(source1, options: TestOptions.DebugDll,
                                                 parseOptions: TestOptions.Regular);

            compilation1.VerifyDiagnostics(
                // (23,22): warning CS0108: 'C3.I4' hides inherited member 'C1.I4'. Use the new keyword if hiding was intended.
                //     public interface I4
                Diagnostic(ErrorCode.WRN_NewRequired, "I4").WithArguments("C3.I4", "C1.I4").WithLocation(23, 22)
                );
        }
```</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38710</IssueID>
    <RepoID>1</RepoID>
    <Title>Add tests for method type inference</Title>
    <Description>Closes https://github.com/dotnet/roslyn/issues/37909

To answer @jaredpar's general question, by-value and `in` arguments contribute their r-value to type inference, and `ref` and `out` arguments contribute their l-value. Aside from that, there are some tweaks for lambdas and `out` vars.</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38709</IssueID>
    <RepoID>1</RepoID>
    <Title>Require /unsafe flag for SkipLocalsInitAttribute</Title>
    <Description>
    </Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38708</IssueID>
    <RepoID>1</RepoID>
    <Title>IntroduceVariableCodeRefactoring Crash</Title>
    <Description>```
System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.
Parameter name: position
   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)
   at Microsoft.CodeAnalysis.CodeRefactoringHelpers.IsNodeUnderselected(SyntaxNode node,TextSpan selection)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitializeAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GenerateAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
```

The selection here appears to be a little finicky, it need to be in the middle of some kind of nested expression, I think? Here's a screenshot of my selection:
![image](https://user-images.githubusercontent.com/2371880/64991005-db1ef580-d885-11e9-8cf5-0d61bcce5a57.png)
As far as I can tell, the offer to rename the method is unrelated, it's just showing that as I was simplifying my repro.

Raw code as well:
```cs
using System;
class C {
    public void M()
    {
        Console.WriteLine("Hello world");
        Console.WriteLine(new C());
    }
}
```

VS Version 29312.127 Int Preview</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38707</IssueID>
    <RepoID>1</RepoID>
    <Title>Show Parameter Info should show the target type of an assignment</Title>
    <Description>**Version Used**: 16.3-preview3

This is a feature request. It feels RHS of assignments would be easier to write if I could see what type of thing is expected to be assigned. It's possible that this is already available via a different command, or that this has been considered and rejected before. Please let me know if that's the case.

```cs
class C
{
    string Prop { get; set; }
    void M()
    {
         // ctrl+shift+space here should show me the type of the assignment target (string)
        Prop = [||];
    }
}
```

This might actually just amount to adding a command which when used on the RHS of an assignment, shows quick info for the LHS expression symbol.</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38706</IssueID>
    <RepoID>1</RepoID>
    <Title>VS Search should disambiguate types with more information</Title>
    <Description>**Version Used**: 
Visual Studio 2019 16.3 Preview 3

**Steps to Reproduce**:

1. Open a solution that has a project with 4 different 'Logger' types.
2. Ctrl+Q and search for 'Logger'

**Expected Behavior**:
All four 'Loggers' show up and are distinguishable.

**Actual Behavior**:
There are 4 identical 'Logger' class entries.

![image](https://user-images.githubusercontent.com/5387680/64984626-19adb380-d878-11e9-98d2-6dc60b4ad34c.png)

Some ways address this:

- Add namespace to the information shown
- Add part of the directory in addition to the file name
- Migrate preview experience from 'GoTo'.

This will probably require PM input to solve.

**cc:** @mikadumont migrated from: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/972547</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38705</IssueID>
    <RepoID>1</RepoID>
    <Title>Editorconfig naming convention for tuple element names</Title>
    <Description>Now that we have settled on the guidance of pascal case for tuple element names (https://github.com/dotnet/corefx/pull/35595, https://github.com/dotnet/corefx/issues/33553), it would be nice to have a `tuple_element` symbol kind to which a naming convention can be applied.

https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions?view=vs-2019#kinds-of-symbols</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38704</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38703</IssueID>
    <RepoID>1</RepoID>
    <Title>Bump up flow analysis utilities version</Title>
    <Description>Use the latest flow analysis utilities package</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38702</IssueID>
    <RepoID>1</RepoID>
    <Title>The compiler produces code with useless redundant instructions for `(X, Y) = (x, y)`</Title>
    <Description>**Version Used**: Visual Studio 2019 (16.2.5), dotnet SDK v2.2.402

**Steps to Reproduce**:

1. `dotnet new console`
2. Create `Point.cs` file with `Point` class from [documentation](https://docs.microsoft.com/en-us/dotnet/csharp/tuples#deconstruction)
3. `dotnet build -c Release`
4. Open the compiled DLL in the ILSpy and inspect `Point` class constructor.

**Expected Behavior**: The compiler will produce short and efficient code

**Actual Behavior**: The compiler produces code with useless redundant instructions

The code of example from documentation:
```
public class Point
{
    public int X { get; set; }
    public int Y { get; set; }

    public Point(int x, int y) =&gt; (X, Y) = (x, y);
}
```

The constructor compiles to:
```
.method public hidebysig specialname rtspecialname 
	instance void .ctor (
		int32 x,
		int32 y
	) cil managed 
{
	// Method begins at RVA 0x2074
	// Code size 29 (0x1d)
	.maxstack 3
	.locals init (
		[0] int32,
		[1] int32,
		[2] int32
	)

	IL_0000: ldarg.0
	IL_0001: call instance void [System.Runtime]System.Object::.ctor()
	IL_0006: ldarg.1
	IL_0007: stloc.0
	IL_0008: ldarg.2
	IL_0009: stloc.1
	IL_000a: ldarg.0
	IL_000b: ldloc.0
	IL_000c: dup
	IL_000d: stloc.2
	IL_000e: call instance void RoslynBug.Point::set_X(int32)
	IL_0013: ldarg.0
	IL_0014: ldloc.1
	IL_0015: dup
	IL_0016: stloc.2
	IL_0017: call instance void RoslynBug.Point::set_Y(int32)
	IL_001c: ret
} // end of method Point::.ctor
```
This is equivalent of:
```
public Point(int x, int y)
{
	int num2 = X = x;
	num2 = (Y = y);
}
```

But I was expected to get a result similar to this:
```
public Point(int x, int y)
{
    X = x;
    Y = y;
}
```
Which compiles to a shorter (and I assume more efficient code):
```
.method public hidebysig specialname rtspecialname 
	instance void .ctor (
		int32 x,
		int32 y
	) cil managed 
{
	// Method begins at RVA 0x2072
	// Code size 21 (0x15)
	.maxstack 8

	IL_0000: ldarg.0
	IL_0001: call instance void [System.Runtime]System.Object::.ctor()
	IL_0006: ldarg.0
	IL_0007: ldarg.1
	IL_0008: call instance void RoslynBug.Point::set_X(int32)
	IL_000d: ldarg.0
	IL_000e: ldarg.2
	IL_000f: call instance void RoslynBug.Point::set_Y(int32)
	IL_0014: ret
} // end of method Point::.ctor
```

The complete example is here: https://github.com/Konard/RoslynBug
</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38701</IssueID>
    <RepoID>1</RepoID>
    <Title>Debugger* attributes are not applied to compiler generated classes for lambdas</Title>
    <Description>**Version Used**: The one shipped with VS 16.2.5

**Steps to Reproduce**:

1. Create a console application with the following code:
``` cs
using System;
using System.Diagnostics;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            var test = new TestedClass();

            // Single step into these calls
            test.TestLambdaWithoutCapture();
            test.TestLambdaWithCapture();
        }

        public static void Output(string text)
        {
            // Break here and inspect the call stack
            Console.WriteLine(text);
        }
    }

    [DebuggerStepThrough]
    class TestedClass
    {
        public void TestLambdaWithoutCapture()
        {
            Action action = () =&gt; Program.Output("Test");
            action();
        }

        public void TestLambdaWithCapture()
        {
            string text = "Test";
            Action action = () =&gt; Program.Output(text);
            action();
        }
    }
}
```

2. Place breakpoints at the commented lines.
3. Step into the method calls in `Main`.
4. For each call, inspect the call stack once the breakpoint in the `Output` method is hit.

**Expected Behavior**:

- Single stepping into the methods should put the execution pointer directly to the `Output` method.
- Inspecting the call stack in the `Output` method should not show any method of the `TestedClass`.

**Actual Behavior**:

- Single stepping into the methods puts the exectuion pointer inside the lambda expressions.
- Inspecting the call stack in the `Output` method shows a method with "AnonymousMethod" in its name.

**Additional Information**:

- I've added both a test with and without capture variables because the compiler before Roslyn generated static methods (which would not show the bug) for the non-capture case. Although Roslyn doesn't do this right now, I added the case to be sure.
- If you apply the "IDE0039 Use local function" refactorings that are shown for the example code, the tests work fine (because static methods are generated for the local functions, instead of the classes that are generated for lambdas).
- I think all three attributes (`DebuggerStepThroughAttribute`, `DebuggerHiddenAttribute` and `DebuggerNonUserCodeAttribute`) should be propagated to the generated class. And it should propagate from attributes applied to the method as well as attributes applied to the class.
- Similar to #4521</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38700</IssueID>
    <RepoID>1</RepoID>
    <Title>"Go to base" on override says "The symbol has no base"</Title>
    <Description>**Version Used**: Version 16.4.0 Preview 2.0 [29315.5.master]

**Steps to Reproduce**:

```c#
class F
{
    public override string ToString() // caret on ToString here
    {
        return base.ToString();
    }
}
```

With the caret on `ToString` in the method signature, invoke "Go to base". 

**Expected Behavior**:

Does the same as "Go to definition" on `base.ToString()` call (i.e. MAS).

**Actual Behavior**:

Dialog appears saying:

&gt; The symbol has no base.</Description>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38699</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/09/2019</CreatedDate>
    <ClosedDate>15/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38698</IssueID>
    <RepoID>1</RepoID>
    <Title>Make sure the NuGet package download complete notification is not cancelled</Title>
    <Description>Cancelling the notification would result in a background task permanently appearing in the Task Status Center in Visual Studio.

🔗 See https://developercommunity.visualstudio.com/content/problem/576978/%E6%AD%A3%E5%9C%A8%E4%B8%8B%E8%BD%BD%E7%94%A8%E4%BA%8Enugetorg%E7%9A%84intellisense-index.html</Description>
    <CreatedDate>14/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38697</IssueID>
    <RepoID>1</RepoID>
    <Title>Broken Links on Building Testing and Debugging Wiki Page</Title>
    <Description>On https://github.com/dotnet/roslyn/wiki/Building-Testing-and-Debugging the following links are broken:

![image](https://user-images.githubusercontent.com/14079228/64913314-9e2ef380-d70b-11e9-8d9c-7f5d5a554008.png)

Happy to submit a PR to fix but I don't know where they're supposed to point to 😀
</Description>
    <CreatedDate>14/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38696</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190913.3
- **Date Produced**: 9/13/2019 11:47 PM
- **Commit**: 7b731032220c21a3ed0021c72757b1f3122579b2
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19463.3

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)





</Description>
    <CreatedDate>14/09/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38695</IssueID>
    <RepoID>1</RepoID>
    <Title>Export limited semantic model in liveshare scenario to avoid null ptrs</Title>
    <Description>Export a compilation factory for C#_LSP and VB_LSP.  This prevents the semantic model from being missing.

An additional side benefit is that if a generic type has been defined in a file opened on the guest, brace completion works for `&lt;`.

Long term solution for these mainly typing/syntactic services is TBD.

https://devdiv.visualstudio.com/DevDiv/_workitems/edit/982486</Description>
    <CreatedDate>14/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38694</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable directive changes not considered top level edit</Title>
    <Description>**Version Used**: 16.4 P1 (29312.127 master)

**Steps to Reproduce**:
Create two files in a .net core 3 project
Class1.cs
```cs
namespace ConsoleApp12
{
    class Class1
    {
        public static void SomeMethod(string someString)
        {

        }
    }
}
```
Program.cs
```cs
#nullable enable

namespace ConsoleApp12
{
    class Program
    {
        static void Main(string[] args)
        {
            string? someString = null;
            Class1.SomeMethod(someString);
        }
    }
}
```

Add `#nullable enable` to Class1.cs
Go back to Program.cs and note that there is no warning on calling Class1.SomeMethod(someString) may be null.

Make an edit to anywhere in Program.cs and note that the warning appears after the edit.

**Expected Behavior**:
The warning should appear without needing to make an edit in Program.cs

Through debugging, it appears that the nullable edit is [not being considered a top level edit](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Workspace/Solution/DocumentState.cs,283).  Since the nullable annotation is trivia, `SyntaxTree.IsEquivalentTo` is returning that the trees are equivalent.
</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38693</IssueID>
    <RepoID>1</RepoID>
    <Title>Use SHA256 (default source hash) for hashing privateimplementationdefails and MVID</Title>
    <Description>Satoshi would be proud.
Fixes #24737
</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38692</IssueID>
    <RepoID>1</RepoID>
    <Title>Workaround to unblock builds</Title>
    <Description>Currently we cannot publish assets from a build in devdiv to a feed in dnceng. We need this change to unblock builds while https://github.com/dotnet/arcade/issues/3942 is fixed and publish to blob feeds in the meanwhile.</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38691</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>14/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38690</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a very simple ISourceGenerator API</Title>
    <Description>This defines a first prototype API surface area for us to try building on. This PR isn't necessarily to collect feedback as much as so @angocke and @chsienki can leave comments describing the various things we thought about and rejected that ended us up here.</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38689</IssueID>
    <RepoID>1</RepoID>
    <Title>Delete the checkbox to control nullable analysis in the IDE</Title>
    <Description>At this point, the nullable support in the semantic model seems stable, and there's no reason for somebody to manually turn this on since any project that is using nullable will turn it on automatically.</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38688</IssueID>
    <RepoID>1</RepoID>
    <Title>Additional logging in the compiler server</Title>
    <Description>The compiler is occasionally crashing on non-Windows operating systems when calling `Mutex.ReleaseMutex`. The exception indicates that `WaitOne` and `ReleaseMutex` call are happening on different threads but that is not possible in the implementation. Even though the code occurs in an `async` method there is no `await` between the two calls hence it should all execute on the same thread. 

The runtime team cannot see a way this can be happening. They have requested that we add more logging here to expose the thread ids on both operations to help them dig into this issue further.

Related:
- https://github.com/dotnet/coreclr/issues/26659
- https://github.com/dotnet/roslyn/issues/37974</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38687</IssueID>
    <RepoID>1</RepoID>
    <Title>[PROPOSAL] Add API to allow symbol changes after document changes</Title>
    <Description>The motivation for this API is to allow a workspace context to apply symbol changes after document changes. Currently all that is supported are namespace and named type syncing. We don't want these to be performed on all document operations, but we do believe Roslyn has the most context to apply these changes and should provide an appropriate API. 

This PR is to discuss the API shape, naming, and comments that help define the behavior. A separate PR will be done to do the implementation and fine grained changes that are made. </Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38686</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected value exception with switch expression in error scenarios</Title>
    <Description>**Version Used**: master

**Steps to Reproduce**:

```cs
using System;
#nullable enable
public static class C {
    static void M(object p) {
       // either of these would crash
        _= (C)(o switch { _ =&gt; default }); 
        _= (C)(o switch { _ =&gt; throw null }); 
    }
}
```

See the [stack trace](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABATARgFgAoAYgDsBXAG2omGrgAI5z7GTsBmJ7fANl64mAYSYBvEk2m8BvACxMAsgAoA9sABWcAMYwmOgJQSpMswH0AvCpGGVBplADuASxg6AFuKZWAfDA8ENScmKlomAF9DAG5TaQiSCKA)

([sharplab repro](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEBMBGAsAKAMQB2ArgDYkTAlwAEcBFVuKAzNShgGxtrUDC1Ab1zURbTmwAs1ALIAKAPbAAVnADGMavICUg4aNEB6A7QCWMABaJNAM2oW4UGgHd5pACbVVCaOb36RAPoAvNSyvFoK1FBOZqrmgtQB1EEAfNRucNYQpBoAvloA3NR+/sGh4ZHRsfECiclpFgjyTtTEZNT5RSW5uLlAA=))

**Expected Behavior**: no thrown exception

**Actual Behavior**: `System.InvalidOperationException: Unexpected value 'SwitchExpression' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'`

Discovered while working on new(). Basically, this can occur with any untyped arm which yields a valid conversion to *any* type. We should either handle the conversion in the error case or return NoConversion when the target type is invalid. If we decide to do the former, it means an unconverted switch expression *can* sneak into the next stage and we may need to take it into account everywhere.</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38685</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider forcing all relevant compilations into /highentropyva</Title>
    <Description>Are there good reasons why we wouldn't force all 64-bit managed compilations into emitting the HighEntropyVA DLL characteristic? The compiler already forces the dynamic base characteristic. I'm not aware of a good reason to allow a managed compilation to not enable high entropy VA (as doing so provides no substantive gain, AFAIK, such as a perf improvement in exchange for the regression in security). 

In emerging Dotnet/AOT (ahead of time compilation) scenarios, this bit on a managed assembly isn't relevant, as it is automatically applied when the image that is actually used to load the binary is produced: https://github.com/dotnet/coreclr/pull/20444/files 

Absent some contrary rationale, my suggestion is to make a similar change to Roslyn that would forcibly add this DLL characteristic to 64-bit exe compilations.

This would make the managed runtime a more secure place. We would avoid the next occurrence of discovering that some emergent &lt;HighEntropyVA&gt; targets property does not have a secure default, and help eliminate some complexity that exists in security analysis of managed portable executables.

```
            return new Cci.ModulePropertiesForSerialization(
                //  elided...
                dllCharacteristics: GetDllCharacteristics(enableHighEntropyVA: true, compilationOptions.OutputKind == OutputKind.WindowsRuntimeApplication),
```</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38684</IssueID>
    <RepoID>1</RepoID>
    <Title>.editorconfig warning/error support</Title>
    <Description>Hello,
I [asked a question in the .NET community standup yesterday](https://youtu.be/FDDZzxxERFI?t=1847) about the .editorconfig warnings work that was demoed. My question was whether it was considered how this feature would interact with warnings/errors configured in MSBuild (csproj). I believe the response was that using .editorconfig allowed the configuration to be more easily shared between projects than a csproj implementation, since .editorconfig applies in a "cascading" manner and thus common settings can be applied to multiple projects. That makes total sense, and I completely agree with the design goal. 

Have you considered using [Directory.Build.props](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019) instead? Directory.Build.props would allow the settings to cascade/inherit in the same way that .editorconfig does, and already integrates with MSBuild, so wouldn't require any extra work to integrate.

.editorconfig is a wonderful thing, but it seems that up to this point it is focused on code style, with which warnings/errors don't totally align. This feature will be duplicating functionality that has historically been managed through the MSBuild (csproj). I would expect a command line build to be producing the same warnings/errors as the IDE, so an .editorconfig implementation would require adding some smarts to the existing MSBuild scripts to understand .editorconfig.

It's hard for me to find documentation on some of the MSBuild properties, but some of the ones I can find/remember are:
- **NoWarn** (error list) suppress listed warnings. These warnings will simply not be emitted by the compiler.
- **WarningsAsErrors** (error list) a list of specific warnings to treat as errors.
- **TreatWarningsAsErrors** (true/false) treats all warnings as errors. Defaults to false.
- **WarningsNotAsErrors** (error list) can be used with TreatWarningsAsErrors to not elevate certain warnings to errors. This is a lesser-known property, because the VS properties UI didn't expose it, which is unfortunately because it is very useful.
- **WarningLevel** (0-4) Not really sure how this works, but I think the default is 4 which enables all warnings.

The way I like to setup projects is to turn on TreatWarningsAsErrors, then exclude certain errors `&lt;WarningsNotAsErrors&gt;CS1591,CS0612,CS1030`. Those 3 are a few that I actually care about, but the community could probably provide a more complete set. These will continue to surface as warnings, so won't "break the build".

CS1591 : missing doc comments on public members. I turn this on because too many team members will provide empty comments to suppress the error, which is harder to detect and fix than a warning. There are a lot of related warnings (like [CS1573](https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1573)) that might also be reasonable to exclude.

CS0612: warnings about obsolete usage. Debatable if this should be an error, but I find that sometimes I "Obsolete" something, but continue to use it internally. I think CS0618 is similar

CS1030: explicit warning pragmas (#warning). I like to use these as more aggressive "TODO". Elevating them doesn't make sense when #error also exists.</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>15/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38683</IssueID>
    <RepoID>1</RepoID>
    <Title>Add handling for unconventional implementation of events and properties when Default Interface Implementations are involved.</Title>
    <Description>Closes #34452.
Closes #34453.</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38682</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix formatting</Title>
    <Description>
    </Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>13/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38681</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190912.5
- **Date Produced**: 9/13/2019 5:59 AM
- **Commit**: 6003ee189f456c92a18b097f226d4927309def27
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19462.5

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>13/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38680</IssueID>
    <RepoID>1</RepoID>
    <Title>remote syntatic classification tagger for LSP work once experimentation is done</Title>
    <Description>remove https://github.com/dotnet/roslyn/pull/38364 once experiementation is done.</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38678</IssueID>
    <RepoID>1</RepoID>
    <Title>Register DocumentOptionsProvider in Workspace base class</Title>
    <Description>Register `IDocumentOptionsProviders` in the `Workspace` constructor so that all workspaces get support for .editorconfig parsing.</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38677</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>13/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38676</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>13/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38675</IssueID>
    <RepoID>1</RepoID>
    <Title>Add AnalyzerConfigOptionSet to get Option values from AnalyzerConfig</Title>
    <Description>Currently most of the CodeStyle diagnostic analyzers rely on receiving a `WorkspaceAnalyzerOptions` (an Internal type) so that they can get a `OptionSet` to pull option values from. For projects that have .editorconfig files these option value can now be pulled from `AnalyzerConfigOptions` (a Public type).

This PR adds a AnalyzerConfigOptionSet that will first try to pull the Option value from `AnalyzerConfigOptions` and fall back to the document's `OptionSet` when no value is found. This benefits environments that have .editorconfig files and run analyzers, but do not have permissions to create instances of `WorkspaceAnalyzerOptions`.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38674</IssueID>
    <RepoID>1</RepoID>
    <Title>Bulk configuration/suppression of analyzer diagnostics</Title>
    <Description>## User scenarios
Lot of internal discussions and external requests in the area of analyzer adoption have pointed to a need for a better _bulk diagnostic configuration_ story based on real world user scenarios, such as:

1. **Default severity configuration to reduce analyzer noise and remove analyzer adoption barriers**: I want to configure the default severity of all analyzer diagnostics (from every analyzer package that I have installed in my project) without having to configure every single diagnostic ID. For example, demote all analyzer diagnostics to be _suggestions by default_, so they are equivalent to IDE code style suggestions, which do not affect my CI builds and do not pollute my editor with squiggles and tons of warnings and errors. This breaks the analyzer adoption barrier as installing a new analyzer package has no drastic implications on my workflow. It allows me to opportunistically fix analyzer diagnostics whenever I want to address them and selectively promote individual diagnostic IDs that I want to execute in CI to warning/error severity with explicit diagnostic ID based configuration entries. This allows the end users to choose opt-in vs opt-out model for analyzer execution in CI.
2. **Category based configuration to prioritize buckets of analyzer diagnostics**: I want to configure all diagnostics with a specific diagnostic [category](http://source.roslyn.io/#Microsoft.CodeAnalysis/Diagnostic/DiagnosticDescriptor.cs,45), without having to manually identify and configure every single diagnostic ID in that category. For example, bump up all security rules to errors, demote all performance issues to suggestions, etc. These are extremely common operations during targeted code quality work such as security push, performance push, maintenance push, etc.
3. **Suppress all current and future analyzer diagnostics inside a specific file or folder**: say legacy code folders or documents based on extensions (for example, generated code with special extensions: https://github.com/dotnet/roslyn/issues/3705), etc. This issue has long been known as one of the biggest analyzer adoption barrier that needs an end user configuration point to reduce analyzer noise. Requiring end users to add custom autogenerated comments at top of their generated code files may not always be feasible or scalable and is also an unnecessary burden for customers. Performing a baseline operation  in Visual Studio (`Build and suppress active issues` command in `Analyze` menu) only suppresses diagnostics from current project/solution snapshot and also generates a very hard to maintain list of in-source suppressions (pragmas or suppress message attributes). 

## Difficulties with current support
Each of the above actions are very common when installing a new analyzer package, or doing targeted code analysis cleanup work (for example, security push, performance push, code maintenance push, etc.). [Current support for diagnostic configuration](https://docs.microsoft.com/visualstudio/code-quality/use-roslyn-analyzers) requires user to configure each diagnostic ID with a distinct configuration entry per diagnostic ID reported by every analyzer from all of the consumed analyzer packages. This approach becomes even more untenable with analyzer package upgrades, which generally brings in bunch of new analyzers and diagnostics IDs and requires the user to manually update their per-ID configuration lists to include the new diagnostic IDs.

## Design Proposal - editorconfig options for analyzer driver
In past, adding any such bulk diagnostic configuration support would have required providing new MSBuild and command line compiler switches or updating existing ones, which had a high implementation and design cost and higher risk of bugs/regressions. With the recently added support in [VS2019 16.3](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes-preview#16.3.0-pre.3.0) to pass in project's .editorconfig files into the compiler for analyzer configuration, implementing this feature has become considerably easier.

Proposal is to _allow end users to specify editorconfig options that are respected by the core analyzer driver in the compiler layer_. Proposed formats for analyzer driver options:

```
# Format 1 - configure default severity for all analyzer diagnostics
dotnet_analyzer_diagnostic.severity = error | warning | suggestion | silent | none

# Format 2 - configure default severity for analyzer diagnostics with a specific 'diagnostic_category'
dotnet_analyzer_diagnostic.&lt;%diagnostic_category%&gt;.severity = error | warning | suggestion | silent | none

# Format 3 - suppress all/category-based analyzer diagnostics for specific files/folders
dotnet_analyzer_diagnostic.suppress = true | false
dotnet_analyzer_diagnostic.&lt;%diagnostic_category%&gt;.suppress = true | false
```

Using the above supported formats, the user scenarios listed in this issue can be addressed with following simple configuration entries:
```
# Scenario 1 - switching all analyzer diagnostics to be suggestions by default, and promoting individual diagnostics to warning/error
[*.cs]
dotnet_analyzer_diagnostic.severity = suggestion
dotnet_diagnostic.CA1801.severity = warning
dotnet_diagnostic.CA1802.severity = error

# Scenario 2 - category based diagnostic configuration
[*.cs]
dotnet_analyzer_diagnostic.security.severity = error
dotnet_analyzer_diagnostic.correctness.severity = warning
dotnet_analyzer_diagnostic.performance.severity = suggestion

# Scenario 3 - suppress all analyzer diagnostics, except security ones, on my generated code
[*.MyGeneratedFileExtension.cs]
dotnet_analyzer_diagnostic.suppress = true
dotnet_analyzer_diagnostic.security.suppress = false
```

Possible future enhancements:
1. Allow bulk configuration of diagnostics from specific analyzer package or for all diagnostics with a specific diagnostic prefix, say `dotnet_analyzer_diagnostic.CA.severity = ...` would only configure diagnostics with a `CA` prefix. I suggest we don't add such a functionality until it is required and we can provide specific user scenarios where the other proposed formats are not sufficient.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38673</IssueID>
    <RepoID>1</RepoID>
    <Title>Spelling fixes</Title>
    <Description>
    </Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38672</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38671</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38670</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into master.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38669</IssueID>
    <RepoID>1</RepoID>
    <Title>Object favorites</Title>
    <Description>Result Provider changes needed to support object favorites. (The ability to pin properties and fields as favorites of a type in the EE windows.)</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38668</IssueID>
    <RepoID>1</RepoID>
    <Title>AD0001 (KeyNotFoundException) from AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer</Title>
    <Description>**Version Used**:
16.3.0 Preview 3.0

**Steps to Reproduce**:
```csharp
using System.Text;

internal static class C1
{
    public const int A = 42;
}

internal class C2
{
    public int A { get; set; }
}

internal class C3
{
    public string M(C2 c2)
    {
        var result = new StringBuilder();
        switch (c2.A)
        {
            case C1.A:
                result.Append("A");
                break;
            default:
                result.Append("*");
                break;
        }
        return result.ToString();
    }
}
```

**Expected Behavior**:
No AD0001

**Actual Behavior**:
```
Severity	Code	Description	Project	File	Line	Suppression State	Detail Description
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.Collections.Generic.KeyNotFoundException' with message 'The given key was not present in the dictionary.'.	…		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: …
IOperation: ExpressionStatement
SyntaxTree: C:\Users\…\Test.cs
SyntaxNode: result.Append("A"); [ExpressionStatementSyntax]@[319..338) (20,16)-(20,35)

System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.
   at System.Collections.Immutable.ImmutableDictionary`2.get_Item(TKey key)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeExpressionStatement(OperationAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c.&lt;ExecuteOperationAction&gt;b__54_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```
</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38667</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190911.7
- **Date Produced**: 9/12/2019 6:45 AM
- **Commit**: 8eb29ba860a3cfcfe68f9a8256caa7efc1f1aaba
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19461.7

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38666</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix OOM from SymbolUsageAnalysis</Title>
    <Description>We were allocating large number of BasicBlockAnalysisData instances during Merge operations when performing symbol usage analysis for locals/parameters, and holding onto these until the whole method has been analyzed before returning them to a shared pool. This approach works fine for most cases, except for extremely large methods with large number of local variables, such that the analysis needs multiple flow analysis iterations (and hence merges) over the CFG.
This PR fixes this issue by returning the allocated BasicBlockAnalysisData instances during Merge operations immediately back to the shared pool. I also added another optimization to reduce the size of tracked per-basic block analysis data by removing tracking locals as and when they go out of scope.

Fixes #38650</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38665</IssueID>
    <RepoID>1</RepoID>
    <Title>I hate the error highlighting on a case fallthrough error</Title>
    <Description>Dear d(otnet💻|iary📔), I hate the error highlighting on a `case` fallthrough error. It indicates to me that something is wrong with the pattern I have specified rather than a `case` fallthrough issue. I would much rather see a highlight on the `case` keyword to indicate that something is wrong with the `case` mechanism itself as opposed to the pattern used to select it. Maybe we all have an error highlighting system that we have to learn to steer in order to flourish. 🤔</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38664</IssueID>
    <RepoID>1</RepoID>
    <Title>Expression evaluator output differs for `is` type check involving generic interface type parameter covariance for value types</Title>
    <Description>**Version Used**: 

Visual Studio 2019 16.2 Preview 2
C# compiler version `3.2.0-beta2-19303-01 (c9689b7a)`

**Steps to Reproduce**:

```csharp
using System;
using System.Diagnostics;

namespace ReproCovarianceIssue
{
    interface IFoo&lt;out T&gt;
    {
    }

    class Foo&lt;T&gt; : IFoo&lt;T&gt;
    {
    }

    class Program
    {
        static void Main()
        {
            var foo = new Foo&lt;int&gt; { };
            Console.WriteLine(foo is IFoo&lt;object&gt;);

            // Eval "foo is Foo&lt;object&gt;" in the Immediate Window or Watch Window.
            Debugger.Break();
        }
    }
}
```

**Expected Behavior**:

Console prints `false` and debugger prints `false` when evaluating `foo is IFoo&lt;object&gt;`.

**Actual Behavior**:

Console prints `false` and debugger prints `true` when evaluating `foo is IFoo&lt;object&gt;`.

![image](https://user-images.githubusercontent.com/7324746/64753533-6c821680-d4d8-11e9-92da-f6f75772d60e.png)</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>13/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38663</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38662</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38661</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38660</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into master.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38659</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38658</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38657</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into release/dev16.4-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38656</IssueID>
    <RepoID>1</RepoID>
    <Title>Change the automation type for inline rename dialog</Title>
    <Description>JAWS currently will not read the name description if the automation type is Pane. The Inline Rename dialog is pretty custom in functionality, since it doesn't behave exactly like a pane, so moving to custom makes sense. It also allows JAWS to read the current automation name, which includes instructions on how a user can focus the dialog with keyboard. </Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38655</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix a memory leak in BackgroundCompiler</Title>
    <Description>This causes us to hold on to compilations after solution is closed in VS.
@heejaechang @jasonmalinowski @sharwell  @dotnet/roslyn-ide </Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38654</IssueID>
    <RepoID>1</RepoID>
    <Title>Update version and publish data for 16.4 P1 snap</Title>
    <Description>
    </Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38653</IssueID>
    <RepoID>1</RepoID>
    <Title>Migrate to new output window API</Title>
    <Description>Use the new output window API </Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38652</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38651</IssueID>
    <RepoID>1</RepoID>
    <Title>Containing Type and Containing Member in FAR are unknown in F# projects</Title>
    <Description>**Version Used**: 
Master 29311.136 + Vsix from (InternalServer)\ContainingMemberAndContainingTypeColumns 
**Steps to Reproduce**:

1. Create a new F# Console App (.NET Core)
2. Right click argv
3. Select Find all references

**Expected Behavior**:
References are shown with all info
**Actual Behavior**:
Containing type and member are set as unknown

![image](https://user-images.githubusercontent.com/10537189/64743406-a8a38000-d4b4-11e9-856b-6d9e8a54c327.png)
</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38650</IssueID>
    <RepoID>1</RepoID>
    <Title>OOM in SymbolUsageAnalysis when analyzing large methods</Title>
    <Description>**Version Used**: 16.3 preview3

One of the dump files provided in https://developercommunity.visualstudio.com/content/problem/672009/live-analysis-eats-up-memory-resulting-in-vs-crash.html points to an OOM from SymbolUsageAnalysis for a very large method (CFG with around 1000 basic blocks) and large number of local variables. I also have an internal repro (cannot be shared) where I get the same OOM.
</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38649</IssueID>
    <RepoID>1</RepoID>
    <Title>Go-To-Member not finding members</Title>
    <Description>Using go-to-all with the `m` filter will occasionally not find any members whatsoever. I haven't found a consistent repro for this yet, but when it starts it repros continuously. Repros on Version 16.4.0 Preview 1.0 [29310.158.master]

</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38648</IssueID>
    <RepoID>1</RepoID>
    <Title>Naming Styles options page accessibility fixes</Title>
    <Description>Ensures there are Names for screen readers applied to the datagrid and datagrid items in the Naming Styles options dialogs. Found these issues by running the dialog through Keros.</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38647</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix crash when Nullable&lt;T&gt; creation takes dynamic argument</Title>
    <Description>Closes #38575

I figured that we should handle NREs reported by customers by at least enabling nullable in the offending method.</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>13/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38646</IssueID>
    <RepoID>1</RepoID>
    <Title>Add nullable-annotated Debug.Assert</Title>
    <Description>Adds the definitions for the nullable attributes to the compiler and creates an
annotated Debug.Assert</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38645</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't include nullable type information for object creation completion</Title>
    <Description>The type inferrer now includes nullable information, but we don't always want to include that. Nullability is not useful for object creation, since you can't create a new `object?`. 

Fixes #38508 

</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38644</IssueID>
    <RepoID>1</RepoID>
    <Title>IntroduceLocal should not be offered on a local declaration</Title>
    <Description>Repro:
1. put the cursor on the local name in a local declaration
2. invoke the lightbulb

I expect InlineTemporary rather than IntroduceLocal, but IntroduceLocal is offered and it is at the top.
We could either not offer IntroduceLocal in that scenario, or at least bump it down.
</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38643</IssueID>
    <RepoID>1</RepoID>
    <Title>3.4.0 Compiler Toolset does not allow comparing to "default"</Title>
    <Description>**Version Used**: 
Microsoft.Net.Compilers.Toolset v3.4.0-beta1-19456-03

**Steps to Reproduce**:

1. Create a new console app with

```C#
class Program
{
    static void Main(string[] args)
    {
        var x = new object();
        if (x != default)
        {
            Console.WriteLine("Hello world");
        }
    }
}
```

2. Reference the 3.4.0 toolset package

```xml
 &lt;ItemGroup&gt;
    &lt;PackageReference Include="Microsoft.Net.Compilers.Toolset"
        Version="3.4.0-beta1-19456-03"
        PrivateAssets="all"/&gt;
  &lt;/ItemGroup&gt;
```

3. Compile and see the failure

Program.cs(10,17): error CS0019: Operator '!=' cannot be applied to operands of type 'object' and 'default' 

This compiles using `Microsoft (R) Visual C# Compiler version 3.4.0-beta1-19417-02 (64f75cda)` that's shipped with a SDK, but not using `Microsoft (R) Visual C# Compiler version 3.4.0-beta1-19456-03 
(3c865821)` 

</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38642</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't warn about empty initializers on nullable properties in object initializers</Title>
    <Description>Closes #38060</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38641</IssueID>
    <RepoID>1</RepoID>
    <Title>Order of evaluation for string concatenation still does not follow C# specification</Title>
    <Description>**Version Used**: VS2019.3 Preview 3 / Roslyn 3.3.0-beta2

#35006 claims to have fixed #522, but the new behavior implemented does not match the C# specification either.

**Expected Behavior**:
If I understood the specification correctly, the + operator applied to `object + string` should:
  1. Evaluate the left-hand side as an object
  2. Evaluate the right-hand side as a string
  3. Call `ToString` on the object in order to convert it to a string
  4. Concatenate the two strings

**Actual Behavior**:
Starting in Roslyn 3.3.0-beta2, the actual behavior no longer matches the specification even in cases with only two operands (the old behavior only differed from the specification when there were more than two operands, see #522 for details).
The new implemented behavior is:
  1. Evaluate the left-hand side as an object
  2. Call `ToString` on the object in order to convert it to a string
  3. Evaluate the right-hand side as a string
  4. Concatenate the two strings

[Full example for 2 operands on SharpLab](https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAICYCMBYAUAAkP1QGZj18BZATwGEAbAQwGdm8j8BvdjojdHry6ChfTAE4AFFACmAd3y1JABgCU+RPgDiM4AGVgYAJZQA5pNWqA3CI4BfW2IBs+A8bPbdbk+fXcCohyoEpIARDr6hj4WodaOQqgA7PihAB6hNgFCDln4OSIYiiL+8WAyjHAA9lD01PgmwPWZ8cRkSg31qi3+gRzAABZGzAB0RvgAvE0tQSEAJKGyCkqcRnaqsZmB+blBZJUAbjJgxnAyxJjK+AAqld5mFt3TYlLzy6uqwzd3vhtPhEn1T63KL3OI7Ig5ex4IA=)

**More than two operands**:
The expected behavior gets more tricky when there are multiple operands involved.
For
```
new C(0) + GetString() + new C(1)
```
The `+` operator groups left-associative, so we're evaluating `(new C(0) + Space()) + new C(1)`. The outer `+` first evaluates the LHS, so from the spec I would expect the evaluation order:
 * `new C(0)`
 * `GetString()`
 * `C(0).ToString()`
 * `new C(1)`
 * `C(1).ToString()`
But that's not what the Roslyn master currently does; it instead results in:
```
new C(0)
C(0).ToString()
GetString()
new C(1)
C(1).ToString()
```
Effectively, Roslyn master immediately converts the non-string to string, before even evaluating the other argument to `string.op_Addition(object, string)`.
[Full example for 3 operands on SharpLab](https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAICYCMBYAUAAkP1QGZj18BZATwGEAbAQwGdm8j8BvdjojdHry6ChfTAE4AFFACmAd3y1JABgCU+RPgDKAB0YBjGZPWbZCpZlWqA3CNHEJx2wXtipNu6NSOzilSfxJXQMjAN8LKw8XIQBfT0JvADZtYDAASygAc209Q2NhaNdvKQAiYLzVEqjXPgB2fBKG53s4wtaRDEURblx4sBlGOAB7KHpqfAzgCed44jIlSYnVWZ6awmAACzTmADo0/ABeadmOYskAEhLwyU40mMrq0XbC07IhgDcZMHS4GQdlfAAFSGWlSGUyxhWJzcFxKSlu9x2wNB6SyxiqzTWqHqaSRILBaMesRErSAA==)

It gets even more interesting if we use parentheses to re-group the concatenation:
```
Console.WriteLine(new C(0) + (GetString() + new C(1)));
```
Now from the spec I would expect this evaluate as in `op_Addition(object, op_Addition(string, object))`, so:
* `new C(0)`
* `GetString()`
* `new C(1)`
* `C(1).ToString()`
* `C(0).ToString()`
Roslyn master evaluates this as:
```
new C(0)
C(0).ToString()
GetString()
new C(1)
C(1).ToString()
```

So my takeaway is: The old compiler was optimizing string concatenation in a way that doesn't follow the language spec; the new compiler is optimizing string concatenation further in a way that still doesn't follow language spec.
Though arguably this time one could say that it's the spec that is broken. The new compiler behavior intuitively makes sense: every object is immediately converted to string, before evaluating any further operands.

@gafter @canton7 </Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38640</IssueID>
    <RepoID>1</RepoID>
    <Title>Assert in OperationExtension.GetValueUsageInfo for code with switch expressions</Title>
    <Description>**Version Used**: Latest master sources

**Steps to Reproduce**:

1. Open Roslyn.sln and F5
2. Create a C# class library project with switch expression in the new VS instance

**Actual Behavior**:
Following assert fires:

https://github.com/dotnet/roslyn/blob/af9741b029487cec82fc3232c6821a45e9f16d9c/src/Workspaces/Core/Portable/Extensions/OperationExtensions.cs#L83

We need to handle recently added `Microsoft.CodeAnalysis.Operations.CSharpLazySwitchExpressionArmOperation`

```
 	System.dll!System.Diagnostics.AssertWrapper.ShowMessageBoxAssert(string stackTrace, string message, string detailMessage)	Unknown
 	System.dll!System.Diagnostics.DefaultTraceListener.Fail(string message, string detailMessage)	Unknown
 	System.dll!System.Diagnostics.DefaultTraceListener.Fail(string message)	Unknown
 	System.dll!System.Diagnostics.TraceInternal.Fail(string message)	Unknown
 	System.dll!System.Diagnostics.Debug.Fail(string message)	Unknown
&gt;	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.OperationExtensions.GetValueUsageInfo(Microsoft.CodeAnalysis.IOperation operation) Line 83	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.OnReferenceFound(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.IOperation operation) Line 101	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.VisitDeclarationPattern(Microsoft.CodeAnalysis.Operations.IDeclarationPatternOperation operation) Line 280	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.DeclarationPatternOperation.Accept(Microsoft.CodeAnalysis.Operations.OperationVisitor visitor) Line 7098	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(Microsoft.CodeAnalysis.IOperation operation) Line 36	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationWalker.VisitOperationArrayElement&lt;Microsoft.CodeAnalysis.IOperation&gt;(Microsoft.CodeAnalysis.IOperation operation) Line 25	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray&lt;Microsoft.CodeAnalysis.IOperation&gt;(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; operations) Line 19	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(Microsoft.CodeAnalysis.IOperation operation) Line 47	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitchExpressionArm(Microsoft.CodeAnalysis.Operations.ISwitchExpressionArmOperation operation) Line 8318	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.BaseSwitchExpressionArmOperation.Accept(Microsoft.CodeAnalysis.Operations.OperationVisitor visitor) Line 7782	C#

```
</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38639</IssueID>
    <RepoID>1</RepoID>
    <Title> vbc crashes on certain uses of containing method in constructor of DefaultParameterValueAttribute</Title>
    <Description>**Version Used**: vbc 3.2.1-beta4-19408-03 (2fc6a049) with Visual Studio 2019 16.2.5

**Code to Reproduce**:
```
Module Program
    Sub Main()
    End Sub

    Sub A(&lt;System.Runtime.InteropServices.DefaultParameterValue(A)&gt; b As Integer)
    End Sub
End Module
```

**Expected Behavior**:
```
test.vb(5) : error BC30491: Expression does not produce a value.

    Sub A(&lt;System.Runtime.InteropServices.DefaultParameterValue(A)&gt; b As Integer)
                                                                ~
```
This is the error produced when the name of any other Sub is used in place of `A` in the attribute constructor.

**Actual Behavior**:
vbc.exe crashes with `Process is terminated due to StackOverflowException.`
When Visual Studio begins to analyze code that causes this, it displays the "unrecoverable process error" banner and/or crashes.

**Further Reference**:
https://docs.microsoft.com/en-us/visualstudio/ide/not-in-toc/visual-studio-unrecoverable-process-error?view=vs-2019
</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38638</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider representing nullable flow state as: MaybeNull, NotNull, or T</Title>
    <Description>Consider adding a distinct nullable flow state, T, to allow distinguishing "maybe null when the type allows null" from "maybe null even when type disallows null".
```C#
internal enum NullableFlowState : byte
{
    NotNull,  // not null
    T,        // maybe null when type allows
    MaybeNull // maybe null even when type disallows
}
```
</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38637</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract internal class to an internal interface</Title>
    <Description>Customer request copying here:

&gt; The VS implementation doesn't copy documentation and only works for public members. (Often we have an internal class with all internal methods that we would like to extract to an internal interface. VS should look for dependencies and change access modifiers automatically where necessary).
Right now these limitations mean I either copy paste and do it all manually, or do some weird extra step like find replacing internal to public etc. </Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38636</IssueID>
    <RepoID>1</RepoID>
    <Title>Inline method</Title>
    <Description>Customer Request Copying Here

&gt;It should propose to replace method calls with content of the method and delete the method definition (this is really tedious to do manually):

![image](https://user-images.githubusercontent.com/46729679/64723073-a295ab00-d484-11e9-9f49-2983cc66df44.png)

</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38679</IssueID>
    <RepoID>1</RepoID>
    <Title>Parsing issue on conditional ref operator</Title>
    <Description>With the classic conditional operator, you can use an 'is' condition without any issue:
`var x = o1 is string ? o2 : o3;`
If you use the conditional ref operator `var x = o1 is string ? ref o2 : ref o3;`
 the "string ?" part is interpreted as a nullable type and the compiler emits an error on the first "ref".</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38635</IssueID>
    <RepoID>1</RepoID>
    <Title>Chang constructor of method type</Title>
    <Description>Customer Request Copying Here

&gt;Propose to change constructor of method type. It should change the type of the constructor parameter:

![image](https://user-images.githubusercontent.com/46729679/64722958-63675a00-d484-11e9-9a13-88a309d7643c.png)
</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38634</IssueID>
    <RepoID>1</RepoID>
    <Title>Change field type</Title>
    <Description>Customer Request Copying Here

&gt;Propose to change field type of the field or parameter: 

![image](https://user-images.githubusercontent.com/46729679/64722870-29965380-d484-11e9-9b2f-9d835d4c42eb.png)
</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38633</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide an option to auto fill switch cases based on switch parameter</Title>
    <Description>Customer Request Copying Here

&gt;Provide an option to auto fill switch cases based on switch parameter. </Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38632</IssueID>
    <RepoID>1</RepoID>
    <Title>Format - add new line between method definitions</Title>
    <Description>Customer Request Copying Here

&gt;On format file, ctrl K ctrl D, add new line between method definitions and remove additional whitespace and new lines between sections.</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38631</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete a catch with default exception and braces</Title>
    <Description>Customer Request Copying Here

&gt;Complete a catch with default exception and braces. Today only fill out the catch keyword. </Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38630</IssueID>
    <RepoID>1</RepoID>
    <Title>Format Method definition and calls</Title>
    <Description>Customer Request Copying Here

&gt;Method definition and calls - members on new line with formatting (Ctrl+K, Ctrl+D). There is no option to keep all members on the same line or when one member is in a new line move each member to its own line. </Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38629</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable caching on docker builds</Title>
    <Description>Docker build caching is temporarily disabled to fix apt-get slowing us down. 

We need to reenable / figure out a better solution in the future. </Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38628</IssueID>
    <RepoID>1</RepoID>
    <Title>Keyboard shortcut mapped to run code cleanup on entire solution</Title>
    <Description>Customer Request Copying Here

&gt;I prefer to have a keyboard shortcut to run code cleanup on my entire solution rather than having to right click on the solution in the solution explorer.

</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38627</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement formatting suppression</Title>
    <Description>Closes #36930
Closes #38587</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38626</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190910.3
- **Date Produced**: 9/10/2019 6:11 PM
- **Commit**: 0f5cfb20a355c27bc84cedd049c946b44a7fc1da
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19460.3

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38625</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38624</IssueID>
    <RepoID>1</RepoID>
    <Title>Properly pass along actual referenced symbol in FindCallersAsync result.</Title>
    <Description>Looking for right place to add tests.</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38623</IssueID>
    <RepoID>1</RepoID>
    <Title>[WIP] Move output window to use new API</Title>
    <Description>WIP</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38622</IssueID>
    <RepoID>1</RepoID>
    <Title>Delete dead code in inline rename</Title>
    <Description>This appears to be dead, and the request (to resolve linked file conflicts before applying the diff) does appear to be done -- the call to the linked file merge step does happen in InlineRenameSession.cs.</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38621</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove Desktop FX limitations from InteractiveAssemblyLoader</Title>
    <Description>
    </Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38620</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38619</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38618</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Arcade and postbuild templates to fix signed build</Title>
    <Description>
    </Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38617</IssueID>
    <RepoID>1</RepoID>
    <Title>VisitType should visit type arguments for error types.</Title>
    <Description>Fixes #38403.</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38616</IssueID>
    <RepoID>1</RepoID>
    <Title>ResultProvider: Object favorites</Title>
    <Description>Adds support for object favorites in the debugger to the result providers.</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38615</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider changing type of BoundForEachStatement.Expression to BoundConversion</Title>
    <Description>BindForEachPartsWorker will always produce a BoundConversion for a collection expression with no errors.

https://github.com/dotnet/roslyn/blob/76aa35114199fa36440560d809d82bb0e33a4ae9/src/Compilers/CSharp/Portable/Binder/ForEachLoopBinder.cs#L476

Perhaps it would make sense to change the type of the 'Expression' property to BoundConversion to reflect this, and wrap any error nodes in an identity conversion to handle the error case.
</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38614</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix spelling error</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38489</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38613</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow suppression of nullable GetEnumerator warnings</Title>
    <Description>Closes #38233</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38612</IssueID>
    <RepoID>1</RepoID>
    <Title>Check that the document can be changed for a file rename</Title>
    <Description>Fixes #38525 </Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38611</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up FIPS settings in Interactive</Title>
    <Description>Follow up to #38527 

I didn't find an app.config for InteractiveHost, so I added one.

I looked for all the instances of `&lt;OutputType&gt;Exe&lt;/OutputType&gt;` in app.config, and decided ad-hoc which ones are shipping projects or not. I didn't bother updating internal-only projects. Projects in **bold** in the list below have had the config setting added.

&lt;details&gt;
    &lt;summary&gt;list of projects&lt;/summary&gt;

- **`roslyn\src\Compilers\CSharp\csc\csc.csproj`**
- **`roslyn\src\Compilers\Server\VBCSCompiler\VBCSCompiler.csproj`**
- **`roslyn\src\Compilers\VisualBasic\vbc\vbc.csproj`**
- **`roslyn\src\Interactive\csi\csi.csproj`**
- **`roslyn\src\Interactive\DesktopHost\InteractiveHost32.csproj`**
- **`roslyn\src\Interactive\DesktopHost\InteractiveHost64.csproj`**
- **`roslyn\src\Interactive\vbi\vbi.vbproj`**
- `roslyn\src\Test\Perf\StackDepthTest\StackDepthTest.csproj`
- `roslyn\src\Tools\AnalyzerRunner\AnalyzerRunner.csproj`
- `roslyn\src\Tools\BuildBoss\BuildBoss.csproj`
- `roslyn\src\Tools\CompilerBenchmarks\CompilerBenchmarks.csproj`
- `roslyn\src\Tools\IdeBenchmarks\IdeBenchmarks.csproj`
- `roslyn\src\Tools\RoslynPublish\RoslynPublish.csproj`
- `roslyn\src\Tools\Source\CompilerGeneratorTools\Source\BoundTreeGenerator\CompilersBoundTreeGenerator.csproj`
- `roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpErrorFactsGenerator\CSharpErrorFactsGenerator.csproj`
- `roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\CSharpSyntaxGenerator.csproj`
- `roslyn\src\Tools\Source\CompilerGeneratorTools\Source\IOperationGenerator\CompilersIOperationGenerator.csproj`
- `roslyn\src\Tools\Source\CompilerGeneratorTools\Source\VisualBasicErrorFactsGenerator\VisualBasicErrorFactsGenerator.vbproj`
- `roslyn\src\Tools\Source\CompilerGeneratorTools\Source\VisualBasicSyntaxGenerator\VisualBasicSyntaxGenerator.vbproj`
- `roslyn\src\Tools\Source\RunTests\RunTests.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\NetCoreApp2\Project.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\NetCoreApp2AndLibrary\Project.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\NetCoreApp2AndTwoLibraries\Project.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\NetCoreMultiTFM\Project.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\NetCoreMultiTFM_ProjectReference\Project.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\NetCoreMultiTFM_ProjectReferenceWithReversedTFMs\Project.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\CSharp\AllOptions.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\CSharp\AnalyzerReference.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\CSharp\DuplicateProjectReference.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\CSharp\ProjectLoadErrorOnMissingDebugType.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\CSharp\ProjectReference.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\CSharp\ReferencesPortableProject.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\CSharp\WithDiscoverEditorConfigFiles.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\CSharp\WithLink.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\CSharp\WithoutPrefer32Bit.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\CSharp\WithPrefer32Bit.csproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\VisualBasic\WithoutPrefer32Bit.vbproj`
- `roslyn\src\Workspaces\MSBuildTest\Resources\ProjectFiles\VisualBasic\WithPrefer32Bit.vbproj`

&lt;/details&gt;</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38610</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust rules for nullable attributes</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/37993 (Property flow state wins over [NotNull] attribute for warnings)
Fixes https://github.com/dotnet/roslyn/issues/37313 (AllowNull and flow analysis conflicting design)

LDM 09/04/2019 and 09/11/2019: when assigning to a property or indexer, if the input state is legal then the output will be legal (so we assign the output state if it is more restrictive). For instance, assigning `null` to an `[AllowNull]string` means that we store a not-null state.

Also, any usage of a member which returns `[MaybeNull]T` warns if `default(T)` would.
</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38609</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge IDocumentOperationService into DocumentPropertiesService</Title>
    <Description>Needs update in ASP.NET.</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38608</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix PDB reader disposal</Title>
    <Description>The PDB reader might be needed later on for mapping local signature of an active method that is first edited in a subsequent generation.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/962105
Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/976940.</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38607</IssueID>
    <RepoID>1</RepoID>
    <Title>[Question] Why I was able to overrid a implemented method with an extension method?</Title>
    <Description>Hi corefx Team,

I have a big Question to the following Code:

```csharp
using System;
using System.Collections.Generic;
using System.Linq;

public class Program
{
  public static void Main()
  {
    bla test = new blup();    
    Console.WriteLine(test.Any());
    
  }
}
public class blup: bla{
  public bool Any(){
    return true;
  }
}
public class bla{

}
public static class Extensions{
  public static bool Any(this bla klaus){
    return false;
  }
}
```

The `Console.WriteLine(test.Any())` returns `false`. So the extension method was called. But in the [documentation ](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods#binding-extension-methods-at-compile-time) about extension methods there is this sentence `You can use extension methods to extend a class or interface, but not to override them.`.
But this is not true for the code above.

The simple answer is, that the IL only knows the static code and not the runtime values. So with the explicit casting in the line `bla test = new blup();` to `bla` the IL think the extension method is the right thing. 
But this is maybe a big problem. In my real case, I have a class that inherited from `IEnumerable` and tries to override extension methods like `Any`. But like in the sample above that wouldn't work in a function that wants an `IEnumerable` as input like this:

```csharp
public void sample(IEnumerable&lt;supertype&gt; source)
```
In this method, always the extension method for `IEnumerable` is preferred. Because at compile time you can't know the real type.

So now to the question:

Is this behavior by design or is this a bug?

And question number 2:

How I can override the extension methods of IEnumerable for my type so all functions in the framework use my implementations?</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38606</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable VSSDK006</Title>
    <Description>🔗 Split from #38545</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38605</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190909.10
- **Date Produced**: 9/10/2019 12:07 AM
- **Commit**: f5ccfdcbd828383d39cf583086ef42d72ca5b320
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19459.10

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38604</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38603</IssueID>
    <RepoID>1</RepoID>
    <Title>Hitting Environment.FailFast when opening ProjectSystem.sln</Title>
    <Description>Not sure exactly the repro here, so hopefully the exception and dump are useful.

On VS master, 29307.11

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.AggregateException: One or more errors occurred. ---&gt; System.InvalidOperationException: Operation is not valid due to the current state of the object.
   at Microsoft.CodeAnalysis.SmallDictionary`2.HandleInsert(AvlNode node, AvlNode parent, K key, V value, Boolean add)
   at Microsoft.CodeAnalysis.SmallDictionary`2.Insert(Int32 hashCode, K key, V value, Boolean add)
   at Microsoft.CodeAnalysis.AnalyzerConfigSet.&lt;GetOptionsForSourcePath&gt;g__addOptions|6_0(Section section, Builder treeBuilder, Builder analyzerBuilder, ArrayBuilder`1 diagnosticBuilder, String analyzerConfigPath, SmallDictionary`2 diagIdCache)
   at Microsoft.CodeAnalysis.AnalyzerConfigSet.GetOptionsForSourcePath(String sourcePath)
   at Microsoft.CodeAnalysis.DocumentState.CreateTreeAndVersion(ValueSource`1 newTextSource, ProjectId cacheKey, String filePath, ParseOptions options, AnalyzerConfigSet analyzerConfigSet, HostLanguageServices languageServices, PreservationMode mode, TextAndVersion textAndVersion, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;FullyParseTreeAsync&gt;d__11.MoveNext()
   --- End of inner exception stack trace ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.DocumentState.&lt;GetSyntaxTreeAsync&gt;d__42.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Implementation.Progression.SymbolContainment.&lt;GetContainedSyntaxNodesAsync&gt;d__0.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Implementation.Progression.ContainsChildrenGraphQuery.&lt;GetGraphAsync&gt;d__0.MoveNext()
---&gt; (Inner Exception #0) System.InvalidOperationException: Operation is not valid due to the current state of the object.
   at Microsoft.CodeAnalysis.SmallDictionary`2.HandleInsert(AvlNode node, AvlNode parent, K key, V value, Boolean add)
   at Microsoft.CodeAnalysis.SmallDictionary`2.Insert(Int32 hashCode, K key, V value, Boolean add)
   at Microsoft.CodeAnalysis.AnalyzerConfigSet.&lt;GetOptionsForSourcePath&gt;g__addOptions|6_0(Section section, Builder treeBuilder, Builder analyzerBuilder, ArrayBuilder`1 diagnosticBuilder, String analyzerConfigPath, SmallDictionary`2 diagIdCache)
   at Microsoft.CodeAnalysis.AnalyzerConfigSet.GetOptionsForSourcePath(String sourcePath)
   at Microsoft.CodeAnalysis.DocumentState.CreateTreeAndVersion(ValueSource`1 newTextSource, ProjectId cacheKey, String filePath, ParseOptions options, AnalyzerConfigSet analyzerConfigSet, HostLanguageServices languageServices, PreservationMode mode, TextAndVersion textAndVersion, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;FullyParseTreeAsync&gt;d__11.MoveNext()&lt;---

Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass6_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;g__outerFunction|0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean)
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].GetResultCore(Boolean)
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].get_Result()
   at Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphQueryManager+&lt;&gt;c__DisplayClass14_0.&lt;PopulateContextGraphAsync&gt;b__1(System.Threading.Tasks.Task`1&lt;Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphBuilder[]&gt;)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass5_0`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;b__0(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass2_0.&lt;SafeContinueWith&gt;g__continuationFunction|0(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass6_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;g__outerFunction|0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```

Dump at `\\mlangfs1\public\dawengie\ProjectSystemCrashOnStartup.zip`.</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38602</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38601</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to release/dev16.3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-release/dev16.3-vs-deps
git reset --hard upstream/release/dev16.3-vs-deps
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38600</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38599</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0004 on pointer cast in return statement</Title>
    <Description>**Version Used**: Visual Studio 2019 version 16.3

**Steps to Reproduce**:

```cs
using System;

class Program
{
    public static int Value;

    public static unsafe int Read(IntPtr pointer, int offset)
    {
        Value = ((int*)pointer)[offset]; // No warning
        return ((int*)pointer)[offset];
        //      ~~~~~~
    }
}
```

**Expected Behavior**:

IDE0004 is not reported for the cast.

**Actual Behavior**:

IDE0004 is reported for the cast.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38598</IssueID>
    <RepoID>1</RepoID>
    <Title>Support reinferring indexers</Title>
    <Description>We now reinfer indexer nullability. Additionally, `GetSymbolInfo` was returning no information for range and pattern-based indexers, this has now been fixed to return the actual property or method symbol being used in those cases. @dotnet/roslyn-compiler for review. @jasonmalinowski and @ryzngard for the nullable api change, as well as for the general change for indexers and ranges. This might cause you to encounter symbols where you aren't currently.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38597</IssueID>
    <RepoID>1</RepoID>
    <Title>Stop caching docker on linux builds</Title>
    <Description>Docker builds are cached up to a point, in order to speed up builds. Unfortunately our caches are now far enough out of date that the apt-get update is taking long enough to sometimes time out the build.

For now i'm disabling cache, it won't make the builds any quicker, but they will at least be roughly deterministic in time, rather than ever increasing.

Once this PR has cycled through enough machines, we can restore caching and builds will speed up again, but really we need to rethink how we do this to stop it being a problem in the future.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38596</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn completion cannot find Blazor document on commit</Title>
    <Description>Here 
https://github.com/dotnet/roslyn/blob/master-vs-deps/src/EditorFeatures/Core/Implementation/IntelliSense/AsyncCompletion/CommitManager.cs#L139
Roslyn looks for a document in Roslyn workspace but the snapshot may belong to,e.g. a Blazor buffer. Therefore, now document is found and the completion commit is cancelled.

Therefore, completion not working in Blazor scenarios like this one:
https://github.com/aspnet/AspNetCore/issues/13319#issuecomment-524089668
</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38595</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid duplicating GetAdditionalProperties by using an extension method</Title>
    <Description>
_Originally posted by @chborl in https://github.com/dotnet/roslyn/pull/37802/review_comment/create_</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38594</IssueID>
    <RepoID>1</RepoID>
    <Title>Run scripts/PublicAPI/mark-shipped.cmd</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/37443. @JoeRobich fyi, this is almost certainly going to cause merge conflicts when it makes its way to master.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38593</IssueID>
    <RepoID>1</RepoID>
    <Title>Make OrganizeImportsService public</Title>
    <Description>dotnet format would like to use this service without needing an IVT or external access project.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38592</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix race condition in AnalyzerConfigSet</Title>
    <Description>When I added the dedup dictionary for diagnostic IDs in AnalyzerConfigSet
it wasn't clear to me that the GetOptionsForSourcePath method was intended
to be called on multiple threads. This change fixes the dedup dictionary
to be thread safe.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38591</IssueID>
    <RepoID>1</RepoID>
    <Title>Random override completion cleanup</Title>
    <Description>Was having to look at this code trying to fix a bug, and kept running into dead code. This cleans up some random bits of it.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38590</IssueID>
    <RepoID>1</RepoID>
    <Title>We should consider removing basesBeingResolved parameter from TypeSymbol.InterfacesNoUseSiteDiagnostics API</Title>
    <Description>```
internal abstract ImmutableArray&lt;NamedTypeSymbol&gt; InterfacesNoUseSiteDiagnostics(ConsList&lt;TypeSymbol&gt; basesBeingResolved = null);
```

The parameter is actually passed only in a couple of places (they can be adjusted to use GetDeclaredInterfaces API directly as several places in the compiler already do) and passing the parameter doesn't always prevent cycles. For example, the dependency checks performed by implementation in SourceNamedTypeSymbol doesn't perform cycle detection/prevention. Developers think that the method is cycle safe when appropriate value is passed to it, but that is actually not the case. I encountered real stack-overflow situations trying to use the method.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38589</IssueID>
    <RepoID>1</RepoID>
    <Title>[Feature Request] Display compiler errors inline</Title>
    <Description>This is a screenshot from MonoDevelop:
[Some code with a compiler error](https://cdn.discordapp.com/attachments/169726586931773440/620557050702725140/unknown.png)

There's an error in that code, which squiggles the line. Right next to the line, the error message is drawn (cannot assign void... in this case). This way, i don't need to hover over it or look at the error list.

I'd like to have that feature in VS, please.
 </Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38588</IssueID>
    <RepoID>1</RepoID>
    <Title>Determine optimal formatting for ternary arguments</Title>
    <Description>The formatter doesn't produce readable code from the following expression:

https://github.com/dotnet/roslyn/blob/b4c94691d796151c89aa39ff5f0b5caa7f5d5564/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol_ImplementationChecks.cs#L1040-L1054

However, it's not clear how this code should be formatted such that the result _is_ readable.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38587</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider suppressing the formatter when IDE0055 is suppressed</Title>
    <Description>**Version Used**: 16.3 Preview 3

**Steps to Reproduce**:

Run **Format Document** on a file containing the following:

```csharp
#pragma warning suppress IDE0055 // Fix formatting
int value = new int ( );
#pragma warning suppress IDE0055 // Fix formatting
```

**Expected Behavior**:

The code inside the IDE0055 suppression is not reformatted.

**Actual Behavior**:

The **Format Document** command ignores the IDE0055 suppression, and formats the code anyway.
</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38586</IssueID>
    <RepoID>1</RepoID>
    <Title>'warning CS8655: The switch expression does not handle some null inputs' on suppressed nulls</Title>
    <Description>**Version Used**: master 

**Steps to Reproduce**:

```cs
#nullable enable
public class C {
    public int M0(C a)  =&gt; a switch { C _ =&gt; 0 }; // ok
    public int M1(C? a) =&gt; a switch { C _ =&gt; 0 }; // warns
    public int M2(C? a) =&gt; a! switch { C _ =&gt; 0 }; // warns (none expected)
}
```

**Expected Behavior**: no warnings in M2

**Actual Behavior**: compiler warns about unhandled null in M2
</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38585</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring "Apply implicit/explicit type preferences" breaks working code using named tuples with explicit type specifier as out parameter</Title>
    <Description>**Version Used**:
Visual Studio Enterprise 2019, Version 16.2.4

**Steps to Reproduce**:
1. Create a C# Project.
2. Add an `.editorconfig` file with `csharp_style_var_elsewhere = true`:
```
[*.cs]
#csharp_style_var_for_built_in_types = false : suggestion
#csharp_style_var_when_type_is_apparent = true : suggestion
csharp_style_var_elsewhere = true : suggestion
```
(other options left commented, since I wasn't sure if they affect the outcome)
3. Add a C# source file containing the following snippet:
```c#
var dict = new Dictionary&lt;string, (int, int)&gt;();

if (dict.TryGetValue("test", out (int One, int Two) tuple))
    Console.WriteLine("One={0}, Two={1}", tuple.One, tuple.Two);
```
4. Invoke a Code Cleanup profile that includes "Apply implicit/explicit type preferences".

**Expected Behavior**:
Code still compiles afterwards.

**Actual Behavior**:
CS1061 shows for both tuple member accesses. The code has changed to the following (which doesn't compile anymore because the names `One` and `Two` are not known):
```c#
var dict = new Dictionary&lt;string, (int, int)&gt;();

if (dict.TryGetValue("test", out var tuple))
    Console.WriteLine("One={0}, Two={1}", tuple.One, tuple.Two);
```

**Note**:
While this is probably not the best style of code (and I'd rather encourage the use of `new Dictionary&lt;string, (int One, int Two)&gt;()` - which in fact is the fix I applied afterwards); refactorings in combination with `.editorconfig` directives should not cause code that was previously fine to fail compiling afterwards.

This does _not_ happen for direct indexer access and others; where using `var` would be fine (but deconstruction would be the better option). But as `out` parameter, deconstruction is not (yet) an option, so this is the way to go for now.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38584</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190908.2
- **Date Produced**: 9/8/2019 11:40 PM
- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19458.2

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38583</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove duplicated project guid</Title>
    <Description>I don't think this is intentional.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38582</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract Method Can Call ConfigureAwait(False) if extracted method does.</Title>
    <Description>See #38529

If anywhere in the extracted method we call ConfigureAwait false, we call ConfigureAwait(false) in the invocation of the extracted method.

This preserves semantics around configure await, since if ConfigureAwait(false) is called anywhere in a method, the rest of the method will not continue on the original captured context.

I also fixed a bug at the same time, namely now Extract Method does not make the extracted method async, if it only used await in a local function.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38581</IssueID>
    <RepoID>1</RepoID>
    <Title>Cut and paste inserts extra LF after Attribute</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/719203/cut-and-paste-inserts-extra-lf-after-attribute.html)._

---
When C# Code Style/Formatting Automatically format on paste is set, unwelcome and unspecified changes are made around attributes.

In particular this
```
[Foo] void Bar() {
var x = 1;
    }
```
becomes this
```
[Foo]
void Bar() {
    var x = 1;
}
```

Note that the assignment statement and closing brace are moved in a way that is consistent with my CodeStyle settings. However an extra line feed is added after the attribute.

I realize that some people, perhaps most people, prefer the extra line. Nonetheless this convention should not be forced on all users. The default for code styling should be that if a feature/convention is not specified then leave it as-is. There is no code style option for attribute placement.

Defect: Code Style operations should leave attribute placement elements as-is

Feature Suggestion: Provide Code Style options for attribute placement.

---
### Original Comments

#### Visual Studio Feedback System on 9/1/2019, 09:29 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38579</IssueID>
    <RepoID>1</RepoID>
    <Title>Why does compiler generate a br instruction?</Title>
    <Description>```
        static string GetString()
        {
            return "Test";
        }
```

Compile it, view IL

**Expected Behavior**:
```
ldstr     "Test"
ret
```

**Actual Behavior**:
```
IL_0000: nop
IL_0001: ldstr     "Test"
IL_0006: stloc.0
IL_0007: br.s      IL_0009
IL_0009: ldloc.0
IL_000A: ret
```

Why does compiler generate so many IL instructions?  Especially, why does compiler generate a br instruction?
</Description>
    <CreatedDate>08/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38578</IssueID>
    <RepoID>1</RepoID>
    <Title>VBCS Compiler takes almost 70 % of cpu on every page run on first time in ASP .Net MVC project</Title>
    <Description>
![vbcs complier1](https://user-images.githubusercontent.com/25609223/64483779-39186100-d226-11e9-805f-424f50efcaab.png)
**Version Used**:  2.0.1

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**: Should not use that much of CPU and it takes almost 30 seconds on each page every deployment

**Actual Behavior**: Taking too much time and too much CPU
</Description>
    <CreatedDate>08/09/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38577</IssueID>
    <RepoID>1</RepoID>
    <Title>my bad. delete please</Title>
    <Description>
    </Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>07/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38576</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove DesktopShim.FileNotFoundExceptionShim</Title>
    <Description>Since we have dropped .NET 4.5 for a long time, the shim should be removed now.</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38575</IssueID>
    <RepoID>1</RepoID>
    <Title>Code analysis throws NullReferenceException causing VS\csc crash</Title>
    <Description>**Version Used**: 
VS: `VisualStudio.16.Preview/16.3.0-pre.3.0+29230.61`
.NET Core SDK: `3.0.100-preview9-014004`

**Steps to Reproduce**:

1.  Open the following snippet in VS (you can also check [here](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQAcoKgW1QOzgBsiBjACwlIGsBLfAcwBoATEAagB8BiQkqYEQgACCPgFCAsACgZ4nCkykRAJQjoEAexkBvGcIPCAAgCYAjPsOWDp4QGFh14XumG3xgCzCAsgAoAlI6u7gYuISEAbljCUURwIgC8wgDiEDAAalBxEL6+LACe8rSk/gBEpf4A3E7hwvgQAO7CACKwEAAqtAoA/L6x8VU1hgC+MkMGrTAdXSKpGVnxvkZmAAzCUwAeMIEJAHx1xETVwQaj0sNAA=)):
```csharp
#nullable enable

namespace Repro
{
    using System;
    
    class C 
    {
        void M() 
        {
            var value = GetValue((dynamic)"");
            new DateTime?(value);
        }

        DateTime GetValue(string text) =&gt; null;
    }
}
```

**Expected Behavior**:
No crash.

**Actual Behavior**:
VS crashes when\if the file is open, csc.exe crashes when the compilation is launched without having the file open in VS.</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>13/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38574</IssueID>
    <RepoID>1</RepoID>
    <Title>Extend IDE0041 to object equality operator without cast</Title>
    <Description>Fixes #38506</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38573</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190907.1
- **Date Produced**: 9/7/2019 12:52 PM
- **Commit**: c27945fc559ee636139d9f460db71242b16483e6
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19457.1

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)



</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>08/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38572</IssueID>
    <RepoID>1</RepoID>
    <Title>CS0103 Generate method preview shows empty line only</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.3.0-pre.3.0+29230.61

**Steps to Reproduce**:
```C#
class Program
{
    static void Main()
    {
        Test();
    }

    void OtherMethod()
    {
    }
}
```
Preview the quick fix of generating the `Test()` method

**Expected Behavior**:
![image](https://user-images.githubusercontent.com/10546952/64474455-0cecd980-d16d-11e9-9c69-cd64ce8a7dd2.png)

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/10546952/64474445-f6df1900-d16c-11e9-9b8b-a2bf8aea1559.png)
</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>07/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38571</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8509 The switch expression does not handle all possible inputs when it does</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.3.0-pre.3.0+29230.61

**Steps to Reproduce**:
```C#
class Program
{
    enum E { a, b, c }

    static int Main()
    {
        E e = E.a;

        if (e == E.a)
            return e switch
            {
                E.a =&gt; 0
            };

        switch (e)
        {
            case E.a:
            case E.b:
                return e switch
                {
                    E.a =&gt; 0,
                    E.b =&gt; 1
                };
        }

        return e switch
        {
            E.a =&gt; 0
        };

        // unreachable
        return 0;
    }
}
```

**Expected Behavior**: no warnings (or at least not on the first two)

**Actual Behavior**: CS8509 for all switch expression

At minimum, "the switch expression does not handle all possible inputs" is simply not true.
</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38570</IssueID>
    <RepoID>1</RepoID>
    <Title>`MSB4062: Assembly with same name is already loaded` when `Microsoft.Net.Compilers.Toolset` is only used for a part of projects in solution</Title>
    <Description>**Version Used**: 
dotnet-sdk: 3.0.100-preview9-014004(Also not work for old versions)
Microsoft.Net.Compilers.Toolset: 3.2.1

**Steps to Reproduce**:

1. Create two csproj, add reference of `Microsoft.Net.Compilers.Toolset` to the first, and add reference of the first to the second, no code is needed.
xxxx.csproj
```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;PackageReference Include="Microsoft.Net.Compilers.Toolset" Version="3.2.1"&gt;
      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
    &lt;/PackageReference&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;
```
xxxx1.csproj
```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;ProjectReference Include="..\xxxx\xxxx.csproj" /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;
```
2. Try `dotnet build` with the second csproj. (Run `dotnet clean` first if already has an successful build for the first csproj.

**Expected Behavior**:
Build success.

**Actual Behavior**:
&gt; C:\Program Files\dotnet\sdk\3.0.100-preview9-014004\Roslyn\Microsoft.CSharp.Core.targets(59,5): error MSB4062: Failed to get from assembly C:\Program Files\dotnet\sdk\3.0.100-preview9-014004\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll Load the task "Microsoft.CodeAnalysis.BuildTasks.Csc". Assembly with same name is already loaded Please confirm that the &lt;UsingTask&gt; declaration is correct, the assembly and all its dependencies are available, and the task contains a public class that implements Microsoft.Build.Framework.ITask.

It is something by designed, that must reference the same version of `Microsoft.Net.Compilers.Toolset` for all projects in solution?
An workaround is to use `dotnet build /nodeReuse:false` instead or reference the same version of `Microsoft.Net.Compilers.Toolset` for all projects.</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38569</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove legacy completion</Title>
    <Description>
    </Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38568</IssueID>
    <RepoID>1</RepoID>
    <Title>Regression: Operator '==' cannot be applied to operands of type 'T' and 'default'</Title>
    <Description>**Version Used**: 

.NET SDK 5.0.100-alpha1-014075

**Steps to Reproduce**:

1. Get https://github.com/dotnet/performance
2. Run `dotnet run -f netcoreapp5.0 -c Release` from `performance/src/benchmarks/micro/` directory

**Expected Behavior**:

No error.

**Actual Behavior**:

```
corefx/System.Buffers/ArrayPoolTests.cs(44,21): error CS0019: Operator '==' cannot be applied to operands of type 'T' and 'default' [/Users/filipnavara/agent/_work/1/s/work/performance/src/benchmarks/micro/MicroBenchmarks.csproj]
```

Relevant code: 

https://github.com/dotnet/performance/blob/97d49cfc30502b835122d360ca4b93f29215d4cc/src/benchmarks/micro/corefx/System.Buffers/ArrayPoolTests.cs#L39-L47

This worked few hours ago with the latest .NET SDK from git master (as of 06/09/2019, 18:09:56 UTC; reported by BDN as `.NET Core 5.0.0-alpha1.19456.2 (CoreCLR 5.0.19.45509, CoreFX 5.0.19.45516), X64 RyuJIT`). I assume the Roslyn dependency got bumped and introduced some breaking change.
</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>07/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38567</IssueID>
    <RepoID>1</RepoID>
    <Title>Unnecessary code colapse points </Title>
    <Description>**Version Used**: 
16.4.intpreview

**Steps to Reproduce**:
Have code with sufficient amount of constructs that have header and then block. Look at collapsible regions.

```
        /// &lt;summary&gt;
        /// Use this helper to register multiple refactorings (&lt;paramref name="actions"/&gt;).
        /// &lt;/summary&gt;
        internal static void RegisterRefactorings&lt;TCodeAction&gt;(
            this CodeRefactoringContext context, ImmutableArray&lt;TCodeAction&gt; actions)
            where TCodeAction : CodeAction
        {
            if (!actions.IsDefault)
            {
                foreach (var action in actions)
                {
                    context.RegisterRefactoring(action);
                }
            }
        }
````

![image](https://user-images.githubusercontent.com/1764721/64466836-e70df900-d0c8-11e9-8d71-3543dbf6209b.png)


**Expected Behavior**:
Only the top marked collapsible region is there.

**Actual Behavior**:
Both are, the lower one is redundant from UX point of view.

Useful:
![image](https://user-images.githubusercontent.com/1764721/64466920-47049f80-d0c9-11e9-8eb6-ef52ffee4164.png)

Not useful:
![image](https://user-images.githubusercontent.com/1764721/64466896-2fc5b200-d0c9-11e9-8e9b-0fdde809c7d1.png)

</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38566</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>08/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38565</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38564</IssueID>
    <RepoID>1</RepoID>
    <Title>Perform lookup in base interfaces even in a type-only context.</Title>
    <Description>Fixes #38469.</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38563</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust tuple and nullability checks on duplicate implementations and type constraints</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38560 (open questions on duplicate implementations with nullability differences): in this change, ~~we're treating such duplicates (whether direct  or indirect) as an error (instead of a warning previously), except that~~ we're relaxing the comparison to account for oblivious.
Note: there is still an active email thread on this behavior, as other nullability checks only produce warnings (not errors).

Fixes https://github.com/dotnet/roslyn/issues/38427 (missing diagnostic on duplicate type constraint with tuple name differences): in this change, we're treating such duplicates as an error, as well as  duplicate type constraints with any nullability differences.

At the same time, I'm fixing a small issue with how those duplicates are checked: we were not detecting duplicates when they differed in tuple names and nullability at the same time.</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38562</IssueID>
    <RepoID>1</RepoID>
    <Title>Add dotnet-format as a local tool</Title>
    <Description>This local tool allows developers to format documents in **Roslyn.sln** with the following sequence:

```
dotnet tool restore
dotnet format -w Roslyn.sln
```

After installing the tool, the sequence above was run. The automated changes were applied in three commits by category of change (all attributed to @dotnet-bot). In some cases, IDE0055 was suppressed around the code which changed. However, neither the Format Document command nor the dotnet-format tool adhere to this suppression, so the suppressions were removed after changes were made to the code in these regions. I will add comments in the diff to call attention to this behavior to the original author of each of these suppressions.</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38561</IssueID>
    <RepoID>1</RepoID>
    <Title>Null reference warning when validation expression result relayed as boolean</Title>
    <Description>If I write the following code,
```
public void DoSomething(string value) {
  Console.WriteLine(value.Length);
}
```
I will receive the warning, 
&gt; `CA1062`: In externally visible method `void DoSomething(string value)`, validate parameter `value` is non-null before using it. If appropriate, throw an `ArgumentNullException` when the argument is null or add a Code Contract precondition asserting non-null argument.

Similarly, in a slightly different construction—such as retrieving the value from a function that may result in a `null` value—I may receive:
&gt; `CS8602`: Dereference of a possibly null reference.

This is totally expected; after all, the parameter `value` may well be `null` since `#nullable` doesn't include runtime checking. As the warning suggests, I can easily fix this by adding a guard clause, such as:
```
public void DoSomething(string value) {
  if (value == null) {
    throw new ArgumentNullException(nameof(value));
  }
  Console.WriteLine(value.Length);
}
```
If, however, I store the result of the validation expression (`value == null` in this case) to a `bool` and check that value, I will still get the `CA1062` (or `CS8602`) warning:
```
public void DoSomething(string value) {
  var isInvalid = value == null;
  if (isInvalid) {
    throw new ArgumentNullException(nameof(value));
  }
  Console.WriteLine(value.Length);
}
```
My expectation would be that the previous two code examples would yield the same results. 

This may well be expected based on Roslyn's flow analysis implementation. That said, it limits the methods through which `null` references can be validated. For example, it restricts the use of utility methods that assist in creating guard clauses, similar in _structure_ to Code Contracts:
```
public static void Requires&lt;T&gt;(bool isValid) where T : Exception, new() {
  if (!isValid) {
    throw new T();
  }
}
```
&gt; **Note:** This is obviously a contrived example. A real implementation would be far more sophisticated, accounting for e.g. variable names and/or error messages.

FWIW, the project I'm working on happens to be targeting .NET Standard 2.2, but I wouldn't expect that to be relevant here since I'm just referencing internal code and not .NET Standard libraries. </Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38560</IssueID>
    <RepoID>1</RepoID>
    <Title>Refine nullability checks on interface implementations</Title>
    <Description>Implementing the same interface twice, indirectly and with nullability differences involving oblivious currently produces a warning, but arguably shouldn't:
```C#
#nullable enable

public class C : I&lt;object&gt;, IObjectOblivious // warning CS8645: 'I&lt;object&gt;' is already listed in the interface list on type 'C' with different nullability of reference types.
{
}

public interface I&lt;T&gt; { }

#nullable disable

public interface IObjectOblivious : I&lt;object&gt; { }
```
([sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4FgBQBiAdgVwDZ4TB5wAEcWRJ66AAgMym0BMpAwqSKQJIA8A9sABWcAMYwAfABoeAeWFiY8vAEsAbiv44opAPS7SAdwgIsKrAHN2AZQAcANgAsAVi4ByPoJHiJb0ip0IPAQ4CAATAE9SVVg4MP8sUhgACzJzeAQAMwhRMhiYUn5EmAiABzI3Nj9DFRTSMJVMzMQKAtwCIhVVEsLM0hDmkKxcpLK4KAA6dABvdABfGjQGBIzskb4AFQlSadIFtHRsfEJiMgaoKjhF5fTENbJueW8lYnVNbU4eAQUfHb2gA==))

On the other hand, implementing the same interface twice, directly and with nullability differences arguably should produce an error instead of just a warning:
```C#
#nullable enable
public class C : I&lt;object&gt;, I&lt;object?&gt; // warning CS8645: 'I&lt;object?&gt;' is already listed in the interface list on type 'C' with different nullability of reference types.
{
}

public interface I&lt;T&gt; { }
```
([sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4GIB2BXANliwtwAEcaeBAsAFAACAzIdQEyEDChIhAkgDwD2wAKzgBjGAD4ANFz6CRMAPxjCAemWEA7hARoAlmgDmrAMoAOAGwAWAKwcA5D35DRi24R1RCELAjgQAJgCehFju8H5uaIQwABZEevAIAGYQwkQhsIS8kTABAA5Etiyu6joxhH46iYmIJDCEmDh4OiE5mYmEPtU+aKlReXBQAHRUAN5UAL5UVHQRCcm9PAAqSiOE40A))

Finally, this behavior is not consistently enforced on type constraints: direct scenarios (`where T : I&lt;object?&gt;, I&lt;object&gt;`) produce an error and indirect scenarios (`where T : I&lt;object?&gt;, IObjectUnannotated`) produce no diagnostic.

Relates to tuple name checks on interface implementations (issue https://github.com/dotnet/roslyn/issues/38427 tracks some irregularities).
Relates to PR https://github.com/dotnet/roslyn/pull/38460 (type inference can now handle types that implement duplicate interfaces with nullability differences).</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38559</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn IDE features exhibiting numerous regressions</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Int Preview 16.4

**Steps to Reproduce**:

1. Open a C# project
2. Type some method name 'Foo'

**Expected Behavior**:
Signature help appears and is classified.

**Actual Behavior**:
Signature help appears unclassified.

![image](https://user-images.githubusercontent.com/5387680/64454691-76eb7d00-d0a0-11e9-8e95-552c33be73b8.png)
</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38558</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0018 preview presents incorrect option if blank line present</Title>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

**Steps to Reproduce**:
```C#
using System;

class Program
{
    static void Main() { }

    private static bool M1(string name)
    {
        bool result;

        Bar(name, out result);
        return result;
    }

    private static bool M2(string name)
    {
        bool result;
        Bar(name, out result);
        return result;
    }

    private static bool Bar(string name, out bool result) =&gt; throw new NotImplementedException();
}
```

**Expected Behavior**:
Invoking IDE0018 for the Document presents two cases to be fixed, one in M1 and one in M2.

**Actual Behavior**:
Invoking IDE0018 for the Document presents three cases to be fixed, two in M1, one of which if executed on its own would result in code that doesn't compile:
![image](https://user-images.githubusercontent.com/2642209/64453543-c9d02f00-d0b6-11e9-87ba-533654d7c9d7.png)
</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38557</IssueID>
    <RepoID>1</RepoID>
    <Title>Inline rename throws InvalidOperationException in ASP.NET Core page</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. Create an ASP.NET Core Web App
2. Open `Error.cshtml`.
3. Rename `ErrorModel` class to `ErrorModel2` (Ctrl+R+R).

**Expected Behavior**:

**Actual Behavior**:

Assertion failed:

```
---------------------------
Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue
---------------------------




   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager.OnTextBufferChanged(Object sender, TextContentChangedEventArgs args)

   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)

   at Microsoft.VisualStudio.Text.Implementation.BaseBuffer.RawRaiseEvent(TextContentChangedEventArgs args, Boolean immediate)

   at Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SourceSpansChangedEventRaiser.RaiseEvent(BaseBuffer baseBuffer, Boolean immediate)

   at Microsoft.VisualStudio.Text.Implementation.BufferGroup.RaiseEvents()

   at Microsoft.VisualStudio.Text.Implementation.BufferGroup.FinishEdit()

   at Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SpanEdit.ReplaceSpans(Int32 position, Int32 spansToReplace, IList`1 spansToInsert, EditOptions options, Object editTag)

   at Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.ReplaceSpans(Int32 position, Int32 spansToReplace, IList`1 spansToInsert, EditOptions options, Object editTag)

   at Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.UpdateTextBuffer(ProjectionMapping[] mappings, String fullLangBufferText)

   at Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.SetMappingsHelper(ProjectionMapping[] mappings, String fullLangBufferText)

   at Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionBuffer.SetTextAndMappings(String text, ProjectionMapping[] mappings)

   at Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.SetTextAndMappings(List`1 newCodeRanges)

   at Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.&lt;&gt;c__DisplayClass80_0.&lt;OnDocumentStructureChanged&gt;b__0()

   at Microsoft.WebTools.Languages.Shared.Editor.Utility.GuardedOperations.InvokeExtensionPoint(Object errorSource, Action action)

   at Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.OnDocumentStructureChanged(Object sender, DocumentStructureChangedEventArgs e)

   at Microsoft.VisualStudio.Editor.Razor.DefaultVisualStudioRazorParser.OnDocumentStructureChanged(Object state)

   at System.Threading.Tasks.Task.InnerInvoke()

   at System.Threading.Tasks.Task.Execute()

   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)

   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)

   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)

   at System.Threading.Tasks.SynchronizationContextTaskScheduler.PostCallback(Object obj)

   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.SingleExecuteProtector.TryExecute()

   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.SingleExecuteProtector.&lt;&gt;c.&lt;.cctor&gt;b__20_0(Object state)

   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)

   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)

   at System.Windows.Threading.DispatcherOperation.InvokeImpl()

   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)

   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)

   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)

   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)

   at System.Windows.Threading.DispatcherOperation.Invoke()

   at System.Windows.Threading.Dispatcher.ProcessQueue()

   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)

   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)

   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)

   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)

   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)

   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)

   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)

```

Followed by an exception:
```
&gt;	System.Core.dll!System.Linq.Enumerable.Single&lt;Microsoft.VisualStudio.Text.SnapshotSpan&gt;(System.Collections.Generic.IEnumerable&lt;Microsoft.VisualStudio.Text.SnapshotSpan&gt; source) Line 1173	C#
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager.OnTextBufferChanged(object sender, Microsoft.VisualStudio.Text.TextContentChangedEventArgs args) Line 247	C#
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent&lt;Microsoft.VisualStudio.Text.TextContentChangedEventArgs&gt;(object sender, System.EventHandler&lt;Microsoft.VisualStudio.Text.TextContentChangedEventArgs&gt; eventHandlers, Microsoft.VisualStudio.Text.TextContentChangedEventArgs args) Line 546	C#
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Implementation.BaseBuffer.RawRaiseEvent(Microsoft.VisualStudio.Text.TextContentChangedEventArgs args, bool immediate) Line 1061	C#
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SourceSpansChangedEventRaiser.RaiseEvent(Microsoft.VisualStudio.Text.Implementation.BaseBuffer baseBuffer, bool immediate) Line 362	C#
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Implementation.BufferGroup.RaiseEvents() Line 626	C#
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Implementation.BufferGroup.FinishEdit() Line 586	C#
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SpanEdit.ReplaceSpans(int position, int spansToReplace, System.Collections.Generic.IList&lt;object&gt; spansToInsert, Microsoft.VisualStudio.Text.EditOptions options, object editTag) Line 758	C#
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.ReplaceSpans(int position, int spansToReplace, System.Collections.Generic.IList&lt;object&gt; spansToInsert, Microsoft.VisualStudio.Text.EditOptions options, object editTag) Line 995	C#
 	Microsoft.WebTools.Languages.Html.Editor.dll!Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.UpdateTextBuffer(Microsoft.WebTools.Languages.Html.Editor.Projection.ProjectionMapping[] mappings, string fullLangBufferText) Line 156	C#
 	Microsoft.WebTools.Languages.Html.Editor.dll!Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.SetMappingsHelper(Microsoft.WebTools.Languages.Html.Editor.Projection.ProjectionMapping[] mappings, string fullLangBufferText) Line 214	C#
 	Microsoft.WebTools.Languages.Html.Editor.dll!Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionBuffer.SetTextAndMappings(string text, Microsoft.WebTools.Languages.Html.Editor.Projection.ProjectionMapping[] mappings) Line 34	C#
 	Microsoft.WebTools.Languages.Razor.Core.dll!Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.SetTextAndMappings(System.Collections.Generic.List&lt;Microsoft.WebTools.Languages.Html.Editor.ContainedLanguage.Razor.RazorRange&gt; newCodeRanges) Line 873	C#
 	Microsoft.WebTools.Languages.Razor.Core.dll!Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.OnDocumentStructureChanged.AnonymousMethod__0() Line 345	C#
 	Microsoft.WebTools.Languages.Shared.Editor.dll!Microsoft.WebTools.Languages.Shared.Editor.Utility.GuardedOperations.InvokeExtensionPoint(object errorSource, System.Action action) Line 84	C#
 	Microsoft.WebTools.Languages.Razor.Core.dll!Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.OnDocumentStructureChanged(object sender, Microsoft.VisualStudio.Editor.Razor.DocumentStructureChangedEventArgs e) Line 366	C#
 	Microsoft.VisualStudio.Editor.Razor.dll!Microsoft.VisualStudio.Editor.Razor.DefaultVisualStudioRazorParser.OnDocumentStructureChanged(object state) Line 472	C#

```

</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38556</IssueID>
    <RepoID>1</RepoID>
    <Title>Degraded nullable analysis with conditional expression of Generic type</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/608446/degraded-nullable-analysis-with-conditional-expres.html)._

---
This code raised null reference warning at conditional expression assignment until on VS 16.2.0 Preview 1.0.
But now no warnings and happens NullReferenceException at runtime.
Please check below.

```csharp
#nullable enable
using System;

public class Program
{
    public static void Main()
    {
        var x = new Test&lt;object&gt;(new object());
        Console.WriteLine(x.Value.ToString()); // NullReferenceException here!
    }
}

public class Test&lt;T&gt;
{
    public T Value { get; }


    public Test(T value)
    {
        // this.Value = default; // this raises CS8602 correctly even at 16.2.0 Preview 2.0

        var dummyCond = value == null;
        this.Value = (dummyCond) ? value : default; // no nullable warnings since 16.2.0 Preview 2.0
    }
}
```

---
### Original Comments

#### Visual Studio Feedback System on 6/17/2019, 03:47 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 6/17/2019, 08:14 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38555</IssueID>
    <RepoID>1</RepoID>
    <Title>FixupSpan tests are flaky</Title>
    <Description>The following two tests are failing in otherwise good builds:

- `CSharp_FixupSpanDuringResolvableConflict_ComplexificationReordersReferenceSpans`
- `VisualBasic_FixupSpanDuringResolvableConflict_NonReferenceConflict`

Error message: 

```
Assert.Equal() Failure\r\nExpected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[41..44), [177..180), [184..187)]\r\nActual: List&lt;Span&gt; [[41..44), [177..180), [177..180), [184..187), [184..187)]
```

Stack trace:

```
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 91
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 26
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_6_VerifySpansBeforeConflictResolution.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 61
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_28_CSharp_FixupSpanDuringResolvableConflict_ComplexificationReordersReferenceSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 1383
--- End of stack trace from previous location where exception was thrown ---
```

</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38554</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0018 removes necessary nullable annotations</Title>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

**Steps to Reproduce**:
```C#
#nullable enable
class Program
{
    static void Main()
    {
        string? result;
        TryGetValue("hi", out result);
    }

    static bool TryGetValue(string key, out string? result)
    {
        result = null;
        return false;
    }
}
``` 

**Expected Behavior**:
IDE0018 offered and changes:
```C#
        string? result;
        TryGetValue("hi", out result);
```
into
```C#
        TryGetValue("hi", out string? result);
```

**Actual Behavior**:
IDE0018 offered and changes:
```C#
        string? result;
        TryGetValue("hi", out result);
```
into
```C#
        TryGetValue("hi", out string result);
```
which fails to compile with "warning CS8600: Converting null literal or possible null value to non-nullable type.".</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38553</IssueID>
    <RepoID>1</RepoID>
    <Title>Rewrite reference assemblies to include nullability annotations</Title>
    <Description>Update our **netstandard2.0** and **net472** builds to use new nullability annotations from **netcoreapp3.0** where available. Bugs found by this change were submitted as a separate pull request (#38551).

Submitting this pull request for personal review to see if it works with our CI before discussing it with infrastructure team.</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38552</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE1006 doesn't provide a "fix all"?</Title>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

IDE1006 (naming violations) doesn't provide a "fix all".  My project has &gt; 1000 violations; how do I fix them all based on my editorconfig settings without going through one-by-one?</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>07/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38551</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix inconsistencies with nullability annotations in the BCL</Title>
    <Description>
    </Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>14/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38550</IssueID>
    <RepoID>1</RepoID>
    <Title>Reuse previously resolved missing assembly metadata objects when identity doesn't match</Title>
    <Description>Fixes https://github.com/dotnet/try/issues/345.

**Background**
When the compiler is resolving compilation references and encounters a reference whose assembly identity does not match any of the explicitly given references it falls back to a Reference Resolver. In regular compilation an error is reported since there is no Reference Resolver. Interactive compiler supplies a resolver that attempts to find the missing reference. 

Once the missing reference is found the compiler adds it to the list of implicitly resolved assemblies and if the same missing assembly identity is referenced later (by a subsequent submission) it reuses the assembly symbol from this list, so that we don't end up loading multiple instances of the same missing assembly. [1]

The resolver may find an assembly that matches the name of the missing reference but doesn't match the version exactly. This is expected as a newer version of the assembly may be available than was referenced and the compiler correctly binds to the newer version. 

**Issues** 
The first submission added a reference to a netstandard20 library on .NET Core and the subsequent submission referenced a type from that library. The reference resolution in the compilation corresponding to the second submission ended up adding a new, distinct reference to the library, instead of reusing the one that was already resolved for the first submission compilation.

This was caused by mismatch in versions of some of the facades transitively referenced by the library thru `netstandard.dll` reference and resolved thru the missing reference resolution mechanism. The facades ware referenced with different versions than the actual versions available in the set of references the Reference Resolver resolved missing references from. The compiler ended up using two distinct instances of the same facade assembly metadata. An assembly symbol is only reused if all its transitively referenced assemblies match. In this case the library assembly symbol wasn't reused because some of the facade assembly symbols did not match.

The problem was that the mechanism [1] didn't reuse missing assembly metadata with a different version than what was requested. The fix is to reuse all successful resolutions based on referenced identity.

Another issue found during testing is handing resolution failures. We did not remember that a resolution of a given assembly identity failed and attempted to resolve the assembly again in the next submission. This may lead to inconsistencies and the same "can't convert T to T" errors since first submission might have a missing assembly symbol and next might create a real assembly symbol for the same assembly identity. The fix is to capture both successful and failed resolution results.</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38549</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190906.2
- **Date Produced**: 9/6/2019 2:35 PM
- **Commit**: 397060df67388da56b50de7e6f7292a5dccc2de6
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19456.2

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38548</IssueID>
    <RepoID>1</RepoID>
    <Title>Null dereference warning within local function</Title>
    <Description>The compiler generates a warning for `y.ToString()` in 16.4 but no warning in 16.3.
```C#
class Program
{
    static void F(System.Action a) { }

    static void M(string? x)
    {
        string? y = x;
        if (y == null) return;

        F(Local);
        return;

        void Local()
        {
            y.ToString();
        }
    }
}
```</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38547</IssueID>
    <RepoID>1</RepoID>
    <Title>[MaybeNullWhen(false)] results in disagreement between IntelliSense and compiler</Title>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

**Steps to Reproduce**:
```C#
#nullable enable
using System.Diagnostics.CodeAnalysis;

class Program
{
    static void Main()
    {
        var d = new MyDictionary&lt;string, string&gt;();
        d.TryGetValue("hello", out string? s1);
        d.TryGetValue("hello", out string s2);
    }
}

class MyDictionary&lt;TKey, TValue&gt;
{
    public bool TryGetValue(TKey key, [MaybeNullWhen(false)] out TKey value)
    {
        value = default!;
        return false;
    }
}
```

**Expected Behavior**:
The compiler's needs and IntelliSense match.

**Actual Behavior**:
The compiler requires a `?` on the `out` argument, but IntelliSense doesn't include one:
![image](https://user-images.githubusercontent.com/2642209/64430139-99bc6800-d085-11e9-9e6a-c77ecf63be5e.png)
</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38546</IssueID>
    <RepoID>1</RepoID>
    <Title>Unused interpolated string (with nothing to interpolate) should produce warning similar to unused string literal</Title>
    <Description>```csharp
var x = $"Some string";
```

**Actual Behavior**:
I think the previous code is transformed into a `String.Format` method call, even if there are no `{ }` between the double quotes.

**Expected Behavior**:
It's better if the `$` is just ignored and the code is treated as

```csharp
var x = "Some string";
```

====

**Update:**

As pointed by @huoyaoyuan , The compiler seem to really ignore the `$` when there is nothing to interpolate. but, the following two lines behave differently for warnings:

```csharp
void Main()
{
	var x1 = "abc"; // Warning: CS0219
	var x2 = $"abc"; // No-warnings.
}
```</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38545</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix and enable VSTHRD100 "Avoid async void methods"</Title>
    <Description>moving to new VS SDK introduced new warning VSTHRD100 abd VSSDK006 which is suppressed for now. @sharwell  want to enable those.</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38544</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix incomplete attribute causing exc. in IsOnHeaderXXX methods #38502</Title>
    <Description>
    </Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38543</IssueID>
    <RepoID>1</RepoID>
    <Title>Ternary operator in async method crashes the compiler</Title>
    <Description>**Version Used**: 3.2.1-beta4-19408-03 (2fc6a049) included with the Visual Studio 2019 (16.2.4)

**Steps to Reproduce**:
```C#
using System;
using System.Threading.Tasks;

class Program
{
    static Task Foo(bool b) =&gt; Bar(async () =&gt;
        b ? await Task.Delay(1) : await Task.Delay(2));

    static T Bar&lt;T&gt;(Func&lt;T&gt; f) =&gt; f();

    static void Main(string[] args) {}
}
```
This code crashes the compiler with the following stack:
&lt;details&gt;
  &lt;summary&gt;Stack trace&lt;/summary&gt;

```
  Message: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitExpressionStatement(BoundExpressionStatement node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitBody(BoundStatement body)
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.GenerateMoveNext(BoundStatement body, MethodSymbol moveNextMethod)
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMoveNext(SynthesizedImplementationMethod moveNextMethod)
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMethodImplementations()
   at Microsoft.CodeAnalysis.CSharp.StateMachineRewriter.Rewrite()
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.Rewrite(BoundStatement bodyWithAwaitLifted, MethodSymbol method, Int32 methodOrdinal, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, AsyncStateMachine&amp; stateMachineType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack Trace:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;, System.Func`1&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;, System.Func`1&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;, System.Func`1&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;, System.Func`1&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitBody(Microsoft.CodeAnalysis.CSharp.BoundStatement)
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.GenerateMoveNext(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol)
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMoveNext(Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedImplementationMethod)
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMethodImplementations()
   at Microsoft.CodeAnalysis.CSharp.StateMachineRewriter.Rewrite()
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.AsyncStateMachine ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
```
&lt;/details&gt;

Replacing ternary operator with the code block fixes compilation error:
```C#
    static Task Foo(bool b) =&gt; Bar(async () =&gt;
    {
        if (b)
            await Task.Delay(1);
        else
            await Task.Delay(2);
    });
```
</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>21/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38542</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider add an diagnostic to report call to an virtual method via base from an different method?</Title>
    <Description>**Version Used**: 
VS2019 16.3.0preview3.0(3.3.1-beta3-19430-03+fa8e2c9b566e4471a3509fc63d7baca0a2a6d30b)
with `Microsoft.CodeAnalysis.FxCopAnalyzers` 2.9.4

**Steps to Reproduce**:

```cs
    public class Class1
    {
        public virtual void Test1()
        {
        }

        /*public void Test2()
        {
        }*/
    }
    public class Class2 : Class1
    {
        public void Test2()
        {
            base.Test1();
        }
    }
    public class Class3 : Class2
    {
        public override void Test1()
        {
            Console.WriteLine("Do something.");
        }
    }
```

**Expected Behavior**:
It will be better if roslyn can report an diagnostic(Info or Warn) for `base.Test1();`(call virtual method `Class1.Test1()` via `base` from another method `Test2()`), it can easily be an mistake of `base.Test2()` or `this.Test1()`(I used to use `base` when there is no `Test1()` in `Class2`, but it will also make the override in `Class3.Test1()` useless).

**Actual Behavior**:
No diagnostic is reported.
</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38541</IssueID>
    <RepoID>1</RepoID>
    <Title>Debuger can't evaluate expression ImmutableArray&lt;'namedTuple'&gt;</Title>
    <Description>**Version Used**: 
Current Int Preview + Roslyn ~master
**Steps to Reproduce**:

![image](https://user-images.githubusercontent.com/1764721/64396243-dbabc680-d011-11e9-8a88-bab32d14744e.png)

**Expected Behavior**:
All expressions in locals are evaluated.

**Actual Behavior**:
None of them is.

---
I'll try to provide more info / minimal repro if I have time tomorrow.</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38540</IssueID>
    <RepoID>1</RepoID>
    <Title>"Introduce using startment" refactoring doesn't show up in the middle of a variable</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

This occurs for both C# and VB.

1.  CTRL+. at $

``` C#
using System;
using System.IO;

class Class1
{
    public static void Main()
    {
        Stream stream = G$etStream();

        Console.WriteLine(stream);
    }

    private static Stream GetStream()
    {
        return null;
    }
}

```

Expected: 
![image](https://user-images.githubusercontent.com/1103906/64394534-fe81bd80-d099-11e9-95f6-bc57634d5b52.png)

Actual:
Nothing, the refactoring isn't available

This is particularly odd when the CA00067 complains about the type not being disposed and covers the entire span of the variable, so you can suppress the warning but not introduce the fix.

</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38539</IssueID>
    <RepoID>1</RepoID>
    <Title>Using with alias in suggestions</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/711223/using-with-alias-in-suggestions.html)._

---
Add the option to automatically add a using statement with an alias instead. I have a class that I need a using, but I don't want to include everything in that namespace so I need something like this : 
`using MyClass = Namespace.Something.MyClass`

It would be nice if it was in the suggestions instead of the more common `using Namespace.Something`

---
### Original Comments

#### Jane Wu [MSFT] on 8/26/2019, 00:55 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38538</IssueID>
    <RepoID>1</RepoID>
    <Title>Choose patterns and paradigms while developing code</Title>
    <Description>[Original devcomm feedback](https://developercommunity.visualstudio.com/content/idea/710883/choose-patterns-and-paradigms-while-developing-cod.html)

* Ability to choose a coding paradigm: TDD, DDD, etc.
* Provide Quick Actions/notifications to lead user towards paradigm

Customer Quote:
&gt; It would be great that while creating a new project I could select what type of design or paradigm I would like to keep such as DDD or TDD and then during development some scafolding of the main concepts may happens. On DDD Entity, Event AgregateRoot classes for example. On DDD for example when creating some class the Visual studio could show some hints. if the developer was writing logic methods referencing many times some class a suggestion could pop up saying : “ it looks like this is domain logic to this entity.. if so consider moving this to the class” . Or in another use case. Regarding if a developer choose TDD when any new public or internal method of some class was created... a pop up would say:” you have chosen TDD in this project! You should start with the unit tests! “

(I'm leaving the devcomm feedback open to see if it accumulates votes there.)

</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38537</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow deleting entries in FindXXX dialogs. </Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/701847/allow-deleting-entries-in-findxxx-dialogs.html)._

---
Allow deleting entries in FindXXX dialogs such as Find all references / Find callsites, ... 
Usecase: Want to investigate all callsites of some function
- Find all references on method declaration
- Go one by one (from top bottom) checking them (not changing)
- Some of them might require more investigation, get skipped -&amp;gt; no way to mark them / preserve info that one should return to them.

---
### Original Comments

#### Jane Wu [MSFT] on 8/21/2019, 04:10 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;

#### Petr Houska [MSFT] on 8/26/2019, 05:14 PM: 

E.g. Call hierarchy allow deleting items.</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38535</IssueID>
    <RepoID>1</RepoID>
    <Title>Considerer using async method instead of sync</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/662304/considerer-using-async-method-instead-of-sync.html)._

---
&lt;p&gt;I would like to suggest a warning or message when a sync method is being used instead of its async version. For example, supposing we have this interface:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public interface IFoo  {      int DoSomething();      Task&amp;lt;int&amp;gt; DoSomethingAsync(); } &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and in the code we are using the sync version:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var result = foo. DoSomething(); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I would like to see a warning/message saying that &lt;code&gt;DoSomething&lt;/code&gt; has an async version.&lt;br&gt; This idea came to my mind when I noticed that a service in my company was suffering from thread starvation. &lt;br&gt;After some hours we figured out that a few methods were being called with the sync version instead of async, which was blocking the thread and causing a lot of timeouts.&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 7/25/2019, 09:48 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38534</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38533</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38532</IssueID>
    <RepoID>1</RepoID>
    <Title>Support reinferring collection element initializer symbols</Title>
    <Description>@dotnet/roslyn-compiler for review. /cc @jasonmalinowski @ryzngard </Description>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38531</IssueID>
    <RepoID>1</RepoID>
    <Title>Codestyle: disallow same variable name with different casing</Title>
    <Description>[Original devcomm ticket](https://developercommunity.visualstudio.com/content/idea/697873/have-a-setting-to-allowdisallow-veriables-with-sam.html)

&gt; Have a setting to allow/disallow variables with same name but different letter cases

*Example*
&gt; I accidentally had two namespaces, GpsData and GPSData, and it allowed them both and I couldn't find the classes of the one in the other, thinking there was only one namespace. Same with variables.
</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38530</IssueID>
    <RepoID>1</RepoID>
    <Title>Why you can not wrap a select case?</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/692463/why-you-can-not-wrap-a-select-case.html)._

---
Hello,

in vs 2019 you can wrap a if, while etc block but not a select case block. 

Can you please implement these? So you can wrap each case block inside a select case?

Thanks and best regards

---
### Original Comments

#### Jane Wu [MSFT] on 8/15/2019, 00:31 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38529</IssueID>
    <RepoID>1</RepoID>
    <Title>Automatically add . ConfigureAwait(false) when extracting an async method</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/705733/automatically-add-configureawaitfalse-when-extract.html)._

---
When using the c# Extract Method feature, if the method created is an async method, Visual Studio should automatically add . ConfigureAwait(false) to the end of the call to the new method it replaces the original code with, if the final await statement in the extracted code (on any branch of execution) has . ConfigureAwait(false)

---
### Original Comments

#### Jane Wu [MSFT] on 8/23/2019, 00:08 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38528</IssueID>
    <RepoID>1</RepoID>
    <Title>Move AdditionalProperty to `Microsoft.VisualStudio.LanguageServices.FindUsages` namespace as this is specific to FAR columns.</Title>
    <Description>This should be moved to `Microsoft.VisualStudio.LanguageServices.FindUsages` namespace as this is specific to FAR columns.

_Originally posted by @mavasani in https://github.com/_render_node/MDExOlB1bGxSZXF1ZXN0MzA1MzA5NTEy/timeline/more_items_</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38527</IssueID>
    <RepoID>1</RepoID>
    <Title>Add FIPS AppContextSwitchOverrides to some executable projects</Title>
    <Description>I added to csc, vbc, and VBCSCompiler because I assume those are the ones that use crypto (to strong name assemblies, etc). I tried out a csc built with these settings and used `/keyfile` to strong name an assembly. It just worked for me, but I don't know if there are more changes or testing needed. /cc @jaredpar.</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38526</IssueID>
    <RepoID>1</RepoID>
    <Title>completion leaking cancellation exception</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38455</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38525</IssueID>
    <RepoID>1</RepoID>
    <Title>Inline rename with file rename fails in a shared project</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. Create a C# shared project
2. Add a new class named Class1 and file Class1.cs
3. Try to rename the class to something else. Make sure that "Rename file" is checked, otherwise the issue does not repro.

**Expected Behavior**:
Rename succeeds

**Actual Behavior**:
Rename fails with the following exception:

```
System.NotSupportedException: Changing document properties is not supported   at Microsoft.CodeAnalysis.Workspace.CheckAllowedProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.CheckAllowedSolutionChanges(SolutionChanges solutionChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ApplyRename(Solution newSolution, IWaitContext waitContext)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.CommitCore(IWaitContext waitContext, Boolean previewChanges)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.&lt;&gt;c__DisplayClass76_0.&lt;Commit&gt;b__0(IWaitContext waitContext)
   at Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(String title, String message, Boolean allowCancel, Boolean showProgress, Action`1 action)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.Commit(Boolean previewChanges)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteCommand(ReturnKeyCommandArgs args, CommandExecutionContext context)
   at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)
   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.&lt;&gt;c__DisplayClass13_1`1.&lt;Execute&gt;b__1()
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call, Predicate`1 exceptionFilter) --- End of stack trace from previous location where exception was thrown ---
    at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
--
```</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38524</IssueID>
    <RepoID>1</RepoID>
    <Title>Updating TPN to the current MSFT format and adding Humanizer, SQLitePCLRaw and ICSharpCode.Decompiler</Title>
    <Description>
    </Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>07/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38523</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposing two new refactoring options for tuple assignments in constructors</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19407-03+d961190a1b4b2a81ac178b567840dfeff048b037

**Steps to Reproduce**:

There are certain language features that could use a bit more tooling support, this is one of those situations. I would like to see a styling option for refactoring that enabled code that looks like this:

```csharp
class Program
{
    class FooBar 
    {
        readonly IServer _server;
        readonly IActor _actor;

        public FooBar(IServer server, IActor actor) 
        {
            _server = server;
            _actor = actor;
        }
    }
    
    interface IServer { }
    interface IActor { }
}
```
To be converted to this:

```csharp
class Program
{
    class FooBar 
    {
        readonly IServer _server;
        readonly IActor _actor;

        public FooBar(IServer server, IActor actor) 
        {
            (_server, _actor) = (server, actor);
        }
    }
    
    interface IServer { }
    interface IActor { }
}
```

Taking it a step further, if the user has already defined that their styling preference is to prefer constructor expressions when possible -- the result of the refactoring would be as follows:

```csharp
class Program
{
    class FooBar 
    {
        readonly IServer _server;
        readonly IActor _actor;

        public FooBar(IServer server, IActor actor) 
            =&gt; (_server, _actor) = (server, actor);
    }
    
    interface IServer { }
    interface IActor { }
}
```

These refactoring would need to work in the opposite manner too, going from tuple to separate statements. This proposal comes from a conversation with @BillWagner, @mikadumont and I were having in the [twitter verse](https://twitter.com/davidpine7/status/1169418926217973760?s=20).

- From statements to tuple expression.
- From tuple to separate statements.

I'm assuming this should be labeled as "Area-IDE" and "IDE-CodeStyle"</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38522</IssueID>
    <RepoID>1</RepoID>
    <Title>Null check with 'as' does not update nullable state</Title>
    <Description>**Version Used**: 16.3 Preview 2

**Steps to Reproduce**:

```csharp
SomeType? value = null;
if (value?.Property as AnotherType != null)
{
  _ = value.Property;
}

SomeType? value2 = null;
if (value2?.Property is AnotherType)
{
  _ = value2.Property;
}
```

**Expected Behavior**:

No warning is reported on the access of `value.Property` or `value2.Property`.

**Actual Behavior**:

A warning is reported on the access of `value.Property`, but no warning is reported on the access of `value2.Property`.</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38521</IssueID>
    <RepoID>1</RepoID>
    <Title>Added comments here and there.</Title>
    <Description>When investigating approach for #38271 I've stumbled upon some code that I didn't seem to be clear to me. Tried adding a few documents &amp; changing some parameter names to make it more obvious. 

Not sure if we want this level of comments in code, however. </Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38518</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense does not list members for 3th parameter in GroupJoin</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/705206/intellisense-does-not-list-members-for-3th-paramet.html)._

---
&lt;p&gt;What steps will reproduce the problem?&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a linq query and add a GroupJoin in it&lt;/li&gt;&lt;li&gt;Start typing the content of the 3th parameter&lt;/li&gt;&lt;li&gt;After typing the “.” the auto complete list appears, but it does not contain the members of the class&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;What is the expected output? What do you see instead?&lt;br&gt;
Visual Studio editor should display the list of member for the specified class.&lt;/p&gt;&lt;p&gt;PS the members of the class ARE listed in the 2nd parameter!&lt;/p&gt;&lt;p&gt;&lt;a href="https://developercommunity.visualstudio.com/storage/attachments/89512-vsproblem.png"&gt;vsproblem.png&lt;/a&gt;&lt;/p&gt;

---
### Original Comments

#### Visual Studio Feedback System on 8/22/2019, 04:27 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38517</IssueID>
    <RepoID>1</RepoID>
    <Title>#region Auto-Indenting Misbehaving</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/703701/region-auto-indenting-misbehaving.html)._

---
C#/Tabs/Indenting: Block
C#/Tabs/Tab/Tab_size: 4
C#/Tabs/Tab/Indent_size: 4
C#/Tabs/Tab/Keep_tabs (true)

I have to stipulate that I am somewhat old-school, and have tried to disable _most-if-not-all_ auto-formatting.  All I want is the _guarantee_ that when I press [ENTER], the editor Inserts a newline plus indentation to place the cursor at (R+1, C).

**EXAMPLE 1**:  Start with the following code:
```
namespace Minimum
{
	public class Foo
	{
	}
}
```
Press [ENTER], [TAB], create a property, then press [ENTER].  As expected, the cursor will be indented correctly.

```
	public class Foo
	{
		public bool Bar { get; set; }
		// cursor is here
	}

```
Do the same with #region Methods[ENTER] and you get
```
	public class Foo
	{
		#region Methods
	// cursor is here but should be 1 indentation right
	}

```
**EXAMPLE  2**: Start with the following code:
```
	public class Foo
	{
		#region Properties

// cursor is here

public bool Bar { get; set; }

#endregion Properties
	}
```
Type #region [SPACE] and you get
```
	public class Foo
	{
		#region Properties

#region // code has been shifted left

public bool Bar { get; set; } // code has been shifted left

#endregion Properties
	}
```
this behavior even skips regions, e.g.,
```
	public class Foo
	{
		#region Properties

// cursor is here

#endregion Properties

#region Methods

public void Bat()
			{
				// NOOP
			}

#endregion Methods
	}
```
Type #region[SPACE] and you get:
```
	public class Foo
	{
		#region Properties

#region // code has been shifted left

#endregion Properties

#region Methods

public void Bat() // code has been shifted left
			{
				// NOOP
			}

#endregion Methods
	}
```
Not observing the Block is frustrating enough without the &amp;quot;spooky action at a distance.&amp;quot;

---
### Original Comments

#### Visual Studio Feedback System on 8/22/2019, 04:05 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38516</IssueID>
    <RepoID>1</RepoID>
    <Title>Automatically comment out a new line when enter is pressed</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/703623/automatically-comment-out-a-new-line-when-enter-is.html)._

---
With the code `string test = "this is a test";` if the cursor is put after &amp;quot;is&amp;quot; and the enter key is pressed, VS maintains the string (ie it changes the code to `string test = "this is" + " a test";` split across both lines). The same should be done with comments. If the comment `//This is a test` exists and the cursor is put after &amp;quot;is&amp;quot; with the enter key pressed, the resulting 2 lines should be

```
//This is
// a test
```
Currently what happens is the comment is broken with the resulting two lines being:

```
//This is
 a test
```

---
### Original Comments

#### Jane Wu [MSFT] on 8/22/2019, 02:19 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38515</IssueID>
    <RepoID>1</RepoID>
    <Title>Wrap parameters style should be configurable from code style</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/699244/wrap-parameters-style-should-be-configurable-from.html)._

---
When you right click on a method name you get options on the context menu to wrap and align parameters.

Rather than picking the style of wrapping each time it is used, I would like to be able to configure which style of wrapping is to be used for the whole solution in the code style options and save them to .editorConfig rather than having each developer choose on a case-by-ca se basis.

I would also like code cleanup to automatically wrap parameters using my chosen style when the line length is over a configured length.

---
### Original Comments

#### Jane Wu [MSFT] on 8/20/2019, 03:54 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38514</IssueID>
    <RepoID>1</RepoID>
    <Title>Add an option for c# override generation (ignoring expression bodied members)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/696199/add-an-option-for-c-override-generation-ignoring-e.html)._

---
when `override SomeVirtualOrAbstractMethod` is expanded, and 
Options-&amp;gt;Text Editor-&amp;gt;C#-&amp;gt;Code Style-&amp;gt;Use expression body for methods is set to &amp;quot;When on single line&amp;quot;, the generated piece of code looks like this:
```cs
protected override SomeVirtualOrAbstractMethod() =&gt; base. SomeVirtualOrAbstractMethod();
```

this is (in most cases) not wanted, since the reason to override a method is to add custom behaviour (and usually also call the base class)

Thus the suggestion should be that an option is added to explicitely have the override expansion generated normal member bodies, generating this code:
```cs
protected override SomeVirtualOrAbstractMethod()
{
    base. SomeVirtualOrAbstractMethod();
}
```

---
### Original Comments

#### Jane Wu [MSFT] on 8/16/2019, 00:30 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38513</IssueID>
    <RepoID>1</RepoID>
    <Title>EditorConfig applicable_kinds 'type_parameter' and 'interface' stopped working</Title>
    <Description>**Version Used**: Visual Studio 16.3.0 Preview 3

**Steps to Reproduce**:
With the given .editorconfig:
```
root = true

# DotNet style
[*.{cs,vb,cshtml,vbhtml}]

### Naming Conventions

## Styles

# The basics
dotnet_naming_style.camel_case_style.capitalization = camel_case
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Underscore camel style
dotnet_naming_style.camel_case_and_prefix_with_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_and_prefix_with_underscore_style.capitalization = camel_case

# Pascal I prefix
dotnet_naming_style.pascal_case_and_prefix_with_I_style.required_prefix = I
dotnet_naming_style.pascal_case_and_prefix_with_I_style.capitalization = pascal_case

# Pascal T prefix
dotnet_naming_style.pascal_case_and_prefix_with_T_style.required_prefix = T
dotnet_naming_style.pascal_case_and_prefix_with_T_style.capitalization = pascal_case

## Symbols

# Interfaces
dotnet_naming_symbols.interface_symbols.applicable_kinds = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities = *

# Type parameters
dotnet_naming_symbols.type_parameter_symbols.applicable_kinds = type_parameter
dotnet_naming_symbols.type_parameter_symbols.applicable_accessibilities = *

# Pascal most of the things
dotnet_naming_symbols.pascal_symbols.applicable_kinds = class, struct, enum, property, method, event, namespace, delegate, local_function
dotnet_naming_symbols.pascal_symbols.applicable_accessibilities = *

# Parameters, locals
dotnet_naming_symbols.locals_and_parameters_symbols.applicable_kinds = parameter, local
dotnet_naming_symbols.locals_and_parameters_symbols.applicable_accessibilities = *

# Constants
dotnet_naming_symbols.constant_symbols.applicable_kinds = field
dotnet_naming_symbols.constant_symbols.required_modifiers = const
dotnet_naming_symbols.constant_symbols.applicable_accessibilities = *

# Public fields
dotnet_naming_symbols.public_field_symbols.applicable_kinds = field
dotnet_naming_symbols.public_field_symbols.applicable_accessibilities = public, internal, friend, protected, protected_internal, protected_friend, private_protected

# Private fields
dotnet_naming_symbols.private_field_symbols.applicable_kinds = field
dotnet_naming_symbols.private_field_symbols.applicable_accessibilities = private

## Naming Rules

# Interfaces
dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.symbols = interface_symbols
dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.style = pascal_case_and_prefix_with_I_style
dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.severity = warning

# Type parameters
dotnet_naming_rule.type_parameters_must_be_pascal_cased_and_prefixed_with_T.symbols = type_parameter_symbols
dotnet_naming_rule.type_parameters_must_be_pascal_cased_and_prefixed_with_T.style = pascal_case_and_prefix_with_T_style
dotnet_naming_rule.type_parameters_must_be_pascal_cased_and_prefixed_with_T.severity = warning

# Pascal most of the things
dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.symbols = pascal_symbols
dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.style = pascal_case_style
dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.severity = warning

# Parameters, locals
dotnet_naming_rule.parameters_must_be_camel_cased.symbols = locals_and_parameters_symbols
dotnet_naming_rule.parameters_must_be_camel_cased.style = camel_case_style
dotnet_naming_rule.parameters_must_be_camel_cased.severity = warning

# Constants
dotnet_naming_rule.constants_must_be_pascal_cased.symbols = constant_symbols
dotnet_naming_rule.constants_must_be_pascal_cased.style = pascal_case_style
dotnet_naming_rule.constants_must_be_pascal_cased.severity = warning

# Public fields
dotnet_naming_rule.public_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.symbols = public_field_symbols
dotnet_naming_rule.public_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.style = pascal_case_style
dotnet_naming_rule.public_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.severity = warning

# Private fields
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.symbols = private_field_symbols
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.style = camel_case_and_prefix_with_underscore_style
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.severity = warning
```

And the given file in an SDK style class library project:
``` csharp
using System;

namespace classLibrary1
{
    public interface fooInterface
    {
        
    }

    public class class1
    {
        public delegate void delegateFoo();

        public event EventHandler&lt;class1&gt; eventFoo;

        public static readonly string pubFoo = "PubBar";

        public const string conFoo = "ConBar";
        private const string foo = "Bar";

        private readonly string name;

        public class1(string Name)
        {
            string Local = "";

            name = Name ?? foo + Local;
        }

        public string getName()
        {
            doThing();
            DoOtherThing&lt;object&gt;();

            return name;

            void doThing()
            {

            }

            void DoOtherThing&lt;arg&gt;()
            {

            }
        }
    }
}
```

Open the file. Nearly every symbol was written to trigger naming rule breaks.

**Expected Behavior**:
Virtually every symbol should have a rule break warning. This works in 16.2.3.

**Actual Behavior**:
The interface `fooInterface` and the type arg in `DoOtherThing&lt;arg&gt;()` do not have warnings for breaking naming conventions.

Attaching an image depicting the differences visually:
![image](https://user-images.githubusercontent.com/8978001/64364591-6c61b280-cfd0-11e9-9460-9c51ca239b76.png)
</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38512</IssueID>
    <RepoID>1</RepoID>
    <Title>Ctrl+. on a long // comment (or on on of a number of // comment lines) distibutes the comment over multiple lines</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/689733/ctrl-on-a-long-comment-or-on-on-of-a-number-of-com.html)._

---
Let's say you have:

```
// Lorem ipsum dolor sit amet, consectetur adipiscing elit. In fermentum semper orci. Fusce non diam magna. Vestibulum quis est eget massa suscipit commodo. Integer lacinia ultrices aliquam. Cras tempor lacus malesuada, volutpat sem at, blandit ligula.
```
or
````
// Lorem ipsum dolor sit amet,
// consectetur adipiscing elit. In fermentum semper orci. Fusce non diam magna.
// Vestibulum quis est eget massa suscipit commodo. Integer lacinia ultrices aliquam. Cras tempor lacus malesuada, volutpat sem at, blandit ligula.
````
... and you press Ctrl+.

Two options should be available: &amp;quot;Tidy using //&amp;quot; and &amp;quot;Tidy using /**/&amp;quot;

Both options distribute the comment using .editorconfig to determine the maximum characters per line, resulting in (for example):

````
// Lorem ipsum dolor sit amet, consectetur adipiscing elit. In
// fermentum semper orci. Fusce non diam magna. Vestibulum quis
// est eget massa suscipit commodo. Integer lacinia ultrices
// aliquam. Cras tempor lacus malesuada, volutpat sem at,
// blandit ligula.
````

---
### Original Comments
(no comments)</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38511</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate Local variable outside of current block</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/683584/generate-local-variable-outside-of-current-block.html)._

---
When Quick Actions suggest to create a local variable, when we are in a code block (if, using, etc.) The local variable could be created outside of the block (just before)

This should be a new quick action or replacing the Create Local variable.

Example:

```
using (var db = CreateContext())
{
    blogs = db. Blogs.ToList()
}

```

The quick action is called on blogs

---
### Original Comments
(no comments)</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38510</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename files in the compiler server</Title>
    <Description>This is the final part of the type hierarchy unwind. It renames the
files in the projects to match the new type names.</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38509</IssueID>
    <RepoID>1</RepoID>
    <Title>Debt from bad Assert.NotNull checks</Title>
    <Description>In PR #38493 all uses of `Assert.NotNull(expr)` which had a value type argument were converted to `Assert.NotEqual(default, expr)`. This revealed a number of places where the code was incorrectly passing because a `default(T)` value was returned but "passed" the test because it was boxed and passed the `NotNull` check. 

This bug tracks all the places where the new `Assert.NotEqual` call is failing and needs to be investigated. 

- [ ] IndexedPropertiesBindingChecks
- [ ] OldGetFormat_IndexedProperties
- [ ] IndexedProperties_Incomplete
- [ ] IndexedProperties_Complete
- [ ] GetQueryClauseInfoForQueryWithSyntaxErrors
- [ ] GetSemanticInfoTests
    - [ ] VisitAllExpressions (covers a number of tests)
    - [ ] OmittedTypeArgument
- [ ] ColorColorTests
    - [ ] TestErrorLookup
    - [ ] TestErrorLookupMethodGroup
    - [ ] TestInEnumDecl
- [ ]  GetSymbolInfoOfSelectNodeWhenTypeOfRangeVariableIsErrorType
- [ ]  SymbolInfoForMissingSelectClauseNode



</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38508</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto-completion initializing nullable local creates invalid code</Title>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

**Steps to Reproduce**:
Add this code:
```C#
#nullable enable
class Program
{
    static void Main() { }

    static void M()
    {
        object? o;

    }
}
```
Then type:
`o = new`
and hit space.  It pops up IntelliSense to complete the new expression:
![image](https://user-images.githubusercontent.com/2642209/64354381-54d4fa80-cfcd-11e9-9aa8-21eeef8ece3e.png)
Then type Tab.

**Expected Behavior**:
IntelliSense should select `object`, not `object?`.

**Actual Behavior**:
The selected item is `object?`, which is invalid in a constructor:
![image](https://user-images.githubusercontent.com/2642209/64354472-81891200-cfcd-11e9-8a90-51742ab557ed.png)</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38507</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 has misleading auto-fix name / incorrect preview with unnecessary ??= assignment</Title>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

**Steps to Reproduce**:
```C#
class Program
{
    static void Main() { }

    static object M(object o) =&gt; o ??= new object();
}
```

**Expected Behavior**:
IDE0059 triggers about using `??=` instead of `??` here.

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/2642209/64352426-040fd280-cfca-11e9-9d74-bf86dfa9b11f.png)

The good news is the auto-fix will correctly substitute the "??" for the "??=".  However, two issues:
1) It names the auto-fix "Use discard _", even though it won't.
2) The preview doesn't show either the old or the new code being transformed.</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38506</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0041 only offers `is null` when there's a cast</Title>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

**Steps to Reproduce**:
```C#
using System;

class Program
{
    static void Main() { M1(new object()); M2(new object()); }

    static void M1(object obj)
    {
        if ((object)obj == null)
        {
            throw new ArgumentNullException(nameof(obj));
        }
    }

    static void M2(object obj)
    {
        if (obj == null)
        {
            throw new ArgumentNullException(nameof(obj));
        }
    }
}
```

**Expected Behavior**:
IDE0041 offers to "Use 'is null' check" on both M1 and M2.

**Actual Behavior**:
IDE0041 only offers to "Use 'is null' check" in M1.</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38505</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190905.21
- **Date Produced**: 9/6/2019 1:51 AM
- **Commit**: e99f81b0e3289cfd851be0d927c1fcffa43af6b5
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19455.21

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)



</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38504</IssueID>
    <RepoID>1</RepoID>
    <Title>Editorconfig: dotnet_sort_system_directives_first not obeyed on Format Document </Title>
    <Description>**Version Used**: VS Enterprise 2019, Version 16.2.3

**Steps to Reproduce**:

1. Add `.editorconfig` file with the following setting
```
# Dotnet code style settings:
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
```
2. Open a .cs file with multiple `using` directives with a System directive at the bottom.
3. Format Document (Ctrl+K, Ctrl+D)

**Expected Behavior**:
'Using' directives are re-ordered with System directives moved to top.

**Actual Behavior**:
No change in order of 'using' directives.


Additional Information:

Option to specify order of 'using' directives are found both in Tools&gt;Options as well as editorconfig. 
- Run Default Code Cleanup command (Ctrl+K, Ctrl+E) performs the re-ordering correctly when specified in .editorconfig (Value specified in .editorconfig supersedes value specified in Tool&gt;Options, as expected).
- Format Document doesn't seem to re-order the directives at all! (Regardless of what is specified in .editorconfig or Tools&gt;Options.

Notes on related issues: 
- #17658 - Identical issue raised for VS 2017 closed as not-reproducible.
- #22465 - the issue was raised for the `false` option and was apparently fixed in v15.3, but I'm using v16.2.3 and having issues with `true` option.</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38503</IssueID>
    <RepoID>1</RepoID>
    <Title>C# compiler should report CS1525 when "new" keyword followed by type name is not specified inside object initializer for a type member.</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Professional 2017 
Version 15.9.12
VisualStudio.15.Release/15.9.12+28307.665
Microsoft .NET Framework
Version 4.7.03056
**Steps to Reproduce**:

1. Write object initializer as below in method:
`           var paymentResponse = new PaymentResponse();

            paymentResponse.PaymentCard = new Card
            {
                Number = "number",
                ExpirationDate = new DateTime(year: _validCreditCard.Expiry.Year, month:_validCreditCard.Expiry.Month,day:1),
                Cvv="cvv",
                Type="type",
                Name= "Name",
                Address ={ Address1= "Address1", City= "City", State= "State", Country= "Country", PostalCode= "PostalCode" }
            };
`
2.Try to build above code 

**Expected Behavior**:
Compiler should report CS1525 for line assigning "Address" inside object initializer.
**Actual Behavior**:
Code gets built successfuly. But throws null reference exception while running code since Address property is null.
If code line that assigns "Address" is moved outside Card initializer it reports error CS1525.</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38502</IssueID>
    <RepoID>1</RepoID>
    <Title>A bunch of code refactorings crash if you attempt to add an attribute to a parameter</Title>
    <Description>**Version Used**: 
Version 16.4.0 Preview 1.0 [29303.122.master]

**Steps to Reproduce**:

This affects about ~10 refactorings all with the same stack:

1. Where indicated by $ add a `[`
``` C#
    internal sealed partial class Renamer : IFileRenameHandler
    {
        [ImportingConstructor]
        internal Renamer(IUnconfiguredProjectVsServices projectVsServices,
                         IUnconfiguredProjectTasksService unconfiguredProjectTasksService,
                         $VisualStudioWorkspace workspace,
                         IVsService&lt;Shell.Interop.SDTE, EnvDTE.DTE&gt; dte,
                         IEnvironmentOptions environmentOptions,
                         IUserNotificationServices userNotificationServices,
                         IRoslynServices roslynServices,
                         IWaitIndicator waitService,
                         IRefactorNotifyService refactorNotifyService)
            : this(projectVsServices, unconfiguredProjectTasksService, workspace as Workspace, dte, environmentOptions, userNotificationServices, roslynServices, waitService, refactorNotifyService)
        {
        }
 }
```

**Expected Behavior**:
No crash

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/1103906/64308436-9d47e480-cfdc-11e9-80c6-e8a6917e1357.png)

```
System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.
Parameter name: position
   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)
   at Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.GetInitialToken(SyntaxNode root,Int32 position,Boolean includeSkipped,Boolean includeDirectives,Boolean includeDocumentationComments)
   at Microsoft.CodeAnalysis.Shared.Extensions.SyntaxNodeExtensions.FindTokenOnRightOfPosition(SyntaxNode root,Int32 position,Boolean includeSkipped,Boolean includeDirectives,Boolean includeDocumentationComments)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSyntaxFactsService.GetStartOfNodeExcludingAttributes(SyntaxNode node)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSyntaxFactsService.IsOnHeader[THoleSyntax](Int32 position,SyntaxNode ownerOfHeader,SyntaxNodeOrToken lastTokenOrNodeOfHeader,ImmutableArray`1 holes)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSyntaxFactsService.IsOnHeader(Int32 position,SyntaxNode ownerOfHeader,SyntaxNodeOrToken lastTokenOrNodeOfHeader)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxFactsService.IsOnParameterHeader(SyntaxNode root,Int32 position,SyntaxNode&amp; parameter)
   at Microsoft.CodeAnalysis.CodeRefactorings.AbstractRefactoringHelpersService`2.&lt;ExtractNodesInHeader&gt;d__7.MoveNext()
   at System.Linq.Enumerable.&lt;OfTypeIterator&gt;d__95`1.MoveNext()
   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()
   at Microsoft.CodeAnalysis.CodeRefactorings.AbstractRefactoringHelpersService`2.AddNonHiddenCorrectTypeNodes[TSyntaxNode](IEnumerable`1 nodes,ArrayBuilder`1 resultBuilder,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.CodeRefactorings.AbstractRefactoringHelpersService`2.GetRelevantNodesAsync[TExpressionSyntax,TArgumentSyntax,TSyntaxNode](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContextExtensions.GetRelevantNodesAsync[TSyntaxNode](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContextExtensions.TryGetRelevantNodeAsync[TSyntaxNode](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.InvertLogical.AbstractInvertLogicalCodeRefactoringProvider`3.ComputeRefactoringsAsync[TSyntaxKind,TExpressionSyntax,TBinaryExpressionSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38501</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC: fix handing of added and design-time-only files</Title>
    <Description>Adds a `DesignTimeOnly` flag to `DocumentOperationService` that is set for documents created for design-time only purposes (.cshtml, intellisense-only .g.cs files) and not included in the compilation when the assembly is built. This allows the EnC service to ignore changes in such files.

Also fixes an issue in EnC analysis where a NRE might have been thrown when a file was added during run mode. 

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/976731
Fixes https://github.com/aspnet/AspNetCore/issues/13284
Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/793522
</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38500</IssueID>
    <RepoID>1</RepoID>
    <Title>Disposer cleanup for pooled objects.</Title>
    <Description>
    </Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38499</IssueID>
    <RepoID>1</RepoID>
    <Title>Sort completion list by pattern matching results</Title>
    <Description>Address #38253 with two tweaks

1. Sort completion list by pattern matching results first, then by alphabetical order (current behavior is pure alphabetical order)
2. Selection will prefer unimported item with complete match if there's no in-scope items with complete match (current behavior is always prefer in-scope items, even if it has worse matching than unimported items)

---------------------------------

- Ctrl + space, when a complete match exists for both in-scope and unimported items. We will prefer in-scope items. Another impact of this change is, in case there's no complete match, we might end up selecting an in-scope item, with better matched unimported items above the selection (not shown in the gif).

&lt;a href="https://user-images.githubusercontent.com/788783/64370300-0a567c80-cfd3-11e9-8ece-1dffbba1b2ce.gif"&gt;&lt;img src="https://user-images.githubusercontent.com/788783/64370300-0a567c80-cfd3-11e9-8ece-1dffbba1b2ce.gif" width="400" /&gt;&lt;/a&gt;

- Ctrl + J, same scenario as above, Notice all unmatched items remain sorted first by in-scope/unimported and then in alphabetical order *after* all matched items

&lt;a href="https://user-images.githubusercontent.com/788783/64371107-a0d76d80-cfd4-11e9-9d90-c805b16f973d.gif"&gt;&lt;img src="https://user-images.githubusercontent.com/788783/64371107-a0d76d80-cfd4-11e9-9d90-c805b16f973d.gif" width="400" /&gt;&lt;/a&gt;

- Ctrl + space, when only unimport item has a complete match, then it will be selected

&lt;a href="https://user-images.githubusercontent.com/788783/64371278-0c213f80-cfd5-11e9-9a32-e0c953635350.gif"&gt;&lt;img src="https://user-images.githubusercontent.com/788783/64371278-0c213f80-cfd5-11e9-9a32-e0c953635350.gif" width="400" /&gt;&lt;/a&gt;

Since this is a potentially impactful change, hide it behind an experiment for now.
Tag @ivanbasov @CyrusNajmabadi for review. 

FYI @davkean Does this address your feedback?

------------------------------- 

I have done some quick perf analysis, which is based on the following scenario:

1. Open Roslyn.sln, then navigate to the static constructor of `AbstractPersistentStorageTests` class. (I chose this file because it has ~20k items in the list with import completion enabled)
2. Ctrl + space to trigger completion list
3. slowly type "task"
4. slowly delete "task" by using backspace
5. hit "esc" to discard completion list
6. go to step 2 and repeat for another 3 times

This is repeated 3 time, with different roslyn release builds
1. Baseline: built directly from current master-vs-deps branch
2. With experiment disabled: with the change in this PR w/o enabling the experiments
3. With experiment enabled: does one more pass of sorting using pattern match, otherwise identical to build 2 above.

Here's the results (CPU stacks in perfview, with only frames under `ManagedModule!Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.UpdateCompletionList()` included)

1. Comparing experiment on and off. The extra sorting doesn't show in the diff at all.

![image](https://user-images.githubusercontent.com/788783/64387430-cecaab00-cff0-11e9-963f-e3f0e8134c2f.png)

2. Comparing baseline and with experiment enabled. It seems the perf is better with the change (~~216 ms~~ even better now, see update below), due to calling pattern match fewer times.

![image](https://user-images.githubusercontent.com/788783/64387831-fc642400-cff1-11e9-87e0-c4f18be3a70f.png)

Update: 
with the change in https://github.com/dotnet/roslyn/pull/38499/commits/087bc0a3d72f80acb4cb5758cda7266debafb9d1, now the diff is -569 ms compare to baseline (~2000 vs ~1450)

![image](https://user-images.githubusercontent.com/788783/64393392-02640000-d006-11e9-8208-b6cab51a1920.png)

</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38498</IssueID>
    <RepoID>1</RepoID>
    <Title>Make sure we Dispose() the options processor of CPS projects</Title>
    <Description>Commit at a time recommended, as the first commit is just me adding nullable annotations.

- Fixes #38443
- Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/951410</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38497</IssueID>
    <RepoID>1</RepoID>
    <Title>Automatic namespace imports break muscle-memory and impedes typing</Title>
    <Description>**Version Used**: 
VS 2019 16.3 Preview 4 (Int Preview)

**Steps to Reproduce**:

1. Set caret inside of a private non-static method
2. Type 'this.'

**Expected Behavior**:

Completion list is displayed with non-static member items of this class.

**Actual Behavior**:

Completion auto-completes to 'CallConvThiscall' and adds a using for `System.Runtime.CompilerServices`.

Auto-importing is nice but IMO needs to be a bit less aggressive. I frequently find myself needing to undo what it did. One obvious case is when the user types a keyword, especially 'this', 'value', etc. These should never be considered for completion/auto-namespace-import or they should be added to the completion list so the keyword is the selected match when the user types a commit character.</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38496</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38495</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38494</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust dependency tracking for types with respect to added ability to nest types into interfaces.</Title>
    <Description>Related to #34704.

**We used to have the following rules:**

"When a class B derives from a class A, it is a compile-time error for A to depend on B. A class **directly depends on** its direct base class (if any) and **directly depends on** the ~~**class**~~ within which it is immediately nested (if any). Given this definition, the complete set of ~~**classes**~~ upon which a class depends is the reflexive and transitive closure of the **directly depends on** relationship."

It is a compile-time error for an interface to directly or indirectly inherit from itself.
The **base interfaces** of an interface are the explicit base interfaces and their base interfaces. In other words, the set of base interfaces is the complete transitive closure of the explicit base interfaces, their explicit base interfaces, and so on.

**Since we added ability to nest types into interfaces, we are adjusting them as follows:**

When a class B derives from a class A, it is a compile-time error for A to depend on B. A class **directly depends on** its direct base class (if any) and **directly depends on** the _**type**_ within which it is immediately nested (if any).

When an interface IB extends an interface IA, it is a compile-time error for IA to depend on IB. An interface **directly depends on** its direct base interfaces (if any) and **directly depends on** the type within which it is immediately nested (if any).

Given these definitions, the complete set of **types** upon which a type depends is the reflexive and transitive closure of the **directly depends on** relationship.</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38493</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable xUnit2002: Assert.NotNull validation</Title>
    <Description>This enables xUnit analyzer rule xUnit2002 which validates the expression being passed to `Assert.NotNull` is not a value type. The Roslyn code base had ~2,000 violations of this rule mostly due to passing `SyntaxToken` here. Presumably this is a historical artifact from the times when `SyntaxNode` was defined as a `class` instead of `struct`. 

The code was mechanically transformed in the following way:

``` csharp
// old
Assert.NotNull(token);
// new
Assert.NotEqual(default, token)
```

I did give some consideration to just removing all the uses of `Assert.NotNull` when the argument passed in was side effect free (mostly locals). Eventually I decided against this though because I didn't want to mix potentially deleting valuable code with a mechanical transformation. If we do want to remove the non-sense comparisons here we should take that as a separate change.
</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38492</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix violations of xUnit analyzers</Title>
    <Description>Turning on a few warnings and fixing violations of them.</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38491</IssueID>
    <RepoID>1</RepoID>
    <Title>winforms ResetPropertyName and ShouldSerializePropertyName incorrectly marked with IDE0051: Private member is unused</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/678086/winforms-resetpropertyname-and-shouldserializeprop.html)._

---
https://github.com/binki/ShouldSerializeResetPropertyIde0051/blob/971f524e347c472da9157a6048c88335c82f5fe6/ShouldSerializeResetPropertyIde0051/UserControl1.cs#L31

https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods

When I have a member `void ResetX() {}` in a class inheriting from `System.Windows.Forms.Control` with a member `public object X { get; set; } `, Visual Studio incorrectly reports IDE0051 and provides a codefix to remove “unused code”. However, that method is actually discovered and called by Designer if the user right-clicks on the property in the PropertyGridView and selects Reset.

Visual Studio should know about the private members that winforms will discover and not mark them unused. It should, for example, find unused members that are unused because the property referenced by the naming convention is not found. For example, it should report `void ResetY() {}` as unused if there is no `public object Y { get; set; } `.

---
### Original Comments

#### Visual Studio Feedback System on 8/6/2019, 00:12 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38490</IssueID>
    <RepoID>1</RepoID>
    <Title>'csharp_style_conditional_delegate_call = true:silent' not honored by RunDefaultCodeCleanup</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/611252/csharp-style-conditional-delegate-call-truesilent.html)._

---
When I click on EditorContextMenus.FileHealthIndicator.RunDefultCodeCleanup statements that should be handled by 'csharp_style_conditional_delegate_call = true:silent' are not modified, but the same statements have a light-bulb showing that they can be modified manually.

In the attached screen-shot there is a light-bulb next to one of the statements not being handled - unfortunately the contents of the light-bulb prompt disappears when I switch from VS to this feedback or the 'Snip &amp;amp; Sketch' tool - but the text on the dialog-box is 'IDE1005 Delegate invocation can be simplified' and the simplification shows the null-propagation that will be used.

Attached is my .editorconfig file.

---
### Original Comments

#### Visual Studio Feedback System on 6/18/2019, 02:00 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Rui Zhang [MSFT] on 6/19/2019, 01:55 AM: 

&lt;p&gt;&lt;strong&gt;Thanks for your feedback! For us to investigate this further, we need confirm more information with you: Did this issue only happen in your current project or happen in the new created simple project too? And did this issue only happen in a certain type of project(WPF App, Windows Forms App, etc)?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;If this issue only happened in current one project and only happen in a certain type, please check whether your team members received the same issue when they were working with this one application on their machines?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;If develop the same project on other machines without this issue, and there's no any specific step/operation will cause this issue in VS on your machine, could you please provide us more information(your steps, your sample project, etc.) to do the further investigation?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;

#### Lee Silver on 6/19/2019, 03:14 PM: 

I'm the only developer.&lt;br&gt;&lt;br&gt;The Project is Platform:windows Project Type:Library.&lt;br&gt;&lt;br&gt;I created a dummy Platform:windows Project Type:Console, copied one of the offending files into it and got the same results -- RunDefaultCodeCleanup did not do the expected transform
#### Rui Zhang [MSFT] on 6/23/2019, 08:10 PM: 

&lt;p&gt;Thank you for your feedback! For us to investigate this further, could you please provide your sample app and detailed steps? we need to reproduce and analyze it. We look forward to hearing from you!&lt;/p&gt;

#### Lee Silver on 6/24/2019, 03:44 PM: 

Attached are ClassLibrary1.csproj and Class1.cs - you already have the .editorconfig file.&lt;br&gt;&lt;br&gt;Click on&lt;br&gt;&lt;br&gt;EventHandler eh = (EventHandler) Events [UIACanResizeChangedEvent];&lt;br&gt;&lt;br&gt;and you will see a light-bulb offering to simplify the delegate invocation.&lt;br&gt;But run EditorContextMenus.FileHealthIndicator.RunCustomCodeCleanup and you will see that the code-sequence is not transformed when I believe it should be transformed to&lt;br&gt;&lt;br&gt;((EventHandler)Events[UIACanResizeChangedEvent])?.Invoke(this, e);&lt;br&gt;&lt;br&gt;which is what happens when the light-bulb transform is clicked.&lt;br&gt;Note that the &lt;br&gt;&lt;br&gt;int x;&lt;br&gt;&lt;br&gt;statement is changed to&lt;br&gt;&lt;br&gt;Int32 x;&lt;br&gt;&lt;br&gt;showing that  RunCustomCodeCleanup ran.
#### Lee Silver on 7/4/2019, 07:23 PM: 

Sorry for the delay - I somehow missed your request for additional info.&lt;br&gt;&lt;br&gt;Attached is test.zip containing a new sample the demonstrates the problem.&lt;br&gt;
#### Rui Zhang [MSFT] on 6/27/2019, 10:42 PM: 

&lt;p&gt;Thank you for your feedback! We cannot use the files(ClassLibrary1.csproj and Class1.cs) that you provided  to debug. For us to investigate this further, could you please provide a compressed file of the entire project? We look forward to hearing from you!&lt;/p&gt;

#### Lee Silver on 7/14/2019, 03:46 PM: 

Just checking that you got the zip-file I sent on 7/5.
#### Rui Zhang [MSFT] on 7/16/2019, 02:47 AM: 

&lt;p&gt;Thank you for your reply, what is issue you received? Is clicking the light-bulb to rewrite the code?&lt;/p&gt;

#### Lee Silver on 7/16/2019, 03:03 PM: 

No, clicking the light-bulb works just fine.&lt;br&gt;&lt;br&gt;But as I stated when I reported the problem "When I click on EditorContextMenus.FileHealthIndicator.RunDefultCodeCleanup statements that should be handled by ‘csharp_style_conditional_delegate_call = true:silent’ are not modified, but the same statements have a light-bulb showing that they can be modified manually."&lt;br&gt;&lt;br&gt;In other words, I believe the statement with the light-bulb should be rewritten by EditorContextMenus.FileHealthIndicator.RunDefultCodeCleanup because my .editorconfig-file contains ‘csharp_style_conditional_delegate_call = true:silent’, but it isn't. It is only rewritten when done via the light-bulb.
#### Lee Silver on 7/24/2019, 07:18 PM: 

&lt;p&gt;hmmm - VS Report a Problem says this was updated by John Qiao on 7/25 but I can find no such comment.&lt;/p&gt;

#### Visual Studio Feedback System on 7/25/2019, 02:40 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38489</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix typo 'paramereters' in IDE0060 FxCop analyzer rule</Title>
    <Description>**Version Used**: 

```xml
&lt;PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.9.4"&gt;
```

**Steps to Reproduce**:

1. Use this rule and trigger IDE0060 by having an unused parameter
2. See typo in message
3. Or, more simply, use this GitHub search to see the typos: https://github.com/dotnet/roslyn/search?q=paramereters&amp;unscoped_q=paramereters

**Expected Behavior**:
No typos.

**Actual Behavior**:
Tpyos.


Note: This typo was mentioned in https://github.com/dotnet/roslyn/issues/35063#issuecomment-496960792 but not addressed.</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38488</IssueID>
    <RepoID>1</RepoID>
    <Title>Add rename API for IWorkspaceProjectContext</Title>
    <Description>Add rename as a formal API. This is the first step towards allowing us to do more things on file rename, like class or namespace fixes. It should also allow users to be more explicit about their intent instead of removing and adding files. 

https://github.com/dotnet/roslyn/issues/37243  

</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38487</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense ignores case sensitivity in case of enums and prefers wrong items</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38297

When comparing completion items, we ignore case sensitivity in the following scenario:

  ```
      void M(SampleEnumsampleEnum)
        {
            N($$
        }

        void N(SampleEnumsampleEnum) { }
        enum SampleEnum
        {
            One,
            Two
        }
```
Type `s`.

**Expected**
The selected item is `sampleEnum`.

**Actual**
The selected item is `SampleEnum`.


</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38486</IssueID>
    <RepoID>1</RepoID>
    <Title>Relaxed ordering for ref this does not check language version</Title>
    <Description>**Version Used**: Roslyn 2.7.0 or newer

**Steps to Reproduce**:

Run the following code:

```c#
using System;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

class Program
{
    static void Main()
    {
        string code = @"
struct S {}

static class Extensions
{
    static void M1(this ref S s) {}
    static void M2(ref this S s) {}
}";

        var tree = SyntaxFactory.ParseSyntaxTree(code, new CSharpParseOptions(LanguageVersion.CSharp7));

        var compilation = CSharpCompilation.Create("a.dll", options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
            .AddSyntaxTrees(tree)
            .AddReferences(MetadataReference.CreateFromFile(typeof(object).Assembly.Location));

        foreach (var diag in compilation.GetDiagnostics())
            Console.WriteLine(diag.ToString());
    }
}
```

**Expected Behavior**:

Both methods report an error saying that such code is not available in C# 7.0.

**Actual Behavior**:

Only `M2` reports an error:

&gt; (7,20): error CS8107: Feature 'ref extension methods' is not available in C# 7.0. Please use language version 7.2 or greater.

I think this happens because when the ordering of modifiers on `ref` extension methods was relaxed in 2.7.0, a language version check wasn't added for the new syntax.

I think this isn't a serious problem and fixing it would be a breaking change, so this might not be worth fixing, but I thought it was worth reporting anyway.

This behavior was discovered in https://github.com/dotnet/docs/issues/13877.</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38485</IssueID>
    <RepoID>1</RepoID>
    <Title>C# compiler fails to parse is operator with a recursive pattern using type parameters</Title>
    <Description>**Version Used**: master (31 Aug 2019) on SharpLab

**Steps to Reproduce**:
1.  Create a type with generic type parameters:
```cs
public readonly struct Box&lt;T&gt;
{
    public T Obj { get; }

    public Box(T obj)
    {
        this.Obj = obj;
    }
}
```
2. Attempt to use that type in an `is` expression with recursive pattern matching:
```cs
public static bool RecursiveIsBox&lt;T&gt;(object x)
{
    return x is Box&lt;T&gt; { Obj: T _ };
}
```
3. The following 5 errors are emitted:
```
error CS1525: Invalid expression term '{'
error CS1002: ; expected
error CS1002: ; expected
error CS0305: Using the generic type 'Box&lt;T&gt;' requires 1 type arguments
error CS0119: 'T' is a type, which is not valid in the given context
```

p.s.: SharpLab sample [here](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEDMACBcIBMD2AdgDYCeGsCArgMYwYBC+AHgDwAqAfALABQA3nwzCM6DOwwB5YACsM/DAHM4MANwYAvnyEixTZgAoJ+WQEodwwbxE2MMABYBLKADppcgLwYTM1Rc18Wrx8YigAjABsogBMjHxWNqGRGMD4+MQYAJJQ+hycBj5wdBjM5tYiCbbCKADsJRjOjCx5KSwYAGTtrcxusg1Q4hgA+n7lwkE2/klRqekYAEpFVAhQjgBucNm5XAWyRfSl/pVVtfWN25zyUrIgg0OaozZBGkA=)

**Expected Behavior**:
The code is parsed and accepted and works in the same way as if the operations were done separately as in the following code:
```cs
public static bool IsBox&lt;T&gt;(object x)
{
    return x is Box&lt;T&gt; box &amp;&amp; box.Obj is T _;
}
```

**Actual Behavior**:
The errors are emitted.</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38484</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to next highlighted reference stops working if the current reference is incremented</Title>
    <Description>**Version Used**: VS 16.2

**Steps to Reproduce**:

- Move caret to the first `i` and wait for it to be highlighted
- Move to next highlighted reference once (`Ctrl+Shift+Down`), wait 1 sec
- Move to next highlighted reference once (`Ctrl+Shift+Down`), wait 1 sec
- Move to next highlighted reference once (`Ctrl+Shift+Down`), only now it won't work

```C#
namespace ConsoleApp18
{
    class Program
    {
        static void Main(string[] args)
        {
            int i = 0;
            if (i == 1) { }
            i++;
            _ = i;
        }
    }
}
```

**Expected Behavior**:

The reference is still highlighted even if it's incrementing its value (`i++`) so you can move to the next reference again.

**Actual Behavior**:

The reference isn't highlighted anymore (it takes ~0.5 secs)

I think this is a regression.</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38483</IssueID>
    <RepoID>1</RepoID>
    <Title>Duplicate PeekDefinition results for TS IGoToDefinitionService implementation</Title>
    <Description>https://devdiv.visualstudio.com/DevDiv/_git/TypeScript-VS?path=%2FVS%2FLanguageService%2FTypeScriptLanguageService%2FShared%2FFeatures%2FGoToDefinition%2FTypeScriptGoToDefinitionService.cs&amp;version=GBmaster&amp;line=39&amp;lineStyle=plain&amp;lineEnd=40&amp;lineStartColumn=1&amp;lineEndColumn=1

TS provides their own peek definition handling.  Roslyn also calls the IGoToDefinitionService for peek definition, which results in duplicate results for TS when `FindDefinitionsAsync` is implemented on their side.

This causes issues in liveshare, because now we have to use FAR for TS go to definition requests.

We need to do something to resolve the duplicate results for peek definition (flag, prevent roslyn from handling it, etc.) so we can re-implement IGoToDefinitionService for TS and use it in liveshare.
</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38482</IssueID>
    <RepoID>1</RepoID>
    <Title>Extend Introduce local for expression statement to handle unbounded LHS of assignment expr.</Title>
    <Description>**Steps to Reproduce**:
```csharp
$$unboundedIdentifier = 42;
```

**Expected Behavior**:
Introduce local offered &amp; -&gt;
```csharp
int unboundedIdentifier = 42;
```

**Actual Behavior**:
No refactoring offered as fixed by #38476</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38481</IssueID>
    <RepoID>1</RepoID>
    <Title>Move RemoveUnusedMembers diagnostic analyzer to IDE codestyle analyze…</Title>
    <Description>…r NuGet project

This is draft PR to aid/drive the design issues in https://github.com/dotnet/roslyn/issues/38480</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38480</IssueID>
    <RepoID>1</RepoID>
    <Title>Design issues around moving IDE code style analyzers to CodeStyle Analyzers NuGet package</Title>
    <Description>As part of https://github.com/dotnet/roslyn/issues/34907, we want to move as many IDE analyzers as possible into the CodeStyle analyzers NuGet package so the rules can be enforced on build/CI. We have already moved IDE0055 (Formatting analyzer) to this NuGet package, and I tried to move an additional analyzer to the package (https://github.com/dotnet/roslyn/pull/38481), but ran into bunch of design questions/issues that need to be discussed.

1. **Diagnostic Analyzer:** This is the core piece that needs to be ported from IDE Features project to CodeStyle project. Design questions in this effort:
   1. **Should we re-use the same IDE diagnostic IDs for the ported analyzer?**
       Design Proposal: "yes", otherwise we run into issue about identical diagnostics with just a differing ID for each violation, duplicate suppressions, duplicate configuration (editorconfig/ruleset/nowarn entries) etc.
   2. **De-duping of diagnostics from different sources:** If we re-use the diagnostic IDs for the ported analyzer, this will likely happen by default. We should confirm with @heejaechang. 
   3. **De-duping of diagnostic analyzers from different sources:** Given that the analyzer assembly containing these analyzers have different name (CodeStyle versus Features), there will be no automatic-deduping of analyzers and the analyzer from both these sources will execute. Do we care about the performance impact from duplicate analyzer execution? Should we add custom logic to IDE diagnostic service to not execute the IDE analyzer when there is an identical analyzer (say with same name and reporting same supported diagnostic IDs)?
   4. **Should we move the CodeStyle package to reference Microsoft.CodeAnalysis 3.x?** Currently, the CodeStyle NuGet package targets Microsoft.CodeAnalysis 2.8.2 to enable running on Dev15 to promote dogfooding. However, this prevents porting of bunch of analyzers which use APIs from Microsoft.CodeAnalysis 3.x. We can take couple of approaches here:
      1. Move to Microsoft.CodeAnalysis 3.x and officially state that newer CodeStyle NuGet packages are only supported with Dev16 and 3.x compiler toolset. Dev15 users can use prior CodeStyle packages.
      2. Stay on Microsoft.CodeAnalysis 2.8.2, and use Reflection based approach to light up analyzers using newer APIs if user is on Dev16.
      Personally, I hate the reflection based approach and would strongly prefer just moving to Microsoft.CodeAnalysis 3.x.

2. **Code fixer:** This is likely the most controversial and tricky piece to port, given that majority of our code fixers depend on internal IDE workspace and language services and extension methods, which in turn use bunch of internal utilities, helper utilities (for example, symbol equivalence comparer), etc.
   1. **Should we port IDE code fixers to Code Style layer?** Theoretically speaking, this is not required as code fixers never execute in CI. Following are the pros and cons of this porting effort:
      1. PROS:
         1. Code style layer can remain isolated from IDE, and can be on par with other third party analyzer/fix packages. This can help us identify potential IDE internal APIs and utilities that should be made public.
         2. Protects us against breaking change in the analyzer, where IDE code fixers do not need to handle all versions of analyzer (from different version of NuGet packages)
       2. CONS:
          1. Implementation cost: As mentioned above, porting code fixers would likely be the most costly part of the port effort, possibly also making this whole work item unfeasible and unrealistic.
          2. Unmaintainable code: The entire IDE Workspaces and Features layer would be filled with linked files, #ifdefs based on code style preprocessor directive, splitting of extension methods into two separate files, one included in both Code Style and IDE layers, and one only in IDE layer. IMO, the code keeps getting pretty mess to work with and maintain.
           3. De-duping code fixers: We will end up showing duplicate, identical code fixes from CodeStyle NuGet and IDE (need to confirm), which means we need to design a way to de-dupe code fixers and implement it. This would mean more work.

      **Design Proposal:** Given the extremely large number of highly impactful CONS and the overall implementation and maintenance cost likely being a deal breaker for this effort, I would like to propose that we don't port the code fixers to code style layer. We should harden the code fixers so they gracefully bail out if the diagnostic location/properties is not as it expects, so it can handle analyzer breaking changes gracefully, and we can recommend customers to just upgrade to latest analyzer NuGet package to light-up the IDE code fixers again.

2. **Unit tests:** 
   1. **Should we port and/or clone unit tests for analyzers/fixers CodeStyle project?** We have following possible approaches, each with its own PROS and CONS:
      1. **Clone unit test files into CodeStyle project:** This approach is only applicable if we decide that we are going to port the code fixers into CodeStyle NuGet layer, otherwise the unit tests need to continue using IDE code fixers and hence cannot be moved to CodeStyle unit tests project. Formatting analyzer port did not port any existing formatting tests, but added just a few additional formatting analyzer tests in the CodeStyle package for the ported analyzer. This approach will certainly not work for other analyzers, as we want to run every authored analyzer/fixer unit test for both the IDE version of the analyzer and the ported analyzer in CodeStyle package. Creating cloned test files in CodeStyle unit test project will likely be impossible to maintain and keep them in sync with Features unit test project. Additionally, if we decide not to re-use the IDE test framework, and use the new Microsoft.CodeAnalysis testing library, we will have to edit each and every ported unit test, which will enormously increase the port and maintenance effort.
      2. **Link unit test files into CodeStyle project and continue using the IDE test framework:** This is comparatively much easier to implement and maintain compared to the prior approach. Again this approach is only applicable if we decide to port the code fixers into CodeStyle NuGet layer. I think this might be the most feasible approach if we decide to keep the CodeStyle package and its test project isolated from rest of Roslyn.sln.
      3. **Tweak the existing IDE test helpers in Features test project to test analyzers and/or fixers from both the Features and Code Style layer:** With this approach, the core unit test helpers just have an additional test dimension where they run with CodeStyle analyzer and/or CodeStyle fixer (latter is needed if we decide to port the fixers). This would be similar to how our IDE analyzer/fixer tests run for both regular and script code kind by default. Each test file would just need to override a helper indicating additional analyzer/fixer against which to run all the tests. This approach would likely be minimal porting effort and also easiest to maintain.

**Overall Design Proposal:** I think we should try to keep a very good balance between ideal and practical aspects of the above approaches. I fear taking the ideal approach, which would be to port analyzer, code fixers and unit tests (also moving them to new analyzer/fixer test library) would make this effort almost impossible to complete.
IMO, we should do the minimal implementation/maintenance cost approach which would be feasible and also gives end user value add: **port just the diagnostic analyzers and do not port the code fixers or unit tests**, but just ensure that the code fixers are hardened against analyzer breaking changes and tweak existing IDE unit tests to also run with ported CodeStyle analyzers.

</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38479</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio Profession 2019 Performance Issue.</Title>
    <Description>**Microsoft Visual Studio Profession 2019. Version 16.2.3. Window 10 with Lates updates**: 

**Main Issue**:
I have just opened two projects in two different VS IDE windows. The servicehub.host.clr.x86(32 bit) take 96% of CPU time for a minute and during this time IDE behaves very slow, even IntelliSense are not show the suggestion very slow. I am not sure how to solve this issue, either I have to switch back to VS Community 2017 or what.

**Expected Behavior**:
VS IDE should be smooth and.
**Actual Behavior**:
Very hight cpu utilization and 900 MB of RAM usage.</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38478</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190903.5
- **Date Produced**: 9/3/2019 10:25 PM
- **Commit**: 6e94f0da0f12c7663ab39ce5bd6a67c4ab58b5ee
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19453.5

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38477</IssueID>
    <RepoID>1</RepoID>
    <Title>Liveshare FAR requires UI thread</Title>
    <Description>Currently, liveshare FAR requires the UI thread as it calls into the [AbstractFindUsagesService](http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/FindUsages/AbstractFindUsagesService.cs,bc260059e380e9ca).  This requires the UI thread to get third party definitions (which in this case means XAML).  We need to remove UI thread dependencies (and editor dependencies) from the liveshare implementation in order to create a proper LSP version of FAR.

Known UI dependencies in FAR
1.  [XAML navigation](http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Workspace/VisualStudioSymbolNavigationService.cs,266)
    a.  Service provider
    b.  IVsHierarchy
    c.  IVsSymbolicNavigationNotify
2.  [Invisible editor](http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/FindReferences/VisualStudioDefinitionsAndReferencesFactory.cs,66) (find source line)

For 1), we need to work with the XAML team to define a way to provide navigation in the new VS APIs as many of the concepts being used there may go away.

Generally, the approach being considered is to move to the lower level data API SymbolFinder, but we still need to figure out how to handle 1).</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38476</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't offer Introduce local for expression statement if expr. stm is assignment.</Title>
    <Description>
    </Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38475</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38474</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to release/dev16.3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-release/dev16.3-vs-deps
git reset --hard upstream/release/dev16.3-vs-deps
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38473</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38472</IssueID>
    <RepoID>1</RepoID>
    <Title>Update VS SDK to 16.3.2099</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/970596</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38471</IssueID>
    <RepoID>1</RepoID>
    <Title>Address potential issues reported by VS SDK analyzer (warning VSSDK006)</Title>
    <Description>Remove suppression of the warning from Settings.props.

The analyzer also throws, so will need to be fixed before we can enable it:
```
CSC : error AD0001: Analyzer 'Microsoft.VisualStudio.SDK.Analyzers.VSSDK006CheckServicesExistAnalyzer' threw an exception of type 'System.ArgumentException' with message 'Syntax node is not within syntax tree'. [\src\VisualStudio\Core\Def\Microsoft
.VisualStudio.LanguageServices.csproj]
```</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38470</IssueID>
    <RepoID>1</RepoID>
    <Title>Collapse redundant types in the server part 2</Title>
    <Description>Follow up to #308411

This is probably best reviewed commit by commit. 

Note: I've intentionally avoided re-naming files because I want to keep the history diff as easy as possible. Once this is merged I will have one final PR which does all of the proper file renaming to match the new class names.</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38469</IssueID>
    <RepoID>1</RepoID>
    <Title>Nested type is not found in a base interface when it is referenced in a type-or-namespace-only position.</Title>
    <Description>```
interface I100
{
    public class C100
    {
        public static void Test() { }
    }
}

interface I101 : I100
{
    private C100 Test1() =&gt; null; // error CS0246: The type or namespace name 'C100' could not be found (are you missing a using directive or an assembly reference?)

    static void Test2()
    {
        C100.Test();
    }
}
```

Observed:
```
private C100 Test1() =&gt; null; // error CS0246: The type or namespace name 'C100' could not be found (are you missing a using directive or an assembly reference?)
```

No error (the type is found in base interface) for: 
```
        C100.Test();
```

Expected: No errors, the type should be found.

This is not a regression in C# 8. This code wasn't changed in the compiler for a long time. Note the ```(options &amp; (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) == 0``` condition.
```
        // Lookup member in interface, and any base interfaces.
        private static void LookupMembersInInterfaceOnly(
            LookupResult current,
            NamedTypeSymbol type,
            string name,
            int arity,
            ConsList&lt;TypeSymbol&gt; basesBeingResolved,
            LookupOptions options,
            Binder originalBinder,
            TypeSymbol accessThroughType,
            bool diagnose,
            ref HashSet&lt;DiagnosticInfo&gt; useSiteDiagnostics)
        {
            Debug.Assert((object)type != null);
            Debug.Assert(type.IsInterface);

            LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
            if ((options &amp; (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) == 0 &amp;&amp; !originalBinder.InCrefButNotParameterOrReturnType)
            {
                LookupMembersInInterfacesWithoutInheritance(current, type.AllInterfacesWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics), name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics);
            }
        }
```

I think the check violates language specification, however, removing it might introduce a breaking change for existing code because types nested into interfaces were always supported by runtime, and could be produced by other languages like VB, etc. Removing the condition could resolve the identifier to a different type. For example, if there was a type named C100 in the global namespace for the example above, the C100 identifier in ```private C100 Test1() =&gt; null;``` would bind to that type. If we change lookup behavior to follow the spec, it would silently find I100.C100 type instead.
```
 </Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38468</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 16.2.3 - IDE0044 CodeFix Removes Whitespace</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/721116/vs-1623-ide0044-codefix-removes-whitespace.html)._

---
The codefix for IDE0044 'Make field readonly' removes whitespace.

Pre-codefix:
```
namespace IDE0044_CodeFix_Removes_Whitespace
{
    public class C
    {
        int x;

int y;

public C(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    }
}
```

Post-codefix:
```
namespace IDE0044_CodeFix_Removes_Whitespace
{
    public class C
    {
        readonly int x;
        readonly int y;

public C(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    }
}
```

Shouldn't it respect my whitespace and change the code to this?
```
namespace IDE0044_CodeFix_Removes_Whitespace
{
    public class C
    {
        readonly int x;
        
readonly int y;

public C(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    }
}
```

---
### Original Comments
(no comments)

---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38467</IssueID>
    <RepoID>1</RepoID>
    <Title>Confusing error message when the target member cannot be located for an explicit interface implementation</Title>
    <Description>```
interface I100 { }

class C100 : I100
{
    object I100.M4() =&gt; null;
}
```

Observed:
```
 error CS0539: 'C100.M4()' in explicit interface declaration is not found among members of the interface that can be implemented
```

But C100 doesn't have member named M4.
</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38466</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove the workspace IVT of SourceBasedTestDiscovery and LiveUnitTesting</Title>
    <Description>This PR adds all wrappers and interfaces that SourceBasedTestDiscovery and LiveUnitTesting need so that they don't directly reference the IVTs type from Roslyn.</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38465</IssueID>
    <RepoID>1</RepoID>
    <Title>find all references and navigate to not using caches</Title>
    <Description>our code used to work without persistent service and persistent service was an optional component. if persistent service doesn't exist or doesn't work for whatever reason, we used to cache find all reference or go-to index in memory.

this seems changed now and at the same situation, it looks like we don't cache at all and re-calculate everything from scratch every single time.

it might be okay for one-off FAR or go to time to time but when doing that many times, it shows big performance degradation.

the most common case for this is when one opens multiple VS for same solution (same sln file). then 1 VS will use cache and the other VS won't use any cache making second one very slow on these operations.

another case is one doing FAR or go to (SymbolFinder) on MSBuildWorkspace or AdhocWorkspace or any custom Workspace. these workspace will never use persistent service by default. so always get worst performance.

also, it is not possible for them to enable persistent service since it requires location service (to know where to save the persistent file) and that service is internal and can't provided by users.

it would be nice to put back the in memory cache so that people can get in memory cache by default at least.

</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38464</IssueID>
    <RepoID>1</RepoID>
    <Title>Flaky test `VisualBasic_FixupSpanDuringResolvableConflict_NonReferenceConflict`</Title>
    <Description>Failed in https://dev.azure.com/dnceng/public/_build/results?buildId=335629&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=9892310&amp;resultId=100349&amp;paneView=debug

```
Assert.Equal() Failure\r\nExpected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[143..146), [208..211)]\r\nActual: List&lt;Span&gt; [[143..146), [208..211), [208..211)]

   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 91
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 26
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_6_VerifySpansBeforeConflictResolution.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 61
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_19_VisualBasic_FixupSpanDuringResolvableConflict_NonReferenceConflict.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 723
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```
</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38463</IssueID>
    <RepoID>1</RepoID>
    <Title>Flaky test `CSharp_FixupSpanDuringResolvableConflict_NeedsEscaping`</Title>
    <Description>Failed at https://dev.azure.com/dnceng/public/_build/results?buildId=335585&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=9891168&amp;resultId=100396&amp;paneView=debug

``` none
Assert.Equal() Failure\r\nExpected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[46..49), [75..78)]\r\nActual: List&lt;Span&gt; [[46..49), [75..78), [75..78)]

   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 91
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 26
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_6_VerifySpansBeforeConflictResolution.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 61
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_22_CSharp_FixupSpanDuringResolvableConflict_NeedsEscaping.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 935
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

```
</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38462</IssueID>
    <RepoID>1</RepoID>
    <Title>Cache diagnostic ID strings in the AnalyzerConfigSet</Title>
    <Description>I'm not sure if this is exactly where we want to do the caching, so I've
taken the opportunity to make all the non-core AnalyzerConfig APIs internal.
There are no existing consumers depending on them, so this is not a breaking
change.

Fixes #38426</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38461</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove SourceBuild.sln, and use ExcludeFromSourceBuild propert…</Title>
    <Description>@tmat @jaredpar for review. @dseefeld @crummel, what changes will this need on the source-build side to consume Roslyn.sln instead of SourceBuild.sln?</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38460</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix type inference issue with nullability</Title>
    <Description>Nullability should only introduce warnings, but in a type inference scenario where two candidates differ only in nullability we were producing an error.

~~This PR introduces a breaking change which I'll confirm with compat council. Previously, we would only warn for implementing the same interface twice with different nullabilities, but it is more consistent with other checks to produce an error. Indirect duplicate implementations still just produce a warning.~~

Fixes https://github.com/dotnet/roslyn/issues/38168

While working on this, I noticed that tuple name checks are there for interface implementations , but missing for type constraints (`... : I&lt;(int a, int b)&gt;, I&lt;(int c, int d)&gt;). Filed https://github.com/dotnet/roslyn/issues/38427 for follow-up on that.</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38459</IssueID>
    <RepoID>1</RepoID>
    <Title>Better Peek Definition</Title>
    <Description>Customer request copying here:

**Version Used**: 
Visual Studio 2019

**Steps to Reproduce**:

1. Create a more narrow focus.
2.  Don't want to have to scroll up and down to get the documentation. 
3. Would like to have summary, params, returns (if any), remarks, exceptions (if any). When looking for help on a given method no need to display how the method is implemented (can use Go To Definition for this) and should therefore show the actual documentation. 

**Expected Behavior**:
![ReSharperCtrlShiftF1](https://user-images.githubusercontent.com/46729679/64201895-a30ac200-ce44-11e9-96ee-94f808678101.png)

**Actual Behavior**:
![peekwindow](https://user-images.githubusercontent.com/46729679/64202519-3395d200-ce46-11e9-9f35-7c08f7303fd5.png)
</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38457</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable failing tests</Title>
    <Description>Related to #38454.

These tests fail in the CI runs for #38417 which adds translations for various resources. The problem is the test compares localized text with the original English text; this worked fine until now because the localized text wasn't yet translated, and so just happened to be the same as the English.

The point of this change is to unblock #38417.</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38456</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a test for awaitable pattern with ref struct result</Title>
    <Description>Closes #37712</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38455</IssueID>
    <RepoID>1</RepoID>
    <Title>completion leaking cancellation exception</Title>
    <Description>```
&lt;entry&gt;
&lt;record&gt;5061&lt;/record&gt;
&lt;time&gt;2019/06/05 19:03:33.638&lt;/time&gt;
&lt;type&gt;Error&lt;/type&gt;
&lt;source&gt;Editor or Editor Extension&lt;/source&gt;
&lt;description&gt;System.OperationCanceledException: The operation was canceled.
 at System.Threading.CancellationToken.ThrowOperationCanceledException()
 at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)
 at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task, CancellationToken cancellationToken)
 at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CommitManager.Commit(Document document, CompletionService completionService, ITextView view, ITextBuffer subjectBuffer, CompletionItem roslynItem, TextSpan completionListSpan, Nullable`1 commitCharacter, ITextSnapshot triggerSnapshot, CompletionRules rules, String filterText, CancellationToken cancellationToken)
 at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CommitManager.TryCommit(IAsyncCompletionSession session, ITextBuffer subjectBuffer, CompletionItem item, Char typeChar, CancellationToken cancellationToken)
 at Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Implementation.AsyncCompletionSession.&lt;&gt;c__DisplayClass67_1.&lt;CommitItem&gt;b__0()
 at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint[T](Object errorSource, Func`1 call, T valueOnThrow)
 --- End of stack trace from previous location where exception was thrown ---
 at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&lt;/description&gt;
&lt;/entry&gt;
```</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>26/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38454</IssueID>
    <RepoID>1</RepoID>
    <Title>Suppressed diagnostic unit tests fail on Spanish runs</Title>
    <Description>The following unit tests (both C# and VB variants) fail on Spanish CI runs:

- TestSuppression_CompilerWarningAsError
- TestSuppression_CompilerParserWarningAsError
- TestSuppression_AnalyzerWarning
- TestSuppression_CompilerWarning
- TestSuppression_CompilerSemanticWarning
- TestSuppression_CompilerSyntaxWarning

The tests force the compiler output to English, but then they look up the expected text through `CodeAnalysisResources` which means they will get the Spanish version.

These tests will be disabled to unblock loc check-ins in release/dev16.3-vs-deps.</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38453</IssueID>
    <RepoID>1</RepoID>
    <Title>Suggest import statement based on common usage</Title>
    <Description>**Version Used**:  VS 16.3 preview

**Steps to Reproduce**:

I have a project which references many nuget packages. As a result there are at least 4 ILogger interfaces defined.

I have a constructor that takes MyLogging.ILogger.

```csharp
public class C
{
    public C(ILogger logger){}
}
```

MyLogging isn't imported, and so I get a code fix to add using statements. However the suggestions only show the top 3 results, which don't include MyLogging.ILogger.

Given how many classes have a constructor accepting ILogger, this is quite annoying.

Would it be possible to sort the using statements to add based on how frequently they're used in the project?
</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38451</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust inconsistent accessibility checks to properly handle protected types declared within interfaces.</Title>
    <Description>Fixes #38398.</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38450</IssueID>
    <RepoID>1</RepoID>
    <Title>foreach boxes the enumerator when source is a constrained generic</Title>
    <Description>**Version Used**: 
.NET Core 3.0.0-preview7-27912-14

**Steps to Reproduce**:

The following benchmark compares the performance of three different implementations of a `Count()` operation using a `foreach` loop. They only differ on the type of the parameter: `List&lt;T&gt;`, `IEnumerable&lt;T&gt;` or `TEnumerator where TEnumerator : IEnumerable&lt;T&gt;`.


```
using BenchmarkDotNet.Attributes;
using System.Collections.Generic;

namespace ConstraintBenchmarks
{
    [MemoryDiagnoser]
    [MarkdownExporterAttribute.GitHub]
    public class CountBenchmarks
    {
        List&lt;int&gt; list;

        [Params(10_000)]
        public int Count { get; set; }

        [GlobalSetup]
        public void GlobalSetup()
        {
            list = new List&lt;int&gt;(System.Linq.Enumerable.Range(0, Count));
        }

        [Benchmark(Baseline = true)]
        public int Count_List() =&gt; MyCountList(list);

        [Benchmark]
        public int Count_Enumerable() =&gt; MyCountEnumerable(list);

        [Benchmark]
        public int Count_Constraint() =&gt; MyCountConstraint&lt;List&lt;int&gt;, int&gt;(list);

        static int MyCountList&lt;T&gt;(List&lt;T&gt; source)
        {
            var count = 0;
            checked
            {
                foreach (var _ in source)
                    count++;
                return count;
            }
        }

        static int MyCountEnumerable&lt;T&gt;(IEnumerable&lt;T&gt; source)
        {
            var count = 0;
            checked
            {
                foreach (var _ in source)
                    count++;
                return count;
            }
        }

        static int MyCountConstraint&lt;TEnumerable, T&gt;(TEnumerable source)
            where TEnumerable : IEnumerable&lt;T&gt;
        {
            var count = 0;
            checked
            {
                foreach (var _ in source)
                    count++;
                return count;
            }
        }

    }
}
```

**Expected Behavior**:

`List&lt;T&gt;` is implemented so that its `GetEnumerator()` method returns a value type.

When the `Count()` parameter is of type `List&lt;T&gt;`, the generated code for `foreach` avoids boxing the enumerator by explicitly using the type `List&lt;T&gt;.Enumerator` for the enumerator.

When the `Count()` parameter is of type `IEnumerable&lt;T&gt;`, the generated code for `foreach` causes the boxing of the enumerator because it uses the type `IEnumerator&lt;T&gt;`.

When the `Count()` parameter is a constrained generic, I was expecting that the enumerator would not be boxed. The compiler should use the passed type and not the constraint the it has to respect.

**Actual Behavior**:

The benchmark shows that the enumerator is boxed, causing it to perform poorly:

``` ini

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.18362
Intel Core i5 CPU M 520 2.40GHz, 1 CPU, 4 logical and 2 physical cores
.NET Core SDK=3.0.100-preview7-012821
  [Host]     : .NET Core 3.0.0-preview7-27912-14 (CoreCLR 4.700.19.32702, CoreFX 4.700.19.36209), 64bit RyuJIT
  DefaultJob : .NET Core 3.0.0-preview7-27912-14 (CoreCLR 4.700.19.32702, CoreFX 4.700.19.36209), 64bit RyuJIT


```
|           Method | Count |      Mean |     Error |    StdDev | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated |
|----------------- |------ |----------:|----------:|----------:|------:|--------:|------:|------:|------:|----------:|
|       Count_List | 10000 |  40.58 us | 0.6163 us | 0.4812 us |  1.00 |    0.00 |     - |     - |     - |         - |
| Count_Enumerable | 10000 | 109.32 us | 1.8738 us | 1.5647 us |  2.69 |    0.05 |     - |     - |     - |      40 B |
| Count_Constraint | 10000 | 109.82 us | 1.1239 us | 1.0513 us |  2.71 |    0.04 |     - |     - |     - |      40 B |

</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38449</IssueID>
    <RepoID>1</RepoID>
    <Title>SARIF: optionally include metadata for all rules</Title>
    <Description>Provide an option to include metadata for all rules in SARIF v2.1.0 logs. Enable it with the command line option qualifier `/errorlog:myfile.sarif,version=2,allrules`.

Do not provide this support for SARIF v1 files.

Open question: Should the option apply to compiler diagnostics? To analyzer rules? To both? To either or both at user option (for example, `...alldiagnostics,allanalyzerrules`)?</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38448</IssueID>
    <RepoID>1</RepoID>
    <Title>SARIF: Optionally include snippets</Title>
    <Description>Provide an option to include region snippets in SARIF v2.1.0 logs. (The SARIF v1 format does not support snippets.) Enable it with `/errorlog:myfile.sarif,version=2,snippets`.

Should we also support a "context region"? If so, how wide? Proposal:
- Yes, provide the option.
- Enable with command line option qualifier `/errorlog:myfile.sarif,version=2,contextregion`
- Default width: 5 lines (2 lines before and after the error line).
- Modify with `/errorlog:myfile.sarif,version=2,snippets,contextregion,contextwidth=&lt;n&gt;`.
- `contextregion` is only valid if `snippets` is set.
- `contextwidth` implies `contextregion` (and so again is only valid if `snippets` is set).</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38447</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio crashes with FileNotFoundException in CompletionProvider if a NuGet package is used inside</Title>
    <Description>**Version Used**: 
2.9.0

**Steps to Reproduce**:

1. Create two projects (e.g. using "code fix" VS template): .NET Standard for custom CompletionProvider and .NET Framework for VSIX
2. Install 3rd party NuGet package to .NET Standard project and use it in the custom CompletionProvider (I tested on Microsoft.SqlServer.SqlManagementObjects).
3. Build the solution and run the VSIX. 

**Expected Behavior**:
All assemblies from the NuGet package are loaded correctly

**Actual Behavior**:
Visual Studio crashes with FileNotFound exception.
VSIX doesn't include assemblies from NuGet package at all.
If you try to install the same package to the VSIX project, it is installed with .NET Framework as a target, so Visual Studio is still not able to find the proper assembly.

**Supporting Information**:
A full example is available here:
https://github.com/dropsonic/DapperIntelliSense
To reproduce it, open DapperIntelliSense.sln and run it in debug mode.
In the experimental VS instance, open Samples/DapperTest.sln, restore NuGet packages, put the cursor to the end of `connection.Query&lt;User&gt;` and type `("` to activate custom IntelliSense provider.</Description>
    <CreatedDate>03/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38446</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide special error message and/or code fix for when a variable is referenced on the same line that it's initialized.</Title>
    <Description>This is a proposal stemming from https://github.com/dotnet/csharplang/issues/2744, for if you want to see some additional discussion of it.

If you write the line
```csharp
Func&lt;int, int&gt; factorial = n =&gt; n &lt;= 1 ? 1 : n * factorial(n-1);
```
then you get the error `CS0165 Use of unassigned local variable 'factorial'`. The solution to this seems unclear at first, but a lightbulb with a "Use local function" code fix pops up, and that will of course resolve the issue.

However, there are other situations where you won't be so lucky:
```csharp
class Foo : IFoo {
    public Func&lt;IFoo&gt; fooAction;
    public string fooString;
    public Foo (Func&lt;IFoo&gt; fooAction, string fooString) {
        this.fooAction = fooAction;
        this.fooString = fooString;
    }
}

Foo obj = new Foo(() =&gt; obj, "Hello, World!");
```
Here the same error appears, but no IDE assistance is provided to fix it, leaving a programmer wondering how they can solve the issue. Of course, simply initializing `obj` to another value (like `null`) before assigning it would work, but the programmer wouldn't necessarily know that. I propose adding a special error message in this case, for example `Use of unassigned local variable 'obj'. 'obj' must be initialized before it can be assigned in terms of itself.` or something like that (I'm not the greatest at writing good errors). Additionally, I propose a code fix in this situation (possibly _only_ for when the variable is used in a lambda expression) to convert
```csharp
Foo obj = new Foo(() =&gt; obj, "Hello, World!");
```
to
```csharp
Foo obj = null; // or default
obj = new Foo(() =&gt; obj, "Hello, World!");
```</Description>
    <CreatedDate>02/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38445</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn incorrectly allows assignments of `default` literal to unconstrained generics which might bt substituted with non-nullable reference types</Title>
    <Description>**Version Used**: 

```
Branch master (1 Sep 2019)
Latest commit b4cad27 by Neal Gafter:
Bind some syntax nodes even in error recovery scenarios. (#38348)

Fixes #27060
```

```
commit baa0dcc0f3d023c37c069c4feb36986e979036cd
Merge: 548db2b498 f889038688
Author: dotnet-automerge-bot &lt;38986832+dotnet-automerge-bot@users.noreply.github.com&gt;
Date:   Mon Aug 5 16:00:23 2019 -0700

    Merge pull request #37730 from dotnet/merges/release/dev16.3-preview2-to-master

    Merge release/dev16.3-preview2 to master
```

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
class C
{
  static void M&lt;T&gt;(T[] arr)
  {
      var t = "".Length &gt; 0 ? arr[0] : default;
      arr[0] = t;
  }
    
  static void Main()
  {
      string[] arr = new[] { "" };
      M(arr);
      arr[0].ToString();
  }
}
```

**Expected Behavior**:
Warning `warning CS8653: A default expression introduces a null value when 'T' is a non-nullable reference type.` for `t = "".Length &gt; 0 ? arr[0] : default`.

**Actual Behavior**:
No warnings are reported for the program above. The program crashes at runtime with a `NullReferenceException`

**Notes**
The following also works:
```
T M1&lt;T&gt;() where T: new() =&gt; "".Length &gt; 0 ? new T() : default;
T M2&lt;T&gt;(T t) =&gt; t ?? default;
```
It seems like any indirect usage of `default` literals misses the warning.</Description>
    <CreatedDate>02/09/2019</CreatedDate>
    <ClosedDate>02/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38444</IssueID>
    <RepoID>1</RepoID>
    <Title>Using /refout causes "FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException"</Title>
    <Description>**Version Used**: 

Reproduces in the following versions:

2.10
3.1.1
3.2.1
3.3.0-beta2-final

**Steps to Reproduce**:

1. Download: [RefoutBug.zip](https://github.com/dotnet/roslyn/files/3565863/RefoutBug.zip)
2. Compile the assembly using `csc.exe @RefoutBug.rsp /noconfig`
3. Unhandled Exception error is emitting. See full exception stack trace in [UnhandledException.txt](https://github.com/dotnet/roslyn/files/3565867/UnhandledException.txt)

The unhandled exception is not thrown when removing `/refout:"ref-Unity.Postprocessing.Runtime.dll"` from `RefoutBug.rsp`

**Expected Behavior**:
No exception is thrown and the reference assembly is created.

**Actual Behavior**:
Exception is thrown and the reference assembly is not created.</Description>
    <CreatedDate>02/09/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38443</IssueID>
    <RepoID>1</RepoID>
    <Title>Checking "Enable nullable references analysis IDE features" option crashes VS</Title>
    <Description>**Version Used**: 
Version 16.3.0 Preview 3.0 [29230.54.d16.3]

**Steps to Reproduce**:
1. `git clone http://github.com/dotnet/project-system`
2. `cd project-system`
3. `git checkout 344a305681c5dc630f82f86880bc0a2e527fad1f`
4. `ProjectSystem.sln`
5. Tools -&gt; Options -&gt; Text Editor -&gt; C# -&gt; Advanced -&gt; Enable nullable references analysis IDE features


```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.ArgumentException: '&lt;Project852a3940-e0cd-4e7d-99e5-691190c256d9&gt;' is not part of the workspace.
   at Microsoft.CodeAnalysis.Workspace.CheckProjectIsInCurrentSolution(ProjectId projectId)
   at Microsoft.CodeAnalysis.Workspace.HandleProjectChange(ProjectId projectId, Func`2 getSolutionWithChangedProject)
   at Microsoft.CodeAnalysis.Workspace.OnParseOptionsChanged(ProjectId projectId, ParseOptions options)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.&lt;&gt;c__DisplayClass49_0.&lt;set_ParseOptions&gt;b__1(Workspace w)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyChangeToWorkspace(Action`1 action)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.ChangeProjectProperty[T](T&amp; field, T newValue, Func`2 withNewValue, Action`1 changeValue)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.set_ParseOptions(ParseOptions value)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.UpdateProjectOptions_NoLock()
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.UpdateProjectForNewHostValues()
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.OptionService_OptionChanged(Object sender, OptionChangedEventArgs e)
   at Microsoft.CodeAnalysis.Options.OptionServiceFactory.OptionService.&lt;&gt;c__DisplayClass7_0.&lt;OnGlobalOptionServiceOptionChanged&gt;b__0()
   at Roslyn.Utilities.TaskExtensions.&lt;&gt;c__DisplayClass14_0.&lt;ContinueWithAfterDelay&gt;b__1(Task _)
   at Roslyn.Utilities.TaskExtensions.&lt;&gt;c__DisplayClass2_0.&lt;SafeContinueWith&gt;g__continuationFunction|0(Task antecedent)
   at Roslyn.Utilities.TaskExtensions.&lt;&gt;c__DisplayClass6_0`1.&lt;SafeContinueWith&gt;g__outerFunction|0(Task t)
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass6_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;g__outerFunction|0(System.Threading.Tasks.Task)
   at Microsoft.CodeAnalysis.Workspace.CheckProjectIsInCurrentSolution(Microsoft.CodeAnalysis.ProjectId)
   at Microsoft.CodeAnalysis.Workspace.HandleProjectChange(Microsoft.CodeAnalysis.ProjectId, System.Func`2&lt;Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution&gt;)
   at Microsoft.CodeAnalysis.Workspace.OnParseOptionsChanged(Microsoft.CodeAnalysis.ProjectId, Microsoft.CodeAnalysis.ParseOptions)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject+&lt;&gt;c__DisplayClass49_0.&lt;set_ParseOptions&gt;b__1(Microsoft.CodeAnalysis.Workspace)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyChangeToWorkspace(System.Action`1&lt;Microsoft.CodeAnalysis.Workspace&gt;)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.ChangeProjectProperty[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef, System.__Canon, System.Func`2&lt;Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution&gt;, System.Action`1&lt;Microsoft.CodeAnalysis.Workspace&gt;)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.set_ParseOptions(Microsoft.CodeAnalysis.ParseOptions)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.UpdateProjectOptions_NoLock()
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.UpdateProjectForNewHostValues()
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.OptionService_OptionChanged(System.Object, Microsoft.CodeAnalysis.Options.OptionChangedEventArgs)
   at Microsoft.CodeAnalysis.Options.OptionServiceFactory+OptionService+&lt;&gt;c__DisplayClass7_0.&lt;OnGlobalOptionServiceOptionChanged&gt;b__0()
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass14_0.&lt;ContinueWithAfterDelay&gt;b__1(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass2_0.&lt;SafeContinueWith&gt;g__continuationFunction|0(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass6_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;g__outerFunction|0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
   at Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioTaskSchedulerFactory+JoinableTaskFactoryTaskScheduler+&lt;&gt;c__DisplayClass5_0+&lt;&lt;QueueTask&gt;b__0&gt;d.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory+SingleExecuteProtector.TryExecute()
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory+SingleExecuteProtector+&lt;&gt;c.&lt;.cctor&gt;b__20_0(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)
   at System.Windows.Threading.DispatcherOperation.Invoke()
   at System.Windows.Threading.Dispatcher.ProcessQueue()
   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)
   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)
```</Description>
    <CreatedDate>02/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38442</IssueID>
    <RepoID>1</RepoID>
    <Title>DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer: ArgumentOutOfRange in GetAnonymousFunctionControlFlowGraph</Title>
    <Description>**Version Used**: 
Roslyn 3.3

Seeing a first-chance ArgumentOutOfRangeException in DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer on a pretty complicated type. I was unable to isolate a short repro. Long repro available upon request.

This could be a dupe of https://github.com/dotnet/roslyn/issues/29836 but I'm filing just in case.
The ArgumentOutOfRange is caught here:
https://github.com/dotnet/roslyn-analyzers/blob/3f44df7de96267a2b0bf7a4ba6a0086fc560fc18/src/Utilities/FlowAnalysis/FlowAnalysis/Framework/DataFlow/AbstractDataFlowAnalysisContext.cs#L134-L140

See also: https://github.com/dotnet/roslyn-analyzers/issues/1812

```
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph.GetAnonymousFunctionControlFlowGraph
-- | -- | --
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext`4.GetAnonymousFunctionControlFlowGraph
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+&lt;&gt;c__DisplayClass216_0.&lt;VisitInvocation_Lambda&gt;g__getCfg\|0
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.PerformInterproceduralAnalysis
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_Lambda
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitInvocation_Lambda
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+&lt;&gt;c__DisplayClass211_3.&lt;VisitInvocation_LambdaOrDelegateOrLocalFunction&gt;b__7
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+&lt;&gt;c__DisplayClass211_0.&lt;VisitInvocation_LambdaOrDelegateOrLocalFunction&gt;g__AnalyzePossibleTargetInvocation\|5
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+&lt;&gt;c__DisplayClass211_0.&lt;VisitInvocation_LambdaOrDelegateOrLocalFunction&gt;g__AnalyzePossibleTargetInvocations\|4
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_LambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.FlowBranch
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.FlowBranch
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.RunCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Run
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5+&lt;&gt;c__DisplayClass8_0.&lt;TryGetOrComputeResultCore&gt;b__0
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Analyzer.Utilities.SingleThreadedConcurrentDictionary`2.GetOrAdd
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.TryGetOrComputeResultCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResultForAnalysisContext
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.PerformInterproceduralAnalysis
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitAssignmentOperation
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitAssignmentOperation
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitSimpleAssignment
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseSimpleAssignmentOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.RunCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Run
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5+&lt;&gt;c__DisplayClass8_0.&lt;TryGetOrComputeResultCore&gt;b__0
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Analyzer.Utilities.SingleThreadedConcurrentDictionary`2.GetOrAdd
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.TryGetOrComputeResultCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResultForAnalysisContext
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.PerformInterproceduralAnalysis
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitConversion
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitConversion
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseConversionOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitAssignmentOperation
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitAssignmentOperation
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitSimpleAssignment
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseSimpleAssignmentOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitArray
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.DefaultVisit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.DefaultVisit
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.OperationVisitor`2.VisitExpressionStatement
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseExpressionStatementOperation.Accept
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Flow
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.RunCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Run
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5+&lt;&gt;c__DisplayClass8_0.&lt;TryGetOrComputeResultCore&gt;b__0
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Analyzer.Utilities.SingleThreadedConcurrentDictionary`2.GetOrAdd
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.TryGetOrComputeResultCore
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResultForAnalysisContext
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysis.TryGetOrComputeResult
  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysis.TryGetOrComputeResult
  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeAnalysisHelper.TryGetOrComputeResult
  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer.PerformFlowAnalysisOnOperationBlock
  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer.AnalyzeOperationBlock
  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer+&lt;&gt;c__DisplayClass4_0.&lt;InitializeWorker&gt;b__1
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor+&lt;&gt;c__58`2.&lt;ExecuteBlockActions&gt;b__58_1
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteBlockActions
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteBlockActionsCore
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.TryExecuteOperationBlockActions
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1+&lt;&gt;c__DisplayClass14_0.&lt;TryExecuteDeclaringReferenceActions&gt;g__executeOperationsBlockActions\|7
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1+&lt;&gt;c__DisplayClass14_0.&lt;TryExecuteDeclaringReferenceActions&gt;g__executeExecutableCodeActions\|3
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;TryProcessSymbolDeclaredAsync&gt;d__96.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;TryProcessEventCoreAsync&gt;d__95.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ProcessEventAsync&gt;d__93.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ProcessCompilationEventsCoreAsync&gt;d__92.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ProcessCompilationEventsAsync&gt;d__91.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ExecutePrimaryAnalysisTaskAsync&gt;d__64.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecutePrimaryAnalysisTaskAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;AttachQueueAndProcessAllEventsAsync&gt;d__62.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.AttachQueueAndProcessAllEventsAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__64.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;&gt;c__DisplayClass57_1+&lt;&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1&gt;d.MoveNext
  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start
  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;&gt;c__DisplayClass57_1.&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1
  | mscorlib | System.Threading.Tasks.Task`1.InnerInvoke
  | mscorlib | System.Threading.Tasks.Task.Execute
  | mscorlib | System.Threading.Tasks.Task.ExecutionContextCallback
  | mscorlib | System.Threading.ExecutionContext.RunInternal
  | mscorlib | System.Threading.ExecutionContext.Run
  | mscorlib | System.Threading.Tasks.Task.ExecuteWithThreadLocal
  | mscorlib | System.Threading.Tasks.Task.ExecuteEntry
  | mscorlib | System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
  | mscorlib | System.Threading.ThreadPoolWorkQueue.Dispatch
  | mscorlib | System.Threading._ThreadPoolWaitCallback.PerformWaitCallback

```</Description>
    <CreatedDate>01/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38441</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to a newer FlowAnalysis utilities package</Title>
    <Description>This addresses the memory leak in #38330. The underlying memory leak was fixed in the FlowAnalysis utilities assembly with https://github.com/dotnet/roslyn-analyzers/pull/2795. This PR just moves Roslyn to newer Flow analysis utilities package reference with the fix.

Fixes #38330</Description>
    <CreatedDate>01/09/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
</Issues>
<Issues>
  <Issue>
    <IssueID>38440</IssueID>
    <RepoID>1</RepoID>
    <Title>Preserve "unsafe" when refactoring between properties and methods</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38379.

The problem is that `ISymbol` does not expose the `unsafe` modifier, which is why `DeclarationModifiers.From(ISymbol)` did not preserve it.

This PR changes `DeclarationModifiers.From(ISymbol)` so that it adds `unsafe` when it's clear from the `ISymbol` that it's necessary and also adds code to the refactoring to make sure `unsafe` is preserved even in cases where it's not clear from the `ISymbol`.

A similar change is also made to the reverse refactoring.</Description>
    <CreatedDate>31/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38439</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose DataFlowAnalysis.UnassignedVariables through public API</Title>
    <Description>This is a feature request to expose some form of this property through a public API:
https://github.com/dotnet/roslyn/blob/007022c37c6d21ee100728954bd75113e0dfe4bd/src/Compilers/VisualBasic/Portable/Analysis/FlowAnalysis/VisualBasicDataFlowAnalysis.vb#L56

### Implementation straw man suggestion

Perhaps add this to `DataFlowAnalysis`:
```csharp
    /// &lt;summary&gt;
    /// The set of local variables for which a value is always assigned inside
    /// a region before being read
    /// &lt;/summary&gt;
    public abstract ImmutableArray&lt;ISymbol&gt; DefinitelyAssignedBeforeRead { get; }
```
The VisualBasicDataFlowAnalysis and CSharpDataFlowAnalysis both already have a private property which is a `HashSet&lt;Symbol&gt; UnassignedVariables`

Performance aside, DefinitelyAssignedBeforeRead would be implemented as something like:
```csharp
DeclaredVariables.Where(v =&gt; !UnassignedVariables.Contains(v))
```
Obviously the way I've named it, arguably you might also want to filter out variables that are never read - naming is tricky. You could instead expose it with the name `NotDefinitelyAssigned` but I don't like having negatives in names much.

### Why it's useful (for me)
I maintain a [VB &lt;-&gt; C# code converter](https://github.com/icsharpcode/CodeConverter). When converting VB -&gt; C#, I'd like to initialize only the locals in C# that need to be initialized. The solutions that come to mind are:
* Make use of existing DataFlowAnalysis options
  * Can't find a way to make it work: In particular I'd hoped that `DataFlowsIn` would be false when the variable was uninitialized. This was not the case when tested for integers, therefore from a given usage I can't figure out whether it's the first read or not.
* Use the VB diagnostics to detect the warnings for unassigned variables
  * Doesn't work: VB doesn't warn about value types that aren't initialized, but C# does care
* Never write out an initializer, then detect diagnostic issues in a post-pass of the C# and add them in.
 * Could be made to work, but expensive and messy: An extra pass on an intentionally broken compilation is reasonably expensive performance-wise, and some of the useful type information will have been lost unless carefully stashed away.
* Using reflection to get the internal property
 * Works, but perilous: I'm using this at the moment, but obviously any future release could change or totally remove this property.

### Other possible solutions
In my case there's a property right there doing what I need, so it's tempting to just ask for it. However the underlying information seems interesting and valuable, and I wonder if it's worth exposing some of it.

* Exposing the information on an `IOperation` - providing a method call to get which variables it reads and writes. 
* Adding more information to the `SymbolFinder.FindReferencesAsync` result about whether the reference is a read/write
* Documenting more of the subtle cases on the existing properties if you know they can give me what I need
* Closing this issue because it seems like a rare use case
---
Thanks for all your continuing fantastic work on Roslyn.</Description>
    <CreatedDate>31/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38438</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190830.3
- **Date Produced**: 8/30/2019 6:51 PM
- **Commit**: 316c80d0c373be63f991cc4d586db85273c1c553
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19430.3

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)







</Description>
    <CreatedDate>31/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38436</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to release/dev16.3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-release/dev16.3-vs-deps
git reset --hard upstream/release/dev16.3-vs-deps
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38435</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove incorrect assertion</Title>
    <Description>Fixes #37783</Description>
    <CreatedDate>31/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38434</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38433</IssueID>
    <RepoID>1</RepoID>
    <Title>Vbc Doesn't like DefineConstants with trailing or leading semicolons</Title>
    <Description>Add this to the bottom of Settings.props:

```xml
  &lt;PropertyGroup Condition="'$(DotNetBuildFromSource)' == 'true'"&gt;
    &lt;DefineConstants&gt;DOTNET_BUILD_FROM_SOURCE;$(DefineConstants)&lt;/DefineConstants&gt;
  &lt;/PropertyGroup&gt;
```

Vbc fails to compile with:
```
vbc : error BC31030: Conditional compilation constant 'DOTNET_BUILD_FROM_SOURCE ^^ ^^ ' is not valid: Character is not  valid. [C:\Users\frsilb\Documents\git\roslyn\src\Compilers\VisualBasic\Portable\Microsoft.CodeAnalysis.VisualBasic.vbpr oj] 
```</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38432</IssueID>
    <RepoID>1</RepoID>
    <Title>provide an option to log what IDE is doing somewher</Title>
    <Description>some long-running features provide a way to log its activity in some places such as output window or binlog and etc.

for example, liveshare or live unit test or source-based discovery provides an option in the options page to log every activity it does in the output window.

project system provides MSBuild binlog to save all design-time build activity in bin log.

we should provide one for our BG workloads such as workspace events, solution crawler events, diagnostic events and etc.
</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38431</IssueID>
    <RepoID>1</RepoID>
    <Title>CodeActions light-bulb isn't stable</Title>
    <Description>**Version Used**: 
Current Int Preview

**Steps to Reproduce**:
```csharp

using System;

namespace ReordTest
{
    class Program
    {
        static void Main(string[] args)
        {
            var result = method($$arg);
        }
    }
}
```
1.  Hammer `Ctr`+`.` and `esc` at specified location
2.  Sometimes move caret elsewhere

&gt; Note: Tried to find a reliable repro, can't.

**Expected Behavior**:
The same lightbulb actions always show up.

**Actual Behavior**:
Sometimes one CodeActions is missing
![image](https://user-images.githubusercontent.com/1764721/64055194-d8ab6480-cb3f-11e9-91d6-248e92d1f6e5.png)
![image](https://user-images.githubusercontent.com/1764721/64055199-dba65500-cb3f-11e9-8e24-485b26d88821.png)
</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38430</IssueID>
    <RepoID>1</RepoID>
    <Title>Formatter throws a exception where HostObjectValue is null</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/971364

Always check if HostObjectValue is null, since any of these types might actually be a synthetic value as well.</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38429</IssueID>
    <RepoID>1</RepoID>
    <Title>provide a power save mode</Title>
    <Description>we have been adding more and more features to IDE. it is long-tail features so it always helps some portion of our users. but there is also another portion of users who don't care that features or want to reduce noise or reduce system resource consumed from those features that they don't use much.

these people have been asking a way to disable those features altogether. and let those features only run when it is explicitly asked.

basically no solution crawler running, no background compilation running and etc. 

it requires design meeting, but similar to power save mode other IDE team provides for exactly same reason.</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38428</IssueID>
    <RepoID>1</RepoID>
    <Title>update build error more frequently when build + intellisense error filter is selected like when "Build only" is selected</Title>
    <Description>right now, when "Build Only" is selected in error list, we update build errors as they come in.

![image](https://user-images.githubusercontent.com/1333179/64053135-ff649d80-cb35-11e9-8757-4d3b998491f8.png)

but when "Build + intellisense" is selected in error list, we don't update build errors until whole build is done and relies on live errors (intellisense errors) during that time. and we do de-duplication when build is done with all errors build has reported again live errors.

![image](https://user-images.githubusercontent.com/1333179/64053151-0d1a2300-cb36-11e9-9313-bd446b5d915b.png)

we should try to improve "build + intellisense" case so that user can see build error update sooner like "build only" case.

</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38427</IssueID>
    <RepoID>1</RepoID>
    <Title>Check for matching tuple names missing in type constraints</Title>
    <Description>`where T : I&lt;(int a, int b)&gt;, I&lt;(int c, int d)&gt;` should produce an error just like `class C : I&lt;(int a, int b)&gt;, I&lt;(int c, int d)&gt;` does.

I think this should also apply to indirect constraints, such as `where T : I&lt;(int a, int b)&gt;, I2` with `interface I2 : I&lt;(int c, int d)&gt;` out of consistency with implementation scenario (`class C : I&lt;(int a, int b)&gt;, I2 { }` produces an error).

Note: this would be a breaking change.</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38426</IssueID>
    <RepoID>1</RepoID>
    <Title>.editorconfig is causing memory explosion in syntax trees</Title>
    <Description>(FYI: This may be one of the root causes of #38330 reported by @davkean.)

I have a solution which is made up of multiple copies of the project-system repo (~400 projects in total). Looking a dump of the managed heap, nearly 10% of the managed heap (243mb of 2.3Gb) is consumed by duplicated strings held by `CSharpSyntaxTree.ParsedSyntaxTree`. The issue is that the project-system repo has an .editorconfig that turns diagnostics on/off and `Microsoft.CodeAnalysis.AnalyzerConfigSet.GetOptionsForSourcePath` does substring parsing of rules of the form "dotnet_diagnostic.&lt;diagnostic&gt;.severity". Since it does this _for each syntax tree in the solution_ (~6 million of them in this case), each substring parse is duplicated over and over and over again. It looks like if `AnalyzerConfig.Section` just did this substring parsing once and passed back the same string for everyone, this would eliminate the duplication.</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38425</IssueID>
    <RepoID>1</RepoID>
    <Title>Support building the workspaces layer in source-build</Title>
    <Description>This requires conditionally excluding the SQLitePCLRawbundle_green dependency and conditionally excluding the code that depended on it. This code path was only used on Windows, so we shouldn't be breaking any functionality source-build was depending on. To verify that we don't accidentally break source-build, I've added a CI step that will run on linux and set the `DotNetBuildFromSource` flag.</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38424</IssueID>
    <RepoID>1</RepoID>
    <Title>we should provide analyzer performance insight to users so that user can decide which analyzers they want to disable for a certain solution</Title>
    <Description>analyzers perf is very sensitive to how code is written. some analyzer runs cheap on a file, but very expansive on other code. so just enabling all analyzers by default sometimes cause a problem for users.

internally, we run this monitor to track bad analyzers (http://source.roslyn.io/#Microsoft.CodeAnalysis.Remote.Workspaces/Diagnostics/PerformanceTrackerService.cs,19) and we have been running it for a while.

we should provide this information to users and let users to disable those reported bad analyzers for thier solution easily through UI.

with editorconfig work we did, and work to change analyzer severity through LB, I think now we have all the pieces to create analyzer blame UI and let users to control what analyzers run on what solution/project.</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38423</IssueID>
    <RepoID>1</RepoID>
    <Title>Include parameters', this class' fields' and local variables' values on stack trace</Title>
    <Description>I've seen this when executing Python in some environments: when an error (exception) is raised, all pertinent values up and down the stack are captured. This greatly improves debugging, in many cases allowing a bug to be fixed without having to reproduce the entire scenario by stepping through code, etc.

**Version Used**: Both .NET Framework and Core

**Steps to Reproduce**:

Throw an exception, or use "new StackTrace()"

**Expected Behavior**: Values are captured and shown in the stack trace

**Actual Behavior**: Values are not captured
</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38422</IssueID>
    <RepoID>1</RepoID>
    <Title>"Option Explicit On" does not report an error when there is an undeclared variable</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/681740/option-explicit-on-does-not-report-an-error-when-t.html)._

---
I always use &amp;quot;Option Explicit On&amp;quot;, it always works very reliably!

But today, in this case I do not see an error with the command &amp;quot;For i = f.Count - 1 To 0 Step -1&amp;quot; when the counter i has not been declared in one of my functions.

This is the first time I encountered this strange phenomenon. Please review and correct. Thank you very much!

Source code:

Private Function FMsys_to_List() As List(Of String)
        Dim f As List(Of String)
        f = New List(Of String)(File.ReadAllLines(FM_Sys, encoding:=Encoding.Unicode))
        For i = f.Count - 1 To 0 Step -1
            f(i) = f(i). Trim
            ' Bo comment va dong trong
            ' Phai dung (Left,1) ko duoc dung Chars(0) vi s.Chars(0) bao loi khi s=&amp;quot;&amp;quot;
            If f(i). Length = 0 Or Left(f(i), 1) = &amp;quot;'&amp;quot; Then f.RemoveAt(i)
        Next
        f.TrimExcess()
        Return f
    End Function ' FMsys_to_List

* Of course I have the &amp;quot;Option Explicit On&amp;quot; declaration at the top, outside the Module
* The price that the Sub / Function name automatically notes right after End Sub / Function is too good. Extensive for everything else. Thanks!

---
### Original Comments

#### Visual Studio Feedback System on 8/8/2019, 03:17 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38421</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle invalid local function parameter with default value in GetDeclaredSymbol</Title>
    <Description>Avoids `ArgumentOutOfRangeException` in `CheckAndAdjustPosition`.</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>31/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38420</IssueID>
    <RepoID>1</RepoID>
    <Title>Object synchronization method was called from an unsynchronized block of code</Title>
    <Description>**Version Used**: 
net core sdk version: 3.0.100-preview8-013656
os version: ubuntu 16.04.4 LTS x64

**Steps to Reproduce**:
clone this [project](https://github.com/Caskia/ENode-Infrastructure.git) 
checkout: ```git checkout netcoreapp3.0```
go to folder: test/ENode.Kafka.Tests
run ```dotnet build "ENode.Kafka.Tests.csproj" -c Release -o /app/build```

**Exception**
```
 You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error MSB3883: Unexpected exception:  [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : System.AggregateException: One or more errors occurred. (Object synchronization method was called from an unsynchronized block of code.) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : ---&gt; System.ApplicationException: Object synchronization method was called from an unsynchronized block of code. [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Mutex.ReleaseMutex() [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.ServerNamedMutex.Dispose() [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.RunServerCompilationCore(RequestLanguage language, List`1 arguments, BuildPathsAlt buildPaths, String pipeName, String keepAlive, String libEnvVariable, Nullable`1 timeoutOverride, Func`3 tryCreateServerFunc, CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : --- End of inner exception stack trace --- [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
```
</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38419</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190829.16
- **Date Produced**: 8/30/2019 1:19 AM
- **Commit**: e5aaea7fcfc46449b035d5b220032bfb933e98a4
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19429.16

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38418</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38417</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn release/dev16.3-vs-deps | 20190830</Title>
    <Description>
    </Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38416</IssueID>
    <RepoID>1</RepoID>
    <Title>Formatting removes newline before semicolon</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38066.

This PR assumes that having a statement-ending semicolon at the start of a line is not a reasonable formatting, so it's okay to reformat it.</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38415</IssueID>
    <RepoID>1</RepoID>
    <Title>Support compound operators with pattern Index/Range indexers</Title>
    <Description>When we added a pattern-based range, compound operator lowering was
not updated to deal with the new node, which it does pre-lowering, since
some bound nodes (like indexers) have different code gen in the presence
of compound operators.

This change implements compound operator support for pattern Index/Range.

Fixes #37789</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38414</IssueID>
    <RepoID>1</RepoID>
    <Title>disable unimported type in completion tests: not for merge</Title>
    <Description>
    </Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38413</IssueID>
    <RepoID>1</RepoID>
    <Title>Increase Editor Completion Timeout for tests</Title>
    <Description>
    </Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38412</IssueID>
    <RepoID>1</RepoID>
    <Title>fix MEF issue.</Title>
    <Description>forgot to put ImportMany which cause ILanguageClient to not load.</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38411</IssueID>
    <RepoID>1</RepoID>
    <Title>Collapse redundant types in the server</Title>
    <Description>The server has several instances of the following type hierarchy pattern:

```
interface IUtil { }
class Util : IUtil { }
class DesktopUtil : Util { } 
```

This was mostly done by myself for the following reasons:

1. At the time the compiler server only worked on desktop. It was believed that we'd need `CoreClrUtil` derivations to enable the same behavior on CoreClr. Luckily netstandard added all the types we needed hence we were able to use the `DesktopUtil` versions without modification.
1. There was a belief that we'd use an IPC mechanism other than named pipes on other operating systems. That is not the case as the named pipe implementation improved significantly and given a good deal of consistency across operating systems. 
1. Make it easier to test corner cases in the server. 

This change collapses many of the `DesktopUtil` types into the base `Util` type. 

There will likely be a few more of these changes. @agocke and I think the churn is worth the reduction in complexity and increase in code readability here. 

</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38410</IssueID>
    <RepoID>1</RepoID>
    <Title>Use shim for c#/vb liveshare gotodef, leave typescript as custom impl…</Title>
    <Description>…ementation requiring UI.

Split out the liveshare goto def into a shim and an implementation for typescript.  TS doesn't define a definition service, so must use FAR which must be called on the UI thread.</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38409</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix underselection problem in invertlogical refactoring.</Title>
    <Description>
    </Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38408</IssueID>
    <RepoID>1</RepoID>
    <Title>Substituted symbol equality</Title>
    <Description>
    </Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38407</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38406</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38405</IssueID>
    <RepoID>1</RepoID>
    <Title>Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue is not defined</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/693419/globalmicrosoftvisualbasicmyservicesinternalcontex.html)._

---
Upgraded to Preview 2.0 and VB Core 3.0 applications no longer compile, they are multiple errors and warnings.

---
### Original Comments

#### Visual Studio Feedback System on 8/14/2019, 03:00 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions

#### James Mu solved on 8/13/2019, 11:35 PM, 0 votes: 

&lt;p&gt;I solved this problem by adding the following code to a new VB code file:&lt;/p&gt;&lt;pre&gt;Namespace Global.Microsoft.VisualBasic.MyServices.Internal
    Public Class ContextValue(Of T)
        Public Property Value As T
    End Class
End Namespace
&lt;/pre&gt;
</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38404</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8602 When using AutoMapper ForPath</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/622380/cs8602-when-using-automapper-forpath.html)._

---
When using AutoMapper in dotnet core 3.0 and C# 8 will nullable reference types, I'm receiving a CS8602 error when using the `ForPath` method.

If `d.LastModifiedBy` is marked as nullable, I receieve a warning for the following code:

`.ForPath(d =&gt; d.LastModifiedBy.UserId, x =&gt; x.MapFrom(s =&gt; s.Transaction.LastModifiedBy))`

There should be a way for developers, like those who work on AutoMapper, to mark parameters as being null-safe. During mapping with the `ForPath` method, AutoMapper will create the `d.LastModifiedBy` object and an exception will not occur.

The workaround is to surround all my . ForPath methods with `#pragma warning disable CS8602 // Dereference of a possibly null reference.`

This workaround could lead to additional null reference exceptions occurring, such as if `s.Transaction` was null.

---
### Original Comments

#### Visual Studio Feedback System on 6/26/2019, 02:33 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 8/7/2019, 06:34 PM: 

We want to let you know that this problem will likely be closed in 60 days. We set priority based on severity, similar reports, and the overall impact on users and scenarios. We've also learned that reports without fresh activity could indicate that the problem isn't a problem anymore. One of our goals is to give you more transparency around these decisions as resolving every problem that gets reported isn't always possible. Your feedback is essential for helping us decide what needs the most attention, so please keep upvoting and commenting if you think that we need to make this a higher priority .

---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38403</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio 2019 (and preview) crashes when I paste this code into the editor</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/703896/visual-studio-2019-and-preview-crashes-when-i-past.html)._

---
What steps will reproduce the problem?
1. Create a new .NET Core 3.0 (preview 7 or 8) Console Project in latest Visua Studio 2019 16.2 or preview 2.0 16.3.0 
2.  Just paste the following code below into the editor (replace the existing code)
3. Visual Studio just hangs and after a while just crash

What is the expected output? What do you see instead?

Editor shoudl not crash, confirmed on a blank fresh installed Windows 10, with fresh install of latest VS2019 and .NET Core 3 preview.

Please provide any additional information below.

The code that I paste in (don't ask me why),  just copied from some website while exploring the non-nullable types feature.

```cs
#nullable enable
using System;
using System.Collections.Generic;
using System.Text;

public abstract class QueryAsserterBase
{
    public abstract void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;Nullable&lt;TResult&gt;&gt;&gt; actualQuery)
        where TResult : struct;
}

public class QueryAsserter&lt;TContext&gt; : QueryAsserterBase
{
    public override void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt; actualQuery)
    {          
    }
}
```

---
### Original Comments

#### Fiona Niu[MSFT] on 8/22/2019, 00:15 AM: 

&lt;p&gt;Thank you for taking the time to log this issue! Could you please provide more information via the Visual Studio Feedback Tool(Help -&amp;gt; Send Feedback -&amp;gt; Report A Problem)so that we can conduct further research?  The feedback tool  will ensure that we collect the needed information for you without worrying about what to provide (recording, dump file or ETL trace).&lt;br&gt;
Since this issue is now marked as Need More Info, that workflow is enabled in the Feedback Tool:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;• Open Visual Studio Feedback tool.
 
• Click the banner letting you know that you have problems requesting your attention.
 
• Click this problem from the list

• Click &amp;quot;View their request and respond&amp;quot; from the problem details banner

• Add a comment, in the Attachments/Record: click Start Recording

• When the Steps Recorder tool appears, perform the steps that reproduce the problem.

• When you're done, choose the Stop Record button.
 
• Wait a few minutes for Visual Studio to collect and package the information that you recorded.

• Submit. You will be able to see the comment on Developer Community. For security reasons, your files come directly to us and don't appear on Developer Community.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the full instructions, please see: &lt;a target='_blank' href="https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio-2017?view=vs-2017#when-further-information-is-needed-need-more-info"&gt;https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio-2017?view=vs-2017#when-further-information-is-needed-need-more-info&lt;/a&gt; . For information about what data is collected, see &lt;a target='_blank' href="https://docs.microsoft.com/en-us/visualstudio/ide/developer-community-privacy?view=vs-2017#data-we-collect"&gt;https://docs.microsoft.com/en-us/visualstudio/ide/developer-community-privacy?view=vs-2017#data-we-collect&lt;/a&gt;&lt;br&gt;
We look forward to hearing from you!&lt;/p&gt;

#### visualstudio on 8/22/2019, 00:28 AM: 

I just copy paste the code from the issue and bang the studio stops responding, just crashes/dies after a while.  I can't type anything else after I paste the code into a new fresh console appliction.
#### Tore Nestenius on 8/22/2019, 00:32 AM: 

&lt;p&gt;You got my recording?&lt;/p&gt;

#### Fiona Niu[MSFT] on 8/22/2019, 00:51 AM: 

&lt;p&gt;Thanks a lot for providing the information. We got your attachments. We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Greg Smith on 8/26/2019, 08:53 AM: 

I also get this crash on the third paste of std::isfinite to replace _finite. Exactly as the OP reports, VS goes unreponsive for a few seconds, then restarts.

---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38402</IssueID>
    <RepoID>1</RepoID>
    <Title>VS Pro 16.3.0 Preview 2 - complex expressions causing compiler to effectively hang, suspect some exponential cost</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/703709/vs-pro-1630-preview-2-complex-expressions-causing.html)._

---
&lt;p&gt;16.2.3 would compile our work code, 16.3.0 Preview 2 seemed to hang forever.&lt;/p&gt;
&lt;p&gt;It is hard to provide a stereotype of the problem without all prod code. Extracting the essence ended with a section of code that would take a disproportionately long time to compile; but would complete in about a minute.&lt;/p&gt;
&lt;p&gt;I repeated the troublesome clause 4 more times, which causes RAM usage to blow up into the 10s of gigabytes (I went up to 40 then shut it off).&lt;/p&gt;
&lt;p&gt;Leaving this code up in the 2019 IDE will cause it to crash during analysis within a few minutes; but compiling even via the command line will consume all the machine’s ram (and never complete).&lt;/p&gt;
&lt;p&gt;The attached CS file, or the code below, will cause all manner of mayhem. If you remove the indicated duplicates of the 4-line clauses, compilation should complete but there will still be trouble with the IDE, and it will still take way too long to compile for such a tiny program.&lt;/p&gt;

```
using System;

namespace PreviewFail
{

    public sealed class A1&lt;T&gt;
    {

    }

    public sealed class O&lt;T&gt;
    {
        public R M&lt;R&gt;(Func&lt;T, R&gt; w, Func&lt;R&gt; wo) =&gt; throw new Exception("Irrelevant");
    }

    public sealed class WO&lt;T&gt;
    {
        private WO() { }
        public static WO&lt;T&gt; Build(A1&lt;T&gt; arr) =&gt; new WO&lt;T&gt;();

        public O&lt;WO&lt;T&gt;&gt; F(Func&lt;T, bool&gt; filter) =&gt; new O&lt;WO&lt;T&gt;&gt;();
    }

    public static class WO
    {
        public static WO&lt;T&gt; Build&lt;T&gt;(A1&lt;T&gt; arr) =&gt; WO&lt;T&gt;.Build(arr);
        // public static WO&lt;T&gt; Build&lt;T&gt;(int a) =&gt; throw new Exception("Irrelevant");
    }

    public sealed class CO&lt;T&gt;
    {
        private CO()
        {

        }
        public static CO&lt;T&gt; FWO(WO&lt;T&gt; wo) =&gt; new CO&lt;T&gt;();
    }

    public static class CO
    {
        public static CO&lt;T&gt; FWO&lt;T&gt;(WO&lt;T&gt; wo) =&gt; CO&lt;T&gt;.FWO(wo);
        // public static CO&lt;T&gt; FWO&lt;T&gt;(int a) =&gt; throw new Exception("Irrelevant");
    }
    public sealed class CP
    {

    }

    // public sealed class W { }


    public static class CantCompile
    {
        
        public static U L&lt;T, U&gt;(this T original, Func&lt;T, U&gt; transformed) =&gt; transformed(original);
        
        
        // Otherwise, success.
        public static T L&lt;T&gt;(Func&lt;T&gt; get) =&gt; get();
        public static void L&lt;T&gt;(this T original, Action&lt;T&gt; run) =&gt; run(original);

        public static void Doit()
        {

            // values don't matter
            A1&lt;WD&gt; aa = null;
            A1&lt;WD&gt; ab = null;

            Func&lt;bool, CP, int&gt; getTheChoice =
                WO.Build(aa).L(rw =&gt;
                WO.Build(ab).L(uw =&gt;
                CO.FWO(rw).L(rwc =&gt;
                CO.FWO(uw).L(uwc =&gt;

                rw.F(WD.FacetA.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fa =&gt;
                rw.F(WD.FacetB.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fb =&gt;
                    rw.F(WD.FacetC.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fc =&gt;

                    rw.F(WD.FacetD.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fd =&gt;
                    uw.F(WD.FacetA.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fe =&gt;
                    uw.F(WD.FacetB.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(ff =&gt;
                    uw.F(WD.FacetC.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fg =&gt;


                    // Repeating this clause to drive up the problem. I think it's going geometric
                    rw.F(WD.FacetD.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fd1 =&gt;
                    uw.F(WD.FacetA.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fe1 =&gt;
                    uw.F(WD.FacetB.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(ff1 =&gt;
                    uw.F(WD.FacetC.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fg1 =&gt;

                    rw.F(WD.FacetD.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fd2 =&gt;
                    uw.F(WD.FacetA.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fe2 =&gt;
                    uw.F(WD.FacetB.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(ff2 =&gt;
                    uw.F(WD.FacetC.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fg2 =&gt;

                    rw.F(WD.FacetD.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fd3 =&gt;
                    uw.F(WD.FacetA.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fe3 =&gt;
                    uw.F(WD.FacetB.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(ff3 =&gt;
                    uw.F(WD.FacetC.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fg3 =&gt;

                    rw.F(WD.FacetD.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fd4 =&gt;
                    uw.F(WD.FacetA.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fe4 =&gt;
                    uw.F(WD.FacetB.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(ff4 =&gt;
                    uw.F(WD.FacetC.ISV).M(x =&gt; x, () =&gt; throw new Exception("")).L(CO.FWO).L(fg4 =&gt;

                    new Func&lt;bool, CP, int&gt;(
                        (bool someBool, CP cp) =&gt;
                                1234
                                ))) )))) )))) )))) ))))

                 )))))))));
        }
    }

    public sealed class WD
    {
        public static readonly ST.AC&lt;WD, ED&lt;long&gt;&gt; FacetA = null;
        public static readonly ST.AC&lt;WD, ED&lt;int&gt;&gt; FacetB = null;
        public static readonly ST.AC&lt;WD, ED&lt;long&gt;&gt; FacetC = null;
        public static readonly ST.AC&lt;WD, ED&lt;int&gt;&gt; FacetD = null;

        public sealed class ED&lt;T&gt;
        {
        }
    }


    public static class ST
    {
        public sealed class AC&lt;TOST, TContained&gt;
        {
            public Func&lt;TOST, bool&gt; ISV =&gt; throw new Exception("Irrelevant");
        }
    }
}
```

---
### Original Comments

#### Visual Studio Feedback System on 8/22/2019, 00:07 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38401</IssueID>
    <RepoID>1</RepoID>
    <Title>CS1580 fired with a paramater that is generic and nullable (xml doc)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/589446/cs1580-fired-with-a-paramater-that-is-generic-and.html)._

---
I'm using VS2019 16.1.1 (in VS2017 15.9.12 this does not happen)
The app is using .net core 2.2, and the analyzers Microsoft.CodeAnalysis.FxCopAnalyzers 2.9.2
StyleCop.Analyzers 1.1.118 

I have method with this definition:

```
public static bool HasValue&amp;lt;T&amp;gt;(this T? source) where T : struct
```

and in a xml doc I have this:

&lt;pre&gt;
/// &amp;lt;summary&amp;gt;
/// Internally uses &amp;lt;see cref=&amp;quot;TypeValidations.HasValue{T}(T?) &amp;quot;/&amp;gt;.
/// &amp;lt;/summary&amp;gt;
&lt;/pre&gt;

In VS2019 this fires the error:

&gt; Error	CS1580	Invalid type for parameter T? in XML comment cref attribute: 'TypeValidations.HasValue{T}(T?) '

If I change the documentation to `TypeValidations.HasValue{T}(Nullable{T})`  now I got an analyzer error (SA1125) telling me that I should use the shorthand notation for nullable types.

---
### Original Comments

#### Visual Studio Feedback System on 5/30/2019, 07:14 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 6/10/2019, 02:19 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Visual Studio Feedback System on 6/10/2019, 04:13 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38400</IssueID>
    <RepoID>1</RepoID>
    <Title>Cleanup InitializeParameterCodeRefactoring.</Title>
    <Description>Cleanup we've talked about with Shlomo but never got to do.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>31/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38399</IssueID>
    <RepoID>1</RepoID>
    <Title>Show Quick Info nullable analysis if the analysis is turned on globally</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38346</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38398</IssueID>
    <RepoID>1</RepoID>
    <Title>Inconsistent accessibility checks  produce unexpected errors when types nested into interfaces are involved</Title>
    <Description>```
        [Fact]
        public void InconsistentAccessibility()
        {
            var source1 =
@"
    interface I1
    {
        protected interface I2
        {
        }
    }

    class C1
    {
        protected interface I2
        {
        }
    }

    interface I3 : I1
    {
        protected I1.I2 M1();
    }

    class C3 : I1
    {
        protected void M1(I1.I2 x) { }
    }

    class C33 : C1
    {
        protected void M1(C1.I2 x) { }
    }
";
            var compilation1 = CreateCompilation(source1, options: TestOptions.DebugDll,
                                                 parseOptions: TestOptions.Regular,
                                                 targetFramework: TargetFramework.NetStandardLatest);
            compilation1.VerifyDiagnostics(
                // (18,25): error CS0050: Inconsistent accessibility: return type 'I1.I2' is less accessible than method 'I3.M1()'
                //         protected I1.I2 M1();
                Diagnostic(ErrorCode.ERR_BadVisReturnType, "M1").WithArguments("I3.M1()", "I1.I2").WithLocation(18, 25),
                // (23,24): error CS0051: Inconsistent accessibility: parameter type 'I1.I2' is less accessible than method 'C3.M1(I1.I2)'
                //         protected void M1(I1.I2 x) { }
                Diagnostic(ErrorCode.ERR_BadVisParamType, "M1").WithArguments("C3.M1(I1.I2)", "I1.I2").WithLocation(23, 24)
                );
        }
```

Expected: No errors. Note, we don't produce the error for scenario when protected interface is nested into a class, the C33 case. </Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38397</IssueID>
    <RepoID>1</RepoID>
    <Title>Make only typescript handlers and run code actions switch to main thr…</Title>
    <Description>…ead.

Make the c#/vb handlers not require main thread execution.  

Left typescript and obsolete roslyn handler to request main thread (as it serves typescript as well).</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38396</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider nullability when comparing IReference instances during emit (#38249)</Title>
    <Description>Port the fix for #38183 to 16.3.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38395</IssueID>
    <RepoID>1</RepoID>
    <Title>Call GetTextSynchronously when fetching in a synchronous way</Title>
    <Description>This code is trying to fetch the text of a single line, but since it's responding to an API that's synchronous it must be synchronous. We were doing it with GetTextAsync + WaitAndGetResult which can be slow if the thread pool is busy.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/974884</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38394</IssueID>
    <RepoID>1</RepoID>
    <Title>Properly detect whether an explicit event implementation in an interface is a WinRT event.</Title>
    <Description>Fixes #36532.
Closes #34658.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38393</IssueID>
    <RepoID>1</RepoID>
    <Title>Add an IDE test covering https://github.com/dotnet/roslyn/issues/36052</Title>
    <Description>Now that https://github.com/dotnet/roslyn/issues/36052 is fixed, let's have a test in the IDE too -- the generate method tests were previously only using parameters since it avoided the bug.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38392</IssueID>
    <RepoID>1</RepoID>
    <Title>Include SyntaxTree in Exception thrown from CheckAndAdjustPosition</Title>
    <Description>Include `SyntaxTree` in `ArgumentOutOfRangeException` thrown from `CSharpSemanticModel.CheckAndAdjustPosition()` to improve debuggability in cases where an exception is re-thrown from `Task` completion.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38391</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8603 shows up non-deterministically, leading to broken cloud builds</Title>
    <Description>**Version Used**: 
VS 29229.7.master
SDK 3.0.100-preview8-013437

**Steps to Reproduce**:


```
git clone https://devdiv@dev.azure.com/devdiv/DevDiv/_git/VS.RPC.Contracts
cd VS.RPC.Contracts\src
git checkout b0cde86
dotnet build
```

**Expected Behavior**:

See a build warning:

&gt; Utilities\DiscriminatedTypeJsonConverter`1.cs(191,20): error CS8603: Possible null reference return. [E:\A\_work\177\s\src\Microsoft.VisualStudio.RpcContracts\Microsoft.VisualStudio.RpcContracts.csproj]

We want to see this consistently in local builds and in Azure Pipelines.

**Actual Behavior**:

No warning in local builds.

We only see the expected warning/error [on Azure Pipelines](https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=2990053&amp;view=logs&amp;j=2d2b3007-3c5c-5840-9bb0-2b1ea49925f3&amp;t=d10a53f4-5a49-5f45-ea34-c6bdb6011991&amp;l=50).

Note we constrain the SDK version with a global.json file so we really should see consistent behavior in both places.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38389</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix misspelling in FeaturesResources</Title>
    <Description>
    </Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38388</IssueID>
    <RepoID>1</RepoID>
    <Title>syntax highlighting for custom keywords (like ViewBag, ViewData etc.)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/429907/syntax-highlighting-for-custom-keywords-like-viewb.html)._

---
&lt;p&gt;Please add one feature that should allows us to define custom keywords and highlighting styles.&lt;br&gt;I
 really needed this for words like &amp;quot;ViewBag&amp;quot;, which is now displays as 
normal text (black) but i really want to make it noticeable.&lt;br&gt;Thanks.&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 1/18/2019, 00:04 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;
#### Cameron on 2/18/2019, 01:02 PM: 

&lt;p&gt;Hi there,&lt;/p&gt;&lt;p&gt;Was there a solution to this query? I would like to know how to do the same thing except with specific words in a csv file opened in VS code.&lt;/p&gt;&lt;p&gt;Thanks.&lt;/p&gt;
</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38387</IssueID>
    <RepoID>1</RepoID>
    <Title>I hope to get option to insert "#nullable enable" when C# source code is created</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/399522/i-hope-to-get-option-to-insert-nullable-enable-whe.html)._

---
&lt;p&gt;In Visual Studio 2019 and C# 8.0, I want to use &amp;quot;#nullable enable&amp;quot; by default. I request an option to insert &amp;quot;#nullable enable&amp;quot; in all source codes when created, in Visual Studio 2019.&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 12/5/2018, 06:54 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38386</IssueID>
    <RepoID>1</RepoID>
    <Title>Lazy vs greedy, Parallel vs sequencial pieces of advice in Roslyn</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/388426/lazy-vs-greedy-parallel-vs-sequencial-pieces-of-ad.html)._

---
&lt;p&gt;Successive lazy linq requests can require a lot of CPU resources, but it's not explicitly visible in the code. Roslyn could advise us to do a ToList() evaluation and refactor the subsequent linq requests.&lt;/p&gt;&lt;p&gt;We could definitely have the same kind of advice about Parallel conversion.&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 11/22/2018, 00:42 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38385</IssueID>
    <RepoID>1</RepoID>
    <Title>Search in Git history window doesn't work fine with multiline.</Title>
    <Description>Sometimes, we will commit with multiline message, such as:

Enter the following commit message:
```
first line
second line
```
Search `first` in git history window can find this commit, but `second` can't.

</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38384</IssueID>
    <RepoID>1</RepoID>
    <Title>Add 'Remove Parameter' to Change Signature from Quick Action and Refactoring</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/354008/add-remove-parameter-to-change-signature-from-quic.html)._

---
&lt;p&gt;i love the Change Signature option when it comes to removing or reordering parameters.  so many times i know i now need to remove a parameter that is no longer used.  the Change Signature... option brings up the dialog box that allows me to remove one or more parameters.  it would be nice if VS could recognize the parameter i was on when i selected the Quick Action and Refactoring option and show a secondary menu where Remove Parameter was one of the options.&lt;/p&gt;&lt;p&gt;&lt;a href="https://developercommunity.visualstudio.com/storage/attachments/43641-changesignature.png"&gt; Image:43641-changesignature.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;p&gt;could be changed to something like:&lt;/p&gt;&lt;p&gt;&lt;a href="https://developercommunity.visualstudio.com/storage/attachments/43642-replace.png"&gt; Image:43642-replace.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;where Change Signature sub menu could contain an option to 'Remove assignedStandardId' and an option to bring up the entire Change Signature dialog.&lt;/p&gt;&lt;p&gt;just an idea.  i know i do this quite a bit during refactoring.&lt;/p&gt;&lt;p&gt;&lt;p&gt;another nice option would be that when there are two parameters, a new Change Signature sub menu could contain an option to 'swap order of parameters'&lt;/p&gt;&lt;p&gt;thanks!&lt;/p&gt;

---
### Original Comments

#### Fiona Niu[MSFT] on 10/11/2018, 03:21 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about two weeks on our next steps. &lt;/p&gt;</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38383</IssueID>
    <RepoID>1</RepoID>
    <Title>Code cleanup during formatting: Remove unnecessary usings - Give option not to remove system namspace</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/351777/code-cleanup-during-formatting-remove-unnecessary.html)._

---
Migrated from &lt;a href="http://visualstudio.uservoice.com/forums/121579/suggestions/35606437"&gt;Visual Studio IDE UserVoice forum&lt;/a&gt; &lt;br&gt;&lt;br&gt; There are few namespace (For C#) like commonly used:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

It would be helpful if code cleanup doesn't remove the &amp;quot;System&amp;quot; namespaces as they might be used eventually, but it should remove other namespace if it is not used.

---
### Original Comments

#### Jane Wu [MSFT] on 10/15/2018, 03:24 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about&amp;nbsp;five business days&amp;nbsp;on our next steps.&lt;/p&gt;
#### Andrew Cheung [MSFT] on 1/11/2019, 01:04 PM: 

&lt;p&gt;Your suggestion has been queued up for prioritization.  Feature suggestions are prioritized based on the value to our broader developer community and the product roadmap. We may not be able to pursue this one immediately, but we will continue to monitor it up to 90 days for community input&lt;/p&gt;
</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38382</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense lists unfitting generic extension methods</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/705931/intellisense-lists-unfitting-generic-extension-met.html)._

---
Hence the following code:

```cs
using System;
using System.IO;

namespace ExampleLib
{
    public class Class1
    {
        public void Test()
        {
            object x;
            x. // use IntelliSense here
        }
    }

public static class StreamExtensions
    {
        public static T Read&amp;lt;T&amp;gt;(this T self, out int result) where T : Stream
        {
            result = 1234; // sample code
            return self;
        }
    }
}
```

I defined an extension method using a generic type parameter for the extended class, but it is limited to `Stream` instances due to the type constraint on `T`. This was done to return an extended, typed instance to allow chain calling such methods.

However, when typing `x.` at the marked position in `Class1::Test`, IntelliSense also lists the `Stream` only extension method `Read&amp;lt;&amp;gt;` even though `object` is not guaranteed to be of type `Stream`. The full list shown by IntelliSense then is
- Equals
- GetHashCode
- GetType
- Read&amp;lt;&amp;gt;
- ToString

Is this expected behavior? Of course, theoretically `x` could be passed by calling the method &amp;quot;normally&amp;quot; without syntactic extension method sugar. However, it turns generic extension methods into IntelliSense-cluttering bad guys.

Can this behavior be made optional?

---
### Original Comments

#### Visual Studio Feedback System on 8/22/2019, 09:36 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38381</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 16.3.0 Preview 2 - IDE0060 Double Underscore False Positive</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/716180/vs-1630-preview-2-ide0060-double-underscore-false-1.html)._

---
IDE0060 Remove unused parameter '__' is thrown here on the double underscore. Shouldn't this be considered a valid pattern for a discard variable?

```
namespace IDE0060_Double_Underscore
{
    public class C
    {
        string M(int _, int __)
        {
            return string. Empty;
        }
    }
}
```

---
### Original Comments

#### Visual Studio Feedback System on 8/28/2019, 09:22 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38380</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unnecessary AbstractFormatEngine.Partitioner</Title>
    <Description>As far as I can tell, https://github.com/dotnet/roslyn/pull/31276 (or, more specifically, https://github.com/dotnet/roslyn/commit/34b167a2b6c4a8046494f5ed2995a1676d938616) removed all parallelization from this code. In the case of `ApplySpaceAndWrappingOperations`, it set the `Partitioner` to always use only one partition and removed `Task`s. But that makes the whole `Partitioner` unnecessary, so this PR removes it, which also make the code that previously used it simpler.

cc: @sharwell </Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38379</IssueID>
    <RepoID>1</RepoID>
    <Title>Replace property with method refactoring discards unsafe modifier</Title>
    <Description>**Version Used**: Visual Studio 2019 version 16.3 Preview 2

**Steps to Reproduce**:

```cs
class Program
{
    public static unsafe void* Pointer =&gt; default;
}
```

**Expected Behavior**:

```cs
class Program
{
    public static unsafe void* GetPointer()
    {
        return default;
    }
}
```

**Actual Behavior**:

```cs
class Program
{
    public static void* GetPointer()
    {
        return default;
    }
}
```</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38378</IssueID>
    <RepoID>1</RepoID>
    <Title>Quality of implementation: superfluous errors for pointer to non-existent type</Title>
    <Description>Compile the following program:

```cs
class Program
{
    static unsafe void Type(Type *type)
    {
    }
}
```

# Expected
&gt; Program.cs(3,29): error CS0246: The type or namespace name 'Type' could not be found (are you missing a using directive or an assembly reference?) [/Users/hugh/Documents/GitHub/repo/repo.csproj]
 
A single error that we can't find the type

# Actual
&gt; Program.cs(3,29): error CS0246: The type or namespace name 'Type' could not be found (are you missing a using directive or an assembly reference?) [/Users/hugh/Documents/GitHub/repo/repo.csproj]
Program.cs(3,29): error CS0208: Cannot take the address of, get the size of, or declare a pointer to a managed type ('Type') [/Users/hugh/Documents/GitHub/repo/repo.csproj]

The second error is pointless in this case as the type doesn't exist. I would suggest not checking if we can take the address, size or declare a pointer to a non-existent type</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38377</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler does no longer report local variable scope conflict</Title>
    <Description>**Version Used**:  16.3 Preview 2

**Steps to Reproduce**:
I don't know if this is an expected new feature or not, i've noticed because it broke on the build server (having only 16.2.3 installed) and my .NET Framework project is set to Language version `Automatically selected based on framework version` (7.3).
[Sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEAMACFBGALAbgFgAodLbAOgBkBLAOwEcjiSUBmLAJgwGESBvEhmFYOtWAB4caAHwYAahAA2AVzhQMAXgx04AdwziYU7LIAUASmYiMQkeyy4MAWTM42EnnKgB7FQgBjOAs7YUFiGxtffyCKAHUAC0Q4MwAPLTlUikVVdQoAQToATzSMjHTNbQAiAAk4JSUfDDifBCUAEyqLK1CMAF8SPqA)
```csharp
using System;
using System.Collections.Generic;
using System.Linq;

public class C
{
    public List&lt;string&gt; Values = new List&lt;string&gt;();
    
    public void M(IEnumerable&lt;C&gt; source) 
    {
        source.Where(x =&gt; x.Values.Any(x =&gt; x == "Hello World"));
    }
}
```

**Expected Behavior**:
```
error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
```
**Actual Behavior**:
Compiles fine</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38376</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 - Unneccessary assignment is not reported if lambda is used in method</Title>
    <Description>**Version Used**: 
VS16.3 Preview 2

**Steps to Reproduce**:

```csharp
using System;

namespace TestNamespace
{
    public class TestClass
    {
        public void TestMethod()
        {
            var r = new Random();
            DoSmth(() =&gt; true);
        }

        private void DoSmth(Func&lt;bool&gt; func) =&gt; func();
    }
}
```

**Expected Behavior**:
IDE0059 should be triggered for `r`.

**Actual Behavior**:
IDE0059 is not triggered. 
If you comment out `DoSmth(() =&gt; true);`, IDE0059 is triggered as expected.
</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38375</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190828.9
- **Date Produced**: 8/28/2019 11:24 PM
- **Commit**: dc55bd4b7353be8e36b2f71b9557e84f743dd6f6
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19428.9

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38374</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to release/dev16.3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-release/dev16.3-vs-deps
git reset --hard upstream/release/dev16.3-vs-deps
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38373</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38372</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38371</IssueID>
    <RepoID>1</RepoID>
    <Title>WarningsAsErrors for CS8602 is not returning an error</Title>
    <Description>**Version Used**: 
Visual Studio 2019 16.2.3
.NET Core: 3.0.0-preview8-28405-07

**Steps to Reproduce**:

For CS8602 I am not getting the expected errors when I add this code in the WarningsAsErrors section.

1. Modify the csproj as:

&amp;lt;Project Sdk="Microsoft.NET.Sdk"&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netcoreapp3.0&amp;lt;/TargetFramework&amp;gt;
    **&amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
    &amp;lt;WarningsAsErrors&amp;gt;CS8602&amp;lt;/WarningsAsErrors&amp;gt;**
  &amp;lt;/PropertyGroup&amp;gt;
&amp;lt;/Project&amp;gt;

2. My sample application code is:

private static void PosibleDereferenceNullableReferenceTypes()
{
     string data = null;
     Console.WriteLine(data.Length);
}

**Expected Behavior**:
An error when we build the project.
**Error CS8602 Dereference of a possibly null reference.**

&gt; Note: When I put the codes **CS8600, CS8603 or CS8604** into the **WarningsAsErrors** section, I receive the expected error messages in compilation time.


**Actual Behavior**:
Warning CS8602 Dereference of a possibly null reference.

### Updated information about this issue and its behavior:
If I write into the csproj:
**&amp;lt;WarningsAsErrors&amp;gt;CS8600;CS8602&amp;lt;/WarningsAsErrors&amp;gt;**
I get the error messages for CS8600 (as expected) and for **CS8602**</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38370</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring to create &lt;see&gt; tags produces invalid tags for some keywords</Title>
    <Description>**Version Used**: VS 16.3.0 Preview 2, master (ad3ac7a)

**Steps to Reproduce**:

1. Have XML doc comment with `base` or `this` as text (possibly other keywords too?), e.g.:

    ```c#
    /// base
    class C { }
    ```

2. Place the caret on the keyword and activate the offered refactoring:

**Expected Behavior**:

Either the refactoring should not be offered, or it should produce valid XML, like `&lt;see langword="base"/&gt;`.

**Actual Behavior**:

The refactoring produces the XML `&lt;see cref="base"/&gt;`:

![](https://user-images.githubusercontent.com/287848/63923612-1d9fa000-ca47-11e9-94df-d4fe402961aa.png)

But that code is invalid:

&gt; Warning	CS1584	XML comment has syntactically incorrect cref attribute 'base'
&gt; Warning	CS1658	Identifier expected; 'base' is a keyword. See also error CS1041.

As far as I can tell, this happens because https://github.com/dotnet/roslyn/pull/22612 intentionally prevented `&lt;see langword&gt;` from being offered for keywords like `base` that are common words. But then the refactoring continues processing the keyword and decides that `&lt;see cref&gt;` is valid (because `base` is considered to be a valid expression) and so it offers that.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38369</IssueID>
    <RepoID>1</RepoID>
    <Title> [loc][Query][roslyn] Localizability of "0; "WRN_UninitializedNonNullableField"</Title>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
Non-nullable {0} '{1}' is uninitialized. Consider declaring the {0} as nullable.

File Name:
Compilers\CSharp\Portable\xlf\CSharpResources.xlf

==========================================
Query:
assumed that the placeholder {0} will be replaced with "field" and translated accordingly. Please kindly inform us what this placeholder will be replaced with.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38368</IssueID>
    <RepoID>1</RepoID>
    <Title> [loc][Query][Roslyn] Localizability of "0; "IDS_CSCHelp"</Title>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
\r\n                             Visual C# Compiler Options\r\n\r\n                       - OUTPUT FILES -\r\n-out:&lt;file&gt;                   Specify output file name (default: base name of\r\n                              file with main class or first file)\r\n-target:exe                   Build a console executable (default) (Short\r\n                              form: -t:exe)\r\n-target:winexe                Build a Windows executable (Short form:\r\n                              -t:winexe)\r\n-target:library               Build a library (Short form: -t:library)\r\n-target:module                Build a module that can be added to another\r\n                              assembly (Short form: -t:module)\r\n-target:appcontainerexe       Build an Appcontainer executable (Short form:\r\n                              -t:appcontainerexe)\r\n-target:winmdobj              Build a Windows Runtime intermediate file that\r\n                              is consumed by WinMDExp (Short form: -t:winmdobj)\r\n-doc:&lt;file&gt;                   XML Documentation file to generate\r\n-refout:&lt;file&gt;                Reference assembly output to generate\r\n-platform:&lt;string&gt;            Limit which platforms this code can run on: x86,\r\n                              Itanium, x64, arm, arm64, anycpu32bitpreferred, or\r\n                              anycpu. The default is anycpu.\r\n\r\n                       - INPUT FILES -\r\n-recurse:&lt;wildcard&gt;           Include all files in the current directory and\r\n                              subdirectories according to the wildcard\r\n                              specifications\r\n-reference:&lt;alias&gt;=&lt;file&gt;     Reference metadata from the specified assembly\r\n                              file using the given alias (Short form: -r)\r\n-reference:&lt;file list&gt;        Reference metadata from the specified assembly\r\n                              files (Short form: -r)\r\n-addmodule:&lt;file list&gt;        Link the specified modules into this assembly\r\n-link:&lt;file list&gt;             Embed metadata from the specified interop\r\n                              assembly files (Short form: -l)\r\n-analyzer:&lt;file list&gt;         Run the analyzers from this assembly\r\n                              (Short form: -a)\r\n-additionalfile:&lt;file list&gt;   Additional files that don't directly affect code\r\n                              generation but may be used by analyzers for producing\r\n                              errors or warnings.\r\n-embed                        Embed all source files in the PDB.\r\n-embed:&lt;file list&gt;            Embed specific files in the PDB.\r\n\r\n                       - RESOURCES -\r\n-win32res:&lt;file&gt;              Specify a Win32 resource file (.res)\r\n-win32icon:&lt;file&gt;             Use this icon for the output\r\n-win32manifest:&lt;file&gt;         Specify a Win32 manifest file (.xml)\r\n-nowin32manifest              Do not include the default Win32 manifest\r\n-resource:&lt;resinfo&gt;           Embed the specified resource (Short form: -res)\r\n-linkresource:&lt;resinfo&gt;       Link the specified resource to this assembly\r\n                              (Short form: -linkres) Where the resinfo format\r\n                              is &lt;file&gt;[,&lt;string name&gt;[,public|private]]\r\n\r\n                       - CODE GENERATION -\r\n-debug[+|-]                   Emit debugging information\r\n-debug:{full|pdbonly|portable|embedded}\r\n                              Specify debugging type ('full' is default,\r\n                              'portable' is a cross-platform format,\r\n                              'embedded' is a cross-platform format embedded into\r\n                              the target .dll or .exe)\r\n-optimize[+|-]                Enable optimizations (Short form: -o)\r\n-deterministic                Produce a deterministic assembly\r\n                              (including module version GUID and timestamp)\r\n-refonly                      Produce a reference assembly in place of the main output\r\n-instrument:TestCoverage      Produce an assembly instrumented to collect\r\n                              coverage information\r\n-sourcelink:&lt;file&gt;            Source link info to embed into PDB.\r\n\r\n                       - ERRORS AND WARNINGS -\r\n-warnaserror[+|-]             Report all warnings as errors\r\n-warnaserror[+|-]:&lt;warn list&gt; Report specific warnings as errors\r\n-warn:&lt;n&gt;                     Set warning level (0-4) (Short form: -w)\r\n-nowarn:&lt;warn list&gt;           Disable specific warning messages\r\n-ruleset:&lt;file&gt;               Specify a ruleset file that disables specific\r\n                              diagnostics.\r\n-errorlog:&lt;file&gt;              Specify a file to log all compiler and analyzer\r\n                              diagnostics.\r\n-reportanalyzer               Report additional analyzer information, such as\r\n                              execution time.\r\n\r\n                       - LANGUAGE -\r\n-checked[+|-]                 Generate overflow checks\r\n-unsafe[+|-]                  Allow 'unsafe' code\r\n-define:&lt;symbol list&gt;         Define conditional compilation symbol(s) (Short\r\n                              form: -d)\r\n-langversion:?                Display the allowed values for language version\r\n-langversion:&lt;string&gt;         Specify language version such as\r\n                              `latest` (latest version, including minor versions),\r\n                              `default` (same as `latest`),\r\n                              `latestmajor` (latest version, excluding minor versions),\r\n                              `preview` (latest version, including features in unsupported preview),\r\n                              or specific versions like `6` or `7.1`\r\n-nullable[+|-]                Specify nullable context option enable|disable.\r\n-nullable:{enable|disable|warnings|annotations}\r\n                              Specify nullable context option enable|disable|warnings|annotations.\r\n\r\n                       - SECURITY -\r\n-delaysign[+|-]               Delay-sign the assembly using only the public\r\n                              portion of the strong name key\r\n-publicsign[+|-]              Public-sign the assembly using only the public\r\n                              portion of the strong name key\r\n-keyfile:&lt;file&gt;               Specify a strong name key file\r\n-keycontainer:&lt;string&gt;        Specify a strong name key container\r\n-highentropyva[+|-]           Enable high-entropy ASLR\r\n\r\n                       - MISCELLANEOUS -\r\n@&lt;file&gt;                       Read response file for more options\r\n-help                         Display this usage message (Short form: -?)\r\n-nologo                       Suppress compiler copyright message\r\n-noconfig                     Do not auto include CSC.RSP file\r\n-parallel[+|-]                Concurrent build.\r\n-version                      Display the compiler version number and exit.\r\n\r\n                       - ADVANCED -\r\n-baseaddress:&lt;address&gt;        Base address for the library to be built\r\n-checksumalgorithm:&lt;alg&gt;      Specify algorithm for calculating source file\r\n                              checksum stored in PDB. Supported values are:\r\n                              SHA1 or SHA256 (default).\r\n-codepage:&lt;n&gt;                 Specify the codepage to use when opening source\r\n                              files\r\n-utf8output                   Output compiler messages in UTF-8 encoding\r\n-main:&lt;type&gt;                  Specify the type that contains the entry point\r\n                              (ignore all other possible entry points) (Short\r\n                              form: -m)\r\n-fullpaths                    Compiler generates fully qualified paths\r\n-filealign:&lt;n&gt;                Specify the alignment used for output file\r\n                              sections\r\n-pathmap:&lt;K1&gt;=&lt;V1&gt;,&lt;K2&gt;=&lt;V2&gt;,...\r\n                              Specify a mapping for source path names output by\r\n                              the compiler.\r\n-pdb:&lt;file&gt;                   Specify debug information file name (default:\r\n                              output file name with .pdb extension)\r\n-errorendlocation             Output line and column of the end location of\r\n                              each error\r\n-preferreduilang              Specify the preferred output language name.\r\n-nosdkpath                    Disable searching the default SDK path for standard library assemblies.\r\n-nostdlib[+|-]                Do not reference standard library (mscorlib.dll)\r\n-subsystemversion:&lt;string&gt;    Specify subsystem version of this assembly\r\n-lib:&lt;file list&gt;              Specify additional directories to search in for\r\n                              references\r\n-errorreport:&lt;string&gt;         Specify how to handle internal compiler errors:\r\n                              prompt, send, queue, or none. The default is\r\n                              queue.\r\n-appconfig:&lt;file&gt;             Specify an application configuration file\r\n                              containing assembly binding settings\r\n-moduleassemblyname:&lt;string&gt;  Name of the assembly which this module will be\r\n                              a part of\r\n-modulename:&lt;string&gt;          Specify the name of the source module\r\n

File Name:
Compilers\CSharp\Portable\xlf\CSharpResources.xlf

==========================================
Query:
Would you please check if the elements wihtin angle brackets can be translated?</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38366</IssueID>
    <RepoID>1</RepoID>
    <Title>C# compiler should emit CS0161 for expression-bodied async iterator methods</Title>
    <Description>**Version Used**: csc 3.3.0-beta3-19407-03 (d961190a)

**Steps to Reproduce**:

```csharp
public static async System.Collections.Generic.IAsyncEnumerable&lt;int&gt; GenerateSequence() 
     =&gt; await Task.FromResult(0);
```

**Expected Behavior**:
A compiler error message along the lines of "GenerateSequence(): not all code paths return a value"

**Actual Behavior**:
Compiler error CS7038 Failed to emit module '{0}'.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38365</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] Code fix previews are not visible by default</Title>
    <Description>**Visual Studio Version**:
Version 16.4.0 Preview 1.0 [29228.128.master]

**Summary**:

Not sure if this also occurs in 16.3 as don't currently have build installed.


**Steps to Reproduce**:

1. Navigate to a code fix/refactoring that has a preview

**Expected Behavior**:
![image](https://user-images.githubusercontent.com/1103906/63910494-3ec5b800-ca6a-11e9-8c96-167f84a4dc07.png)


**Actual Behavior**:
![image](https://user-images.githubusercontent.com/1103906/63910496-44bb9900-ca6a-11e9-8274-e48ffd1031e1.png)

**User Impact**:
</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38364</IssueID>
    <RepoID>1</RepoID>
    <Title>port typescript's remote syntactic classification tagger for A/B testing</Title>
    <Description>this code is only for A/B testing to see whether we can do syntactic classification remotely.

this code reuses existing code exactly the same as much as possible.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38363</IssueID>
    <RepoID>1</RepoID>
    <Title>Covariance does not consider type parameter constraints</Title>
    <Description>Minimal reproduction:

```csharp
interface IFoo&lt;out T&gt; { }
class Foo&lt;T&gt; : IFoo&lt;T&gt;
{
    static void Bar&lt;U&gt;() where U : T
    {
        U x1 = default;
        T y1 = x1; // works, thanks to constraint

        IFoo&lt;string&gt; x2 = new Foo&lt;string&gt;();
        IFoo&lt;object&gt; y2 = x2; // works, thanks to covariance

        IFoo&lt;U&gt; x3 = new Foo&lt;U&gt;();
        IFoo&lt;T&gt; y3 = x3; // error CS0266
    }
}
```

I would expect `IFoo&lt;U&gt;` to be implicitly convertible to `IFoo&lt;T&gt;` due to the covariance rule, since U is a subclass of T according to the constraint.

Instead I get:
```
Error CS0266 Cannot implicitly convert type 'IFoo&lt;U&gt;' to 'IFoo&lt;T&gt;'. An explicit conversion exists (are you missing a cast?)
```

`Foo&lt;U&gt;` is also not implicitly convertible to `IFoo&lt;T&gt;`, but casts do succeed at runtime for any U and T that satisfy the type parameter constraint.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38362</IssueID>
    <RepoID>1</RepoID>
    <Title>Update operand flow state after an unboxing conversion</Title>
    <Description>Closes #38170

I incidentally found and fixed a bug where explicit nullable conversions to non-nullable value types would fail to update all affected slots.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38361</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert VSSDK and keep GoToBase UI</Title>
    <Description>Attempt to fix #38349, #38350 and #38351</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38360</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8617 warning. Maybe fixed but....</Title>
    <Description>**Version Used**: 

- VS2019 16.2.3
- .Net Core 3.0 Preview 8

**Steps to Reproduce**:

1. Create a solution with two .Net Core libraries (Lib2 references Lib1).

```
	&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
		&lt;PropertyGroup&gt;
			&lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
			&lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
			&lt;Nullable&gt;enable&lt;/Nullable&gt;
		&lt;/PropertyGroup&gt;
	&lt;/Project&gt;
```

2. Add following interface to Lib1 project:

```
    namespace Lib1
    {
        public interface IFace
        {
            string? FilePath { get; }
            bool? LoadSolverConfiguration(bool isDefault) =&gt; true;
        }
    }
```

3. Add following class to Lib2 project

```
    using Lib1;

    namespace Lib2
    {
        public class Implementation : IFace
        {
            public string? FilePath =&gt; null;
            bool? IFace.LoadSolverConfiguration(bool isDefault) =&gt; true;
        }
    }
```

**Expected Behavior**:

No warning.

**Actual Behavior**:

Warning CS8617 Nullability of reference types in type of parameter 'isDefault' doesn't match implemented member 'bool? IFace.LoadSolverConfiguration(bool isDefault)'.

Maybe the same case as in [#37927](https://github.com/dotnet/roslyn/issues/37927) (CS8614) but please verify it's not.
</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38359</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38358</IssueID>
    <RepoID>1</RepoID>
    <Title>Quick Info representation for flow analysis annotations</Title>
    <Description>When a method has flow analysis attributes it may be worthwhile to somehow display them in Quick Info.

The most obvious approach would be something like:
```cs
bool string.IsNullOrEmpty([NotNullWhen(false)] string? value)
```

Obviously Quick Info "real estate" is very valuable and we want to make sure this is providing more value than noise.

/cc @jasonmalinowski @sharwell </Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38357</IssueID>
    <RepoID>1</RepoID>
    <Title>Update our cached reference count in server</Title>
    <Description>Presently the compiler server will cache the last 100 references read off of disk. This number was chosen arbitrarily as dictated by the comment in [the file](https://github.com/dotnet/roslyn/blob/master/src/Compilers/Server/VBCSCompiler/MetadataCache.cs#L17):

``` csharp
        // Store 100 entries -- arbitrary number
        private const int CacheSize = 100;
```

At the time this number was chosen though desktop was the primary scenario. It's possible this number was based off of the average reference count for desktop projects which is typically less than 100. Hence the cache would comfortably persist across compilations for desktop projects (or maybe the number was completely arbitrary). 

This number though doesn't help us with .NET Core style projects where reference counts are significantly higher:

|Target Framework|Average Reference Count|
|--|--|
|.NET Standard|165|
|.NET Core|201|
|ASP.NET Core|323|

This means for newer projects the compiler server reference cache effectively does not exist. At least half of the references are getting evicted on every compilation. Based on this I think we need to update our reference cached count to 350 to ensure we're providing the most value for the

</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38356</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix deadlock due to VS Experiement service jumping to UI thread in certain cases.</Title>
    <Description>make sure to acquire IExperiementationService outside of a lock so that we don't get into deadlock in certain cases.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38355</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove RestoreSources from Versions.props</Title>
    <Description>Responds to the change https://github.com/dotnet/arcade/pull/3041 in Arcade</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38354</IssueID>
    <RepoID>1</RepoID>
    <Title>Record updated symbols for properties, fields, event access, and event assignments</Title>
    <Description>This expands the range of symbols for which `GetSymbolInfo` will return correct information. @dotnet/roslyn-compiler for a review please. /cc @jasonmalinowski @ryzngard.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38353</IssueID>
    <RepoID>1</RepoID>
    <Title>Bring features/localsinit branch up to date with master</Title>
    <Description>
    </Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38352</IssueID>
    <RepoID>1</RepoID>
    <Title>Bad error message for generic field</Title>
    <Description>```cs
#nullable enable
public class C&lt;T&gt; {
	T t;
}
```
```
warning CS8618: Non-nullable field 't' is uninitialized. Consider declaring the field as nullable.
```
The recommendation here is something that cannot be done, we shouldn't recommend making the field nullable when it's of type T.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38351</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualBasicCompletionCommandHandlerTests.TestBangFiltersInDocComment</Title>
    <Description>Failures in PR validation [Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=328771&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=9620558&amp;resultId=100452&amp;paneView=debug)
```
Error message
AssertCompletionSession\r\nExpected: True\r\nActual: False

Stack trace
   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.ModernCompletionTestState.VB$StateMachine_22_AssertCompletionSession.MoveNext() in /_/src/EditorFeatures/TestUtilities2/Intellisense/ModernCompletionTestState.vb:line 191
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests.VB$StateMachine_59_TestBangFiltersInDocComment.MoveNext() in /_/src/EditorFeatures/Test2/IntelliSense/VisualBasicCompletionCommandHandlerTests.vb:line 1369
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38350</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualBasicCompletionCommandHandlerTests.DotIsInserted UnitTest fails</Title>
    <Description>Multiple failures in PR validation [Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=328771&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=9620558&amp;resultId=100452&amp;paneView=debug)

```
Error message
Current completion is not soft-selected. Expected: soft-selected\r\nExpected: True\r\nActual: False

Stack trace
   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.ModernCompletionTestState.VB$StateMachine_28_AssertSelectedCompletionItem.MoveNext() in /_/src/EditorFeatures/TestUtilities2/Intellisense/ModernCompletionTestState.vb:line 247
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests.VB$StateMachine_15_DotIsInserted.MoveNext() in /_/src/EditorFeatures/Test2/IntelliSense/VisualBasicCompletionCommandHandlerTests.vb:line 271
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38349</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualBasicCompletionCommandHandlerTests.TestMRUKeepsTwoRecentlyUsedItems UnitTest fails</Title>
    <Description>Multiple failures in PR validation [Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=328771&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=9620558&amp;resultId=100452&amp;paneView=debug)

```
Error message
Assert.Equal() Failure\r\n ↓ (pos 9)\r\nExpected: Ma(m:=(Ma(m:=(\r\nActual: M(Ma(m:=(Ma(\r\n ↑ (pos 9)

Stack trace
   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests.VB$StateMachine_147_TestMRUKeepsTwoRecentlyUsedItems.MoveNext() in /_/src/EditorFeatures/Test2/IntelliSense/VisualBasicCompletionCommandHandlerTests.vb:line 3110
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38348</IssueID>
    <RepoID>1</RepoID>
    <Title>Bind some syntax nodes even in error recovery scenarios.</Title>
    <Description>Fixes #27060</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>31/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38347</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0004 doesn't trigger for method arguments to local function in same scope</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
```C#
class Program
{
    static void Main() { }

    public static void M()
    {
        for (int i = 0; i &lt; 1; i++)
        {
            long a = 0, b = 0;

            decimal result = (decimal)a + (decimal)b; // IDE004
            SameScope(result);

            OuterScope((decimal)a + (decimal)b); // IDE004

            SameScope((decimal)a + (decimal)b); // ## Not offered ##

            static void SameScope(decimal sum) { }
        }

        static void OuterScope(decimal sum) { }
    }
}
```

**Expected Behavior**:
IDE004 offered on all casts to decimal.

**Actual Behavior**:
IDE004 isn't offered on the casts in `SameScope((decimal)a + (decimal)b)`.
![image](https://user-images.githubusercontent.com/2642209/63890672-7886b800-c9b1-11e9-9e2a-5fb6601498d6.png)
</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38346</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability infotip is not shown with &lt;Nullable&gt;enable&lt;/Nullable&gt; in csproj</Title>
    <Description>**Version Used**: 
Visual Studio 2019 16.3 Preview 3 d16.3

**Steps to Reproduce**:

1. Create a C# project
2. Enable nullable reference types in csproj by adding this to the csproj file.
```xml
&lt;Nullable&gt;enable&lt;/Nullable&gt;
```
3. Write the following code
```c#
namespace Demo
{
    using System;
    using System.Text.Json;

    class Program
    {
        static void Main(string[] args)
        {
            string s3 = JsonSerializer.Serialize((a: 1, b: 2, c: null as string));
            Console.WriteLine(s3);
                        
        }
    }
}
```
4. Mouse over to the `s3` in the last line

**Expected Behavior**:
A tooltip window shows up, and the nullability analysis result is included.

![image](https://user-images.githubusercontent.com/12908526/63890436-d1495700-c997-11e9-9264-b0858139f3cd.png)

**Actual Behavior**:
The nullability analysis is not available in the tooltip; it is not available until you add `#nullable enable` to the open file.

![image](https://user-images.githubusercontent.com/12908526/63890495-f938ba80-c997-11e9-8401-1a4fcf54a23a.png)
</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38345</IssueID>
    <RepoID>1</RepoID>
    <Title>Code Action preview window showing the end of the content</Title>
    <Description>**Version Used**: 
Visual Studio 2019 16.3 preview 3 d16.3

**Steps to Reproduce**:

1. Create a C# project
2. Move the cursor to `Program` and hit `Ctrl` + `.`
3. Move the cursor to select "Add accessibility modifier"

**Expected Behavior**:
Code Action preview window shows up, also the about-to-change content is visible from the first line without the need to scroll mouse up or down

![image](https://user-images.githubusercontent.com/12908526/63889907-ca6e1480-c996-11e9-8f16-3b1652160254.png)

**Actual Behavior**:
Code Action preview window shows up, the about-to-change content isn't visible, the content is showing the end of the changes and I need to scroll up to see the diff. 

![image](https://user-images.githubusercontent.com/12908526/63889858-b4f8ea80-c996-11e9-941b-163aa5c3e9c4.png)
</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38344</IssueID>
    <RepoID>1</RepoID>
    <Title>typeof(GenericType&lt;&gt;) can produce invalid IL and cause BadImageFormatException at runtime</Title>
    <Description>Sometimes using ``typeof(GenericType&lt;&gt;)`` produces invalid IL. This will result in a BadImageFormatException at run time as soon as the method is called. The exception is probably thrown by RyuJit, because it can't process invalid IL.

I'm not sure what the conditions are, but you can find the repro below. When you remove ``Console.WriteLine("Hello World!");`` it produces correct IL.

**Exception**
```
Message: An attempt was made to load a program with an incorrect format. (0x8007000B)
Stack Trace:
   at RoslynBug.Program.Test(Type type) in RoslynBug\RoslynBug\Program.cs:line 19
   at RoslynBug.Program.Main(String[] args) in RoslynBug\RoslynBug\Program.cs:line 11
```

**Version Used**: 
dotnet-sdk-3.0.100-preview9-19414-10

**Steps to Reproduce**:
```csproj
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;LangVersion&gt;preview&lt;/LangVersion&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
    &lt;Deterministic&gt;true&lt;/Deterministic&gt;
    &lt;PathMap&gt;$(SolutionDir)=$(SolutionName)&lt;/PathMap&gt;
    &lt;Features&gt;pdb-path-determinism&lt;/Features&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
    &lt;RuntimeIdentifier&gt;win10-x64&lt;/RuntimeIdentifier&gt;
    &lt;TargetLatestRuntimePatch&gt;true&lt;/TargetLatestRuntimePatch&gt;
    &lt;TieredCompilation&gt;true&lt;/TieredCompilation&gt;
    &lt;TieredCompilationQuickJit&gt;true&lt;/TieredCompilationQuickJit&gt;
    &lt;LinkDuringPublish&gt;false&lt;/LinkDuringPublish&gt;
    &lt;CrossGenDuringPublish&gt;true&lt;/CrossGenDuringPublish&gt;
    &lt;PublishReadyToRun&gt;false&lt;/PublishReadyToRun&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;

```

```c#
using System;
using System.Collections.Generic;

namespace RoslynBug
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            Test(typeof(IDictionary&lt;string, long&gt;));
        }

        static Type[] Test(Type type)
        {
            var genericArguments = type.GetGenericArguments();
            genericArguments[0] = typeof(Example&lt;&gt;).MakeGenericType(genericArguments[0]);
            return genericArguments;
        }

        static Type[] Test2(Type type)
        {
            var genericArguments = type.GetGenericArguments();
            genericArguments[0] = typeof(Example&lt;&gt;).MakeGenericType(genericArguments[0]);
            return genericArguments;
        }
    }

    public readonly struct Example&lt;T&gt; : IComparable&lt;Example&lt;T&gt;&gt;, IEquatable&lt;Example&lt;T&gt;&gt;
        where T : notnull, IComparable&lt;T&gt;, IEquatable&lt;T&gt;
    {
        public readonly ulong Id;
        public readonly T Value;

        public Example(ulong id, T value)
        {
            Id = id;
            Value = value;
        }

        public readonly int CompareTo(Example&lt;T&gt; other)
        {
            if (Id != other.Id)
                return Id &lt; other.Id ? -1 : 1;

            return Comparer&lt;T&gt;.Default.Compare(Value, other.Value);
        }

        public readonly bool Equals(Example&lt;T&gt; other)
        {
            if (Id != other.Id)
                return false;
            if (!EqualityComparer&lt;T&gt;.Default.Equals(Value, other.Value))
                return false;

            return true;
        }

        public override readonly int GetHashCode() =&gt; Id.GetHashCode();
        public override readonly bool Equals(object? obj) =&gt; obj is Example&lt;T&gt; other &amp;&amp; Equals(other);
        public override readonly string ToString() =&gt; Value.ToString() + "/" + Id.ToString();

        public static bool operator ==(Example&lt;T&gt; a, Example&lt;T&gt; b) =&gt; a.Equals(b);
        public static bool operator !=(Example&lt;T&gt; a, Example&lt;T&gt; b) =&gt; !a.Equals(b);
    }
}
```

**Expected IL**:
```msil
    IL_000a:  ldtoken    RoslynBug.Example`1
    IL_000f:  call       class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)
```

**Actual IL**:
```msil
    IL_000a:  ldtoken    valuetype RoslynBug.Example`1&lt;!0&gt;
    IL_000f:  call       class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)
```
</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38343</IssueID>
    <RepoID>1</RepoID>
    <Title>Null suppression operator not skipped when searching for bindable parent</Title>
    <Description>This code in `MemberSemanticModel.GetBindableParentNode` does not handle the postfix `!` operator, which has no bound node:

``` c#
            // skip up past parens and ref expressions, as we have no bound nodes for them.
            while (true)
            {
                switch (parent.Kind())
                {
                    case SyntaxKind.ParenthesizedExpression:
                    case SyntaxKind.RefExpression:
                    case SyntaxKind.RefType:
                        var pp = parent.Parent;
                        if (pp == null) break;
                        parent = pp;
                        break;
                    default:
                        goto foundParent;
                }
            }
```
</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>21/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38342</IssueID>
    <RepoID>1</RepoID>
    <Title>vbc is launching during build</Title>
    <Description>On a clean enlistment of roslyn running build will cause vbc.exe to be launched for compilation. This is unexpected as all compilations should be going through VBCSCompiler. 

It is possible, even with a "bug free" implementation of VBCSCompiler, for this to happen. The underlying named pipe implementation can fail in certain cases which would cause the build task to fall back to vbc / csc for compilation. That should be a fairly rare event though and not generally repeatable. In this situation though I'm seeing vbc get launched in a repeatable fashion. 

Easiest way to view this is set "Image File Executable Options" to launch windbg whenever vbc.exe is started. Run build after doing that and you will see it launched for at least VBSyntaxGenerator.

</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38341</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove System.Runtime.Loader hack</Title>
    <Description>Microsoft.CodeAnalysis.Scripting now targets NS2.0, so the custom package is no longer needed.
Should fix a composition error in VSMac, due to the fact that we don't ship the dll from this nuget</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38339</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable warnings for default(T) but not default</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
```C#
#nullable enable
using System.Diagnostics.CodeAnalysis;

class Program
{
    static void Main() { }
}

class C&lt;T&gt;
{
    [AllowNull]
    internal T _f1 = default(T);
    [AllowNull]
    internal T _f2 = default;
}
```

**Expected Behavior**:
No warnings.

**Actual Behavior**:
Warning on the `default(T)`.
```
warning CS8653: A default expression introduces a null value when 'T' is a non-nullable reference type.
```

cc: @jcouv, @cston</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38338</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix test trait</Title>
    <Description>
    </Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38337</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190827.8
- **Date Produced**: 8/27/2019 7:27 PM
- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19427.8

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38336</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38335</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to release/dev16.3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-release/dev16.3-vs-deps
git reset --hard upstream/release/dev16.3-vs-deps
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38334</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38333</IssueID>
    <RepoID>1</RepoID>
    <Title>VS crash</Title>
    <Description>**Version Used**: 15.9.15 &amp; 16.2.3

**Steps to Reproduce**:

1. Open git history window
2. Click keyword textbox
3. Type :  `\` `Enter` `BackSpace`

**Actual Behavior**: VS crash.
</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38332</IssueID>
    <RepoID>1</RepoID>
    <Title>Calling this() from struct constructor removes nullable warnings</Title>
    <Description>**Version Used**: master

**Steps to Reproduce**:

Compile the following:

```csharp
#nullable enable
public struct C
{
    string _a;
    object _b;
    
    public C(string a) : this()
    {
        _a = a;
    }
    
    public C(object b) : this()
    {
        _b = b;
    }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAZgtgXwGMYKBhRgG9GFURSYBGAAwUA+hADcIsQHtgAKzg85wJQzEVlo1vwAUkmRACUFEBRgALAJZRTVoxWH6DY+RQC8FIoeAL4eHiZ8pmqa2sA2do4ubh5ePr7AARS6oYxhDEA==

I use this pattern to implement a form of discriminated unions, and so this pattern is not rare in my code base. I imagine I'm not the only one.

**Expected Behavior**:

warning CS8618: Non-nullable field '_b' is uninitialized. Consider declaring the field as nullable.
warning CS8618: Non-nullable field '_a' is uninitialized. Consider declaring the field as nullable.

**Actual Behavior**:

No warning
</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38331</IssueID>
    <RepoID>1</RepoID>
    <Title>[Nullable] Get asked to simplify cast needed to remove nullable warning</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

``` C#
#nullable enable

class Bar
{       
       protected override Task&lt;string?&gt; FindFileAsync(IProjectTreeProvider provider, IProjectTree root)
       {
               return Task.FromResult((string?)"");
                                       _______
       }
}

```
**Expected Behavior**:
No simplification

**Actual Behavior**:
Get prompted to simplify as indicated. If follow through with simplification, get a warning:

```
Warning	CS8619	Nullability of reference types in value of type 'Task&lt;string&gt;' doesn't match target type 'Task&lt;string?&gt;'.	Microsoft.VisualStudio.ProjectSystem.Managed	C:\project-system\src\Microsoft.VisualStudio.ProjectSystem.Managed\ProjectSystem\SpecialFileProviders\AbstractFindByNameSpecialFileProvider2.cs	26	Active
```

</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38330</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] ServiceHub.RoslynCodeAnalysisService32.exe is OOMing multiple times a day</Title>
    <Description>**Version Used**: 
Version 16.3.0 Preview 3.0 [29221.207.master]

This is a regresssion, either because we've opt'd into more analyzers when we moved over to .editorconfig enforcement of analyzer levels, or because we're running on newer builds of VS.

**Steps to Reproduce**:

1. `git clone http://github.com/dotnet/project-system`
2. `cd project-system`
3. `git checkout 369551a45088071ec37673d11cfca67658c5ba25`
4. `ProjectSystem.sln`
5. Work for a couple of hours.

This occurs 3 or 4 times a day, and I've also experienced it in other codebases. I had a look at the watsons and every time this crashes its getting into a unique bucket due to the random nature of what frame the OOM is being thrown.

[internalshare]\\public\davkean\Roslyn\38330.zip</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38329</IssueID>
    <RepoID>1</RepoID>
    <Title>MaybeNullWhenAttribute ignored on TryGetValue, CS8600 nullable reference warning emitted</Title>
    <Description>**Version Used**:  VS2019 16.3.0 Preview 2.0, with .NET Core 3.0.100-preview8-013656, targeting .NET Core 3.0

**Steps to Reproduce**:

1) Make a new project and use`&lt;Nullable&gt;enable&lt;/Nullable&gt;` with a netcoreapp3.0 console project.

2) Set the following code

```cs
using System;
using System.Collections.Generic;

namespace NullTest
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary&lt;int, Program&gt; dictionary = new Dictionary&lt;int, Program&gt;();

            // CS8600 warning here:       v
            if (dictionary.TryGetValue(5, out Program val))
                Console.WriteLine(val);
        }
    }
}
```

**Expected Behavior**: No warning.

**Actual Behavior**: Warning appears: _CS8600: Converting null literal or possible null value to non-nullable type_.

This was (supposedly recently) attributed with

```cs
public bool TryGetValue(TKey key, [MaybeNullWhen(false)] out TValue value);
```

but the attribute is not be respected in the example I posted. Or am I using some outdated version and need to update? I assume I'm on the bleeding edge releases but I can easily be wrong. I also use `&lt;LangVersion&gt;preview&lt;/LangVersion&gt;` for what its worth.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38328</IssueID>
    <RepoID>1</RepoID>
    <Title>Show error every time CallHierarchyView doesn't a find suitable node.</Title>
    <Description>The simplest &amp; quickest hot-fix for #38303

Should be expended with allowing way more locations instead.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38327</IssueID>
    <RepoID>1</RepoID>
    <Title>Duplicate attribute error for [NotNull] used in partial methods</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEBMBGAsAKBQBgAIUMA6AEQEsIBzAOwHtZKBjKUgYQYBM4BBOhAA2ATyiUoAbly4UAZkIAHCAhjUhxNIQ64A3rkKHiGAGxKVa4cQAshAGIMGACgRwAZsfwB+QlACU0jhGxmbKquo2hABCKi7unj7+gcEkoRYRKLYAWo5OANoAcgwwBQCuQkIAuoSuHiTevgG4AL6yCmGWGujaegZGqebhVpn2ubUJjYQAvAB8hDAAFggMAO6EdHBrRTAAkmCKQnBgcHTw3ACiAB4scIpqDHROTUH9poOdkTEI+dtlFdXjeqJPzTOaLZZrDZbYp7A5HE5nK43O6UB5PZKvNJDLrZXKFYp/Ko1eJAyazeZLVbrTaEbaww7HU5wC7XW73R7PVo4XCCY5QZQ3YwUaj0JhqNicHj8QSicRQXovQx5PgwGAISjAUrwACqUFocCcKrVGq1cAAKioaHAYOw7JQ4EJuIQkIQjerNfALQgrTbSAAFFQQY7wBDO12q92mr0+9h+5aKRAwERht0mz2W63sABK1tKCDoADVhKU4AAaQg7OgLRCUM7TQhuYRQOB+Sp9QzyXxwYTMzS0gnlISpj1wQggcPGkeEXSELnNIA===
```C#
using System;
using System.Diagnostics.CodeAnalysis;

class Program
{
    static void Main() { }
}

public partial class C
{
    static partial void Foo(ref string? s);
    static partial void Bar(ref string? s);
    static partial void Zoo([NotNull] ref string? s);
}
public partial class C
{
    static partial void Foo(ref string? s) =&gt; throw new NotImplementedException();
    static partial void Bar([NotNull] ref string? s) =&gt; throw new NotImplementedException();
    static partial void Zoo([NotNull] ref string? s) =&gt; throw new NotImplementedException();
}
```

**Expected Behavior**:
Compiles.

**Actual Behavior**:
Produces a `CS0579	Duplicate 'NotNull' attribute` error on the use of `[NotNull]` in the first C.Zoo partial. 

cc: @jcouv, @cston</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38326</IssueID>
    <RepoID>1</RepoID>
    <Title>Public API for `GetDocument(DocumentId)` that returns non-null Document</Title>
    <Description>We should add a public API to get `Document` from a `DocumentId` that returns a non-null `Document` or throw if not found.  This would help us avoid using null-forgiving operator (!) when enabling nullable ref.

e.g.

```cs
public Document GetRequiredDocument(DocumentId documentId);
```

We will probably also need an analyzer/codefix to flag usage of `GetDocument(id)!` in code with nullable-ref already enabled.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38325</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow is operators to update null state of value types</Title>
    <Description>Closes #38213 

I saw that VisitIsOperator requires the operand type to not be value type in order to update the flow-state to not-null. I don't see a reason why it should require this, so I just removed the check and added a few tests for @sharwell's scenario.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38324</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove IVTs to liveshare</Title>
    <Description>Tested locally with liveshare running.  Runs fine.
Liveshare build should not be affected as the older DLLs build with specific roslyn versions.

Closes #35074 </Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38323</IssueID>
    <RepoID>1</RepoID>
    <Title>LSP Server Handle DisplayTextPrefix and DisplayTextSuffix on Completion Items</Title>
    <Description>Currently the  LSP completion item label is being set equal to the Roslyn completion item's display text. This PR also includes the item's `DisplayTextPrefix` and `DisplayTextSuffix` on the label.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38322</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove withinTypeSyntax restriction for UseExplicit/ImplicitType refactoring.</Title>
    <Description>Lifts a restriction that selection/caret must intersect the typeSyntax for Use[Explicit/Implicit]Type refactoring. 

While it potentially introduces noise (addition refactorings) it shouldn't be much of an issue do to the way ordering works. Since the applicableToSpan is still the type, the distance to it should be sufficiently larger than to any other refactoring. 

If it proves to be problematic the ordering via applicableToSpan should be updated to create distance for refactorings that whose applicableToSpan doesn't intersect current selection/caret location.

Work for #35525</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38321</IssueID>
    <RepoID>1</RepoID>
    <Title>Delete IEditorClassificationService</Title>
    <Description>F# has now moved to it's own service which is supported so this can be deleted.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38320</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-infer unary and binary operators in NullableWalker</Title>
    <Description>See #29605.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>13/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38319</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable tests disabled due to changes in behavior in runtime.</Title>
    <Description>Fixes #32576. Fixes #33564.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38318</IssueID>
    <RepoID>1</RepoID>
    <Title>Report error for async-iterator with expression-body</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38201

Also adjusts the diagnostic reporting to avoid duplicates reported by `GetIteratorElementType`.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38317</IssueID>
    <RepoID>1</RepoID>
    <Title>null exception on HaveSameReturnTypes </Title>
    <Description>I only have callstack

```
StreamJsonRpc.RemoteInvocationException : Object reference not set to an instance of an object.
   at async StreamJsonRpc.JsonRpc.InvokeCoreAsync[TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx.InvokeAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
---&gt; (Remote Exception) {
  "type": "System.NullReferenceException",
  "message": "Object reference not set to an instance of an object.",
  "stack": "   at Microsoft.CodeAnalysis.CSharp.Symbols.MemberSignatureComparer.HaveSameReturnTypes(Symbol member1, TypeMap typeMap1, Symbol member2, TypeMap typeMap2, TypeCompareKind typeComparison)\r\n  
 at Microsoft.CodeAnalysis.CSharp.Symbols.MemberSignatureComparer.Equals(Symbol member1, Symbol member2)\r\n  
 at Microsoft.CodeAnalysis.CSharp.Symbols.OverriddenOrHiddenMembersHelpers.MakePropertyAccessorOverriddenOrHiddenMembers(MethodSymbol accessor, PropertySymbol associatedProperty)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.OverriddenOrHiddenMembersHelpers.MakeOverriddenOrHiddenMembersWorker(Symbol member)\r\n   
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.get_OverriddenOrHiddenMembers()\r\n   
at Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol.get_OverriddenMethod()\r\n  
 at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertyAccessorSymbol.MethodChecks(DiagnosticBag diagnostics)\r\n  
 at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.LazyMethodChecks()\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.get_OverriddenOrHiddenMembers()\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol.get_OverriddenMethod()\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertyAccessorSymbol..ctor(NamedTypeSymbol containingType, String name, SourcePropertySymbol property, DeclarationModifiers propertyModifiers, ImmutableArray`1 explicitInterfaceImplementations, Location location, ArrowExpressionClauseSyntax syntax, Boolean isExplicitInterfaceImplementation, DiagnosticBag diagnostics)\r\n   
at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertyAccessorSymbol.CreateAccessorSymbol(NamedTypeSymbol containingType, SourcePropertySymbol property, DeclarationModifiers propertyModifiers, String propertyName, ArrowExpressionClauseSyntax syntax, PropertySymbol explicitlyImplementedPropertyOpt, String aliasQualifierOpt, Boolean isExplicitInterfaceImplementation, DiagnosticBag diagnostics)\r\n   
at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertySymbol..ctor(SourceMemberContainerTypeSymbol containingType, Binder bodyBinder, BasePropertyDeclarationSyntax syntax, String name, Location location, DiagnosticBag diagnostics)\r\n   
at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertySymbol.Create(SourceMemberContainerTypeSymbol containingType, Binder bodyBinder, PropertyDeclarationSyntax syntax, DiagnosticBag diagnostics)\r\n   
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.AddNonTypeMembers(MembersAndInitializersBuilder builder, SyntaxList`1 members, DiagnosticBag diagnostics)\r\n 
  at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.AddDeclaredNontypeMembers(MembersAndInitializersBuilder builder, DiagnosticBag diagnostics)\r\n   
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.BuildMembersAndInitializers(DiagnosticBag diagnostics)\r\n   
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersAndInitializers()\r\n  
 at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.MakeAllMembers(DiagnosticBag diagnostics)\r\n   
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersByNameSlow()\r\n   
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersByName()\r\n  
 at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembers(String name)\r\n   
at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDeclaredMember(NamespaceOrTypeSymbol container, TextSpan declarationSpan, String name)\r\n  
 at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDeclaredMemberSymbol(CSharpSyntaxNode declarationSyntax)\r\n  
 at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDeclaredSymbol(MemberDeclarationSyntax declarationSyntax, CancellationToken cancellationToken)\r\n 
  at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.CreateMemberModel(CSharpSyntaxNode node)\r\n   at System.Collections.Immutable.ImmutableInterlocked.GetOrAdd[TKey,TValue](ImmutableDictionary`2&amp; location, TKey key, Func`2 valueFactory)\r\n  
 at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetOrAddModel(CSharpSyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetMemberModel(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetMemberModel(Int32 position)\r\n   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetEnclosingBinderInternal(Int32 position)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetEnclosingSymbol(Int32 position, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetEnclosingSymbolCore(Int32 position, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Shared.Extensions.SemanticModelExtensions.GetEnclosingSymbol[TSymbol](SemanticModel semanticModel, Int32 position, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FindSymbols.Finders.ConstructorInitializerSymbolReferenceFinder.&lt;&gt;c__DisplayClass2_0.&lt;FindReferencesInDocumentAsync&gt;g__tokensMatch|0(SyntaxToken t)\r\n   at Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractReferenceFinder.&lt;FindReferencesInTokensAsync&gt;d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.Finders.ConstructorInitializerSymbolReferenceFinder.&lt;FindReferencesInDocumentAsync&gt;d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessDocumentAsync&gt;d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessDocumentAsync&gt;d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessDocumentQueueAsync&gt;d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessDocumentQueueAsync&gt;d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessProjectAsync&gt;d__28.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessProjectAsync&gt;d__27.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessProjectAsync&gt;d__26.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessProjectsAsync&gt;d__25.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessAsync&gt;d__12.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;FindReferencesAsync&gt;d__11.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;FindReferencesAsync&gt;d__11.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindReferencesAsync&gt;d__31.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindReferencesAsync&gt;d__37.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.CodeLens.CodeLensReferencesService.&lt;FindAsync&gt;d__1`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Remote.CodeAnalysisService.&lt;&gt;c__DisplayClass3_0.&lt;&lt;GetReferenceCountAsync&gt;b__0&gt;d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Remote.ServiceBase.&lt;RunServiceAsync&gt;d__27`1.MoveNext()",
  "code": -2147467261,
  "inner": null
} &lt;--- 

```

happened while changing parameter type of one of method.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38316</IssueID>
    <RepoID>1</RepoID>
    <Title>Make Task&lt;T&gt; nullable covariant</Title>
    <Description>This is a possible solution for #36894. I think LDT needs to discuss before we consider taking this change.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38315</IssueID>
    <RepoID>1</RepoID>
    <Title>guard over duplicated project references in msbuildworkspace</Title>
    <Description>our VS layer has a proper safeguard on malformed project files such as duplicated p2p references.

it looks like MSBuildWorkspace doesn't have one. causing this kind of exception.

```
Unhandled exception: System.ArgumentException: An item with the same key has already been added.
   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)
   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;FinalizeCompilationAsync&gt;d__30.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;GetOrBuildCompilationInfoAsync&gt;d__22.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;GetCompilationSlowAsync&gt;d__19.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;GetMetadataReferenceAsync&gt;d__32.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;FinalizeCompilationAsync&gt;d__30.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;GetOrBuildCompilationInfoAsync&gt;d__22.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
```

looks like this line - http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Workspace/Solution/SolutionState.CompilationTracker.cs,643

we should either let CompilationTracker handle this situation or update MSbuildWorkspace to handle this case.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38314</IssueID>
    <RepoID>1</RepoID>
    <Title>Find-Refs filter-list includes lots of options unnecessarily.</Title>
    <Description>Here's an example of what i see when i bring up the filter list:

![image](https://user-images.githubusercontent.com/4564579/63801268-beb21d80-c8c4-11e9-802a-c45f40548701.png)

Note that in my case i just have 28 reads and 2 writes.  However, the list is filled with a bunch of other inapplicable cases, all with 0 count.  These should not be in the list.  Note: this is def a bug.  No where else do things work this way.  We always only see items for the values actually in the list.  For example, imagine if filtering on error code worked this way.  You'd have thousands of items in the list, almost all with `(0)` next to them.  Instead, the control works properly and you get:

![image](https://user-images.githubusercontent.com/4564579/63801363-f5883380-c8c4-11e9-93d5-90d51c4c5d8a.png)
</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38313</IssueID>
    <RepoID>1</RepoID>
    <Title>Use inferred nullability of discards</Title>
    <Description>This addresses simple discards (ie. discards in assignments). Fixes https://github.com/dotnet/roslyn/issues/35036

Discards in `out` variables work (`Discard_OutDiscard`).
There's an issue tracking deconstruction more generally, so discards in deconstructions aren't handled. Same for patterns.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38312</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler NuPkg MSBuild version check needs to be updated. </Title>
    <Description>Example: 

https://github.com/dotnet/roslyn/blob/master/src/NuGet/Microsoft.Net.Compilers/build/Microsoft.Net.Compilers.props#L18

The props file here, and for related packages, need to be labeling everything before 16.0 as unsupported. That includes 15.0 - 15.3. </Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38311</IssueID>
    <RepoID>1</RepoID>
    <Title>[Tests] These tests seem to check SyntaxToken inside of SyntaxNode</Title>
    <Description>See https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/CodeAnalysisTest/CommonSyntaxTests.cs#L181-201
Names `node`, `token` and `trivia` suggest that this test was intended to test `VisualBasicExtensions.Kind` methods for `SyntaxNode`, `SyntaxToken` and `SyntaxTrivia` of C#. In fact, both first and second invocation test the same method `Kind(this SyntaxToken token)`, because `node` is actually a `SyntaxToken`.
The same applies to `VisualBasicSyntax_CSharpKind` test as well.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38310</IssueID>
    <RepoID>1</RepoID>
    <Title>Show content and select full row in bookmark window.</Title>
    <Description>Now, bookmark window only show file path, it's better to show content preview.
And I think should highlight full row rather than only the first column.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38309</IssueID>
    <RepoID>1</RepoID>
    <Title>FailFast in SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator</Title>
    <Description>**Version Used**:

.NET Core SDK 2.2.401

**Steps to Reproduce**:

None as of yet; affected project is rather large and no source information is available in the error message.

**Expected Behavior**:

Project builds (it does under 2.2.108).

**Actual Behavior**:

```
Microsoft (R) Build Engine version 16.2.32702+c4012a063 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 28,76 ms for &lt;path-to-project&gt;.csproj.
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : FailFast: [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : System.InvalidOperationException: This program location is thought to be unreachable. [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(BoundUserDefinedConditionalLogicalOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(BoundReturnStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(BoundConversion node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder&amp; builder, ImmutableArray`1 args, ImmutableArray`1 refKinds, Boolean forceSpill, Boolean sideEffectsOnly) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(BoundCall node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(BoundAssignmentOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(BoundExpressionStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(BoundStatement body, MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, Boolean instrumentForDynamicAnalysis, ImmutableArray`1&amp; dynamicAnalysisSpans, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawLocalFunctions, Boolean&amp; sawAwaitInExceptionHandler) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :  [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Environment.FailFast(System.String, System.Exception) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.BoundReturnStatement) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(Microsoft.CodeAnalysis.CSharp.BoundLambda) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(Microsoft.CodeAnalysis.CSharp.BoundLambda) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(Microsoft.CodeAnalysis.CSharp.BoundConversion) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder ByRef, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.RefKind&gt;, Boolean, Boolean) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.DiagnosticBag, Boolean ByRef, Boolean ByRef, Boolean ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Boolean, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator ByRef, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.ThreadPoolWorkQueue.Dispatch() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :  [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : Exception details: [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : System.InvalidOperationException: This program location is thought to be unreachable. [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(BoundUserDefinedConditionalLogicalOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(BoundReturnStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(BoundConversion node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder&amp; builder, ImmutableArray`1 args, ImmutableArray`1 refKinds, Boolean forceSpill, Boolean sideEffectsOnly) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(BoundCall node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(BoundAssignmentOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(BoundExpressionStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(BoundStatement body, MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, Boolean instrumentForDynamicAnalysis, ImmutableArray`1&amp; dynamicAnalysisSpans, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawLocalFunctions, Boolean&amp; sawAwaitInExceptionHandler) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]

Build FAILED.
```
</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38308</IssueID>
    <RepoID>1</RepoID>
    <Title>Poor error message when calling a member of a newly constructed object in VB</Title>
    <Description>**Version Used**: master
**Steps to Reproduce**:

compile the following code:

```vb
Public Module Program
    Public Sub Main()
        New string("").Clone()
    End Sub
End Module
```

**Expected Behavior**:

A useful error message, explaining that you need to use `Call New string("").Clone()`

**Actual Behavior**:

&gt; error BC30035: Syntax error.
</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38307</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190826.12
- **Date Produced**: 8/26/2019 10:46 PM
- **Commit**: 36ce21e795e2e90081300f4cb645dfd8cf6eb2b3
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19426.12

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)



</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38306</IssueID>
    <RepoID>1</RepoID>
    <Title>Inefficient code is generated when GetValueOrDefault is called on a conditional access in a short-circuiting operator</Title>
    <Description>Compile the following code:
```
Option Strict On

Class C

    Public shared Sub Main()
	Test2(Nothing, new C())
    End Sub

    Public Shared Sub Test2(x as C, y As C)
        System.Console.WriteLine("-&gt;Test2")
	If (x?.GetBool1()).GetValueOrDefault() AndAlso y.GetBool2()
            System.Console.WriteLine("In If")
	End If
        System.Console.WriteLine("&lt;-Test2")
    End Sub

    Function GetBool1() As Boolean
        Return True
    End Function
    Function GetBool2() As Boolean
        System.Console.WriteLine("GetBool2")
        Return True
    End Function
End Class
```

Examine IL in the Test2 method:
```
.method public static void  Test2(class C x,
                                  class C y) cil managed
{
  // Code size       85 (0x55)
  .maxstack  1
  .locals init (bool V_0,
           valuetype [mscorlib]System.Nullable`1&lt;bool&gt; V_1)
  IL_0000:  nop
  IL_0001:  ldstr      "-&gt;Test2"
  IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
  IL_000b:  nop
  IL_000c:  ldarg.0
  IL_000d:  brtrue.s   IL_001a
  IL_000f:  ldloca.s   V_1
  IL_0011:  initobj    valuetype [mscorlib]System.Nullable`1&lt;bool&gt;
  IL_0017:  ldloc.1
  IL_0018:  br.s       IL_0025
  IL_001a:  ldarg.0
  IL_001b:  call       instance bool C::GetBool1()
  IL_0020:  newobj     instance void valuetype [mscorlib]System.Nullable`1&lt;bool&gt;::.ctor(!0)
  IL_0025:  stloc.1
  IL_0026:  ldloca.s   V_1
  IL_0028:  call       instance !0 valuetype [mscorlib]System.Nullable`1&lt;bool&gt;::GetValueOrDefault()
  IL_002d:  brfalse.s  IL_0037
  IL_002f:  ldarg.1
  IL_0030:  callvirt   instance bool C::GetBool2()
  IL_0035:  br.s       IL_0038
  IL_0037:  ldc.i4.0
  IL_0038:  stloc.0
  IL_0039:  ldloc.0
  IL_003a:  brfalse.s  IL_0048
  IL_003c:  ldstr      "In If"
  IL_0041:  call       void [mscorlib]System.Console::WriteLine(string)
  IL_0046:  nop
  IL_0047:  nop
  IL_0048:  nop
  IL_0049:  ldstr      "&lt;-Test2"
  IL_004e:  call       void [mscorlib]System.Console::WriteLine(string)
  IL_0053:  nop
  IL_0054:  ret
} // end of method C::Test2
```

Observed: Instances of Nullable type are created and GetValueOrDefault method is actually called.

Expected: The generated code could be much simpler, eliminating any use of Nullable type:
```
  .locals init (bool V_0)
  IL_0000:  nop
  IL_0001:  ldstr      "-&gt;Test2"
  IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
  IL_000b:  nop
  IL_000c:  ldarg.0
  IL_000d:  brfalse.s   IL_0048
  IL_001a:  ldarg.0
  IL_001b:  call       instance bool C::GetBool1()
  IL_002d:  brfalse.s  IL_0048
  IL_002f:  ldarg.1
  IL_0030:  callvirt   instance bool C::GetBool2()
  IL_003a:  brfalse.s  IL_0048
  IL_003c:  ldstr      "In If"
  IL_0041:  call       void [mscorlib]System.Console::WriteLine(string)
  IL_0046:  nop
  IL_0047:  nop
  IL_0048:  nop
  IL_0049:  ldstr      "&lt;-Test2"
  IL_004e:  call       void [mscorlib]System.Console::WriteLine(string)
  IL_0053:  nop
  IL_0054:  ret
```</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38305</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect code is generated when nullable value is compared to a not nullable in context of a logical short-circuiting operator used as a Boolean expression</Title>
    <Description>Compile and run the following code:
```
Option Strict On

Class C

    Public shared Sub Main()
	Test1(Nothing, new C())
	Test2(Nothing, new C())
	Test3(Nothing, new C())
	Test4(Nothing, new C())
	Test5(Nothing, new C())
    End Sub

    Public Shared Sub Test1(x as C, y As C)
        System.Console.WriteLine("-&gt;Test1")
	If GetBool3(x) = True AndAlso y.GetBool2()
            System.Console.WriteLine("In If")
	End If
        System.Console.WriteLine("&lt;-Test1")
    End Sub

    Public Shared Sub Test2(x as C, y As C)
        System.Console.WriteLine("-&gt;Test2")
	If x?.GetBool1() = True AndAlso y.GetBool2()
            System.Console.WriteLine("In If")
	End If
        System.Console.WriteLine("&lt;-Test2")
    End Sub

    Public Shared Sub Test3(x as C, y As C)
        System.Console.WriteLine("-&gt;Test3")
	Dim z = GetBool3(x) = True AndAlso y.GetBool2()
	If z
            System.Console.WriteLine("In If")
	End If
        System.Console.WriteLine("&lt;-Test3")
    End Sub

    Public Shared Sub Test4(x as C, y As C)
        System.Console.WriteLine("-&gt;Test4")
	Dim z = x?.GetBool1() = True AndAlso y.GetBool2()
	If z
            System.Console.WriteLine("In If")
	End If
        System.Console.WriteLine("&lt;-Test4")
    End Sub

    Public Shared Sub Test5(x as C, y As C)
        System.Console.WriteLine("-&gt;Test5")
	If GetBool3(x) AndAlso y.GetBool2()
            System.Console.WriteLine("In If")
	End If
        System.Console.WriteLine("&lt;-Test5")
    End Sub

    Function GetBool1() As Boolean
        Return True
    End Function
    Function GetBool2() As Boolean
        System.Console.WriteLine("GetBool2")
        Return True
    End Function
    Shared Function GetBool3(x as C) As Boolean?
	if x Is Nothing
             Return Nothing
	End If

        Return True
    End Function
End Class
```

Observed:
```
-&gt;Test1
&lt;-Test1
-&gt;Test2
&lt;-Test2
-&gt;Test3
GetBool2
&lt;-Test3
-&gt;Test4
GetBool2
&lt;-Test4
-&gt;Test5
GetBool2
&lt;-Test5
```

Expected: Proper handling of Null propagation for short circuiting operator. I.e. all test methods should execute GetBool2 method for the provided set of arguments. As it happens for Test3 and Test4, which calculate result of a Boolean expression into a local rather than inlining it into an If. And as it happens for Test5, which doesn't have comparison in the Boolean expression.
```
-&gt;Test1
GetBool2
&lt;-Test1
-&gt;Test2
GetBool2
&lt;-Test2
-&gt;Test3
GetBool2
&lt;-Test3
-&gt;Test4
GetBool2
&lt;-Test4
-&gt;Test5
GetBool2
&lt;-Test5
```</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38304</IssueID>
    <RepoID>1</RepoID>
    <Title>Namespace is incorrectly marked as unused in a VB project</Title>
    <Description>**Version Used**: 
Version 16.3.0 Preview 3.0 [29221.207.master]

**Steps to Reproduce**:

I tried to break this down to a small repro and failed.

1. `git clone http://github.com/dotnet/project-system`
2. `cd project-system`
3. `git checkout 0f64eeddeee286f73fabe7d68827b7adfa328d71`
4. `ProjectSystem.sln`
5. Open `src\Microsoft.VisualStudio.Editors\PropPages\CodeAnalysisPropPage.vb`

**Expected Behavior**:
No error or greying out of `Import System.Diagnostics`

**Actual Behavior**:
Greying out of `System.Diagnostics` and if you comment it out:

```
Severity	Code	Description	Project	File	Line	Suppression State
Error	BC30456	'Assert' is not a member of 'Microsoft.VisualStudio.ProjectSystem.Debug'.	Microsoft.VisualStudio.Editors	C:\project-system\src\Microsoft.VisualStudio.Editors\PropPages\CodeAnalysisPropPage.vb	147	Active
Error	BC30456	'Assert' is not a member of 'Microsoft.VisualStudio.ProjectSystem.Debug'.	Microsoft.VisualStudio.Editors	C:\project-system\src\Microsoft.VisualStudio.Editors\PropPages\CodeAnalysisPropPage.vb	163	Active
Error	BC30456	'Assert' is not a member of 'Microsoft.VisualStudio.ProjectSystem.Debug'.	Microsoft.VisualStudio.Editors	C:\project-system\src\Microsoft.VisualStudio.Editors\PropPages\CodeAnalysisPropPage.vb	164	Active
Error	BC30456	'Assert' is not a member of 'Microsoft.VisualStudio.ProjectSystem.Debug'.	Microsoft.VisualStudio.Editors	C:\project-system\src\Microsoft.VisualStudio.Editors\PropPages\CodeAnalysisPropPage.vb	180	Active

```

If you remove the `Imports Microsoft.VisualStudio.ProjectSystem` import from lower in the imports, then the build errors goes away.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38303</IssueID>
    <RepoID>1</RepoID>
    <Title>"View call hierarchy" silently fails for a lot of (valid) caret locations</Title>
    <Description>**Version Used**: 
Current master. 

**Steps to Reproduce**:
```csharp
using System;

namespace ConsoleApp5
{
    class Program
    {
        sta[||]tic Pr$$ogram Main(Prog$$ram asdf)
        {
            return null;
        }

        sta[||]tic v[||]oid Main2(in$$t asdf)
        {

        }
    }
}

```

**Expected Behavior**:
Either all locations above will trigger "Cursor must be on member name" error or none of them does (preferable). 

Ideally the service uses `RefactoringHelper` [helpers](http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/CodeRefactorings/IRefactoringHelpersService.cs,0a897af4d97aaa71) to handle all logical caret positions. 

**Actual Behavior**:
`$$` locations silently fail while `[||]' produces "Cursor must be on member name" modal error window.

**Solution**:
- [x] Introduce simple fix to properly error out whenever nothing is shown
- [ ] Enable the service for all unambiguous locations (i.e. anywhere in the declaration) 
</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38302</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip failing integration tests</Title>
    <Description>Step 1 of https://github.com/dotnet/roslyn/issues/38301</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38301</IssueID>
    <RepoID>1</RepoID>
    <Title>Investigate Integration Test Failures</Title>
    <Description>5 integration tests are failing regularly in master and master-vs-deps PRs

```
CSharpUpgradeProject.CPSProject_GeneralPropertyGroupUpdated - System.InvalidOperationException : Expected a light bulb session to appear.
MSBuildWorkspaceTests.TestParseOptions_CSharp_LanguageVersion_Default - Assert.Equal() Failure\r\nExpected: CSharp8\r\nActual: CSharp7_3
```

The text "To browse the .NET Framework source code" is no longer part of the quick info text for System.String:
```
BasicQuickInfo.QuickInfo1 - Assert.Equal() Failure\r\n ↓ (pos 72)\r\nExpected: ···f UTF-16 code units.To browse the .NET Framework source code ···\r\nActual: ···f UTF-16 code units.\r\n ↑ (pos 72)
CSharpQuickInfo.QuickInfo_MetadataDocumentation - Assert.Equal() Failure\r\n ↓ (pos 72)\r\nExpected: ···f UTF-16 code units.To browse the .NET Framework source code ···\r\nActual: ···f UTF-16 code units.\r\n ↑ (pos 72)
```

For Async completion
```
BasicIntelliSense.IntelliSenseTriggersOnParenWithBraceCompletionAndCorrectUndoMerging - System.AggregateException : One or more errors occurred.\r\n---- System.InvalidOperationException : Expected exactly one session in the completion list, but found 0
```

- [ ] Skip the affected tests
- [ ] Update the tests to passing
- [ ] Unskip the tests</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38300</IssueID>
    <RepoID>1</RepoID>
    <Title>FindMostSpecificImplementation shouldn't swallow useSiteDiagnostics</Title>
    <Description>Fixes #35851.</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38299</IssueID>
    <RepoID>1</RepoID>
    <Title>Internal Compiler error</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Community 2019
Version 16.2.1
VisualStudio.16.Release/16.2.1+29201.188
Microsoft .NET Framework
Version 4.7.03062

Installierte Version: Community

ADL Tools Service Provider   1.0
This package contains services used by Data Lake tools

Allgemeine Azure-Tools   1.10
Bietet allgemeine Dienste für die Verwendung durch Azure Mobile Services und Microsoft Azure-Tools.

Application Insights-Tools für Visual Studio-Paket   9.1.00611.1
Application Insights-Tools für Visual Studio

ASP.NET and Web Tools 2019   16.2.290.48383
ASP.NET and Web Tools 2019

ASP.NET Web Frameworks and Tools 2019   16.2.290.48383
Weitere Informationen finden Sie unter https://www.asp.net/.

Azure App Service-Tools v3.0.0   16.2.290.48383
Azure App Service-Tools v3.0.0

Azure Data Lake Node   1.0
This package contains the Data Lake integration nodes for Server Explorer.

Azure Data Lake Tools for Visual Studio   2.3.9000.0
Microsoft Azure Data Lake Tools for Visual Studio

Azure Functions and Web Jobs Tools   16.2.290.48383
Azure Functions and Web Jobs Tools

Azure Stream Analytics Tools for Visual Studio   2.3.9000.0
Microsoft Azure Stream Analytics Tools for Visual Studio

C#-Tools   3.2.0-beta4-19359-03+15b43b33901c88f68ef43f8314b5a2457716780d
C#-Komponenten, die in der IDE verwendet werden. Abhängig von Ihrem Projekttyp und den zugehörigen Einstellungen kann eine andere Version des Compilers verwendet werden.

Fabric.DiagnosticEvents   1.0
Fabric-Diagnoseereignisse

IntelliCode-Erweiterung   1.0
Detaillierte Informationen zur IntelliCode Visual Studio-Erweiterung

JetBrains ReSharper Ultimate 2019.1.3   Build 191.0.20190704.212735
JetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright © 2019 JetBrains, Inc.

Microsoft Azure-Tools   2.9
Microsoft Azure-Tools für Microsoft Visual Studio 0x10 – v2.9.20626.2

Microsoft Azure HDInsight Azure Node   2.3.9000.0
HDInsight Node under Azure Node

Microsoft Azure Hive Query Language Service   2.3.9000.0
Language service for Hive query

Microsoft Azure Service Fabric-Tools für Visual Studio   2.5
Microsoft Azure Service Fabric-Tools für Visual Studio

Microsoft Azure Stream Analytics Language Service   2.3.9000.0
Language service for Azure Stream Analytics

Microsoft Azure Stream Analytics Node   1.0
Azure Stream Analytics Node under Azure Node

Microsoft Continuous Delivery Tools für Visual Studio   0.4
Die Konfiguration von Azure DevOps-Pipelines von der Visual Studio-IDE aus wird vereinfacht.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual Studio-Tools für Container   1.1
Jetzt können Sie Ihre ASP.NET Core-Anwendung in der Zielumgebung entwickeln, ausführen und überprüfen. Drücken Sie F5, um die Anwendung direkt in einem Container mit Debugfunktionen auszuführen, oder STRG+F5 zum Bearbeiten und Aktualisieren Ihrer Anwendung, ohne den Container erneut erstellen zu müssen.

NuGet-Paket-Manager   5.2.0
NuGet-Paket-Manager in Visual Studio. Weitere Informationen zu NuGet finden Sie unter https://docs.nuget.org/.

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage-Erweiterung   1.0
Detaillierte Informationen zur ResourcePackage-Erweiterung von Visual Studio

ResourcePackage-Erweiterung   1.0
Detaillierte Informationen zur ResourcePackage-Erweiterung von Visual Studio

SQL Server Data Tools   16.0.61906.28070
Microsoft SQL Server Data Tools

Syntax Visualizer   1.0
An extension for visualizing Roslyn SyntaxTrees.

ToolWindowHostedEditor   1.0
Hosting json editor into a tool window

TypeScript-Tools   16.0.10627.2001
TypeScript-Tools für Microsoft Visual Studio

Visual Basic-Tools   3.2.0-beta4-19359-03+15b43b33901c88f68ef43f8314b5a2457716780d
Visual Basic-Komponenten, die in der IDE verwendet werden. Abhängig von Ihrem Projekttyp und den zugehörigen Einstellungen kann eine andere Version des Compilers verwendet werden.

Visual F# Tools 10.4 für F# 4.6   16.2.0-beta.19321.1+a24d94ecf97d0d69d4fbe6b8b10cd1f97737fff4
Microsoft Visual F# Tools 10.4 für f# 4.6

Visual Studio-Tools für Container   1.0
Visual Studio-Tools für Container

Visual Studio-Tools für Kubernetes   1.0
Visual Studio-Tools für Kubernetes

Visual Studio Code-Debugadapter-Hostpaket   1.0
Interopebene zum Hosten der Visual Studio Code-Adapter in Visual Studio

**Steps to Reproduce**:

1. Clone [this](https://github.com/taori/Sandbox.git) repository, commit https://github.com/taori/Sandbox/commit/2ca1d597b62250f6a096bdaa8d8ad03d90efdcd8
2. Build whole solution
2. Set debug breakpoint as seen in screenshot
3. Start debugging, wait for breakpoint, then hit F10

![grafik](https://user-images.githubusercontent.com/5545184/63725564-056b2d80-c85b-11e9-823f-e05a63d58c53.png)

The code looks a little different with this commit, but the issue still happens.



</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38298</IssueID>
    <RepoID>1</RepoID>
    <Title>Add comment to document the use of the variables in the signed build yml</Title>
    <Description>as suggested https://github.com/dotnet/roslyn/pull/38259#discussion_r317804589</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38297</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense ignore case sensitivity in case of enums and prefers wrong items</Title>
    <Description>```
        void M(SampleEnumsampleEnum)
        {
            
            N($$
        }

        void N(SampleEnumsampleEnum) { }
        enum SampleEnum
        {
            One,
            Two
        }
```

Type `s`.

**Expected**
The selected item is `sampleEnum`.

**Actual**
The selected item is `SampleEnum`.

Please note it works fine with classes (`SampleClass `is available but not default). The issue happens with enums.</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38296</IssueID>
    <RepoID>1</RepoID>
    <Title>A bunch of files in the Roslyn folder are mistakenly queued for ngen</Title>
    <Description>The Roslyn bits included in 4.8 SDK installed from the VS 16.3 Preview Build Tools are causing several files to be queued for ngen that are not valid files to be ngen'd.

**Steps to Reproduce**:

1. Run the following steps on a Windows machine with Docker for Windows installed, targeting Windows containers.
2. Create a new folder on the desktop.
3. Download https://download.visualstudio.microsoft.com/download/pr/6bd8729b-a836-4721-8988-6b9b23649a10/fc200a5e2b37cf4052a63f0b7b66fd1b/vs_buildtools.exe to the new folder.  This URL is what https://aka.ms/vs/16/pre/vs_buildtools.exe is pointing to at the time of creating this issue.
4. Create a file named "Dockerfile" in the same folder with the following contents:
```
# escape=`

FROM mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-ltsc2019

COPY vs_buildtools.exe .

RUN start /w vs_BuildTools.exe ^ `
    --add Microsoft.Net.Component.4.8.SDK ^ `
    --quiet --norestart --nocache --wait

RUN \Windows\Microsoft.NET\Framework\v4.0.30319\ngen update
```
5. From command line, change the directory to the new folder that you created.  Run the following command: `docker build .`

**Expected Behavior**:
The `docker` command should succeed.

**Actual Behavior**:
The `docker` command fails due to the `ngen` call in the Dockerfile.  Ngen fails due to 2 sets of errors:
1. `X is not a valid Win32 application. (Exception from HRESULT: 0x800700C1)`.  Caused by the following files:
```
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\csc.exe.config
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\csc.rsp
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\csi.exe.config
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\csi.rsp
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\Microsoft.Managed.Core.targets
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\Microsoft.Managed.EditorConfig.targets
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\Microsoft.VisualBasic.Core.targets
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\vbc.exe.config
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\vbc.rsp
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\VBCSCompiler.exe.config
```

2. `The module was expected to contain an assembly manifest. (Exception from HRESULT: 0x80131018)`.  Caused by the following files:

```
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\Microsoft.DiaSymReader.Native.amd64.dll
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\Microsoft.DiaSymReader.Native.x86.dll
```

Full ngen log file is attached: [log.txt](https://github.com/dotnet/roslyn/files/3542580/log.txt)

This is related to #30341 but that issue may be fixed now because I don't see any cases of .pkgdef files causing ngen errors.</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38293</IssueID>
    <RepoID>1</RepoID>
    <Title>Code completion suggests class name instead of local</Title>
    <Description>**Version Used**: VS 16.2

**Steps to Reproduce**:

```C#
class MyClass
{
}

class Program
{
    static void Main(string[] args)
    {
        MyClass myClass = null;
        // Move the caret to the end of the line, press Ctrl+Space or just type 'myc'.
        // Code completion suggests MyClass but it should be myClass because
        // there's a local called myClass and it's more likely to be used than MyClass.
        // args should also have higher priority than class names.
        myc
    }
}
```

**Expected Behavior**:

`myClass` should be selected in the completion list box.

**Actual Behavior**:

`MyClass` is selected in the completion list box.</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38291</IssueID>
    <RepoID>1</RepoID>
    <Title>C# 8 Nullable dataflow doesn't handle ^ xor operator correctly</Title>
    <Description>**Version Used**: VS 16.4.0 Preview 1 (29224.8.master)

**Steps to Reproduce**:

With a .NET Core SDK Preview 8 toolset, with LangVersion=8 and Nullable=warnings, define the following method:

```cs
public bool Equals(AssemblyName x, AssemblyName y)
{
    if (x == null ^ y == null)
    {
        return false;
    }

    if (x == null)
    {
        return true;
    }

    return y.Flags == AssemblyNameFlags.None; // y dereference produces warning
}
```

**Expected Behavior**:

No null ref warnings.

**Actual Behavior**:

The `y.Flags` expression gets a warning on dereferencing `y`. Yet it's impossible for `y` to be null at this point because `x != null` (or it would have returned, and therefore if `y == null` that would have evaluated true for the xor expression at the top of the method and returned.</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38290</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid posibility of a race around SynthesizedMethodBaseSymbol._iteratorElementType field in the future.</Title>
    <Description>Fixes #38285.</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38289</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion window doesn't appear after commiting compiler directives</Title>
    <Description>**Version Used**: 
Version 16.3.0 Preview 3.0 [29221.207.master]

**Steps to Reproduce**:

See: ![Nullable](https://user-images.githubusercontent.com/1103906/63662642-9661ea80-c802-11e9-9667-a954fd44ad15.gif)

**Expected Behavior**:
![image](https://user-images.githubusercontent.com/1103906/63662663-a7126080-c802-11e9-9849-fc00a6e618ff.png)

**Actual Behavior**:
Need to manually invoke completion window.
</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38288</IssueID>
    <RepoID>1</RepoID>
    <Title>VB: Report access to members of an interface that are not supported by runtime.</Title>
    <Description>Fixes #35834. Fixes #35885.
Also addresses some scenarios related to #35824.</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38287</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0044 is incorrectly suggested for pointer fields used with address-of operator</Title>
    <Description>**Version Used**: 

Visual Studio Community 2019 Preview 16.3.0 Preview 2.0

**Steps to Reproduce**:

Visual Studio incorrectly suggests making the following field `readonly`. Fields used with the address-of operator should presumably not be made `readonly`.
```
public unsafe class Brushes
{
    private readonly DisposableCollection _disposables = new DisposableCollection();
    private ID2D1SolidColorBrush* _opaqueWhite;

    public ID2D1SolidColorBrush* OpaqueWhite =&gt; _opaqueWhite;

    public void ReleaseDeviceResources()
    {
        _disposables.RemoveAllDisposables();
    }

    public void InitializeDeviceResources(ID2D1RenderTarget* renderTarget)
    {
        ReleaseDeviceResources();

        fixed (ID2D1SolidColorBrush** opaqueWhite = &amp;_opaqueWhite)
        {
            var opaqueWhiteColor = new DXGI_RGBA { r = 1, g = 1, b = 1, a = 1 };

            renderTarget-&gt;CreateSolidColorBrush(&amp;opaqueWhiteColor, null, opaqueWhite);

            _disposables.AddDisposables(
                new DisposableIUnknown((IUnknown*)_opaqueWhite));
        }
    }
}
```

**Expected Behavior**:

IDE0044 is never suggested.

**Actual Behavior**:

IDE0044 is incorrectly suggested.

See related issue #38286.</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38286</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0032 is incorrectly suggested for pointer fields used with address-of operator</Title>
    <Description>**Version Used**: 

Visual Studio Community 2019 Preview 16.3.0 Preview 2.0

**Steps to Reproduce**:

Visual Studio incorrectly suggests to convert the following field into an auto property. Fields used with the address-of operator cannot be converted to auto-properties because the address-of operator doesn't work with properties.
```
public unsafe class Brushes
{
    private ID2D1SolidColorBrush* _opaqueWhite;

    public ID2D1SolidColorBrush* OpaqueWhite =&gt; _opaqueWhite;

    public void InitializeDeviceResources(ID2D1RenderTarget* renderTarget)
    {
        fixed (ID2D1SolidColorBrush** opaqueWhite = &amp;_opaqueWhite)
        {
            var opaqueWhiteColor = new DXGI_RGBA { r = 1, g = 1, b = 1, a = 1 };

            renderTarget-&gt;CreateSolidColorBrush(&amp;opaqueWhiteColor, null, opaqueWhite);
        }
    }
}
```

**Expected Behavior**:

`IDE0032` is never suggested.

**Actual Behavior**:

`IDE0032` is incorrectly suggested.

See related issue #38287.</Description>
    <CreatedDate>26/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38285</IssueID>
    <RepoID>1</RepoID>
    <Title>Design around SynthesizedMethodBaseSymbol._iteratorElementType field can lead to a race around initialization of TypeWithAnnotations structure and IsDefault check if the code becomes a subject to multi-threading</Title>
    <Description>```
        internal override TypeWithAnnotations IteratorElementTypeWithAnnotations
        {
            get
            {
                if (_iteratorElementType.IsDefault)
                {
                    _iteratorElementType = TypeMap.SubstituteType(BaseMethod.IteratorElementTypeWithAnnotations.Type);
                }
                return _iteratorElementType;
            }
            set
            {
                Debug.Assert(!value.IsDefault);
                _iteratorElementType = value;
            }
        }
```

At the moment instances of SynthesizedMethodBaseSymbol class are used after lowering and are not subject to multi-threading. </Description>
    <CreatedDate>25/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38284</IssueID>
    <RepoID>1</RepoID>
    <Title>Problem with Microsoft Agents stuff</Title>
    <Description>**Version Used**: Latest for VS 2017

**Steps to Reproduce**:

1. Follow this tutorial till 9:23 https://www.youtube.com/watch?v=QtBHRS4629Y
2. You see that you can't build it.
3. Some error that does not appear on the video.

**Expected Behavior**:
Being able to build and open the game right.
**Actual Behavior**:
Gives an error and does not let me debug.</Description>
    <CreatedDate>25/08/2019</CreatedDate>
    <ClosedDate>25/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38283</IssueID>
    <RepoID>1</RepoID>
    <Title>Show indexer's quickinfo when hovering over either of brackets</Title>
    <Description>
    </Description>
    <CreatedDate>25/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38282</IssueID>
    <RepoID>1</RepoID>
    <Title>Please consider splitting the parser to multiple files</Title>
    <Description>The LanguageParser file has grown to over 10k lines now which makes certain tasks harder than it should be (e.g. merging long standing branches, merely finding a portion of code or following the code for parsing of a particular syntax.)

I suggest we split the class and move related parts to their own files just like what we have for the Binder.


</Description>
    <CreatedDate>25/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38281</IssueID>
    <RepoID>1</RepoID>
    <Title>IndexOutOfRangeException when compiling type with 40 000 type constraints</Title>
    <Description>**Version Used**: .Net Core SDK 3.0.100-preview8-013656

**Steps to Reproduce**:

1. Create a new project with the following code:

    ```c#
    using System.IO;

    class Program
    {
        static void Main()
        {
            int n = 40_000;

            using (var file = new StreamWriter("C.cs"))
            {
                file.WriteLine("using System.Collections.Generic;");

                file.Write("class C&lt;");
                for (int i = 1; i &lt; n; i++)
                    file.Write($"T{i}, ");
                file.Write($"T{n}");
                file.WriteLine("&gt;");

                for (int i = 2; i &lt;= n; i++)
                    file.WriteLine($"  where T{i} : List&lt;T{i-1}&gt;");
                    
                file.WriteLine("{ }");
            }
        }
    }
    ```
2. `dotnet run` to generate C.cs.
3. `dotnet build` to compile C.cs.

**Expected Behavior**:

C.cs compiles.

**Actual Behavior**:

```
Unhandled exception. System.AggregateException: One or more errors occurred. (Index was outside the bounds of the array.)
 ---&gt; System.IndexOutOfRangeException: Index was outside the bounds of the array.
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeParameterConstraintClause.&lt;AdjustConstraintTypes&gt;g__isValueType|8_0(TypeParameterSymbol thisTypeParameter, ArrayBuilder`1 constraintClauses, Dictionary`2 isValueTypeOverrideBuilder, ConsList`1 inProgress)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeParameterConstraintClause.AdjustConstraintTypes(Symbol container, ImmutableArray`1 typeParameters, ArrayBuilder`1 constraintClauses, IReadOnlyDictionary`2&amp; isValueTypeOverride)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindTypeParameterConstraintClauses(Symbol containingSymbol, ImmutableArray`1 typeParameters, TypeParameterListSyntax typeParameterList, SyntaxList`1 clauses, IReadOnlyDictionary`2&amp; isValueTypeOverride, DiagnosticBag diagnostics, Boolean isForOverride)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.MakeTypeParameterConstraints(DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.GetTypeParameterConstraintClause(Int32 ordinal)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceTypeParameterSymbol.ResolveBounds(ConsList`1 inProgress, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceTypeParameterSymbolBase.GetBounds(ConsList`1 inProgress)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceTypeParameterSymbolBase.GetConstraintTypes(ConsList`1 inProgress)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeParameterSymbol.EnsureAllConstraintsAreResolved(ImmutableArray`1 typeParameters)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceTypeParameterSymbolBase.EnsureAllConstraintsAreResolved()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceTypeParameterSymbolBase.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.&lt;&gt;c__DisplayClass49_1.&lt;ForceComplete&gt;b__0(Int32 i)
   at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param)
   at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass19_0`1.&lt;ForWorker&gt;b__1(RangeWorker&amp; currentWorker, Int32 timeout, Boolean&amp; replicationDelegateYieldedBeforeCompletion)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(Exception source)
   at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass19_0`1.&lt;ForWorker&gt;b__1(RangeWorker&amp; currentWorker, Int32 timeout, Boolean&amp; replicationDelegateYieldedBeforeCompletion)
   at System.Threading.Tasks.TaskReplicator.Replica`1.ExecuteAction(Boolean&amp; yieldedBeforeCompletion) 
   at System.Threading.Tasks.TaskReplicator.Replica.Execute() [C:\code\tmp\hwapp\hwapp.csproj]        
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)
   at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(Exception source)
   at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)
   at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)
   at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.&lt;&gt;c__DisplayClass1_0.&lt;Run&gt;b__0(TextWriter tw)
   at Microsoft.CodeAnalysis.CommandLine.ConsoleUtil.RunWithUtf8Output[T](Func`2 func)
   at Microsoft.CodeAnalysis.CommandLine.ConsoleUtil.RunWithUtf8Output[T](Boolean utf8Output, TextWriter textWriter, Func`2 func)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.Run(String[] args, BuildPaths buildPaths, TextWriter textWriter, IAnalyzerAssemblyLoader analyzerLoader)
   at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.RunLocalCompilation(String[] arguments, BuildPaths buildPaths, TextWriter textWriter)
   at Microsoft.CodeAnalysis.CommandLine.BuildClient.RunCompilation(IEnumerable`1 originalArguments, BuildPaths buildPaths, TextWriter textWriter)
   at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.Run(IEnumerable`1 arguments, RequestLanguage language, CompileFunc compileFunc, IAnalyzerAssemblyLoader analyzerAssemblyLoader)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.MainCore(String[] args)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main(String[] args)
```

Note that I encountered this while investigating https://github.com/dotnet/roslyn/issues/38279, but this issue is almost certainly unrelated to that one. This means that, AFAIK, no actual user code is experiencing this exception, so fixing it is likely going to be low priority.</Description>
    <CreatedDate>25/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38280</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide spelling suggestions for command line build</Title>
    <Description>Roslyn can already help with fixing typos in code when used from a proper editor through [a code fix](https://github.com/dotnet/roslyn/blob/master/src/Features/CSharp/Portable/SpellCheck/CSharpSpellcheckCodeFixProvider.cs). But I believe C# is also increasingly being used in less traditional environments, especially by beginners, so I think it would be very helpful if the same spelling suggestions could be also provided in a command line build.

For this request, things that don't matter:

1. If the suggestion is provided as part of the existing error message, or as a separate message.
2. If the suggestion is provided by the core compiler itself, by an analyzer, or in some other way.

The thing that does matter is that this feature is on by default when building from the command line. In other words, if I run `dotnet new`, edit my code and then run `dotnet build`, I should be notified of typos. I shouldn't have to install any extra analyzer packages, or anything like that.</Description>
    <CreatedDate>25/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38279</IssueID>
    <RepoID>1</RepoID>
    <Title>StackOverflowException when too many generic types exisit</Title>
    <Description>**Version Used**: 
Visual studio 16.2.3 professional

**Background** :
Generic in C# is really useful. I‘m building a DOMAIN framework base on generic types, so I could re-use the core logical in every individual product project. Many generic types is used in this framework and the relationship between generic types is two complicated to spilt code into different projects. And I use a code auto generator to  extend these generic types, so the generic types in product project will be even more.

**Example**:
_where RP1RE3RV7 : rrCollection_Collection_KeyFieldID_AutoGen&lt;RG, GS, DG, RP1, PS1, DP1, RP1RC1, DP1DC1, RP1RE1, DP1DE1, RP1RE1L3, RP1RE1V3, DP1DE1V3  ,RP1RE1L4, RP1RE1V4, DP1DE1V4  ,RP1RE1L5, RP1RE1V5, DP1DE1V5  ,RP1RC2, DP1DC2, RP1RE2, DP1DE2, RP1RE2L3, RP1RE2V3, DP1DE2V3  ,RP1RE2L4, RP1RE2V4, DP1DE2V4  ,RP1RE2L5, RP1RE2V5, DP1DE2V5, RP1RE2RV5 ,RP1RE2L6, RP1RE2V6, DP1DE2V6  ,RP1RE2L7, RP1RE2V7, DP1DE2V7  ,RP1RE2L8, RP1RE2V8, DP1DE2V8  ,RP1RC3, DP1DC3, RP1RE3, DP1DE3, RP1RE3L3, RP1RE3V3, DP1DE3V3  ,RP1RE3L4, RP1RE3V4, DP1DE3V4  ,RP1RE3L5, RP1RE3V5, DP1DE3V5  ,RP1RE3L6, RP1RE3V6, DP1DE3V6, RP1RE3RV6 ,RP1RE3L7, RP1RE3V7, DP1DE3V7, RP1RE3RV7 ,RP1RE3L8, RP1RE3V8, DP1DE3V8  ,RP1RE3L9, RP1RE3V9, DP1DE3V9  ,RP1RE3L10, RP1RE3V10, DP1DE3V10, RP1RE3RV10 ,RP1RE3L11, RP1RE3V11, DP1DE3V11  ,RP1RE3L12, RP1RE3V12, DP1DE3V12  ,RP1RE3L13, RP1RE3V13, DP1DE3V13  ,RP1RE3L14, RP1RE3V14, DP1DE3V14  ,RP1RE3L15, RP1RE3V15, DP1DE3V15  ,RP1RC4, DP1DC4, RP1RE4, DP1DE4, RP1RE4L3, RP1RE4V3, DP1DE4V3  ,RP1RE4L4, RP1RE4V4, DP1DE4V4  ,RP1RE4L5, RP1RE4V5, DP1DE4V5  ,RP1RE4L7, RP1RE4V7, DP1DE4V7  ,RP1RE4L9, RP1RE4V9, DP1DE4V9, RP1RE4RV9 ,RP1RE4L10, RP1RE4V10, DP1DE4V10  ,RP1RE4L13, RP1RE4V13, DP1DE4V13  ,RP1RE4L14, RP1RE4V14, DP1DE4V14, RP1RE4RV14 ,RP1RE4L15, RP1RE4V15, DP1DE4V15  ,RP1RE4L16, RP1RE4V16, DP1DE4V16  ,RP1RE4L18, RP1RE4V18, DP1DE4V18  ,RP1RE4L19, RP1RE4V19, DP1DE4V19, RP1RE4RV19 ,RP1RE4L20, RP1RE4V20, DP1DE4V20  ,RP1RE4L21, RP1RE4V21, DP1DE4V21  ,RP1RE4L22, RP1RE4V22, DP1DE4V22  ,RP1RC5, DP1DC5, RP1RE5, DP1DE5, RP1RE5L3, RP1RE5V3, DP1DE5V3  ,RP1RE5L4, RP1RE5V4, DP1DE5V4, RP1RE5RV4 ,RP1RE5L5, RP1RE5V5, DP1DE5V5, RP1RE5RV5 ,RP1RE5L6, RP1RE5V6, DP1DE5V6  ,RP1RC6, DP1DC6, RP1RE6, DP1DE6, RP1RE6L3, RP1RE6V3, DP1DE6V3  ,RP1RE6L4, RP1RE6V4, DP1DE6V4, RP1RE6RV4 ,RP1RE6L5, RP1RE6V5, DP1DE6V5  ,RP1RE6L6, RP1RE6V6, DP1DE6V6  ,RP1RE6L7, RP1RE6V7, DP1DE6V7  ,RP1RE6L8, RP1RE6V8, DP1DE6V8  ,RP1RE6L9, RP1RE6V9, DP1DE6V9  ,RP1RC7, DP1DC7, RP1RE7, DP1DE7, RP1RE7L3, RP1RE7V3, DP1DE7V3  ,RP1RE7L4, RP1RE7V4, DP1DE7V4, RP1RE7RV4 ,RP1RE7L5, RP1RE7V5, DP1DE7V5  ,RP1RE7L6, RP1RE7V6, DP1DE7V6  ,RP1RE7L7, RP1RE7V7, DP1DE7V7  ,RP1RE7L8, RP1RE7V8, DP1DE7V8  ,RP1RC8, DP1DC8, RP1RE8, DP1DE8, RP1RE8L3, RP1RE8V3, DP1DE8V3  ,RP1RE8L4, RP1RE8V4, DP1DE8V4  ,RP1RE8L5, RP1RE8V5, DP1DE8V5  ,RP1RE8L6, RP1RE8V6, DP1DE8V6  ,RP1RC9, DP1DC9, RP1RE9, DP1DE9, RP1RE9L3, RP1RE9V3, DP1DE9V3  ,RP1RE9L4, RP1RE9V4, DP1DE9V4, RP1RE9RV4 ,RP1RE9L5, RP1RE9V5, DP1DE9V5, RP1RE9RV5 ,RP1RE9L6, RP1RE9V6, DP1DE9V6  ,RP1RC10, DP1DC10, RP1RE10, DP1DE10, RP1RE10L3, RP1RE10V3, DP1DE10V3  ,RP1RE10L4, RP1RE10V4, DP1DE10V4  ,RP1RE10L5, RP1RE10V5, DP1DE10V5, RP1RE10RV5 ,RP1RE10L6, RP1RE10V6, DP1DE10V6  ,RP1RE10L7, RP1RE10V7, DP1DE10V7  ,RP1RE10L8, RP1RE10V8, DP1DE10V8 &gt;, new()_
*notice: every parameter is a generic types.

**Problem**:
Now, small size project can be complied successfully, but Large project cannot comply in Visual Studio or in Command line. The feedback is :
“Roslyn\Microsoft.CSharp.Core.targets” “Process is terminated due to StackOverflowException”
Although my computer has 8G memory, but Visual Studio and Roslyn normally can actually use only less than 2G.

**Question/Suggest:**
Does there is some way to extend the Memory could be used by Roslyn, or 64Bit version of Roslyn can be provide in the recent future?

Thank a lot!</Description>
    <CreatedDate>25/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38278</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190824.1
- **Date Produced**: 8/24/2019 12:51 PM
- **Commit**: a7b5eb8de300b6a30bd797c4ecc8769f7028aeec
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19424.1

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>25/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38277</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to release/dev16.3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into release/dev16.3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-release/dev16.3-vs-deps
git reset --hard upstream/release/dev16.3-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-release/dev16.3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38276</IssueID>
    <RepoID>1</RepoID>
    <Title>C# IntelliSense incorrently enumerates unrelated extension methods in VS2019 16.3.0 Preview 2.</Title>
    <Description>**Version Used**: 
.NET Core 3.0.0-preview8-28405-07
VS2019 16.3.0 Preview 2

**Steps to Reproduce**:

Sample code:

```csharp
class ABC
{
}

static class Extensions
{
    public static void Hello&lt;T&gt;(this T value) where T : ABC
    {
    }
}

public class Program
{
    static void Main(string[] args)
    {
        Program p = new Program();
        p. // &lt;- type this and incorrect IntelliSense enumeration occurs.
    }
}
```

Visual Studio 2019 16.3.0 Preview 2 incorrently enumerates the unrelated extension method `Hello()` when the developer types 'p.' on the above sample code. 


**Expected Behavior**:
![2](https://user-images.githubusercontent.com/3041130/63647554-f8b4df80-c75d-11e9-9085-c6f2bceefb2a.jpg)

I confirmed that existing non-preview Visual Studios (including VS2017 15.9.13 and VS2019 16.2.2 RTM) doesn't show this incorrect extension method `Hello()` in the IntelliSense enumeration list.

**Actual Behavior**:
![1](https://user-images.githubusercontent.com/3041130/63647555-fbafd000-c75d-11e9-9fea-5234fd5749f2.jpg)
</Description>
    <CreatedDate>25/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38275</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn needs Reference for compilation but does not add it to the Metadata Table</Title>
    <Description>**Version Used**: 
VS2019 16.2.3

**Steps to Reproduce**:

1. Create a new ClassLibrary (4.6.2) (ClassLibrary1) and add following Code: (and a Reference to System)

        using System.ComponentModel.Design;
        namespace ClassLibrary1
        {
            public interface IClass1 : IServiceContainer
            {
                object Resolver { get; }
            }
        }


2. Create a new ClassLibrary (4.6.2) (ClasLibrary2) and add following Code: (and a Reference to System and to ClassLibrary1)

        using ClassLibrary1;
        namespace ClassLibrary2
        {
            public class Class2
            {
                public void Test()
                {
                    var a = (IClass1)new object();
                    var b = a.Resolver;
                }
            }
        }

3. compile (it works)
4. Remove Reference to System from ClassLibrary2
5. It does not compile

But If you look at the DLL ClassLibrary2 from step 3 (with ILSPY or DotPeek) there is no Reference to System

**Expected Behavior**:
step 5. Should also compile or reference should be added to the metadata

**Actual Behavior**:
Step 5 does not compile</Description>
    <CreatedDate>25/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38273</IssueID>
    <RepoID>1</RepoID>
    <Title>Improved Markdown formatting of Breaking changes documents</Title>
    <Description>Not sure if release/dev16.4-preview1 is the right target branch for a PR that doesn't change any code, but targeting that branch just in case anyway.</Description>
    <CreatedDate>24/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38272</IssueID>
    <RepoID>1</RepoID>
    <Title>Should the constant value propagate to ICoversionOperation?</Title>
    <Description>Consider this code:
```cs
void M(int? x) {
    if (x == 1) {
    }
}
```
Currently `IOperation.ConstantValue` returns null for the literal `1` because it's wrapped in a `IConversionOperation`.

I think this behavior is unintuitive because we need to fallback to use `SemanticModel.GetConstantValue` which works as expected.</Description>
    <CreatedDate>24/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38271</IssueID>
    <RepoID>1</RepoID>
    <Title>[WIP] Rework ordering of refactorings &amp; fixes with/out selection</Title>
    <Description>Previously having empty selection caused refactorings to have
low-priority in codeactions menu. It was introduced in time when only
very few refactorings accepted selection and when there were very little
non-selection based refactorings. Nowadays the distinction between some
codefixes and refactorings is blurry and as such should both be treated
the same way, regardless of selection.</Description>
    <CreatedDate>24/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38270</IssueID>
    <RepoID>1</RepoID>
    <Title>Warn when `default` is converted to a primitive type, reference type, or nullable type</Title>
    <Description>There are a number of confusing situations that arise from the fact that `default` can conform to nearly any type.  https://github.com/dotnet/roslyn/issues/38226#issuecomment-524243733 was the latest comment from a user.
</Description>
    <CreatedDate>24/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38269</IssueID>
    <RepoID>1</RepoID>
    <Title>Move all types without a file to matching files</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/372284/move-all-types-without-a-file-to-matching-files.html)._

---
&lt;p&gt;A feature that would search an find all types without a file and move them to matching files. &amp;quot;Move type to matching file&amp;quot; feature is awesome but after some long and complex workflows, it is very hard to manually find each type without a file. And some go missing without being moved a file.&lt;/p&gt;

---
### Original Comments

#### Федор Вишняков on 12/17/2018, 01:40 AM: 

&lt;p&gt;And what if I want to move all types from &lt;strong&gt;one&lt;/strong&gt; file to separate matching files? I think it would be really useful if VS will have this feature.&lt;/p&gt;
</Description>
    <CreatedDate>24/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38268</IssueID>
    <RepoID>1</RepoID>
    <Title>Lightbulb quick refactor for moving strings to resources file</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/400372/lightbulb-quick-refactor-for-moving-strings-to-res.html)._

---
&lt;p&gt;It would be super convenient to have a quick refactor to move string literals to a project's resource file (e.g. Resources.resx).&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 12/6/2018, 06:15 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  You will hear from us in about a week on our next steps.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;
</Description>
    <CreatedDate>24/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38267</IssueID>
    <RepoID>1</RepoID>
    <Title>Right click variable context menu needs "Find all assignments"</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/409321/right-click-variable-context-menu-needs-find-all-a.html)._

---
&lt;p&gt;Currently when you right click a variable you can choose &amp;quot;go to definition&amp;quot; which is handy and &amp;quot;find all references&amp;quot; which can have hundreds of results. &lt;/p&gt;&lt;p&gt;It would make it much easier if you changed &amp;quot;Find all References&amp;quot; to only show where the variable value is accessed &lt;/p&gt;&lt;pre&gt;Console.WriteLine(myvariable);&lt;/pre&gt;&lt;p&gt;And then added a new item &amp;quot;Find all assignments&amp;quot; which shows where the variable is assigned &lt;/p&gt;&lt;pre&gt;myvariable = &amp;quot;hello&amp;quot;;
&lt;/pre&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 12/16/2018, 05:52 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
    <CreatedDate>24/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38266</IssueID>
    <RepoID>1</RepoID>
    <Title>Strange suggestion to introduce constant for 'true'</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/idea/680962/strange-suggestion-to-introduce-constant-for-true.html)._

---
VS suggests that I &amp;quot;Introduce constant for 'true'&amp;quot;, when it should know that those are special values in a boolean method and just because I use it a few times, I don't need a constant for it.

---
### Original Comments

#### Roi Chen [MSFT] on 8/7/2019, 05:00 AM: 

We have converted this feedback item from problem to idea. This change was done to better reflect the feedback's nature. It will allow other developers to easily find it and engage on it.</Description>
    <CreatedDate>24/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38265</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to release/dev16.3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-release/dev16.3-vs-deps
git reset --hard upstream/release/dev16.3-vs-deps
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38264</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.4-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38263</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38262</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow the renaming of nested partial class files</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/569021/allow-the-renaming-of-partial-class-files.html)._

---
&lt;p&gt;Hi there. Hopefully there isn't a duplicate for this.&lt;/p&gt; &lt;p&gt;Currently in VS2019 if I have a partial class in Visual Studio, I can rename its root file via the UI. What I cannot do though, is rename any of its nested files. In order to do that so far, I am opening the csproj manually(after I go to file explorer and rename the file) and edit the entry by hand. &lt;/p&gt;&lt;p&gt;It would be great if partial classes had a way of allowing the rename of any of nested files via the UI.&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 5/16/2019, 02:09 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38261</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot implicitly convert `Task&lt;T&gt;` to `Task&lt;T?&gt;`</Title>
    <Description>Currently it's not possible to return an instance of `Task&lt;T&gt;` from a method returning `Task&lt;T?&gt;`. For asynchronous methods, this is not problematic because the awaited result of `Task&lt;T&gt;` can be converted to `T?`. However, method using pass-through to avoid the state machine overhead cannot use this approach.

This situation occurs several times in #35258. It makes code review difficult because while this case is safe, it's not obvious when looking at any given use of the suppression operator whether it falls into this known safe case or is some other situation.

📝 This situation would also apply to `ValueTask&lt;T&gt;`.

Potential solutions seem to include:

1. The compiler having some special knowledge of predefined types like `Task&lt;T&gt;` where the parameter is essentially `out T` but not marked as such due to limitations on covariant types in C#.
2. The ability to mark compile-time covariant generic type parameters (might further require an annotation in the definition of `Task&lt;T&gt;`).
3. A helper method like this:

    ```csharp
    public static Task&lt;TResult?&gt; AsNullable&lt;TResult&gt;(this Task&lt;TResult&gt; task)
      where TResult : class
    {
      // This is a known safe conversion
      return task!;
    }
    ```</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38260</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable annotations for SpecializedTasks.Default</Title>
    <Description>Currently we don't have a way to document the semantics of `SpecializedTasks.Default&lt;T&gt;` such that the compiler knows that the result is nullable for reference types. This issue is requesting support from the language team to understand the best pattern(s) to employ in cases like this.

https://github.com/dotnet/roslyn/blob/98b82ec70a2d9e6953a588464bce44fa245182b3/src/Workspaces/Core/Portable/Utilities/SpecializedTasks.cs#L20-L23</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38259</IssueID>
    <RepoID>1</RepoID>
    <Title>Add missing properties to the build pipeline for stages-based publishing</Title>
    <Description>See https://github.com/dotnet/core-eng/issues/7561

Sets up a few properties that were previously not documented as part of the onboarding process, and are causing issues in the publishing process.

Test build for this: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2972442&amp;view=results

You will notice a few differences in that build:

* The build stage doesn't publish anything to the dotnet-core feed, and instead publishes all artifacts to the build's containers.
* I set up a default channel for my testing branch to the ".NET Tools -latest" channel for testing purposes: `https://github.com/dotnet/roslyn @ refs/heads/dev/riarenas/add-stages-properties -&gt; .NET Tools - Latest`. Which causes publishing to happen as part of the channel's publishing stage:
![image](https://user-images.githubusercontent.com/23242101/63628210-092f5380-c5c0-11e9-866c-bcb9e8b62cac.png)


**Followup**:

The `Publish Ngen Logs` step failed in my test builds, I'm not sure if it's expected due to the configuration I used to queue the test build, or if it's a legitimate failure.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38258</IssueID>
    <RepoID>1</RepoID>
    <Title>Add null annotations to the Document API and fix various other problems</Title>
    <Description>Commit at a time is recommended.

**WARNING:** there is an public API breaking change in this, but I believe it's a case where anybody would already be broken so I'm comfortable making it.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38257</IssueID>
    <RepoID>1</RepoID>
    <Title>Generalize the map used for storing BoundCall/MethodSymbols</Title>
    <Description>Generalize the map used for storing BoundCall/MethodSymbols to allow for any boundnode and original symbol -&gt; updated symbol pair, and update the rewriter generator to consume the map. Followup changes will capture more reinferred symbols, this change just sets up the infrastructure without breaking existing functionality. @dotnet/roslyn-compiler for review.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38256</IssueID>
    <RepoID>1</RepoID>
    <Title>Why are interface members allowed to make use of static return / parameter types?</Title>
    <Description>I originally posted an issue over at https://github.com/dotnet/csharplang/issues/2739, reposting here because @CyrusNajmabadi suggested this might be a compiler bug.

---

**Version Used**:

* Visual Studio Community 2019  
   VisualStudio.16.Release/16.2.2+29209.62  
   C# Tools   3.2.0-beta4-19380-04+5e176ad8aea2724fe6787495c6fcc9144c550de1

**Steps to Reproduce**:

Compile the following program fragment and observe any compilation errors:

```csharp
static class StaticClass { }

interface IX
{
    StaticClass P { get; }
    StaticClass M(StaticClass p);
}

class X : IX
{
    public StaticClass P =&gt; throw new NotImplementedException();
    public StaticClass M(StaticClass p) =&gt; throw new NotImplementedException();
}
```

**Expected Behavior**:

I would expect the C# compiler to complain about the uses of `StaticClass` as a return type and parameter type, both in types `IX` and `X`.

**Actual Behavior**:

The C# compiler only produces errors for the (invalid?) uses of `StaticClass` in `X`. There are no errors in `IX`, i.e. if I omit the definition of class `X`, the above program fragment will compile successfully. Which is obviously nonsensical, since there's no way to sensibly implement `IX.P` nor call `IX.M`.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38255</IssueID>
    <RepoID>1</RepoID>
    <Title>Nested conditionals formatting</Title>
    <Description>When having lots of nested conditional statements, such as this:

```
var x =
    (condition)
    ? (condition)
        ? iftrue 
        : (condition)
            ? iftrue 
            : iffalse
    : (condition)
        ? iftrue 
        : iffalse;
```

It can be helpful if the code is properly indentated like that. As far as I can see, the Roslyn Formatter (`Microsoft.CodeAnalysis.Formatting`) does not provide such an option. Or am I wrong?</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38254</IssueID>
    <RepoID>1</RepoID>
    <Title>Update null state of argument to delegate creation</Title>
    <Description>Closes #38171

Just a small oversight in delegate creation analysis. Passing a null argument to a delegate creation will always throw, so we should always update the null-state of the argument to not-null after the creation. This is similar to what is done in `CheckPossibleNullReceiver`.

Thanks @TessenR.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38253</IssueID>
    <RepoID>1</RepoID>
    <Title>Better matched unimported items not showing at the top of completion list</Title>
    <Description>From @davkean:

![image](https://user-images.githubusercontent.com/788783/63619879-b98f5e80-c5a4-11e9-8866-c2a50039335e.png)
&gt; I would expect System.Threading.Tasks to be at the top, it's not, its 40 or 50 elements down

The fix I'm proposing is to sort the items first by matching score and then by sort text (maybe only when import completion is enabled? if we want to preserve current behavior for people don't use import completion)

Thought? @CyrusNajmabadi @ivanbasov @AmadeusW </Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38252</IssueID>
    <RepoID>1</RepoID>
    <Title>Ruleset file corruption when using multi-select to set analyzer severity for first time in a project</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/408855/ruleset-file-corruption-when-using-multi-select-to.html)._

---
On any project (at least, any CPS-based project) when there is no ruleset file yet associated with the project, VS will create one when I modify the severity of any single analyzer rule in Solution Explorer.&lt;br&gt;&lt;br&gt;Solution Explorer also supports multi-selection to change severity on several rules at once. This is super-useful when I want to turn off all analyzers for a project, which is a common workaround to this bug https://github.com/NuGet/Home/issues/6279&lt;br&gt;&lt;br&gt;However, the problem is that if multi-selection is used to change the severity when no .ruleset file yet exists for the project, VS creates one .ruleset for *each* selected analzyer, each .ruleset file has only one analyzer severity set. And only the last .ruleset file is actually associated with the project. See repro recording.

---
### Original Comments

#### Jinu Joseph [MSFT] on 12/17/2018, 02:44 AM: 

&lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

#### Andrew Arnott [MSFT] on 4/17/2019, 02:03 PM: 

Thank you for reporting this issue to us. We have changed the title to better describe the problem so others can find and engage with it
#### Visual Studio Feedback System on 8/23/2019, 03:01 AM: 

I'm closing this report, because in the last 90 days there was no internal developer activity and very small number of new votes or comments. Sorry, we would like to look at this further, but we just don’t have the time right now. Our goal in closing older issues such as this one is to keep customers informed on which issues are currently being pursued by Visual Studio teams. If you still have trouble with our latest version, please report it as a new problem.


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38251</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow static local functions to convert static functions to delegates</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38240.

The change in `VisitMethodGroup` means that the receiver of a method group is no longer checked automatically.

The changes in `VisitConversion` ensure that a method group is first properly checked for CS8421, and then that the receiver is checked, but only if the method selected by overload resolution has a receiver.

This PR targets the release/dev16.4-preview1 branch, because my previous PRs were sent there. If that's wrong, please tell me.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38250</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion: VSMac TypeScript completion doesn't commit with Enter</Title>
    <Description>**Version Used**: 
16.3

**Steps to Reproduce**:

1. Open a .cshtml file in VS (as part of ASP.NET Core MVC project) that contains a JavaScript block
2. open completion in the JS block
3. commit with Enter

**Expected Behavior**:
https://github.com/dotnet/roslyn/blob/4b8c6a7e3eef5cfb7e049d67d5449af3c44101f9/src/EditorFeatures/Core/Implementation/IntelliSense/AsyncCompletion/CommitManager.cs#L307 returns false because on Windows `item.DisplayText.StartsWith(textTypedSoFar, StringComparison.CurrentCultureIgnoreCase)` returns false for `a\0`.

**Actual Behavior**:
The problem on Mono is that comparison returns true for `a\0` and so completion in VSMac in TypeScript doesn't commit

http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/Implementation/IntelliSense/AsyncCompletion/CommitManager.cs,6fc358925a8c4e66

In `TextTypedSoFarMatchesItem` we should explicitly account for `typedChar` being `\0`. We're just getting lucky accidentally. On Mac we're not lucky because that StartsWith comparison is platform-specific.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38249</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider nullability when comparing IReference instances during emit</Title>
    <Description>Fixes #38183</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38248</IssueID>
    <RepoID>1</RepoID>
    <Title>Dictionary&lt;,&gt; and HashSet&lt;&gt; instances should be created with an explicit IEqualityComparer&lt;&gt; for Symbols</Title>
    <Description>#37247 changed `Symbol` equality to ignore nullability by default.

As a result, instances of `Dictionary&lt;,&gt;` and `HashSet&lt;&gt;` should be created with an explicit `IEqualityComparer&lt;&gt;` when the key type argument may be `Symbol`. That includes cases where the key type argument is a interface implemented by `Symbol` such as `Cci.IReference`.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38247</IssueID>
    <RepoID>1</RepoID>
    <Title>Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict unit test is flaky</Title>
    <Description>I have a PR https://github.com/dotnet/roslyn/pull/38230 that targets release/dev16.3 branch and the 
Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict unit test fails for it (failed on rerun as well) only in Windows_Desktop_Unit_Tests release_32 build. Note, the PR doesn’t make any changes to VB.
Here is a link to the build https://dev.azure.com/dnceng/public/_build/results?buildId=321462&amp;view=logs.

```
    Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict [STARTING]
      Assert.Equal() Failure
      Expected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[21..24), [72..75), [78..81)]
      Actual:   List&lt;Span&gt; [[21..24), [72..75), [72..75), [78..81), [78..81)]
      Stack Trace:
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(91,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(26,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(61,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_6_VerifySpansBeforeConflictResolution.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(865,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_21_VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38246</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-add master-vs-deps to the publish branch list</Title>
    <Description>master-vs-deps is the backup for all branch publishing, so it
must always be in the list.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38245</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0055 indents labels incorrectly sometimes</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
```C#
using System;

class Program
{
    static void Main() { }

    private static bool Repro(int input)
    {
        switch (input)
        {
            case 0: goto LabelA;
            case 1: goto LabelB;
            case 2: goto LabelC;
            case 3: goto LabelD;
        }

    LabelA:
        if (DateTime.Now &lt; DateTime.Now)
            goto LabelC;

    LabelB:
        goto LabelD;

    LabelC:
        return false;

    LabelD:
        return true;
    }
}
```

**Expected Behavior**:
IDE0055 not offered.

**Actual Behavior**:
IDE0055 offered and reformats this to:
```C#
using System;

class Program
{
    static void Main() { }

    private static bool Repro(int input)
    {
        switch (input)
        {
            case 0: goto LabelA;
            case 1: goto LabelB;
            case 2: goto LabelC;
            case 3: goto LabelD;
        }

    LabelA:
        if (DateTime.Now &lt; DateTime.Now)
            goto LabelC;

        LabelB:
        goto LabelD;

    LabelC:
        return false;

    LabelD:
        return true;
    }
}
```</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38244</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE1005</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/516075/ide1005.html)._

---
I need to disable this message. I have 1.6M lines of code in 22 projects with over 15 years of development. This has become a great hindrance, I don't need my hand held, I need to control my own development environment. A way to turn off this warning is all I require. Thank you.

---
### Original Comments

#### Visual Studio Feedback System on 4/3/2019, 10:17 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 8/22/2019, 10:59 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38243</IssueID>
    <RepoID>1</RepoID>
    <Title>out parameter in expression bodied method don't work as expected</Title>
    <Description>**Version Used**: C#8 .Net Core 3.0 preview 7

**Steps to Reproduce**:

``` csharp
public static string CreateShortSizedString(this ReadOnlyMemory&lt;byte&gt; span, out ReadOnlyMemory&lt;byte&gt; tail)
    =&gt; CreateSizedString(span, GetShort(span, out span), out tail);

public static short GetShort(this ReadOnlySpan&lt;byte&gt; span, out ReadOnlySpan&lt;byte&gt; tail)
    =&gt; new System.Buffers.Binary.BinaryPrimitives.ReadInt16BigEndian(span.Splice(2, out tail)));

public static string CreateSizedString(ReadOnlyMemory&lt;byte&gt; span, int length, out ReadOnlyMemory&lt;byte&gt; tail)
    =&gt; span.Splice(length, out tail).CreateString();
```

`span.Splice(length, out tail)` return the first segment of the array, and `out tail` is the 2nd segment.

VS show this warning `IDE0059 : Unnecessary assignment of a value to 'span'` for the `out span` of `GetShort`.


**Expected Behavior**:
After calling `GetShort`, `span` should be modified.
But on `CreateSizedString`, the span is not.

**Actual Behavior**:
When calling `CreateSizedString`, the span is the original Span.

`CreatehortSizedString` works fine written like this, but it should works also in the other way.
```csharp
public static string CreateShortSizedString(this ReadOnlySpan&lt;byte&gt; span, out ReadOnlySpan&lt;byte&gt; tail)
{
    var length = GetShort(span, out span);
    return CreateSizedString(span, length, out tail);
}
```
And also with ref like this (but I need to have the out parameter)
```csharp
public static string CreateShortSizedString(ref ReadOnlyMemory&lt;byte&gt; span)
    =&gt; CreateSizedString(ref span, GetShort(span, out span));

public static string CreateSizedString(ref ReadOnlyMemory&lt;byte&gt; span, int length)
    =&gt; span.Splice(length, out span).CreateString();
```</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>24/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38242</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0055 doesn't provide any control for semicolon positioning on while/for statements</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
```C#
using System;

class Program
{
    static void Main()
    {
        Console.WriteLine("starting");
        while (!Ready);
        Console.WriteLine("done");
    }

    private static bool Ready =&gt; true;
}
```

**Expected Behavior**:
I should be able to configure my settings such that this code isn't changed by IDE0055.

**Actual Behavior**:
IDE0055 (formatting fixes in general) forces this to:
```C#
using System;

class Program
{
    static void Main()
    {
        Console.WriteLine("starting");
        while (!Ready) ;
        Console.WriteLine("done");
    }

    private static bool Ready =&gt; true;
}
```
which just looks wrong compared to the positioning of the semicolons in the other statements.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38241</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0055 fights against vertical alignment</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
```C#
using System;

class Program
{
    static void Main() { }
}

[Flags]
public enum CompositionOptions
{
    Default                  = 0x0000,
    DisableSilentRejection   = 0x0001,
    IsThreadSafe             = 0x0002,
    ExportCompositionService = 0x0004
}
```
Ensure `csharp_space_around_declaration_statements` is set to `do_not_ignore`, then run the offered IDE0055.

**Expected Behavior**:
IDE0055 isn't offered because there's a discernable vertical alignment being employed here.

**Actual Behavior**:
It reformats it to:
```C#
[Flags]
public enum CompositionOptions
{
    Default = 0x0000,
    DisableSilentRejection = 0x0001,
    IsThreadSafe = 0x0002,
    ExportCompositionService = 0x0004
}
```
This can be avoided by setting `csharp_space_around_declaration_statements` to `ignore`, but then that negatively impacts the rest of the cases that would benefit from it, e.g. a normal declaration like:
```C#
int foo   = 17;
```
accidentally having a few undesired spaces.

We have a non-trivial amount of such vertical alignment across corelib and corefx, and in my opinion (and obviously in the opinion of the developers that independently authored each case) it helped readability.  I don't want to further hamper readability by surrounding each and every such case with `#pragma warning disable IDE0055`, which just means we won't enable IDE0055.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38240</IssueID>
    <RepoID>1</RepoID>
    <Title>Static local functions should be able to convert static functions to delegates</Title>
    <Description>**Version Used**: master from SharpLab (a08336f)

**Steps to Reproduce**:

Try to compile the following code:

```c#
using System;
class C
{
    static void M()
    {
        static void F1() {}
        
        static void F2()
        {
            M();
            F1();
            
            Action m = M;
            Action f1 = F1;
        }
    }
}
```

**Expected Behavior**:

Since `M` and `F1` can be called from `F2` and since calling them does not require capturing any state, it should be possible to convert them to a delegate in `F2`. In other words, the above code should compile fine.

**Actual Behavior**:

[Both conversions to `Action` fail:](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEBMBGAsAKHQAgGFcBvXfC/FDANioBZ8BZACgEpzKydLeraG+AGIZ2+EgF9OffNL7U6KRkLTs5vbjJms2AbnVaR7fTy28DM6mnxh8AXmYmzvK/gBmGe8IxOtU0xT+EkA==)

&gt; C.cs(13,24): error CS8422: A static local function cannot contain a reference to 'this' or 'base'.
&gt; C.cs(14,25): error CS8422: A static local function cannot contain a reference to 'this' or 'base'.

As far as I can tell, this happens because in these cases, `BoundMethodGroup` has an "associated instance expression" of `this` (even though that might not be expected for `static` functions) and the code that generates CS8422 did not anticipate this quirk.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38239</IssueID>
    <RepoID>1</RepoID>
    <Title>MemoryHelper.cs: Don't call Win32 API on Unix</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38211</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38238</IssueID>
    <RepoID>1</RepoID>
    <Title>Update IfToSwitch refactoring for switch expressions</Title>
    <Description>Fixes #38083 
Fixes #37035

Also the feature is rewritten to share most logic for VB and C# as they get close to feature parity.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38236</IssueID>
    <RepoID>1</RepoID>
    <Title>Suppress nullable warnings can't be applied to initializing variables from deconstruction</Title>
    <Description>**Version Used**: 

```
Branch master (13 Aug 2019)
Latest commit a08336 by David:
Merge pull request #37916 from dibarbet/partial_load_str

Update partial load dialog string to better match task center.
```

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C
{
  string? f;
  void M()
  {
    var c = new C() { f = "" };
    (string a, string b) = c!; // CS8600; CS8600
    (string c, string d!) = c; // error
    (string e, string f)! = c; // error
  }
  public void Deconstruct(out string? s1, out string? s2) =&gt; s1 = s2 = f;
}
```

**Expected Behavior**:
There's an option to apply suppress nullable warning to tell the compiler that deconstruction can't return nulls in this case e.g. applying it on the right side of the deconstructing assignment.

**Actual Behavior**:
You can't suppress the warning with `!` and have to resort to messy preprocessor directives e.g.
```
(string? a,
#nullable disable warnings
string b
#nullable enable warnings
) = c;
```
</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38235</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38234</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38233</IssueID>
    <RepoID>1</RepoID>
    <Title>Suppress nullable warning expression doesn't suppress warnings from nullable `GetEnumeartor` reference in foreach</Title>
    <Description>**Version Used**: 

```
Branch master (13 Aug 2019)
Latest commit a08336 by David:
Merge pull request #37916 from dibarbet/partial_load_str

Update partial load dialog string to better match task center.
```

**Steps to Reproduce**:

```cs
#nullable enable
using System.Collections;

class E : IEnumerable
{
  public int[]? arr;
  public IEnumerator? GetEnumerator() =&gt; arr?.GetEnumerator();
  void M()
  {
    var e = new E() { arr = new int[10] };
    foreach(var x in e!) { }
  }
}
```

**Expected Behavior**:
No warnings. Warnings on `e` are explicitly suppressed

**Actual Behavior**:
`CS8602: Dereference of a possibly null reference.` is reported for the usage of `e`
</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38232</IssueID>
    <RepoID>1</RepoID>
    <Title>A switch expression only has a common type if all arms can be converted to that type.</Title>
    <Description>Fixes #38226</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38231</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38230</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid a race around initialization of TypeWithAnnotations structure and IsDefault check.</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/797080.

We have several Watson buckets that imply that a TypeWithAnnotations structure returned by RetargetingMethodSymbol.ReturnTypeWithAnnotations and RetargetingPropertySymbol.TypeWithAnnotations has null as its Type property. The properties are backed by fields that are initialized by an API that never produces structures like that (with null Type property). I suspect that the situation can arise in case of a race between two threads, where the structure is only partially initialized so that IsDefault check fails in one thread, but the underlying information for the Type property is still not initialized by another thread.

This change eliminates possibility of races like that.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38229</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38228</IssueID>
    <RepoID>1</RepoID>
    <Title>Add ExternalAccess project for dotnet/format</Title>
    <Description>In order for dotnet-format to run code style analyzers it needs access to discover and instantiate these internal analyzers. Also, in this project is a means to utilize the new editorconfig support in the compiler as well as fallback to the legacy editorconfig api.</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38227</IssueID>
    <RepoID>1</RepoID>
    <Title>Treat AddImport replacement text changes as insertions.</Title>
    <Description>In AddMissingImports refactoring, AddImport fix text changes can come back
as a replacement instead of an insertion when there are multiple trailing
newlines following the using directives. Convert these to insertions so
that we retain the newlines and the text changes don't step on each other.

Fixes #35982</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38226</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler computes incorrect common type for switch expression with null arm</Title>
    <Description>See https://github.com/dotnet/roslyn/issues/37950

The following method does not compile, but it should.  A switch expression should only be considered to have a natural type when all switch arm expressions can be converted to the computed common type.

``` c#
class Program
{
    public static void Main() { }

    public static bool? GetBool(string name)
    {
        return name switch
        {
            "a" =&gt; true,
            "b" =&gt; false,
            _ =&gt; null, // error CS0037: Cannot convert null to 'bool' because it is a non-nullable value type
        };
    }
}
```
</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38225</IssueID>
    <RepoID>1</RepoID>
    <Title>Wire-up to text buffers even if there is no RDT DocDataReloaded</Title>
    <Description>In 735a653208407801d96ac75a1398fa81542bb03e we stopped listening to RDTA_DocumentInitialized as a trigger to know when the document might now be available. We believed it wasn't necessary since DocDataReloaded would cover it, but files being opened or manipulated via some DTE interfaces or with the invisible editor seem to still require it.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/937712</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38224</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0055 incorrectly indents with intermixed comment styles</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
```C#
using System;
using System.Runtime.InteropServices;

class Program
{
    static void Main() { }

    [DllImport("kernel32.dll")]
    internal static extern bool CreateDirectory(
        /*LPCSTR*/ string path, // this is a nice comment
        /*LPSECURITY_ATTRIBUTES*/ IntPtr lpSecurityAttributes);
}
```

**Expected Behavior**:
IDE0055 not offerred.

**Actual Behavior**:
IDE0055 offered and formats the code to this:
```C#
using System;
using System.Runtime.InteropServices;

class Program
{
    static void Main() { }

    [DllImport("kernel32.dll")]
    internal static extern bool CreateDirectory(
        /*LPCSTR*/ string path, // this is a nice comment
                                /*LPSECURITY_ATTRIBUTES*/ IntPtr lpSecurityAttributes);
}
```</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38223</IssueID>
    <RepoID>1</RepoID>
    <Title>Spikes in CPU usage when resolving references to methods implementing System.IDisposable</Title>
    <Description>Finding references to a method that implement System.IDisposable in any non-trivially sized project takes a long time and causes a big spike in CPU usage. I replicated this behaviour in VS2019, VS2017 and VSCode with omnisharp. It's impossible to avoid this issue if you want to use Code Lens.

After making a cpu profile, it seems that core issue is here:
https://github.com/dotnet/roslyn/blob/d570d6cc2e0d12a1c587bd2cd83d6fe3215d51e2/src/Workspaces/Core/Portable/FindSymbols/FindReferences/DependentProjectsFinder.cs#L442-L464

Namely, to find references to MyClass.Dispose(), Roslyn first tries to find all classes that implement System.IDisposable, with first step being filtering all projects in solution to those which have access to assembly containing System.IDisposable. Checking whether a project has access to the said assembly involves creating a whole new compilation object, and this is what seems to be taking most of the cpu cycles.

![DisposeProfile](https://user-images.githubusercontent.com/5102661/63548614-e3a63980-c52e-11e9-861d-a1de7deddcb3.png)

I assume what @CyrusNajmabadi remarked in the TODO would resolve/help with this issue?</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38222</IssueID>
    <RepoID>1</RepoID>
    <Title>Minor change to address previous PR comments</Title>
    <Description>This is to address some minor comments left unaddressed in a previous PR #38101
</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>24/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38221</IssueID>
    <RepoID>1</RepoID>
    <Title>Cleanup after adding nullable information to extract method</Title>
    <Description>PR feedback from #37851  that I wasn't able to get to before needing to merge</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38220</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not report an NFW for analyzer exception diagnostic in IDE</Title>
    <Description>This seems to cause a noticable UI delay while the NFW gets reported. We already report the AD0001 diagnostic with exception callstack and the analysis context on which exception occurred, so user has enough information to file an actionable bug.
Fixes #38180</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38219</IssueID>
    <RepoID>1</RepoID>
    <Title>String Display Incorrectly in VS2017</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/489766/string-display-incorrectly-in-vs2017.html)._

---
I am moving from VS 2013 to VS 2017. One issue I am now running into is strings are not working as I would expect in the new version. 

For example: If I define the following in both versions...

Dim s3 As String = &amp;quot;This is one more test &amp;quot;&amp;quot;with double quotes&amp;quot;&amp;quot; &amp;quot; &amp;amp; vbCrLf &amp;amp; &amp;quot;Now on another line.&amp;quot;

When viewing the variable in Locals window/Immediate window/or calling other functions the variable is returning:
VS2013 (as expected):  		
&amp;quot;This is one more test &amp;quot;with double quotes&amp;quot;   Now on another line.&amp;quot;

VS2017 (incorrect):
&amp;quot;This is one more test &amp;quot;&amp;quot;with double quotes&amp;quot;&amp;quot; &amp;quot; &amp;amp; vbCrLf &amp;amp; &amp;quot;Now on another line.&amp;quot;

---
### Original Comments

#### Visual Studio Feedback System on 3/14/2019, 11:13 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38218</IssueID>
    <RepoID>1</RepoID>
    <Title>VB Use Auto Property brakes code with explicit Array bounds</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/517543/vb-use-auto-property-brakes-code-with-explicit-arr.html)._

---
```
Private ReadOnly _Condition(255) As Integer
```
Message	IDE0032	Use auto property
The fix produces code with a 0 length array possibily of arrays that is not readonly

```
 Public Property Condition() As Integer()
```

---
### Original Comments

#### Visual Studio Feedback System on 4/4/2019, 02:40 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38217</IssueID>
    <RepoID>1</RepoID>
    <Title>cannot use local variable -continued-</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/520579/cannot-use-local-variable-continued.html)._

---
File &amp;quot;Entity.cs&amp;quot; contains several type definitions including 'Map' and 'Content'. Some errors still existed, but I took a break from &amp;quot;Entity.cs&amp;quot; to create a new file &amp;quot;EventArgs.cs&amp;quot; and created several types within. When I switched back to &amp;quot;Entity.cs&amp;quot;, which I never closed, visual studio reported more errors than existed.

I restarted Visual Studio to attempt to clear this problem. When I reloaded the solution, there were zero errors reported in the file &amp;quot;Entity.cs&amp;quot; even though there are errors (see attachment for one example).

Suggestion: create a quick-fix button that allows the user to completely rebuild the &amp;quot;reported&amp;quot; errors buffer, since restarting Visual Studio didn't fix the issue.


I included a zip of the solution, which did not let me include 4 files:
.vs\TheradenCore\v15\Server\sqlite3\db.lock
.vs\TheradenCore\v15\Server\sqlite3\storage.ide
.vs\TheradenCore\v15\Server\sqlite3\storage.ide-shm
.vs\TheradenCore\v15\Server\sqlite3\storage.ide-wal

---
### Original Comments

#### furrychemistry on 4/5/2019, 07:06 PM: 

I closed the file's tab and reopend it, which reloaded the errors.&lt;br&gt;This used to occur when Visual Studio loads the document tab when loading the solution.
#### furrychemistry on 4/5/2019, 07:09 PM: 

-- When I reopened the tab, Visual Studio showed the errors correctly --
#### Visual Studio Feedback System on 4/8/2019, 02:56 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38216</IssueID>
    <RepoID>1</RepoID>
    <Title>'Object initialization can be simplified' attempts to initialize read-only properties.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/704045/object-initialization-can-be-simplified-attempts-t.html)._

---
Accidentally I think I may have found a bug.
Visual studio suggests me to initialize read only properties if I try to initialize them below (Refer to screenshots).

I was just refactoring old code that had Point exposed to set, so this glitch occured naturally.

My simplified version of `Point`

```
public struct Point 
{
	public int X { get; }
	public int Y { get; }

public Point(int x, int y) 
        {
		X = x;
		Y = y;
	}
}
```

---
### Original Comments

#### ltlion on 8/21/2019, 03:55 PM: 

url version of the [screenshot](https://cdn.discordapp.com/attachments/202046273052868608/613868559109455882/unknown.png)
#### Visual Studio Feedback System on 8/22/2019, 03:40 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>24/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38215</IssueID>
    <RepoID>1</RepoID>
    <Title>curl error: Roslyn fails to build on OSX</Title>
    <Description>**Version Used**: 

master

**Steps to Reproduce**:

1. Run restore.sh

**Expected Behavior**:

Successful build

**Actual Behavior**:

```
ryan@kenshin:~/git/roslyn$ ./restore.sh 
Downloading 'https://dot.net/v1/dotnet-install.sh'
curl: (23) Failed writing body (0 != 3405)
```

Seems this can be caused by a variety of things, but I've tried to check for ones that would be an issue on my end. The homebrew curl is keg-only, so this should be using the OS-provided one. I have ample disk space available, and the path to roslyn is short and doesn't contain any strange characters.

.NET Core versions installed:
```
ryan@kenshin:~/git/roslyn$ dotnet --list-sdks
2.1.505 [/usr/local/share/dotnet/sdk]
2.1.700 [/usr/local/share/dotnet/sdk]
2.2.401 [/usr/local/share/dotnet/sdk]
3.0.100-preview6-012264 [/usr/local/share/dotnet/sdk]
3.0.100-preview8-013656 [/usr/local/share/dotnet/sdk]
ryan@kenshin:~/git/roslyn$ dotnet --list-runtimes
Microsoft.AspNetCore.All 2.1.9 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]
Microsoft.AspNetCore.All 2.1.11 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]
Microsoft.AspNetCore.All 2.2.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]
Microsoft.AspNetCore.App 2.1.9 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 2.1.11 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 2.2.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 3.0.0-preview6.19307.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
Microsoft.NETCore.App 2.1.9 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
Microsoft.NETCore.App 2.1.11 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
Microsoft.NETCore.App 2.2.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
Microsoft.NETCore.App 3.0.0-preview6-27804-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
Microsoft.NETCore.App 3.0.0-preview8-28405-07 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
```</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38214</IssueID>
    <RepoID>1</RepoID>
    <Title>VB: Adjust merging of lookup result for inaccessible members of different kind, prefer more accessible candidate.</Title>
    <Description>Fixes #35948.</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38213</IssueID>
    <RepoID>1</RepoID>
    <Title>'is object' does not work for Nullable&lt;T&gt;</Title>
    <Description>**Version Used**: 16.3 Preview 2

**Steps to Reproduce**:

```
void Method(bool? arg)
{
  if (arg is object)
    _ = arg.Value;
}
```

**Expected Behavior**:

No warning for `arg.Value`.

**Actual Behavior**:

A warning is reported for `arg.Value`:

&gt; warning CS8629: Nullable value type may be null.
</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38212</IssueID>
    <RepoID>1</RepoID>
    <Title>VS Deadlock in FileChangeService when applying code fix that updates solution level editorconfig</Title>
    <Description>**Version Used**: 16.3.0 Preview 3.0 [29220.192.master] or later build. I updated my build just today morning

**Steps to Reproduce**:

1. `git clone https://github.com/dotnet/roslyn-analyzers.git`, restore and open RoslynAnalyzers.sln
2. Open [IMethodSymbolExtensions.cs](https://github.com/dotnet/roslyn-analyzers/blob/master/src/Utilities/Compiler/Extensions/IMethodSymbolExtensions.cs)
3. There should be unnecessary using directive, otherwise add one at top of the file
4. Invoke Ctrl + . and apply the Configure Severity for IDE0005 code fix (choose any severity)
![image](https://user-images.githubusercontent.com/10605811/63527598-414a6f80-c4b6-11e9-8fac-5f45526c9e9c.png)

**Expected Behavior**:
Code fix is applied and .editorconfig file in solution directory gets updated

**Actual Behavior**:
VS deadlocks (NOTE: Once in a while I also see the crash during code fix application noted in https://github.com/dotnet/roslyn/issues/23973)

**Dump:**
`\\&lt;%internal_mlang_share%&gt;\public\mavasani\VSDeadlockOnCodeFix\VsDeadlockOnCodeFixApplication.dmp`

**Callstack of Main thread on deadlock:**
```
Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.NoMessagePumpSyncContext.Wait(System.IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)	Unknown
 	mscorlib.dll!System.Threading.SynchronizationContext.InvokeWaitMethodHelper(System.Threading.SynchronizationContext syncContext, System.IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
&gt;	mscorlib.dll!System.Threading.Monitor.Wait(object obj, int millisecondsTimeout, bool exitContext)	Unknown
 	mscorlib.dll!System.Threading.Monitor.Wait(object obj, int millisecondsTimeout)	Unknown
 	mscorlib.dll!System.Threading.ManualResetEventSlim.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.InternalWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.Wait(System.TimeSpan timeout)	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.WaitSynchronouslyCore(System.Threading.Tasks.Task task)	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.WaitSynchronously(System.Threading.Tasks.Task task)	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTask&lt;bool&gt;.CompleteOnCurrentThread()	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run&lt;bool&gt;(System.Func&lt;System.Threading.Tasks.Task&lt;bool&gt;&gt; asyncMethod, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)	Unknown
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChangeService.RunWithTracing&lt;bool&gt;(Microsoft.VisualStudio.Services.FileChangeService.CompletionTracer tracer, System.Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; func)	Unknown
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChangeService.RunWithTracing(Microsoft.VisualStudio.Services.FileChangeService.CompletionTracer tracer, System.Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; func)	Unknown
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChangeService.SyncFile(string filename)	Unknown
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.FileChangeService.Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.SyncFile(string filename)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.TextDocData.SuspendFileChangeNotification(string pszFilename, int fSuspend)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.TextDocData.BaseSave(string pszFilename, int fRemember)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.TextDocData.Save(string pszFilename, int fRemember, uint nFormatIndex)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.TextDocData.Save(string pszFileName, int fRemember)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.TextDocData.SaveDocData(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS dwSave, out string pbstrMkDocumentNew, out int pfSaveCanceled)	Unknown
 	Microsoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.SaveItem.AnonymousMethod__0(Microsoft.Internal.VisualStudio.Shell.TelemetryActivity _)	Unknown
 	Microsoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.HrMutate.AnonymousMethod__0()	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.ExecuteJob&lt;Microsoft.VisualStudio.ProjectSystem.VS.HResult&gt;(System.Func&lt;System.Threading.Tasks.Task&gt; asyncMethod, Microsoft.VisualStudio.Threading.JoinableTask job)	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.RunAsync&lt;Microsoft.VisualStudio.ProjectSystem.VS.HResult&gt;(System.Func&lt;System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.ProjectSystem.VS.HResult&gt;&gt; asyncMethod, bool synchronouslyBlocking, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run&lt;Microsoft.VisualStudio.ProjectSystem.VS.HResult&gt;(System.Func&lt;System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.ProjectSystem.VS.HResult&gt;&gt; asyncMethod, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)	Unknown
 	Microsoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.ProjectMultiThreadedService.ExecuteSynchronously&lt;Microsoft.VisualStudio.ProjectSystem.VS.HResult&gt;(System.Func&lt;System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.ProjectSystem.VS.HResult&gt;&gt; asyncAction)	Unknown
 	Microsoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.HrInvoke.AnonymousMethod__0()	Unknown
 	Microsoft.VisualStudio.ProjectSystem.VS.dll!Microsoft.VisualStudio.ProjectSystem.VS.HResult.Invoke(System.Func&lt;Microsoft.VisualStudio.ProjectSystem.VS.HResult&gt; action, System.IServiceProvider vsShellServiceProvider, Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService projectFaultHandlerService, Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject project)	Unknown
 	Microsoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.HrInvoke(System.Func&lt;System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.ProjectSystem.VS.HResult&gt;&gt; asyncAction, bool registerProjectFaultHandlerService)	Unknown
 	Microsoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.HrMutate(System.Func&lt;Microsoft.Internal.VisualStudio.Shell.TelemetryActivity, System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.ProjectSystem.VS.HResult&gt;&gt; asyncAction, bool includesFileSystemChange, bool registerProjectFaultHandlerService, string telemetryActivity)	Unknown
 	Microsoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS saveFlag, string silentSaveAsName, uint itemid, System.IntPtr docData, out int cancelledParam)	Unknown
 	Microsoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNodeWrapper.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS dwSave, string pszSilentSaveAsName, uint itemid, System.IntPtr punkDocData, out int pfCanceled)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.InvisibleEditor.Dispose()	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyTextDocumentChange(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.SourceText newText)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyDocumentTextChanged(Microsoft.CodeAnalysis.DocumentId documentId, Microsoft.CodeAnalysis.Text.SourceText newText)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.ApplyChangedDocument(Microsoft.CodeAnalysis.ProjectChanges projectChanges, Microsoft.CodeAnalysis.DocumentId documentId)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(Microsoft.CodeAnalysis.ProjectChanges projectChanges)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Microsoft.CodeAnalysis.Solution newSolution, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Microsoft.CodeAnalysis.Solution newSolution, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Microsoft.CodeAnalysis.Workspace workspace, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeActions.CodeActionOperation&gt; operations, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.Apply(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Document fromDocument, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeActions.CodeActionOperation&gt; operations, string title, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(System.Func&lt;Microsoft.CodeAnalysis.Document&gt; getFromDocument, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeCore.AnonymousMethod__0()	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(Microsoft.CodeAnalysis.Extensions.IExtensionManager extensionManager, object extension, System.Action action)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeCore(System.Func&lt;Microsoft.CodeAnalysis.Document&gt; getFromDocument, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InnerInvoke(Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.Invoke.AnonymousMethod__0(Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(string title, string message, bool allowCancel, bool showProgress, System.Action&lt;Microsoft.CodeAnalysis.Editor.Host.IWaitContext&gt; action)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.Invoke(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbSession.InvokeAction.AnonymousMethod__0(Microsoft.VisualStudio.Language.Intellisense.Utilities.IWaitContext c)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VisualStudioWaitIndicator.Wait(string title, string message, bool allowCancel, System.Action&lt;Microsoft.VisualStudio.Language.Intellisense.Utilities.IWaitContext&gt; action)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbSession.InvokeAction(string categoryName, Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction action, int menuIndex)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulb.GetMenuItemForAction.AnonymousMethod__3()	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler)	Unknown
 	WindowsBase.dll!System.Windows.Threading.DispatcherOperation.InvokeImpl()	Unknown
 	WindowsBase.dll!System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)	Unknown
 	WindowsBase.dll!MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)	Unknown
 	WindowsBase.dll!MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext executionContext, System.Threading.ContextCallback callback, object state)	Unknown
 	WindowsBase.dll!System.Windows.Threading.DispatcherOperation.Invoke()	Unknown
 	WindowsBase.dll!System.Windows.Threading.Dispatcher.ProcessQueue()	Unknown
 	WindowsBase.dll!System.Windows.Threading.Dispatcher.WndProcHook(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)	Unknown
 	WindowsBase.dll!MS.Win32.HwndWrapper.WndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)	Unknown
 	WindowsBase.dll!MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler)	Unknown
 	WindowsBase.dll!System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority priority, System.TimeSpan timeout, System.Delegate method, object args, int numArgs)	Unknown
 	WindowsBase.dll!MS.Win32.HwndSubclass.SubclassWndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam)	Unknown
```</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38211</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler Server Fails on 32-bit Linux (Mono)</Title>
    <Description>**Version Used**: 3.3.0-beta2-19381-14 (ef3a7a38)

**Steps to Reproduce**:

Note - this fails because of the following code that assumes GlobalMemoryStatusEx is available.  It's not on mono.

https://github.com/dotnet/roslyn/blob/fab7134296816fc80019c60b0f5bef7400cf23ea/src/Compilers/Server/VBCSCompiler/MemoryHelper.cs#L32-L54

1. Get your favorite 32-bit OS
2. Clone mono master (http://github.com/mono/mono)
3. Build it

**Expected Behavior**:
The named pipe connection to the compiler server should work.  The logs in &lt;mono-root&gt;/mcs/build/compiler-server.log should indicate normal activity.

**Actual Behavior**:
Each call to the compiler server fails and falls back to local CSC.  Normal build times take at least 2x as long. 

Here's the exception in the logs:

```
--- PID=55254 TID=1 Ticks=50369644: Exception 'GlobalMemoryStatusEx assembly:&lt;unknown assembly&gt; type:&lt;unknown type&gt; member:(null)' occurred during 'Error creating client named pipe'. Stack trace:
  at (wrapper managed-to-native) Microsoft.CodeAnalysis.CompilerServer.MemoryHelper.GlobalMemoryStatusEx(Microsoft.CodeAnalysis.CompilerServer.MemoryHelper)
  at Microsoft.CodeAnalysis.CompilerServer.MemoryHelper.IsMemoryAvailable () [0x00005] in &lt;b4db9195626c4d599771f618990c13f2&gt;:0 
  at Microsoft.CodeAnalysis.CompilerServer.NamedPipeClientConnectionHost.CreateListenTaskCore (System.Threading.CancellationToken cancellationToken) [0x000e2] in &lt;b4db9195626c4d599771f618990c13f2&gt;:0 
  at Microsoft.CodeAnalysis.CompilerServer.NamedPipeClientConnectionHost.CreateListenTask (System.Threading.CancellationToken cancellationToken) [0x00075] in &lt;b4db9195626c4d599771f618990c13f2&gt;:0 
  at Microsoft.CodeAnalysis.CompilerServer.ServerDispatcher.HandleClientConnection (System.Threading.Tasks.Task`1[TResult] clientConnectionTask, System.Boolean allowCompilationRequests, System.Threading.CancellationToken cancellationToken) [0x00073] in &lt;b4db9195626c4d599771f618990c13f2&gt;:0 
```</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38210</IssueID>
    <RepoID>1</RepoID>
    <Title>Nested for loop increment variable defaults to i</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/704799/nested-for-loop-increment-variable-defaults-to-i.html)._

---
Not sure if this is a problem or a feature request, but I'm reporting it as a problem...

Whenever I write a nested for loop in Visual Studio, the increment counter defaults to i. However, this conflicts with the outer for loop which also uses i. I have used Eclipse in the past and it always put the inner loop counter as j (and k, etc.). Visual Studio always seems to use i which conflicts with the counter variable in any outer loops.

It would be nice if this was fixed.

---
### Original Comments

#### Visual Studio Feedback System on 8/22/2019, 04:47 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38208</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3 to release/dev16.3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-to-release/dev16.3-vs-deps
git reset --hard upstream/release/dev16.3-vs-deps
git merge upstream/release/dev16.3
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38207</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3
git reset --hard upstream/release/dev16.3
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38206</IssueID>
    <RepoID>1</RepoID>
    <Title>[docs] updated VS location of "use .NET Core previews"</Title>
    <Description>The setting has moved to a different place.</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38205</IssueID>
    <RepoID>1</RepoID>
    <Title>Injecting custom debug information in the portable PDB</Title>
    <Description>When compiling a given .NET Core project programmatically, I would like to inject in the resulting Portable PDB a opaque blob in the custom debug information.
I know SourceLink information are injected in a similar way (they are identified with a well-known guid).
I need some additional info when I read (with my own PDB symbol reader) the Portable PDB.

Is this possible without rewriting the PDB?
TIA</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38204</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0067 fires for IHttpClientFactory.CreateClient(), but not IHttpClientFactory.CreateClient("foo")</Title>
    <Description>**Version Used**: 
Visual Studio Enterprise 16.2.3

**Steps to Reproduce**:
Add the following method in your project:
```csharp
public void DoSomething(IHttpClientFactory clientFactory)
{
    var clientWithWarning = clientFactory.CreateClient();
    clientWithWarning.BaseAddress = new Uri("https://localhost");

    var clientWithoutWarning = clientFactory.CreateClient("Foo");
    clientWithoutWarning.BaseAddress = new Uri("https://localhost");
}
```

**Expected Behavior**:
Get either an IDE0067 warning for both methods or none.

**Actual Behavior**:
The first method without parameters produces a warning message IDE0067, the second doesn't.</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38203</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposal fix for generated nullable attribute</Title>
    <Description>Contributes to #38069, #39256</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38202</IssueID>
    <RepoID>1</RepoID>
    <Title>Add release/dev16.3-vs-deps to publishing</Title>
    <Description>
    </Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38201</IssueID>
    <RepoID>1</RepoID>
    <Title>CS7038 Failed to emit module (IAsyncEnumerable returns IAsyncEnumerable)</Title>
    <Description>EDIT:  This was my original bug.  Then I noticed when I compiled it, it actually dies with `error CS7038: Failed to emit module` ... so I changed the title (seems more important)

.net core 3.0 preview 8.

```
async IAsyncEnumerable&lt;string&gt; GetStrings([EnumeratorCancellation] CancellationToken cancellationToken = default)
{
    yield return await Task.FromResult("");
    yield return await Task.FromResult("");
}

async IAsyncEnumerable&lt;string&gt; GetStrings2([EnumeratorCancellation] CancellationToken cancellationToken = default) 
    =&gt; GetStrings(cancellationToken);

IAsyncEnumerable&lt;string&gt; GetStrings3([EnumeratorCancellation] CancellationToken cancellationToken = default) 
    =&gt; GetStrings(cancellationToken);
```

GetStrings() has some customizable logic (imagine)… And GetStrings2 or GetStrings3 just want to call it with specific parameters for the consumer's convenience.

GetStrings2 warns `CS1998` (async method but no awaits)

GetStrings3 warns `CS8424` (the enumerator cancellation attribute has no effect because it's not async)

It seems to me that at least *one* of these should work!
</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38200</IssueID>
    <RepoID>1</RepoID>
    <Title>Exclude textual changes made in unchangeable document</Title>
    <Description>This is my third attempt of fixing the feedback below (see #38070 for another approach)
https://developercommunity.visualstudio.com/content/problem/682938/csharperenametrackingcodefixprovider-encountered-a.html 

The root cause is symbol finder returns all the references for a given symbol, including those from unchangeable document (i.e. *.g.cs file from Razor). As a result, refactoring uses "find reference" would end up fixing those references and cause workspace to throw when the change is being applied.

This added a new helper method that simply drop all changes made in those unchangeable document. And call this helper before refactoring returns final solution.

Affected refactoring:
1. rename
2. sync/change namespace (#37521)
3. change signature

Note that this change only avoids the crash. User code will be left in a broken state, which is really undesirable, but there's not much we can do until Razor provides us a way to modify closed files.</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38199</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip flaky integration test</Title>
    <Description>
    </Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38198</IssueID>
    <RepoID>1</RepoID>
    <Title>Flaky integration test CSharpCodeActions.ConfigureCodeStyleOptionValueAndSeverity</Title>
    <Description>This integration was recently added, and it seems it fails intermittently on quite a few integration test runs.

```
System.Exception : The following expected item(s) not found in sequence:\r\nConfigure IDE0059 code style\r\nunused__local__variable\r\ndiscard__variable\r\nConfigure IDE0059 severity\r\nNone\r\nSilent\r\nSuggestion\r\nWarning\r\nError\r\nSuppress IDE0059\r\nin Source\r\nin Suppression File\r\nin Source (attribute)\r\n\r\nActual items:\r\nUse discard '__'\r\nPreview changes\r\nDocument\r\nProject\r\nSolution\r\nUse explicit type instead of 'var'\r\nPreview changes\r\nDocument\r\nProject\r\nSolution\r\nConfigure or Suppress issues\r\nConfigure IDE0059 code style\r\nunused__local__variable\r\nPreview changes\r\ndiscard__variable\r\nPreview changes\r\nConfigure IDE0059 severity\r\nNone\r\nPreview changes\r\nSilent\r\nPreview changes\r\nSuggestion\r\nPreview changes\r\nWarning\r\nPreview changes\r\nError\r\nPreview changes\r\nSuppress IDE0059\r\nin Source\r\nPreview changes\r\nDocument\r\nProject\r\nSolution\r\nin Suppression File\r\nPreview changes\r\nDocument\r\nProject\r\nSolution\r\nin Source (attribute)\r\nPreview changes\r\nDocument\r\nProject\r\nSolution\r\nConfigure IDE0008 code style\r\ncsharp__style__var__elsewhere\r\ntrue\r\nPreview changes\r\nfalse\r\nPreview changes\r\ncsharp__style__var__for__built__in__types\r\ntrue\r\nPreview changes\r\nfalse\r\nPreview changes\r\ncsharp__style__var__when__type__is__apparent\r\ntrue\r\nPreview changes\r\nfalse\r\nPreview changes\r\nConfigure IDE0008 severity\r\nNone\r\nPreview changes\r\nSilent\r\nPreview changes\r\nSuggestion\r\nPreview changes\r\nWarning\r\nPreview changes\r\nError\r\nPreview changes\r\n
```

The test will be disabled and this issue tracks fixing and re-enabling it.</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38197</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38196</IssueID>
    <RepoID>1</RepoID>
    <Title>When a synthetic ref local is captured, variables referenced in its initializer must be captured too</Title>
    <Description>Fixes #36443</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38195</IssueID>
    <RepoID>1</RepoID>
    <Title>Field symbol from symbol tree and operation tree fail Equals check in presence of nullable enable</Title>
    <Description>Originally reported https://github.com/dotnet/roslyn-analyzers/issues/2776, which seems to be a breaking change in analyzer behavior in presence of #nullable enable. I have created an isolated IOperation unit test:

```csharp
        [CompilerTrait(CompilerFeature.IOperation, CompilerFeature.NullableReferenceTypes)]
        [Fact]
        public void NullableFieldReference()
        {
            var compWithoutNullable = CreateCompilation(@"
class C&lt;T&gt;
{
    private C&lt;T&gt; _field;
    public static void M(C&lt;T&gt; p)
    {
        _ = p._field;
    }
}");
            var compWithNullable = CreateCompilation(@"
#nullable enable
class C&lt;T&gt;
{
    private C&lt;T&gt;? _field;
    public static void M(C&lt;T&gt; p)
    {
        _ = p._field;
    }
}", options: WithNonNullTypesTrue());


            testCore(compWithoutNullable); // Passes
            testCore(compWithNullable); // Fails

            static void testCore(CSharpCompilation comp)
            {
                var syntaxTree = comp.SyntaxTrees[0];
                var model = comp.GetSemanticModel(syntaxTree);
                var root = syntaxTree.GetRoot();
                var classDecl = root.DescendantNodes().OfType&lt;ClassDeclarationSyntax&gt;().Single();
                var classSym = (INamedTypeSymbol)model.GetDeclaredSymbol(classDecl);
                var fieldSym = classSym.GetMembers("_field").Single();

                var methodDecl = root.DescendantNodes().OfType&lt;MethodDeclarationSyntax&gt;().Single();
                var methodBlockOperation = model.GetOperation(methodDecl);
                var fieldReferenceOperation = methodBlockOperation.Descendants().OfType&lt;IFieldReferenceOperation&gt;().Single();
                Assert.True(fieldSym.Equals(fieldReferenceOperation.Field));
            }
        }
```</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38194</IssueID>
    <RepoID>1</RepoID>
    <Title>Add ETW events for recovering syntax trees</Title>
    <Description>Closes #37477

The steps for manually recording traces have already been updated to enable the provider.

![image](https://user-images.githubusercontent.com/1408396/63475983-fdaf2180-c433-11e9-9b55-b603c778c9fb.png)
</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38193</IssueID>
    <RepoID>1</RepoID>
    <Title>Members marked [MaybeNull] should not get uninitialized field warnings</Title>
    <Description>Found when triaging #37987

It looks like in #37507 we added some tests which verify the uninitialized field warnings on members marked `[MaybeNull]`. Today the behavior is that a generic type field with a `[MaybeNull]` attribute can still get WRN_UninitializedNonNullableField warnings.

A generic field marked `[MaybeNull]` will never be a non-nullable reference type, though, so it seems like we should not give uninitialized field warnings in such cases.

```cs
using System.Diagnostics.CodeAnalysis;

class C&lt;T&gt;
{
    [MaybeNull]
    public T field; // currently gives WRN_UninitializedNonNullableField
}
```

Here's a test showing the current behavior:
https://github.com/dotnet/roslyn/blob/2802137e22c19153028c5565f6350cbdee9c0060/src/Compilers/CSharp/Test/Semantic/Semantics/UninitializedNonNullableFieldTests.cs#L819
</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38192</IssueID>
    <RepoID>1</RepoID>
    <Title>XAML code behind file (.g.i.cs) not auto-updated when editing the xaml file in IDE</Title>
    <Description>**Version Used**: latest 16.3 dogfood build

**Steps to Reproduce**:

1. Create a C# WPF application (.netcore or .netframework)
2. Add a new `TextBlock` control from Toolbox
3. Add a new `IsVisibleChanged` event handler to the text block:
![image](https://user-images.githubusercontent.com/10605811/63474139-d6088b00-c42c-11e9-8edb-0f727a6079af.png)
4. This should auto-generate `TextBlock_IsVisibleChanged` handler in xaml.cs file and hook it up to the control
5. Open the .xaml.cs file nested under the xaml file and invoke Find All References on `TextBlock_IsVisibleChanged`

**Expected Behavior**:
`TextBlock_IsVisibleChanged` reference in code behind file (MainWindow.g.i.cs) is found and the method is not flagged as unused private member (IDE0051)

**Actual Behavior**:
Find All References shows no references and the unused members analyzers also flags the added event handler as unused
![image](https://user-images.githubusercontent.com/10605811/63474226-35669b00-c42d-11e9-82f2-5e080012d673.png)

6. Build the project and invoke Find All References on `TextBlock_IsVisibleChanged`. This time you see the Expected Behavior and the reference to the method in code behind file is found and the IDE0051 is also not generated.
![image](https://user-images.githubusercontent.com/10605811/63474588-8aef7780-c42e-11e9-85d1-f2e0bf32806c.png)

7. If you again edit the xaml file and add a new handler or manually change the name of any existing handler, the incorrect behavior in step 5 again repros until you build the project again to regenerate the up-to-date code behind xaml file.</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38191</IssueID>
    <RepoID>1</RepoID>
    <Title>[NotNullWhen(true)] doesn't match [MaybeNullWhen(false)]—bug? Which one is right?</Title>
    <Description>**Version Used**: VS 16.3 Preview 2

I don't know which is right, `[NotNullWhen(true)]` or `[MaybeNullWhen(false)]`. Either way I have to use the `!` operator to silence a warning.

And isn't it a bug that they aren't considered equivalent?

See standalone repro below.

## Setup 

Given this NRT adaptation of real-world code:

```cs
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

public sealed class CombiningAggregator&lt;T&gt;
{
    public delegate bool TryCombineCalculator(
        T first,
        T second,
        [MaybeNullWhen(false)] out T combined);

    private readonly TryCombineCalculator calculator;

    // I have separate questions about this, but they can be ignored for the purpose of this
    // issue.
    [AllowNull, MaybeNull] // Still requires the initializer which then shows as redundant
    private T lastValue = default;

    private bool hasLastValue;

    public CombiningAggregator(TryCombineCalculator calculator)
    {
        this.calculator = calculator ?? throw new ArgumentNullException(nameof(calculator));
    }

    public IReadOnlyList&lt;T&gt; Process(IReadOnlyList&lt;T&gt; values)
    {
        if (values == null) throw new ArgumentNullException(nameof(values));

        var r = new List&lt;T&gt;();

        using (var en = values.GetEnumerator())
        {
            if (!hasLastValue)
            {
                if (!en.MoveNext()) return r;
                lastValue = en.Current;
                hasLastValue = true;
            }

            while (en.MoveNext())
            {
                var next = en.Current;
                if (calculator.Invoke(lastValue, next, out var combined))
                {
                    lastValue = combined;
                }
                else
                {
                    r.Add(lastValue);
                    lastValue = next;
                }
            }
        }

        return r;
    }

    public IReadOnlyList&lt;T&gt; Flush()
    {
        if (!hasLastValue) return Array.Empty&lt;T&gt;();
        var r = new[] { lastValue };
        lastValue = default!; // And this
        hasLastValue = false;
        return r;
    }
}
```


## Attempt 1: `[NotNullWhen(true)]`

How should TryCombineStrings be annotated? It seemed `[NotNullWhen(true)] out string? combined` was the right thing to do because that's what I would do if it was a standalone method.

But Roslyn says that it doesn't match `[MaybeNullWhen(false)] out string combined` even though it seems like they should be exactly equivalent:

```cs
using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

// Demonstration code, using string instead of domain class
public static class Program
{
    public static void Main()
    {
        // ⚠ CS8622 Nullability of reference types in type of parameter 'combined' of 'bool
        // Program.TryCombineStrings(string first, string second, out string? combined)'
        // doesn't match the target delegate 'CombiningAggregator&lt;string&gt;.TryCombineCalculator'
        //                                               ↓
        var aggregator = new CombiningAggregator&lt;string&gt;(TryCombineStrings);

        // Prints: AABB
        Console.WriteLine(string.Join(", ", aggregator.Process(new[] { "AA", "BB", "cc" })));

        // Prints: cc, DD
        Console.WriteLine(string.Join(", ", aggregator.Process(new[] { "DD", "ee", "ff" })));

        // Prints: eeff
        Console.WriteLine(string.Join(", ", aggregator.Flush()));
    }

    private static bool TryCombineStrings(
        string first,
        string second,
        [NotNullWhen(true)] out string? combined)
    {
        if (first.All(char.IsUpper) == second.All(char.IsUpper))
        {
            combined = first + second;
            return true;
        }

        combined = null;
        return false;
    }
}
```

## Attempt 2: `[MaybeNullWhen(false)]`

```cs
using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

// Demonstration code, using string instead of domain class
public static class Program
{
    public static void Main()
    {
        var aggregator = new CombiningAggregator&lt;string&gt;(TryCombineStrings);

        // Prints: AABB
        Console.WriteLine(string.Join(", ", aggregator.Process(new[] { "AA", "BB", "cc" })));

        // Prints: cc, DD
        Console.WriteLine(string.Join(", ", aggregator.Process(new[] { "DD", "ee", "ff" })));

        // Prints: eeff
        Console.WriteLine(string.Join(", ", aggregator.Flush()));
    }

    private static bool TryCombineStrings(
        string first,
        string second,
        [MaybeNullWhen(false)] out string combined)
    {
        if (first.All(char.IsUpper) == second.All(char.IsUpper))
        {
            combined = first + second;
            return true;
        }

        // ⚠ CS8625 Cannot convert null literal to non-nullable reference type.
        //         ↓
        combined = null;
        return false;
    }
}
```

## Attempt 3: Generic instantiation with `string?` instead of `string`

This is all over the wrong thing to do. Null values should never be sent into `TryCombineStrings` and they should never come out of `CombiningAggregator`.

In this demonstration, null strings are happening to not cause any warnings because the `.All` extension method and `string.Join` accept nulls. In the real-world project, there are a bunch of warnings because nothing was supposed to be nullable.

```cs
using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

// Demonstration code, using string instead of domain class
public static class Program
{
    public static void Main()
    {
        var aggregator = new CombiningAggregator&lt;string?&gt;(TryCombineStrings);

        // ⚠ Process and Flush return IReadOnlyList&lt;string?&gt; – SHOULD NOT BE NULLABLE

        // Prints: AABB
        Console.WriteLine(string.Join(", ", aggregator.Process(new[] { "AA", "BB", "cc" })));

        // Prints: cc, DD
        Console.WriteLine(string.Join(", ", aggregator.Process(new[] { "DD", "ee", "ff" })));

        // Prints: eeff
        Console.WriteLine(string.Join(", ", aggregator.Flush()));
    }

    private static bool TryCombineStrings(
        string? first, // ⚠ SHOULD NOT BE NULLABLE
        string? second, // ⚠ SHOULD NOT BE NULLABLE
        [NotNullWhen(true)] out string? combined)
    {
        if (first.All(char.IsUpper) == second.All(char.IsUpper))
        {
            combined = first + second;
            return true;
        }

        combined = null;
        return false;
    }
}
```

Shouldn't attempt 1 just work? If not, why not? You'd never write attempt 2 if you were only calling the method directly, right?

Is the original, pre-C# 8 code flawed to begin with, and that's why I'm running into this problem?</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38190</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable analysis doesn't propagate explicit null-check correctly</Title>
    <Description>Nullable analysis doesn't propagate that explicit null check of `a?.b != null` implies `a != null`. It works correctly if explicit null check is replaced with pattern matching.

**Version Used**: 
Current release/16.4-preview-1, master a08336, latest Int Preview

**Steps to Reproduce**:

```csharp
public class A
{
    public A a;
}
public class B : A { }

#nullable enable
public class Program
{
    public void foo(A a)
    {
        if (a is B b)
        {
            var bb = b?.a as B;
            if (bb != null)
            {
                _ = b.a.ToString();     // potentially nullable-dereference warning (wrong)
            }
        }
    }

    public void foo2(A a)
    {
        if (a is B b)
        {
            if (b?.a is B bb)
            {
                _ = b.a.ToString();     // no warning (correct)
            }
        }
    }
}
```

Or see [warnings here](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABAzAAmwCZ8BBAWACgBvK/ewg0/CAbioF8q9CSAhfCDL5q+LpSoBiAHYBXADbyIweXHxxpy1dwLFCARgDsVWpQaNCAFnwAzAPZ2AFMwgBKOg1PnzANwgJ8YCD8AF4WADoIAH5Ilih8PnYzb3oASxt8RyDgfABCMLlFd2SUrxTvAH1QiIhwgBU7AGUYBFTpAHNHV1ZvAHpe/AAHO3hpGFSIRQBPfEKlFTgAWhREOBtV6QBjNQB3f2k29sydhDsO4vKxD3pxa4tsa3s7ImcWC88783TM2ujY1PiAmy71Kn3KVTCv3qTRahy6PXM/VmdnwewQBw6mU2dgQCDgmxgIO84nM4g4QA===)

**Expected Behavior**:
- No warnings in both cases.

**Actual Behavior**:
- Warning in first case.
</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38189</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip uninitialized field warning for generic constrained to nullable reference type</Title>
    <Description>Closes #37987

I wasn't able to find an API that did quite what I want, so I ended up adding it to TypeWithAnnotations. I would like to know if there's a better or already existing way to answer the question it is answering.</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38188</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable annotations refactoring helpers &amp; bits and pieces elsewhere</Title>
    <Description>Based on #38166</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38187</IssueID>
    <RepoID>1</RepoID>
    <Title>Add infromation to bound nodes for converted tuples and switches to determine if they were target-typed.</Title>
    <Description>Fixes #37193
These changes are internal only, so no behavioral (test) changes are expected.
</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38186</IssueID>
    <RepoID>1</RepoID>
    <Title>Split state for boolean constants</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38124 (`Debug.Assert(false)`)</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38185</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove the 7.3 languageversion from the BindSymbolInOtherFile test</Title>
    <Description>Ran locally both specifying languageversion="8" and not specifying a languageversion and the test passed.

Resolves #37097</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38184</IssueID>
    <RepoID>1</RepoID>
    <Title>Change unused parameters analyzer configuration to analyze generated …</Title>
    <Description>…code

This fixes false reports for unused parameters of event handlers that are referenced/invoked from xaml generated code files. Fixes #37483</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38183</IssueID>
    <RepoID>1</RepoID>
    <Title>BadImageFormatException when calling Type.GetGenericTypeDefinition</Title>
    <Description>_From @IngvarKofoed on Wednesday, August 21, 2019 10:43:59 AM_

# General

Visual Studio 2019, 16.3.0 Preview 2.0
dotnet sdk: 3.0.100-preview8-013656
Windows 10 Enterprise x64, 1803

If I run the code below with debugger from Visual Studio, I get this exception:
```
System.BadImageFormatException: 'An attempt was made to load a program with an incorrect format. (0x8007000B)'
```

Here is the code
```
using System;

namespace StrangeError
{
    class Program
    {
        static void Main(string[] args)
        {
            GetResult&lt;Boxed&lt;int&gt;&gt;();
        }

        private static void GetResult&lt;T&gt;()
            where T : class
        {
            if (typeof(T).IsGenericType &amp;&amp; typeof(T).GetGenericTypeDefinition() == typeof(Boxed&lt;&gt;))
            {
                throw new NotImplementedException("The exceptions happens before this line");
            }

            throw new NotImplementedException("With the current code, this line is never reached");
        }
    }

    public class Boxed&lt;T&gt;
        where T : struct // Works if this constraint is removed
    {
        public Boxed(T value)
        {
            Value = value;
        }

        public T Value { get; }

        public bool Equals(Boxed&lt;T&gt;? other) =&gt;
            false; // Implementation is not important, but this method has to be here

        public override bool Equals(object? obj) =&gt;
            // false; Works if this is returned
            // true; Works if this is returned
            Equals(obj as Boxed&lt;T&gt;);

        public override int GetHashCode() =&gt;
            Value.GetHashCode();
    }
}
```

It seems to be something with the `Equals` method, because it has to make a call to the specific `Equals` method. Also removing the generic type constraint on `Boxed` also make the code work again.

And here is the project config. 
```
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
    &lt;NullableContextOptions&gt;enable&lt;/NullableContextOptions&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
```

The code do not throw the `BadImageFormatException` if I remove the `Nullable` and `NullableContextOptions` elements.

Just let me know if you need any other informations :)

EDIT:
Implementing the `Equals` method this way make the code run as expected.
```
public override bool Equals(object? obj)
{
    if (obj is Boxed&lt;T&gt; boxed)
    {
        return Equals(boxed.Value, Value);
    }
    else
    {
        return false;
    }
}
```

_Copied from original issue: dotnet/core#3225_</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38182</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix problems caused by hidden sequence point when a switch expression is a closure scope</Title>
    <Description>Trial approach to fixing problems caused by hidden sequence point when a switch expression is a closure scope.  I've added a failing test to demonstrate that this approach is not quite correct.

* Compiler shouldn't emit hidden sequence points on display class creation instruction in expression context
Fixes #37237

* Compiler emits incorrect EnC closure data to PDB for nested switch expressions
Fixes #37232

* Expression bodied method whose expression is a switch expression is missing debug info
Fixes #37261
</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38181</IssueID>
    <RepoID>1</RepoID>
    <Title>provide signature help for local functions inside static method</Title>
    <Description>The following scenario is not working:

```
   public async Task TestLocalFunctionInStaticMethod() 
         { 
             var markup = @" 
 class C 
 { 
     static void M() 
     { 
         void Local() { } 
  
         Local($$); 
     } 
 }"; 
  
             var expectedOrderedItems = new List&lt;SignatureHelpTestItem&gt; { new SignatureHelpTestItem("void Local()") }; 
  
             await TestAsync(markup, expectedOrderedItems); 
         } 
```

Here is the discussion: https://github.com/dotnet/roslyn/issues/38074#issuecomment-522800766

It seems that the issue is in the semantic model. We need to use 
https://github.com/dotnet/roslyn/blob/5551fad9651b91dcc64a965cfd93e1da4f386273/src/Features/CSharp/Portable/SignatureHelp/InvocationExpressionSignatureHelpProvider_MethodGroup.cs#L56-L60

`RequiresInstanceReceiver` instead of `!IsStatic` but it is unavailable. See https://github.com/dotnet/roslyn/pull/38117#issuecomment-523613605

</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38180</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove non-fatal watson for analyzer errors</Title>
    <Description>Analyzer errors (and analyzer driver errors) should be reported as AD0001 (or similar), and not produce a non-fatal watson. The NFW reporting process can hang the IDE process leaving the user unable to recover from an analyzer failure, even to the point of determining that the failure location was within an analyzer.</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38179</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38178</IssueID>
    <RepoID>1</RepoID>
    <Title>"Add null check" adds unreachable null check</Title>
    <Description>**Version Used**: 
.NET Core SDK (reflecting any global.json):
 Version:   3.0.100-preview8-013656
 Commit:    8bf06ffc8d

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.17763
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.0.100-preview8-013656\

Host (useful for support):
  Version: 3.0.0-preview8-28405-07
  Commit:  d01b2fb7bc

**Steps to Reproduce**:
```csharp
public static class MonadicNullable
{
    public static U? Apply&lt;T, U&gt;(this T? nullable, Func&lt;T, U&gt; applicator)
        where T : struct
        where U : struct
    {
        if (nullable is null)
            return null;
        else
            return applicator(nullable.Value);
    }
}
```
**Expected Behavior**:
```csharp
public static U? Apply&lt;T, U&gt;(this T? nullable, Func&lt;T, U&gt; applicator)
    where T : struct
    where U : struct
{
    if (applicator is null)
        throw new ArgumentNullException(nameof(applicator));

    if (nullable is null)
        return null;
    else
        return applicator(nullable.Value);    
}
```
**Actual Behavior**:
```csharp
public static U? Apply&lt;T, U&gt;(this T? nullable, Func&lt;T, U&gt; applicator)
    where T : struct
    where U : struct
{
    if (nullable is null)
        return null;
    else
        return applicator(nullable.Value);
    if (applicator is null) //CS1062 : Unreachable code detected
        throw new ArgumentNullException(nameof(applicator));
}
```
The added null check has 2 issues
1. It is placed on a dead branch of code 
2. It is paced after the argument has already been dereferenced.

See also #38093 </Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38177</IssueID>
    <RepoID>1</RepoID>
    <Title>Prevent static local functions from capturing local functions</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38129.

Also fixes a typo in a comment that I found when looking for tests that check for CS8421.</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38176</IssueID>
    <RepoID>1</RepoID>
    <Title>VB: Add tests for consuming operators defined within interfaces.</Title>
    <Description>Closes #35998. Closes #35999.</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38175</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Revert "Adding Null Checks For All Parameters""</Title>
    <Description>This reverts the PR https://github.com/dotnet/roslyn/pull/38049, therefore adds back the new "Adding Null Checks For All Parameters" for 16.4.

@dotnet/roslyn-ide </Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38174</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable source link validation</Title>
    <Description>This fixes our official build so that we can participate in source link validation. Here is an official build validating the changes.

https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2961341&amp;view=results</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38173</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn doens't verify inferred nullability of variables passed in delegate constructors</Title>
    <Description>**Version Used**: 

```
branch: release/dev16.4-preview1

commit aef5f7afb9208964afe7d0a2b4536b735649b347 (HEAD -&gt; release/dev16.4-preview1, origin/release/dev16.4-preview1)
Merge: 7c5e8fdf0b c4895b82cd
Author: Petr Hou&lt;C5&gt;&lt;A1&gt;ka &lt;t-pehouk@microsoft.com&gt;
Date:   Tue Aug 20 23:33:36 2019 -0700

    Merge pull request #37884 from petrroll/move-refa-to-helpers6

    Move some ComputeRefactoringsAsync to common helpers 6/n
```

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
class C
{
  static void Main()
  {
      M1("");
  }
  static void M1(string? s)
  {
    if (s == null) return;

    hell:
    var d1 = GetD(s);
    var d2 = new D&lt;string&gt;(d1);
    d2().ToString();
    s = null;
    goto hell;
  }

  static D&lt;T&gt; GetD&lt;T&gt;(T t) =&gt; () =&gt; t;
}

delegate T D&lt;T&gt;();
```

**Expected Behavior**:
` CS8621: Nullability of reference types in return type of 'string? D&lt;string?&gt;.Invoke()' doesn't match the target delegate 'D&lt;string&gt;'.` for `new D&lt;string&gt;(d1)`

**Actual Behavior**:
No warnings are reported. The program crashes at runtime with a `NullReferenceException`</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38172</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190823.6
- **Date Produced**: 8/23/2019 5:47 PM
- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19423.6

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)







</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>24/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38171</IssueID>
    <RepoID>1</RepoID>
    <Title>Passing variables to delegate constuctors should update their state to non-nullable</Title>
    <Description>**Version Used**: 

```
commit aef5f7afb9208964afe7d0a2b4536b735649b347 (HEAD -&gt; release/dev16.4-preview1, origin/release/dev16.4-preview1)
Merge: 7c5e8fdf0b c4895b82cd
Author: Petr Hou&lt;C5&gt;&lt;A1&gt;ka &lt;t-pehouk@microsoft.com&gt;
Date:   Tue Aug 20 23:33:36 2019 -0700

    Merge pull request #37884 from petrroll/move-refa-to-helpers6

    Move some ComputeRefactoringsAsync to common helpers 6/n
```

**Steps to Reproduce**:

```cs
#nullable enable
using System;

class C
{
  static void M(Action? a)
  {
    var d = new D(a); // CS8601: Possible null reference assignment; correct
    a(); // CS8602: Dereference of a possibly null reference; incorrect
  }
}

delegate void D();
```

**Expected Behavior**:
No warnings for `a()`. If `a` was null an exception would've been thrown at `new D(a)`.

**Actual Behavior**:
`CS8602: Dereference of a possibly null reference` is reported for `a()`

I believe updating the argument's slot state was forgotten when fixing https://github.com/dotnet/roslyn/issues/37984. /cc @RikkiGibson </Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38170</IssueID>
    <RepoID>1</RepoID>
    <Title>Cast to a non-nullable value type should update variable state to non-null</Title>
    <Description>**Version Used**: 

Branch master (13 Aug 2019)
Latest commit a08336 by David:
Merge pull request #37916 from dibarbet/partial_load_str

Update partial load dialog string to better match task center.

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C
{
  void M(II? i)
  {
    S s = (S) i; // CS8605: Unboxing a possibly null value.
    i.ToString(); // CS8602: Dereference of a possibly null reference.
  }
}

interface II {}
struct S : II {}
```

**Expected Behavior**:
`CS8602` is not reported for `i.ToString()`. If the variable contains a null value an exception will be thrown from the cast.

**Actual Behavior**:
Roslyn repots `CS8602: Dereference of a possibly null reference.` for the dereference of `i` in the code above.</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38169</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposal: Pattern matching using notnull keyword</Title>
    <Description>The notnull is only used for type constraint for now. But I think it has more potential in pattern matching:

# 1. Null check
```csharp
if (!(obj is null)) {
    // obj is not nullable in this block
}
```
should be able to be written as:
```csharp
if (obj is notnull) { // notnull can't have a declaration
    // obj is not nullable in this block
}
```

# 2. Pattern matching
In if statement:
```csharp
string? s = ...
if (s is notnull) {
    // s is string here
} else {
    // s is string? here
}
```
In switch statement:
```csharp
List&lt;string&gt;? list = ...
switch (list) {
    case SpecialClassDerivedFromList&lt;string&gt; spc:
        // list is List&lt;string&gt;? here
        break;
    case notnull: // notnull can't have a declaration
        // list is List&lt;string&gt; here
        break;
    case null:
        // list is List&lt;string&gt;? here
        break;
    default:
        // list is List&lt;string&gt;? here
        break;
}
```</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38168</IssueID>
    <RepoID>1</RepoID>
    <Title>NRT annotating interface breaks extension method resolution</Title>
    <Description>**Version Used**: 3.3.0-beta3-19415-01

**Steps to Reproduce**:

Given:

```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;PackageReference Include="Microsoft.Net.Compilers" Version="3.3.0-beta3-19415-01" /&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
```

This code doesn't compile, giving:

&gt; CS1061: 'C' does not contain a definition for 'Extension' and no accessible extension method 'Extension' accepting a first argument of type 'C' could be found (are you missing a using directive or an assembly reference?)

```c#
static class P
{
    static void M(C c)
    {
        c.Extension();
        //^^^^^^^^^ CS1061
    }

    public static void Extension&lt;T&gt;(this I&lt;T&gt; source) =&gt; throw null;
}

class C : I&lt;object&gt;, I {}

interface I&lt;T&gt; {}

#nullable enable
interface I : I&lt;object&gt; {}
#nullable disable
```

I found three different ways to make it compile:

1. Remove the `#nullable enable` pragma, or
2. Move the `#nullable enable` pragma up to include both `I&lt;T&gt;` and `C`, or
2. Remove `I&lt;object&gt;` from the interface list of `C` (it's inherited transitively anyway).

**Expected Behavior**:

No compile error after annotating interface `I`.

**Actual Behavior**:

Compilation breaks due to annotation.</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38167</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex highlight in Regex.IsMatch</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Community 2019
Version 16.2.0
C# Tools   3.2.0-beta4-19359-03+15b43b33901c88f68ef43f8314b5a2457716780d

**Steps to Reproduce**:

![image](https://user-images.githubusercontent.com/3105979/63408600-aa71aa80-c404-11e9-959f-435460e08403.png)



**Expected Behavior**: regex highlighted in IsMatch

**Actual Behavior**:  regex is not highlighted in IsMatch
</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38166</IssueID>
    <RepoID>1</RepoID>
    <Title>Cleanup &amp; rework of `IsOnTypeHeader` usage</Title>
    <Description>~Based on: #37884~
Work for: #35525</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38165</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>24/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38164</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38163</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>25/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38162</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38161</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38160</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into master.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38159</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Generate Equals and GetHashCode to handle nullable members</Title>
    <Description>Fixes #37913</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38158</IssueID>
    <RepoID>1</RepoID>
    <Title>The current TransactionScope is already complete. Near Microsoft.VisualStudio.GraphModel.GraphTransactionScope.. ctor(Transaction transaction)</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/698020/the-current-transactionscope-is-already-complete-n.html)._

---

```
at System.Transactions.Transaction.get_Current()
   at Microsoft.VisualStudio.GraphModel.GraphTransactionScope.. ctor(Transaction transaction)
   at Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphQueryManager.ProcessGraphTasks(GraphBuilder[] graphBuilders, IGraphContext context)
   at Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphQueryManager.&amp;lt;&amp;gt;c__DisplayClass14_0. &amp;lt;PopulateContextGraphAsync&amp;gt;b__1(Task`1 t)
   at Roslyn.Utilities.TaskExtensions.&amp;lt;&amp;gt;c__DisplayClass6_0`1. &amp;lt;SafeContinueWith&amp;gt;b__0(Task antecedent)
   at Roslyn.Utilities.TaskExtensions.&amp;lt;&amp;gt;c__DisplayClass3_0. &amp;lt;SafeContinueWith&amp;gt;g__continuationFunction|0(Task antecedent)
   at Roslyn.Utilities.TaskExtensions.&amp;lt;&amp;gt;c__DisplayClass7_0`1. &amp;lt;SafeContinueWith&amp;gt;g__outerFunction|0(Task t)

[Managed to Native Transition]	
&amp;gt;	Microsoft.CodeAnalysis.Workspaces.dll! Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception exception, System.Action&amp;lt;System.Exception&amp;gt; handler)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll! Roslyn.Utilities.TaskExtensions.SafeContinueWith.__outerFunction|0(System.Threading.Tasks.Task t)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	System.Transactions.dll! System.Transactions.Transaction.Current.get()	Unknown
 	Microsoft.VisualStudio.GraphModel.dll! Microsoft.VisualStudio.GraphModel.GraphTransactionScope.GraphTransactionScope(System.Transactions.Transaction transaction)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll! Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphQueryManager.ProcessGraphTasks(Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphBuilder[] graphBuilders, Microsoft.VisualStudio.GraphModel.IGraphContext context)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll! Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphQueryManager.PopulateContextGraphAsync.AnonymousMethod__1(System.Threading.Tasks.Task &amp;lt;Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphBuilder[]&amp;gt; t)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll! Roslyn.Utilities.TaskExtensions.SafeContinueWith.AnonymousMethod__0(System.Threading.Tasks.Task antecedent)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll! Roslyn.Utilities.TaskExtensions.SafeContinueWith.__continuationFunction|0(System.Threading.Tasks.Task antecedent)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll! Roslyn.Utilities.TaskExtensions.SafeContinueWith.__outerFunction|0(System.Threading.Tasks.Task t)	Unknown
 	mscorlib.dll! System.Threading.Tasks.ContinuationResultTaskFromTask&amp;lt;bool&amp;gt;. InnerInvoke()	Unknown
 	mscorlib.dll! System.Threading.Tasks.Task.Execute()	Unknown
 	mscorlib.dll! System.Threading.Tasks.Task.ExecutionContextCallback(object obj)	Unknown
 	mscorlib.dll! System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll! System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll! System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)	Unknown
 	mscorlib.dll! System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)	Unknown
 	mscorlib.dll! System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()	Unknown
 	mscorlib.dll! System.Threading.ThreadPoolWorkQueue.Dispatch()	Unknown
 	mscorlib.dll! System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()	Unknown
 	[Native to Managed Transition]	
 	kernel32.dll!74f7343d()	Unknown
 	[Frames below may be incorrect and/or missing, no symbols loaded for kernel32.dll]	Unknown
 	ntdll.dll!77239802()	Unknown
 	ntdll.dll!772397d5()	Unknown
```

---
### Original Comments

#### Ace Olszowka on 8/16/2019, 00:50 PM: 

(private comment, text removed)
#### Visual Studio Feedback System on 8/18/2019, 11:58 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 8/20/2019, 01:27 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38157</IssueID>
    <RepoID>1</RepoID>
    <Title>Symbols/Namespaces not being resolved</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/700665/symbolsnamespaces-not-being-resolved.html)._

---
&lt;p&gt;I’m working through a heap of old code, refactoring it, changing it a little. But It’s very difficult to find where the problems are because Visual Studio keeps forgetting that it has already valided files. And is refusing to go through and validate them. For example, out of the 138 errors, I can see some that say …&lt;/p&gt;
&lt;p&gt;The type or namespace name ‘EntityComponentSystem’ could not be found (…)&lt;/p&gt;
&lt;p&gt;So i go through and open those files. Visual studio updates and acknowledges that there’s nothing wrong with those files. The types are found. This is the case for probably 99% of the errors listed in the error list. They aren’t errors at all. So I have to individually go through and open every file just so VS can parse the file and see that there’s nothing wrong.  This isn’t a great experience.&lt;br&gt;&lt;br&gt;Just changed a few more things. Hit build, now instead of 100 errors I have 332 errors, clicking through them from the top I see that there are one or two files that do actually have errors but mostly these files having nothing wrong with them. Making it very hard to narrow in on the actual issues.&lt;/p&gt;

---
### Original Comments

#### Visual Studio Feedback System on 8/20/2019, 01:50 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 8/20/2019, 03:20 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions

#### Gavin Williams solved on 8/20/2019, 01:16 AM, 0 votes: 

&lt;p&gt;Clean Solution from the Build menu helped a lot.&lt;/p&gt;
</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38156</IssueID>
    <RepoID>1</RepoID>
    <Title>Diagnostic for constant and static method in embedded interface</Title>
    <Description>The diagnostic that we produce when attempting to embed an interface that contains a constant or a static method (`Type '{0}' cannot be embedded because it has a non-abstract member. Consider setting the 'Embed Interop Types' property to false.`) is confusing and does not clearly describe what is wrong.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38155</IssueID>
    <RepoID>1</RepoID>
    <Title>No specification for embedded interfaces</Title>
    <Description>I cannot find a specification for the behavior of nopia (embedded interfaces).  We need such a specification both for consumers of the compilers and for reviewers of the compiler source base.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38154</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust sequence point on await foreach and using declaration</Title>
    <Description>Highlight the `using` and `await` in `await foreach (...)`, `using var x = ...` and `await using var x = ...`.

Fixes https://github.com/dotnet/roslyn/issues/37402</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38153</IssueID>
    <RepoID>1</RepoID>
    <Title>Show nullable annotations in tuple signature help</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/37252</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38152</IssueID>
    <RepoID>1</RepoID>
    <Title>Include nullability in symbol comparison for if SymbolsAreCompatibleCore</Title>
    <Description>Fixes #31849</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38151</IssueID>
    <RepoID>1</RepoID>
    <Title>Disabling Mono leg</Title>
    <Description>Latest Mono nightly builds appear to have broken serialization during
remoting across AppDomain instances. That is pretty fundamental to how
we test. Temporarily disabling the Mono leg until this can be fixed.

Tracking Mono Issue: https://github.com/mono/mono/issues/16373</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38150</IssueID>
    <RepoID>1</RepoID>
    <Title>Disabling Mono leg</Title>
    <Description>Latest Mono nightly builds appear to have broken serialization during
remoting across AppDomain instances. That is pretty fundamental to how
we test. Temporarily disabling the Mono leg until this can be fixed.

Tracking Mono Issue: https://github.com/mono/mono/issues/16373</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38149</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert Get/Set to properties should give warning if possible Set method wasn't converted</Title>
    <Description>In #37969 we had this updated so Set methods with mismatching nullability aren't converted so we don't throw away a potentially important nullability difference. But we probably should warn the user in this case, or maybe give them an override to just do it anyways.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38148</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix check of BinaryOperatorKind</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/25231

Note: I don't think the change is observable at the moment.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38147</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure synthesized closure method is static for static local function</Title>
    <Description>Fixes #38143</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38146</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable a deconstruction test</Title>
    <Description>Closes https://github.com/dotnet/roslyn/issues/13716</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38145</IssueID>
    <RepoID>1</RepoID>
    <Title>Questionable nullability in ISymbolExtensions.RewriteInheritDoc</Title>
    <Description>https://github.com/dotnet/roslyn/pull/37999/commits/249e314f4f880a0c4e3735ee18711309d4d78e29#diff-c7b19cdd45d6fd5f89518de58a798e1cR1021

A Contract.AssertNotNull has been added, but it's not clear this is always true.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38144</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove RuntimeIdentifiers</Title>
    <Description>The `$(RuntimeIdentifiers)` property was added some time ago to support
scenarios like self contained in our infrastructure. That is no longer
done during build and this property is no longer necessary. Further it's
causing us additional restore time to bring down runtimes we don't need.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38143</IssueID>
    <RepoID>1</RepoID>
    <Title>`static` Local Functions are not being emitted as static</Title>
    <Description>```cs
using System;
public class C {
	static void M()
	{
  		static void localFunction() { }
        Action a = localFunction;
	}
}
```
Capturing the local function in an `Action` is causing it to be emitted as an instance function on an inner class, instead of being a static method.
https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDZICYgNQA+AAgEwCMAsAFBEDMABKfQML0De1AkEWQGyMAWegFkAFAEouHKvXqdufQfQwB7AMYQMRAKww0KgHYT29AL7VZlyzxL0I9ALzL1mnXsMBuLuaqmgA==</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38142</IssueID>
    <RepoID>1</RepoID>
    <Title>switch expression snippet cause switch statement snippet.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/699250/switch-expression-snippet-cause-switch-statement-s.html)._

---
&lt;h1&gt;Problem&lt;/h1&gt;
&lt;p&gt;On C# 8.0, I tryed to insert switch expression. Then, Visual Studio said “Note: Tab twice to insert the ‘switch’ snippet”. So, I enterd tab twice, but the following ‘switch’ snippet was inserted.&lt;/p&gt;
&lt;p&gt;Sample:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int b = a switch (switch_on)
{
    &lt;span class=hljs-keyword&gt;default&lt;/span&gt;:
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is switch “statement” snippet. but I want switch “expression” snippet because a variable (or literal) is at the beginning of the sentence.&lt;/p&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;So I think it resolve if we have a new snippet.&lt;br&gt;
It is best to be inserted with the above action, but if it is defficult, you should add a new snippet such as “swe”.&lt;br&gt;
I want the snippet to insert a following code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int b = a switch {
    
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int b = a switch {
    _ =&amp;gt; &lt;span class=hljs-keyword&gt;throw&lt;/span&gt; &lt;span class=hljs-keyword&gt;new&lt;/span&gt; NotImplementedException();
};
&lt;/code&gt;&lt;/pre&gt;

---
### Original Comments

#### Visual Studio Feedback System on 8/20/2019, 02:59 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38141</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix indenting</Title>
    <Description>This is breaking the official build because the indenting is a syntax error.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38140</IssueID>
    <RepoID>1</RepoID>
    <Title>Prevent embedding of non-abstract interface members.</Title>
    <Description>Closes #35852. Closes #35911.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38139</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PublishData.json</Title>
    <Description>It seems like publish data for 16.4-preview1 branch should be in here. /cc @JoeRobich </Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38138</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle disabled UndoManager during InlineRename</Title>
    <Description>Resolves https://devdiv.visualstudio.com/DevDiv/_workitems/edit/943917</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38137</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0054 doesn't "see through" unnecessary parentheses</Title>
    <Description>**Version Used**:
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03

**Steps to Reproduce**:
```C#
using System;

class Program
{
    static void Main()
    {
        int id = 42;
        id = (id &lt;&lt; 1);
        Console.WriteLine(id);
    }
}
```

**Expected Behavior**:
IDE0054 is offered and transforms this into:
```C#
using System;

class Program
{
    static void Main()
    {
        int id = 42;
        id &lt;&lt;= 1;
        Console.WriteLine(id);
    }
}
```

**Actual Behavior**:
IDE0054 isn't offered.  Instead, IDE0047 is offered ("Remove unnecessary parentheses"), and then once that's applied, IDE0054 is offered.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38136</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not fade code for IDE0016 (UseThrowExpressionDiagnosticId)</Title>
    <Description>Fixes #27213

Analyzer recommends using throw expression for null checks instead of throw statement within an if statement with null check. We used to fade the entire if statement for discoverability and increased code fix span, but this was undesirable as we want to fade only unnecessary or dead code. Instead, we now generate a hidden non-configurable fixable diagnostic for the increased code fix span and do not generate any fading.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38135</IssueID>
    <RepoID>1</RepoID>
    <Title>Give LangVersion error when type is generic due to parent type</Title>
    <Description>Closes #38105</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38134</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190819.12
- **Date Produced**: 8/19/2019 5:30 PM
- **Commit**: 10b2260aeed5f07582bf8d8dcd4221a447b171c5
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19419.12

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38133</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38132</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn fails to infer any annotation for a type argument when user-defined operator is involved</Title>
    <Description>**Version Used**: 

```
Branch master (13 Aug 2019)
Latest commit a08336 by David:
Merge pull request #37916 from dibarbet/partial_load_str

Update partial load dialog string to better match task center.
```

**Steps to Reproduce**:

Compile and run the following code
```cs
#nullable enable

class C&lt;T&gt;
{
  public T Prop { get; set; }
  
  public C(T t) =&gt; Prop = t;
  
  public static C&lt;T&gt; operator &amp;(C&lt;T&gt; c1, C&lt;T&gt; c2) =&gt; c1;
}

class Program
{
  static void Main()
  {
    string? s = null;
    var c = GetC(s);
    var t = c &amp; c;
    t.Prop.ToString();
    t.Prop = null;
  }

  static C&lt;T&gt; GetC&lt;T&gt;(T t) =&gt; new C&lt;T&gt;(t);
}
```

**Expected Behavior**:
Warning `Dereference of a possibly null reference` for `t.Prop.ToString()`

**Actual Behavior**:
No warnings. The program crashes at runtime with a `NullReferenceException`.

**Notes**
In fact Roslyn fails to infer _any_ annotation for type argument `T` in `t` so it fails to warn about both derefernece of the property and assigning null values to it.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38131</IssueID>
    <RepoID>1</RepoID>
    <Title>Change script assembly name so it's a valid filename</Title>
    <Description>Fixes #22859</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38130</IssueID>
    <RepoID>1</RepoID>
    <Title>LanguageSettingsPersister can be initialized on a background crashing package load</Title>
    <Description>**Version Used**: 
Version 16.3.0 Preview 3.0 [29212.188.master]

**Steps to Reproduce**:

These are the steps I took:

1. Create a new C# Shared  Project
2. Open a CPS-based C# solution in the same session closing the above

**Expected Behavior**:
No crash

**Actual Behavior**:

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: Microsoft.VisualStudio.Composition.CompositionFailedException: An exception was thrown while initializing part "Microsoft.VisualStudio.LanguageServices.Implementation.Options.LanguageSettingsPersister". ---&gt; System.InvalidOperationException: Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
   at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()
   at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject..ctor(IThreadingContext threadingContext, Boolean assertIsForeground)
   at Microsoft.VisualStudio.LanguageServices.Implementation.Options.LanguageSettingsPersister..ctor(IThreadingContext threadingContext, IServiceProvider serviceProvider, IGlobalOptionService optionService)
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
   --- End of inner exception stack trace ---
   at Microsoft.VisualStudio.Composition.RuntimeExportProviderFactory.RuntimeExportProvider.RuntimePartLifecycleTracker.CreateValue()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.Create()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveNext(PartLifecycleState nextState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveToState(PartLifecycleState requiredState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.GetValueReadyToExpose()
   at Microsoft.VisualStudio.Composition.RuntimeExportProviderFactory.RuntimeExportProvider.&lt;&gt;c__DisplayClass15_0.&lt;GetExportedValueHelper&gt;b__0()
   at Microsoft.VisualStudio.Composition.DelegateServices.&lt;&gt;c__DisplayClass2_0`1.&lt;As&gt;b__0()
   at System.Lazy`1.CreateValue()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Lazy`1.get_Value()
   at Microsoft.CodeAnalysis.Options.GlobalOptionService.LoadOptionFromSerializerOrGetDefault(OptionKey optionKey)
   at Microsoft.CodeAnalysis.Options.GlobalOptionService.GetOption(OptionKey optionKey)
   at Microsoft.CodeAnalysis.Options.OptionServiceFactory.OptionService.GetOption(OptionKey optionKey)
   at Microsoft.CodeAnalysis.Options.WorkspaceOptionSet.GetOption(OptionKey optionKey)
   at Microsoft.CodeAnalysis.Options.OptionSet.GetOption[T](Option`1 option)
   at Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.RemoteHostClientService.Enable()
   at Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractPackage`2.EnableRemoteHostClientService()
   at Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractPackage`2.&lt;InitializeAsync&gt;d__8.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpPackage.&lt;InitializeAsync&gt;d__2.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpPackage+&lt;InitializeAsync&gt;d__2.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpPackage+&lt;InitializeAsync&gt;d__2.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.InvokeAction(System.Object)
   at System.Threading.Tasks.AwaitTaskContinuation.RunCallback(System.Threading.ContextCallback, System.Object, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetException(System.Exception)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)
   at Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractPackage`2+&lt;InitializeAsync&gt;d__8[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.InvokeAction(System.Object)
   at System.Threading.Tasks.AwaitTaskContinuation.RunCallback(System.Threading.ContextCallback, System.Object, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(Boolean)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(Boolean)
   at Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractPackage`2+&lt;IsInIdeModeAsync&gt;d__23[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.InvokeAction(System.Object)
   at System.Threading.Tasks.AwaitTaskContinuation.RunCallback(System.Threading.ContextCallback, System.Object, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(Boolean)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(Boolean)
   at Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractPackage`2+&lt;IsInCommandLineModeAsync&gt;d__24[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation+&lt;&gt;c.&lt;.cctor&gt;b__8_0(System.Object)
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory+SingleExecuteProtector.TryExecute()
   at Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()
   at Microsoft.VisualStudio.Threading.JoinableTask.Join(System.Threading.CancellationToken)
   at Microsoft.VisualStudio.Threading.JoinableTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Join(System.Threading.CancellationToken)
   at Microsoft.VisualStudio.Shell.VsTaskLibraryHelper+&lt;&gt;c__DisplayClass33_1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;AsVsTask&gt;b__3()
   at Microsoft.VisualStudio.Shell.VsTaskLibraryHelper+&lt;&gt;c__DisplayClass33_0`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;AsVsTask&gt;b__1(System.Object, Microsoft.VisualStudio.Shell.BlockingTaskEventArgs)
   at Microsoft.VisualStudio.Services.VsTask.RaiseOnMarkedAsBlockingEvent(Microsoft.VisualStudio.Shell.Interop.IVsTask)
   at Microsoft.VisualStudio.Services.VsTask.InvokeWithWaitDialog[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Func`1&lt;System.__Canon&gt;)
   at Microsoft.VisualStudio.Services.VsTask.InvokeWithWaitDialog(System.Action)
   at Microsoft.VisualStudio.Services.VsTask.InternalGetResult(Boolean)
   at Microsoft.VisualStudio.Services.VsTask.GetResult()
   at Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenSpecificEditor(UInt32, System.String, System.Guid ByRef, System.String, System.Guid ByRef, System.String, Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy, UInt32, IntPtr, Microsoft.VisualStudio.OLE.Interop.IServiceProvider, Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame ByRef)
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.FileDocumentManager.Open(Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.SimpleHierarchyNode, Boolean, UInt32, System.Guid ByRef, System.String, System.Guid ByRef, IntPtr, Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame ByRef, Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.WindowFrameShowAction)
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.FileDocumentManager.OpenWithSpecific(Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.SimpleHierarchyNode, UInt32, System.Guid ByRef, System.String, System.Guid ByRef, IntPtr, Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame ByRef, Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.WindowFrameShowAction)
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode+&lt;&gt;c__DisplayClass490_0.&lt;ReopenItem&gt;b__0()
   at Microsoft.VisualStudio.ProjectSystem.VS.HResult.Invoke(System.Func`1&lt;Microsoft.VisualStudio.ProjectSystem.VS.HResult&gt;, System.IServiceProvider, Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService, Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNode.ReopenItem(UInt32, System.Guid ByRef, System.String, System.Guid ByRef, IntPtr, Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame ByRef)
   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.ProjectNodeWrapper.ReopenItem(UInt32, System.Guid ByRef, System.String, System.Guid ByRef, IntPtr, Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame ByRef)
   at Microsoft.VisualStudio.Shell.Interop.IVsProject2.ReopenItem(UInt32, System.Guid ByRef, System.String, System.Guid ByRef, IntPtr, Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame ByRef)
   at Microsoft.VisualStudio.Platform.WindowManagement.SolutionOptions.ReopenDocumentFrame(Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService, Microsoft.VisualStudio.Platform.WindowManagement.StubWindowInfo, Microsoft.VisualStudio.Platform.WindowManagement.ReopenDocumentOptions, Microsoft.VisualStudio.PlatformUI.Shell.DocumentGroup, Int32 ByRef)
   at Microsoft.VisualStudio.Platform.WindowManagement.SolutionOptions.ReopenDocumentFrame(Microsoft.VisualStudio.Platform.WindowManagement.IWindowManagerPrivate, Microsoft.VisualStudio.Platform.WindowManagement.StubWindowInfo, Microsoft.VisualStudio.Platform.WindowManagement.ReopenDocumentOptions, Microsoft.VisualStudio.PlatformUI.Shell.DocumentGroup, Int32 ByRef)
   at Microsoft.VisualStudio.Platform.WindowManagement.SolutionOptions.ReopenDocumentFrame(Microsoft.VisualStudio.Platform.WindowManagement.IWindowManagerPrivate, Microsoft.VisualStudio.Platform.WindowManagement.StubWindowInfo, Microsoft.VisualStudio.Platform.WindowManagement.ReopenDocumentOptions, Microsoft.VisualStudio.PlatformUI.Shell.DocumentGroup)
   at Microsoft.VisualStudio.Platform.WindowManagement.SolutionOptions+&lt;&gt;c__DisplayClass22_0.&lt;LoadBinaryDocumentStates&gt;b__0(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)
   at Microsoft.VisualStudio.Utilities.VersionedBinaryReader.ReadVersioned(Int32, ReadCallback, Boolean)
   at Microsoft.VisualStudio.Platform.WindowManagement.SolutionOptions.LoadBinaryDocumentStates(Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService, Microsoft.VisualStudio.OLE.Interop.IStream)
   at Microsoft.VisualStudio.Platform.WindowManagement.SolutionOptions.LoadDocumentStates(Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService, Microsoft.VisualStudio.OLE.Interop.IStream)
   at Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService+&lt;&gt;c__DisplayClass193_0.&lt;LoadDocumentStates&gt;b__0()
   at Microsoft.VisualStudio.ErrorHandler.CallWithCOMConvention(System.Action, Boolean)
   at Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService.LoadDocumentStates(Microsoft.VisualStudio.OLE.Interop.IStream, Int32)
   at Microsoft.VisualStudio.Shell.Interop.IVsSolution.OpenSolutionFile(UInt32, System.String)
   at Microsoft.VisualStudio.PlatformUI.Packages.MRU.ExtensionMethods.TryOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsSolution, System.String, System.Guid)
   at Microsoft.VisualStudio.PlatformUI.CodeContainerAccessManager+&lt;OpenLocalCodeContainerAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.InvokeAction(System.Object)
   at System.Threading.Tasks.AwaitTaskContinuation.RunCallback(System.Threading.ContextCallback, System.Object, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.VisualStudio.PlatformUI.CodeContainerAccessManager+&lt;GetSolutionAsync&gt;d__3.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation+&lt;&gt;c.&lt;.cctor&gt;b__8_0(System.Object)
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory+SingleExecuteProtector.TryExecute()
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory+SingleExecuteProtector+&lt;&gt;c.&lt;.cctor&gt;b__20_0(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)
   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
   at MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext, System.Threading.ContextCallback, System.Object)
   at System.Windows.Threading.DispatcherOperation.Invoke()
   at System.Windows.Threading.Dispatcher.ProcessQueue()
   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)
   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)
   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)
   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)

```


This component is a MEF component but it has UI thread affinity: http://index/?query=LanguageSettingsPersister&amp;rightProject=Microsoft.VisualStudio.LanguageServices&amp;file=Implementation%5COptions%5CLanguageSettingsPersister.cs&amp;line=28. These concepts don't mix.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38129</IssueID>
    <RepoID>1</RepoID>
    <Title>Should static local functions be able to access non-static local functions from parent scope?</Title>
    <Description>**Version Used**: master from SharpLab (a08336fd917ddb3cb884f37f974830da24143c6d)

**Steps to Reproduce**:

Compile the following code:

```c#
class C
{
    static void M()
    {
        int i = 42;
        
        static void StaticLocal() { }
        int Local() =&gt; i;

        static void SL()
        {
            StaticLocal();
            Local();
        }
        
        SL();
    }
}
```

**Expected Behavior**:

Since `Local` gives access to local state, `SL` should not be able to call it.

**Actual Behavior**:

[The code compiles fine and `SL` captures state.](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEBMACAwgWAFADe+GJGKAjAGxkAsGAsgBQCUxpRepXGAlgHYxeGALwYaaANxtuGadwrUUdAMowIMHgGMAMgHtNEADYsMBDAF85XfoL0HjzEQD5eUvFdILaGZdpYeSDhkZVXUtOyMWN2DuCIdo4MtOYICfP2YEkiTzIA===) I think that goes against the design of local functions. Or is this actually the intended behavior?</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38128</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix generated Equals(object) parameter nullability mismatch</Title>
    <Description>Fixes #38068

This fixes the Quick Action. What about the `Equal(object)` methods for anonymous types?</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38127</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract method doesn't handle nullability correctly when wrapping in a task</Title>
    <Description>Test that should pass but currently doesn't: 

```C#
[Fact, Trait(Traits.Feature, Traits.Features.CodeActionsExtractMethod)]
        public Task TestNestedNullability_Async()
            =&gt; TestInRegularAndScriptAsync(
@"#nullable enable

using System;
using System.Threading.Tasks;

class C
{
    private Task&lt;string&gt; DoSomethingAsync() =&gt; Task.FromResult("""");

    public Task&lt;string?&gt; async M()
    {
        [|string? x = await DoSomethingAsync();|]

        return x;
    }
}",
@"#nullable enable

using System;
using System.Threading.Tasks;

class C
{
    private Task&lt;string?&gt; DoSomethingAsync() =&gt; Task.FromResult("""");

    public Task&lt;string?&gt; async M()
    {
        string? x = await {|Rename:NewMethod|}();

        return x;
    }

    private Task&lt;string?&gt; NewMethod()
    {
        return DoSomethingAsync();
    }
}");
```</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38126</IssueID>
    <RepoID>1</RepoID>
    <Title>Update override completion for nullable reference support</Title>
    <Description>- Ensure we show the ? in all the appropriate places
- Ensure we don't spit ? if we shouldn't
- Ensure we drop ? for the special case of the ToString return. See in-code comments for details.

Closes #30317. Note the original request in the bug isn't granted due to the extensive design discussion afterwards, but it fixes all the other problems.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38125</IssueID>
    <RepoID>1</RepoID>
    <Title>Replace obsolete vbNewLine</Title>
    <Description>When I run `build.cmd`, I get the following error:

&gt; C:\code\roslyn\src\Compilers\VisualBasic\Test\Symbol\SymbolsTests\SymbolErrorTests.vb(10539,25): error BC40000: 'Public Const vbNewLine As String' is obsolete: 'For a carriage return and line feed, use vbCrLf.  For the current platform's newline, use System.Environment.NewLine.'. [C:\code\roslyn\src\Compilers\VisualBasic\Test\Symbol\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.vbproj]

This change fixes that.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38124</IssueID>
    <RepoID>1</RepoID>
    <Title>DoesNotReturnIf incorrectly handled</Title>
    <Description>**Version Used**: 

VS 16.3.0 Preview 2.0

**Steps to Reproduce**:

```cs
static void M1(string? s)
{
    Debug.Assert(s != null);
    Console.WriteLine(s.Length); // no warning
}

static void M2(string? s)
{
    Debug.Assert(false);
    Console.WriteLine(s.Length); // CS8602
}
```

**Expected Behavior**:

Both `M1` and `M2` have no warning.

**Actual Behavior**:

`M2` produces CS8602 warning.
</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38122</IssueID>
    <RepoID>1</RepoID>
    <Title>Nested classes somehow absorb their enclosing region</Title>
    <Description>**Version Used**
2.0.0.6140902

**Steps to Reproduce**:
Given this class
namespace Wave.InteractiveStreams.Filter.Logic
{
    public class RootClass
    {

        #region Fields

        private string stringField = null;
        private int intField = 0;

        #endregion

        #region Constructors

        public RootClass()
        {

        }

        #endregion

        #region Classes

        public class NestedClass
        {

            #region Nested Fields

            private string stringField = null;
            private int intField = 0;

            #endregion

            #region Nested Constructors

            public NestedClass()
            {

            }

            #endregion

        }

        #endregion

    }
}

and this Rosyln parser

private class RegionSyntaxWalker : CSharpSyntaxWalker
{

    private readonly Dictionary&lt;string, List&lt;string&gt;&gt; m_classToRegionsMap = new Dictionary&lt;string, List&lt;string&gt;&gt;();

    private readonly Stack&lt;string&gt; m_classNameStack = new Stack&lt;string&gt;();

    public RegionSyntaxWalker()
        : base(SyntaxWalkerDepth.StructuredTrivia)
    {
    }

    public IDictionary&lt;string, IList&lt;string&gt;&gt; WalkRegions(SyntaxNode node)
    {
        m_classToRegionsMap.Clear();
        DefaultVisit(node);

        var copy = new Dictionary&lt;string, IList&lt;string&gt;&gt;();
        foreach (var item in m_classToRegionsMap)
        {
            copy[item.Key] = item.Value;
        }

        m_classToRegionsMap.Clear();

        return copy;
    }

    public override void VisitClassDeclaration(ClassDeclarationSyntax node)
    {
        m_classNameStack.Push(node.Identifier.ToFullString().Trim());
        base.VisitClassDeclaration(node);
        m_classNameStack.Pop();
    }

    public override void VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node)
    {
        if (!m_classToRegionsMap.TryGetValue(m_classNameStack.Peek(), out List&lt;string&gt; regions))
        {
            regions = new List&lt;string&gt;();
            m_classToRegionsMap[m_classNameStack.Peek()] = regions;
        }

        regions.Add(node.GetText().ToString().Trim());

        base.VisitRegionDirectiveTrivia(node);
    }

}

**Expected Behavior**:
I expect that if I call RegionSyntaxWalker.WalkRegions on the first file I posted that I would end up with this:
{
    "RootClass" :["#region Fields","#region Constructors","#region Classes"],
    "NestedClass":["#region Nested Fields", "#region Nested Constructors"]
}

**Actual Behavior**:
I get this: {
    "RootClass" :["#region Fields","#region Constructors"],
    "NestedClass":["#region Classes","#region Nested Fields", "#region Nested Constructors"]
}

"#region Classes" is defined as a member of RootClass, yet my code analyzer seems to want to parse NestedClass before parsing "#region Classes". It seems out of order to me. I am simply trying to get the list of regions per class (including nested ones) so that I can validate them!</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38120</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38119</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38118</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38117</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix completion of local functions in static methods</Title>
    <Description>Contributes to https://github.com/dotnet/roslyn/issues/38074.</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38116</IssueID>
    <RepoID>1</RepoID>
    <Title>Reject pattern-matching operations on pointer types in C# versions less than 8.</Title>
    <Description>This fix intentionally does not introduce a "language version" diagnostic because I would
like this fix to be as simple as possible to hot-fix 16.3, and because we are past translation
deadlines.
Fixes #38052
</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38115</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense incorrectly lists extension methods with type constraints on all types</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/695953/intellisense-incorrectly-lists-extension-methods-w.html)._

---
[regression] [worked-in:16.3.0 Preview 1.0]
Intellisense lists extension methods with the type constraints on all types, while it should only list it for types that match the constraint.

To reproduce:
```c#
public static class EnumExtensions
{
    public static bool ExampleExtensionMethod&amp;lt;TEnum&amp;gt;(this TEnum value) where TEnum : unmanaged, System.Enum =&amp;gt; true;
}

public static class Program
{
    public static void Main()
    {
        var obj = new object();
        obj. // look at intellisense, ExampleExtensionMethod will be listed while it should't.
    }
}
```

---
### Original Comments

#### Visual Studio Feedback System on 8/16/2019, 00:00 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38114</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable formatting analyzers</Title>
    <Description>
    </Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38113</IssueID>
    <RepoID>1</RepoID>
    <Title>Give LangVersion error when type is generic due to containing type</Title>
    <Description>Closes #38105
</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38112</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix null reference error when opening a miscellaneous files file</Title>
    <Description>Fix #38111</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38111</IssueID>
    <RepoID>1</RepoID>
    <Title>Null reference error when F5 and opening a solution in Roslyn.sln</Title>
    <Description>System.InvalidOperationException
  HResult=0x80131509
  Message=Unexpected Null
  Source=Microsoft.CodeAnalysis.Workspaces
  StackTrace:
   at Roslyn.Utilities.Contract.Fail(String message) in D:\git\roslyn2\src\Workspaces\Core\Portable\Utilities\Contract.cs:line 56
   at Roslyn.Utilities.Contract.ThrowIfNull[T](T value, String message) in D:\git\roslyn2\src\Workspaces\Core\Portable\Utilities\Contract.cs:line 22
   at Microsoft.CodeAnalysis.Editor.Implementation.MetadataAsSource.MetadataAsSourceFileService.TryAddDocumentToWorkspace(String filePath, ITextBuffer buffer) in D:\git\roslyn2\src\EditorFeatures\Core\Implementation\MetadataAsSource\MetadataAsSourceFileService.cs:line 227
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesWorkspace.AttachToDocument(String moniker, ITextBuffer textBuffer) in D:\git\roslyn2\src\VisualStudio\Core\Def\Implementation\ProjectSystem\MiscellaneousFilesWorkspace.cs:line 254
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesWorkspace.TrackOpenedDocument(String moniker, ITextBuffer textBuffer) in D:\git\roslyn2\src\VisualStudio\Core\Def\Implementation\ProjectSystem\MiscellaneousFilesWorkspace.cs:line 149
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesWorkspace.Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IRunningDocumentTableEventListener.OnOpenDocument(String moniker, ITextBuffer textBuffer, IVsHierarchy _) in D:\git\roslyn2\src\VisualStudio\Core\Def\Implementation\ProjectSystem\MiscellaneousFilesWorkspace.cs:line 74
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.RunningDocumentTableEventTracker.OnAfterAttributeChangeEx(UInt32 docCookie, UInt32 grfAttribs, IVsHierarchy pHierOld, UInt32 itemidOld, String pszMkDocumentOld, IVsHierarchy pHierNew, UInt32 itemidNew, String pszMkDocumentNew) in D:\git\roslyn2\src\VisualStudio\Core\Def\Implementation\ProjectSystem\RunningDocumentTableEventTracker.cs:line 94</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38110</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail out from couple of IDE analyzers in presence of OperationKind.None operations</Title>
    <Description>1. https://github.com/dotnet/roslyn/commit/49806932395686a392efea1236e2edd1b066c6f2: Bail out for unused parameters analyzer. Fixes #37988
2. https://github.com/dotnet/roslyn/commit/8a8629cbfd00c25456f43014d1061d9700ea0e0b: Bail out for unused private members analyzer. Fixes #33142</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38109</IssueID>
    <RepoID>1</RepoID>
    <Title>Restore constraint checking for reduced extension methods.</Title>
    <Description>Before C# 8, the reduction of an extension method would fail (return null) when the
method's constraints would not be satisfied.  But in C# 8 the unmanaged constraint requires
we know the language version, and therefore the compilation, to check.  That is not available
in `IMethodSymbol.ReduceExtensionMethod`.  So we dropped the constraint checking in #37022.
However this causes an unfortunate regression in the quality of the IDE experience.  So here we
restore the constraint checking, using the compilation's language version when available.
IMethodSymbol.ReduceExtensionMethod uses the C# 8 rules since it has no language version to check.
Fixes #37780</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>25/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38108</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto-completion should ignore numbers</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/698734/auto-completion-should-ignore-numbers.html)._

---
Please do not give an auto-complete suggestion for numbers. Auto-completion is a very useful feature for names, as they tend to be part of a limited set of possibilities and they can be obscure and easy to mistype, but the same is not true for the set of possible numbers.

With the current behaviour, when the suggestion box appears I cannot navigate to another line without first hitting the Escape key (screenshot: http://prntscr.com/ouft68). If the number is one that is &amp;quot;easily guessed&amp;quot;, then it typically takes very little effort for me to type it myself. The auto-suggestion is rarely (if ever) correct, so having to dismiss it every time that I type a number is very distracting and awkward.

---
### Original Comments

#### Visual Studio Feedback System on 8/18/2019, 11:53 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38107</IssueID>
    <RepoID>1</RepoID>
    <Title>Show code instead of designer if the designer is not installed</Title>
    <Description>See dotnet/winforms-designer#458

This avoids showing an error page when the designer package is not installed, but doesn't prevent the "View designer" command from showing in Solution Explorer (the command will just show code in this case).</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38106</IssueID>
    <RepoID>1</RepoID>
    <Title>VS2019 INT preview does not permit changing language versions</Title>
    <Description>**Version Used**:  VS2019 INT Preview (see below)

**Steps to Reproduce**:

1. Create New Project (.NET Framework 4.5)
2. Project &gt; Properties &gt; Build &gt; Advanced

**Expected Behavior**:

`Language version` selector permits changing the language version

**Actual Behavior**:

`Language version` selector is greyed out and does not even show active language version.

![image](https://user-images.githubusercontent.com/3804346/63300332-d2d69900-c28c-11e9-9a25-2278283d8db4.png)

![image](https://user-images.githubusercontent.com/3804346/63300393-f1d52b00-c28c-11e9-8415-8c91fbd03e9b.png)
</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38105</IssueID>
    <RepoID>1</RepoID>
    <Title>VS21019 C# version 7.2 accepts pointer to nested generic type that is rejected by VS2017</Title>
    <Description>The following code is an error in C# 7.0 in VS 2017.  However, the same code is accepted in C# 7.0 in VS 2019.  This is a forward compatibility error (we are accepting code not part of C# 7.0 in that language version in VS 2019).

``` c#
class Program
{
    unsafe static void Main(string[] args)
    {
        G&lt;int&gt;.S* p = null;
    }
}

public class G&lt;T&gt;
{
    public struct S { int x; }
}
```
</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38104</IssueID>
    <RepoID>1</RepoID>
    <Title>Build.cmd fails for several projects</Title>
    <Description>**Version Used**: master (89d305def1a002ad8c24)

**Steps to Reproduce**:

1. `git clean -xdf`
2. `restore`
3. `build`

**Expected Behavior**:

Build succeeds.

**Actual Behavior**:

Several projects fail the build.

Roslyn.Test.Utilities.csproj fails with:

```
C:\code\roslyn\src\Test\Utilities\Portable\Mocks\TestReferences.cs(289,48): error CS0234: The type or namespace name 'n
etcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\code\ro
slyn\src\Test\Utilities\Portable\Roslyn.Test.Utilities.csproj]
C:\code\roslyn\src\Test\Utilities\Portable\Mocks\TestReferences.cs(294,48): error CS0234: The type or namespace name 'n
etcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\code\ro
slyn\src\Test\Utilities\Portable\Roslyn.Test.Utilities.csproj]
C:\code\roslyn\src\Test\Utilities\Portable\Mocks\TestReferences.cs(299,48): error CS0234: The type or namespace name 'n
etcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\code\ro
slyn\src\Test\Utilities\Portable\Roslyn.Test.Utilities.csproj]
C:\code\roslyn\src\Test\Utilities\Portable\Mocks\TestReferences.cs(304,48): error CS0234: The type or namespace name 'n
etcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\code\ro
slyn\src\Test\Utilities\Portable\Roslyn.Test.Utilities.csproj]
C:\code\roslyn\src\Test\Utilities\Portable\Mocks\TestReferences.cs(309,48): error CS0234: The type or namespace name 'n
etcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\code\ro
slyn\src\Test\Utilities\Portable\Roslyn.Test.Utilities.csproj]
C:\code\roslyn\src\Test\Utilities\Portable\Mocks\TestReferences.cs(314,48): error CS0234: The type or namespace name 'n
etcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\code\ro
slyn\src\Test\Utilities\Portable\Roslyn.Test.Utilities.csproj]
C:\code\roslyn\src\Test\Utilities\Portable\Mocks\TestReferences.cs(319,48): error CS0234: The type or namespace name 'n
etcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\code\ro
slyn\src\Test\Utilities\Portable\Roslyn.Test.Utilities.csproj]
C:\code\roslyn\src\Test\Utilities\Portable\Mocks\TestReferences.cs(324,48): error CS0234: The type or namespace name 'n
etcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\code\ro
slyn\src\Test\Utilities\Portable\Roslyn.Test.Utilities.csproj]
C:\code\roslyn\src\Test\Utilities\Portable\Mocks\TestReferences.cs(329,48): error CS0234: The type or namespace name 'n
etcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\code\ro
slyn\src\Test\Utilities\Portable\Roslyn.Test.Utilities.csproj]
C:\code\roslyn\src\Test\Utilities\Portable\Mocks\TestReferences.cs(334,48): error CS0234: The type or namespace name 'n
etcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\code\ro
slyn\src\Test\Utilities\Portable\Roslyn.Test.Utilities.csproj]
```

Microsoft.CodeAnalysis.EditorFeatures.csproj fails with:

```
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets
(2106,5): warning MSB3277: Found conflicts between different versions of "Microsoft.VisualStudio.Threading" that could
not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [C:\code
\roslyn\src\EditorFeatures\Core\Microsoft.CodeAnalysis.EditorFeatures.csproj]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets
(2106,5): warning MSB3277: Found conflicts between different versions of "StreamJsonRpc" that could not be resolved.  T
hese reference conflicts are listed in the build log when log verbosity is set to detailed. [C:\code\roslyn\src\EditorF
eatures\Core\Microsoft.CodeAnalysis.EditorFeatures.csproj]
C:\code\roslyn\src\EditorFeatures\Core\Implementation\CodeFixes\CodeFixService.cs(559,88): error CS1739: The best overl
oad for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\code\roslyn\src\EditorFeatures\Core
\Microsoft.CodeAnalysis.EditorFeatures.csproj]
C:\code\roslyn\src\EditorFeatures\Core\GoToDefinition\AbstractGoToSymbolService.cs(38,80): error CS1739: The best overl
oad for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\code\roslyn\src\EditorFeatures\Core
\Microsoft.CodeAnalysis.EditorFeatures.csproj]
C:\code\roslyn\src\EditorFeatures\Core\Implementation\RenameTracking\RenameTrackingTaggerProvider.TrackingSession.cs(79
,96): error CS1739: The best overload for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\c
ode\roslyn\src\EditorFeatures\Core\Microsoft.CodeAnalysis.EditorFeatures.csproj]
C:\code\roslyn\src\EditorFeatures\Core\Implementation\RenameTracking\RenameTrackingTaggerProvider.TrackingSession.cs(10
7,91): error CS1739: The best overload for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\
code\roslyn\src\EditorFeatures\Core\Microsoft.CodeAnalysis.EditorFeatures.csproj]
C:\code\roslyn\src\EditorFeatures\Core\Implementation\NavigationBar\NavigationBarController_ModelComputation.cs(146,92)
: error CS1739: The best overload for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\code\
roslyn\src\EditorFeatures\Core\Microsoft.CodeAnalysis.EditorFeatures.csproj]
C:\code\roslyn\src\EditorFeatures\Core\Implementation\IntelliSense\Completion\Controller_CommitUniqueCompletionListItem
.cs(79,84): error CS1739: The best overload for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield'
 [C:\code\roslyn\src\EditorFeatures\Core\Microsoft.CodeAnalysis.EditorFeatures.csproj]
C:\code\roslyn\src\EditorFeatures\Core\Implementation\IntelliSense\ModelComputation.cs(150,88): error CS1739: The best
overload for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\code\roslyn\src\EditorFeatures
\Core\Microsoft.CodeAnalysis.EditorFeatures.csproj]
```

Running `msbuild /v:d` (from VS 2019 Preview Developer Command Prompt) on that project adds:

```
         There was a conflict between "Microsoft.VisualStudio.Threading, Version=15.8.0.0, Culture=neutral, PublicKeyTo
         ken=b03f5f7f11d50a3a" and "Microsoft.VisualStudio.Threading, Version=16.0.0.0, Culture=neutral, PublicKeyToken
         =b03f5f7f11d50a3a".
             "Microsoft.VisualStudio.Threading, Version=15.8.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" was
          chosen because it was primary and "Microsoft.VisualStudio.Threading, Version=16.0.0.0, Culture=neutral, Publi
         cKeyToken=b03f5f7f11d50a3a" was not.
             References which depend on "Microsoft.VisualStudio.Threading, Version=15.8.0.0, Culture=neutral, PublicKey
         Token=b03f5f7f11d50a3a" [C:\Users\Svick\.nuget\packages\microsoft.visualstudio.threading\16.0.102\lib\net46\Mi
         crosoft.VisualStudio.Threading.dll].
                 C:\Users\Svick\.nuget\packages\microsoft.visualstudio.threading\16.0.102\lib\net46\Microsoft.VisualStu
         dio.Threading.dll
                   Project file item includes which caused reference "C:\Users\Svick\.nuget\packages\microsoft.visualst
         udio.threading\16.0.102\lib\net46\Microsoft.VisualStudio.Threading.dll".
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.threading\16.0.102\lib\net46\Microsoft.Visua
         lStudio.Threading.dll
             References which depend on "Microsoft.VisualStudio.Threading, Version=16.0.0.0, Culture=neutral, PublicKey
         Token=b03f5f7f11d50a3a" [].
                 C:\Users\Svick\.nuget\packages\microsoft.visualstudio.coreutility\16.1.101\lib\net472\Microsoft.Visual
         Studio.CoreUtility.dll
                   Project file item includes which caused reference "C:\Users\Svick\.nuget\packages\microsoft.visualst
         udio.coreutility\16.1.101\lib\net472\Microsoft.VisualStudio.CoreUtility.dll".
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.coreutility\16.1.101\lib\net472\Microsoft.Vi
         sualStudio.CoreUtility.dll
                     C:\code\roslyn\artifacts\bin\Microsoft.CodeAnalysis.EditorFeatures.Text\Debug\net472\Microsoft.Cod
         eAnalysis.EditorFeatures.Text.dll
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.language\16.1.101\lib\net472\Microsoft.Visua
         lStudio.Language.dll
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.language.intellisense\16.1.101\lib\net472\Mi
         crosoft.VisualStudio.Language.Intellisense.dll
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.text.data\16.1.101\lib\net472\Microsoft.Visu
         alStudio.Text.Data.dll
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.text.logic\16.1.101\lib\net472\Microsoft.Vis
         ualStudio.Text.Logic.dll
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.language.standardclassification\16.1.101\lib
         \net472\Microsoft.VisualStudio.Language.StandardClassification.dll
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.text.ui\16.1.101\lib\net472\Microsoft.Visual
         Studio.Text.UI.dll
                 C:\Users\Svick\.nuget\packages\microsoft.visualstudio.language\16.1.101\lib\net472\Microsoft.VisualStu
         dio.Language.dll
                   Project file item includes which caused reference "C:\Users\Svick\.nuget\packages\microsoft.visualst
         udio.language\16.1.101\lib\net472\Microsoft.VisualStudio.Language.dll".
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.language\16.1.101\lib\net472\Microsoft.Visua
         lStudio.Language.dll
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.language.intellisense\16.1.101\lib\net472\Mi
         crosoft.VisualStudio.Language.Intellisense.dll
                 C:\Users\Svick\.nuget\packages\nerdbank.streams\2.1.37\lib\net472\Nerdbank.Streams.dll
                   Project file item includes which caused reference "C:\Users\Svick\.nuget\packages\nerdbank.streams\2
         .1.37\lib\net472\Nerdbank.Streams.dll".
                     C:\Users\Svick\.nuget\packages\nerdbank.streams\2.1.37\lib\net472\Nerdbank.Streams.dll
                 C:\Users\Svick\.nuget\packages\streamjsonrpc\2.0.167\lib\net472\StreamJsonRpc.dll
                   Project file item includes which caused reference "C:\Users\Svick\.nuget\packages\streamjsonrpc\2.0.
         167\lib\net472\StreamJsonRpc.dll".
                     C:\Users\Svick\.nuget\packages\streamjsonrpc\2.0.167\lib\net472\StreamJsonRpc.dll
         There was a conflict between "StreamJsonRpc, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
         " and "StreamJsonRpc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
             "StreamJsonRpc, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" was chosen because it w
         as primary and "StreamJsonRpc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" was not.
             References which depend on "StreamJsonRpc, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a
         3a" [C:\Users\Svick\.nuget\packages\streamjsonrpc\2.0.167\lib\net472\StreamJsonRpc.dll].
                 C:\Users\Svick\.nuget\packages\streamjsonrpc\2.0.167\lib\net472\StreamJsonRpc.dll
                   Project file item includes which caused reference "C:\Users\Svick\.nuget\packages\streamjsonrpc\2.0.
         167\lib\net472\StreamJsonRpc.dll".
                     C:\Users\Svick\.nuget\packages\streamjsonrpc\2.0.167\lib\net472\StreamJsonRpc.dll
             References which depend on "StreamJsonRpc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a
         3a" [].
                 C:\Users\Svick\.nuget\packages\microsoft.visualstudio.language\16.1.101\lib\net472\Microsoft.VisualStu
         dio.Language.dll
                   Project file item includes which caused reference "C:\Users\Svick\.nuget\packages\microsoft.visualst
         udio.language\16.1.101\lib\net472\Microsoft.VisualStudio.Language.dll".
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.language\16.1.101\lib\net472\Microsoft.Visua
         lStudio.Language.dll
                     C:\Users\Svick\.nuget\packages\microsoft.visualstudio.language.intellisense\16.1.101\lib\net472\Mi
         crosoft.VisualStudio.Language.Intellisense.dll
```

Microsoft.CodeAnalysis.Remote.Razor.ServiceHub.csproj fails with:

```
C:\code\roslyn\src\Workspaces\Remote\ServiceHub\Shared\ServiceHubServiceBase.cs(192,48): error CS0117: 'DisconnectedRea
son' does not contain a definition for 'LocallyDisposed' [C:\code\roslyn\src\Workspaces\Remote\Razor\Microsoft.CodeAnal
ysis.Remote.Razor.ServiceHub.csproj]
C:\code\roslyn\src\Workspaces\Remote\ServiceHub\Shared\ServiceHubServiceBase.cs(193,48): error CS0117: 'DisconnectedRea
son' does not contain a definition for 'RemotePartyTerminated' [C:\code\roslyn\src\Workspaces\Remote\Razor\Microsoft.Co
deAnalysis.Remote.Razor.ServiceHub.csproj]
C:\code\roslyn\src\Workspaces\Remote\ServiceHub\Shared\Extensions.cs(28,37): error CS0246: The type or namespace name '
JsonMessageFormatter' could not be found (are you missing a using directive or an assembly reference?) [C:\code\roslyn\
src\Workspaces\Remote\Razor\Microsoft.CodeAnalysis.Remote.Razor.ServiceHub.csproj]
C:\code\roslyn\src\Workspaces\Remote\ServiceHub\Shared\Extensions.cs(33,17): error CS0117: 'JsonRpc' does not contain a
 definition for 'CancelLocallyInvokedMethodsWhenConnectionIsClosed' [C:\code\roslyn\src\Workspaces\Remote\Razor\Microso
ft.CodeAnalysis.Remote.Razor.ServiceHub.csproj]
C:\code\roslyn\src\Workspaces\Remote\ServiceHub\Shared\Extensions.cs(34,17): error CS0117: 'JsonRpc' does not contain a
 definition for 'TraceSource' [C:\code\roslyn\src\Workspaces\Remote\Razor\Microsoft.CodeAnalysis.Remote.Razor.ServiceHu
b.csproj]
```</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38103</IssueID>
    <RepoID>1</RepoID>
    <Title>VB: Support protected access for interface members.</Title>
    <Description>Closes #35827.</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38102</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0016 loses comments</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03

**Steps to Reproduce**:
Any of these variants:
```C#
using System;

class Program
{
    static void Main() { }

    private object _arg;

    public Program(object arg)
    {
        if (arg == null)
        {
            throw new ArgumentNullException(nameof(arg)); // Oh no!
        }
        _arg = arg;
    }
}
```
or
```C#
using System;

class Program
{
    static void Main() { }

    private object _arg;

    public Program(object arg)
    {
        if (arg == null)
        {
            // Oh no!
            throw new ArgumentNullException(nameof(arg));
        }
        _arg = arg;
    }
}
```
or
```C#
using System;

class Program
{
    static void Main() { }

    private object _arg;

    public Program(object arg)
    {
        if (arg == null) // Oh no!
        {
            throw new ArgumentNullException(nameof(arg));
        }
        _arg = arg;
    }
}
```
Then apply IDE0016.

**Expected Behavior**:
```C#
using System;

class Program
{
    static void Main() { }

    private object _arg;

    public Program(object arg)
    {
        _arg = arg ?? throw new ArgumentNullException(nameof(arg)); // Oh no!
    }
}
```
or something similar, retaining the comment.  Or just not offering the fix.

**Actual Behavior**:
```C#
using System;

class Program
{
    static void Main() { }

    private object _arg;

    public Program(object arg)
    {
        _arg = arg ?? throw new ArgumentNullException(nameof(arg));
    }
}
```</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38101</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix ChangeNamespaceService to handle member access references</Title>
    <Description>fix #37891

</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38100</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose IsInExpressionTree</Title>
    <Description>Useful in code fixes as the rules are slightly different in expressions.


Preferable via a static mehtod and not via some service locator. Don't know if `SemanticFacts` is a thing.</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38099</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose IsInConstContext</Title>
    <Description>Useful in third party analyzers.

Preferable via a static mehtod and not via some service locator. Maybe it can be added to `SyntaxFacts`?</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38098</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose IsInStaticContext</Title>
    <Description>The need comes up every now and then in third party analyzers.

Preferable via a static mehtod and not via some service locator. Maybe it can be added to `SyntaxFacts`?</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38097</IssueID>
    <RepoID>1</RepoID>
    <Title>LSP strips `applicableToSpan` for CodeRefactorings / CodeFixes</Title>
    <Description>As part of an attempt to make refactorings more discoverable #35525 we've enabled refactorings to report their `applicableToSpan` to [CodeRefactoringService](https://github.com/dotnet/roslyn/pull/37941/files#diff-b320a36be29b9923d16fc29409d901e2R132) and further to `SuggestedActionsSource` where it's used to order them (within each other &amp; w.r.t. to CodeFixes (from analyzers) depending on distance from "current selection/caret location".

The issue is that LSP currently doesn't transport that information &amp; so we [discard it](https://github.com/dotnet/roslyn/pull/37941/files#diff-902163083c57dbeff4aa50a0ee091870R43) before sending and then don't have the information on [receiving end](https://github.com/dotnet/roslyn/blob/release/dev16.4-preview1/src/Tools/ExternalAccess/LiveShare/CodeActions/RoslynCodeActionProvider.cs#L75).

It is worth noting that this issue hasn't been created by the abovementioned change (#37941) to Refactorings but merely amplified. Even before this change the `applicableToSpan` of CodeFixes that - in normal situation comes from diagnostics - has been stripped within LSP due to the fact that CodeFixes were treated the same way as refactorings (CodeAction in LSP language).

The impact of this issue is inconsistent ordering between local and remote (LSP) experience. Especially, the LSP experience will have static non-current-selection informed ordering that might be very inconvenient, especially if we go further in the direction of offering more - better ordered - refactorings.</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38096</IssueID>
    <RepoID>1</RepoID>
    <Title>Add telemetry to track the perf of target typed completion</Title>
    <Description>Required before broader release</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38095</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature request: refactoring for adding a using / simplifying a name</Title>
    <Description>Consider:
```C#
using System;
using System.Threading;

class Program
{
    static void Main()
    {
        var sw = new System.Diagnostics.Stopwatch();
        sw.Start();
        Thread.Sleep(1000);
        Console.WriteLine(sw.Elapsed);
    }
}
```
With a one-step operation, I'd like to be able to transform this to:
```C#
using System;
using System.Diagnostics;
using System.Threading;

class Program
{
    static void Main()
    {
        var sw = new Stopwatch();
        sw.Start();
        Thread.Sleep(1000);
        Console.WriteLine(sw.Elapsed);
    }
}
```
adding a using and simplifying the associated type name (today no refactorings are offered for the `System.Diagnostics.Stopwatch` reference).</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38094</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert test workarounds/skip for IDE diagnostic configuration code fixes</Title>
    <Description>Now that `EditorConfigDocumentOptionsProviderFactory.ShouldUseNativeEditorConfigSupport` is defaulted to true for everyone, we can remove the unit test workarounds and also unskip the integration test for it. Note that the first two commits are just reverts of workarounds added to prior PR that enabled these configuration fixes.

Fixes #36330</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38093</IssueID>
    <RepoID>1</RepoID>
    <Title>"Add null check" adds meaningless null check</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03

**Steps to Reproduce**:
```C#
using System;
using System.IO;

class Program
{
    static void Main() { }

    public Program(Stream output)
    {
        if (!output.CanWrite) throw new ArgumentException();
        OutStream = output;
    }

    public Stream OutStream { get; }
}
```
Execute "Add null check" on `output`.

**Expected Behavior**:

```C#
using System;
using System.IO;

class Program
{
    static void Main() { }

    public Program(Stream output)
    {
        if (output == null) throw new ArgumentNullException(nameof(output));
        if (!output.CanWrite) throw new ArgumentException();
        OutStream = output;
    }

    public Stream OutStream { get; }
}
```

**Actual Behavior**:
```C#
using System;
using System.IO;

class Program
{
    static void Main() { }

    public Program(Stream output)
    {
        if (!output.CanWrite) throw new ArgumentException();
        OutStream = output ?? throw new ArgumentNullException(nameof(output));
    }

    public Stream OutStream { get; }
}
```
The null check is added after `output` is already dereferenced.</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38092</IssueID>
    <RepoID>1</RepoID>
    <Title>Circular constraint dependency with generic</Title>
    <Description>Because the following code is including circular constraint dependency, I want to call error, CS0454.
~~~
class A&lt;T&gt;
{
}

class B &lt;U&gt; where U : A&lt;U&gt;
{
}
~~~

U is circular constraint dependency.</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38091</IssueID>
    <RepoID>1</RepoID>
    <Title>Running build twice fixes nullability warnings</Title>
    <Description>The following code from #37995 generates two errors when `TreatWarningsAsErrors` is set to `true`, but when `dotnet build` is used a second time with no changes in the code it reports no errors.
```csharp
string? nullableString = null;
int y = string.IsNullOrEmpty(nullableString) ? 24 : nullableString.Length;
int z = string.IsNullOrWhiteSpace(nullableString) ? 24 : nullableString.Length;
```
```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetFrameworks&gt;netstandard2.0&lt;/TargetFrameworks&gt;
    &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
    &lt;TreatWarningsAsErrors&gt;true&lt;/TreatWarningsAsErrors&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
```
```
PS C:\Repos\temp&gt; dotnet build
Microsoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 21,59 ms for C:\Repos\temp\temp.csproj.
  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview
Program.cs(8,65): error CS8602: Dereference of a possibly null reference. [C:\Repos\temp\temp.csproj]
Program.cs(9,70): error CS8602: Dereference of a possibly null reference. [C:\Repos\temp\temp.csproj]

Build FAILED.

Program.cs(8,65): error CS8602: Dereference of a possibly null reference. [C:\Repos\temp\temp.csproj]
Program.cs(9,70): error CS8602: Dereference of a possibly null reference. [C:\Repos\temp\temp.csproj]
    0 Warning(s)
    2 Error(s)

Time Elapsed 00:00:00.82
PS C:\Repos\temp&gt; dotnet build
Microsoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 20,05 ms for C:\Repos\temp\temp.csproj.
  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview
  temp -&gt; C:\Repos\temp\bin\Debug\netstandard2.0\temp.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:00.68
```

.NET Versions: 3.0.100-preview8-013656
Compiler version: 3.3.0-beta2-19381-14 (ef3a7a38)</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38090</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring to add DebuggerDisplay</Title>
    <Description>Closes #37990</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38089</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.3-preview2</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview2.

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.3-preview2
git reset --hard upstream/release/dev16.3-preview2
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.3-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38087</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract Method on part of an expression generates invalid code</Title>
    <Description>**Version Used**: 
Visual Studio 2019 version 16.2.2

**Steps to Reproduce**:

1. Add the following code to a class:
```cs
private void Repro()
{
    int i = 1, j = 2;
    int k = i + j + 1;
}
```
2. Select `i + j` and perform an Extract Method refactoring.

**Expected Behavior**:
Extract Method generates `NewMethod(int i, int j)`:

```cs
private void Repro()
{
    int i = 1, j = 2;
    int k = NewMethod(i, j) + 1;
}

private static int NewMethod(int i, int j)
{
    return i + j;
}
```

**Actual Behavior**:
Extract Method generates `NewMethod()` without parameters to pass in `i` and `j`:

```cs
private void Repro()
{
    int i = 1, j = 2;
    int k = NewMethod() + 1;
}

private static int NewMethod()
{
    return i + j;
}
```</Description>
    <CreatedDate>18/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38086</IssueID>
    <RepoID>1</RepoID>
    <Title>Codegen for `is "Foo"` puts redundant brfalse before op_Equality</Title>
    <Description>**Version Used**: master (12 Aug 2019), release mode

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAmAAgGEBYAKAG9yCaDgB7ejAgWQAocBGABgIDNGASmq0qZWhII4A7P0YE0UAgCIAQhATKA3CJoBfcgbJA===

**Steps to Reproduce**:

```cs
class C
{
    bool M(string foo)
    {
        return foo is "Bar";
    }
}
```

Real-world example:

```cs
return memberDeclaration is MethodDeclarationSyntax
{
    Arity: 0,
    // Gens redundant local for ValueText in order to do redundant brfalse on the value before
    // calling op_Equality   ↓
    Identifier: { ValueText: nameof(ToString) },

    // ...
```

**Actual**:

```
IL_0000: ldarg.1
IL_0001: brfalse.s IL_000f

IL_0003: ldarg.1
IL_0004: ldstr "Bar"
IL_0009: call bool [mscorlib]System.String::op_Equality(string, string)
IL_000e: ret

IL_000f: ldc.i4.0
IL_0010: ret
```

**Actual** (C# equivalent):

```cs
return foo != null &amp;&amp; foo == "Bar";
```

**Expected**:

```
IL_0000: ldarg.1
IL_0001: ldstr "Bar"
IL_0006: call bool [mscorlib]System.String::op_Equality(string, string)
IL_000b: ret
```

**Expected** (C# equivalent):

```cs
return foo == "Bar";
```</Description>
    <CreatedDate>18/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38085</IssueID>
    <RepoID>1</RepoID>
    <Title>Restore.cmd fails</Title>
    <Description>**Version Used**: master (ecece2e55f991c1bf05f6634)

**Steps to Reproduce**:

0. `git clean -xdf`
1. `restore.cmd`

**Expected Behavior**:

Restore works.

**Actual Behavior**:

```
Roslyn.sln:
  Restore completed in 500,59 ms for C:\Users\Svick\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19416.16\too
  ls\Tools.proj.
C:\Program Files\dotnet\sdk\2.2.401\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets(137,5
): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.2 or low
er, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\code\roslyn\src\Compilers\CSharp\Test\Symbol\Micr
osoft.CodeAnalysis.CSharp.Symbol.UnitTests.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets(137,5
): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.2 or low
er, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\code\roslyn\src\Compilers\VisualBasic\Test\Symbol
\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.vbproj]

Build FAILED.

C:\Program Files\dotnet\sdk\2.2.401\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets(137,5
): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.2 or low
er, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\code\roslyn\src\Compilers\CSharp\Test\Symbol\Micr
osoft.CodeAnalysis.CSharp.Symbol.UnitTests.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets(137,5
): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.2 or low
er, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\code\roslyn\src\Compilers\VisualBasic\Test\Symbol
\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.vbproj]
    0 Warning(s)
    2 Error(s)

Time Elapsed 00:00:08.78
Build failed.
```

I'm not sure why it's using .Net Core SDK 2.2.401, I have 3.0.100-preview6-012264 and 3.0.100-preview8-013656 installed and I also thought `restore.cmd` does not depend on having a specific version of the SDK installed (it's certainly not mentioned in [the documentation](https://github.com/dotnet/roslyn/blob/master/docs/contributing/Building,%20Debugging,%20and%20Testing%20on%20Windows.md#working-with-the-code)).</Description>
    <CreatedDate>18/08/2019</CreatedDate>
    <ClosedDate>18/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38084</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected Dereference of a possibly null reference warning</Title>
    <Description>**Version Used**: 
Visual Studio 2019 16.2.2
.NET Core 3 , Preview 8

**Steps to Reproduce**:
When I compile this code, I get a Dereference of a possibly null reference warning in the Console.WriteLine statement.

```cs
using System;

#nullable enable
public class Test
{

    public void DoStuff(Customer? customer)
    {
        if (customer != null)
        {
            if (customer?.Name?.Contains("hello") ?? false)
            {
                Console.WriteLine(customer.Name);  //warning here
            }
        }
    }
}

public class Customer
{
    public string Name = "Hello";
}
```


See the code here:
https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABATARgFgAoEgYgDsBXAGxomBrgAI4KGmTsBmZvZgCpxYJAN4kSzKX17YALMwAiAewDKMKgDNNACgDCVWMrCIA/MwDGhmMcQBKSdPHFpr5gEtNzHVaMmEzACEALzM1HQOLm5SztHRnt6+Nv6mAHQAchAmaXrKFDAQ7hRQOgBEABZwdMqldsym5poQNFBwkXFusR1x2PgAnD7WtggZWW0A3I7dzAC+U25zUVKLi1yyuMwGfohi8zx8+AAMzJkmzKGlABJVNDWTxDNAA=



**Expected Behavior**:
I would expect no warnings from the code, because the customer can never be null when the Console WriteLine is called. 


**Actual Behavior**:
I get a warning "warning CS8602: Dereference of a possibly null reference."</Description>
    <CreatedDate>18/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38083</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE refactoring for cascading ifs?</Title>
    <Description>Consider a method like:
```C#
public static StringComparer GetStringComparer(this CompareInfo compareInfo, CompareOptions options)
{
    if (compareInfo == null)
    {
        throw new ArgumentNullException(nameof(compareInfo));
    }

    if (options == CompareOptions.Ordinal)
    {
        return StringComparer.Ordinal;
    }

    if (options == CompareOptions.OrdinalIgnoreCase)
    {
        return StringComparer.OrdinalIgnoreCase;
    }

    return new CultureAwareComparer(compareInfo, options);
}
```
It can be expressed more succinctly as e.g.
```C#
public static StringComparer GetStringComparer(this CompareInfo compareInfo, CompareOptions options) =&gt;
    compareInfo is null ? throw new ArgumentNullException(nameof(compareInfo)) :
    options == CompareOptions.Ordinal ? StringComparer.Ordinal :
    options == CompareOptions.OrdinalIgnoreCase ? StringComparer.OrdinalIgnoreCase :
    new CultureAwareComparer(compareInfo, options);
}
```
or e.g.
```C#
public static StringComparer GetStringComparer(this CompareInfo compareInfo, CompareOptions options) =&gt;
    compareInfo is null ? throw new ArgumentNullException(nameof(compareInfo)) :
    options switch
    {
        CompareOptions.Ordinal =&gt; StringComparer.Ordinal,
        CompareOptions.OrdinalIgnoreCase =&gt; StringComparer.OrdinalIgnoreCase,
        _ =&gt; new CultureAwareComparer(compareInfo, options)
    }
}
```
It'd be nice if there were an IDE refactoring for that.</Description>
    <CreatedDate>18/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38082</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0016 incorrectly reorders statements, introducing behavioral change</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03

**Steps to Reproduce**:
```C#
using System;

class Program
{
    static void Main() { }

    static void DoWork(string value)
    {
        if (value == null) throw new ArgumentNullException(nameof(value));
        DoExpensiveWork();
        if (IsInconsistentState) throw new InvalidOperationException();
        Value = value;
    }

    public static string Value { get; private set; }

    static void DoExpensiveWork() { }
    static bool IsInconsistentState =&gt; false;
}
```
Run the offered IDE0016.

**Expected Behavior**:
IDE0016 is not offered.

**Actual Behavior**:
IDE0016 is offered, and running it changes the code to:
```C#
static void DoWork(string value)
{
    DoExpensiveWork();
    if (IsInconsistentState) throw new InvalidOperationException();
    Value = value ?? throw new ArgumentNullException(nameof(value));
}
```
This is bad for several reasons:
1. It's changing the order in which exceptions could occur.
2. It's resulting in a bunch of work being done that should have been avoided.
3. Both of those more generally mean it's changing program behavior.

(I could have sworn I opened an issue on this a while ago, but I can't find it now.  It just bit me again, though, so I'm opening one in case that one is lost somewhere.)</Description>
    <CreatedDate>18/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38081</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0016 is crashing on System.Private.CoreLib</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03

**Steps to Reproduce**:
Open System.Private.CoreLib in dotnet/coreclr and run IDE0016's fix all.
```
System.InvalidCastException
  HResult=0x80004002
  Message=Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax'.
  Source=Microsoft.CodeAnalysis.CSharp.Workspaces
  StackTrace:
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.ThrowExpression(SyntaxNode expression) in /_/src/Workspaces/CSharp/Portable/CodeGeneration/CSharpSyntaxGenerator.cs:line 3251
```
![image](https://user-images.githubusercontent.com/2642209/63218783-af96d700-c130-11e9-908a-bd2b910c8af2.png)

It appears to be while processing ArrayList.cs:
![image](https://user-images.githubusercontent.com/2642209/63218792-14523180-c131-11e9-958d-902644d86e3b.png)

And it appears to be very confused, with the `assignmentValue` being for the attribute in the DebugView at the end of the file:
![image](https://user-images.githubusercontent.com/2642209/63218799-38157780-c131-11e9-8df2-9022e5be7156.png)

</Description>
    <CreatedDate>18/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38080</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.3-preview2</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.3-preview2
git reset --hard upstream/release/dev16.3-preview2
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.3-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/08/2019</CreatedDate>
    <ClosedDate>18/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38079</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190816.16
- **Date Produced**: 8/17/2019 12:33 AM
- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19416.16

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)

</Description>
    <CreatedDate>17/08/2019</CreatedDate>
    <ClosedDate>17/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38078</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose  CSharpSyntaxFactsService.Instance</Title>
    <Description>It contains useful helpers for third party analyzers.</Description>
    <CreatedDate>17/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38077</IssueID>
    <RepoID>1</RepoID>
    <Title>Add missed space in markdown title</Title>
    <Description>
    </Description>
    <CreatedDate>17/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38074</IssueID>
    <RepoID>1</RepoID>
    <Title>Local functions not available in intellisense/autocomplete</Title>
    <Description>**Version Used**: 16..3.0 Preview 2.0

**Steps to Reproduce**:
```C#
namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            Loca|

            void Local() { }
        }
    }
}

```

**Expected Behavior**: Local function offered in autocomplete list and provided with intellisense support when typing arguments.

**Actual Behavior**: Local function not in the list and gets colorized only after arguments match the signature.
</Description>
    <CreatedDate>17/08/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38072</IssueID>
    <RepoID>1</RepoID>
    <Title>Needs Design Review: First pass at fixing the formatting of VB Line Continuation Formatting</Title>
    <Description>This addresses _ on line without code, with or without comment. This uses existing Formatting Rules which don't understand VB Line Continuation on blank lines or followed by comment. The results need a design review. I temporarily renamed the effected tests by added 3 _, they could be removed but it would be harder to see the effects of any changes, these are the only tests that I found that hit the code I changed. One area that needs review is the alignment of lines under lines with _ comment.</Description>
    <CreatedDate>17/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38071</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpCompilation EmitDifference fails on Script SyntaxTrees</Title>
    <Description>**Version Used**: 2.9.4

I have been using Roslyn's EnC compiler to generate raw IL and Metadata blobs without needing to compile and parse whole dotNET modules. So far, things have worked as intended and I can freely convert most arbitrary segments of C# code without any issues.

However, when attempting to compile a syntax tree parsed using `SourceCodeKind.Script`, the `EmitDifference` call throws a `System.InvalidOperationException`:
```
'This program location is thought to be unreachable.'
   at Microsoft.Cci.ReferenceIndexer.ProcessMethodBody(IMethodDefinition method)
   at Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer.Visit(IMethodDefinition method)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol.Microsoft.Cci.IReference.Dispatch(MetadataVisitor visitor)
   at Microsoft.Cci.MetadataVisitor.Visit(ITypeDefinitionMember typeMember)
   at Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer.Visit(ITypeDefinitionMember typeMember)
   at Microsoft.Cci.MetadataVisitor.Visit(IEnumerable`1 methods)
   at Microsoft.Cci.ReferenceIndexerBase.Visit(ITypeDefinition typeDefinition)
   at Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer.Visit(ITypeDefinition typeDefinition)
   at Microsoft.Cci.MetadataVisitor.Visit(IEnumerable`1 types)
   at Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer.Visit(CommonPEModuleBuilder module)
   at Microsoft.Cci.MetadataWriter.CreateIndices()
   at Microsoft.Cci.MetadataWriter.BuildMetadataAndIL(PdbWriter nativePdbWriterOpt, BlobBuilder ilBuilder, BlobBuilder mappedFieldDataBuilder, BlobBuilder managedResourceDataBuilder, Blob&amp; mvidFixup, Blob&amp; mvidStringFixup)
   at Microsoft.Cci.MetadataWriter.WriteMetadataAndIL(PdbWriter nativePdbWriterOpt, Stream metadataStream, Stream ilStream, Stream portablePdbStreamOpt, MetadataSizes&amp; metadataSizes)
   at Microsoft.CodeAnalysis.Compilation.SerializeToDeltaStreams(CommonPEModuleBuilder moduleBeingBuilt, EmitBaseline baseline, DefinitionMap definitionMap, SymbolChanges changes, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection`1 updatedMethods, DiagnosticBag diagnostics, Func`2 testSymWriterFactory, String pdbFilePath, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Emit.EmitHelpers.EmitDifference(CSharpCompilation compilation, EmitBaseline baseline, IEnumerable`1 edits, Func`2 isAddedSymbol, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection`1 updatedMethods, CompilationTestData testData, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.EmitDifference(EmitBaseline baseline, IEnumerable`1 edits, Func`2 isAddedSymbol, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection`1 updatedMethods, CompilationTestData testData, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.EmitDifference(EmitBaseline baseline, IEnumerable`1 edits, Func`2 isAddedSymbol, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection`1 updatedMethods, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.EmitDifference(EmitBaseline baseline, IEnumerable`1 edits, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection`1 updatedMethods, CancellationToken cancellationToken)
   at Program.Main(String[] args) in Program.cs:line 50
```

The exception is thrown at the indexing step just before emitting the IL and Metadata to their respective streams. The reason it gets raised is because the `Script.&lt;Main&gt;` entrypoint function of the generated `Script` class has no body and was not compiled in the preceding compilation phase.

The script entrypoint would normally get compiled [here](https://github.com/dotnet/roslyn/blob/2802137e22c19153028c5565f6350cbdee9c0060/src/Compilers/CSharp/Portable/Compiler/MethodCompiler.cs#L132), but since a non-null `filterOpt` was passed in [here](https://github.com/dotnet/roslyn/blob/95c1a18a40ee1418c394c4376874828308220f11/src/Compilers/CSharp/Portable/Emitter/EditAndContinue/EmitHelpers.cs#L71), this step gets skipped, and the script entrypoint is left without a body.

The error appears to be the enclosing `filterOpt is null` condition which seems to be unintentionally suppressing the compilation of the entrypoint.

I have added a minimal repro below. Note how changing the `SourceCodeKind` of the empty syntax tree from `Script` to `Regular` allows the compilation to succeed without any exceptions. Also note that changing the `CSharpCompilation.Create` to `CSharpCompilation.CreateScriptCompilation` does not change the result.

**Repro Code**:
```C#
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection.Metadata;
using System.Runtime.InteropServices;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Emit;

public class Program
{
    static void Main(string[] args)
    {
        byte[] metadataRaw = new byte[] { 0x42, 0x53, 0x4A, 0x42, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x76, 0x34, 0x2E, 0x30, 0x2E, 0x33, 0x30, 0x33, 0x31, 0x39, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x23, 0x7E, 0x00, 0x00, 0xAC, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x23, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x23, 0x55, 0x53, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x23, 0x47, 0x55, 0x49, 0x44, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x23, 0x42, 0x6C, 0x6F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x25, 0x33, 0x00, 0x16, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD5, 0xF2, 0xD0, 0xE5, 0x2C, 0x73, 0x6E, 0x4E, 0xA5, 0xE5, 0x63, 0xAC, 0x00, 0x38, 0xDE, 0xD3, 0x00, 0x01, 0x00, 0x00 };
        GCHandle metadataHandle = GCHandle.Alloc(metadataRaw, GCHandleType.Pinned);
        ModuleMetadata emptyMetadata = ModuleMetadata.CreateFromMetadata(metadataHandle.AddrOfPinnedObject(), metadataRaw.Length);

        Func&lt;MethodDefinitionHandle, EditAndContinueMethodDebugInformation&gt; emptyDebugProvider = _ =&gt; default(EditAndContinueMethodDebugInformation);
        Func&lt;MethodDefinitionHandle, StandaloneSignatureHandle&gt; emptyLocalsProvider = _ =&gt; default(StandaloneSignatureHandle);
        EmitBaseline emptyBaseline = EmitBaseline.CreateInitialBaseline(emptyMetadata, emptyDebugProvider, emptyLocalsProvider, false);

        CSharpParseOptions parseOpts = new CSharpParseOptions(LanguageVersion.Default, DocumentationMode.Parse, SourceCodeKind.Script);
        SyntaxTree emptySyntaxTree = SyntaxFactory.ParseSyntaxTree("", parseOpts);

        MetadataReference mscorlib = MetadataReference.CreateFromFile(typeof(object).Assembly.Location);
        MetadataReference[] references = new[] { mscorlib };

        CSharpCompilationOptions compileOpts = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);
        CSharpCompilation compilation = CSharpCompilation.Create("Context", new SyntaxTree[] { emptySyntaxTree }, references, compileOpts);

        IEnumerable&lt;INamespaceOrTypeSymbol&gt; symbols = compilation.GlobalNamespace.GetMembers("Script");
        IEnumerable&lt;SemanticEdit&gt; edits = symbols.Select(x =&gt; new SemanticEdit(SemanticEditKind.Insert, null, x));
        MethodDefinitionHandle[] methods = new MethodDefinitionHandle[0];

        using (MemoryStream ilStream = new MemoryStream())
        using (MemoryStream metaStream = new MemoryStream())
        using (MemoryStream pdbStream = new MemoryStream())
        {
            compilation.EmitDifference(emptyBaseline, edits, metaStream, ilStream, pdbStream, methods);
        }
    }
}
```
</Description>
    <CreatedDate>17/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38070</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't include unchangeable references as renamable references</Title>
    <Description>Fix feedback https://developercommunity.visualstudio.com/content/problem/682938/csharperenametrackingcodefixprovider-encountered-a.html

I tried an alternative approach @jasonmalinowski suggested, i.e. creating a more general helper like
```cs
Solution ExcludeDisallowedChange(Solution oldSolution, Solution newSolution);
```
However, simply replacing the text/syntax in new document with the one from old one doesn't seem to work, because later when we apply the change, it just check the ref equality of the old and new DocumentState in `GetChangedDocuments`. So I ended up having the "fixed" document still being flagged as changed.

---

@CyrusNajmabadi @heejaechang The repro I have is to rename a type referenced in a .cshtml file, when the cshtml file is not opened in editor. In that scenario, the corresponding .g.cs document contains an auto-generated syntax tree that has the reference, which is then found by SymbolFinder. The part I don't quite understand is that it seems whenever the .cshtml is opened, it's added to the project on the fly and removed when closed, as a result for the .g.cs file, the one with auto-gen syntax tree is replaced with one with empty tree when cshtml is opened (and replaced back when it's closed). Is this how Razor works? 

That said, it seems FAR can handle this regardless of whether cshtml is opened nor not, do you know where it is implemented? It seems to be a different path from `FindReferencesSearchEngine.FindReferencesAsync` that is used by `SymbolFinder.FindRenamableReferencesAsync`? If possible, I'd rather fix this by making rename use whatever implementation that supports FAR.</Description>
    <CreatedDate>17/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38069</IssueID>
    <RepoID>1</RepoID>
    <Title>Generated Equals(T) method has pointless [AllowNull] when T is a value type</Title>
    <Description>**Version Used**: Visual Studio 16.2.2

Generate equality members for:

```cs
struct Foo
{
    public int Bar { get; }
}
```

Result:

```cs
    public bool Equals([AllowNull] Foo other)
    {
        return Bar == other.Bar;
    }
```

Expected behavior: `[AllowNull]` should not be added for value types.
</Description>
    <CreatedDate>17/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38068</IssueID>
    <RepoID>1</RepoID>
    <Title>Generated Equals(object) signature does not match nullability of base method</Title>
    <Description>**Version Used**: VS 16.3 Preview 2

Generate equality members for:

```cs
struct Foo
{
    public int Bar { get; }
}
```

Result:

```cs
    // CS8610 Nullability of reference types in type of parameter 'obj' doesn't match overridden
    // member.           ↓
    public override bool Equals(object obj)
    {
        return obj is Foo foo &amp;&amp; Equals(foo);
    }
```

</Description>
    <CreatedDate>17/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38067</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/08/2019</CreatedDate>
    <ClosedDate>17/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38066</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0029 Coallesce Fix is Formatted Badly</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/694600/ide0029-coallesce-fix-is-formatted-badly.html)._

---
Given the following _illustrative_ code:
```
	public class File
	{
		private string Foo;

		public File(string Foo)
		{
			this.Foo = Foo == null
				? ""
				: Foo;
		}
	}
```
I get an IDE0029 suggestion: &amp;quot;Null check can be simplified.  Use coallesce expression instead of conditional expression.&amp;quot;   I adore the NCO, but after the fix I get:
```
			this.Foo = Foo ?? ""
;
```
Note that the semicolon is on the _following line_, rather than at the end of the statement.  This problem appears to have been introduced in 16.2.2.  Not sure where the fault lies -- could be the IDE, my setup, or Roslynator 2019...  Thought I should report it anyway.

---
### Original Comments

#### Visual Studio Feedback System on 8/15/2019, 02:40 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38065</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 16.1.6 - Collection Initializer Comment Bug</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/696534/vs-1616-collection-initializer-comment-bug.html)._

---
Autocomplete interferes when I try to type a space then a comment on a collection initializer line.
e.g. I'm expecting to get ```[new Version(1, 1)] = new Version(2, 3, 4, 0), /```
but instead I get ```[new Version(1, 1)] = new Version(2, 3, 4, 0), Version/```

Here is a code sample:
```
using System;
using System.Collections.Generic;

namespace Collection_Initializer_Comment_Bug
{
    public static class C
    {
        public static readonly Dictionary&lt;Version, Version&gt; TestDictionary = new Dictionary&lt;Version, Version&gt;
        {
            [new Version(1, 0)] = new Version(1, 2, 3, 0), // Test comment
            [new Version(1, 1)] = new Version(2, 3, 4, 0),
        };
    }
}
```

See attached screenshot.

---
### Original Comments

#### Visual Studio Feedback System on 8/15/2019, 07:50 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38064</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix Metadata as Source caching stale generated files</Title>
    <Description>We maintain a cache of assembly file names and symbols to the generated file. We failed to ever include a version of some kind, so if the metadata file changed on disk, you would continue to get the old generated file.

Commit-at-a-time is recommended; I first nullable annotated the feature before doing work in it.</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38063</IssueID>
    <RepoID>1</RepoID>
    <Title>Check nullability for delegate creation arguments</Title>
    <Description>Closes #37984

Note that the nullability mismatch checks were already happening for method groups and lambdas, but not for delegate arguments.</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38062</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn fails to update state of a member dereferenced via property initializer to non-null</Title>
    <Description>**Version Used**: 

```
Branch master (13 Aug 2019)
Latest commit a08336 by David:
Merge pull request #37916 from dibarbet/partial_load_str

Update partial load dialog string to better match task center.
```

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
class C
{
  C? f;
    
  static void Main()
  {
    var c = new C() { f = { f = null }}; // CS8602, correct
    c.f.ToString(); // CS8602, incorrect
  }
}
```

**Expected Behavior**:
No warnings for `c.f.ToString()` 

**Actual Behavior**:
`warning CS8602: Dereference of a possibly null reference.` is reported for `c.f.ToString()`.

**Notes**
The code above is equivalent to the following:
```
var c = new C();
c.f.f = null; // CS8602, correct
c.f.ToString();
```
in this example however Roslyn correctly updates the field's state to non-null but fails to do so if object initializer syntax is used.</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38061</IssueID>
    <RepoID>1</RepoID>
    <Title>SymbolKey loses nullability information</Title>
    <Description>When using `ISymbol.GetSymbolKey()` if the symbol is an `ITypeSymbol` the nullability information is lost.  Possibly related to #30326 </Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38060</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn incorrectly reports empty property initializers as possible dereferences</Title>
    <Description>**Version Used**: 

```
Branch master (13 Aug 2019)
Latest commit a08336 by David:
Merge pull request #37916 from dibarbet/partial_load_str

Update partial load dialog string to better match task center.
```

**Steps to Reproduce**:

Compile adn run the following code
```cs
#nullable enable
class C
{
  C? f;
    
  static void Main()
  {
    new C() { f = {  }};
  }
}
```

**Expected Behavior**:
No warnings. The field `f` will not be dereferened since there's nothing to initialize here.

**Actual Behavior**:
`warning CS8602: Dereference of a possibly null reference.` is reported for `f = { }` but the code runs without exceptions

**Notes**
It seems like this corner case was handled incorrectly when fixing https://github.com/dotnet/roslyn/issues/32495</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38059</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0054 doesn't trigger for null coalescing assignment</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e0

**Steps to Reproduce**:
```C#
using System;

class Program
{
    static void Main() =&gt; Console.WriteLine(Foo);

    private static string s_foo;
    private static string Foo =&gt; s_foo ?? (s_foo = new string('c', 42));
}
``` 

**Expected Behavior**:
I was expecting that IDE0054 (or some other rule) would trigger to translate this into:
```C#
using System;

class Program
{
    static void Main() =&gt; Console.WriteLine(Foo);

    private static string s_foo;
    private static string Foo =&gt; s_foo ??= new string('c', 42);
}
```

**Actual Behavior**:
No refactoring was available.

Maybe this is a feature request rather than a bug?</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38058</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0025 deletes comments in certain places</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03

**Steps to Reproduce**:
Repro 1:
```C#
using System;

class Program
{
    static void Main() =&gt; Console.WriteLine(Foo);

    private static string Foo
    {
        // cool prop
        get { return "blah"; }
    }
}
```

Repro 2:
```C#
using System;

class Program
{
    static void Main() =&gt; Console.WriteLine(Foo);

    private static string Foo
        // cool prop
    {
        get { return "blah"; }
    }
}
```

Run IDE0025.

**Expected Behavior**:
```C#
using System;

class Program
{
    static void Main() =&gt; Console.WriteLine(Foo);

    private static string Foo =&gt;
        // cool prop
        "blah";
}
```

**Actual Behavior**:
Comments are deleted.
```C#
using System;

class Program
{
    static void Main() =&gt; Console.WriteLine(Foo);

    private static string Foo =&gt; "blah";
}
```</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38057</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0025 strangely indents when a comment follows the property name</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03

**Steps to Reproduce**:
```C#
using System;

class Program
{
    static void Main() =&gt; Console.WriteLine(Foo);

    private static string Foo // cool prop
    {
        get { return "blah"; }
    }
}
```
Run IDE0025.

**Expected Behavior**:
```C#
using System;

class Program
{
    static void Main() =&gt; Console.WriteLine(Foo);

    private static string Foo =&gt; // cool prop
        "blah";
}
```
or
```C#
using System;

class Program
{
    static void Main() =&gt; Console.WriteLine(Foo);

    private static string Foo =&gt;
         // cool prop
        "blah";
}
```
or
```C#
using System;

class Program
{
    static void Main() =&gt; Console.WriteLine(Foo);

    // cool prop
    private static string Foo =&gt; "blah";
}
```

**Actual Behavior**:
```C#
using System;

class Program
{
    static void Main() =&gt; Console.WriteLine(Foo);

    private static string Foo // cool prop
=&gt; "blah";
}
```</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38056</IssueID>
    <RepoID>1</RepoID>
    <Title>Add generation for all IOperation nodes</Title>
    <Description>Almost all IOperation implementations in Microsoft.CodeAnalysis are now being generated. Exceptions are main NoneOperation, InvalidOperation, and the operations that involve dynamic, as we have a special base class they all inherit from internally that's used to implement some public API functionality. Unfortunately, as in the previous PR, I was unable to generate these new classes in-place. I've done some reordering of properties in the xml to make the constructors generate parameters in the same order as they did previously, but in a few cases that wasn't possible, and for those cases I've reordered parameters in other files. I've also standardized the names of the IConvertibleConversion properties, which caused a few renames in the code as well.

I've also added a verification step for the XML, to help prevent simple errors from being introduced. It will ensure that children have an explicit ordering if required, that operations follow naming conventions, that base types are correctly specified, and that summaries are appropriately included. @dotnet/roslyn-compiler please review.</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38055</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0057 incorrectly handles substrings on String itself</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03

**Steps to Reproduce**:
This is a super corner-case only relevant to a few people in the world, so I'll understand if you want to close it.  Just opening the issue in case.

The definition of System.String itself uses its own Substring in a few places, e.g.
```C#
splitStrings[arrIndex++] = Substring(currIndex, sepList[i] - currIndex);
```
IDE0057 fires here, and transforms it into:
```C#
splitStrings[arrIndex++] = Substring[currIndex..sepList[i]];
```
which doesn't compile.  It should have been transformed instead into:
```C#
splitStrings[arrIndex++] = this[currIndex..sepList[i]];
```
which works fine.</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38054</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0054 doesn't simplify to use ++</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:
```C#
static void Foo(ref int i) =&gt; i = i + 1;
``` 
Invoke IDE0054.

**Expected Behavior**:
```C#
static void Foo(ref int i) =&gt; i++;
```

**Actual Behavior**:
```C#
static void Foo(ref int i) =&gt; i += 1;
```

This makes sense given the rule description of "use compound operator", but there's no subsequent rule to then refactor again to `i++`.</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38053</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 generates ambiguity errors for overloads with `out`</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03

**Steps to Reproduce**:
```C#
class Program
{
    static void Main()
    {
        string s;
        Foo(out s);

        int i;
        Foo(out i);
    }

    static void Foo(out int blah) =&gt; blah = 0;
    static void Foo(out string blah) =&gt; blah = "";
}
```
`Fix All` for IDE0059.

**Expected Behavior**:
IDE0059 shouldn't be offered, or if it is, the generated code should employ some disambiguation mechanism.

**Actual Behavior**:
```C#
class Program
{
    static void Main()
    {
        Foo(out _);
        Foo(out _);
    }

    static void Foo(out int blah) =&gt; blah = 0;
    static void Foo(out string blah) =&gt; blah = "";
}
```
which fails to compile:
```
1&gt;Program.cs(5,9,5,12): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Foo(out int)' and 'Program.Foo(out string)'
1&gt;Program.cs(6,9,6,12): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Foo(out int)' and 'Program.Foo(out string)'
```</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38052</IssueID>
    <RepoID>1</RepoID>
    <Title>Disallow `pointer is null` in C# 7.3 in VS 2019</Title>
    <Description>VS 2019 allows this code to compile when the language version is set to 7.3:
```cs
unsafe static void Test()
{
    int* ptr = null;
    _ = ptr is null;
}
```
This code should be invalid before C# 8, and doesn't compile in VS 2017.</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38050</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 doesn't consider nameof to be a use</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03

**Steps to Reproduce**:
```C#
private static void ValidateStartIndexAndLength_Throw(int startIndex, int length) =&gt;
    throw new ArgumentOutOfRangeException(startIndex &lt; 0 ? nameof(startIndex) : nameof(length));
```

**Expected Behavior**:
No warnings.

**Actual Behavior**:
IDE0060 triggers "Remove unused parameter 'length'"

Is that by-design?</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38051</IssueID>
    <RepoID>1</RepoID>
    <Title>provide a way for users to run vsix analyzers on build</Title>
    <Description>some users want to run analyzers and see all issues before invoking fix all for the issues to understand/predict impacts before running fix all.

nuget analyzers work great for this scenario. since you can build to force run them. problem is vsix analyzers including built-in IDE analyzers. since the only way for users to see all issues is turning on full solution analysis and wait for them to run full-analysis.

the catch is our full solution analysis is not built for throughput but as low priority background work. what I mean by that is to reduce the impact on GC and VS UX, it runs on a  lower priority process with plenty of yield to VS to never interfere with VS operations. 

to mitigate this, users can explicitly build to force run analyzers for throughput. VBCSCompiler will run these analyzers for throughput. you can see that VBCSCompiler basically overtake all resources on the machine (100% CPU and IO) since it puts the priority on throughput than VS responsiveness.

but unfortunately, vsix analyzers won't participate in VBCSCompiler. leaving no choice for users to force run those.

we should provide a way to do so. it doesn't need to be VBCSCompiler but a way to force run those for throughput like how we do that for fix all. but to show issues to users.</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38049</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Adding Null Checks For All Parameters"</Title>
    <Description>Reverts dotnet/roslyn#36931

It was merged into wrong branch, should have targeted 16.4 instead.

FYI @stcahlon @jinujoseph @vatsalyaagrawal </Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38048</IssueID>
    <RepoID>1</RepoID>
    <Title>"'using' statement can be simplified" breaks code if used in a multi-targetted project</Title>
    <Description>**Version Used**: 
Visual Studio 16.3.0 Preview 2

**Steps to Reproduce**:

1. create a multi-targetted project (e.g. class library)

```
  &lt;PropertyGroup&gt;
    &lt;TargetFrameworks&gt;netcoreapp3.0; netstandard21; net472&lt;/TargetFrameworks&gt;
  &lt;/PropertyGroup&gt;
```

2. add code with using statement

     using (var scope = ... blah){ ... }

3. accept suggestion to use simple using statement
4. try to compile - get error

&gt; Error	CS8370	Feature 'using declarations' is not available in C# 7.3. Please use language version 8.0 or greater.	

**Expected Behavior**:
No suggestion

**Actual Behavior**:
Accepting  suggestion causes error and breaks build.
</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38047</IssueID>
    <RepoID>1</RepoID>
    <Title>Quick Info for extension methods should reveal nullable receiver type</Title>
    <Description>**Version Used**: 16.3 Preview 2

**Steps to Reproduce**:

```csharp
static class Extensions {
  public static string AsString(this object? data) =&gt; data?.ToString() ?? "";
}

class Example {
  void Method(object? value) {
    value.AsString(); // ← Hover over AsString
  }
}
```

1. Use the above code
2. Hover over the call to `AsString`


**Expected Behavior**:

&gt; (extension) string object?.AsString()

**Actual Behavior**:

&gt; (extension) string object.AsString()</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38046</IssueID>
    <RepoID>1</RepoID>
    <Title>VSSDK update</Title>
    <Description>Cherry pick of https://github.com/dotnet/roslyn/pull/37767 into dev16.4-preview1-vs-deps
</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38045</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle escaping of ref/out parameters on non-regular CFG exit paths (…</Title>
    <Description>…throw, unstructured exception handling, etc.)

Fixes #37709
Fixes #37871</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38044</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 introduces unnecessary local</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03

**Steps to Reproduce**:
```C#
using System;
using System.Runtime.InteropServices;

class Program
{
    static void Main() =&gt; Console.WriteLine(GetTopOfMemory());

    private static ulong GetTopOfMemory()
    {
        var info = new SYSTEM_INFO();
        GetSystemInfo(out info);
        return (ulong)info.lpMaximumApplicationAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal struct SYSTEM_INFO
    {
        internal ushort wProcessorArchitecture;
        internal ushort wReserved;
        internal int dwPageSize;
        internal IntPtr lpMinimumApplicationAddress;
        internal IntPtr lpMaximumApplicationAddress;
        internal IntPtr dwActiveProcessorMask;
        internal int dwNumberOfProcessors;
        internal int dwProcessorType;
        internal int dwAllocationGranularity;
        internal short wProcessorLevel;
        internal short wProcessorRevision;
    }

    [DllImport("kernel32")]
    internal static extern void GetSystemInfo(out SYSTEM_INFO lpSystemInfo);
}
```
Execute IDE0059 on the `var info = new SYSTEM_INFO();` line.

**Expected Behavior**:
Either:
```C#
SYSTEM_INFO info;
GetSystemInfo(out info);
return (ulong)info.lpMaximumApplicationAddress;
```
or
```C#
GetSystemInfo(out SYSTEM_INFO info);
return (ulong)info.lpMaximumApplicationAddress;
```
or IDE0059 isn't offered at all.

**Actual Behavior**:
```C#
_ = new SYSTEM_INFO();
SYSTEM_INFO info;
GetSystemInfo(out info);
return (ulong)info.lpMaximumApplicationAddress;
```
which makes no sense, adding the `_ = new SYSTEM_INFO();`.</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38043</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0009 false positive on local functions</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/695869/ide0009-false-positive-on-local-functions.html)._

---
[regression] [worked-in:16.3.0 Preview 2.0]
On some local functions IDE0009 is triggered e.g.:

```csharp
private void SomeFunction()
{
   object LocalFunction() =&gt; new object();
   this. DoSomethingElse(LocalFunction);
}
```

When invoking &amp;quot;LocalFunction&amp;quot; from whithin &amp;quot;SomeFunction&amp;quot;, IDE0009 is triggered which is not possible to be fixed.

---
### Original Comments

#### Visual Studio Feedback System on 8/15/2019, 09:16 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 8/15/2019, 10:51 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38042</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature gaps between ruleset and .editorconfig </Title>
    <Description>1. **[Low Priority] Diagnostics with Location.None cannot be configured with .editorconfig** - This issue is low priority given no location diagnostics are rare, and the ones in FxCop analyzers package already have a [workardound](https://github.com/dotnet/roslyn-analyzers/pull/2866) in place to avoid this issue.

2. **[[Fixed](https://github.com/dotnet/roslyn/pull/38792)] Analyzers reporting diagnostics with a source location which are disabled by default cannot be enabled with editorconfig or from command line options**. Note: vast majority of security analyzers contributed by C&amp;E are disabled by default, and they have different SDL rulesets to explicitly turn on different combination of security rules. 

3. **[[Mitigated](https://github.com/dotnet/roslyn/pull/38793)] Individual diagnostic analyzers in an analyzer package cannot be completely disabled in .editorconfig.** A ruleset entry with value “None” or /nowarn would disable the analyzer completely ensuring no analyzer callbacks, while an editorconfig dotnet_diagnostic severity = none entry only ensures diagnostics are filtered out, but analyzer still executes. This scenario is important when user wants to disable a specific bad performance analyzer in an analyzer package, without completely uninstalling the package.

4. Rulesets allow project level diagnostic configuration, and it always applies to the entire compilation regardless of source file locations – such a configuration is a strict requirement for security analyzers. **Editorconfig does not allow project level configuration, which might be problematic, especially when generated files or linked files are involved.**

5. With rulesets, users can conditionally select which ruleset to use based on MSBuild evaluations. For example, they can have different rulesets between debug and release configurations or one ruleset per target framework in multitargeting project or have different rulesets between shipping and non-shipping projects. Additionally, rulesets can be consumed from directories outside the project or solution directory. **Editorconfig does not allow specifying explicit configuration files, they are always implicitly chosen based on file name and directory structure by project system's auto discovery**</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38041</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense missing bug for LINQ JOIN </Title>
    <Description>https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.join?view=netframework-4.8

**Version Used**: 
VS 2019 v16.2.2

**Steps to Reproduce**:

1. Copy and paste:

```cs
using (SomeContext context = new SomeContext())
{
	var values = context.Table1.Join(
				context.Table2,
				row1 =&gt; new
				{
					row1.property1
				}
				row2 =&gt; new
				{
					row2.property2 // No intellisense for row2
				}
				(row1, row2) =&gt; new
				{
					row1.property1,
					row2.property2 // No intellisense for row2
				});
}
```

**Expected Behavior**:
Intellisense for row2

**Actual Behavior**:
No intellisense for row2</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38040</IssueID>
    <RepoID>1</RepoID>
    <Title>Subsequent build should not succeed when the first build was failed by warnings treated as error</Title>
    <Description>**Version Used**: 
VS16.3.0 Preview 2

**Steps to Reproduce**:

1. Create a C#/VB console app
1. Turn on **Treat Warning as Error**
1. Add anything that would generate compiler warning, for example, a Task returning async method with empty body: `async Task M() { }`
1. Build
1. Build again

**Expected Behavior**:

Both builds should fail

**Actual Behavior**:

The second build succeeds
</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>17/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38039</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename ProgressStatus.Stoped -&gt; ProgressStatus.Stopped</Title>
    <Description>This should be: `Stopped`:
https://github.com/dotnet/roslyn/blob/3a0c71a1989867afaec436428492337f893923af/src/Features/Core/Portable/SolutionCrawler/ISolutionCrawlerProgressReporter.cs#L49</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>30/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38038</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove inaccessible attributes when generating code</Title>
    <Description>This removes inaccessible attributes from some codegen scenarios. This helps (generally) the case where there are NullableAnnotation attributes in metadata and we want to drop them. We still will also need to do targeted work to remove those _anyways_ if you have InternalsVisibleTo, but this helps those scenarios regardless.</Description>
    <CreatedDate>16/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38037</IssueID>
    <RepoID>1</RepoID>
    <Title>TypeImportCompletionItem.GetCompletionDescriptionAsync should not return null</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/36381
At least I could not find other provider returning null.

@genlu please let me know if you see an option to add a unit test here.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38036</IssueID>
    <RepoID>1</RepoID>
    <Title>Assign properties from different classes but that have similar names and types e.g In constructor</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/691173/assign-properties-from-different-classes-but-that.html)._

---
If I have a two different classes but have similar named properties that are of the same type, then when I pass one class into the constructer of the other class, could you make it so that intelisence options are that it can suggest that the properties of the passed in argum ent can be assigened to the the members of that class.

for example,I have an entity class called Person that has id and name as properties and then I have a display (or resource) class called PersonResource that has name as a property. The PersonResource class has a constructer that accepts an arugment of type Person. Then if its possible, could it be that the command Ctrl + . also suggest assigning the similar properties between the two classes (i.e this. Name = passedInArgument.Name;

Thank you

---
### Original Comments

#### Jane Wu [MSFT] on 8/13/2019, 02:54 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38035</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense Return vs. RetrieveVirtualItemEventArgs</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/684599/intellisense-return-vs-retrievevirtualitemeventarg.html)._

---
&lt;p&gt;Hello, &lt;br&gt;&lt;br&gt;since some time there is a class &amp;quot;RetrieveVirtualItemEventArgs&amp;quot;. &lt;br&gt;But the problem: every time I try to write &amp;quot;Return&amp;quot; by &amp;quot;ret&amp;quot; and then Tab (like it was LONG time) IntelliSense has this &amp;quot;RetrieveVirtualItemEventArgs&amp;quot; and uses this. &lt;/p&gt; &lt;p&gt;After some uses of &amp;quot;Return&amp;quot; in the IntelliSense it suggest also &amp;quot;Return&amp;quot; now on, but after a new program start the &amp;quot;RetrieveVirtualItemEventArgs&amp;quot; is the top suggestion.&lt;/p&gt; &lt;p&gt;In the fact that Return is written WAY more often in general, and also some other words/commands. It would be nice to get an option or menu where you can config the default top suggestions for IntelliSense. &lt;br&gt;Like so:&lt;br&gt;There is a menu entry for the IntelliSense with a listbox, where you can enter the default top suggestions for the IntelliSense, which the IntelliSence can use for the first appearance of a situation, where no current session information about the last usages of any suggestions. &lt;br&gt;This would be great to be able to config the own IDE environment in this way, to get a better user experience. &lt;br&gt;&lt;br&gt;Sincerely yours&lt;br&gt;Kay &lt;/p&gt;

---
### Original Comments
(no comments)</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38034</IssueID>
    <RepoID>1</RepoID>
    <Title>Wrong intellisense for dynamic variable</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/521077/wrong-intellisense-for-dynamic-variable.html)._

---
The picture says it all. Intellisense shows that a member name does not exist on a dynamic variable -- which is pretty much impossible given what dynamic variables are all about.

---
### Original Comments

#### Steve on 4/7/2019, 00:27 PM: 

Further information, the wrong intellisense message comes and goes along with a correct intellisense for a subsequent line. The subsequent line is "targetNode.NotifyReplacedAll()" and the intellisense message for that line is on "NotifyReplacedAll", intellisense says "The name 'NotifyReplacedAll' does not exist in the current context". If I comment out this line then the incorrect intellisense on the earlier line (on the dynamic method call) disappears. In other words, it looks like the wrong intellisense message on the dynamic method call is being copied from a correct intellisense message on a subsequent line. 
#### Steve on 4/7/2019, 00:37 PM: 

"Subsequent' in the above does not mean immediately following. There are some intervening correct lines. 
#### Visual Studio Feedback System on 4/8/2019, 02:32 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38033</IssueID>
    <RepoID>1</RepoID>
    <Title>intellisense creates a new method after selecting existing method in file and pressing tab</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/523578/intellisense-creates-a-new-method-after-selecting.html)._

---
I'm trying to wire up an event on variablesGridView.

I type `variablesGridView.ShowingEditor +=` and then press `Alt + Right Arrow` to bring up intellisense.

Intellisense shows available methods, I select `variablesGridView_ShowingEditor` (already exists within file) and then press `Tab`.

Expected:
Should wire up event to existing method, i.e. `variablesGridView.ShowingEditor += variablesGridView_ShowingEditor;`

Actual:
New method with differing capitalisation is created, i.e. 
```
variablesGridView.ShowingEditor += VariablesGridView_ShowingEditor;

private void VariablesGridView_ShowingEditor(object sender, CancelEventArgs e)
{
    throw new NotImplementedException();
}
```

---
### Original Comments

#### Visual Studio Feedback System on 4/8/2019, 09:37 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38032</IssueID>
    <RepoID>1</RepoID>
    <Title>using alt+enter refactor code, scope:Project translation is missing </Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/524119/using-altenter-refactor-code-scopeproject-translat.html)._

---
using alt+enter refactor code, scope:Project translation is missing

---
### Original Comments

#### Visual Studio Feedback System on 4/9/2019, 11:36 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38031</IssueID>
    <RepoID>1</RepoID>
    <Title>Qualifying static member suppresses refactoring suggestions</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/679110/qualifying-static-member-suppresses-refactoring-su.html)._

---
This code with qualification of defaultInstance produces no refactoring or static analysis suggestion:

```
        public class TrayJob
        {
            private static TrayJob defaultInstance = new TrayJob();
            internal static TrayJob Default =&amp;gt; TrayJob.defaultInstance;
```

However, when the qualification is removed there is an IDE044 Make field readonly, I believe from Code Analysis, and refactoring suggestions &amp;quot;Use auto property&amp;quot; and &amp;quot;Make field readonly&amp;quot;.

```
        public class TrayJob
        {
            private static TrayJob defaultInstance = new TrayJob();
            internal static TrayJob Default =&amp;gt; defaultInstance;

```

---
### Original Comments

#### Visual Studio Feedback System on 8/7/2019, 11:32 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38030</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn loses information about default value being assigned to a struct in case there are multiple casts</Title>
    <Description>**Version Used**: 

```
Branch master (13 Aug 2019)
Latest commit a08336 by David:
Merge pull request #37916 from dibarbet/partial_load_str

Update partial load dialog string to better match task center.
```

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
struct S
{
  string field;
    
  public S(string s) =&gt; field = s;
    
  static void Main()
  {
    S s = (S) (S) default;
    s.field.ToString(); // no warning
  }
}
```

**Expected Behavior**:
`warning CS8602: Dereference of a possibly null reference.` for `s.field.ToString()`

**Actual Behavior**:
No warnings. The program crashes at runtime with a `NullReferenceException`

</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38029</IssueID>
    <RepoID>1</RepoID>
    <Title>Update contribution instructions</Title>
    <Description>Commit at a time might explain the steps.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38028</IssueID>
    <RepoID>1</RepoID>
    <Title>Editor for comments in C# code or any kind of code that Visual Studio handles</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/691325/editor-for-comments-in-c-code-or-any-kind-of-code.html)._

---
It would be time to have a small revamp of the comments in C# code or why not any code for which we can add HTML including images, formming text with colors etc... A comment like in OneNote which is a small editor we can format the text and then the box disapears after you finish your comment.  That would be very productive.

Of course OneNote is somewhat limited but it's a good start !

### You see even here I can make text BIG but OneNote is a better example LOL!

---
### Original Comments

#### Jane Wu [MSFT] on 8/13/2019, 02:54 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38027</IssueID>
    <RepoID>1</RepoID>
    <Title>updating debugger implementation SDK</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/37997</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38026</IssueID>
    <RepoID>1</RepoID>
    <Title>Show help for standard format strings when used in interpolated formatting.</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/672713/show-help-for-standard-format-strings-when-used-in.html)._

---
&lt;p&gt;When creating an interpolated string ($&amp;quot;Date is {datefld,10:d}&amp;quot;) is would be helpful to provide a display of the codes and their meaning. For instance, the date format of 'd' provides a m/d/yyyy output. But, I always have to search the DateTime . ToString() format codes; I can never remember them.&lt;/p&gt; &lt;p&gt;Perhaps keying the ':' could provide a selectable list of standard format codes available for the Type being displayed.&lt;/p&gt;

---
### Original Comments
(no comments)</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38025</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to a new Windows pool</Title>
    <Description>One possible cause of our git clone issues is it seems to be specific to
the Windows 2017 pool. Trying out a new pool to see if the issues stop
reproducing there.

Further this pool doesn't have Visual Studio installed hence will
force our clean build scenarios</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38024</IssueID>
    <RepoID>1</RepoID>
    <Title>Bump the Roslyn package version to 3.3.1</Title>
    <Description>We've published intermediate 3.3.0 packages for some early consumers,
so our final shipping version will be 3.3.1.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>17/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38023</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38022</IssueID>
    <RepoID>1</RepoID>
    <Title>VSMaster Experimental instance - Cannot load Razor OOP service and attempts to create sessions stop further execution</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/2008729/63118842-8d942d80-bf53-11e9-9082-cc84a4bfe8bc.png)

**Steps to Reproduce**:
This doesn't happen when using VSMaster proper (non-experimental instance) for whatever reason.

1. Install VSMaster build
1. `git clone https://github.com/aspnet/AspNetCore-Tooling.git`
1. Run `./build.cmd`
1. Open `src/Razor/Razor.sln`
1. Run the `Microsoft.VisualStudio.RazorExtension` project.
1. Create a new ASP.NET Core project (can be Blazor, Razor pages, MVC, any of them).

If you want you can even `git checkout 69aed0295581cf85501679f882da9d68f931ae0a` to synchronize with the exact Razor bits in VS master for extra certainty (tried, fails the same way).

@ajaybhargavb tried the same repro and also ran into the same issue. This does not repro on public 16.3-preview2.

**Expected Behavior**:

- We can resolve information in Roslyn's OOP host


**Actual Behavior**:

![image](https://user-images.githubusercontent.com/2008729/63118802-79503080-bf53-11e9-871c-c4647cb7f4bb.png)

Also, our `catch` never fires for whatever reason. The entire flow just stops because of how this method is exploding.
</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38021</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion Tests: Remove WaitForAsynchronousOperationsAsync from explicit calls in tests</Title>
    <Description>Just a refactroing
Fixes https://github.com/dotnet/roslyn/issues/33379</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>24/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38020</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotate SymbolInfo and TypeInfo</Title>
    <Description>I am leaving some constructors of SymbolInfo as taking a non-null symbol, since it appears callers do actually try to use SymbolInfo.None in those cases. As the compiler is annotated it may be necessary to change.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38019</IssueID>
    <RepoID>1</RepoID>
    <Title>Possibly null warning following Debug.Assert()</Title>
    <Description>When compiling with .NET Framework, the use of `Debug.Assert()` adds warnings rather than removing.
```C#
using System.Diagnostics;

class Program
{
    static void F(
        object x,
#nullable enable 
        object y)
    {
        Debug.Assert(x != null);
        Debug.Assert(y != null);

        x.ToString(); // warning: possibly null
        y.ToString(); // warning: possibly null
    }
}
```
</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38018</IssueID>
    <RepoID>1</RepoID>
    <Title>Report NFW on background thread</Title>
    <Description>This is an attempt to fix #29100. 

@heejaechang @jasonmalinowski @davkean @AArnott 
Could you guys please take a look?</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38017</IssueID>
    <RepoID>1</RepoID>
    <Title>Building Roslyn with analyzers slows build by 2-7x</Title>
    <Description>### Repro
1. Create a clean enlistment of Roslyn
2. Run `.\Restore.cmd`
3. Run `.\Build.cmd -c Release -v quiet`, measuring the elapsed time
4. Clean the enlistment (`git clean -xdf`)
5. Run `.\Restore.cmd`
6. Run `.\Build.cmd -c Release -v quiet -skipAnalyzers`, measuring the elapsed time

Note: You can run swap steps 3 and 6 and the results are the same (skipping analyzers first or running them first)
Note: You may want to pipe the console output to a file for more consistent results (and so Console Output doesn't become a bottleneck)

### Results - Without Analyzers
```
AMD Ryzen 3900x: 1m 5s
AMD Ryzen 1800x: 2m
Intel i7 7700: 2m: 30s
```

### Results - With Analyzers
```
AMD Ryzen 3900x: 7m
AMD Ryzen 1800x: 11m 10s
Intel i7 7700: 5m 7s
```</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38016</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve syntax diffing of similar nodes</Title>
    <Description>This is a recreation of https://github.com/dotnet/roslyn/pull/30634, see that PR for detailed explanation and previous discussion.

Contributes to https://github.com/dotnet/roslyn/issues/17498


cc: @CyrusNajmabadi, @RikkiGibson </Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38015</IssueID>
    <RepoID>1</RepoID>
    <Title>Mark more M.VS.LanguageServer.* packages as private packages</Title>
    <Description>These dependencies are provided by VS.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38014</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix crash in nullable Equals analysis</Title>
    <Description>Closes #38010.

/cc @agocke

This fixes a crash when we successfully resolve the overload of the Equals method being called but there are not enough arguments to it. In practice this means that only object.ReferenceEquals which is not overloaded would crash VS. Also fixes the same issue in CompareExchange analysis which could crash if it was only declared it with one overload.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38013</IssueID>
    <RepoID>1</RepoID>
    <Title>Add nullable annotations to IDE code (part 2)</Title>
    <Description>
    </Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>21/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38012</IssueID>
    <RepoID>1</RepoID>
    <Title>Collapse very long parameter lists</Title>
    <Description>This would be useful for 10+ line method calls (think VerifyDiagnostics)

</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38011</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring to populate property initializer</Title>
    <Description>```cs
new User
{
  $
}
```
Trigger on cursor `$` -&gt;
```cs

new User
{
  FirstName = ,
  LastName = ,
}
```
</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38010</IssueID>
    <RepoID>1</RepoID>
    <Title>preview8: Typing `ReferenceEquals(` crashes VS with IndexOutOfRangeException in NullableWalker.LearnFromEqualsMethod</Title>
    <Description>**Version Used**:

* .NET Core 3.0.100-preview8-013656
* Microsoft Visual Studio Community 2019 Preview Version 16.3.0 Preview 2.0
* Microsoft Windows 10 Pro x64 10.0.17763 N/A Build 17763

**Steps to Reproduce**:

1. Create a new C# .NET Core console project.
2. Enable NRTs by adding `&lt;Nullable&gt;enable&lt;/Nullable&gt;` to the csproj file.
3. Click Save All because you're about to lose any unsaved changes.
4. In the generated `Main` method, type `ReferenceEquals(`.

**Expected Behavior**: Lack of a crash.

**Actual Behavior**: Visual Studio crashes immediately without an error dialog of any kind.

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.IndexOutOfRangeException: Index was outside the bounds of the array.
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.LearnFromEqualsMethod(MethodSymbol method, BoundCall node, TypeWithState receiverType, ImmutableArray`1 results)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.ReinferMethodAndVisitArguments(BoundCall node, TypeWithState receiverType)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitRvalue(BoundExpression node, Boolean isKnownToBeAnLvalue)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitExpressionStatement(BoundExpressionStatement node)
   at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatement(BoundStatement statement)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatements(ImmutableArray`1 statements)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Analyze(Boolean&amp; badRegion, Optional`1 initialState)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(NullableWalker walker, Symbol symbol, DiagnosticBag diagnostics, VariableState initialState, Builder snapshotBuilderOpt)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, Conversions conversions, DiagnosticBag diagnostics, Boolean useMethodSignatureParameterTypes, MethodSymbol methodSignatureOpt, VariableState initialState, Builder analyzedNullabilityMapOpt, Builder updatedMethodSymbolMapOpt, Builder snapshotBuilderOpt, ArrayBuilder`1 returnTypesOpt)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeAndRewrite(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, DiagnosticBag diagnostics, Boolean createSnapshots, SnapshotManager&amp; snapshotManager)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.RewriteNullableBoundNodesWithSnapshots(BoundNode boundRoot, Binder binder, DiagnosticBag diagnostics, Boolean createSnapshots, SnapshotManager&amp; snapshotManager)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.&lt;EnsureNullabilityAnalysisPerformedIfNecessary&gt;g__ensureSpeculativeNodeBound|127_0(&lt;&gt;c__DisplayClass127_0&amp; )
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.EnsureNullabilityAnalysisPerformedIfNecessary()
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp; bindableNode, BoundNode&amp; lowestBoundNode, BoundNode&amp; highestBoundNode, BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetMemberGroupWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetMemberGroup(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetMemberGroup(SemanticModel semanticModel, ExpressionSyntax expression, CancellationToken cancellationToken)
   at Pythia.PythiaSignatureHelpProvider.&lt;GetItemsWorkerAsync&gt;d__6.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.SignatureHelp.AbstractSignatureHelpProvider.&lt;GetItemsAsync&gt;d__15.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller.Session.&lt;ComputeItemsAsync&gt;d__9.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&lt;ComputeItemsAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&lt;ComputeItemsAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.ValueTuple`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&lt;ComputeItemsAsync&gt;d__9, Microsoft.CodeAnalysis.EditorFeatures, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ComputeItemsAsync&gt;d__9 ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session.ComputeItemsAsync(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider&gt;, Microsoft.VisualStudio.Text.SnapshotPoint, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo, Microsoft.CodeAnalysis.Document, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&lt;ComputeModelInBackgroundAsync&gt;d__4.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&lt;ComputeModelInBackgroundAsync&gt;d__4, Microsoft.CodeAnalysis.EditorFeatures, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ComputeModelInBackgroundAsync&gt;d__4 ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session.ComputeModelInBackgroundAsync(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SignatureHelp.ISignatureHelpProvider&gt;, Microsoft.VisualStudio.Text.SnapshotPoint, Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.DisconnectedBufferGraph, Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Controller+Session+&lt;&gt;c__DisplayClass3_0.&lt;ComputeModel&gt;b__0(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.SignatureHelp.Model, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ModelComputation`1+&lt;&gt;c__DisplayClass17_0[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;ChainTaskAndNotifyControllerWhenFinished&gt;b__0(System.Threading.Tasks.Task`1&lt;System.__Canon&gt;)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass15_0`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWithFromAsync&gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38009</IssueID>
    <RepoID>1</RepoID>
    <Title>Suggest to convert if-statement to case-guard</Title>
    <Description>```cs
case 0:
  if (c) { return 0; };
  break;
```
-&gt;
```cs
case 0 when c:
  return 0;
```</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38008</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix typo</Title>
    <Description>Fix typo and simplify switch</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38007</IssueID>
    <RepoID>1</RepoID>
    <Title>Bugfixes for ConvertSwitchStatementToExpression</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/37949 (leave open for offering the fix instead of bail out)
~Fixes https://github.com/dotnet/roslyn/issues/37950~ (will be resolved on the compiler side)
Fixes https://github.com/dotnet/roslyn/issues/36876
Fixes https://github.com/dotnet/roslyn/issues/37873
Fixes https://github.com/dotnet/roslyn/issues/37872
Fixes https://github.com/dotnet/roslyn/issues/37907
Fixes https://github.com/dotnet/roslyn/issues/37947
Closes https://github.com/dotnet/roslyn/issues/36877 (duplicate of https://github.com/dotnet/roslyn/issues/37873)</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38006</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38005</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharp Scripting string interpolation using switch epxression fails with CS8652</Title>
    <Description>**Version Used**: 
dotnet 3.0.100-preview7-012821
Microsoft.CodeAnalysis.CSharp.Scripting 3.3.0-beta1-final
**Steps to Reproduce**:

Run xunit test (FluentAssertions)
```        
        [Fact]
        public async void Eval()
        {
            const string template = @"{(1 == 1 ? ""11"" : ""22"")}";
            var works = await CSharpScript.EvaluateAsync($@"return $@""{template}"";");
            works.Should().Be("11");

            $"{1 switch {2 =&gt; "22", 1 =&gt; "11"}}".Should().Be("11");
            
            const string template2 = @"{(1 switch {2 =&gt; ""22"", 1 =&gt; ""11""})}";
            var fails = await CSharpScript.EvaluateAsync($@"return $@""{template2}"";");
            fails.Should().Be("11");
        }
```

**Expected Behavior**:
Test passed

**Actual Behavior**:
Test fails at line 
`var fails = await CSharpScript.EvaluateAsync($@"return $@""{template2}"";");`
wtih exception
```
  Error Message:
   Microsoft.CodeAnalysis.Scripting.CompilationErrorException : (1,13): error CS8652: The feature 'recursive patterns' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version.
  Stack Trace:
     at Microsoft.CodeAnalysis.Scripting.ScriptBuilder.ThrowIfAnyCompilationErrors(DiagnosticBag diagnostics, DiagnosticFormatter formatter)
   at Microsoft.CodeAnalysis.Scripting.ScriptBuilder.CreateExecutor[T](ScriptCompiler compiler, Compilation compilation, Boolean emitDebugInformation, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Scripting.Script`1.GetExecutor(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Scripting.Script`1.RunAsync(Object globals, Func`2 catchException, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Scripting.Script`1.RunAsync(Object globals, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Scripting.CSharpScript.RunAsync[T](String code, ScriptOptions options, Object globals, Type globalsType, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Scripting.CSharpScript.EvaluateAsync[T](String code, ScriptOptions options, Object globals, Type globalsType, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Scripting.CSharpScript.EvaluateAsync(String code, ScriptOptions options, Object globals, Type globalsType, CancellationToken cancellationToken)
...
   at System.Threading.Tasks.Task.&lt;&gt;c.&lt;ThrowAsync&gt;b__139_0(Object state)
```
</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38004</IssueID>
    <RepoID>1</RepoID>
    <Title>error BC40000 in VisualBasic.Symbol.UnitTests.vbproj</Title>
    <Description>**Version Used**: 
VS16.3.0 Preview 2

Updated VS and repo today and did a `.\Build.cmd`, the first time it failed with
```
\src\Compilers\VisualBasic\Test\Symbol\SymbolsTests\SymbolErrorTests.vb(10539,25): error BC40000: 'Public Const vbNewLine As String' i
s obsolete: 'For a carriage return and line feed, use vbCrLf.  For the current platform's newline, use System.Environment.NewLine.'. [\src\Compilers\VisualBasic\Test\Symbol\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.vbproj]
```

I was about to report this issue but then the second run of `.\Build.cmd` succeeded.

**Update:**

To reproduce the error, run `git clean -fdx`, then restore and build again.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38003</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot use scaffolding in IDE with using declarations</Title>
    <Description>**Version Used**: Visual Studio 2019 16.3.0 Preview 2.0

**Steps to Reproduce**:

1. A function with `using DisposbleType x = new DisposableType()`
2. Try to scaffold something, e.g. an ASP.NET Core View with EF Core

**Expected Behavior**: View is successfully scaffolded

**Actual Behavior**: Error: 'Could not get the reflection type for DbContext : Example.Models.myDbContext'

Changing the using declaration to a using statement makes the error go away.

</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38002</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix calls to WaitAndGetResult in Peek</Title>
    <Description>This is allowed to be called on the background thread (since that's how the editor API works), so let's mark it as such.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38001</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>38000</IssueID>
    <RepoID>1</RepoID>
    <Title>Writing code to call a function using identifiers that don’t exist yet</Title>
    <Description>
Fixes https://github.com/dotnet/roslyn/issues/33667

Writing code to call a function using identifiers that don’t exist yet.

```
class Program
{
    static void Main ( string[] args )
    {
        var mySvc = new MyService(10, otherSvc, $$);
    }        
}

class MyService
{
    public MyService (int id, OtherService otherService, string name)
    {
    }
}

class OtherService
{
}
```

In this scenario I’ve just put the comma in the call to new MyService in Main. I now enter a variable name name that doesn’t exist yet. As soon as you hit space or a dot (because this is an object) then IS autocompletes to the name: parameter name. This isn’t what I wanted so I have to stop my typing, go back and correct to the variable (I haven’t defined yet) and then continue typing. In VS 2017 it doesn’t autocomplete to the parameter name. It does recognize that the parameter name is the best choice, it just doesn’t auto complete it.

**Expected by user**
`        var mySvc = new MyService(10, otherSvc, name);`
**Actual**
`        var mySvc = new MyService(10, otherSvc, name:);`</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>24/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37999</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37998</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/08/2019</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37997</IssueID>
    <RepoID>1</RepoID>
    <Title>Build in master-vs-deps currently relies on non-strong-name-signed packages</Title>
    <Description>```
error : CreatePkgDef : error : ReflectionTypeLoadException: Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information. [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error :    at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error :    at System.Reflection.RuntimeModule.GetTypes() [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error :    at System.Reflection.Assembly.GetTypes() [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error :    at Microsoft.VisualStudio.Tools.CreatePkgDef.ProcessAssembly(String fileName, Hive hive, PkgDefContext context, Boolean register, RegistrationMode mode) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error :    at Microsoft.VisualStudio.Tools.CreatePkgDef.DoCreatePkgDef(InputArguments inputArguments) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error :    at Microsoft.VisualStudio.Tools.CreatePkgDef.Main(String[] arguments) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error : Could not load file or assembly 'Microsoft.VisualStudio.Debugger.UI.Interfaces, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Strong name validation failed (Exception from HRESULT: 0x8013141A) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error : Could not load file or assembly 'Microsoft.VisualStudio.Debugger.UI.Interfaces, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error : Could not load file or assembly 'Microsoft.VisualStudio.Debugger.UI.Interfaces, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error : Could not load file or assembly 'Microsoft.VisualStudio.Debugger.Engine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error : Could not load file or assembly 'Microsoft.VisualStudio.Debugger.Engine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error : Could not load file or assembly 'Microsoft.VisualStudio.Debugger.Engine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error : Could not load file or assembly 'Microsoft.VisualStudio.Debugger.UI.Interfaces, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error : Could not load file or assembly 'Microsoft.VisualStudio.Debugger.UI.Interfaces, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
error : Could not load file or assembly 'Microsoft.VisualStudio.Debugger.Engine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) [F:\Projects\Roslyn\src\VisualStudio\Core\Def\Microsoft.VisualStudio.LanguageServices.csproj]
```

@ivanbasov @tmat Any idea who we can reach out and get newer debugger packages?</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37996</IssueID>
    <RepoID>1</RepoID>
    <Title>Compilation.Emit generates XML documentation in presence of compiler errors</Title>
    <Description>Tracking issue for discussion at https://github.com/dotnet/roslyn/pull/37948#discussion_r313594748. Command line compiler does not generate xml doc file in presence of compiler errors or warnings escalated to errors. However, Emit API generates xml doc content even for this scenario, and we have few [VB compiler unit tests](https://github.com/dotnet/roslyn/pull/37948#discussion_r314084054) relying on this behavior. This issue tracks auditing this behavior and making any design changes as required.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37995</IssueID>
    <RepoID>1</RepoID>
    <Title>IsNullOrEmpty isn't treated as a null reference check</Title>
    <Description>The preview 8 compiler is unable to correctly interpret `string.IsNullOrEmpty` method call and produces a warning `warning CS8602: Dereference of a possibly null reference.`, but it must not. The same thing happens with `IsNullOrWhiteSpace`.

```csharp
string? nullableString = null;
int y = string.IsNullOrEmpty(nullableString) ? 24 : nullableString.Length;
int z = string.IsNullOrWhiteSpace(nullableString) ? 24 : nullableString.Length;
```

The problem can be worked around by using `value?.Length &gt; 0` instead of the method.

Previously was discussed in #37328 and marked as fixed.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37994</IssueID>
    <RepoID>1</RepoID>
    <Title> Add IL verification with ILVerify in addition to PEVerify</Title>
    <Description>
    </Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37993</IssueID>
    <RepoID>1</RepoID>
    <Title>Property flow state wins over [NotNull] attribute for warnings</Title>
    <Description>Slightly related to #37313

**Version Used**: a08336f

**Steps to Reproduce**:

```cs
namespace ConsoleApp114
{
#nullable enable

    public class Doot
    {
        private string _toot = string.Empty;

        [AllowNull, NotNull]
        public string Toot
        {
            get =&gt; _toot;
            set =&gt; _toot = value ?? string.Empty;
        }
    }
    class Program
    {

        static void Main(string[] args)
        {
            var doot = new Doot();
            doot.Toot = null; // No warning, as expected
            Console.Write(doot.Toot.Length); // Unexpected warning
        }
    }
}
```

/cc @jcouv</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37992</IssueID>
    <RepoID>1</RepoID>
    <Title>Make CompletionItem.InlineDescription public</Title>
    <Description>Fixes #37926 </Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37991</IssueID>
    <RepoID>1</RepoID>
    <Title>Replace method with property refactoring does not respect nested types</Title>
    <Description>When determining if a valid setter is available, the code refactoring does not work for nested types. I tried adding the below tests, which fail due to the setter not getting included. 


```C#
[Fact, Trait(Traits.Feature, Traits.Features.CodeActionsReplaceMethodWithProperty)]
        public async Task AllowIfNestedNullableIsSame()
        {
            await TestInRegularAndScriptAsync(
@"
#nullable enable

using System.Linq;

class C
{
    private IEnumerable&lt;string?&gt; names;

    public void SetNames(IEnumerable&lt;string?&gt; names)
    {
        this.names = names;
    }

    public IEnumerable&lt;string?&gt; [||]GetNames()
    {
        return this.names.Where(n =&gt; n is object);
    }
}",
@"
#nullable enable

using System.Linq;

class C
{
    private IEnumerable&lt;string?&gt; names;

    public IEnumerable&lt;string?&gt; Names { get =&gt; this.names.Where(n =&gt; n is object); set =&gt; this.names = value; }
}");
        }

        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsReplaceMethodWithProperty)]
        public async Task TestGetSetWithGeneric()
        {
            await TestInRegularAndScriptAsync(
@"
using System.Threading.Tasks;

class C
{
    private Task&lt;string&gt; someTask;

    public void SetSomeTask(Task&lt;string&gt; t)
    {
        this.someTask = t;
    }

    public ImmutableArray&lt;string&gt; [||]GetSomeTask()
    {
        return this.someTask;
    }
}",
@"
using System.Threading.Tasks;

class C
{
    private Task&lt;string&gt; someTask;

    public Task&lt;string&gt; SomeTask { get =&gt; this.someTask; set =&gt; this.someTask = value; }
}");
        }
```</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37990</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring to add [DebuggerDisplay("{GetDebuggerDisplay(),nq}")]</Title>
    <Description>Would you accept a refactoring on the header of a type containing an overridden ToString to add `[DebuggerDisplay("{ToString(),nq}")]` and `using System.Diagnostics;`?

I'm typing this all the time without intellisense because of the rare namespace.

The `nq` specifier means "no quotes" and it prevents the custom instance being surrounded with curlies and displayed as `{value}`. This is rarely something I want, whether it's `{0}` or `{C:\some\file.txt}` or `{Some(42)}` and `{None}`.

I'd happily send a PR your way if this sounds good to you.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37989</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37988</IssueID>
    <RepoID>1</RepoID>
    <Title>VB: IDE0060 false positive when using XML axis properties</Title>
    <Description>**Version Used**: VS 16.3 Preview 2

**Steps to Reproduce**:

1. Paste the code below into a VB file.

```vbnet
Public Class C
    Sub M(param As XElement)
        Dim a = param.&lt;Test&gt;
        Dim b = param.@Test
        Dim c = param...&lt;Test&gt;
    End Sub
End Class
```

**Expected Behavior**: `param` is not marked as unused.

**Actual Behavior**: `param` is marked as unused (IDE0060).
</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37987</IssueID>
    <RepoID>1</RepoID>
    <Title>Property on Generic type class with class? constract not analysed correctly</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/683735/property-on-generic-type-class-with-class-constrac.html)._

---
In the below example the Data property is underlined saying 

"Non-nullable property 'Data' is uninitialized."

```cs
public class ApiResponse&lt;T&gt;
        where T : class?
{
    public T Data { get; set; }
}

```

---
### Original Comments

#### Visual Studio Feedback System on 8/9/2019, 02:33 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37986</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37985</IssueID>
    <RepoID>1</RepoID>
    <Title>VB DIM work</Title>
    <Description>- Do not require to implement a method representing a re-abstraction of an interface method from base interface. Closes #35823.
- Enable tests verifying that class is required to implement a virtual interface method. Closes #35820.
- Report an attempt to implement an inaccessible interface member. Closes #35824.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37984</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should warn about null arguments to delegates' constructors</Title>
    <Description>**Version Used**: 

```
Branch master (10 Aug 2019)
Latest commit c21548 by dotnet-automerge-bot:
Merge pull request #37896 from dotnet/merges/release/dev16.3-preview2-to-master

Merge release/dev16.3-preview2 to master
```

**Steps to Reproduce**:

Compile and run the following code:
```cs
#nullable enable
using System;

class C
{
  static void Main()
  {
    M(null);
  }
  static void M(Action? a)
  {
    var d = new D(a);
  }
}

delegate void D();
```

**Expected Behavior**:
Warning reported for `new D(a)` as delegates' constructors do not accept nulls.

**Actual Behavior**:
No warnings. The program crashes at runtime with 
```
System.ArgumentException: Delegate to an instance method cannot have null 'this'.
   at System.MulticastDelegate.CtorClosed(Object target, IntPtr methodPtr)
   at C.M(Action a)
   at C.Main()
```
</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37983</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure SplitStringLiteralCommandHandler is ordered after the completion handler</Title>
    <Description>Since we started using `RegexEmbeddedCompletionProvider`, we noticed a regression where completing on a suggestion, inserted a new line, instead of the suggestion. 

On VS for Mac, it seems that the command handlers are loaded in an order that causes that particular regression, and makes `SplitStringLiteralCommandHandler` the first one that is invoked. On Windows, this doesn't appear to be the problem. 

We filed our regression under: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/951939

Note: this same change was done here https://github.com/dotnet/roslyn/blob/5a12be6a4002fb2ffa3d8d2ecbe81d4bc30d213a/src/EditorFeatures/CSharp/BlockCommentEditing/BlockCommentEditingCommandHandler.cs#L23 to fix a similar problem. I've tested the fix manually by dropping the compiled DLL into our app package, and it does fix the problem. I'm happy to write more specific tests though, if anyone has a requirement/idea.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37981</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0044 incorrectly identifies generic types as immutable</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19409-05+ed92d532473db83c1db47b313ee1c1bd7520aa08

**Steps to Reproduce**:
Copy this into a new project:
```C#
using System;
using System.Collections;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        var e = Wrap(new List&lt;int&gt; { 1, 2, 3, 4, 5 }.GetEnumerator());
        while (e.MoveNext()) Console.WriteLine(e.Current);
    }

    private static EnumeratorWrapper&lt;T&gt; Wrap&lt;T&gt;(T enumerator)
        where T : IEnumerator&lt;int&gt; =&gt;
        new EnumeratorWrapper&lt;T&gt;(enumerator);
}

internal sealed class EnumeratorWrapper&lt;T&gt; :
    IEnumerator&lt;int&gt;
    where T : IEnumerator&lt;int&gt;
{
    private T _enumerator;

    public EnumeratorWrapper(T enumerator) =&gt; _enumerator = enumerator;

    public int Current =&gt; _enumerator.Current;
    object? IEnumerator.Current =&gt; _enumerator.Current;
    public void Dispose() =&gt; _enumerator.Dispose();
    public bool MoveNext() =&gt; _enumerator.MoveNext();
    public void Reset() =&gt; _enumerator.Reset();
}
```
Run it.  As expected, it prints out:
```
1
2
3
4
5
```
Then apply IDE0044, which triggers for the `_enumerator` field, and run it.  The program will never end, repeatedly printing out an infinite number of `0`s.

**Expected Behavior**:
IDE0044 should not trigger for the `_enumerator` field.  The rule has logic to identify fields known to be of types that are either reference types or immutable structs, and it needs to be conservative in its estimation of whether a struct is immutable, always erring on the side of mutable if it can't be sure, since automatically making a field of a mutable struct type readonly can lead to erroneous behavior, as the repro demonstrates.  The rule should consider generic parameters to be mutable, unless they're constrained to be reference types.

**Actual Behavior**:
IDE0044 triggers for `_enumerator`, marking the field `readonly`, and leading to buggy program behavior.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37980</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0001 incorrect when converting to nullable reference type</Title>
    <Description>**Version Used**: `VisualStudio.16.int.d16.3/16.3.0-pre.3.0+29213.96.d16.3` with `Microsoft.Net.Compilers` package version 3.3.0-beta3-19407-05

**Steps to Reproduce**:

```c#
class C
{
    public Task&lt;string?&gt; M(string s)
    {
        return Task.FromResult&lt;string?&gt;(s);
        //                    ^^^^^^^^^ IDE0001 Name can be simplified
    }
}
```

Removing the code marked as redundant gives:

```c#
class C
{
    public Task&lt;string?&gt; M(string s)
    {
        return Task.FromResult(s);
        //     ^^^^^^^^^^^^^^^^^^ CS8619 'Task&lt;string&gt;' does not match 'Task&lt;string?&gt;'
    }
}
```

**Expected Behavior**:

No diagnostic.

**Actual Behavior**:

Diagnostic.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37979</IssueID>
    <RepoID>1</RepoID>
    <Title>Debug.Assert() causes wrong nullability in analysis when targeting older TFMs</Title>
    <Description>With the following source code:

```c#
class Foo
{
    public void Bar()
    {
        string s = "";
        Debug.Assert(s != null, "No connector");
        Console.WriteLine(s.Length);
    }
}
```

The preview8 compiler generates `warning CS8602: Dereference of a possibly null reference.` on `s.Length`. If the assertion is removed the warning disappears.

This only happens when targeting netstandard2.0 (and possible other older TFMs) - with netstandard2.1 and netcoreapp3.0 the warning is not generated. I know C# 8 is officially supported only on the new TFMs, but this seems like quite an odd bug that's probably worth investigating.

csproj:

```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
    &lt;PropertyGroup&gt;
        &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
        &lt;Nullable&gt;enable&lt;/Nullable&gt;
        &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
    &lt;/PropertyGroup&gt;
&lt;/Project&gt;
```</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37978</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37977</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-vs-deps to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-vs-deps into release/dev16.3-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-vs-deps-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-vs-deps-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37976</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.3-preview2</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview2.

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.3-preview2
git reset --hard upstream/release/dev16.3-preview2
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.3-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37975</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature: add a way to silence CS8618 and CS8625</Title>
    <Description>CS8618 (Non-nullable field 'container' is uninitialized) is the first thing I ran into when trying out nullable references on my projects.

A quick google search shows this has already been asked several times on StackOverflow.

There are several common scenarios where a non-nullable field is not defined in constructor. 
Strictly speaking, yes it means that field can be seen null between `ctor` and its later initialization.

In practice, that class may be initialized by reflection (AutoMapper, Dapper, dependency injection, all serialization libs, etc.).
Or it may have a `Start()` or `Initialize()` method that will always be called before using the class.

In these cases it's not practical to change the type to a nullable reference. You don't want to `!` all references just because initialization is not seen by compiler.

Currently the solution to this problem seems to be:
```csharp
public string nonNull = null!; // mute CS8618
```

This is a quite ugly pattern, with not-so-clear intention (so warrants a comment?) and uselessly initializes the field.

I'm suggesting C# provides a syntax to mute this warning, like Typescript does:
```csharp
public string nonNull!;
```
Here I'm reusing the non-null operator to express: "this is uninitialized but I know better", which is in the spirit of that operator, I think.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37974</IssueID>
    <RepoID>1</RepoID>
    <Title>Object synchronization method was called from an unsynchronized block</Title>
    <Description>I hit this exception building on macOS high sierra using 2.2.401 SDK

```
usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error MSB3883: Unexpected exception:  [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : System.AggregateException: One or more errors occurred. (Object synchronization method was called from an unsynchronized block of code.) ---&gt; System.ApplicationException: Object synchronization method was called from an unsynchronized block of code. [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Mutex.ReleaseMutex() [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.ServerNamedMutex.Dispose() [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.RunServerCompilationCore(RequestLanguage language, List`1 arguments, BuildPathsAlt buildPaths, String pipeName, String keepAlive, String libEnvVariable, Nullable`1 timeoutOverride, Func`3 tryCreateServerFunc, CancellationToken cancellationToken) [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : --- End of inner exception stack trace --- [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken) [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : ---&gt; (Inner Exception #0) System.ApplicationException: Object synchronization method was called from an unsynchronized block of code. [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Mutex.ReleaseMutex() [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.ServerNamedMutex.Dispose() [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.RunServerCompilationCore(RequestLanguage language, List`1 arguments, BuildPathsAlt buildPaths, String pipeName, String keepAlive, String libEnvVariable, Nullable`1 timeoutOverride, Func`3 tryCreateServerFunc, CancellationToken cancellationToken)&lt;--- [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/location/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error MSB3883: Unexpected exception:  [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : System.AggregateException: One or more errors occurred. (Object synchronization method was called from an unsynchronized block of code.) ---&gt; System.ApplicationException: Object synchronization method was called from an unsynchronized block of code. [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Mutex.ReleaseMutex() [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.ServerNamedMutex.Dispose() [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.RunServerCompilationCore(RequestLanguage language, List`1 arguments, BuildPathsAlt buildPaths, String pipeName, String keepAlive, String libEnvVariable, Nullable`1 timeoutOverride, Func`3 tryCreateServerFunc, CancellationToken cancellationToken) [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : --- End of inner exception stack trace --- [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken) [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : ---&gt; (Inner Exception #0) System.ApplicationException: Object synchronization method was called from an unsynchronized block of code. [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Mutex.ReleaseMutex() [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.ServerNamedMutex.Dispose() [/Users/vagrant/workspace/ice-dist/3.7/dist-utils/build/ice/builds/ice-clang-default/csharp/test/Ice/ami/msbuild/client/netstandard2.0/client.csproj]
/usr/local/share/dotnet/sdk/2.2.401/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.RunServerCompilationCore(RequestLanguage language, List`1 arguments, BuildPathsAlt buildPaths, String pipeName, String keepAlive, String libEnvVariable, Nullable`1 timeoutOverride, Func`3 tryCreateServerFunc, CancellationToken cancellationToken)&lt;--- 
```
So far I only get this once from our CI servers and I have not been able to manually reproduce it</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37973</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to new suppression state column in error list</Title>
    <Description>Platform team recently moved our Suppression State column down to Microsoft.VisualStudio.Shell.Framework. This change deletes Roslyn's implementation of this column and moves all the uses to now reference the column from the shell framework assembly.

1. https://github.com/dotnet/roslyn/commit/91535578b5c02686e9efecaeed2514d8d549f469: Updates our VS dependencies
2. https://github.com/dotnet/roslyn/commit/c3c9fa56646bf74220fa3a0bcae21111a6770a5f: Moves our VS layer to new suppression state column. Verified manually that the new Suppression state column works fine after installing the locally built Roslyn VSIX.

Fixes VSO RPS bug [#940318](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/940318) due to perf refression in C++ solution loading Roslyn from the error list due to the Suppression state column.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37972</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37971</IssueID>
    <RepoID>1</RepoID>
    <Title>Added references to M.VS.LanguageServer.Client to the CSharp and VB client projects</Title>
    <Description>After marking Microsoft.VisualStudio.LanguageServer.Client a private vs package (in https://github.com/dotnet/roslyn/pull/37939), the dependency no longer travels with the package reference to M.VS.LanguageServices. So adding it directly to these two projects.

failing merge pr build https://dev.azure.com/dnceng/public/_build/results?buildId=307755&amp;view=logs for reference</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37970</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37969</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't offer to change the set if the parameter nullability is different</Title>
    <Description>Fixes #37181 </Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37968</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a tool which generates a reasonable VB grammar facsimile from our syntactic model.</Title>
    <Description>Followup to https://github.com/dotnet/roslyn/pull/37840

This is the VB side of things.  Because VB's syntax model generation is so different, this got a little simpler in some places and a little more involved in others.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37967</IssueID>
    <RepoID>1</RepoID>
    <Title>Add diagnostic for nullable annotation used in generated code</Title>
    <Description>Resolves #37829 

We received feedback that it's confusing for nullable to be off by default in generated code even when it's enabled in the project. This PR adds a new diagnostic specifically to let users know that `#nullable enable` needs to be present in source to use nullable annotations in generated code.
</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37966</IssueID>
    <RepoID>1</RepoID>
    <Title>Make sure to keep nullability information when generating the new field</Title>
    <Description>Fixes #37182 </Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37965</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't show nullability analysis for value types or constant values</Title>
    <Description>Fixes #37157 </Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37964</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure that OriginalXSymbols are copied over when enabling nullability.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/37879, https://devdiv.visualstudio.com/DevDiv/_workitems/edit/125970/. Previously, original symbols would not be preserved when rewriting for nullability, because these were ad-hoc fields that weren't part of BoundNodes.xml file. As a result, `CSharpSemanticModel.GetMethodGroupSemanticSymbols` thought that overload resolution succeeded when it actually failed, resulting in returning bad symbols from the compiler layer. This change puts these symbol lists into the actual xml, so they're copied during Update. These fields are only necessary for the semantic model, so they don't need to be updated in later compiler phases. To avoid changing massive amounts of code, I looked through the existing usages of the constructors and Update methods, fixed the ones from initial binding, and then added compat shims. @dotnet/roslyn-compiler for review. /cc @jasonmalinowski.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37963</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix IOperation for asynchronous using and foreach statements</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/30362

- add `IsAsynchronous` to `IUsingOperation` and `IForEachLoopOperation`
- add `IsAsynchronous` to `ForeachEnumeratorInfo`
- add missing awaits on invocations of `DisposeAsync()` and `MoveNextAsync()`
- correct references to `IDisposable` to be `IAsyncDisposable`</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>23/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37962</IssueID>
    <RepoID>1</RepoID>
    <Title>Alignment Refactoring ordering should be stable</Title>
    <Description>Currently, the various wrapping refactorings use a most-recently-used sorting, that resets on restart. This is awful user experience, and means that I have to reread the entire list every time I want to invoke a refactoring. I don't just use one, I use different styles depending on whether I'm refactoring method parameter lists, or invocations, or line length.

/cc @sharwell @CyrusNajmabadi.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37961</IssueID>
    <RepoID>1</RepoID>
    <Title>FAR: Consolidate additional properties into one entity</Title>
    <Description>Manish and I discussed offline, 

ReferenceUsageInfo is for properties that can have multiple values (such as read, write, etc...) and can be filtered on those values.

CustomColumns, is for simpler properties that have a single value.  I will change the name to AdditionalProperties as suggested.

We recommend a future PR to consolidate these 2 kinds of custom properties into one entity, but in the interest of time would keep it separate for now.  The future PR would guarantee unique key names across the properties.

_Originally posted by @chborl in https://github.com/dotnet/roslyn/pull/37802_</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37960</IssueID>
    <RepoID>1</RepoID>
    <Title>Include suffix in inserted text when completion item is committed</Title>
    <Description>We have a few completion providers that provide items with suffix. For example:

1.  `:` and ` =` for `AttributeNamedParameterCompletionProvider`
2.  `:` for `NamedParameterCompletionProvider`
3.  `:` for `PropertySubpatternCompletionProvider`
4.  `:` for `TupleNameCompletionProvider`

For those, the suffix will be shown as part of the item in the completion list, but will not be parted of inserted text when committed. Should we make the suffix as part of the inserted text in these cases?

![image](https://user-images.githubusercontent.com/788783/62970510-812d9a80-bdc4-11e9-9291-c385bc6dfd20.png)

Was originally suggested in #33250.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37959</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix CA1827 (DoNotUseCountWhenAnyCanBeUsed) violations in Roslyn.sln</Title>
    <Description>Attempting to migrate Roslyn.sln to latest version (2.9.4) of FxCop analyzer packages leads to a bunch of [CA1827](https://github.com/MicrosoftDocs/visualstudio-docs/issues/3745) violations where the code is using `Count()` Linq invocation when `Any()` could be used. This CA rule was added in 2.9.4 analyzer package. A ruleset suppression would be added for this rule and this issue tracks fixing these violations and removing the ruleset entry.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37958</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37957</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into master.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37956</IssueID>
    <RepoID>1</RepoID>
    <Title>Update MS.CA.EditorFeatures2.UnitTests splitting</Title>
    <Description>This DLL should be marked for splitting in our test runner. When we did
the great assembly rename though this was missed. Fixing.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37955</IssueID>
    <RepoID>1</RepoID>
    <Title>Support multiple insertion text property names</Title>
    <Description>This change fixes a bug where if the guest invokes completion in a Live Share session in a ts file and selects an IntelliCode completion, the star will also be inserted (e.g.  console.★ log).

We were previously trying to extract the insertion text on the completion item by looking at the "InsertionText" property. TS IntelliCode uses "InsertionText" for their property name.

This same change was made in the Live Share code base and was never migrated to Roslyn. See [here](https://devdiv.visualstudio.com/DevDiv/_git/Cascade/pullrequest/189799?_a=overview). </Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37954</IssueID>
    <RepoID>1</RepoID>
    <Title>Couple of fixes in analyzer drive in presence of editorconfig configu…</Title>
    <Description>…ration

Fixes #37876

1. For analyzer diagnostics with Location.None, we now apply diagnostic configuration based on editorconfig files, as long as there is at least one configuration entry and there is no mismatch between configuration entries in different editorconfig files.

2. Analyzers which are disabled by default are now properly enabled when there is any editorconfig entry for its reported descriptor(s) that enables them.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37953</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0004 incorrectly suggests int to enum cast in switch expression is redundant</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19406-05+a1905991543bed104f7f7f0842aca2b65d263b87

**Steps to Reproduce**:
```C#
using System;

class Program
{
    public static void Main() { }

    public static string GetValue(int value) =&gt;
        (DayOfWeek)value switch
        {
            DayOfWeek.Monday =&gt; "Monday",
            _ =&gt; "Other",
        };
}
```

**Expected Behavior**:
IDE0004 doesn't trigger.

**Actual Behavior**:
IDE0004 triggers and suggests removing the `(DayOfWeek)` cast:
![image](https://user-images.githubusercontent.com/2642209/62953971-8850aa80-bdbc-11e9-91ec-4579b93ec02c.png)
Removing the cast then produces a compiler error:
![image](https://user-images.githubusercontent.com/2642209/62953997-9acae400-bdbc-11e9-9076-bd908dc86965.png)

</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37952</IssueID>
    <RepoID>1</RepoID>
    <Title>Test ReadOnlySpan initialization from static data (#24621)</Title>
    <Description>Follow-up to #33088</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37951</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0004 incorrectly suggests a nullable value type cast is redundant</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19406-05+a1905991543bed104f7f7f0842aca2b65d263b87

**Steps to Reproduce**:
```C#
class Program
{
    public static void Main() { }

    public static bool? GetBool(string name) =&gt;
        name switch
        {
            "a" =&gt; (bool?)true,
            "b" =&gt; false,
            _ =&gt; null,
        };
}
```

**Expected Behavior**:
IDE0004 does not trigger.

**Actual Behavior**:
IDE0004 triggers, suggesting that the `(bool?)` is redundant:
![image](https://user-images.githubusercontent.com/2642209/62952532-d2845c80-bdb9-11e9-8256-b8d1541693b5.png)
However, removing the cast then results in an error:
![image](https://user-images.githubusercontent.com/2642209/62952576-edef6780-bdb9-11e9-975a-b4eb7e6b3a5d.png)
</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37950</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0066 incorrectly handles nullable value types</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19406-05+a1905991543bed104f7f7f0842aca2b65d263b87

**Steps to Reproduce**:
```C#
class Program
{
    public static void Main() { }

    public static bool? GetBool(string name)
    {
        switch (name)
        {
            case "a": return true;
            case "b": return false;
            default: return null;
        }
    }
}
```

**Expected Behavior**:
IDE0066 refactors this into something that compiles, e.g.
```C#
class Program
{
    public static void Main() { }

    public static bool? GetBool(string name)
    {
        return name switch
        {
            "a" =&gt; true,
            "b" =&gt; false,
            _ =&gt; (bool?)null,
        };
    }
}
```

**Actual Behavior**:
IDE0066 refactors this into the following code that doesn't compile:
```C#
class Program
{
    public static void Main() { }

    public static bool? GetBool(string name)
    {
        return name switch
        {
            "a" =&gt; true,
            "b" =&gt; false,
            _ =&gt; null,
        };
    }
}
```
This fails with the error "error CS0037: Cannot convert null to 'bool' because it is a non-nullable value type".</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37949</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0066 incorrectly refactors switch followed by a throw</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19406-05+a1905991543bed104f7f7f0842aca2b65d263b87

**Steps to Reproduce**:
```C#
using System;

class Program
{
    public static void Main() { }

    public static void Throw(int index)
    {
        string name = "";
        switch (index)
        {
            case 0: name = "0"; break;
            case 1: name = "1"; break;
        }
        throw new Exception(name);
    }
}
```

**Expected Behavior**:
Either doesn't offer to refactor, or refactors to:
```C#
public static void Throw(int index)
{
    string name = index switch
    {
        0 =&gt; "0",
        1 =&gt; "1",
        _ =&gt; "",
    };
    throw new Exception(name);
}
```

**Actual Behavior**:
Refactors incorrectly to this non-equivalent and incorrect code:
```C#
public static void Throw(int index)
{
    string name = "";
    name = index switch
    {
        0 =&gt; "0",
        1 =&gt; "1",
        _ =&gt; throw new Exception(name),
    };
}
```</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37948</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail out from emit in presence of warnings reported as errors</Title>
    <Description>Fixes #37779</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37947</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0066 doesn't trigger when multiple cases map to default</Title>
    <Description>**Version Used**: 
3.3.0-beta3-19406-05+a1905991543bed104f7f7f0842aca2b65d263b87

**Steps to Reproduce**:
```C#
using System;

class Program
{
    public static void Main() { }

    public static string FromDay(DayOfWeek dayOfWeek)
    {
        switch (dayOfWeek)
        {
            case DayOfWeek.Monday:
                return "Monday";

            case DayOfWeek.Friday:
            default:
                return "Other";
        }
    }
}
```

**Expected Behavior**:
IDE0066 fires and refactors the switch into:
```C#
return dayOfWeek switch
{
    DayOfWeek.Monday =&gt; "Monday",
    _ =&gt; "Other",
};
```
If desired, the other cases could be added as comments, e.g.
```C#
return dayOfWeek switch
{
    DayOfWeek.Monday =&gt; "Monday",
    // DayOfWeek.Friday =&gt;
    _ =&gt; "Other",
};
```

**Actual Behavior**:
IDE0066 does not trigger and does not offer to refactor.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37946</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.2-vs-deps
git reset --hard upstream/release/dev16.2-vs-deps
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37945</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37944</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37943</IssueID>
    <RepoID>1</RepoID>
    <Title>changed our task center status bar to say "low priority background pr…</Title>
    <Description>…ocess" rather than "live analysis" to reduce confusion on what "live analysis" means since term "live analysis" has strong association with "errors" in VS.

also, it now shows ## of pending work and whether BG process is paused or not.

![evaluating](https://user-images.githubusercontent.com/1333179/62934474-81547880-bd79-11e9-9fcc-7c0f1769a5f0.gif)

fix https://github.com/dotnet/roslyn/issues/37751</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37942</IssueID>
    <RepoID>1</RepoID>
    <Title>Support Go to Base for VB</Title>
    <Description>
    </Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37941</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactorings ordering report applicableToSpan</Title>
    <Description>Work for #35525
Based on #37777</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37940</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1-vs-deps to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1-vs-deps into release/dev16.3-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-vs-deps-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-vs-deps-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37939</IssueID>
    <RepoID>1</RepoID>
    <Title>Mark M.VS.LanguageServer.Client as a private package</Title>
    <Description>New VS dependency should be marked as a private package.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37938</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37937</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37936</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37935</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.2-vs-deps
git reset --hard upstream/release/dev16.2-vs-deps
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37934</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37933</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37932</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37931</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview2</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview2
git reset --hard upstream/release/dev16.3-preview2
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37930</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37929</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix some constructor-related generation refactorings with top-level nullability</Title>
    <Description>Commit at a time may be useful here.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37928</IssueID>
    <RepoID>1</RepoID>
    <Title>Test runner not timing out properly</Title>
    <Description>Our test runner is designed to time out and capture dumps before our outer Azure Pipeline times out. This gives us better diagnostics as we can get the xunit output of the runs, dumps of tests, etc ... that make debugging time outs or just long running tests possible. This seems to have slipped recently as there are several pipeline runs where tests are taking far longer than expected but the runner is not killing them.

Runs where tests take too long:

- https://dev.azure.com/dnceng/public/_build/results?buildId=296244&amp;view=logs
- https://dev.azure.com/dnceng/public/_build/results?buildId=298703

</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37927</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8614 false warning again.</Title>
    <Description>

**Version Used**:

-  VS2019 16.2.1
-  .Net Core 3.0 Preview 7
 
**Steps to Reproduce**:

1. Create a solution with two .Net Core libraries (Lib2 references Lib1).

		&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

			&lt;PropertyGroup&gt;
				&lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
				&lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
				&lt;Nullable&gt;enable&lt;/Nullable&gt;
			&lt;/PropertyGroup&gt;

		&lt;/Project&gt;

2. Add following interface to Lib1 project:

		using System;

		namespace Lib1
		{
			public interface IFace
			{
				string? FilePath { get; }
				int StateIndex { get; set; }
			}
		}

3. Add foloowing class to Lib2 project

		using Lib1;

		namespace Lib2
		{
			public class Implementation : IFace
			{
				public string? FilePath =&gt; null;
				public int StateIndex { get =&gt; 0; set =&gt; _ = 0; }
			}
		}


**Expected Behavior**:

No warnings.

**Actual Behavior**:

Warning CS8614 Nullability of reference types in type of parameter 'value' of 'void Implementation.StateIndex.set' doesn't match implicitly implemented member 'void IFace.StateIndex.set'.

This warning is related to StateIndex property but when you remove FilePath property from the interface and from the class, this warning disappear.

</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37926</IssueID>
    <RepoID>1</RepoID>
    <Title>CompletionItem.InlineDescription should be public</Title>
    <Description>Currently in `CompletionItem` class property `InlineDescription` is internal.
However,  factory method `Create` with `inlineDescription` is public.

That doesn't make much sense, right?

I have VS extension that uses inline description, and corresponding public factory method, but I cannot even test it properly - I have to use reflection for this purpose.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37925</IssueID>
    <RepoID>1</RepoID>
    <Title>ThenInclude Intellisense Problem</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/689730/theninclude-intellisense-problem.html)._

---
My query is:
 IQueryable&amp;lt;Users&amp;gt; ret = from i in SecurityDataContext.Users.Include(x =&amp;gt; x.UserRoles). ThenInclude(y =&amp;gt; **y.RoleCodeNavigation**)
                                    select i;

intellisense does not resolves &amp;quot;y.RoleCodeNavigation&amp;quot; part, but it works well.

Schema:
Users has many UserRoles
UserRoles has one RoleCodeNavigation

---
### Original Comments

#### Visual Studio Feedback System on 8/12/2019, 03:32 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37924</IssueID>
    <RepoID>1</RepoID>
    <Title>GenerateConstructorCodeFixProvider crashed</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/683583/generateconstructorcodefixprovider-crashed.html)._

---
Randomly got the following reported:
'GenerateConstructorCodeFixProvider ' encountered an error and has been disabled.

Stack trace follows:

System.ArgumentException : Node is not within syntax tree
   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.CheckSyntaxNode(VisualBasicSyntaxNode node)
   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetSymbolInfo(ExpressionSyntax expression,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetSymbolInfoForNode(SyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetSymbolInfoCore(SyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.ModelExtensions.GetSymbolInfo(SemanticModel semanticModel,SyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.VisualBasic.GenerateConstructor.VisualBasicGenerateConstructorService.GetDelegatingConstructor(State state,SemanticDocument document,Int32 argumentCount,INamedTypeSymbol namedType,ISet`1 candidates, CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GenerateDelegatingConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GenerateThisOrBaseDelegatingConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt; )
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GenerateThisOrBaseDelegatingConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt; )
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GetEditAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.GenerateConstructorCodeAction.GetEditAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.GenerateConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.GenerateMember.AbstractGenerateMemberCodeFixProvider.RegisterCodeFixesAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)

---
### Original Comments

#### Visual Studio Feedback System on 8/9/2019, 03:27 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37923</IssueID>
    <RepoID>1</RepoID>
    <Title>Exception thrown when navigating to implementation from interface</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/688992/exception-thrown-when-navigating-to-implementation.html)._

---
Suppose I have the following interface in IFoo.cs
```
public interface IFoo
{
  void Bar();
}
```

and suppose I have the following class in Baz.cs
```
public class Baz : IFoo
{
  public void Bar() {}
}
```
Given that my text cursor is on `Bar()` in the `IFoo` interface, when I right click and go to the implementation or when I press Ctrl + F12, I am sent to the function implementation in the `Baz` class but am also presented with a pop up saying , &amp;quot;Exception has been thrown by the target of an invocation.&amp;quot;

I don't expect that pop up to show.

---
### Original Comments

#### Visual Studio Feedback System on 8/12/2019, 00:51 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37922</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't synthesize a parameter list out of nowhere.</Title>
    <Description>
    </Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37921</IssueID>
    <RepoID>1</RepoID>
    <Title>Expression evaluator tests depend on desktop ilasm</Title>
    <Description>A number of the expression evaluator tests depend on being able to produce a DLL + PDB for an il source stream. The Desktop version of ilasm supports this but the CoreCLR version does not. 

&gt; https://github.com/dotnet/coreclr/issues/2982

This needs to be fixed, or possibly just exclude the tests, if we ever port the expression evaluator tests to CoreCLR.

Filing this issue for tracking at the moment as I just spent an hour debugging this exact issue.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37920</IssueID>
    <RepoID>1</RepoID>
    <Title>Learn from null coalescing to bool constants</Title>
    <Description>Resolves #37394 

Put intuitively: if the RHS of a `??` operator is a constant boolean `b`, we know that the value `!b` could only be produced by the LHS of the `??` operator being not-null.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37918</IssueID>
    <RepoID>1</RepoID>
    <Title>Moving publish to separate stage</Title>
    <Description>This changes our publish phase to be in a separate stage. This is a part
of our long term plans around publishing and validation. Details are
available here:

https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/YamlStagesPublishing.md

Note: at this point source link validation is still disabled.  Source
link validation depends on an artifact named "BlobArtifacts". Unsure
what this is and what it maps to in our current build. Skipping it
until this is resolved.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37917</IssueID>
    <RepoID>1</RepoID>
    <Title>added api usage telemetry reporter</Title>
    <Description>for now, it only reports method calls and member references from metadata reference.

it reports data as hash value to protect privacy

event name:"vs/compilers/api"
property name:"vs.compilers.api.pii"

example as raw data
```json
{
    "AssemblyName": "nunit.framework",
    "AssemblyVersion": "3.12.0.0",
    "Symbols": [
        "M:NUnit.Framework.Assert.IsNull(System.Object)",
        "M:NUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])",
        "M:NUnit.Framework.Assert.IsNotNull(System.Object)",
        "M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])",
        "M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object)",
        "M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate)",
        "M:NUnit.Framework.Assert.IsInstanceOf``1(System.Object)",
        "M:NUnit.Framework.Assert.AreSame(System.Object,System.Object)",
        "M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object)",
        "M:NUnit.Framework.Assert.IsTrue(System.Boolean)",
        "M:NUnit.Framework.Assert.IsFalse(System.Boolean)",
        "M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])",
        "M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])",
        "M:NUnit.Framework.Assert.Fail(System.String)",
        "M:NUnit.Framework.Assert.That``1(``0,NUnit.Framework.Constraints.IResolveConstraint)",
        "M:NUnit.Framework.Is.TypeOf(System.Type)"
    ]
},
{
    "AssemblyName": "System.Runtime",
    "AssemblyVersion": "4.2.1.0",
    "Symbols": [
        "M:System.String.Equals(System.String,System.String,System.StringComparison)",
        "F:System.StringComparison.InvariantCultureIgnoreCase",
        "M:System.Type.GetProperties",
        "P:System.Reflection.MemberInfo.Name",
        "M:System.Reflection.PropertyInfo.GetValue(System.Object)",
        "P:System.Type.IsArray",
        "M:System.Object.GetType",
        "P:System.Type.Namespace",
        "P:System.Array.Length",
        "M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)",
        "M:System.Exception.GetType",
        "P:System.Type.FullName",
        "P:System.Exception.InnerException",
        "P:System.Exception.Message",
        "P:System.ArgumentException.Message",
        "M:System.Func`1.Invoke",
        "P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName"
    ]
},
{
    "AssemblyName": "System.Linq",
    "AssemblyVersion": "4.2.1.0",
    "Symbols": [
        "M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})",
        "M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})",
        "M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
    ]
},
{
    "AssemblyName": "System.Collections",
    "AssemblyVersion": "4.1.1.0",
    "Symbols": [
        "M:System.Collections.Generic.Dictionary`2.Add(`0,`1)",
        "M:System.Collections.Generic.List`1.Remove(`0)",
        "M:System.Collections.Generic.List`1.Add(`0)",
        "M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)",
        "P:System.Collections.Generic.Dictionary`2.Item(`0)"
    ]
},
{
    "AssemblyName": "Moq",
    "AssemblyVersion": "4.10.0.0",
    "Symbols": [
        "F:Moq.MockBehavior.Loose",
        "M:Moq.MockFactory.VerifyAll",
        "P:Moq.Mock`1.Object",
        "M:Moq.Language.IReturns`2.Returns(`1)",
        "M:Moq.Mock`1.Setup``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})",
        "M:Moq.It.IsAny``1"
    ]
}
```

actual reported
```json
{
    "AssemblyName": "B00CBB99C7AD1B8302A8A56CC4D81EAB0EAE3237FA35F15BC81BFE1C15103558",
    "AssemblyVersion": "3.12.0.0",
    "Symbols": [
        "FC7288D3E102882FEB627087604D82CB4CFD65D0C2F367722BA904222D135B36",
        "EAD055AA8382711322EC709E19D8C2920B38D73077947B84171E846FB792A393",
        "F1E3A84994AEFA63262799CB058601EFA56CD9CA4B670E3C2E475B2099CEC9C1",
        "FE3CDBE48C24DEBEC38881F84CF7FF0FE04ED5D37C2270BE9BF59019ED9CF7D6",
        "CBB9AAFE5A4C40A9D18FFD158CCC18F4839D95A7A19885E2A88712CD0B8D9057",
        "8865B8936015A51EC59CB56E4D1520038120F53AD9E9C8920AA5F297CE9D2E1F",
        "7E65BB6F524EE071CF96D6092866FEC5D6FF2E9B77E24E655CFBCD8FDD9FAB86",
        "2B8FB21A52D4075E8BB80EF71A1E6D4C7E8DAA8EE5F3A118CAC5305ED01910FB",
        "6C390D680C321913DAE46B4C55E9C37E8E82CA19E917805F99D655FBBD188B85",
        "95A1A1AE79B0118AB9FB6D0587114761BD38D2D6D565AB45208DBDE16121E7A9",
        "926AD4568C052F6A44A7572624FB40D5932749A2FA635B08E635DD1FDE655348",
        "9F98E869840D62E3F869A41C86E1CDD838C8CDDEFC50D46D069BAEC71149BCE8",
        "EC7E48021E5F0E3F7E4B6DD3A2291DCC177C3A19E31F5CCAD0C911C24B844396",
        "0AF892A2E223A6C089576D5B6E04DBACB285BBFC963C04D96178280981A59CFA",
        "7D2746E249EC17CFB8B5602FEAE20911FD2438FEB1181503A3D50B003551F90C",
        "6BFB60B228F6E6925F0E98813AB2414DC4F0799EB0AC0DAE19DC0F53A86A40A9"
    ]
},
{
    "AssemblyName": "755A00E2209CC5A08A684312640532F759CACEA41842A20DB7B44A34FA091794",
    "AssemblyVersion": "4.2.1.0",
    "Symbols": [
        "2047A6B64AAF7876DE88CE027B997B20D257020A770A2B407E23A2B1469C3B50",
        "9FE010513CF684B1D568B48737D0CCBE145CD6F96A083378BEEDBA6B6734EFC1",
        "EC7A2378F2D3EC571BFB7CE2A21FD3FCB610FF6C9001EE9AA5DD7D5568E556CC",
        "A0019BCB221061EA12FFDE4340D1E89F45F09DC5FAF1E8B76973F27C771C5E28",
        "7D822C2A0D327145FDE606065031BF27F33663FC9AB687F4EA2FF0B9E0F23D9E",
        "B6E3658E79DCAADD8A515A8FFDB5BA779C85DAD661E06E0D5C7CC225D3D02076",
        "FA0E672464B0CF319BD40414198F86EEFEA6EEA42A9813BB40CF67B136298ED7",
        "93451E816BE5817D606ABE6210A7FCA063E27E7CBAB77F26794D8E7C1AEB5A3A",
        "2326AB074E340E7D6E5CA32EE2D3E2B5DD313D4FFCB6FE06D895A8E0E5B1DE46",
        "46A71DCECCFCB68BFD8725CFB455D7AF5A3E42044F00C6425F5C528976374004",
        "CD353CF4B68ABB1F8836214B361E28621B4E1E689D81AAB51C105FB162B672E8",
        "9086308DC05C12A9CB71A7FE7EC6FFA909504D1815C127328730670D1302AF6E",
        "C81EC12F474F47A22B916EF4C50ED4E968A1C58E900BF63231632227ECD2AC7D",
        "10F4911DDC12FFA495E8DB387679C3FB27C0FACF1F9E895204B1FF346B36C8AE",
        "1A4651B19FF455FD0FD8B732F834CA8B245EAD681D953F1E814AE554C3AEC204",
        "8604B966FCB4C51E5B1052C1DA0E782F049EECFE5F93EE57CBD3DF70A6C2B6F4",
        "4DBE8AAEB4740285DA6CB1F048D91CA7C960CF943802ED723B2A899D29A13B2B"
    ]
},
{
    "AssemblyName": "61E64AE41D59A10E45BCDF3E045CEBA28D0B8CF4D3C1FC10ABBB3F564C31268E",
    "AssemblyVersion": "4.2.1.0",
    "Symbols": [
        "16792284DE117911C005CD512ADF04607B8A8063463C2268D1EACFDD68C34CBE",
        "9F9EBF0DEC9001199119E8BEDE32CDE6F6A729AAF1B41ABD3A06FF1BB2329DE2",
        "ACDD06638D695D9740DF687F312A77C66DFDBF9D60D5214D0F2CDBA1BDB1E41E"
    ]
},
{
    "AssemblyName": "8F6E759B03470A70A9BA96C3D3758F8D065F1B12B7E4311E283CA87ED1646598",
    "AssemblyVersion": "4.1.1.0",
    "Symbols": [
        "745F434841F4DD4B1F33B947B9E8AACFDB32C59AF37C5AF4B6B9FD0A19E76298",
        "77AE1EF3DC4276CD70AB0B72E00D30F685A3EB7EC245E04FDA59BA2D81D7AFCA",
        "8BC33A6F63F6B0E435BC0F9058989EF38BB35E132FDE9137F75EDFA1E9674852",
        "880CA0E9B9A3A363AD04F8DEE9793415CE86C4396DA55F01990D5752ACD4245F",
        "ABEF878B25B69633BF7947B9F3F266BB5B4183B91F7958C39DFAD44620A68024"
    ]
},
{
    "AssemblyName": "11436EDE3A696F6E8273ADF47D39420467657B4798089E9B874E11C32BB00162",
    "AssemblyVersion": "4.10.0.0",
    "Symbols": [
        "FB630FEABDB8B3579904757F081BE9F222B691E4B3A3C5CFA4A3D8DB7A8E601E",
        "E6D6C591938D1FB8B6C80EE0BCB09C060D89162C5146C3DBBB501156CB17ACEF",
        "720FA49148B4714CCB7FC3B5C8C8EF5F151D0B65F66A688BE845CE81E564E341",
        "209E8174D9B77FB72B572C6E572434136E7DC04E9977AF209EF6B2AD5D561345",
        "FAF7CF9F079B0131886138A9D216129BB5548ADDB05358C3D98B040A47F67BE6",
        "AE47A0A7D57C63DB2F4BC2EBCBAE4431488EA483305284393FE349B8241A6E9C"
    ]
}
```
</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37916</IssueID>
    <RepoID>1</RepoID>
    <Title>Update partial load dialog string to better match task center.</Title>
    <Description>For https://devdiv.visualstudio.com/DevDiv/_workitems/edit/894041/

![p_load](https://user-images.githubusercontent.com/5749229/62890892-4448a180-bcf9-11e9-9b05-3ad95f616ddb.gif)
</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37915</IssueID>
    <RepoID>1</RepoID>
    <Title>Reduce memory consumption for string concatenation from O(n^2) to O(n)</Title>
    <Description>Fixes #7398
Fixes #37572
Relates to https://github.com/aspnet/Razor/issues/614 and many other customer accomodations that are no longer needed.

History of this bug:  When constant folding a long sequence of string concatentations, there is an intermediate constant value for every left-hand operand.  So the total memory consumed to compute the whole concatenation was *O(n^2)*.  The compiler would simply perform this work and eventually run out of memory, simply crashing with no useful diagnostic.  Later, the concatenation implementation was instrumented so it would detect when it was likely to run out of memory soon, and would instead report a diagnostic at the last step. See https://github.com/dotnet/roslyn/commit/f177077665a5bef862014f1898b961d1759c9248.  Test `Bug529600()` was added to demonstrate that we produced a diagnostic.  However, the compiler still consumed *O(n^2)* memory for the concatenation and this test used to consume so much memory that it would cause other tests running in parallel to fail because they might not have enough memory to succeed.  So the test was disabled and eventually removed.  The compiler would still crash with programs containing large string concatenations, or consume huge amounts of memory and take a long time before reporting a diagnostic, so the underlying problem had not been addressed.

Here we have revised the implementation of constant folding string concatenations so that it requires *O(n)* memory and remove the old instrumentation.  As a consequence the test `Bug529600()` now runs very quickly and does not consume gobs of memory.
</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37914</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow implementation of virtual interface methods in VB.</Title>
    <Description>Closes #35821.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37913</IssueID>
    <RepoID>1</RepoID>
    <Title>Generated GetHashCode implementation falls foul of BCL nullability of IEqualityComparer&lt;&gt;.GetHashCode</Title>
    <Description>**Version Used**: Visual Studio 16.2.1, `&lt;LangVersion&gt;preview&lt;/LangVersion&gt;`, `&lt;Nullable&gt;enable&lt;/Nullable&gt;`
Generate equality members for:

```cs
struct Foo
{
    public string? Bar { get; }
}
```

Result:

```cs
    public override int GetHashCode()
    {
        // CS8604 Possible null reference argument for parameter 'obj' in
        // 'int EqualityComparer&lt;string&gt;.GetHashCode(string obj)'        ↓
        return 1739646154 + EqualityComparer&lt;string&gt;.Default.GetHashCode(Bar);
    }
```

This can be fixed by hand to get rid of the warning by changing `EqualityComparer&lt;string&gt;` to `EqualityComparer&lt;string?&gt;`:

```cs
    public override int GetHashCode()
    {
        return 1739646154 + EqualityComparer&lt;string?&gt;.Default.GetHashCode(Bar);
    }
```
</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37912</IssueID>
    <RepoID>1</RepoID>
    <Title>VB: Check for script context in '#R' directive recommender</Title>
    <Description>Fixes #37911.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37911</IssueID>
    <RepoID>1</RepoID>
    <Title>VB: #R directive is recommended in non-scripting context</Title>
    <Description>**Version Used**: 16.2.1

**Steps to Reproduce**:

1. Open a regular VB file.
2. Type `#`.

**Expected Behavior**: `#R` does not appear in the list, as it's not a scripting context.

**Actual Behavior**: `#R` does appear, leading to a compiler error if it is inserted.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37910</IssueID>
    <RepoID>1</RepoID>
    <Title>Typing #if causes outlining to expand</Title>
    <Description>This is copied from https://github.com/OmniSharp/omnisharp-vscode/issues/3217

Put the following in an empty C# file:
```
namespace ConsoleApp3
{

    class Program
    {
    }
}
```

Use the "outlining" feature to collapse the definition of `Program`.
![image](https://user-images.githubusercontent.com/3751401/62883783-c29d4780-bce9-11e9-88d1-1674722849fe.png)

Now type `#if` above the class definition. Observe that `Program` expands.

![image](https://user-images.githubusercontent.com/3751401/62883836-e6608d80-bce9-11e9-87ee-d98533e10fa3.png)




</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37909</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn ignores inferred nullability of 'ref' arguments when inferring type arguments of an invocation</Title>
    <Description>**Version Used**: 

```
Branch master (10 Aug 2019)
Latest commit c21548 by dotnet-automerge-bot:
Merge pull request #37896 from dotnet/merges/release/dev16.3-preview2-to-master

Merge release/dev16.3-preview2 to master
```

**Steps to Reproduce**:

```cs
#nullable enable

class C
{
  T M1&lt;T&gt;(ref T t) =&gt; t;
  T M2&lt;T&gt;(T t) =&gt; t;
  T M3&lt;T&gt;(in T t) =&gt; t;

  void Test1(string? s1)
  {
    if (s1 == null) return;
    
    s1.ToString(); // non nullable
    var t = M1(ref s1);
    t.ToString(); // nullable, CS8602
  }
    
  void Test2(string? s1)
  {
    if (s1 == null) return;
    
    s1.ToString(); // non nullable
    var t = M2(s1);
    t.ToString(); // non nullable
  }
    
  void Test3(string? s1)
  {
    if (s1 == null) return;
    
    s1.ToString(); // non nullable
    var t = M3(in s1);
    t.ToString(); // non nullable
  }
}
```

**Expected Behavior**:
No warnings.
All methods are inferred with type argument `string!`. All variables `t` are non-nullable.

**Actual Behavior**:
`warning CS8602: Dereference of a possibly null reference.` is reported for `t.ToString()` in `Test1` only.

@jcouv Could you please clarify if this is intended and if so what are the reasons for current behavior? It seems rather counterintuitive.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37908</IssueID>
    <RepoID>1</RepoID>
    <Title>VS_E_UNSUPPORTEDFORMAT exception while trying to apply fix all for StyleCop SA1005</Title>
    <Description>C# Tools 3.3.0-beta2-19401-05+8ed56b826700926009731ca4d3de0a4e4e652969

Trying to apply SA1005 for all of corefx, hit this at some point...

"'FixAll' encountered an error and has been disabled."
 ```
System.Runtime.InteropServices.COMException : Exception from HRESULT: 0x80041FEB
   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode,IntPtr errorInfo)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.InvisibleEditor..ctor(IServiceProvider serviceProvider,String filePath,IVsHierarchy hierarchyOpt,Boolean needsSave,Boolean needsUndoDisabled)
   at Microsoft.VisualStudio.LanguageServices.RoslynVisualStudioWorkspace.OpenInvisibleEditor(DocumentId documentId)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyTextDocumentChange(DocumentId documentId,SourceText newText)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyDocumentTextChanged(DocumentId documentId,SourceText newText)
   at Microsoft.CodeAnalysis.Workspace.ApplyChangedDocument(ProjectChanges projectChanges,DocumentId documentId)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.Apply(Workspace workspace,Document fromDocument,ImmutableArray`1 operations,String title,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass20_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
```</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37907</IssueID>
    <RepoID>1</RepoID>
    <Title>SyntaxEditorBasedFixAllProvider crashed for IDE0066</Title>
    <Description>C# Tools   3.3.0-beta2-19401-05+8ed56b826700926009731ca4d3de0a4e4e652969

I tried running IDE0066 (use 'switch' expression) on a .sln for all of corefx.  At some point it failed with the message "'SyntaxEditorBasedFixAllProvider' encountered an error and has been disabled." with the stack:
```
System.InvalidOperationException : Unexpected value 'BreakStatement' of type 'Microsoft.CodeAnalysis.CSharp.SyntaxKind'
   at Microsoft.CodeAnalysis.CSharp.ConvertSwitchStatementToExpression.ConvertSwitchStatementToExpressionCodeFixProvider.Rewriter.DefaultVisit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBreakStatement(BreakStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.ConvertSwitchStatementToExpression.ConvertSwitchStatementToExpressionCodeFixProvider.Rewriter.RewriteSwitchStatement(SwitchStatementSyntax node,Boolean allowMoveNextStatementToSwitchExpression)
   at Microsoft.CodeAnalysis.CSharp.ConvertSwitchStatementToExpression.ConvertSwitchStatementToExpressionCodeFixProvider.Rewriter.VisitSwitchStatement(SwitchStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.ConvertSwitchStatementToExpression.ConvertSwitchStatementToExpressionCodeFixProvider.Rewriter.GetSwitchExpressionArm(SwitchSectionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.ConvertSwitchStatementToExpression.ConvertSwitchStatementToExpressionCodeFixProvider.Rewriter.&lt;RewriteSwitchStatement&gt;b__13_1(SwitchSectionSyntax s)
   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at Microsoft.CodeAnalysis.CSharp.ConvertSwitchStatementToExpression.ConvertSwitchStatementToExpressionCodeFixProvider.Rewriter.RewriteSwitchStatement(SwitchStatementSyntax node,Boolean allowMoveNextStatementToSwitchExpression)
   at Microsoft.CodeAnalysis.CSharp.ConvertSwitchStatementToExpression.ConvertSwitchStatementToExpressionCodeFixProvider.Rewriter.Rewrite(SwitchStatementSyntax switchStatement,SemanticModel semanticModel,SyntaxEditor editor,SyntaxKind nodeToGenerate,Boolean shouldMoveNextStatementToSwitchExpression)
   at async Microsoft.CodeAnalysis.CSharp.ConvertSwitchStatementToExpression.ConvertSwitchStatementToExpressionCodeFixProvider.FixAllAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.FixDocumentAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsCoreAsync(&lt;Unknown Parameters&gt;)
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass20_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

I don't have a simple repro.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37906</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn master | 20190812</Title>
    <Description>bugfix for
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/957918</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37905</IssueID>
    <RepoID>1</RepoID>
    <Title>Initializing non-nullable property to itself or another uninitialized property should warn</Title>
    <Description>**Version Used**: 
16.3.0-preview-19329-01+d31fdbf01

**Steps to Reproduce**:

```
#nullable enable
class A { }
class B
{
    A C { get; set; }
    B()
    {
        C = C;
    }
}
```

**Expected Behavior**:

Compiler warning that property 'C' is not initialized

**Actual Behavior**:

No compiler warning

---

Of course the above is a trivial example, but there are much more sinister possibilities:
```
A C1 { get; set; }
A C2 { get; set; }
B(A c2)
{
  C1 = C2; //oops, that was supposed to be c2
  C2 = C1;
}</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37904</IssueID>
    <RepoID>1</RepoID>
    <Title>Confused about TupleElementNames for tuples with more than 8 elements</Title>
    <Description>Consider the following tuple-typed field:

```c#
(int A1, int A2, int A3, int A4, int A5, int A6, int A7, int A8, (int x, int y) A9) F;
```

[When you compile it](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEBMACAwgWAFADe+GJGAFAJYB2MGAggIwA0G1tdaLb9AzFzfQAs/dgFYR9AGwS6AdhkAOFpQEAPCQE8AlPQCcOgGIBufAF8gA=), the generated code is:

```c#
[TupleElementNames(new[] { "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", null, null, "x", "y" })]
private ValueTuple&lt;int, int, int, int, int, int, int, ValueTuple&lt;int, ValueTuple&lt;int, int&gt;&gt;&gt; F;
```

Notice that the generated `[TupleElementNames]` contains two extra `null`s, one for each tuple element in the `TRest` tuple. But these `null`s don't correspond to any tuple elements in the original source, so to me, this behavior seems to be wrong.

On the other hand, as far as I can tell, this does not cause any observable problems (because whenever compilation produces these extra `null`s, metadata decoding expects them to be there) and "fixing" this would cause compatibility issues. Because of that, maybe the best option to do here is to document this quirky behavior?

What do you think?

This issue was originally noticed by @pauldotnet in https://github.com/dotnet/csharplang/issues/1906#issuecomment-466275495.</Description>
    <CreatedDate>11/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37903</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn incorrectly handles optional parameters when processing [NotNullIfNotNull] annotation</Title>
    <Description>Similar to https://github.com/dotnet/roslyn/issues/37832

**Version Used**: 

```cs
Branch master (10 Aug 2019)
Latest commit c21548 by dotnet-automerge-bot:
Merge pull request #37896 from dotnet/merges/release/dev16.3-preview2-to-master

Merge release/dev16.3-preview2 to master
```

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
using System.Diagnostics.CodeAnalysis;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
public class C {
    [return: NotNullIfNotNull("p")]
    public string? M1(string? p = "defualt") =&gt; p;
    
    [return: NotNullIfNotNull("p")]
    public string? M2([Optional, DefaultParameterValue("defualtParameterValue")] string? p) =&gt; p;
    
    [return: NotNullIfNotNull("p")]
    public string? M3([CallerMemberName] string? p = null) =&gt; p;
    
    void Test()
    {
        var s1 = M1();
        s1.ToString();
        
        var s2 = M2();
        s2.ToString();
        
        var s3 = M3();
        s3.ToString();
    }
}
```

**Expected Behavior**:
No warnings. Roslyn will handle every invocation and insert a non-nullable argument for each of them. According to the called members' signatures non-nullable argument results in a non-nullable return value.

**Actual Behavior**:
```
    warning CS8602: Dereference of a possibly null reference.
    warning CS8602: Dereference of a possibly null reference.
    warning CS8602: Dereference of a possibly null reference.
```
Warnings reported for `s1.ToString()`, `s2.ToString()` and `s3.ToString()`.</Description>
    <CreatedDate>11/08/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37902</IssueID>
    <RepoID>1</RepoID>
    <Title>New [SuppressMessage] in source option not shown in Error List</Title>
    <Description>**Version Used**: 

Visual Studio 2019 v16.2.1

**Steps to Reproduce**:

1. Trigger a code analysis rule
2. Right click on entry in Error List
3. View `Suppress` menu entries

**Expected Behaviour**:

New suppress `in Source (attribute)` option is available and adds `[SuppressMessage]` attribute to source code. As per right click menu from Light Bulb quick action:

![LightBulb](https://user-images.githubusercontent.com/36932614/62837387-b8863500-bc66-11e9-92c7-2bf45c3c3cc1.png)

**Actual Behaviour**:

Option is missing.

![ErrorList](https://user-images.githubusercontent.com/36932614/62837398-d81d5d80-bc66-11e9-88b9-49cfe68b56a1.png)

This should be added for completeness, ease of discovery, and to avoid confusion.
</Description>
    <CreatedDate>11/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37901</IssueID>
    <RepoID>1</RepoID>
    <Title>IDictionary indexer gives spurious CS8625 nullability warning</Title>
    <Description>**Version Used**: dotnet 3.0.100-preview7-012821

**Steps to Reproduce**:

Compile the following code with `&lt;Nullable&gt;enable&lt;/Nullable&gt;`:

```csharp
IDictionary dictionary = new Dictionary&lt;string, string&gt;();
dictionary["test"] = null;
```

Full example at https://github.com/bgrainger/NullableTest/blob/master/IDictionaryIndexer.cs

**Expected Behavior**:

No warnings.

As per https://docs.microsoft.com/en-us/dotnet/api/system.collections.idictionary?view=netframework-4.8:

&gt; The value can be null and does not have to be unique.

At https://github.com/dotnet/corefx/blob/b129f7657a1b93ce9cf577d769d9d03c862e2338/src/Common/src/CoreLib/System/Collections/IDictionary.cs#L18 the indexer property is denoted as `object?`.

**Actual Behavior**:

warning CS8625: Cannot convert null literal to non-nullable reference type.
</Description>
    <CreatedDate>11/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37900</IssueID>
    <RepoID>1</RepoID>
    <Title>Enum member formatting should follow csharp_space_around_declaration_statements</Title>
    <Description>Fixes #37030: Enum member formatting should follow csharp_space_around_declaration_statements</Description>
    <CreatedDate>11/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37899</IssueID>
    <RepoID>1</RepoID>
    <Title>InteractiveHost tests failing on non-English culture</Title>
    <Description>**Version Used**: master (4f02f75)

**Steps to Reproduce**:

0. Have culture of a machine set to cs-CZ.
1. Run tests from InteractiveHost.UnitTests on that machine.

**Expected Behavior**:

No failures.

**Actual Behavior**:

2 failures:

1.  Microsoft.CodeAnalysis.UnitTests.Interactive.InteractiveHostTests.InitialScript_Error
   Source: InteractiveHostTests.cs line: 923
   Duration: 3 sec

      Message: 
    
        Expected:
        C:\Users\Svick\AppData\Local\Temp\RoslynTests\InteractiveHostTests.cs_925_bed384ee-7327-415d-a982-b200a22b5b9e.csx(1,3): error CS1002: ; expected
        Actual:
        C:\Users\Svick\AppData\Local\Temp\RoslynTests\InteractiveHostTests.cs_925_bed384ee-7327-415d-a982-b200a22b5b9e.csx(1,3): error CS1002: Očekával se středník (;).
        Differences:
        ++&gt; C:\Users\Svick\AppData\Local\Temp\RoslynTests\InteractiveHostTests.cs_925_bed384ee-7327-415d-a982-b200a22b5b9e.csx(1,3): error CS1002: Očekával se středník (;).
        --&gt; C:\Users\Svick\AppData\Local\Temp\RoslynTests\InteractiveHostTests.cs_925_bed384ee-7327-415d-a982-b200a22b5b9e.csx(1,3): error CS1002: ; expected
    
        Expected: True
        Actual:   False
      Stack Trace: 
        at AssertEx.AssertEqualToleratingWhitespaceDifferences(String expected, String actual, Boolean escapeQuotes, String expectedValueSourcePath, Int32 expectedValueSourceLine) in AssertEx.cs line: 504
        at InteractiveHostTests.InitialScript_Error() in InteractiveHostTests.cs line: 939
2.  Microsoft.CodeAnalysis.UnitTests.Interactive.InteractiveHostTests.Script_NoHostNamespaces
   Source: InteractiveHostTests.cs line: 993
   Duration: 2 sec

      Message: 
    
        Expected:
        (1,8): error CS0234: The type or namespace name 'Missing' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)
        Actual:
        (1,8): error CS0234: Typ nebo název oboru názvů Missing neexistuje v oboru názvů Microsoft. (Nechybí odkaz na sestavení?)
        Differences:
        ++&gt; (1,8): error CS0234: Typ nebo název oboru názvů Missing neexistuje v oboru názvů Microsoft. (Nechybí odkaz na sestavení?)
        --&gt; (1,8): error CS0234: The type or namespace name 'Missing' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)
    
        Expected: True
        Actual:   False
      Stack Trace: 
        at AssertEx.AssertEqualToleratingWhitespaceDifferences(String expected, String actual, Boolean escapeQuotes, String expectedValueSourcePath, Int32 expectedValueSourceLine) in AssertEx.cs line: 504
        at InteractiveHostTests.Script_NoHostNamespaces() in InteractiveHostTests.cs line: 996

Note that in both cases, the only difference is that the expected error message is English, while the actual message is in Czech.</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37898</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixed parsing of generic types in property patterns</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/38121

This is the simplest way to fix https://github.com/dotnet/roslyn/issues/38121 that I could think of. Since an expression cannot begin with `{`, this should not affect any previously compiling code. (Though it might affect what syntax tree is produced for invalid code in some cases.)

Since this PR makes claims about what the (virtual) C# 8.0 spec contains, it might require the attention of the LDM.</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37897</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate static field for ReadOnlySpan created from array without an initializer (#33088)</Title>
    <Description>Fix #33088</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37896</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>10/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37895</IssueID>
    <RepoID>1</RepoID>
    <Title>Update package heuristic to include other invalid directories.</Title>
    <Description>For https://github.com/dotnet/roslyn/issues/37246
Now looks like
&lt;img width="868" alt="install_package" src="https://user-images.githubusercontent.com/5749229/62816126-8b574c80-bad7-11e9-9961-735ddef8cbef.PNG"&gt;

Couldn't find any tests for this feature, let me know if there are some I'm missing.</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37894</IssueID>
    <RepoID>1</RepoID>
    <Title>Comparable helper to compare by components</Title>
    <Description>A helper to compare objects by a series of components. If the first component are different, return the comparison. Otherwise, proceed with the second component and so on.</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37893</IssueID>
    <RepoID>1</RepoID>
    <Title>Comparable helper to compare by components</Title>
    <Description>A helper to compare objects by a series of components. If the first component are different, return the comparison. Otherwise, proceed with the second component and so on.</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>10/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37892</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix use explicit type and nullable-annotated array syntax generation</Title>
    <Description>Fixes #37877.</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37891</IssueID>
    <RepoID>1</RepoID>
    <Title>ChangeNamespaceService doesn't fix references in the form of member access</Title>
    <Description>For example, when using refactoring to change namespace `NS1` to `NS2` in the code sample below, the reference `NS1.MyEnum.A` will not be changed to `NS2.MyEnum.A`

```cs
namespace NS
{
    public MyEnum
    {
        A,
        B,
        C,
    }
}

...

var x = NS.MyEnum.A;
```</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37889</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1-vs-deps to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1-vs-deps into release/dev16.3-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-vs-deps-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-vs-deps-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37888</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-vs-deps to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-vs-deps into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.2-vs-deps-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-vs-deps-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37887</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview2</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview2.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview2
git reset --hard upstream/release/dev16.3-preview2
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>10/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37886</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.3-preview1</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview1.

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.3-preview1
git reset --hard upstream/release/dev16.3-preview1
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.3-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37885</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix and unskip nullable-reference-type related project upgrade test</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/30027</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37884</IssueID>
    <RepoID>1</RepoID>
    <Title>Move some ComputeRefactoringsAsync to common helpers 6/n</Title>
    <Description>Work for #35525</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37883</IssueID>
    <RepoID>1</RepoID>
    <Title>Unskip test that was skipped during nullable prototype work</Title>
    <Description>It passes now; I'm guessing something was doing bad analysis at one point and saying something was nullable when it wasn't.

Fixes https://github.com/dotnet/roslyn/issues/30035</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37882</IssueID>
    <RepoID>1</RepoID>
    <Title>Replace NugetPackageRoot with explicit package paths</Title>
    <Description>Our infrastructure uses the following pattern to locate the paths of NuPkg files that we use:

``` xml
&lt;Content Include="$(NuGetPackageRoot)\microsoft.diasymreader.native\$(MicrosoftDiaSymReaderNativeVersion)\runtimes\win\native\Microsoft.DiaSymReader.Native.x86.dll"&gt;
```

The issue here is that `$(NugetPackageRoot)` is not an official solution. It's a convention that we've built up in our repository. The convention does follow established patterns for finding the packages but it's not inherently supported by the NuGet or MSBuild team. 

There is now a supported way to get the path for a given package. The nuget.g.props file now generates a variable that contains the path of the NuPkg file for a given `PackageReference`:

``` xml
&lt;Content Include="$(PkgMicrosoft_DiaSymReader_Native)\runtimes\win\native\Microsoft.DiaSymReader.Native.x86.dll"&gt;
``` 

Related Items:
- https://github.com/NuGet/docs.microsoft.com-nuget/issues/1355
- https://github.com/NuGet/NuGet.Client/pull/2271
</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37881</IssueID>
    <RepoID>1</RepoID>
    <Title>Add nullable API annotations to Project/ProjectInfo and friends</Title>
    <Description>
    </Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37880</IssueID>
    <RepoID>1</RepoID>
    <Title>ProjectInfo.WithCompilationOptions and WithParseOptions doesn't correctly handle null values</Title>
    <Description>If you pass in null, the value will be ignored; the internal With method needs to be switched to using an `Optional&lt;T&gt;`.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37879</IssueID>
    <RepoID>1</RepoID>
    <Title>#nullable enable produces IMethodSymbols with no containing type, crashes IDE</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. Create a new console application.
2. Add this code inside of Program. (I have tried to reduce this to a smaller repro but have been unsuccessful):
```
public void A&lt;T&gt;(T t) where T:class
{
    var c = new F&lt;T&gt;[] { }.Select(v =&gt; new { Value = v.Item }).ToArray();
}

private class F&lt;T&gt;
{
    public F(T oldItem) =&gt; Item = oldItem;
    public T Item { get; }
}
```
3. Remove the `using System.Linq` at the top of the file. The "Select" should get a red squiggle.
4. Mouse over the Select method, observe no quick info.
5. Add a `#nullable enable` to the top of the file. Observe the Select now turns brown because it's binding to a method. (Which method? Who knows!)
6. Mouse over the Select again.

**Expected Behavior**: we don't get quick info
**Actual Behavior**: it crashes, because this bound to a method symbol that has no ContainingType which our code doesn't expect.
</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37878</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to new ilasm version</Title>
    <Description>The latest version of ilasm produced by coreclr is now a fully
independent executable; it no longer depends on having a full runtime
laid down next to it.

This means we can vastly simplify how it is deployde in our
infrastructure. The package can now be included and have ilasm manually
copied out. This is similar to the approach that we take for our
diasymreader native dependencies.

closes #37582
related #25930, #25144</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37877</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0008 doesn't account for nullable</Title>
    <Description>**Version Used**: 
3.3.0-beta2-19401-05+8ed56b826700926009731ca4d3de0a4e4e652969

**Steps to Reproduce**:
Copy/paste this into new console app:
```C#
#nullable enable
class Program
{
    private static int[]? s_data;

    static void Main()
    {
        var data = s_data;
    }
}
```
then run the IDE0008 refactoring on the `var`.

**Expected Behavior**:
Produces:
```C#
#nullable enable
class Program
{
    private static int[]? s_data;

    static void Main()
    {
        int[]? data = s_data;
    }
}
```

**Actual Behavior**:
Produces:
```C#
#nullable enable
class Program
{
    private static int[]? s_data;

    static void Main()
    {
        int[] data = s_data;
    }
}
```
resulting in the warning:
```
warning CS8600: Converting null literal or possible null value to non-nullable type.
```</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37876</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot configure severity with editorconfig for analyzer diagnostics with Location.None</Title>
    <Description>**Version Used**: Latest 16.3 dogfood preview build

**Steps to Reproduce**:

1. Open attached [ClassLibrary28.zip](https://github.com/dotnet/roslyn/files/3487424/ClassLibrary28.zip), which is a simple C# netstandard class library project with a ruleset with following contents to configure couple of CA diagnostics to errors:
```
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RuleSet Name="MyRules" Description="MyRules" ToolsVersion="10.0"&gt;
  &lt;Rules AnalyzerId="Microsoft.CodeQuality.Analyzers" RuleNamespace="Microsoft.CodeQuality.Analyzers"&gt;
    &lt;Rule Id="CA1014" Action="Error" /&gt; &lt;!-- Mark assemblies with CLSCompliant --&gt;
    &lt;Rule Id="CA1040" Action="Error" /&gt; &lt;!-- Avoid empty interfaces --&gt;
  &lt;/Rules&gt;
&lt;/RuleSet&gt;
```
2. Build project and verify 2 errors as expected:
![image](https://user-images.githubusercontent.com/10605811/62797810-7657ca80-ba91-11e9-9d61-9f0b56b594b8.png)
3. Now delete the ruleset from the project and replace it with the below equivalent editorconfig file (note can also use `[*.cs]` for the section header):
```
[*.*]

# CA1014: Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1014.severity = error

# CA1040: Avoid empty interfaces 
dotnet_diagnostic.CA1040.severity = error
```
4. Rebuild project

**Expected Behavior**:
2 errors similar to behavior when ruleset was used

**Actual Behavior**:
Only one error for CA1040
![image](https://user-images.githubusercontent.com/10605811/62798128-5e347b00-ba92-11e9-8c05-07139c534d5e.png)

CA1014 being a project level diagnostic with `Location.None` doesn't seem to be configurable from editorconfig file. This issue applies to all project level analyzer diagnostics, CA1014 is not special.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37875</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0019 "use pattern matching" introduces nullable warnings</Title>
    <Description>**Version Used**: 
3.3.0-beta2-19401-05+8ed56b826700926009731ca4d3de0a4e4e652969

**Steps to Reproduce**:
Copy/paste into a new project:
```C#
#nullable enable
using System;

class Program
{
    static void Main() { }

    static void Foo(object o1, object o2)
    {
        string? s = o1 as string;
        if (s == null)
        {
            s = o2 as string;
        }
        Console.WriteLine(s);
    }
}
```

**Expected Behavior**:
No warnings introduced, or no refactoring offered.

**Actual Behavior**:
Offers IDE0019, which refactors this into:
```C#
#nullable enable
using System;

class Program
{
    static void Main() { }

    static void Foo(object o1, object o2)
    {
        if (!(o1 is string s))
        {
            s = o2 as string;
        }
        Console.WriteLine(s);
    }
}
```
which issues a warning:
```
warning CS8600: Converting null literal or possible null value to non-nullable type.
```</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37874</IssueID>
    <RepoID>1</RepoID>
    <Title>Need to be able to disable smart semicolon positioning</Title>
    <Description>**Version Used**: 
16.1.3

**Steps to Reproduce**:

1. Create a new C# console app
2. Inside a method body, type `Console.WriteLine()` (without a semicolon)
3. Place the caret inside `()` and type `;`

**Expected Behavior**:
Should insert the caret where typed

**Actual Behavior**:
Inserts the caret after `()`

Reported by @jfrijters

As far as I can tell this must be a relatively new feature - one needs to be able to turn it off</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37873</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0066 removes comments</Title>
    <Description>**Version Used**: 
3.3.0-beta2-19401-05+8ed56b826700926009731ca4d3de0a4e4e652969

**Steps to Reproduce**:
```C#
class Program
{
    static void Main() { }

    static int GetValue(int input)
    {
        switch (input)
        {
            case 1:
                // this little piggy went to market
                return 42;
            case 2:
                // this little piggy stayed home
                return 50;
            case 3:
                // this little piggy had roast beef
                return 79;
            default:
                // this little piggy had none
                return 80;
        }
    }
}
```
Run the IDE0066 refactor on the switch.

**Expected Behavior**:
Generates something like:
```C#
class Program
{
    static void Main() { }

    static int GetValue(int input)
    {
        return input switch
        {
            1 =&gt; 42, // this little piggy went to market
            2 =&gt; 50, // this little piggy stayed home
            3 =&gt; 79, // this little piggy had roast beef
            _ =&gt; 80, // this little piggy had none
        };
    }
}
```

**Actual Behavior**:
Generates:
```C#
class Program
{
    static void Main() { }

    static int GetValue(int input)
    {
        return input switch
        {
            1 =&gt; 42,
            2 =&gt; 50,
            3 =&gt; 79,
            _ =&gt; 80,
        };
    }
}
```
or doesn't offer the refactoring.  As it now stands, I can't trust the refactoring as it's losing information.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37919</IssueID>
    <RepoID>1</RepoID>
    <Title>Unicode escape in the middle of a define causes compile error CS1024</Title>
    <Description>We had an internal report of this scenario. We would like to know if this is an unsupported scenario of if there is a bug in the encoding logic that should recognize this character.

```cs
#de\u0066ine endf
using System;

class Program
{
    static void Main()
    {
        #if endf
            Console.WriteLine("Worked!");
        #endif
    }
}
```

The command that was originally used to repro this issue was:

&gt; `csc.exe /out:Program.exe /t:exe /define:amd64 Program.cs`

But we were also able to reproduce this build error with a .NET Core 3.0 project and building directly with Visual Studio. The error we get in VS is:

&gt; `CS1024: Preprocessor directive expected`

@jaredpar mentioned he tried different code pages: 1200, 1201, 65000, etc., but they all produce the same error.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37872</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0066 fails in the face of ifdefs</Title>
    <Description>**Version Used**: 
3.3.0-beta2-19401-05+8ed56b826700926009731ca4d3de0a4e4e652969

**Steps to Reproduce**:
Copy/paste this into a new console project:
```C#
class Program
{
    static void Main() { }

    static int GetValue(int input)
    {
        switch (input)
        {
            case 1:
                return 42;
            case 2:
#if PLATFORM_UNIX
                return 50;
#else
                return 51;
#endif
            case 3:
                return 79;
            default:
                return 80;
        }
    }
}
```
Then execute the IDE0066 refactoring on the `switch`.

**Expected Behavior**:
It generates code like:
```C#
class Program
{
    static void Main() { }

    static int GetValue(int input)
    {
        return input switch
        {
            1 =&gt; 42,
#if PLATFORM_UNIX
            2 =&gt; 50,
#else
            2 =&gt; 51,
#endif
            3 =&gt; 79,
            _ =&gt; 80,
        };
    }
}
```
or at the very least code that compiles:
```C#
class Program
{
    static void Main() { }

    static int GetValue(int input)
    {
        return input switch
        {
            1 =&gt; 42,
            2 =&gt; 51,
            3 =&gt; 79,
            _ =&gt; 80,
        };
    }
}
```
or worst case simply doesn't offer the refactoring when there's any ambiguity due to ifdefs.

**Actual Behavior**:
It generates code that doesn't compile:
```C#
class Program
{
    static void Main() { }

    static int GetValue(int input)
    {
        return input switch
        {
            1 =&gt; 42,
            2 =&gt; 51,
#endif
            3 =&gt; 79,
            _ =&gt; 80,
        };
    }
}
```</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37871</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 on ref parameter reassignment</Title>
    <Description>**Version Used**: Visual Studio 2019 version 16.3 Preview 1

**Steps to Reproduce**:

```cs
using System.Runtime.CompilerServices;

class Program
{
    void Method(ref int param)
    {
        {
            param = ref Unsafe.Add(ref param, 1); // IDE0059
            param = default;
        }

        {
            param = ref Unsafe.Add(ref param, 1); // No warning
            param = ref Unsafe.Add(ref param, 1); // IDE0059
            param = default;
        }

        {
            param = ref Unsafe.Add(ref param, 1); // No warning
            param = ref Unsafe.Add(ref param, 1); // No warning
        }

        ref int local = ref param;

        {
            local = ref Unsafe.Add(ref param, 1); // No warning
            local = default;
        }

        {
            local = ref Unsafe.Add(ref param, 1); // No warning
        }
    }
}
```

**Expected Behavior**:

IDE0059 is not reported for the reassignment.

**Actual Behavior**:

IDE0059 is reported for the reassignment.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37870</IssueID>
    <RepoID>1</RepoID>
    <Title>Support NotNullIfNotNull on operator</Title>
    <Description>**16.2.1**: 

**Steps to Reproduce**:

```c#
class Program
{
	class A { }
	class B
	{
		[return: NotNullIfNotNull("b")]
		public static implicit operator A?(B? b) =&gt; b == null ? null : new A();
	}

	static void Main(string[] args)
	{
		B b = new B();
		A a = b;
	}
}
```

**Expected Behavior**:

This code should not generate any warnings.

**Actual Behavior**:

```
warning CS8600: Converting null literal or possible null value to non-nullable type.
```</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37869</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability changes in C# 8 since VS 16.2 not working with 'dotnet build'?</Title>
    <Description>**Version Used**: 
Visual Studio 16.2.0/16.2.1 (same behaviour)
```
C:\Users\olmo.delcorralcano&gt;dotnet --info
.NET Core SDK (reflecting any global.json):
 Version:   2.2.401
 Commit:    729b316c13

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.17134
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\2.2.401\

Host (useful for support):
  Version: 2.2.6
  Commit:  7dac9b1b51

.NET Core SDKs installed:
  2.1.202 [C:\Program Files\dotnet\sdk]
  2.1.500 [C:\Program Files\dotnet\sdk]
  2.1.502 [C:\Program Files\dotnet\sdk]
  2.1.503 [C:\Program Files\dotnet\sdk]
  2.1.600-preview-009426 [C:\Program Files\dotnet\sdk]
  2.1.602 [C:\Program Files\dotnet\sdk]
  2.1.700 [C:\Program Files\dotnet\sdk]
  2.1.801 [C:\Program Files\dotnet\sdk]
  2.2.100 [C:\Program Files\dotnet\sdk]
  2.2.300 [C:\Program Files\dotnet\sdk]
  2.2.401 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.11 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.5 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.11 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.5 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.0.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.11 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.5 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download
```

**Steps to Reproduce**:
1. Clone https://github.com/signumsoftware/southwind/commits/master
2. Run
 `dotnet build Southwind.sln /p:Configuration=Release /p:Platform=x64 /p:VisualStudioVersion=15.0 /m` 
or
`dotnet build Southwind.sln /p:Configuration=Release /p:Platform=x64 /p:VisualStudioVersion=16.2 /m` (same behaviour)

**Expected Behavior**:
Compiles without errors, like VS does

**Actual Behavior**:
Many errors like not understanding the new `notnull` constraint, indicating dotnet build / MSBuild is not aweare of the new version of the C# compiler. 
```
ConsoleSwitch.cs(9,19): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
ConsoleSwitch.cs(296,45): error CS0315: The type 'int' cannot be used as type parameter 'K' in the generic type or method 'ConsoleSwitch&lt;K, V&gt;'. There is no boxing conversion from 'int' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
ConsoleSwitch.cs(296,80): error CS0315: The type 'int' cannot be used as type parameter 'K' in the generic type or method 'ConsoleSwitch&lt;K, V&gt;'. There is no boxing conversion from 'int' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(10,18): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Polymorphic.cs(49,23): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Extensions\RegexExtensions.cs(47,23): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Extensions\RegexExtensions.cs(48,23): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(144,76): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(144,111): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(284,41): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(298,41): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(303,56): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(309,41): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(314,48): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(319,48): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(326,48): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(331,48): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(467,41): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(531,41): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Polymorphic.cs(290,101): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Polymorphic.cs(296,116): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Polymorphic.cs(302,131): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Polymorphic.cs(308,146): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Polymorphic.cs(314,161): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Polymorphic.cs(322,102): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Polymorphic.cs(328,117): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Polymorphic.cs(334,132): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\ImmutableStack.cs(54,92): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Polymorphic.cs(340,147): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\ImmutableStack.cs(59,119): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Polymorphic.cs(346,162): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Extensions\EnumerableExtensions.cs(971,23): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(10,19): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Extensions\DictionaryExtensions.cs(58,23): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Extensions\DictionaryExtensions.cs(101,120): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Extensions\DictionaryExtensions.cs(108,94): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Extensions\DictionaryExtensions.cs(115,132): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(612,23): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedEdgedGraph.cs(611,73): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedEdgedGraph&lt;T, E&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Extensions\DictionaryExtensions.cs(474,91): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
Extensions\DictionaryExtensions.cs(481,117): error CS0246: The type or namespace name 'notnull' could not be found (are you missing a using directive or an assembly reference?) [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(137,68): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(137,95): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(249,33): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(263,33): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(268,33): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(268,65): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(280,48): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(286,33): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(291,40): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(296,40): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(303,40): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(308,40): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(435,33): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
DataStructures\DirectedGraph.cs(498,33): error CS0314: The type 'T' cannot be used as type parameter 'T' in the generic type or method 'DirectedGraph&lt;T&gt;'. There is no boxing conversion or type parameter conversion from 'T' to 'notnull'. [C:\Code\Southwind\Framework\Signum.Utilities\Signum.Utilities.csproj]
```</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37868</IssueID>
    <RepoID>1</RepoID>
    <Title>NullReferenceException in NullableWalker.TakeIncrementalSnapshot when input some invalid code</Title>
    <Description>**Version Used**: 
a2ee43795f9e87be1206f816db663e22b2d35993(release/dev16.3-preview2-vs-deps)
also for bf0d756fbb8d9e1dc8ace822fdfdb47a1fb0e45a(master-vs-deps).

Tested with VS2019(16.3p1), downgrade SystemThreadingTasksExtensions to 4.5.2 to run.
And that doesn't happen in the bundle version of 16.3p1.
Maybe related to #35850

**Steps to Reproduce**:

1. Type the below code(has 2 similar version, both is invalid, just used for test)
```cs
public void Test1()
{
    if (unknown is string b = )
    {
        Console.WriteLine(b);
    }
}

public void Test2(bool a)
{
    if (a is bool (b = a))
    {
        Console.WriteLine(b);
    }
}
```



&lt;details&gt;
&lt;summary&gt;StackTrace&lt;/summary&gt;

```csharp

NullReferenceException
//throw(currentState is null)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.SnapshotManager.Builder.TakeIncrementalSnapshot(BoundNode node, LocalState currentState)
//hit assert here(IsConditionalState is true)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.TakeIncrementalSnapshot(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitRvalue(BoundExpression node, Boolean isKnownToBeAnLvalue)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitRvalueWithState(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitOptionalImplicitConversion(BoundExpression expr, TypeWithAnnotations targetTypeOpt, Boolean useLegacyWarnings, Boolean trackMembers, AssignmentKind assignmentKind)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitAssignmentOperator(BoundAssignmentOperator node)
   at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitRvalue(BoundExpression node, Boolean isKnownToBeAnLvalue)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitRvalueWithState(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitConversion(BoundConversion node)
   at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitCondition(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitIfStatement(BoundIfStatement node)
   at Microsoft.CodeAnalysis.CSharp.BoundIfStatement.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatement(BoundStatement statement)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatement(BoundStatement statement)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatements(ImmutableArray`1 statements)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatement(BoundStatement statement)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatement(BoundStatement statement)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatements(ImmutableArray`1 statements)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Analyze(Boolean&amp; badRegion, Optional`1 initialState)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(NullableWalker walker, Symbol symbol, DiagnosticBag diagnostics, VariableState initialState, Builder snapshotBuilderOpt)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, Conversions conversions, DiagnosticBag diagnostics, Boolean useMethodSignatureParameterTypes, MethodSymbol methodSignatureOpt, VariableState initialState, Builder analyzedNullabilityMapOpt, Builder updatedMethodSymbolMapOpt, Builder snapshotBuilderOpt, ArrayBuilder`1 returnTypesOpt)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeAndRewrite(CSharpCompilation compilation, Symbol symbol, BoundNode node, Binder binder, DiagnosticBag diagnostics, Boolean createSnapshots, SnapshotManager&amp; snapshotManager)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.RewriteNullableBoundNodesWithSnapshots(BoundNode boundRoot, Binder binder, DiagnosticBag diagnostics, Boolean createSnapshots, SnapshotManager&amp; snapshotManager)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.&lt;EnsureNullabilityAnalysisPerformedIfNecessary&gt;g__bindAndRewrite|127_1(&lt;&gt;c__DisplayClass127_0&amp; )
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.&lt;EnsureNullabilityAnalysisPerformedIfNecessary&gt;g__ensureSpeculativeNodeBound|127_0(&lt;&gt;c__DisplayClass127_0&amp; )
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.EnsureNullabilityAnalysisPerformedIfNecessary()
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp; bindableNode, BoundNode&amp; lowestBoundNode, BoundNode&amp; highestBoundNode, BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(SemanticModel semanticModel, ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyTypeSyntax(NameSyntax name, SemanticModel semanticModel, ArrayBuilder`1 result, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.AddClassifications(Workspace workspace, SyntaxNode syntax, SemanticModel semanticModel, ArrayBuilder`1 result, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ClassifyNode(SyntaxNode syntax)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ClassifyNodeOrToken(SyntaxNodeOrToken nodeOrToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ProcessNodes()
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.Classify(Workspace workspace, SemanticModel semanticModel, TextSpan textSpan, ArrayBuilder`1 list, Func`2 getNodeClassifiers, Func`2 getTokenClassifiers, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.AddSemanticClassifications(SemanticModel semanticModel, TextSpan textSpan, Workspace workspace, Func`2 getNodeClassifiers, Func`2 getTokenClassifiers, ArrayBuilder`1 result, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.&lt;AddSemanticClassificationsAsync&gt;d__5.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.AddSemanticClassificationsAsync(Document document, TextSpan textSpan, Func`2 getNodeClassifiers, Func`2 getTokenClassifiers, ArrayBuilder`1 result, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.&lt;AddSemanticClassificationsAsync&gt;d__2.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.AddSemanticClassificationsAsync(Document document, TextSpan textSpan, List`1 result, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.&lt;ClassifySpansAsync&gt;d__2.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ClassifySpansAsync(TaggerContext`1 context, DocumentSnapshotSpan spanToTag, IClassificationService classificationService, ClassificationTypeMap typeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.&lt;TryClassifyContainingMemberSpan&gt;d__1.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.TryClassifyContainingMemberSpan(TaggerContext`1 context, DocumentSnapshotSpan spanToTag, IClassificationService classificationService, ClassificationTypeMap typeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.&lt;ProduceTagsAsync&gt;d__0.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ProduceTagsAsync(TaggerContext`1 context, DocumentSnapshotSpan spanToTag, IClassificationService classificationService, ClassificationTypeMap typeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationViewTaggerProvider.ProduceTagsAsync(TaggerContext`1 context)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.ProduceTagsAsync(TaggerContext`1 context)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.&lt;RecomputeTagsAsync&gt;d__70.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.RecomputeTagsAsync(Object oldState, Nullable`1 caretPosition, Nullable`1 textChangeRange, ImmutableArray`1 spansToTag, ImmutableDictionary`2 oldTagTrees, Boolean initialTags, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.&lt;&gt;c__DisplayClass63_1.&lt;RecomputeTagsForeground&gt;b__0(CancellationToken ct)
   at Microsoft.CodeAnalysis.Editor.Shared.Threading.AsynchronousSerialWorkQueue.&lt;&gt;c__DisplayClass12_0.&lt;EnqueueBackgroundTask&gt;b__0(Task _)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```

&lt;/details&gt;

**Expected Behavior**:
The ide should not crash. Any other thing should be ok since it's not an vaild code, nor some state during typing normal code.

**Actual Behavior**:
See an assert, and then the whole ide crashes and exit.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37867</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37866</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37865</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37864</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37863</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37862</IssueID>
    <RepoID>1</RepoID>
    <Title>[Draft] use multiple content types on ILanguageClient</Title>
    <Description>it turns out they already added that support, so moving to 1 language server with multiple content types and add support for live share as well on the way.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37861</IssueID>
    <RepoID>1</RepoID>
    <Title>[C# Feature Request] Show FlagAttribute and datatype of enums on hover</Title>
    <Description>**Version Used**: 
Visual Studio Community 2019 Preview
Version 16.3.0 Preview 1.0

**Steps to Reproduce**:

1.  Create a file with a `enum`
2.  Add the `[Flags]` attribute to the `enum`
3.  (optional) Add a datatype to the `enum`
4. Hover over the name of the `enum`

```csharp
/// &lt;summary&gt;
/// My beautiful enum
/// &lt;/summary&gt;
[Flags]
public enum MyEnum : byte
{ }
```

**Expected Behavior**:
On hover
``` 
(symbol) [Flags] enum MyEnum : byte
My beautiful enum
```

**Actual Behavior**:
On hover
```
(symbol) enum MyEnum
My beautiful enum
```

**Current workaround**:
Add FlagAttribute and datatype to the XML documentation
```csharp
/// &lt;summary&gt;
/// My beautiful enum
/// (enum used &lt;see cref="FlagsAttribute"/&gt;, datatype: &lt;see cref="byte"/&gt;)
/// &lt;/summary&gt;
[Flags]
public enum MyEnum : byte
{ }
```</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37860</IssueID>
    <RepoID>1</RepoID>
    <Title>Opening a _very_ large file causes Visual Studio to crash</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/421417/devenv-unknown-hard-error-ctorchararraystartlength.html)._

---
When working with big code files the IDE frequently crashes with Unknown Hard Error. See attached screenshot.

The stacktrace in the event log shows CtorCharArrayStartLength as the failure point. See attached full stacktrace for more info.
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.String.CtorCharArrayStartLength(Char[] value, Int32 startIndex, Int32 length)

I created a repro to simulate the problem. Open the attached code file, notice that the call to the EndsWith method has a start parenthesis but is not closed. Add and remove the close parenthesis character a few times to trigger the crash.

---
### Original Comments

#### Visual Studio Feedback System on 6/24/2019, 00:44 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Sam Harwell [MSFT] on 8/8/2019, 03:58 PM: 

&lt;p&gt;Thank you for providing feedback, and we’re sorry to hear it’s not behaving as you expect. Based on your description so far, it sounds like you are experiencing a problem which is historically hard to diagnose and resolve using the normal “steps to reproduce”. We created a set of instructions for providing additional information which will help us track down the true source of the problems.&lt;/p&gt;
&lt;p&gt;Based on the information provided so far, the most likely scenario to follow is for “Crashes”. Please take a look at the following document to provide the feedback most relevant for the problems you would like to see fixed: &lt;a target='_blank' href="https://github.com/dotnet/roslyn/wiki/Reporting-Visual-Studio-crashes-and-performance-issues#crashes"&gt;https://github.com/dotnet/roslyn/wiki/Reporting-Visual-Studio-crashes-and-performance-issues#crashes&lt;/a&gt;&lt;/p&gt;

#### bugreporter5367 on 8/8/2019, 05:16 PM: 

@sharwell How is it hard to diagnose? I attached a code sample with repro steps to crash the IDE. VS 16.2 is even easier, just opening the file causes an immediate crash. What more would you like me to provide?

---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37859</IssueID>
    <RepoID>1</RepoID>
    <Title>UseExplicitTupleName: Avoid NullRefException on Rest field</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/23867</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37857</IssueID>
    <RepoID>1</RepoID>
    <Title>don't crash Vs because OOP lost its connection</Title>
    <Description>we can lose OOP connection due to many reasons such as user explicitly killing OOP process.

we have made that not to kill VS but this one place it looks like it can still crash VS.

this could be due to StreamJsonRpc now throwing ConnectionLostException rather than general RemoteInvocationException it used to throw for everything.

when we get connection lost exception we do the normal pattern. showing info bar asking users to restart VS and send NFW but move on.

one can use s_infoBarReported
http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Remote/RemoteHostCrashInfoBar.cs,21

to see whether VS (dump) is in this mode.

address 
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/962450
https://microsoft.visualstudio.com/DefaultCollection/OS/_workitems/edit/23069518
</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37856</IssueID>
    <RepoID>1</RepoID>
    <Title>Option to turn off Code Analysis</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/619302/code-analysis.html)._

---
I am using Visual Studio 2017 and 2019 upgraded with VSix VxCop analyzers. I am not part of a company. I am retired. However I still write and build programs in C#. Sometimes ever day. I am used to running code analysis manually when I thought it necessary. However the VSix install turned the analysis feature on all the time. It is particularly bothersome since the analysis takes time to run.  

It would be nice to be able to go back to running code analysis manually again. 

I am suggesting a feature that allows the selection of when to perform code anysis; either manual or automatic.

---
### Original Comments

#### Jane Wu [MSFT] on 6/25/2019, 01:27 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37855</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve syntax recovery for use of `;` instead of `,` in switch expression</Title>
    <Description>Fixes #34482</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37854</IssueID>
    <RepoID>1</RepoID>
    <Title>Using the editor dropdown to navigate to Visual Basic event handler is painful</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/550338/using-the-editor-dropdown-to-navigate-to-visual-ba.html)._

---
&lt;p&gt;I have a VB.net project with windows forms.&lt;/p&gt;&lt;p&gt;If I am in code view for the form and try to navigate to a button's (say btnOK) Click handler using the text editor's dropdown lists, I have to:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;(Optional?) Using the left-most dropdown pick the module(?). In most of my situations, there is only a single item and I skip this step.&lt;/li&gt;&lt;li&gt;Using the middle dropdown, I have to scroll to find the right button. Why is this list structured like this with classes, the class's events and then the class's members which support events?!?&lt;/li&gt;&lt;li&gt;Then I have to go to the right-most dropdown and find the 'Click' event. Why does it show all of the possible events? Why if you accidentally click the wrong event would you want it to create the event handler method?&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If I want to navigate back to a regular method on the form, I have to:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Select the form from the middle drop down&lt;/li&gt;&lt;li&gt;Select the method from the right-most dropdown. This is an extra unnecessary step if all of the class's methods were in the one list (the right-most).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I spend 99% of my time maintaining existing code and browsing rather than creating new code. The design of a C# project's dropdown organisation is vastly superior for this purpose:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Select Namespace&lt;/li&gt;&lt;li&gt;Select class&lt;/li&gt;&lt;li&gt;Select method.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Is there an option to have C# style navigation instead of the VB.NET way? If not, please provide one it would be a very nice productivity improvement.&lt;/p&gt;&lt;p&gt;Thanks!&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 4/30/2019, 02:24 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
#### Cameron Miller on 5/2/2019, 10:13 PM: 

&lt;p&gt;Hi I also found that I can't navigate to directly to a control's declaration using the dropdown navigation (e.g. Friend WithEvents cmdEscape As ButtonRounded). This may be a bug?&lt;/p&gt;
</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37853</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37852</IssueID>
    <RepoID>1</RepoID>
    <Title>Be smarter when the type inferrer infers nullability around error cases</Title>
    <Description>If the type inferrer infers that a type is nullable due to context, it'll return either a nullable value type or a nullable reference type, and in either case generate a type syntax that has a ?. If it's a nullable reference type, we'll remove the ? in the simplification pass if you're not in a `#nullable enable` case.

If the type being inferrered is an _error_ type, the syntax we generate will be bound by the compiler as a value type, so the simplification pass will think it's valid always. This was addressed by simply having the type inferrer not stick a null with the error type case. But we could be smarter: we could instead still infer it to be nullable but when generating the syntax annotate the ? saying "this was a guess". If you're in a `#nullable enable` case we keep the guess (since it's valid no matter struct or class), but in the `#nullable disable` case drop it under the guess you want to be a class.</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37851</IssueID>
    <RepoID>1</RepoID>
    <Title>Add nullability information to extract method</Title>
    <Description>The general premise is to favor non nullable reference types when possible, but we need to use flow analysis to be sure. 

* Use analysis on all parameters to determine if they are ever assigned to null (if a ref parameter) 
* Analyze if a parameter is never null in reference locations
* Analyze all returns of a generated method to determine if null is possible
* Add, hopefully, enough comprehensive tests to cover a wide array of possibilities</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37849</IssueID>
    <RepoID>1</RepoID>
    <Title>Code analysis settings</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/488819/code-analysis-settings.html)._

---
&lt;p&gt;I miss the location where I can alter the code analysis settings in visual studio 2019 Version 16.0.0. Preview 4.2 on my .net core project&lt;/p&gt;&lt;p&gt;Would be nice to understand where it has gone to. &lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 3/14/2019, 02:21 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37848</IssueID>
    <RepoID>1</RepoID>
    <Title>Underline comparing a value of non-nullable type to null</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/483193/underline-comparing-a-value-of-non-nullable-type-t.html)._

---
&lt;p&gt;In the following expression, Visual Studio correctly underlines the expression as it is always false:&lt;/p&gt;&lt;pre&gt;int number = 10;
if (number == null) // Expression is underlined, it is always false
{
  // ...
}&lt;/pre&gt;&lt;p&gt;However, this does not work for all types not allowing nulls:&lt;/p&gt;&lt;pre&gt;DateTime dateTime = new DateTime();
if (dateTime == null) // Expression is NOT underlined, it is always false
{
  // ...
}&lt;/pre&gt;&lt;p&gt;While assigning &lt;strong&gt;null&lt;/strong&gt; to &lt;em&gt;number&lt;/em&gt; or &lt;em&gt;dateTime&lt;/em&gt; is invalid, detection of expressions which always evaluate to &lt;strong&gt;false&lt;/strong&gt; works for &lt;i&gt;number&lt;/i&gt; only.&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 3/11/2019, 03:20 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37847</IssueID>
    <RepoID>1</RepoID>
    <Title>Better Roslyn Analyzer UI integration for global rule suppression</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/466977/better-roslyn-analyzer-ui-integration-for-global-r.html)._

---
&lt;p&gt;&lt;strong&gt;PROBLEM&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using Roslyn analyzers like StyleCop is much more difficult than it should be.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Firstly, when installing a Roslyn analyzer and you make a default `.ruleset` file, opening the file in the ruleset editor does not give you the option of disabling any rules from this roslyn analyzer. &lt;/p&gt;&lt;p&gt;For example, I installed StyleCop.Analyzers across all projects using Directory.Build.props. Since this is a global option I would expect the rules to appear in my global ruleset file.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Secondly, when you have an issue in code and you press `Ctrl + .`, the quick actions menu gives you 2 options for suppression:&lt;/p&gt;&lt;p&gt;1. Suppress in code (#pragma warning disable)&lt;/p&gt;&lt;p&gt;2. Suppress in file (GlobalSuppressions.cs)&lt;/p&gt;&lt;p&gt;However it gives no options for my global ruleset file! Every blog and Stack Overflow post I've read suggests using a ruleset file as a means for sharing rules between projects, but there doesnt seem to be any UI integration with it. Why can't I select a rule from code and just disable it globally? Why do I need to manually open the ruleset file in an XML editor and hand-craft the correct runes in text?&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Firstly, the ruleset file editor should know about your installed analyzers and provide a method to disable those rules.&lt;/p&gt;&lt;p&gt;Secondly, on code quick fixes menu, there should be a 3rd option:&lt;/p&gt;&lt;p&gt;3. Suppress in global ruleset file&lt;/p&gt;&lt;p&gt;This would add something like this to your ruleset file&lt;/p&gt;&lt;p&gt; &amp;lt;Rule Id=&amp;quot;SA1600&amp;quot; Action=&amp;quot;None&amp;quot; /&amp;gt; &amp;lt;!-- Elements should be documented --&amp;gt;&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 2/25/2019, 01:28 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37846</IssueID>
    <RepoID>1</RepoID>
    <Title>Better Roslyn Analyzer UI integration for global rule configuration</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/466977/better-roslyn-analyzer-ui-integration-for-global-r.html)._

---
&lt;p&gt;&lt;strong&gt;PROBLEM&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using Roslyn analyzers like StyleCop is much more difficult than it should be.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Firstly, when installing a Roslyn analyzer and you make a default `.ruleset` file, opening the file in the ruleset editor does not give you the option of disabling any rules from this roslyn analyzer. &lt;/p&gt;&lt;p&gt;For example, I installed StyleCop.Analyzers across all projects using Directory.Build.props. Since this is a global option I would expect the rules to appear in my global ruleset file.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Secondly, when you have an issue in code and you press `Ctrl + .`, the quick actions menu gives you 2 options for suppression:&lt;/p&gt;&lt;p&gt;1. Suppress in code (#pragma warning disable)&lt;/p&gt;&lt;p&gt;2. Suppress in file (GlobalSuppressions.cs)&lt;/p&gt;&lt;p&gt;However it gives no options for my global ruleset file! Every blog and Stack Overflow post I've read suggests using a ruleset file as a means for sharing rules between projects, but there doesnt seem to be any UI integration with it. Why can't I select a rule from code and just disable it globally? Why do I need to manually open the ruleset file in an XML editor and hand-craft the correct runes in text?&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Firstly, the ruleset file editor should know about your installed analyzers and provide a method to disable those rules.&lt;/p&gt;&lt;p&gt;Secondly, on code quick fixes menu, there should be a 3rd option:&lt;/p&gt;&lt;p&gt;3. Suppress in global ruleset file&lt;/p&gt;&lt;p&gt;This would add something like this to your ruleset file&lt;/p&gt;&lt;p&gt; &amp;lt;Rule Id=&amp;quot;SA1600&amp;quot; Action=&amp;quot;None&amp;quot; /&amp;gt; &amp;lt;!-- Elements should be documented --&amp;gt;&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 2/25/2019, 01:28 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37845</IssueID>
    <RepoID>1</RepoID>
    <Title>The Persian text is shown in Summary, vice versa</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/664018/the-persian-text-is-shown-in-summary-vice-versa.html)._

---
The Persian text is shown in Summary, vice versa
The description method is properly displayed before writing method but after that Reverse is displayed
see pic 1 and 2

---
### Original Comments

#### Visual Studio Feedback System on 7/29/2019, 02:22 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 7/29/2019, 10:09 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37844</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix speculation of AsNewClause in Rename Rewriter</Title>
    <Description>Another case of building a SpeculativeModel from an AsNewClause and the tree being speculating on being generated from an EqualsValue node. Causing the nodes being speculated on to not exist in the tree.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/941271</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37843</IssueID>
    <RepoID>1</RepoID>
    <Title>`new SomeStruct(` should show user-defined overloads first in completion</Title>
    <Description>See the scenario below:

```cs
public readonly struct SomeStruct
{
    /// &lt;summary&gt;TODO: insert useful documentation&lt;/summary&gt;
    public SomeStruct(int prop1, string prop2)
    {
        Prop1 = prop1;
        Prop2 = prop2;
    }

    public int Prop1 { get; }
    public string Prop2 { get; }

    static void Test()
    {
        var s = new SomeStruct( // typing...
    }
}
```

### Expected behavior:
A completion list of 2 constructors appears, with the user-defined constructor `SomeStruct(int, string)` coming first

### Actual behavior:
A completion list of 2 constructors appears, with the synthesized parameterless constructor `SomeStruct()` coming first

I believe that a user-defined constructor is more likely to be useful than the synthesized parameterless one and therefore should be shown first. I also believe that I could be totally missing something that makes it so it should continue to work the way it does today :)</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37842</IssueID>
    <RepoID>1</RepoID>
    <Title>F12 on `using` should navigate to object's `Dispose( )` method</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/416821/f12-on-using-should-navigate-to-objects-dispose-me.html)._

---
&lt;p&gt;It would be really helpful if I could F12 or CTRL+CLICK on the `using` keyword to navigate to the disposable resource's `Dispose( )` method. It would definitely be appreciated when the `Dispose( )` method is inherited.&lt;/p&gt;&lt;pre&gt;using(var disposableObject = new DisposableObject())
{ 
//...
}
&lt;/pre&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 12/28/2018, 10:05 PM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37841</IssueID>
    <RepoID>1</RepoID>
    <Title>ref struct specification needs lots of work</Title>
    <Description>It would be nice to have a grammar rule in the spec for declaring a ref struct and actual language rules that ensure that they never appear on the heap (e.g. no using such a type for a field except in a ref struct, no using it as a type argument, etc).

The specification for ref struct types at
https://github.com/dotnet/csharplang/blob/master/proposals/csharp-7.2/span-safety.md
does not say that they cannot be used in async or iterator methods.  But our translation strategy for such types means they cannot be hoisted to a state machine because they cannot be declared as a field. Similarly, they cannot be pending on the evaluation stack when an await occurs because they cannot be spilled.  These language restrictions need to be documented. See https://github.com/dotnet/roslyn/issues/37725</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37840</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a tool which generates a reasonable C# grammar facsimile from our syntactic model.</Title>
    <Description>Ready for review.

This PR updates our Syntax.xml processing tool to generate a reasonable .g4 grammar which can be used by the team (and 3rd parties) to get a reasonable understanding of hte syntax supported by Roslyn without having to wait for all our specs to be updated and without having to actually look at the entire Syntax.xml file.

Note: the generated grammar (https://github.com/dotnet/roslyn/pull/37840/files#diff-2b6f98b9a71d0ace7649354169675100) tries to be clean and clear to serve as a source of understanding.  However, it is not intended to serve as the actual input to other tools that want to actually generate parsers.

For example, the generated parser is more lenient than one might want a grammar to sometimes be.  Indeed, it's as lenient as our Syntax.xml is, and it doesn't attempt to codify the subset of files that would be parsed with error by roslyn, but which could be produced by teh syntax factory.  In general, this isn't much of a problem and the grammar still provides valuable information despite this lack of strictness.  

One area that it is lacking in, which I would be interested in finding ways to improve in the future is the area of precedence.  Currently, for example, you will see rules like:

```
conditional_expression
  : expression '?' expression ':' expression
  ;

binary_expression
  : expression ('+' | '-' | '*' | '/' | '%' | '&lt;&lt;' | '&gt;&gt;' | '||' | '&amp;&amp;' | '|' | '&amp;' | '^' | '==' | '!=' | '&lt;' | '&lt;=' | '&gt;' | '&gt;=' | 'is' | 'as' | '??') expression
  ;
```

It would be really nice to instead generate:

```
conditional_expression
    | null_coalescing_expression '?' expression ':' expression
    ;

null_coalescing_expression
    : conditional_or_expression
    | conditional_or_expression '??' null_coalescing_expression
    ;

... rest of the binary expressions in precedence encoding ...
```

But i think that can come in the future and be out of scope for now.

--

I've also done this work for VB, but would like to do it in a separate PR to keep this PR small and focused.

Relates to https://github.com/dotnet/csharplang/issues/2640</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37839</IssueID>
    <RepoID>1</RepoID>
    <Title>Update patch version in 16.2</Title>
    <Description>
    </Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37838</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix bounds in on header attr #37837</Title>
    <Description>Fix for #37837</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37837</IssueID>
    <RepoID>1</RepoID>
    <Title>Only attribute parameter in un-ended function crashes refactorings</Title>
    <Description>```csharp
using System;
public class Class1
{
    static void foo(result:[Test]$$
    {

    }
}
```

Moving caret to `$$` position crashes bunch of refactorings.

```
System.ArgumentOutOfRangeException : 'end' must not be less than 'start'
Parameter name: end
   at Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(Int32 start,Int32 end)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSyntaxFactsService.IsOnHeader[THoleSyntax](Int32 position,SyntaxNode ownerOfHeader,SyntaxNodeOrToken lastTokenOrNodeOfHeader,ImmutableArray`1 holes)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSyntaxFactsService.IsOnHeader(Int32 position,SyntaxNode ownerOfHeader,SyntaxNodeOrToken lastTokenOrNodeOfHeader)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxFactsService.IsOnParameterHeader(SyntaxNode root,Int32 position,SyntaxNode&amp; parameter)
   at Microsoft.CodeAnalysis.CodeRefactorings.AbstractRefactoringHelpersService`2.&lt;ExtractNodesInHeader&gt;d__7.MoveNext()
   at System.Linq.Enumerable.&lt;OfTypeIterator&gt;d__95`1.MoveNext()
   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()
```
</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37836</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not go back to syntax to determine if a source-property was an explicit implementation.</Title>
    <Description>Fix for https://github.com/dotnet/roslyn/issues/37476

Sightly easier to review with whitespace diffs off.</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>11/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37835</IssueID>
    <RepoID>1</RepoID>
    <Title>Correctly select C# string literal on double-click</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/676379/correctly-select-c-string-literal-on-double-click.html)._

---
When double-clicking the opening quotes of a string literal the entire literal should be selected. It is a common task to need to select an entire string literal in order to copy it, move it or refactor it.

The current behavior is to only select the quotes.

```
var s1 = &amp;quot;abc&amp;quot;;
var s2 = $&amp;quot;abc&amp;quot;;
var s3 = @&amp;quot;abc&amp;quot;;
var s4 = $@&amp;quot;abc&amp;quot;;
var s5 = &amp;quot;\r\nStatus: &amp;quot;;
```

`s5` shows awkward behavior when double-clicking the first backslash or the &amp;quot;n&amp;quot; character. The resulting selection makes no sense.

Working with the selection of strings is a very common task. This should be supported better.

---
### Original Comments
(no comments)</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37834</IssueID>
    <RepoID>1</RepoID>
    <Title>Flaky Test CSharp_FixupSpanDuringResolvableConflict_ReferenceConflict</Title>
    <Description>Error:
```
Assert.Equal() Failure
Expected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[24..27), [66..69), [72..75)]
Actual:   List&lt;Span&gt; [[24..27), [66..69), [66..69), [72..75), [72..75)]
```
https://dev.azure.com/dnceng/public/_build/results?buildId=300070&amp;view=ms.vss-test-web.build-test-results-tab&amp;runId=8529978&amp;resultId=100368&amp;paneView=debug
Failed in https://github.com/dotnet/roslyn/pull/37826, which makes no code changes and could not have caused this.

Looking at the test history from the past 2 weeks, the FixupSpan tests seem to be flaky in general, as almost all the failures are various fixupspan tests.
![image](https://user-images.githubusercontent.com/2371880/62726234-a177e680-b9cb-11e9-8b54-bfb059a4fcf1.png)

@jinujoseph for triage.</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37833</IssueID>
    <RepoID>1</RepoID>
    <Title>Text Editor (C#) More Refined Code Block Preferences</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/676319/text-editor-c-more-refined-code-block-preferences.html)._

---
The current preferences for code blocks on an IF statement can specify &amp;quot;Require braces when multi line&amp;quot;. And when applied, then if only one block in an if/else statement is multi line, then the code suggestion is raised for both blocks. E.G.:

```
if (test) {
    method();
    method();
} else
    method();
```

The formatting will be suggested for the else block because the if block is multi line. I would prefer a setting that yielded the above formatting: only the individual block(s) with multiple lines get the braces.

---
### Original Comments
(no comments)</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37832</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn incorrectly processes `NotNullIfNotNull` attribute which referenes `params` parameter if there are no corresponding arguments</Title>
    <Description>**Version Used**: 

```
Date:   Mon Aug 5 16:00:23 2019 -0700

    Merge pull request #37730 from dotnet/merges/release/dev16.3-preview2-to-master

    Merge release/dev16.3-preview2 to master
```

**Steps to Reproduce**:

Compile the following code:
```cs
using System.Diagnostics.CodeAnalysis;

public class C
{
    [return: NotNullIfNotNull("p")]
    string? M(params string?[]? p) =&gt; p?.ToString();
   
    void Test1()
    {
        var s = M();
        s.ToString();
    }
}
```

**Expected Behavior**:
No warnings. An empty array will be passed to `p`.

**Actual Behavior**:
`warning CS8602: Dereference of a possibly null reference.` is reported for `s.ToString()`</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37831</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up dead code (#36138)</Title>
    <Description>Fix #36138</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37830</IssueID>
    <RepoID>1</RepoID>
    <Title>String.Concat optimization causes exception with MarshalByRefObject field access</Title>
    <Description>**Version Used**: 3.3.0-beta3-19406-05 (a1905991)

**Steps to Reproduce**:

1. Compile this code in a .NET Framework console application:

```csharp
using System;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Remoting.Proxies;

class MyProxy : RealProxy
{
    readonly MarshalByRefObject target;

    public MyProxy(MarshalByRefObject target) : base(target.GetType())
    {
        this.target = target;
    }

    public override IMessage Invoke(IMessage request)
    {
        IMethodCallMessage call = (IMethodCallMessage)request;

        IMethodReturnMessage res = RemotingServices.ExecuteMessage(target, call);

        return res;
    }
}

class R1 : MarshalByRefObject
{
    public int test_field = 5;
}

class Test
{

    static void Main()
    {
        R1 myobj = new R1();

        MyProxy real_proxy = new MyProxy(myobj);

        R1 o = (R1)real_proxy.GetTransparentProxy();

        o.test_field = 2;

        Console.WriteLine("test_field: " + o.test_field);
    }
}

```

2. Run the application
3. It crashes with this exception:

```
Unhandled Exception: System.InvalidOperationException: An attempt was made to calculate the address of a value type field on a remote object. This was likely caused by an attempt to directly get or set the value of a field within this embedded value type. Avoid this and instead provide and use access methods for each field in the object that will be accessed remotely.
   at Test.Main() in C:\Users\Alexander\Source\Repos\ConsoleApp1\Program.cs:line 43
```

We hit this while upgrading the Roslyn we use in Mono from 3.1 to 3.3 and one of our unit tests broke (the repro code is a stripped down version of the test).

This is almost certainly because of the String.Concat optimization from https://github.com/dotnet/roslyn/pull/35006 and might be considered by design, but we still wanted to at least start a conversation. 

Especially since this code doesn't trigger a [CS1690](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1690) warning that would show up if you just did `string s = o.test_field.ToString();`.

/cc @jaredpar @marek-safar </Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37829</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable reference types disabled by &lt;auto-generated&gt; comment</Title>
    <Description>**Version Used**: 3.2.0-beta4-19359-03+15b43b33901c88f68ef43f8314b5a2457716780d (16.2.1)

**Steps to Reproduce**:

test file:
```cs
// &lt;auto-generated&gt;
public class Test { public string? field; }
```
command:
```
csc.exe /nullable:enable /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.6\mscorlib.dll" /out:Test.dll /target:library /langversion:8.0 test.cs
```

**Expected Behavior**:
no warnings

**Actual Behavior**:
```
test.cs(2,34,2,35): warning CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
```

Workarounds:
 - remove &lt;auto-generated&gt; comment
-  explicit #enable nullable

Wasted a lot of time trying to understand why it wasn't working. In the end found out it is due to auto-generated comment we add by T4 template. And no, we need this comment.</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37828</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190816.16
- **Date Produced**: 8/17/2019 12:33 AM
- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19416.16

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)



















</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>17/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37827</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix "fixed" keyword formatting (#37031)</Title>
    <Description>Fix for #37031</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37826</IssueID>
    <RepoID>1</RepoID>
    <Title>Make Syntax.xml choices slightly more explicit.</Title>
    <Description>
    </Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37825</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate method doesn't infer good return type in switch expression.</Title>
    <Description>I had the following code:

```c#
            var result = children.Select(child =&gt; child switch
            {
                Choice c =&gt; ProcessChoice(c),
                Sequence s =&gt; ProcessChildren(s.Children, " ").Parenthesize(),
                _ =&gt; ProcessField((Field)child),
            }).Where(p =&gt; p.Text.Length &gt; 0);
```

`ProcessChild` doesn't exist and i tried to generate it.  Unfortunately, it doesn't look like the type-inference system worked properly and this just generated `object` instead of a return type based on either the other switch-branches, or the expected converted type for the switch expression.</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37824</IssueID>
    <RepoID>1</RepoID>
    <Title>Can't extract expression in switch expression branch.</Title>
    <Description>I had the following code:

```c#
            var result = children.Select(child =&gt; child switch
            {
                Choice c =&gt; ProcessChildren(c.Children, " | ").Parenthesize(),
                Sequence s =&gt; ProcessChildren(s.Children, " ").Parenthesize(),
                _ =&gt; ProcessField((Field)child),
            }).Where(p =&gt; p.Text.Length &gt; 0);
```

I wanted to extract the `ProcessChildren(c.Children, " | ").Parenthesize()` part.

Unfortunately, extract method pulled out the entire switch-expression.  </Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37823</IssueID>
    <RepoID>1</RepoID>
    <Title>Add target framework 'netcoreapp3.0' or replace target framework 'netcoreapp2.1' with 'netcoreapp3.0' when adding is not possible</Title>
    <Description>I've tried to build [dotnet/source-build](https://github.com/dotnet/source-build) which uses [dotnet/roslyn](https://github.com/dotnet/roslyn) on FreeBSD with a bootstrap CLI. Building `SoureBuild.sln` failed because it targets `netcoreapp2.1` on FreeBSD, which is not supported by the bootstrap CLI. Therefore, I've applied the patches mentioned in [dotnet/source-build#1139](https://github.com/dotnet/source-build/issues/1139#issuecomment-518646067) to build it on FreeBSD. To avoid destroying the build on other platforms, I've changed the target framework in the whole project to `netcoreapp3.0`, which is also a future goal, I think.
cc: @wfurt</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37822</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove inaccessible attributes when generating from the navigation bar</Title>
    <Description>When generating code from the navigation bar, we should remove inaccessible attributes, since there's no value in spitting code that won't build.

Fixes https://github.com/dotnet/roslyn/issues/37621 although perhaps not in the ideal way. We may also want to generally drop all nullable attributes when generating VB code, but that's being tracked by https://github.com/dotnet/roslyn/issues/30327 as there's some design questions still out.</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37821</IssueID>
    <RepoID>1</RepoID>
    <Title>Spec: record details of target-typing</Title>
    <Description>1. `default as TClass`: error
2. `$"{default}"`: use `object` as target-type for expressions that don't have a natural type
3. `using (default) ...`: error
4. During return type inference of lambdas, expressions are neither required to be target-typed or to have a natural type.
5. Introduced a new kind of conversion: "default literal" conversion.
6. Object equality is valid when comparing a reference type and the `default` literal.

Relates to PRs https://github.com/dotnet/roslyn/pull/37596 and https://github.com/dotnet/roslyn/pull/38853

FYI @gafter</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37820</IssueID>
    <RepoID>1</RepoID>
    <Title>Update ownership of CompilerGeneratorTools to the compiler team</Title>
    <Description>Otherwise the infrastructure team gets tagged and that's not useful.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37819</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify away nullable annotations in non-nullable contexts</Title>
    <Description>We can use the simplifer to clean up ? in places where it was auto-generated but isn't valid due to nullable context. Please review commit-at-a-time, as commits have additional comments.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37818</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle hoisted temporary variables of the switch expression pattern-matching machinery.</Title>
    <Description>Fixes #37713

Note that before this bug fix we produce bad code for the added tests (we fail to hoist a needed temp or hoist a restricted type).
</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37817</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37816</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37815</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37814</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37813</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.2-vs-deps
git reset --hard upstream/release/dev16.2-vs-deps
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37812</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2-vs-deps to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2-vs-deps into release/dev16.3-preview2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-vs-deps-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-vs-deps-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37811</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into master.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37810</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.3-preview2</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.3-preview2
git reset --hard upstream/release/dev16.3-preview2
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.3-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37809</IssueID>
    <RepoID>1</RepoID>
    <Title>Calling GetNullableContext on a speculative semantic model doesn't inherit from the point of speculation</Title>
    <Description>If you have a speculative semantic model, and then call GetNullableContext on an expression in the speculated expression that doesn't contain any `#nullable` directive, it returns the compilation's default state, even if the point of speculation was otherwise surrounded by a `#nullable` directive. It should be considering first the speculated expression itself, then the point it was speculated in, and then finally fall back to the default compilation state.

If nothing else this means taking an expression and and speculating itself (which should be a no-op) is observable which seems a bit strange.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37808</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid emitting NullableAttribute when unecessary</Title>
    <Description>```
#nullable enable 
public class C
{
    public void Foo(string arg1, string arg2) { }
    public void Bar(string arg1, string arg2) { }
}
```
We shouldn't need to emit both `NullableContext(1)` and `Nullable(0)` for this simple class, but we are today. @cston, do you know if there's a reason we're doing this?</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37807</IssueID>
    <RepoID>1</RepoID>
    <Title>Liveshare Lsp syntax classifications</Title>
    <Description>Create an experiment to run syntactic classification on the remote host to see what the experience is like.

Note that we will be following up with more treatments (textmate) and more services (indentation).</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37806</IssueID>
    <RepoID>1</RepoID>
    <Title>Treat constant when clauses specially in EnC</Title>
    <Description>They are not actually evaluated at runtime.
You probably should not even be able to set a breakpoint on them.
You certainly cannot change them in EnC.
</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37805</IssueID>
    <RepoID>1</RepoID>
    <Title>Permit breakpoints in the switch expression.</Title>
    <Description>In support of https://github.com/dotnet/roslyn/issues/22016 please make the compiler generate the necessary sequence points so that we can set breakpoints in the when clause and expression part of a switch expression.  This would require promoting the temps to long-lived temps.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37804</IssueID>
    <RepoID>1</RepoID>
    <Title>Clear Major/MinorVersion to keep arcade from overwriting our VersionPrefix</Title>
    <Description>
    </Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37803</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable interprocedural dataflow analysis for DisposableFieldsShouldB…</Title>
    <Description>…eDisposedDiagnosticAnalyzer

This should fix the performance issues reported in VS feedback tickets [#672009](https://developercommunity.visualstudio.com/content/problem/672009/live-analysis-eats-up-memory-resulting-in-vs-crash.html) and [#672909](https://developercommunity.visualstudio.com/content/problem/672909/live-code-analysis-extremely-slow-and-vs-2019-cras.html).</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37802</IssueID>
    <RepoID>1</RepoID>
    <Title>Add Containing Type and Containing Member columns to FAR</Title>
    <Description>Fixes #34336 

This PR adds 2 new columns to the FAR window: Containing Type and Containing Member.  
![GroupByContaining](https://user-images.githubusercontent.com/25776963/64829257-7fe8bc80-d580-11e9-8874-d334cab00904.gif)
</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37801</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable debugging/EnC integration tests</Title>
    <Description>The recent failures for BasicEnC integration tests were because of the test image updating to 16.3 preview1. The changes in the vs-deps branches were waiting on this update and we can enable these tests again in these branches.

Closes #35965
Closes #37689</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37800</IssueID>
    <RepoID>1</RepoID>
    <Title>completion unit test for reduce extension method does not check type constraints</Title>
    <Description>Unit tests for https://github.com/dotnet/roslyn/issues/37780
Feel free to either update the PR with a fix or cherry pick the test into a new PR with the fix</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37799</IssueID>
    <RepoID>1</RepoID>
    <Title>c# Keyword crash</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/676928/c-keyword-crash.html)._

---

sealed;     &amp;lt;------- Enter this line and press backback a few times

---
### Original Comments

#### Visual Studio Feedback System on 8/5/2019, 02:34 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### vsq_kuangqi on 8/6/2019, 00:55 AM: 

using Newtonsoft.Json;  &lt;------ Crash when input to using new

---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37798</IssueID>
    <RepoID>1</RepoID>
    <Title>`null` literal should get a `ConvertedType`</Title>
    <Description>Neal fixed some conversion issues around tuple literals and switch expressions. I'm fixing similar issues around `default` literal (PR https://github.com/dotnet/roslyn/pull/37596).

But similar issues remain for the `null` literal.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37797</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch to MIT license</Title>
    <Description>I suggest that Roslyn's license should be changed to a MIT license. This would [alleviate legal problems for developers](https://github.com/dotnet/fsharp/issues/1727) and be consistent with the rest of .NET Core.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37796</IssueID>
    <RepoID>1</RepoID>
    <Title>class diagram show as collection association not working for IList&lt;T&gt; and T is in the same project</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/679870/class-diagram-show-as-collection-association-not-w.html)._

---
I have two classes, one A and one B, B has an A property and A has a list of B, like above

``` C#

public class A
{
 public virtual IList&lt;B&gt; B {get;set;}
}


public class B
{
public virtual A A {get;set;}
}

```

If I go to class diagram ans add those two classes, and press Show as collection association in B property on A class, it returns this error

---------------------------
Microsoft Visual Studio
---------------------------
Cannot show as association because 'System.Collections.Generic.IList&amp;lt;MC.AspNetCore.Workflow.Model.Passo.Passo&amp;gt;' cannot be found.

Try one of the following:

- Ensure that 'System.Collections.Generic.IList&amp;lt;B&amp;gt;' is an existing type.

- If 'System.Collections.Generic.IList&amp;lt;B&amp;gt;' is defined outside your project, ensure you have placed the correct references in Solution Explorer.
---------------------------
OK   Help   
---------------------------

---
### Original Comments

#### Visual Studio Feedback System on 8/7/2019, 04:57 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37795</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support to use editorconfig for set severity command in the Analy…</Title>
    <Description>…zers node context menu

Fixes #37846
1. Renamed "Set Rule Set Severity" command to "Set severity". Also renamed "Info" and "Hidden" sub-menus to "Suggestion" and "Silent" respectively to align with our editorconfig severity terminology.
2. The set severity command handler checks if the project uses no ruleset or the default built-in ruleset, and if so it adds or updates editorconfig to configure severity. Otherwise, we continue using specified ruleset for configuration.
3. Updated the effective ruleset severity computation for the rule nodes under Analyzers node to account for severity settings from editorconfig (analyzer config documents).
4. https://github.com/dotnet/roslyn/pull/37795/commits/c15ca2fcfe26442efdc6d8ef86d31197e6df1e65 hooks up the `Set severity` context menu and functionality from error list. Executing the command creates/updates editorconfig file.

![image](https://user-images.githubusercontent.com/10605811/62746448-87a6c580-ba04-11e9-828c-048b4d06b091.png)

Follow-up work for subsequent PR:
1. Add a new right click menu command to Analyzers node to open active editorconfig for project (and create one if none exists) - similar to the existing "Open Active Rule Set" command for rulesets.
2. Hide the "Open Active Rule Set" command, unless the project already has a non-default non-built in ruleset.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37794</IssueID>
    <RepoID>1</RepoID>
    <Title>C# intellisense suggesting invalid generic methods</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/679722/c-intellisense-suggesting-invalid-generic-methods.html)._

---
Intellisense shows method &amp;quot;DoSomething&amp;quot; as a suggestion for variables that don't match the generic type constraint of the method.

Code below, type `d.` and see &amp;quot;DoSomething&amp;quot; show up in the suggested list:

```
using System;

namespace broke
{
    public class SomeClass
    {
    }

    public static class SomeTypeExtensions
    {
        public static void DoSomething&lt;TType&gt;(this TType type) where TType : SomeClass
        {
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            IDisposable d;
        }
    }
}
```

---
### Original Comments

#### Visual Studio Feedback System on 8/7/2019, 03:23 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 8/7/2019, 10:16 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)

![image](https://user-images.githubusercontent.com/7817401/62643751-850d7880-b8fd-11e9-9020-801a8a4db65e.png)
</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37793</IssueID>
    <RepoID>1</RepoID>
    <Title>Find All References does not find all references</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/679669/find-all-references-does-not-find-all-references.html)._

---
Performing a Find All References skips over overridden implementation and does not report that in the find results. From the image, the NotifyTestRecordsChangedAsync API is used in 4 places from the code lens indicators which is correct but I dont see the find results matching. This is from the VSUniTesting repo - https://devdiv.visualstudio.com/DevDiv/_git/VSUnitTesting.

---
### Original Comments

#### Visual Studio Feedback System on 8/6/2019, 11:28 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)

![image](https://user-images.githubusercontent.com/7817401/62643443-d5380b00-b8fc-11e9-93fc-33902d1c644b.png)
</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37792</IssueID>
    <RepoID>1</RepoID>
    <Title>Caret jumps to end of line when i type semicolon</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/672094/caret-jumps-to-end-of-line-when-i-type-semicolon.html)._

---
In the following code if I attempt to insert a semicolon immediately after the right most curly brace and before the comma the caret will jump to the end of the line and insert it before the EOL semicolon. I know that this is not correct code, but I thought i should bring it to your attention because it's a bug in the text editor.

```
        public static void SubmitWorkOnQueue(Action action, string description)
        {
            workQueue.Enqueue((() =&gt; { action }, description));
        }
```

After typing in the semicolon, the line will be ..

```
workQueue.Enqueue((() =&amp;gt; { action }, description)); ;
```

---
### Original Comments

#### Visual Studio Feedback System on 8/2/2019, 03:12 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37791</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate IOperation visitors and simple implementation classes</Title>
    <Description>This change builds on https://github.com/dotnet/roslyn/pull/37624, adding generation for the OperationVisitor and OperationVisitor&lt;TArg, TResult&gt; classes, and for simple IOperation implementation classes.

Commit 1: Adds generation for the OperationVisitor classes.
Commit 2: Cleans up OperationVisitor generation a bit, and adds generation for simple IOperation implementations. Currently, the only classes being automatically generated are classes whose `Children` property is an empty list, and therefore do not need lazy/non-lazy versions. Followup prs will add generation for these other types.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37790</IssueID>
    <RepoID>1</RepoID>
    <Title>OOM Near Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalyzeProjectAsync</Title>
    <Description>**Version Used**: 
Visual Studio 2017 Enterprise 15.9.14

**Steps to Reproduce**:
When attempting to load one of our larger C# Solutions (~900 C# Projects) we encounter an OOM Exception if we have not built the project first outside of Visual Studio.

We have captured a Dump using procdump with the /ma command ("all process memory") however when attempting to evaluate managed memory in Visual Studio we encounter the "Visual Studio Insufficient memory" dialog:

![image](https://user-images.githubusercontent.com/2592881/62627864-71571780-b8e7-11e9-93c8-4e064de25208.png)

We're happy to share the dump privately, but we'd also like to know how to best debug this to give better error reports going forward.

Here's the stack trace from where the exception is thrown:

```text
 	[Managed to Native Transition]	
&gt;	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception exception, System.Action&lt;System.Exception&gt; handler)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalyzeProjectAsync(Microsoft.CodeAnalysis.Project project, bool semanticsChanged, Microsoft.CodeAnalysis.SolutionCrawler.InvocationReasons reasons, System.Threading.CancellationToken cancellationToken)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	mscorlib.dll!System.RuntimeType.RuntimeTypeCache.ConstructName(ref string name, System.TypeNameFormatFlags formatFlags)	Unknown
 	mscorlib.dll!System.RuntimeType.RuntimeTypeCache.GetName(System.TypeNameKind kind)	Unknown
 	mscorlib.dll!System.RuntimeType.ToString()	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilerAnalyzer(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsBuiltInAnalyzer(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.IsCandidateForFullSolutionAnalysis(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.Project project)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.GetStateSetsForFullSolutionAnalysis.AnonymousMethod__1(Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet s)	Unknown
 	System.Core.dll!System.Linq.Enumerable.CombinePredicates.AnonymousMethod__0(System.__Canon x)	Unknown
 	System.Core.dll!System.Linq.Enumerable.WhereEnumerableIterator&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet&gt;.MoveNext()	Unknown
 	mscorlib.dll!System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet&gt;.List(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet&gt; collection)	Unknown
 	System.Core.dll!System.Linq.Enumerable.ToList&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet&gt;(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet&gt; source)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalyzeProjectAsync(Microsoft.CodeAnalysis.Project project, bool semanticsChanged, Microsoft.CodeAnalysis.SolutionCrawler.InvocationReasons reasons, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;AnalyzeProjectAsync&gt;d__87&gt;(ref Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;AnalyzeProjectAsync&gt;d__87 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalyzeProjectAsync(Microsoft.CodeAnalysis.Project project, bool semanticsChanged, Microsoft.CodeAnalysis.SolutionCrawler.InvocationReasons reasons, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.ProcessProjectAsync.AnonymousMethod__1(Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer a, Microsoft.CodeAnalysis.Project p, System.Threading.CancellationToken c)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync.AnonymousMethod__0(Microsoft.CodeAnalysis.Project v, System.Threading.CancellationToken c)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;object&gt;.Start&lt;Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.(ref Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;&gt;c__DisplayClass32_1&lt;Microsoft.CodeAnalysis.Project&gt;.&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync.AnonymousMethod__0(Microsoft.CodeAnalysis.Project v, System.Threading.CancellationToken c)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.GetOrDefaultAsync&lt;Microsoft.CodeAnalysis.Project, object&gt;(Microsoft.CodeAnalysis.Project value, System.Func&lt;Microsoft.CodeAnalysis.Project, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;object&gt;&gt; funcAsync, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;object&gt;.Start&lt;Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;GetOrDefaultAsync&gt;d__34&lt;Microsoft.CodeAnalysis.Project, object&gt;&gt;(ref Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;GetOrDefaultAsync&gt;d__34&lt;Microsoft.CodeAnalysis.Project, object&gt; stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.GetOrDefaultAsync&lt;Microsoft.CodeAnalysis.Project, object&gt;(Microsoft.CodeAnalysis.Project value, System.Func&lt;Microsoft.CodeAnalysis.Project, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;object&gt;&gt; funcAsync, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync&lt;Microsoft.CodeAnalysis.Project&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt; analyzers, Microsoft.CodeAnalysis.Project value, System.Func&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer, Microsoft.CodeAnalysis.Project, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; runnerAsync, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;RunAnalyzersAsync&gt;d__32&lt;Microsoft.CodeAnalysis.Project&gt;&gt;(ref Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;RunAnalyzersAsync&gt;d__32&lt;Microsoft.CodeAnalysis.Project&gt; stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync&lt;Microsoft.CodeAnalysis.Project&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt; analyzers, Microsoft.CodeAnalysis.Project value, System.Func&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer, Microsoft.CodeAnalysis.Project, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; runnerAsync, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.ProcessProjectAsync(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt; analyzers, Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.WorkItem workItem, System.Threading.CancellationTokenSource source)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.&lt;ProcessProjectAsync&gt;d__11&gt;(ref Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.&lt;ProcessProjectAsync&gt;d__11 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.ProcessProjectAsync(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt; analyzers, Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.WorkItem workItem, System.Threading.CancellationTokenSource source)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.ExecuteAsync()	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.&lt;ExecuteAsync&gt;d__3&gt;(ref Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.&lt;ExecuteAsync&gt;d__3 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.ExecuteAsync()	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor.ProcessAsync()	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.Threading.Tasks.VoidTaskResult&gt;.TrySetResult(System.Threading.Tasks.VoidTaskResult result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.Threading.Tasks.VoidTaskResult&gt;.SetResult(System.Threading.Tasks.VoidTaskResult result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.Threading.Tasks.VoidTaskResult&gt;.SetResult(System.Threading.Tasks.Task&lt;System.Threading.Tasks.VoidTaskResult&gt; completedTask)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.ExecuteAsync()	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.Threading.Tasks.VoidTaskResult&gt;.TrySetResult(System.Threading.Tasks.VoidTaskResult result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.Threading.Tasks.VoidTaskResult&gt;.SetResult(System.Threading.Tasks.VoidTaskResult result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.ProcessProjectAsync(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt; analyzers, Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.WorkItem workItem, System.Threading.CancellationTokenSource source)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.Threading.Tasks.VoidTaskResult&gt;.TrySetResult(System.Threading.Tasks.VoidTaskResult result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.Threading.Tasks.VoidTaskResult&gt;.SetResult(System.Threading.Tasks.VoidTaskResult result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.Threading.Tasks.VoidTaskResult&gt;.SetResult(System.Threading.Tasks.Task&lt;System.Threading.Tasks.VoidTaskResult&gt; completedTask)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync&lt;Microsoft.CodeAnalysis.Project&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt; analyzers, Microsoft.CodeAnalysis.Project value, System.Func&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer, Microsoft.CodeAnalysis.Project, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; runnerAsync, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.__Canon&gt;.TrySetResult(System.__Canon result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;object&gt;.SetResult(object result)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.GetOrDefaultAsync&lt;Microsoft.CodeAnalysis.Project, object&gt;(Microsoft.CodeAnalysis.Project value, System.Func&lt;Microsoft.CodeAnalysis.Project, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;object&gt;&gt; funcAsync, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.CancellationCleanupLogic()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.__Canon&gt;.TrySetCanceled(System.Threading.CancellationToken tokenToRecord, object cancellationException)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;object&gt;.SetException(System.Exception exception)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync.AnonymousMethod__0(Microsoft.CodeAnalysis.Project v, System.Threading.CancellationToken c)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.CancellationCleanupLogic()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.Threading.Tasks.VoidTaskResult&gt;.TrySetCanceled(System.Threading.CancellationToken tokenToRecord, object cancellationException)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.Threading.Tasks.VoidTaskResult&gt;.SetException(System.Exception exception)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception exception)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalyzeProjectAsync(Microsoft.CodeAnalysis.Project project, bool semanticsChanged, Microsoft.CodeAnalysis.SolutionCrawler.InvocationReasons reasons, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.__Canon&gt;.TrySetResult(System.__Canon result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers&gt;.SetResult(Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers result)	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.CompilationManager.CreateAnalyzerDriverAsync(Microsoft.CodeAnalysis.Project project, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer&gt; analyzers, bool includeSuppressedDiagnostics, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.__Canon&gt;.TrySetResult(System.__Canon result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;Microsoft.CodeAnalysis.Compilation&gt;.SetResult(Microsoft.CodeAnalysis.Compilation result)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetCompilationSlowAsync(Microsoft.CodeAnalysis.SolutionState solution, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationInfo&gt;.TrySetResult(Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationInfo result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationInfo&gt;.SetResult(Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationInfo result)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetOrBuildCompilationInfoAsync(Microsoft.CodeAnalysis.SolutionState solution, bool lockGate, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationInfo&gt;.TrySetResult(Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationInfo result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationInfo&gt;.SetResult(Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CompilationInfo result)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.BuildFinalStateFromInProgressStateAsync(Microsoft.CodeAnalysis.SolutionState solution, Microsoft.CodeAnalysis.SolutionState.CompilationTracker.InProgressState state, Microsoft.CodeAnalysis.Compilation inProgressCompilation, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.__Canon&gt;.TrySetResult(System.__Canon result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;Microsoft.CodeAnalysis.Compilation&gt;.SetResult(Microsoft.CodeAnalysis.Compilation result)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.BuildDeclarationCompilationFromInProgressAsync(Microsoft.CodeAnalysis.SolutionState solution, Microsoft.CodeAnalysis.SolutionState.CompilationTracker.InProgressState state, Microsoft.CodeAnalysis.Compilation inProgressCompilation, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.__Canon&gt;.TrySetResult(System.__Canon result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;Microsoft.CodeAnalysis.Compilation&gt;.SetResult(Microsoft.CodeAnalysis.Compilation result)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTranslationAction.AddDocumentAction..cctor.AnonymousMethod__2_0(Microsoft.CodeAnalysis.Compilation o, Microsoft.CodeAnalysis.DocumentState d, System.Threading.CancellationToken c)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishContinuations()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.FinishStageThree()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.__Canon&gt;.TrySetResult(System.__Canon result)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;Microsoft.CodeAnalysis.SyntaxTree&gt;.SetResult(Microsoft.CodeAnalysis.SyntaxTree result)	Unknown
 	System.Threading.Tasks.Extensions.dll!System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder&lt;Microsoft.CodeAnalysis.SyntaxTree&gt;.SetResult(Microsoft.CodeAnalysis.SyntaxTree result)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.DocumentState.GetSyntaxTreeAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()	Unknown
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()	Unknown
 	mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()	Unknown
 	mscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()	Unknown
 	[Native to Managed Transition]	

```

Here's the stack trace from the exception itself:
```text
   at System.RuntimeTypeHandle.ConstructName(RuntimeTypeHandle handle, TypeNameFormatFlags formatFlags, StringHandleOnStack retString)
   at System.RuntimeType.RuntimeTypeCache.ConstructName(String&amp; name, TypeNameFormatFlags formatFlags)
   at System.RuntimeType.RuntimeTypeCache.GetName(TypeNameKind kind)
   at System.RuntimeType.ToString()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilerAnalyzer(DiagnosticAnalyzer analyzer)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsBuiltInAnalyzer(DiagnosticAnalyzer analyzer)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.IsCandidateForFullSolutionAnalysis(DiagnosticAnalyzer analyzer, Project project)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;&gt;c__DisplayClass95_0.&lt;GetStateSetsForFullSolutionAnalysis&gt;b__1(StateSet s)
   at System.Linq.Enumerable.&lt;&gt;c__DisplayClass6_0`1.&lt;CombinePredicates&gt;b__0(TSource x)
   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;AnalyzeProjectAsync&gt;d__87.MoveNext()
```

We've tried throwing it through String-Theory (https://github.com/drewnoakes/string-theory) and got this back:

![image](https://user-images.githubusercontent.com/2592881/62628264-373a4580-b8e8-11e9-9c4d-d36e6b885291.png)

We'll keep digging.

The dump in question is devenv.exe_190806_191556.dmp

Thank you

</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37789</IssueID>
    <RepoID>1</RepoID>
    <Title>InvalidOperationException: Regression after netcore3.0-preview4</Title>
    <Description>Hi !
**Version Used**: 
dotnet core: 3.0.100-preview7-012821
Microsoft (R) Build Engine version 16.3.0-preview-19329-01+d31fdbf01 for .NET Core
**Steps to Reproduce**:

```
using System;
namespace test
{
    class Program
    {
        static void Main(string[] args)
        {
	    var span = new Span&lt;byte&gt;(new byte[2]);
	    span[^1] &lt;&lt;= 1;
	}
    }
}
```

**Expected Behavior**:
Compile correctly (compile fine in preview4).
**Actual Behavior**:
Fail to compile and fail horribly.

&gt; C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : Process terminated. System.InvalidOperationException: Unexpected value 'IndexOrRangePatternIndexerAccess' of type 'Microsoft.CodeAnalysis.CSharp.BoundKind' [C:\Users\nicolas.vandeginste\test\test.csproj]
&gt;[Truncated]
</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37788</IssueID>
    <RepoID>1</RepoID>
    <Title>How to implement logging in custom rules created</Title>
    <Description>I have to implement logging in the custom rules plugin developed for C#  . Default log I have attached here.
I have tried following 2
Console.WriteLine("Initialize method is started");
Trace.WriteLine("Initialize method is started");
But there did not come up on logs/console.

We need to add some more details in log. How to implement ? Can you please help on this .
Thanks in advance.
![image](https://user-images.githubusercontent.com/42217814/62622206-6928c780-b93b-11e9-9b71-cda46617067e.png)
</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37787</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37786</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37785</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37784</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37783</IssueID>
    <RepoID>1</RepoID>
    <Title>Debug assert firing in SpillSequenceSpiller.cs</Title>
    <Description>**Version Used**: 

Debug build of release/dev16.2 branch.

**Steps to Reproduce**:

Due to the issue reported [here](https://github.com/dotnet/roslyn/issues/37456) I had to build and run my first debug version of the Roslyn compiler. Now when building our .net core 2.2 web application project, an assert on row 1090 in [SpillSequenceSpiller.cs](https://github.com/dotnet/roslyn/blob/release/dev16.2/src/Compilers/CSharp/Portable/Lowering/SpillSequenceSpiller.cs#L1090) will fire repeatedly (&gt;10-15 times).

**Expected Behavior**:

I would have expected either

1) That no debug assert would fire during a build
2) Or that some annotation (code comment or debug.assert message) would provide any hint on whether there is something wrong in my code or Roslyn code

**Actual Behavior**:

The assert fires. 

Trying blame on _SpillSequenceSpiller.cs_ does not seem to show any intent to why this assert was introduced. Build will complete successfully, and the application seems to work fine as well. 

Perhaps the assert is unnecessary? It was easy to just ignore it, but since it was the only assert firing during build I'm curious on why.

Ping @tmat seems to have touched the code five years ago, perhaps you know if this assert should fire, remove it or help annotate it?

</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37782</IssueID>
    <RepoID>1</RepoID>
    <Title>Project &gt; Add &gt; New Item &gt; Analyzer (C#) does not install necessary Nuget packages, resulting in compile errors</Title>
    <Description>**Version Used**: 16.2.1

**Steps to Reproduce**:

1. Create class library, .net standard, c#
2. Right-click new library in solution explorer
3. Click New &gt; Add Item &gt; Extensibility &gt; Analyzer
4. Click Analyzer
5. Press Add
6 Build class library

**Expected Behavior**:
No compile errors

**Actual Behavior**:
Compile Errors:
```
2&gt;------ Build started: Project: ClassLibrary1, Configuration: Debug Any CPU ------
2&gt;Analyzer1.cs(3,26,3,35): error CS0234: The type or namespace name 'Immutable' does not exist in the namespace 'System.Collections' (are you missing an assembly reference?)
2&gt;Analyzer1.cs(6,17,6,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)
2&gt;Analyzer1.cs(7,17,7,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)
2&gt;Analyzer1.cs(8,17,8,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)
2&gt;Analyzer1.cs(9,17,9,29): error CS0234: The type or namespace name 'CodeAnalysis' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)
2&gt;Analyzer1.cs(14,30,14,48): error CS0246: The type or namespace name 'DiagnosticAnalyzer' could not be found (are you missing a using directive or an assembly reference?)
2&gt;Analyzer1.cs(23,25,23,61): error CS0246: The type or namespace name 'ImmutableArray&lt;&gt;' could not be found (are you missing a using directive or an assembly reference?)
2&gt;Analyzer1.cs(23,40,23,60): error CS0246: The type or namespace name 'DiagnosticDescriptor' could not be found (are you missing a using directive or an assembly reference?)
2&gt;Analyzer1.cs(13,6,13,24): error CS0246: The type or namespace name 'DiagnosticAnalyzerAttribute' could not be found (are you missing a using directive or an assembly reference?)
2&gt;Analyzer1.cs(13,6,13,24): error CS0246: The type or namespace name 'DiagnosticAnalyzer' could not be found (are you missing a using directive or an assembly reference?)
2&gt;Analyzer1.cs(13,25,13,38): error CS0103: The name 'LanguageNames' does not exist in the current context
2&gt;Analyzer1.cs(25,41,25,56): error CS0246: The type or namespace name 'AnalysisContext' could not be found (are you missing a using directive or an assembly reference?)
2&gt;Analyzer1.cs(23,62,23,82): error CS0115: 'Analyzer1.SupportedDiagnostics': no suitable method found to override
2&gt;Analyzer1.cs(17,34,17,51): error CS0246: The type or namespace name 'LocalizableString' could not be found (are you missing a using directive or an assembly reference?)
2&gt;Analyzer1.cs(18,34,18,51): error CS0246: The type or namespace name 'LocalizableString' could not be found (are you missing a using directive or an assembly reference?)
2&gt;Analyzer1.cs(21,25,21,45): error CS0246: The type or namespace name 'DiagnosticDescriptor' could not be found (are you missing a using directive or an assembly reference?)

```</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37781</IssueID>
    <RepoID>1</RepoID>
    <Title>move to new OperationProgress API.</Title>
    <Description>existing OperationProgress API responded to any design-time build event and we would like to restrict it to the only one that caused by solution load scenario.

for that, platform team added new API and we are moving to that API.

other design-time build events caused by things like "Active Configuration change" or "git branch" switch scenario will be considered in next PLM (partial load mode) iteration.

in current iteration, it is only for solution load. and we are still under experiment on this PLM.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37780</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion does not check for type constraints when is called for extension methods</Title>
    <Description>```cs
    public static class Ext 
    {
        public static void DoSmt&lt;T&gt;(this T thing, string s) where T : class, I
        { 
        }
    }

    public interface I 
    {
        void A();
    }


    public class Class1
    {
        public void M(string s)
        {
            this.$$
        }
    }
```

Start typing at $$

**Expected**
DoSmt does not appear in the completion list

**Actual**
DoSmt appears in the completion list</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37779</IssueID>
    <RepoID>1</RepoID>
    <Title>Warning diagnostics escalated to errors doesn't block emitting the output</Title>
    <Description>**Version Used**: Version 16.3.0 Preview 3.0 [29205.144.master], Roslyn part is 3.3.0-beta2-19401-05+8ed56b826700926009731ca4d3de0a4e4e652969

**Steps to Reproduce**:

1. Create a new .NET Core console application.
2. Update the contents of Main to have:
```c#
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");

            return;

            Console.WriteLine("Hello World!");
        }
```
This is to produce a warning (unreachable code).
3. Add an .editorconfig and add `dotnet_diagnostic.CS0162.severity = error` to it so it applies to the file.
4. Build. In the build output, you see a build error. (Note: it may not reflect in the IDE due to feature flag concerns at the moment.)
5. Build a second time.

**Expected Behavior**: the second build still shows an error.
**Actual Behavior**: the second build just says "succeeded".

This is happening because the first build, despite emitting an error, is still outputting it's output binary. Thus, the second build sees "everything up to date" and simply builds successfully.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37778</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove flighting and have a checkbox opt out of new .editorconfig support</Title>
    <Description>At this point, the flighting controls we have aren't really useful anymore: we want this on for everybody unless the opt out, and that opt-out would be specific to certain users that are running into issues with the new system to keep them unblocked. I'm keeping this a per- machine setting (that doesn't roam) because it's really repo or VS version specific.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37777</IssueID>
    <RepoID>1</RepoID>
    <Title>Initial support for CodeRefactorings ordering.</Title>
    <Description>Work for: #35525</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37776</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37775</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.3-preview2</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview2.

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.3-preview2
git reset --hard upstream/release/dev16.3-preview2
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.3-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37774</IssueID>
    <RepoID>1</RepoID>
    <Title>Adding Skip to CSharpInteractiveCommands.VerifyPreviousAndNextHistory</Title>
    <Description>Pass rate is below 99% - https://github.com/dotnet/roslyn/issues/18779
</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37773</IssueID>
    <RepoID>1</RepoID>
    <Title>Parent type constraints aren't checked on members referencing an inner class declared on a base type</Title>
    <Description>Related to #37320 and #32536

The general scenario shown below will not report constraint violation errors:

```cs
class A
{
    public class B { }
}

class C&lt;T&gt; : A where T : class { }

class Test
{
    // in post-binding checks the type is seen as `A.B` so there's nothing to error about
    C&lt;int&gt;.B f;
}
```

This is true for types used in:
- properties, fields, and events
- method parameters and returns
- base clauses

and likely other places.

However, the impact in practice is minimal because this bug doesn't cause the compiler to actually emit constructed types which violate constraints. In the scenario above, the emitted type of the field `Test.f` will be `A.B`.</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37772</IssueID>
    <RepoID>1</RepoID>
    <Title>Eliminate host dependence for constant folding floating-point to integral conversions.</Title>
    <Description>Fixes #37527
</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37771</IssueID>
    <RepoID>1</RepoID>
    <Title>Update CODEOWNERS</Title>
    <Description>
    </Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37770</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix namespace incremental parsing bug</Title>
    <Description>There was a previous parsing change (#32999) which modified namespace
parsing to allow modifiers and attributes on namespaces, to improve
error recovery.

This PR contained a bug because it didn't move the incremental parsing
check to before parsing attributes and modifiers, which should now
be included in incremental parsing to prevent changes from being dropped

Fixes #37665, #37664, #37663</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37769</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement an analyzer to remove unused references</Title>
    <Description>IDE task which is a part of https://github.com/dotnet/roslyn/issues/6763

The analyzer depends on 
 - the compiler API (https://github.com/dotnet/roslyn/issues/37768) for unused references
 - the file generated by MS Build which will provide dependencies between references and packages and point which 'unused' references are actually transitively used.
 - the project-system API (for the analyzer fixer)

The analyzer should report which references are actually could be removed. The fixer should allow removing them.</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37768</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide a compiler level API to list used (or the opposite unused) references per compilation</Title>
    <Description>Required for https://github.com/dotnet/roslyn/issues/6763</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37767</IssueID>
    <RepoID>1</RepoID>
    <Title>VSSDK update</Title>
    <Description>
    </Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37766</IssueID>
    <RepoID>1</RepoID>
    <Title>Create a UIContext triggered by projects in the VisualStudioWorkspace</Title>
    <Description>Sometimes other features need to light up if there's a C# or VB project present. A good example is some of the test tooling: they don't want to load their components with Roslyn unless somebody is also using the test tooling, but you don't want to accidentally load Roslyn if somebody is using the test tooling only for C++.

Fixes https://devdiv.visualstudio.com/DevDiv/_queries/edit/844761/</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37765</IssueID>
    <RepoID>1</RepoID>
    <Title>`DoesNotReturnIf` attribute should be processed after the containing invocation instead of the argument's evaluation</Title>
    <Description>**Version Used**: 

```
commit baa0dcc0f3d023c37c069c4feb36986e979036cd
Merge: 548db2b498 f889038688
Author: dotnet-automerge-bot &lt;38986832+dotnet-automerge-bot@users.noreply.github.com&gt;
Date:   Mon Aug 5 16:00:23 2019 -0700

    Merge pull request #37730 from dotnet/merges/release/dev16.3-preview2-to-master

    Merge release/dev16.3-preview2 to master
```


**Steps to Reproduce**:

```cs
#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;

class C
{
  static void Main()
  {
    Test(null);
  }

  static void Test(string? s)
  {
    M(s != null, s.ToString());
  }

  static void M([DoesNotReturnIf(false)] bool b, string s) { if (!b) throw new Exception(s); }
}
```

**Expected Behavior**:
Warning for `s.ToString()` as `s` is not known to be not null until the invocation of `M` which happens before all of its arguments' evaluation

**Actual Behavior**:
No warnings. The code crashes at runtime with a `NullReferenceException`</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37764</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip tests requiring legacy EditorConfig</Title>
    <Description>Now that the integration test vm images have been updated with the latest preview build of 16.3 these tests are consistently failing in runs for branches dev16.3-preview1 and earlier.</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37763</IssueID>
    <RepoID>1</RepoID>
    <Title>Debugger doesn't show value of variable, instead says 'x' threw an exception of type 'System.NullReferenceException'</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/679617/debugger-doesnt-show-value-of-variable-instead-say.html)._

---
Environment: Visual Studio 2019 Preview 16.3.0 Preview 1.0, dotnet core 3.0 preview 7
To reproduce: Write the following code in a new Console App (.Net Core):

```C#
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace WatchBug
{
    class Program
    {
        public static async Task Main(string[] args)
        {
            foreach (var module in new List&lt;object&gt; { new object() })
            {
                new List&lt;object&gt;().FirstOrDefault(x =&gt; module != null);
            }

            foreach (var module in new List&lt;object&gt; { new object() })
            {
                module.ToString();
                new List&lt;object&gt;().FirstOrDefault(x =&gt; module != null);
            }
        }
    }
}
```
Put a breakepoint on the line &amp;quot;module. ToString()&amp;quot;.
Hover over the variable module. Observe that it does not show a popup as usual.
Look at the Locals window. Observe that module is listed as an exception: &amp;quot;'module' threw an exception of type 'System.NullReferenceException'&amp;quot;
Add &amp;quot;module&amp;quot; as a watch: Observe that it is listed as an exception again.

Expected behaviour is to be able to see the variable's value with the above methods.
Note that the code runs fine, it is just the debugging that doesn't.

---
### Original Comments

#### Tomas Matousek [MSFT] on 8/6/2019, 11:14 AM: 

We have converted this feedback item from idea to problem. This change was done to better reflect the feedback's nature. It will allow other developers to easily find it and engage on it.

---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37762</IssueID>
    <RepoID>1</RepoID>
    <Title>Treat parameters and local variables as having the default state for their type before they are assigned.</Title>
    <Description>Fixes #36052
</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37761</IssueID>
    <RepoID>1</RepoID>
    <Title>Publish Ngen logs separately</Title>
    <Description>The NGEN log files are published inside our "Build Diagnostic Logs"
container today. That is regularly around 160MB in size of which the
NGEN logs take up ~700K.

Been working on some automation / processing that is specific to NGEN
log files. Downloading the other 159MB is fairly wasteful and slow for
this automation. Publishing the NGEN files separately so I can make this
automation more effecient.</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37760</IssueID>
    <RepoID>1</RepoID>
    <Title>Question: How do I use the "refs" tag?</Title>
    <Description>&gt; Alternatively, projects that use .NET SDK can set PreserveCompilationContext build property to true. Publishing such project will copy reference assemblies for the framework the project targets to a refs sub-directory of the publish directory.

I used `&lt; PreserveCompilationContext &gt; true &lt; / PreserveCompilationContext &gt;` and published the WEB application, but I didn't see the refs subfolder. How do I use the refs tag?

![image](https://user-images.githubusercontent.com/16236903/62554702-2a93fe00-b8a4-11e9-9503-2d368bb83a26.png)
</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37759</IssueID>
    <RepoID>1</RepoID>
    <Title>VS2017 Debugging - Use the legacy C# and VB Expression Evaluators - Deprecated</Title>
    <Description>**Version Used**: VS 2017 15.9.14

**Steps to Reproduce**:
With Use the legacy C# and VB Expression Evaluators, unchecked
1. `Dim strTest as String = &lt;someobjectValue&gt; &amp; vbcrlf &amp; &lt;someotherobjectvalue&gt;`
2. Debug and set breakpoint on next line.
3. In Immediate window type `?strTest`.
**Expected Behavior**: Display `"firstvalue secondvalue"`

**Actual Behavior**: Displays `"firstvalue" &amp; vbcrlf &amp; "secondvalue"`

It is necessary to have the expected behavior for many debugging reasons.
Either have the new version display properly or leave in the legacy option.
</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37758</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable nullable reference types for generated code</Title>
    <Description>Review commit-by-commit is recommended.</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37757</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove module scope from NullableContextAttribute</Title>
    <Description>Following https://github.com/dotnet/roslyn/pull/37610</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37756</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn master | 20190806 | bugfix</Title>
    <Description>Bugfix for https://devdiv.visualstudio.com/DevDiv/_workitems/edit/961405</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37755</IssueID>
    <RepoID>1</RepoID>
    <Title>workspace.TryApplyChanges should respect changes to DefaultNamespace</Title>
    <Description>This is a follow up PR to https://github.com/dotnet/roslyn/pull/35486

In the original PR, the default namespace APIs were made public but the `TryApplyChanges` method of the workspace wouldn't respect it. As a result, we needed to use a [reflection workaround in OmniSharp](https://github.com/OmniSharp/omnisharp-roslyn/blob/master/src/OmniSharp.Roslyn/OmniSharpWorkspace.cs#L478-L492).

This PR ensures that default namespace change is propagated via `TryApplyChanges`.</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37754</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37753</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37752</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37751</IssueID>
    <RepoID>1</RepoID>
    <Title>Change 'Live Code Analysis' text</Title>
    <Description>The 'Live Code Analysis' task center notification is causing confusion as many users believe any errors/delays occurring in Visual Studio are due to this process. This process is actually several low priority background tasks which are often paused when Visual Studio is executing higher priority tasks.

The purpose of the notification was only to acknowledge that Visual Studio often executes a variety of tasks in the background that should not interfere with the user experience, but would be detectable if users are monitoring their Task Manager.

### Current UI
![image](https://user-images.githubusercontent.com/8293542/62505026-d4459300-b7af-11e9-949e-074f9a5b4e06.png)

### Proposed change
* Show when this state is paused and waiting on higher priority tasks
* Change title to be more generic so users don't believe "live analysis" is the culprit by default when experiencing slow UI.
![image](https://user-images.githubusercontent.com/8293542/62504926-7022cf00-b7af-11e9-99d2-164a0d0f0f76.png)
</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37750</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable EnC and PDB tests on Core</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/37137
Fixes https://github.com/dotnet/roslyn/issues/37047
Fixes https://github.com/dotnet/roslyn/issues/33564 for PDBs</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37749</IssueID>
    <RepoID>1</RepoID>
    <Title>Failed assertions when declaring ref variables in Immediate Window</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/62503003-1b7b5600-b7a7-11e9-8943-d17537536d42.png)

**Steps to Reproduce**:
Step into a method:

```C#
    static void Main()
    {
        var a = new int[1];
        ref readonly var x = ref F(a);
    }
```

Type 
```C#
ref readonly var z = ref x;
```

to Immediate Window.

**Expected Behavior**:

No assert.

**Actual Behavior**:

```
---------------------------
Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue
---------------------------
undeclared local Local System.Int32 z

   at Microsoft.CodeAnalysis.CSharp.BoundNode.LocalsScanner.CheckDeclared(LocalSymbol local)
   at Microsoft.CodeAnalysis.CSharp.BoundNode.LocalsScanner.VisitPseudoVariable(BoundPseudoVariable node)
   at Microsoft.CodeAnalysis.CSharp.BoundPseudoVariable.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalkerWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeWalker.VisitAssignmentOperator(BoundAssignmentOperator node)
   at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor)
```</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37748</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix a couple bugs in ChangeNamespaceService </Title>
    <Description>1. Exclude documents we can't change from referenced documents for change namespace #37521 
2. Fix the ChangeNamespaceService so the reference in the form of member access is handled correctly #37891</Description>
    <CreatedDate>06/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37747</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Full-ngen ResultProvider"</Title>
    <Description>Reverts dotnet/roslyn#37186

Now that the debugger test is fixed, partial ngen EE ResultProvider again.

FYI @vatsalyaagrawal </Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37746</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37745</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37744</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37743</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.2-vs-deps
git reset --hard upstream/release/dev16.2-vs-deps
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37742</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37741</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37740</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37738</IssueID>
    <RepoID>1</RepoID>
    <Title>Generated code added at cursor instead of end of file, visual basic</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Version 16.3 Preview 1

**Steps to Reproduce**:
* In Visual Basic winforms projects you can generate the code for control events by selecting them from the right-hand navbar. (Note: I do not believe this option is available in C#)
![image](https://user-images.githubusercontent.com/8293542/62501286-000c4d00-b79f-11e9-8a1d-93eb7642dd9f.png)

**Expected Behavior**:
* Add code where cursor is in the document.

**Actual Behavior**:
* It adds the selected event control to the file at the bottom.
![image](https://user-images.githubusercontent.com/8293542/62501319-321daf00-b79f-11e9-9ec1-fed3a240c7e5.png)

Related undesired behavior when Regions are present:
https://github.com/dotnet/roslyn/issues/37339

**Suggestion**
&gt; holding shift or Alt key while selecting the event from the drop down, or an option</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37739</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.2 to release/dev16.3-preview2</Title>
    <Description>
This is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview2.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.2-to-release/dev16.3-preview2
git reset --hard upstream/release/dev16.3-preview2
git merge upstream/release/dev16.2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.2-to-release/dev16.3-preview2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37737</IssueID>
    <RepoID>1</RepoID>
    <Title>ErrorLogger converts relative paths to incorrect URIs</Title>
    <Description>&gt; Looking at it in the debugger, the problem is that [this code](https://github.com/dotnet/roslyn/blob/548db2b498394680f4384a5c59125037312f1a56/src/Compilers/Core/Portable/CommandLine/ErrorLogger.cs#L143) in Roslyn creates a System.Uri for the path, and URIs have different path normalization rules than paths (intentionally—see dotnet/corefx#31524).

&gt; That transforms the legal path

&gt; `S:\VS\src\vset\Agile\TestPlatform\sdk\ObjectModel\cs\\..\DataCollectorSettings.cs`

&gt; into

&gt; `file:///S:/VS/src/vset/Agile/TestPlatform/sdk/ObjectModel/cs/DataCollectorSettings.cs`

&gt; which is also legal, but doesn’t point to the same place.


</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37736</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37735</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37734</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37733</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37732</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37731</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37730</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into master.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37729</IssueID>
    <RepoID>1</RepoID>
    <Title>Update signing cert used for EE.ResultProvider - 16.4 P1</Title>
    <Description>duplicate of https://github.com/dotnet/roslyn/pull/37683 for the 16.4 preview1 branch</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37728</IssueID>
    <RepoID>1</RepoID>
    <Title>Update signing cert used for EE.ResultProvider - 16.3 P3</Title>
    <Description>duplicate of https://github.com/dotnet/roslyn/pull/37683 for the 16.3 preview3 branch</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37727</IssueID>
    <RepoID>1</RepoID>
    <Title>Update signing cert used for EE.ResultProvider - 16.3 P2</Title>
    <Description>duplicate of https://github.com/dotnet/roslyn/pull/37683 for the 16.3 preview2 branch</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37726</IssueID>
    <RepoID>1</RepoID>
    <Title>Explicitly call BindExpression in GetSpeculativeSymbolInfo, instead o…</Title>
    <Description>…f Bind, to be sure that we don't return type expression info instead of actual expression info.

Fixes https://github.com/dotnet/roslyn/issues/37659.
/cc @ivanbasov.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37725</IssueID>
    <RepoID>1</RepoID>
    <Title>No specification for how to treat restricted types in async/iterator methods</Title>
    <Description>Right now there's no rule on how restricted types (like ref structs) should behave in async and iterator methods. There are clearly illegal cases: pending restricted types over `await` and `yield` is not possible to implement, so it must be illegal. 

However, it's unclear how this should behave if restricted types are *not* pended over a branch. It's possible to allow this behavior, but it becomes an obtuse and delicate balance -- all locals of restricted types are also currently disallowed because it hurts debuggibility, but not all expressions of restricted type are disallowed. While using the result of a restricted method as an expression may be safe, it seems reasonable that a user would assume that they could take the same code and introduce a local variable for the restricted type. This then becomes an error. Moreover, we may be allowing users to veer into very dangerous design territory, as minor refactorings can easily cause the code to pend the expression over an `await`, producing an error.

It seems the compiler already allows expressions of restricted types in async methods, as long as they don't pend the value over an `await`. We should decide if we like this behavior, or if we should treat this as a bug and produce a breaking change for code of this form.</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37724</IssueID>
    <RepoID>1</RepoID>
    <Title>Remote Debugging C# &amp; ability to view windows forms</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/676503/remote-debugging-c-ability-to-view-windows-forms.html)._

---
Ability to run and build applications remotely, even if simply downloading a copy of the built file to the local machnie from the host machine.

Ability to design and view windows forms would help out quite a bit as well.

---
### Original Comments

#### Visual Studio Feedback System on 8/5/2019, 00:35 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37723</IssueID>
    <RepoID>1</RepoID>
    <Title>Update LanguageServices dependencies</Title>
    <Description>Restore Microsoft.CodeAnalysis.InteractiveHost the private assets attribute that was added in https://github.com/dotnet/roslyn/pull/34728

Fixes https://github.com/dotnet/roslyn/issues/37296 &amp; https://github.com/dotnet/roslyn/issues/36056#issuecomment-518046714</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37722</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 15.9 - UriFormatException</Title>
    <Description>Marked Priority 1 in DC 

_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/383068/vs-159-uriformatexception.html)._

---
While typing in the IDE I got the following error: &amp;quot;An exception has been encountered. This may be caused by an extension. You can get more information from the ActivityLog.xml&amp;quot;.

Here is the exception and stacktrace at the bottom of that file:

```
System.UriFormatException: Invalid URI: The Uri string is too long.
   at System.UriHelper.EscapeString(String input, Int32 start, Int32 end, Char[] dest, Int32&amp;amp; destPos, Boolean isUriString, Char force1, Char force2, Char rsvd)
   at System.Uri.EscapeDataString(String stringToEscape)
   at Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.BrowserHelper.CreateBingQueryUri(String errorCode, String title, String language, String projectType)
   at Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.BrowserHelper.CreateBingQueryUri(DiagnosticData diagnostic)
   at Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioBaseDiagnosticListTable.GetHelpLinkToolTipText(DiagnosticData item)
   at Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioBaseDiagnosticListTable.LiveTableDataSource.TableEntriesSnapshot.TryGetValue(Int32 index, String columnName, Object&amp;amp; content)
   at Microsoft.VisualStudio.Shell.TableControl.Implementation.SnapshotTableEntryViewModel.TryGetValue(String columnName, Object&amp;amp; content)
```

---
### Original Comments

#### Fiona Niu[MSFT] on 11/14/2018, 11:12 PM: 

&lt;p&gt;Thank you for your feedback! In order for us to investigate this further, could you please provide repro steps, a more detailed description of the faulty behavior and the actions you were taking when the issue appeared to help us better understand this scenario?&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;We look forward to hearing from you!&lt;/p&gt;

#### Fiona Niu[MSFT] on 11/22/2018, 10:39 PM: 

&lt;p&gt;Thank you for your feedback! Unfortunately, right now we don't have enough information to investigate this issue and find a solution. If this is still an issue for you, please update to our latest version. If you are still able to repro it, please provide us with more info!&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37721</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 16.2.0 - IDE Crash TryConvertSimpleDoubleQuoteString OutOfMemoryException</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/675858/vs-1620-ide-crash-tryconvertsimpledoublequotestrin.html)._

---
Opening the class in the attached project causes the IDE to immediately crash and disappear without any error message. See attached stacktrace from event viewer.

```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Array.Resize[T](T[]&amp;amp; array, Int32 newSize)
   at Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.AbstractVirtualCharService.TryConvertSimpleDoubleQuoteString(SyntaxToken token, String startDelimiter, String endDelimiter, Boolean escapeBraces)
   at Microsoft.CodeAnalysis.CSharp.EmbeddedLanguages.VirtualChars.CSharpVirtualCharService.TryConvertToVirtualCharsWorker(SyntaxToken token)
   at Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.AbstractVirtualCharService.TryConvertToVirtualChars(SyntaxToken token)
   at Microsoft.CodeAnalysis.EmbeddedLanguages.LanguageServices.FallbackEmbeddedLanguage.FallbackSyntaxClassifier.AddClassifications(Workspace workspace, SyntaxToken token, SemanticModel semanticModel, ArrayBuilder`1 result, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.Classifiers.AbstractEmbeddedLanguagesClassifier.AddClassifications(Workspace workspace, SyntaxToken token, SemanticModel semanticModel, ArrayBuilder`1 result, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ClassifyToken(SyntaxToken syntax)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ProcessNodes()
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.Classify(Workspace workspace, SemanticModel semanticModel, TextSpan textSpan, ArrayBuilder`1 list, Func`2 getNodeClassifiers, Func`2 getTokenClassifiers, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.&amp;lt;AddSemanticClassificationsAsync&amp;gt;d__5.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&amp;lt;System.Exception&amp;gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+&amp;lt;AddSemanticClassificationsAsync&amp;gt;d__5.MoveNext()
   at System.Array.Resize[[Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar, Microsoft.CodeAnalysis.Workspaces, Version=3.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.VirtualChar[] ByRef, Int32)
   at Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.AbstractVirtualCharService.TryConvertSimpleDoubleQuoteString(Microsoft.CodeAnalysis.SyntaxToken, System.String, System.String, Boolean)
   at Microsoft.CodeAnalysis.CSharp.EmbeddedLanguages.VirtualChars.CSharpVirtualCharService.TryConvertToVirtualCharsWorker(Microsoft.CodeAnalysis.SyntaxToken)
   at Microsoft.CodeAnalysis.EmbeddedLanguages.VirtualChars.AbstractVirtualCharService.TryConvertToVirtualChars(Microsoft.CodeAnalysis.SyntaxToken)
   at Microsoft.CodeAnalysis.EmbeddedLanguages.LanguageServices.FallbackEmbeddedLanguage+FallbackSyntaxClassifier.AddClassifications(Microsoft.CodeAnalysis.Workspace, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&amp;lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&amp;gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Classification.Classifiers.AbstractEmbeddedLanguagesClassifier.AddClassifications(Microsoft.CodeAnalysis.Workspace, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&amp;lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&amp;gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+Worker.ClassifyToken(Microsoft.CodeAnalysis.SyntaxToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+Worker.ProcessNodes()
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+Worker.Classify(Microsoft.CodeAnalysis.Workspace, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.Text.TextSpan, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&amp;lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&amp;gt;, System.Func`2&amp;lt;Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray`1&amp;lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&amp;gt;&amp;gt;, System.Func`2&amp;lt;Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Immutable.ImmutableArray`1&amp;lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&amp;gt;&amp;gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+&amp;lt;AddSemanticClassificationsAsync&amp;gt;d__5.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+&amp;lt;AddSemanticClassificationsAsync&amp;gt;d__5, Microsoft.CodeAnalysis.Workspaces, Version=3.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&amp;lt;AddSemanticClassificationsAsync&amp;gt;d__5 ByRef)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Func`2&amp;lt;Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray`1&amp;lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&amp;gt;&amp;gt;, System.Func`2&amp;lt;Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Immutable.ImmutableArray`1&amp;lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&amp;gt;&amp;gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&amp;lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&amp;gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService+&amp;lt;AddSemanticClassificationsAsync&amp;gt;d__2.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Classification.AbstractClassificationService+&amp;lt;AddSemanticClassificationsAsync&amp;gt;d__2, Microsoft.CodeAnalysis.Workspaces, Version=3.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&amp;lt;AddSemanticClassificationsAsync&amp;gt;d__2 ByRef)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Collections.Generic.List`1&amp;lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&amp;gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&amp;lt;ClassifySpansAsync&amp;gt;d__2.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&amp;lt;ClassifySpansAsync&amp;gt;d__2, Microsoft.CodeAnalysis.EditorFeatures, Version=3.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&amp;lt;ClassifySpansAsync&amp;gt;d__2 ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ClassifySpansAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&amp;lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&amp;gt;, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Classification.IClassificationService, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&amp;lt;ProduceTagsAsync&amp;gt;d__0.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&amp;lt;ProduceTagsAsync&amp;gt;d__0, Microsoft.CodeAnalysis.EditorFeatures, Version=3.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&amp;lt;ProduceTagsAsync&amp;gt;d__0 ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&amp;lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&amp;gt;, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Classification.IClassificationService, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationViewTaggerProvider.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&amp;lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&amp;gt;)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&amp;lt;RecomputeTagsAsync&amp;gt;d__70[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&amp;lt;RecomputeTagsAsync&amp;gt;d__70[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=3.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&amp;lt;RecomputeTagsAsync&amp;gt;d__70&amp;lt;System.__Canon&amp;gt; ByRef)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].RecomputeTagsAsync(System.Object, System.Nullable`1&amp;lt;Microsoft.VisualStudio.Text.SnapshotPoint&amp;gt;, System.Nullable`1&amp;lt;Microsoft.CodeAnalysis.Text.TextChangeRange&amp;gt;, System.Collections.Immutable.ImmutableArray`1&amp;lt;Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan&amp;gt;, System.Collections.Immutable.ImmutableDictionary`2&amp;lt;Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree`1&amp;lt;System.__Canon&amp;gt;&amp;gt;, Boolean, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&amp;lt;&amp;gt;c__DisplayClass63_0[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&amp;lt;RecomputeTagsForeground&amp;gt;b__0(System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Shared.Threading.AsynchronousSerialWorkQueue+&amp;lt;&amp;gt;c__DisplayClass12_0.&amp;lt;EnqueueBackgroundTask&amp;gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```

```
Faulting application name: devenv.exe, version: 16.2.29123.88, time stamp: 0x5d37741c
Faulting module name: unknown, version: 0.0.0.0, time stamp: 0x00000000
Exception code: 0x80131623
Fault offset: 0x1aad319a
Faulting process id: 0x2a68
Faulting application start time: 0x01d5495d90722536
Faulting application path: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\devenv.exe
Faulting module path: unknown
Report Id: 72ea056c-61cd-4ce7-9500-d2a0311c53e5
Faulting package full name: 
Faulting package-relative application ID: 
```

---
### Original Comments

#### Visual Studio Feedback System on 8/5/2019, 00:51 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 8/5/2019, 10:00 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37720</IssueID>
    <RepoID>1</RepoID>
    <Title>XML documentation feature: Embeding &lt;see href=""/&gt; link into VS doc hint window</Title>
    <Description>I wish to have the ability to embed a link in (what others are telling me to call) the "parameter info box" that shows you the summary of the XML documentation when you hover over a Type or type member. I want to embed a link to the official documentation of a class or member that's clickable from the hint window.

An example:
```cs
/// &lt;summary&gt;
/// My Function. &lt;see href="http://www.example.com/path/to/documentation.xml"&gt;See this documentation&lt;/see&gt;
/// &lt;/summary&gt;
public static void MyFunction()
{
}
```

If this isn't possible, please explain why. ^^ It would be awesome to have this.
Edit: This is an IDE feature request btw</Description>
    <CreatedDate>05/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37719</IssueID>
    <RepoID>1</RepoID>
    <Title>different forms of double.MaxValue/MinValue might be recognised as out of range</Title>
    <Description>**Version Used**: 
Using Microsoft.Scripting.CSharp.Scripting package, version 3.3.0-beta2-19376-02(fc001df5)
**Steps to Reproduce**:

1. Copy the values returned from double.MaxValue/MinValue.ToString (which by default is "R"), which is printed as (+/-)1.79769313486232E+308 on .NET Core 3.0 P7.
2. Try to use the value as a floating point literal in codes

**Expected Behavior**:
Should compile fine.

**Actual Behavior**:
Fails to compile with the error CS0594 "Floating-point constant is outside the range of type 'double'".

The [System.Double source](https://github.com/dotnet/coreclr/blob/86d56cee7311dcf07e4ec3149c364da40c25ba87/src/System.Private.CoreLib/shared/System/Double.cs#L35) uses (+/-)1.7976931348623157E+308 instead. Feeding the value from ToString to Parse straight away (`double.Parse(double.MaxValue.ToString())`) seems to work fine without exceptions, which makes me believe the CoreLib should be IEEE compliant.... but @tannergooding probably knows better there. :smile: </Description>
    <CreatedDate>04/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37718</IssueID>
    <RepoID>1</RepoID>
    <Title>UseExpressionBody cleanup</Title>
    <Description>I have this in another branch that I'm still working on, but I thought a separate PR would make reviewing easier.

See commit messages.

/cc @CyrusNajmabadi who wrote the original code</Description>
    <CreatedDate>04/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37717</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve diagnostics when the project is not restored yet</Title>
    <Description>When a solution is opened in VS that is not restored yet, there can be hundreds of errors on missing built-in types. This can also happen when a sdk is missing so a mere restore won't resolve errors either. 

In this state, navigation on user-code does work but there will be so many IDE squiggles that make it hard to even browse/read the code. Could we improve experience by not emitting all the errors when a design-time build is not possible at the moment?</Description>
    <CreatedDate>04/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37716</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/08/2019</CreatedDate>
    <ClosedDate>04/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37715</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37714</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/08/2019</CreatedDate>
    <ClosedDate>04/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37713</IssueID>
    <RepoID>1</RepoID>
    <Title>Test await in switch arm when state machine has a live ref struct value</Title>
    <Description>We should test both the switch statement and the switch expression behavior when there is an await in the when expression, and the switch's state machine contains a value of a ref struct type that is still alive after the when (e.g. when it is false).  Such a temp would have to be spilled but cannot be spilled, so a diagnostic must be given.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37712</IssueID>
    <RepoID>1</RepoID>
    <Title>Test async pattern returning ref struct</Title>
    <Description>We should test the use of `await` on an API that is shaped appropriately for the await pattern, but for which the result type is a ref struct.  That should cause a compile-time error, as ref struct values cannot be spilled.  However it is not clear where in the compiler such a diagnostic would be produced.  I conjecture compiling a program such as this would today produce code that crashes at runtime.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37711</IssueID>
    <RepoID>1</RepoID>
    <Title>Permit stackalloc to be used in an async method as long as it need not be spilled.</Title>
    <Description>Fixes #37461</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37710</IssueID>
    <RepoID>1</RepoID>
    <Title>'Add missing cases' for type hierarchy</Title>
    <Description>If the expression type is an interface or a non-sealed class (or a generic type parameter constrained to a one or more of these), it's useful to generate cases for all derived or implementing types currently available to the project and to warn or suggest generating them if any are missing.

Cases should be generated for derived classes and interfaces even if they themselves have types that inherit or implement them, just in case future types are added to the hierarchy. This is symmetrical with having a default case at the top level.

I'm not sure what should happen with types with free generic parameters, but my preference would be to generate the invalid code `case ImplementingType&lt;&gt; _:` so that the user doesn't overlook the possibility.

The classes `System.Object`, `System.Enum`, `System.ValueType`, `System.Delegate`, and `System.MulticastDelegate` should be excluded from this.
Maybe other types such as `System.Attribute` and `System.IComparable` should be excluded, but on what basis? Maybe you're writing a method that handles `IEnumerable&lt;T&gt;` things and want to hit several of the top possibilities like `T[]`, `IReadOnlyCollection&lt;T&gt;`, `ICollection&lt;T&gt;`, etc. Deleting 90% of the generated cases is still probably a good experience compared to having to do all the typing for the 10% yourself. I'm not sure where the line is.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37709</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 on ref parameter</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

I get IDE0059 on following code snippet:

    public void DoSomething(ref bool p)
    {
        if (p)
        {
            p = false; // &lt;--- IDE0059
            throw new ArgumentException(string.Empty);
        }

        DoSomethingExtracted(0, ref p);
    }

**Expected Behavior**:

IDE0059 should not be triggered because it is modifying a ref parameter.

**Actual Behavior**:

The analitic recognizes that the ref parameter is not being used in the current method after its value its set. However, it appears to ignore the fact that it is a ref parameter, and thus this change is visible to the caller. Apparently the fact that I wrote an exception instead of returning causes this (changing `throw new ArgumentException(string.Empty);` to `return;` make it go away).</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37708</IssueID>
    <RepoID>1</RepoID>
    <Title>Support Nullable reference syntax in 7.X</Title>
    <Description>I would love to switch on and use the new nullable reference stuff in 8.0. However 8.0 is not production yet and it will be a while before we switch to it even when it is. So I was wondering if it possible to at least accept and ignore the syntax in a 7.X compiler. That way  I can add all the "?" annotations to the code and get the checking benefit right now when using 8.0 but quietly ignore them when compiling production.
So this is not a request for a full back port just a switch to accept and completely ignore the syntax which I assume is simpler.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37707</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:567feadf-e495-4ebb-cee4-08d67668456c)
## From https://github.com/dotnet/arcade
- **Build**: 20190807.9
- **Date Produced**: 8/7/2019 11:00 PM
- **Commit**: 77597ba7f484bef24368d966b7fe91fe38ec973b
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19407.9

[marker]: &lt;&gt; (End:567feadf-e495-4ebb-cee4-08d67668456c)











</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37706</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37705</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37704</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>04/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37703</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot change compiler language version</Title>
    <Description>**Version Used**: 16.3 Preview 1.0

**Steps to Reproduce**:
Project properties &gt; Build &gt; Advanced...

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/10546952/62410308-e242ba80-b5db-11e9-86e5-725184a032e4.png)

Ironically the link does not answer the question. Why can I no longer specify the language version? There has always been new language features that required various classes but they could have been provided in the project if needed.

How does this work with flavoured projects?</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37702</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37701</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37700</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37699</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37698</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37697</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37696</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 into master</Title>
    <Description>This config was missing from the automerge</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37695</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37694</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps
git reset --hard upstream/release/dev16.3-preview2-vs-deps
git merge upstream/release/dev16.3-preview2
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37693</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.
(created from a manual run of the PR generation tool)

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37692</IssueID>
    <RepoID>1</RepoID>
    <Title>compiler assert in refactoring.</Title>
    <Description>I tried to inline a local variable into a `..` range.  i.e.:

```c#
            var start = SeparatedSyntaxList.Length + 1;
            var end = fieldType.Length - 1;
            var underlyingType = fieldType[start..end];
```

I was trying to inline `start` and `end` into the range.

This caused the following crash:

```
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.MessageIDExtensions.CheckFeatureAvailability(MessageID feature,DiagnosticBag diagnostics,Location errorLocation)
   at Microsoft.CodeAnalysis.CSharp.Binder.TryBindIndexOrRangeIndexer(SyntaxNode syntax,BoundExpression receiverOpt,ArrayBuilder`1 arguments,DiagnosticBag diagnostics,BoundIndexOrRangePatternIndexerAccess&amp; patternIndexerAccess)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIndexerOrIndexedPropertyAccess(SyntaxNode syntax,BoundExpression receiverOpt,ArrayBuilder`1 propertyGroup,AnalyzedArguments analyzedArguments,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIndexerAccess(ExpressionSyntax node,BoundExpression expr,AnalyzedArguments analyzedArguments,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindElementAccessCore(ExpressionSyntax node,BoundExpression expr,AnalyzedArguments arguments,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindElementOrIndexerAccess(ExpressionSyntax node,BoundExpression expr,AnalyzedArguments analyzedArguments,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindElementAccess(ExpressionSyntax node,BoundExpression receiver,BracketedArgumentListSyntax argumentList,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindElementAccess(ElementAccessExpressionSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInferredVariableInitializer(DiagnosticBag diagnostics,ExpressionSyntax initializer,BindValueKind valueKind,RefKind refKind,CSharpSyntaxNode errorSyntax)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol,LocalDeclarationKind kind,Boolean isVar,VariableDeclaratorSyntax declarator,TypeSyntax typeSyntax,TypeWithAnnotations declTypeOpt,AliasSymbol aliasOpt,DiagnosticBag diagnostics,Boolean includeBoundType,CSharpSyntaxNode associatedSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindLocalDeclarationStatement(LocalDeclarationStatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder,CSharpSyntaxNode node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder,CSharpSyntaxNode node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node,CSharpSyntaxNode&amp; bindableNode,BoundNode&amp; lowestBoundNode,BoundNode&amp; highestBoundNode,BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(ExpressionSyntax expression,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetTypeInfo(SemanticModel semanticModel,ExpressionSyntax expression,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.CastExpressionSyntaxExtensions.IsUnnecessaryCast(CastExpressionSyntax cast,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CastIfPossible(ExpressionSyntax expression,ITypeSymbol targetType,Int32 position,SemanticModel semanticModel)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.TryCastTo(ITypeSymbol targetType,ExpressionSyntax expression,ExpressionSyntax newExpression,ExpressionSyntax&amp; newExpressionWithCast)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.VisitArgument(ArgumentSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBracketedArgumentList(BracketedArgumentListSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitElementAccessExpression(ElementAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expand(SyntaxNode node,SemanticModel semanticModel,SyntaxAnnotation annotationForReplacedAliasIdentifier,Func`2 expandInsideNode,Boolean expandParameter,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Simplification.Simplifier.Expand[TNode](TNode node,SemanticModel semanticModel,Workspace workspace,Func`2 expandInsideNode,Boolean expandParameter,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CodeRefactorings.InlineTemporary.InlineTemporaryCodeRefactoringProvider.&lt;&gt;c__DisplayClass9_0.&lt;InlineTemporaryAsync&gt;b__5(SyntaxNode o,SyntaxNode n)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitEqualsValueClause(EqualsValueClauseSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitVariableDeclarator(VariableDeclaratorSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitVariableDeclaration(VariableDeclarationSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(BlockSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMethodDeclaration(MethodDeclarationSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassDeclaration(ClassDeclarationSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replace[TNode](SyntaxNode root,IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceCore[TNode](IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)
   at Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNodes[TRoot,TNode](TRoot root,IEnumerable`1 nodes,Func`3 computeReplacementNode)
   at async Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.ReplaceNodesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CSharp.CodeRefactorings.InlineTemporary.InlineTemporaryCodeRefactoringProvider.InlineTemporaryAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37691</IssueID>
    <RepoID>1</RepoID>
    <Title>UniqueItem is not triggered when completion is initiated by backspace</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/37231</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37690</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip BasicEditAndContinue integration tests that are failing</Title>
    <Description>Step one of https://github.com/dotnet/roslyn/issues/37689</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37689</IssueID>
    <RepoID>1</RepoID>
    <Title>BasicEditAndContinue Integration Tests Failing</Title>
    <Description>A recent update to the preview version of Visual Studio that is used for integration tests has caused Basic EnC tests to consistently fail.

- [x] Make integration tests not required for PRs
- [x] Add skips for these tests and flow through
- [x] Make integration tests required for PRs
- [ ] Unskip these tests when a fix is in place.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37688</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37687</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37686</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Activate editor after pausing the debugger"</Title>
    <Description>This reverts commit cb4b485aa7f3ef92cec018a0efa74cee646a44d8.</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37685</IssueID>
    <RepoID>1</RepoID>
    <Title>Ambiguity in calling base class method.</Title>
    <Description>**Version Used**: 
I am using VS community 2019 16.1.4...

**Steps to Reproduce**:
1) First, Write two classes one inherits from the other. Let's call them 'Class' and 'BaseClass' for example.

2) Second, Define two methods with the same name one in each class. In the 'BaseClass' the method should take a more generic parameter type than the one in 'Class'. For instance, in 'BaseClass' we define void Method(int instance), and in 'Class' we define void Method(object instance).

3) Finally, create another class that inherits from 'Class'. Now, try and call the one with the specific parameter type from the newly created class. And here we encounter the issue.The call is not possible unless the method with the more specific parameter is redefined in 'Class'.
Here is an example that reproduces the problem:

```
    public class TestClass : Class 
    {
        public void CallTest(int instance)
        {
            // Calls Class.Method(object) instead of BaseClass.Method(int)
            base.Method(instance);
        }
    }

    public class Class : BaseClass
    {
        public void Method(object instance)
        {
        }
    }

    public class BaseClass
    {
        public void Method(int instance)
        {
        }
    }

```
**Expected Behavior**:
Normally this call base.Method(instance) is supposed to invoke the most specific method. Meaning it should call BaseClass.Method(int) but it doesn't. 

**Actual Behavior**:
Instead it calls the more generic version which takes an object and there is no possible way to call the one that takes an int.</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37684</IssueID>
    <RepoID>1</RepoID>
    <Title>Make it clear in Syntax.xml when fields are exclusive of each other.</Title>
    <Description>This is a followup to https://github.com/dotnet/roslyn/pull/37674.  It will be easier to review once that goes in.

This is my **final** PR related to tweaking syntax.xml.    I'm at a happy point now.  

This PR adds some helper annotation nodes into the tree to make the relationship between different field-nodes in a type clearer.  For example, instead of just saying `a lambda has an optional block, or an optional expression`, the syntax now says `a lambda has either a block or an expression`.  This helps more clearly indicate that you really don't expect legal syntax to have neither of these, nor do you expect legal syntax to have both of them.

This is useful for some downstream tooling.  Specifically, it means we can generate better g4 productions like:

```g4
lambda_expression
  : parenthesized_lambda_expression
  | simple_lambda_expression
  ;

parenthesized_lambda_expression
  : 'async'? parameter_list '=&gt;' (block | expression)
  ;

simple_lambda_expression
  : 'async'? parameter '=&gt;' (block | expression)
  ;
```

instead of

```g4
lambda_expression
  : parenthesized_lambda_expression
  | simple_lambda_expression
  ;

parenthesized_lambda_expression
  : 'async'? parameter_list '=&gt;' block? expression?
  ;

simple_lambda_expression
  : 'async'? parameter '=&gt;' block? expression?
  ;
```</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37683</IssueID>
    <RepoID>1</RepoID>
    <Title>Update signing cert used for EE.ResultProvider</Title>
    <Description>Move off SHA1 cert</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37682</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow user to set opacity for fading in text editor</Title>
    <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/idea/659234/allow-user-to-set-opacity-for-fading-in-text-edito.html)._

---
When fading unused usings and private methods, allow the user to customise level of opacity used to fade the text to improve readability.

---
### Original Comments

#### Fiona Niu[MSFT] on 7/24/2019, 00:48 AM: 

We have converted this feedback item from problem to idea. This change was done to better reflect the feedback's nature. It will allow other developers to easily find it and engage on it.
#### Jane Wu [MSFT] on 7/25/2019, 02:16 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37681</IssueID>
    <RepoID>1</RepoID>
    <Title>Running analysis on CSharpScript compilation has unexpected warnings regarding unused fields</Title>
    <Description>**Background**
We have an old application which used CodeDom to execute user scripts. We're migrating that application to Roslyn. It would be nice to include many of our code review rules as Roslyn Analyzers, however, it looks like semantic analysis on scripts isn't quite what we'd expect.

**Version Used**: 
Microsoft.CodeAnalysis.CSharp.Scripting 3.2.0
Microsoft.CodeAnalysis.FxCopAnalyzers 2.9.4

**Steps to Reproduce**:
1. Create a CSharpScript from the following:
```csharp
double x = 23.0;
var y = new[]{ 1, 2, 3 };
var b = Sin(x);
Write(""stdout"", x);
WriteLine(""stdout"", b);
Write(""stdout"", y);
```
2. Get the compilation from the script and run FxCopAnalyzers on it.
3. Review the diagnostics.

[This gist has the full code used.](https://gist.github.com/watfordgnf/618846160f2eafede2bf6fcebc3a98af)

**Expected Behavior**:
`y` and `b` are not listed as unused fields. They are used in the script.

**Actual Behavior**:
~~Any variable declared `var`~~ ~~Variables only used by the global type are always unused:~~
Variables passed to methods that are `void`-returning or whose results are ignored are marked as unused. The same code in a non-script does not have the same warnings.
```
(2,5): warning CA1823: Unused field 'y'.
(3,5): warning CA1823: Unused field 'b'.
```

Other behavior seen when I include StyleCop.Analyzers (this makes sense):
```
(1,8): warning SA1400: Element 'x' should declare an access modifier
(2,5): warning SA1400: Element 'y' should declare an access modifier
(3,5): warning SA1400: Element 'b' should declare an access modifier
```</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37680</IssueID>
    <RepoID>1</RepoID>
    <Title>Update syntax document to better indicate when we expect a list to have at least one element in it.</Title>
    <Description>Tagging @gafter .  This helps with a piece of work i'm trying to contribute to roslyn where we can generate an g4 grammar like so from our syntax model: https://gist.github.com/CyrusNajmabadi/412c3209d1ce97236420218498e7c8d4

While not strictly necessary, this helps me generate cleaner and clearer code since we can replace stuff like:

```g4
attribute_list
  : '[' attribute_target_specifier? (attribute (',' attribute)*)? ']'
  ;
```

With the nicer, simpler and clearer:

```g4
attribute_list
  : '[' attribute_target_specifier? attribute (',' attribute)* ']'
```

Similarly, `AllowTrailingSeparator` means we can generate:

```
initializer_expression
  : '{' (expression (',' expression)* ','?)? '}'
  ;
```

Which is accurate, unlike:

```
initializer_expression
  : '{' (expression (',' expression)*)? '}'
  ;
```

Which is not (since it implies that `var v = { 1, 2, 3, }` is not legal.  We could a trailing optional comma in all productions.  But that wouldn't be very nice or representative of what the language actually thinks.  </Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37679</IssueID>
    <RepoID>1</RepoID>
    <Title>Delete some dead code in analyzer driver</Title>
    <Description>`SIMULATED_EVENT_QUEUE` was an experimental approach for populating compilation event queue for IDE open file analysis. It is no longer been used or experimented.

Fixes #37434</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37678</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0063 deletes code comments when simplifying using statement</Title>
    <Description>**Version Used**: VS16.3.0 Preview 1.0

**Steps to Reproduce**:

0. .NET Core 3.0 Preview 7 console project
1. Have this C# code:
```c#
            using (var graphQLClient = new GraphQLClient(ServerUrl))
            {
                var allMoviesResponse = await graphQLClient.PostQueryAsync(@"{ movies { title } }");
                Console.WriteLine(allMoviesResponse.Data.movies[0].title);

                //            var response = await graphQLClient.PostAsync(new GraphQLRequest
                //            {
                //                Query = @"{
                //    movies
                //    {
                //        title
                //    }
                //}"
                //            });
            }
```
2. The `using` statement will get a triple-dot thingy, with a suggestion to simplify the `using` statement:
![image](https://user-images.githubusercontent.com/202643/62389211-15217b80-b514-11e9-8fd1-ff96b036b5e6.png)
3. If you accept the suggestion, it deletes the code comments in the block:
```c#
            using var graphQLClient = new GraphQLClient(ServerUrl);
            var allMoviesResponse = await graphQLClient.PostQueryAsync(@"{ movies { title } }");
            Console.WriteLine(allMoviesResponse.Data.movies[0].title);
```

**Expected Behavior**:
The code fix shouldn't remove code comments because it has nothing to do with the fix at all.

**Actual Behavior**:
The code fix removes code comments.
</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37677</IssueID>
    <RepoID>1</RepoID>
    <Title>UnsupportedSignatureContent thrown while reading ref returning method symbols in VB</Title>
    <Description>The symbol is 

`Function System.Collections.Immutable.ImmutableArray(Of T).ItemRef(index As ?) As ? | Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.PEMethodSymbol`

The exception is handled but I would expect the compiler to not throw first chance exceptions like this.

``` 	
Microsoft.CodeAnalysis.UnsupportedSignatureContent: 'Exception of type 'Microsoft.CodeAnalysis.UnsupportedSignatureContent' was thrown.'

Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.MetadataDecoder&lt;Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.PEModuleSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.FieldSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbol&gt;.DecodeModifiersOrThrow(ref System.Reflection.Metadata.BlobReader signatureReader, Microsoft.CodeAnalysis.MetadataDecoder&lt;Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.PEModuleSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.FieldSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbol&gt;.AllowedRequiredModifierType allowedRequiredModifierType, out System.Reflection.Metadata.SignatureTypeCode typeCode, out bool requiredModifierFound) Line 727	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.MetadataDecoder&lt;Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.PEModuleSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.FieldSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbol&gt;.DecodeParameterOrThrow(ref System.Reflection.Metadata.BlobReader signatureReader, ref Microsoft.CodeAnalysis.ParamInfo&lt;Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol&gt; info) Line 1167	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.MetadataDecoder&lt;Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.PEModuleSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.FieldSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbol&gt;.DecodeSignatureParametersOrThrow(ref System.Reflection.Metadata.BlobReader signatureReader, System.Reflection.Metadata.SignatureHeader signatureHeader, out int typeParameterCount) Line 1858	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.MetadataDecoder&lt;Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.PEModuleSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.FieldSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbol&gt;.GetSignatureForMethod(System.Reflection.Metadata.MethodDefinitionHandle methodDef, out System.Reflection.Metadata.SignatureHeader signatureHeader, out System.BadImageFormatException metadataException, bool setParamHandles) Line 1200	C#
&gt;	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.PEMethodSymbol.LoadSignature() Line 932	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.PEMethodSymbol.get_Parameters() Line 859	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SubstitutedMethodSymbol.SubstituteParameters() Line 31	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SubstitutedNamedType.SubstituteTypeParametersForMemberMethod(Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol memberMethod) Line 306	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SubstitutedNamedType.&lt;closure&gt;.&lt;lambda83-1&gt;(Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol m) Line 353	Basic
 	System.Core.dll!System.Linq.Enumerable.ToDictionary&lt;Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.SubstitutedMethodSymbol&gt;(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol&gt; source, System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol&gt; keySelector, System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol, Microsoft.CodeAnalysis.VisualBasic.Symbols.SubstitutedMethodSymbol&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;Microsoft.CodeAnalysis.VisualBasic.Symbols.MethodSymbol&gt; comparer) Line 969	C#
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SubstitutedNamedType.GetMembers_Worker(System.Collections.Immutable.ImmutableArray(Of Microsoft.CodeAnalysis.VisualBasic.Symbol) members) Line 389	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SubstitutedNamedType.GetMembers() Line 339	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.CheckStructureCircularity(Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 2122	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.get_KnownCircularStruct() Line 2003	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.GetMembersAndInitializers() Line 1686	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.GenerateAllDeclarationErrorsImpl(System.Threading.CancellationToken cancellationToken) Line 294	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol.GenerateAllDeclarationErrorsImpl(System.Threading.CancellationToken cancellationToken) Line 110	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.GenerateDeclarationErrors(System.Threading.CancellationToken cancellationToken) Line 287	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.&lt;closure&gt;.&lt;lambda1&gt;(Microsoft.CodeAnalysis.VisualBasic.Symbols.NamespaceOrTypeSymbol typeOrNamespace) Line 650	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.VisitTypesAndNamespacesWithin(Microsoft.CodeAnalysis.VisualBasic.Symbols.NamespaceOrTypeSymbol ns, System.Action(Of Microsoft.CodeAnalysis.VisualBasic.Symbols.NamespaceOrTypeSymbol) visitor, System.Collections.Concurrent.ConcurrentStack(Of System.Threading.Tasks.Task) tasks, System.Threading.CancellationToken cancellationToken) Line 710	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.GetAllDeclarationErrors(System.Threading.CancellationToken cancellationToken, Boolean hasExtensionMethods) Line 653	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceAssemblySymbol.GetAllDeclarationErrors(System.Threading.CancellationToken cancellationToken) Line 1140	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetDiagnostics(Microsoft.CodeAnalysis.CompilationStage stage, Boolean includeEarlierStages, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, System.Threading.CancellationToken cancellationToken) Line 2020	Basic
 	Microsoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CompileMethods(Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder moduleBuilder, Boolean emittingPdb, Boolean emitMetadataOnly, Boolean emitTestCoverageData, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, System.Predicate(Of Microsoft.CodeAnalysis.ISymbol) filterOpt, System.Threading.CancellationToken cancellationToken) Line 2287	Basic
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Compilation.Emit(System.IO.Stream peStream, System.IO.Stream metadataPEStream, System.IO.Stream pdbStream, System.IO.Stream xmlDocumentationStream, System.IO.Stream win32Resources, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.ResourceDescription&gt; manifestResources, Microsoft.CodeAnalysis.Emit.EmitOptions options, Microsoft.CodeAnalysis.IMethodSymbol debugEntryPoint, System.IO.Stream sourceLinkStream, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.EmbeddedText&gt; embeddedTexts, Microsoft.CodeAnalysis.CodeGen.CompilationTestData testData, System.Threading.CancellationToken cancellationToken) Line 2477	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Compilation.Emit(System.IO.Stream peStream, System.IO.Stream pdbStream, System.IO.Stream xmlDocumentationStream, System.IO.Stream win32Resources, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.ResourceDescription&gt; manifestResources, Microsoft.CodeAnalysis.Emit.EmitOptions options, Microsoft.CodeAnalysis.IMethodSymbol debugEntryPoint, System.IO.Stream sourceLinkStream, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.EmbeddedText&gt; embeddedTexts, System.IO.Stream metadataPEStream, System.Threading.CancellationToken cancellationToken) Line 2425	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.MetadataOnlyImage.Create(Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Host.ITemporaryStorageService service, Microsoft.CodeAnalysis.Compilation compilation, System.Threading.CancellationToken cancellationToken) Line 45	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.MetadataOnlyReference.GetOrBuildReference(Microsoft.CodeAnalysis.SolutionState solution, Microsoft.CodeAnalysis.ProjectReference projectReference, Microsoft.CodeAnalysis.Compilation finalCompilation, Microsoft.CodeAnalysis.VersionStamp version, System.Threading.CancellationToken cancellationToken) Line 88	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetMetadataOnlyImageReferenceAsync(Microsoft.CodeAnalysis.SolutionState solution, Microsoft.CodeAnalysis.ProjectReference projectReference, System.Threading.CancellationToken cancellationToken) Line 774	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetMetadataReferenceAsync(Microsoft.CodeAnalysis.SolutionState solution, Microsoft.CodeAnalysis.ProjectState fromProject, Microsoft.CodeAnalysis.ProjectReference projectReference, System.Threading.CancellationToken cancellationToken) Line 715	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.GetMetadataReferenceAsync(Microsoft.CodeAnalysis.ProjectReference projectReference, Microsoft.CodeAnalysis.ProjectState fromProject, System.Threading.CancellationToken cancellationToken) Line 1991	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalizeCompilationAsync(Microsoft.CodeAnalysis.SolutionState solution, Microsoft.CodeAnalysis.Compilation compilation, System.Threading.CancellationToken cancellationToken) Line 636	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.BuildCompilationInfoFromScratchAsync(Microsoft.CodeAnalysis.SolutionState solution, Microsoft.CodeAnalysis.SolutionState.CompilationTracker.State state, System.Threading.CancellationToken cancellationToken) Line 482	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.BuildCompilationInfoAsync(Microsoft.CodeAnalysis.SolutionState solution, System.Threading.CancellationToken cancellationToken) Line 448	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetOrBuildCompilationInfoAsync(Microsoft.CodeAnalysis.SolutionState solution, bool lockGate, System.Threading.CancellationToken cancellationToken) Line 412	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetCompilationSlowAsync(Microsoft.CodeAnalysis.SolutionState solution, System.Threading.CancellationToken cancellationToken)	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetMetadataReferenceAsync(Microsoft.CodeAnalysis.SolutionState solution, Microsoft.CodeAnalysis.ProjectState fromProject, Microsoft.CodeAnalysis.ProjectReference projectReference, System.Threading.CancellationToken cancellationToken) Line 714	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.GetMetadataReferenceAsync(Microsoft.CodeAnalysis.ProjectReference projectReference, Microsoft.CodeAnalysis.ProjectState fromProject, System.Threading.CancellationToken cancellationToken) Line 1991	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.FinalizeCompilationAsync(Microsoft.CodeAnalysis.SolutionState solution, Microsoft.CodeAnalysis.Compilation compilation, System.Threading.CancellationToken cancellationToken) Line 636	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.BuildCompilationInfoFromScratchAsync(Microsoft.CodeAnalysis.SolutionState solution, Microsoft.CodeAnalysis.SolutionState.CompilationTracker.State state, System.Threading.CancellationToken cancellationToken) Line 482	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.BuildCompilationInfoAsync(Microsoft.CodeAnalysis.SolutionState solution, System.Threading.CancellationToken cancellationToken) Line 448	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetOrBuildCompilationInfoAsync(Microsoft.CodeAnalysis.SolutionState solution, bool lockGate, System.Threading.CancellationToken cancellationToken) Line 412	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetCompilationSlowAsync(Microsoft.CodeAnalysis.SolutionState solution, System.Threading.CancellationToken cancellationToken)	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.GetCompilationAsync(Microsoft.CodeAnalysis.ProjectState project, System.Threading.CancellationToken cancellationToken) Line 1935	C#
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.CreateAnalyzerDriverAsync(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService service, Microsoft.CodeAnalysis.Project project, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer&gt; analyzers, bool includeSuppressedDiagnostics, Microsoft.CodeAnalysis.Diagnostics.Log.DiagnosticLogAggregator logAggregatorOpt, System.Threading.CancellationToken cancellationToken) Line 344	C#
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalyzeProjectAsync(Microsoft.CodeAnalysis.Project project, bool semanticsChanged, Microsoft.CodeAnalysis.SolutionCrawler.InvocationReasons reasons, System.Threading.CancellationToken cancellationToken) Line 92	C#
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.ProcessProjectAsync.AnonymousMethod__1(Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer a, Microsoft.CodeAnalysis.Project p, System.Threading.CancellationToken c) Line 142	C#
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync.AnonymousMethod__0(Microsoft.CodeAnalysis.Project v, System.Threading.CancellationToken c) Line 206	C#
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.GetOrDefaultAsync&lt;Microsoft.CodeAnalysis.Project, object&gt;(Microsoft.CodeAnalysis.Project value, System.Func&lt;Microsoft.CodeAnalysis.Project, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;object&gt;&gt; funcAsync, System.Threading.CancellationToken cancellationToken)	C#
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.RunAnalyzersAsync&lt;Microsoft.CodeAnalysis.Project&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt; analyzers, Microsoft.CodeAnalysis.Project value, System.Func&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer, Microsoft.CodeAnalysis.Project, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; runnerAsync, System.Threading.CancellationToken cancellationToken) Line 204	C#
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.ProcessProjectAsync(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt; analyzers, Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.WorkItem workItem, System.Threading.CancellationToken cancellationToken) Line 178	C#
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.LowPriorityProcessor.ExecuteAsync() Line 57	C#
```</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37676</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature request: Type hint when `var` is used</Title>
    <Description>I've found out this extension that shows what the actual type when `var` is used: https://marketplace.visualstudio.com/items?itemName=AlexanderGayko.VarAdorner
![image](https://user-images.githubusercontent.com/42944058/62374221-6f532880-b576-11e9-9f3f-e14493439a8b.png)

It's pretty neat, and would be a great addition if similar features can be implemented in the Visual Studio!</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37675</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0017 (Use Object Initializer) should not be offered on using declarations</Title>
    <Description>**Version Used**: Visual Studio 2019 Version 16.2.0

**Steps to Reproduce**:

Consider the following code:

    using System;

    internal sealed class Disposable : IDisposable
    {
        public string Property { get; set; }
        public void Dispose() { }
    }

    internal static class Program
    {
        private static void Main(string[] args)
        {
            using var disposable = new Disposable();

            disposable.Property = args[2];
        }
    }

Compile the code using

    &lt;Project Sdk="Microsoft.NET.Sdk"&gt;

      &lt;PropertyGroup&gt;
        &lt;OutputType&gt;Exe&lt;/OutputType&gt;
        &lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt;
        &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
      &lt;/PropertyGroup&gt;

    &lt;/Project&gt;


**Expected Behavior**:

IDE0017 should not be reported and the associated code fix should not be available.

**Actual Behavior**:

IDE0017 is reported on the using declaration. When the associated code fix is applied, it generates the following code:

    private static void Main(string[] args)
    {
        using var disposable = new Disposable
        {
            Property = args[2]
        };
    }

The behavior of this code is substantially different from the behavior of the original code. This may not be a problem, or even desired, when simply assigning to a variable. It would never be a problem when initializing a newly declared local variable, as the difference in behavior is not observable in that case (AFAIK).

However, a using declaration is more than simply a declaration, and the difference in behavior is certainly observable! The intent of the original code clearly was to construct an object, making sure that constructed object would be disposed at the end of the current scope, even if exceptions are raised in subsequent statements. By moving the assignments in those subsequent statements into an object initializer, that intent is violated. Indeed, in the above example, if `args[2]` throws, the Dispose method will not be called on the newly created Disposable.

IDE0017 should not be offered on using declarations.

PS: We discovered a real bug in a real application under development, that was introduced as a result of a developer applying the IDE0017 code fix on a using declaration.</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37674</IssueID>
    <RepoID>1</RepoID>
    <Title> Switch to a strongly typed version of anonymous-function syntax nodes for their "body"</Title>
    <Description>Instead of effectively having a property `SyntaxNode Body` we have a pair of `BlockSyntax Block` and `ExpressionSyntax ExpressionBody`.  This brings anonymous-functions in-line with the MethodDeclaration nodes that have a similar shape.</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37673</IssueID>
    <RepoID>1</RepoID>
    <Title>Assertion failed while editing method with switch expression: Unhandled declaration pattern context</Title>
    <Description>**Version Used**: 

F5 from the latest master-vs-deps.

**Steps to Reproduce**:

Console app with following code:

```C#
class C
{
    static object F() =&gt; 1;
    static void Main()
    {
        var obj = F();
        object result;
        switch (obj)
        {
            case int i:
                result = i * 10;
                break;

            case C x when x.P == 1:
                result = "D";
                break;

            default:
                result = obj;
                break;
        }
        Console.WriteLine(result);
    }
}
```

Right click on switch keyword and use refactoring "change to switch expression".

**Expected Behavior**:

No assert.

**Actual Behavior**:

```
Unhandled declaration pattern context
   at Microsoft.CodeAnalysis.OperationExtensions.GetValueUsageInfo(IOperation operation)
   at icrosoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.OnReferenceFound(ISymbol symbol, IOperation operation)
   at icrosoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.VisitDeclarationPattern(IDeclarationPatternOperation operation)
   at Microsoft.CodeAnalysis.Operations.DeclarationPatternOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitOperationArrayElement[T](T operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at icrosoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitchExpressionArm(ISwitchExpressionArmOperation ope......

```
</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37672</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/ide-cleanup</Title>
    <Description>
This is an automatically generated pull request from master into features/ide-cleanup.

``` bash
git fetch --all
git checkout merges/master-to-features/ide-cleanup
git reset --hard upstream/features/ide-cleanup
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/ide-cleanup --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>02/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37671</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>02/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37670</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/release/dev16.4-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>02/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37669</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>02/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37668</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37667</IssueID>
    <RepoID>1</RepoID>
    <Title>Failure: System.NotImplementedException SDK 2.1.801</Title>
    <Description>@kjpou1 commented on [Fri Jul 26 2019](https://github.com/dotnet/cli/issues/12115)

We ran into a possible regression in the mono CI after moving to 2.1.801.  PR in the mono repo can be seen here that fixed the problem: [PR 15844](https://github.com/mono/mono/pull/15844)

This code has been compiling for a while.

A small repro is below.

**Version Used**: 

Mac

```
dotnet --list-sdks
2.1.801 [/usr/local/share/dotnet/sdk]
```

```
dotnet --list-runtimes
Microsoft.AspNetCore.All 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]
Microsoft.AspNetCore.App 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
Microsoft.NETCore.App 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
```


**Steps to Reproduce**:

1. Create a new netstandard2.0 library - `dotnet new classlib`
2. Replace with the following code:

```
using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
namespace sdk_issue {
    public class Class1    {
        public Class1 ()   {
            DoSomething();
        }
        public static async void DoSomething() {
            Foo.From(await ReadAsByteArrayAsync());
        }
        public static Task&lt;byte[]&gt; ReadAsByteArrayAsync()  {
            return null;
        }
    }
    public sealed class Foo : TypedFoo&lt;Foo, byte&gt;  {    }
    public abstract class TypedFoo&lt;T, U&gt;  where U : struct {
	        public unsafe static T From (ReadOnlySpan&lt;U&gt; span)	{
			var bytes = MemoryMarshal.AsBytes (span);
			fixed (byte* ptr = bytes) {
				return default(T);
			}
		}
    }
}

```

3.  Add a reference to `System.Memory` to the project

```
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
    &lt;RootNamespace&gt;sdk_issue&lt;/RootNamespace&gt;
    &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;PackageReference Include="System.Memory" Version="4.5.2" /&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
```

4. Execute `dotnet build`

**Expected Behavior**:

Successful build


**Actual Behavior**:

The following is output:

```
/usr/local/share/dotnet/sdk/2.1.801/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : FailFast: [/Users/Jimmy/websharp/projects/sdk-issue/sdk-issue.csproj]
/usr/local/share/dotnet/sdk/2.1.801/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : System.NotImplementedException: The method or operation is not implemented. [/Users/Jimmy/websharp/projects/sdk-issue/sdk-issue.csproj]
```

The full log is attache below:

[issue-text.txt](https://github.com/dotnet/roslyn/files/3435858/issue-text.txt)



</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>05/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37666</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix our MSB3270 warnings</Title>
    <Description>This is a port of PR #37646 into the master branch. </Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37665</IssueID>
    <RepoID>1</RepoID>
    <Title>Incremental parsing of using with errant [ throws asserts, crashes</Title>
    <Description>**Version Used**: 16.2.0 (debug build will assert so you can easily see the problem)

**Steps to Reproduce**:

1. Create a new console application.
2. Before a semicolon in one of the using directives at the top of the file, type a `[`.

**Expected Behavior**: no asserts

**Actual Behavior**: the compiler asserts during incremental parse. IDE will crash from there.

This is one bug found by digging through a bug bucket of 16.2 crashes.

Assert:

```
---------------------------
Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue
---------------------------

   at Microsoft.CodeAnalysis.SyntaxTreeExtensions.VerifySource(SyntaxTree tree, IEnumerable`1 changes)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChanges(SourceText newText, IReadOnlyList`1 changes)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(SourceText newText)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParse(TextAndVersion newTextAndVersion, TreeAndVersion oldTreeAndVersion, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;IncrementallyParseTreeAsync&gt;d__15.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParseTreeAsync(ValueSource`1 oldTreeSource, ValueSource`1 newTextSource, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;&gt;c__DisplayClass14_0.&lt;CreateLazyIncrementallyParsedTree&gt;b__0(CancellationToken c)
   at Roslyn.Utilities.AsyncLazy`1.StartAsynchronousComputation(AsynchronousComputationToStart computationToStart, Request requestToCompleteSynchronously, CancellationToken callerCancellationToken)
   at Roslyn.Utilities.AsyncLazy`1.GetValueAsync(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;GetSyntaxTreeAsync&gt;d__42.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.DocumentState.GetSyntaxTreeAsync(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Document.GetSyntaxTreeAsync(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Host.BackgroundParser.&lt;&gt;c__DisplayClass20_0.&lt;ParseDocumentAsync&gt;b__0()
   at System.Threading.Tasks.Task`1.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
```</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37664</IssueID>
    <RepoID>1</RepoID>
    <Title>Incremental parsing 'using new' fires asserts</Title>
    <Description>**Version Used**: 16.2.0 (debug build will assert so you can easily see the problem)

**Steps to Reproduce**:

1. Create a new console application.
2. In the blank line between the using statements and the namespace, start typing 'using new', which isn't legal but type it nonetheless.

**Expected Behavior**: no asserts

**Actual Behavior**: the compiler asserts, and we'll eventually crash because the tree is malformed.

This is one bug found by digging through a bug bucket of 16.2 crashes.

Assert:

```
---------------------------
Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue
---------------------------
   at Microsoft.CodeAnalysis.SyntaxTreeExtensions.VerifySource(SyntaxTree tree, IEnumerable`1 changes)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChanges(SourceText newText, IReadOnlyList`1 changes)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(SourceText newText)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParse(TextAndVersion newTextAndVersion, TreeAndVersion oldTreeAndVersion, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;IncrementallyParseTreeAsync&gt;d__15.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParseTreeAsync(ValueSource`1 oldTreeSource, ValueSource`1 newTextSource, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;&gt;c__DisplayClass14_0.&lt;CreateLazyIncrementallyParsedTree&gt;b__0(CancellationToken c)
   at Roslyn.Utilities.AsyncLazy`1.StartAsynchronousComputation(AsynchronousComputationToStart computationToStart, Request requestToCompleteSynchronously, CancellationToken callerCancellationToken)
   at Roslyn.Utilities.AsyncLazy`1.GetValueAsync(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;GetSyntaxTreeAsync&gt;d__42.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.DocumentState.GetSyntaxTreeAsync(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Document.GetSyntaxTreeAsync(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Host.BackgroundParser.&lt;&gt;c__DisplayClass20_0.&lt;ParseDocumentAsync&gt;b__0()
   at System.Threading.Tasks.Task`1.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
```</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37663</IssueID>
    <RepoID>1</RepoID>
    <Title>Incremental parsing when editing attribute drops attribute</Title>
    <Description>**Version Used**: 16.2.0 (debug build will assert so you can easily see the problem)

**Steps to Reproduce**:

1. Create a new console application.
2. In the blank line between the using statements and the namespace, quickly type `[assembly:`. The IDE will complete the ] and that's OK. If it doesn't assert, then try deleting and retyping the `:`.

**Expected Behavior**: no asserts

**Actual Behavior**: the compiler asserts, producing a syntax tree that seems to entirely drop the assembly attribute. The IDE may crash or just act strangely beyond here.

This is one bug found by digging through a bug bucket of 16.2 crashes.

Assert:

```
---------------------------
Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue
---------------------------
Unexpected difference at offset 150: Line 8, Column 16 "namespace ClassLibrary15"  (Found: [ ] Expected: [L])

   at Microsoft.CodeAnalysis.SyntaxTreeExtensions.VerifySource(SyntaxTree tree, IEnumerable`1 changes)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChanges(SourceText newText, IReadOnlyList`1 changes)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(SourceText newText)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParse(TextAndVersion newTextAndVersion, TreeAndVersion oldTreeAndVersion, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;IncrementallyParseTreeAsync&gt;d__15.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParseTreeAsync(ValueSource`1 oldTreeSource, ValueSource`1 newTextSource, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;&gt;c__DisplayClass14_0.&lt;CreateLazyIncrementallyParsedTree&gt;b__0(CancellationToken c)
   at Roslyn.Utilities.AsyncLazy`1.StartAsynchronousComputation(AsynchronousComputationToStart computationToStart, Request requestToCompleteSynchronously, CancellationToken callerCancellationToken)
   at Roslyn.Utilities.AsyncLazy`1.GetValueAsync(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;GetSyntaxTreeAsync&gt;d__42.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)
   at Microsoft.CodeAnalysis.DocumentState.GetSyntaxTreeAsync(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Document.GetSyntaxTreeAsync(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Host.BackgroundParser.&lt;&gt;c__DisplayClass20_0.&lt;ParseDocumentAsync&gt;b__0()
   at System.Threading.Tasks.Task`1.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
```</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37662</IssueID>
    <RepoID>1</RepoID>
    <Title>Quickwatch evaluation of a tuple in a test results in a NullReferenceException</Title>
    <Description>Create a DLL project, full net framework, and add a unit test project to the solution. In the DLL project, add the following types

```    
public enum MuhEnum
{
    Whatever
}
public class MuhClass
{
    public List&amp;lt;(string, MuhEnum, Exception)&amp;gt; Items = new List&amp;lt;(string, MuhEnum, Exception)&amp;gt;();
    public MuhClass()
    {
        Items.Add((&amp;quot;Why am I null when quickwatching?&amp;quot;, MuhEnum.Whatever, null));
    }
}
```
You can clearly see that Items[0]. Item1 is not null nor will it ever be null unless explicitly set as null. Now, add the following unit test

```
[TestMethod]
public void TestMethod1()
{
    var target = new MuhClass();
    Assert.IsTrue(target. Items[0]. Item1.Contains(&amp;quot;quickwatch&amp;quot;), &amp;quot;Debug this test, quickwatch Target and try to evaluate target. Items[0]. Item1.Length&amp;quot;);
}
```
Debug this test's Assert. It will evaluate to true, but if you quickwatch ```target. Items[0]. Item1``` it will be reported as being null. Attempting to use it in the quickwatch, such as ```target. Items[0]. Item1.Length``` results in an NRE.

I haven't tested to see if this exact type of tuple is the magic sauce needed but I have repro'd it outside of where I discovered it.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/539009/quickwatch-evaluation-of-a-tuple-in-a-test-results.html
VSTS ticketId: 850494_
_These are the original issue comments:_

Visual Studio Feedback System on 4/18/2019, 08:20 PM (104 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>02/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37661</IssueID>
    <RepoID>1</RepoID>
    <Title>Bad refactoring -- convert to LINQ</Title>
    <Description>My code snippet that compiles fine as is, is:
			int SumDurations = PatternDurations.Sum(p =&amp;gt; Convert.ToInt32(p.Duration));
			var Rates = new List&amp;lt;(int div, int rate)&amp;gt; { (24, 4), (12, 8), (6, 16) };
			foreach (var item in Rates) {
				int quot = Math.DivRem(SumDurations, item.div, out int rem);
				if (rem == 0) {
					SetTimeSignature(quot, item.rate);
					return quot;
				}
			}

When I apply Convert to LINQ to the foreach loop, I get red squigglies as follows (using bold for squigglies), and it fails to compile with the message: CS8130	Cannot infer the type of implicitly-typed deconstruction variable 'item'. and ditto for quot and rem.	G:\LRS\$Dev\C#\$Tony\RhythmAndClues\Interpreter.cs. This problem occurs on VS2019, 16.0.1
 
			foreach (var (**item**, **quot**) in from item in Rates
										 let quot = Math.DivRem(SumDurations, item.div, out int rem)
										 where **rem** == 0
										 select (item, quot)) {
				SetTimeSignature(quot, item.rate);
				return quot;
			}

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/540726/bad-refactoring-convert-to-linq.html
VSTS ticketId: 852120_
_These are the original issue comments:_

Visual Studio Feedback System on 4/22/2019, 01:42 AM (101 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37660</IssueID>
    <RepoID>1</RepoID>
    <Title>Format Document adding empty comments /**/ in CSHTML files</Title>
    <Description>When using Format Document in CSTHML files I am getting `/**/` appearing immediately following inline If statements, the empty comment string wouldnt be as much of an issue if it wasn't appearing in the rendered HTML for the View and if my View didnt have a dozen If statements and thus a dozen lines with `/**/` appearing every time format document is used.  Also, if ran a second time, Format Document creates two `/**/` on subsequent lines, so my dozen becomes 24, then 36 etc and all of them appear in the rendered HTML.

**How do I stop this?**  I have already spoke to Progress about the specific control in question and they say they have seen similiar issues and it is a Format Document problem outside of their control.

**Original Code:**

```razor
@(Html.Kendo(). PanelBar()
    . Name("panelbar")
    . ExpandMode(PanelBarExpandMode.Single)
    . Items(panelbar =&gt; {
        panelbar. Add(). Text("My Teammates")
            . Expanded(true)
            . Content(@&lt;div style="padding: 10px;"&gt;
            @if (true == true)
                        {
                &lt;div class="teamMate"&gt;
                    &lt;img src="@Url.Content("~/shared/web/panelbar/andrew.jpg")" alt="Andrew Fuller"&gt;
                    &lt;h2&gt;Andrew Fuller&lt;/h2&gt;
                    &lt;p&gt;Team Lead&lt;/p&gt;
                &lt;/div&gt;
                        }
        &lt;/div&gt;);
```

**Formatted Code:**

```razor
@(Html.Kendo(). PanelBar()
    . Name("panelbar")
    . ExpandMode(PanelBarExpandMode.Single)
    . Items(panelbar =&gt; {
        panelbar. Add(). Text("My Teammates")
            . Expanded(true)
            . Content(@&lt;div style="padding: 10px;"&gt;
            @if (true == true)
                        {
                &lt;div class="teamMate"&gt;
                    &lt;img src="@Url.Content("~/shared/web/panelbar/andrew.jpg")" alt="Andrew Fuller"&gt;
                    &lt;h2&gt;Andrew Fuller&lt;/h2&gt;
                    &lt;p&gt;Team Lead&lt;/p&gt;
                &lt;/div&gt;
                &lt;div class="teamMate"&gt;
                    &lt;img src="@Url.Content("~/shared/web/panelbar/nancy.jpg")" alt="Nancy Leverling"&gt;
                    &lt;h2&gt;Nancy Leverling&lt;/h2&gt;
                    &lt;p&gt;Sales Associate&lt;/p&gt;
                &lt;/div&gt;
                &lt;div class="teamMate"&gt;
                    &lt;img src="@Url.Content("~/shared/web/panelbar/robert.jpg")" alt="Robert King"&gt;
                    &lt;h2&gt;Robert King&lt;/h2&gt;
                    &lt;p&gt;Business System Analyst&lt;/p&gt;
                &lt;/div&gt;
                        }
            /**/
        &lt;/div&gt;);
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/640604/format-document-adding-empty-comments-in-cshtml-fi.html
VSTS ticketId: 945043_
_These are the original issue comments:_

Visual Studio Feedback System on 7/10/2019, 09:28 PM (21 days ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
Visual Studio Feedback System on 7/11/2019, 11:27 PM (20 days ago): &lt;markdown&gt;&lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: &lt;a target='_blank' href="https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq"&gt;https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq&lt;/a&gt;. In case you need answers to common questions or need assisted support, be sure to use &lt;a target='_blank' href="https://visualstudio.microsoft.com/vs/support/"&gt;https://visualstudio.microsoft.com/vs/support/&lt;/a&gt;. We’ll keep you posted on any updates to this feedback.&lt;/p&gt;
&lt;/markdown&gt;
Ailsa Gu [MSFT] on 7/28/2019, 11:23 PM (3 days ago): &lt;markdown&gt;&lt;p&gt;This feedback is being re-triaged as we are moving it to another team that can better help with the issue. Thanks for your patience.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37659</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion doesn't appear for expression statements above variable declaration statements</Title>
    <Description>**Version Used**: 
3.3.0-beta2-19375-02

**Steps to Reproduce**:

```cs
public class C
{
    public void M(string s)
    {
        s. // no completion
        var o = new object;
    }
}
```

**Expected Behavior**:
Completion list after `s.`

**Actual Behavior**:
No completion list

- Changing `var o` to `object o` seems to fix it in this particular scenario
- Changing `s.` to `_ = s.` seems to fix it

/cc @333fred @jasonmalinowski @ivanbasov

**edit**: this works in public preview with version 3.3.0-beta1-19360-03</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37658</IssueID>
    <RepoID>1</RepoID>
    <Title> Optimize memory allocation of LCS algorithm</Title>
    <Description>Consolidate allocations of many small int arrays to a few allocations of larger buffers.
Pool buffers.

Fixes https://devdiv.visualstudio.com/DevDiv/_queries/edit/947470/?triage=true</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>02/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37657</IssueID>
    <RepoID>1</RepoID>
    <Title>XML documentation tooltips should include hyperlinks for &lt;see&gt; tags, &lt;exception&gt; tags, etc.</Title>
    <Description>For instance I have this XML doc:

```
/// &amp;lt;summary&amp;gt;
/// A comma delimited list of flags from the &amp;lt;see cref=&amp;quot;DeleteReferralFlags&amp;quot;/&amp;gt; enumeration.
/// &amp;lt;/summary&amp;gt;
string Flags { get; }
```

When I hover over a reference to the Flags property, DeleteReferralFlags appears in blue, but it would be nice if it were a hyperlink to the documentation on that enum.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/662082/xml-documentation-tooltips-should-include-hyperlin.html
VSTS ticketId: 952756_
_These are the original issue comments:_

Jane Wu [MSFT] on 7/25/2019, 09:51 PM (6 days ago): &lt;markdown&gt;&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
&lt;/markdown&gt;</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>01/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37656</IssueID>
    <RepoID>1</RepoID>
    <Title>c#: generate async override when autocompleting override statement for SomeMethodAsync</Title>
    <Description>when you override a base. SomeMethodAsync method, after hitting enter when typinv override a stub is generated.
This stub should (optionally) be generated as an async method, perhaps as a second choice for the selection.
this way, one neither needs to extend the base call with a ContinueWith() call nor has to manually rewrite the method header to be async. both actions appear to be the common case when overriding ... Async methods.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/663614/c-generate-async-override-when-autocompleting-over.html
VSTS ticketId: 953696_
_These are the original issue comments:_

Jane Wu [MSFT] on 7/29/2019, 02:35 AM (3 days ago): &lt;markdown&gt;&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
&lt;/markdown&gt;</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37655</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect code generation for using declarations with object initializers?</Title>
    <Description>**Version Used**: Visual Studio 2019 Version 16.2.0

**Steps to Reproduce**:

Consider the following code:

    using System;

    internal sealed class Disposable : IDisposable
    {
        public string Property { get; set; }
        public void Dispose() { }
    }

    internal static class Program
    {
        using var disposable = new Disposable
        {
            Property = args[2]
        };
    }

Compile the code using

    &lt;Project Sdk="Microsoft.NET.Sdk"&gt;

      &lt;PropertyGroup&gt;
        &lt;OutputType&gt;Exe&lt;/OutputType&gt;
        &lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt;
        &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
      &lt;/PropertyGroup&gt;

    &lt;/Project&gt;

**Actual Behavior**:

In Debug mode, the Main method is compiled to

	.method private hidebysig static 
		void Main (
			string[] args
		) cil managed 
	{
		.maxstack 4
		.entrypoint
		.locals init (
			[0] class Disposable
		)

		IL_0000: nop
		IL_0001: newobj instance void Disposable::.ctor()
		IL_0006: dup
		IL_0007: ldarg.0
		IL_0008: ldc.i4.2
		IL_0009: ldelem.ref
		IL_000a: callvirt instance void Disposable::set_Property(string)
		IL_000f: nop
		IL_0010: stloc.0
		.try
		{
			IL_0011: leave.s IL_001e
		}
		finally
		{
			IL_0013: ldloc.0
			IL_0014: brfalse.s IL_001d

			IL_0016: ldloc.0
			IL_0017: callvirt instance void [System.Runtime]System.IDisposable::Dispose()
			IL_001c: nop

			IL_001d: endfinally
		}

		IL_001e: ret
	}

This code has a problem, as the Dispose method on the newly constructed object will never be called in the event that `args[2]` (or the assignment to the property) throws.

The code is lowered to something along the lines of

    var temp = new Disposable();

    temp.Property = args[2];

    using (var disposable = temp)
    {
    }

I believe it should be lowered to the equivalent of

    using (var temp = new Disposable())
    {
        temp.Property = args[2];

        var disposable = temp;
    }

I do understand that the currently generated code is very similar to what is generated for the following:

    using (new Disposable
    {
        Property = args[2]
    })
    {
    }

This code has the same problem. However, modifying the generated code for a using statement would introduce breaking changes. We still have the opportunity to generate better code for using declarations.

Notice also that IDE0017 is offered on

    private static void Main(string[] args)
    {
        using var disposable = new Disposable();

        disposable.Property = args[2];
    }

Many developers will assume that this code is equivalent to the code with the object initializer, especially since Visual Studio offers a code fix to convert this code to the code using an object initializer.

If you feel the generated code is as intended, then I suggest IDE0017 is not offered on using declarations.



</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>01/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37654</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring to generate InvalidEnumArgumentException</Title>
    <Description>This is typically:

```cs
if (!Enum.IsDefined(typeof(Foo), foo))
    throw new InvalidEnumArgumentException(nameof(foo), (int)foo, typeof(Foo));
```

It probably shouldn't be offered on flags enums.</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37653</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring to generate ArgumentOutOfRange checks on numeric types</Title>
    <Description>An initial default condition of `foo &lt;= 0` seems like a good starting point.

If the argument name contains 'index' and there's a collection parameter, maybe `foo &lt; 0 || collectionParameter.Count &lt;= foo`?</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37652</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps
git reset --hard upstream/release/dev16.3-preview1-vs-deps
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>01/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37651</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/release/dev16.3-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37650</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to release/dev16.4-preview1</Title>
    <Description>
This is an automatically generated pull request from master into release/dev16.4-preview1.

``` bash
git fetch --all
git checkout merges/master-to-release/dev16.4-preview1
git reset --hard upstream/release/dev16.4-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-release/dev16.4-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>01/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37649</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge release/dev16.3-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from release/dev16.3-preview1 into master.

``` bash
git fetch --all
git checkout merges/release/dev16.3-preview1-to-master
git reset --hard upstream/master
git merge upstream/release/dev16.3-preview1
# Fix merge conflicts
git commit
git push upstream merges/release/dev16.3-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>01/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37648</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge features/ide-cleanup back into master</Title>
    <Description>Merges all commits from https://github.com/dotnet/roslyn/tree/features/ide-cleanup back into master

</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>01/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37647</IssueID>
    <RepoID>1</RepoID>
    <Title>Update roslyn/features/ide-cleanup with the latest contents of master.</Title>
    <Description>
    </Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>01/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37646</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix our MSB3270 warnings</Title>
    <Description>There are a few parts to this change:

1. Ensure that MSB3270 and MSB3277 warnings are promoted to errors in CI
and hence block merging.
1. Move our DiaSymReader.Native logic into a separate targets file.
This resource cannot be consumed with a simple package reference but
rather requires a package reference and custom logic to pull out the
contained binaries. This logic used to be spread through our build. Now
it's in a single place.
1. Remove the x86 bootstrapping logic. This was testing a pretty obscure
scenario and the cost of maintaining that logic is siginificant at this
point. Can bring back if we ever find a bug in this area.

The root cause of the MSB3270 warnings is a subtle change in the SDK. It
now passes the runtime graph to NuGet for native assets. In the case of
DiaSymReader.Native there are runtime specific assets hence the SDK /
NuGet had to pick one for framework projects. This eventually lead to
`PlatformTarget` being set to x86 where it shoud have been AnyCPU.

Part of the change includes adding `ExcludeAssets=all` to the package
reference which means they no longer figure into this logic and hence
the binaries are marked as AnyCPU.

This regression in behavior is being tracked by
https://github.com/dotnet/sdk/issues/3495</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>01/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37645</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge features/ide-cleanup into master.</Title>
    <Description>
    </Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>01/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37644</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/param-nullchecking</Title>
    <Description>
This is an automatically generated pull request from master into features/param-nullchecking.

``` bash
git fetch --all
git checkout merges/master-to-features/param-nullchecking
git reset --hard upstream/features/param-nullchecking
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/param-nullchecking --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>02/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37643</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to features/razorSupport2</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into features/razorSupport2.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-features/razorSupport2
git reset --hard upstream/features/razorSupport2
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-features/razorSupport2 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>37642</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to release/dev16.4-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps
git reset --hard upstream/release/dev16.4-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/08/2019</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
  </Issue>
</Issues>
<Issues>
  <Issue>
    <IssueID>34625</IssueID>
    <RepoID>1</RepoID>
    <Title>Code is only considered unreachable if it doesn't start with a throw statement</Title>
    <Description>**Version Used**: 16.0.0 RC.3

As expected:

```cs
void M()
{
    return;
    // CS0162 Unreachable code detected
    _ = 42;
    throw new NotImplementedException();
}
```

Broken:

```cs
void M()
{
    return;
    // No warning or transparency
    throw new NotImplementedException();
}
```
</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34624</IssueID>
    <RepoID>1</RepoID>
    <Title>Poor use of comma in "Remove unused parameter 'x', its initial value is never used"</Title>
    <Description>**Version Used**: 16.0.0 RC.3

```cs
// IDE0060 Remove unused parameter 'x', its initial value is never used
void M(string x)
{
    x = string.Empty;
}
```

Traditionally, two sentences are not just joined with a comma. A conjunction such as 'and' or 'yet' is required to follow the comma. (http://www.sussex.ac.uk/informatics/punctuation/comma/joining)

Here are options that don't feel as odd:

- Remove unused parameter 'x'; its initial value is never used
- Remove unused parameter 'x' because its initial value is never used
- Remove unused parameter 'x' (its initial value is never used)
- Remove unused parameter 'x' whose initial value is never used
- Remove unused parameter 'x'. Its initial value is never used.

While writing in *general*, I'd lean strongly towards breaking up the compound sentence using two periods and two capitals. Run-on sentences are what everyone does by default. I've had feedback that has made me more aware of this. Short sentences make for the easiest reading. However, if Roslyn has no diagnostic messages that end with a period, it would be better to be consistent by not using full sentences.
</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34623</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>31/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34622</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>31/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34621</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>31/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34620</IssueID>
    <RepoID>1</RepoID>
    <Title>Poor diagnostic wrong number of Type Arguments...</Title>
    <Description>... with a type that exists in both a generic and non generic version

**Version Used**: 

master

**Steps to Reproduce**:

Compile the following code

```C#
using System;
public class C : IComparable&lt;int, int&gt; {}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEAMACFBGA3AWACgUBmLAJgwGEMQMBJKgezAAcIEJgAbOAHgCWAOxgAaDMJgA+DAG8AvkA

**Expected Behavior**:

error CS0305: Using the generic type 'IComparable&amp;lt;T&amp;gt;' requires 1 type arguments

**Actual Behavior**:

error CS0308: The non-generic type 'IComparable' cannot be used with type arguments

Whilst the semantics are debatable, this error message is (almost) just plain false :-)</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34619</IssueID>
    <RepoID>1</RepoID>
    <Title>Format `{}`</Title>
    <Description>Formats empty curly braces of a property pattern without a space.</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34618</IssueID>
    <RepoID>1</RepoID>
    <Title>Replace ArraySlice&lt;T&gt; with Span&lt;T&gt;</Title>
    <Description>
    </Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34617</IssueID>
    <RepoID>1</RepoID>
    <Title>üêõ Fix Type/Constructor deduplication in Find All References</Title>
    <Description>~~The behavior once provided by this field will be generalized in #35139.~~

Closes #35139</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>14/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34616</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>31/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34615</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>31/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34614</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>31/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34613</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>31/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34612</IssueID>
    <RepoID>1</RepoID>
    <Title>NullableReferenceTypes not working with Action and lambda</Title>
    <Description>@Yuzlol commented on [Fri Mar 29 2019](https://github.com/dotnet/csharplang/issues/2376)

Following codes seem to work differently with the NullableReferenceTypes:

            string? nullstring = null;

            Action firstAction =
                () =&gt; service.GetAccount(masterAcc.Id, null);    // CompilerWarning
            Action secondAction =
                () =&gt; service.GetAccount(masterAcc.Id, nullstring);   // No CompilerWarning

            var action =
                new Action(() =&gt; service.GetAccount(masterAcc.Id, null));  // No CompilerWarning

        public interface IAccount
        {
            Account GetAccount(string accountId, string masterAccountId);    
        }


        public Account GetAccount(string accountId, string masterAccountId)
        {
            accountIsAuthorized(masterAccountId);

            return accountExists(accountId);
        }

Bug or Feature?

---

@YairHalberstadt commented on [Fri Mar 29 2019](https://github.com/dotnet/csharplang/issues/2376#issuecomment-478013132)

What did GetAccount look like?

---

@Yuzlol commented on [Fri Mar 29 2019](https://github.com/dotnet/csharplang/issues/2376#issuecomment-478014557)

&gt; What did GetAccount look like?

i updated my post

---

@yaakov-h commented on [Sat Mar 30 2019](https://github.com/dotnet/csharplang/issues/2376#issuecomment-478226497)

The first two lines lines emit warnings, albeit different ones. Odd that the third does not. ([source](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxAN0QSwGYE8A+AAgAwAEhAjANwCwAUPbAgK4DGMpAstPAgIKtWpAN7kAzOQpkAkgBNSAXgB8pAEQVVVUgF969AMQA7ZgBsTEYCbik4hi1b11CEwgCZSA1gHtmhjsPpSINJA4OdyABZSACEIBAAKAEoRegBIVMpiAH5SYzNMxVzTE1oGOmCKyXdsTARYSncFUMrKpMUVKEQ0TFY4ADoAcTgYTx8/eMhYRE8+uSQis0StYIB6FdIAYS8wAAdMKwQAdTjDTEMAc2bKhtJO70NZG6byltbk5Vuunv6hkcExmATHjTQSzWTzPImTJLVbrAByXk22z2B2OCFOF0cr1IaDipAg7EwXkMiiu2MMcAA7lV4m0Pp0EN1eoNhqNfIDJrwZnMFiZEjDSGtSAikbt9og0RjLi8groZSF5dI2X5PozvoVIQBCUoVbhTfiCUickGsUpXcJnXjYAnWJX/dlXALyirKji/V3xAoE7zsnkFY0Gn1+OQCoJXOVYsISV2kd328Ze+MwP1SI3AwMAkOOsnBGAACwQXmpWp1wTl2iAA=))

---

@PathogenDavid commented on [Sat Mar 30 2019](https://github.com/dotnet/csharplang/issues/2376#issuecomment-478268818)

This issue is more suited for Roslyn since it's more likely a compiler issue than a spec issue. I believe it is probably covered by https://github.com/dotnet/roslyn/issues/32698 and https://github.com/dotnet/roslyn/issues/32499.

However, those issues are about the nullability mismatch of the signature of the delegate rather than nullability mismatch in the body of the lambda expression. It appears that nullability analysis just ignores explicit delegate creation in general, but it wouldn't hurt to add you example as another case where it isn't working as a comment to either issue. (Probably https://github.com/dotnet/roslyn/issues/32698 since it's about delegate creation syntax in general.)

</Description>
    <CreatedDate>30/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34611</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove verbose flag</Title>
    <Description>The next arcade merge will be setting this centrally.</Description>
    <CreatedDate>30/03/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34610</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Access Modifiers BUG? Or i do not know C#?</Title>
    <Description> Visual studio version: vs2017 Community 15.9.10
.Net core sdk: 2.2.105

![ÊµãËØï](https://user-images.githubusercontent.com/32387920/55276118-a6949d00-532a-11e9-97da-e305cf9f3d94.png)
![ÊµãËØï2](https://user-images.githubusercontent.com/32387920/55276119-ab595100-532a-11e9-9d52-b93b04ebafaf.png)


</Description>
    <CreatedDate>30/03/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34609</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/03/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34608</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/03/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34607</IssueID>
    <RepoID>1</RepoID>
    <Title>Use new CoreFX API for creating NamedPipeServerStreams</Title>
    <Description>The bulk of this change is in the second commit. The first commit is just changing some of the compiler server test helpers to propagate exceptions instead of crashing the process so it's easier to diagnose CI test failures.

The default behavior for the NamedPipeServerStream API is to take a pipe
name and then construct a named pipe in the background using that name.
In Windows this involves creating a file in a special namespace in the
file system. On Unix, named pipes are implemented using Unix Domain
Sockets, which are actual files, and the CoreFX behavior is to create
them in the temporary directory. Unfortunately, Unix Domain Sockets also
often have a max path length limitation and the temporary directory
could be arbitrarily long, meaning that any attempt to create a named
pipe may fail on Unix.

To remedy this, CoreFX introduced an API which allows you to pass a full
path instead of just a pipe name. If a fully-qualifed path is passed,
the new behavior is used. We can use this functionality to improve
reliability of pipe name creation by using the "/tmp" directory on Unix,
which by the POSIX specification is always required to be a valid
temporary directory, and by using a fixed-length pipe name that is lower
than any known Unix Domain Socket path length restriction.

This should fix the issue for good.

Fixes #24137</Description>
    <CreatedDate>30/03/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34606</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/03/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34605</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix Mono crash</Title>
    <Description>
    </Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34604</IssueID>
    <RepoID>1</RepoID>
    <Title>Automatic completion of ToString override should make return non-nullable</Title>
    <Description>Prerequsite: https://github.com/dotnet/roslyn/issues/23268

See long discussion on https://github.com/dotnet/coreclr/pull/23466

It appears System.Object will return `string?`. If that decision is changed, this can be closed.

Part of the rationale of that decision is that subclasses can override and indicate that they do not return null. We should encourage new subclasses to do that by having an appropriate completion.

**Steps to Reproduce**:

1. Create a new project in VS
2. Enable nullable reference types
3. Reference a corefx where `Object.ToString()` returns `string?
4. Create a new type in the project and have it complete a ToString override

``` C#
class Foo
{
   // Put cursor here and type `override ToString [TAB]`
}
````

**Expected Behavior**:

The new override is generated with signature `public override string ToString()`

**Actual Behavior**:

The new override is generated with signature `public override string? ToString()`

</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34603</IssueID>
    <RepoID>1</RepoID>
    <Title>Move uninitialized nullable to da</Title>
    <Description>
    </Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34602</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly members more test coverage</Title>
    <Description>This PR contains test coverage additions mainly from the test plan review we had yesterday.

- Check parser behavior for bad readonly property `int P readonly =&gt; 42;`
- Improves warning message for implicit value copies
- Require both property accessors be declared to use `readonly` keyword on an accessor (this matches the behavior with accessibility modifiers)

This is the last work I expect to do before finally merging master into this branch, and then integrating this branch into master.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34601</IssueID>
    <RepoID>1</RepoID>
    <Title>Async Completion - Ctrl+Space isn't filtering the list (when non-unique)</Title>
    <Description>**Version Used**: 28725.219.d16.0stg

**Steps to Reproduce**:

1. Paste C# code:

```C#
class C
{
    void Method()
    {
        Me$$
    }
}

```

2. Delete the `$$`, place your caret there, and press Ctrl+Space

**Expected Behavior**: As per 15.9, a filtered list (only `MemberwiseClone` and `Method`, and backspacing / typing further brings things back into the list).

**Actual Behavior**: The list is initially unfiltered and stays unfiltered (it's acting like Ctrl+J in that respect). But if there's a unique item at the time of Ctrl+Space, it does complete it automatically, so it's not like the two triggers are completely confused.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34600</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify handling of grouped conversions in NullableWalker</Title>
    <Description>Follow up from a couple of recent changes. Also fixes handling of explicit nullable tuple conversion.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34599</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve analysis or codegen around scenarios where `_field = null!` is required</Title>
    <Description>In CoreFX, it is not uncommon for us to provide static factory methods or to initialize fields via property setters. If you enable the nullable feature, the compiler will then complain that a given field is not definitely null.

The workaround for this is to currently explicitly set: `_field = null!` and keep the field non-nullable. However, this results in us double-initializing various fields and raises some concerns around regressing perf.

It would be beneficial if the compiler could either improve the codegen here, such as by eliding the assignment in the case of `string _field = null!` (for reference types) or if the analysis could be improved such that this wasn't required in the first place (would be beneficial for value types, where the above isn't possible).</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34598</IssueID>
    <RepoID>1</RepoID>
    <Title>UninitializedFieldWalker should be done inside DefiniteAssignment</Title>
    <Description>Per @gafter's comments on https://github.com/dotnet/roslyn/pull/34316

&gt; This code should be integrated into the definite assignment pass. There is no need for the compiler to repeat all that work. Nearly the same thing is done for the fields of a struct.

and

&gt; This only performs the analysis on the "fall through" path. You also need to perform the analysis on each return statement (a list of which are available in "result"). When a return statement offends, the diagnostic should point to the return statement.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34597</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix inverted condition in LegacyCompletionCondition</Title>
    <Description>
    </Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34596</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>31/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34595</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34594</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable debug support in ILTool.proj</Title>
    <Description>
    </Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34593</IssueID>
    <RepoID>1</RepoID>
    <Title>Review IDE for switch expression precedence change</Title>
    <Description>In https://github.com/dotnet/roslyn/pull/34481 we changed the precedence of the switch expression from "relational" (like &lt;) to a new precedence level just looser than unary.  It is possible that some IDE features may need to be adjusted as a result.  Please review and make any necessary adjustments.

See also https://github.com/dotnet/roslyn/pull/34481#issuecomment-477234403
</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34592</IssueID>
    <RepoID>1</RepoID>
    <Title>Please make the order of keywords the same between Roslyn and StyleCop</Title>
    <Description>I'm getting a warning SA1206: The 'public' modifier must appear before 'virtual' on Roslyn generated code:

        /// &lt;summary&gt;
        /// Gets or sets the &lt;see cref="AccountCanonMap"/&gt; set.
        /// &lt;/summary&gt;
        virtual public DbSet&lt;AccountCanonMap&gt; AccountCanonMaps { get; set; }

I have no idea how I change the order on generated code as it's just a bit field.  I'll leave the same notice on the StyleCop site as well.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34591</IssueID>
    <RepoID>1</RepoID>
    <Title>Support "reabstraction" in an interface</Title>
    <Description>On 2019-03-29 the LDM decided to support "reabstraction" in interfaces.  That needs to be implemented.

``` c#
interface I1
{
    void M() {}
}
interface I2 : I1
{
    void I1.M(); // I1.M is abstract in I2 and must be implemented in a derived type
}
```
</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34590</IssueID>
    <RepoID>1</RepoID>
    <Title>Prevent static methods in interfaces unless DIM is supported in the runtime</Title>
    <Description>At the LDM on 2019-03-27 we decided that, to prevent existing C# compilers from being confused, the C# compiler should not support static methods in interfaces unless compiling against a runtime that supports default interface methods.

We decided to do this for any features that are found to confound earlier compilers.  @agocke will be looking to see what other features are affected.
</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34589</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected value 'TypeArguments' of type 'Microsoft.CodeAnalysis.VisualBasic.BoundKind'</Title>
    <Description>**Version Used**: f34e1ca35bfaa0c9bf378d91a4ed5e211fd5f458

**Steps to Reproduce**:

1. Check out dotnet/roslyn@f34e1ca35bfaa0c9bf378d91a4ed5e211fd5f458
1. Check out sharwell/roslyn-analyzers@2fab8946033a3369dde57a499a8163af7469e77f next to **roslyn**
1. Open **RoslynAnalyzers.sln**, set the configuration to **Release**, and build everything in the solution folder **Microsoft.CodeAnalysis.PerformanceSensitiveAnalyzers**
1. Open **Roslyn.sln**
1. Set **AnalyzerRunner** as the startup project
1. Set the configuration to **Debug**
1. Add the following to **launchProperties.json**:

    ```json
    "Microsoft.CodeAnalysis.CSharp.PerformanceSensitiveAnalyzers Analyzers": {
      "commandName": "Project",
      "commandLineArgs": "$(SolutionDir)..\\roslyn-analyzers\\artifacts\\bin\\Microsoft.CodeAnalysis.CSharp.PerformanceSensitiveAnalyzers\\Release\\netstandard1.3\\ $(SolutionDir)Roslyn.sln /concurrent /stats /log PerformanceSensitive-IOperation.log"
    },
    ```

1. Launch the profile created in the previous step

**Expected Behavior**:

No assertion.

**Actual Behavior**:

![image](https://user-images.githubusercontent.com/1408396/55243589-8ae7a480-520d-11e9-85b7-10bbc4a951d1.png)
</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34588</IssueID>
    <RepoID>1</RepoID>
    <Title>SymbolFinder.FindImplementedInterfaceMembersAsync documentation is confusing and inaccurate</Title>
    <Description>The documentation for `SymbolFinder.FindImplementedInterfaceMembersAsync` is sparse, but the summary is:
&gt; Find symbols for declarations that implement members of the specified interface symbol

That's not what it does.  What it does is:

&gt; Find interface members that the specified symbol implements.

As an added bonus, if you actually pass the symbol for an interface, you get a NullReferenceException (presumably when the code tries to use `symbol.ContainingType.TypeKind`.)</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34587</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34586</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34585</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34584</IssueID>
    <RepoID>1</RepoID>
    <Title>Properly treat ambiguous explicit interface implementations</Title>
    <Description> involving nullable reference types, including maintaining backwards compatability with pre -NRT code.

pre C# 8.0, `void I.Foo&lt;T&gt;(T? value) { }` was a valid implementation of `void Foo&lt;T&gt;(T? value) where T : struct;`.

In C# 8 it's a valid implementation of:
```csharp
 void Foo&lt;T&gt;(T? value) where T : struct;
 void Foo&lt;T&gt;(T? value) where T : class;
 void Foo&lt;T&gt;(T value) where T : class;
```

This leads to the following 2 issues.

### 1.

 See https://github.com/dotnet/roslyn/issues/34508

 The following is a valid, unambiguous program in C# 7.0, but in C# 8.0 leads to an ambiguity which prevents it from compiling:

```csharp
interface I
{
    void Foo&lt;T&gt;(T value);
    void Foo&lt;T&gt;(T? value) where T : struct;
}

//works fine
class C1 : I
{
    public void Foo&lt;T&gt;(T value) { }
    public void Foo&lt;T&gt;(T? value) where T : struct { }
}

//several build errors
class C2 : I
{
    void I.Foo&lt;T&gt;(T value) { }

    //error CS0111: Type 'C2' already defines a member called 'I.Foo' with the same parameter types
    void I.Foo&lt;T&gt;(T? value) { }
}
```

Given that void I.Foo&lt;T&gt;(T? value) { } is a valid implementation of both `void Foo&lt;T&gt;(T value);` and `void Foo&lt;T&gt;(T? value) where T : struct;` the compiler is allowed to decide which it should implement. It does so arbitrarily (by choosing the member declared first by the interface), causing a compile error.

To fix this regression I have taken the following approach.

*When looking for the implemented member of an explicit interface implementation, The compiler will first look for members of the interface which match the implementing member including nullability annotations. Only if that fails will it look for members whose nullability annotations do not match.*

Since no pre-C# 8 code has nullability annotations, this can be guaranteed not to break backwards compatibility.

In my opinion this is an intuitive, simple, and understandable solution, which doesn't require special casing all sorts of potentially backwards compatibility breaking cases.

### 2.

See https://github.com/dotnet/csharplang/issues/2370

The compiler is required to issue a warning whenever an explicit interface implementation can match two members, or is ambiguous to the runtime. See https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0473 and https://blogs.msdn.microsoft.com/ericlippert/2006/04/06/odious-ambiguous-overloads-part-two/.

&gt; Explicit interface implementation 'method name' matches more than one interface member. Which interface member is actually chosen is implementation-dependent. Consider using a non-explicit implementation instead.

However it was not issuing such an error in this case:

```csharp
#nullable enable
interface I
{
    void Foo&lt;T&gt;(T? value) where T : class;
    void Foo&lt;T&gt;(T? value) where T : struct;
}

class C2 : I
{
    void I.Foo&lt;T&gt;(T? value) { }
    public void Foo&lt;T&gt;(T? value) where T : struct {}
}
```

Despite the fact that the explicit interface implementation is ambiguous to the compiler.

This was because the logic for doing the check to see if an explicit interface implementation matches two interface members is done at a different point to the location where the lookup is done. As a result the logic became out of sync. This pull request moves the logic to the same location, so that the warning is guaranteed to be issued accurately.

Note that the lookup to see if a method is ambiguous to the runtime remains in its old location, as it requires completely different logic.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34583</IssueID>
    <RepoID>1</RepoID>
    <Title>Regression: Explicit Implementation fails to compile</Title>
    <Description>**Version Used**: 

master

**Steps to Reproduce**:

Compile the following code:

```csharp
interface I
{
    void Foo&lt;T, U&gt;(T? value) where T : struct;
}

class C1 : I
{
    public void Foo&lt;T, U&gt;(T? value) where T : struct {}
}

class C2 : I
{
    void I.Foo&lt;T, U&gt;(T? value) {}
}
```
https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQDs4BstWFiVKABwEsAaGEUrAH1PRggTCgGMIACASQFgAoAN4DOozgAEALJwBiAezkAeACrlOAVQB8ACmUB+TgDcoWOBACUnAO4ALZl2WcQnZDARw2MANwCAvgIFxACZOAGEARiceAWF+MQkAZglpeSVVDR19IxMzS1t7TkdnV3dPTkF/fkrAkNCQ5z4hETEpHgA6VJU1LV0DY1MLcsrfIA==

**Expected Behavior**:

Everything compiles without error, as it does on VS 2017:

https://sharplab.io/#v2:C4LglgNgPmB2wFMBOAzAhgYwQAgJIFgAoAbyO3OwAEAWbAMQHsGAeAFQBpsBVAPgApWAfmwA3NBACuCAJTYA7gAtkOVthDYAzsCQSMwANxEAvkSKUATNgDCARjV4ipQhSoBmKrUYsO3fkNHiUrKKytiq6lo6etjEJoRxZpZWluoEJGQUNHgAdF5snLwCwmKSMjFxRkA=

**Actual Behavior**:

error CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.
error CS0539: 'C2.Foo&lt;T, U&gt;(T?)' in explicit interface declaration is not a member of interface
error CS0535: 'C2' does not implement interface member 'I.Foo&lt;T, U&gt;(T?)'
</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34582</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect precedence of += operator</Title>
    <Description>**Version Used**: 2.10.0.0

**Steps to Reproduce**:

```
1. int i = 10;
2. i += i++ + ++i;
3. Console.Write(i.ToString());
```

**Expected Behavior**:
_i_ should be 34 because the operator _+=_ should be evaluated last (precedence rules)

**Actual Behavior**:
_i_ equals 32</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34581</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix the pull member up failure</Title>
    <Description>Related [issue](https://github.com/dotnet/roslyn/issues/34268)
So, null pointer exception happens when you try to make a property abstract like
```
abstract class B { }

class D : B
{
    int $$X =&gt; 7;
}
```
If try to make it abstract via the pull member up dialog, it will fail.

Reason:
It is due to CodeGenerationSymbolFactory.CreatePropertySymbol() takes SetMethod and GetMethod and the default value are both null.

I also add two additional tests to cover the cases which makes events abstract.
</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34580</IssueID>
    <RepoID>1</RepoID>
    <Title>CodeFix of `Implement interface` always implemented explicitly for ReferenceType+interface constraints with interface and Enum/Delegate/MulticastDelegate constraints</Title>
    <Description>**Version Used**: VS2019 16.0.0 Preview4.4
(This also happen on VS2017, so it's not an regression)

**Steps to Reproduce**:

1. `&lt;LangVersion&gt;7.3&lt;/LangVersion&gt;`
2. Type the below code;
3. Call fix with `Implement interface abstractly`/`Implement interface` on `BaseTest`

```cs
using System;

    public interface ITest
    {
        void TestEnum&lt;T&gt;(T value) where T : Enum;
        void TestDelegate&lt;T&gt;(T value) where T : Delegate;
        void TestStruct&lt;T&gt;(T value) where T : struct;
        void TestUnmanaged&lt;T&gt;(T value) where T : unmanaged;
        void Test&lt;T&gt;(T value) where T : class;
    }

    public abstract class BaseTest : ITest
    {
    }
```
Edited: Add an new case
```cs
void TestClassInterface&lt;T&gt;() where T : class, IDisposable;//class and any interface
```

**Expected Behavior**:
All method are implemented abstractly
```cs
    public abstract class BaseTest : ITest
    {
        public abstract void Test&lt;T&gt;(T value) where T : class;
        public abstract void TestStruct&lt;T&gt;(T value) where T : struct;
        public abstract void TestUnmanaged&lt;T&gt;(T value) where T : unmanaged;
        public abstract void TestDelegate&lt;T&gt;(T value) where T : Delegate;
        public abstract void TestEnum&lt;T&gt;(T value) where T : Enum;
    }
```
**Actual Behavior**:
Unlike others, the methods with delegate or enum constraints are implemented explicitly.
```cs
    public abstract class BaseTest : ITest
    {
        public abstract void Test&lt;T&gt;(T value) where T : class;
        public abstract void TestStruct&lt;T&gt;(T value) where T : struct;
        public abstract void TestUnmanaged&lt;T&gt;(T value) where T : unmanaged;

        void ITest.TestDelegate&lt;T&gt;(T value)
        {
            throw new NotImplementedException();
        }

        void ITest.TestEnum&lt;T&gt;(T value)
        {
            throw new NotImplementedException();
        }
    }
```

</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34579</IssueID>
    <RepoID>1</RepoID>
    <Title>Report a better error for an attempt to access protected member of object class within an interface.</Title>
    <Description>Before this change, the following confusing error was reported for all error locations in the added test scenario:
CS1540 Cannot access protected member 'object.MemberwiseClone()' via a qualifier of type 'object'; the qualifier must be of type 'I1' (or derived from it)</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34578</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature Request:  Extract Analyzer diagnostics post build event</Title>
    <Description>@jinujoseph @mavasani - as discussed.

Our organisation currently uses our own built Roslyn analyzers for highlighting issues in the IDE but also as part of our CI/CD pipeline. Before we turn analyzers from warning to error we want to be able to extract stats and create our own burn-downs of these results in the build pipeline to ensure we don't stop rolling changes when a new analyzer is first added to the build. 

We have looked into using Analyzer hosts which work well at doing this, but requires us to duplicate our publish builds with our analyzer host build which duplicates effort in the build pipeline. Our rules don't add much overhead to analysis times in the build pipeline but by duplicating compiles of some large projects does blow out full pipeline times.

We have also tried utilizing the context.RegisterCompilationEndAction() event on an individual analyzer with our own static class object inherited by all analyzers that we write the diagnostics to. This also works but makes unit testing extremely difficult with the shared context and isn't a very neat solution. 

What would be ideal is a feature so that we could write an event or override on the whole of compilation so that we gather the post build information from the analyzers and do something with it. I vision something similar to the .NET Core startup.cs file with a list of override-able events with begin/end etc. If there was any way to pass a dotnet argument  to activate these as a trigger would also go a long way although currently we could pass a config file via additional files to trigger this. The reason for needing a trigger is so that these events don't occur when the developer is using the analyzer in their IDE but can be triggered when running in CI/CD pipelines. 

We don't want to use the Sarif output as we want to model the data into our own format and also extract data we don't natively get from the Sarif format such as the SuppressMessage Justification field.
</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34577</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34576</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>31/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34575</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>31/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34574</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34573</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34572</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34571</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34570</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34569</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34568</IssueID>
    <RepoID>1</RepoID>
    <Title>FindReferencesAsync returns false positive when class has explicit interface method implementation</Title>
    <Description>**Version Used**: 
Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
Microsoft.CodeAnalysis, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
Microsoft.CodeAnalysis.Workspaces, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
Microsoft.CodeAnalysis.CSharp.Workspaces, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
Microsoft.CodeAnalysis.CSharp, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
**Steps to Reproduce**:

Take this code:
```C#
public interface IDriveable { void Drive(); }
public class Vehicle : IDriveable { public virtual void Drive() {} }
public class Motorcycle : Vehicle, IDriveable { public override void Drive() {} void IDriveable.Drive() { } }
public class Tests
{
	public static void TestMotorcycle()
	{
		var m = new Motorcycle();
		m.Drive();
	}
	public static void TestDriveable(IDriveable d)
	{
		d.Drive();
	}
}
```
and 

(A) Call `FindReferencesAsync` for `Motorycle.Drive()`.
(B) Call `FindReferencesAsync` for `IDriveable.Drive()`.

**Expected Behavior**:

(A) `IDriveable.Drive()` (`Tests.TestDriveable`) is not in the returned definitions
(B) `Motorcycle.Drive()` (`Tests.TestMotorcycle`) is not in the returned definitions

**Actual Behavior**:

They are.

For (A), the explicit interface method implementation means that no callsite that calls IDriveable.Drive can invoke Motorycle.Drive at runtime.

For (B), I'm not even sure what the semantics are supposed to be here, but again: in no way is a call to Motorcycle.Drive() relates to IDriveable.Drive.  The only argument one might possibly make to the contrary is that if you have a new class that inherits from Motorcycle and overrides Drive(), then a callsite for Motorcycle.Drive *can* invoke a method that also implements IDriveable.Drive. 
</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34567</IssueID>
    <RepoID>1</RepoID>
    <Title>Set ApplyNgenOptimization in bootstrap compiler build</Title>
    <Description>
    </Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34566</IssueID>
    <RepoID>1</RepoID>
    <Title>Value Tracking</Title>
    <Description>[Internal Ask]
aka. Inspect or Value Origin/Destination

**Version Used**: Visual Studio 2019

**Scenarios**:
&gt; 1. If I change the value of this variable, what code in which methods will be impacted? 
&gt; 2. We hit a NullReferenceException due to some parameter or other variable being null. How could this have happened? Where and from which methods could this value have come from? (The value doesn't have to be null, could be any other constant value, but null is probably the most common case)

**Expected Behavior**:
Visual Studio provides some way to open a separate window (keyboard shortcut or context menu) and you can inspect origin or destination of the value.
</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34565</IssueID>
    <RepoID>1</RepoID>
    <Title>NormalizeWhitespace incorrectly adds space after comma between omitted nodes</Title>
    <Description>**Version Used**: 3.0.0-beta4-final

**Steps to Reproduce**:

Run the following program:

```c#
using System;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

class Program
{
    static void Main()
    {
        var type = ArrayType(PredefinedType(Token(SyntaxKind.IntKeyword)))
            .WithRankSpecifiers(SingletonList(ArrayRankSpecifier(
                SeparatedList&lt;ExpressionSyntax&gt;(
                    new[] { OmittedArraySizeExpression(), OmittedArraySizeExpression()}))));

        Console.WriteLine(type);
        Console.WriteLine(type.NormalizeWhitespace());

        var expression = TypeOfExpression(GenericName(Identifier("Dictionary"))
                .WithTypeArgumentList(TypeArgumentList(SeparatedList&lt;TypeSyntax&gt;(
                    new[] { OmittedTypeArgument(), OmittedTypeArgument()}))));

        Console.WriteLine(expression);
        Console.WriteLine(expression.NormalizeWhitespace());
    }
}
```

**Expected Behavior**:

`NormalizeWhitespace` does not add any whitespace here, so the program prints:

```
int[,]
int[,]
typeof(Dictionary&lt;,&gt;)
typeof(Dictionary&lt;,&gt;)
```

**Actual Behavior**:

```
int[,]
int[, ]
typeof(Dictionary&lt;,&gt;)
typeof(Dictionary&lt;, &gt;)
```</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34564</IssueID>
    <RepoID>1</RepoID>
    <Title>Be smarter for how we raise WorkspaceChange events when completing batches</Title>
    <Description>When we completed a batch, we'd always raise a generic ProjectChanged event, even if the change could be represented more precisely: if we only added a single Document we could still raise DocumentAdded but we'd still raise the generic ProjectChanged. This now raises more precise events, when possible. This should allow for downstream optimizations: adding a new document won't have to rerun syntax analyzers on everything else, for example.

There was also a second issue where if the batch was closed and nothing happened at all, we'd still raise a ProjectChanged. This was because the old code tried having a special case where if it mutated
the Solution and ended up with the same Solution at the end, it'd skip the actual change. However there was a bug where if it called Solution.AddProjectReferences or Solution.AddMetadataReferences and
passed an empty list, it'd make a new solution snapshot. That's not necessary to do, so we optimize that at the Workspaces layer.

Fixes https://github.com/dotnet/roslyn/issues/34309</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34563</IssueID>
    <RepoID>1</RepoID>
    <Title>install servicehub json files in common7/servicehub folders</Title>
    <Description>we used to install servicehub json files in extension folder and servicehub recently added a new feature ("serviceOverride": true), where one can install its servicehub json files in Common7/ServiceHub folder (more stable) and keep existing F5 vsix experiences.

we are trying to see whether we can take advantage of this new feature so that regular VS user can get our OOP (servicehub services) from a more reliable location than extension folder. but still use private json files when dogfooding/developing.

this addresses one of our top 1 watson issue</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34562</IssueID>
    <RepoID>1</RepoID>
    <Title>SymbolFinder: FindCallersAsync and FindReferencesAsync return symbol objects but not their associated Compilation</Title>
    <Description>**Version Used**: 

Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a 
Microsoft.CodeAnalysis, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 
Microsoft.CodeAnalysis.Workspaces, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 
Microsoft.CodeAnalysis.CSharp.Workspaces, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 
Microsoft.CodeAnalysis.CSharp, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 
Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a 

**Expected Behavior**:

I would expect the API to give me everything I need in order to work correctly.

**Actual Behavior**:

It doesn't.  Or, if it does, then the documentation needs to be updated to make it clear just how it's meant to work.
 
The FAQ (https://github.com/dotnet/roslyn/wiki/FAQ) states repeatedly: "Comparing symbols from different compilations has undefined results."  I'm going to assume that, keeping in the spirit of C#, this actually merely means "the return value is meaningless", and not that the results are truly undefined (e.g. format drive, unring bell, nasal demons.)

The discussion on https://github.com/dotnet/roslyn/issues/26347, while concerned with SyntaxTree objects, further supports this idea: if you're dealing with syntax trees, semantic models, and symbols, you'd better keep track of which Compilation you used.

SymbolFinder's FindReferencesAsync (and FindCallersAsync, which is built atop it) throws this idea out the window by generating Compilations for each project in the solution, and returning symbols from those Compilations all in one big list, without bothering to clarify which is which.

If Project.GetCompilationAsync were idempotent -- which I don't see any documented guarantees, although the current implementation appears to work that way -- then for FindReferencesAsync, for the *caller* side, it would be possible to traverse ReferencedSymbol-&gt;ReferencedLocation-&gt;Document-&gt;Project-&gt;Compilation (However, there is still no counterpart for ReferencedSymbol.Definition.)
There is hope at all for FindCallersAsync: it remaps each ReferencedLocation to a Location, for which there appears to be no path back.

The result is that trying to do any sort of sophisticated cross-project analysis (in the specific case that tripped me up here, it's static call graph anlysis) is either difficult or impossible, because, because there's no reliable way to "jump" to the correct Compilation in order to be able to compare e.g. the SemanticModel's data type for an expression to the declaring type of a calling/called method in order to see if one is a base class of the other.
</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34561</IssueID>
    <RepoID>1</RepoID>
    <Title>PDB conversion drop entryPoint</Title>
    <Description>Validation of PDB conversion fails in the scenario below. The conversion from portable to windows results in dropping the entryPoint node.

I don't know that root cause, but I suspect it may have something to do with this entry  point method having an unspeakable name (`&lt;Main&gt;`).

```C#
        [Fact]
        public void MainCanReturnTask()
        {
            var source = @"
using System.Threading.Tasks;

class A
{
    async static Task Main()
    {
        await Task.Factory.StartNew(() =&gt; { });
    }
}";
            var compilation = CreateCompilationWithMscorlib45(source, options: TestOptions.DebugExe, parseOptions: TestOptions.Regular.WithLanguageVersion(LanguageVersion.CSharp7_1));
            compilation.VerifyDiagnostics();

...

            // Verify asyncInfo.catchHandler
            compilation.VerifyPdb("A+&lt;Main&gt;d__0.MoveNext",
@"&lt;symbols&gt;
  &lt;files&gt;
    &lt;file id=""1"" name="""" language=""C#"" /&gt;
  &lt;/files&gt;
  &lt;entryPoint declaringType=""A"" methodName=""&amp;lt;Main&amp;gt;"" /&gt; // &lt;------ here
  &lt;methods&gt;
    &lt;method containingType=""A+&amp;lt;Main&amp;gt;d__0"" name=""MoveNext""&gt;
      &lt;customDebugInfo&gt;
        &lt;forward declaringType=""A+&amp;lt;&amp;gt;c"" methodName=""&amp;lt;Main&amp;gt;b__0_0"" /&gt;
        &lt;encLocalSlotMap&gt;
          &lt;slot kind=""27"" offset=""0"" /&gt;
          &lt;slot kind=""33"" offset=""11"" /&gt;
          &lt;slot kind=""temp"" /&gt;
          &lt;slot kind=""temp"" /&gt;
        &lt;/encLocalSlotMap&gt;
      &lt;/customDebugInfo&gt;
      &lt;sequencePoints&gt;
        &lt;entry offset=""0x0"" hidden=""true"" document=""1"" /&gt;
        &lt;entry offset=""0x7"" hidden=""true"" document=""1"" /&gt;
        &lt;entry offset=""0xc"" startLine=""7"" startColumn=""5"" endLine=""7"" endColumn=""6"" document=""1"" /&gt;
        &lt;entry offset=""0xd"" startLine=""8"" startColumn=""9"" endLine=""8"" endColumn=""48"" document=""1"" /&gt;
        &lt;entry offset=""0x3c"" hidden=""true"" document=""1"" /&gt;
        &lt;entry offset=""0x8f"" hidden=""true"" document=""1"" /&gt;
        &lt;entry offset=""0xa7"" startLine=""9"" startColumn=""5"" endLine=""9"" endColumn=""6"" document=""1"" /&gt;
        &lt;entry offset=""0xaf"" hidden=""true"" document=""1"" /&gt;
      &lt;/sequencePoints&gt;
      &lt;asyncInfo&gt;
        &lt;catchHandler offset=""0x8f"" /&gt;
        &lt;kickoffMethod declaringType=""A"" methodName=""Main"" /&gt;
        &lt;await yield=""0x4e"" resume=""0x69"" declaringType=""A+&amp;lt;Main&amp;gt;d__0"" methodName=""MoveNext"" /&gt;
      &lt;/asyncInfo&gt;
    &lt;/method&gt;
  &lt;/methods&gt;
&lt;/symbols&gt;", options: PdbValidationOptions.SkipConversionValidation);
            // TODO2 file issue on PDB conversion
        }
```

Tagging @tmat. Let me know if I should move this issue to a different repo.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34560</IssueID>
    <RepoID>1</RepoID>
    <Title>Move Powershell formatting to match arcade</Title>
    <Description>Two space indent is wrong but it's the standard that Arcade
chose. Moving our Powershell to be consistent with the standard.

:smile:</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34559</IssueID>
    <RepoID>1</RepoID>
    <Title>Add SelectAsArray, DangerousCreateFromUnderlyingArray</Title>
    <Description>Adds an overload of `SelectAsArray` that takes a predicate.
Adds `DangerousCreateFromUnderlyingArray`.
Adds `SerializableBytes.ToImmutableArray`.

These helpers are used by https://github.com/dotnet/roslyn/pull/34027</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34558</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove _Dependency once StreamJsonRpc adds a build target for net472</Title>
    <Description>currently src\Setup\DevDivInsertionFiles\DevDivInsertionFiles.csproj contains following

```
      &lt;_Dependency Remove="Nerdbank.Streams"/&gt;
      &lt;_Dependency Remove="System.IO.Pipelines"/&gt;
      &lt;_Dependency Remove="System.ValueTuple"/&gt;
```

because StreamJsonRpc supports 472 and missing build target for it. once build target is added, we should remove the dependencies.
</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34557</IssueID>
    <RepoID>1</RepoID>
    <Title>Code formatting option to allow space before semicolon</Title>
    <Description>&lt;p&gt;I use C#, but this could apply in other languages too.&lt;/p&gt;&lt;p&gt;Please create a code formatting option to allow an optional space &lt;strong&gt;before&lt;/strong&gt; semicolons at the end of statements. For example, I want statements to look like this ...&lt;/p&gt;&lt;pre&gt;int x = 0 ;&lt;/pre&gt;&lt;p&gt;... &lt;strong&gt;not&lt;/strong&gt; like this ...&lt;/p&gt;&lt;pre&gt;int x = 0;&lt;/pre&gt;&lt;p&gt;Of course, if there is a way to do this already, most grateful for advice on that.&lt;/p&gt;&lt;p&gt;Thanks!&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/506639/code-formatting-option-to-allow-space-before-semic.html
VSTS ticketId: 829830_
_These are the original issue comments:_

Jane Wu [MSFT] on 3/27/2019, 00:35 AM (35 hours ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34556</IssueID>
    <RepoID>1</RepoID>
    <Title>Honor annotations for user defined operators and conversions:</Title>
    <Description>- Add a VisitOperandsHonoringAnnotations that will split the state if needed based on annotations
- Call it from user defined conversions and binary operators
- Add tests

Fixes https://github.com/dotnet/roslyn/issues/32671</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34555</IssueID>
    <RepoID>1</RepoID>
    <Title>use JsonRpcEx in ServiceHubRemoteHostClient</Title>
    <Description>ServiceHubRemoteHostClient has 1 JsonRpc connection which is the master connection. 

this controls the lifetime of our OOP process. and it is used to communicate host related states such as telemetry session, UI locale, global operation states, host's persistent storage location and etc.

this one uses JsonRpc as it is.

we also have JsonRpcEx designed to be used as a base of all service calls. this is the connection (and pooled) roslyn features such as code lens, FAR, navigate to, diagnostics and etc get and use and throw away. so it has all kind of error handling code like logging, NFW and info bar to handle service failures.

we should refactor JsonRpcEx so that we can use this as a base for both places.

</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34554</IssueID>
    <RepoID>1</RepoID>
    <Title>Please add the feature to click a #endregion pragma, so then jumps to the corresponding #region pragma.</Title>
    <Description>&lt;p&gt;As the title, would you please add the feature to click a #endregion pragma, so then jumps to the corresponding #region pragma?&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/505119/please-add-the-feature-to-click-a-endregion-pragma.html
VSTS ticketId: 827454_
_These are the original issue comments:_

Jane Wu [MSFT] on 3/26/2019, 01:25 AM (2 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34553</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect "Cast is redundant" when negating Int32-typecast-to-Int64</Title>
    <Description>VS 15.9.3 incorrectly claims that the following typecast is redundant.  The use of the typecast does change the behavior.  Without the typecast, OverflowException occurs when Int32.MinValue is negated.  With the typecast to Int64, it always succeeds without overflow, therefore the typecast is not redundant.

```csharp
Int32 input32 = Int32.MinValue; // Can also be a parameter or variable, not a constant.
Int64 output64_a = checked(-input32); // Throws OverflowException.
Int64 output64_b = checked(-(Int64)input32); // Does not throw OverflowException but IDE claims "Cast is redundant".
```

Thanks for investigating.
</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34552</IssueID>
    <RepoID>1</RepoID>
    <Title>Add ExternalAccess assembly for unit testing</Title>
    <Description>
    </Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34551</IssueID>
    <RepoID>1</RepoID>
    <Title>Filter out additive classifications in EditorClassifier</Title>
    <Description>This is a redo of https://github.com/dotnet/roslyn/pull/34315

The EditorClassifier was already filtering down to one ClassifiedSpan per textspan. This change ensures that the additive classifications are the ones filtered out instead of relying on ordering.

Supporting additive classifications in ClassifiedSpans and TaggedText has an open issue https://github.com/dotnet/roslyn/issues/32770

Fixes https://github.com/dotnet/roslyn/issues/34307


&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

User runs Find All References on a static identifier and some entries in the Find All Reference dialog will be missing the name of the identifier.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/34308

### Workarounds, if any

None

### Risk

Low

### Performance impact

Low

### Is this a regression from a previous update?

Yes, regression was introduced in https://github.com/dotnet/roslyn/pull/31231. This issue was partially addressed in https://github.com/dotnet/roslyn/pull/32725.

### Root cause analysis

In Dev16, we added the concept of additive classifications to provide additional information about a primary classification. Which means the same text span could potentially get multiple classifications. Existing services were not expecting this change and would compensate by filtering down to one classification per particular span. This change ensures that when filtered the primary classification is preserved instead of the additive classification.

### How was the bug found?

Reported through developer feedback

&lt;/details&gt;</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34550</IssueID>
    <RepoID>1</RepoID>
    <Title>Run CI on dev16.1-preview1 branches</Title>
    <Description>CI runs better when it knows to run in the first place</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34549</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge Default Interface Methods feature into master</Title>
    <Description>
    </Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34548</IssueID>
    <RepoID>1</RepoID>
    <Title>Add asyncInfo.catchHandlerOffset for async Main implementation</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/29143 (exception thrown in async Main).

```C#
using System;
using System.Threading.Tasks;

internal class Program
{
    private static async Task Main(string[] args)
    {
        throw new Exception(); 
    }
}
```

I was able to verify the fix on a desktop project (shown below). 
I was not able to verify on a Core project because of a Roslyn deployment issue (https://github.com/dotnet/roslyn/issues/34321).

![image](https://user-images.githubusercontent.com/12466233/55185312-4dbddc80-5151-11e9-84d7-8725d9ffcbf2.png)

</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34547</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve integration test performance</Title>
    <Description>Use WPF APIs instead of UI automation.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34546</IssueID>
    <RepoID>1</RepoID>
    <Title>Verification for VS.ExternalAPIs.Roslyn package</Title>
    <Description>A recent refactoring caused a number of insertion failures as we weren't
properly updating the contents of VS.ExternalAPIs.Roslyn.nupkg. This
adds basic verification that the contents are correct based on our build
output.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34545</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34544</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34543</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34542</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Allow source based test discovery to access ISolutionCrawlerService"</Title>
    <Description>Reverts dotnet/roslyn#34534

A proxy will be added to **Microsoft.CodeAnalysis.ExternalAccess.[SomethingTest]** instead, following the new IVT policies.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34541</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34540</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34539</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34538</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34537</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34536</IssueID>
    <RepoID>1</RepoID>
    <Title>fixed issue where we crash due to our pending async work run after VS‚Ä¶</Title>
    <Description>‚Ä¶ shutdown

this is another case where we have a pending async task that runs after VS shutdown and it throws and our fail fast code catch that exception and crash VS.

a general fix will be something like us making our fail fast code to aware shutdown situation and ignore any exception if we are in the shutdown situation.

but until we come up with proper design, this should handle one of the high watson hits.

fixes 
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/786353
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/786373

[Watson] clr20r3: CLR_EXCEPTION_System.IO.IOException_8007006d_Microsoft.ServiceHub.Client.dll!Microsoft.ServiceHub.Utility.WrappedStream+_WriteAsync_d__49.MoveNext
[Watson] clr20r3: CLR_EXCEPTION_System.IO.IOException_80131620_Microsoft.ServiceHub.Client.dll!Microsoft.ServiceHub.Utility.WrappedStream+_WriteAsync_d__49.MoveNext
</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34535</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpReplaceDocCommentTextWithTagCodeRefactoringProvider threw exception</Title>
    <Description>```
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBase(BaseExpressionSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSpeculativelyBoundExpressionHelper(Binder binder,ExpressionSyntax expression,SpeculativeBindingOption bindingOption,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSpeculativelyBoundExpression(Int32 position,ExpressionSyntax expression,SpeculativeBindingOption bindingOption,Binder&amp; binder,ImmutableArray`1&amp; crefSymbols)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSpeculativeSymbolInfo(Int32 position,ExpressionSyntax expression,SpeculativeBindingOption bindingOption)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSpeculativeSymbolInfoCore(Int32 position,SyntaxNode node,SpeculativeBindingOption bindingOption)
   at Microsoft.CodeAnalysis.ReplaceDocCommentTextWithTag.AbstractReplaceDocCommentTextWithTagCodeRefactoringProvider.TryRegisterSeeCrefTagIfSymbol(CodeRefactoringContext context,SemanticModel semanticModel,SyntaxToken token,TextSpan replacementSpan,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.ReplaceDocCommentTextWithTag.AbstractReplaceDocCommentTextWithTagCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>30/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34534</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow source based test discovery to access ISolutionCrawlerService</Title>
    <Description>
    </Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34533</IssueID>
    <RepoID>1</RepoID>
    <Title>Give suggestion or warning on C# dependency injections</Title>
    <Description>**Version Used**: 

&gt;Sorry I did not find how to get my version but I am using the latest Visual Studio 2017(15.9.10)

**Steps to Reproduce**:

While I was coding on an ASP.NET Core project, and I need some service in my action, like `_tokenManager`, I have to add a new dependency injection, like this:

![image](https://user-images.githubusercontent.com/19531547/55130454-49e48700-515e-11e9-8896-2fbfc3dfc707.png)

Adding a new dependency for a controller takes me at least 3 lines of code so it was not easy. When I need several dependencies it will cost me lots of time.

BTW, while I was changing my code, some dependency may not be necessary and shall be removed. I have to check those dependencies one by one to make sure each of then is necessary. So Why can't Visual Studio automatically add those dependencies when I try to use them and suggest me to remove those not necessary?

**Expected Behavior**:

Give me warnign or delete useless dependency or suggestions to add dependency

**Actual Behavior**:

Nothing happened.
</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34532</IssueID>
    <RepoID>1</RepoID>
    <Title>Added CSharp.Scripting to VS.ExternalApis pacakge</Title>
    <Description>
    </Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34531</IssueID>
    <RepoID>1</RepoID>
    <Title>Emit DebuggerStepThrough attribute on async Main stub</Title>
    <Description>When you have an `static async Task Main` method, we synthesize an entry point `static void &lt;Main&gt;`. That method should be annotated so that the debugger doesn't try to stop there, but rather in the user's `Main` method.

I manually verified that this fix is effective: launching the debugger with F11 results in the debugger stopping on the open brace of the user's `Main` method.

Fixes https://github.com/dotnet/roslyn/issues/32101

@tmat FYI</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34530</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Revert "set no activation context on provisional tab when navigate to""</Title>
    <Description>From #33400:

&gt; when PreferProvisionalTab option is added, work is done only in OpenDocument, but not in NavigateTo making the option useless in some cases since NavigateTo makes focus to move to provisional tab right after OpenDocument call which make sure provisional tab to not activated.
&gt;
&gt; fix is following editor team's recommendation from https://devdiv.visualstudio.com/DevDiv/_workitems/edit/402396</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34529</IssueID>
    <RepoID>1</RepoID>
    <Title>Test helpers utilized by Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.Completion.CompletionProviders.ExplicitInterfaceMemberCompletionProviderTests do not handle ```&lt;Workspace&gt;``` markup</Title>
    <Description>Fix https://github.com/dotnet/roslyn/issues/34456</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34528</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34527</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34526</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34525</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34524</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34523</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34522</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34521</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34520</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34519</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34518</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable Mono tests for fixed scenarios</Title>
    <Description>
    </Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34517</IssueID>
    <RepoID>1</RepoID>
    <Title>Use new NGEN optimization properties</Title>
    <Description>Replace obsolete properties with new ones.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34516</IssueID>
    <RepoID>1</RepoID>
    <Title>Create and use TestAccessor types where applicable</Title>
    <Description>Avoids accessibility increases when they were only used for test purposes.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34515</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove duplicate PackageReference</Title>
    <Description>Fixes failure to correctly restore packages within Visual Studio 2019 RC.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34514</IssueID>
    <RepoID>1</RepoID>
    <Title>Add IMethodSymbol.IsReadOnly to public API</Title>
    <Description>This proposes adding the following public API to `IMethodSymbol`:

```cs
/// &lt;summary&gt;
/// Indicates whether the method is readonly, i.e.
/// whether 'this' is 'ref readonly' in the scope of the method.
/// &lt;/summary&gt;
bool IsReadOnly { get; }
```

Note that once the last prototype comments are addressed, the check `methodSymbol.IsReadOnly` will be basically equivalent to `methodSymbol.ThisParameter.RefKind == RefKind.In`.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34513</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 'dotnet/master' into DefaultInterfaceImplementation</Title>
    <Description>
    </Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34512</IssueID>
    <RepoID>1</RepoID>
    <Title>Draw attention to Preview warnings and conflicts</Title>
    <Description>- Adds emoji to preview warnings and conflicts to draw attention to them</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34511</IssueID>
    <RepoID>1</RepoID>
    <Title>VB: Indenting of method parameters is broken inside lambda methods.</Title>
    <Description>**Version Used**: 

Visual Studio Community 2017 v15.8.5

**Steps to Reproduce**:

Consider the following code:

```vb
  Public Sub TestIndenting()
    Const arg1 As String = "{0} {1}"
    Const arg2 As String = "hello"
    Const arg3 As String = "world"

    Console.WriteLine(arg1, arg2, arg3)

    Dim lambda =
        Sub()
          Console.WriteLine(arg1, arg2, arg3)
        End Sub

    Console.ReadLine()
  End Sub
```

We want to take the `Console.WriteLine` method calls and move the paramaters `arg1` and `arg2` and `arg3` to the next line so the code is ultimately formatted like this:

```vb
    Console.WriteLine(
      arg1, arg2, arg3
    )
```

The first step is to position the caret before `arg1` and press Enter so all the arguments move to the next line. Furthermore they should automatically be indented so they start a few characters into the word `Console`. When doing this with the first `Console.WriteLine` method call, it works as expected and produces this intermediate result:

```vb
    Console.WriteLine(
      arg1, arg2, arg3)
```

However, if you try the same thing for the second `Console.WriteLine` method call inside the lambda, the indentation is NOT done and `arg1` is aligned with the beginning of the word `Console`. You end up with this:

```vb
          Console.WriteLine(
          arg1, arg2, arg3)
```

Visually the differences look like this:

![vs_lambda_indenting](https://user-images.githubusercontent.com/20465797/55095134-ae550700-50c8-11e9-991c-54276b56bd1e.png)

**Expected Behavior**:

The indentation behaviour should be identical regardless of where the method calls happen. In fact after some extra testing, this seems to affect other elements too, not just method calls. For example indentation is broken in the same way for array literals as well if done inside the lambda:

![vs_lambda_indenting2](https://user-images.githubusercontent.com/20465797/55095536-59fe5700-50c9-11e9-9064-3032417c3d35.png)

...same thing happens when pressing Enter to move the right side of an assignment statement to the next line:

![vs_lambda_indenting3](https://user-images.githubusercontent.com/20465797/55095900-fe809900-50c9-11e9-8bcf-499cce7b826a.png)</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34510</IssueID>
    <RepoID>1</RepoID>
    <Title>Add new dlls to externalapis package</Title>
    <Description>
    </Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34509</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0004 incorrectly suggested for method with nullable result and conditional operator with default result</Title>
    <Description>**Version Used**: 
VS2019 15.9.10

**Steps to Reproduce**:

1. Create the following line of code:
```c
static long? TestParse(string val) =&gt; long.TryParse(val, out var parseResult) ? (long?)parseResult : default;
```

**Expected Behavior**:
There should not be a suggestion to remove the (long?) cast. Removing the cast will change the  result type of the conditional expression to "long" instead of "long?".

**Actual Behavior**:
"Remove unnecessary cast" is suggested.

Might be the same issue as #29726</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34508</IssueID>
    <RepoID>1</RepoID>
    <Title>Explicit implementation of generic interface method with 'T?' parameter does not build</Title>
    <Description>**Version Used**: Visual Studio Proffesional 2019 Preview 16.0.0 Preview 4.4



**Steps to Reproduce**:

```C#
interface I
{
    void Foo&lt;T&gt;(T value);
    void Foo&lt;T&gt;(T? value) where T : struct;
}

//works fine
class C1 : I
{
    public void Foo&lt;T&gt;(T value) { }
    public void Foo&lt;T&gt;(T? value) where T : struct { }
}

//several build errors
class C2 : I
{
    void I.Foo&lt;T&gt;(T value) { }

    //error CS0111: Type 'C2' already defines a member called 'I.Foo' with the same parameter types
    void I.Foo&lt;T&gt;(T? value) { }
}
```

Reproducible also in sharplab:
https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLRKgEwPYDsA2AnqgLYQnAQLIA+AAgAwAEdAjANwCwAUE30wEtcMKmCgBjCEwCSPfkwDec+fzoAWJgDFs2ADwAVAHwAKfUwBuUfHAgBKLt2UqWG7XqOmA/Bas3bT534AdwALKikzECZkGAQ4cRgHeQBfHgC6ACYmAGFWJijZXn4lIuc6AGYXLR0DEzNLazsAwKYAXkMmGBCEbCCmXDh8fAdm1Ur1avc67wa/UedQ8KZI6Nj4mHmVds7u3v7B4YDUx1KWLOysgoCSlonpADo3WtMfRv9Tlu2unr6BoZGTrcNA8nh59DNfE0PoEvrtfgckvxkkA=

**Expected Behavior**: Compiles fine as in previous version (VS 2017).

**Actual Behavior**: Does not compile.
</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34507</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34506</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34505</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34504</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34503</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34502</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34501</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.1-preview1-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34500</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure synthesized BoundBaseReference always uses correct type.</Title>
    <Description>
    </Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34498</IssueID>
    <RepoID>1</RepoID>
    <Title>Workaround a CLR deadlock caused by unloading app domains with STA RCWs</Title>
    <Description>If you have an STA thread that created Runtime Callable Wrappers, it's possible to end up in a deadlock where the finalizer and app domain unload code are waiting for each other. The suggested workaround from the CLR team is to wait for finalizers before letting the domain shutdown but while the thread is still running.

Fixes https://github.com/dotnet/roslyn/issues/34248</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34497</IssueID>
    <RepoID>1</RepoID>
    <Title>Introduce variable is missing or requires highlighting</Title>
    <Description>[Internal feedback]
**Version Used**: Visual Studio 2019

**Description**
&gt;1. The option is almost always missing from the quick fixes menu when I want it.
&gt; 2. The requirement of highlighting code to enable it is counter productive.

**Scenario**:
&gt; 1. I‚Äôm writing a method that sends a request, and adds a header to the response before returning it. 
&gt; 2. I write the method call to send the request, which returns can be awaited for an HttpResponseMessage object. 

```csharp
await base.SendAsync(request, cancellationToken);
```
&gt; 3. I would now like to capture the result of this  invocation by introducing a variable. I can highlight the text given above and access the quick fixes menu only to see the following: 

![image](https://user-images.githubusercontent.com/8293542/55042726-1d126180-4ff0-11e9-9655-2ed2dd16bbd4.png)


**Expected Behavior**:
&gt;My expectation, is to see the introduce variable refactoring option when any non-void expression is highlighted. Unfortunately, I rarely see it when I want it, leading me to believe this is not the implementation.
&gt; In my ideal workflow, I don‚Äôt have to touch my mouse for any part of writing code. I use the VIM extension and key binds to navigate files and other shortcuts for switching tabs and opening files.

&gt; With ReSharper using the shortcut to introduce a variable refactoring seems to check the current position of the text cursor (caret). In the above example, any of the following cursor locations would correctly introduce a local variable for the HttpResponseMessage return value:
![image](https://user-images.githubusercontent.com/8293542/55042793-6fec1900-4ff0-11e9-8c3d-ca8d18914077.png)
</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34496</IssueID>
    <RepoID>1</RepoID>
    <Title>Report nullability warnings for user-defined conversions in tuples</Title>
    <Description>
    </Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34495</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve warning messages from nested nullable conversions</Title>
    <Description>```C#
class A
{
    public static implicit operator B?(A a) =&gt; null;
}
class B
{
}
class Program
{
    static void F((object, A) t)
    {
        (object, B) u = t; // warning
    }
}
```
Result:
```
warning CS8601: Possible null reference assignment.
```
Ideally the warning message should mention the item, `t.Item2`, and that a user-defined conversion was involved.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34494</IssueID>
    <RepoID>1</RepoID>
    <Title>VS Visual Basic offers invalid simplification inside "nameof" expression for Keywords</Title>
    <Description>**Version Used**: 
Visual Studio 17 15.9.10
**Steps to Reproduce**:

1. Create simple statement where NameOf is used with a Keyword inside NameOf.
```
Dim NameOfString as String = NameOf([String])
```
2. Above is valid code and NameOfString will be "String"

**Expected Behavior**:
No offer to simplify
**Actual Behavior**:
VS offers and will simplify and remove the []
This causes an error, as the brackets are required</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34493</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34492</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34491</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34490</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34489</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34488</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into master.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-master
git reset --hard upstream/master
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34487</IssueID>
    <RepoID>1</RepoID>
    <Title>Expected behavior when spilling ref receiver for a call to a readonly member</Title>
    <Description>Related to #32911 and maybe #22055

There is a specific case where implicitly spilling a receiver by value is allowed only if the receiver's type is a readonly struct.

```cs
using System;
using System.Threading.Tasks;
readonly struct S { 
    public int M(int i) =&gt; i;
}
public class C {
    ref S Get() =&gt; throw null;
    
    public async Task&lt;int&gt; M(Task&lt;int&gt; t) {
        Get().M(await t); // Spilling permitted
        return 42;
    }
}
```

The check can be found here: https://github.com/dotnet/roslyn/blob/d89223c/src/Compilers/CSharp/Portable/Lowering/SpillSequenceSpiller.cs#L788

The question is, basically: does moving the `readonly` from the `struct S` declaration to the `public int M` declaration result in a legal program? And if so, what's a reasonable way to adjust the check in SpillSequenceSpiller to make that work?

cc @jaredpar @vsadov</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34486</IssueID>
    <RepoID>1</RepoID>
    <Title>Message tweak: Dereference of a possibly null reference</Title>
    <Description>Search &amp; replace change.
Fixes https://github.com/dotnet/roslyn/issues/34408</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34485</IssueID>
    <RepoID>1</RepoID>
    <Title>Change preview warnings from a background to a border marker</Title>
    <Description>- Changes PreviewWarning marker from being a solid background to just being a border marker.

Before:
![image](https://user-images.githubusercontent.com/1408396/55010885-0b5e9900-4fb3-11e9-80dd-acf87edf1556.png)

After:
![image](https://user-images.githubusercontent.com/611219/55095708-d9fad180-5075-11e9-8816-a74d333bbf8e.png)

Fixes https://github.com/dotnet/roslyn/issues/34445</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34484</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to a newer version of CoreCLR</Title>
    <Description>Microsoft.NETCore.App 3.0.0-preview4-27525-12, SDK version 3.0.100-preview4-010963</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34483</IssueID>
    <RepoID>1</RepoID>
    <Title>Inverted precedence parsing range operator</Title>
    <Description>The expression `a * ..b` should produce a syntax error (as `*` binds tighter than `..`) but the parser produces a tree with precedence inversion and no diagnostics.

I believe the correct fix is to use different precedence for `a..b` and `..b` and `a..`, which should be at precedence (1) between shift and additive, (2) unary, and (3) primary, respectively.  The expression `..` should also be a primary.
</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34482</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch expression parser should be resilient to use of `;` instead of `,`</Title>
    <Description>It is easy to accidentally type `;` instead of `,` in a switch expression because of muscle memory  from expression-bodied functions.  So the parser should give a nice diagnostic and error recovery when that happens.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34481</IssueID>
    <RepoID>1</RepoID>
    <Title>Change switch expression to a new precedence level</Title>
    <Description>Fixes #34472</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34480</IssueID>
    <RepoID>1</RepoID>
    <Title>Various fixes for Pull Members Up Dialog</Title>
    <Description>Fix focus of items
Fix accelerator key duplication
Narrator reads the datagrid correctly</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34479</IssueID>
    <RepoID>1</RepoID>
    <Title>Run CI on dev16.1-preview1 branches</Title>
    <Description>CI runs better when it knows to run in the first place</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34478</IssueID>
    <RepoID>1</RepoID>
    <Title>Make struct types readonly in Microsoft.CodeAnalysis.Features</Title>
    <Description>
    </Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34477</IssueID>
    <RepoID>1</RepoID>
    <Title>Cleanup code style in Microsoft.CodeAnalysis.Features</Title>
    <Description>Each commit either applies one Fix All in Project operation (credited to @dotnet-bot) or patches the previous Fix All operation with any observed corrections (credited to @sharwell).</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34476</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix all remaining violations of RS1016</Title>
    <Description>&gt; Code fix providers should provide FixAll support

Closes #23528</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34475</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove PROTOTYPE comments and fix formatting warnings</Title>
    <Description>
    </Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34474</IssueID>
    <RepoID>1</RepoID>
    <Title>GenerateEventCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `GenerateEventCodeFixProvider` does not support Fix All operations. This issue tracks the design and implementation of such an operation.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34473</IssueID>
    <RepoID>1</RepoID>
    <Title>GenerateEndConstructCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `GenerateEndConstructCodeFixProvider` does not support Fix All operations. This issue tracks the design and implementation of such a feature, if relevant for user code.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34472</IssueID>
    <RepoID>1</RepoID>
    <Title>Change switch expression to a new precedence level</Title>
    <Description>On 2019-03-13 the LDM decided to change the precedence of the switch expression to a new precedence level between unary and multiplicative.  This issue tracks the implementation of that decision.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34471</IssueID>
    <RepoID>1</RepoID>
    <Title>MoveToTopOfFileCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `MoveToTopOfFileCodeFixProvider` does not support Fix All operations. It seems like it would be reasonably straightforward to implement, should users be encountering situations where it would be relevant.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34470</IssueID>
    <RepoID>1</RepoID>
    <Title>CorrectNextControlVariableCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `CorrectNextControlVariableCodeFixProvider` does not support Fix All. This issue tracks the design and implementation of such a feature, if relevant.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34469</IssueID>
    <RepoID>1</RepoID>
    <Title>InsertMissingCastCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `InsertMissingCastCodeFixProvider` does not support Fix All operations. This issue tracks the design and implementation of this operation.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34468</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly members prototype cleanup</Title>
    <Description>Related to #32911 

This PR has several minor fixes and adds coverage for some new scenarios.

- Addresses and removes prototype comments (except for the public API ones in #34514)
- Updates `ThisParameterSymbol.RefKind` API to use RefKind.In when containingMethod.IsEffectivelyReadOnly
- Updates compiler test plan to mention readonly members
- Tests codegen of ReadOnlyMethod_OverrideBaseMethod
- Tests `readonly partial` methods: both signatures must contain `readonly`. Is this what we want?
  - Resolution: either both signatures or neither signature must contain 'readonly'.
- Tests readonly explicit interface implementations. These are allowed. Do we want that?
  - Resolution: 'readonly' explicit interface implementations are allowed.

The last few items might need to be hashed out in review and the speclet should probably be updated to be clear about the expected behavior. (done)</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34467</IssueID>
    <RepoID>1</RepoID>
    <Title>Failure of Microsoft.CodeAnalysis.VisualBasic.UnitTests.GroupClassTests.SimpleTest1</Title>
    <Description>``` none
Test Name:	Microsoft.CodeAnalysis.VisualBasic.UnitTests.GroupClassTests.SimpleTest1
Test FullName:	Microsoft.CodeAnalysis.VisualBasic.UnitTests.GroupClassTests.SimpleTest1
Test Source:	D:\Roslyn\src\Compilers\VisualBasic\Test\Symbol\SymbolsTests\Source\GroupClassTests.vb : line 12
Test Outcome:	Failed
Test Duration:	0:00:02.246

Result StackTrace:	
at Roslyn.Test.Utilities.Desktop.DesktopRuntimeEnvironment.Execute(String moduleName, String[] args, String expectedOutput) in D:\Roslyn\src\Test\Utilities\Portable\Platform\Desktop\DesktopRuntimeEnvironment.cs:line 245
   at Microsoft.CodeAnalysis.Test.Utilities.CompilationVerifier.Emit(String expectedOutput, Nullable`1 expectedReturnCode, String[] args, IEnumerable`1 manifestResources, EmitOptions emitOptions, Verification peVerify, SignatureDescription[] expectedSignatures) in D:\Roslyn\src\Test\Utilities\Portable\CompilationVerifier.cs:line 201
   at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.Emit(Compilation compilation, IEnumerable`1 dependencies, IEnumerable`1 manifestResources, SignatureDescription[] expectedSignatures, String expectedOutput, Nullable`1 expectedReturnCode, String[] args, Action`1 assemblyValidator, Action`1 symbolValidator, EmitOptions emitOptions, Verification verify) in D:\Roslyn\src\Test\Utilities\Portable\CommonTestBase.cs:line 154
   at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompileAndVerifyCommon(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 assemblyValidator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Nullable`1 expectedReturnCode, String[] args, EmitOptions emitOptions, Verification verify) in D:\Roslyn\src\Test\Utilities\Portable\CommonTestBase.cs:line 68
   at Microsoft.CodeAnalysis.VisualBasic.UnitTests.BasicTestBase.CompileAndVerify(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 validator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Nullable`1 expectedReturnCode, String[] args, EmitOptions emitOptions, Verification verify) in D:\Roslyn\src\Compilers\Test\Utilities\VisualBasic\BasicTestBase.vb:line 73
   at Microsoft.CodeAnalysis.VisualBasic.UnitTests.BasicTestBase.CompileAndVerify(Compilation compilation, XCData expectedOutput, String[] args, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 validator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, EmitOptions emitOptions, Verification verify) in D:\Roslyn\src\Compilers\Test\Utilities\VisualBasic\BasicTestBase.vb:line 101
   at Microsoft.CodeAnalysis.VisualBasic.UnitTests.GroupClassTests.SimpleTest1() in D:\Roslyn\src\Compilers\VisualBasic\Test\Symbol\SymbolsTests\Source\GroupClassTests.vb:line 142
Result Message:	
Roslyn.Test.Utilities.ExecutionException : 
Execution failed for assembly 'C:\Users\ngafter\AppData\Local\Temp\RoslynTests'.
Expected: 
m_DefaultInstanceTest1 DefaultInstanceTest1 Public
  System.ComponentModel.EditorBrowsableAttribute
m_DefaultInstanceTest2 DefaultInstanceTest2 Public
  System.ComponentModel.EditorBrowsableAttribute
----------------------
Create PrivateScope, Private, Static IL
Dispose PrivateScope, Private, Static IL
get_DefaultInstanceTest1 PrivateScope, Public, SpecialName IL
  System.Diagnostics.DebuggerHiddenAttribute
get_DefaultInstanceTest2 PrivateScope, Public, SpecialName IL
  System.Diagnostics.DebuggerHiddenAttribute
set_DefaultInstanceTest1 PrivateScope, Public, SpecialName IL
  System.Diagnostics.DebuggerHiddenAttribute
set_DefaultInstanceTest2 PrivateScope, Public, SpecialName IL
  System.Diagnostics.DebuggerHiddenAttribute
----------------------
DefaultInstanceTest1 None
DefaultInstanceTest2 None

Actual:   m_DefaultInstanceTest1 DefaultInstanceTest1 Public
  System.ComponentModel.EditorBrowsableAttribute
m_DefaultInstanceTest2 DefaultInstanceTest2 Public
  System.ComponentModel.EditorBrowsableAttribute
----------------------
Create PrivateScope, Private, Static Managed
Dispose PrivateScope, Private, Static Managed
get_DefaultInstanceTest1 PrivateScope, Public, SpecialName Managed
  System.Diagnostics.DebuggerHiddenAttribute
get_DefaultInstanceTest2 PrivateScope, Public, SpecialName Managed
  System.Diagnostics.DebuggerHiddenAttribute
set_DefaultInstanceTest1 PrivateScope, Public, SpecialName Managed
  System.Diagnostics.DebuggerHiddenAttribute
set_DefaultInstanceTest2 PrivateScope, Public, SpecialName Managed
  System.Diagnostics.DebuggerHiddenAttribute
----------------------
DefaultInstanceTest1 None
DefaultInstanceTest2 None
```
</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34466</IssueID>
    <RepoID>1</RepoID>
    <Title>IncorrectExitContinueCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `IncorrectExitContinueCodeFixProvider` does not support Fix All operations. This issue tracks designing and implementing Fix All support for this code fix.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34465</IssueID>
    <RepoID>1</RepoID>
    <Title>AbstractFullyQualifyCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `AbstractFullyQualifyCodeFixProvider` does not support Fix All operations. Two possible ways to support this feature are:

1. Fix All fixes all cases where the resolution is the same (e.g. add `System.` to all unresolved references to `Action`)
2. Fix All fixes all unambiguous cases, similar to how @JoeRobich implemented the Fix Imports After Paste operation

Related to #34457</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34464</IssueID>
    <RepoID>1</RepoID>
    <Title>GenerateEnumMemberCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `GenerateEnumMemberCodeFixProvider` does not support Fix All operations. Unlike most code fixes that extend `AbstractGenerateMemberCodeFixProvider`, generation of enum members seems like a reasonable possibility.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34463</IssueID>
    <RepoID>1</RepoID>
    <Title>AbstractChangeToAsyncCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `AbstractChangeToAsyncCodeFixProvider` does not support Fix All. This issue tracks the possibility of implementing Fix All support for this code fix.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34462</IssueID>
    <RepoID>1</RepoID>
    <Title>AbstractSpellCheckCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `AbstractSpellCheckCodeFixProvider` does not support Fix All. This feature could be implemented by applying the same solution to the same spelling error in each case where it applies in the Fix All scope.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34461</IssueID>
    <RepoID>1</RepoID>
    <Title>AbstractResolveConflictMarkerCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Fix All support should be added to `AbstractResolveConflictMarkerCodeFixProvider`, with the ability to apply one of the specific resolutions to all conflicts in the Fix All scope.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34460</IssueID>
    <RepoID>1</RepoID>
    <Title>AbstractAddAwaitCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `AbstractAddAwaitCodeFixProvider` does not support Fix All operations. This issue tracks the possibility of implementing this support.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34459</IssueID>
    <RepoID>1</RepoID>
    <Title>AbstractAddMissingReferenceCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `AbstractAddMissingReferenceCodeFixProvider` does not support Fix All operations. It may be possible to implement at least Fix All in Solution.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34458</IssueID>
    <RepoID>1</RepoID>
    <Title>AbstractAddSpecificPackageCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `AbstractAddSpecificPackageCodeFixProvider` does not support Fix All operations. It may be possible to implement at least Fix All in Solution.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34457</IssueID>
    <RepoID>1</RepoID>
    <Title>AbstractAddImportCodeFixProvider does not support Fix All</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

Currently `AbstractAddImportCodeFixProvider` does not support Fix All operations. Two possible ways to support this feature are:

1. Fix All fixes all cases where the resolution is the same (e.g. add `using System` to all documents with an unresolved reference to `Action`)
2. Fix All fixes all unambiguous cases, similar to how @JoeRobich implemented the Fix Imports After Paste operation</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34456</IssueID>
    <RepoID>1</RepoID>
    <Title>Test helpers utilized by Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.Completion.CompletionProviders.ExplicitInterfaceMemberCompletionProviderTests do not handle ```&lt;Workspace&gt;``` markup. This blocks verification of some test scenarios.</Title>
    <Description>```
        [Fact, Trait(Traits.Feature, Traits.Features.Completion)]
        public async Task NotInaccessibleMember_01()
        {
            var markup =
@"&lt;Workspace&gt;
    &lt;Project Language=""C#"" AssemblyName=""Assembly1"" CommonReferences=""true""&gt;
        &lt;ProjectReference&gt;Assembly2&lt;/ProjectReference&gt;
        &lt;Document FilePath=""Test1.cs""&gt;
&lt;![CDATA[
class Bar : IGoo
{
     void IGoo.$$
}
]]&gt;
        &lt;/Document&gt;
    &lt;/Project&gt;
    &lt;Project Language=""C#"" AssemblyName=""Assembly2"" CommonReferences=""true"" LanguageVersion=""Preview""&gt;
        &lt;Document FilePath=""Test2.cs""&gt;
interface IGoo
{
    internal void Goo1() {}
    internal int Prop1 { get =&gt; 0; }
    protected void Goo2() {}
    protected int Prop2 { get =&gt; 0; }
}
        &lt;/Document&gt;
    &lt;/Project&gt;
&lt;/Workspace&gt;";

            await VerifyItemExistsAsync(markup, "Goo1()"); // PROTOTYPE(DefaultInterfaceImplementation): Should use VerifyItemIsAbsentAsync instead after test infrastructure is changed to actually build two distinct projects from the XML 
            await VerifyItemExistsAsync(markup, "Prop1"); // PROTOTYPE(DefaultInterfaceImplementation): Should use VerifyItemIsAbsentAsync instead after test infrastructure is changed to actually build two distinct projects from the XML 
            await VerifyItemExistsAsync(markup, "Goo2()");
            await VerifyItemExistsAsync(markup, "Prop2");
        }

        [Fact, Trait(Traits.Feature, Traits.Features.Completion)]
        public async Task NotInaccessibleMember_02()
        {
            var markup =
@"&lt;Workspace&gt;
    &lt;Project Language=""C#"" AssemblyName=""Assembly1"" CommonReferences=""true""&gt;
        &lt;ProjectReference&gt;Assembly2&lt;/ProjectReference&gt;
        &lt;Document FilePath=""Test1.cs""&gt;
&lt;![CDATA[
interface IBar : IGoo
{
     void IGoo.$$
}
]]&gt;
        &lt;/Document&gt;
    &lt;/Project&gt;
    &lt;Project Language=""C#"" AssemblyName=""Assembly2"" CommonReferences=""true"" LanguageVersion=""Preview""&gt;
        &lt;Document FilePath=""Test2.cs""&gt;
interface IGoo
{
    internal void Goo1() {}
    internal int Prop1 { get =&gt; 0; }
    protected void Goo2() {}
    protected int Prop2 { get =&gt; 0; }
}
        &lt;/Document&gt;
    &lt;/Project&gt;
&lt;/Workspace&gt;";

            await VerifyItemExistsAsync(markup, "Goo1()"); // PROTOTYPE(DefaultInterfaceImplementation): Should use VerifyItemIsAbsentAsync instead after test infrastructure is changed to actually build two distinct projects from the XML 
            await VerifyItemExistsAsync(markup, "Prop1"); // PROTOTYPE(DefaultInterfaceImplementation): Should use VerifyItemIsAbsentAsync instead after test infrastructure is changed to actually build two distinct projects from the XML 
            await VerifyItemExistsAsync(markup, "Goo2()");
            await VerifyItemExistsAsync(markup, "Prop2");
        }
```</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34455</IssueID>
    <RepoID>1</RepoID>
    <Title>An error message might need an adjustment for an attempt to implement a private accessor of a virtual property</Title>
    <Description>```
        [Fact]
        public void PropertyModifiers_27()
        {
            var source1 =
@"
public interface I1
{
    int P3
    {
        private get {throw null;} 
        set {}
    }

    int P4
    {
        get {throw null;} 
        private set {}
    }
}

class Test1 : I1
{
    int I1.P3
    {
        get {throw null;} 
        set {}
    }

    int I1.P4
    {
        get {throw null;} 
        set {}
    }
}

interface ITest1 : I1
{
    int I1.P3
    {
        get {throw null;} 
        set {}
    }

    int I1.P4
    {
        get {throw null;} 
        set {}
    }
}

public interface I2
{
    int P5
    {
        private get {throw null;} 
        set {}
    }

    int P6
    {
        get {throw null;} 
        private set {}
    }

    class Test3 : I2
    {
        int I2.P5
        {
            get {throw null;} 
            set {}
        }

        int I2.P6
        {
            get {throw null;} 
            set {}
        }
    }

    interface ITest3 : I2
    {
        int I2.P5
        {
            get {throw null;} 
            set {}
        }

        int I2.P6
        {
            get {throw null;} 
            set {}
        }
    }
}
";
            var compilation1 = CreateCompilation(source1, options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All),
                                                 parseOptions: TestOptions.Regular,
                                                 targetFramework: TargetFramework.NetStandardLatest);
            Assert.True(compilation1.Assembly.RuntimeSupportsDefaultInterfaceImplementation);

            // PROTOTYPE(DefaultInterfaceImplementation): The wording "accessor not found in interface member" is somewhat misleading
            //                                            in this scenario. The accessor is there, but cannot be implemented. Prehaps
            //                                            the message should be adjusted. Should also check diagnostics for an attempt
            //                                            to implement other sealed members.
            compilation1.VerifyDiagnostics(
                // (21,9): error CS0550: 'Test1.I1.P3.get' adds an accessor not found in interface member 'I1.P3'
                //         get {throw null;} 
                Diagnostic(ErrorCode.ERR_ExplicitPropertyAddingAccessor, "get").WithArguments("Test1.I1.P3.get", "I1.P3").WithLocation(21, 9),
                // (28,9): error CS0550: 'Test1.I1.P4.set' adds an accessor not found in interface member 'I1.P4'
                //         set {}
                Diagnostic(ErrorCode.ERR_ExplicitPropertyAddingAccessor, "set").WithArguments("Test1.I1.P4.set", "I1.P4").WithLocation(28, 9),
                // (36,9): error CS0550: 'ITest1.I1.P3.get' adds an accessor not found in interface member 'I1.P3'
                //         get {throw null;} 
                Diagnostic(ErrorCode.ERR_ExplicitPropertyAddingAccessor, "get").WithArguments("ITest1.I1.P3.get", "I1.P3").WithLocation(36, 9),
                // (43,9): error CS0550: 'ITest1.I1.P4.set' adds an accessor not found in interface member 'I1.P4'
                //         set {}
                Diagnostic(ErrorCode.ERR_ExplicitPropertyAddingAccessor, "set").WithArguments("ITest1.I1.P4.set", "I1.P4").WithLocation(43, 9),
                // (65,13): error CS0550: 'I2.Test3.I2.P5.get' adds an accessor not found in interface member 'I2.P5'
                //             get {throw null;} 
                Diagnostic(ErrorCode.ERR_ExplicitPropertyAddingAccessor, "get").WithArguments("I2.Test3.I2.P5.get", "I2.P5").WithLocation(65, 13),
                // (72,13): error CS0550: 'I2.Test3.I2.P6.set' adds an accessor not found in interface member 'I2.P6'
                //             set {}
                Diagnostic(ErrorCode.ERR_ExplicitPropertyAddingAccessor, "set").WithArguments("I2.Test3.I2.P6.set", "I2.P6").WithLocation(72, 13),
                // (80,13): error CS0550: 'I2.ITest3.I2.P5.get' adds an accessor not found in interface member 'I2.P5'
                //             get {throw null;} 
                Diagnostic(ErrorCode.ERR_ExplicitPropertyAddingAccessor, "get").WithArguments("I2.ITest3.I2.P5.get", "I2.P5").WithLocation(80, 13),
                // (87,13): error CS0550: 'I2.ITest3.I2.P6.set' adds an accessor not found in interface member 'I2.P6'
                //             set {}
                Diagnostic(ErrorCode.ERR_ExplicitPropertyAddingAccessor, "set").WithArguments("I2.ITest3.I2.P6.set", "I2.P6").WithLocation(87, 13)
                );
        }
```

In similar situation with overriding compiler uses "no suitable method found to override"
Note, on import we might drop the private accessor. It would be good to not report different error in this case.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34454</IssueID>
    <RepoID>1</RepoID>
    <Title>üîº Avoid FailFast for VS service missing during shutdown</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/823554</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34453</IssueID>
    <RepoID>1</RepoID>
    <Title>Implementation/usage of TypeSymbol.CheckForImplementationOfCorrespondingPropertyOrEvent might need an adjustment for Default Interface Implementations</Title>
    <Description>```
            // Dev10 has some extra restrictions and extra wiggle room when finding implicit
            // implementations for interface accessors.  Perform some extra checks and possibly
            // update the result (i.e. implicitImpl).
            if (interfaceMember.IsAccessor())
            {
                // PROTOTYPE(DefaultInterfaceImplementation): Do we need to adjust behavior of this function in any way?
                CheckForImplementationOfCorrespondingPropertyOrEvent((MethodSymbol)interfaceMember, implementingType, implementingTypeIsFromSomeCompilation, ref implicitImpl);
            }
```</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34452</IssueID>
    <RepoID>1</RepoID>
    <Title>A workaround in TypeSymbol.ComputeImplementationForInterfaceMember might need an adjustment for Default Interface Implementations</Title>
    <Description>```
                // WORKAROUND: see comment on method.
                // PROTOTYPE(DefaultInterfaceImplementation): Is this workaround still relevant? Do we need it when we are looking
                //                                            for implementations in interfaces?
                if (IsExplicitlyImplementedViaAccessors(interfaceMember, currType, out Symbol currTypeExplicitImpl))
                {
                    // NOTE: may be null.
                    return currTypeExplicitImpl;
                }
```</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34451</IssueID>
    <RepoID>1</RepoID>
    <Title>A comment in OverloadResolution.GetUserDefinedOperators should be adjusted</Title>
    <Description>```
            // PROTOTYPE(DefaultInterfaceImplementation): The spec quote should be adjusted to cover operators from interfaces as well.
            // From https://github.com/dotnet/csharplang/blob/master/meetings/2017/LDM-2017-06-27.md:
            // - We only even look for operator implementations in interfaces if one of the operands has a type that is an interface or
            // a type parameter with a non-empty effective base interface list.
            // - The applicable operators from classes / structs shadow those in interfaces.This matters for constrained type parameters:
            // the effective base class can shadow operators from effective base interfaces.
            // - If we find an applicable candidate in an interface, that candidate shadows all applicable operators in base interfaces:
            // we stop looking.
```</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34450</IssueID>
    <RepoID>1</RepoID>
    <Title>How to save modified solution or project?</Title>
    <Description>**Version Used**: 2.10

I need to add some projects, which are very useful in code rewriting, to solution. After code rewriting I got code which depends on entities from added projects. I want to save modified solution and projects, but I can't find methods to get text from solution or project.
</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34449</IssueID>
    <RepoID>1</RepoID>
    <Title>Running editorconfig static analyzer from command line</Title>
    <Description>I was wondering if there is an easy way of running the static analyzer some files from the command line by using roslyn and editorconfig.

Current command `/a` runs all the analyzers, not only the ones present in editorconfig.
This small change could be a great improvement for CI builds when you can trigger a build failure if the rules aren't satisfied.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34448</IssueID>
    <RepoID>1</RepoID>
    <Title>Unused value analyzer false positive with ??=</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

**Steps to Reproduce**:

```csharp
object value = null;
foreach (var item in set) {
  if (item is null)
    continue;

  value ??= new object();
  Console.WriteLine(value.GetHashCode());
}
```

**Expected Behavior**:

IDE0059 is not reported for the declaration of `value`.

**Actual Behavior**:

IDE0059 is reported, and the code fix leaved the code not able to compile.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34447</IssueID>
    <RepoID>1</RepoID>
    <Title>IncrementalAnalyzerProcessor.GetActiveProject returns null</Title>
    <Description>This method should be fixed or removed.

https://github.com/dotnet/roslyn/blob/b28ec8a8fff49553516e6af0123ff0c2dac08f82/src/Features/Core/Portable/SolutionCrawler/WorkCoordinator.IncrementalAnalyzerProcessor.cs#L262-L275</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34446</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve IDE0059 code fix for TryGetValue</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

**Steps to Reproduce**:

```csharp
string Method(IDictionary&lt;int, string&gt; map, int key)
{
  if (map.TryGetValue(key, out var text))
  {
    return map[key];
  }

  return null;
}
```

Apply the code fix for IDE0059 reported for the unused variable `text`.

**Expected Behavior**:

```csharp
string Method(IDictionary&lt;int, string&gt; map)
{
  if (map.TryGetValue(key, out var text))
  {
    return text;
  }

  return null;
}
```

**Actual Behavior**:

```csharp
string Method(IDictionary&lt;int, string&gt; map)
{
  if (map.TryGetValue(key, out _))
  {
    return map[key];
  }

  return null;
}
```
</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34445</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot read preview for IDE0059 code fix</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

**Steps to Reproduce**:

Apply the suggested IDE0059 code fix for this line:
https://github.com/dotnet/roslyn/blob/b28ec8a8fff49553516e6af0123ff0c2dac08f82/src/Features/Core/Portable/QuickInfo/IndentationHelper.cs#L36

**Expected Behavior**:

Preview is clear.

**Actual Behavior**:

![image](https://user-images.githubusercontent.com/1408396/55010885-0b5e9900-4fb3-11e9-80dd-acf87edf1556.png)
</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34444</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect fading for redundant initialization</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

**Steps to Reproduce**:

```csharp
object value = null;
value = new object();
```

**Expected Behavior**:

The initializing expression `= null` is faded out.

**Actual Behavior**:

The variable declaration `value` is faded out, and the initializing expression is *not* faded.
</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34443</IssueID>
    <RepoID>1</RepoID>
    <Title>Review InMemoryStorage.Remove for race conditions</Title>
    <Description>What happens if a new item is added to `analyzerMap` after the `IsEmpty` check?

https://github.com/dotnet/roslyn/blob/b28ec8a8fff49553516e6af0123ff0c2dac08f82/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.InMemoryStorage.cs#L50-L55</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34442</IssueID>
    <RepoID>1</RepoID>
    <Title>potential API to allow VS extensions to correctly rename symbols</Title>
    <Description>
    </Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34441</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 suppression for CancellationToken</Title>
    <Description>**Version Used**: Visual Studio 2019 RC

**Steps to Reproduce**:

1. Define a private asynchronous method which takes a `CancellationToken` as the final parameter
2. Do not use the cancellation token

**Expected Behavior**:

IDE0060 is not reported.

**Actual Behavior**:

IDE0060 is reported.

**Proposed Solution**:

Add a new exception to IDE0060 for a `CancellationToken` parameter with the name `cancellationToken`, similar to the current discard names which are ignored.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34440</IssueID>
    <RepoID>1</RepoID>
    <Title>Export additional code styles in .editorconfig generation</Title>
    <Description>~~Builds on #33946~~
Possibly supersedes #34122 

* Export using directives styles when generating .editorconfig (Fixes #33766)
* Export naming styles when generating .editorconfig (Fixes #30086)</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34439</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34438</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34437</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34436</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34435</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34434</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34433</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust Find All References and Go To Implementation for Default Interface Methods</Title>
    <Description>- Include non-abstract definition into the implementations result.
- Include implementations from derived interfaces into the result.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34432</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34431</IssueID>
    <RepoID>1</RepoID>
    <Title>Issue a compiler warning when using the is operator to compare a variable of a non-nullable reference type with its declared type.</Title>
    <Description>&lt;p&gt;I am currently debugging a library following some refactoring where a similar expression was used by mistake. I feel it would be helpful if this would issue a compiler warning to make the problem easier to find, similar to how the same thing with a non-nullable value type issues a warning.&lt;/p&gt;&lt;p&gt;The following is example C# code that would issue this warning:&lt;/p&gt;&lt;pre&gt;#nullable enable
bool isString(string s) =&amp;gt; s is string;&lt;/pre&gt;&lt;p&gt;Of course, the is operator would return false if s were null, but s is declared non-nullable.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/502487/issue-a-compiler-warning-when-using-the-is-operato.html
VSTS ticketId: 825470_
_These are the original issue comments:_

Jane Wu [MSFT] on 3/22/2019, 02:02 AM (3 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34430</IssueID>
    <RepoID>1</RepoID>
    <Title>Wait for fully loaded workspace before allowing code cleanup.</Title>
    <Description>Redo of #34175 with the new master changes.

Wait until solution is fully loaded when the user hits the code broom.
![code_broom_wait](https://user-images.githubusercontent.com/5749229/54462191-18b29280-472c-11e9-97e8-d366640cc1d3.gif)</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34429</IssueID>
    <RepoID>1</RepoID>
    <Title>Add public API implementation and wire it up to the rewriter.</Title>
    <Description>This adds an initial implementation of the API and hooks it up the rewriter information, and addresses a few prototype comments (while also adding a few more). We'll need to have a more fine-grained control over whether to enable the nullable analysis than the global context option, but I'm using that for now as it's a simple solution and works well for our tests. I've hooked up the API to our `VerifyTypes` hook, which is now using entirely public APIs instead of manually binding nodes and running the walker. @AlekseyTs specifically for review, as this is doing a bunch of stuff in the semantic model. @dotnet/roslyn-compiler for review.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34428</IssueID>
    <RepoID>1</RepoID>
    <Title>remove double execute command handler pattern we have.</Title>
    <Description>I think we have this pattern

http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/Implementation/ExtractMethod/AbstractExtractMethodCommandHandler.cs,81

where we get a document and check things like 
&gt; if (!supportsFeatureService.SupportsRefactorings(document))

and then dig in
&gt; return Execute(args.SubjectBuffer, args.TextView, context.OperationContext);

and get a document again to avoid a case where we get 2 different documents in 1 method.

with @dibarbet clean up - https://github.com/dotnet/roslyn/pull/34314

we should be able to clean up those patterns. and make all these checking to be centralized in some system?</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34427</IssueID>
    <RepoID>1</RepoID>
    <Title>"Pull members up to base type" refactoring should shorten type references</Title>
    <Description>&lt;p&gt;Currently when I use the &amp;quot;Pull members up to base type&amp;quot; refactoring, the resulting code in the base type has any generated code fully namespaced.&lt;/p&gt;&lt;p&gt;For example, consider the following code:&lt;/p&gt;&lt;pre&gt;using System.Collections.Generic;

public class MyClass : IMyInterface
{
    IList&amp;lt;Info&amp;gt; GetInfo();
}&lt;/pre&gt;&lt;p&gt;Pulling the GetInfo method below up into the interface results in the following code generated in the interface:&lt;/p&gt;&lt;pre&gt;public interface IMyInterface
{
    System.Collections.Generic.IList&amp;lt;Info&amp;gt; GetInfo();
}&lt;/pre&gt;&lt;p&gt;This is a trivial example with only one required namespace, it can look a real mess where more namespaces need to be pulled in.&lt;/p&gt;&lt;p&gt;My suggestion is that the code refactoring should automatically shorten type definitions, adding in using statements as required.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/501399/pull-members-up-to-base-type-refactoring-should-sh.html
VSTS ticketId: 825054_
_These are the original issue comments:_

Jane Wu [MSFT] on 3/22/2019, 02:04 AM (3 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34426</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34425</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34424</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34423</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34422</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34421</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix build correctness</Title>
    <Description>The project which deploys ILASM tools ends up bringing two runtime
packages that have the same assets:

- runtime.win-x64.microsoft.netcore.runtime.coreclr
- runtime.win-x64.microsoft.netcore.app

Specifically assets like SOS.NetCore.dll exists at different versions in
these packages and end up getting copied twice to the output directory.
This double write ends up breaking our build (as well as basic
isolation).

The short term fix here is to no longer treat this as a code project but
instead a tools project. That eliminates the MS.NetCore.app package and
the associated double writes

Long term though the root issue needs to be addressed: making ilasm and
ildasm easier to deploy.

dotnet/coreclr#15059</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34420</IssueID>
    <RepoID>1</RepoID>
    <Title>Unit tests are needed for Code Cleanup</Title>
    <Description>A targeted unit test is missing for https://github.com/dotnet/roslyn/pull/32175#discussion_r247572698.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34419</IssueID>
    <RepoID>1</RepoID>
    <Title>Cleanup project only runs on one target framework</Title>
    <Description>&gt; have we considered apply clean up on all context for multitargeted projects? like the way @genlu  did for his sync namepsace to folder name stuff?
&gt;
&gt; asking since context is only exposed through editor but not through solution explorer? or should we ask platform team to expose context in code clean up menu in solution explorer?

_Originally posted by @heejaechang in https://github.com/dotnet/roslyn/pull/32175#discussion_r267840181_

&gt; so, this handle all multitarget project case? so, the service itself can handle multi-targetting? @genlu had some complication on sync folder/namespace fix on multi targetting. so might be good person to code review this area?

_Originally posted by @heejaechang in https://github.com/dotnet/roslyn/pull/32175#discussion_r267852007_
</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34418</IssueID>
    <RepoID>1</RepoID>
    <Title>Consolidate generated code checks for code fixes</Title>
    <Description>&gt; I see this generated code kind of checks for fixer in arbitary places.. we probably need to discuss and create some kind of central thing? otherwise, this behavior seems hard to make consistent?

_Originally posted by @heejaechang in https://github.com/dotnet/roslyn/pull/32175#discussion_r267858835_</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34417</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto population of lambda expression for delegate assignment</Title>
    <Description>Customer request copying here.

**Version Used**: Visual Studio 2017 and Visual Studio 2019 Preview

**Steps to Reproduce**:

&gt; Useful feature is auto population of lambda expression for delegate assignment. 

&gt; With Resharper, when you type ServicePointManager.ServerCertificateValidationCallback +=

&gt; You get suggestion with (sender, cert, chain, err) =&gt; ; Same when you initialize event. 

&gt; Vs2019 preview 3 only suggests named event handler method. It would be very helpful to 

&gt; suggest lambda expression for delegate. meaning when I type ‚Äú+=‚Äù the lambda expression is 

&gt; in the suggestions. Visual studio‚Äôs suggestions include a named method while Resharper 

&gt; suggests both the named method and lambda expression. </Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34416</IssueID>
    <RepoID>1</RepoID>
    <Title>Update infrastructure for 16.1 preview1</Title>
    <Description>- Add new dev16.1 preview1 branches to CI
- Update master to beta2
- Add publishing for dev16.1 preview1 branch</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34415</IssueID>
    <RepoID>1</RepoID>
    <Title>remove IWorkspaceStatusService and add proper one once prototype work is done</Title>
    <Description>right now, we are in prototype mode for partial solution feature. it might or might not get in depending on the exercise we are doing among multiple teams.

this tracks once everything is settled, we clean up things we added for prototyping.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34414</IssueID>
    <RepoID>1</RepoID>
    <Title>Unused assignment analysis isn't handling `??=` correctly</Title>
    <Description>```C#
using System;

public class C
{
    public void M(object o = null /* Flagged as unused value */)
    {
        o ??= "Hello world";
        Console.WriteLine(o);
    }

    public void M2(object o)
    {
        o = GetObject(); // Flagged as unused value
        o ??= "Hello world";
        Console.WriteLine(o);
    }

    public void M3()
    {
        object o = GetObject(); // Not flagged as unused value?
        o ??= "Hello world";
        Console.WriteLine(o);
    }

    object GetObject() =&gt; throw null;
}
```

The first two are, for some reason, flagged as unused, but not the third. /cc @genlu @mavasani.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>09/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34413</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn dev16.0-vs-deps | 20190325</Title>
    <Description>
    </Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34412</IssueID>
    <RepoID>1</RepoID>
    <Title>Use a single representation of non-nullable value types in the compiler</Title>
    <Description>```C#
#nullable enable
public class C
{
	public int i;
}
```

For the above code, `FieldSymbol.TypeWithAnnotations` is different for the field `i` between source and metadata. When the `FieldSymbol` is created from source, it has a `TypeWithAnnotations` of `NotAnnotated`. When the `FieldSymbol` is parsed from metadata, it has a `TypeWithAnnotations` of `Oblivious`. This is because we don't emit a `Nullable` attribute for the field, as it's a value type and can never be null. We should make our handling of these consistent between source and metadata, as this will affect the public API.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34411</IssueID>
    <RepoID>1</RepoID>
    <Title>Should reachability affect nullability of ref conditionals?</Title>
    <Description>In `(true ? ref notNullableString : ref nullableString) = null;` we warn that the two nullabilities (`ref notNullableString` and `ref nullableString`) don't match. 
Should we also warn about the assignment of `null`, or instead only consider the reachable branch to determine the L-value annotation of the ternary?

Relates to https://github.com/dotnet/roslyn/pull/34323#pullrequestreview-218426166</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34410</IssueID>
    <RepoID>1</RepoID>
    <Title>QuickInfo on ranges and indexes</Title>
    <Description>We should review what is currently displayed in QuickInfo for ranges and indexes (`x..y`, `x..^y`, `^y`, ...).
In particular, we may be able to alleviate some confusion on `^1`.

FYI @agocke </Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34409</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove hard-coded nullable annotations in compiler before C# 8.0 RTM</Title>
    <Description>
    </Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34408</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix message "Possible dereference of a null reference"</Title>
    <Description>The dereference is certain.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34407</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: add contextual variable `cancellationToken`</Title>
    <Description>Also, you cannot have an async-enumerable method with a parameter called `cancellationToken`. If you do, maybe a fixer helps fix your code.

Also, we warn if you pass a `CancellationToken x` parameter.

IDE: this variable cannot be renamed (like `value`).</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>20/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34406</IssueID>
    <RepoID>1</RepoID>
    <Title>Add tests for renaming to 'unmanaged' or 'nameof'</Title>
    <Description>&gt; FYI: 'unmanaged' is another one of those special names.  as is 'nameof'.  Possibly things to look into.

_Originally posted by @CyrusNajmabadi in https://github.com/dotnet/roslyn/pull/34391#discussion_r268797982_</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34405</IssueID>
    <RepoID>1</RepoID>
    <Title>VB EnC: Allow editing method containing a static variable</Title>
    <Description>Using VS Community 2017 v 15.9.&lt;br&gt;&lt;br&gt;I've had no problem with previous versions, but in 2017 I can't edit and continue.  Get the message:&lt;br&gt;&lt;br&gt;&amp;quot;Edits were made to the code which cannot be applied while debugging.&amp;quot;&lt;br&gt;&lt;br&gt;I'm forced to stop and edit or to restart.  I cannot edit and continue.  Any (valid) changes I make are met with this error.&lt;br&gt;&lt;br&gt;The errors within VS 2017 show &amp;quot;modifying method which contains a static variable will prevent the debug session fromn continuing&amp;quot;.&lt;br&gt;&lt;br&gt;This was never a problem in previous versions.&lt;br&gt;&lt;br&gt;What has changed?  Is there a way to fix this?&lt;br&gt;&lt;br&gt;Dave W.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/383111/edit-and-continue-fails.html
VSTS ticketId: 729878_
</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34404</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly members LangVersion checks</Title>
    <Description>Related to #32911 

Ensures that the readonly members feature cannot be used on 7.3 and earlier language versions.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34403</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34402</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not qualify instance member access within a constructor initializer</Title>
    <Description>Fixes #32093</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34401</IssueID>
    <RepoID>1</RepoID>
    <Title>Typo fix</Title>
    <Description>Notice and fixed typo in documentation</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34400</IssueID>
    <RepoID>1</RepoID>
    <Title>Brace completion via Tab does not trigger formatting</Title>
    <Description>From https://github.com/dotnet/roslyn/pull/33983#issuecomment-475332589:

&gt; Caused by #33983: users who have automatic brace completion enabled *and* use &lt;kbd&gt;Tab&lt;/kbd&gt; to complete the closing parentheses could end up in a state where the indentation of the `using (true)` line is incorrect. We don't believe this will cause problems, but if it does we could end up needing to address it in the future.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34399</IssueID>
    <RepoID>1</RepoID>
    <Title>Review automated tests for formatting between ) and {</Title>
    <Description>From https://github.com/dotnet/roslyn/pull/33983#issuecomment-475332589:

&gt; Not caused by #33983, but observed when looking through the test sequences: we may have a test gap covering the formatting at the end of a line, when multiple spaces appear between `)` and `{`, and the user presses enter somewhere in the middle of this. We should verify tests are present for these cases both for using statements and other types of statements that allow braces.

@heejaechang had some ideas for specific test cases to ensure are covered.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34398</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpAddMissingImportsRefactoringProvider encountered an error </Title>
    <Description>![image](https://user-images.githubusercontent.com/12449387/54889937-3d151a00-4e64-11e9-9c95-a768de389db0.png)

```
System.NotImplementedException : The method or operation is not implemented.
   at Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedDocumentAsync(CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.GetChangesForCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.ApplyFixesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsFeatureService.AddMissingImportsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.AddMissingImports.AbstractAddMissingImportsRefactoringProvider.AddMissingImports(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

Hit this when i tired to copy the code from https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.formattedtext?view=netframework-4.7.2 to a class filein console application </Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34397</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34396</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34395</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34394</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34393</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34392</IssueID>
    <RepoID>1</RepoID>
    <Title>Lambdas in best type contribute oblivious type arguments</Title>
    <Description>

```C#
        [Fact]
        [WorkItem(33664, "https://github.com/dotnet/roslyn/issues/33664")]
        public void ConditionalOperator_WithLambdaConversions()
        {
            var source = @"
using System;
class C
{
    Func&lt;bool, T&gt; D1&lt;T&gt;(T t) =&gt; k =&gt; t;

    void M1(bool b, string? s)
    {
        _ = (b ? D1(s) : k =&gt; s) /*T:System.Func&lt;bool, string?&gt;!*/;
        _ = (b ? k =&gt; s : D1(s)) /*T:System.Func&lt;bool, string?&gt;!*/;
        _ = (true ? D1(s) : k =&gt; s) /*T:System.Func&lt;bool, string?&gt;!*/;
        _ = (true ? k =&gt; s : D1(s)) /*T:System.Func&lt;bool, string&gt;!*/; // unexpected type
        _ = (false ? D1(s) : k =&gt; s) /*T:System.Func&lt;bool, string&gt;!*/; // unexpected type
        _ = (false ? k =&gt; s : D1(s)) /*T:System.Func&lt;bool, string?&gt;!*/;

        _ = (b ? D1(s!) : k =&gt; s) /*T:System.Func&lt;bool, string&gt;!*/; // 1, unexpected type
        _ = (b ? k =&gt; s : D1(s!)) /*T:System.Func&lt;bool, string&gt;!*/; // 2, unexpected type
        _ = (true ? D1(s!) : k =&gt; s) /*T:System.Func&lt;bool, string&gt;!*/; // unexpected type
        _ = (true ? k =&gt; s : D1(s!)) /*T:System.Func&lt;bool, string&gt;!*/; // 3, unexpected type
        _ = (false ? D1(s!) : k =&gt; s) /*T:System.Func&lt;bool, string&gt;!*/; // 4, unexpected type
        _ = (false ? k =&gt; s : D1(s!)) /*T:System.Func&lt;bool, string&gt;!*/; // unexpected type

        _ = (b ? D1(true ? throw null! : s) : k =&gt; s) /*T:System.Func&lt;bool, string&gt;!*/; // 5, unexpected type
        _ = (b ? k =&gt; s : D1(true ? throw null! : s)) /*T:System.Func&lt;bool, string&gt;!*/; // 6, unexpected type
        _ = (true ? D1(true ? throw null! : s) : k =&gt; s) /*T:System.Func&lt;bool, string&gt;!*/; // unexpected type
        _ = (true ? k =&gt; s : D1(true ? throw null! : s)) /*T:System.Func&lt;bool, string&gt;!*/; // 7, unexpected type
        _ = (false ? D1(true ? throw null! : s) : k =&gt; s) /*T:System.Func&lt;bool, string&gt;!*/; // 8, unexpected type
        _ = (false ? k =&gt; s : D1(true ? throw null! : s)) /*T:System.Func&lt;bool, string&gt;!*/; // unexpected type
    }

    delegate T MyDelegate&lt;T&gt;(bool b);
    ref MyDelegate&lt;T&gt; D2&lt;T&gt;(T t) =&gt; throw null!;

    void M(bool b, string? s)
    {
        _ = (b ? ref D2(s) : ref D2(s!)) /*T:C.MyDelegate&lt;string&gt;!*/; // 9
        _ = (b ? ref D2(s!) : ref D2(s)) /*T:C.MyDelegate&lt;string&gt;!*/; // 10
        _ = (true ? ref D2(s) : ref D2(s!)) /*T:C.MyDelegate&lt;string&gt;!*/; // 11
        _ = (true ? ref D2(s!) : ref D2(s)) /*T:C.MyDelegate&lt;string!&gt;!*/;
        _ = (false ? ref D2(s) : ref D2(s!)) /*T:C.MyDelegate&lt;string!&gt;!*/;
        _ = (false ? ref D2(s!) : ref D2(s)) /*T:C.MyDelegate&lt;string&gt;!*/; // 12
    }
}";

            // See TODO2
            // Best type inference involving lambda conversion should agree with method type inference
            // Missing diagnostics

            var comp = CreateCompilation(source, options: WithNonNullTypesTrue());
            comp.VerifyTypes();
            comp.VerifyDiagnostics(
                // (36,14): warning CS8619: Nullability of reference types in value of type 'C.MyDelegate&lt;string?&gt;' doesn't match target type 'C.MyDelegate&lt;string&gt;'.
                //         _ = (b ? ref D2(s) : ref D2(s!)) /*T:C.MyDelegate&lt;string&gt;!*/; // 9
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "b ? ref D2(s) : ref D2(s!)").WithArguments("C.MyDelegate&lt;string?&gt;", "C.MyDelegate&lt;string&gt;").WithLocation(36, 14),
                // (37,14): warning CS8619: Nullability of reference types in value of type 'C.MyDelegate&lt;string&gt;' doesn't match target type 'C.MyDelegate&lt;string?&gt;'.
                //         _ = (b ? ref D2(s!) : ref D2(s)) /*T:C.MyDelegate&lt;string&gt;!*/; // 10
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "b ? ref D2(s!) : ref D2(s)").WithArguments("C.MyDelegate&lt;string&gt;", "C.MyDelegate&lt;string?&gt;").WithLocation(37, 14),
                // (38,14): warning CS8619: Nullability of reference types in value of type 'C.MyDelegate&lt;string?&gt;' doesn't match target type 'C.MyDelegate&lt;string&gt;'.
                //         _ = (true ? ref D2(s) : ref D2(s!)) /*T:C.MyDelegate&lt;string&gt;!*/; // 11
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "true ? ref D2(s) : ref D2(s!)").WithArguments("C.MyDelegate&lt;string?&gt;", "C.MyDelegate&lt;string&gt;").WithLocation(38, 14),
                // (41,14): warning CS8619: Nullability of reference types in value of type 'C.MyDelegate&lt;string&gt;' doesn't match target type 'C.MyDelegate&lt;string?&gt;'.
                //         _ = (false ? ref D2(s!) : ref D2(s)) /*T:C.MyDelegate&lt;string&gt;!*/; // unexpected type
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "false ? ref D2(s!) : ref D2(s)").WithArguments("C.MyDelegate&lt;string&gt;", "C.MyDelegate&lt;string?&gt;").WithLocation(41, 14)
                );
        }

```

```C#
        [Fact]
        public void ReturnTypeInference_DelegateTypes()
        {
            var source = @"
class C
{
    System.Func&lt;bool, T&gt; D1&lt;T&gt;(T t) =&gt; k =&gt; t;
    void M1(bool b, string? s, string s2)
    {
        M2(k =&gt; s, D1(s)) /*T:System.Func&lt;bool, string?&gt;!*/;
        M2(D1(s), k =&gt; s) /*T:System.Func&lt;bool, string?&gt;!*/;

         M2(k =&gt; s2, D1(s2)) /*T:System.Func&lt;bool, string!&gt;!*/;
        M2(D1(s2), k =&gt; s2) /*T:System.Func&lt;bool, string!&gt;!*/;

         _ = (new[] { k =&gt; s, D1(s) }) /*T:System.Func&lt;bool, string?&gt;![]!*/;
        _ = (new[] { D1(s), k =&gt; s }) /*T:System.Func&lt;bool, string?&gt;![]!*/;

         _ = (new[] { k =&gt; s2, D1(s2) }) /*T:System.Func&lt;bool, string&gt;![]!*/; // wrong
        _ = (new[] { D1(s2), k =&gt; s2 }) /*T:System.Func&lt;bool, string&gt;![]!*/; // wrong
    }
    T M2&lt;T&gt;(T x, T y) =&gt; throw null!;
}";
            // See TODO2
            // Best type inference involving lambda conversion should agree with method type inference
            var comp = CreateCompilation(source, options: WithNonNullTypesTrue());
            comp.VerifyTypes();
            comp.VerifyDiagnostics();
        }
```</Description>
    <CreatedDate>24/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34391</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable rename tracking when replacing with discard</Title>
    <Description>Fixes #34280</Description>
    <CreatedDate>24/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34390</IssueID>
    <RepoID>1</RepoID>
    <Title>Interactive Window refactoring</Title>
    <Description>Reverts revert and fixes up bad merge.</Description>
    <CreatedDate>24/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34389</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34388</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34387</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34386</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34385</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>24/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34384</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove data flow analysis from convert foreach to for refactoring</Title>
    <Description>Allow refactoring foreach loops to for loops even when the loop variable is written to. If dataflow analysis shows that it's written to a warning annotation is added to the refactoring to give the user a hint that semantics may change.

Adds two more tests to cover regressions in the scenario reported in #32739 </Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34383</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 'dotnet/master' into DefaultInterfaceImplementation</Title>
    <Description>
    </Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34382</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Interactive projects refactoring"</Title>
    <Description>Reverts dotnet/roslyn#29069

Fixes the broken build.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34381</IssueID>
    <RepoID>1</RepoID>
    <Title>Type, implicitly castable to awaitable, can not be awaited</Title>
    <Description># Type, implicitly convertible to awaitable, can not be awaited

Check the follownig class:
```
public class SomeArbitraryClass
{
  public static implicit operator Task(SomeArbitraryClass someArbitraryClass)
  {
    return Task.CompletedTask;
  }
}
```
It is implicitly castable to `System.Threading.Task` class.
```
Task task = new SomeArbitraryClass();
await task;
```
This code works as expected, but this:
```
await new SomeArbitraryClass();
```
results in `[CS1061] 'SomeArbitraryClass' does not contain a definition for 'GetAwaiter'`. I expect, that a type, implicitly convertible to `Task`, or any other awaitable, should also be awaitable right away, without additional explicit cast.

Am I right, or is this expected behavior?</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34380</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

## From https://github.com/dotnet/arcade
- **Build**: 20190321.6
- **Date Produced**: 3/22/2019 4:35 AM
- **Commit**: 2eb45ff0eed6f86f1071b16b11a447cadeeeec59
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19171.6

## From https://github.com/dotnet/arcade
- **Build**: 20190321.6
- **Date Produced**: 3/22/2019 4:35 AM
- **Commit**: 2eb45ff0eed6f86f1071b16b11a447cadeeeec59
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19171.6

## From https://github.com/dotnet/arcade
- **Build**: 20190321.6
- **Date Produced**: 3/22/2019 4:35 AM
- **Commit**: 2eb45ff0eed6f86f1071b16b11a447cadeeeec59
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19171.6

## From https://github.com/dotnet/arcade
- **Build**: 20190325.7
- **Date Produced**: 3/25/2019 8:34 PM
- **Commit**: 002cce7e8e3e043c50acae673741ee3962411e10
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19175.7

## From https://github.com/dotnet/arcade
- **Build**: 20190325.9
- **Date Produced**: 3/25/2019 10:36 PM
- **Commit**: 13daa29185518ef3c6d4074fd07efbc5236a76c5
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19175.9

## From https://github.com/dotnet/arcade
- **Build**: 20190326.14
- **Date Produced**: 3/27/2019 12:08 AM
- **Commit**: e23a3e2fd09a6222361ce47b78d23ab42867924c
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19176.14

## From https://github.com/dotnet/arcade
- **Build**: 20190327.11
- **Date Produced**: 3/28/2019 1:58 AM
- **Commit**: 69f276904fdd6d8f81404b857f295537894b81d3
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19177.11

## From https://github.com/dotnet/arcade
- **Build**: 20190329.1
- **Date Produced**: 3/29/2019 10:57 AM
- **Commit**: ef139c7533e2e33c5e0946b80cb1aa95d84da868
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19179.1

## From https://github.com/dotnet/arcade
- **Build**: 20190329.2
- **Date Produced**: 3/29/2019 1:07 PM
- **Commit**: 31abd61b43b115a6af83c92ce35ed4e8efd01dfd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19179.2

## From https://github.com/dotnet/arcade
- **Build**: 20190329.2
- **Date Produced**: 3/29/2019 1:07 PM
- **Commit**: 31abd61b43b115a6af83c92ce35ed4e8efd01dfd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19179.2

## From https://github.com/dotnet/arcade
- **Build**: 20190329.2
- **Date Produced**: 3/29/2019 1:07 PM
- **Commit**: 31abd61b43b115a6af83c92ce35ed4e8efd01dfd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19179.2

## From https://github.com/dotnet/arcade
- **Build**: 20190401.12
- **Date Produced**: 4/2/2019 1:18 AM
- **Commit**: 505e38906e1ee2d032c41bb297de0958307db946
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19201.12

## From https://github.com/dotnet/arcade
- **Build**: 20190402.13
- **Date Produced**: 4/3/2019 12:44 AM
- **Commit**: 764f362c8e92e41905fe5f6c782ab9980c86c909
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19202.13

## From https://github.com/dotnet/arcade
- **Build**: 20190403.10
- **Date Produced**: 4/4/2019 1:43 AM
- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19203.10

## From https://github.com/dotnet/arcade
- **Build**: 20190404.16
- **Date Produced**: 4/5/2019 3:36 AM
- **Commit**: 61196044ed70a65c610beb230ac6ea77566668c2
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19204.16

## From https://github.com/dotnet/arcade
- **Build**: 20190405.6
- **Date Produced**: 4/5/2019 11:26 PM
- **Commit**: 4217db4a23ffd15abb3771d635b66162994fb9e4
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19205.6

## From https://github.com/dotnet/arcade
- **Build**: 20190406.5
- **Date Produced**: 4/6/2019 5:35 PM
- **Commit**: 9d8abf998866f10bc19d97e1916ff1c0ada3fd42
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19206.5

</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34379</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34378</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34377</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34376</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34375</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34374</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34373</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense commits unselected entry after Backspace and Tab in snippets</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.4.3+28714.193

**Steps to Reproduce**:

Enable _Show completion list after a character is deleted_

1. Type `foreach` and press Tab twice to insert the snippet.
2. Tab into the `collection` variable and press Backspace to delete the whole word. At this point, the intellisense will appear with nothing preselected:
![image](https://user-images.githubusercontent.com/10546952/54865505-9d259680-4d66-11e9-95ad-584f5ad43d8c.png)

4. Press Tab.

**Expected Behavior**: Select the next field in the snippet, i.e. `var`. The same behavior when the intellisense is dismissed with Esc first and then Tab is pressed.

**Actual Behavior**: `#if` (or other last selected item) is inserted.

I have snippets where removing the whole entry is a valid input and this behavior breaks it. Regardless of that scenario, there is nothing selected in the intellisense so nothing should be inserted.
</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34372</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify some nullable bugs</Title>
    <Description>Two bugs were fixed by https://github.com/dotnet/roslyn/pull/34300:
- Closes https://github.com/dotnet/roslyn/issues/31584
- Closes https://github.com/dotnet/roslyn/issues/32463

Closes https://github.com/dotnet/roslyn/issues/26696
</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34371</IssueID>
    <RepoID>1</RepoID>
    <Title>Make compiler parameters available from Project in Workspace layer</Title>
    <Description>Specifically, Edit and Continue needs to know the value of `/out` parameter.

This will also address https://devdiv.visualstudio.com/DevDiv/_workitems/edit/826527.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34370</IssueID>
    <RepoID>1</RepoID>
    <Title>Features/lsp support</Title>
    <Description>Verified - 
1.  ```build -pack``` creates nuget pkg ```artifacts/packages/Debug/Shipping/Microsoft.CodeAnalysis.Protocol.LanguageServices.3.1.0-dev.nupkg```
2.  ```%localappdata%/Microsoft/VisualStudio/16.0...RoslynDev/devenv.exe.config``` contains 
```xml
&lt;dependentAssembly&gt;
    &lt;assemblyIdentity name="Microsoft.CodeAnalysis.Protocol.LanguageServices" publicKeyToken="&lt;redacted&gt;" culture="neutral"/&gt;
    &lt;bindingRedirect oldVersion="0.0.0.0-42.42.42.42" newVersion="42.42.42.42"/&gt;
    &lt;codeBase version="42.42.42.42" href="C:\USERS\DABARBET\APPDATA\LOCAL\MICROSOFT\VISUALSTUDIO\16.0_57BEAA6BROSLYNDEV\EXTENSIONS\MICROSOFT\ROSLYN LANGUAGE SERVICES\42.42.42.4242424\Microsoft.CodeAnalysis.Protocol.LanguageServices.dll"/&gt;
&lt;/dependentAssembly&gt;
```
3.  ```%localappdata%/Microsoft/VisualStudio/16.0...RoslynDev/Extensions/Microsoft/Roslyn Language Services/42.../Microsoft.CodeAnalysis.Protocol.LanguageServices.dll``` exists</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34369</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34368</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34367</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34366</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34365</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust Implement Interface action for Default Interface Methods</Title>
    <Description>- Do not generate implementation for sealed or static members.
- Do not generate implicit implementation for non-public members.
- Do not generate explicit implementation for inaccessible members.</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34364</IssueID>
    <RepoID>1</RepoID>
    <Title>Append xml doc comment for ILocalSymbol.IsFunctionValue</Title>
    <Description>
    </Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34363</IssueID>
    <RepoID>1</RepoID>
    <Title>VS SDK update to 16.1</Title>
    <Description>Need it for the right fix of https://github.com/dotnet/roslyn/issues/34089</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34362</IssueID>
    <RepoID>1</RepoID>
    <Title>Ctrl+Q does not work once I uninstalled ReSharper and reset my keybindings to default. </Title>
    <Description>**Version Used**: 
Visual Studio 2019 Preview. 

**Steps to Reproduce**:
1. Uninstall ReSharper
2. Set keybindings to default and click reset.  
3. Restart Visual Studio.
4. Ctrl+Q disappears from the search visual studio box and doesn't trigger. 

**Expected Behavior**:
Expect Ctrl+Q to work after uninstalling ReSharper and resetting my keybdindings to default.
</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34361</IssueID>
    <RepoID>1</RepoID>
    <Title>Updated wait operations to fix unreliable .editorconfig integration tests</Title>
    <Description>This is an interim stability improvement while @jasonmalinowski continues to investigate asynchronous operations in this path.</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34360</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow implementations of DocumentDiagnosticAnalyzer to return DiagnosticData</Title>
    <Description>Currently the class defines abstract methods:

```C#
public abstract Task&lt;ImmutableArray&lt;Diagnostic&gt;&gt; AnalyzeSyntaxAsync(Document document, CancellationToken cancellationToken);

public abstract Task&lt;ImmutableArray&lt;Diagnostic&gt;&gt; AnalyzeSemanticsAsync(Document document, CancellationToken cancellationToken);
```

When these methods return the caller converts the returned Diagnostics to `DiagnosticData` inferring the document and span information from Location of the diagnostic. This is good for the common case where the diagnostics originate from a compiler or an analyzer, but in some cases the implementation needs to cons up a special Location just to make the inference logic produce the right `DiagnosticData`. 

The proposal is to add methods that return DiagnosticData like so:

```C#
public virtual Task&lt;ImmutableArray&lt;Diagnostic&gt;&gt; AnalyzeSyntaxAsync(Document document, CancellationToken cancellationToken) =&gt; throw new NotImplementedException("Must override either AnalyzeSyntaxAsync or AnalyzeSyntaxImplAsync");

public virtual Task&lt;ImmutableArray&lt;Diagnostic&gt;&gt; AnalyzeSemanticsAsync(Document document, CancellationToken cancellationToken) =&gt; throw new NotImplementedException("Must override either AnalyzeSemanticsAsync or AnalyzeSemanticsAsync");

public virtual Task&lt;ImmutableArray&lt;DiagnosticData&gt;&gt; AnalyzeSyntaxImplAsync(Document document, CancellationToken cancellationToken)
{
  var diagnostics = await AnalyzeSyntaxAsync();
  convert diagnostics to diagnostic data;
}

public abstract Task&lt;ImmutableArray&lt;DiagnosticData&gt;&gt; AnalyzeSemanticsImplAsync(Document document, CancellationToken cancellationToken)
{
  var diagnostics = await AnalyzeSemanticsAsync();
  convert diagnostics to diagnostic data;
}
```

The implementation can then choose to return either Diagnostics or DiagnosticData.

</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34359</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not return null task In RemoveHostClientExtensions</Title>
    <Description>If `IRemoveHostClientService` does not exist, this extension can return a null task. Instead it should return a task with a null result.</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34358</IssueID>
    <RepoID>1</RepoID>
    <Title>Move checks in build.ps1 into try/catch block</Title>
    <Description>Moves the powershell version and longpath checks into the try/catch block. 

Also changes the `Write-Warning` to `Write-Host` to better fit the rest of the output in the script</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34357</IssueID>
    <RepoID>1</RepoID>
    <Title>Ability to promote dead code analysis suggestion to warning or error</Title>
    <Description>Ability to promote dead code analysis suggestion (IDE0051) to warning or error

![image](https://user-images.githubusercontent.com/8293542/54843595-fa9be380-4c91-11e9-85cb-436adcf768ae.png)
</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34356</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable EnableNgenOptimizationLogDetails</Title>
    <Description>Once we have been updated with a version of the Arcade SDK that contains a fix for https://github.com/dotnet/arcade/issues/2309 we should revert the change made in https://github.com/dotnet/roslyn/pull/34339</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34355</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix GetOpenDocumentInCurrentContextWithChanges with linked files</Title>
    <Description>If you call GetOpenDocumentInCurrentContextWithChanges, and the SourceText given isn't the one currently in the workspace, it forks the solution to get the text to match. It was only forking the active context, which meant if the feature (like completion) then tried to look at the other linked files, it might crash because the text is entirely in a different state. The crashes we saw in the wild are when editing towards the end of the file and you had a delete -- it means a span in one file is simply running past the end of one of the linked documents.

The fix is to make sure all linked copies are updated.</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34354</IssueID>
    <RepoID>1</RepoID>
    <Title>Spanish_Unit_Tests Job test timeout exceeded</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=130642&amp;view=logs&amp;jobId=25fa373a-98a5-5235-2ed8-ead0b7a28f80)
[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=130679&amp;view=logs)

```
   6 running,  0 queued, 54 completed
   5 running,  0 queued, 55 completed
   4 running,  0 queued, 56 completed
   3 running,  0 queued, 57 completed
   2 running,  0 queued, 58 completed
   1 running,  0 queued, 59 completed
Roslyn Error: test timeout exceeded, dumping remaining processes
Dumping xunit.console.x86 5456 to F:\workspace\_work\1\s\artifacts\log\Debug\xunit.console.x86-0.dmp ... succeeded
Command failed to execute with exit code 1: F:\workspace\_work\1\s\artifacts\bin\RunTests\Debug\net472\RunTests.exe "C:\Users\vsagent\.nuget\packages\xunit.runner.console\2.4.1-pre.build.4059\tools\net472" "-out:F:\workspace\_work\1\s\artifacts\TestResults\Debug" "-logs:F:\workspace\_work\1\s\artifacts\log\Debug" -nocache -tfm:net472 -xml -timeout:65 -procdumppath:F:\workspace\_work\1\s\.tools\ProcDump F:\workspace\_work\1\s\artifacts\bin\InteractiveHost.UnitTests\Debug\net472\InteractiveHost.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.Build.Tasks.CodeAnalysis.UnitTests\Debug\net472\Microsoft.Build.Tasks.CodeAnalysis.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.CSharp.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.CommandLine.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.CommandLine.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.EditorFeatures2.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.EditorFeatures2.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.ExpressionCompiler.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.ExpressionCompiler.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.IOperation.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.IOperation.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.ResultProvider.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.ResultProvider.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.EditorFeatures2.UnitTests\Debug\net472\Microsoft.CodeAnalysis.EditorFeatures2.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.FunctionResolver.UnitTests\Debug\net472\Microsoft.CodeAnalysis.ExpressionEvaluator.FunctionResolver.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.UnitTests\Debug\net472\Microsoft.CodeAnalysis.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.ExpressionCompiler.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.ExpressionCompiler.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.ResultProvider.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.ResultProvider.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.MSBuild.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.MSBuild.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests\Debug\net472\Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.VisualStudio.LanguageServices.UnitTests\Debug\net472\Microsoft.VisualStudio.LanguageServices.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Roslyn.Compilers.VisualBasic.IOperation.UnitTests\Debug\net472\Roslyn.Compilers.VisualBasic.IOperation.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Roslyn.VisualStudio.Next.UnitTests\Debug\net472\Roslyn.VisualStudio.Next.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\VBCSCompiler.UnitTests\Debug\net472\VBCSCompiler.UnitTests.dll
System.Management.Automation.RuntimeException: Command failed to execute with exit code 1: F:\workspace\_work\1\s\artifacts\bin\RunTests\Debug\net472\RunTests.exe "C:\Users\vsagent\.nuget\packages\xunit.runner.console\2.4.1-pre.build.4059\tools\net472" "-out:F:\workspace\_work\1\s\artifacts\TestResults\Debug" "-logs:F:\workspace\_work\1\s\artifacts\log\Debug" -nocache -tfm:net472 -xml -timeout:65 -procdumppath:F:\workspace\_work\1\s\.tools\ProcDump F:\workspace\_work\1\s\artifacts\bin\InteractiveHost.UnitTests\Debug\net472\InteractiveHost.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.Build.Tasks.CodeAnalysis.UnitTests\Debug\net472\Microsoft.Build.Tasks.CodeAnalysis.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.CSharp.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.CommandLine.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.CommandLine.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.EditorFeatures2.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.EditorFeatures2.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Emit.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.ExpressionCompiler.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.ExpressionCompiler.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.IOperation.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.IOperation.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.ResultProvider.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.ResultProvider.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.EditorFeatures2.UnitTests\Debug\net472\Microsoft.CodeAnalysis.EditorFeatures2.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.FunctionResolver.UnitTests\Debug\net472\Microsoft.CodeAnalysis.ExpressionEvaluator.FunctionResolver.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.UnitTests\Debug\net472\Microsoft.CodeAnalysis.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.UnitTests\Debug\net46\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.ExpressionCompiler.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.ExpressionCompiler.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.ResultProvider.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.ResultProvider.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Scripting.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Scripting.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Scripting.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Scripting.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Semantic.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Syntax.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.VisualBasic.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.VisualBasic.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.Desktop.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.Desktop.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.MSBuild.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.MSBuild.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.CodeAnalysis.Workspaces.UnitTests\Debug\net472\Microsoft.CodeAnalysis.Workspaces.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests\Debug\net472\Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Microsoft.VisualStudio.LanguageServices.UnitTests\Debug\net472\Microsoft.VisualStudio.LanguageServices.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Roslyn.Compilers.VisualBasic.IOperation.UnitTests\Debug\net472\Roslyn.Compilers.VisualBasic.IOperation.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\Roslyn.VisualStudio.Next.UnitTests\Debug\net472\Roslyn.VisualStudio.Next.UnitTests.dll F:\workspace\_work\1\s\artifacts\bin\VBCSCompiler.UnitTests\Debug\net472\VBCSCompiler.UnitTests.dll
en Exec-CommandCore, F:\workspace\_work\1\s\eng\build-utils.ps1: l√≠nea 81
en Exec-Console, F:\workspace\_work\1\s\eng\build-utils.ps1: l√≠nea 150
en TestUsingOptimizedRunner, F:\workspace\_work\1\s\eng\build.ps1: l√≠nea 429
en &lt;ScriptBlock&gt;, F:\workspace\_work\1\s\eng\build.ps1: l√≠nea 611
en &lt;ScriptBlock&gt;, &lt;sin archivo&gt;: l√≠nea 1
Killing running build processes...
##[error]Cmd.exe exited with code '1'.
##[section]Finishing: Build and Test
```
</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34353</IssueID>
    <RepoID>1</RepoID>
    <Title>Add ExternalAccess for Xamarin</Title>
    <Description>Xamarin is planning on unifying some Rosln-powered analyzers, code
fixers and completion providers into a new shared (for both VS and
VSfM) repository and some of the existing code that currently lives
in MonoDevelop repo requires internal access.</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34352</IssueID>
    <RepoID>1</RepoID>
    <Title>Typo Fix</Title>
    <Description>Noticed and fixed typo while reading docs</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34351</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

## From https://github.com/dotnet/arcade
- **Build**: 20190321.3
- **Date Produced**: 3/22/2019 12:37 AM
- **Commit**: b3bcf3034ff395bd09066114379ec64736b13633
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19171.3

</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34350</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34349</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio 2019 RC file closed after executing "rename file to xxx.cs" action</Title>
    <Description>**Version Used**: 
VS 16.0 RC3

**Steps to Reproduce**:

1. Add new class file `Class1.cs` with type `Class1` inside
2. Rename `Class1` to `Class2`
3. Open Quick Actions menu and choose "Rename file to Class2.cs"

**Expected Behavior**:
New `Class2.cs` file remains still open in IDE.

**Actual Behavior**:
File is closed and file one under is open in preview (if this feature is enabled).</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34348</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix completion after null-coalescing assignment</Title>
    <Description>@ivanbasov  for review

FYI @RikkiGibson 
Fixes https://github.com/dotnet/roslyn/issues/34324</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34347</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot find path 'D:\roslyn\System.Windows.Forms.dll' because it does not exist.</Title>
    <Description>**Version Used**: 
 Windows 8.1
**Steps to Reproduce**:

1. build a release version of the powershell rc set PATH in the Control Panel replace old system powershell env variable. sign out sign back in to set variable not using a sandbox.
2. open Visual 2017 CMD prompt
3. runt the restore.cmd batch file.

**Expected Behavior**:
restore.cmd to complete 
**Actual Behavior**:
Cannot find path 'D:\roslyn\System.Windows.Forms.dll' because it does not exist.</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34346</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring of AbstractRecommendationService. Required for ThenInclude</Title>
    <Description>Preparation for https://github.com/dotnet/roslyn/pull/34312</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34345</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>22/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34344</IssueID>
    <RepoID>1</RepoID>
    <Title>/* Do Not Merge */ Validate CI failures</Title>
    <Description>hmm... Still trying to get Azure DevOps builds to run.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34343</IssueID>
    <RepoID>1</RepoID>
    <Title>Validating CI failures</Title>
    <Description>Previous PR attempt just stopped scheduling CI builds.  Weird.  Trying this again..</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34342</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable VSTHRD003 (Avoid awaiting foreign Tasks)</Title>
    <Description>Fixes #34331 </Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34341</IssueID>
    <RepoID>1</RepoID>
    <Title>Use CancellationTokenExtensions.CombineWith where appropriate</Title>
    <Description>This is a follow-up item from #34332</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34340</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Linux LLDB/SOS instructions</Title>
    <Description>Updating the Linux contributing docs with the latest info on using LLDB and SOS.
Fix a few environment typos.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34339</IssueID>
    <RepoID>1</RepoID>
    <Title> Disable EnableNgenOptimizationLogDetails</Title>
    <Description>Work around https://github.com/dotnet/arcade/issues/2309</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34338</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly members improved diagnostics</Title>
    <Description>- Commit 1 adds the following error codes:
```cs
        ERR_StaticMemberCantBeReadOnly = 8656,
        ERR_AutoPropertyCantBeReadOnly = 8657,
        ERR_InvalidPropertyReadOnlyMods = 8658,
        ERR_DuplicatePropertyReadOnlyMods = 8659,
        ERR_FieldLikeEventCantBeReadOnly = 8660
```
- Commit 2 updates the symbol classes to use these error codes
- Commit 3 improves errors for writable usage of readonly instance variables

cc @jcouv @agocke @333fred who have had questions or suggestions about what the language should do in some of these cases.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34337</IssueID>
    <RepoID>1</RepoID>
    <Title>Add API to determine if type contains valid entry point</Title>
    <Description>I am not aware of any API that allows you to ask the compiler if a type contains a valid entry point. Today the IDE layer uses its own custom logic.  Would the compiler team be OK with a PR to add this API? I would rather not continue to fix bugs in the IDE logic.

CC: @jaredpar 	@agocke @333fred 	@etbyrd 	
</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34336</IssueID>
    <RepoID>1</RepoID>
    <Title>Find All References should allow grouping by type and member</Title>
    <Description>Find All References should allow grouping by type and member - currently, Definition, Project then Path is the closest analog, but grouping by type is more useful than file path and member is also a useful grouping-level for heavily used symbols.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34335</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34334</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge in 3.0 SDK switchover</Title>
    <Description>The last commit removes all of the PROTOTYPE comments around the 3.0 SDK usage. </Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34333</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge latest bits from master into features/continuation-comments</Title>
    <Description>FYI @paul1956</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34332</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Microsoft.VisualStudio.Threading</Title>
    <Description>Follow-up items:

* Enable VSTHRD003 (#34331)
* Use `CancellationTokenExtensions.CombineWith` where appropriate and available</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34331</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable VSTHRD003 (Avoid awaiting foreign Tasks)</Title>
    <Description>Follow-up item for #34332.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34330</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpMoveToNamespaceService.GetNamespaceName throws NullReferenceException</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=129561&amp;view=ms.vss-test-web.build-test-results-tab) Debug Legacy run

```
Event Time (UTC): 3/19/2019 3:26:41 AM
Event ID: 1025
Data: Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.NullReferenceException: Object reference not set to an instance of an object.

   at Microsoft.CodeAnalysis.CSharp.MoveToNamespace.CSharpMoveToNamespaceService.GetNamespaceName(NamespaceDeclarationSyntax syntax)

   at Microsoft.CodeAnalysis.CSharp.MoveToNamespace.CSharpMoveToNamespaceService.GetNamespaceName(TypeDeclarationSyntax syntax)

   at Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`3.&lt;AnalyzeTypeAtPositionAsync&gt;d__5.MoveNext()

--- End of stack trace from previous location where exception was thrown ---

   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)

   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()

   at Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`3.&lt;GetCodeActionsAsync&gt;d__4.MoveNext()

--- End of stack trace from previous location where exception was thrown ---

   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)

   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()

   at Microsoft.CodeAnalysis.MoveToNamespace.MoveToNamespaceCodeActionProvider.&lt;ComputeRefactoringsAsync&gt;d__0.MoveNext()

--- End of stack trace from previous location where exception was thrown ---

   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)

   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()

   at Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.&lt;GetRefactoringFromProviderAsync&gt;d__8.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Microsoft.VisualStudio.IntegrationTest.Setup.TestExtensionErrorHandler.HandleError(System.Object, System.Exception)
   at Microsoft.VisualStudio.IntegrationTest.Setup.TestExtensionManager+ExtensionManager.HandleException(System.Object, System.Exception)
   at Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService+&lt;GetRefactoringFromProviderAsync&gt;d__8.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider, Microsoft.CodeAnalysis.Extensions.IExtensionManager, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService+&lt;HasRefactoringsAsync&gt;d__6.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.HasRefactoringsAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider+SuggestedActionsSource+&lt;TryGetRefactoringSuggestedActionCategoryAsync&gt;d__42.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider+SuggestedActionsSource.TryGetRefactoringSuggestedActionCategoryAsync(Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider, Microsoft.CodeAnalysis.Document, System.Nullable`1&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider+SuggestedActionsSource+&lt;&gt;c__DisplayClass49_2.&lt;GetSuggestedActionCategoriesAsync&gt;b__1()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34329</IssueID>
    <RepoID>1</RepoID>
    <Title>Failed Assert in VisualStudioMetadataReferenceManager..ctor</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=129561&amp;view=ms.vss-test-web.build-test-results-tab) Release Legacy run

```
Event Time (UTC): 3/21/2019 12:23:52 PM
Event ID: 1025
Data: Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.Exception
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Exit(System.String)
   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Fail(System.String, System.String)
   at System.Diagnostics.TraceListener.Fail(System.String)
   at System.Diagnostics.TraceInternal.Fail(System.String)
   at System.Diagnostics.Debug.Assert(Boolean)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReferenceManager..ctor(System.IServiceProvider, Microsoft.CodeAnalysis.Host.ITemporaryStorageService)
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReferenceManagerFactory.CreateService(Microsoft.CodeAnalysis.Host.HostWorkspaceServices)
   at Microsoft.CodeAnalysis.Host.Mef.MefWorkspaceServices+&lt;&gt;c__DisplayClass5_0.&lt;.ctor&gt;b__1()
   at System.Lazy`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].CreateValue()
   at System.Lazy`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].LazyInitValue()
   at System.Lazy`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].get_Value()
   at Microsoft.CodeAnalysis.Host.Mef.MefWorkspaceServices.GetService[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]()
   at Microsoft.VisualStudio.LanguageServices.Setup.RoslynPackage.DisposeVisualStudioServices()
   at Microsoft.VisualStudio.LanguageServices.Setup.RoslynPackage.Dispose(Boolean)
   at Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.Close()
```

![12 42 26-Unknown-MissingMethodException](https://user-images.githubusercontent.com/611219/54760316-124d6c00-4bad-11e9-972c-adf2c3870e31.png)
</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34328</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

## From https://github.com/dotnet/arcade
- **Build**: 20190320.2
- **Date Produced**: 3/20/2019 5:43 PM
- **Commit**: f70fa34786cff993625a4548ae0125335eabe82e
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19170.2

## From https://github.com/dotnet/arcade
- **Build**: 20190321.1
- **Date Produced**: 3/21/2019 1:09 PM
- **Commit**: 5f884de91b56acd5d19bf792516b646e5fad19b5
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19171.1

## From https://github.com/dotnet/arcade
- **Build**: 20190321.1
- **Date Produced**: 3/21/2019 1:09 PM
- **Commit**: 5f884de91b56acd5d19bf792516b646e5fad19b5
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19171.1

</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34327</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34326</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0004 Cast is redundant from class to interface only for fields</Title>
    <Description>Visual Studio 2017 Version 15.9.9

**Steps to Reproduce**:

```
public class MyContext : DbContext { }

public class Class
{
    private readonly MyContext _context;
    private readonly DbContext _dbContext;

    public Class(MyContext context)
    {
        _dbContext = context;
        _context = context;

        ((IDisposable)_context).Dispose();
        ((IDisposable)_dbContext).Dispose();

        ((IDisposable)context).Dispose();
        DbContext dbContext = _context;
        ((IDisposable)dbContext).Dispose();
    }
}
```

![obraz](https://user-images.githubusercontent.com/6151485/54738940-8cceb980-4bb6-11e9-91ae-f594702a9997.png)

**Expected Behavior**:
Show IDE0004 message for all cast

**Actual Behavior**:
IDE0004 was only shown when casting for fields
</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34325</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable 'preview' langversion not in CoreCompile target</Title>
    <Description>The PR https://github.com/dotnet/roslyn/pull/33186 enabled 'preview' langversion for certain target frameworks and did it in `CoreCompile` target.

The problem I encountered is that in some cases you would like to know value of `LangVersion` project property without executing `CoreCompile` target.

Is there any chance you could move this code out of `CoreCompile`?

Thanks

/cc @agocke @jaredpar @nguerrera @jasonmalinowski </Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34324</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense doesn't support C#8 null-coalescing assignment</Title>
    <Description>VSF_TYPE_MARKDOWNSay, I have the following code:


```
MemoryStream ms = null;
ms ??= new MemoryStream();
```
When I type &amp;quot;n&amp;quot; (for &amp;quot;new&amp;quot;) after &amp;quot;??= &amp;quot;, I don't get IntelliSense support. Even when I press Ctr+Space, IntelliSense doesn't show up.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/476800/intellisense-doesnt-support-c8-null-coalescing-ass.html
VSTS ticketId: 807912_
_These are the original issue comments:_

Visual Studio Feedback System on 3/4/2019, 08:10 PM (16 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 3/4/2019, 11:30 PM (15 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34323</IssueID>
    <RepoID>1</RepoID>
    <Title>Track l-value types in conditional operator</Title>
    <Description>This PR also makes assignments to ref variable produce safety warnings


- Fixes https://github.com/dotnet/roslyn/issues/33982 (Mismatched null assignment through a ref variable should be a safety warning)
- Fixes https://github.com/dotnet/roslyn/issues/30432 (Report nullability warning for best common type mismatch with `ref`)
- Fixes https://github.com/dotnet/roslyn/issues/33664 (Conditional ref operator should require same nullability)
- Fixes https://github.com/dotnet/roslyn/issues/33924 (Conditional expression should compute nullable result state from result state of operands)
- Closes https://github.com/dotnet/roslyn/issues/29869 (Confirm ``` /*T:...*/``` expectations in ConditionalOperator_14 unit-test)
- Closes https://github.com/dotnet/roslyn/issues/32701 (Missing warning for assigning an annotated possible null value to an unconstrained generic)
- Relates to https://github.com/dotnet/roslyn/issues/33025 (Track null state through ref assignments to ref ternaries)</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34322</IssueID>
    <RepoID>1</RepoID>
    <Title>Move EnC debug information reading to Features.</Title>
    <Description>Encapsulate EnC debug info reading logic in EditAndContinueMethodDebugInfoReader and move it down to Features. Add tests.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34321</IssueID>
    <RepoID>1</RepoID>
    <Title>Can't compile "Unmanaged constructed type" after deploying the latest master from Visual Studio</Title>
    <Description>**Version Used**: 6de8558637d012340122c9849be633be3004ed9c

**Steps to Reproduce**:

1. Follow Roslyn Visual Studio 2019 build instructions
2. Launch RoslynDev instance of VS 2019
![RoslynConfig](https://user-images.githubusercontent.com/239520/54736925-b4983000-4b6a-11e9-97c6-9771a829b3ed.png)
3. Clone https://github.com/losttech/TypeNum
4. Checkout fbd9ddba289e44dba9db172f58edc60692a8742c
5. Open TypeNum/TypeNum.sln
6. Try building solution


**Expected Behavior**:
IDE does not show any errors
Solution builds

**Actual Behavior**:
IDE does not show any errors (which is correct)
Build fails: `error CS8377: The type 'N1&lt;int&gt;' must be a non-nullable value type, along with all fields at any level of nesting, in order to use it as parameter 'TNum' in the generic type or method 'Twice&lt;TNum, T&gt;'`

**Environment**
VS 16.0.0 RC.2
dotnet --version: 3.0.100-preview3-010431

**Related**
#31374
dotnet/csharplang#1744

</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34320</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixing completion test harness</Title>
    <Description>
    </Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34319</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't warn about #nullable in disabled code:</Title>
    <Description> - Check if in an active code region before warning about #nullable directives in lower lang versions
 - Add test

jcouv updated:
Fixes https://github.com/dotnet/roslyn/issues/32172</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34318</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure we wait for the workspace changes from .editorconfig changes </Title>
    <Description>Our integration tests were modifying .editorconfig files and then waiting on our workspace waiters to ensure the change is propagated to the workspace. This isn't sufficient, since there's asynchrony in various places before it gets back to our system:

1. The kernel has to actually notify the devenv process.
2. The Visual Studio file watching service has asynchrony in it to notify on the appropriate threads.
3. The coding conventions library internally does some async locking around a semaphore, so things might get deferred there if timing is just right.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>27/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34317</IssueID>
    <RepoID>1</RepoID>
    <Title>ArgumentNullException from ReadDebugInfo()</Title>
    <Description>https://github.com/dotnet/roslyn/blob/6de8558637d012340122c9849be633be3004ed9c/src/Workspaces/Core/MSBuild/MSBuild/ProjectFile/CommandLineArgumentReader.cs#L171

The line above will throw an exception when the workspace has a DebugSymbols property but no DebugType property defined. In my particular use case I have to pass both to MSBuildWorkspace.Create() to avoid any issues. For some additional context we create a workspace and load projects as part of a T4 transformation pipeline.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34316</IssueID>
    <RepoID>1</RepoID>
    <Title>Check reachability when looking at uninitialized non-null fields</Title>
    <Description>If the end of a constructor is unreachable we shouldn't warn about
fields which are uninitialized at the end.

Fixes #25529</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34315</IssueID>
    <RepoID>1</RepoID>
    <Title>Filter out additive classifications in EditorClassifier</Title>
    <Description>The EditorClassifier was already filtering down to one ClassifiedSpan per textspan. This change ensures that the additive classifications are the ones filtered out instead of relying on ordering.

Supporting additive classifications in ClassifiedSpans and TaggedText has an open issue https://github.com/dotnet/roslyn/issues/32770

Fixes https://github.com/dotnet/roslyn/issues/34307


&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

User runs Find All References on a static identifier and some entries in the Find All Reference dialog will be missing the name of the identifier.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/34308

### Workarounds, if any

None

### Risk

Low

### Performance impact

Low

### Is this a regression from a previous update?

Yes, regression was introduced in https://github.com/dotnet/roslyn/pull/31231. This issue was partially addressed in https://github.com/dotnet/roslyn/pull/32725.

### Root cause analysis

In Dev16, we added the concept of additive classifications to provide additional information about a primary classification. Which means the same text span could potentially get multiple classifications. Existing services were not expecting this change and would compensate by filtering down to one classification per particular span. This change ensures that when filtered the primary classification is preserved instead of the additive classification.

### How was the bug found?

Reported through developer feedback

&lt;/details&gt;</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34314</IssueID>
    <RepoID>1</RepoID>
    <Title>Change supports feature service to use text buffers over document.</Title>
    <Description>Addresses feedback from #34133

Easiest to review first commit, then second.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34313</IssueID>
    <RepoID>1</RepoID>
    <Title>Problem with temporary object lifetime</Title>
    <Description>**Version Used**: 
VS 2019 Preview 4.2

**Expected Behavior**:

Test should output `not equal`. The first temporary object should not be destroyed and its underlying storage shouldn't be available for reuse till the full expression is evaluated. 

**Actual Behavior**:

Test outputs `equal` because it receives 2 references pointing to the same location.

**Steps to Reproduce**:

```
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

struct Num
{
    byte n;

    public Num(byte n)
    {
        this.n = n;
    }

    public Span&lt;byte&gt; Span =&gt; MemoryMarshal.CreateSpan(ref n, 1);
}

static void Test(Span&lt;byte&gt; a, Span&lt;byte&gt; b)
{
    Console.WriteLine(a.SequenceEqual(b) ? "equal" : "not equal");
}

static void Main()
{
    Test(new Num(1).Span, new Num(2).Span);
}
```

**IL** seems to make things more obvious:
```
// Method begins at RVA 0x2688
// Code size 38 (0x26)
.maxstack 2
.entrypoint
.locals init(
    [0] valuetype ConsoleApp1.Program/Num

)

// (no C# code)
    IL_0000: nop
// Num num = new Num(1);
IL_0001: ldc.i4.1
IL_0002: newobj instance void ConsoleApp1.Program/Num::.ctor(uint8)
IL_0007: stloc.0
// Span&lt;byte&gt; span = num.Span;
IL_0008: ldloca.s 0

IL_000a: call instance valuetype[System.Runtime] System.Span`1&lt;uint8&gt; ConsoleApp1.Program/Num::get_Span()
// num = new Num(2);
IL_000f: ldc.i4.2

IL_0010: newobj instance void ConsoleApp1.Program/Num::.ctor(uint8)
IL_0015: stloc.0
// Test(span, num.Span);
IL_0016: ldloca.s 0

IL_0018: call instance valuetype[System.Runtime] System.Span`1&lt;uint8&gt; ConsoleApp1.Program/Num::get_Span()
IL_001d: call void ConsoleApp1.Program::Test(valuetype[System.Runtime] System.Span`1&lt;uint8&gt;, valuetype[System.Runtime] System.Span`1&lt;uint8&gt;)
// (no C# code)
    IL_0022: nop
IL_0023: br.s IL_0025


IL_0025: ret
} // end of method Program::Main
```
</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34312</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion missing members of lambda parameter in fault tolerance case</Title>
    <Description>Fix https://github.com/dotnet/roslyn/issues/8237</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34311</IssueID>
    <RepoID>1</RepoID>
    <Title>minor refactoring of RecommendationService</Title>
    <Description>
    </Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34310</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>21/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34309</IssueID>
    <RepoID>1</RepoID>
    <Title>Starting and ending a VisualStudioProject batch triggers WorkspaceChanged for no reason</Title>
    <Description>If you start and stop a batch without actually doing anything, we still trigger WorkspaceChanged. This is unnecessary, and makes it a bit tricky to figure out what *did* change if you're trying to debug something responding to workspace changed.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34308</IssueID>
    <RepoID>1</RepoID>
    <Title>VS2019 RC.2 Find References window displays references incorrectly</Title>
    <Description>VSF_TYPE_MARKDOWNIn my code there is a line like below;

IFoobar foo = GetFooBar();

if i press Shift + F12 (Find All References) on IFooBar

Find References windows shows like this;

IFoobar foo = ();

I attached a sample screenshot..

![vs15 9](https://user-images.githubusercontent.com/611219/54726454-6b2aef00-4b30-11e9-986c-e4e4be7139c0.jpg)
VS 2017.9 on the left  vs VS 2019 RC on the right


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/489651/vs2019-rc2-find-references-window-displays-referen.html
VSTS ticketId: 820583_
_These are the original issue comments:_

Visual Studio Feedback System on 3/14/2019, 07:46 PM (5 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 3/20/2019, 00:41 PM (4 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34307</IssueID>
    <RepoID>1</RepoID>
    <Title>VS2019 RC.2 Find References window displays references incorrectly</Title>
    <Description>In my code there is a line like below;

IFoobar foo = GetFooBar();

if i press Shift + F12 (Find All References) on IFooBar

Find References windows shows like this;

IFoobar foo = ();

I attached a sample screenshot..

![vs15 9](https://user-images.githubusercontent.com/611219/54726454-6b2aef00-4b30-11e9-986c-e4e4be7139c0.jpg)
VS 2017.9 on the left  vs VS 2019 RC on the right


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/489651/vs2019-rc2-find-references-window-displays-referen.html
VSTS ticketId: 820583_
_These are the original issue comments:_

Visual Studio Feedback System on 3/14/2019, 07:46 PM (5 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 3/20/2019, 00:41 PM (4 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34306</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove IFromIndexOperation completely</Title>
    <Description>We previously decided to remove IFromIndexOperation in favor of using an IUnaryOperation to represent the `^` syntax in C#, but did not have time to remove the interface completely. This PR finishes the change.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34305</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust completion for explicit interface implementations</Title>
    <Description>- Enable type recommendation within interfaces.
- Do not recommend non-implementable members.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34304</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should guard all calls to ServiceHub and not FailFast.</Title>
    <Description>Based on Watson data, we're noticing a number of crashes in VS because Roslyn is making a call to ServiceHub when the pipe is broken.  Based on discussions with @heejaechang, these are the changes that should be made:

* Guard all service hub calls so that failures don't leak to FailFast.
* Check to see if JsonRpc is disposed (as part of package close) before using it or logging NFE.

Sample calls:
FindReferenceMethodsAsync
FindReferenceMethodsAsync
GetReferenceCountAsync
GetFullyQualified
OnGlobalOperationStarted
Initialize
UpdateSolutionStorageLocation
</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34303</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullability across reference and nullable conversions of tuple elements</Title>
    <Description>Moves tracking of nullability across conversions into `ApplyConversion` and adds support for reference and nullable conversions of tuple elements.

There are a couple of cases that will be handled next (nested tuple conversions, and conversion groups where the top-most conversion is not the interesting conversion), but those are likely to involve more significant changes.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34302</IssueID>
    <RepoID>1</RepoID>
    <Title>NullableWalker should visit each BoundConversion node</Title>
    <Description>`NullableWalker` should visit each `BoundConversion` node. Currently, grouped conversions are visited as a single node.

The conversion nodes should be visited separately so the correct nullability is available for each corresponding `IOperation` instance.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34301</IssueID>
    <RepoID>1</RepoID>
    <Title>AD0001 - CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer threw an exception of type 'System.ArgumentOutOfRangeException'</Title>
    <Description>**Version Used**: VS 2019 Preview 4.2

**Steps to Reproduce**:
Unknown - just opening the solution causes it but intermittently. The exception info is:

```
Error: `AD0001 - Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.ArgumentOutOfRangeException' with message 'Specified argument was out of the range of valid values.
Parameter name: localFunction'.

'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: StackOverflow
ISymbol: DisposeDB (Method)

System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.
Parameter name: localFunction
   at Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraphExtensions.GetLocalFunctionControlFlowGraphInScope(ControlFlowGraph controlFlowGraph, IMethodSymbol localFunction, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.AnalyzeLocalFunctionInvocationCore(IMethodSymbol localFunction, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.AnalyzeLocalFunctionInvocation(IMethodSymbol localFunction, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.AnalyzeLocalFunctionInvocation(IMethodSymbol localFunction)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.VisitInvocation(IInvocationOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitExpressionStatement(IExpressionStatementOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseExpressionStatementOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.Visit(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.AnalyzeOperationsAndUpdateData(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.AnalyzeBlock(BasicBlock basicBlock, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.RunCore(ImmutableArray`1 blocks, DataFlowAnalyzer`1 analyzer, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, TBlockAnalysisData initialAnalysisData, ArrayBuilder`1 unreachableBlocksToVisit, SortedSet`1 outOfRangeBlocksToVisit, PooledDictionary`2 continueDispatchAfterFinally, PooledHashSet`1 dispatchedExceptionsFromRegions, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.Run(ControlFlowGraph controlFlowGraph, DataFlowAnalyzer`1 analyzer, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.RunAnalysis(ControlFlowGraph cfg, ISymbol owningSymbol, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeUnusedValueAssignments(OperationBlockAnalysisContext context, Boolean isComputingUnusedParams, PooledHashSet`1 symbolUsageResultsBuilder, Boolean&amp; hasBlockWithAllUsedSymbolWrites)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
```
I don't know for sure, but an educated guess at the `.DisposeDB()` it's throwing on is probably this method written by @mgravell:
```c#
public virtual void DisposeDB()
{
    /* static */ void KillDB&lt;T&gt;(StackOverflowContext ctx, string key) where T : StackDbContext
    {   // where are static local methods when you need them? oh yeah, C# 8.0!
        var db = ctx.GetContextItem&lt;T&gt;(key);
        if (db != null)
        {
            ctx.SetContextItem(key, null);
            db.LogDispose = false; // this is a valid way to dispose this object
            db.Dispose();
        }
    }

    KillDB&lt;DBContext&gt;(this, nameof(DB));
    KillDB&lt;SitesDBContext&gt;(this, nameof(SitesDB));
    KillDB&lt;DBContext&gt;(this, nameof(ReadOnlyDB));
    KillDB&lt;SitesDBContext&gt;(this, nameof(ReadOnlySitesDB));

    var stackMailDB = GetContextItem&lt;DbConnection&gt;(nameof(StackMailDB));
    if (stackMailDB != null)
    {
        SetContextItem(nameof(StackMailDB), null);
        stackMailDB.Dispose();
    }

    StackMailHelper.DisposeSmtpClient();
}
```

**Expected Behavior**: It doesn't error.
**Actual Behavior**: It errors.
</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34300</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyze captured variables at the location lambda is converted to a delegate</Title>
    <Description>Fixes #29617</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34299</IssueID>
    <RepoID>1</RepoID>
    <Title>Lambdas in array initializers not checked in nullable walker</Title>
    <Description>The following proposed test fails.  The second warning is not produced.

``` c#
        [Fact, WorkItem(34299, "https://github.com/dotnet/roslyn/issues/34299")]
        public void CheckLambdaInArrayInitializer()
        {
            var source =
@"using System;

class C
{
    static void G(object? o)
    {
        Func&lt;object&gt; f = () =&gt; o; // possible null reference return
        var fa3 = new[] {
            f, // this defines the array element type as Func&lt;object&gt;
            () =&gt; o, // possible null reference return
            };
        fa3[0]().ToString();
    }
}
";
            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics(
                // (7,32): warning CS8603: Possible null reference return.
                //         Func&lt;object&gt; f = () =&gt; o; // possible null reference return
                Diagnostic(ErrorCode.WRN_NullReferenceReturn, "o").WithLocation(7, 32),
                // (11,19): warning CS8603: Possible null reference return.
                //            () =&gt; o, // possible null reference return
                Diagnostic(ErrorCode.WRN_NullReferenceReturn, "o").WithLocation(11, 19));
        }
```
</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34298</IssueID>
    <RepoID>1</RepoID>
    <Title>Validate CI failure</Title>
    <Description>Validating failure case</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34297</IssueID>
    <RepoID>1</RepoID>
    <Title>Race condition in PENestedNamespaceSymbol.EnsureAllMembersLoaded</Title>
    <Description>https://github.com/dotnet/roslyn/blob/fab7134296816fc80019c60b0f5bef7400cf23ea/src/Compilers/CSharp/Portable/Symbols/Metadata/PE/PENestedNamespaceSymbol.cs#L122-L132

Reading `_typesByNS` at line 124 is not synchronized with writing it at line 130, which creates a race condition.  Namely, reading `_typesByNS` may be reordered with checking the `lazyTypes == null || lazyNamespaces == null` condition.  If another thread sets `_typesByNS` to `null` in that window, this thread then passes `null` to `LoadAllMembers`, which crashes the process due to an unhandled `NullReferenceException`.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34296</IssueID>
    <RepoID>1</RepoID>
    <Title>Use TestRuntimeAdditionalArguments from Arcade:</Title>
    <Description> - Remove invoke mono script
 - Pass through debug flag via supported arcade mechanism instead

Related to https://github.com/dotnet/roslyn/pull/32885 and https://github.com/dotnet/arcade/pull/2054</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34295</IssueID>
    <RepoID>1</RepoID>
    <Title>`-shared` doesn't seem to work on Mac, only `/shared`</Title>
    <Description>`-shared` produces the error "unrecognized option '-shared'"</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34294</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable completion for modifiers allowed for interface members.</Title>
    <Description>
    </Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34293</IssueID>
    <RepoID>1</RepoID>
    <Title>Add extra nullable test for params:</Title>
    <Description>Call out the difference in behavior between normal / expanded form invocation for nullable params parameters

Closes #25375 </Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34292</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't track uninitialized non-null struct fields</Title>
    <Description>It's already an error to fail to initialize a field of a struct, so
this warning is just a duplication of a more serious error condition

Fixes #30022</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34291</IssueID>
    <RepoID>1</RepoID>
    <Title>SUPER DRAFT: Add Undo to the Document Rename workspace API</Title>
    <Description>***For illustration purposes only***

Might someday fix https://github.com/dotnet/roslyn/issues/34290

Builds on https://github.com/dotnet/roslyn/pull/33733

I'm having two problems:

1. The Global Undo created at https://github.com/dotnet/roslyn/pull/34291/files#diff-4cfc9a338393f212fa10f81440eb76b3R161 doesn't actually put anything in the undo stack for a document if there are no actual text changes to that document. I don't know why yet, but if I rename the file AND change some text, that global undo appears in the stack.
2. Once I've got the code action application under a global undo, the undo unit I'm adding at https://github.com/dotnet/roslyn/pull/34291/files#diff-cbb8610d7833d8bed4af13328decbaebR1118 doesn't seem to get involved in that Global Undo</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34290</IssueID>
    <RepoID>1</RepoID>
    <Title>Document Rename API does not support undo in VS</Title>
    <Description>See https://github.com/dotnet/roslyn/pull/33733/files/df66ddb624ae9e47dad33fdd0383ea98726d160c#r267073350

More details to come.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34289</IssueID>
    <RepoID>1</RepoID>
    <Title>BasicAddMissingReference.VerifyAvailableCodeActions Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=128510&amp;view=ms.vss-test-web.build-test-results-tab)

```
System.Exception: Marker 'y.goo' not found in text: Module Module1

    Sub Main()

    End Sub

End Module


Server stack trace: 
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass8_0.&lt;PlaceCaret&gt;b__0(IWpfTextView view)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass13_0.&lt;GetExecuteOnActionViewCallback&gt;b__0()
   at System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()
   at System.Windows.Threading.DispatcherOperation.InvokeImpl()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Windows.Threading.DispatcherOperation.Wait(TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherOperation operation, CancellationToken cancellationToken, TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken, TimeSpan timeout)
   at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.PlaceCaret(String marker, Int32 charsOffset, Int32 occurrence, Boolean extendSelection, Boolean selectBlock)
   at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
   at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)

Exception rethrown at [0]: 
   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg).GetType().Name
```

![10 14 22-BasicAddMissingReference VerifyAvailableCodeActions-TargetInvocationException](https://user-images.githubusercontent.com/611219/54700694-bf15e380-4af0-11e9-8231-93a10e610a8d.png)
</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34288</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpCodeActions.ApplyEditorConfigAndFixAllOccurrences Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=128138&amp;view=ms.vss-test-web.build-test-results-tab)

Error message:
```
System.NullReferenceException : Object reference not set to an instance of an object.
```
Stack trace:
```
Server stack trace: 
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass21_0.&lt;&lt;GetLightBulbApplicationAction&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass19_0.&lt;&lt;ApplyLightBulbAction&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.Threading.JoinableTask.&lt;JoinAsync&gt;d__68.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()
   at Microsoft.VisualStudio.Threading.JoinableTask.Join(CancellationToken cancellationToken)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.ApplyLightBulbAction(String actionName, Nullable`1 fixAllScope, Boolean blockUntilComplete)
   at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
   at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)

Exception rethrown at [0]: 
   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.ApplyLightBulbAction(String actionName, Nullable`1 fixAllScope, Boolean blockUntilComplete)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.TextViewWindow_OutOfProc.ApplyLightBulbAction(String action, Nullable`1 fixAllScope, Boolean blockUntilComplete) in /_/src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/TextViewWindow_OutOfProc.cs:line 82
   at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.TextViewWindow_OutOfProc.Verifier`1.CodeActions(IEnumerable`1 expectedItems, String applyFix, Boolean verifyNotShowing, Boolean ensureExpectedItemsAreOrdered, Nullable`1 fixAllScope, Boolean blockUntilComplete) in /_/src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/TextViewWindow_OutOfProc.Verifier.cs:line 75
   at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.TextViewWindow_OutOfProc.Verifier`1.CodeAction(String expectedItem, Boolean applyFix, Boolean verifyNotShowing, Boolean ensureExpectedItemsAreOrdered, Nullable`1 fixAllScope, Boolean blockUntilComplete) in /_/src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/TextViewWindow_OutOfProc.Verifier.cs:line 34
   at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.ApplyEditorConfigAndFixAllOccurrences() in /_/src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpCodeActions.cs:line 243
```

![02 29 29-CSharpCodeActions ApplyEditorConfigAndFixAllOccurrences-NullReferenceException](https://user-images.githubusercontent.com/611219/54660698-a841a380-4a94-11e9-8b87-ae74a052ddf0.png)

</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34287</IssueID>
    <RepoID>1</RepoID>
    <Title>Review VSTHRD003 suppressions</Title>
    <Description>:construction: *This issue is still in progress. I'm working on a branch locally and updating this comment based on my work in that branch.*

**Version Used**: 164291f127c722464e16c297546fcff317f526dd + vs-threading 16.0.102

In some cases, VSTHRD003 was suppressed. The following suppressions should be reviewed for correctness, risk, and the ability for vs-threading analyzers to correctly account for unique behaviors.

* `AsyncQueue&lt;TElement&gt;.WithCancellation&lt;T&gt;`: This method matches `ThreadingTools.WithCancellation&lt;T&gt;`. If any vs-threading analyzers special case `WithCancellation`, we should review that those analyzers will still work with this implementation.
* `TaskExtensions.CompletesAsyncOperation` and `CompletesTrackingOperation`
* `AsyncLazy&lt;T&gt;.GetCachedValueAndCacheThisValueIfNoneCached_NoLock`: Always returns the parameter or a completed task
* `TaskExtensions.SafeContinueWith` and overloads/variants
* `SimpleTaskQueue.ScheduleTask` and overloads
* `IdleProcessor.AsyncProcessorTask`
* `ScriptStateTaskExtensions`
* `ServerDispatcher.HandleClientConnection`
* `ScriptTaskExtensions`
* `InteractiveHost.Service.ReportUnhandledExceptionIfAny`</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34286</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34285</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34284</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34283</IssueID>
    <RepoID>1</RepoID>
    <Title>Deadlock in RoamingVisualStudioProfileOptionPersister</Title>
    <Description>**Version Used**: 559630b

üîó https://dev.azure.com/dnceng/public/_build/results?buildId=128122

Stacks:

```
 	[Managed to Native Transition]	
 	mscorlib.dll!System.Threading.Monitor.Enter(object obj, ref bool lockTaken) Line 62	C#
&gt;	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Options.RoamingVisualStudioProfileOptionPersister.RecordObservedValueToWatchForChanges(Microsoft.CodeAnalysis.Options.OptionKey optionKey, string storageKey) Line 222	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Options.RoamingVisualStudioProfileOptionPersister.GetFirstOrDefaultValue(Microsoft.CodeAnalysis.Options.OptionKey optionKey, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Options.RoamingProfileStorageLocation&gt; roamingSerializations) Line 99	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Options.RoamingVisualStudioProfileOptionPersister.TryFetch(Microsoft.CodeAnalysis.Options.OptionKey optionKey, out object value) Line 128	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Options.GlobalOptionService.LoadOptionFromSerializerOrGetDefault(Microsoft.CodeAnalysis.Options.OptionKey optionKey) Line 48	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Options.GlobalOptionService.GetOption(Microsoft.CodeAnalysis.Options.OptionKey optionKey) Line 83	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Options.OptionServiceFactory.OptionService.GetOption(Microsoft.CodeAnalysis.Options.OptionKey optionKey) Line 121	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Options.WorkspaceOptionSet.GetOption(Microsoft.CodeAnalysis.Options.OptionKey optionKey) Line 39	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Options.WorkspaceOptionSet.WithChangedOption(Microsoft.CodeAnalysis.Options.OptionKey optionAndLanguage, object value) Line 46	C#
 	Microsoft.VisualStudio.IntegrationTest.Utilities.dll!Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.VisualStudioWorkspace_InProc.SetPerLanguageOption(string optionName, string feature, string language, object value) Line 82	C#
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	mscorlib.dll!System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg) Line 189	C#
 	mscorlib.dll!System.Runtime.Remoting.Messaging.ServerObjectTerminatorSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage reqMsg) Line 780	C#
 	mscorlib.dll!System.Runtime.Remoting.Messaging.ServerContextTerminatorSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage reqMsg) Line 616	C#
 	mscorlib.dll!System.Runtime.Remoting.Channels.CrossContextChannel.SyncProcessMessageCallback(object[] args) Line 102	C#
 	mscorlib.dll!System.Runtime.Remoting.Channels.ChannelServices.DispatchMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage msg, out System.Runtime.Remoting.Messaging.IMessage replyMsg) Line 767	C#
 	mscorlib.dll!System.Runtime.Remoting.Channels.DispatchChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage requestMsg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, out System.Runtime.Remoting.Messaging.IMessage responseMsg, out System.Runtime.Remoting.Channels.ITransportHeaders responseHeaders, out System.IO.Stream responseStream) Line 77	C#
 	System.Runtime.Remoting.dll!System.Runtime.Remoting.Channels.BinaryServerFormatterSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage requestMsg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, out System.Runtime.Remoting.Messaging.IMessage responseMsg, out System.Runtime.Remoting.Channels.ITransportHeaders responseHeaders, out System.IO.Stream responseStream)	Unknown
 	System.Runtime.Remoting.dll!System.Runtime.Remoting.Channels.Ipc.IpcServerTransportSink.ServiceRequest(object state)	Unknown
 	System.Runtime.Remoting.dll!System.Runtime.Remoting.Channels.SocketHandler.ProcessRequestNow()	Unknown
 	System.Runtime.Remoting.dll!System.Runtime.Remoting.Channels.RequestQueue.ProcessNextRequest(System.Runtime.Remoting.Channels.SocketHandler sh)	Unknown
 	System.Runtime.Remoting.dll!System.Runtime.Remoting.Channels.SocketHandler.BeginReadMessageCallback(System.IAsyncResult ar)	Unknown
 	System.Runtime.Remoting.dll!System.Runtime.Remoting.Channels.Ipc.IpcPort.AsyncFSCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOverlapped)	Unknown
 	mscorlib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP) Line 135	C#
 	[Native to Managed Transition]	
```


```
 	[Managed to Native Transition]	
 	mscorlib.dll!System.Threading.Monitor.Enter(object obj, ref bool lockTaken) Line 62	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Options.GlobalOptionService.RefreshOption(Microsoft.CodeAnalysis.Options.OptionKey optionKey, object newValue) Line 141	C#
&gt;	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Options.RoamingVisualStudioProfileOptionPersister.OnSettingChangedAsync(object sender, System.ComponentModel.PropertyChangedEventArgs args) Line 76	C#
 	Microsoft.VisualStudio.Utilities.dll!Microsoft.VisualStudio.Settings.SettingsManager.AsyncHandler.Invoke(Microsoft.VisualStudio.Settings.SettingsManager sender, System.ComponentModel.PropertyChangedEventArgs args)	Unknown
 	Microsoft.VisualStudio.Utilities.dll!Microsoft.VisualStudio.Settings.SettingsManager.FireLocalSettingChangeEventAsync(System.ComponentModel.PropertyChangedEventArgs args, System.Collections.Generic.List&lt;Microsoft.VisualStudio.Settings.SettingsManager.ScopedEventHandler&gt; handlers)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(object stateMachine) Line 1090	C#
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) Line 954	C#
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) Line 902	C#
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run() Line 1070	C#
 	mscorlib.dll!System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() Line 715	C#
 	mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch() Line 820	C#
 	mscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback() Line 1161	C#
 	[Native to Managed Transition]	
```</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34282</IssueID>
    <RepoID>1</RepoID>
    <Title>Assertion failure in RaiseProjectAnalyzerReferenceChangedIfNeeded</Title>
    <Description>**Version Used**: #34259 

üîó  https://dev.azure.com/dnceng/public/_build/results?buildId=127959
üîó https://dev.azure.com/dnceng/public/_build/results?buildId=195429

```
Event Time (UTC): 3/19/2019 11:05:55 PM
Event ID: 1025
Data: Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.Exception
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Exit(System.String)
   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Fail(System.String, System.String)
   at System.Diagnostics.TraceListener.Fail(System.String)
   at System.Diagnostics.TraceInternal.Fail(System.String)
   at System.Diagnostics.Debug.Assert(Boolean)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+StateManager+ProjectStates.RaiseProjectAnalyzerReferenceChangedIfNeeded(Microsoft.CodeAnalysis.Project, System.Collections.Immutable.ImmutableDictionary`2&lt;System.Object,System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer&gt;&gt;, System.Collections.Immutable.ImmutableDictionary`2&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,StateSet&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+StateManager+ProjectStates.GetOrUpdateAnalyzerMap(Microsoft.CodeAnalysis.Project)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+StateManager+ProjectStates.GetOrUpdateStateSets(Microsoft.CodeAnalysis.Project)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+StateManager.GetOrUpdateStateSets(Microsoft.CodeAnalysis.Project)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+&lt;AnalyzeDocumentForKindAsync&gt;d__86.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalyzeDocumentForKindAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Diagnostics.AnalysisKind, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalyzeSyntaxAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.SolutionCrawler.InvocationReasons, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;&gt;c__DisplayClass31_0.&lt;ProcessDocumentAnalyzersAsync&gt;b__0(Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer, Microsoft.CodeAnalysis.Document, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;&gt;c__DisplayClass32_1`1+&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;&gt;c__DisplayClass32_1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;RunAnalyzersAsync&gt;b__0(System.__Canon, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.GetOrDefaultAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, System.Func`3&lt;System.__Canon,System.Threading.CancellationToken,System.Threading.Tasks.Task`1&lt;System.__Canon&gt;&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;RunAnalyzersAsync&gt;d__32`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.RunAnalyzersAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt;, System.__Canon, System.Func`4&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer,System.__Canon,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;ProcessDocumentAnalyzersAsync&gt;d__31.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.ProcessDocumentAnalyzersAsync(Microsoft.CodeAnalysis.Document, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt;, WorkItem, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ProcessDocumentAsync&gt;d__30.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.ProcessDocumentAsync(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt;, WorkItem, System.Threading.CancellationTokenSource)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;TryProcessOneHigherPriorityDocumentAsync&gt;d__28.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.TryProcessOneHigherPriorityDocumentAsync()
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ExecuteAsync&gt;d__17.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ResetStatesAsync&gt;d__36.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;RunAnalyzersAsync&gt;d__32`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__34`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;&gt;c__DisplayClass32_1`1+&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()
   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions+&lt;SynchronizePrimaryWorkspaceAsync&gt;d__21.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(Boolean)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(Boolean)
   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions+&lt;TryRunRemoteAsync&gt;d__12.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()
   at Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx+&lt;InvokeAsync&gt;d__10.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at StreamJsonRpc.JsonRpc+&lt;InvokeCoreAsync&gt;d__93`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Threading.Tasks.TaskCompletionSource`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at StreamJsonRpc.JsonRpc+&lt;&gt;c__DisplayClass93_1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;InvokeCoreAsync&gt;b__0(StreamJsonRpc.JsonRpcMessage)
   at StreamJsonRpc.JsonRpc+&lt;HandleRpcAsync&gt;d__103.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at Microsoft.VisualStudio.Threading.AwaitExtensions+TaskSchedulerAwaiter+&lt;&gt;c.&lt;OnCompleted&gt;b__5_0(System.Object)
   at System.Threading.QueueUserWorkItemCallback.WaitCallback_Context(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```
</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34281</IssueID>
    <RepoID>1</RepoID>
    <Title>String quotes not added in pairs</Title>
    <Description>VSF_TYPE_MARKDOWNIn Console.WriteLine(); when a quote symbol is added in parens the matching quote is not added.
If the last bracket and semicolon is removed the matching quote pair is added.

Regards
Kerry Brown

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/497338/string-quotes-not-added-in-pairs.html
VSTS ticketId: 822937_
_These are the original issue comments:_

Visual Studio Feedback System on 3/18/2019, 11:53 PM (19 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34280</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename variable should not trigger on change to discard</Title>
    <Description>```C#
class C
{
    int M()
    {
        int i;
        i/*Change i here to _*/ = M();
        return i;
    }
}
```

When I change the `i` variable to `_` where indicated by the comment, rename offers to change the name of the variable to `_`. It should be intelligent around the discard identifier and not offer to rename in this scenario.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34279</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34278</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34277</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34276</IssueID>
    <RepoID>1</RepoID>
    <Title>Document Rename API does not work for documents in Shared Projects</Title>
    <Description>See https://github.com/dotnet/roslyn/pull/33733/files/df66ddb624ae9e47dad33fdd0383ea98726d160c#r267070158

More details to come.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34275</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix inline description for async completion</Title>
    <Description>Fix #34271</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34274</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master into features/nullable-api</Title>
    <Description>@dotnet/roslyn-compiler to review the last commit, which removes the extra nullable annotations to align the public and the private versions.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34273</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement pattern-matching in the nullable walker</Title>
    <Description>Fixes #29909
Fixes #31881
Fixes #30952
Fixes #33499
Fixes #30597
Fixes #32414
Fixes #23944</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34272</IssueID>
    <RepoID>1</RepoID>
    <Title>Tweak formatting for switch expressions</Title>
    <Description>Two questions:
1. should we align the fat arrows? (illustrated below)
2. where should the curly braces go?


Aligning fat arrows:
```C#
_ = e switch
{
    null =&gt; 1,
    _     =&gt; 2,
};
```

Current formatting:
```
_ = e switch
{
    null =&gt; 1,
    _ =&gt; 2,
};
```</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34271</IssueID>
    <RepoID>1</RepoID>
    <Title>Regression in async-completion.  'inline description' no longer supported.</Title>
    <Description>Async completion undid the work we did to make inline-descriptions supported in Regex completion:

![image](https://user-images.githubusercontent.com/4564579/54647067-6d247d80-4a5e-11e9-8ff1-d81bd0f40bc7.png)

It now looks like:

![image](https://user-images.githubusercontent.com/4564579/54647075-744b8b80-4a5e-11e9-8df2-ad5da5072e2c.png)


This also affects "completion for other namespaces" as we want to use the 'inline description' to specify where the type is coming from.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34270</IssueID>
    <RepoID>1</RepoID>
    <Title>Infer top-level nullability independently from the type</Title>
    <Description>Fixes #30987</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34269</IssueID>
    <RepoID>1</RepoID>
    <Title>Using `Index` on string created invalid program</Title>
    <Description>**Version Used**: 

Inside visual studio: 

- Compiler version: '3.0.19.16505 (df5f5d85)'. Language version: preview.

With the dotnet CLI:  

- Compiler version: '3.1.19.15401 (c32ec290)'. Language version: preview.


**Steps to Reproduce**:

Enter the following as your program text:.  This works with a .NET Core 3.0 console application:

```csharp
using System;

namespace InvalidProgram
{
    class Program
    {
        static void Main(string[] args)
        {
            var phrase = "Hello World! Let's mess around with ranges";
            var phraseRange = phrase[6..^6];

            Index m = phraseRange.IndexOf('m');
            Console.WriteLine(m);
            Console.WriteLine(phraseRange[m]);
            Console.WriteLine(phraseRange);
        }
    }
}
```

Run the program.

**Expected Behavior**:

I'd expect it to run correctly with the following output:

```console
13
m
World! Let's mess around with
```

**Actual Behavior**:

This generates an invalid program exception:

```console
Unhandled Exception: System.InvalidProgramException: Common Language Runtime detected an invalid program.
   at InvalidProgram.Program.Main(String[] args)
```

If you change this declaration

```csharp
Index m = phraseRange.IndexOf('m');
```

to an integer:

```csharp
int m = phraseRange.IndexOf('m');
```

The program works correctly.
</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34268</IssueID>
    <RepoID>1</RepoID>
    <Title>Pull Member Up failure/InfoBar when making expression-bodied property abstract</Title>
    <Description>**Version Used**: Visual Studio 2019 28718.190.d16.0stg

**Steps to Reproduce**:

1. Paste C# code

```C#
abstract class B { }

class D : B
{
    int $$X =&gt; 7;
}
```

2. Remove the `$$` and invoke Pull Members Up dialog at that location.
3. Choose to move X up and make it abstract.

**Expected Behavior**: It works
**Actual Behavior**: Exception/InfoBar:

```
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.PropertyGenerator.TryGetExpressionBody(BasePropertyDeclarationSyntax baseProperty,ParseOptions options,ExpressionBodyPreference preference,ArrowExpressionClauseSyntax&amp; arrowExpression,SyntaxToken&amp; semicolonToken)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.PropertyGenerator.UseExpressionBodyIfDesired(Workspace workspace,PropertyDeclarationSyntax declaration,ParseOptions options)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.PropertyGenerator.GeneratePropertyDeclaration(IPropertySymbol property,CodeGenerationDestination destination,Workspace workspace,CodeGenerationOptions options,ParseOptions parseOptions)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.PropertyGenerator.GeneratePropertyOrIndexer(IPropertySymbol property,CodeGenerationDestination destination,Workspace workspace,CodeGenerationOptions options,ParseOptions parseOptions)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.PropertyGenerator.AddPropertyTo(TypeDeclarationSyntax destination,IPropertySymbol property,Workspace workspace,CodeGenerationOptions options,IList`1 availableIndices)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpCodeGenerationService.AddProperty[TDeclarationNode](TDeclarationNode destination,IPropertySymbol property,CodeGenerationOptions options,IList`1 availableIndices)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.UpdateDestination[TDeclarationNode](IList`1 availableIndices,CodeGenerationOptions options,TDeclarationNode currentDestination,ISymbol member,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.AddMembersToAppropiateLocationInDestination[TDeclarationSyntax](TDeclarationSyntax destination,IEnumerable`1 members,IList`1 availableIndices,CodeGenerationOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.AddMembers[TDeclarationNode](TDeclarationNode destination,IEnumerable`1 members,IList`1 availableIndices,CodeGenerationOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.AddMembers[TDeclarationNode](TDeclarationNode destination,IEnumerable`1 members,CodeGenerationOptions options,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.CodeRefactorings.PullMemberUp.MembersPuller.PullMembersIntoClassAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.PullMemberUp.AbstractPullMemberUpRefactoringProvider.PullMemberUpWithDialogCodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOperationsAsync(&lt;Unknown Parameters&gt;)
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass17_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```
</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34267</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34266</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion gets in the way attempting to line up arguments</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/34237</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34265</IssueID>
    <RepoID>1</RepoID>
    <Title>Update integration tests following the SDK 3.0 change</Title>
    <Description>* Fixes #34211
* Work around #34264 without disabling a test</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34264</IssueID>
    <RepoID>1</RepoID>
    <Title>WorkspacesNetCore.MetadataReference should not need to wait for all asynchronous operations</Title>
    <Description>**Version Used**: #34265

The following wait operation should not be required:

https://github.com/dotnet/roslyn/blob/8c5af921afd4fc1a4e949052571e6503b0ca8288/src/VisualStudio/IntegrationTest/IntegrationTests/Workspace/WorkspacesNetCore.cs#L42-L44

It should only need to wait for `FeatureAttribute.Workspace`.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34263</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to DIM before 3.0 switch</Title>
    <Description>Merges the master branch to features/DefaultInterfaceImplementation up to the 3.0 switch. That merge will be handled separately. </Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34262</IssueID>
    <RepoID>1</RepoID>
    <Title>Only skip test on mono</Title>
    <Description>Re-enable DecimalBinaryOp_03 test for platforms other than mono
Update comment to to track status</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34261</IssueID>
    <RepoID>1</RepoID>
    <Title>Update async completion and quick info to share BuildClassifiedTextElements</Title>
    <Description>This change fixes a merge of async completion work (originally in **dev16.0-vs-deps**) with Quick Info work (originally in **master**).</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34260</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly members metadata</Title>
    <Description>Related to #32911

- commit 1: Add feature doc (largely pulled from dotnet/csharplang#1710)
  This makes it easier to track the relationship between the specification evolving and the implementation changing for the purpose of feature development.
- commit 2: Emit IsReadOnlyAttribute in method and property metadata
</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34259</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix exception message for GetRequiredService</Title>
    <Description>
    </Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34258</IssueID>
    <RepoID>1</RepoID>
    <Title>Option to cause a procedural call to value-returning function to be an error</Title>
    <Description>&lt;p&gt;A method, e.g. Foo, might be called functionally, in an expression, e.g.:&lt;/p&gt;&lt;pre&gt;n = Foo(&amp;quot;Banana&amp;quot;) + 1;&lt;/pre&gt;&lt;p&gt;or it can be called procedurally, e.g.:&lt;/p&gt;&lt;pre&gt;Foo(&amp;quot;Banana&amp;quot;);&lt;/pre&gt;&lt;p&gt;C# inherits from C the discarding the result from a procedural call of a value-returning (non-void) function. I come from the Pascal tradition of not permitting this, so whenever I write a value-returning function, I intend it to only ever be called functionally. &lt;/p&gt;&lt;p&gt;I'd like to be able to set an option to give me a warning or an error for any procedural call to a value-returning function. This would be valuable to me in catching bugs in my code. &lt;/p&gt;&lt;p&gt;It would be ideal if the option could be set for a whole project or for a specific class. &lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/481735/option-to-cause-a-procedural-call-to-value-returni.html
VSTS ticketId: 813455_
_These are the original issue comments:_

Jane Wu [MSFT] on 3/7/2019, 08:31 PM (11 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34257</IssueID>
    <RepoID>1</RepoID>
    <Title>Renable failing test</Title>
    <Description>Checking a theory. Don't merge.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34256</IssueID>
    <RepoID>1</RepoID>
    <Title>Include build number in integration test artifacts</Title>
    <Description>
    </Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34255</IssueID>
    <RepoID>1</RepoID>
    <Title>Comment out parameters in the official build pipeline</Title>
    <Description>Commenting out so that we can set build variables when queuing.

@tmat @jaredpar</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34254</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix incorrect task chaining in InlineRenameSession</Title>
    <Description>Fixes #29483</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34253</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC test scenario: Multiple module instance loads</Title>
    <Description>**Version Used**: 

![image](https://user-images.githubusercontent.com/41759/54627716-38e69800-4a31-11e9-9284-5dd29245e6d7.png)

Fixed by https://github.com/dotnet/roslyn/pull/34027

**Issue**:

EnC changes are not applied correctly when multiple instances of the same module are loaded in between edits - this applies to both .NET Framework and .NET Core apps.

**Steps to Reproduce**:

1. Unzip [MultiLoad.zip](https://github.com/dotnet/roslyn/files/2984669/MultiLoad.zip)
2. Open and build MultiLoad.sln.
3. Place 2 breakpoints at `Console.WriteLine("Add F");` and `Console.WriteLine("Add G");`:
4. F5
5. When breakpoint 1 is hit uncomment method definition `F()` in `Class1.cs`.
6. F5
7. When breakpoint 2 is hit uncomment method definition `G()` in `Class1.cs` and method calls `F();` and `G();` in `Class1` constructor.
8. F5

**Expected Behavior**:
Program successfully completes and prints
```
Add F
Add G
Instance created in 1
F
G
Instance created in 2
F
G
```

**Actual Behavior**:

![image](https://user-images.githubusercontent.com/41759/54628118-1dc85800-4a32-11e9-9b5e-a6819e102565.png)

</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34252</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34251</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34250</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34249</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34248</IssueID>
    <RepoID>1</RepoID>
    <Title>MS.VS.LanguageServices.UnitTests hang during AppDomain Unload</Title>
    <Description>This hang is causing a number of Azure Build Jobs to hang on Release x86 unit test runs. Most recent example: https://dev.azure.com/dnceng/public/_build/results?buildId=127206&amp;view=logs&amp;jobId=ccc4f4cd-3db2-535a-b197-b0dc972cf7f6

The hang appears to be during the `AppDomain.Unload` call executed by xUnit when tests are finished executing. Generally thread 3 is where unit tests get run and this is the stack during the hang. 

```
ChildEBP RetAddr  Caller, Callee
05d0f134 77635983 KERNELBASE!WaitForMultipleObjectsEx+0x133, calling ntdll!NtWaitForMultipleObjects
05d0f17c 776359d9 KERNELBASE!WaitForMultipleObjectsEx+0x189, calling ntdll!RtlActivateActivationContextUnsafeFast
05d0f218 7497ffce combase!CObjectContext::QIHelper+0x18e
05d0f228 7497ffdd combase!CObjectContext::QIHelper+0x19d, calling combase!__security_check_cookie
05d0f238 749802d5 combase!CObjectContext::QueryInterface+0x15, calling combase!CObjectContext::QIHelper
05d0f24c 73affb30 clr!SafeQueryInterface+0xee
05d0f258 73affb46 clr!SafeQueryInterface+0x13f, calling clr!SafeQueryInterface+0x14b
05d0f27c 73b701d5 clr!SafeReleasePreemp+0x286
05d0f2c8 73c797ae clr!WaitForMultipleObjectsEx_SO_TOLERANT+0x3c, calling KERNELBASE!WaitForMultipleObjectsEx
05d0f318 73c794f5 clr!Thread::DoAppropriateWaitWorker+0x237, calling clr!WaitForMultipleObjectsEx_SO_TOLERANT
05d0f3a0 73c795e6 clr!Thread::DoAppropriateWait+0x64, calling clr!Thread::DoAppropriateWaitWorker
05d0f40c 73c79754 clr!CLREventBase::WaitEx+0x128, calling clr!Thread::DoAppropriateWait
05d0f444 77bba99c ntdll!NtSetEvent+0xc
05d0f458 73b69191 clr!FinalizerThread::FinalizerThreadWait+0xc5, calling clr!CLREventBase::WaitEx
05d0f4b4 73df590d clr!AppDomain::Exit+0x306, calling clr!FinalizerThread::FinalizerThreadWait
05d0f4dc 77b901b6 ntdll!LdrpCallInitRoutine+0x55, calling ntdll!LdrxCallInitRoutine
05d0f4ec 77b901d4 ntdll!LdrpCallInitRoutine+0x73, calling ntdll!_SEH_epilog4
05d0f518 77bba99c ntdll!NtSetEvent+0xc
05d0f51c 77bb3b42 ntdll!LdrpDropLastInProgressCount+0x38, calling ntdll!NtSetEvent
05d0f52c 77bce57a ntdll!_SEH_epilog4_GS+0xa, calling ntdll!__security_check_cookie
05d0f530 77b90444 ntdll!LdrpInitializeThread+0x232, calling ntdll!_SEH_epilog4_GS
05d0f5c8 77b95e2a ntdll!RtlpAllocateHeapInternal+0xda, calling ntdll!RtlpLowFragHeapAllocFromContext
05d0f5fc 73df622f clr!AppDomain::Unload+0x1a8, calling clr!AppDomain::Exit
05d0f648 73df72bf clr!AppDomain::ADUnloadWorkerHelper+0x4d, calling clr!AppDomain::Unload
05d0f6ac 73df7452 clr!AppDomain::DoADUnloadWork+0x8b, calling clr!AppDomain::ADUnloadWorkerHelper
05d0f6d8 73df74b4 clr!DoADUnloadWorkHelper+0x30, calling clr!AppDomain::DoADUnloadWork
05d0f708 73c7d9ab clr!CLREventBase::WaitEx+0x157, calling clr!_EH_epilog3
05d0f70c 73b6ef1b clr!CLREventBase::Wait+0x1a, calling clr!CLREventBase::WaitEx
05d0f730 73c049d4 clr!AppDomain::ADUnloadThreadStart+0x41a, calling clr!DoADUnloadWorkHelper
05d0f79c 73af8c2b clr!EEHeapFree+0x3b, calling kernel32!HeapFreeStub
05d0f7d4 73b6ed61 clr!Thread::intermediateThreadProc+0x55
05d0f8e0 73b6ed47 clr!Thread::intermediateThreadProc+0x3b, calling clr!_alloca_probe_16
05d0f8f4 74458484 kernel32!BaseThreadInitThunk+0x24
05d0f908 77bb3ab8 ntdll!__RtlUserThreadStart+0x2f
05d0f950 77bb3a88 ntdll!_RtlUserThreadStart+0x1b, calling ntdll!__RtlUserThreadStart
```

The finalizer thread is stuck in this state. Possible it's working with the `AppDomain` to tear down a RCW object

```
Current frame: ntdll!NtWaitForMultipleObjects+0xc
ChildEBP RetAddr  Caller, Callee
0527ead0 77635983 KERNELBASE!WaitForMultipleObjectsEx+0x133, calling ntdll!NtWaitForMultipleObjects
0527eb6c 7250cfcf clrjit!Compiler::genReportEH+0x11e, calling clrjit!__security_check_cookie
0527eb7c 73af18e7 clr!ClrFlsIncrementValue+0x14
0527eb90 73af18e7 clr!ClrFlsIncrementValue+0x14
0527ebe8 73b0266c clr!LoaderHeap::RealAllocMemUnsafe+0x68, calling clr!ClrLeaveCriticalSection
0527ebec 73b02677 clr!LoaderHeap::RealAllocMemUnsafe+0x73, calling clr!_EH_epilog3
0527ec18 73b84c9d clr!CompressDebugInfo::CompressBoundariesAndVars+0x27b, calling MSVCR120_CLR0400!memcpy
0527ec24 73b84ce5 clr!CompressDebugInfo::CompressBoundariesAndVars+0x2bf, calling clr!SigBuilder::~SigBuilder
0527ec34 73b84d07 clr!CompressDebugInfo::CompressBoundariesAndVars+0x324, calling clr!__security_check_cookie
0527ec64 7496feaa combase!MTAThreadWaitForCall+0xda, calling KERNELBASE!WaitForMultipleObjectsEx
0527eca4 749959ff combase!OXIDEntry::PostCall+0x1af, calling ntdll!RtlLeaveCriticalSection
0527ecb4 74995a24 combase!OXIDEntry::PostCall+0x1d4, calling combase!__security_check_cookie
0527ecc4 74979138 combase!ObjectLibrary::Details::AddComReferenceCounting_StandardReferenceCountingLayer&lt;SyncServerCall,ObjectLibrary::Details::AddComReferenceCounting_ReferenceCountLayer&lt;SyncServerCall,ObjectLibrary::Details::Allocation_SealedClassDeleteSelfLayer&lt;SyncServerCall,ObjectLibrary::Details::MixinBase&lt;SyncServerCall,ObjectLibrary::Details::Mixins_BaseForwarderLayer&lt;ObjectLibrary::ForwardedBases&lt;StandardComServerCall&gt; &gt; &gt; &gt; &gt; &gt;::Release+0x188, calling combase!__security_check_cookie
0527eccc 74970004 combase!MTAThreadDispatchCrossApartmentCall+0xf4, calling combase!MTAThreadWaitForCall
0527ed84 74993abe combase!CSyncClientCall::SendReceive2+0x37e
0527ee08 77b95e2a ntdll!RtlpAllocateHeapInternal+0xda, calling ntdll!RtlpLowFragHeapAllocFromContext
0527ee48 77b95d3e ntdll!RtlAllocateHeap+0x3e, calling ntdll!RtlpAllocateHeapInternal
0527ee50 77b95d3e ntdll!RtlAllocateHeap+0x3e, calling ntdll!RtlpAllocateHeapInternal
0527ee6c 7499702f combase!CMessageCall::ClientGetBuffer+0x95f, calling ucrtbase!memset
0527ee88 749d058e combase!CPolicySet::DeliverEvents+0x46, calling combase!__security_check_cookie
0527eea8 749d1d8b combase!DefaultSendReceive+0x8b, calling combase!CSyncClientCall::SendReceive2
0527eec8 749d03be combase!CPolicySet::FillBuffer+0x51, calling combase!__security_check_cookie
0527ef04 749932da combase!CSyncClientCall::SendReceive+0x39a, calling combase!DefaultSendReceive
0527eff4 749d067e combase!CPolicySet::GetSize+0x75, calling combase!__security_check_cookie
0527f004 7707fa19 rpcrt4!NdrComplexStructMarshall+0x2b9, calling rpcrt4!NdrpMemoryIncrement
0527f010 7707fa85 rpcrt4!NdrComplexStructMarshall+0x325, calling rpcrt4!NdrComplexStructMarshall+0x7be
0527f020 7707fa9f rpcrt4!NdrComplexStructMarshall+0x33f, calling rpcrt4!__security_check_cookie
0527f02c 74994583 combase!StandardComClientCall::GetBuffer+0x103
0527f03c 749945c5 combase!StandardComClientCall::GetBuffer+0x145, calling combase!__security_check_cookie
0527f0b4 77080ed7 rpcrt4!NdrComplexStructBufferSize+0x187, calling rpcrt4!__security_check_cookie
0527f0e0 749e1bf5 combase!NdrExtpProxySendReceive+0xd5, calling combase!CSyncClientCall::SendReceive
0527f10c 77055706 rpcrt4!NdrClientCall2+0x526
0527f144 73ba42bb clr!TableFullRebalanceCache+0x2a7, calling clr!__security_check_cookie
0527f3f0 73b6f5d2 clr!HndDestroyHandle+0x133, calling clr!TableFreeSingleHandleToCache
0527f42c 73b6f612 clr!DestroyTypedHandle+0x1c, calling clr!HndDestroyHandle
0527f438 73c77f65 clr!QuickSort+0x73
0527f464 73c77f65 clr!QuickSort+0x73
0527f490 73c77f65 clr!QuickSort+0x73
0527f4b0 73c78147 clr!BlockFreeHandles+0x78, calling clr!BlockFreeHandlesInMask
0527f4f0 73c781c5 clr!SegmentFreeHandles+0x4d, calling clr!BlockFreeHandles
0527f524 73c78221 clr!TableFreeBulkPreparedHandles+0x22, calling clr!SegmentFreeHandles
0527f540 73c7825a clr!TableFullRebalanceCache+0x191, calling clr!TableFreeBulkPreparedHandles
0527f554 73ba42bb clr!TableFullRebalanceCache+0x2a7, calling clr!__security_check_cookie
0527f5d0 749af2c2 combase!CRWLock::AcquireReaderLock+0x62, calling kernel32!GetCurrentThreadId
0527f610 74a13a30 combase!ObjectStublessClient+0x70, calling rpcrt4!NdrClientCall2
0527f630 74a0b9cf combase!ObjectStubless+0xf, calling combase!ObjectStublessClient
0527f640 7497f2c0 combase!CObjectContext::InternalContextCallback+0x260
0527f6e0 7497f429 combase!CObjectContext::ContextCallback+0x69, calling combase!CObjectContext::InternalContextCallback
0527f734 73bb629b clr!CtxEntry::EnterContext+0x252
0527f778 73ba4182 clr!TableQuickRebalanceCache+0xa9, calling clr!TableFullRebalanceCache
0527f788 77bab569 ntdll!RtlSetLastWin32Error+0x39, calling ntdll!__security_check_cookie
0527f80c 73aef478 clr!CrstBase::Leave+0x3b, calling ntdll!RtlLeaveCriticalSection
0527f834 73bb6372 clr!RCW::EnterContext+0x3a, calling clr!CtxEntry::EnterContext
0527f86c 73bb63b3 clr!RCWCleanupList::ReleaseRCWListInCorrectCtx+0xbc, calling clr!RCW::EnterContext
0527f890 73bb617b clr!RCWCleanupList::CleanupAllWrappers+0x14d, calling clr!RCWCleanupList::ReleaseRCWListInCorrectCtx
0527f8e4 73c70896 clr!SyncBlockCache::DeleteSyncBlock+0xa7, calling clr!_EH_epilog3
0527f8ec 73c705cf clr!SyncBlockCache::CleanupSyncBlocks+0xd0, calling clr!RCWCleanupList::CleanupAllWrappers
0527f924 73af8c80 clr!operator delete+0x1f
0527f93c 73c709a8 clr!Thread::DoExtraWorkForFinalizer+0x75, calling clr!SyncBlockCache::CleanupSyncBlocks
0527f94c 73c703e9 clr!FinalizerThread::FinalizerThreadWorker+0xba, calling clr!Thread::DoExtraWorkForFinalizer
0527f97c 73afa029 clr!ManagedThreadBase_DispatchInner+0x71
0527f990 73afa093 clr!ManagedThreadBase_DispatchMiddle+0x7e, calling clr!ManagedThreadBase_DispatchInner
0527f9c4 73af18e7 clr!ClrFlsIncrementValue+0x14
0527f9e8 73af18e7 clr!ClrFlsIncrementValue+0x14
0527f9f4 73af7333 clr!ThreadSuspend::UnlockThreadStore+0x3f, calling clr!ClrFlsIncrementValue
0527fa00 73c9113a clr!ThreadStore::TransferStartedThread+0xc9, calling clr!_EH_epilog3
0527fa34 73afa160 clr!ManagedThreadBase_DispatchOuter+0x5b, calling clr!ManagedThreadBase_DispatchMiddle
0527fa90 73c64e38 clr!ManagedThreadBase::FinalizerBase+0x33, calling clr!ManagedThreadBase_DispatchOuter
0527fab8 73c64ea5 clr!FinalizerThread::FinalizerThreadStart+0xd9, calling clr!ManagedThreadBase::FinalizerBase
0527fad4 73af8c5d clr!EEHeapFreeInProcessHeap+0x2f, calling clr!EEHeapFree
0527faf4 73b6ed61 clr!Thread::intermediateThreadProc+0x55
0527fb78 73b6ed47 clr!Thread::intermediateThreadProc+0x3b, calling clr!_alloca_probe_16
0527fb8c 74458484 kernel32!BaseThreadInitThunk+0x24
0527fba0 77bb3ab8 ntdll!__RtlUserThreadStart+0x2f
0527fbe8 77bb3a88 ntdll!_RtlUserThreadStart+0x1b, calling ntdll!__RtlUserThreadStart
```
</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34247</IssueID>
    <RepoID>1</RepoID>
    <Title>Integration test failure BasicIntelliSense.TypeAVariableDeclaration</Title>
    <Description>https://dev.azure.com/dnceng/public/_build/results?buildId=127574

[Screenshots Debug_true.zip](https://github.com/dotnet/roslyn/files/2984204/Screenshots.Debug_true.zip)

```
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; Xunit.Sdk.EqualException: Assert.Equal() Failure
Expected: False
Actual:   True
   at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in C:\projects\xunit\src\xunit.assert\Asserts\EqualityAsserts.cs:line 40
   at Xunit.Assert.Equal[T](T expected, T actual) in C:\projects\xunit\src\xunit.assert\Asserts\EqualityAsserts.cs:line 24
   at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicIntelliSense.TypeAVariableDeclaration() in /_/src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicIntelliSense.cs:line 152
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 150
   at Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 257
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task).GetType().Name
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 150
   at Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 257
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
```</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34246</IssueID>
    <RepoID>1</RepoID>
    <Title>Infer nullability in switch on conditional access operator</Title>
    <Description>A warning is reported for `s.ToString()` currently:
```C#
class Program
{
    static void M(string? s)
    {
        switch (s?.Length)
        {
            case 0:
                s.ToString();
                break;
        }
    }
}
```</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>07/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34245</IssueID>
    <RepoID>1</RepoID>
    <Title>Workaround a deadlock caused by watching .editorconfigs</Title>
    <Description>We use the CodingConventions library from Visual Studio that parses and processes .editorconfig files for us. This library under the covers uses the Visual Studio file watching service for watching files. In Visual Studio 2017 the file watching service made the guarantee that watching files could be done in a free-threaded manner in the background and wouldn't marshal. The .editorconfig library then passed this guarantee along to us.

In Dev16, the file watching service was rewritten, and accidentally lost that guarantee in specific cases. Much of our interactions with the file change service also changed so it doesn't matter, but the .editorconfig library's use of the file watching service is causing deadlocks in some scenarios. This change is a workaround to ensure we don't start watching .editorconfig files on the background thread in places where we need to ensure we don't touch the UI thread.

Ideally we'd be fixing the file change service itself to restore the guarantee, but that's too risky of a change for our current needs and isn't something we can do quickly enough to avoid customer issues. Since we're rewriting our .editorconfig handling entirely which will cause us to stop using the .editorconfig library (and by extension, it's use of this problematic file change service path), we can do this workaround now and let the problem go away on it's own soon when we simply delete all of this.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/810494

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

User tries to create a new IntelliTest into an existing project. The operation may hang.

### Bugs this fixes

https://devdiv.visualstudio.com/DevDiv/_workitems/edit/810494

### Workarounds, if any

No practical workarounds.

### Risk

Low to moderate. This is a tactical fix designed to limit risk.

### Performance impact

Lowish: we're potentially duplicating the cache of .editorconfig data being used since we're not sharing the same instance as the rest of VS. There is a possibility that an unknown configuration could encounter observable slowdowns, though these are not as risky as deadlocks. We are working with the platform team to address the API change that led to this problem so the workaround, along with its risks, can be removed in a timely manner.

### Is this a regression from a previous update?

Yes, regressed at some point during Dev16.

### Root cause analysis

In Dev16, the file watching service was rewritten, and accidentally lost a free-threading guarantee in specific cases, which causes this deadlock. Rearchitecting it to avoid that assumption is too complicated and risky, so we're doing a fix here.

### How was the bug found?

Internal testing.

&lt;/details&gt;</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34244</IssueID>
    <RepoID>1</RepoID>
    <Title>Use a keyboard shortcut instead of editor command</Title>
    <Description>Fixes #26041</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34243</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19167.10

</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34242</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34241</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34240</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34239</IssueID>
    <RepoID>1</RepoID>
    <Title>Awaited tasks are kept in memory even after completion</Title>
    <Description>**Version Used**: 

Compiler version: '2.8.3.63029 (e9a3a6c0)'.
Reproduced running on .net core 2.1.302 and .net framework 4.0.30319.42000 (windows 10 64bit).

**Steps to Reproduce**:

```csharp
class Program
{
    public static void Main(string[] args)
    {
        var tasks = new List&lt;Task&gt;();
        for (int i = 0; i &lt; 10; i++)
        {
            tasks.Add(Task.Run(RunAndBlock));
            Thread.Sleep(TimeSpan.FromSeconds(5));
        }

        Thread.Sleep(TimeSpan.FromDays(1));
    }

    static async Task DoWork()
    {
        var data = Enumerable.Range(0, 100_000_000 / 4).ToArray();
        await Task.Yield();
        Console.WriteLine($"Length: {data.Length}");
    }

    static async Task RunAndBlock()
    {
        Console.WriteLine($"Started task");
        await DoWork();
        // DoWork() has finished, so I would expect any local
        // variables used by that task to be no longer needed
        // await Task.Yield(); // uncomment this to prevent leak
        GC.Collect();
        Console.WriteLine($"Task and gc completed");
        Thread.Sleep(TimeSpan.FromDays(1));
    }
}
```

With every started task program consumes additional 100 megabytes of memory, even though each task's `await DoWork()` and gc completes before starting next task.

**Expected Behavior**:

Peak memory usage is around 100 megabytes.

**Actual Behavior**:

Every 5 seconds memory usage grows by 100 megabytes.

**Other observations**:

Here's the generated code for `RunAndBlock` state machine (slightly cleaned up):

```csharp
void IAsyncStateMachine.MoveNext()
{
    int num1 = this.1__state;
    try
    {
        TaskAwaiter awaiter;
        int num2;
        if (num1 != 0)
        {
            Console.WriteLine("Started task");
            awaiter = Program.DoWork().GetAwaiter();
            if (!awaiter.IsCompleted)
            {
                this.1__state = num2 = 0;
                this.u__1 = awaiter;
                this.t__builder.AwaitUnsafeOnCompleted&lt;TaskAwaiter, Program.&lt;RunAndBlock&gt;d__2&gt;(ref awaiter, ref this);
                return;
            }
        }
        else
        {
            awaiter = this.u__1;
            this.u__1 = new TaskAwaiter();
            this.1__state = num2 = -1;
        }
        awaiter.GetResult();
        GC.Collect();
        Console.WriteLine("Task and gc completed");
        Thread.Sleep(TimeSpan.FromDays(1.0));
    }
    catch (Exception ex)
    {
        this.1__state = -2;
        this.t__builder.SetException(ex);
        return;
    }
    this.1__state = -2;
    this.t__builder.SetResult();
}
```

The problem seems to be that `awaiter` is kept on the stack after it is no longer needed (after `awaiter.GetResult()` call). Awaiter has a reference to the task which has a reference to the state machine of `DoWork`, which is why gc cannot reclaim the array. Any other await after `await DoWork()` causes state machine to yield, therefore dropping all values the were only kept on the stack - which is why adding `await Task.Yield()` fixes the leak.
</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34238</IssueID>
    <RepoID>1</RepoID>
    <Title>made light bulb to check workspace status service</Title>
    <Description>with the partial mode, the experience will be

1. no LB until the solution is fully loaded.
2. if LB is explicitly invoked through ctrl+., then wait dialog will show up blocking until the solution is fully loaded.
3. LB will show up automatically if there is one once the solution is fully loaded without user action such as moving caret or modifying the buffer.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34237</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] Completion gets in the way attempting to line up arguments</Title>
    <Description>This is a regression from Version 15.9.9.

**Version Used**: 
Version 16.0.0 Preview 4.2 [28711.60.d16.0]

**Steps to Reproduce**:

At $, press ENTER and then TAB:
``` C#
String.Equals("foo", "bar", $StringComparison.CurrentCulture)
```

**Expected (15.9):**

``` C#
String.Equals("foo", "bar", 
        StringComparison.CurrentCulture)
```

**Actual (16.0):** 

``` C#
String.Equals("foo", "bar", 
    StringComparisonStringComparison.CurrentCulture)
```

Here's a video of it:

![Completion3](https://user-images.githubusercontent.com/1103906/54586952-b1ba1400-4a72-11e9-98cd-d69bd47c8388.gif)</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34236</IssueID>
    <RepoID>1</RepoID>
    <Title>Find All References shows NameOnly ref as Read</Title>
    <Description>Apologies if this is a dupe or intentional.

**Version Used**: 
16.0 Preview 4.2

**Steps to Reproduce**:

This code:
```
namespace ConsoleApp25
{
    class C
    {
        public void M()
        {
            string x = nameof(M);
        }
    }

    class Unrelated
    {
        public void M()
        {
            string y = nameof(C.M);
        }
    }
}
```

Run Find All References on M()

**Expected Behavior**:

Two references, both NameOnly

**Actual Behavior**:

Two references, one NameOnly and one Read
![image](https://user-images.githubusercontent.com/754264/54581614-8e3a9d80-4a61-11e9-9c57-6986fd593597.png)
</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34235</IssueID>
    <RepoID>1</RepoID>
    <Title>Pull Members Up: When pull to base class as abstract, should add override modifier</Title>
    <Description>Apologies if this is a dupe, or deliberate behaviour, I just found it odd.

**Version Used**: 
16.0 Preview 4.2

**Steps to Reproduce**:

The following code:
```
using System;

namespace ConsoleApp25
{
    abstract class Base
    {
    }

    class Child : Base
    {
        public void Method()
        {
        }
    }
}
```

With cursor on Method, bring up the Pull Members Up dialog, click the "Make abstract" checkbox and press OK.

**Expected Behavior**:

Should add `override` modifier to call site

**Actual Behavior**:

Results in code that doesn't compile - missing override modifier.

</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34234</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement pattern-matching in the nullable walker</Title>
    <Description>Fixes #29909
Fixes #31881
Fixes #30952
Fixes #33499
Fixes #30597
Fixes #32414
Fixes #23944</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34233</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-infer nullable result of switch expression</Title>
    <Description>In the nullable walker, we need to recompute the result type and state of the switch expression based on the result type and state of all of the arms.  This can be done in a way similar to how it is done for an implicit array creation expression.

This issue link is being used in a code comment where it needs to be fixed.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34232</IssueID>
    <RepoID>1</RepoID>
    <Title>Recompute Deconstruct method from nullable type and state of receiver in pattern-matching</Title>
    <Description>In the nullable walker's handling of pattern-matching, we may need to recompute the Deconstruct method for a deconstruction if the receiver type has changed (e.g. its nested nullability).</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34231</IssueID>
    <RepoID>1</RepoID>
    <Title>Add max path check at beginning of build</Title>
    <Description>Update build.ps1 to have a Max-Path check, so users (like myself) who may hit build issues related to the issue have a warning and a way to fix. </Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34230</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable docker caching</Title>
    <Description>
    </Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34229</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34228</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34227</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34226</IssueID>
    <RepoID>1</RepoID>
    <Title>Move Spanish runs to new queue</Title>
    <Description>This is the BYOC queue for Spanish runs. Will now scale the same as the
rest of our machines.</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34225</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpInteractiveCommands.VerifyNewLineAndIndent Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=126871&amp;view=ms.vss-test-web.build-test-results-tab)

```
System.Exception : Unable to find expected content in REPL within 10000 milliseconds and no exceptions were thrown. Actual content:
[[Resetting execution engine.
Loading context from 'CSharpInteractive.rsp'.]]
```</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34224</IssueID>
    <RepoID>1</RepoID>
    <Title>Add document for DocumentationCommentId in wiki</Title>
    <Description>We have a bunch of public APIs around `DocumentationCommentId` that convert symbol to string and vise versa. Those are used by external components like [BannedApiAnalyzer](https://github.com/dotnet/roslyn-analyzers/blob/master/src/Microsoft.CodeAnalysis.BannedApiAnalyzers/Core/SymbolIsBannedAnalyzer.cs#L155). However, I couldn't find any documentation for the string format.

Given that this API was made public, we should document the string format and make sure we don't break them moving forward.</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34223</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to namespace UI and Implementation</Title>
    <Description>This implements 'MoveToNamespace' as a feature. See [this comment](https://github.com/dotnet/roslyn/issues/30896#issuecomment-471667225) for context on the design. 

**Note:** all screenshots have a black bar for the XAML debugger since they are taken from running under the VS debugger. That will not be in the final UI. 

## Case 1: Move and individual type

Class "Bar" is being targetted. Suggestion is provided as a code action. `Ctrl + .` or clicking on the indicator in the left margin will invoke the menu shown. Selecting the option will show the dialog

### Code Action Suggestion

![MoveTypeContextMenu](https://user-images.githubusercontent.com/475144/54569715-1dc84980-4999-11e9-9678-576b3719abb5.jpg)

### Dialog

![MoveTypeDialog](https://user-images.githubusercontent.com/475144/54569746-37699100-4999-11e9-8b59-520e5cb54bec.jpg)

## Case 2: Move all items in a namespace scope

Namespace "Foo.Bar.Namespace" is being targetted. Suggestion is provided as a code action. `Ctrl + .` or clicking on the indicator in the left margin will invoke the menu shown. Selecting the option will show the dialog. Expected result would be that all items in the current scope (indicated by the opening `{` and closing `}`) would be moved. Currently the only class that would be moved is `Bar`. Implementation is incomplete, so finished result is not shown. 

### Code Action Suggestion

![MoveItemsContextMenu](https://user-images.githubusercontent.com/475144/54569765-50724200-4999-11e9-8c4b-6ab49257b867.jpg)

### Dialog

![MoveItemsDialog](https://user-images.githubusercontent.com/475144/54569776-59fbaa00-4999-11e9-9db7-1d21e4c4ea83.jpg)

## General Dialog Usage

### Dialog AutoComplete 

![DialogAutoComplete](https://user-images.githubusercontent.com/475144/54569818-7ef01d00-4999-11e9-947f-31ad5955d21d.jpg)

Uses default autocomplete for the control with a list of namespaces from the project.

### Dialog Dropdown

![DialogDropdown](https://user-images.githubusercontent.com/475144/54569838-8ca5a280-4999-11e9-88d2-4e37d26033ff.jpg)

Same list as autocomplete in dropdown form.

### Dialog Error State

![DialogError](https://user-images.githubusercontent.com/475144/54569855-97603780-4999-11e9-91da-73a9873498be.jpg)

Used to indicate that the current namespace suggestion is not valid.

### New Name Information 

![DialogNewNamespace](https://user-images.githubusercontent.com/475144/54569901-c37bb880-4999-11e9-9554-6050f983e9d3.jpg)

Used to indicate that the user is creating a namespace that doesn't currently exist. This is allowed, but may be harder to spot with a dropdown/autocomplete control. Purely informational </Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34222</IssueID>
    <RepoID>1</RepoID>
    <Title>Visit correct BoundConversion nodes for user-defined conversions in NullableWalker</Title>
    <Description>
    </Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34221</IssueID>
    <RepoID>1</RepoID>
    <Title>RenameTagProducerTests.CSharp_FixupSpanDuringResolvableConflict_NonReferenceConflict Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=126806&amp;view=ms.vss-test-web.build-test-results-tab)

```
Assert.Equal() Failure
Expected: WhereSelectEnumerableIterator&lt;TextSpan, Span&gt; [[173..176), [266..269)]
Actual: List&lt;Span&gt; [[173..176), [266..269), [266..269)]
```</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34220</IssueID>
    <RepoID>1</RepoID>
    <Title>VS debugger freezes when stopped at breakpoint with a long string local variable - impossible to debug</Title>
    <Description>&lt;p&gt;VS 15.9.7 Pro.&lt;/p&gt;&lt;p&gt; Create a .NET Core 2.1 C# console application with the following code:&lt;/p&gt;&lt;pre&gt;static void Main(string[] args)
{
            string huge = new string('x', 500_000_000);
            Console.WriteLine(huge.Length);
}&lt;/pre&gt;&lt;p&gt;&lt;br&gt;Put a breakpoint on the Console.WriteLine line and run the application under the debugger.&lt;br&gt;&lt;br&gt;Visual studio then displays the &amp;quot;Evaluating local variables...&amp;quot; modal dialog (even if the Locals window is not active) and the user cannot interact with it. Even clicking Cancel in that dialog has no effect. Eventually the &amp;quot;Microsoft Visual Studio is busy...&amp;quot; system tray icon appears.&lt;br&gt;&lt;br&gt;It does eventually resume responding, but doing anything else (e.g F10 - Step Over) causes the same problem, so debugging the application is, for all practical purposes, impossible.&lt;br&gt;&lt;br&gt;Process Hacker shows msvsmon.exe growing to over 10GB in memory usage and using all of one CPU core. The stack trace of the thread using the CPU is:&lt;br&gt;&lt;br&gt;0, Microsoft.CodeAnalysis.CSharp.ObjectDisplay.TryReplaceChar(Char, System.String ByRef) + 0x4 &amp;lt;-- 0x7fe8234c5b4&lt;br&gt;1, Microsoft.CodeAnalysis.CSharp.ObjectDisplay.FormatLiteral(System.String, Microsoft.CodeAnalysis.ObjectDisplayOptions) + 0x1f0 &amp;lt;-- 0x7fe8234c490&lt;br&gt;2, Microsoft.CodeAnalysis.ExpressionEvaluator.Formatter.GetValueString(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrValue, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext, Microsoft.CodeAnalysis.ObjectDisplayOptions, Microsoft.CodeAnalysis.ExpressionEvaluator.GetValueFlags) + 0x120 &amp;lt;-- 0x7fe8234bcf0&lt;br&gt;3, Microsoft.CodeAnalysis.ExpressionEvaluator.Formatter.GetEditableValue(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrValue, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext, Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrCustomTypeInfo) + 0xe9 &amp;lt;-- 0x7fe8234bb59&lt;br&gt;4, Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProvider.CreateDataItem(Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext, System.String, Microsoft.CodeAnalysis.ExpressionEvaluator.TypeAndCustomInfo, Microsoft.CodeAnalysis.ExpressionEvaluator.TypeAndCustomInfo, Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrValue, Boolean, Microsoft.CodeAnalysis.ExpressionEvaluator.ExpansionFlags, Boolean, System.String, System.Collections.ObjectModel.ReadOnlyCollection`1&amp;lt;System.String&amp;gt;, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultCategory, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultFlags, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationFlags) + 0x253 &amp;lt;-- 0x7fe8234b673&lt;br&gt;5, Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProvider.GetRootResultAndContinue(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrValue, WorkList, Microsoft.VisualStudio.Debugger.Clr.DkmClrType, Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrCustomTypeInfo, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext, System.String, System.String, System.Collections.ObjectModel.ReadOnlyCollection`1&amp;lt;System.String&amp;gt;, Microsoft.CodeAnalysis.ExpressionEvaluator.CompletionRoutine`1&amp;lt;Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResult&amp;gt;) + 0x4ed &amp;lt;-- 0x7fe8234a7bd&lt;br&gt;6, Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProvider+&amp;lt;&amp;gt;c__DisplayClass7_0.&amp;lt;Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmClrResultProvider.GetResult&amp;gt;b__1() + 0xda &amp;lt;-- 0x7fe82349cfa&lt;br&gt;7, Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProvider+WorkList.Execute() + 0x44 &amp;lt;-- 0x7fe82349ba4&lt;br&gt;8, Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProvider.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmClrResultProvider.GetResult(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrValue, Microsoft.VisualStudio.Debugger.DkmWorkList, Microsoft.VisualStudio.Debugger.Clr.DkmClrType, Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrCustomTypeInfo, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext, System.Collections.ObjectModel.ReadOnlyCollection`1&amp;lt;System.String&amp;gt;, System.String, System.String, Microsoft.VisualStudio.Debugger.DkmCompletionRoutine`1&amp;lt;Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmEvaluationAsyncResult&amp;gt;) + 0x2fe &amp;lt;-- 0x7fe82348ade&lt;br&gt;9, Microsoft.VisualStudio.Debugger.EntryPoint.IDkmClrResultProvider_GetResult(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr) + 0x1a5 &amp;lt;-- Microsoft.VisualStudio.Debugger.Engine.ni.dll+0x3b7bb5&lt;br&gt;10, DomainBoundILStubClass.IL_STUB_ReversePInvoke(Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64) + 0x8b &amp;lt;-- Microsoft.VisualStudio.Debugger.Engine.ni.dll+0x2f755b&lt;br&gt;11, clr.dll+0x222e&lt;br&gt;12, vsdebugeng.dll!dispatcher::XapiEvaluationWorkListItem::Invoke+0x4a&lt;br&gt;13, vsdebugeng.dll!dispatcher::DkmWorkList::Invoke+0x96&lt;br&gt;14, vsdebugeng.dll!dispatcher::DkmWorkList::OperationBlock+0x3f&lt;br&gt;15, vsdebugeng.dll!dispatcher::DkmWorkList::ExecuteInternal+0x249&lt;br&gt;16, vsdebugeng.dll!dispatcher::DkmWorkList::Execute+0x41&lt;br&gt;17, vsdebugeng.dll!dispatcher::CXapiNetRequestProcessingHolder::AfterRequestsAppended+0xb2&lt;br&gt;18, vsdebugeng.dll!dispatcher::CXapiNetConnectionDataItem::ProcessRequestMessage+0x220&lt;br&gt;19, vsdebugeng.dll!dispatcher::CXapiNetScheduler::ProcessRequestMessageFromThreadPoll+0xd2&lt;br&gt;20, ntdll.dll!RtlpTpWorkCallback+0x16b&lt;br&gt;21, ntdll.dll!TppWorkerThread+0x6f7&lt;br&gt;22, kernel32.dll!BaseThreadInitThunk+0xd&lt;br&gt;23, ntdll.dll!RtlUserThreadStart+0x1d&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/464050/vs-debugger-freezes-when-stopped-at-breakpoint-wit.html
VSTS ticketId: 796779_
_These are the original issue comments:_

Visual Studio Feedback System on 2/20/2019, 10:07 PM (25 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Evgeny Morozov on 3/6/2019, 08:33 AM (12 days ago): &lt;p&gt;Still happens with VS 2019 Preview 2, by the way&lt;/p&gt;

Visual Studio Feedback System on 3/15/2019, 07:07 PM (2 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34219</IssueID>
    <RepoID>1</RepoID>
    <Title>Report uninitialized fields on field if ctor is default</Title>
    <Description>It's not clear that reporting warnings for unitialized non-null fields
on the field location is better in all cases (instead of the ctor) but
it seems a Pareto improvement for default constructors, specifically.

Fixes #32444</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34218</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify VisualStudioWaitIndicator</Title>
    <Description>* Remove unnecessary workaround for Visual Studio 2015 Update 1
* Ensure type is constructed properly if/when used in tests</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34217</IssueID>
    <RepoID>1</RepoID>
    <Title>StackAllocInitializerTests.RestrictedTypesAllowedInStackalloc Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=126842&amp;view=ms.vss-test-web.build-test-results-tab)

```
Expected:
 Diagnostic(ErrorCode.ERR_ManagedAddr, \"RefG&lt;string&gt;\").WithArguments(\"RefG&lt;string&gt;\").WithLocation(10, 29),
 Diagnostic(ErrorCode.ERR_ManagedAddr, \"RefG&lt;int&gt;\").WithArguments(\"RefG&lt;int&gt;\").WithLocation(11, 29),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"RefS\").WithArguments(\"RefS\").WithLocation(16, 22),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"RefG&lt;string&gt;\").WithArguments(\"RefG&lt;string&gt;\").WithLocation(17, 22),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"RefG&lt;int&gt;\").WithArguments(\"RefG&lt;int&gt;\").WithLocation(18, 22),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"System.TypedReference\").WithArguments(\"System.TypedReference\").WithLocation(19, 22),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"System.ArgIterator\").WithArguments(\"System.ArgIterator\").WithLocation(20, 22),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"System.RuntimeArgumentHandle\").WithArguments(\"System.RuntimeArgumentHandle\").WithLocation(21, 22),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"RefS\").WithArguments(\"RefS\").WithLocation(23, 9),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"RefG&lt;string&gt;\").WithArguments(\"RefG&lt;string&gt;\").WithLocation(24, 9),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"RefG&lt;int&gt;\").WithArguments(\"RefG&lt;int&gt;\").WithLocation(25, 9),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"System.TypedReference\").WithArguments(\"System.TypedReference\").WithLocation(26, 9),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"System.ArgIterator\").WithArguments(\"System.ArgIterator\").WithLocation(27, 9),
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"System.RuntimeArgumentHandle\").WithArguments(\"System.RuntimeArgumentHandle\").WithLocation(28, 9)
Actual:
 // (10,29): error CS0208: Cannot take the address of, get the size of, or declare a pointer to a managed type ('RefG&lt;string&gt;')
 // var x2 = stackalloc RefG&lt;string&gt;[10];
 Diagnostic(ErrorCode.ERR_ManagedAddr, \"RefG&lt;string&gt;\").WithArguments(\"RefG&lt;string&gt;\").WithLocation(10, 29),
 // (16,22): error CS0611: Array elements cannot be of type 'RefS'
 // var y1 = new RefS[10];
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"RefS\").WithArguments(\"RefS\").WithLocation(16, 22),
 // (17,22): error CS0611: Array elements cannot be of type 'RefG&lt;string&gt;'
 // var y2 = new RefG&lt;string&gt;[10];
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"RefG&lt;string&gt;\").WithArguments(\"RefG&lt;string&gt;\").WithLocation(17, 22),
 // (18,22): error CS0611: Array elements cannot be of type 'RefG&lt;int&gt;'
 // var y3 = new RefG&lt;int&gt;[10];
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"RefG&lt;int&gt;\").WithArguments(\"RefG&lt;int&gt;\").WithLocation(18, 22),
 // (19,22): error CS0611: Array elements cannot be of type 'TypedReference'
 // var y4 = new System.TypedReference[10];
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"System.TypedReference\").WithArguments(\"System.TypedReference\").WithLocation(19, 22),
 // (20,22): error CS0611: Array elements cannot be of type 'ArgIterator'
 // var y5 = new System.ArgIterator[10];
 Diagnostic(ErrorCode.ERR_ArrayElementCantBeRefAny, \"System.ArgIterator\").WithArguments(\"System.ArgIterator\").WithLocation(20, 22),
 // (21,22): error CS0611: Array elements cannot be of type 'RuntimeArgumentHandle'
```</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34216</IssueID>
    <RepoID>1</RepoID>
    <Title>Include source branch in container name</Title>
    <Description>This ensures we have proper isolation between branches. Given different
branches may have vastly different setups, including dotnet
installations, this can be necessary.

closes #34198</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34215</IssueID>
    <RepoID>1</RepoID>
    <Title>Cancel button saves changes for Editing Naming Style options page</Title>
    <Description>**Version Used**: 
D16.0stg 28717.18
**Steps to Reproduce**:

1. Open VS
2. Go to: Tools -&gt; Options -&gt; Text Editor -&gt; C# -&gt; Code Style -&gt; Naming -&gt; Manage Naming Styles -&gt; Edit Pascal Case
3. Change 'Capitalization' to 'First word upper'
4. Hit cancel
5. Open the edit page for Pascal Case again

**Expected Behavior**:
Capitalization is set to the default option

**Actual Behavior**:
Capitalization is set to 'First word upper'

This occurs for every option on the page aside from 'Naming Style Title'</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34214</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip test DecimalBinaryOp_03 (#34199)</Title>
    <Description>Back port https://github.com/dotnet/roslyn/pull/34199 to dev16.0 so CI can pass.

@jaredpar </Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34213</IssueID>
    <RepoID>1</RepoID>
    <Title>Public API design for readonly properties and events in C#</Title>
    <Description>There's a bit of public API that should be added to symbols for the [readonly members feature](https://github.com/dotnet/csharplang/issues/1710).

So far the following API has been added to `MethodSymbol` (handwaving a bit):

```cs
/// &lt;summary&gt;
/// Indicates whether the method is declared readonly, i.e.
/// whether 'this' is readonly in the scope of the method.
/// See also &lt;see cref="IsEffectivelyReadOnly"/&gt;
/// &lt;/summary&gt;
internal abstract bool IsDeclaredReadOnly { get; }

/// &lt;summary&gt;
/// Indicates whether the method is effectively readonly,
/// by either the method or the containing type being marked readonly.
/// &lt;/summary&gt;
internal bool IsEffectivelyReadOnly =&gt; ...;
```

It's also possible for properties or property accessors to have `readonly` modifiers.

```cs
public readonly int Prop1
{
    // both accessors are 'readonly'
    get =&gt; this._store["Prop1"];
    set { this._store["Prop1"] = value; }
}
public int Prop2
{
    readonly get =&gt; this._prop2;
    set { this._prop2 = value; }
}
```

If users of the compiler APIs want to know if a *property* was declared readonly, or just its *accessor*, it could be necessary to add new methods to `IPropertySymbol`. The trouble is that `ReadOnly` properties already have a meaning in VB and in the existing property APIs: it means there is no set accessor.

This means that just copying the APIs from MethodSymbol to PropertySymbol is likely to cause confusion. We need a path forward where users can determine these facts about C# properties without causing confusion about VB properties or confusion with the existing API.</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34212</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix saving naming styles options page</Title>
    <Description>- Allow page controls to store settings to option store before updating service
- Reload page control settings only after a cancel or save

Fixes #34210 which was introduced by https://github.com/dotnet/roslyn/pull/33523

The earlier PR didn't account for the Naming option page having very specialized load and save settings. Other option pages were updated to store their changes immediately into the OptionStore but Naming options still relied on SaveSettings being called to directly update the OptionService. In a related way, Naming service overwrites its view model when LoadSettings is called and because of the earlier change LoadSettings was being called every time the page is activated.


&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

User tries to update naming styles for identifiers and changes do not save.

### Bugs this fixes

#34210

### Workarounds, if any

None

### Risk

Low

### Performance impact

Low

### Is this a regression from a previous update?

Yes, regression was introduced by https://github.com/dotnet/roslyn/pull/33523

### Root cause analysis

In Dev16, option saving was rewritten so that all option changes went to a centralized store and were saved to the option service in a single location. This rewrite missed the custom save behavior of the Naming styles option page.

### How was the bug found?

Reported through developer feedback

&lt;/details&gt;</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34211</IssueID>
    <RepoID>1</RepoID>
    <Title>ErrorsDuringMethodBodyEditing failing on .NET Core 3.0</Title>
    <Description>The test `CSharpErrorListNetCore.ErrorsDuringMethodBodyEditing` is testing that the error list properly responds to edits to the method body. Unfortunately it's using variable shadowing in a lambda as the error case to test. In 3.0 this is no longer an error because C# 8.0 is being used and this is now allowed. As a result the test is failing. 

Test should be changed to use an error that exists on all versions of C#. Recommendation is to leverage a use before definition: 

```
using System;

class Program2
{
    static void Main(string[] args)
    {
        int a = 42;
        int ba = a;
   }
}
```

Change the second use of `a` to `ba` and this will present a use before initialization error. </Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34210</IssueID>
    <RepoID>1</RepoID>
    <Title>Custom naming definition are not stored</Title>
    <Description>VSF_TYPE_MARKDOWNHi, reproduction steps as attachement.

The problem description:
1. execute reproduction steps from attachement
2. Open naming options again
3. All custom naming conventions and specifications are missing

Thank you in advice

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/489466/custom-naming-definition-are-not-stored.html
VSTS ticketId: 820333_
_These are the original issue comments:_

Visual Studio Feedback System on 3/14/2019, 11:38 PM (3 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 3/15/2019, 01:11 PM (2 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34209</IssueID>
    <RepoID>1</RepoID>
    <Title>Indexing string with from-end Index results in InvalidProgramException</Title>
    <Description>_From @briman0094 on March 18, 2019 16:3_

Running the following program under .NET Core 3.0.100-preview3-010431 results in an `InvalidProgramException` thrown upon startup in both Debug and Release builds:

```csharp
using System;

public class Program
{
	public static void Main()
	{
		var s = "ABC123";

		Console.WriteLine(s[^1]);
	}
}
```

Output from `dotnet run`:

```
Unhandled Exception: System.InvalidProgramException: Common Language Runtime detected an invalid program.
   at Program.Main()
```

The following program runs as expected:

```csharp
using System;

public class Program
{
	public static void Main()
	{
		var s = "ABC123";
		var a = s.ToCharArray();

		Console.WriteLine(a[^1]);
		Console.WriteLine(s[1]);
		Console.WriteLine(s[1..^1]);
		Console.WriteLine(s[^4..^1]);
	}
}
```

Output from `dotnet run`:

```
3
B
BC12
C12
```

This demonstrates that the issue **only** occurs when indexing a string with a FromEnd Index; using a Range which includes a FromEnd index works fine.

_Copied from original issue: dotnet/coreclr#23316_</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34208</IssueID>
    <RepoID>1</RepoID>
    <Title>Guard against `string.Concat(object)` returning null</Title>
    <Description>This PR is intended as a starting point for any discussion on #34085.

Note that this is a **BREAKING CHANGE** (although it's a correction to align with the spec, it's very niche, and a similar case was inadvertently fixed by Roslyn and I don't believe anyone noticed).

I believe it stands on its own as a working solution (for C# - it doesn't (yet) cover VB), but anticipate that it may need to change, or be rejected entirely because of its breaking nature.

Alternatives to this approach:

1. Change `string.Concat(object)` to never return null (also a breaking change)
2. Use `o?.ToString() ?? ""` instead of `string.Concat(o) ?? ""`
3. Change the spec, or accept and live with the deviation

------------------------------

If you define an object with a ToString method which returns null:

    public class C
    {
        public override string ToString() =&gt; null;
    }

And then concatenate that with `null` or "":

    C c = new C();
    c + ""

then the compiler emits:

    string.Concat(c)

However, `string.Concat(object)` will return null if the object's
ToString method returns null. This contradicts section 7.8.4 of the
Specification, which says:

    If ToString returns null, an empty string is substituted.
    ...
    The string concatenation operator never returns a null value

On the other hand, if you write:

    c + "" + ""

then the compiler emits:

    string.Concat(c) ?? ""

This is because it reduces `c + ""` to `string.Concat(c)` as before, but
when it considers the second `+ ""`, it sees `&lt;string&gt; + ""` and simplifies
that to `&lt;string&gt; ?? ""`. This is unnecessary in this case, but
inadvertently fixes this case.

This PR always emits `string.Concat(c) ?? ""`. It enhances the logic
which extracts the arguments to a call to `string.Concat` so it can unwrap
the null coalescing operator, and it enhances the `&lt;string&gt; + ""` logic
so that it only adds `?? ""` if `&lt;string&gt;` is not a call to `string.Concat`
(or `string.Concat(object) ?? ""`), since we know that this can never
result in null.

This introduces one more allocation: a single-element ImmutableArray
in some cases.

It seems that compiled expressions were never affected by this. Their
behaviour now matches that of compiled C#.

This does not change any of the VB code. I haven't looked into what the
VB spec says here, and I want any discussions on this PR to be resolved
before I invest that effort.

Fixes #34085</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34207</IssueID>
    <RepoID>1</RepoID>
    <Title>Transient failure in test AsyncIteratorWithCustomCode</Title>
    <Description>In the Windows CoreClr Debug CI leg of PR https://github.com/dotnet/roslyn/pull/34141, the `AsyncIteratorWithCustomCode` failed.


Failing build20190316.11
 
Error message:
`System.InvalidOperationException : Operation is not valid due to the current state of the object.`

Stack trace
```
   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException()
    at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCoreShared.CompletionSentinel(Object _)    at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.InvokeContinuation()

    at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SignalCompletion()
    at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetResult(TResult result)
    at C.&lt;Main&gt;g__local|0_0()
    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine&amp; stateMachine)
    at System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext[TStateMachine](TStateMachine&amp; stateMachine)
    at C.&lt;Main&gt;g__local|0_0()
    at C.Main()
    at C.Main()
    at C.&lt;Main&gt;()
```</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34206</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate constructor/Generate default constructor should be grouped together</Title>
    <Description>These refactorings should be grouped together:
![image](https://user-images.githubusercontent.com/1103906/54500830-1e4ee900-4975-11e9-8864-dca0450cdb69.png)</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34205</IssueID>
    <RepoID>1</RepoID>
    <Title>Issue with Roslyn Emit API</Title>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis: v2.10.0
Microsoft.CodeAnalysis.Analyzers: v2.6.3
Microsoft.CodeAnalysis.Common: v2.10.0
Microsoft.CodeAnalysis.CSharp: v2.10.0
Microsoft.CodeAnalysis.CSharp.Workspaces: v2.10.0
.NET Framework Version 4.7.03056
Microsoft Visual Studio Pro 2015 Version 14.0.25431.01 Update 3


**Steps to Reproduce**:
1. Given the program

    using System;
    using System.Collections.Generic;
    using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
class Program
{
    public static int Ksmallest(int[] a, int k, List&lt;string&gt; _var_names_, List&lt;string&gt; _var_values_)
    {
            HashSet &lt; int &gt;  h = new HashSet&lt;int&gt;(a);
            _var_names_.Add("h");
            _var_values_.Add(string.Join("_^-^-^_", h));
            Array.Sort(a);
            _var_names_.Add("a");
            _var_values_.Add(string.Join("_^-^-^_", a));
            return a[k - 1];
    }
}

2. execute it using Roslyn Emit API:
    public static ExecutionResult.Type RunRoslyn(string code)
        {
            SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(code);

            string assemblyName = Path.GetRandomFileName();
            MetadataReference[] references = new MetadataReference[]
            {
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(Enumerable).Assembly.Location)
            };

            CSharpCompilation compilation = CSharpCompilation.Create(
                assemblyName,
                syntaxTrees: new[] { syntaxTree },
                references: references,
                options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

            using (var ms = new MemoryStream())
            {
                EmitResult result = compilation.Emit(ms);

                if (!result.Success)
                {
                    IEnumerable&lt;Diagnostic&gt; failures = result.Diagnostics.Where(
                        diagnostic =&gt; diagnostic.IsWarningAsError || diagnostic.Severity == DiagnosticSeverity.Error);

                    foreach (Diagnostic diagnostic in failures)
                        Console.Error.WriteLine("{0}: {1}", diagnostic.Id, diagnostic.GetMessage());

                    return ExecutionResult.Type.NotCompile;
                }
            }
        }

**Expected Behavior**:
The program should be executed without errors

**Actual Behavior**:
EmitResult result = compilation.Emit(ms);
result.Success returns false

"CS0012: The type 'ISet&lt;&gt;' is defined in an assembly that is not referenced. You must add a reference to assembly 'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.
CS0012: The type 'ISet&lt;&gt;' is defined in an assembly that is not referenced. You must add a reference to assembly 'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'."
</Description>
    <CreatedDate>18/03/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34204</IssueID>
    <RepoID>1</RepoID>
    <Title>Cleanup and improvements around getting and waiting for documents.</Title>
    <Description>This should be reviewed as https://github.com/dotnet/roslyn/pull/34204/files?w=1

This PR should be reviewed one commit at a time.  It contains the following changes: 

1. Renames `GetOpenDocumentInCurrentContextWithChanges` To `GetDocument`.  GetOpenDocumentInCurrentContextWithChanges was a late addition when we added shared-projects, so we didn't get a good chance to name it properly, but is the method we use all the time.  It's name is full of unnecessary info.  First, 'open' and 'current context' are somewhat pointless.  The starting point is a VS file buffer.  So it's clearly teh Document corresponding to that.  Furthermore, 'WithChanges' is an affection from when it was possible to get a Document that might not be in sync with the snapshot you started with.  This is not a common case, and the immutable nature of VS and Roslyn makes it clear that you want the immutable doc associated with the immutable snap.

2. Rename `GetFullyLoadedOpenDocumentInCurrentContextWithChangesAsync` to `GetFullyLoadedDocument`.  Same reason as above to not have 'open' 'currentcontext' or 'withchanges'.  

3. Made GetFullyLoadedDocument non-async.  All callers are synchronous (by def) since they're blocking some editor operation (with a dialog) for this load to finish.  So the blocking was pushed inward to make all callers simpler.

4. Made GetFullyLoadedDocument operate on a text buffer.  This simplifies things for all callers, and makes more sense from an API perspective as "FullyLoaded" implies mutation will be happening, and that would not affect the results associated with an ITextSnapshot, but would affect an ITextBuffer.

5. Allows one to front-load quick brail-out checks before blocking on waiting for the solution to load.  no point fully loading the project only to immediately bail out a moment later.</Description>
    <CreatedDate>17/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34203</IssueID>
    <RepoID>1</RepoID>
    <Title>.editorconfig should have setting to not indent case blocks</Title>
    <Description>**Version Used**: 15.9.9

**Steps to Reproduce**:

Format this `switch` statement:

```C#
switch (value)
{
    case CaseLabel1:
        return 42;

    case CaseLabel2:
    {
        var x = ComputeValue();
        return x;
    }
}
```

**Expected Behavior**:

Have the option in `.editorconfig` to indent case contents, but not case blocks.

**Actual Behavior**:

I can either not indent case contents, in which case it will look like this:

```C#
switch (value)
{
    case CaseLabel1:
    return 42;

    case CaseLabel2:
    {
        var x = ComputeValue();
        return x;
    }
}
```

or I can choose to indent case contents in which case it will also indent blocks:

```C#
switch (value)
{
    case CaseLabel1:
        return 42;

    case CaseLabel2:
        {
            var x = ComputeValue();
            return x;
        }
}
```</Description>
    <CreatedDate>17/03/2019</CreatedDate>
    <ClosedDate>17/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34202</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider removing GCManager</Title>
    <Description>Originally noted by @heejaechang in https://github.com/dotnet/roslyn/pull/34055#issuecomment-473607996.

&gt; do we still need this low latency mode? can we just remove whole GCManager stuff. I know we did this to make our typing to meet ceratin matrix for a perf test we no longer has.
&gt; 
&gt; as follow up work item, I would try to get RPS result without this whole GCmanager thing and see whether it shows up anywhere in RPS test. and if not, just remove this whole thing.</Description>
    <CreatedDate>17/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34201</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove using leaves leading lines</Title>
    <Description>**Version Used**: 15.9.9

**Steps to Reproduce**:

*Configure code style to have blank lines between different using groups*

Apply "Remove redundant using" on `System` here:

```C#
using System;

using Xunit;

namespace SomeTests
{
    [Fact]
    public void Bla()
    {
    }
}
```
**Expected Behavior**:


```C#
using Xunit;

namespace SomeTests
{
    [Fact]
    public void Bla()
    {
    }
}
```

**Actual Behavior**:

Leading blank line:

```C#
// This line is blank but markdown can't do that
using Xunit;

namespace SomeTests
{
    [Fact]
    public void Bla()
    {
    }
}
```
</Description>
    <CreatedDate>17/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34200</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to new file doesn't honor charset in .editorconfig</Title>
    <Description>**Version Used**:  15.9.9

**Steps to Reproduce**:

1. Have an .editorconfig with `charset = utf-8`
2. Open an existing file (encoding irrelvant)
3. Add a type to the file
4. Apply "Move type to new file" refactoring

**Expected Behavior**:

The new file is stored in the encoding specified by .editorconfig (in this case UTF8, no BOM).

**Actual Behavior**:

The new file is stored in UTF8-BOM.</Description>
    <CreatedDate>17/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34199</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip test DecimalBinaryOp_03</Title>
    <Description>Opened https://github.com/dotnet/roslyn/issues/34198 to track this failure in `master` branch

Relates to https://github.com/dotnet/roslyn/issues/32576 (failure in DIM feature branch)

CC @jasonmalinowski @tannergooding 
</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>17/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34198</IssueID>
    <RepoID>1</RepoID>
    <Title>DecimalBinaryOp_03 fails on Linux in CI on `master` branch</Title>
    <Description>I'm getting an error on Linux branch with `DecimalBinaryOp_03` in two of my PRs, and I see that other PRs are affected too.
It's effectively doing: `System.Console.WriteLine(12345678900000000M % 0.0000000012345678M);`
We expect `0.000000000983` but got `0.0000000009832122`.

Why did this appear in unrelated PRs (seems like CI should have prevented whatever caused this change from getting merged, unless we're not building in a controlled/isolated environment), and why only on the Linux legs?

Relates to https://github.com/dotnet/roslyn/issues/32576

 

 

```

Roslyn.Test.Utilities.ExecutionException : \nExecution failed for assembly '/opt/code/artifacts/tmp/Debug/RoslynTests'.\n

Expected: \n1007\n993\n7000\n142.85714285714285714285714286\n6\n-993\n-1007\n-7000\n-142.85714285714285714285714286\n-6\n123.0012300\n122.9987700\n0.15129000000000\n100000\n0.0000000\n12345678900000000.000000001235\n12345678899999999.999999998765\n15241577.6390794200000000\n10000000729000059778004901.796\n0.000000000983\n246913578.1246913578\n-0.1000000000\n15241578765584515.651425087878\n0.9999999991899999933660999449\n123456789.0123456789\n\n

Actual: 1007\n993\n7000\n142.85714285714285714285714286\n6\n-993\n-1007\n-7000\n-142.85714285714285714285714286\n-6\n123.0012300\n122.9987700\n0.15129000000000\n100000\n0.0000000\n12345678900000000.000000001235\n12345678899999999.999999998765\n15241577.6390794200000000\n10000000729000059778004901.796\n0.0000000009832122\n246913578.1246913578\n-0.1000000000\n15241578765584515.651425087878\n0.9999999991899999933660999449\n123456789.0123456789\n\n

 

Stack trace

  at Roslyn.Test.Utilities.Desktop.DesktopRuntimeEnvironment.Execute (System.String moduleName, System.String[] args, System.String expectedOutput) [0x00079] in &lt;82d3df1bc9244dfab11b08c80afc1923&gt;:0

  at Microsoft.CodeAnalysis.Test.Utilities.CompilationVerifier.Emit (System.String expectedOutput, System.Nullable`1[T] expectedReturnCode, System.String[] args, System.Collections.Generic.IEnumerable`1[T] manifestResources, Microsoft.CodeAnalysis.Emit.EmitOptions emitOptions, Microsoft.CodeAnalysis.Test.Utilities.Verification peVerify, Microsoft.CodeAnalysis.Test.Utilities.SignatureDescription[] expectedSignatures) [0x00055] in &lt;82d3df1bc9244dfab11b08c80afc1923&gt;:0

  at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.Emit (Microsoft.CodeAnalysis.Compilation compilation, System.Collections.Generic.IEnumerable`1[T] dependencies, System.Collections.Generic.IEnumerable`1[T] manifestResources, Microsoft.CodeAnalysis.Test.Utilities.SignatureDescription[] expectedSignatures, System.String expectedOutput, System.Nullable`1[T] expectedReturnCode, System.String[] args, System.Action`1[T] assemblyValidator, System.Action`1[T] symbolValidator, Microsoft.CodeAnalysis.Emit.EmitOptions emitOptions, Microsoft.CodeAnalysis.Test.Utilities.Verification verify) [0x00016] in &lt;82d3df1bc9244dfab11b08c80afc1923&gt;:0

  at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompileAndVerifyCommon (Microsoft.CodeAnalysis.Compilation compilation, System.Collections.Generic.IEnumerable`1[T] manifestResources, System.Collections.Generic.IEnumerable`1[T] dependencies, System.Action`1[T] sourceSymbolValidator, System.Action`1[T] assemblyValidator, System.Action`1[T] symbolValidator, Microsoft.CodeAnalysis.Test.Utilities.SignatureDescription[] expectedSignatures, System.String expectedOutput, System.Nullable`1[T] expectedReturnCode, System.String[] args, Microsoft.CodeAnalysis.Emit.EmitOptions emitOptions, Microsoft.CodeAnalysis.Test.Utilities.Verification verify) [0x00074] in &lt;82d3df1bc9244dfab11b08c80afc1923&gt;:0

  at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBase.CompileAndVerify (Microsoft.CodeAnalysis.Compilation compilation, System.Collections.Generic.IEnumerable`1[T] manifestResources, System.Collections.Generic.IEnumerable`1[T] dependencies, System.Action`1[T] sourceSymbolValidator, System.Action`1[T] validator, System.Action`1[T] symbolValidator, Microsoft.CodeAnalysis.Test.Utilities.SignatureDescription[] expectedSignatures, System.String expectedOutput, System.Nullable`1[T] expectedReturnCode, System.String[] args, Microsoft.CodeAnalysis.Emit.EmitOptions emitOptions, Microsoft.CodeAnalysis.Test.Utilities.Verification verify) [0x00016] in &lt;410994acfd424b9db2d2c066e1ae29e9&gt;:0

  at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBase.CompileAndVerify (Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestSource source, System.Collections.Generic.IEnumerable`1[T] references, System.Collections.Generic.IEnumerable`1[T] manifestResources, System.Collections.Generic.IEnumerable`1[T] dependencies, System.Action`1[T] sourceSymbolValidator, System.Action`1[T] assemblyValidator, System.Action`1[T] symbolValidator, Microsoft.CodeAnalysis.Test.Utilities.SignatureDescription[] expectedSignatures, System.String expectedOutput, System.Nullable`1[T] expectedReturnCode, System.String[] args, Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions options, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions parseOptions, Microsoft.CodeAnalysis.Emit.EmitOptions emitOptions, Roslyn.Test.Utilities.TargetFramework targetFramework, Microsoft.CodeAnalysis.Test.Utilities.Verification verify) [0x00034] in &lt;410994acfd424b9db2d2c066e1ae29e9&gt;:0

  at Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenTests.DecimalBinaryOp_03 () [0x0000e] in &lt;713891092dbf4c60917eca0a107b2bf5&gt;:0

  at (wrapper managed-to-native) System.Reflection.RuntimeMethodInfo.InternalInvoke(System.Reflection.RuntimeMethodInfo,object,object[],System.Exception&amp;)

  at System.Reflection.Run

````</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34197</IssueID>
    <RepoID>1</RepoID>
    <Title>Assertion failure in AnalyzeUnusedValueAssignments</Title>
    <Description>**Version Used**: 5597c56faaebaf04231104b26fccd6e66ff0417e

```
Event Time (UTC): 3/16/2019 6:08:47 PM
Event ID: 1025
Data: Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.Exception
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Exit(System.String)
   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Fail(System.String, System.String)
   at System.Diagnostics.TraceListener.Fail(System.String)
   at System.Diagnostics.TraceInternal.Fail(System.String)
   at System.Diagnostics.Debug.Assert(Boolean)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer+SymbolStartAnalyzer+BlockAnalyzer.AnalyzeUnusedValueAssignments(Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext, Boolean, Microsoft.CodeAnalysis.PooledObjects.PooledHashSet`1&lt;Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageResult&gt;, Boolean ByRef)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer+SymbolStartAnalyzer+BlockAnalyzer.AnalyzeOperationBlockEnd(Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor+&lt;&gt;c__55`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;ExecuteBlockActions&gt;b__55_1(System.ValueTuple`2&lt;System.Action`1&lt;Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext&gt;,Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[[System.ValueTuple`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext, Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, System.Action`1&lt;System.ValueTuple`2&lt;System.__Canon,Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext&gt;&gt;, System.ValueTuple`2&lt;System.__Canon,Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext&gt;, System.Nullable`1&lt;Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows[[System.ValueTuple`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext, Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, System.Action`1&lt;System.ValueTuple`2&lt;System.__Canon,Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext&gt;&gt;, System.ValueTuple`2&lt;System.__Canon,Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext&gt;, System.Nullable`1&lt;Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteBlockActions[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.PooledObjects.PooledHashSet`1&lt;System.__Canon&gt;, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.ISymbol, Microsoft.CodeAnalysis.SemanticModel, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.IOperation&gt;, System.Action`1&lt;Microsoft.CodeAnalysis.Diagnostic&gt;, System.Func`2&lt;Microsoft.CodeAnalysis.Diagnostic,Boolean&gt;, BlockAnalyzerStateData`2&lt;System.__Canon,System.__Canon&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteBlockActionsCore[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;, System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;, System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.ISymbol, System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;, System.Func`2&lt;System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;,System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;&gt;, Microsoft.CodeAnalysis.SemanticModel, System.Func`2&lt;Microsoft.CodeAnalysis.SyntaxNode,Int32&gt;, BlockAnalyzerStateData`2&lt;System.__Canon,System.__Canon&gt;, Boolean)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.TryExecuteOperationBlockActions(System.Collections.Generic.IEnumerable`1&lt;Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction&gt;, System.Collections.Generic.IEnumerable`1&lt;Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction&gt;, System.Collections.Generic.IEnumerable`1&lt;Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction&gt;, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.ISymbol, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.IOperation&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.IOperation&gt;, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.SyntaxReference, Int32, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState, Boolean)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1+&lt;&gt;c__DisplayClass14_0[[Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, Microsoft.CodeAnalysis.VisualBasic, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].&lt;TryExecuteDeclaringReferenceActions&gt;g__executeOperationsBlockActions|7(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.IOperation&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.IOperation&gt;, System.Collections.Generic.IEnumerable`1&lt;CodeBlockAnalyzerActions&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind&gt;&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1+&lt;&gt;c__DisplayClass14_0[[Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, Microsoft.CodeAnalysis.VisualBasic, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].&lt;TryExecuteDeclaringReferenceActions&gt;g__executeExecutableCodeActions|3()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1[[Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, Microsoft.CodeAnalysis.VisualBasic, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.SyntaxReference, Int32, Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState, GroupedAnalyzerActions&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind&gt;, Boolean, Boolean, Boolean, Boolean, Boolean, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1[[Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, Microsoft.CodeAnalysis.VisualBasic, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState, Boolean, Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;TryProcessSymbolDeclaredAsync&gt;d__92.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;TryProcessEventCoreAsync&gt;d__91.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ProcessEventAsync&gt;d__89.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ProcessCompilationEventsCoreAsync&gt;d__88.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;ProcessEventAsync&gt;d__89.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;TryProcessEventCoreAsync&gt;d__91.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;TryProcessSymbolDeclaredAsync&gt;d__92.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;GetPerSymbolAnalyzerActionsAsync&gt;d__108.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;GetPerSymbolAnalyzerActionsAsync&gt;d__109.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;&gt;c__DisplayClass109_0+&lt;&lt;GetPerSymbolAnalyzerActionsAsync&gt;g__getSymbolActionsCoreAsync|1&gt;d.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager+&lt;GetPerSymbolAnalyzerActionsAsync&gt;d__13.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager+&lt;GetSymbolAnalysisScopeAsync&gt;d__8.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager+&lt;GetSymbolAnalysisScopeCoreAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>02/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34196</IssueID>
    <RepoID>1</RepoID>
    <Title>PE TimeDataStamp is wrong in VS2017.</Title>
    <Description>PE TimeDataStamp is seconds passed from 1970-1-1 in old visual studio:
`var dateTime = new DateTime(1970, 1, 1, 0, 0, 0).AddSeconds(TimeDataStamp)`

For example, build any application in VS2015, TimeDataStamp = 5C8D3366 (2019/3/16 17:33:26)

But build it in VS2017, TimeDataStamp = AC884742 (2061/9/22 10:58:10)

Is it a bug?
</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>17/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34195</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix race in GetOpenDocumentInCurrentContextWithChanges</Title>
    <Description>This was reading Workspace.CurrentSolution twice, so if the document was removed between two reads it'd end up throwing exceptions or triggering asserts.

Fixes #33652

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Sometimes when you're using C# or VB code in Visual Studio and you have code lens on, it'll crash.

### Bugs this fixes

#33652

### Workarounds, if any

Turning off CodeLens will reduce the risk.

### Risk

Zero. Trivial bug fix that closes a race.

### Performance impact

Zero.

### Is this a regression from a previous update?

Yes, ish. The bug has existed for ages, but some changes in 16.0 has probably made it easier to hit.

### Root cause analysis

There's a longstanding race in a common helper function that's used in almost every Roslyn feature. The race can happen if a thread is updating the state of our projects while another thread is calling this function. I suspect we've never really noticed this because usually those were always both the UI thread. But in 16.0, we:

1. Refactored some Code Lens stuff; I haven't checked but this means this function is currently being called on a background thread, and it's possible that moved and is more likely to be hit.
2. Refactored our project system handling, which means our project state can also be updated on a background thread.

### How was the bug found?

Internal automated test runs.

&lt;/details&gt;</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34194</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix typo</Title>
    <Description>According to the [glossary](https://github.com/dotnet/docs/blob/master/docs/standard/glossary.md#net) - rename from `.Net` to `.NET`</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34193</IssueID>
    <RepoID>1</RepoID>
    <Title>Update README.md</Title>
    <Description>Investigating a test failure on Linux CI</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>16/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34192</IssueID>
    <RepoID>1</RepoID>
    <Title>Debugger fails on async lambda function</Title>
    <Description>Using .net core 2.2 c# ver 7.3 debugger fails on async lambda function (returning task) passed as parameter to another function.

The code works as expected but debugging experience is broken. Only breakpoint present after first await keyword is honored. Sometimes debugger passes several times over calling function. This can be reproduced by a trivial sample application (see bellow).

```C#
using System;
using System.Threading.Tasks;

internal class Program
{
    private static async Task Main(string[] args)
    {
        // Call Method1
        await CallAsyncFunction(async () =&gt;
        {
            // Place a break point on this row
            Console.WriteLine("A");
            // Place a break point on this row 
            await Task.Delay(100);
            // Place a break point on this row 
            Console.WriteLine("B");
            await Task.Delay(100);
            Console.WriteLine("C");
        });

        Console.ReadLine();
    }

    private static async Task CallAsyncFunction(Func&lt;Task&gt; func)
    {
        await func();
    }
}
```
_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/489653/debugger-fails-on-async-lambda-function.html
VSTS ticketId: 820585_
_These are the original issue comments:_

Visual Studio Feedback System on 3/14/2019, 11:12 PM (20 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34191</IssueID>
    <RepoID>1</RepoID>
    <Title>Go to implementation throws The Symbol has no implementations - ONLY for parameterized methods</Title>
    <Description>VSF_TYPE_MARKDOWNWhen I hit Go to implementation on a method in Visual Studio 2017 or 2019 Preview 3 - (started happening only on .Net core solution, .Net framework 4.7 works fine) - it throws &amp;quot;The Symbol has no implementations&amp;quot; pop up. 
I know this has been reported and you marked some of them as being duplicate but reporting since i found a narrowing condition. 

If the method in question DOES NOT have parameters (e.g. public void MethodA()) then it works. It throws the error ONLY for methods with parameters. There you go, if that helps at all. 

Will be great to have this resolved because it is very annoying and cumbersome to navigate to methods behind the Interface without it. 

Thanks!

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/470557/go-to-implementation-throws-the-symbol-has-no-impl.html
VSTS ticketId: 802805_
_These are the original issue comments:_

Visual Studio Feedback System on 2/26/2019, 07:06 PM (16 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34190</IssueID>
    <RepoID>1</RepoID>
    <Title>Move EventHookup to EditorFeatures layer</Title>
    <Description>Currently EventHookup code is in the VisualStudio layer. To be consumed by VS for Mac it would be nice to move it down to EditorFeatures. From cursory glance we haven't found dependencies that would be hard to isolate from VS.

Currently VSMac has a copy of the code.</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34189</IssueID>
    <RepoID>1</RepoID>
    <Title>Suggest format specifiers based on type</Title>
    <Description>[Original developer community feedback](https://developercommunity.visualstudio.com/content/idea/482533/suggest-format-specifiers-based-on-type.html)

&gt; I have a TimeSpan object, which I need to convert into a string. When I typed ToString(""), I expected to see a list of common format specifiers with examples that I could use to autocomplete my line. Sadly, this is something that Resharper provides that I have come to rely on, and it's missing in Visual Studio 2019.

&gt; My example above speaks specifically to TimeSpan objects, but it applies generally to DateTime, numerics and any other type that accepts format specifiers, both as as an argument to ToString() and inside interpolated strings.

&gt; Intellisense suggests potential methods, events, properties, etc. I'm talking about suggestions for format specifiers when calling ToString().

**Steps to Reproduce**:

1. Type the code below
```csharp
DateTime.Now.ToString("
```

**Expected Behavior**:
When you type the quote (") you get a autocomplete suggestion like this:
```
t - short time                                               6:30
D - long date                             Thursday, 10 April 2008
d - short date                                         04/10/2008
F - full date long               Thursday, 10 April 2008 06:30:00
f - full date short                 Thursday, 10 April 2008 06:30
G - general long                              04/10/2008 06:30:00
.
.
(etc)
```

Just arrow down to the one you need and hit Enter.

Similar autocomplete suggestions are available for numeric types and TimeSpan, to name a few.
</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34188</IssueID>
    <RepoID>1</RepoID>
    <Title>View in Object Browser Fails for Local Projet</Title>
    <Description>VSF_TYPE_MARKDOWNI get an error diagnostic when I try to view one of my projects in the Object Browser.

The image shows a local project highlighted, as well as the diagnostic after I right-click it and select View in Object Browser.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/487037/view-in-object-browser-fails-for-local-projet.html
VSTS ticketId: 818783_
_These are the original issue comments:_

Visual Studio Feedback System on 3/13/2019, 00:54 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 3/15/2019, 03:18 PM (4 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34187</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC test scenario: Multi-process updates</Title>
    <Description>**Version Used**: 

![image](https://user-images.githubusercontent.com/41759/54467476-8a95d680-4742-11e9-9f7b-3788cb3e0eb9.png)

Fixed in 16.3 P1.

**Steps to Reproduce**:

1. Extract [MultiProcess.zip](https://github.com/dotnet/roslyn/files/2973242/MultiProcess.zip) to a directory and open MultiProcess.sln.
2. Build the solution.
3. Place breakpoint on `Console.WriteLine(2);` statement in `Program2.cs`.
4. Debug project `ConsoleApp2` (F5)
5. When the breakpoint is hit, switch to command line and run `MultiProcess\ConsoleApp1\bin\Debug\ConsoleApp1.exe`.
6. Attache VS to process ConsoleApp1 (managed debugging)
7. Open file `C.cs` and change statement `Console.WriteLine("lib");` to `Console.WriteLine("lib - after edit");`.
8. Place breakpoint on the changed statement (`Console.WriteLine("lib - after edit");`).
9. F5 to apply the changes and continue debugging
10. Switch to command line and hit `Enter`
11. F5 to continue executing in ConsoleApp1

**Expected Behavior**:

An error is reported that the change can't be applied since `ClassLibrary1.dll` is loaded to two processes: ConsoleApp1 and ConsoleApp2 and only one of the processes allows Edit and Continue. ConsoleApp1 does not allow EnC since we attached to it. 

**Actual Behavior**:

The edit is applied only in ConsoleApp2 and when the breakpoint in `C.cs` is hit by ConsoleApp1 the source code does not correspond to the actual code that's being executed.

![image](https://user-images.githubusercontent.com/41759/54467806-be71fb80-4744-11e9-9cae-8774e5dda48f.png)
</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>25/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34186</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34185</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34184</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34183</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34182</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34181</IssueID>
    <RepoID>1</RepoID>
    <Title>Closing brace after single line if / while</Title>
    <Description>&lt;p&gt;Please provide automatic transformation which applies for control statements (while, if) in block type containing only one statement. This transformation would apply iff user removes closing or opening brace. This would automatically remove matching brace and effectivelly transform if / while from block type to single line type.&lt;br&gt;&lt;br&gt;When I am refactoring I often remove one or more statements from if or while block and suddenly want to make it single line without braces. Suggested feature would make my life much easier because all I would have to do is removing opening / closing brace. &lt;/p&gt;&lt;pre&gt;if (a == 1) 
{
  DoSomething();
  /* When refactoring this method is suddenly no longer needed. I want to be able to delete it and after removing } make if only single line without braces */&amp;lt;br&amp;gt;  DoSomethingElse();
}&lt;/pre&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/459346/closing-brace-after-single-line-if-while.html
VSTS ticketId: 795120_
_These are the original issue comments:_

Jane Wu [MSFT] on 2/18/2019, 02:28 AM (25 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34180</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix flaky test AsynchronousOperationListenerTests.IgnoredCancel</Title>
    <Description>Fixes #32404</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34179</IssueID>
    <RepoID>1</RepoID>
    <Title>Gathering Suggestions: Pre-calculate these</Title>
    <Description>&lt;p&gt;When using Ctrl+. on an Intellisense red squiggle error, there is a few seconds of delay while &amp;quot;gathering suggestions&amp;quot;.  Perhaps, in some kind of low priority background task, Visual Studio could spend some of my spare CPU cycles working through these BEFORE I come to use Ctrl+.?  This would make for a great improvement to development experience.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/448994/gathering-suggestions-pre-calculate-these.html
VSTS ticketId: 789069_
_These are the original issue comments:_

Jane Wu [MSFT] on 2/11/2019, 02:59 AM (32 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34178</IssueID>
    <RepoID>1</RepoID>
    <Title>CS1503 reported with misleading message</Title>
    <Description>**Version Used**: Dev16 Preview 4.3 (28714.232.d16.0stg)

**Steps to Reproduce**:

1. Create a .NET Core console app.
2. Install the StreamJsonRpc package.
3. Add this method to the `Program` class:

```cs
public async System.Threading.Tasks.Task&lt;T&gt; GetServiceProxyAsync&lt;T&gt;()
{
    System.IO.Stream stream = null;
    return StreamJsonRpc.JsonRpc.Attach&lt;T&gt;(stream);
}
```

**Expected Behavior**:

An error telling me that `T` doesn't have sufficient generic parameter constraints to call `Attach&lt;T&gt;(Stream)`.

**Actual Behavior**:

&gt; error CS1503: Argument 1: cannot convert from 'System.IO.Stream' to 'StreamJsonRpc.JsonRpcProxyOptions'

The error I get makes no sense, since I clearly am calling a method that takes a single `Stream` parameter only, and that exact method exists. I'm clearly calling a static method as well. My only mistake is that my method needs to have `where T : class` added as a generic type constraint.

Yet the error message assumes I'm calling an instance method whose signature doesn't come close to matching the one that I'm clearly trying to call.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34177</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't complete statement when in multi-line verbatim string that is passed to a method</Title>
    <Description>Fixes #34176


</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34176</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete Statement behaves incorrectly in a multi-line verbatim string that is passed to a method</Title>
    <Description>adding notes from taylor 
![image](https://user-images.githubusercontent.com/12449387/54401262-33313100-4684-11e9-90b0-77b4b1d7dae9.png)

_Originally posted by @jinujoseph in https://github.com/dotnet/roslyn/issues/34088#issuecomment-473122101_</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34175</IssueID>
    <RepoID>1</RepoID>
    <Title>Invoke new document API for fully load in code broom.</Title>
    <Description>Related to #34133

Wait until solution is fully loaded when the user hits the code broom.
![code_broom_wait](https://user-images.githubusercontent.com/5749229/54462191-18b29280-472c-11e9-97e8-d366640cc1d3.gif)
</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34174</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not skip emit if errors are suppressed</Title>
    <Description>In the command line compilation we try to discover when to stop the
compilation stages based on if an error is produced. If the error was
produced by /warnaserror, then suppressed, this should not be considered
a compilation-halting error.

Fixes #34101</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34173</IssueID>
    <RepoID>1</RepoID>
    <Title>Code Snippets for C# just like VB side has by default</Title>
    <Description>[Original developer community feedback](https://developercommunity.visualstudio.com/content/idea/466655/code-snippets-for-c-just-like-vb-side-has-by-defau.html)

**Version Used**: Visual Studio 2019 Preview

**Steps to Reproduce**:
1. Type (Ctrl + K, Ctrl + X) to access C# snippets.

**Expected Behavior**:
Rich snippet library available in Visual Basic also available in C#.

**Actual Behavior**:
C# snippets are limited to some simple 'Surrounds With' and simple syntax options. Visual basic's snippets are more task-oriented code blocks.

&gt;Complete "do this task" snippets, such as Read, Write, or Delete a reg key. Read, Write, Append to a file. Complete little tasks, while C# is just quick access to common things like making a loop, else block, etc. Useful, but nowhere near as useful as VB's long list of actual tasks.

C#
![image](https://user-images.githubusercontent.com/8293542/54460710-96c06a80-4727-11e9-8524-40b5ee855406.png)

Visual Basic
![image](https://user-images.githubusercontent.com/8293542/54460669-7395bb00-4727-11e9-943b-82384b309d7e.png)

</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34172</IssueID>
    <RepoID>1</RepoID>
    <Title>Update to Arcade SDK 1.0.0-beta.19167.10</Title>
    <Description>Brings in package licensing changes: https://github.com/dotnet/arcade/pull/2003
Fixes https://github.com/dotnet/roslyn/issues/31589</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34171</IssueID>
    <RepoID>1</RepoID>
    <Title>Prevent embedding of interfaces that contain non-abstract members.</Title>
    <Description>
    </Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34170</IssueID>
    <RepoID>1</RepoID>
    <Title>Class readonly properties goes wrong</Title>
    <Description>VSF_TYPE_MARKDOWNusually , when i write this, it is ok.

```
    Public Class TestClass
        Public ReadOnly Property Name As String
        Public ReadOnly Property Age As Integer
        Public Sub New(Name As String, Age As Integer)
            Me.Name = Name
            Me.Age = Age
        End Sub
    End Class
```

but when i write like this, it goes wrong.

![](https://s2.ax1x.com/2019/03/09/App8Te.png)

```
   Public Class TestClass
        Public ReadOnly Property Name As String
        Public ReadOnly Property Age As Integer
        Public Sub New(Name As String, Age As Integer)
            With Me
                .Name = Name
                .Age = Age
            End With
        End Sub
    End Class
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/484179/class-readonly-properties-goes-wrong.html
VSTS ticketId: 816622_
_These are the original issue comments:_

Visual Studio Feedback System on 3/11/2019, 00:25 AM (4 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34169</IssueID>
    <RepoID>1</RepoID>
    <Title>Faulty inline temp variable suggestion</Title>
    <Description>Original code:

```csharp
var response = new byte[4];
int byteCount = m_rs485.Read(response, 0, 5);
if (byteCount != 5 || response[3] != (byte)STATUS.SUCCESS) retVal = false;
```

VS suggested refactoring:

```csharp
int byteCount = m_rs485.Read(new byte[4], 0, 5);
if (byteCount != 5 || (new byte[4])[3] != (byte)STATUS.SUCCESS) retVal = false;
```

Bad idea!

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/479229/faulty-inline-temp-variable-suggestion.html
VSTS ticketId: 811326_
_These are the original issue comments:_

Visual Studio Feedback System on 3/6/2019, 01:00 AM (9 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34168</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34167</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34166</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34165</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpUpdateProjectToAllowUnsafe.CPSProject_GeneralPropertyGroupUpdated Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=125135&amp;view=ms.vss-test-web.build-test-results-tab)

```
Assert.Contains() Failure
Not found: (filter expression)
In value: WhereEnumerableIterator&lt;XElement&gt; [&lt;PropertyGroup&gt;
 &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
&lt;/PropertyGroup&gt;]
```</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34164</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpUpdateProjectToAllowUnsafe.LegacyProject_AllConfigurationsUpdated Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=125135&amp;view=ms.vss-test-web.build-test-results-tab)

Failed when expecting `true`
```
Assert.All() Failure: 2 out of 2 items in the collection did not pass.
[1]: Item: &lt;PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;
 &lt;DebugType&gt;pdbonly&lt;/DebugType&gt;
 &lt;Optimize&gt;true&lt;/Optimize&gt;
 &lt;OutputPath&gt;bin\\Release\\&lt;/OutputPath&gt;
 &lt;DefineConstants&gt;TRACE&lt;/DefineConstants&gt;
 &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
 &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
 &lt;/PropertyGroup&gt;
 Xunit.Sdk.EqualException: Assert.Equal() Failure
 Expected: true
 Actual: (null)
 at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:line 244
 at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.&lt;&gt;c__DisplayClass3_0.&lt;VerifyPropertyInEachConfiguration&gt;b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43
 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\CollectionAsserts.cs:line 36
[0]: Item: &lt;PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;
 &lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
 &lt;DebugType&gt;full&lt;/DebugType&gt;
 &lt;Optimize&gt;false&lt;/Optimize&gt;
 &lt;OutputPath&gt;bin\\Debug\\&lt;/OutputPath&gt;
 &lt;DefineConstants&gt;DEBUG;TRACE&lt;/DefineConstants&gt;
 &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
 &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
 &lt;/PropertyGroup&gt;
 Xunit.Sdk.EqualException: Assert.Equal() Failure
 Expected: true
 Actual: (null)
 at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:line 244
 at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.&lt;&gt;c__DisplayClass3_0.&lt;VerifyPropertyInEachConfiguration&gt;b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43
 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\CollectionAsserts.cs:line 36
```

Failed when expecting `latest`
```
Assert.All() Failure: 2 out of 2 items in the collection did not pass.
[1]: Item: &lt;PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;
 &lt;DebugType&gt;pdbonly&lt;/DebugType&gt;
 &lt;Optimize&gt;true&lt;/Optimize&gt;
 &lt;OutputPath&gt;bin\\Release\\&lt;/OutputPath&gt;
 &lt;DefineConstants&gt;TRACE&lt;/DefineConstants&gt;
 &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
 &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
 &lt;/PropertyGroup&gt;
 Xunit.Sdk.EqualException: Assert.Equal() Failure
 Expected: latest
 Actual: (null)
 at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:line 244
 at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.&lt;&gt;c__DisplayClass3_0.&lt;VerifyPropertyInEachConfiguration&gt;b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43
 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\CollectionAsserts.cs:line 36
[0]: Item: &lt;PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;
 &lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
 &lt;DebugType&gt;full&lt;/DebugType&gt;
 &lt;Optimize&gt;false&lt;/Optimize&gt;
 &lt;OutputPath&gt;bin\\Debug\\&lt;/OutputPath&gt;
 &lt;DefineConstants&gt;DEBUG;TRACE&lt;/DefineConstants&gt;
 &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
 &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
 &lt;/PropertyGroup&gt;
 Xunit.Sdk.EqualException: Assert.Equal() Failure
 Expected: latest
 Actual: (null)
 at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:line 244
 at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.&lt;&gt;c__DisplayClass3_0.&lt;VerifyPropertyInEachConfiguration&gt;b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43
 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\CollectionAsserts.cs:line 36
```</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34163</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpUpdateProjectToAllowUnsafe.LegacyProject_MultiplePlatforms_AllConfigurationsUpdated Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=125135&amp;view=ms.vss-test-web.build-test-results-tab)

```
Assert.All() Failure: 3 out of 4 items in the collection did not pass.
[3]: Item: &lt;PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Release|x64'\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;
 &lt;OutputPath&gt;bin\\x64\\Release\\&lt;/OutputPath&gt;
 &lt;PlatformTarget&gt;x64&lt;/PlatformTarget&gt;
 &lt;/PropertyGroup&gt;
 Xunit.Sdk.EqualException: Assert.Equal() Failure
 Expected: true
 Actual: (null)
 at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:line 244
 at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.&lt;&gt;c__DisplayClass3_0.&lt;VerifyPropertyInEachConfiguration&gt;b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43
 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\CollectionAsserts.cs:line 36
[2]: Item: &lt;PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Debug|x64'\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;
 &lt;OutputPath&gt;bin\\x64\\Debug\\&lt;/OutputPath&gt;
 &lt;PlatformTarget&gt;x64&lt;/PlatformTarget&gt;
 &lt;AllowUnsafeBlocks&gt;false&lt;/AllowUnsafeBlocks&gt;
 &lt;/PropertyGroup&gt;
 Xunit.Sdk.EqualException: Assert.Equal() Failure
 ‚Üì (pos 0)
 Expected: true
 Actual: false
 ‚Üë (pos 0)
 at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:line 244
 at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.&lt;&gt;c__DisplayClass3_0.&lt;VerifyPropertyInEachConfiguration&gt;b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43
 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\CollectionAsserts.cs:line 36
[0]: Item: &lt;PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Debug|x86'\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;
 &lt;OutputPath&gt;bin\\x86\\Debug\\&lt;/OutputPath&gt;
 &lt;PlatformTarget&gt;x86&lt;/PlatformTarget&gt;
 &lt;/PropertyGroup&gt;
 Xunit.Sdk.EqualException: Assert.Equal() Failure
 Expected: true
 Actual: (null)
 at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:line 244
 at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.&lt;&gt;c__DisplayClass3_0.&lt;VerifyPropertyInEachConfiguration&gt;b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43
 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\CollectionAsserts.cs:line 36
```</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34162</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpUpgradeProject.CPSProject_GeneralPropertyGroupUpdated Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=125135&amp;view=ms.vss-test-web.build-test-results-tab)

```
Assert.Contains() Failure
Not found: (filter expression)
In value: WhereEnumerableIterator&lt;XElement&gt; [&lt;PropertyGroup&gt;
 &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
&lt;/PropertyGroup&gt;]
```</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34161</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpUpgradeProject.LegacyProject_MultiplePlatforms_AllConfigurationsUpdated Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=125135&amp;view=ms.vss-test-web.build-test-results-tab)

```
Assert.All() Failure: 4 out of 4 items in the collection did not pass.
[3]: Item: &lt;PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Release|x64'\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;
 &lt;OutputPath&gt;bin\\x64\\Release\\&lt;/OutputPath&gt;
 &lt;PlatformTarget&gt;x64&lt;/PlatformTarget&gt;
 &lt;/PropertyGroup&gt;
 Xunit.Sdk.EqualException: Assert.Equal() Failure
 Expected: latest
 Actual: (null)
 at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:line 244
 at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.&lt;&gt;c__DisplayClass3_0.&lt;VerifyPropertyInEachConfiguration&gt;b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43
 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\CollectionAsserts.cs:line 36
[2]: Item: &lt;PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Debug|x64'\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;
 &lt;OutputPath&gt;bin\\x64\\Debug\\&lt;/OutputPath&gt;
 &lt;PlatformTarget&gt;x64&lt;/PlatformTarget&gt;
 &lt;LangVersion&gt;7.0&lt;/LangVersion&gt;
 &lt;/PropertyGroup&gt;
 Xunit.Sdk.EqualException: Assert.Equal() Failure
 ‚Üì (pos 0)
 Expected: latest
 Actual: 7.0
 ‚Üë (pos 0)
 at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:line 244
 at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.&lt;&gt;c__DisplayClass3_0.&lt;VerifyPropertyInEachConfiguration&gt;b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43
 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\CollectionAsserts.cs:line 36
[1]: Item: &lt;PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Release|x86'\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;
 &lt;OutputPath&gt;bin\\x86\\Release\\&lt;/OutputPath&gt;
 &lt;PlatformTarget&gt;x86&lt;/PlatformTarget&gt;
 &lt;LangVersion&gt;7.1&lt;/LangVersion&gt;
 &lt;/PropertyGroup&gt;
 Xunit.Sdk.EqualException: Assert.Equal() Failure
 ‚Üì (pos 0)
 Expected: latest
 Actual: 7.1
 ‚Üë (pos 0)
 at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:line 244
 at Roslyn.VisualStudio.IntegrationTests.AbstractUpdateProjectTest.&lt;&gt;c__DisplayClass3_0.&lt;VerifyPropertyInEachConfiguration&gt;b__0(XElement group) in /_/src/VisualStudio/IntegrationTest/IntegrationTests/AbstractUpdateProjectTest.cs:line 43
 at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\CollectionAsserts.cs:line 36
[0]: Item: &lt;PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Debug|x86'\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;
 &lt;OutputPath&gt;bin\\x86\\Debug\\&lt;/OutputPath&gt;
 &lt;PlatformTarget&gt;x86&lt;/PlatformTarget&gt;
 &lt;/PropertyGroup&gt;
 Xunit.Sdk.EqualException: Assert.Equal() Failure
 Expected: latest
 Actual: (null)
 at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\StringAsserts.cs:line 244
 at Roslyn.VisualStudio.
```</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34160</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpWinForms.ChangeControlPropertyInCode Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=125135&amp;view=ms.vss-test-web.build-test-results-tab)

```
Assert.Contains() Failure
Not found: this.SomeButton.Text = \"ButtonTextGoesHere\";
In value: namespace TestProj
{
 partial class Form1
 {
 /// &lt;summary&gt;
 /// Required designer variable.
 /// &lt;/summary&gt;
 private System.ComponentModel.IContainer components = null;

 /// &lt;summary&gt;
 /// Clean up any resources being used.
 /// &lt;/summary&gt;
 /// &lt;param name=\"disposing\"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;
 protected override void Dispose(bool disposing)
 {
 if (disposing &amp;&amp; (components != null))
 {
 components.Dispose();
 }
 base.Dispose(disposing);
 }

 #region Windows Form Designer generated code

 /// &lt;summary&gt;
 /// Required method for Designer support - do not modify
 /// the contents of this method with the code editor.
 /// &lt;/summary&gt;
 private void InitializeComponent()
 {
 this.components = new System.ComponentModel.Container();
 this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
 this.ClientSize = new System.Drawing.Size(800, 450);
 this.Text = \"Form1\";
 }

 #endregion
 }
}

```</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34159</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpWinForms.ChangeControlProperty Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=125135&amp;view=ms.vss-test-web.build-test-results-tab)

```
Assert.Contains() Failure
Not found: this.SomeButton.Text = \"NewButtonText\"
In value: namespace TestProj
{
 partial class Form1
 {
 /// &lt;summary&gt;
 /// Required designer variable.
 /// &lt;/summary&gt;
 private System.ComponentModel.IContainer components = null;

 /// &lt;summary&gt;
 /// Clean up any resources being used.
 /// &lt;/summary&gt;
 /// &lt;param name=\"disposing\"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;
 protected override void Dispose(bool disposing)
 {
 if (disposing &amp;&amp; (components != null))
 {
 components.Dispose();
 }
 base.Dispose(disposing);
 }

 #region Windows Form Designer generated code

 /// &lt;summary&gt;
 /// Required method for Designer support - do not modify
 /// the contents of this method with the code editor.
 /// &lt;/summary&gt;
 private void InitializeComponent()
 {
 this.components = new System.ComponentModel.Container();
 this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
 this.ClientSize = new System.Drawing.Size(800, 450);
 this.Text = \"Form1\";
 }

 #endregion
 }
}

```</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34158</IssueID>
    <RepoID>1</RepoID>
    <Title>LocalSymbol and BoundLocal types should match in error scenarios</Title>
    <Description>Consider this code:

```C#
class Program
{
    static void F()
    {
        var x = new[] { x };
    }
}
```
The `BoundLocal` representing the reference to `x` in the array initializer has a `Type` of `ErrorType var`, but the `LocalSymbol` itself has a `Type` of `var[]`. These should match.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34157</IssueID>
    <RepoID>1</RepoID>
    <Title>Wait for async completion in integration tests</Title>
    <Description>A test failure was observed where `BasicIntellisense.TypeAVariableDeclaration` failed on this line:

https://github.com/dotnet/roslyn/blob/5d2310a380ce7d00284cd821d5650230370e583a/src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicIntelliSense.cs#L152

The failure occurred in an async completion scenario. Since &lt;kbd&gt;Space&lt;/kbd&gt; is a completion trigger, there is a period of time where Roslyn tells the IDE that completion *should* show, and later when no completion items are found the session is dismissed. We need to wait for this computation to complete before making assertions about its outcome.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34156</IssueID>
    <RepoID>1</RepoID>
    <Title>Respect the iteration parameter in IterationData</Title>
    <Description>
    </Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34155</IssueID>
    <RepoID>1</RepoID>
    <Title>Debugger incorrectly evaluates indexer of generic type</Title>
    <Description>**Version Used**: Microsoft Visual Studio Enterprise 2019 Int Preview Version 16.0.0 Preview 4.3 [28711.165.d16.0stg]

**Steps to Reproduce**:

1.  Compile the following program
2.  Set a breakpoint at the end of `Main`
3.  Evaluate `d[1].Item1` in the Watch window

``` c#
using System.Collections.Generic;

class Program
{
    public unsafe static void Main()
    {
        var d = new Dictionary&lt;int, (string, int)&gt;();
        d.Add(1, ("string", 1));
        var tmp = d[1];
    }
}
```

**Expected Behavior**:

Displays `"string"`

**Actual Behavior**:

Displays `null`

![image](https://user-images.githubusercontent.com/3804346/54448246-7c2ac900-4708-11e9-93af-e444ed036916.png)
</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34154</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow NuGet within the IDE</Title>
    <Description>As far as I can tell in testing, this change removes the requirement that users run **Restore.cmd** manually before opening **Roslyn.sln**.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34153</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove earlier NullableReferenceTypes documentation</Title>
    <Description>
    </Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>16/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34152</IssueID>
    <RepoID>1</RepoID>
    <Title>Update vs branch for 16.1</Title>
    <Description>
    </Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34151</IssueID>
    <RepoID>1</RepoID>
    <Title>3.0.0-beta4 doesn't have package for .NET Framework</Title>
    <Description>**Version Used**: 
3.0.0-beta4

**Steps to Reproduce**:
1. Create a .NET 4.7.2 project
2. Install Microsoft.CodeAnalysis.Workspaces.Common 3.0.0-beta4 NuGet package

**Expected Behavior**:
Reference to Microsoft.CodeAnalysis.Workspaces.Desktop from `lib\net46` or something is added

**Actual Behavior**:
A .NET Standard 2.0 variant of NuGet package is installed, which doesn't contain Microsoft.CodeAnalysis.Workspaces.Desktop.dll.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34150</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34149</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34148</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34147</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34146</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34145</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature Request: C# - Runtime parsing of interpolation-tokenized string</Title>
    <Description>C# introduced interpolated strings (i.e. $"{varname}") back in 6.0. This is a feature request to extend it in a future iteration of the language/compiler. This could possibly be done using some manner of a compiler trick as well ?

Consider this snippet of code of the as-is scenario:

**Snippet 1:**
```
const string url = "https://login.microsoftonline.com/{tenantId}";
//‚Ä¶


string tenantId = "contoso.onmicrosoft.com";
//‚Ä¶
Uri u = new Uri( url.Replace("{tenantId}, tenantId) );
```

Now, wouldn't it be more useful (reducing lines of code and errors to do with string replacements if this could simply be something like:

**Snippet 2:**
```
const string url = "https://login.microsoftonline.com/{tenantId}";
//‚Ä¶


string tenantId = "contoso.onmicrosoft.com";
//‚Ä¶
Uri u = new Uri( $url );
```

Note that in the 2nd snippet, I have prefixed the `url` variable in the Uri constructor with a `$` indicating that I want the compiler to perform the intended magic.

Can this be?</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34144</IssueID>
    <RepoID>1</RepoID>
    <Title>Perform nullable type inference for script var declarations and top-level pattern variables</Title>
    <Description>We re-infer the type and nullable annotation for `var`-declared declarations (local variables and pattern variables) in normal code.

However, in script code those are represented differently (using fields instead of locals) and we may need to implement inference for them separately.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34143</IssueID>
    <RepoID>1</RepoID>
    <Title>Inline temporary variable does not preserve indentation</Title>
    <Description>Reported by @drewnoakes 
Affected Build: 16.0.0 Preview 4.1 SVC1 

Steps to reproduce:

Before
```c#
void Foo(bool b)
{
    var s = "";
    SomeMethod(
        s);
}

void SomeMethod(string _) { }
```

After inline `s`.

```c#
void Foo(bool b)
{
    SomeMethod(
(string)""); // leading whitespace removed
}

void SomeMethod(string _) { }
```
</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34142</IssueID>
    <RepoID>1</RepoID>
    <Title>Inline temporary variable should be available on usages of variable, not just declaration</Title>
    <Description>Reported by @drewnoakes 
Affected Branch: 
Affected Build: 16.0.0 Preview 4.1 SVC1 
Affected Product Language: 

Steps to reproduce:

Given code

```c#
var s = "";
Bar(s);
```

The "Inline temporary variable" refactoring should be available on all usages of the `s` symbol (i.e. on both the declaration and the usage).

</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34141</IssueID>
    <RepoID>1</RepoID>
    <Title>Check implicit receiver in nested initializers</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32495</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34140</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34139</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34138</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34137</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34136</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34135</IssueID>
    <RepoID>1</RepoID>
    <Title>Warn on __refvalue null dereference:</Title>
    <Description>- Store the nullable annotation of the type passed to __refvalue
- Use that information in nullable walker to report nullability warnings
- Add test

Fixes #32446</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34134</IssueID>
    <RepoID>1</RepoID>
    <Title>Update indexers based on analyzer receiver</Title>
    <Description>In `receiver[index]` we need to update the symbol for the indexer property once we have the flow-analyzed type for the receiver.

Fixes https://github.com/dotnet/roslyn/issues/29964</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>17/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34133</IssueID>
    <RepoID>1</RepoID>
    <Title>Block specific command handlers during partial load</Title>
    <Description>These command handlers were skipped.
SurroundWith
Snippet
EventHookup
Format
VBCommit
EndConstruct
AutomaticLineEnder
Completion
CommentUncommentSelection
DocumentationComment
automatic formatter
XmlTagCompletion
CompleteStatement
FixInterpolatedVerbatimString
SignatureHelp
PasteCommandHandler
vb implementInterface/abstractclasss
splitString
closeblockcomment
blockcommentediting
gotoadjacentmember
executeinteractive
outlinging
interactivepaste
NavigateToHighlightReference
GoToDeclaration
FindReferences
</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34132</IssueID>
    <RepoID>1</RepoID>
    <Title>Make eng/invoke-mono.sh executable</Title>
    <Description>Otherwise a clean checkout on OSX can't run tests on Mono

```
git clone ...
./restore.sh
eng/build.sh -b
eng/build.sh --testMono
# lot of errors from last step
```

So if we look in one artifacts file:
```
cat artifacts/log/Debug/Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests_net472_x64.log 
```
the output is:
```
/var/folders/xj/lznyzvqx45j_qy49h8f09ld80000gn/T/tmp95749de193934ccf826f83e5c580e247.exec.cmd: line 2: /Users/alekseyk/work/roslyn/roslyn/eng/invoke-mono.sh: Permission denied
=== COMMAND LINE ===
"/Users/alekseyk/work/roslyn/roslyn/eng/invoke-mono.sh"  "/Users/alekseyk/.nuget/packages/xunit.runner.console/2.4.1-pre.build.4059/tools/net452/xunit.console.exe" "/Users/alekseyk/work/roslyn/roslyn/artifacts/bin/Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests/Debug/net472/Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests.dll" -noshadow -xml "/Users/alekseyk/work/roslyn/roslyn/artifacts/TestResults/Debug/Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests_net472_x64.xml" -html "/Users/alekseyk/work/roslyn/roslyn/artifacts/TestResults/Debug/Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests_net472_x64.html"  &gt; "/Users/alekseyk/work/roslyn/roslyn/artifacts/log/Debug/Microsoft.CodeAnalysis.CSharp.Symbol.UnitTests_net472_x64.log" 2&gt;&amp;1
```
</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34131</IssueID>
    <RepoID>1</RepoID>
    <Title>Collection initializer code fix should recognize assignments into an array</Title>
    <Description>Visual Studio Community 2017 v15.9.6
".NETFramework,Version=v4.7.2"

**Steps to Reproduce**:

```
        private async Task SomethingAsync()
        {
            Task[] tasks = new Task[2];
            tasks[0] = this.SomeTaskOne();
            tasks[1] = this.SomeTaskTwo();
            await Task.WhenAny(tasks);
        } 
```


**Expected Behavior**

Something like this:

`   await Task.WhenAny(new Task[] { this.SomeTaskOne(), this.SomeTaskTwo() });`

**Actual Behavior**:    
     
    (new Task[2])[0] = this.SomeTaskOne();
    (new Task[2])[1] = this.SomeTaskTwo();
    await Task.WhenAny(new Task[2]);

     Naturally it also breaks function completely.


Not a big deal ofc. I just stumbled across this. 
I usually auto refactor just basic stuff like properties.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34130</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust upgrade project fixer to support new error codes</Title>
    <Description>
    </Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34129</IssueID>
    <RepoID>1</RepoID>
    <Title>Make it possible to decide style rules based on context</Title>
    <Description>.editorconfig is nice, but it's not enough. For example, even though I like to use var when the type is apparent, I think that if the type is not &lt;em&gt;relatively &lt;/em&gt;&lt;em&gt;obvious&lt;/em&gt;, then explicit type should be used. Also, I don't think var should be used when the local is going to be assigned to a dynamic or to a Object (because when code is refactored, no compilation error is emitted in these situations). Thus, setting var for apparent types = true, VS will suggest using var in all of the following situations:

```csharp
// 1
Type x = new Type();

// 2
Type y = GetTypeById(1);

// 3
services.AddTransient&lt;Type&gt;(sp =&gt; {
    // lots of logic
    return new Type();
});

// 4
Type z = new Type();
return new { z };
```

Even though I think var should be used only on the first two situations.

Also, there's expression-bodied members (EBM). If I tell VS to use EBM when possible, it will suggest using it in both of the following situations:

```csharp
public void Foo() 
{ 
   Bar();
}
public void Baz()
{
    return TryGetResponseData&lt;IEnumerable&lt;Try&lt;FooBar&gt;&gt;&gt;(await restClient.FooBarEndpoint.Get(2));
}
```

Even though I think EBM should only be used on the first one, since the second one is too long to fit in one line along with the declaration.

Then there's also curly braces and ifs. I think one-line ifs shouldn't have braces, except when something inside them use braces. Thus, if I tell VS to use brace-less ifs, it will in both of these situations:

```csharp
// 1
if (foo)
{
    return bar;
}

// 2
if (foo)
{
    if (bar)
    {
        var baz = GetBaz();
        baz.DoBaz();
        return baz;
    }
}
   
```

Even though I think it should remove braces only in the first situation.

I don't know what the best solution to this would be. It could be something using Roslyn, so that you could intercept every style rule when they're matched, run your own code and decide if the rule should be applied or not.

However, something else that you could do is simply add more rules to these specific, but more general cases, like the three I mentioned. These three style rules I mentioned are not *hugely* popular, but they can be found pretty easily in various repos out there.

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/466695/make-it-possible-to-decide-style-rules-based-on-co.html
VSTS ticketId: 800947_
_These are the original issue comments:_

Jane Wu [MSFT] on 2/25/2019, 01:28 AM (17 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34128</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix struct layout error when nullable enabled:</Title>
    <Description>- Change type comparison to ignore nullable
- Add a test
- Fix an existing test

Fixes #32934</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34127</IssueID>
    <RepoID>1</RepoID>
    <Title>Wrap Expression wraps long if in a weird spot</Title>
    <Description>![image](https://user-images.githubusercontent.com/2371880/54391173-5dbdc280-4661-11e9-8d4a-dd9fbe2e2d93.png)

Instead of offering to wrap at the `&amp;&amp;`, it instead offers to wrap in the middle of the `==`, which is not a good place to wrap this expression.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34126</IssueID>
    <RepoID>1</RepoID>
    <Title>Hide obsolete member from the IDE for improved usability</Title>
    <Description>Since the given members are obsolete and will cause a build error if used, 
it's just better if they aren't shown at all.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34125</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable some custom modifier tests on Mono</Title>
    <Description>After mono/mono@c0b48793db422b502364f5836ac9ba8abe37aa7a, Mono should be able to run these tests.


/cc @jaredpar </Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34124</IssueID>
    <RepoID>1</RepoID>
    <Title>BasicWinForms.ChangeControlPropertyInCode Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=123658&amp;view=ms.vss-test-web.build-test-results-tab)

```
Assert.Contains() Failure
Not found: Me.SomeButton.Text = \"ButtonTextGoesHere\"
In value: &lt;Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()&gt; _
Partial Class Form1
 Inherits System.Windows.Forms.Form

 'Form overrides dispose to clean up the component list.
 &lt;System.Diagnostics.DebuggerNonUserCode()&gt; _
 Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 Try
 If disposing AndAlso components IsNot Nothing Then
 components.Dispose()
 End If
 Finally
 MyBase.Dispose(disposing)
 End Try
 End Sub

 'Required by the Windows Form Designer
 Private components As System.ComponentModel.IContainer

 'NOTE: The following procedure is required by the Windows Form Designer
 'It can be modified using the Windows Form Designer. 
 'Do not modify it using the code editor.
 &lt;System.Diagnostics.DebuggerStepThrough()&gt; _
 Private Sub InitializeComponent()
 components = New System.ComponentModel.Container()
 Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
 Me.ClientSize = New System.Drawing.Size(800, 450)
 Me.Text = \"Form1\"
 End Sub

End Class
```</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34123</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualBasic.BasicWinForms.ChangeControlProperty Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=123658&amp;view=ms.vss-test-web.build-test-results-tab)

```
Assert.Contains() Failure
Not found: Me.SomeButton.Text = \"NewButtonText\"
In value: &lt;Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()&gt; _
Partial Class Form1
 Inherits System.Windows.Forms.Form

 'Form overrides dispose to clean up the component list.
 &lt;System.Diagnostics.DebuggerNonUserCode()&gt; _
 Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 Try
 If disposing AndAlso components IsNot Nothing Then
 components.Dispose()
 End If
 Finally
 MyBase.Dispose(disposing)
 End Try
 End Sub

 'Required by the Windows Form Designer
 Private components As System.ComponentModel.IContainer

 'NOTE: The following procedure is required by the Windows Form Designer
 'It can be modified using the Windows Form Designer. 
 'Do not modify it using the code editor.
 &lt;System.Diagnostics.DebuggerStepThrough()&gt; _
 Private Sub InitializeComponent()
 components = New System.ComponentModel.Container()
 Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
 Me.ClientSize = New System.Drawing.Size(800, 450)
 Me.Text = \"Form1\"
 End Sub

End Class
```</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34122</IssueID>
    <RepoID>1</RepoID>
    <Title>[WIP]Bugfix: Settings for using-directives not exported to .editorconfig</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/33766

At the moment both `dotnet_sort_system_directives_first` and `dotnet_separate_import_directive_groups` rules are not exported when exporting overridden code style from Visual Studio to editorconfig. This PR will ensure both are exported.

EditorConfig-rules: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2017#net-formatting-settings</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34121</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust base access with explicit base according to latest LDM decisions</Title>
    <Description>- Restrict accessed members to immediate members of the specified type.
- Change accessibility of explicit implementations in interfaces to ‚Äòprotected‚Äô.

Relates to LDM notes: https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-02-27.md#collision-of-lookup-rules-and-decisions-for-base

Related to #32054.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34120</IssueID>
    <RepoID>1</RepoID>
    <Title>Add hang mitigating timeout to WaitForAsyncOperations</Title>
    <Description>For a subset of cases where our integration tests hang, we will now see more specific errors and screenshots without needing to download and examine the heap dumps.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34119</IssueID>
    <RepoID>1</RepoID>
    <Title>BasicWinForms.AddControl Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=123658&amp;view=ms.vss-test-web.build-test-results-tab)

```
Assert.Contains() Failure
Not found: Me.SomeButton.Name = \"SomeButton\"
In value: &lt;Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()&gt; _
Partial Class Form1
 Inherits System.Windows.Forms.Form

 'Form overrides dispose to clean up the component list.
 &lt;System.Diagnostics.DebuggerNonUserCode()&gt; _
 Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 Try
 If disposing AndAlso components IsNot Nothing Then
 components.Dispose()
 End If
 Finally
 MyBase.Dispose(disposing)
 End Try
 End Sub

 'Required by the Windows Form Designer
 Private components As System.ComponentModel.IContainer

 'NOTE: The following procedure is required by the Windows Form Designer
 'It can be modified using the Windows Form Designer. 
 'Do not modify it using the code editor.
 &lt;System.Diagnostics.DebuggerStepThrough()&gt; _
 Private Sub InitializeComponent()
 components = New System.ComponentModel.Container()
 Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
 Me.ClientSize = New System.Drawing.Size(800, 450)
 Me.Text = \"Form1\"
 End Sub

End Class
```
</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34118</IssueID>
    <RepoID>1</RepoID>
    <Title>[WIP]Bugfix: Settings for using-directives not exported to .editorconfig</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/33766.

At the moment both `dotnet_sort_system_directives_first` and `dotnet_separate_import_directive_groups` rules are not exported when exporting overridden code style from Visual Studio to editorconfig. This PR will ensure both are exported. </Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34117</IssueID>
    <RepoID>1</RepoID>
    <Title>Require exactly one export of IStreamingFindUsagesPresenter when used</Title>
    <Description>Closes #24794 (not necessarily related, but I couldn't find any evidence of ongoing flakiness in the test and multiple stabilization passes have occurred since it was filed)</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34116</IssueID>
    <RepoID>1</RepoID>
    <Title>Language Feature?</Title>
    <Description>I'm not sure what I would call this particular type of syntax sugar, but as I was reading through some source recently I wondered if there wasn't a readable way to simplify the following commonly occurring pattern? (Note: this is from some older sample source; I updated it here to use `out string value` already, where it was previously using `string value;` on the preceding line)

```csharp
return Items.TryGetValue(RedirectUriKey, out string value) ? value : null;
```
Surely it's not the most important feature request, but I figured it wouldn't hurt to ask. Maybe something like
```csharp
Items.TryGetValue(RedirectUriKey, return string value);
```
Allowing `return` to be used in place of `out` or `ref` (possibly even optimizing around allocation behavior? I'm not sure of the internals involved here). I honestly haven't thought super deeply about this so feel free to shoot it down, but it was a thought I figured I'd share.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34115</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0044 False Negative on Struct Field</Title>
    <Description>**Version Used**: 
VS 16.0.0 RC.2

**Steps to Reproduce**:
Load this code in the IDE
```csharp
namespace IDE0044_False_Negative
{
    class Class
    {
        int i;
        System.Drawing.Point p;
    }
}
```

**Expected Behavior**:
i and p should both be flagged for IDE0044: Make field readonly

**Actual Behavior**:
p is not flagged for IDE0044</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34114</IssueID>
    <RepoID>1</RepoID>
    <Title>Rewrite FindReferencesTests as theories</Title>
    <Description>These tests rely on mutable data stored in a mock service that should have been obtained from MEF. Cleaning up the types to use MEF for construction requires separating the test cases so each case runs as one test.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34113</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix FindReferencesTests and link to correct issues</Title>
    <Description>A few tests were updated to reflect the outcome documented in the old internal bug tracker. Others were relinked to appropriate public-facing issues for disabled tests:

#34104
#34105
#34106
#34107</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34112</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7

</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34111</IssueID>
    <RepoID>1</RepoID>
    <Title>Best practice for loading assemblies in netstandard</Title>
    <Description>**Version Used**: 
Nuget `Microsoft.CSharp Version=4.5.0`

**What are we trying to do?**

My company has a very large base code, and one of the libraries compiles lots of C# code at runtime. We are trying to support **.NET Core**, and for this purpose, we are currently assembling the libraries to **netstandard2.0**, and the executable is coming out to certain customers in the **.NET Framework** and to other customers in the **.NET Core**.

We don't understand what is the right way to load the correct Assemblies according to TargetFramework:

**For .NET Framework:**
```csharp
IReadOnlyCollection&lt;MetadataReference&gt; references = new[]
{
    MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location),
    MetadataReference.CreateFromFile(typeof(ValueTuple&lt;&gt;).GetTypeInfo().Assembly.Location),
    MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
    MetadataReference.CreateFromFile(typeof(Regex).Assembly.Location),
    MetadataReference.CreateFromFile(typeof(XmlAttribute).Assembly.Location),
    MetadataReference.CreateFromFile(typeof(Enumerable).Assembly.Location),
    MetadataReference.CreateFromFile(typeof(HashSet&lt;&gt;).Assembly.Location),
    MetadataReference.CreateFromFile(Assembly.Load("netstandard").Location)
};

return CSharpCompilation.Create(assemblyName, options: options, references: references);
```

But if we call this library from a `.NET Core` dll, we must add more assemblies likes these, to compile the same code:

```csharp
MetadataReference.CreateFromFile(Assembly.Load("System.Runtime").Location)
```

But then, this code doesn't support `.NET Framework` anymore, because in `.NET Framework`, there is one assembly for all references, and the `netstandard` or `System.Runtime` are not exists.

So, we search for a **common way** to load assemblies for both `.NET Core` and `.NET Framework`.

From [this Wiki page](https://github.com/dotnet/roslyn/wiki/Runtime-code-generation-using-Roslyn-compilations-in-.NET-Core-App), we tried to use `AppContext.GetData("TRUSTED_PLATFORM_ASSEMBLIES")`, but again, for `.NET Core` it return a list of requierded dll's, but for `.NET Framework` it return `null`.

There is a **common way** to accomplish that, or we should load the assemblies by checking the `Assembly.GetEntryAssembly().ImageRuntimeVersion`?
</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34110</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove BoundExpressionExtensions.GetTypeAndNullability and GetNullableAnnotation</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/33941</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34109</IssueID>
    <RepoID>1</RepoID>
    <Title>Conditional access and null coalescing operator affect both branches</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/33526

Remaining pure test scenarios are in `switch` constructs, which are tracked by https://github.com/dotnet/roslyn/issues/32414 (switch expressions) and https://github.com/dotnet/roslyn/issues/23944 (switch statements)</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34108</IssueID>
    <RepoID>1</RepoID>
    <Title>[Regression] Usages are not highlighted is next character is an operator</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 4.2 [28711.60.d16.0]

**Steps to Reproduce**:

``` C#
        static void Main(string[] args)
        {
            int count = 0;

            count++;    // 1
            count--;    // 2
            count&amp;= 1;  // 3

            Console.WriteLine(count);
        }
```

Two ways to reproduce this, one is a regression from 15.9 and one is not.

1. Give above, put caret inside `count` in line marked with 1, 2 or 3 and then double-click `count` in same line [Regression]

-or-

2. Double-click `count` in the line marked with 1, 2 or 3 [No regression - repros in 15.9]

``` C#
        static void Main(string[] args)
        {
            int count = 0;

            count++;    // 1
            count--;    // 2
            count&amp;= 1;  // 3

            Console.WriteLine(count);
        }
```

**Expected Behavior**:
All usages of count to be highlighted

![image](https://user-images.githubusercontent.com/1103906/54329734-09b5dc80-4667-11e9-9c55-d0fb6246f871.png)

**Actual Behavior**:
No usages are highlighted

![image](https://user-images.githubusercontent.com/1103906/54329760-310ca980-4667-11e9-8a90-706b4b9ca8f1.png)


</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34107</IssueID>
    <RepoID>1</RepoID>
    <Title>Find All References does not support using statements</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 4

:link: http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/522786

**Steps to Reproduce**:

```csharp
class Example : System.IDisposable
{
    public void Dispose() { }
    void Method()
    {
        using (new Example())
        {
        }
    }
}
```

1. Place the caret on `Dispose` (the method definition)
2. Place the caret on `using` (the keyword)

**Expected Behavior**:

1. Both `Dispose` and `using` are highlighted
2. Both `Dispose` and `using` are highlighted

**Actual Behavior**:

1. Only `Dispose` is highlighted
2. Only `using` is highlighted</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34106</IssueID>
    <RepoID>1</RepoID>
    <Title>Find All References does not support LINQ</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 4

üîó http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/634818

**Steps to Reproduce**:

```csharp
using System;
using System.Collections.Generic;
class C : List&lt;int&gt;
{
    void Zap()
    {
        var q = from v in this
                where v &gt; 1
                select v + 1;
    }
}

static class Extensions
{
    public static IEnumerable&lt;int&gt; Where(this IEnumerable&lt;int&gt; source, Func&lt;int, bool&gt; predicate) =&gt; throw null;
    public static IEnumerable&lt;int&gt; Select(this IEnumerable&lt;int&gt; source, Func&lt;int, int&gt; func) =&gt; throw null;
}
```

1. Click `Where` (the method definition)
2. Click `where` (the query keyword)
3. Click `Select` (the method definition)
4. Click `select` (the query keyword)

**Expected Behavior**:

1. Both `Where` and `where` are highlighted
2. Both `Where` and `where` are highlighted
3. Both `Select` and `select` are highlighted
4. Both `Select` and `select` are highlighted

**Actual Behavior**:

1. Only `Where` is highlighted
2. Only `Where` is highlighted
3. Only `Select` is highlighted
4. Only `Select` is highlighted</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34105</IssueID>
    <RepoID>1</RepoID>
    <Title>'lock' statement fails to report implicit references to Monitor.Enter and Monitor.Exit</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 4

:link: http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/528936

**Steps to Reproduce**:

Use the following code, with `$$` indicating the caret placement for two scenarios.

```csharp
using System.Threading;
using System.Collections.Generic;
class C
{
    void Zap()
    {
        bool lockTaken = false;
        Monitor.TryEn$$ter(null, ref lockTaken); // Scenario 1
        Monitor.Ex$$it(null); // Scenario 2
        lock (new C())
        {
        }
    }
}
```

**Expected Behavior**:

1. The **Highlight References** feature highlights the `lock` keyword
2. **Find All References** finds the `lock` keyword

**Actual Behavior**:

The `lock` keyword is not identified as a reference to `Monitor.TryEnter(object, ref bool)` or `Monitor.Exit(object)`.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34104</IssueID>
    <RepoID>1</RepoID>
    <Title>Cref: constructor overload parameter list differences are disregarded in VB</Title>
    <Description>**Version Used**: 

üîó http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/769477
üîó https://devdiv.visualstudio.com/defaultcollection/DevDiv/_workitems/edit/93772

**Steps to Reproduce**:

Roslyn as of 8/26/13.
 

1. Open ETA, paste the following VB snippet:

```vb
Class A
    Public Sub New()
    End Sub
    Public Sub New(x As Integer)
    End Sub
End Class
Class Program
    ''' &lt;summary&gt;
    ''' &lt;see cref="A.New()"/&gt;
    ''' &lt;see cref="A.New(Integer)"/&gt;
    ''' &lt;/summary&gt;
    ''' &lt;param name="args"&gt;&lt;/param&gt;
    Shared Sub Main(args As String())
        Dim a As A = New A()
    End Sub
End Class
```

Place cursor on "New" inside cref="A.New(Integer)" - observe both constructor overloads to become highlighted, regardless of parameter list differences (FAR also returns both of them) 
 
2. Paste the analogous C# snippet:

```csharp
class A
{
    public A() { }
    public A(int x) { }
}
class Program
{
    /// &lt;summary&gt;
    /// &lt;see cref="A.A()"/&gt;
    /// &lt;see cref="A.A(int)"/&gt;
    /// &lt;/summary&gt;
    /// &lt;param name="args"&gt;&lt;/param&gt;
    static void Main(string[] args)
    {
        A a = new A();
    }
}
```

Place cursor on last A in cref="A.A(int)" - observe only A(int x) overload becomes highlighted
</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34103</IssueID>
    <RepoID>1</RepoID>
    <Title>Workaround a deadlock caused by watching .editorconfigs</Title>
    <Description>We use the CodingConventions library from Visual Studio that parses and processes .editorconfig files for us. This library under the covers uses the Visual Studio file watching service for watching files. In Visual Studio 2017 the file watching service made the guarantee that watching files could be done in a free-threaded manner in the background and wouldn't marshal. The .editorconfig library then passed this guarantee along to us.

In Dev16, the file watching service was rewritten, and accidentally lost that guarantee in specific cases. Much of our interactions with the file change service also changed so it doesn't matter, but the .editorconfig library's use of the file watching service is causing deadlocks in some scenarios. This change is a workaround to ensure we don't start watching .editorconfig files on the background thread in places where we need to ensure we don't touch the UI thread.

Ideally we'd be fixing the file change service itself to restore the guarantee, but that's too risky of a change for our current needs and isn't something we can do quickly enough to avoid customer issues. Since we're rewriting our .editorconfig handling entirely which will cause us to stop using the .editorconfig library (and by extension, it's use of this problematic file change service path), we can do this workaround now and let the problem go away on it's own soon when we simply delete all of this.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/810494

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

User tries to create a new IntelliTest into an existing project. The operation may hang.

### Bugs this fixes

https://devdiv.visualstudio.com/DevDiv/_workitems/edit/810494

### Workarounds, if any

No practical workarounds.

### Risk

Low to moderate. This is a tactical fix designed to limit risk.

### Performance impact

Lowish: we're potentially duplicating the cache of .editorconfig data being used since we're not sharing the same instance as the rest of VS. There is a possibility that an unknown configuration could encounter observable slowdowns, though these are not as risky as deadlocks. We are working with the platform team to address the API change that led to this problem so the workaround, along with its risks, can be removed in a timely manner.

### Is this a regression from a previous update?

Yes, regressed at some point during Dev16.

### Root cause analysis

In Dev16, the file watching service was rewritten, and accidentally lost a free-threading guarantee in specific cases, which causes this deadlock. Rearchitecting it to avoid that assumption is too complicated and risky, so we're doing a fix here.

### How was the bug found?

Internal testing.

&lt;/details&gt;</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34102</IssueID>
    <RepoID>1</RepoID>
    <Title>Mitigation for GetTypeInfo on suppressed expression</Title>
    <Description>Completion in the IDE doesn't work because `GetTypeInfo` returns nothing for suppressed expressions. This PR mitigates this and provides the result from binding (while the deeper public API work is making progress).

FYI @ivanbasov @CyrusNajmabadi </Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34101</IssueID>
    <RepoID>1</RepoID>
    <Title>Suppressed warning + errorlog + warnaserror -&gt; Silent failed compilation with zero exit code</Title>
    <Description>**Version Used**: 3.0.19.15604 (7d31dd6e)

**Steps to Reproduce**:

1. Create test.cs
``` C#
#pragma warning disable 1591

public class P {
    public static void Main() {}
}
```
2. `csc.exe test.cs -doc:doc.xml -errorlog:errors.json -warnaserror`

**Expected Behavior**:

Compilation succeeds, test.exe is generated.

**Actual Behavior**:

Csc.exe returns 0, but test.exe is not generated</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34100</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34099</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34098</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34097</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>14/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34096</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove IgnoreInsignificantNullableModifiersDifference</Title>
    <Description>Now that `NullableAnnotation` has three states, there is no longer a concept of "insignificant nullable difference". Removing that `TypeCompareKind`.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34095</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should not depend on IAsyncCompletionSource to provide completion trigger reason</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/34089
Required by LiveShare</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34094</IssueID>
    <RepoID>1</RepoID>
    <Title>`#nullable restore` in generated file should restore nullable context from project </Title>
    <Description>Currently, this directive behaves like `#nullable disable` in generated files, because the default context of generated files is "disabled".

But in the context of a Razor generated file, which mixes user code with generated code, `#nullable restore` would be much more useful and intuitive if it restored the context from the project.

Also, this would allow Razor to produce a `#nullable restore`/`#nullable disable` pair around blocks of user code and get the behavior that users would expect (ie. their project setting is effective). Razor would then also add `@nullable ...` directive in its own syntax and modulate the code it generates.

FYI @rynowak @NTaylorMullen @chsienki @cston @AlekseyTs @gafter 

Relates to https://github.com/aspnet/AspNetCore-Tooling/pull/349</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34093</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to .NET Core 3.0 SDK</Title>
    <Description>This moves our .NET Core SDK build to be 3.0 Preview 3. Going forward developers will need to install this build in order to work with Roslyn in Visual Studio

https://dotnet.microsoft.com/download/thank-you/dotnet-sdk-3.0.100-preview3-windows-x64-installer</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34092</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpAddMissingReference.VerifyAvailableCodeActions Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=121983&amp;view=ms.vss-test-web.build-test-results-tab)

```
System.Exception : Marker 'y.goo' not found in text: using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
 class Program
 {
 static void Main(string[] args)
 {
 }
 }
}
```</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34091</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpAddMissingReference.InvokeSomeFixesInCSharpThenVerifyReferences Fails</Title>
    <Description>[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=121983&amp;view=ms.vss-test-web.build-test-results-tab)

```
System.Exception : Marker 'y.goo' not found in text: using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
 class Program
 {
 static void Main(string[] args)
 {
 }
 }
}
```</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34090</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow file banner comments to be documentation comments</Title>
    <Description>This PR fixes a bad merge from master to master-vs-deps.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34089</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should not depend on IAsyncCompletionSource to provide completion trigger reason</Title>
    <Description>Currently, Roslyn sets the completion reason in a property bag when Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CompletionSource.GetCompletionContextAsync is called:

`            session.Properties.AddProperty(InitialTriggerKind, roslynTrigger.Kind);
`
It later attempts to retrieve it in Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.UpdateCompletionList() method to determine if filtering should be done.

This doesn't work when Roslyn is not the one providing completion source.  

Instead, Roslyn should get completion reason through editor through IAsyncCompletionManager.SortCompletionListAsync.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34088</IssueID>
    <RepoID>1</RepoID>
    <Title>Adding semicolon at end of generic statement in Razor within @{...} can result in a broken experience</Title>
    <Description>this is port of vso issue filed
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/819598/

...

![image](https://user-images.githubusercontent.com/1333179/54317826-88e0dd00-45a1-11e9-9f7e-39bfa768d12f.png)

Steps to reproduce:
https://i.imgur.com/vOJ39F4.gifv

This also ends up being an issue in C# but of course less common given the presence of XML tags:
https://i.imgur.com/yceCKxG.gifv</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34087</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullable state across boxing conversions</Title>
    <Description>Fixes #33387 
See also #32599</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34086</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullability state across Nullable&lt;T&gt; conversions with nested conversions</Title>
    <Description>A warning should not be reported for `Item1.F.ToString()`.
```C#
class C
{
    internal object? F;
}

class Program
{
    static void F()
    {
        (object, object)? t;
        t = (new C() { F = 1 }, new C());
        (((C, C))t).Item1.F.ToString(); // warning
    }
}
```</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34085</IssueID>
    <RepoID>1</RepoID>
    <Title>Inconsistent and non-compliant behaviour when ToString returns null, and is concatted with emptystring</Title>
    <Description>**Version Used**: 2.9.0

**Steps to Reproduce**:

```csharp
public class C
{
    public override string ToString() =&gt; null;
}

Console.WriteLine(("" + new C()) == null);
Console.WriteLine((new C() + "") == null);
Console.WriteLine(("" + new C() + "") == null);
Console.WriteLine((new C() + "" + "") == null);
```

**Expected Behavior**:

According to section 7.8.4 "Addition Operator" of the C# Language Specification:

&gt; String concatenation:
&gt;        `string operator +(string x, string y);`
&gt;        `string operator +(string x, object y);`
&gt;        `string operator +(object x, string y);`
&gt; These overloads of the binary + operator perform string concatenation. If an operand of string concatenation is null, an empty string is substituted. Otherwise, any non-string argument is converted to its string representation by invoking the virtual ToString method inherited from type object. **If ToString returns null, an empty string is substituted.**
&gt; ...
&gt; **The string concatenation operator never returns a null value**

Therefore I'd expect the code above to print

```
False
False
False
False
```

**Actual Behavior**:

```
True
True
False
False
```

The compiler folds the "" constant in all three cases, reducing them all to a call to `string.Concat(new C())`. However in the third and fourth cases, it appends a test to see if `string.Concat` returns `null`, and if so it substitutes "". `string.Concat` tests whether its argument is null (and substitutes "" if so), but doesn't test whether calling `.ToString()` on its argument results in null.

Using `null` instead of "" seems to exhibit the same behaviour. If you use `string.Empty`, the compiler doesn't do the same constant folding, and the issue doesn't appear.

Interestingly this behaviour was different pre-Roslyn - in that case, you get

```
True
True
True
True
```

[Repro on SharpLab](https://sharplab.io/#v2:EYLgHgbALANALiATgVwHYB8ACAGABJgRgG4BYAKHMwGZ8CJ8AmWgdnIG9zcv8bD7MouALIBDAJaoAFAEpO3DmW5LaATkmSARBtwBqXKgCmAd1wBhGdNwBeK/uQAbe9NKLlXQmsmGT5y3q2WNnaOznJuHupauvrGZjLRAda2qA5OLm7uBJ7ecX64Uf4agcmpoa5cAL7kVRRk1Ixm7GE8uAD2AG4GiIhiACYGtHgAKq0AynA9qADm8VYAfMH2LhVAA)</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34084</IssueID>
    <RepoID>1</RepoID>
    <Title>Report nullness warnings for nullable collections in foreach.</Title>
    <Description>Fixes:#31503</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34083</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unused ICommentUncommentService.</Title>
    <Description>PR for typescript to test against.  Removes obsolete service.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34082</IssueID>
    <RepoID>1</RepoID>
    <Title>Operation node missing in control flow graph for IMethodReferenceOperation.Instance</Title>
    <Description>**Version Used**: 
Latest master sources

**Steps to Reproduce**:

1. Execute the following C# IOperation unit test:
```csharp
        [Fact]
        public void ExtensionMethod_MethodReference()
        {
            string source = @"
using System;

internal delegate bool MyPredicate&lt;in T&gt;(T obj);

internal class P
{
    static void M1(P p)
    /*&lt;bind&gt;*/ {
        M2(p.E1);
    }/*&lt;/bind&gt;*/

    static void M2(MyPredicate&lt;int&gt; predicate) { }
}

internal static class Extensions
{
    public static bool E1(this P p, int x) =&gt; x != 0;
}
";
            string expectedOperationTree = @"
IBlockOperation (1 statements) (OperationKind.Block, Type: null) (Syntax: '{ ... }')
  IExpressionStatementOperation (OperationKind.ExpressionStatement, Type: null) (Syntax: 'M2(p.E1);')
    Expression: 
      IInvocationOperation (void P.M2(MyPredicate&lt;System.Int32&gt; predicate)) (OperationKind.Invocation, Type: System.Void) (Syntax: 'M2(p.E1)')
        Instance Receiver: 
          null
        Arguments(1):
            IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: predicate) (OperationKind.Argument, Type: null) (Syntax: 'p.E1')
              IDelegateCreationOperation (OperationKind.DelegateCreation, Type: MyPredicate&lt;System.Int32&gt;, IsImplicit) (Syntax: 'p.E1')
                Target: 
                  IMethodReferenceOperation: System.Boolean Extensions.E1(this P p, System.Int32 x) (Static) (OperationKind.MethodReference, Type: null) (Syntax: 'p.E1')
                    Instance Receiver: 
                      IParameterReferenceOperation: p (OperationKind.ParameterReference, Type: P) (Syntax: 'p')
              InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
              OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
";

            var expectedDiagnostics = DiagnosticDescription.None;

            VerifyOperationTreeAndDiagnosticsForTest&lt;BlockSyntax&gt;(source, expectedOperationTree, expectedDiagnostics);

            string expectedFlowGraph = @"
Block[B0] - Entry
    Statements (0)
    Next (Regular) Block[B1]
Block[B1] - Block
    Predecessors: [B0]
    Statements (1)
        IExpressionStatementOperation (OperationKind.ExpressionStatement, Type: null) (Syntax: 'M2(p.E1);')
          Expression: 
            IInvocationOperation (void P.M2(MyPredicate&lt;System.Int32&gt; predicate)) (OperationKind.Invocation, Type: System.Void) (Syntax: 'M2(p.E1)')
              Instance Receiver: 
                null
              Arguments(1):
                  IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: predicate) (OperationKind.Argument, Type: null) (Syntax: 'p.E1')
                    IDelegateCreationOperation (OperationKind.DelegateCreation, Type: MyPredicate&lt;System.Int32&gt;, IsImplicit) (Syntax: 'p.E1')
                      Target: 
                        IMethodReferenceOperation: System.Boolean Extensions.E1(this P p, System.Int32 x) (Static) (OperationKind.MethodReference, Type: null) (Syntax: 'p.E1')
                          Instance Receiver: 
                            IParameterReferenceOperation: p (OperationKind.ParameterReference, Type: P) (Syntax: 'p')
                    InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
                    OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
    Next (Regular) Block[B2]
Block[B2] - Exit
    Predecessors: [B1]
    Statements (0)
";

            VerifyFlowGraphAndDiagnosticsForTest&lt;BlockSyntax&gt;(source, expectedFlowGraph, expectedDiagnostics);
        }
```

**Expected Behavior**:
Test passes

**Actual Behavior**:
Test fails as `IMethodReferenceOperation` for syntax `p.E1` in the actual flow graph has null receiver, but it should have an `IParameterReferenceOperation: p (OperationKind.ParameterReference, Type: P) (Syntax: 'p')` as the receiver. There is no IOperation node in the CFG for the explicit parameter reference. The high level IOperation tree has this parameter reference operation as expected, which seems to get lost while generating the control flow graph.

```
Differences:
    Block[B0] - Entry
        Statements (0)
        Next (Regular) Block[B1]
    Block[B1] - Block
        Predecessors: [B0]
        Statements (1)
            IExpressionStatementOperation (OperationKind.ExpressionStatement, Type: null) (Syntax: 'M2(p.E1);')
              Expression: 
                IInvocationOperation (void P.M2(MyPredicate&lt;System.Int32&gt; predicate)) (OperationKind.Invocation, Type: System.Void) (Syntax: 'M2(p.E1)')
                  Instance Receiver: 
                    null
                  Arguments(1):
                      IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: predicate) (OperationKind.Argument, Type: null) (Syntax: 'p.E1')
                        IDelegateCreationOperation (OperationKind.DelegateCreation, Type: MyPredicate&lt;System.Int32&gt;, IsImplicit) (Syntax: 'p.E1')
                          Target: 
                            IMethodReferenceOperation: System.Boolean Extensions.E1(this P p, System.Int32 x) (Static) (OperationKind.MethodReference, Type: null) (Syntax: 'p.E1')
                              Instance Receiver: 
++&gt;                             null
--&gt;                             IParameterReferenceOperation: p (OperationKind.ParameterReference, Type: P) (Syntax: 'p')
                        InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
                        OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
        Next (Regular) Block[B2]
    Block[B2] - Exit
        Predecessors: [B1]
        Statements (0)

Expected: True
Actual:   False
```</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34081</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to MSBuild 16.0</Title>
    <Description>This is a necessary pre-req to us adotping the 3.0 .NET Core SDK.

As a part of this we're also merging master-vs-deps as it's necessary to keep integration tests running. Also it's the logical step once Dev16 becomes our base development environment.

This is a parallel attempt at getting MSBuild 16.0 turned on to PR #34010</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34080</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix struct layout error when nullable enabled:</Title>
    <Description>- Change type comparison to ignore nullable
- Add a test
- Fix an existing test

Fixed #32934 </Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34079</IssueID>
    <RepoID>1</RepoID>
    <Title>generate swr loc lines based off of what's specified elsewhere, not a hard-coded list</Title>
    <Description>In response to #34078, this removes the copy/paste issues and instead uses the `$(XlfLanguages)` variable to populate everything.

I diffed the generated file in `master` vs this PR and confirmed there are exactly 2 differences:

1. There is no longer a blank line between the groups.  This is due to `&lt;WriteLinesToFile&gt;` which trims leading and trailing white space off of all strings.  End result is a NOOP.
2. The Brazilian Portuguese resource assemblies are correctly used (see #34078).</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34078</IssueID>
    <RepoID>1</RepoID>
    <Title>include the correct compiler resources assemblies for pt-BR</Title>
    <Description>The compiler MSBuild package was incorrectly using the Polish resource binaries instead of the Brazilian Portuguese ones.  Confirmed with @tmeschter in current Dev16 preview.
</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34077</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34076</IssueID>
    <RepoID>1</RepoID>
    <Title>Properly pass along cancellation token when calling OOP service during FAR.</Title>
    <Description>
    </Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>31/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34075</IssueID>
    <RepoID>1</RepoID>
    <Title>EndToEndTests.DeeplyNestedGeneric Test Failure</Title>
    <Description>Failed in Windows_Desktop_Unit_Tests release_64, Windows_Desktop_Unit_Tests release_32, and Windows_Desktop_Unit_Tests debug_64 
[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=123072&amp;view=ms.vss-test-web.build-test-results-tab)

```
Expected:
Actual:
 // error CS5001: Program does not contain a static 'Main' method suitable for an entry point
 Diagnostic(ErrorCode.ERR_NoEntryPoint).WithLocation(1, 1),
 // (1128,8): error CS8078: An expression is too long or complex to compile
 // public struct MyStruct1113&lt;T1113&gt; {
 Diagnostic(ErrorCode.ERR_InsufficientStack, \"\").WithLocation(1128, 8)
Diff:
n++&gt; Diagnostic(ErrorCode.ERR_NoEntryPoint).WithLocation(1, 1)
n++&gt; Diagnostic(ErrorCode.ERR_InsufficientStack, \"\").WithLocation(1128, 8)
Expected: True
Actual: False
```</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34074</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix few false positives in unused value assignment analyzer</Title>
    <Description>I would recommend reviewing commit by commit for each of the following fixes:

1. https://github.com/dotnet/roslyn/commit/a7e07f77f60663bd952f97135275faee25460c3b: Handle assignment with flow capture reference target similar to the way we handle non-flow capture reference assignment targets in the SymbolUsageAnalysis walker. Fixes #33949
2. https://github.com/dotnet/roslyn/commit/57ca50f3502d060f4be8381afca1ce969b91ac42: Fix logic that computes reachable writes into the finally region. Fixes #33843
3. https://github.com/dotnet/roslyn/commit/3f0b73c076d01799fcff26a6cf4fae4ebf2e5b70: Fix dataflow walker to walk the finally regions from throw/rethrow branches. Fixes #33937</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34073</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix broken link.</Title>
    <Description>
    </Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34072</IssueID>
    <RepoID>1</RepoID>
    <Title>MetadataAndSymbolCache is generating slow MetadataReferences</Title>
    <Description>**Version Used**: 2.8.1, but also present in latest

The `FileKey.Create` method is slow:
https://github.com/dotnet/roslyn/blob/fab7134296816fc80019c60b0f5bef7400cf23ea/src/Compilers/Core/Portable/FileKey.cs#L38

Which makes `MedataAndSymbolCache` type slow:
https://github.com/dotnet/roslyn/blob/fab7134296816fc80019c60b0f5bef7400cf23ea/src/Compilers/Server/VBCSCompiler/MetadataCache.cs#L57

Which in turn is making `MetadataCache` slow : https://github.com/dotnet/roslyn/blob/fab7134296816fc80019c60b0f5bef7400cf23ea/src/Compilers/Server/VBCSCompiler/MetadataCache.cs#L125

Which in turn is making `Compilation.GetTypeByMetadataName` and/or `SymbolFinder` very, very slow, as it gets the Metadata a lot of times.

I used that cache in another context instead of using `MetadataReference.FromFile` directly, and made a *very* dramatic performance degradation (15 seconds vs. 3 minutes run).

I'm wondering if this is taking part in the slowness of analyzers if SymbolFinder and/or `Compilation.GetTypeByMetadataName` when the VBCSCompiler is used.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34071</IssueID>
    <RepoID>1</RepoID>
    <Title>Apply a hang mitigating timeout to ExecuteCommand</Title>
    <Description>
    </Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34070</IssueID>
    <RepoID>1</RepoID>
    <Title>"Extract Method + Local" causes integration test failures</Title>
    <Description>:link: https://dev.azure.com/dnceng/public/_build/results?buildId=122902

![image](https://user-images.githubusercontent.com/1408396/54280883-83b26c80-4566-11e9-9d38-d360ed24df48.png)

```
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.Exception: The following expected item(s) not found:
Extract Method

   at Microsoft.VisualStudio.IntegrationTest.Utilities.TestUtilities.ThrowIfExpectedItemNotFound[TCollection](IEnumerable`1 actual, IEnumerable`1 expected) in /_/src/VisualStudio/IntegrationTest/TestUtilities/TestUtilities.cs:line 40
   at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.TextViewWindow_OutOfProc.Verifier`1.CodeActions(IEnumerable`1 expectedItems, String applyFix, Boolean verifyNotShowing, Boolean ensureExpectedItemsAreOrdered, Nullable`1 fixAllScope, Boolean blockUntilComplete) in /_/src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/TextViewWindow_OutOfProc.Verifier.cs:line 67
   at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpExtractMethod.ExtractViaCodeAction() in /_/src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpExtractMethod.cs:line 89
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 150
   at Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 257
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task).GetType().Name
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 150
   at Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 257
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
```</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34069</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7

</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34068</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0019 fails with disposable</Title>
    <Description>**Version Used**: 
VS2019 16 P4.2
**Steps to Reproduce**:

...
```
                using (var user = new UserPrincipal(context))
                {
                    user.SamAccountName = request.ClientUserName;

                    using (var searcher = new PrincipalSearcher())
                    {
                        searcher.QueryFilter = user;

// use pattern matching suggested here
                        using (var principal = searcher.FindOne() as UserPrincipal)
                        {
                            if (principal != null)
                            {
                                isValid = (principal.Enabled ?? false) &amp;&amp; !principal.IsAccountLockedOut();
                            }
                        }
                    }
                }
```

**Expected Behavior**:
No suggestion? 

**Actual Behavior**:
Uncompilable code

                        using ()
                        {
                            if (searcher.FindOne() is UserPrincipal principal)
                            {
                                isValid = (principal.Enabled ?? false) &amp;&amp; !principal.IsAccountLockedOut();
                            }
                        }

</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34067</IssueID>
    <RepoID>1</RepoID>
    <Title>[WIP] Import completion</Title>
    <Description>@gafter @jcouv @CyrusNajmabadi 

Could you please take a look at the new API added to compiler and let me know what do you think?
The rest is still in prototype quality which I hacked together just to ensure I can get all required data from compiler.

--------

new public APIs (backed by declaration table)

```cs
public abstract partial class Compilation
{
    ...
    public abstract INamespaceDeclaration DeclarationRoot { get; }
    ...
}
```

```cs
namespace Microsoft.CodeAnalysis
{   
    public interface INamespaceOrTypeDeclaration
    {
        string Name { get; }

        ImmutableArray&lt;INamespaceOrTypeDeclaration&gt; Children { get; }

        bool IsNamespace { get; }

        bool IsType { get; }
    }

    public interface ITypeDeclaration : INamespaceOrTypeDeclaration
    {
        TypeKind TypeKind { get; }

        Accessibility DeclaredAccessibility { get; }

        int Arity { get; }

        new ImmutableArray&lt;ITypeDeclaration&gt; Children { get; }
    }

    public interface INamespaceDeclaration : INamespaceOrTypeDeclaration
    {
    }
}
```
--------
Also, a screenshot with current prototype implementation using inline description 

![image](https://user-images.githubusercontent.com/788783/54650807-533e6700-4a6d-11e9-9ca1-b4d33c84c00b.png)

</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34066</IssueID>
    <RepoID>1</RepoID>
    <Title>Add command handler for toggle block comment and refactor comment uncomment handler.</Title>
    <Description>Related to #33298

Implements toggle block comment functionality.  It is currently pending the command from the editor side to be created, but I'm sending out the PR to get feedback on the implementation.  I will not push it until I've gotten the editor changes in and ready.

I've been testing it by re-using the comment selection command handler.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34065</IssueID>
    <RepoID>1</RepoID>
    <Title>Properly thread through cancellation through a bunch of our RPC services</Title>
    <Description>Looks like JsonRPC added support for an InvokeWithCancellationToken system.  This properly hooks it up to several OOP services to get better support for cancellation.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34064</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34063</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34062</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34061</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/lspSupport</Title>
    <Description>
This is an automatically generated pull request from master into features/lspSupport.

``` bash
git fetch --all
git checkout merges/master-to-features/lspSupport
git reset --hard upstream/features/lspSupport
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/lspSupport --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34060</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34059</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34058</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34057</IssueID>
    <RepoID>1</RepoID>
    <Title>Find All References windows does not track source changes</Title>
    <Description>When I do a "Find" to find all occurrences of a string, clicking on the Find results continues to navigate the the relevant found line, even if changes have caused its line number to change between the time the "find" was done and the time the find result line was clicked on.  Nice!  Thank you, Visual Studio!

However, when I do a "Find All References" to find all references to a symbol, clicking on the references result will navigate to the line whose number was the line of the found result at the time the search was performed.  If the source file was edited, that line will likely have nothing to do with the location of the reference to the symbol.

Please make the "Find All References" window track file changes as nicely as the "Find" window does.
</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34056</IssueID>
    <RepoID>1</RepoID>
    <Title>Add new function to IMoveTypeService</Title>
    <Description>Adds the ability to split a namespace declaration at a single type within the same file. This work will be used for [move type to namespace](https://github.com/dotnet/roslyn/issues/30896#issuecomment-471667225) as a step for splitting the namespace before moving to a new namespace declaration. May be available as a single refactor as well, but currently is not provided as such. 

Examples from Move Type To Namespace design that this change will apply to, modified for only this changes scope: 

#### Example 1

##### Before

```C#
namespace Some.Existing.Name
{
    class $$Baz { }
    class Foo { }
    class Bar { }
}
```

##### After

```C#
namespace Some.Existing.Name
{
    class Baz { }
}

namespace Some.Existing.Name
{
    class Foo { }
    class Bar { }
}
```

#### Example 2

##### Before

```C#
namespace Some.Existing.Name
{
    class Baz { }
    $$class Foo { }
    class Bar { }
}
```
##### After

```C#
namespace Some.Existing.Name
{ 
    class Baz { }
}

namespace Some.Existing.Name
{
    class Foo { }
}

namespace Some.Existing.Name
{
    class Bar { }
}
```

#### Example 3

##### Before

```C#
namespace Some.Existing.Name
{
    class Baz { }
    class Foo { }
    class Bar$$ { }
}
```

##### After

```C#
namespace Some.Existing.Name
{
    class Baz { }
    class Foo { }
}

namespace Some.Existing.Name
{
    class Bar { }
}
``` 

</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>22/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34055</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove the use of forced GC in production code</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/588288 (performance reports saying many users experienced UI delays which are blamed to Roslyn).

I have requested the platform perform a forced GC in response to the same internal notification that we were handling originally. This change should also land in 16.1, with the following impact:

1. The platform implementation is slightly more efficient (it only loops until the forced GC fails to make "substantial progress"
2. UI delays will get blamed to the platform, where they belong for this in the first place</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>17/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34054</IssueID>
    <RepoID>1</RepoID>
    <Title>hide JsonRpc from partner team</Title>
    <Description>we want to move to newer version of JsonRpc (2.x) from 1.x we use.

but that has some complexity since version 2.x and 1.x is incompatible and we let partner to directly access Rpc exposed from ServiceHubServiceBase type.

this is first step so that partners move to new API that doesn't expose JsonRpc directly.

once they moved, moving us to new versino should be easier since we will not break partner teams.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34053</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unused ITestState.vb</Title>
    <Description>
    </Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34052</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete Statement should add missing closing delimiters</Title>
    <Description>If closing parenthesis or bracket is missing, Complete Statement should add it in addition to the semicolon.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34051</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete Statement should work for delegate declaration</Title>
    <Description>Complete Statement should work for 
`delegate void ChangeHandler(object sender)`</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34050</IssueID>
    <RepoID>1</RepoID>
    <Title>Specify RuntimeIdentifiers for CompilerBenchmarks</Title>
    <Description>Fixes Error NETSDK1047 Assets file 'C:\dev\roslyn\artifacts\obj\CompilerBenchmarks\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.1/win-x64'. Ensure that restore has run and that you have included 'netcoreapp2.1' in the TargetFrameworks for your project. You may also need to include 'win-x64' in your project's RuntimeIdentifiers.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34049</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow Xamarin to provide its OOP service</Title>
    <Description>
    </Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>01/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34048</IssueID>
    <RepoID>1</RepoID>
    <Title>Inserted statements become inline</Title>
    <Description>**Version Used**: 2.10.0.0

**Steps to Reproduce**:

Want to write a code fixer to convert out parameters into returned type as Tuple. Most parts work well except one formatting issue with proper indentation and new line. `WithAdditionalAnnotation(Formatter.Annotation)` is not helping here.

Old codes to be fixed:
```
using System;
using System.Threading.Tasks;
namespace Foo
{
    class Foo
    {
        public async Task&lt;int&gt; BarAsync(IMoo moo, out string sequenceId, out bool succeeded)
        {
            await moo.SleepAsync();

            Random rnd = new Random();
            if (rnd.Next(100) % 2 == 0)
            {
                sequenceId = string.Empty;
                succeeded = false;
                return 0;
            }
            else
            {
                sequenceId = ""test"";
                succeeded = true;
                return 1;
            }
        }
    }
}
```
New codes expected:
```
using System;
using System.Threading.Tasks;
namespace Foo
{
    class Foo
    {
        public async Task&lt;(int, string, bool)&gt; BarAsync(IMoo moo)
        {
            string sequenceId = default;
            bool succeeded = default;
            await moo.SleepAsync();

            Random rnd = new Random();
            if (rnd.Next(100) % 2 == 0)
            {
                sequenceId = string.Empty;
                succeeded = false;
                return (0, sequenceId, succeeded);
            }
            else
            {
                sequenceId = ""test"";
                succeeded = true;
                return (1, sequenceId, succeeded);
            }
        }
    }
}
```
Fixer codes that matter (only the add statement part):
```
// codes excluded
var model = await context.Document.GetSemanticModelAsync();

var root = await context.Document.GetSyntaxRootAsync().ConfigureAwait(false);
var diagnostic = context.Diagnostics.First();
var diagnosticSpan = diagnostic.Location.SourceSpan;
SyntaxNode syntaxNode = root.FindNode(diagnosticSpan);

var parameterList = parameterNode.Parent as ParameterListSyntax;
var allOutParameters = parameterList.Parameters.Where(p =&gt; p.Modifiers.Any(m =&gt; m.Kind() == SyntaxKind.OutKeyword));
var method = parameterList.Parent as MethodDeclarationSyntax;

SyntaxList&lt;StatementSyntax&gt; statements = method.Body.Statements;
foreach (var outParameter in allOutParameters.Reverse())
{
    var varStatement = $"{outParameter.Type} {outParameter.Identifier} = default;";
    statements = statements.Insert(0, SyntaxFactory.ParseStatement(varStatement).WithAdditionalAnnotation(Formatter.Annotation)); // expecting WithAdditionalAnnotation to help here :(
}

var newMethod = method.WithBody((method.Body.WithStatements(statements))
// codes excluded
```

**Expected Behavior**:

"New codes expected" section above.

**Actual Behavior**:

As shown below, the variable declaration statements were added inline.
```
public async Task&lt;(int, string, bool)&gt; BarAsync(IMoo moo)
{
string sequenceId = default;bool succeeded = default;            await moo.SleepAsync();

    Random rnd = new Random();
    if (rnd.Next(100) % 2 == 0)
    {
        sequenceId = string.Empty;
        succeeded = false;
        return (0, sequenceId, succeeded);
    }
    else
    {
        sequenceId = "test";
        succeeded = true;
        return (1, sequenceId, succeeded);
    }
}
```</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34047</IssueID>
    <RepoID>1</RepoID>
    <Title>`SetRemoteHostBitness()` uses invalid feature flag</Title>
    <Description>https://github.com/dotnet/roslyn/blob/bd1e0c6cb23e552d390c1b3c14cdb6ec8434883e/src/VisualStudio/Core/Def/Implementation/Remote/RemoteHostClientServiceFactory.RemoteHostClientService.cs#L166-L167

This api requires a `word.word` feature flag, which we are not providing. This causes an exception that is silently swallowed by our experimentation service wrapper, and causes a resources dll load in RPS.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34046</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable walker: Simplify the "set of slots to set non-null"</Title>
    <Description>The nullable walker has a method to compute the set of slots to set to non-null.  It fills the data into an array builder.

We could instead return just the innermost slot and let the caller walk up to the enclosing slots.  Then we'd be returning just an `int` instead of an array builder full of data.

I think the code would be simpler and much more efficient.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34045</IssueID>
    <RepoID>1</RepoID>
    <Title>add "." check in feature name to make RPS happy</Title>
    <Description>new VS feature flag service requires "." in feature name. and we call the service with feature name without dot we use for a/b and other flight. so feature flag service throws and we move to VS experimentation service to ask about the flight.

all good except the exception cause a resource file to be loaded and RPS is not happy about the resource file. so, added a check to not call VS feature flag service if flight name doesn't include "."

"." being the first char is invalid, so it check whether dot is at least not first char, but we don't do any expensive check since we control flight name.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34044</IssueID>
    <RepoID>1</RepoID>
    <Title> Merge 'dotnet/master' into DefaultInterfaceImplementation</Title>
    <Description>
    </Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34043</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0042 Variable declaration can be deconstructed invalid fix</Title>
    <Description>**Version Used**: 
VS2019 RC1, but it happens in current 2017 too. 

**Code to Reproduce**:

    var item = contextcache.GetOrAdd((filename, forcealpha, alphacolor, alphacolorrange), key =&gt;
                (File.Exists(filename) ? new GLTexture(filename, forcealpha, alphacolor, alphacolorrange) : null, DateTime.Now));
    item.LastAccessedAt = DateTime.Now;

Applying the fix, the code gets changed to the following:

    var (Texture, LastAccessedAt) = contextcache.GetOrAdd((filename, forcealpha, alphacolor, alphacolorrange), key =&gt;
        (File.Exists(filename) ? new GLTexture(filename, forcealpha, alphacolor, alphacolorrange) : null, DateTime.Now));
    LastAccessedAt = DateTime.Now;

That is absolutely not equivalent code, because what was before a field update (`LastAccessedAt`) is now a no-op. 
</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34042</IssueID>
    <RepoID>1</RepoID>
    <Title>Update AnalyzerRunner launch settings</Title>
    <Description>Updates to use the new artifacts build path.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34041</IssueID>
    <RepoID>1</RepoID>
    <Title>Offer add parameter to constructor refactoring for all applicable constructors</Title>
    <Description>Fixes #33603
Fixes #33623 

When one or more members are selected, user can Ctrl+. to add them as parameters to any applicable parameter.  If more that one constructor is applicable, suggested actions will be nested under 2 menu items, "Add parameter to constructor" and "Add optional parameter to constructor"

In addition, this PR ensures parameters will not be offered for deserialization constructors.

![image](https://user-images.githubusercontent.com/25776963/54960159-c5ed8d80-4f18-11e9-8316-f69c8b31a4c1.png)
</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34039</IssueID>
    <RepoID>1</RepoID>
    <Title>Bad name for SyntaxGenerator.AssignmentStatement()</Title>
    <Description>**Version Used**: 
[CSharpSyntaxGenerator.cs](https://github.com/dotnet/roslyn/blob/fab7134296816fc80019c60b0f5bef7400cf23ea/src/Workspaces/CSharp/Portable/CodeGeneration/CSharpSyntaxGenerator.cs)
**Steps to Reproduce**:

```csharp
_generator.MethodDeclaration(
    ...
    statements: new[] {
        _generator.AssignmentStatement(...)
    }
);
```

**Expected Behavior**:
```csharp
public override SyntaxNode AssignmentStatement(SyntaxNode left, SyntaxNode right)
            =&gt; SyntaxFactory.ExpressionStatement(SyntaxFactory.AssignmentExpression(SyntaxKind.SimpleAssignmentExpression, (ExpressionSyntax)left, Parenthesize(right)));
```
**Actual Behavior**:
```csharp
public override SyntaxNode AssignmentStatement(SyntaxNode left, SyntaxNode right)
            =&gt; SyntaxFactory.AssignmentExpression(SyntaxKind.SimpleAssignmentExpression, (ExpressionSyntax)left, Parenthesize(right));
```
</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34038</IssueID>
    <RepoID>1</RepoID>
    <Title>Change verification default based on framework</Title>
    <Description>This changes our core compiler helpers to default verification off of
the target framework and references. This should remove some confusion
about verification in the test suites and make it more correct by
default.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34037</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract called method information using roslyn</Title>
    <Description>**Version Used**: 
Latest
**Steps to Reproduce**:

I need to get information about a method call into a DLL using Roslyn. For example, I have the following method where dllObject is part of a DLL file.

```
 public void MyMethod()
 {
     dllObject.GetMethod();
 }
```
Is it possible to extract the method information for GetMethod such as it¬¥s name, class name and assembly name.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34036</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34035</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34034</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34033</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34032</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34031</IssueID>
    <RepoID>1</RepoID>
    <Title>SemanticModel.GetDeclaredSymbol(DiscardDesignationSyntax) returns null</Title>
    <Description>```cs
void M(string text)
{
    int.TryParse(text, out var _);
    int.TryParse(text, out var temp);
    int.TryParse(text, out _);
}
```

```cs
semanticModel.GetDeclaredSymbol(syntaxTree.Find&lt;DiscardDesignationSyntax&gt;("var _")) // returns null
semanticModel.GetDeclaredSymbol(syntaxTree.Find&lt;VariableDesignationSyntax&gt;("var temp")) // returns `ILocalSymbol`
semanticModel.GetSymbolInfo(syntaxTree.Find&lt;ArgumentSyntax&gt;("out _").Expression).Symbol // returns `IDiscardSymbol`
```

Should `GetDeclaredSymbol` for the `DiscardDesignationSyntax` return `IDiscardSymbol`? </Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34030</IssueID>
    <RepoID>1</RepoID>
    <Title>publish RoslynDeployment vsix to Roslyn vsix myget feed</Title>
    <Description>publish RoslynDeployment vsix to myget feed.

we used to publish roslyn insider vsix but at some point when we changed name, it looks like we stopped publishing the actual vsix people can use to dogfood nightly roslyn.

</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34029</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullable state through implicit and explicit reference and tuple conversions</Title>
    <Description>Fixes #29977.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34028</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE benchmarks</Title>
    <Description>Here's the results from RegexClassifierBanchmarks:

|               Method | StringLength | RepeatElement |      Mean |     Error |    StdDev |    Median | Scaled | ScaledSD |     Gen 0 |  Allocated |
|--------------------- |------------- |-------------- |----------:|----------:|----------:|----------:|-------:|---------:|----------:|-----------:|
|     'String literal' |            0 |             \ |  4.615 ms | 0.1496 ms | 0.4388 ms |  4.737 ms |   1.00 |     0.00 |         - |     616 KB |
| 'Regular expression' |            0 |             \ |  7.236 ms | 0.4300 ms | 1.2680 ms |  6.437 ms |   1.58 |     0.32 | 1000.0000 |   832.1 KB |
|                      |              |               |           |           |           |           |        |          |           |            |
|     'String literal' |            0 |             a |  4.712 ms | 0.1480 ms | 0.4248 ms |  4.765 ms |   1.00 |     0.00 |         - |     608 KB |
| 'Regular expression' |            0 |             a |  7.990 ms | 0.4173 ms | 1.2304 ms |  7.274 ms |   1.71 |     0.31 | 1000.0000 |  832.54 KB |
|                      |              |               |           |           |           |           |        |          |           |            |
|     'String literal' |         1000 |             \ |  6.815 ms | 0.3909 ms | 1.1526 ms |  6.133 ms |   1.00 |     0.00 | 1000.0000 |  835.71 KB |
| 'Regular expression' |         1000 |             \ | 10.973 ms | 0.7669 ms | 2.2613 ms | 10.601 ms |   1.65 |     0.43 | 1000.0000 | 1139.77 KB |
|                      |              |               |           |           |           |           |        |          |           |            |
|     'String literal' |         1000 |             a |  4.503 ms | 0.1523 ms | 0.4466 ms |  4.280 ms |   1.00 |     0.00 |         - |  668.02 KB |
| 'Regular expression' |         1000 |             a |  8.417 ms | 0.5412 ms | 1.5957 ms |  7.455 ms |   1.89 |     0.40 | 1000.0000 |  988.09 KB |
|                      |              |               |           |           |           |           |        |          |           |            |
|     'String literal' |        10000 |             \ |  7.561 ms | 0.1443 ms | 0.1350 ms |  7.538 ms |   1.00 |     0.00 | 1000.0000 | 3165.84 KB |
| 'Regular expression' |        10000 |             \ | 30.495 ms | 1.1173 ms | 3.1330 ms | 29.072 ms |   4.03 |     0.42 | 1000.0000 | 4413.26 KB |
|                      |              |               |           |           |           |           |        |          |           |            |
|     'String literal' |        10000 |             a |  7.767 ms | 0.3726 ms | 1.0985 ms |  7.022 ms |   1.00 |     0.00 | 1000.0000 | 1196.38 KB |
| 'Regular expression' |        10000 |             a | 19.597 ms | 1.3913 ms | 4.1021 ms | 16.807 ms |   2.57 |     0.65 | 1000.0000 | 2524.56 KB |</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34027</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC manager replacement</Title>
    <Description>Replaces legacy EnC manager implementation with a new one.

The previous implementation of the EnC manager in the debugger communicated with language services via project system coupled interfaces (`IVsENCRebuildableProjectCfg*`). This had many limitations, including necessity to perform IO synchronously on UI thread, lack of support for multi-targeting, necessity to make buffers readonly while application is running and for projects whose modules were not loaded to the debugee process etc.

The new architecture completely removes the dependency on Project System. The debugger communicates with language services via a MEF component. Language services export
1) `IDebugStateChangeListener` 
The implementation of this interface receives callbacks from the debugger when the debug state changes:

```C#
        void EnterBreakState(BreakStateKind kind);
        void ExitBreakState();
        void StartDebugging();
        void StopDebugging();
```

2) `IEditAndContinueManagedModuleUpdateProvider`

The implementation responds to the debugger's requests for updates in managed modules. 
The debugger sends these requests when changes made in source files need to be applied due to a user action (e.g. "continue" in break mode, change current IP while in break mode, etc.).

### Avoiding read-only buffers ###
Previously we made buffers read only in scenarios where we couldn't apply the change at the end of the current edit session ("continue"). This could be for multiple reasons:

1) Changing source files while the application is running
Changes can only be applied when the debuggee is stopped. 

We let the user made changes while the debuggee is running. We report a warning for these changes notifying the user that the changes are not being applied while the debugee is running. 

When the debugger stops on a breakpoint in a modified source, the source won't match the one that's being executed so based on the settings the debugger may display a dialog saying so. We will follow up to improve that experience, but not going to block the change on it.

2) Changing source files of projects during edit session whose corresponding module is not loaded to the debugee
Since the modules are not loaded we can't apply the delta at the end of the edit session (there is no module in the debugee process to apply the delta to).

We calculate the EnC deltas for all projects changed during edit session regardless of whether their modules are loaded or not. At the end of the session we apply deltas only to modules that are loaded, but we remember all the deltas we calculated for next opportunity to apply changes. Such opportunity occurs when a module is loaded while the debuggee is running. At that point the debuggee is stopped while the even is processed and we can apply all deltas that were made to the project that corresponds to the module. Note that this also handles the case where multiple instances of the same module are loaded to the debuggee (e.g. to different AppDomains or AssemblyLoadContexts). The previous design didn't account for this scenario resulting in bugs like https://github.com/dotnet/roslyn/issues/34253.

3) Other reasons that disallow EnC (e.g. being stopped at exception, the debuggee process not supporting EnC, etc.).

We do not block the user from making changes in the source files. Instead we report regular errors like we do for other Rude Edits. We use new APIs added to Concord to support querying for availability of EnC for specific module.

Fixes https://github.com/dotnet/roslyn/issues/10203.
Fixes https://github.com/dotnet/roslyn/issues/11656.
Fixes https://github.com/dotnet/roslyn/issues/18917.
Fixes https://github.com/dotnet/roslyn/issues/21170.
Fixes https://github.com/dotnet/roslyn/issues/27373.
Fixes https://github.com/dotnet/roslyn/issues/27735.
Fixes https://github.com/dotnet/roslyn/issues/29223.
Fixes https://github.com/dotnet/roslyn/issues/34253.
Fixes [DevDiv 750649](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/750649)
Fixes [DevDiv 551604](https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/551604)

See also https://github.com/dotnet/roslyn/issues/18350.
</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>30/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34026</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix local bootstrap build</Title>
    <Description>Have to disable quiet restore explicitly on local dev machines when
doing a bootstrap build to work around this arcade issue:
https://github.com/dotnet/arcade/issues/2220</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34025</IssueID>
    <RepoID>1</RepoID>
    <Title>Validate completion for !. in C# 8.0</Title>
    <Description>Please let me know if you see more test scenarios for the change.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34024</IssueID>
    <RepoID>1</RepoID>
    <Title>VS SDK update</Title>
    <Description>New bits recommended by the Editor team. Corresponding to 16.0 RC</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34023</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34022</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly members warnings and semantic errors</Title>
    <Description>- Give errors for common mutable usages of 'this' in readonly methods.
  - Field assignment
  - Non-readonly property setters
  - Passing by 'ref'
- Warn on new scenarios where an implicit copy is possible
  - Invoking a non-readonly instance member on 'this' from a readonly member</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34021</IssueID>
    <RepoID>1</RepoID>
    <Title>The default label is considered reachable in a traditional switch statement</Title>
    <Description>This fixes a compatibility bug (the new compiler complains about unreachable code, but if you remove it the old compiler complains about a switch fall-through).

Fixes #33783</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34020</IssueID>
    <RepoID>1</RepoID>
    <Title>The 'dotnet build' command hangs when building a specific code</Title>
    <Description>@pavelovcharov commented on [Thu Mar 07 2019](https://github.com/dotnet/cli/issues/10942)

The following code will cause the `dotnet build` command to hang:
```
 class ListItem {
            public ListItem Prev { get; set; }
            public ListItem Next { get; set; }
        }
        void ArrangeNonOverlapping(IList&lt;ListItem&gt; labels) {
            List&lt;ListItem&gt; actualLabels = new List&lt;ListItem&gt;(labels);
            ListItem prev = null;
            ListItem next = null;
            for (int i = 0; i &lt; labels.Count; i++) {
                ListItem label = actualLabels[i];
                label.Prev = prev;
                label.Next = next;
                if (prev != null)
                    prev.Next = label;
                if (next != null)
                    next.Prev = label;
            }
        }
```
There is no issue when this code is built within Visual Studio

## Steps to reproduce
I have prepared a small sample to demonstrate the issue: https://github.com/pavelovcharov/netcore3_dotnetbuildhangs

1) git clone https://github.com/pavelovcharov/netcore3_dotnetbuildhangs
2) cd netcore3_dotnetbuildhangs
2) dotnet build

## Expected  behavior
The ```dotnet  build``` command successfully builds the project

## Actual behavior
The ```dotnet  build``` command hangs

## Environment data
.NET Core SDK (reflecting any global.json):
 Version:   3.0.100-preview4-010591
 Commit:    6cb32d53bc

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.17763
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.0.100-preview4-010591\

Host (useful for support):
  Version: 3.0.0-preview4-27503-9
  Commit:  04c13d860a

.NET Core SDKs installed:
  2.1.500 [C:\Program Files\dotnet\sdk]
  2.1.600-preview-009426 [C:\Program Files\dotnet\sdk]
  2.1.600-preview-009472 [C:\Program Files\dotnet\sdk]
  2.1.600-preview-009497 [C:\Program Files\dotnet\sdk]
  2.1.600 [C:\Program Files\dotnet\sdk]
  3.0.100-preview-010124 [C:\Program Files\dotnet\sdk]
  3.0.100-preview4-010591 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.8 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.8 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.0.0-preview-19067-0383 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.0.0-preview4-19153-01 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.1.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.8 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.0.0-preview-27316-4 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.0.0-preview4-27503-9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.0.0-preview-27316-2 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 3.0.0-preview4-27501-41 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download








---

@livarcocc commented on [Mon Mar 11 2019](https://github.com/dotnet/cli/issues/10942#issuecomment-471779151)

This is actually hanging on Roslyn in the VBCSCompiler. Saw that through Process Explorer. Moving this issue there.

</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>01/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34019</IssueID>
    <RepoID>1</RepoID>
    <Title>Ahead code execution error during debug</Title>
    <Description>**Version Used**: VS Enterprise 2017 with March 2019 update

**Steps to Reproduce**:
This is hard to explain. Here's the video with my steps: [Youtube](https://youtu.be/oEkkzwy3hX4)
1. I enabled a bunch of debug breakpoints. Further down in the code I have a function that sets the "registers" to "Taken" one by one.
2. I jump one step (command) at a time or more, each time the code ahead is for some reason executed, taking the "register".
3. When I disable the breakpoints, everything works fine.

**Expected Behavior**:
I am able to debug my code without any issues.
**Actual Behavior**:
The debugger executes code ahead, ruining my program.</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34018</IssueID>
    <RepoID>1</RepoID>
    <Title>Inferred nullable flow state from a finally block</Title>
    <Description>I don't think our current inference design interacts with finally blocks well:
``` c#
C? c = null;
try
{
    c = SomeNonNullComputation;
}
finally
{
    if (c != null) c.Cleanup();
}
c.Operation(); // undeserved warning
```
We infer from `c != null` that `c` might be null.  That inference leaks out to the enclosing construct.  The result is a warning when `c` is used after the try-finally statement.  This will be a common pain point.

I don't think indirect inferences from inside a `finally` block should leak out to the enclosing context.  An inference from an actual assignment in the `finally` block should indeed leak out, though.
</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34017</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability Rewriter Step</Title>
    <Description>This adds an initial implementation of the NullableWalker part of
rewriting the bound tree with nullability information, and hooks up the
rewriter to this. It additionally adds a debug verifier for the
NullableWalker that will verify that we're actually visiting and
recording results for all BoundExpression nodes in the tree. Some tests
are currently skipped where this does not hold true to allow the review
cycle to start while work continues.

Additionally, the VerifyTypes compilation helper is hooked up to this
rewritten information as a basic smoke test of the information being
produced by the rewriter.

For this PR, I'm most concerned about the general approach of getting
the information from the NullableWalker. If you have specific concerns
about some of the information from the walker being incorrect, please
note it and I'll put a prototype comment to follow up and add a test
to verify the behavior, but I'm not going to correct individual
scenarios in this PR.

To make this PR reviewable, I've separated the changes into 3 commits, and
I suggest going commit by commit. Commit 1 is the public API rename from
Nullability to NullableAnnotation and NullableFlowState. Commit 2 is
separating the public version of NullableAnnotation from the private
version, as that affects what we emit in the Nullable attribute and
we don't want to have a concept of default in that code path. Commit 3
adds the rewriting logic to the NullableWalker and skips some tests
that are currently not passing. There is some bleed-over of the rename
in NullableReferenceTypeTests.cs as I did not reorganize the commit
line-by-line in that file. I was going to clean up the locations
of NullableAnnotation/NullableFlowState in this PR, but no matter what
I do I'm going to have some conflicts with Neal's change so I'll fix
those up after this is merged.</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34016</IssueID>
    <RepoID>1</RepoID>
    <Title> Bind T? in cref as Nullable&lt;T&gt;</Title>
    <Description>## Customer scenario
In 16.0, the binding of `T?` in a cref such as `&lt;see cref="M{T}(T?)"/&gt;` regressed. 
This should compile without warning and bind to `M(Nullable&lt;T&gt;)`, but instead produces a warning "CS1580	Invalid type for parameter T? in XML comment cref attribute".

## Bugs this fixes
Fixes https://github.com/dotnet/roslyn/issues/33782

## Workarounds, if any
None

## Risk, Performance impact
Low. We're making sure that `T?` always binds to `Nullable&lt;T&gt;` in crefs.

## Is this a regression from a previous update?
Yes.

## Root cause analysis
The binding of a `T?` changed due to the nullable feature. 
In common usage (outside of a cref), it can now bind to `Nullable&lt;T&gt;` in some cases, or to an annotated `T` in some others (producing an error for unconstrained type parameters).
But crefs don't include constraints, so this binding change caused `T?` in a cref to bind as an annotated `T` with a unconstrainted `T` (that's an error). The error presented with a specific message for crefs...


## How was the bug found?
Reported by customer.

----

Note: from discussion with Chuck, this fix is correct for the long-term as well. If you want a cref to reference a method with an annotated `T`, you should just use `T`. If you want a cref to reference a method with a `Nullable&lt;T&gt;`, you should use `T?` (as before). We're not planning to extend cref to represent nullable reference type annotations.

Filled https://devdiv.visualstudio.com/DevDiv/_workitems/edit/817666/ for ask-mode approval.</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34015</IssueID>
    <RepoID>1</RepoID>
    <Title>Tuple nullable suppression</Title>
    <Description>Adds regression tests for a variety of scenarios involving tuples and the suppression operator (`!`),
including tuple deconstruction, tuple assignment, and tuple equality.
</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34014</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable state is not updated for receiver if conditional access expression is a method call</Title>
    <Description>A warning is reported for `c.F().ToString()`:
```C#
#nullable enable

class C
{
    internal object? F() =&gt; null;
}

class Program
{
    static void F(C? c)
    {
        if (c?.F() != null)
            c.F().ToString(); // warning: may be null
    }
}
```</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34012</IssueID>
    <RepoID>1</RepoID>
    <Title>Support protected access for declarations in interfaces</Title>
    <Description>
    </Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34011</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider removing IDocumentOperationsService.CanApplyChange</Title>
    <Description>&gt; dumb question.  why do we need this guy?  it even says you should be able to ask `"Workspace.CanApplyChange(ApplyChangesKind)"`

_Originally posted by @CyrusNajmabadi in https://github.com/dotnet/roslyn/pull/34009#discussion_r264343085_</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34010</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to MSBuild 16.0</Title>
    <Description>This is a necessary pre-req to us adotping the 3.0 .NET Core SDK.

As a part of this we're also merging dev16.0-vs-deps as it's necessary to keep integration tests running. Also it's the logical step once Dev16 becomes our base development environment.</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34009</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove IDocumentOperationService.SupportsDiagnostics</Title>
    <Description>All documents can support diagnostics; this property is unnecessary.</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34008</IssueID>
    <RepoID>1</RepoID>
    <Title>Code Formatting option to enforce using directive inside a namespace</Title>
    <Description>Apologies if I missed this. I did my best to search through issues.

Both Resharper and StyleCop had formatting rules where they could enforce using directives to be placed inside the namespace.

At the moment Visual Studio lets me place using directives inside the namespace and it works fine with them when refactoring but it does not let me *enforce* that all using directive *should* be inside a namespace.
</Description>
    <CreatedDate>11/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34007</IssueID>
    <RepoID>1</RepoID>
    <Title>Expedite delayed operations when tests are waiting</Title>
    <Description>Saves about 20 minutes off our longest test legs.</Description>
    <CreatedDate>10/03/2019</CreatedDate>
    <ClosedDate>23/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34006</IssueID>
    <RepoID>1</RepoID>
    <Title>Add Indent to format multi-line strings</Title>
    <Description>when we right multi-line string, it looks like this:
```C#
            var code = @"
public class MyClass
{
    public void MyMethod()
    { 
    }
}";
```

we can't add spaces in each line to format the string, because they will be added to the string itself, 
Can VS editor add some auto indent to multi-line strings, so it is not considered as spaces (indent in word is not a white space)?
I can workaround this using something like:
```C#
            var code = @"
___________________public class MyClass
___________________{
___________________    public void MyMethod()
___________________   {
___________________   }
___________________}"
                .Replace("___________________", "");
```

but it still looks ugly!

</Description>
    <CreatedDate>10/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34005</IssueID>
    <RepoID>1</RepoID>
    <Title>Parse a pointer to an array correctly.</Title>
    <Description>See #33482</Description>
    <CreatedDate>10/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34004</IssueID>
    <RepoID>1</RepoID>
    <Title>Warn on locking null</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/26810</Description>
    <CreatedDate>10/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34003</IssueID>
    <RepoID>1</RepoID>
    <Title>Use Arcade x-plat resx generator</Title>
    <Description>
    </Description>
    <CreatedDate>10/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34002</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove Roslyn.VisualStudio.InteractiveComponents.vsix</Title>
    <Description>We generate this VSIX only to override previously installed versions.
Once we move to newer VS drop (16.1) that doesn't have this VSIX installed we can disable generating VSIX container for this project.
</Description>
    <CreatedDate>10/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34001</IssueID>
    <RepoID>1</RepoID>
    <Title>No blank line indentation</Title>
    <Description>Followup to https://github.com/dotnet/roslyn/pull/33989.  That PR shoudl be reviewed and merged first.

This gets rid of the separate IBlankLineIndentation concept now that we can have a single service that just does the right thing in all cases.</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>34000</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 when the parameters are needed due to other overloads</Title>
    <Description>**Version Used**: VS2019 RC.1 SVC1

Can Roslyn do anything to help this situation, maybe bail if it detects that there are other overloads following the same pattern?

```cs
class Foo
{
    public Foo Reduce(SaveClickedAction action)
    {
        // Some of these methods use `action`, others don't.
        // ...
    }

    public Foo Reduce(FinishClickedAction action)
    {
        // ...
    }

    public Foo Reduce(SaveCompletedAction action)
    {
        // ...
    }

    public Foo Reduce(SaveErroredAction action)
    {
        // ...
    }
}
```
</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33999</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 when the parameter is needed due to conditional compilation</Title>
    <Description>**Version Used**: VS2019 RC.1 SVC1

Can Roslyn do anything to help this situation, maybe bail if it detects that the method declaration is conditional?

```cs
public static class FeatureToggle
{
    public static bool Foo { get; } = IsFeatureEnabled(nameof(Foo));
    public static bool Bar { get; } = IsFeatureEnabled(nameof(Bar));
    // ...

#if DEBUG
    // IDE0060 Remove unused parameter
    private static bool IsFeatureEnabled(string featureId) =&gt; true;
#else
    private static string[] enabledFeatureIds;

    private static bool IsFeatureEnabled(string featureId)
    {
        if (enabledFeatureIds == null)
        {
            enabledFeatureIds = (string[])ConfigurationManager.GetSection("features") ?? Array.Empty&lt;string&gt;();
        }

        return enabledFeatureIds.Contains(featureId, StringComparer.OrdinalIgnoreCase);
    }
#endif
}
```
</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33998</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow empty tuples</Title>
    <Description>In current C# version if you try to create an empty tuple you will get "Tuple must contain at least two elements" error. But it's useful, especially when you are working with generic type `T` and don't care about result. For example, we want to create `TaskCompletionSource`, but we don't care about its result, we only care when it's ran to execution. So `var tcs = new TaskCompletionSource&lt;()&gt;();` could fit ideally, except C# compiler doesn't allow it.

#### Existing workarounds:

Use some small type and ignore it, e.g. `var tcs = new TaskCompletionSource&lt;bool&gt;();`

Pros: already exist in the language
Cons: is not really ideomatic, introduce usable variable that actually has no sense.</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>09/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33997</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix result and slot of conditional receiver</Title>
    <Description>As the `Dump()` for a conditional access (excerpted below) shows, the call or member access uses a placeholder ("conditional receiver") in place of the actual receiver.

There are two parts of this PR:
- we ensure that visiting a conditional receiver produces the correct result type,
- we ensure that asking for a slot for a conditional receiver produces the correct slot.

To do that, we store some information (the result and the slot) about the real receiver when we visit a conditional access. 

- Fixes https://github.com/dotnet/roslyn/issues/33289 (fails to apply inferred type arguments' nullability after `?.` access)
- Fixes https://github.com/dotnet/roslyn/issues/31909 (Dereference doesn't update null state if there's an unrelated conditional qualifier)
- Fixes https://github.com/dotnet/roslyn/issues/33347 (Variables known to be non-null sometimes artifically restricted to one variable)
- Fixes https://github.com/dotnet/roslyn/issues/31905 (Nullable flow analysis works incorrectly with nested conditional accesses)
- Fixes https://github.com/dotnet/roslyn/issues/29956 (PROTOTYPE markers in VisitConditionalAccess and VisitConditionalReceiver)

```
conditionalAccess
    ‚îú‚îÄreceiver
    ‚îÇ ‚îî‚îÄlocal
    ‚îÇ   ‚îú‚îÄlocalSymbol: Container&lt;System.String&gt; x
    ‚îÇ   ‚îú‚îÄtype: Container&lt;System.String&gt;
    ‚îÇ   ‚îî‚îÄisSuppressed: False
    ‚îú‚îÄaccessExpression
    ‚îÇ ‚îî‚îÄcall
    ‚îÇ   ‚îú‚îÄreceiverOpt
    ‚îÇ   ‚îÇ ‚îî‚îÄfieldAccess
    ‚îÇ   ‚îÇ   ‚îú‚îÄreceiverOpt
    ‚îÇ   ‚îÇ   ‚îÇ ‚îî‚îÄconditionalReceiver
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄid: 0
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄtype: Container&lt;System.String&gt;
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄisSuppressed: False
    ‚îÇ   ‚îÇ   ‚îú‚îÄfieldSymbol: System.String Container&lt;System.String&gt;.Field
    ‚îÇ   ‚îÇ   ‚îî‚îÄisSuppressed: False
    ‚îÇ   ‚îú‚îÄmethod: System.String System.String.ToString()
    ‚îÇ   ‚îú‚îÄtype: System.String
    ‚îÇ   ‚îî‚îÄisSuppressed: False
    ‚îú‚îÄtype: System.String
    ‚îî‚îÄisSuppressed: False
```</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33996</IssueID>
    <RepoID>1</RepoID>
    <Title>'IDE0060 Remove unused parameter' for method that implements interface in derived class</Title>
    <Description>**Version Used**: VS2019 RC.1 SVC1

```cs
public abstract class Foo
{
    // IDE0060 Remove unused parameter
    public Task BarAsync(CancellationToken cancellationToken) =&gt; Task.CompletedTask;
}

public interface ISpecializedFoo&lt;T&gt;
{
    Task BarAsync(CancellationToken cancellationToken);
    // ...
}

public sealed class SpecializedFoo&lt;T&gt; : Foo, ISpecializedFoo&lt;T&gt;
{
}
```

Elsewhere, `ISpecializedFoo&lt;&gt;.BarAsync` is called and some impls (not based on `Foo`) do use the cancellation token. The parameter is still needed on `Foo.BarAsync` in order for `SpecializedFoo&lt;&gt;` to implement the interface.
</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33995</IssueID>
    <RepoID>1</RepoID>
    <Title>Wrong line is highlighted as a bug!</Title>
    <Description>**Version Used**: 
VS.NET 2017 and VS.NET 2019 preview 4

**Steps to Reproduce**:

1. Create a C# console app (.net core)
2. write this code in Main:
```C#
            object o = 1;
            var a = (int)o; // OK`
            var c = (long?)o;

            Console.WriteLine("test");
```
3. run the app

**Expected Behavior**:
A bug in the line `var c = (long?)o;`

**Actual Behavior**:
The bug is reported at the line  `Console.WriteLine("test");`

![15](https://user-images.githubusercontent.com/48354902/54076805-2f826080-42b8-11e9-82e8-13eabc185d50.jpg)

Note that this doesn't happen if you change the line `var c = (long?)o;` to `var c = (long)o;`. It seems some how related to the nullable `long?`

![16](https://user-images.githubusercontent.com/48354902/54076827-62c4ef80-42b8-11e9-9713-d3387eea8c0b.jpg)
</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33994</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0052 incorrectly suggested for entire property when only getter is never used</Title>
    <Description>**Version Used**: VS2019 RC.1 SVC1

The code evolved to a place where the getter was no longer used, but because I don't like set-only properties, I left it. Now Roslyn suggests removing the entire property, but this is misleading because the side effects of the setter are semantically quite important:

```cs
public class Foo
{
    private IBindingList source;

    public void Bar(object thing)
    {
        Source = thing as IBindingList;
    }

    // IDE0052 Private member 'Foo.Source' can be removed as the value assigned to it is never read.
    private IBindingList Source
    {
        get =&gt; source;
        set
        {
            if (source == value) return;

            if (source != null)
                source.ListChanged -= Source_ListChanged;

            source = value;

            if (source != null)
                source.ListChanged += Source_ListChanged;
        }
    }

    private void Source_ListChanged(object sender, ListChangedEventArgs e)
    {
        // Important stuff
    }
}
```

It should not report IDE0052 on the whole property. If anything, it should be reported on just the getter with a fix to remove the getter or to replace the property with a `SetSource(IBindingList)` method.</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33993</IssueID>
    <RepoID>1</RepoID>
    <Title>Update CoreFX dependencies</Title>
    <Description>StreamJsonRpc requires the higher versions of these packages.

Removes hard-coded list of suggested binding redirects and replaces it with a generated list.</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33992</IssueID>
    <RepoID>1</RepoID>
    <Title>'IDE0031 Use null propagation' incorrectly suggested for LINQ expression</Title>
    <Description>**Version Used**: VS 2019 RC.1 SVC1

Seems to be a repeat of https://github.com/dotnet/roslyn/issues/17623 but when using LINQ syntax.

```cs
_ = from item in new[] { new { X = (int?)1 } }.AsQueryable()
    //     ‚Üì IDE0031 Use null propagation
    select item == null ? null : item.X;

_ = from item in Enumerable.Empty&lt;(int? x, int? y)?&gt;().AsQueryable()
    //     ‚Üì IDE0031 Use null propagation
    select item == null ? null : item.Value.x;
```

After applying suggested fix:

```cs
_ = from item in new[] { new { X = (int?)1 } }.AsQueryable()
    //     ‚Üì CS8072 An expression tree lambda may not contain a null propagating operator.
    select item?.X;

_ = from item in Enumerable.Empty&lt;(int? x, int? y)?&gt;().AsQueryable()
    //     ‚Üì CS8072 An expression tree lambda may not contain a null propagating operator.
    select item?.x;
```

</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33991</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19159.2

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.2

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19161.14

</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33990</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>09/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33989</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge all indentation related code into one service.</Title>
    <Description>Followup to 
https://github.com/dotnet/roslyn/pull/33978 and
https://github.com/dotnet/roslyn/pull/33983

This removes the strange and complex split we had between SmartIndent and SmartTokenCommandHandler.  For some reason, we had *two* entirely different integration points into VS to handle where we should indent to when 'enter' is hit.  This added a lot of complexity and made it very difficult to understand what was going on.

Furthermore, this split meant that no actual features could ask the simply question: "where should new code on this line be indented to?".  

Now, all logic is handled by the IIndentationService.  The internal implementation of IIndentationService is still a bit complex in that it has two separate codepaths for 'indentation' versus 'token indentation'.  However, at least it's all in one place now instead of being scattered all over the place.</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>02/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33988</IssueID>
    <RepoID>1</RepoID>
    <Title>Write the targets files into the correct directory for VS2019</Title>
    <Description>Starting in MSBuild that ships in Visual Studio 2019, the folder to put targets in is just called "Current" to avoid having to revise it for every major version.

This means the compiler extension has some chance of actually working.</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33987</IssueID>
    <RepoID>1</RepoID>
    <Title>Pass NoBuild=true to Publish step</Title>
    <Description>
    </Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>09/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33986</IssueID>
    <RepoID>1</RepoID>
    <Title>Add the correct nullable annotations to generated iterator code</Title>
    <Description>This is mainly about plumbing through `TypeSymbolWithAnnotations` to the correct point so we can generate the attribute based on it's value.

- Expose the `IteratorElementType` as a `TypeSymbolWithAnnotations`
- Return the annotated type, or a default as needed from the required locations
- Allow state machine field to take a TSWA and pass it in via the iterator rewriter
- Fix test

Fixes #30010</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33985</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix stack overflow compiling deeply nested generic</Title>
    <Description>As a part of implementing nullable reference types many of our locals
switched from `TypeSymbol` to `TypeSymbolWithAnnotations`. In the vast
majority of cases this doesn't have a meaningful impact on compilation.
They are bigger (about 3X) but it's still a relatively small `struct`
(three words).

The size difference is significant though in
`BindNamespaceOrTypeOrAliasSymbol`. This method is used in recursive
parts of binding and is mutually recursive with `BindQualifiedNam`. This
method defines a large number of locals which contribute to every layer
of recursion. When they moved to `TypeSymbolWithAnnotations` this pushed
us outside our tolerance levels and we hit an overflow in extreme cases.

Virtually none of these locals are used in the recursive case. Factored
their use into local functions so we only pay the stack usage on demand.

closes #33909
fixes https://github.com/dotnet/coreclr/issues/22757</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33984</IssueID>
    <RepoID>1</RepoID>
    <Title>Check nullness of a nullable receiver when invoking base methods.</Title>
    <Description>Bases of Nullable are reference types and thus base methods are called via boxed values which would NRE on nulls.

Fixes:#33174</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33983</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify handling of 'enter' in formatting.</Title>
    <Description>We had a bunch of logic to handle processing "enter" after writing `using (...)`.  The purpose of this was to ensure that if you started with

```c#
using (a)
    using (b)$$
```

And you pressed enter, you'd get:

```c#
using (a)
using (b)
    $$
```

However, this code seems unnecessary and inconsistent.  First, if you type the close-paren manually, you automatically get the expected code format.  Second, we don't do this sort of fixup on enter for anything else.  For example, if you have:

```c#
case x:
    case y:$$
```

We don't align these when you press enter.  Instead, we align when you hit `:`.  So this just makes `using` operate just like our other alignment-on-typing rules.</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33982</IssueID>
    <RepoID>1</RepoID>
    <Title>Mismatched null assignment through a ref variable should be a safety warning</Title>
    <Description>In the following program, there should be two safety warnings as shown.  However, the last line gets only a non-safety warning.

``` c#
#nullable enable

class C
{
    static void M(ref string s1)
    {
        string s2 = string.Empty;
        ref string s3 = ref s1;

        s1 = null; // safety warning
        s2 = null; // non-safety warning
        s3 = null; // safety warning
    }
}
```
</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33981</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33980</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33979</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33978</IssueID>
    <RepoID>1</RepoID>
    <Title>Move indentation services down to Workspace layer.</Title>
    <Description>For reasons that have never been quite clear to me, our indentation services were defined at the EditorFeatures layer (maybe because they thought it was an editor concept?).  This was especially odd as similar features (like Formatting) are defined at the Workspaces layer.

This change simply moves things down to the Workspace layer (while also keeping around and obsoleting the existing editor-interfaces since they are consumed by F#/TS/JS).  

This makes thigns much cleaner, and makes it possible to push other features down (like the wrapping-code-actions).  </Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>28/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33977</IssueID>
    <RepoID>1</RepoID>
    <Title>Summary of Possible Change Signature Enhancements</Title>
    <Description>Work in progress attempt at organizing possible Change Signature enhancements.

- Parameter list
    - Individual Parameters
        - Add Parameter: #33534 
        - Edit Parameter
            - Type**
            - Modifiers*
            - Name* (lower priority)
            - Optional status*
            - `params` status*
- Invocation style
    - Add in-editor Change Signature Tracking (think Rename Tracking but for changes to a method's signature).
- Sets of Parameters
    - Decompose Parameter
    - Combine Parameters
- The method itself
    - Change return type**
        - Move return value to out parameter: https://github.com/dotnet/roslyn/issues/25582
    - Change modifiers: #25094
    - Rename method* (lower priority)

`*` denotes having been discussed by the design team: https://github.com/dotnet/roslyn/issues/25144#issuecomment-467472419
`**` denotes having been discussed as needing more design: https://github.com/dotnet/roslyn/issues/25144#issuecomment-467472419

More Links:
https://github.com/dotnet/roslyn/issues/4510
https://github.com/dotnet/roslyn/issues/21446</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33976</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify some names in the nullable reference types feature</Title>
    <Description>- Rename `TypeSymbolWithAnnotations` to `TypeWithAnnotations`
- Rename its type field from `TypeSymbol` to `Type`
- Fields of Symbols that are of type `TypeWithAnnotations` that are currently named `Type` would be renamed `TypeWithAnnotations`
- Add corresponding properties named `Type` that are of type `TypeSymbol`.
Fixes #33736</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33975</IssueID>
    <RepoID>1</RepoID>
    <Title>Compilation error "csc.dll" exited with code 139 on ARMv7l</Title>
    <Description>@NicolasDorier commented on [Thu Mar 07 2019](https://github.com/dotnet/cli/issues/10950)

## Steps to reproduce

On
```
uname -a
Linux odroid 4.14.5-92 #1 SMP PREEMPT Mon Dec 11 15:48:15 UTC 2017 armv7l armv7l armv7l GNU/Linux
```


```
git clone https://github.com/btcpayserver/btcpayserver
cd btcpayserver/btcpayserver
dotnet build -c Release
```

## Expected  behavior

Build succeed.

## Actual behavior

User reported compilation error "csc.dll" exited with code 134 on ARM.
The msbuild seems show error 139 from csc.dll.

## Environment data

@enorrmann can you provide precise `dotnet --version` here?

He tried with SDK `2.1.504` and `2.2.104` with same error it seems.

![image](https://user-images.githubusercontent.com/3020646/54002883-7dea0f00-4193-11e9-88bd-03c161406535.png)


[msbuild.binlog](https://www.dropbox.com/s/4ic7z1j7qnh72iv/msbuild.binlog?dl=1)

Orignally reported on https://github.com/btcpayserver/btcpayserver/issues/600

It seems same issue as https://github.com/dotnet/roslyn/issues/28038 . I opened a new issue because this one happen on ARM32v7.







</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33974</IssueID>
    <RepoID>1</RepoID>
    <Title>Update to Arcade 1.0.0-beta.19157.23</Title>
    <Description>Includes IBC fixes to generated IBC training input files.</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>09/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33973</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up licensing</Title>
    <Description>
    </Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33972</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable nontrivial constructor should propagate state of the argument to Value.</Title>
    <Description>Nullable nontrivial constructor should propagate state of the argument to Value.

```cs
S? x = &lt;expr of Type S&gt;;  // works already
S? x = new Nullable&lt;S&gt;(&lt;expr of Type S&gt;);  // means the same as above and should work the same.
```

Fixes:#32626</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33971</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve test performance</Title>
    <Description>* Cherry pick #33817 to master
* Rewrite dispatcher bug fix to avoid creating new `Dispatcher` instances for each test (construction of the associated `MediaContext` is time consuming)</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33970</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33969</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33968</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly structs should warn when fields are implicitly copied for member invocation</Title>
    <Description>The following doesn't produce a warning today, but eventually it should in a warning wave. A similar version where `S1.s2` and `S1` are non-readonly but `S1.M1` is readonly using the readonly members feature (see dotnet/csharplang#1710) should produce the same warning.

### Implicit copy for non-readonly method invocation on readonly struct field

```cs
public readonly struct S1
{
    public readonly S2 s2;
    public void M1()
    {
        // warn on implicit local copy
        s2.M2();

        // no warning on explicit copy
        var copy = s2;
        copy.M2();
    }
}

public struct S2
{
    public int i;
    public void M2()
    {
        i = 23;
    }
}
```

### ~~Implicit copy for calls to struct base members~~

In addition, we may want to start warning on invocations of base members on `this` which require an implicit copy. See https://github.com/dotnet/csharplang/issues/1710#issuecomment-468942391

```cs
public readonly struct S
{
    public readonly int i;
    public void M()
    {
        // warn
        this.ToString();
    }
}
```

**Update**: the exact scenario where base members of readonly structs are copied before invocation might require more investigation. [SharpLab](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQFEAeAHJzkCWA9gHYBqUCBUwANigDQwgG0A+AAgMwAESUAE1K0Anj2QwEcAMYweAZQCwAKADeKnpp7c+0ISVE8CJOQQDcGrTo4AWHgFkAFAEpLm9cq1eeAeh88Ad0oSN28YAAsCZAA6ABUieUljAHMXC08tAF8VTKA==) makes it appear that these receivers are simply passed by ref even though the base methods aren't readonly per-se.

### Implicit copy for non-readonly invocation on readonly ref variable
```cs
public struct S
{
    public int i;

    public static void M1(in S s)
    {
        // warn on implicit local copy
        s.M2();

        // explicit copy, no warning
        var copy = s;
        copy.M2();
    }

    void M2()
    {
        i = 23;
    }
}
```

### Add/remove event handlers on readonly value-typed variables

```cs
using System;

public struct S1
{
    public readonly S2 s2;

    public void M()
    {
        // These implicitly copy 's2' before calling
        // the add/remove methods because 's2' is 'readonly'.
        s2.E += Handler;
        s2.E -= Handler;
    }
    
    private void Handler(EventArgs args)
    {
        
    }
}

public struct S2
{
    public event Action&lt;EventArgs&gt; E;
}
```</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33966</IssueID>
    <RepoID>1</RepoID>
    <Title>Offer symbol completion in branch of switch expression</Title>
    <Description>We currently offer completion in `x is $$`, but not in `x switch { $$`. This PR fixes that and also addresses completion in recursive patterns.

Branch in switch expression:
![image](https://user-images.githubusercontent.com/12466233/54014944-156b4580-4133-11e9-8cb4-b5434861d9bd.png)

Positional pattern:
![image](https://user-images.githubusercontent.com/12466233/54014966-274ce880-4133-11e9-8446-f1ad71f66297.png)

Property pattern:
![image](https://user-images.githubusercontent.com/12466233/54014995-3df33f80-4133-11e9-879d-61f1c4335020.png)

Fixes https://github.com/dotnet/roslyn/issues/33915

FYI @gafter </Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33965</IssueID>
    <RepoID>1</RepoID>
    <Title>`System.TypedReference` should be treated as managed</Title>
    <Description>Even once the [corefx issue](https://github.com/dotnet/corefx/issues/35873) (adding a dummy `object` field to the ref assembly for `TypedReference`) is fixed, we're not sure that the compiler will honor it properly. We may have to add a special case to recognize `TypedReference`.

The goal is that `var x = stackalloc TypedReference[10];` should be an error (because `TypedReference` is managed).

More [context](https://github.com/dotnet/roslyn/pull/33951#issuecomment-470778517).</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33964</IssueID>
    <RepoID>1</RepoID>
    <Title>support feature flag service in IExperimentationService</Title>
    <Description>this will let us to create private ring of specific groups for new features until it is ready for bigger group.

once feature is ready for bigger group, this service can support VS experiment flight service which will let us to enable new features for bigger group.

once we are confident on the feature, we will enable it for general public</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33963</IssueID>
    <RepoID>1</RepoID>
    <Title>'Generate constructor' should not add null checks for nullable parameters.</Title>
    <Description>**Version Used**: Visual Studio 2019 RC.1 SVC 1

'Generate constructor' with 'Add null checks' currently generates parameters which are pointlessly nullable, since the constructor throws if `null` is actually passed:

```cs
class C
{
    public C(string foo, int? bar)
    {
        Foo = foo ?? throw new ArgumentNullException(nameof(foo));
        Bar = bar ?? throw new ArgumentNullException(nameof(bar));
    }

    public string Foo { get; }
    public int? Bar { get; }
}
```

I'd expect nullable parameters to be passed over. I don't know what happens when you nullable reference types at it, but right now I really care about the experience with nullable value types.</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33962</IssueID>
    <RepoID>1</RepoID>
    <Title>Track inferred state changes in a finally block</Title>
    <Description>Fixes #33446</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33961</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion is not provided inside curly braces settings if the preceeding text contains 'is'</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/815109</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33960</IssueID>
    <RepoID>1</RepoID>
    <Title>move StreamJsonRpc to 2.x from 1.3.x</Title>
    <Description>time to move to new version. right now, 1.3 and 2.0 versions are mix used in VS and 2.x has breaking changes. so we are trying to move to 2.x so that we can drop 1.3 from VS.

also, 2.0 has some of bug fixes it had before. so removed those workarounds as well.</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33959</IssueID>
    <RepoID>1</RepoID>
    <Title>Issue/33287 generateconstructorfrommembers</Title>
    <Description>
    </Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33958</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to demos/records</Title>
    <Description>
This is an automatically generated pull request from master into demos/records.

``` bash
git fetch --all
git checkout merges/master-to-demos/records
git reset --hard upstream/demos/records
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-demos/records --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33957</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33956</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33955</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33954</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly members emit changes</Title>
    <Description>Related to #32911

- fill out implementations for MethodSymbol.IsReadOnly
- create a temp receiver when calling a non-readonly method from a readonly method
- share `this` without value copying when calling a readonly method from a readonly method</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33953</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete Statement should not move semicolons through "[" and "]"</Title>
    <Description>![completestatement](https://user-images.githubusercontent.com/5455484/53995100-e16b3280-40e8-11e9-8d15-5b4a09113e5e.gif)

1. Have a method with an attribute.
2. Try to define a field above the method.
3. Typing a semicolon moves it after the attribute which is confusing.

This happens because before the semicolon is typed, the `[Attribute]` is parsed as `ElementAccessExpression `and belongs to the field definition.

Source: https://developercommunity.visualstudio.com/content/problem/481019/atrocious-typing-help.html

I hope that the user used custom Roslyn bits and this is not shipped yet for 16.0 but need to verify with the user.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33952</IssueID>
    <RepoID>1</RepoID>
    <Title>Please reorder NullableAnnotation values to be in lattice order</Title>
    <Description>The values of NullableAnnotation are not in the order that they appear in the lattice.  Please reorder them so that they are in lattice order; that would permit a much simpler implementation of Meet and Join.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33951</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow stack-only types in stackalloc</Title>
    <Description>## Customer scenario
In 16.0 preview3, we accidentally disallowed stack-only types in stackalloc. This PR restores the previous behavior.

## Bugs this fixes
Fixes https://github.com/dotnet/roslyn/issues/33945

## Workarounds, if any
None

## Risk, Performance impact
Low. We're just skipping an unnecessary check for stackallocated arrays.

## Is this a regression from a previous update?
Yes, this bug was introduced in 16.0 preview3.

## Root cause analysis
While fixing an issue related to arrays, we factored some code too aggressively. The check that prevents restricted types in array types started applying to stackalloc arrays too.

## How was the bug found?
Reported by customer.

----

Filled https://devdiv.visualstudio.com/DevDiv/_workitems/edit/815087/ for ask-mode approval.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33950</IssueID>
    <RepoID>1</RepoID>
    <Title>Confirm suppression for ref/out/in parameters</Title>
    <Description>Ref and out parameters with suppression should change the nullable state
for the argument being suppressed. Moreover, the changes should flow
through type inference.

Closes #27743</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33949</IssueID>
    <RepoID>1</RepoID>
    <Title>Unused Assignment false positive</Title>
    <Description>https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker.cs#L3893

This is flagged as an unused assignment, but it is used.

Update: I got a minimal repro, which requires a conditional expression as an argument prior to the read.

```csharp
class A
{
    public static void M(int? x)
    {
        A a = new A();
        a = M2(x ?? 1, a);
    }

    private static A M2(int? x, A a)
    {
        return a;
    }
}
```</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33948</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement Find Symbol References API for VsDebugPresentationPackage</Title>
    <Description>
    </Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>24/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33947</IssueID>
    <RepoID>1</RepoID>
    <Title>Move to BYOC pools</Title>
    <Description>This changes our pipelines to use the BYOC (Bring Your Own Cloud) pools
hosed by the core engineering team. This is a dynamic queue which should
scale better for our uses than the static pools we are using today.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33946</IssueID>
    <RepoID>1</RepoID>
    <Title>Add AssertEx.EqualOrDiff</Title>
    <Description>Based on work by @AArnott in dotnet/roslyn-sdk#240.
</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33945</IssueID>
    <RepoID>1</RepoID>
    <Title>Regression in stackalloc array of ref struct (dotnet core 3 preview 3)</Title>
    <Description>This sample code builds successfully in dotnet core 3 preview 2 and earlier (including dotent core 2.x) but fails in dotnet core 3 preview 3

### test.csproj
```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
    &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;
```

### Class1.cs
```C#
using System;
using System.Runtime.InteropServices;

namespace test
{
    ref struct S
    {
    }

    public class Class1
    {
        public unsafe void M()
        {
            var x = stackalloc S[10];
        }
    }
}
```

### dotnet core 3 preview 2
```
$ dotnet build
Microsoft (R) Build Engine version 16.0.385-preview+g966cdf2ac6 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restoring packages for /home/david/tmp/test/test.csproj...
  Restore completed in 115.53 ms for /home/david/tmp/test/test.csproj.
/home/david/bin/dotnet2/sdk/3.0.100-preview-010184/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [/home/david/tmp/test/test.csproj]
  test -&gt; /home/david/tmp/test/bin/Debug/netstandard2.0/test.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:01.22
```

### dotnet core 3 preview 3
```
$ dotnet build
Microsoft (R) Build Engine version 16.0.443+g5775d0d6bb for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Persisting no-op dg to /home/david/tmp/test/obj/test.csproj.nuget.dgspec.json
  Restore completed in 127.26 ms for /home/david/tmp/test/test.csproj.
/home/david/bin/dotnet/sdk/3.0.100-preview3-010431/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [/home/david/tmp/test/test.csproj]
Class1.cs(14,32): error CS0611: Array elements cannot be of type 'S' [/home/david/tmp/test/test.csproj]

Build FAILED.

Class1.cs(14,32): error CS0611: Array elements cannot be of type 'S' [/home/david/tmp/test/test.csproj]
    0 Warning(s)
    1 Error(s)

Time Elapsed 00:00:01.21
```

Perhaps this is an unintended side effect of https://github.com/dotnet/roslyn/commit/0bee0256433301dabf1f5f2301375f4606ccaf32#diff-ef3f78219358a0705f76762ce80bb8c8?</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33944</IssueID>
    <RepoID>1</RepoID>
    <Title>Build.cmd tries to build ibc training data when run locally</Title>
    <Description>Steps to reproduce
- Check out master
- Run git clean -xfd
- Run Restore.cmd
- Run Build.cmd

```
~\source\repos\roslyn-alt [master ‚â°]&gt; .\Build.cmd
Roslyn.sln:
  RunTests -&gt; C:\Users\jorobich\source\repos\roslyn-alt\artifacts\bin\RunTests\Debug\net472\RunTests.exe
  CompilersBoundTreeGenerator -&gt; C:\Users\jorobich\source\repos\roslyn-alt\artifacts\bin\CompilersBoundTreeGenerator\x6
  4\Debug\netcoreapp2.1\BoundTreeGenerator.dll

...

  Microsoft.VisualStudio.IntegrationTest.Setup -&gt; C:\Users\jorobich\source\repos\roslyn-alt\artifacts\VSSetup\Debug\Mic
  rosoft.VisualStudio.IntegrationTest.Setup.vsix
  Microsoft.VisualStudio.LanguageServices.IntegrationTests -&gt; C:\Users\jorobich\source\repos\roslyn-alt\artifacts\bin\M
  icrosoft.VisualStudio.LanguageServices.IntegrationTests\Debug\net472\Microsoft.VisualStudio.LanguageServices.Integrat
  ionTests.dll
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018: The "GenerateTrainingInputFiles" task failed unexpectedly. [C:\Users\jorobich\.nuget\
packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018: System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\Users\jor
obich\source\repos\roslyn-alt\artifacts\OptProf\Debug\Data\XamlOptProf\Configurations\Microsoft.Test.Performance.XamlOp
tProfCreateTests.UwpCreateProject_DesignerIsolated\csMicrosoft.VisualStudio.LanguageServices.SolutionExplorer.resources
.0.IBC.json'. [C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj
]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [C:\Users\j
orobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32
rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String
 msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [C:\Users\jorobich\.nuget\packages\microsoft.dotn
et.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileS
hare share) [C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.WriteEntri
es(IbcEntry[] ibcEntries, String outDir) in /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/GenerateTrainingIn
putFiles.cs:line 144 [C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigni
ng.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.WriteEntri
es(OptProfTrainingTest[] tests, IbcEntry[] ibcEntries) in /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/Gene
rateTrainingInputFiles.cs:line 122 [C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\to
ols\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.ExecuteImp
l() in /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/GenerateTrainingInputFiles.cs:line 84 [C:\Users\jorobic
h\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.Execute()
in /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/GenerateTrainingInputFiles.cs:line 42 [C:\Users\jorobich\.n
uget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutio
nHost.Execute() [C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.pr
oj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.&lt;ExecuteInstantiatedTask&gt;d__26.MoveNext() [
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]

Build succeeded.
```</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33943</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable roll forward in our .NET Core exes</Title>
    <Description>This changes our build to mark all of our .NET Core applications as
rolling forward on major / minor versions of the .NET framework.
Presently our tools ship inside both .NET Core 2 and 3 SDKs. This
setting allows our tools to run unmodified in both settings.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33942</IssueID>
    <RepoID>1</RepoID>
    <Title>Copy nullable state from a limited set of BoundExpression types only</Title>
    <Description>Reverts fix for #31395 for now.

Fixes #33908.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33941</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove BoundExpressionExtensions.GetTypeAndNullability and GetNullableAnnotation</Title>
    <Description>Remove `BoundExpressionExtensions.GetTypeAndNullability` and `BoundExpressionExtensions.GetNullableAnnotation`.

The methods are only used for setting the nullability of inferred locals in initial binding, but initial binding should not infer nullability.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33940</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn dev16.0-vs-deps | 20190307</Title>
    <Description>
    </Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33939</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider new warning for unobserved async-iterator call</Title>
    <Description>**Version Used**: 
3.0.19.12206 (ec366687)

**Steps to Reproduce**:
Compile the following code:
```csharp
using System.Collections.Generic;
using System.Threading.Tasks;

class C
{
  async IAsyncEnumerable&lt;int&gt; ProduceAsync()
  {
    await Task.CompletedTask;
    yield return 42;
  }

  void Consume()
  {
    ProduceAsync(); // currently emits WRN_UnobservedAwaitableExpression
  }
}
```

**Expected Behavior**:

Emit new warning with text like "Because result of asynchronous iterator call is not being iterated, execution of the current method continues before the call is completed. Consider using the 'await foreach' over the result of the call." For async-iterators returning `IAsyncEnumerator&lt;T&gt;` the second sentence may be omitted. Or maybe you'll come up with better wording which will work for both cases :)

**Actual Behavior**:

The warning "CS4014: Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'await' operator to the result of the call" is emitted. But it's somewhat misleading.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33938</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix several outstanding small formatter bugs</Title>
    <Description>üìù I can break this pull request up on request.

* `NewLineForElse` must check parent of preceding brace (fixes #33458)
* Fix spacing before parameter list for conversion operators (fixes #31571, fixes #33910)
* Fix formatting of switch expression blocks (fixes #33839)</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33937</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 doesn't realize assignment before rethrow is read in finally block</Title>
    <Description>**Version Used**: VS 2019 RC.1 SVC 1

```cs
using System;

public static class Program
{
    public static void Main()
    {
        try
        {
            Test();
        }
        catch (Exception)
        {
        }
    }

    public static void Test()
    {
        var exceptionThrown = false;
        try
        {
            throw new Exception();
        }
        catch
        {
            // The `exceptionThrown` token is incorrectly greyed out in the IDE
            // IDE0059 Value assigned to 'exceptionThrown' is never used
            exceptionThrown = true;
            throw;
        }
        finally
        {
            // Breakpoint on this line is hit and 'true' is printed
            Console.WriteLine(exceptionThrown);
        }
    }
}
```
</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33936</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33935</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33934</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33933</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33932</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33931</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve the error message for an 'in' extension method so it's clear ‚Ä¶</Title>
    <Description>‚Ä¶that constraining it to a struct wont help.

See https://github.com/dotnet/roslyn/issues/33867.

Replace the current error message

&gt; The first parameter of an 'in' extension method '{0}' must be a value type.

with

&gt; The first parameter of an 'in' extension method '{0}' must be a concrete (non-generic) value type.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33930</IssueID>
    <RepoID>1</RepoID>
    <Title>Reduce allocations in CanonicallyCompareDiagnostics</Title>
    <Description>In UnboundLambda.CanonicallyCompareDiagnostics, we currently have this code:
```csharp
     return codeCompare == 0 ? string.CompareOrdinal(x.ToString(), y.ToString()) : codeCompare;
```
Both `x` and `y` are diagnostics, and Diagnostic.ToString() is quite an expensive operation, involving numerous allocations.

In a pathological case, this was responsible for nearly 8GB of allocations! See #33846 .

The ironic thing is, the diagnostic message is utterly irrelevant here. The purpose of calling ToString is just to have some repeatable way of selecting a diagnostic to display, so that the tests for roslyn don't keep on having to be updated.

See this comment for example in UnboundLambda.GenerateSummaryErrors:
```csharp
            // It is highly likely that "the same" error will be given for two different
            // bindings of the same lambda but with different values for the parameters
            // of the error. For example, if we have x=&gt;x.Blah() where x could be int
            // or string, then the two errors will be "int does not have member Blah" and 
            // "string does not have member Blah", but the locations and errors numbers
            // will be the same.
            //
            // We should first see if there is a set of errors that are "the same" by
            // this definition that occur in every lambda binding; if there are then
            // those are the errors we should report.
            //
            // If there are no errors that are common to *every* binding then we
            // can report the complete set of errors produced by every binding. However,
            // we still wish to avoid duplicates, so we will use the same logic for
            // building the union as the intersection; two errors with the same code
            // and location are to be treated as the same error and only reported once,
            // regardless of how that error is parameterized.
            //
            // The question then rears its head: when given two of "the same" error
            // to report that are nevertheless different in their arguments, which one
            // do we choose? To the user it hardly matters; either one points to the
            // right location in source code. But it surely matters to our testing team;
            // we do not want to be in a position where some small change to our internal
            // representation of lambdas causes tests to break because errors are reported
            // differently.
            //
            // What we need to do is find a *repeatable* arbitrary way to choose between
            // two errors; we can for example simply take the one that is lower in alphabetical
            // order when converted to a string.
```

Replacing the above code with this code which tests each argument individually:

```csharp
            if (codeCompare != 0)
                return codeCompare;

            for (int i = 0; i &lt; x.Arguments.Count &amp;&amp; i &lt; y.Arguments.Count; i++)
            {
                object argx = x.Arguments[i];
                object argy = y.Arguments[i];

                codeCompare = string.CompareOrdinal(argx?.ToString(), argy?.ToString());
                if (codeCompare != 0)
                    return codeCompare;
            }

            return x.Arguments.Count.CompareTo(y.Arguments.Count);
```

all the tests still pass, but allocations should be significantly reduced.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33929</IssueID>
    <RepoID>1</RepoID>
    <Title>Learn from binary operators on non-null constant values</Title>
    <Description>Two changes in this PR:
- a comparison (except `!=`) to a non-null constant is a non-null test
- a comparison with `null` (`x == null`, `x != null`, `(Type)x == null`, ...) is a pure null test and therefore affects both branches

Related issues:
- Fixes https://github.com/dotnet/roslyn/issues/31906 (Infer nullability of receiver from `?.` expression compared with non-null)
- Fixes https://github.com/dotnet/roslyn/issues/33526 (Pure null tests should affect both branches)
- Fixes https://github.com/dotnet/roslyn/issues/32703 (Not inferring nullability of non-nullable value compared to null)
- Closes https://github.com/dotnet/roslyn/issues/30562 (Should not warn dereferencing collection after foreach)
</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33928</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor: move static method to other class</Title>
    <Description>Internal ask.

Move static method to other class. It doesn't need to be available in the default quick actions, but could be accessed with a particular keyboard binding.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33927</IssueID>
    <RepoID>1</RepoID>
    <Title>Refine the set of NullableAnnotation values to the three speakable options</Title>
    <Description>- Eliminate values of `NullableAnnotation` that are "unspeakable"
- Change the result of dynamic invocations to result in an oblivious state
- Simplify the code in a few places where we compute result annotations (TSWA and `TypeWithState` are capable of storing an annotation/state even for typeless expressions)

Fixes #33638 
Filed #33924 to fix the result state of `?:`
</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33926</IssueID>
    <RepoID>1</RepoID>
    <Title>Immediate Window keyboard navigation with Ctrl+Up has been broken.</Title>
    <Description>fixes https://developercommunity.visualstudio.com/content/problem/475473/immediate-window-keyboard-navigation-with-ctrlup-h.html</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>09/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33925</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove `GetNullableAnnotation(expr)` from `NullableWalker`</Title>
    <Description>`NullableWalker` uses `GetNullableAnnotation` as a hack to pass nullable flow states to type inference for typeless expressions.  We should use a more straightforward mechanism: since a `TypeWithState` can contain a state even when the type is `null`, we no longer need a special mechanism for passing states for typeless expressions.
</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33924</IssueID>
    <RepoID>1</RepoID>
    <Title>Conditional expression should compute nullable result state from result state of operands</Title>
    <Description>Currently the computation is done in terms of nullable annotations.  But that is not correct, for example, with unconstrained type parameters that are known not to be null.  That fact is not representable in annotations, only in the nullable flow state.

See also #33664</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33923</IssueID>
    <RepoID>1</RepoID>
    <Title>There should be no "Possible dereference of a null reference" warnings for expression tree lambdas</Title>
    <Description>When calling a method which expects an expression tree (Expression&lt;Func&lt;T, TProperty&gt;&gt; parameter), and one of the properties in the expression tree is nullable, the compiler produces a nullable reference warning that cannot be worked around.

The following example code is based on a validation framework and simplified:
```csharp
using System;
using System.Linq.Expressions;

namespace CSharp8Test
{
    class Program
    {
        static void Main(string[] args)
        {
            var ep = new ExpressionProcessor&lt;Outer&gt;();
            ep.ProcessExpression(o =&gt; o.Inner.S); //"Possible dereference of a null reference" warning
        }

        class ExpressionProcessor&lt;T&gt; 
        {
            public void ProcessExpression&lt;TProperty&gt;(Expression&lt;Func&lt;T, TProperty&gt;&gt; expression)
            {
            }
        }

        public class Outer
        {
            public Inner? Inner { get; set; }
        }

        public class Inner 
        {
            public string S { get; set; } = "";
        }
    }
}
```
For 
`ep.ProcessExpression(o =&gt; o.Inner.S);`
I get a warning saying "Possible dereference of a null reference" because o.Inner might be null.
However, when working with Expressions I'm not dereferencing the object members, and I think the warning makes no sense here.

Using a null propagating operator like this: `ep.ProcessExpression(o =&gt; o.Inner?.S);` is not supported by the compiler.

**Version Used**: 
.NET Core 3.0.0-preview3-27503-5

**Expected Behavior**:
No warnings for expression tree lambda expressions (my preference)
OR
Support for null propagating operator in expression tree lambda expressions

**Actual Behavior**:
"Possible dereference of a null reference" warning</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33922</IssueID>
    <RepoID>1</RepoID>
    <Title>VSSDK update</Title>
    <Description>* Existing binaries were built from a private branch and are not supported with PDBs.
* New ones are from an official VS-Platform myget and have PDBs
</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33921</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex Completion + Async Completion = Failure to trigger on `[` in VB</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/33852</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33920</IssueID>
    <RepoID>1</RepoID>
    <Title>Solution explorer does not show Diagnostics nodes for analyzers added without canonical paths</Title>
    <Description>Sample app that reproduces the issue: https://github.com/pranavkm/analyzer-ruleset

Consider an analyzer added to the project as follows:

```xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;
  
  &lt;ItemGroup&gt;
    &lt;Analyzer Include="Microsoft.AspNetCore.Mvc.Api.Analyzers.dll"/&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;
```

When inspected in Solution Explorer, the Analyzers node does not list diagnostics. E.g.

![image](https://user-images.githubusercontent.com/174281/53923280-98ee3f00-402c-11e9-91eb-b5967216252b.png)

If I change the path to be absolute, the diagnostics node appear correctly:

```xml
  &lt;ItemGroup&gt;
    &lt;Analyzer Include="$(MSBuildThisFileDirectory)Microsoft.AspNetCore.Mvc.Api.Analyzers.dll"/&gt;
  &lt;/ItemGroup&gt;
```

@tmeschter's hypothesis is that the the language service knows the analyzer by it's canonical path which is different from the non-canonical path in the first case.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33919</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33918</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33917</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33916</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33915</IssueID>
    <RepoID>1</RepoID>
    <Title>Symbol completion doesn't trigger in switch expression</Title>
    <Description>In the example depicted, I would expect `BinaryOperatorKind` to get offered, but no completion is offered.

![image](https://user-images.githubusercontent.com/12466233/53922043-a523cd80-4027-11e9-92ae-3a2540c450b3.png)

FYI @gafter 
</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33914</IssueID>
    <RepoID>1</RepoID>
    <Title>Features/readonly members</Title>
    <Description>- [x] Propagate MethodSymbol.IsReadOnly API throughout type hierarchy
- [x] Create local copy of receiver and warn when invoking non-readonly method from readonly method
- [ ] Ditto for property accessors, combinations of accessors/methods, and combinations of static/instance members</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33913</IssueID>
    <RepoID>1</RepoID>
    <Title>Support `inlineDescription` parameter for `AssertSelectedCompletionItem` in ModernCompletionTestState</Title>
    <Description>The parameter `inlineDescription` was added to `AssertSelectedCompletionItem` in https://github.com/dotnet/roslyn/pull/33770/files. We should support modern equivalent in ModernCompletionTestState (https://github.com/dotnet/roslyn/blob/master-vs-deps/src/EditorFeatures/TestUtilities2/Intellisense/ModernCompletionTestState.vb#L222).
</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33912</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't run the nullable walker when the feature is not enabled</Title>
    <Description>In a body of code where there are no warnings enabled for the nullable feature, we should not run the nullable walker.</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33911</IssueID>
    <RepoID>1</RepoID>
    <Title>Suppress nullable diagnostics in unreachable code</Title>
    <Description>Fixes #33905</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33910</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect formatter behavior in implicit conversions to a tuple</Title>
    <Description>```C#
class C
{
    public static implicit operator (C, C)(C c) =&gt; throw null;
    public static implicit operator int?(C c) =&gt; throw null;
}
```

Currently, the formatter wants to insert a space between the type and the argument list here. It should not, like all other conversions.</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33909</IssueID>
    <RepoID>1</RepoID>
    <Title>StackOverflow when compiling CoreCLR</Title>
    <Description>Building CoreCLR using either the Desktop compiler on Windows or the core compiler on OSX results in a stackoverflow: https://github.com/dotnet/coreclr/issues/22757

Stack trace is [stacktrace.txt](https://github.com/dotnet/coreclr/files/2891861/stacktrace.txt)</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33908</IssueID>
    <RepoID>1</RepoID>
    <Title>StackOverflow when compiling CoreFX</Title>
    <Description>Trying to move to the current Arcade toolset results in a stackoverflow when compiling CoreFX: https://github.com/dotnet/corefx/pull/35826

Stack trace is 
[stacktrace2.txt](https://github.com/dotnet/corefx/files/2938556/stacktrace2.txt) -- Worth noting it exceeds the number of stack frames VS supports. I also have a dump locally, but it is 500mb.

Compiler version is `3.1.0-beta1-19127-06`, which corresponds to https://github.com/dotnet/roslyn/commits/3ef46d8367f4ae</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33907</IssueID>
    <RepoID>1</RepoID>
    <Title>Restore fluent call depth</Title>
    <Description>The change to move nullable to a two state solution inadverntently
changed how the CLR inlines a number of method calls. The combination of
not-inlining and over-inlining caused us to have a much larger "frame"
for analyzing a fluent call and exceeded our tolerance levels.

This adjusts the inlining so that we get the same results as before.

closes #33775</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33906</IssueID>
    <RepoID>1</RepoID>
    <Title>Make ITestOutputHelper available to tests</Title>
    <Description>
    </Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33905</IssueID>
    <RepoID>1</RepoID>
    <Title>Suppress nullable diagnostics in unreachable code</Title>
    <Description>Per LDM 2019-03-06, we should suppress nullable diagnostics in unreachable code.</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33904</IssueID>
    <RepoID>1</RepoID>
    <Title>Permit `e?.M()` without warning as a statement when the result is an unconstrained type parameter</Title>
    <Description>We currently warn when an expression of the form `e?.M()` returns a value of an unconstrained type parameter (because it might introduce a `null` value not in the domain of the type).

When such an expression is used as an expression-statement, we should not warn.

(per LDM 2019-03-06)</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33903</IssueID>
    <RepoID>1</RepoID>
    <Title>Record which packages were missing if we skipped an installed instance</Title>
    <Description>If you are missing a package in your install, we wouldn't say which one was missing so you got to figure it out the hard way. This will now log it so you can fix your install.</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33902</IssueID>
    <RepoID>1</RepoID>
    <Title>handle extension methods in "Sync Namespace" refactoring</Title>
    <Description>Fix #33890 

@dotnet/roslyn-ide @CyrusNajmabadi 
FYI @AbhitejJohn </Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33901</IssueID>
    <RepoID>1</RepoID>
    <Title>ConstructorArguments and NamedArguments fail to return arguments for attributes</Title>
    <Description>**Version Used**:  2.10.0

**Steps to Reproduce**:

1. Compile and run the following code: https://pastebin.com/X4aThZpA

**Expected Behavior**:

```
[Route(""api/[controller]"")]
[ApiController]
public class ValuesController : ControllerBase
{
}
```
attribute.ConstructorArguments for Route attribute should return a list with 1 argument.

```
[HttpGet(""{id}"", Name = ""Get"")]
public ActionResult&lt;string&gt; Get(int id)
{
    return ""value"";
}
```
attribute.ConstructorArguments for HttpGet attribute should return a list with 1 argument and
attribute.NamedArguments should also return a dictionary of 1 argument.


**Actual Behavior**:

attribute.ConstructorArguments for both cases return empty list even though attributes in the code contain arguments.
attribute.NamedArguments also returns an empty list when it should return 1 entry.

![image](https://user-images.githubusercontent.com/11540828/53906188-eda4b080-4052-11e9-95c4-2d6397da8232.png)




</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33900</IssueID>
    <RepoID>1</RepoID>
    <Title>Update CommandLineArguments</Title>
    <Description>Update `CommandLineArguments` to include `AnalyzerConfigPaths`.

This API is needed to make progress on support for .editorconfig files in https://github.com/dotnet/project-system.</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33899</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable VirtualMemoryNotificationListener for Server GC</Title>
    <Description>
    </Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33898</IssueID>
    <RepoID>1</RepoID>
    <Title>Parameter used in XML literal reported as unused</Title>
    <Description>&gt; @mavasani This parameter is incorrectly reported as unused.

_Originally posted by @sharwell in https://github.com/dotnet/roslyn/pull/33028#discussion_r262971002_</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33897</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33896</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33895</IssueID>
    <RepoID>1</RepoID>
    <Title>'SyntaxEditorBasedFixAllProvider' encountered an error - InvalidCastException</Title>
    <Description>Hi there,

I am using VS 2019 preview 4.1 and I have tried to do an apply code fix on full solution for rule `IDE0048: Parentheses should be added for clarity` and I end up with the following stack trace:

```
System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax'.
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxFactsService.Parenthesize(SyntaxNode expression,Boolean includeElasticTrivia,Boolean addSimplifierAnnotation)
   at Microsoft.CodeAnalysis.AddRequiredParentheses.AddRequiredParenthesesCodeFixProvider.&lt;&gt;c__DisplayClass4_0.&lt;FixAllAsync&gt;b__0(SyntaxNode current,SyntaxGenerator _)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.FixDocumentAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsCoreAsync(&lt;Unknown Parameters&gt;)
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass17_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
```

Cheers,
Amaury</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33894</IssueID>
    <RepoID>1</RepoID>
    <Title>Async Completion: autocomplete for `override` sometimes missing an newline</Title>
    <Description>**Version Used**: VS2019 Preview4/4.1

**Steps to Reproduce**:

1. switch `Async Completion` on
2. Type the below code(without comment)
```cs
        public class XXX
        {
            public override bool Equals(object obj)
            {
                return base.Equals(obj);
            }
        }
```
2. Add an new line after `Equals`, and type the below code(without comment), wait 1sec and press Enter to autocomplete GetHashCode()
```
            override G/*press Enter here to get GetHashCode()*/
```
3. See an new line is missing

NOTE: It sometimes may not reproduceable when press Ctrl+Z or just delete `GetHashCode()`  and repeat step 3, maybe remove all methods works.


**Expected Behavior**:
```cs
        public class XXX
        {
            public override bool Equals(object obj)
            {
                return base.Equals(obj);
            }
            public override int GetHashCode()
            {
                return base.GetHashCode();
            }
        }
```

**Actual Behavior**:
```cs
        public class XXX
        {
            public override bool Equals(object obj)
            {
                return base.Equals(obj);
            }
            public override int GetHashCode()
            {
                return base.GetHashCode();
            }        }
```
</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33893</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify we learn from non-null tests from attributes</Title>
    <Description>Closes https://github.com/dotnet/roslyn/issues/32335</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33892</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement LDM decisions on the behavior of `??` and `??=` operators</Title>
    <Description>Fixes #33743</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33891</IssueID>
    <RepoID>1</RepoID>
    <Title>Add usings leaves out some expected directives</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Preview 4.1

**Steps to Reproduce**:

1. Copy and paste some code that will trigger the "Add missing usings"
```csharp
using System;

class C
{
    void M()
    {
        Console.WriteLine("Hello World!");

        List&lt;string&gt; greetings = new List&lt;string&gt;()
        { "hi", "yo", "hello", "howdy" };

        string json = JsonConvert.SerializeObject("some json");

        StringBuilder sb = new StringBuilder("ABC", 50);

        bool checkFile = File.Exists(".\\");
    }
        
}
```

2. Types (Ctrl + .) to "Add missing usings"
![image](https://user-images.githubusercontent.com/8293542/53848440-2e27ff80-3f69-11e9-9d12-9b46eadfeb95.png)

**Expected Behavior**:
All missing usings are added.
```csharp
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

class C
{
    void M()
    {
        Console.WriteLine("Hello World!");

        List&lt;string&gt; greetings = new List&lt;string&gt;()
        { "hi", "yo", "hello", "howdy" };

        string json = JsonConvert.SerializeObject("some json");

        StringBuilder sb = new StringBuilder("ABC", 50);

        bool checkFile = File.Exists(".\\");
    }
        
}
```

**Actual Behavior**:
`using System.IO` was left out.
![image](https://user-images.githubusercontent.com/8293542/53848455-3c761b80-3f69-11e9-8e1d-bc5a7b4dc777.png)



@JoeRobich </Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33890</IssueID>
    <RepoID>1</RepoID>
    <Title>"Sync namespace" doesn't fix references via extension methods defined in affected types</Title>
    <Description>If you try to change the namespace below to `SyncExtMethods.Foo` using "sync namespace" refactoring

```cs
namespace SyncExtMethods.Extensions
{
    public static class ExtensionClass
    {
        public static bool SyncExtMethods(this Class1 c1) =&gt; true;
    }
}
```

Then we'd expect the using in the file below would change to `using SyncExtMethods.Foo;`, which isn't the case however. 

```cs
using SyncExtMethods.Extensions;

namespace SyncExtMethods
{
    public class Class1
    {
        public bool Foo() =&gt; this.SyncExtMethods();
    }
}
```

Thanks @AbhitejJohn for reporting this issue!
FYI @jinujoseph </Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33889</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33888</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33887</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33886</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33885</IssueID>
    <RepoID>1</RepoID>
    <Title>Test handling of a small selection of lifted built-in unary and binary operators</Title>
    <Description>Closes #33330</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33884</IssueID>
    <RepoID>1</RepoID>
    <Title>NullReferenceException in TryGetImageListAndIndex When Attempting to Apply Changes</Title>
    <Description>Attempting to use the public api analyzer and apply changes to changed APIs when I encountered a null reference exception. Dump file can be found here: `"\\mlangfs1\public\frsilb\dumps\33884\devenv.dmp"`

Edit: I think I just found a consistent repro. Open the `PublicAPI.Unshipped.txt` file and attempt to invoke the update api file refactoring. Appears to crash every time. Does not crash when the document is closed.</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33883</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete statement: special handling needed for caret at end of line, outside of delimiters</Title>
    <Description>Fixes #33851

If caret is at the end of a line, root.FindToken will return the character right before it.  

In this case,

```csharp
obj.method()$
   .method2();
```
Complete statement will incorrectly think it is inside of `method` argument list.  

This PR adds a check for this special case and adjusts the handling of the statement accordingly.
</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33882</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify error message to not mention unconstrained type parameter that it doesn't apply to.</Title>
    <Description>Fixes #33847
</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33881</IssueID>
    <RepoID>1</RepoID>
    <Title>Include slot in VisitResult</Title>
    <Description>Allow the slot to be calculated along with the result type. Needed for #29977 in particular.</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33880</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove comments for already-resolved github issues.</Title>
    <Description>See also #28798, #32047, #33879
Closes #29953</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33879</IssueID>
    <RepoID>1</RepoID>
    <Title>Issues with lifted conversions</Title>
    <Description>There are three comments in `NullableWalker.cs` regarding issues in lifted operators, particularly conversions, that need to be reexamined.  They are marked with this issue number.

In `GetSlotsToMarkAsNotNullable`:
``` c#
                switch (operand.Kind)
                {
                    case BoundKind.Conversion:
                        // https://github.com/dotnet/roslyn/issues/33879 Detect when conversion has a nullable operand
                        operand = ((BoundConversion)operand).Operand;
                        continue;
```
also
``` c#
                    default:
                        // Attempt to create a slot for the current thing. If there were any more conditional accesses,
                        // they would have been on top, so this is the last thing we need to specially handle.

                        // https://github.com/dotnet/roslyn/issues/33879 When we handle unconditional access survival (ie after
                        // c.D has been invoked, c must be nonnull or we've thrown a NullRef), revisit whether
                        // we need more special handling here
```
Also in InferResultNullability
``` c#
        private TypeWithState InferResultNullability(BoundUserDefinedConditionalLogicalOperator node)
        {
            if (node.OperatorKind.IsLifted())
            {
                // https://github.com/dotnet/roslyn/issues/33879 Conversions: Lifted operator
                // Should this use the updated flow type and state?  How should it compute nullability?
                return new TypeWithState(node.Type, NullableFlowState.NotNull);
            }
```
</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33878</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix Mono tests</Title>
    <Description>Mono was crashing when invoking a `static` member on an `interface`.
Disabled the tests on Mono and filed a follow up issue

https://github.com/mono/mono/issues/13319</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33877</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert "sync namespace" refactoring to an analzer/codefix combo</Title>
    <Description>We have heard feedback both internally and externally about the need to flag out-of-sync namespace and folder hierarchy.

One thing we need to figure out, is how do we let users indicate which projects need to be enforced. Using .editorconfig? Also, do we still keep providing this as a refactoring if there's no indication from user that they want it flagged as diagnostics?</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33876</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove NoBuild from ILAsmDeploy</Title>
    <Description>When building roslyn with the core 3.0.0 SDK, one would see errors about ILAsmDeploy build built even though it was flagged as NoBuild. Based on the discussion [here](https://github.com/dotnet/sdk/issues/3001), it was decided to remove the NoBuild flag from the project.</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33875</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion does not work in the Immediate Window after expression evaluation</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/809625
Fixes https://developercommunity.visualstudio.com/content/problem/478452/intellisense-in-immediate-window-does-not-work-sec.html</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33874</IssueID>
    <RepoID>1</RepoID>
    <Title>Update nullable api proposal with new separate rvalue and lvalue design.</Title>
    <Description>
    </Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33873</IssueID>
    <RepoID>1</RepoID>
    <Title>On private readonly field VS2019 Preview 4 suggest wrong style</Title>
    <Description>VSF_TYPE_MARKDOWN
```
public class ProvisioningTests
    {
        private readonly IChatConnector _connector = ThirdPartyIntegrationTestFixture.ServiceCollection.GetRequiredService&amp;lt;IChatConnector&amp;gt;();
        
```

In the above code, VS2019 Preview 4 suggest to rename _connector to Connector with IDE1006 warning.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/474640/on-private-readonly-field-vs2019-preview-4-suggest.html
VSTS ticketId: 806713_
_These are the original issue comments:_

Visual Studio Feedback System on 3/3/2019, 11:46 PM (37 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 3/5/2019, 01:50 AM (11 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33872</IssueID>
    <RepoID>1</RepoID>
    <Title>Wrap parameters or chained method calls should be configurable</Title>
    <Description>Internal customer ask.

The indent and wrapping behavior on parameters or chained method calls (or any multi-line construct) should be a configuration option and included in editorconfig.
There should also be an option to apply these when formatting.</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33871</IssueID>
    <RepoID>1</RepoID>
    <Title>Split CloseFile into CloseCodeFile and CloseDesignerFile</Title>
    <Description>Fixes #26442
Fixes #26443
Fixes #26444</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33870</IssueID>
    <RepoID>1</RepoID>
    <Title>Regression test for suppression on ref-returns</Title>
    <Description>Verifies that the current implementation matches the latest
LDM decisions on nullable suppression and out variables

Closes #27522</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33869</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyze ref declarations/assignments/foreachs/returns</Title>
    <Description>- Fixes https://github.com/dotnet/roslyn/issues/31297 (error CS8374: Cannot ref-assign 'x!' to 'x' because 'x!' has a narrower escape scope than 'x')
- Closes https://github.com/dotnet/roslyn/issues/27522 (Suppression operator on L-values)

Value kind checks no longer care about suppressions. Scenarios where suppressions are illegal are not handled in binding methods.

- Fixes https://github.com/dotnet/roslyn/issues/30964 (`LambdaReturnValue_NestedNullability_Ref` test)
- Fixes https://github.com/dotnet/roslyn/issues/33095 (Report nullability mismatch in `ref` variable assignment)
- Verifies https://github.com/dotnet/roslyn/issues/32701 (missing warning when assigning from `dynamic?` to `ref T` parameter)

- Fixes https://github.com/dotnet/roslyn/issues/33738 (single warning for type mismatch in `ref` arguments)

Note: this PR does not handle ref ternaries.</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33868</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract interface doesn't respect insert_final_newline editorconfig</Title>
    <Description>**Version Used**: 
15.9

**Steps to Reproduce**:

1. Run with `insert_final_newline=true` editorconfig
2. Run the "Extract Interface" code fix
3. Look at the generated file

**Expected Behavior**:
The last character(s) are a line break

**Actual Behavior**:
The last character in the file is the closing curly brace of the namespace and git says "No newline at end of file"

</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33867</IssueID>
    <RepoID>1</RepoID>
    <Title>Constrained type parameter not treated as a value type for "in" extension method</Title>
    <Description>A method declared like this
``` c#
        static void Test&lt;T&gt;(this in T o) where T : struct {}
```
is given the error message
``` none
CS8338 The first parameter of an 'in' extension method 'Test' must be a value type.
```
This is inexplicable, given that it *is* a value type.
</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33866</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33865</IssueID>
    <RepoID>1</RepoID>
    <Title>VS2019.4: "Convert to interpolated string" refactoring is not always offered and does not work correctly in some circumstances</Title>
    <Description>Given the following struct:

```csharp
    public struct ListingIdDealerIdTuple
    {
        public int ListingId { get; }
        public int DealerId { get; }

        public ListingIdDealerIdTuple(int listingId, int dealerId)
        {
            ListingId = listingId;
            DealerId = dealerId;
        }

        public override string ToString()
        {
            return nameof(ListingIdDealerIdTuple) + ": "
                + nameof(ListingId) + $" = {ListingId}" + ", "
                + nameof(DealerId) + $" = {DealerId}";
        }
    }
```

We will be concentrating on its `ToString` method.

### Refactoring not always offered

Place the cursor anywhere between the first space and before the } in `$" = {ListingId}"` or `$" = {DealerId}"` and bring up the Quick Actions menu. Note that the &amp;quot;Convert to interpolated string&amp;quot; refactoring is not offered.

Now move the cursor so that it's before, after, or inside the string `": "` or `", "` and again bring up Quick Actions. This time, &amp;quot;Convert to interpolated string&amp;quot; is present.

However, this refactoring is also available if the cursor is placed before the first &amp;quot;, or after the }, in `$" = {ListingId}"` or `$" = {DealerId}".` This is inconsistent.

### Refactoring generates incorrect output

Invoking &amp;quot;Convert to interpolated string&amp;quot; on the string inside `ToString` results in the following:

```csharp
return $"{nameof(ListingIdDealerIdTuple)}: {nameof(ListingId)}{$" = {ListingId}"}, {nameof(DealerId)}{$" = {DealerId}"}";
```

Note that the $ and {} tokens from the interpolations previously present are included as literals in the resulting string. This is incorrect, they should be omitted:


```csharp
return $"{nameof(ListingIdDealerIdTuple)}: {nameof(ListingId)} = {ListingId}, {nameof(DealerId)} = {DealerId}";
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/474404/vs20194-convert-to-interpolated-string-refactoring.html
VSTS ticketId: 806630_
_These are the original issue comments:_

Visual Studio Feedback System on 3/3/2019, 11:31 PM (26 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33864</IssueID>
    <RepoID>1</RepoID>
    <Title>provide a unit test for "Fix completion at the start of readonly documents"</Title>
    <Description>Here is a scenario:

1. Create a solution of two independent console applications.
2. Do not build application 1
3. Start debugging application 2 and stop at a break point
4. Go to application 1 in editor and set cursor at position = 0
5. Try to type anything.
6. Get "Changes are not allowed if the project wan't built when debugging started"
7. Hit Enter many times: once to close the dialog and the next one to attempt editing again (the cursor must be in the beginning of the file) , again and again.

Here is the fix: https://github.com/dotnet/roslyn/pull/33830
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/809690 should fix the issue on the Editor side as well</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33863</IssueID>
    <RepoID>1</RepoID>
    <Title>Provide a unit test for "Restore original behavior of Shift+Enter during completion"</Title>
    <Description>#33823 enables an integration test. It would be great to provide a unit test as well</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33862</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert workaround for "Restore original behavior of Shift+Enter during completion" when fix available</Title>
    <Description>Revert #33828 when  https://devdiv.visualstudio.com/DevDiv/_workitems/edit/809579 will be available on the Editor side</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33861</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a unit test for Async completion fails to scroll the caret into view</Title>
    <Description>There is an integration test enabled with #33827 
It would be great to have a unit test as well.</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33860</IssueID>
    <RepoID>1</RepoID>
    <Title>Move service hub code over to StreamJsonRpc v2.0</Title>
    <Description>This would help derived unit testing services (live unit testing, source based discovery) to consume StreamJsonRpc v2.0.</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33859</IssueID>
    <RepoID>1</RepoID>
    <Title>Move ILASMDeploy to netcoreapp3.0</Title>
    <Description>The deploy project must match the target framework of the binary that is
referenced otherwise `ilasm` on startup will crash with the following
error message:

```
Error: Fail to initialize CoreCLR
Failed to initialize Assembler
```</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33858</IssueID>
    <RepoID>1</RepoID>
    <Title>Move wrap/unwrap parameter to a sub-menu in the context menu</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/53774177-4ed95200-3ea2-11e9-9bc3-fdc843540b3f.png)

I don't think these fixes are important enough to be the ordered first in the context menu.

![image](https://user-images.githubusercontent.com/41759/53774157-4254f980-3ea2-11e9-9359-65c349a91ae2.png)

I'd rather see them moved to `Change formatting` sub-menu, which should itself be the last item of the context menu.
</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33857</IssueID>
    <RepoID>1</RepoID>
    <Title>Integration tests cannot run from Test Explorer due to build error</Title>
    <Description>**Version Used**: VS 16.0.0 Preview 4.1- 28701.123.d16.0

**Steps to Reproduce**:

1. ./Restore.cmd
2. ./Build.cmd
3. Open Roslyn.sln
4. Run CSharpIntelliSense tests in Test Explorer

**Expected Behavior**:
Tests run

**Actual Behavior**:

Command line build succeeds.
```
64&gt;------ Build started: Project: Roslyn.VisualStudio.Next.UnitTests, Configuration: Debug Any CPU ------
63&gt;C:\Users\amwieczo\.nuget\packages\microsoft.vssdk.buildtools\15.8.68-develop-g109a00ff\tools\vssdk\Microsoft.VsSDK.targets(80,5): warning VSSDK1018: Targets version (1.0.428.39440) and build task version (1.0.453.22492) do not match.  Restarting Visual Studio could help fix this issue.
63&gt;C:\Users\amwieczo\.nuget\packages\microsoft.vssdk.buildtools\15.8.68-develop-g109a00ff\tools\vssdk\Microsoft.VsSDK.targets(84,5): warning VSSDK1018: Targets version (15.8.68.39440) and build task version (15.7.104.22492) do not match.  Restarting Visual Studio could help fix this issue.
63&gt;Roslyn.VisualStudio.RemoteHostClientMock -&gt; D:\src\roslyn\artifacts\bin\Roslyn.VisualStudio.RemoteHostClientMock\Debug\net472\Roslyn.VisualStudio.RemoteHostClientMock.dll
63&gt;C:\Users\amwieczo\.nuget\packages\microsoft.vssdk.buildtools\15.8.68-develop-g109a00ff\tools\vssdk\Microsoft.VsSDK.targets(625,5): error MSB4062: The "GenerateFileManifest" task could not be loaded from the assembly C:\Users\amwieczo\.nuget\packages\microsoft.vssdk.buildtools\15.8.68-develop-g109a00ff\tools\vssdk\Microsoft.VisualStudio.Sdk.BuildTasks.dll.  Confirm that the &lt;UsingTask&gt; declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.
```
</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33856</IssueID>
    <RepoID>1</RepoID>
    <Title>FailFast in integration tests (ProjectId.ReadFrom)</Title>
    <Description>**Version Used**: Occurred in integration test build for #33834

**Steps to Reproduce**:

```
Event Time (UTC): 3/4/2019 10:39:49 PM
Event ID: 1025
Data: Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.Exception: Unexpected value 'UInt16' of type 'Roslyn.Utilities.ObjectWriter+EncodingKind'
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Exit(System.String)
   at Microsoft.VisualStudio.IntegrationTest.Setup.IntegrationTestTraceListener.Fail(System.String, System.String)
   at System.Diagnostics.TraceListener.Fail(System.String)
   at System.Diagnostics.TraceInternal.Fail(System.String)
   at System.Diagnostics.Debug.Assert(Boolean, System.String)
   at Roslyn.Utilities.ExceptionUtilities.UnexpectedValue(System.Object)
   at Roslyn.Utilities.ObjectReader.ReadStringValue(EncodingKind)
   at Roslyn.Utilities.ObjectReader.ReadStringValue()
   at Roslyn.Utilities.ObjectReader.ReadString()
   at Microsoft.CodeAnalysis.ProjectId.ReadFrom(Roslyn.Utilities.ObjectReader)
   at Microsoft.CodeAnalysis.DocumentId.ReadFrom(Roslyn.Utilities.ObjectReader)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticResultSerializer.Deserialize(Roslyn.Utilities.ObjectReader, Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer, Microsoft.CodeAnalysis.Project, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticResultSerializer.Deserialize(Roslyn.Utilities.ObjectReader, System.Collections.Generic.IDictionary`2&lt;System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer&gt;, Microsoft.CodeAnalysis.Project, Microsoft.CodeAnalysis.VersionStamp, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+InProcOrRemoteHostAnalyzerRunner+&lt;GetCompilerAnalysisResultAsync&gt;d__11.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Start[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+InProcOrRemoteHostAnalyzerRunner.GetCompilerAnalysisResultAsync(System.IO.Stream, System.Collections.Generic.Dictionary`2&lt;System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer&gt;, Microsoft.CodeAnalysis.Project, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+InProcOrRemoteHostAnalyzerRunner+&lt;&gt;c__DisplayClass8_1.&lt;AnalyzeOutOfProcAsync&gt;b__1(System.IO.Stream, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Remote.Extensions+&lt;InvokeAsync&gt;d__1`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Threading.Tasks.TaskFactory`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].FromAsyncCoreLogic(System.IAsyncResult, System.Func`2&lt;System.IAsyncResult,System.Threading.Tasks.VoidTaskResult&gt;, System.Action`1&lt;System.IAsyncResult&gt;, System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;, Boolean)
   at System.Threading.Tasks.TaskFactory`1+&lt;&gt;c__DisplayClass35_0[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;FromAsyncImpl&gt;b__0(System.IAsyncResult)
   at System.IO.Pipes.NamedPipeServerStream.AsyncWaitForConnectionCallback(UInt32, UInt32, System.Threading.NativeOverlapped*)
   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32, UInt32, System.Threading.NativeOverlapped*)
```</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33855</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33854</IssueID>
    <RepoID>1</RepoID>
    <Title>DesignerAttributeIncrementalAnalyzer needs to consume the new mechanism for registering "sub type" for CPS projects</Title>
    <Description>For performance reasons we opt'd DesignerAttributeIncrementalAnalyzer out of running for CPS projects: https://github.com/dotnet/roslyn/blob/5abb8f9480ade51baf5011d3e525340d933744c8/src/VisualStudio/Core/Def/Implementation/DesignerAttribute/DesignerAttributeIncrementalAnalyzer.cs#L82.

In https://devdiv.visualstudio.com/DevDiv/_git/CPS/pullrequest/167537, we've added a new mechanism for registering these attributes on a background thread and in a batch. This avoids CPS from evaluating and running design-time builds constantly while the analyzer is running. Roslyn needs to consume this new API so that our end-to-end for Windows Forms works.

@jinujoseph @heejaechang 

@lifengl @heejaechang What agreement did we come to for Rolsyn to actually consume the API? They don't have a dependency on CPS yet.</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33853</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master</Title>
    <Description>
    </Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33852</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex Completion + Async Completion = Failure to trigger on `[` in VB</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 4

**Steps to Reproduce**:

1. Paste VB code:

```VB
Imports System.Text.RegularExpressions
Class C
    Sub M()
        Dim r = New Regex("$$")
    End Sub
End Class
```

2. Remove the `$$` and type `[` at that location

**Expected Behavior**: Completion should show
**Actual Behavior**: Completion does not show

**Notes**:

This is related to a couple test failures for VB, including `TestCaretPlacement` and `OnlyClasses`.

Completion does work, but just not when triggered on `[`. For example, try triggering with `\` instead. In Old Completion, it correctly triggers on `[`.

I commented out the following line, and completion started triggering on `[` (but I don't know what else would go wrong as a result):
https://github.com/dotnet/roslyn/blob/6752c0f7c544b36ff574603d43d04a8c4b217cf2/src/Features/Core/Portable/EmbeddedLanguages/RegularExpressions/RegexEmbeddedCompletionProvider.cs#L32

</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33851</IssueID>
    <RepoID>1</RepoID>
    <Title>Semicolon typed mid-expression goes to an unexpected location</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 4 Build 28701.123.d16.0

**Repro**: 
I hit &lt;kbd&gt;;&lt;/kbd&gt; between the two invocations in this declaration:

![semicolonweirdlocation](https://user-images.githubusercontent.com/235241/53765071-d794c580-3e83-11e9-8175-361e64f25bc0.gif)

**Expected**: The semicolon is inserted at that location. In my scenario, I could then continue typing a down arrow and then comment current line, thus reducing the declaration to just the first call.

**Actual**: The semicolon goes to the end of the entire declaration. Also, it's not done in a two-step undo, so ctrl+z doesn't put the semicolon back where I typed it.</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33850</IssueID>
    <RepoID>1</RepoID>
    <Title>Close the Find Source window in case it's open</Title>
    <Description>See #33785

This change changes the problematic case from a *test hang* to a *flaky test*, which is a slight improvement.</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33849</IssueID>
    <RepoID>1</RepoID>
    <Title>Failed tests in ADO do not render newlines correctly</Title>
    <Description>The rendering works for stack traces but not for the test output.

![image](https://user-images.githubusercontent.com/1408396/53756875-e37e8880-3e7f-11e9-8f2f-4cea4a07b274.png)
</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33848</IssueID>
    <RepoID>1</RepoID>
    <Title>Update PowerShell version</Title>
    <Description>Update the PowerShell version in the [Building, Debugging, and Testing on Windows](https://github.com/dotnet/roslyn/blob/e8f03e407226a43c122ce004c66e1795883f564b/docs/contributing/Building%2C%20Debugging%2C%20and%20Testing%20on%20Windows.md) docs to 5.0 as per issue #32241

</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33847</IssueID>
    <RepoID>1</RepoID>
    <Title>Use distinct warning message for using `default` for unconstrained type parameter</Title>
    <Description>The existing warning is used for `null` plus `default` and reference types plus unconstrained type parameters. We should use distinct warnings to reduce confusion.
```C#
class Program
{
    static void F&lt;T&gt;(T t)
    {
    }
    static void G&lt;T&gt;()
    {
        F&lt;T&gt;(default);
    }
}
```
```
warning CS8625: Cannot convert null literal to non-nullable reference or
    unconstrained type parameter.
```</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33846</IssueID>
    <RepoID>1</RepoID>
    <Title>Heavy allocations in UnboundLambdaState.CanonicallyCompareDiagnostics</Title>
    <Description>**Version Used**: 15.9.7

:link: Originally filed as https://developercommunity.visualstudio.com/content/problem/463943/significant-wait-dialogs-all-projects.html

`UnboundLambdaState.CanonicallyCompareDiagnostics` is responsible for nearly 8GB of allocations (14% of total) in this trace. Nearly all of this number comes from `CSDiagnostic.ToString()` calling `DiagnosticFormatter.Format`. Nested within those we find:

* `CSharp.ErrorFacts.GetMessage` calls `Enum.ToString` (4.5GB)
* `DiagnosticFormatter.Format` calls `string.Format` (1.6GB)
* `DiagnosticInfo.GetMessage` calls `string.Format` (0.64GB)
* `DiagnosticFormatter.Format` calls `DiagnosticFormatter.FormatSourceSpan` (0.4GB)
* `DiagnosticFormatter.Format` calls `DiagnosticFormatter.GetMessagePrefix` (0.4GB)
</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>17/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33845</IssueID>
    <RepoID>1</RepoID>
    <Title>Renamer.RenameSymbolAsync should not rename the use of a delegate with a different number of type parameters.</Title>
    <Description>**Version Used**: 
2.10.0
**Steps to Reproduce**:

```csharp
       string originalCode = @"
         delegate void Action&lt;T1, T2&gt;(T1 t1, T2 t2);
    class Class1&lt;T&gt; 
    { 
        public static readonly Action&lt;Exception&gt; Throw = delegate(Exception ex) { throw ex; };
        private Action&lt;T&gt; _onNext;
        Class1(Action&lt;T&gt; onNext, Action&lt;Exception&gt; onError)
        {
            this._onNext = onNext;
        }
    }
        ";
            var expectedCode = @"
         delegate void Action2&lt;T1, T2&gt;(T1 t1, T2 t2);
    class Class1&lt;T&gt; 
    { 
        public static readonly Action&lt;Exception&gt; Throw = delegate(Exception ex) { throw ex; };
        private Action&lt;T&gt; _onNext;
        Class1(Action&lt;T&gt; onNext, Action&lt;Exception&gt; onError)
        {
            this._onNext = onNext;
        }
    }
        ";
            var workspace = new AdhocWorkspace();
            string projName = "NewProject";
            var projectId = ProjectId.CreateNewId();
            var versionStamp = VersionStamp.Create();
            var projectInfo = ProjectInfo.Create(projectId, versionStamp, projName, projName, LanguageNames.CSharp);
            var newProject = workspace.AddProject(projectInfo);
            var sourceText = SourceText.From(originalCode);

            var newDocument = workspace.AddDocument(newProject.Id, "NewFile.cs", sourceText);
            
            Document doc = newDocument;

            DelegateDeclarationSyntax decl = doc.GetSyntaxRootAsync().Result.
                DescendantNodes().
                OfType&lt;DelegateDeclarationSyntax&gt;().First(x =&gt; x.Identifier.Text == "Action");
            var semanticModel = doc.GetSemanticModelAsync().Result;
            var typeSymbol = semanticModel.GetDeclaredSymbol(decl);

            string oldName = typeSymbol.Name;
            string newName = oldName + "2";


            var newSolution = Renamer.RenameSymbolAsync(doc.Project.Solution, typeSymbol, newName, null).Result;
            var modifiedDoc = newSolution.Projects.First().Documents.First();

            ;
            Assert.Equal(expectedCode, modifiedDoc.GetTextAsync().Result.ToString());
        }
```

**Expected Behavior**:
To rename only the definition of the delegate `delegate void Action&lt;T1, T2&gt;(T1 t1, T2 t2);` . The use of the `action&lt;T&gt;` delegate remains unchanged.
**Actual Behavior**:
The delegate definition is renamed to `Action2&lt;T1, T2&gt;`. And the references to the `action&lt;T&gt;` delegate to `Action2&lt;T&gt;` are renamed</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33844</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>04/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33843</IssueID>
    <RepoID>1</RepoID>
    <Title>Invalid IDE0059 (value never used) with using and local function capture</Title>
    <Description>**Version Used**: 
16.0.0 RC

**Steps to Reproduce**:

```csharp
private class Disposable: IDisposable { public void Dispose() { } }
public int M()
{
    var result = 0;
    void append() =&gt; result += 1; // IDE0059 for 'result'
    using (var a = new Disposable())
        append();
    return result;
}
```

**Expected Behavior**:
No message, everything is used as expected.

**Actual Behavior**:
IDE0059 is triggered within the local function. Applying the code fix changes the local function to the invalid
```csharp
void append() =&gt; 1;
```

Not only the using is required, but also the assignment within. Removing `var a = ` from the sample also removes IDE0059.</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33842</IssueID>
    <RepoID>1</RepoID>
    <Title>Use vs-threading for designer manipulation in integration tests</Title>
    <Description>
    </Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33841</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn cannot interpret some kinds of assembly written in IL</Title>
    <Description>I tried to define a struct which inherits another struct in IL.
Roslyn shows very strange behaviour when interpreting that .dll file.

**Version Used**: 
Roslyn 3.0.0-beta4-19126-05

**Steps to Reproduce**:

1. Write IL code and compile it with ilasm.exe.
 https://gist.github.com/pCYSl5EDgo/a271e7f713926117989970a6f712dafa
2.  Set the appropriate reference to the DLL from any project.
3.  Read metadata of A0.

**Expected Behavior**:
`public struct A0
{
    public static A0 GetDefaultA0();
}`

**Actual Behavior**:
`public static struct A0
{
    public static A0 GetDefaultA0();
}`

![d0yyuujuyaekhhq](https://user-images.githubusercontent.com/31692496/53714103-85a66c80-3e90-11e9-90ce-3fa6ba15f8b4.jpg)
</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33840</IssueID>
    <RepoID>1</RepoID>
    <Title>Replace Stack with ArrayBuilder in GreenNode walker</Title>
    <Description>This has shown up as a hot allocation path in a few different traces.
This change amortizes the allocations by using a pooled ArrayBuilder
instead of allocating a new Stack every time.

The following benchmarks seem to support the hypothesis:

Before change:

```
BenchmarkDotNet=v0.11.1, OS=Windows 10.0.17134.590 (1803/April2018Update/Redstone4)
AMD Ryzen 7 1800X Eight-Core Processor (Max: 3.60GHz), 1 CPU, 16 logical and 8 physical cores
.NET Core SDK=2.2.103
  [Host] : .NET Core 2.1.8 (CoreCLR 4.6.27317.03, CoreFX 4.6.27317.03), 64bit RyuJIT
  Core   : .NET Core 2.1.8 (CoreCLR 4.6.27317.03, CoreFX 4.6.27317.03), 64bit RyuJIT

Job=Core  Runtime=Core  Server=True

                Method |      Mean |     Error |    StdDev |     Gen 0 | Allocated |
---------------------- |----------:|----------:|----------:|----------:|----------:|
               Parsing |  65.25 ms |  1.301 ms |  2.568 ms |         - |   6.57 MB |
 CompileMethodsAndEmit | 634.00 ms | 12.640 ms | 22.468 ms | 1000.0000 |  40.29 MB |
     SerializeMetadata | 200.52 ms |  3.656 ms |  3.241 ms | 1000.0000 |  17.39 MB |
```

After change:

```
BenchmarkDotNet=v0.11.1, OS=Windows 10.0.17134.590 (1803/April2018Update/Redstone4)
AMD Ryzen 7 1800X Eight-Core Processor (Max: 3.60GHz), 1 CPU, 16 logical and 8 physical cores
.NET Core SDK=2.2.103
  [Host] : .NET Core 2.1.8 (CoreCLR 4.6.27317.03, CoreFX 4.6.27317.03), 64bit RyuJIT
  Core   : .NET Core 2.1.8 (CoreCLR 4.6.27317.03, CoreFX 4.6.27317.03), 64bit RyuJIT

Job=Core  Runtime=Core  Server=True

                Method |      Mean |     Error |    StdDev |     Gen 0 | Allocated |
---------------------- |----------:|----------:|----------:|----------:|----------:|
               Parsing |  67.26 ms |  1.344 ms |  3.321 ms |         - |   2.59 MB |
 CompileMethodsAndEmit | 627.23 ms | 13.307 ms | 23.995 ms | 1000.0000 |  28.85 MB |
     SerializeMetadata | 206.02 ms |  4.087 ms |  5.991 ms | 1000.0000 |  17.39 MB |
```</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33839</IssueID>
    <RepoID>1</RepoID>
    <Title>Intendation for switch expression is not good in expression bodied method</Title>
    <Description>**Version Used**: 
VS 2019 RC
![image](https://user-images.githubusercontent.com/5644458/53704071-b3b98b80-3e53-11e9-8187-a382808d578c.png)
![image](https://user-images.githubusercontent.com/5644458/53704073-c2a03e00-3e53-11e9-942c-e4bcbf396cc6.png)
![image](https://user-images.githubusercontent.com/5644458/53704077-d350b400-3e53-11e9-9810-2b2c682df721.png)
The first case should be considered mis-aligned, comparing to object initializer.</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33838</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>04/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33837</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing "Analyzer with Code Fix" project template in VS 2017 (15.9.7)</Title>
    <Description>Visual Studio 2017 version 15.9.7: 

**Steps to Reproduce**:

1. Clean Visual Studio 2017 Install
2. Install "Visual Studio extension development" and ".NET Core cross-platform development" workloads
3. Launch VS2017 and navigate to new project wizard, extensibility folder, no projects for "Code Analyzer with Code Fix (.NET Standard)"

**Expected Behavior**: Code Analyzer project should be available to create a project.

**Actual Behavior**: Option missing.

Referencing:
https://github.com/dotnet/roslyn/issues/21012

Install Settings
`Microsoft Visual Studio Professional 2017 
Version 15.9.7
VisualStudio.15.Release/15.9.7+28307.423
Microsoft .NET Framework
Version 4.7.03056

Installed Version: Professional

Application Insights Tools for Visual Studio Package   8.14.20131.1
Application Insights Tools for Visual Studio

ASP.NET and Web Tools 2017   15.9.04012.0
ASP.NET and Web Tools 2017

ASP.NET Core Razor Language Services   15.8.31590
Provides languages services for ASP.NET Core Razor.

ASP.NET Web Frameworks and Tools 2017   5.2.60913.0
For additional information, visit https://www.asp.net/

Azure App Service Tools v3.0.0   15.9.03024.0
Azure App Service Tools v3.0.0

Azure Functions and Web Jobs Tools   15.9.02046.0
Azure Functions and Web Jobs Tools

C# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

JavaScript Language Service   2.0
JavaScript Language Service

Microsoft Azure Tools   2.9
Microsoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.0.0

Microsoft Continuous Delivery Tools for Visual Studio   0.4
Simplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft Library Manager   1.0
Install client-side libraries easily to any web project

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual Studio Tools for Containers   1.1
Develop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit &amp; refresh your app without having to rebuild the container.

NuGet Package Manager   4.6.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

SQL Server Data Tools   15.1.61901.24070
Microsoft SQL Server Data Tools

TypeScript Tools   15.9.20918.2001
TypeScript Tools for Microsoft Visual Studio

Visual Basic Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual F# Tools 10.2 for F# 4.5   15.8.0.0.  Commit Hash: 6e26c5bacc8c4201e962f5bdde0a177f82f88691.
Microsoft Visual F# Tools 10.2 for F# 4.5

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

Visual Studio Tools for Containers   1.0
Visual Studio Tools for Containers`
</Description>
    <CreatedDate>03/03/2019</CreatedDate>
    <ClosedDate>03/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33836</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/03/2019</CreatedDate>
    <ClosedDate>03/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33835</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/03/2019</CreatedDate>
    <ClosedDate>03/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33834</IssueID>
    <RepoID>1</RepoID>
    <Title>Introduce more efficient internal representation of a sequence VirtualChars</Title>
    <Description>Review with https://github.com/dotnet/roslyn/pull/33834/files?w=1 for better diffs.

Prior to this PR, the way regex worked was to first start with a string-SyntaxToken.  This token was then converted into an ImmutableArray where each char of the string was 'interpretted' into 'VirtualChars' and then placed in the array.  For a normal character (like 'a'), this interpretation had no effect.  But we did it to be able to understand that `\\` in text would mean `\` as an actual char value.  

After this, this sequence of 'VirtualChars' was then lexed and parsed if appropriate by the regex engine.  When lexing, sub-sequences of this array were then placed into the RegexTokens being created.  Finally, these tokens are parsed into a tree.

This can end up with a fairly large number of allocations.  First, you're gettin an array created for each string.  And that array goes from being `sizeof(char) * N` to `sizeof(VirtualChar) * N`.  Then, each token/trivia will consume and copy part of that array, effectively leading to double that.  

--

This PR changes things in a couple of ways.

1. There is now a new abstraction called VirtualCharSequence.  It exposes the needed surface area that features need (i.e. it's similar to an `ImmutableArray&lt;VirtualChar&gt;`), but allows for more efficient internal implementations.  
2. One important implementation is the 'sits on a string' version.  this version is used when the original string had no escaped sequences in it.  i.e. a string like `"abc"`.  In this case, we just create a single object that points at that text and says "i represents the chars from `abc`".  This means that for *most* strings in a project, we can represent the sequence of chars with just a single allocation.
3. It's efficient (one extra object) to get a sub-sequence of a VirtualCharSequence.  So, when all the trivia/tokens get lexed for a regex, we can just point at the right information without copying out an entire array.</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33832</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Merge pull request #33800 from sharwell/script-cleanup"</Title>
    <Description>This reverts commit 726c2bc02410d1fadaba9a6f763cdaa1cb2e30d4, reversing changes made to f51b549089145547d09ff828ec09cc221936c31c.

üìù I'm rebuilding this until it runs on one of the machines I know was failing in this part of the script today.</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>03/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33831</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unnecessary (duplicate) WaitForAsyncOperations</Title>
    <Description>
    </Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33830</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix completion at the start of readonly documents</Title>
    <Description>Fixes #33829</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33829</IssueID>
    <RepoID>1</RepoID>
    <Title>Typing at the start of a read-only document crashes the IDE</Title>
    <Description>**Version Used**: 2773f5e

Caught by integration test `BasicEditAndContinue.DocumentStateTrackingReadonlyInRunMode`.
</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33828</IssueID>
    <RepoID>1</RepoID>
    <Title>Restore original behavior of Shift+Enter during completion</Title>
    <Description>Fixes #33823 

This change is a workaround for https://devdiv.visualstudio.com/DevDiv/_workitems/edit/809579, since we will not be able to fix _and validate_ that from the editor side prior to 16.0 RTM.</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33827</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure the caret is visible after commit</Title>
    <Description>Fixes #33822</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33826</IssueID>
    <RepoID>1</RepoID>
    <Title>Suggestion mode does not work in C# Interactive view with async completion</Title>
    <Description>**Version Used**: 2773f5e

The command is not available. We did not have any tests that relied on in working (they should be added), but several tests assumed the command was available.</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33825</IssueID>
    <RepoID>1</RepoID>
    <Title>Async completion fails to account for brace matching sessions</Title>
    <Description>**Version Used**: 2773f5e

Caught by integration test `CompletionUsesTrackingPointsInTheFaceOfAutomaticBraceCompletion`.
</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33824</IssueID>
    <RepoID>1</RepoID>
    <Title>RecentItemsManager is global for async completion</Title>
    <Description>**Version Used**: 2773f5e

Indirectly caught by integration tests `XmlDocCommentIntelliSense` and `XmlTagCompletion`.

In legacy completion, the MRU set was local to a subject buffer. In async completion, the MRU is shared state.
</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33823</IssueID>
    <RepoID>1</RepoID>
    <Title>Commit on shift+enter fails for async completion</Title>
    <Description>**Version Used**: 2773f5e

Caught by integration test `CommitOnShiftEnter`.
</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33822</IssueID>
    <RepoID>1</RepoID>
    <Title>Async completion fails to scroll the caret into view</Title>
    <Description>**Version Used**: 2773f5e

Caught by integration test `EnsureTheCaretIsVisibleAfterALongEdit`.
</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33821</IssueID>
    <RepoID>1</RepoID>
    <Title>help message for langversion isn't updated</Title>
    <Description>**Version Used**: 

csc 3.0.19.12206 (ec366687)
(installed with Visual Studio 2019 RC)

**Steps to Reproduce**:

Show csc help message.

**Expected Behavior**:

Help message for `-langversion` should refer to `latestMajor` and `preview`, and describe `default` as latest including minor.

**Actual Behavior**:

The message isn't updated: https://github.com/dotnet/roslyn/blob/2566316b364148050f60e83bc9a6c73e73209114/src/Compilers/CSharp/Portable/CSharpResources.resx#L4625
</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>20/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33820</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33819</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33818</IssueID>
    <RepoID>1</RepoID>
    <Title>update refactoring provider to have something that we can use to order its listing in lightbulb</Title>
    <Description>currently, we distinguish refactoring and code fix but in reality, it doesn't matter much for users.

code fix can use diagnostic and caret location to figure out what's more important and then use priority to sort things in light bulb menu.

but refactoring doesn't have such mark (anchor) like diagnostic for code fix that we can use to place it in right place in menu.

so we do something like this - http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures.Wpf/Suggestions/SuggestedActionsSource.cs,197

and distinguish refactoring and code fix. I believe this will be just a source of an endless tweak as new refactoring is added and we want to place it in a different place. 

I think we should fix the root cause not just keep changing ordering rules. also, we don't actually have tests for all different combinations of selection and refactorings and code fix mix so we actually have no idea how/what behavior got changed due to this kind of tweak.

we should discuss how we should address this once for all in a design meeting.

...

my suggestion will be making code refactoring and code fix to behave the same (this theme is consistent with this - https://github.com/dotnet/roslyn/issues/32461) and order those without distinguishing two.

right now, the only difference between these 2 for ordering is the applicable span for suggestedactionset.

code fix has the applicable span from diagnostic it is fixing, but refactoring gets it from selection (which might or might not directly related to the refactoring and it get even wierdier if there is no explicit selection) 

due to that, ordering those 2 (code fix and code refactoring) without distinguishing them mess things up. and we had to do this hueristic based ordering we have even though we don't actually know whether selection is used for refactoring or not.

if we see code fix provider, code fix is registered this way (or variation of the API)
http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeFixes/CodeFixContext.cs,165

```csharp
public void RegisterCodeFix(CodeAction action, Diagnostic diagnostic)
```

and refactoring is done this way
http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeRefactorings/CodeRefactoringContext.cs,51

```csharp
public void RegisterRefactoring(CodeAction action)
```

I suggest we add an overload (or its variation) for coderefactoring provider

```csharp
public void RegisterRefactoring(CodeAction action, TextSpan span)
```

and we use that span for applicable span for suggestedActionSet and for those refactoring that added this way, we don't disthinguish it from code fixes when ordering.

also, another benefit of this is we no longer need to do the hard to discover "caret must be on this specific magic location for refactoring to show up in LB".

now we can include refactoring in menu if the span provided is on the line where caret is on, exact same behavior as code fix.

we can leave existing API as it is, so refactoring that truely depends on selection like extract method can still use it.  

...

the suggestion above is something I just think on top of my head so we can discuss more in design meeting.

</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33817</IssueID>
    <RepoID>1</RepoID>
    <Title>improving performance on running completion tests</Title>
    <Description>
    </Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33816</IssueID>
    <RepoID>1</RepoID>
    <Title>Report nullability for attribute arguments:</Title>
    <Description>- Add an entry point to nullable walker for attribute analysis
- Implement analyze attribute in the walker
- Remove the analysis from binder_attributes and call nullable walker instead
- Add extra fields to BoundAttribute that are needed for nullable analysis
- Add tests

Fixes #23697</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33815</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33814</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33813</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33811</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33810</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33809</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33808</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 'dotnet/master' into DefaultInterfaceImplementation</Title>
    <Description>
    </Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33807</IssueID>
    <RepoID>1</RepoID>
    <Title>AsyncCompletionService needs to allow to configure UseAsyncCompletion per view</Title>
    <Description>VSMac currently requires Roslyn to operate in legacy completion mode for some views, and UseAsyncCompletion for other views.

The code here prevents this in two ways:
1. it checks GlobalOptions instead of per-view options: https://github.com/dotnet/roslyn/blob/2773f5e8a845f2f5295f9b6c2804ba9a05679828/src/EditorFeatures/Core/Implementation/IntelliSense/Completion/AsyncCompletionService.cs#L92
2. it caches the value globally and doesn't re-query it per view

We need this so we can configure whether to use the legacy completion per view.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33806</IssueID>
    <RepoID>1</RepoID>
    <Title>Move leading trivia with node when removing unused values.</Title>
    <Description>Resolves #33312

</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>04/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33805</IssueID>
    <RepoID>1</RepoID>
    <Title>added ability to clear all diagnostics reproted from a IDiagnosticUpd‚Ä¶</Title>
    <Description>‚Ä¶ateSource

previously IDiagnosticUpdateSource has to clear each diagnostics it reported group by group. that was fine for IDiagnosticUpdateSource that supports incremental update, but some source such as EditAndContinue doesn't support incremental update since their errors (emit errors) come and go as a bulk (whole project). when they update, they need to update everything. so tracking things in group for incremental update is unnecessary for such source.

the new API (Source.Cleared) make it easy for source to clear all diagnostics at once it produced.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33804</IssueID>
    <RepoID>1</RepoID>
    <Title>Execute test scenarios on mono</Title>
    <Description>
    </Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>10/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33803</IssueID>
    <RepoID>1</RepoID>
    <Title>Add a regression test for nullable range indexer</Title>
    <Description>Closes #31748</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33802</IssueID>
    <RepoID>1</RepoID>
    <Title>Add UseEnhancedColors to FeatureOnOffOptionsProvider</Title>
    <Description>When adding the UseEnhancedColor Option it was left off the OptionsProvider's list of options.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>04/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33801</IssueID>
    <RepoID>1</RepoID>
    <Title>Change signature can misplace comments</Title>
    <Description>**Version Used**: 2019 Preview 4

**Steps to Reproduce**:

Don't have exact steps, but it happened in https://github.com/dotnet/roslyn/pull/33796.

**Expected Behavior**: Comments stay with their logically related argument/parameter

**Actual Behavior**: They can end up in unexpected locations, sometimes logically related to the wrong entry
</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33800</IssueID>
    <RepoID>1</RepoID>
    <Title>Execute code through Exec-Command for consistent error handling</Title>
    <Description>
    </Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33799</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected formatting following rename operation</Title>
    <Description>**Version Used**: 16.0-vs-deps for Visual Studio 2019 Preview 4

Integration tests revealed a behavior change for rename operations in Visual Basic. The expected test outputs were updated in 4c24a3ebca96c010c05642c559b32cf79e872a5c to account for this change, but the change may indicate a bug.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33798</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve experience around rearranging code elements</Title>
    <Description>Move up and Move down commands move elements within a specific scope up and down relatively to other elements in this scope. For example, you can move up and down types in a file, type members in a type, statements in a type member or in a compound statement, etc, 
Needs changes from Platform team too tracked [here ](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/555805)</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33797</IssueID>
    <RepoID>1</RepoID>
    <Title>Integration tests do not cover async completion</Title>
    <Description>Async completion is completely disabled for integration testing, offering us no validation of the upcoming feature:

https://github.com/dotnet/roslyn/blob/2773f5e8a845f2f5295f9b6c2804ba9a05679828/src/VisualStudio/IntegrationTest/TestUtilities/VisualStudioInstanceFactory.cs#L327-L328</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>03/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33796</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC: Remove dependency on solution from AnalyzeDocumentAsync</Title>
    <Description>Required to implement https://github.com/dotnet/roslyn/issues/27735</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33795</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable async completion</Title>
    <Description>Tests impacted by the following bugs are disabled until we can address them:

Fixes #33797

* #33822 
* #33823 
* #33824 
* #33825 
* https://devdiv.visualstudio.com/DevDiv/_workitems/edit/801435</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>03/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33794</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33793</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33792</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider adding an option `SymbolDisplayFormat` for `ctor` and `cctor`</Title>
    <Description>I've only been able to get the actual (source) name of a constructor. It seems that there's no out-of-the box option to get `ctor` or `cctor`. This feature would be interesting for those writing analysis that require symbols to be named as according to the IL.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33791</IssueID>
    <RepoID>1</RepoID>
    <Title>Use the correct iteration count in IterationDataAttribute</Title>
    <Description>
    </Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33790</IssueID>
    <RepoID>1</RepoID>
    <Title>Port #33631 to dev16.0 (Low priority for code wrapping refactorings)</Title>
    <Description>Code wrapping refactorings should be lower pri than other refactorings

Ports https://github.com/dotnet/roslyn/pull/33631 to dev16.0 branch</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>02/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33789</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33788</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-to-dev16.0-vs-deps
git reset --hard upstream/dev16.0-vs-deps
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-dev16.0-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33787</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-to-master
git reset --hard upstream/master
git merge upstream/dev16.0
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33786</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0 to dev16.0-vs-deps</Title>
    <Description>
    </Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33785</IssueID>
    <RepoID>1</RepoID>
    <Title>Integration test cleanup fails to close debugger Find Source window</Title>
    <Description>![image](https://user-images.githubusercontent.com/1408396/53644151-807cbf80-3bfb-11e9-9da1-838c11cdc8a5.png)

```
System.TimeoutException: Failed to enter design mode in a timely manner.

Server stack trace: 
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.SolutionExplorer_InProc.WaitForDesignMode()
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.SolutionExplorer_InProc.CleanUpOpenSolution()
   at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
   at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)

Exception rethrown at [0]: 
   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.SolutionExplorer_InProc.CleanUpOpenSolution()
   at Microsoft.VisualStudio.IntegrationTest.Utilities.VisualStudioInstance.CleanUp() in /_/src/VisualStudio/IntegrationTest/TestUtilities/VisualStudioInstance.cs:line 210
   at Microsoft.VisualStudio.IntegrationTest.Utilities.VisualStudioInstance.Close(Boolean exitHostProcess) in /_/src/VisualStudio/IntegrationTest/TestUtilities/VisualStudioInstance.cs:line 244
   at Microsoft.VisualStudio.IntegrationTest.Utilities.VisualStudioInstanceFactory.&lt;UpdateCurrentlyRunningInstanceAsync&gt;d__12.MoveNext() in /_/src/VisualStudio/IntegrationTest/TestUtilities/VisualStudioInstanceFactory.cs:line 204
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task).GetType().Name

Server stack trace: 
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.SolutionExplorer_InProc.WaitForDesignMode()
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.SolutionExplorer_InProc.CleanUpOpenSolution()
   at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
   at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)

Exception rethrown at [0]: 
   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type)
   at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.SolutionExplorer_InProc.CleanUpOpenSolution()
   at Microsoft.VisualStudio.IntegrationTest.Utilities.VisualStudioInstance.CleanUp() in /_/src/VisualStudio/IntegrationTest/TestUtilities/VisualStudioInstance.cs:line 210
   at Microsoft.VisualStudio.IntegrationTest.Utilities.VisualStudioInstance.Close(Boolean exitHostProcess) in /_/src/VisualStudio/IntegrationTest/TestUtilities/VisualStudioInstance.cs:line 244
   at Microsoft.VisualStudio.IntegrationTest.Utilities.VisualStudioInstanceFactory.&lt;UpdateCurrentlyRunningInstanceAsync&gt;d__12.MoveNext() in /_/src/VisualStudio/IntegrationTest/TestUtilities/VisualStudioInstanceFactory.cs:line 204
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
```</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33784</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19128.3

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19151.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19151.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19151.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19154.14

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19155.29

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19156.20

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.23

</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33783</IssueID>
    <RepoID>1</RepoID>
    <Title>Different handling of unreachable code and default fallthrough in switch block</Title>
    <Description>**Version Used**: 
Visual Studio 2019 RC (csc.exe 3.0.19.12206 (ec366687))

**Steps to Reproduce**:
Compile this code (I used `csc.exe Class1.cs -target:library -langversion:7.3`):

    int Foo(bool a)
    {
        switch (a)
        {
            case true:
                return 1;
            case false:
                return 2;
            default:
                return 3;
        }
    }

**Expected Behavior**:
No warnings.

**Actual Behavior**:
You'll get warning CS0162: Unreachable code detected. This wasn't the case with Visual Studio 2017 (csc.exe 2.10.0.0 (b9fb1610)). This warning is of course promoted to an error if warnings as errors is enabled, which is how I found it. Is this a problem? I realize that analysis may have improved.

However, 2019 then suggests replacing it with:

    int Foo(bool a)
    {
        switch (a)
        {
            case true:
                return 1;
            case false:
                return 2;
            default:
        }
    }

Which now compiles without warnings. This code *fails* with Visual Studio 2017:

    CS8070: Control cannot fall out of switch from final case label ('default')
    CS0161: 'Class1.Foo(bool)': not all code paths return a value

But I am using langversion 7.3 for both. Shouldn't the same language version mean that it should compile with the same result?</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33782</IssueID>
    <RepoID>1</RepoID>
    <Title>Xmldoc with &lt;see cref="Foo{T}(T?)"/&gt; or similar fails to compile</Title>
    <Description>**Visual Studio 2019 RC (csc.exe version 3.0.19.12206 (ec366687))**: 

**Steps to Reproduce**:

Write this code. Note that Visual Studio helps you complete the `&lt;see cref...&gt;`. Enable XML documentation file and enable all warnings as errors.

    using System;
    namespace Repro2
    {
        /// &lt;summary/&gt;
        public class Class1
        {
            void Foo&lt;T&gt;(T t) where T : class { }
            void Foo&lt;T&gt;(T? t) where T : struct { }

            /// &lt;summary&gt;
            /// See &lt;see cref="Foo{T}(T?)"/&gt;
            /// &lt;/summary&gt;
            void Bar() { }
        }
    }

**Expected Behavior**:
It works.

**Actual Behavior**:
It fails with CS1580	Invalid type for parameter T? in XML comment cref attribute: 'Foo{T}(T?)'

If you change it to `&lt;see cref="Foo{T}(Nullable{T})"/&gt;` it works, but Visual Studio will now nag you to change it back to the version that doesn't :p.

This is a regression; both syntaxes worked in Visual Studio 2017. The old compiler produced the following in the document file:

    &lt;see cref="M:Repro2.Class1.Foo``1(System.Nullable{``0})"/&gt;

The new one produces:

    &lt;see cref="M:Repro2.Class1.Foo``1(``0)"/&gt;

(and warns/fails if warnings as errors is enabled.)</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33781</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33780</IssueID>
    <RepoID>1</RepoID>
    <Title>GetUnreferencedAssemblyIdentities and GetRequiredLanguageVersion</Title>
    <Description>we have these 2 new APIs

GetUnreferencedAssemblyIdentities (http://source.roslyn.io/#Microsoft.CodeAnalysis/Compilation/Compilation.cs,f745415ec1de2fab) and GetRequiredLanguageVersion (http://source.roslyn.io/#Microsoft.CodeAnalysis/Compilation/Compilation.cs,2c1d355382c271f9)

1 is instance API and the other is a static method.

both of them work by going through all diagnostic arguments and see whether it has a certain type of arguments.

and we do that for every diagnostic that is reported.

GetUnreferencedAssemblyIdentities restrict the iteration by checking error code. 
GetRequiredLanguageVersion just do that for every diagnostic ever created.

since IDE needs IDiagnosticPropertiesService (http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Diagnostics/IDiagnosticPropertiesService.cs,f8a99c4cb4320520) per language anyway and it is diagnostic.Arguements that is not exposed (internal) but not error code itself, it looks like we can make GetUnreferencedAssemblyIdentities as static method as well? and IDE side check error code before calling GetUnreferencedAssemblyIdentities ? 

another thing is iterating through arguments for every diagnostic ever created (http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Diagnostics/DiagnosticData.cs,c166a245b2b43d22,references) seems a potential perf bottleneck?

we might be able to either restrict or filter out diagnostics without blindly always iterate through all arguments by using properties of diagnostic?

we can also use a singleton property bag so that reducing allocations?




</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33779</IssueID>
    <RepoID>1</RepoID>
    <Title>added partial load mode feature flag and made extract method to handle partial load mode.</Title>
    <Description>when a solution is opened in VS, currently we do not know when the solution is fully loaded. the solution explorer might show all files but design time build might not have finished yet so, any semantic operation such as extract method or rename might do a wrong thing since it doesn't know that it is dealing with missing information (solution).

we are trying to address this issue with partial load mode, new API platform is working on. basically, we are planning to block most of semantic operations (except completion/quickinfo/goto definition/signature help and navigate to. we might include FAR here as well) during partial load state.

also, for things like squiggle, LB and etc, we will disable those until the solution is fully loaded since we don't actually know whether those data is correct or not during partial load state.

this change adds featureflag so that we can incrementally add support for each feature while dogfooding behavior across partners. as a first attempt, the extract method is chosen for new experience.

other internal options are added so that we can try alternative behaviors and etc.

tests are not added yet.

...

this is based on what we discussed in the design meeting.
![partialload](https://user-images.githubusercontent.com/1333179/53614162-bbe0a500-3b8d-11e9-8e64-80cb47827e81.gif)

using Roslyn option to simulate partial load state
![image](https://user-images.githubusercontent.com/1333179/53614197-e599cc00-3b8d-11e9-95b7-7f07473b7666.png)



</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33778</IssueID>
    <RepoID>1</RepoID>
    <Title>Properly handle nullability mismatch in default interface implementations.</Title>
    <Description>This is effectively a follow-up for https://github.com/dotnet/roslyn/pull/32041.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33777</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/readonly-members</Title>
    <Description>
This is an automatically generated pull request from master into features/readonly-members.

``` bash
git fetch --all
git checkout merges/master-to-features/readonly-members
git reset --hard upstream/features/readonly-members
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/readonly-members --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
</Issues>
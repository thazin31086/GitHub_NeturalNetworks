<PullRequests>
  <PullRequest>
    <IssueID>3247</IssueID>
    <RepoID>springfox</RepoID>
    <FixedByID>MaksimOrlov</FixedByID>
    <Title>Model enhancement bug fix</Title>
    <Description>That PR fixes issues after introducing new merging algorithm. The main issue is when we faced model with nodes properties that we already merged, we just skip that model instead of looking for the same models of that type.</Description>
    <CreatedDate>08/02/2020</CreatedDate>
    <ClosedDate>24/02/2020</ClosedDate>
    <PullRequestLabels>
      <PullRequestLabel>PR</PullRequestLabel>
    </PullRequestLabels>
    <Issues>
      <Issue>
        <RepoID>springfox</RepoID>
        <PullRequestID>3247</PullRequestID>
        <IssueID>3014</IssueID>
        <Title>Suffix with number like is added to duplicated object name</Title>
        <Description>Please take the time to search the repository if your question has already been asked or answered SNAPSHOT springfox swagger What version of the library are you using Is it the latest version The latest released version is Download What kind of issue is this Question Is this a question about how to do a certain thing Bug report If you ve found a bug spend the time to write a failing test Bugs with tests or steps to reproduce get fixed faster Here s an example: spring xml java config that is relevant springfox specific configuration if it makes sense include any output you ve received logs json snippets etc and what the expected output should be if you have a repo that demonstrates the issue for bonus points See this example Feature Request Start by telling us what problem you re trying to solve Often a solution already exists Don t send pull requests to implement new features without first getting our support Sometimes we leave features out on purpose to keep the project small Please do consider starring this repository if you do like this project and find it useful Hi I m using SNAPSHOT version now and I havent change any code from my project recently But suddenly suffixes with number and underscore has been added to my swagger object name such as  from few days ago So I have researched about recent changes of dependencies of the project and I ve found there was some update from spring fox on May I think possibly this could affect my issue because I didnt change anything from my side Could you take a look about this issue Here s a screenshot about it 
</Description>
        <CreatedDate>01/06/2019</CreatedDate>
        <ClosedDate>24/02/2020</ClosedDate>
        <Labels>
          <Label>bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>springfox</RepoID>
        <PullRequestID>3247</PullRequestID>
        <IssueID>3243</IssueID>
        <Title>Springfox creates model ends with suffix </Title>
        <Description>Please take the time to search the repository if your question has already been asked or answered What version of the library are you using Is it the latest version The latest released version is Download  SNAPSHOT springfox core What kind of issue is this Question Is this a question about how to do a certain thing Bug report If you ve found a bug spend the time to write a failing test Bugs with tests or steps to reproduce get fixed faster Here an example spring xml java config that is relevant   springfox specific configuration if it makes sense   include any output you ve received logs json snippets etc and what the expected output should be  if you have a repo that demonstrates the issue for bonus points! See this example   Feature Request Start by telling us what problem you re trying to solve Often a solution  already exists Dont send pull requests to implement new features without first getting our  support Sometimes we leave features out on purpose to keep the project small Please do consider starring this repository if you do like this project and find it useful  Hello I am using springfox SNAPSHOT with spring webflux I've found that the swagger generates the model ends with suffix   like below in some cases screenshot I've seen also has similar issue But this this is not the case when using JPA and the issue still exists even after the fixed PR get merged The case I met was when using org spring framework data domain Page and it seems getPageable does matter Heres the sample repository where I reproduce the issue Could you take a look at it </Description>
        <CreatedDate>31/01/2020</CreatedDate>
        <ClosedDate>24/02/2020</ClosedDate>
        <Labels>
          <Label>duplicate</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>springfox</RepoID>
        <PullRequestID>3247</PullRequestID>
        <IssueID>2345</IssueID>
        <Title>Exception in Spring Boot</Title>
        <Description>Tried upgrading to Spring Boot but Springfox seems to be incompatible Error creating bean with name documentation Plugins Bootstrapper defined in URL Caused by java lang No Such Method Error org spring framework boot actuate endpoint web End point Links Resolver Spring Boot shows no problems </Description>
        <CreatedDate>06/04/2018</CreatedDate>
        <ClosedDate>24/02/2020</ClosedDate>
        <Labels>
          <Label>bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>springfox</RepoID>
        <PullRequestID>3247</PullRequestID>
        <IssueID>3211</IssueID>
        <Title>Springfox randomly throwing java lang Illegal State Exception</Title>
        <stacktrace>
		2019-12-16 16:00:07.403  INFO 29847 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: agencyAgentsUsingGET_1
2019-12-16 16:00:08.185  INFO 29847 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: insuranceCompanyOrdersUsingGET_1
2019-12-16 16:00:08.583  INFO 29847 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: invoiceOrdersUsingGET_1
2019-12-16 16:00:09.685  INFO 29847 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: orderEmailLogsUsingGET_1
2019-12-16 16:00:09.942  INFO 29847 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: orderMobileExpensesUsingGET_1
2019-12-16 16:00:10.045  INFO 29847 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: orderServiceItemsUsingGET_1
2019-12-16 16:00:10.900  INFO 29847 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: userAgentOrdersUsingGET_1
2019-12-16 16:00:10.901  INFO 29847 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: userAgentOrdersUsingDELETE_1
2019-12-16 16:00:11.075  INFO 29847 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: userClientOrdersUsingGET_1
2019-12-16 16:00:11.076  INFO 29847 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: userClientOrdersUsingDELETE_1
2019-12-16 16:00:11.191  INFO 29847 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: userMobileExpensesUsingGET_1
2019-12-16 16:00:11.374 ERROR 29847 --- [           main] d.s.w.p.DocumentationPluginsBootstrapper : Unable to scan documentation context default

java.lang.IllegalStateException: Ambiguous models equality when conditions is empty.
	at springfox.documentation.spring.web.scanners.ApiModelReader.checkCondition(ApiModelReader.java:655) ~[springfox-spring-web-3.0.0-20190808.104142-38.jar:null]
	at springfox.documentation.spring.web.scanners.ApiModelReader.mergeConditions(ApiModelReader.java:537) ~[springfox-spring-web-3.0.0-20190808.104142-38.jar:null]
	at springfox.documentation.spring.web.scanners.ApiModelReader.mergeModelBranch(ApiModelReader.java:236) ~[springfox-spring-web-3.0.0-20190808.104142-38.jar:null]
	at springfox.documentation.spring.web.scanners.ApiModelReader.mergeNodes(ApiModelReader.java:262) ~[springfox-spring-web-3.0.0-20190808.104142-38.jar:null]
	at springfox.documentation.spring.web.scanners.ApiModelReader.mergeModelBranch(ApiModelReader.java:209) ~[springfox-spring-web-3.0.0-20190808.104142-38.jar:null]
	at springfox.documentation.spring.web.scanners.ApiModelReader.read(ApiModelReader.java:149) ~[springfox-spring-web-3.0.0-20190808.104142-38.jar:null]
	at springfox.documentation.spring.web.scanners.ApiListingScanner.scan(ApiListingScanner.java:144) ~[springfox-spring-web-3.0.0-20190808.104142-38.jar:null]
	at springfox.documentation.spring.web.scanners.ApiDocumentationScanner.scan(ApiDocumentationScanner.java:69) ~[springfox-spring-web-3.0.0-20190808.104142-38.jar:null]
	at springfox.documentation.spring.web.plugins.AbstractDocumentationPluginsBootstrapper.scanDocumentation(AbstractDocumentationPluginsBootstrapper.java:97) ~[springfox-spring-web-3.0.0-20190808.104142-38.jar:null]
	at springfox.documentation.spring.web.plugins.AbstractDocumentationPluginsBootstrapper.bootstrapDocumentationPlugins(AbstractDocumentationPluginsBootstrapper.java:83) ~[springfox-spring-web-3.0.0-20190808.104142-38.jar:null]
	at springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:94) ~[springfox-spring-web-3.0.0-20190808.104142-38.jar:null]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182) ~[spring-context-5.1.10.RELEASE.jar:5.1.10.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53) ~[spring-context-5.1.10.RELEASE.jar:5.1.10.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360) ~[spring-context-5.1.10.RELEASE.jar:5.1.10.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158) ~[spring-context-5.1.10.RELEASE.jar:5.1.10.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122) ~[spring-context-5.1.10.RELEASE.jar:5.1.10.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:893) ~[spring-context-5.1.10.RELEASE.jar:5.1.10.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-2.1.9.RELEASE.jar:2.1.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:552) ~[spring-context-5.1.10.RELEASE.jar:5.1.10.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) ~[spring-boot-2.1.9.RELEASE.jar:2.1.9.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:744) ~[spring-boot-2.1.9.RELEASE.jar:2.1.9.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:391) ~[spring-boot-2.1.9.RELEASE.jar:2.1.9.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:312) ~[spring-boot-2.1.9.RELEASE.jar:2.1.9.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) ~[spring-boot-2.1.9.RELEASE.jar:2.1.9.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1204) ~[spring-boot-2.1.9.RELEASE.jar:2.1.9.RELEASE]
	at net.gigeco.GigecoApplication.main(GigecoApplication.java:17) ~[classes/:na]



But sometimes I see that it goes through fine:

2019-12-16 16:02:42.189  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: agencyAgentsUsingGET_1
2019-12-16 16:02:42.929  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: insuranceCompanyOrdersUsingGET_1
2019-12-16 16:02:43.127  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: invoiceOrdersUsingGET_1
2019-12-16 16:02:44.492  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: orderEmailLogsUsingGET_1
2019-12-16 16:02:44.748  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: orderMobileExpensesUsingGET_1
2019-12-16 16:02:44.855  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: orderServiceItemsUsingGET_1
2019-12-16 16:02:46.030  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: userAgentOrdersUsingGET_1
2019-12-16 16:02:46.032  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: userAgentOrdersUsingDELETE_1
2019-12-16 16:02:46.203  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: userClientOrdersUsingGET_1
2019-12-16 16:02:46.204  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: userClientOrdersUsingDELETE_1
2019-12-16 16:02:46.311  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: userMobileExpensesUsingGET_1
2019-12-16 16:02:46.332  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: handleUsingGET_1
2019-12-16 16:02:46.334  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: handleUsingGET_2
2019-12-16 16:02:46.335  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: handleUsingGET_3
2019-12-16 16:02:46.336  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: handleUsingGET_4
2019-12-16 16:02:46.338  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: handleUsingGET_5
2019-12-16 16:02:46.339  INFO 29971 --- [           main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: handleUsingGET_6
		</stacktrace>
        <Code> </Code>
        <Description>I m getting a random behaviour On application start Im randomly getting </Description>
        <CreatedDate>16/12/2019</CreatedDate>
        <ClosedDate>24/02/2020</ClosedDate>
        <Labels>
          <Label>duplicate</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>springfox</RepoID>
        <PullRequestID>3247</PullRequestID>
        <IssueID>3082</IssueID>
        <Title>Spring Data Rest with multiple DTO</Title>
        <Code>

    private City city;


    public Long getPersonId() {
        return this.personId;
    }

    public void setPersonId(Long zarolasId) {
        this.personId = zarolasId;
    }

    public City getCity() {
        return city;
    }

    public void setCity(City city) {
        this.city = city;
    }
</Code>
        <Description>Version SNAPSHOT Generating swagger document from Spring Data Rest multiple DTO is generated in contract In project we have Person and City entities  We dont want to add always both side of relationship because it is unnecessary </Description>
        <CreatedDate>14/08/2019</CreatedDate>
        <ClosedDate>24/02/2020</ClosedDate>
        <Labels>
          <Label>bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>springfox</RepoID>
        <PullRequestID>3247</PullRequestID>
        <IssueID>563</IssueID>
        <Title>Add support for JsonView</Title>
        <Description>Hi I would like to show different fields in the same model depending on the swagger group. Is there a way I can configure Swagger Spring Mvc Plugin to do this maybe through different mixins Thanks</Description>
        <CreatedDate>19/01/2015</CreatedDate>
        <ClosedDate>24/02/2020</ClosedDate>
        <Labels>
          <Label>feature</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>3190</IssueID>
    <RepoID>springfox</RepoID>
    <FixedByID>beliakou</FixedByID>
    <Title>handle default sin Spring placeholders</Title>
    <Description> Whats this PR do fix Issue Are there unit tests If not how should this be manually tested Few test cases added Any background context you want to provide As per there is support for Spring properties resolution but default values like are not handled Im wondering if there are other places I need to update What are the relevant issues Issue </Description>
 <CreatedDate>19/11/2019</CreatedDate>
 <ClosedDate>06/01/2020</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues />
 </PullRequest>
 <PullRequest>
 <IssueID>3176</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>kremers</FixedByID>
 <Title>Create a Form Parameter model object instead of Body Parameter</Title>
 <Description>Based on Sebastian Hartte shartte Resolved conflicts with current master added test
</Description>
 <CreatedDate>07/11/2019</CreatedDate>
 <ClosedDate>06/01/2020</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3176</PullRequestID>
 <IssueID>2722</IssueID>
 <Title>Create a Form Parameter model object instead of Body Parameter</Title>
 <Description>This fixes by creating the right Swagger model class for parameters of type form Data Since those parameters only support a single example Ive also opted to simply copy over the first one.</Description>
 <CreatedDate>06/10/2018</CreatedDate>
 <ClosedDate>06/01/2020</ClosedDate>
 <Labels>
 <Label>PR</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>3162</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>wormuth</FixedByID>
 <Title>Fixedtypo3161</Title>
 <Description>Fixed the typo see</Description>
 <CreatedDate>24/10/2019</CreatedDate>
 <ClosedDate>06/01/2020</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues />
 </PullRequest>
 <PullRequest>
 <IssueID>3159</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>JoGir</FixedByID>
 <Title>Fix Spring Boot</Title>
 <Description> What this PR do fix Updated to Spring Framework RELEASE and Spring Boot RELEASE Integrated Plugin Registry changes Are there unit tests If not how should this be manually tested Nope Compile Task and tests run successful again Any background context you want to provide Not sure about the nullability in springfox documentation schema plugins Schema Plugins Manager view Provider added Illegal State Exception if not available What are the relevant issues 
   </Description>
 <CreatedDate>23/10/2019</CreatedDate>
 <ClosedDate>06/01/2020</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3159</PullRequestID>
 <IssueID>2932</IssueID>
 <Title>Issue when using Swagger latest version with Spring boot</Title>
 <Description>Hi I am running a Spring boot with swagger version and in swagger configuration file if I am using Configuration and Enable Swagger getting the following error APPLICATION FAILED TO START Description An attempt was made to call a method that does not exist The attempt was made from the following location springfox documentation spring web plugins Documentation Plugins Manager create Context Builder Documentation Plugins Manager The following method did not exist The methods class org spring framework plugin core Plugin Registry is available from the following location It was loaded from the following location Action Correct the classpath of your application so that it contains a single compatible version of org spring framework plugin core Plugin Registry Any help would be appreciated Thanks</Description>
 <CreatedDate>08/03/2019</CreatedDate>
 <ClosedDate>06/01/2020</ClosedDate>
 <Labels>
 <Label>maintenance</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>3158</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>jgcollings</FixedByID>
 <Title>SetthebasePathusingtherequestcontextpathifpresent</Title>
 <Description>This allows the Forwarded Prefix header to work correctly fix for issue Test with the following steps build and install into local maven repo clone repo run the project: mvn spring boot run use the following curl command to get the api spec Notice that the basePath in the spec is my prefix 
</Description>
 <CreatedDate>23/10/2019</CreatedDate>
 <ClosedDate>06/01/2020</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3158</PullRequestID>
 <IssueID>3157</IssueID>
 <Title>forwarded prefix ignored with springfox web flux</Title>
 <Code></Code>
 <Description>Using spring fox SNAPSHOT in a Spring Web flux project When providing Forwarded headers in request to api docs the spec that is generated always has a basePath of Steps to reproduce clone repo run the project mvn spring boot run use the following curl command to get the api spec Notice that the basePath is instead of my prefix The problem seems to be in Swagger Controller Web Flux java line swagger base Path I believe the issue would be solved with this code change swagger base Path isEmpty request get Path context Path value request get Path context Path value </Description>
 <CreatedDate>23/10/2019</CreatedDate>
 <ClosedDate>06/01/2020</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>3078</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>csegedicsaba</FixedByID>
 <Title>Spring Data Rest Pageable resource within teger paramters</Title>
 <Description> What s this PR do fix Fixing issue Are there unit tests If not how should this be manually tested test is updated. Any background context you want to provide Fixing issue What are the relevant issues 
  </Description>
 <CreatedDate>08/08/2019</CreatedDate>
 <ClosedDate>08/08/2019</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3078</PullRequestID>
 <IssueID>3075</IssueID>
 <Title>Spring Data Rest Pageable resuorce page and size parameter generated with wrong type</Title>
 <Code>
 RepositoryRestConfiguration configuration = context.getConfiguration();
          TypeResolver typeResolver = context.getTypeResolver();

          //noinspection unchecked
          withParameter(new ResolvedMethodParameter(
              0,
              configuration.getPageParamName(),
              Collections.EMPTY_LIST,
              typeResolver.resolve(String.class)));
          //noinspection unchecked
          withParameter(new ResolvedMethodParameter(
              1,
              configuration.getLimitParamName(),
              Collections.EMPTY_LIST,
              typeResolver.resolve(String.class)));
          //noinspection unchecked
          withParameter(new ResolvedMethodParameter(
              2,
              configuration.getSortParamName(),
              Collections.EMPTY_LIST,
              typeResolver.resolve(String.class)));
</Code>
 <Description>Spring Data Rest Pageable resuorce page and size parameter is generated with String type Maybe the following snipet in springfox documentation spring data rest Specification Builder generates </Description>
 <CreatedDate>06/08/2019</CreatedDate>
 <ClosedDate>08/08/2019</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3078</PullRequestID>
 <IssueID>3075</IssueID>
 <Title>Spring Data Rest Pageable resuorce page and size parameter generated with wrong type</Title>
 <Code>
RepositoryRestConfiguration configuration = context.getConfiguration();
          TypeResolver typeResolver = context.getTypeResolver();

          //noinspection unchecked
          withParameter(new ResolvedMethodParameter(
              0,
              configuration.getPageParamName(),
              Collections.EMPTY_LIST,
              typeResolver.resolve(String.class)));
          //noinspection unchecked
          withParameter(new ResolvedMethodParameter(
              1,
              configuration.getLimitParamName(),
              Collections.EMPTY_LIST,
              typeResolver.resolve(String.class)));
          //noinspection unchecked
          withParameter(new ResolvedMethodParameter(
              2,
              configuration.getSortParamName(),
              Collections.EMPTY_LIST,
              typeResolver.resolve(String.class)));
</Code>
 <Description>Spring Data Rest Pageable resuorce page and size parameter is generated with String type Maybe the following snipet in springfox documentation spring data rest SpecificationBuilder generates
</Description>
 <CreatedDate>06/08/2019</CreatedDate>
 <ClosedDate>08/08/2019</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3078</PullRequestID>
 <IssueID>3075</IssueID>
 <Title>Spring Data Rest Pageable resuorce page and size parameter generated with wrong type</Title>
 <Code>
 RepositoryRestConfiguration configuration = context.getConfiguration();
          TypeResolver typeResolver = context.getTypeResolver();

          //noinspection unchecked
          withParameter(new ResolvedMethodParameter(
              0,
              configuration.getPageParamName(),
              Collections.EMPTY_LIST,
              typeResolver.resolve(String.class)));
          //noinspection unchecked
          withParameter(new ResolvedMethodParameter(
              1,
              configuration.getLimitParamName(),
              Collections.EMPTY_LIST,
              typeResolver.resolve(String.class)));
          //noinspection unchecked
          withParameter(new ResolvedMethodParameter(
              2,
              configuration.getSortParamName(),
              Collections.EMPTY_LIST,
              typeResolver.resolve(String.class)));
</Code>
 <Description>Spring Data Rest Pageable resuorce page and size parameter is generated with String type Maybe the following snipet in springfox documentation spring data rest SpecificationBuilder generates
</Description>
 <CreatedDate>06/08/2019</CreatedDate>
 <ClosedDate>08/08/2019</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>3067</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>dependabot[bot]</FixedByID>
 <Title>Bumpjsyaml from in springfox swaggerui src web</Title>
 <Description>Bumps Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting You can disable automated security fix PRs for this repo from the Security Alerts page details</Description>
 <CreatedDate>03/08/2019</CreatedDate>
 <ClosedDate>04/08/2019</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>dependencies</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3067</PullRequestID>
 <IssueID>480</IssueID>
 <Title>Repeated methods</Title>
 <Description>I noticed that there is repeated methods in every controller documentation screenshot from </Description>
 <CreatedDate>07/11/2014</CreatedDate>
 <ClosedDate>30/04/2015</ClosedDate>
 <Labels>
 <Label>question</Label>
 <Label>waiting-for-more-info</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3067</PullRequestID>
 <IssueID>475</IssueID>
 <Title>Allow types models and naming to be more overridable</Title>
 <Description>Related to it should be easier to have control the mapping of classes to base types This would make it easier to fit into other libraries such as Joda Time or JSR Money and Currency API</Description>
 <CreatedDate>31/10/2014</CreatedDate>
 <ClosedDate>30/04/2015</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3067</PullRequestID>
 <IssueID>468</IssueID>
 <Title>Adding Models using ApiImplicitParam</Title>
 <Description>I would like to add a Model to the models array in the generated swagger json. I am defining a param on my controller via the @ApiImplicitParam annotation. The resulting operation parameter json looks correct, it states the data type is "Options", but there is no "Options" model in my models array. @ApiImplicitParams(value={ @ApiImplicityParam(name="options", paramType="form", dataType="Options", required=false)})The generated operation parameter looks good......{ name="options", description="options", defaultValue="", required=false, type="Options", paramType="form", allowMultiple=false, paramAccess=""}... but the models section is empty...models : {}I've tried the annotation with the datatype using the fully qualified class name and also using just the simple name. Neither value results in the model being added to the generated json. I also tried adding an OverrideConverter to the ModelConverters to try to map "Options" to my model definition, but that didn't make a difference, but felt like the right direction.How can I add my model to the swagger json? Is there a way to add it explictly via another annotation or via code on the SwaggerSpringMVCPlugin or SwaggerGlobalSettings? I don't really want to put the parameter in my controller's method signature, as i'm currently pulling it out from the HttpServletRequest, it is optional, and I don't want any failure in parsing to raise an exception. ApiImplicitParam seemed like a perfect fit.A side note: the ApiImplicitParam annotation is a little different than the others because it takes the dataType as a String value instead of a Class. It would be nice if it was consistent, but that change would have to be upstream in swagger-core. </Description>
 <CreatedDate>23/10/2014</CreatedDate>
 <ClosedDate>02/12/2014</ClosedDate>
 <Labels>
 <Label>has-workaround</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3067</PullRequestID>
 <IssueID>480</IssueID>
 <Title>Repeated methods</Title>
 <Description>I noticed that there is repeated methods in every controller documentation screenshot from </Description>
 <CreatedDate>07/11/2014</CreatedDate>
 <ClosedDate>30/04/2015</ClosedDate>
 <Labels>
 <Label>question</Label>
 <Label>waiting-for-more-info</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>3068</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>dependabot[bot]</FixedByID>
 <Title>Bump handle bars from in springfox swagger ui src web</Title>
 <Description>Bumps Dependabot will resolve any conflicts with this PR as long as you don t alter it yourself. You can also trigger a rebase manually by commenting You can disable automated security fix PRs for this repo from the </Description>
 <CreatedDate>03/08/2019</CreatedDate>
 <ClosedDate>04/08/2019</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>dependencies</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3068</PullRequestID>
 <IssueID>1515</IssueID>
 <Title>Added conditional Property Place holder Configurer bean</Title>
 <Description>Not happy with this solution as it means we no longer support spring fixes</Description>
 <CreatedDate>11/10/2016</CreatedDate>
 <ClosedDate>12/10/2016</ClosedDate>
 <Labels>
 <Label>PR</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3068</PullRequestID>
 <IssueID>1495</IssueID>
 <Title>Announcement Release</Title>
 <Description> Release NotesThe one where spring data rest support lands The one that you ve all been waiting for image courtesy This is the initial support, its is still rough would love to have feedback to improve support PR sThank you for all your contributions Add paths Groupe dBy configuration of Swagger Markup orevial Intermediate push david new comb remove duplicate enum values apixandru Update common problems adoc qwang Initial support for spring data rest dilipkrish Fix mistype in documentation mvpotter Merge method level and class level Api Responses annotations sworis breathing Supporting for hidden attribute of ApiParam and Api Model Property annotations MaksimOrlov Fixing java sql Date to be a date in swagger instead of date time mtalbot Add example in merged model wssccc java sql Date should become a date in JSON Schema output according to docs ssevertson Update to use swagger markup version ssevertson upgrade to swagger ui kevinchabreck S maven repo jongo Modified how to set jsonEditor parameter miborra Complex type support by Model Attribute MaksimOrlov Features Define a reason for applying ApiIgnore gdrouet Type level Api Responses are ignored looking for contributions sworisbreathing Support for rendering parameters and model attributes when no annotations are present tianchengbaihe Mixing string and Properties parameters causes display error in has workaround rherrick Swagger ui dose not work when Request Param annotation dose not set to method parameter azizkhani Ability to add custom Api Descriptions not described via request mappings romanwozniak Utilize the jackson property definition to determine additional model information dilipkrish Make supported Submit Methods configurable to enable and disable the Try it out functionality mibeumer Response Header description not generated in apidocs basvanstratum Support Vendor Extensions described as swagger schema MinosPong Add JsonFormat support for date and time YLombardi Integration with Spring Data Rest raranzueque Bug fixes infinity in allowable Values property of Api Model Property annotation Someone To Ignore Remove duplicate values in enum displays case insensitive apixandru Map LocalDateTime, List String not displayed correctly jlaugesen Springfox expects links to be array, while Spring hateoas return links as object jiangchuan Explicit value Json Property ignored when Property Naming Strategy is configured not reproducable mborkunov Result of adding tags to docket in swagger configuration ChrisHartman ApiResponses can not support custom status code such like dockerlet Request header Content Type is not being sent with request wontfix manish aug RequestParam with a map crashes swagger ui wontfix Bryce Mehring Api Ignore is not respected on a method ben</Description>
 <CreatedDate>25/09/2016</CreatedDate>
 <ClosedDate>04/10/2016</ClosedDate>
 <Labels>
 <Label>Announcement</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3068</PullRequestID>
 <IssueID>1515</IssueID>
 <Title>Added conditional Property Placeholder Configurer bean</Title>
 <Description>Not happy with this solution as it means we no longer support spring fixes</Description>
 <CreatedDate>11/10/2016</CreatedDate>
 <ClosedDate>12/10/2016</ClosedDate>
 <Labels>
 <Label>PR</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3068</PullRequestID>
 <IssueID>1516</IssueID>
 <Title>Presentation of maps in static docs</Title>
 <Code> List&lt;Item&gt; and a Map&lt;String,Item&gt;</Code>
 <Description>I have a question about how maps are displayed in the static docs generated from SpringFox Im currently using version I have a class that contains a The list is presented as I would expect in the static docs with a schema of Item array with the Item being a link to the Item spec in the doc The map field item Map however just shows a schema type of object with no reference to the Item spec at all Is this expected behavior I understand that there is no map type in the Swagger spec but I was hoping it would at least keep the relationship to the Item type which is correctly generated in the additionalProperties field of the spec The generated Swagger Spec from springfox contains Thanks for the help</Description>
 <CreatedDate>11/10/2016</CreatedDate>
 <ClosedDate>13/10/2016</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>3051</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>brunomendola</FixedByID>
 <Title>jacksondataformatxmlplugin</Title>
 <Description> What this PR do fix This implements support for jackson data format xml annotations based on what has been implemented for Jaxb plugin Are there unit tests If not how should this be manually tested  Implemented unit tests based on what has been implemented for Jaxb plugin Any background context you want to provide  What are the relevant issues springfox 
</Description>
 <CreatedDate>17/07/2019</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>3051</PullRequestID>
 <IssueID>2734</IssueID>
 <Title>Springfox does not apply JacksonXml annotations</Title>
 <Code>
 private final DocumentType type;

    private final String content;

    public Document(DocumentType type, String content) {
        this.type = type;
        this.content = content;
    }

    @JacksonXmlProperty
    public DocumentType getType() {
        return type;
    }

    @JacksonXmlProperty
    public String getContent() {
        return content;
    }
</Code>
 <Description>What version of the library are you using What kind of issue is this Bug report We have a Spring Boot application that exposes XML api and we want to show a correct XML example in the Swagger spec We use JacksonXml annotations like Unfortunately they are not applied by springfox
</Description>
 <CreatedDate>10/10/2018</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2995</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>dschulten</FixedByID>
 <Title>disable Documentation Plugins Bootstrapper if spring integration plugin is present</Title>
 <Description> What s this PR do fix Fixes Are there unit tests If not how should this be manually tested Test with Any background context you want to provide Not all users who have spring integration on the classpath also use spring integration webflux or spring integration http We now postpone bootstrapping only if the Spring Integration Documentation Plugins Bootstrapper is in fact on the class path What are the relevant issues In order to access the request mappings of spring integration the documentation plugins bootstrapper must execute after the spring integration Request Handler Mapping beans have been initialized which happens later than with the plain Request Handler Mapping beans 
</Description>
 <CreatedDate>16/05/2019</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2995</PullRequestID>
 <IssueID>2967</IssueID>
 <Title>No API Generation with Webflux Swagger SNAPSHOT AND spring integration</Title>
 <Code>
 </Code>
 <stacktrace>
 11-04-2019 16:16:59 221 [main] ERROR o s boot SpringApplication reportFailure - Application run failed
org springframework beans factory BeanCreationException: Error creating bean with name 'springIntegrationWebFluxRequestHandlerProvider': Lookup method resolution failed; nested exception is java lang IllegalStateException: Failed to introspect Class [springfox documentation spring web plugins SpringIntegrationWebFluxRequestHandlerProvider] from ClassLoader [sun misc Launcher$AppClassLoader@18b4aac2]
	at org springframework beans factory annotation AutowiredAnnotationBeanPostProcessor determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor java:265)
	at org springframework beans factory support AbstractAutowireCapableBeanFactory determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory java:1253)
	at org springframework beans factory support AbstractAutowireCapableBeanFactory createBeanInstance(AbstractAutowireCapableBeanFactory java:1168)
	at org springframework beans factory support AbstractAutowireCapableBeanFactory doCreateBean(AbstractAutowireCapableBeanFactory java:555)
	at org springframework beans factory support AbstractAutowireCapableBeanFactory createBean(AbstractAutowireCapableBeanFactory java:515)
	at org springframework beans factory support AbstractBeanFactory lambda$doGetBean$0(AbstractBeanFactory java:320)
	at org springframework beans factory support DefaultSingletonBeanRegistry getSingleton(DefaultSingletonBeanRegistry java:222)
	at org springframework beans factory support AbstractBeanFactory doGetBean(AbstractBeanFactory java:318)
	at org springframework beans factory support AbstractBeanFactory getBean(AbstractBeanFactory java:199)
	at org springframework beans factory support DefaultListableBeanFactory preInstantiateSingletons(DefaultListableBeanFactory java:849)
	at org springframework context support AbstractApplicationContext finishBeanFactoryInitialization(AbstractApplicationContext java:877)
	at org springframework context support AbstractApplicationContext refresh(AbstractApplicationContext java:549)
	at org springframework boot web reactive context ReactiveWebServerApplicationContext refresh(ReactiveWebServerApplicationContext java:67)
	at org springframework boot SpringApplication refresh(SpringApplication java:775)
	at org springframework boot SpringApplication refreshContext(SpringApplication java:397)
	at org springframework boot SpringApplication run(SpringApplication java:316)
	at org springframework boot SpringApplication run(SpringApplication java:1260)
	at org springframework boot SpringApplication run(SpringApplication java:1248)
	at de swr ard core imageservice service ImageServiceApplicationKt main(ImageServiceApplication kt:87)
Caused by: java lang IllegalStateException: Failed to introspect Class [springfox documentation spring web plugins SpringIntegrationWebFluxRequestHandlerProvider] from ClassLoader [sun misc Launcher$AppClassLoader@18b4aac2]
	at org springframework util ReflectionUtils getDeclaredMethods(ReflectionUtils java:686)
	at org springframework util ReflectionUtils doWithMethods(ReflectionUtils java:583)
	at org springframework util ReflectionUtils doWithMethods(ReflectionUtils java:568)
	at org springframework beans factory annotation AutowiredAnnotationBeanPostProcessor determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor java:248)
	 18 common frames omitted
Caused by: java lang NoClassDefFoundError: org/springframework/integration/webflux/inbound/WebFluxIntegrationRequestMappingHandlerMapping
	at java lang Class getDeclaredMethods0(Native Method)
	at java lang Class privateGetDeclaredMethods(Class java:2701)
	at java lang Class getDeclaredMethods(Class java:1975)
	at org springframework util ReflectionUtils getDeclaredMethods(ReflectionUtils java:668)
	 21 common frames omitted
Caused by: java lang ClassNotFoundException: org springframework integration webflux inbound WebFluxIntegrationRequestMappingHandlerMapping
	at java net URLClassLoader findClass(URLClassLoader java:381)
	at java lang ClassLoader loadClass(ClassLoader java:424)
	at sun misc Launcher$AppClassLoader loadClass(Launcher java:349)
	at java lang ClassLoader loadClass(ClassLoader java:357)
	 25 common frames omitted

 </stacktrace>
 <Description>Im working with Spring Webflux Swagger SNAPSHOT and google cloud integration from spring  so Spring integration  I have several REST Endpoints which needs to be documeted via swagger I was following the normal implementation of swagger as described in So far so good I ended with an almost empty swagger ui page with following errors Could not render e see the console The Console Output was like  Type Error column Number file Name line Number message this state selected Index is undefined stack value The api docs page just returned a Not Found So the reason for the is just an empty documentation Cache in Swagger Controller Web Flux I invested some breakpoint at startup like in the loading class for all handler resolvers in Documentation Plugins Boot strapper and no single method got called to populate the documentation Cache The problem is the top annotation 
</Description>
 <CreatedDate>11/04/2019</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2973</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>benbenw</FixedByID>
 <Title>Expose the show Common Extensions configuration available in swagger ui</Title>
 <Description>
Coauthored by Ippei Nawate saku ni gmail com Coauthored by Benoit b wiart ubik ingenierie com What this PR do fix Expose the show Common Extensions configuration available in swagger ui through springfox Ui Configuration and Ui Configuration Builder It s available in swagger ui since Are there unit tests If not how should this be manually tested Yes Any background context you want to provide Based on PR from Ippei Nawate Rebased for master Add missing modification of springfox ui js and keep the backward compatibility by adding a new constructor in UiConfiguration  What are the relevant issues 
 </Description>
 <CreatedDate>16/04/2019</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2973</PullRequestID>
 <IssueID>2663</IssueID>
 <Title>Add support for show Common Extensions configuration options for swagger ui</Title>
 <Description> Whats this PR do fix Add support for show Common Extensions configuration options for swagger ui Are there unit tests If not how should this be manually tested Yes Update existing unit tests  Any background context you want to provide None What are the relevant issues 
</Description>
 <CreatedDate>07/09/2018</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <Labels>
 <Label>PR</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2973</PullRequestID>
 <IssueID>2402</IssueID>
 <Title>add support for the show Common Extensions configuration option of swaggerui</Title>
 <Description>What version of the library are you using What kind of issue is this Feature Request In version of swagger ui a new configuration option was added called show Common Extensions This allows formats of query parameters to be shown and In version swagger ui was bumped to however no support was added for this new property 
</Description>
 <CreatedDate>08/05/2018</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2897</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>rainoko</FixedByID>
 <Title>Fix Error on use X Forwarded Prefix and Forwarded Header Filter</Title>
 <Description> PR will fix Covered with test Detailed problem description 
</Description>
 <CreatedDate>08/02/2019</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2897</PullRequestID>
 <IssueID>2622</IssueID>
 <Title>Error on use Forwarded Prefix and Forwarded Header Filter</Title>
 <Description>Hi When use Forwarded Prefix Over a zuul cloud gateway proxy and Forwarded Header Filter what remove the header an put on context path of Servlet Request the json the base path is not updated the path provider extension is use only on startup not runtime Can I do same workaround to solve this problem or send a PR with a new feature 
</Description>
 <CreatedDate>15/08/2018</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2897</PullRequestID>
 <IssueID>2622</IssueID>
 <Title>Error on use X Forwarded Prefix and Forwarded Header Filter</Title>
 <Description>Hi When use X Forwarded Prefix Over a zuul cloud gateway proxy and Forwarded Header Filter what remove the header an put on context path of Servlet Request the json the base path is not updated the path provider extension is use only on startup not runtime Can I do same workaround to solve this problem  or send a PR with a new feature 
</Description>
 <CreatedDate>15/08/2018</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2738</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>v3rtumnus</FixedByID>
 <Title>add support for deprecated controllers</Title>
 <Description> What s this PR do fix Fixes and adds support for deprecated controllers Are there unit tests If not how should this be manually tested Added a test to Operation Command Reader Spec Any background context you want to provide The change should be clear by itself I guess What are the relevant issues </Description>
 <CreatedDate>12/10/2018</CreatedDate>
 <ClosedDate>28/11/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2738</PullRequestID>
 <IssueID>2638</IssueID>
 <Title>Deprecated annotation on class Controller the view doest show deprecated tag horizontal line</Title>
 <Description> I use the and also try the latest version Download What kind of issue is this  Feature Request Deprecated annotation on the method can work mark the method deprecated tag like  image but Deprecated on the Class level doest work 
</Description>
 <CreatedDate>24/08/2018</CreatedDate>
 <ClosedDate>28/11/2018</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2738</PullRequestID>
 <IssueID>2638</IssueID>
 <Title>Deprecated annotation on class Controller the view doest show deprecated tag horizontal line</Title>
 <Description>
 I use the and also try the latest version Download What kind of issue is this Feature Request Deprecated annotation on the method can work mark the method deprecated tag like image but Deprecated on the Class level does t work 
</Description>
 <CreatedDate>24/08/2018</CreatedDate>
 <ClosedDate>28/11/2018</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2722</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>shartte</FixedByID>
 <Title>Create a Form Parameter model object instead of Body Parameter</Title>
 <Description>This fixes by creating the right Swagger model class for parameters of type formData Since those parameters only support a single example I've also opted to simply copy over the first one </Description>
 <CreatedDate>06/10/2018</CreatedDate>
 <ClosedDate>06/01/2020</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2722</PullRequestID>
 <IssueID>2717</IssueID>
 <Title>Primitive RequestPart parameters generate incorrect Swagger Model</Title>
 <Code>java
 public SomeReturnValue webMethod(){
 @RequestPart("file") MultipartFile file 
 @RequestPart("description") String description
 }
</Code>
 <Description>Method parameters of the following form will generate incorrect parameters in Swagger Non validating parsers will not immediately choke on it but code generators like swagger codegen or openapi codegen will 
</Description>
 <CreatedDate>06/10/2018</CreatedDate>
 <ClosedDate>06/01/2020</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2696</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>a1dutch</FixedByID>
 <Title>allow importing into eclipse</Title>
 <Description>This PR fixes the issue with not being able to import the project into eclipse using buildship gradle integration This is detailed in Eclipse is able to have multiple projects unlike intellij which can only have one i assume intellij sets the working directory to the root of this folder eclipse sets it working directory to its workspace which is a different directory to its project directory When it tries to find the last annotated tag via git its looking in the workspace directory which is not a git repo The fix simply adds the C project root directory from the project so it can find the correct git repository I have imported the project into intellij and eclipse all existing tests pass when run from a terminal 
</Description>
 <CreatedDate>22/09/2018</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2696</PullRequestID>
 <IssueID>1359</IssueID>
 <Title>Unable to build on gradle or eclipse</Title>
 <Description>using Gradle I get the following eror To honour the JVM settings for this build a new JVM will be forked Please consider using the daemon buildSrc clean UP TO DATE build Src compile Java UP TO DATE build Src compileG roovy build Src process Resources buildSrc classes buildSrc jar buildSrc assemble build Src compile Test Java UP TO DATE buildSrc compile Test Groovy startup failed Could not instantiate global transform class org spock framework compiler Spock Transform specified at jar file /Users/mrethers/ gradle/caches/modules /files /org spockframework/spock core/ groovy /ceaa b f ed de da e a c f b d a/spock core groovy jar!/META INF/services/org codehaus groovy transform ASTTransformation because of exception org spockframework util IncompatibleGroovyVersionException The Spock compiler plugin cannot execute because Spock groovy is not compatible with Groovy For more information see Spock artifact file error build Src compile Test Groovy FAILED FAILURE Build failed with an exception What went wrong Execution failed for task  the compiler error output for details Try Run with stacktrace option to get the stack trace Run with info or debug option to get more log output BUILD FAILEDTotal time secs`On eclipse using STS Gradle I get  buildSrc compile Java UP TO DATE buildSrc compile Groovy UP TO DATE build Src process Resources UP TO DATE build Src classes UP TO DATE build Src  jar UP TO DATE buildSrc assemble UP TO DATE build Src compile Test Java UP TO DATE build Src compile Test Groovy  UP TO DATE build Src process Test Resources UP TO DATE buildSrc test Classes UP TO DATE buildSrc test UP TO DATE  buildSrc check UP TO DATE buildSrc build UP TO DATE buildSrc compileJava UP TO DATE buildSrc compile Groovy  UP TO DATE buildSrc process Resources UP TO DATE build Src classes UP TO DATE build Src jar UP  TO DATE buildSrc assemble UP TO DATE buildSrc compile TestJava UP TO DATE build Src compile  TestGroovy UP TO DATE buildSrc process Test Resources UP TO DATE buildSrc testClasses  UP TO DATE buildSrc test UP TO DATE buildSrc check UP TO DATE buildSrc build UP TO DATEFAILURE  Build failed with an exception Where Build file  line What went wrong A problem occurred evaluating root project</Description>
 <CreatedDate>24/06/2016</CreatedDate>
 <ClosedDate>04/10/2016</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2639</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>olOwOlo</FixedByID>
 <Title>Make csrf support optional</Title>
 <Description> Whats this PR do fix Make csrf support optional  Are there unit tests If not how should this be manually tested Update existing unit tests  Any background context you want to provide None  What are the relevant issues 
  </Description>
 <CreatedDate>24/08/2018</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2639</PullRequestID>
 <IssueID>2578</IssueID>
 <Title>Optional ACAH X XSRF TOKEN </Title>
 <Description>Hi everyone I m using latest version of this awesome project to describe my endpoints Some of them are secured by Keycloak server OAuth2 authorization flow and i implemented a Swagger UI OAuth2 security schema Everything seems ok but what s the problem Keycloak server which i m not in control not allow Access Control Allowed Headers x xsrf token header so then i m trying to get JWT request which made by swagger ui always blocked by mu IDP Can this feature sending CSRF token to external IDP endpoint may be optional 
</Description>
 <CreatedDate>26/07/2018</CreatedDate>
 <ClosedDate>03/08/2019</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2608</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>ligasgr</FixedByID>
 <Title>Feature web flux</Title>
 <Description> Whats this PR do fix This PR provides support for webflux Are there unit tests If not how should this be manually tested Existing unit tests were preserved and are still working Added simplest contract tests for webflux Any background context you want to provide This PR supersedes PR It includes all the original changes plus necessary fixes and tests Not all of the tests moved in the original PR into the new project were easy to move back The remaining ones would require creating a new layer of mixins that would not be tied to specific implementation mvc webflux Unfortunately I don’t have that much time available to work on it Existing annotation was renamed Enable Swagger Enable Swagger WebMvc and new annotation EnableSwagger WebFlux was added Please note that it is no longer enough to add dependency on you now also have to include either Documentation needs a lot of updates about dependencies and an example for web flux The section Component Model also needs an update What are the relevant issues 
</Description>
 <CreatedDate>09/08/2018</CreatedDate>
 <ClosedDate>18/08/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2608</PullRequestID>
 <IssueID>1773</IssueID>
 <Title>Spring 5 support</Title>
 <Description>Or are there plans to support it </Description>
 <CreatedDate>16/04/2017</CreatedDate>
 <ClosedDate>11/07/2018</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2513</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>dbaje</FixedByID>
 <Title>Bug</Title>
 <Description>Whats this PR do fix Bug Are there unit tests If not how should this be manually tested No tests as this is to slove backwards compatibility Any background context you want to provide Attribute  name  and  required  in Path Variable annotation were added in Spring Using the version of the code causes an exception  What are the relevant issues    
</Description>
 <CreatedDate>25/06/2018</CreatedDate>
 <ClosedDate>13/07/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2513</PullRequestID>
 <IssueID>2511</IssueID>
 <Title>Since version APIs with Path Variable are not picked up anymore due to Spring code</Title>
 <Description>In our project we are currently using spring and we recently upgraded to version of this library After upgrading we discovered that some of our APIs didnt appear anymore After some digging we discovered that an error was thrown and then caught which made troubleshooting difficult The issue is in the Parameter Required Reader class Its using fields in the Path Variable annotation that was introduced in SpringUsing a lower Spring version triggers a Method Not Found exception In our case upgrading Spring is not an option As a work around we have extended the offending class modified the code Then we told Spring to use ours as Primary So we got it currently working Theres a way for the code to do the same thing but without breaking compatibility This Annotation Utils is present for Spring since early version and certainly present in all of versions That utility class contains a method to get all annotation attributes as a Map In this case its useful to make some annotation changes backwards compatible like in this case </Description>
 <CreatedDate>25/06/2018</CreatedDate>
 <ClosedDate>13/07/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2513</PullRequestID>
 <IssueID>2511</IssueID>
 <Title>Since version APIs with @PathVariable are not picked up anymore due to Spring code</Title>
 <Description>In our project we are currently using spring and we recently upgraded to version of this library After upgrading we discovered that some of our APIs didn't appear anymore After some digging we discovered that an error was thrown and then caught which made troubleshooting difficult The issue is in the Parameter Required Reader class Its using fields in the Path Variable annotation that was introduced in Spring Using a lower Spring version triggers a Method Not Found exception In our case upgrading Spring is not an option As a work around we have extended the offending class modified the code Then we told Spring to use ours as Primary So we got it currently working There is a way for the code to do the same thing but without breaking compatibility This Annotation Utils is present for Spring since early version and certainly present in all of versions That utility class contains a method to get all annotation attributes as a Map In this case its useful to make some annotation changes backwards compatible like in this case 
</Description>
 <CreatedDate>25/06/2018</CreatedDate>
 <ClosedDate>13/07/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2465</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>rainoko</FixedByID>
 <Title>Forwarded Prefix should replace base Path in newer spring versions</Title>
 <Description> What s this PR do fix since spring x forwarded prefix replaces basePath  Are there unit tests If not how should this be manually tested there are unit tests Any background context you want to provide  What are the relevant issues 
</Description>
 <CreatedDate>05/06/2018</CreatedDate>
 <ClosedDate>12/06/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2465</PullRequestID>
 <IssueID>2448</IssueID>
 <Title>X Forwarded prefix not work as expected since spring version</Title>
 <Description>Springfox version problem appeared since spring version With issue fix of This issue modified Servlet Uri ComponentsBuilder to not use context path as suffix of X forwarded prefix value Instead now spring replaces path springfox prepends base path with x forwarded prefix in Host Name Provider
</Description>
 <CreatedDate>28/05/2018</CreatedDate>
 <ClosedDate>12/06/2018</ClosedDate>
 <Labels>
 <Label>maintenance</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2464</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>ctruzzi</FixedByID>
 <Title>Remove replace All with trim</Title>
 <Description> Whats this PR do fix Adds support for spaces in allowable Fields for Specifically Adds changes from to We don't need both changes from since line does the following Are there unit tests If not how should this be manually tested There were none prior Any background context you want to provide See What are the relevant issues  
</Description>
<code>Iterable&lt;String&gt; 
split = Splitter on(' ');</code>
 <CreatedDate>04/06/2018</CreatedDate>
 <ClosedDate>12/06/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2464</PullRequestID>
 <IssueID>1211</IssueID>
 <Title>Api Param allowable Values string with spaces</Title>
 <Description>APi Param annotation has a parameter allowable Value This takes a comma separated string But if i have a space in one of the values it is stripping it off Which is not good I can pass a string with spaces from the browser url So i should be able to pass it from swaagger UI as well I think the issue is with this line in Api Model Properties java file</Description>
 <code>
 allowableValueString = allowableValueString.trim().replaceAll(" ", "");
 </code>
 <CreatedDate>09/03/2016</CreatedDate>
 <ClosedDate>10/03/2016</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2464</PullRequestID>
 <IssueID>2446</IssueID>
 <Title>Api Param allowable Values string with spaces is not supported</Title>
 <Description>Hi APiParam annotation has a parameter allowableValue This takes a comma separated string But if i have a space in one of the values it is stripping it off Which is not good I can pass a string with spaces from the browser url So i should be able to pass it from swaagger UI as well I think the issue is with this line I found the below line in class Api Model Properties This issue was already discovered in previous versions and was fixed for version and in some future versions the bug was recreated Im currently using version Thanks
</Description>
<code>String trimmed = allowableValueString.trim().replaceAll(" ", "");</code>
 <CreatedDate>27/05/2018</CreatedDate>
 <ClosedDate>12/06/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2434</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>olOwOlo</FixedByID>
 <Title>Add csrf token support</Title>
 <Description> Whats this PR dofix Try to find csrf token and add it to the header of all requests by patching the request Interceptor The behavior is based on the configuration described in the spring security reference The following order is the order of finding the csrf token This implementation will always use the csrf token obtained the first time If necessary Maybe someone in the future can add the ability to configure these behaviors I dont know how to add options 😢 CSRF token within your meta tags The meta name must be csrf and csrf header is the page used to query meta data 
</Description>
<code>
    public CsrfToken csrf(CsrfToken token) {return token;}
 
 	protected void configure(HttpSecurity http) throws Exception {
 		csrfTokenRepository(CookieCsrfTokenRepository withHttpOnlyFalse());
 	}

</code>
 <CreatedDate>22/05/2018</CreatedDate>
 <ClosedDate>17/06/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2434</PullRequestID>
 <IssueID>1450</IssueID>
 <Title>Getting around CSRF in swagger-ui</Title>
 <Description>Please take the time to search the repository if your question has already been asked or answered What version of the library are you using Is it the latest version The latest released version is Download What kind of issue is this Question Question Is this a question about how to do a certain thing I have a spring MVC project and I m securing it with spring security and using Springfox to get swagger ui based documentation Everything works great except for CSRF failures when I try to access PUT POST APIs through the swagger UI If I disable csrf then it works fine for all APIs It will sometimes redirect me to the login page but one I am logged in I can access all of the apis fine on the Swagger UI page I ve been all over the web looking for a resolution and most of them involve changing the swagger ui page to add code for processing the CSRF headers which I d like to avoid One thing Ive noticed is that alot of the issues here that mention CSRF at all just searching the forum don t really address this because they are putting csrf disable in their config So I m left to wonder is there no good workaround and people are doing this just so they can use swagger in their spring project This seems like bad security policy Right now unless I can find another solution I m thinking of having separate configuration XMLs for deployment and development environments and turning CSRF on only for deployment so that I can still use swagger to test my APIs in the dev integration stage Is this the only solution or is there some kind of configuration I can apply to get swagger ui to process CSRF correctly I apologize if I ve overlooked something in the documentation but it doesn t seem to answer that question directly from what I ve seen </Description>
 <CreatedDate>15/08/2016</CreatedDate>
 <ClosedDate>25/09/2016</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2429</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>haelduksf</FixedByID>
 <Title>Remove output related to fixed issue</Title>
 <Description>I noticed some descriptions in my documentation like Size Min Max until gets fixed Looks like that was fixed back in and I see the correct minimum and maximum values for all of them so I opened and got rid of the generated message </Description>
 <CreatedDate>18/05/2018</CreatedDate>
 <ClosedDate>31/05/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2429</PullRequestID>
 <IssueID>1244</IssueID>
 <Title>Api Param Allowable values not displayed in Swagger API docs</Title>
 <Code> 
</Code>
 <Description>Version If e g ApiParam allowable Values is set it is never displayed in the API docs minLength maxLength It doesnt work directly for a Request parameter: &gt; will display minLength maxLength Can you pls check why this is missing for ApiParam </Description>
 <CreatedDate>30/03/2016</CreatedDate>
 <ClosedDate>28/05/2016</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2429</PullRequestID>
 <IssueID>2428</IssueID>
 <Title>description Size Min Max until gets fixed when param annotated with Min and or Max but is already fixed</Title>
 <Description> still contains the above message but was fixed in Will submit a fix shortly </Description>
 <CreatedDate>18/05/2018</CreatedDate>
 <ClosedDate>31/05/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2412</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>neil1hart</FixedByID>
 <Title>Removing Guava dependency</Title>
 <Description>This PR upgrades the library to Java and removes the Guava dependency Fix issue It is similar to PR The main reason is remove the transitive guava dependency for anything dependent on this library Incompatiblilites Updates from to as the minimum Java version Rebase pulled in master s java change Public API changes where guava constructs have been exposed Support for Guava Optional in API may have been lost What is missing I tried to limit the changed lines so there are many areas that can be cleaned up or refactored Cleanups Predicates Function can be written more compact with java Duplicate code like the replacement for Strings null To Empty 
</Description>
 <CreatedDate>11/05/2018</CreatedDate>
 <ClosedDate>30/06/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2412</PullRequestID>
 <IssueID>1082</IssueID>
 <Title>Replace Guava by java predicates function</Title>
 <Description>Hilast version of springfox rely on guava maily to apply predicates for path filtering Its an issue for a documentation tools like this to depend of a so hudge library I means we need this dependencies for swagger support for spring mvc endpoint This type of features are now supported natively by java ThxChristophe</Description>
 <CreatedDate>03/12/2015</CreatedDate>
 <ClosedDate>30/06/2018</ClosedDate>
 <Labels>
 <Label>help wanted</Label>
 <Label>maintenance</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2412</PullRequestID>
 <IssueID>2086</IssueID>
 <Title>Remove guava and use java constructs</Title>
 <Description>This PR removes the guava library dependency with java constructs Fix issue The main reason is that other code also uses guava in a incompatible version and guava is not always binary compatible Incompatiblilites This will update jdk from to as minimum version Binary incompatiblities Public API changes where guava constructs have been exposed What is missing Cleanups (Predicates Function can be written more compact with java Checked alternatives Using shading plugin to shade guava This makes each sub project artifact big due whole guava library has to be shaded into the artifact NOTE This PR replaces previous PR due unneeded changes regarding crlf </Description>
 <CreatedDate>02/11/2017</CreatedDate>
 <ClosedDate>30/06/2018</ClosedDate>
 <Labels>
 <Label>PR</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2404</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>andyRokit</FixedByID>
 <Title>Using media type to determine correct param type when expanding param</Title>
 <Description>  Whats this PR do fix This PR attempts to resolve by using the media type to determine the parameter type when expanding Are there unit tests If not how should this be manually tested The intentional change was made to Operation Parameter Reader Spec groovy I split the "Should expand Model Attribute request params test into two One for multipart one for non multipart I aimed to keep any other test changes to a minimum Any background context you want to provide What are the relevant issues 
 </Description>
 <CreatedDate>08/05/2018</CreatedDate>
 <ClosedDate>03/06/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2404</PullRequestID>
 <IssueID>2376</IssueID>
 <Title>Model attribute expansion should respect form query parameter type</Title>
 <Description>Reported by smthpickboyThe expanded parameters are always coming through with parameter type of query It should inspect the consumes media type and determine the type </Description>
 <CreatedDate>24/04/2018</CreatedDate>
 <ClosedDate>03/06/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2404</PullRequestID>
 <IssueID>2376</IssueID>
 <Title>Model attribute expansion should respect form query parameter type</Title>
 <Description>Reported by smthpickboy The expanded parameters are always coming through with parameter type of query It should inspect the consumes media type and determine the type </Description>
 <CreatedDate>24/04/2018</CreatedDate>
 <ClosedDate>03/06/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2356</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>nhtzr</FixedByID>
 <Title>Add tagvendor extensions</Title>
 <Description>This adds vendor extensions to Tag objects See </Description>
 <CreatedDate>13/04/2018</CreatedDate>
 <ClosedDate>13/04/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2356</PullRequestID>
 <IssueID>2293</IssueID>
 <Title>Added Vendor Extensions Support to Tag object</Title>
 <Description>Hi I'm trying to add an extension to the tag object However the field vendor Extentions does not seem to be available in springfox documentation service Tag Is there another way to add a x-something field in the final tag json Thank you</Description>
 <CreatedDate>11/03/2018</CreatedDate>
 <ClosedDate>13/04/2018</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2313</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>iles-2e</FixedByID>
 <Title>springfox data rest fix Entity Search Extractor returntype</Title>
 <Description> Whats this PR do fix This is a fix for Are there unit tests If not how should this be manually tested declaration spring data rest contract has been updated to reflect the changed behavior Any background context you want to provide find All and search methods should return the same type of result What are the relevant issues 
 </Description>
 <CreatedDate>20/03/2018</CreatedDate>
 <ClosedDate>13/04/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2313</PullRequestID>
 <IssueID>2311</IssueID>
 <Title>springfox data rest Inconsistent model returned between find All and search methods</Title>
 <Description>When using the latest snapshot of springfox data rest I found an inconsistent behavior between findAll and search methods Both methods return and produce the same JSON HAL similar to this: is already a collection wrapper I doubt it wraps a collection of additional collections I would gladly contribute a PR if this proves to be a bug indeed Any thoughts </Description>
<code>ResolvedType returnType = methodResolver.methodReturnType(handler);
if (Collections.isContainerType(returnType)) {
  return resolver.resolve(Resources.class, returnType);
} </code>
 <CreatedDate>19/03/2018</CreatedDate>
 <ClosedDate>12/04/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2313</PullRequestID>
 <IssueID>2311</IssueID>
 <Title>springfox data rest Inconsistent model returned between findAll and search methods</Title>
 <Description>When using the latest snapshot SNAPSHOT of springfox data rest I found an inconsistent behavior between findAll and search methods Both methods return List Entity and produce the same JSON HAL similar to this but springfox reports different models used For findAll method a Resources Entity is reported while for search method a Resources List Entity is reported In the contract for declaration spring data rest json it is also defined a similar example with Resources Of Person and Resources Of List Of Person while it should probably produce the same result Resources is already a collection wrapper I doubt it wraps a collection of additional collections I would gladly contribute a PR if this proves to be a bug indeed Any thoughts </Description>
 <CreatedDate>19/03/2018</CreatedDate>
 <ClosedDate>12/04/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2275</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>VasilievAleksey</FixedByID>
 <Title>Take the parameter name from attribute Request Partvalue</Title>
 <Description> What s this PR do fix This is a fix for issue  Are there unit tests If not how should this be manually tested I added the test in the test class Parameter Reader Spec What are the relevant issues Issue</Description>
 <CreatedDate>02/03/2018</CreatedDate>
 <ClosedDate>05/03/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2275</PullRequestID>
 <IssueID>2263</IssueID>
 <Title>Request Part name value attribute ignored</Title>
 <Code>
	public void endpoint(@RequestPart(name = "annotationName") MultipartFile parameterName) {
		
	} 
</Code>
 <Description> Summary the name value attribute of RequestPart is not used Springfox uses the method parameter name instead I would assume the method name should only be used if there is no name value otherwise the annotations value should be used Example Springfox version</Description>
 <CreatedDate>22/02/2018</CreatedDate>
 <ClosedDate>05/03/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2273</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>iles-2e</FixedByID>
 <Title>Feature spring</Title>
 <Description> Whats this PR do fix Updates dependencies to match those in Spring Boot spring Boot RELEASE RELEASE spring RELEASE RELEASE spring DataRest RELEASE RELEASE Minimum JDK version is updated to Spring requirement Are there unit tests If not how should this be manually tested No new methods were added nor was any method removed thus no new unit tests Code fixes were limited to fixing API incompatible changes after the upgrade Any background context you want to provide My motivation was to make Springfox work in a Spring environment I m using it in a project running Spring MVC and Spring Data Rest Kay What are the relevant issues 
</Description>
 <CreatedDate>01/03/2018</CreatedDate>
 <ClosedDate>11/07/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2273</PullRequestID>
 <IssueID>1773</IssueID>
 <Title>Spring 5 support</Title>
 <Description>Or are there plans to support it </Description>
 <CreatedDate>16/04/2017</CreatedDate>
 <ClosedDate>11/07/2018</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2273</PullRequestID>
 <IssueID>1957</IssueID>
 <Title>springfox doesnt work with spring boot and spring data Kay RC2</Title>
 <Code>
</Code>
<stacktrace>Caused by: java lang NoSuchMethodError: org springframework data repository support Repositories getRepositoryInformationFor(Ljava/lang/Class;)Lorg/springframework/data/repository/core/RepositoryInformation;
	at springfox documentation spring data rest EntityServicesProvider requestHandlers(EntityServicesProvider java:81) ~[springfox-data-rest-2 7 0 jar:2 7 0]
	at springfox documentation spring web plugins DocumentationPluginsBootstrapper$2 apply(DocumentationPluginsBootstrapper java:129) ~[springfox-spring-web-2 7 0 jar:2 7 0]
	at springfox documentation spring web plugins DocumentationPluginsBootstrapper$2 apply(DocumentationPluginsBootstrapper java:126) ~[springfox-spring-web-2 7 0 jar:2 7 0]
	at com google common collect Iterators$8 transform(Iterators java:799) ~[guava-18 0 jar:na]
	at com google common collect TransformedIterator next(TransformedIterator java:48) ~[guava-18 0 jar:na]
	at com google common collect TransformedIterator next(TransformedIterator java:48) ~[guava-18 0 jar:na]
	at com google common collect Iterators$5 hasNext(Iterators java:548) ~[guava-18 0 jar:na]
	at com google common collect ImmutableCollection$Builder addAll(ImmutableCollection java:300) ~[guava-18 0 jar:na]
	at com google common collect ImmutableList$Builder addAll(ImmutableList java:691) ~[guava-18 0 jar:na]
	at com google common collect ImmutableList copyOf(ImmutableList java:275) ~[guava-18 0 jar:na]
	at com google common collect ImmutableList copyOf(ImmutableList java:226) ~[guava-18 0 jar:na]
	at com google common collect FluentIterable toList(FluentIterable java:373) ~[guava-18 0 jar:na]
	at springfox documentation spring web plugins DocumentationPluginsBootstrapper defaultContextBuilder(DocumentationPluginsBootstrapper java:100) ~[springfox-spring-web-2 7 0 jar:2 7 0]
	at springfox documentation spring web plugins DocumentationPluginsBootstrapper buildContext(DocumentationPluginsBootstrapper java:91) ~[springfox-spring-web-2 7 0 jar:2 7 0]
	at springfox documentation spring web plugins DocumentationPluginsBootstrapper start(DocumentationPluginsBootstrapper java:154) ~[springfox-spring-web-2 7 0 jar:2 7 0]
	at org springframework context support DefaultLifecycleProcessor doStart(DefaultLifecycleProcessor java:183) ~[spring-context-5 0 0 RC3 jar:5 0 0 RC3]</stacktrace>
 <Description>What version of the library are you using I am using latest released version What kind of issue is this Feature Request Springfox support for spring data rest covered inside spring data KAY RC When I am using Springfox with Spring boot M and Spring Data release train KAY RC it is showing me the error like below Thanks </Description>
 <CreatedDate>31/07/2017</CreatedDate>
 <ClosedDate>03/01/2018</ClosedDate>
 <Labels>
 <Label>duplicate</Label>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2258</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>atsu85</FixedByID>
 <Title>Issue 2257 fix default file encoding related failures</Title>
 <Description> Whats this PR do fix This PR fixes two tests that fail on windows reported with Are there unit tests If not how should this be manually tested No production code just fix for unit test Any background context you want to provide This only fixes some tests reported with there are other tests that still fail on windows doesn't make any other previously successful tests fail What are the relevant issues 
 </Description>
 <CreatedDate>20/02/2018</CreatedDate>
 <ClosedDate>28/02/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2258</PullRequestID>
 <IssueID>2257</IssueID>
 <Title>Tests fail on windows</Title>
 <Description>What version of the library are you using latest master commit bcf but the same applies for version tag commit b d c What kind of issue is this Bug report there are test failures when running tests on Windows using gradlew clean build Doesnt matter if using Java or java also tried Java but that didnt work because of Gradle version 
</Description>
 <CreatedDate>20/02/2018</CreatedDate>
 <ClosedDate>28/02/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2258</PullRequestID>
 <IssueID>2257</IssueID>
 <Title>Tests fail on windows</Title>
 <Description>  What version of the library are you using latest master commit but the same applies for version tag What kind of issue is this 
</Description>
 <CreatedDate>20/02/2018</CreatedDate>
 <ClosedDate>28/02/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2233</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>deblockt</FixedByID>
 <Title>Feature web flux</Title>
 <Description> Whats this PR do fix This PR provide a webflux support Are there unit tests If not how should this be manually tested Curently existing unit tests are failed I don t understand why I need help on this part I have not already add unit test for webflux support Any background context you want to provide I have remove spring dependency to springfox core This can create some breaking change for thrid part libs What are the relevant issues see </Description>
 <CreatedDate>06/02/2018</CreatedDate>
 <ClosedDate>18/08/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2233</PullRequestID>
 <IssueID>1773</IssueID>
 <Title>Spring 5 support</Title>
 <Description>Or are there plans to support it </Description>
 <CreatedDate>16/04/2017</CreatedDate>
 <ClosedDate>11/07/2018</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2225</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>kasecato</FixedByID>
 <Title>Added support for IE and Edge</Title>
 <Description> Whats this PR do fix Springfox Swagger UI IE Edge Support Are there unit tests If not how should this be manually tested Any background context you want to provide I did not support IE but the user existed What are the relevant issues </Description>
 <CreatedDate>02/02/2018</CreatedDate>
 <ClosedDate>04/02/2018</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2225</PullRequestID>
 <IssueID>2216</IssueID>
 <Title>Springfox Swagger UI IE Edge Support</Title>
 <Description>We just upgraded from to and we have a problem when opening swagger ui in IE and Edge The error comes from the script springfox js which is written in ES with arrow functions and async await The problem is that IE does not support arrow functions and Edge does not support async await Are those browsers still supposed to be supported Thank you </Description>
 <CreatedDate>30/01/2018</CreatedDate>
 <ClosedDate>04/02/2018</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
  </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2153</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>kasecato</FixedByID>
 <Title>Upgrading Swagger UI to</Title>
 <Description>Whats this PR do fix I upgraded swagger ui from to I fixed only the front end I want someone to fix the back end And I have not handled the error yet Are there unit tests If not how should this be manually tested Browser compatibility Any background context you want to provide I started using this great library at work from this month I thought the UI was old for me so I fixed it What are the relevant issues The lasted version supported for swagger x Status of support for v of swagger UI Upgrade to swagger ui Upgrade to latest version of swagger ui 
</Description>
 <CreatedDate>16/12/2017</CreatedDate>
 <ClosedDate>28/12/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2153</PullRequestID>
 <IssueID>1870</IssueID>
 <Title>The lasted version supported for Swagger UI</Title>
 <Description>The swagger has upgraded to Is it spring fox supported the swagger Or when can support it  
</Description>
 <CreatedDate>16/06/2017</CreatedDate>
 <ClosedDate>03/01/2018</ClosedDate>
 <Labels>
 <Label>help wanted</Label>
 <Label>maintenance</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2153</PullRequestID>
 <IssueID>1729</IssueID>
 <Title>Status of support for of Swagger UI</Title>
 <Description>I know that the new version of the swagger UI came out yesterday I m wondering if there is development effort behind supporting it What is the status of such development Really nice job on this project Really solid project </Description>
 <CreatedDate>20/03/2017</CreatedDate>
 <ClosedDate>28/12/2017</ClosedDate>
 <Labels>
 <Label>duplicate</Label>
 <Label>feature</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2153</PullRequestID>
 <IssueID>1960</IssueID>
 <Title>Upgrade to swagger ui</Title>
 <CreatedDate>01/08/2017</CreatedDate>
 <ClosedDate>28/12/2017</ClosedDate>
 <Labels>
 <Label>duplicate</Label>
 <Label>feature</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2153</PullRequestID>
 <IssueID>2000</IssueID>
 <Title>Upgrade to latest version of Swagger UI</Title>
 <Description>Hi Are there any plans to upgrade to the latest swagger ui We use springfox swagger ui and are facing some issues most importantly: Thanks</Description>
 <CreatedDate>25/08/2017</CreatedDate>
 <ClosedDate>03/01/2018</ClosedDate>
 <Labels>
 <Label>duplicate</Label>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2106</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>filiphr</FixedByID>
 <Title>Add support for exclusive range shandling</Title>
 <Description>Fixes This PR adds support for handling exclusive range</Description>
 <CreatedDate>15/11/2017</CreatedDate>
 <ClosedDate>13/12/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2106</PullRequestID>
 <IssueID>2088</IssueID>
 <Title> Api Param allowable Values range infinity does not work</Title>
 <Description>As explained in the issue excluisve min max does not work I am using This looks like explicitly not supported in springfox See Api Model properties There is only check for range and nothing for range Is there a reason why this is not supported especially as it looks like a pretty simple thing to be supported </Description>
 <CreatedDate>03/11/2017</CreatedDate>
 <ClosedDate>13/12/2017</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>2040</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>Thunderforge</FixedByID>
 <Title>Use Guava throughout the project</Title>
 <Description> What s this PR do fix Fixes by setting buildSrc build gradle to use the same Guava version as gradle dependencies gradle github com springfox springfox blob gradle dependencies gradle L Are there unit tests If not how should this be manually tested This can be tested with existing unit tests Any background context you want to provide Guava is the last version that supports Java so there should be no compatibility concerns What are the relevant issues No known issues with this pull request </Description>
 <CreatedDate>15/09/2017</CreatedDate>
 <ClosedDate>17/09/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>maintenance</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>2040</PullRequestID>
 <IssueID>1833</IssueID>
 <Title>Different guava versions in dependencies</Title>
 <Description>Version Output of maven enforcer plugin
</Description>
 <CreatedDate>23/05/2017</CreatedDate>
 <ClosedDate>17/09/2017</ClosedDate>
 <Labels>
 <Label>maintenance</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1956</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>heapifyman</FixedByID>
 <Title>Api Model Property example string does not escape char from JSON example</Title>
 <Description>fixes Api Model Property example string does not escape char from JSON example
</Description>
 <CreatedDate>30/07/2017</CreatedDate>
 <ClosedDate>30/07/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1956</PullRequestID>
 <IssueID>1941</IssueID>
 <Title>swagger ui does not remove java string escape char from Api Model Property example</Title>
 <Code>
</Code>
 <Description>Using version of springfox swagger and springfox swagger ui with spring boot RELEASE I have defined some example value in Api Model Property like this as part of a model for a body param The escape chars are kept in swagger ui s Example Value so that when clicking on it to paste the Example Value into body param value for testing the REST endpoint the escape chars are still included thus transmitting invalid JSON to the endpoint </Description>
 <CreatedDate>25/07/2017</CreatedDate>
 <ClosedDate>30/07/2017</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1943</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>mathieuales</FixedByID>
 <Title>Wrong API resource path in Swagger</Title>
 <Description>Fix issue wrong API resource path</Description>
 <CreatedDate>26/07/2017</CreatedDate>
 <ClosedDate>17/09/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1943</PullRequestID>
 <IssueID>1880</IssueID>
 <Title>Wrong API resource path in Swagger</Title>
 <Code> @ApiOperation(value = "global API status")
        public ResponseEntity getStatus() {
              return "";
        }
</Code>
 <Description>Hi Im using springfox swagger with springboot It seems that the resource Path in the generated swagger json of a controller having only one operation is not the one defined using annotations   resource Path should be supervision as defined in Request Mapping annotation  Moving to Swagger is not an option for now as Im working on an old API always returning HTTP OK with body containing success or error responses
</Description>
 <CreatedDate>22/06/2017</CreatedDate>
 <ClosedDate>17/09/2017</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1914</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>simonamc</FixedByID>
 <Title>Provide proprty pattern annotation support</Title>
 <Description>Pattern Bean Validations API JSR support for Request Parameters</Description>
 <CreatedDate>12/07/2017</CreatedDate>
 <ClosedDate>30/07/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1914</PullRequestID>
 <IssueID>1901</IssueID>
 <Title>Pattern Bean Validations API JSRsupport for Request Parameters</Title>
 <Description>It looks like aded support for Min Max NotNull and Size validators these are working great although should they be added to Bean Validator Plugins Configuration as per schema plugins We would like to document parameter regex too with the Pattern annotation I dont see such a plugin in sprinfox bean validators springfox bean validators plugins parameter I can see that this would be trickier to implement than the other validators as springfox documentation builders ParameterBuilder and springfox documentation service Parameter are also missing pattern fields Is there a reason for the exclusion of this If I found time to implement this would a pull request be welcome We can almost work around this using vendor Extensions but looks like they arent mapped as already tracked by Cheers </Description>
 <CreatedDate>06/07/2017</CreatedDate>
 <ClosedDate>30/07/2017</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1897</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>naXa777</FixedByID>
 <Title>Correct spelling and typos</Title>
 <Description> Whats this PR do fix Fixes all automatically discovered typos in code This PR doesn t introduce new features and (I hope so) new bugs Are there unit tests If not how should this be manually tested There s no new unit tests What are the relevant issues Closes </Description>
 <CreatedDate>02/07/2017</CreatedDate>
 <ClosedDate>04/07/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1897</PullRequestID>
 <IssueID>1896</IssueID>
 <Title>Wrong spelling and typos in code</Title>
 <Description>This issue is not a feature request or bug report There are some typos in SpringFox documentation as well as in its source code And I d like to fix them with the help of IntelliJ IDEA spellchecker Examples  Reference Documentation  Contribution guidelines  PetController I m not sure what to do with typos in public method names since renaming them may introduce breaking changes in API E g Orderings api Path Compatator </Description>
 <CreatedDate>02/07/2017</CreatedDate>
 <ClosedDate>04/07/2017</ClosedDate>
 <Labels>
 <Label>maintenance</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1761</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>jkgentry</FixedByID>
 <Title>Vendor Extensions for API Info and Documentation</Title>
 <Description> Whats this PR do fix Adds vendor extensions to API Info and Documentation  Are there unit tests  If not how should this be manually tested Unit tests have been updated Unsure if more need to be added or not  Any background context you want to provide Allow for adding vendor extensions to API Info and the base documentation  What are the relevant issues 
</Description>
 <CreatedDate>07/04/2017</CreatedDate>
 <ClosedDate>12/04/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1761</PullRequestID>
 <IssueID>1413</IssueID>
 <Title>Ability to set VendorExtensions on ApiInfo </Title>
 <Description>The Swagger specification states that vendor extensions are applicable to multiple parts in a definition Currently it appears springfox only supports vendor extensions at the Operation level Is there a good way to apply vendor extensions in the other places the Swagger spec allows perhaps using a plugin or would this be new functionality </Description>
 <CreatedDate>25/07/2016</CreatedDate>
 <ClosedDate>12/04/2017</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1702</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>psyho</FixedByID>
 <Title>Make Api Resource Controller methods public</Title>
 <Description> Whats this PR do fix Closes Are there unit tests If not how should this be manually tested This PR only changes the visibility of methods it does not affect the functionality of the project in any other way Any background context you want to provide Context described in the issue For convenience I'm quoting it here Api Resource Controller is a public class with no public methods in it It would be useful to make the actions that it defines public In my use case I need to put certain additional annotations on these methods to make them publicly visible to our routing library I'd like to either be able to inherit from the class or delegate to the controller instance from my own controller to achieve this but with the code as is I have to define my class within the springfox documentation swagger web package What are the relevant issues 
</Description>
 <CreatedDate>02/03/2017</CreatedDate>
 <ClosedDate>05/03/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1702</PullRequestID>
 <IssueID>1701</IssueID>
 <Title>Make Api Resource Controller methods public</Title>
 <Description> Api Resource Controller ( is a public class with no public methods in it It would be useful to make the actions that it defines public In my use case I need to put certain additional annotations on these methods to make them publicly visible to our routing library I d like to either be able to inherit from the class or delegate to the controller instance from my own controller to achieve this but with the code as is I have to define my class within the springfox documentation swagger web package </Description>
 <CreatedDate>02/03/2017</CreatedDate>
 <ClosedDate>05/03/2017</ClosedDate>
 <Labels>
 <Label>maintenance</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1702</PullRequestID>
 <IssueID>1701</IssueID>
 <Title>Make Api Resource Controller methods public</Title>
 <Description>Api Resource Controller is a public class with no public methods in it It would be useful to make the actions that it defines public In my use case I need to put certain additional annotations on these methods to make them publicly visible to our routing library Id like to either be able to inherit from the class or delegate to the controller instance from my own controller to achieve this but with the code as is I have to define my class within the springfox documentation swagger web package </Description>
 <CreatedDate>02/03/2017</CreatedDate>
 <ClosedDate>05/03/2017</ClosedDate>
 <Labels>
 <Label>maintenance</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1699</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>asdcdow</FixedByID>
 <Title>Make Swagger Controller respect base Path even if a host is not set</Title>
 <Description>This fixes
</Description>
 <CreatedDate>01/03/2017</CreatedDate>
 <ClosedDate>06/03/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1699</PullRequestID>
 <IssueID>1435</IssueID>
 <Title>Setting a Custom basePath Requires Setting a Static Host in </Title>
 <Description>I have a Spring MVC application that can be reached URLs like This So in order to fix that I created a custom Path Provider that removes the servlet context from the URL This works fine in Springfox but appears to have been broken in by Now the custom path generated by the PathProvider is ignored unless I explicitly set a host as well I cant set a host because my application is served under multiple domains so I want Springfox to continue to dynamically determine the host </Description>
 <CreatedDate>03/08/2016</CreatedDate>
 <ClosedDate>06/03/2017</ClosedDate>
 <Labels>
 <Label>bug</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1699</PullRequestID>
 <IssueID>1507</IssueID>
 <Title>Broken basePath with Abstract Path Provider in version of springfox swagger</Title>
 <Code>
 Swagger swagger = mapper.mapDocumentation(documentation);
    if (isNullOrEmpty(swagger.getHost())) {
      final UriComponents uriComponents = componentsFrom(servletRequest);
      swagger.basePath(Strings.isNullOrEmpty(uriComponents.getPath()) ? "/" : uriComponents.getPath());
      swagger.host(hostName(uriComponents));
    }
</Code>
 <Description>Version same in Bug AbstractPathProvider extension point is broken for swagger due to this code block in Swagger Controller </Description>
 <CreatedDate>04/10/2016</CreatedDate>
 <ClosedDate>06/03/2017</ClosedDate>
 <Labels>
 <Label>bug</Label>
 <Label>duplicate</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1693</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>pjskyboy</FixedByID>
 <Title>Fix for https github com springfox springfox issues</Title>
 <Description>Hi springfox great library Was trying out the updated integration with spring data rest to generate swagger UI for my project but hit the issue 1653 This is my first ever open source pull request so I expect rejection but here is my offering What s this PR do fix Fix for Are there unit tests If not how should this be manually tested No new tests but ran ran the full springfox build and tests and no failures were reported not sure how I run the groovy tests in springfox spring web that appear to test the updated code in coverage mode so I could see what tests actually execute the altered code (if any) Any background context you want to provide Trying to use swagger to auto document my spring data rest APIs but was hitting the bug described by What are the relevant issues 
</Description>
 <CreatedDate>25/02/2017</CreatedDate>
 <ClosedDate>25/02/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1693</PullRequestID>
 <IssueID>1653</IssueID>
 <Title>springfox data rest spring data rest Repository Rest Handler Mapping constructor broken</Title>
 <Description>Informational This appears to be a spring dat-rest issue Entity Services Provider creates Repository Rest Handler Mapping using a broken arg constructor springfox data rest spring data rest </Description>
<CreatedDate>01/02/2017</CreatedDate>
 <ClosedDate>25/02/2017</ClosedDate>
 <Labels>
 <Label>maintenance</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1667</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>madgnome</FixedByID>
 <Title>allowable Values blank for Optional Enum parameter</Title>
 <Description>This PR fixes</Description>
 <CreatedDate>09/02/2017</CreatedDate>
 <ClosedDate>11/02/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1667</PullRequestID>
 <IssueID>1666</IssueID>
 <Title>Allowable Values blank for Optional Enum parameter</Title>
 <Description>Given the following method with Image Scale Factor as an optional enum parameter Doesnt resolve the issue </Description>
 <CreatedDate>09/02/2017</CreatedDate>
 <ClosedDate>11/02/2017</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1593</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>gonzalad</FixedByID>
 <Title>OAuth not initialized when client Secret undefined</Title>
 <Description> Whats this PR do fix fix for OAuth client Secret shouldnt be required for implicit flow Are there unit tests If not how should this be manually tested Manually tested the issue is in js code Any background context you want to provide See What are the relevant issues When client Secret is set to null on the server side the client side doesnt initialize any OAuth values Problem is that client Secret is not used in some oauth flow i e implicit flow The URL generated to initiate OAuth authentication flow contains an undefined client id parameter </Description>
 <CreatedDate>01/12/2016</CreatedDate>
 <ClosedDate>14/02/2017</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1593</PullRequestID>
 <IssueID>1592</IssueID>
 <Title>OAuth2 client Secret shouldnt be required for implicit flow</Title>
 <Description>I m using OAuth implicit flow and there s an issue when I set clientSecret to null the URL generated from swagger js for starting the OAuth authentication flow contains an undefined client id on serverside clientId is not empty Sample URL The issue appears to be in OAuth is initialized only if clientSecret is set What version of the library are you using but the LOC in question is also in Thanks Adrian Additional resources Here s the JSON returned from swagger resources configuration security 
</Description>
 <CreatedDate>01/12/2016</CreatedDate>
 <ClosedDate>14/02/2017</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
  </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1546</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>cbornet</FixedByID>
 <Title>Addnative support for jdk jsr date types</Title>
 <Description>Fix</Description>
 <CreatedDate>25/10/2016</CreatedDate>
 <ClosedDate>26/10/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1546</PullRequestID>
 <IssueID>1544</IssueID>
 <Title>Feature request types support</Title>
 <Code> 
void maybeAddJava8DateTypes(Docket docket) {
      if (jdk8) {
        docket.directModelSubstitute(Class.forName("java.time.LocalDate"), java.sql.Date.class);
        //More
      }
}
</Code>
 <Description>Today we need to map types to corresponding java util Date and java sql Date in the docket configuration usingI think it is easy to provide these mappings by default by adding Alternate Type Rule rules in springfox documentation spi service contexts Defaults like has been done for java util Optional I can do the PR if OK </Description>
 <CreatedDate>25/10/2016</CreatedDate>
 <ClosedDate>26/10/2016</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1529</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>jimhooker2002</FixedByID>
 <Title>Suggested fx for Adding Models using Api Implicit Param Allow</Title>
 <Description>This PR suggests a fix for Adding Models using Api Implicit Param It allows class names to be used in addition to basic types within the Api Implicit Param annotation There are no unit tests currently I scratched this out as a suggestion design review I have tested it on my local machine and have observed swagger ui now correctly presenting the model suggested by the annotation when a class name is given So the code has passed a basic smoke test If this approach looks sensible then I ll happily add unit tests and resubmit the pull request 
</Description>
 <CreatedDate>18/10/2016</CreatedDate>
 <ClosedDate>25/10/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1529</PullRequestID>
 <IssueID>468</IssueID>
 <Title>Adding Models using Api ImplicitParam</Title>
 <Description>I would like to add a Model to the models array in the generated swagger json I am defining a param on my controller via the Api Implicit Param annotation The resulting operation parameter json looks correct it states the data type is Options but there is no Options model in my models array Api Implicit Params value Api Implicity Param name options paramType form data Type Options required false The generated operation parameter looks good name options description options defaultValue required false type Options paramType form allowMultiple false paramAccess but the models section is empty models I ve tried the annotation with the datatype using the fully qualified class name and also using just the simple name Neither value results in the model being added to the generated json I also tried adding an Override Converter to the Model Converters to try to map Options to my model definition but that didn t make a difference but felt like the right direction How can I add my model to the swagger json Is there a way to add it explictly via another annotation or via code on the Swagger Spring MVC Plugin or Swagger Global Settings I don t really want to put the parameter in my controller s method signature as i m currently pulling it out from the Http Servlet Request it is optional and I don t want any failure in parsing to raise an exception Api Implicit Param seemed like a perfect fit A side note the Api Implicit Param annotation is a little different than the others because it takes the data Type as a String value instead of a Class It would be nice if it was consistent but that change would have to be upstream in swagger core </Description>
 <CreatedDate>23/10/2014</CreatedDate>
 <ClosedDate>02/12/2014</ClosedDate>
 <Labels>
 <Label>has-workaround</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1498</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>orevial</FixedByID>
 <Title>Add paths Grouped By configuration of Swagger Markup</Title>
 <Description>This PR adds a missing with Paths Grouped By configuration method to enable configuration of Swagger paths e g controllers methods can get sorted by TAGS instead of default AS IS config This PR will be probably be useless once swagger markup gets updated to its last version see issue but in the meantime this should be a simple and convenient add </Description>
 <CreatedDate>27/09/2016</CreatedDate>
 <ClosedDate>04/10/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1498</PullRequestID>
 <IssueID>1497</IssueID>
 <Title>springfox static docs Update to last swagger markup version</Title>
 <Description>Currently springfox staticdocs module depends on an old version of swagger markup github robwin swagger markup but it has been released in new versions the last one being A lot of code has changed in swagger markup between the versions but using last lib version would allow for more customization of the Swagger Markup Result Handler configuration </Description>
 <CreatedDate>27/09/2016</CreatedDate>
 <ClosedDate>24/02/2017</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1486</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>apixandru</FixedByID>
 <Title>remove duplicate enum values</Title>
 <Description>This PR fixes I added the unit test inside Enums Spec I wanted to validate the api docs generated value in the editor and it kept failing because of non-unique values in enums Swagger Error Array items are not unique indexes and 
</Description>
 <CreatedDate>12/09/2016</CreatedDate>
 <ClosedDate>12/09/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1486</PullRequestID>
 <IssueID>1485</IssueID>
 <Title>Remove duplicate values in enum displays case insensitive</Title>
 <Description>One of the reasons why the generated api docs doesnt work in the swagger editor is the Http Status enum </Description>
 <CreatedDate>12/09/2016</CreatedDate>
 <ClosedDate>12/09/2016</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1474</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>sworisbreathing</FixedByID>
 <Title>Merge method level and class level Api Responses annotations </Title>
 <Description> Whats this PR do fix Merges Api Responses annotations from method level and type level at least when annotated in the same class Method level annotations take priority over type level annotations  Are there unit tests If not how should this be manually tested I have updated AnnotationsSpec to verify the behavior when the annotations are defined in the same class I have not tested subclassing behavior I have also manually tested against the example project I created for https github com sworisbreathing springfox issues  Any background context you want to provide See  What are the relevant issues 
</Description>
 <CreatedDate>30/08/2016</CreatedDate>
 <ClosedDate>31/08/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1474</PullRequestID>
 <IssueID>1465</IssueID>
 <Title>Type level Api Responses are ignored</Title>
 <Description>Swagger core allows the Api Responses annotation to be declared at either the type level or the method level and the javadoc for Api Response says that class level annotations will be parsed only if an ApiResponse annotation with the same code is not defined at method level or in thrown ExceptionHowever it seems that springfox only handles the ApiResponses annotation when it is declared at method level even when using use Default Response Messages false Ive created a sample app to reproduce the issue There are two copies of the same API but one has the ApiResponses annotation on the class declaration and the other has it at only the method level To reproduce clone Start application via mvn spring boot run Open URL swagger specs or html version Only the successful response is shown for /type level annotation api endpoints while method level annotation api endpoints have both the success and failure responses shown This issue is somewhat similar to except that I'm using the current release of springfox as of this writing and the issue is specific to having the ApiResponses annotation on the class instead of the method I think there were a few other issues opened requesting a common place to define error responses and while its great that there's a place to put this globally as noted in this still feels like a bug </Description>
 <CreatedDate>23/08/2016</CreatedDate>
 <ClosedDate>31/08/2016</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1474</PullRequestID>
 <IssueID>1465</IssueID>
 <Title>Type level Api Responses are ignored</Title>
 <Description>Swagger core allows the Api Responses annotation to be declared at either the type level or the method level and the javadoc for Api Response says that class level annotations will be parsed only if an Api Response annotation with the same code is not defined at method level or in thrown Exception However it seems that springfox only handles the Api Responses annotation when it is declared at method level even when using use Default Response Messages false Ive created a sample app to reproduce the issue There are two copies of the same API but one has the Api Responses annotation on the class declaration and the other has it at only the method level To reproduce clone Start application via mvn spring boot run Open URL swagger specs or html version Only the successful response is shown for type level annotation api endpoints while method level annotation api endpoints have both the success and failure responses shown This issue is somewhat similar to except that I'm using the current release of springfox as of this writing and the issue is specific to having the Api Responses annotation on the class instead of the method I think there were a few other issues opened requesting a common place to define error responses and while its great that there's a place to put this globally as noted in this still feels like a bug </Description>
 <CreatedDate>23/08/2016</CreatedDate>
 <ClosedDate>31/08/2016</ClosedDate>
 <Labels>
 <Label>feature</Label>
 <Label>help wanted</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1470</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>MaksimOrlov</FixedByID>
 <Title>Supporting for hidden attribute of Api Paramand Api Model Property annotations </Title>
 <Description> PR introduces functionality that will support hidden attributes Unit test is provided Related issue is 
</Description>
 <CreatedDate>26/08/2016</CreatedDate>
 <ClosedDate>27/08/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1470</PullRequestID>
 <IssueID>1382</IssueID>
 <Title>Api Model Property set hidden with true not work when I Use ModelAttribute Annotation</Title>
 <Description>Good evening! I found @ApiModelProperty(hidden=true) is not work on my spring mvc project when I use @ModelAttribute annotation the springfox version is 2 5 0 the model is like this public class QueryOrder { @ApiModelProperty(hidden = true) private Integer uid; public Integer getUid() { return uid; } public void setUid(Integer uid) { this uid = uid; }}the spring mvc controller is like this @RequestMapping(value = "list" method = RequestMethod GET)@ApiImplicitParams({ @ApiImplicitParam(name = "token" value = "token" dataType = "java lang String" paramType = "header") @ApiImplicitParam(name = "pageNo" value = "pageNo" example = "1" dataType = "java lang Integer" paramType = "query") @ApiImplicitParam(name = "pageSize" value = "pageSize" example = "10" dataType = "java lang Integer" paramType = "query") })public Object list(Token token Page page @ModelAttribute QueryOrder queryParam){ }the uid property is still show in the api document I don't konw what I did wrong </Description>
 <CreatedDate>09/07/2016</CreatedDate>
 <ClosedDate>25/09/2016</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1456</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>ssevertson</FixedByID>
 <Title>java sql DateshouldbecomeadateinJSONSchemaoutputaccordingtodocs</Title>
 <Description>Fixes issue 1337 
</Description>
 <CreatedDate>17/08/2016</CreatedDate>
 <ClosedDate>27/08/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1456</PullRequestID>
 <IssueID>1337</IssueID>
 <Title>java sql Date should translate to format date instead of date time </Title>
 <Description>The documentation states that you should use java sql Date if you want swagger to turn that into type string with format date This works fine with springfox-swagger2 version 2 4 0 but with 2 5 0 you get format date-time This is always reproducable using either using sql Date directly@ApiModelProperty(value = "YYYY-MM-DD e g 2015-01-16")public java sql Date mydate;or by specifying a dataType @ApiModelProperty(dataType = "java sql Date" value = "YYYY-MM-DD e g 2015-01-16")public LocalDate mydate;or - as suggested by the documentation - via fixed substitutiondirectModelSubstitute(LocalDate class java sql Date class)</Description>
 <CreatedDate>10/06/2016</CreatedDate>
 <ClosedDate>25/09/2016</ClosedDate>
 <Labels>
 <Label>maintenance</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1386</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>miborra</FixedByID>
 <Title>Modified how to set json Editor parameter</Title>
 <Description> What s this PR do fix This PR modifies how to set jsonEditor parameter to solve problem related on task Are there unit tests If not how should this be manually tested No there aren t To test it you should configure UiConfiguration with enableJsonEditor parameter to false In swagger page the button Try it shouldn t be accesible Any background context you want to provide No What are the relevant issues 
</Description>
 <CreatedDate>13/07/2016</CreatedDate>
 <ClosedDate>13/07/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1386</PullRequestID>
 <IssueID>1373</IssueID>
 <Title>JSON Editor Error</Title>
 <Description>I have an Spring Boot application and I have followed the Springfox integration guide but the Swagger UI is not rendering the API The console of the browser shows the error below jsoneditor min js Uncaught Error element should be an instance of Element Note the URL returns the full API spec in JSON format so sure is a problem in SwaggerUI Any idea or help Thanks in advance</Description>
 <CreatedDate>05/07/2016</CreatedDate>
 <ClosedDate>13/07/2016</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1386</PullRequestID>
 <IssueID>1373</IssueID>
 <Title>JSON Editor Error</Title>
 <Description>I have an Spring Boot application and I have followed the Springfox integration guide but the SwaggerUI is not rendering the API The console of the browser shows the error below json editor min js Uncaught Error element should be an instance of Element Note the URL returns the full API spec in JSON format so sure is a problem in SwaggerUI Any idea or help Thanks in advance</Description>
 <CreatedDate>05/07/2016</CreatedDate>
 <ClosedDate>13/07/2016</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1316</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>ashutosh-shirole</FixedByID>
 <Title>Adding Pattern annotation support</Title>
 <Description>Whats this PR do fix Provide support for Pattern annotation of JSR Are there unit tests If not how should this be manually tested There are new Unit tests added for Pattern tests Similar to Size Annotation plugin Any background context you want to provide Some changes had to be made in core module Model Property Builder ModelProperty from springfox core and Model Mapper from springfox swagger and their tests had to be changed What are the relevant issues and 
</Description>
 <CreatedDate>17/05/2016</CreatedDate>
 <ClosedDate>20/05/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1316</PullRequestID>
 <IssueID>1296</IssueID>
 <Title>Support for JSR Pattern annotation</Title>
 <Description>For starters this is a great library and has been of great help I am currently using version and springfox bean validators plugin for JSR bean validation annotations @NotNull @Min @Max Have seen [ 356]( and comments on [this]( commit which states the support for @Pattern annotation is not available I could not find Model Property Builder Plugin for Pattern annotation Am I missing out on something or this annotation is not yet supported </Description>
 <CreatedDate>02/05/2016</CreatedDate>
 <ClosedDate>20/05/2016</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1316</PullRequestID>
 <IssueID>1296</IssueID>
 <Title>Support for JSR Pattern annotation</Title>
 <Description>For starters this is a great library and has been of great help I am currently using version and springfox bean validators plugin for JSR bean validation annotations @NotNull @Min @Max Have seen [ ]( and comments on [this]( commit which states the support for @Pattern annotation is not available I could not find Model Property Builder Plugin for Pattern annotation Am I missing out on something or this annotation is not yet supported </Description>
 <CreatedDate>02/05/2016</CreatedDate>
 <ClosedDate>20/05/2016</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1316</PullRequestID>
 <IssueID>1314</IssueID>
 <Title>Support for JSR Pattern annotation</Title>
 <Description> Whats this PR do fix It introduces a basic support of Pattern annotation It was discussed in the issue  Are there unit tests If not how should this be manually tested Yes added unit tests similar to already existed for Size Annotation Plugin Additionally I tested it locally in project that uses Springfox for document generation The result YAML file contained pattern ("pattern" "^[A-Z]{3}$"}) It was also rendered on UI but it was not the perfect I guess due to overlapping in hint sections one from first field (double) and the second from message field with pattern restriction Any background context you want to provide I didn't performed any validation of provided in @Pattern annotation value the value just extracted and transferred to Swagger Model object Ideally it should be validated and also checked that this is not simple a valid RegExp but valid as well for JavaScript What are the relevant issues </Description>
 <CreatedDate>16/05/2016</CreatedDate>
 <ClosedDate>17/05/2016</ClosedDate>
 <Labels>
 <Label>PR</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1295</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>thomseno</FixedByID>
 <Title>Makes upported Submit Methods configurable inspring foxs wagger ui Enable and disable the Try it out functionality</Title>
 <Description> What s this PR do fix Adds the possibility to Ui Configuration to define the supported submit methods in used swagge ui Try it out or to disable the functionality completely Are there unit tests If not how should this be manually tested Changed some of the existing tests to cover new functionality Any background context you want to provide UiConfiguration now holds of list of methods which will be exposed via configuration REST service to springfox js Two constants DEFAULT SUBMIT METHODS NO SUBMIT METHODS and a new constructor UiConfiguration String validatorUrl String supportedS ubmit Methods had been added for convenience What are the relevant issues and 
</Description>
 <CreatedDate>02/05/2016</CreatedDate>
 <ClosedDate>17/05/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1295</PullRequestID>
 <IssueID>1291</IssueID>
 <Title>Make supported Submit Methods configurable in springfox swagger ui</Title>
 <Description>Hi currently only HTTP methods get post put delete patch are supported by springfox swagger ui see springfox js Some actuator endpoints from spring boot e g health use head and option and are therefore not executable from swagger ui This is related to issue because if you configure no HTTP methods the Try it out! functionality is disabled according to the swagger ui documentation Regards Oliver</Description>
 <CreatedDate>29/04/2016</CreatedDate>
 <ClosedDate>01/06/2016</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1295</PullRequestID>
 <IssueID>1286</IssueID>
 <Title>Make supported Submit Methods configurable to enable and disable the Try it out functionality</Title>
 <Description>Release It would be nice if we could enable and disable the Try it out functionality maybe per http method If the application is in production then it is disabled and it is only a static documentation For example like the supported Submit Methods from swagger ui Thank your Kind Regard smibeumer</Description>
 <CreatedDate>26/04/2016</CreatedDate>
 <ClosedDate>31/08/2016</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1292</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>ry4n-sc0tt</FixedByID>
 <Title>Added support for documenting headers in Request Mapping</Title>
 <Description>Added documentation of headers from the headers attribute of Request Mapping annotations fix for issue 
</Description>
 <CreatedDate>29/04/2016</CreatedDate>
 <ClosedDate>20/05/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1292</PullRequestID>
 <IssueID>1287</IssueID>
 <Title>Feature Headers in RequestMapping are not documented</Title>
 <Description>Query parameters in RequestMapping annotations are documented but headers are not I know there is a workaround using Api Implicit Param but since all the information is there in the Request Mapping annotation it seems reasonable to use that info for documentation Using version</Description>
 <CreatedDate>26/04/2016</CreatedDate>
 <ClosedDate>20/05/2016</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1284</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>ry4n-sc0tt</FixedByID>
 <Title>Fix for broken contributing link in README</Title>
 <Description>Replaces broken link in README md with link to contribution guidelines Fix for issue 
</Description>
 <CreatedDate>25/04/2016</CreatedDate>
 <ClosedDate>25/04/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1284</PullRequestID>
 <IssueID>1281</IssueID>
 <Title>Link to contribution guidelines broken</Title>
 <Description>The link to the contribution guidelines in README md is broken I have a fix ready which changes the link from Contributing CONTRIBUTING md to Contribution Guidelines Trivial I know but should I go ahead and create a PR </Description>
 <CreatedDate>22/04/2016</CreatedDate>
 <ClosedDate>25/04/2016</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1265</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>wgreven-ibr</FixedByID>
 <Title>Dont include alicense object when both license and license Urlaree</Title>
 <Description>Implements the proposed fix in issue 
</Description>
 <CreatedDate>14/04/2016</CreatedDate>
 <ClosedDate>16/04/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues />
 </PullRequest>
 <PullRequest>
 <IssueID>1233</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>praveen12bnitt</FixedByID>
 <Title>Skip events from child application context fixes 1207</Title>
 <Description>This PR fixes The bootstrapper runs only if the event received is from the root application context More details on why this is required is explained in issue comment
</Description>
 <CreatedDate>21/03/2016</CreatedDate>
 <ClosedDate>21/03/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1233</PullRequestID>
 <IssueID>1207</IssueID>
 <Title>Caching Model Properties Provider Null Pointer Exception</Title>
 <Description>I am using the following spring cloud starter project spring cloud starter parent Brixton M I have enabled Feign Client and enabled Swagger I had come across an issue when both Swagger and Feign client were enabled together Based on the inputs given here I have adopted the latest springfox version and I was able to get past that issue The following is an example of an API in my controller The SampleDTO is annotated with an Api Model annoation When I run my spring boot application I see the following message in my logs main WARN CachingModelPropertiesProvider Exception calculating properties for model com manh cp fw sample university client dto SampleDTO Model Context type com manh cp fw sample university client dto Sample DTO is ReturnType true java lang Null Pointer Exception And the Swagger UI has not generated any model schema Can you please let me know if this is an issue or if I am missing anything Thanks</Description>
 <CreatedDate>07/03/2016</CreatedDate>
 <ClosedDate>17/04/2016</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1191</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>dilipkrish</FixedByID>
 <Title>Extracted Swagger Resources Provider to an interface</Title>
 <Description>Also created an default In memory swagger resources provider that will be available to be overridden by a Primary bean implementation for providing aggregation of services closes 
</Description>
 <CreatedDate>27/02/2016</CreatedDate>
 <ClosedDate>28/02/2016</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1191</PullRequestID>
 <IssueID>1189</IssueID>
 <Title>Allow extension of Api Resource Controller by making its methods public</Title>
 <Description>Hello JHipster needs to extend Api Resource Controller for overriding swagger resources mapping in order to be able to aggregate APIs of micro services proxified by a Zuul proxy For details please see the end of this discussion in jhipster generator jhipster Thanks Gael</Description>
 <CreatedDate>25/02/2016</CreatedDate>
 <ClosedDate>27/02/2016</ClosedDate>
 <Labels>
 <Label>PR</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1101</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>sbuettner</FixedByID>
 <Title>Add support for api model property positions</Title>
 <Description>Related to
</Description>
 <CreatedDate>15/12/2015</CreatedDate>
 <ClosedDate>17/12/2015</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 <PullRequestLabel>feature</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1101</PullRequestID>
 <IssueID>766</IssueID>
 <Title>springfox swagger2 doesnt respect Api Model Property position</Title>
 <Description>When using springfox swagger properties in the model are always ordered in alphabetical order Specifying  Api Model Property position doesn t change the ordering I ve created a small project to demonstrate the issue Properties for  Entity model are not ordered How to reproduce Clone run via mvn spring boot run In the browser open and find Entity definition It will be smth likeExpected order according to model definition is id status description comment</Description>
 <CreatedDate>30/05/2015</CreatedDate>
 <ClosedDate>15/12/2015</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1011</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>cbornet</FixedByID>
 <Title>Addhostmethodtodocket</Title>
 <Description>This PR enables overriding the default host from the Docket if host is not set then the behavior will be the same as the current one use the properties file or the swagger def endpoint hostname if host is set then it will be used fixes
</Description>
 <CreatedDate>16/10/2015</CreatedDate>
 <ClosedDate>27/10/2015</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1011</PullRequestID>
 <IssueID>764</IssueID>
 <Title>Multiple Dockets with different host names</Title>
 <Description>Is there a way to configure the hostname specific to each group Docket For eg which uses basic auth uses oauth Currently we can configure only one url via properties springfox documentation swagger v host The swagger Controller reads only this value How can i override this value based on different Docket</Description>
 <CreatedDate>29/05/2015</CreatedDate>
 <ClosedDate>04/06/2015</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>1005</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>GitVhaos</FixedByID>
 <Title>Springfox Configuration for global Operation Parameters Documentation</Title>
 <Description>Now better late than never the docu on issue
</Description>
 <CreatedDate>12/10/2015</CreatedDate>
 <ClosedDate>15/10/2015</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>1005</PullRequestID>
 <IssueID>845</IssueID>
 <Title>Question Configuration for global Operation Parameters</Title>
 <Description>Im currently working on an internal API which uses two parameters for authentication These two parameters have to be sent for each request to authenticate the user The authentication mechanism is place in one central place so no Spring Controller has these two parameters as its request parameters In Swagger these parameters are now missing as Input Parameters In my opionion its no option to annotate every Controller with Swagger Annotations declaring these parameters Later developer will miss to configure it on new controllers Also in a future api version I maybe want to change my authentication type without editing each Controller Is there an option maybe via Docket to configure parameters which will be added to each operation in swagger documentation Im searching for something like this return new DocketDocumentation Type SWAGGER select build add Global Request Parameter String class user</Description>
 <code>return new Docket(DocumentationType.SWAGGER_2)
.select().build()
.addGlobalRequestParameter(String.class, "user")
.addGlobalRequestParameter(Integer.class, "department");</code>
 <CreatedDate>14/07/2015</CreatedDate>
 <ClosedDate>09/09/2015</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>993</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>erikthered</FixedByID>
 <Title>Fix handling of Request Mapping that include regex with quantifiers</Title>
 <Description>Fixes 
</Description>
 <CreatedDate>02/10/2015</CreatedDate>
 <ClosedDate>15/10/2015</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>993</PullRequestID>
 <IssueID>991</IssueID>
 <Title>Extra closing curly brace on endpoints defined with a regex containing a quantifier</Title>
 <Description>When using Springfox with endpoints containing URI path parameters with a defined regex containing a quantifier an extra closing curly brace is inserted at the end of the URI parameter The approach being used is described here For example with the following annotation Request Mapping produces APPLICATION JSON VALUE method Request Method GET This is the generated path in the API spec This also causes the Swagger UI to function improperly when testing out end points My guess is this is related to the curly braces on the quantifier that were using in the regex If this is actually an issue with Swagger please let me know and I can raise the defect with them </Description>
 <CreatedDate>30/09/2015</CreatedDate>
 <ClosedDate>15/10/2015</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>967</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>cbornet</FixedByID>
 <Title>Allowsecurityschemeofsametypeinresourcelisting</Title>
 <Description>Fix 959
</Description>
 <CreatedDate>10/09/2015</CreatedDate>
 <ClosedDate>11/09/2015</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>967</PullRequestID>
 <IssueID>959</IssueID>
 <Title>Multiple oauth security schemes not supported</Title>
 <Code> 
 public Docket petApi() {
  return new Docket(DocumentationType SWAGGER 2);
 }

private OAuth accessCodeAuth() {
 List&lt;GrantType&gt; grants = newArrayList(
 new AuthorizationCodeGrant(
 new TokenRequestEndpoint("tre uri" "treClient" "tre") 
 new TokenEndpoint("te uri" "treToken")));
 List&lt;AuthorizationScope&gt; scopes = newArrayList();
 return new OAuth("code oauth" newArrayList(scopes) newArrayList(grants));
 }

 private OAuth implicitAuth() {
 List&lt;GrantType&gt; grants = newArrayList(
 new ImplicitGrant(
 new LoginEndpoint("implicit uri") 
 "implicitToken"));
 List&lt;AuthorizationScope&gt; scopes = newArrayList();
 return new OAuth("implicit oauth" newArrayList(scopes) newArrayList(grants));
 }
</Code>
 <Description>It seems if several OAuth security schemes are defined for the docket only the last one is mapped to the security definitions</Description>
 <CreatedDate>09/09/2015</CreatedDate>
 <ClosedDate>11/09/2015</ClosedDate>
 <Labels>
 <Label>bug</Label>
 <Label>investigating</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>966</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>cbornet</FixedByID>
 <Title>Add Resource Owner Password Credentials Grant and Client Credentials Grant</Title>
 <Description>Fix 
</Description>
 <CreatedDate>10/09/2015</CreatedDate>
 <ClosedDate>11/09/2015</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>PR</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>966</PullRequestID>
 <IssueID>789</IssueID>
 <Title>OAuth password grant type support</Title>
 <Description>I dont see the password Grant type support in spring fox Does spring fox support password grant type I see only Implicit and Authtorization Code grant </Description>
 <CreatedDate>11/06/2015</CreatedDate>
 <ClosedDate>11/09/2015</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>849</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>kevinconaway</FixedByID>
 <Title>Support for enums in response values and in schema objects</Title>
 <Description>dilipkrish Fixes for and based on our discussion in 
</Description>
 <CreatedDate>15/07/2015</CreatedDate>
 <ClosedDate>16/07/2015</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>feature</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>849</PullRequestID>
 <IssueID>801</IssueID>
 <Title>Allowable Values for enumerations on response models do not render options</Title>
 <Code> 
 return new ResponseEntity(SomeJavaEnum.Value, HttpStatus.OK);
</Code>
 <Description>Im not shure if this has to be adressed for swagger spec or springfox swagger When returning an Java Enum it would be nice to see the allowable Values of this enum as possible results in the generated json output For using enums as Parameters this is already working but not for using enums as response object Where do I need to adress this feature b Example b</Description>
 <CreatedDate>17/06/2015</CreatedDate>
 <ClosedDate>16/07/2015</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>849</PullRequestID>
 <IssueID>810</IssueID>
 <Title>How to Correctly Model Array of Enums</Title>
 <Code>
 private Set&lt;Permission&gt; permissions;
</Code>
 <Description>How can I correctly model an array of enum values If I have the following How should this be rendered </Description>
 <CreatedDate>23/06/2015</CreatedDate>
 <ClosedDate>23/06/2015</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>849</PullRequestID>
 <IssueID>801</IssueID>
 <Title>Allowable Values for enumerations on response models do not render options</Title>
 <Code> 
 return new ResponseEntity(SomeJavaEnum.Value, HttpStatus.OK);
</Code>
 <Description>Im not shure if this has to be adressed for swagger spec or springfox swagger When returning an Java Enum it would be nice to see the  allowable Values  of this enum as possible results in the generated json output For using enums as Parameters this is already working but not for using enums as response object Where do I need to adress this feature b Example b</Description>
 <CreatedDate>17/06/2015</CreatedDate>
 <ClosedDate>16/07/2015</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>832</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>cbornet</FixedByID>
 <Title>add support for vendor extensions in operations</Title>
 <Description>Fixes 
</Description>
 <CreatedDate>03/07/2015</CreatedDate>
 <ClosedDate>08/07/2015</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>feature</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>832</PullRequestID>
 <IssueID>824</IssueID>
 <Title>Support vendor extensions in operations</Title>
 <Code> 
</Code>
 <Description>This issue is for having support of swagger vendor extensions as described in Note the swagger core already has annotations to support the extensions</Description>
 <CreatedDate>01/07/2015</CreatedDate>
 <ClosedDate>08/07/2015</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>782</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>kevinconaway</FixedByID>
 <Title>Take Request Param default Value into account when marking para</Title>
 <Description>…meter required dilipkrish PR for 
</Description>
 <CreatedDate>09/06/2015</CreatedDate>
 <ClosedDate>10/06/2015</ClosedDate>
 <PullRequestLabels />
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>782</PullRequestID>
 <IssueID>778</IssueID>
 <Title>Request Param Field With Default Value Marked Required</Title>
 <Description>If I have a RequestParam field with a default value like Request Param value start default Value int start Springfox will still mark this field as required in the swagger json Per the contract in Request Param Supplying a default value implicitly sets required to false It looks like the Parameter Required Reader should also check if the RequestParam has a default Value on it and if so not set the field to be required Happy to submit a PR for this if you wish </Description>
 <CreatedDate>08/06/2015</CreatedDate>
 <ClosedDate>10/06/2015</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>777</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>kevinconaway</FixedByID>
 <Title>Dont provide a default value for operation notes description </Title>
 <Description>dilipkrish here is the PR for
</Description>
 <CreatedDate>08/06/2015</CreatedDate>
 <ClosedDate>08/06/2015</ClosedDate>
 <PullRequestLabels />
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>777</PullRequestID>
 <IssueID>773</IssueID>
 <Title>Swagger Cannot Have Blank NotesImplementation Details</Title>
 <Description>The default value for Api Operation notes is but Springfox substitutes the operation Name which appears to be the method name instead With this logic it doesnt appear that there is a way to have the Implementation Details section blank like the default Petstore application does</Description>
 <CreatedDate>08/06/2015</CreatedDate>
 <ClosedDate>08/06/2015</ClosedDate>
 <Labels>
 <Label>has-workaround</Label>
 <Label>maintenance</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>589</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>ammmze</FixedByID>
 <Title>Add support for Request Part annotation</Title>
 <Description>Add support for Request Part annotation which means the request content type would be multipart form data which must have param Type of form in swagger ui This is for Issue Some caveats I ve found when using Request Part on things other than files Currently swagger ui renders paramType form as input type text instead of textarea I plan to submit a pull request to fix that as well Through swagger ui the content type for the RequestParts that arent files are not set limitation of HTML forms so in order for spring to properly handle a request with a RequestPart that isn t a file I had to use a custom MultipartResolver to detect if the content type should be application json if it was null </Description>
 <CreatedDate>12/02/2015</CreatedDate>
 <ClosedDate>14/02/2015</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>question</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>589</PullRequestID>
 <IssueID>588</IssueID>
 <Title>Support Request Part annotation</Title>
 <Code> 
</Code>
 <Description>TLDR Request Part parameters should have param Type of form and models should be generated for Request Part annotated parameters When using the RequestPart annotation the param Type attribute for that parameter is incorrect unless the parameter is a MultipartFile When making an api operation that uses a file upload we can no longer use Request Body instead it must be Request Part which means the overall request Content Type becomes mulitpart form data While this all works fine if the if the file upload is the only parameter once you try to add additional parameters i e pieces that will be included in its own boundary it no longer works at least not with swagger ui because the spec is incorrect The other issue is the parameters annotated as RequestPart do not have their models added to the generated spec files So given the following example swagger ui should create a form that takes a text input and file input which it does however the request parameter is using param Type body and when the form is submitted only the file gets submitted in the request Using the custom annotation readers I am able to work around the param Type issue but not adding the model to the spec issue </Description>
 <CreatedDate>12/02/2015</CreatedDate>
 <ClosedDate>14/02/2015</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>466</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>digitil</FixedByID>
 <Title>Check if field is of same type as parent when expanding Model Attribute</Title>
 <Description>To avoid Stack Over flow Error when expanding Model Attributes  skip call to expand when a treeish field is encountered 
</Description>
 <CreatedDate>21/10/2014</CreatedDate>
 <ClosedDate>04/12/2014</ClosedDate>
 <PullRequestLabels />
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>466</PullRequestID>
 <IssueID>465</IssueID>
 <Title>Expanding Model Attribute throws Stack Over flow Error if field is of same type as class</Title>
 <Description>When expanding tree like classes Model Attribute Parameter Expander expand ends up recursing forever Consider the following model for example </Description>
 <CreatedDate>21/10/2014</CreatedDate>
 <ClosedDate>04/12/2014</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>435</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>adrianbk</FixedByID>
 <Title>Revert Depend on Swagger Pass false to the Api Description constr </Title>
 <Description>Reverts martypitt swagger springmvc 
</Description>
 <CreatedDate>04/09/2014</CreatedDate>
 <ClosedDate>04/09/2014</ClosedDate>
 <PullRequestLabels />
 <Issues />
 </PullRequest>
 <PullRequest>
 <IssueID>409</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>fgaule</FixedByID>
 <Title>Fixing Unsupported Operation exception due to</Title>
 <Description>Fix for java lang Unsupported Operation Exception at java util AbstractMap put Abstract Map java due to modifying an scala Immutable Map
</Description>
 <CreatedDate>14/08/2014</CreatedDate>
 <ClosedDate>14/08/2014</ClosedDate>
 <PullRequestLabels />
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>409</PullRequestID>
 <IssueID>283</IssueID>
 <Title>Default Model Properties Provider unable to handle field prefixes like id</Title>
 <Description>We use as a field prefix to avoid using this For example </Description>
 <CreatedDate>29/04/2014</CreatedDate>
 <ClosedDate>13/08/2014</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>402</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>acwatson</FixedByID>
 <Title>Model Attribute flattening should ignore statics</Title>
 <Description> This is the fix for issue Expanding ModelAttribute Request Params Should Ignore Static Fields Added fix to ignore static fields when flattening objects marked with ModelAttribute Added code coverage to prove the fix works
</Description>
 <CreatedDate>12/08/2014</CreatedDate>
 <ClosedDate>12/08/2014</ClosedDate>
 <PullRequestLabels />
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>402</PullRequestID>
 <IssueID>401</IssueID>
 <Title>Expanding Model Attribute Request Params Should Ignore Static Fields</Title>
 <Description>I contributed PR and I found a small issue with it after it was merged in today The problem is that input parameters are being created for static fields in the model object So for example in Swagger UI you would see an input field for static fields such as serial Version UID The fix is simple just ignore any static fields found in objects marked with @ModelAttribute when flattening the input parameter model I have the fix done already and I will submit a PR right after submitting this issue </Description>
 <CreatedDate>12/08/2014</CreatedDate>
 <ClosedDate>12/08/2014</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>399</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>fgaule</FixedByID>
 <Title>Support for naming strategies snake case</Title>
 <Description>Implementation for
</Description>
 <CreatedDate>12/08/2014</CreatedDate>
 <ClosedDate>12/08/2014</ClosedDate>
 <PullRequestLabels />
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>399</PullRequestID>
 <IssueID>393</IssueID>
 <Title>snake case properties instead of camelCase</Title>
 <Description>Is there a way to produce properties as snake case I throught it would use Objec tMapper property Naming Strategy to do so but it doesnt Thanks</Description>
 <CreatedDate>07/08/2014</CreatedDate>
 <ClosedDate>13/08/2014</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>395</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>fgaule</FixedByID>
 <Title>Support Api Model Property properties</Title>
 <Description>Implementation for
</Description>
 <CreatedDate>08/08/2014</CreatedDate>
 <ClosedDate>11/08/2014</ClosedDate>
 <PullRequestLabels />
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>395</PullRequestID>
 <IssueID>287</IssueID>
 <Title>Annotations on Model fields arent accounted for </Title>
 <Description>Hi I ve been using SNAPSHOT and I noticed that it doesn t pick up any of the annotations that I put on my models fields or accessor methods I figured that maybe this is something that you intended for us to configure ourselves but all of my efforts have failed </Description>
 <CreatedDate>01/05/2014</CreatedDate>
 <ClosedDate>30/04/2015</ClosedDate>
 <Labels>
 <Label>question</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>379</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>brandon-atkinson</FixedByID>
 <Title>Fix for Issue moved to different base branch original PR was</Title>
 <Description>This PR is a resubmission of closed PR on a different base branch 
</Description>
 <CreatedDate>28/07/2014</CreatedDate>
 <ClosedDate>06/08/2014</ClosedDate>
 <PullRequestLabels />
 <Issues />
 </PullRequest>
 <PullRequest>
 <IssueID>370</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>fgaule</FixedByID>
 <Title>Supporting Constructor params as fields</Title>
 <Description>Implementation for
</Description>
 <CreatedDate>18/07/2014</CreatedDate>
 <ClosedDate>08/08/2014</ClosedDate>
 <PullRequestLabels />
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>370</PullRequestID>
 <IssueID>359</IssueID>
 <Title>Response Body Jackson JsonCreator doesnt generate Model</Title>
 <Description>I m using Spring and swagger springmvc Model is not generated when you have a request type annotated with Response Body public DTO save Request Body DTO dto and the Request Type is annotated with Jacksons Json Creator Json Property and is lack of setters Thanks</Description>
 <CreatedDate>14/07/2014</CreatedDate>
 <ClosedDate>13/08/2014</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>366</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>fgaule</FixedByID>
 <Title>Using Springs Annotation Utils to support Annotation sat interfaces Response Messages Response Message</Title>
 <Description>Following 353 approach Using Spring's AnnotationUtils now we are able to read annotations of class and interface 
</Description>
 <CreatedDate>15/07/2014</CreatedDate>
 <ClosedDate>17/07/2014</ClosedDate>
 <PullRequestLabels />
 <Issues />
 </PullRequest>
 <PullRequest>
 <IssueID>363</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>Mazday</FixedByID>
 <Title>Improvements of</Title>
 <Description>Api Implicit Param Api Implicit Param are now read on class interfaces and superclasses using Spring Annotation Utils findAnnotation This follows the comment of  fgaule on 
</Description>
 <CreatedDate>15/07/2014</CreatedDate>
 <ClosedDate>17/07/2014</ClosedDate>
 <PullRequestLabels />
 <Issues />
 </PullRequest>
 <PullRequest>
 <IssueID>353</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>Mazday</FixedByID>
 <Title>Api implicit param</Title>
 <Description>Implements reader for Api Implicit Param and Api Implicit Params closes</Description>
 <CreatedDate>07/07/2014</CreatedDate>
 <ClosedDate>07/07/2014</ClosedDate>
 <PullRequestLabels />
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>353</PullRequestID>
 <IssueID>55</IssueID>
 <Title>Implementing Api Params Implicit</Title>
 <Code>
public @ResponseBody Object listMultimediaByAdId(HttpServletRequest request, HttpServletResponse response, @ApiParam @Valid AdModel adModel){return;}
</Code>
 <Description>Hi there I'm trying to use the Api Params Implicit annotation Has this been implemented </Description>
 <CreatedDate>05/04/2013</CreatedDate>
 <ClosedDate>07/07/2014</ClosedDate>
 <Labels>
 <Label>feature</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>223</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>MasterSPB</FixedByID>
 <Title>fix for parameter model generation</Title>
 <Description>fix parameter model generation
</Description>
 <CreatedDate>06/03/2014</CreatedDate>
 <ClosedDate>06/03/2014</ClosedDate>
 <PullRequestLabels>
 <PullRequestLabel>bug</PullRequestLabel>
 </PullRequestLabels>
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>223</PullRequestID>
 <IssueID>214</IssueID>
 <Title>empty model when use Request Body</Title>
 <Code> 
 public ResponseEntity&lt;TestDto&gt; test(@RequestBody TestDto testDto){
        testDto.id +="2";
        testDto.name +="2";

        ResponseEntity ret = new ResponseEntity(testDto,HttpStatus.OK);
        return ret;
    }
</Code>
 <Description>I want see model description in filed Data Type but it empty Dto Type result</Description>
 <CreatedDate>04/03/2014</CreatedDate>
 <ClosedDate>06/03/2014</ClosedDate>
 <Labels>
 <Label>bug</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
 <PullRequest>
 <IssueID>158</IssueID>
 <RepoID>springfox</RepoID>
 <FixedByID>sverhagen</FixedByID>
 <Title>Unittestfor155</Title>
 <Description>I added a unit test for issue Ive tried to fix the issue as well but that will be a no go for me for now as I dont understand the internal design yet The Json Resource Listing Inheritance Tests has one Test which is currently Ignored Remove the Ignored to view the behavior subject of issue 
</Description>
 <CreatedDate>15/10/2013</CreatedDate>
 <ClosedDate>17/10/2013</ClosedDate>
 <PullRequestLabels />
 <Issues>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>158</PullRequestID>
 <IssueID>155</IssueID>
 <Title>APIs show up as bean name rather than mapping in interface</Title>
 <Code></Code>
 <Description>A lot of my APIs show up as proxy i e the name of the bean e g I believe I have verified this to be the case for controllers that have an interface Any kind of empty interface will do to break Swagger The interface seemingly should define the Request Mapping class and method annotations for Spring MVC to keep working i e move those from the implementing class I m only newly reviewing Swagger Using version because of issue </Description>
 <CreatedDate>13/10/2013</CreatedDate>
 <ClosedDate>25/03/2014</ClosedDate>
 <Labels>
 <Label>bug</Label>
 <Label>question</Label>
 </Labels>
 </Issue>
 <Issue>
 <RepoID>springfox</RepoID>
 <PullRequestID>158</PullRequestID>
 <IssueID>155</IssueID>
 <Title>APIs show up as bean name rather than mapping in interface</Title>
 <Code></Code>
 <Description>A lot of my APIs show up as proxy i e the name of the bean e g I believe I have verified this to be the case for controllers that have an interface Any kind of empty interface will do to break Swagger The interface seemingly should define the Request Mapping class and method annotations for Spring MVC to keep working i e move those from the implementing class I m only newly reviewing Swagger Using version because of issue </Description>
 <CreatedDate>13/10/2013</CreatedDate>
 <ClosedDate>25/03/2014</ClosedDate>
 <Labels>
 <Label>bug</Label>
 <Label>question</Label>
 </Labels>
 </Issue>
 </Issues>
 </PullRequest>
</PullRequests>
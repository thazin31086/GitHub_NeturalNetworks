<Issues>
  <Issue>
    <IssueID>33030</IssueID>
    <RepoID>1</RepoID>
    <Title>Add long paths support</Title>
    <Description>Resolves #32804

- [x] Support long paths in csc
- [x] Support long paths in other executables (vbc, csi, VBCSCompiler, etc)
~~- [ ] Reuse configs where possible between executables~~
~~- [ ] Conditional test for long path support which spawns a csc subprocess~~
~~- [ ] BuildBoss update to check proper configuration of .exe projects~~</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33029</IssueID>
    <RepoID>1</RepoID>
    <Title>Issue 32399 Fix removable cast suggestion on GetType in VB</Title>
    <Description>See https://github.com/dotnet/roslyn/issues/32399

In VB there are a few predefined casting operators that allow conversions from certain types of expressions to another type (e.g. CStr accepts numerics, dates, booleans).  

When using GetType on the resultant object, the cast is marked as unnecessary as the symbol in both the regular and speculative tree resolves to System.Object.GetType().  This causes the symbols to be marked as compatible, and so the cast is removed.  In the case of other methods like ToString the symbols resolve differently (e.g. System.Int32.ToString() vs System.String.ToString()).  

My best guess at resolving this is then that cast should not be removed when the symbol is a non-overridable (non-static) method of System.Object.  User defined casts go through a different route in the analyzer and are not affected.
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33028</IssueID>
    <RepoID>1</RepoID>
    <Title>Condense quick info</Title>
    <Description>Fixes #32838
Fixes #33001

## Before

![image](https://user-images.githubusercontent.com/1408396/52091461-21834680-257a-11e9-8d6b-22c86e5fa3c5.png)

## After

![image](https://user-images.githubusercontent.com/1408396/52091495-3a8bf780-257a-11e9-98fd-4fc039724467.png)
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33027</IssueID>
    <RepoID>1</RepoID>
    <Title>#nullable offered in completion when using version of C# &lt;8</Title>
    <Description>In a project that is using LanguageVersion 7.3 or lower
1. Open a .cs file
2. Type '`#` on an empty line 
3. Observe that `nullable` is in the completion list, although it requires C# 8 or higher

![image](https://user-images.githubusercontent.com/611219/52091361-03f9b100-2569-11e9-8b81-2ee0d3317f62.png)

</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33026</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn dev16.0-preview3 | 20190131 2</Title>
    <Description>This is a reworked version of #32395 targeting the dev16.0-preview3 branch.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33025</IssueID>
    <RepoID>1</RepoID>
    <Title>Track null state through ref assignments to ref ternaries</Title>
    <Description>The following program produces no warnings

``` c#
#nullable enable

class Program
{
    static void Main(string[] args)
    {
        string? a = "", b = "";
        (args.Length == 0 ? ref a : ref b) = null;
        _ = a.Length; // expected warning possible null dereference
    }
}
```
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33024</IssueID>
    <RepoID>1</RepoID>
    <Title>Updated NuGet package properties</Title>
    <Description>
    </Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33023</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn dev16.0-preview3 | 20190131</Title>
    <Description>This is a reworked version of #32616 targeting the dev16.0-preview3 branch.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33022</IssueID>
    <RepoID>1</RepoID>
    <Title>Test `!` suppression with deconstruction</Title>
    <Description>Add tests for `!` suppression with deconstruction.
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33021</IssueID>
    <RepoID>1</RepoID>
    <Title>Conversion tests for nullability and deconstruction</Title>
    <Description>Add tests for deconstruction that cover:
- All implicit and explicit conversions
- Tuple and `Deconstruct` deconstruction
- Top-level and nested conversions</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33020</IssueID>
    <RepoID>1</RepoID>
    <Title>Use the placeholders from Conversion.DeconstructionInfo in NullableWalker.GetDeconstructionRightParts</Title>
    <Description>Can we use the placeholders in `Conversion.DeconstructionInfo` in `NullableWalker.GetDeconstructionRightParts` to simplify `VisitDeconstructionArguments`?

See https://github.com/dotnet/roslyn/pull/32994#discussion_r252780100.
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33019</IssueID>
    <RepoID>1</RepoID>
    <Title>Infer nested nullability of implicitly-typed deconstruction variable</Title>
    <Description>A warning should be reported for `ay[0].ToString()`:
```C#
class Program
{
    static void F(object? x, object y)
    {
        if (x == null) return;
        y = null;

        var t = (new[] { x }, new[] { y });
        var (ax, ay) = t;

        ax[0].ToString();
        ay[0].ToString(); // warning: maybe null
    }
}
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33018</IssueID>
    <RepoID>1</RepoID>
    <Title>IRecursivePattern Changes</Title>
    <Description>At a design meeting a couple of days ago, we made the following changes to `IRecursivePattern`

&gt; 2) Problems:
&gt;   a. First use of Tuples in public api
&gt;   b. Should we use uppercase or lowercase for these? Do they need names at all?

Conclusions:
Replace `PropertySubpatterns` with
```
ImmutableArray&lt;IPropertySubpattern&gt; PropertySubpatterns { get; }
IPropertySubpatternOperation
               IMemberReference
               IPatternOperation
```
Should make these interfaces internal for 16.0
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33017</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullability for foreach deconstruction variables</Title>
    <Description>Report warnings for `x.ToString()` and `y.ToString()`:
```C#
using System.Collections.Generic;

class Program
{
    static void F&lt;T, U&gt;(IEnumerable&lt;(T, U)&gt; e) where U : class
    {
        foreach (var (x, y) in e)
        {
            x.ToString(); // warning: maybe null
            y.ToString(); // warning: maybe null
        }
    }
}
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33016</IssueID>
    <RepoID>1</RepoID>
    <Title>Localize regex tests</Title>
    <Description>This is a test-only fix. I need to get this in to unblock loc changes for Preview 3.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33015</IssueID>
    <RepoID>1</RepoID>
    <Title>Re-enable csharp symbol tests on mono</Title>
    <Description>
    </Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33014</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixes to compiler generated code script</Title>
    <Description>Makes the following changes to the script which generates our compiler
code files:
1. No longer depend on RID. That was an accident of history and it
caused VS errors when the script was run with VS open. Now just use
"dotnet run" on the project.
1. Put the temporary files under the artifacts directory so they are
included in our published artifacts on error</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33013</IssueID>
    <RepoID>1</RepoID>
    <Title>Work around bug in NamedPipeClientStream.ConnectAsync</Title>
    <Description>Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/764608.

`NamedPipeClientStream.ConnectAsync` attempts to be asynchronous by
moving the expensive work (actually connecting to the named pipe) off to
a background thread via `Task.Factory.StartNew(Action,
CancellationToken)`. However, this is the wrong overload to call, and in
some situations is guaranteed to _not_ schedule the new `Task` to a
background thread.

This overload will, by default, use whatever `TaskScheduler` is
associated with the "current" `Task`, if any, and only schedule the work
to at threadpool thread if there is no current `Task` or if that `Task`
is already associated with the threadpool `TaskScheduler`. If, on the
other hand, you're on the UI thread of a GUI application (like Visual
Studio) the new `Task` will also end up scheduled to the UI
thread--exactly the outcome we were trying to avoid.

Once this happens you can easily end up in a situation where a
subsequent blocking call (e.g. `Task.Wait(...)`) blocks the UI thread
while effectively waiting for that `Task` to complete... which it can't
do because the UI thread is blocked! Now you've got a single-threaded
deadlock and your UI hangs.

To work around this issue, here we first force ourselves to a
threadpool thread via `Task.Run` and _then_ call `ConnectAsync`. Thus
the `Task` created by `Task.Factory.StartNew` will also end up on a
threadpool thread.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33012</IssueID>
    <RepoID>1</RepoID>
    <Title>Proposal: File header validation analyzer and fix</Title>
    <Description>## Summary

Currently the IDE does not offer built-in support for configuring headers (aka file banners or copyright headers) expected to appear in source files. This proposal defines a simple analyzer and code fix combination to support a majority of cases used in practice.

When configured, Roslyn would be responsible for adding a file header to newly-created source files it recognizes. Other language services would have access to the **.editorconfig** configuration and could follow suit (the property is defined in a manner that others could follow).

## Variables

The following built-in variables may be used in defining the expected file header content.

| Variable | Value | 
| --- | --- |
| `fileName` | The name of the source file, including its extension |

## Configuration

The expected header content is provided as a template. Substitution variables may be referenced in curly braces, such as `{fileName}`. The sequence `\n` may be used for a single newline in the document.

| Property | Meaning |
| --- | --- |
| `file_header_template` | The template text for file headers. |

## Header forms

File headers in C# source files are allowed to have any of the following forms. The first form is preferred, meaning it is used when the code fix inserts a new comment into a file which did not previously have one.

```csharp
// line 1
// line 2
// line 3
// ...
```

```csharp
/* line 1
 * line 2
 * line 3
 * ...
 */
```

```csharp
/* line 1
   line 2
   line 3
   ... */
```

## Examples

### Single-line header

The following configuration could be used for the code in this repository prior to #25423:

```
file_header_template = Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
```

Files would be expected to start with the comment:

```csharp
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
```

### Multi-line header

The following could be used to implement the three-line header requested in #25423:

```
file_header_template = Licensed to the .NET Foundation under one or more agreements.\nThe .NET Foundation licenses this file to you under the MIT license.\nSee the LICENSE file in the project root for more information.
```

Files would be expected to start with the comment:

```csharp
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
```

### StyleCop-compatible header

The following could be used to define a simple StyleCop-compatible XML header:

```
file_header_template = &lt;copyright file="{fileName}" company="Your Company Here"&gt;\nYour copyright text here\n&lt;/copyright&gt;
```

The file **MyFile.cs** would be expected to start with the comment:

```csharp
// &lt;copyright file="MyFile.cs" company="Your Company Here"&gt;
// Your copyright text here
// &lt;/copyright&gt;
```

## Frequently asked questions

### What about a `{currentYear}` variable?

**tl;dr:** The `currentYear` variable is not required. Simply replace `{currentYear}` in your template with the year you expect to appear in file headers.

Implementing validation using the year as a variable is highly problematic in practice for two reasons:

1. The success of the build depends on when the build runs. It is impossible to create commits which will build successfully a year later.
2. Forcing the header to a later date via analysis would result in a post-dated copyright notice for the code. Depending on the specific country, this is likely to result in an invalid copyright date, a situation which can result in the loss of certain types of copyright protection otherwise afforded to projects.

Fixed dates in the file header template support headers with the strongest copyright protections. Projects which require other approaches may not be able to use this analyzer, but please feel free to use the code for the built-in analyzer under its open source licensing terms to implement a package supporting other specific scenarios.

## Notable changes

The following are notable changes to this proposal as a result of comments in the thread below.

* Changed `dotnet_style_file_header_template` to `file_header_template` (per https://github.com/dotnet/roslyn/issues/33012#issuecomment-459870949)
* Clarify that Roslyn would automatically apply the header to new source files (per https://github.com/dotnet/roslyn/issues/33012#issuecomment-459870949)</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33011</IssueID>
    <RepoID>1</RepoID>
    <Title>Include underlying conversions when tracking nullability of tuple deconstruction</Title>
    <Description>The following should result in exactly one warning, for `y.Value.F.ToString()`:
```C#
#pragma warning disable 0649

struct S
{
    internal object F;
}

class Program
{
    static void F(S s)
    {
        (S, S) t = (s, new S());
        (S? x, S? y) = t;
        _ = x.Value;
        x.Value.F.ToString();
        _ = y.Value;
        y.Value.F.ToString(); // warning: 'F' maybe null
    }
}
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33010</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow upcasting Task&lt;T&gt; to Task&lt;T?&gt;</Title>
    <Description>Apologies if this has already been raised/discussed...

While working on annotating a codebase, I've been running into the following kind of case:

```c#
Task&lt;string&gt; Foo() =&gt; Task.FromResult("foo");
Task&lt;string?&gt; Bar() =&gt; Foo();
```

It seems like it should be possible to upcast a Task&lt;T&gt; into Task&lt;T?&gt;. Moreover, there doesn't seem to be an easy workaround for this (aside from disabling nullability checking).</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33009</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0044 "Make field readonly" false positive when used in ref return</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2.0

**Steps to Reproduce**:
```csharp
public class C
{
    private int a, b; // IDE0044
    private ref int select(bool c) =&gt; ref (c ? ref a : ref b);
    public void Test() =&gt; select(true) = 3;
}
```

**Expected Behavior**:
The members are mutated. Marking them readonly breaks the code, so IDE0044 shouldn't trigger.

**Actual Behavior**:
IDE0044 is falsely triggered.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33008</IssueID>
    <RepoID>1</RepoID>
    <Title>Formatting analyzer NuGet package flags formatting violations in compiler generated assembly attributes files</Title>
    <Description>I just attempted to consume the code style formatting analyzer in roslyn-analyzers repo, and hit this on CI where formatting issues on all generated assembly attribute files are flagged: https://ci.dot.net/job/dotnet_roslyn-analyzers/job/master/job/Windows_NT_Debug_prtest/272/consoleFull#-410211996a086b3e-df04-41d2-bc4d-43e8f9406d07.

```
D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Microsoft.CodeAnalysis.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(2,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Microsoft.CodeAnalysis.Analyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBasic.Analyzers.vbproj]
17:00:19 D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Microsoft.CodeAnalysis.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(4,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Microsoft.CodeAnalysis.Analyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBasic.Analyzers.vbproj]
17:00:19 D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Microsoft.CodeAnalysis.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(5,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Microsoft.CodeAnalysis.Analyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBasic.Analyzers.vbproj]
17:00:19 D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Microsoft.CodeAnalysis.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(6,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Microsoft.CodeAnalysis.Analyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBasic.Analyzers.vbproj]
17:00:19 D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Roslyn.Diagnostics.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(2,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Roslyn.Diagnostics.Analyzers\VisualBasic\Roslyn.Diagnostics.VisualBasic.Analyzers.vbproj]
17:00:19 D:\j\workspace\Windows_NT_De---ec62cf09\artifacts\obj\Roslyn.Diagnostics.VisualBasic.Analyzers\Debug\netstandard1.3\.NETStandard,Version=v1.3.AssemblyAttributes.vb(4,1): error IDE0055: Fix formatting [D:\j\workspace\Windows_NT_De---ec62cf09\src\Roslyn.Diagnostics.Analyzers\VisualBasic\Roslyn.Diagnostics.VisualBasic.Analyzers.vbproj]
```

I am going to try the same fix that @sharwell did for Roslyn.sln in https://github.com/dotnet/roslyn/pull/31799, but I wonder if lot of external consumers of the formatting analyzer will end up tripping on this, and we need a better solution (or at least documentation) on this problem. Can the formatting analyzer that comes with the NuGet package not report violations in generated AssebmlyAttributes files?</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33007</IssueID>
    <RepoID>1</RepoID>
    <Title>non-nullability of anonymous type properties in lambdas are messed up (part 2)</Title>
    <Description>here's another one:

```c#
{
	void Foo(Dictionary&lt;string, int&gt; _) { }
	Foo(new string[] { }.Select(e =&gt; new { e }).ToDictionary(p =&gt; p.e, p =&gt; 1)); // warning CS8620: Nullability of reference types in argument of type 'Dictionary&lt;string?, int&gt;' doesn't match target type 'Dictionary&lt;string, int&gt;' for parameter '_' in 'void Foo(Dictionary&lt;string, int&gt; _)'.
}
```
there's nowhere there where anything should be nullable.

_Originally posted by @Spongman in https://github.com/dotnet/roslyn/issues/32465#issuecomment-454246264_</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33006</IssueID>
    <RepoID>1</RepoID>
    <Title>Include additional nullability checks for extension method Deconstruct</Title>
    <Description>For extension method `Deconstruct`, check top-level and nested nullability of `this` argument.
For generic extension methods, infer types with nullability and check nullability constraints.
```C#
class Pair&lt;T, U&gt;
{
}

static class E
{
    internal static void Deconstruct&lt;T, U&gt;(this Pair&lt;T, U&gt; p, out T t, out U u) =&gt; throw null;
}

class Program
{
    static void F(Pair&lt;object?, object&gt;? p)
    {
        (object? x, object? y) = p; // warning: 'p' maybe null
        x.ToString(); // warning: 'x' maybe null
        y.ToString();
    }
}
```

</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33005</IssueID>
    <RepoID>1</RepoID>
    <Title>Not handling nullability deconstructing argument of Deconstruct</Title>
    <Description>A warning is reported for `a.ToString()` but not for `c.ToString()`:
```C#
class Pair&lt;T, U&gt;
{
    internal void Deconstruct(out T t, out U u) =&gt; throw null;
}

class Program
{
    static void F(Pair&lt;object?, (object, object?)&gt; p)
    {
        (object a, (object? b, object? c)) = p;
        a.ToString(); // warning: maybe null
        b.ToString();
        c.ToString(); // warning: maybe null
    }
}
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33004</IssueID>
    <RepoID>1</RepoID>
    <Title>CA2235 complains that guid field is not serializable.</Title>
    <Description>I tried to create a class with serializable attribute with a field of type guid in it. But Code analyzer suggests that the member is of type Guid, which is not serializable. 

[Serializable]
    public class MyGuidValue : ECNullablePrimitiveValue&lt;Guid&gt;
        {
        private Guid m_guidValue;

I don't want to mark the field with NotSerialized.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33003</IssueID>
    <RepoID>1</RepoID>
    <Title>Conversion from Analyzer with Code Fix to Stand-alone code Analysis Tool</Title>
    <Description>I'm recently converting an analyzer which is extension of Visual Studio (already coded) to a stand-alone analyzer. What I did so far: I copied the methods of analysis from extension to stand-alone in the following way:

#### Extension

```C#
context.RegisterSyntaxNodeAction(ClassAnalyzer, SyntaxKind.ClassDeclaration); //Class analysis

...

private void ClassAnalyzer(SyntaxNodeAnalysisContext obj)
{
    var Name = ((ClassDeclarationSyntax)obj.Node).Identifier.Value.ToString();
    if (!InPascal(Name)) //Class should be in pascal case
    {
        var diagnostic = Diagnostic.Create(Rule1, ((ClassDeclarationSyntax)obj.Node).Identifier.GetLocation(), Name);
        obj.ReportDiagnostic(diagnostic);
    }
    if (HasUndescore(Name)) //Shouldn't have underscores
    {
        var diagnostic = Diagnostic.Create(Rule9, ((ClassDeclarationSyntax)obj.Node).Identifier.GetLocation(), Name);
        obj.ReportDiagnostic(diagnostic);
    }
}
```

#### Stand-Alone

```C#
Program p = new Program(); //Because main method is static
...
Console.WriteLine($"Finished loading solution '{solutionPath}'");
//Starts analysis
var proj = solution.Projects.Single();
var compilation = proj.GetCompilationAsync().Result;
foreach (var tree in compilation.SyntaxTrees)
{
    var class = tree.GetRoot().DescendantNodesAndSelf().Where(x =&gt; x.IsKind(SyntaxKind.ClassDeclaration));
    foreach (var c in class)
    {
        p.ClassAnalyzer(c);
    }

...

private void ClassAnalyzer(SyntaxNode obj)
{
    var Name = ((ClassDeclarationSyntax)obj).Identifier.Value.ToString();
    if (!InPascal(Name)) //Class should be in pascal case
    {
        Console.WriteLine(Name + " is not in Pascal Case");
    }
    if (HasUndescore(Name)) //Shouldn't have underscores
    {
        Console.WriteLine(Name + " shouldn't have underscores");
    }
}
```

So far so good. It turns out that I have other methods of analysis that need adaptation that is not presenting itself so simple. 

I have methods that are triggered with the following conditions: 
* SymbolKind.Namespace
* SymbolKind.Field
* OperationKind.VariableDeclaration
* OperationKind.VariableDeclarator

Methods that are triggered by this triggers are not changeable to work through SyntaxNode because they require information that is not available in this structure. Somehow I need to continue triggering these methods with these (or similar) parameters in order to access the same information. I searched everywhere and do not know how to find these structures to "trigger" those methods.

What i want to do:

#### Extension
```C# 
context.RegisterOperationAction(LocalVariableAnalyzer, OperationKind.VariableDeclarator); //Local Variable analysis

...

private void LocalVariableAnalyzer(OperationAnalysisContext obj)
{
    //Code that depends on the structure OperationAnalysisContext
}

And somehow this becomes something like:
```
#### Stand-Alone
```C#
Program p = new Program(); //Because main method is static
...
Console.WriteLine($"Finished loading solution '{solutionPath}'");
//Starts analysis
var proj = solution.Projects.Single();
var compilation = proj.GetCompilationAsync().Result;
foreach (var tree in compilation.SyntaxTrees)
{
    var locvars = tree.GetRoot().DescendantNodesAndSelf().Where(x =&gt; x.IsKind(OperationKind.VariableDeclarator));
    foreach (var c in locvars)
    {
        p.LocalVariableAnalyzer(c);
    }

...

private void LocalVariableAnalyzer(OperationAnalysisContext obj)
{
    //Same code that depends on the structure OperationAnalysisContext or slightly adapted
}
```

Just to remember, i don't need access only to OperationAnalysis, but to SymbolKind too.

Thanks in advance.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33002</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename using</Title>
    <Description>I send screenshot of code. Renaming A works fine but renaming B does not rename correctly and leads to compile time error.

![image](https://user-images.githubusercontent.com/12449387/52043400-70869880-24f4-11e9-8d20-0c5322f3c379.png)


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/433879/rename-using.html
VSTS ticketId: 776278_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33001</IssueID>
    <RepoID>1</RepoID>
    <Title>In documentation, mark &lt;para&gt; will generate empty line in tooltip</Title>
    <Description>When using &amp;lt;para&amp;gt; to insert a new line in the documentation, &amp;lt;para&amp;gt; will generates additional empty lines in the Tooltip displayed by IntelliSense or mouseover on keywords.
this problem is start at VS 2013, please fix it


![image](https://user-images.githubusercontent.com/12449387/52042691-a88cdc00-24f2-11e9-87f0-1dea3c2063db.png)

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/441448/in-documentation-mark-will-generate-empty-line-in.html
VSTS ticketId: 782031_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33000</IssueID>
    <RepoID>1</RepoID>
    <Title>Add more information on running tests from the command line, and view…</Title>
    <Description>…ing their results

I wasted a good few hours trying to work this out, so I hope this will save someone else the time :-)</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32999</IssueID>
    <RepoID>1</RepoID>
    <Title>Simplify representation of AttributeLists/Modifiers on all MemberDecls.</Title>
    <Description>The current (i.e. prior to this PR) way of representing attributes/modifiers is to specify which nodes they can go on in an adhoc manner.  Some member decls specify they take attributes+modifiers, some only attributes, and some take none at all.  While this is accurate as per the grammar, it makes for some ungainly APIs and complex use cases.

For example, our parser detects if you write attributes/modifiers for a namespace, but then has no place to put it.  Similarly, lots of code in later layers has to write specialized code to get at modifiers/attributelists.

--

This PR attempts to simplify things (taking a page from TypeScript).  After this PR, we simply define all member decls as being able to have attributes/modifiers.  This means that if we run into attributes/modifiers that aren't grammatically legal, we still have a place to put them.  And, later layers can more easily get/change/add these properties easily.

--

This also ties into the goal of pulling errors out of hte parser, since they affect incremental parsing, as well as making it more difficult for later phases to understand what is going on.

--

Todo:
- [x] tests.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32998</IssueID>
    <RepoID>1</RepoID>
    <Title>Update .editorconfig</Title>
    <Description>~~skip ci please~~
^^^
It doesn't work here...</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32997</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex: could warn on duplicate characters in character set</Title>
    <Description>```csharp
using System.Text.RegularExpressions;

namespace ConsoleApp27
{
    class Program
    {
        static void Main(string[] args)
        {
            var MyRegex = new Regex(@"folder[aaa]name");
        }
    }
}
```

Expected:
A warning that duplicate characters are not needed in character set

Actual:
No warning</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32996</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex: Error message incorrect for empty character set</Title>
    <Description>```csharp
using System.Text.RegularExpressions;

namespace ConsoleApp27
{
    class Program
    {
        static void Main(string[] args)
        {
            //language=regex
            string s = @"foo[]bar";

            var MyRegex = new Regex(@"folder[]name");
    }
}
```

Expected: Warning "Empty [] set"

Actual: Warning "Unterminated [] set"
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32995</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex: should warn on negative fixed quantifier</Title>
    <Description>```csharp
namespace ConsoleApp27
{
    class Program
    {
        static void Main(string[] args)
        {
            //language=regex
            string s = @"a{-3,4}";
        }
    }
}
```

Expected:
Diagnostic: negative numbers not allowed in fixed quantifier

Actual:
No diagnostic</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32994</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullability in deconstruction</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/29618
Fixes https://github.com/dotnet/roslyn/issues/31298</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32993</IssueID>
    <RepoID>1</RepoID>
    <Title>async completion. check if need to support the original completion co…</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/31135</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32992</IssueID>
    <RepoID>1</RepoID>
    <Title>Regex string not colorized until completed</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/52027129-1e775000-24bf-11e9-8bcf-6c47889e1c9a.png)

**Steps to Reproduce**:
Start typing regex string without the string being completed:

**Actual Behavior**:
![image](https://user-images.githubusercontent.com/41759/52027141-27682180-24bf-11e9-85d1-becf388e93f8.png)

Notice the parentheses are not colorized.

**Expected Behavior** (without the right quote):
![image](https://user-images.githubusercontent.com/41759/52027173-3fd83c00-24bf-11e9-9039-959658dee5cc.png)
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32991</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyze throw expression and adjust analysis of null-coalescing operator</Title>
    <Description>- A throw expression visits the expression (we check that it's not possibly null), then marks the state as unreachable.
- In the left branch of `x ?? y`, we should learn that `x != null`.

Fixes https://github.com/dotnet/roslyn/issues/32879</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32990</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix up support for changing rule set files through the Solution Explorer </Title>
    <Description>The AnalyzersCommandHandler was still trying to call GetHostProject to find the host project as a way to directly grab the rule set file to process that. That was deprecated but we hadn't fixed it up yet.

The fix is to re-thread through a way to get to the rule set. The "ownership" of a rule set file (if one exists for a project) is owned by the VisualStudioProjectOptionsProcessor, so we now need a way to jump to that directly from any project so another map is added to the VisualStudioWorkspaceImpl. That map is unfortunate -- the OptionsProcessor is really something that should be private to the project system itself and shouldn't be grabbable by any random code.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/779916
Completes task https://devdiv.visualstudio.com/DevDiv/_workitems/edit/698029

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

If you go to the Solution Explorer and expand the Analyzers node, you can browse the rules that are associated with the analyzers you reference. If you right click a rule, choose Set Severity, and choose an option, you get an error message instead of it working.

### Bugs this fixes

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/779916

### Workarounds, if any

Just edit the rule set file with the designer or manually.

### Risk

Low.

### Performance impact

None, nothing is really changing.

### Is this a regression from a previous update?

Yes, this was broken in Dev16.0 Preview 1.

### Root cause analysis

This was an incomplete refactoring that we had a TODO comment for but the tracking bug got misassigned. It was then caught in dogfooding and fixed. We've also figured out where the bug went and are cleaning those up.

### How was the bug found?

Internal dogfooding.

&lt;/details&gt;</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32989</IssueID>
    <RepoID>1</RepoID>
    <Title>csharp_preferred_modifier_order is missing from the table in Tools &gt; Options &gt; Text Editor &gt; C# &gt; Code Style &gt; General </Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/52023187-fe409480-24b0-11e9-81aa-ea391cbc0bbc.png)

The table listing styles settings does not include `csharp_preferred_modifier_order` but the generated `.editorconfig` file does.

```
# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async
```

</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32988</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix a bad merge that left a merge conflict marker in a user visible string.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32986</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32987</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate .editorconfig file from settings should initialize Save file dialog with solution dir</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/52023328-89ba2580-24b1-11e9-99ad-f7a1ead6c0f8.png)

**Steps to Reproduce**:

Tools &gt; Options &gt; Text Editor &gt; C# &gt; Code Style &gt; Generate .editorconfig file from settings.

**Expected Behavior**:

For convenience, the Save Dialog should open in the directory where the current solution is loaded from if a solution is open. 

**Actual Behavior**:

The Save Dialog opens in a random directory (the current directory of the drive?)
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32986</IssueID>
    <RepoID>1</RepoID>
    <Title>Code style &gt; Expression preferences &gt; Prefer range operator has incorrect sample code</Title>
    <Description>**Version Used**: 
![image](https://user-images.githubusercontent.com/41759/52023187-fe409480-24b0-11e9-81aa-ea391cbc0bbc.png)


![image](https://user-images.githubusercontent.com/41759/52022577-5b871680-24ae-11e9-8a94-849b6f53738a.png)

</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32985</IssueID>
    <RepoID>1</RepoID>
    <Title>Support `if` pattern in "use null coalescing assignment" refactoring </Title>
    <Description>Currently "use null coalescing assignment" refactoring only triggers for patterns like 
```cs
x = x ?? y;
```

It'd be nice to expand the support to `if` patterns

```cs
if (x == null)
{
    x = y;
}

if (x is null)
{
    x = y;
}
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32984</IssueID>
    <RepoID>1</RepoID>
    <Title>IWorkspaceProjectContext does not grantee workspace is update-to-date on method return</Title>
    <Description>[IWorkspaceProjectContext.cs](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/ProjectSystem/CPS/IWorkspaceProjectContext.cs) as I understand it is supposed to have the following contracts

**Expected:** 

If `StartBatch` has not been called

- Upon the call to any `Add*` or `Remove*` method returning execution to the caller the workspace shall be up-to-date

If `StartBatch` has been called

- Upon a call to `EndBatch` returning execution to the caller the workspace shall be up-to-date

**Actual:**

If there are open files the running-document-table is consulted and updated asynchronously making it take an unknowable amount of time for the workspace to be brought up to date</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32983</IssueID>
    <RepoID>1</RepoID>
    <Title>Reparse type after async</Title>
    <Description>Fixes #11959</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32982</IssueID>
    <RepoID>1</RepoID>
    <Title>FAR and reference highlighting doesn't work for variable ref inside tuple deconstructuion</Title>
    <Description>FAR and reference highlighting doesn't work for selected variable inside tuple deconstruction:

![image](https://user-images.githubusercontent.com/788783/52022438-bff5a600-24ad-11e9-98d3-a9fa0f6465e0.png)

Here's the result when selecting the same variable but outside the tuple deconstruction:

![image](https://user-images.githubusercontent.com/788783/52022494-f6332580-24ad-11e9-83bd-d80b0900aed9.png)
</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32981</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0051 false positive in recursive pattern matching</Title>
    <Description>Both fields in the code sample below are flagged as unused private members. Note that FAR correctly reports them as "read" references in recursive pattern matching.

```cs
    public class Foo
    {
        string field1;
        string field2;

        public string RecPattern(Foo a)
        {
            if (a is Foo { field2: null, field1: string f1 })
                return f1;
            return "";
        }
    }
```</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32980</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32979</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>31/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32978</IssueID>
    <RepoID>1</RepoID>
    <Title>Add feature to suggest using a 'simple using statement' when possible.</Title>
    <Description>Looks like this:

![image](https://user-images.githubusercontent.com/4564579/52020663-0267b480-24a7-11e9-9cd8-4a44bb418f54.png)

Todo: 
- [ ] Tests
- [ ] User facing option</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32977</IssueID>
    <RepoID>1</RepoID>
    <Title>Internal API - CommandLineOptions for Project</Title>
    <Description>This adds an *internal* property, `CommandLineOptions` to the workspace `Project` type. From the project shims, it can be set via `projectContext.SetOptions("this is command line args")` if the project context's language doesn't implement `CompilationOptions`; it will fallback and set the `CommandLineOptions` instead.

This is useful for command line arguments for F#, in particular, to flow through the workspace Project without having to be concerned with `CompilationOptions`.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32976</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert local to method does not respect unsafe keyword</Title>
    <Description>**Version Used**: 
16.0.0 Preview 3.0 28529.153.d16.0
**Steps to Reproduce**:
Enable unsafe compiler flag.
Run 'Convert to Method' on GetPtr local function.
```csharp
class ClassA
{
    public unsafe void UnsafeFunction()
    {
        byte b = 1;
        unsafe byte* GetPtr(byte* bytePt)
        {
            return bytePt;
        }
        var aReference = GetPtr(&amp;b);
    }
}
```

**Expected Behavior**:
New function should be marked as unsafe.
```csharp
class ClassA
{
    public unsafe void UnsafeFunction()
    {
        byte b = 1;
        var aReference = GetPtr(&amp;b);
    }

    private static unsafe byte* GetPtr(byte* bytePt)
    {
        return bytePt;
    }
}
```

**Actual Behavior**:
New method not marked as unsafe and shows compiler error.
```csharp
class ClassA
{
    public unsafe void UnsafeFunction()
    {
        byte b = 1;
        var aReference = GetPtr(&amp;b);
    }

    private static byte* GetPtr(byte* bytePt)
    {
        return bytePt;
    }
}
```
&lt;img width="408" alt="unsafe_converted_method" src="https://user-images.githubusercontent.com/5749229/52014236-df7fd500-2493-11e9-9b0c-128c6bfbb5aa.png"&gt;
</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32975</IssueID>
    <RepoID>1</RepoID>
    <Title>Convert local function to method does not respect ref return type</Title>
    <Description>**Version Used**: 
16.0.0 Preview 3.0 28529.153.d16.0

**Steps to Reproduce**:
Run 'Convert to Method' on the local function GetRef

```csharp
class ClassA
{
    class RefClass { }
    RefClass refClass = new RefClass();
    public void RefLocalFunction()
    {
        ref RefClass GetRef()
        {
            return ref refClass;
        }
        ref var aReference = ref GetRef();
    }
}
```

**Expected Behavior**:
The method should have a ref return, as below.
```csharp
class ClassA
{
    class RefClass { }
    RefClass refClass = new RefClass();
    public void RefLocalFunction()
    {
        ref var aReference = ref GetRef();
    }
    private ref RefClass GetRef()
    {
        return ref refClass;
    }
}
```

**Actual Behavior**:
The method does not have a ref return and results in a compiler error.
```csharp
class ClassA
{
    class RefClass { }
    RefClass refClass = new RefClass();
    public void RefLocalFunction()
    {
        ref var aReference = ref GetRef();
    }

    private RefClass GetRef()
    {
        return ref refClass;
    }
}
```
&lt;img width="412" alt="ref_converted_method" src="https://user-images.githubusercontent.com/5749229/52013370-b8280880-2491-11e9-958a-357ffeefebe4.png"&gt;
</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32974</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't use an elastic CR/LF for separating using directives groups</Title>
    <Description>This fixes #28631. This is a bug that happens when you use the C# Code Cleanup, and you have "separating using directives groups" setting enabled (added in #21087). This setting is not honored because an elastic CR/LF is issued, and the Formatter will remove that via the `ElasticTriviaFormattingRule`.

/cc @CyrusNajmabadi </Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32973</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 false positive (unused parameter)</Title>
    <Description>**Version Used**:  `16.0.0 Preview 3.0 [28529.153.d16.0]`

**Steps to Reproduce**:

```csharp
class C
{
    public static bool M(out int x)
    {
        return LocalFunction(out x);

        bool LocalFunction(out int y)
        {
            y = 0;
            return true;
        }
    }
}
```

**Expected Behavior**:
No IDE0060

**Actual Behavior**:
```
Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0060	Remove unused parameter 'y'	ConsoleApp6	C:\Users\mavasani\source\repos\ConsoleApp6\ConsoleApp6\Program.cs	7	Active
```</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32972</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32971</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32970</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32969</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32968</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32967</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32966</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32965</IssueID>
    <RepoID>1</RepoID>
    <Title>Need trim start whitespace per line in string of $@ format</Title>
    <Description>_From @chenyj796 on January 30, 2019 11:12_

### Steps to reproduce

When I declare a string in a method as below:
``` csharp
void Test()
{
    var str = $@"
line one
line two
";
}
```

I hope it can be writen as below:
``` csharp
void Test()
{
    var str = $@"
          line one
          line two
         ";
}
```
and the compiler can auto remove the leading whitespace if I add a property in the csproj file, such as:
``` xml
&lt;TrimStartWhitespaceForStringDeclaration&gt;true&lt;/TrimStartWhitespaceForStringDeclaration&gt;
```

### Expected  behavior


### Actual behavior


### Environment data
`msbuild /version` output:

OS info:

If applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):


_Copied from original issue: Microsoft/msbuild#4110_</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32964</IssueID>
    <RepoID>1</RepoID>
    <Title>Does this method just return false?</Title>
    <Description>I'm not a VB expert, but it seems this method just returns false?

https://github.com/dotnet/roslyn/blob/6296ea1dc694724335a9310266eacfa6e1931245/src/Workspaces/VisualBasic/Portable/Formatting/DefaultOperationProvider.vb#L103-L116</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32963</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn.Compilers.Extension.SetGlobalGlobalPropertiesForCPS throwing exception</Title>
    <Description>in latest d16.0 with latest Roslyn preview 3, we get this

```
Microsoft.VisualStudio.Composition.CompositionFailedException
  HResult=0x80131500
  Message=An exception was thrown while initializing part "Roslyn.Compilers.Extension.SetGlobalGlobalPropertiesForCPS".
  Source=Microsoft.VisualStudio.Composition
  StackTrace:
   at Microsoft.VisualStudio.Composition.RuntimeExportProviderFactory.RuntimeExportProvider.RuntimePartLifecycleTracker.CreateValue()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.Create()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveNext(PartLifecycleState nextState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveToState(PartLifecycleState requiredState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.GetValueReadyToExpose()
   at Microsoft.VisualStudio.Composition.RuntimeExportProviderFactory.RuntimeExportProvider.&lt;&gt;c__DisplayClass15_0.&lt;GetExportedValueHelper&gt;b__0()
   at Microsoft.VisualStudio.Composition.DelegateServices.&lt;&gt;c__DisplayClass2_0`1.&lt;As&gt;b__0()
   at System.Lazy`1.CreateValue()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()

Inner Exception 1:
MissingMethodException: Method not found: 'Microsoft.VisualStudio.ProjectSystem.IProjectServices Microsoft.VisualStudio.ProjectSystem.IProjectService.get_Services()'.
```

it is due to this change

https://devdiv.visualstudio.com/DevDiv/_git/CPS/commit/9e27f2e3a53c7945fe7053e79fb3d568121d10d1?refName=refs%2Fheads%2Fmaster&amp;_a=compare&amp;path=%2Fsrc%2FMicrosoft.VisualStudio.ProjectSystem%2FCore%2FProjectService%2FIProjectService.cs

..

according to @davkean this is intentional public API changes. </Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32962</IssueID>
    <RepoID>1</RepoID>
    <Title>Clean up compiler .editorconfig</Title>
    <Description>We have a .editorconfig for src/Compilers, but the compiler team also has a few tools that are outside that directory that use the same rules. We should add a section to the top-level .editorconfig with those rules and scope it to all those locations, instead of duplicating the same .editorconfig in multiple places.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32961</IssueID>
    <RepoID>1</RepoID>
    <Title>Error Symbol is incorrectly produced for lambda parameter in valid code</Title>
    <Description>Repro is in the BoundNodeClassWriter, at this commit/line: https://github.com/dotnet/roslyn/blob/e99fdfb22ef14a2d83251a0f19059f4a09065663/src/Tools/Source/CompilerGeneratorTools/Source/BoundTreeGenerator/BoundNodeClassWriter.cs#L1519-L1521
`field` appears to have an `ErrorType` returned from the SemanticModel, causing IDE quickinfo and unused parameter detection to not return expected results. This is completely valid code, and the parameter should have type `Field`.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32960</IssueID>
    <RepoID>1</RepoID>
    <Title>Default enhanced colors, remove bold statics, and remove experiment</Title>
    <Description>We will leave the preview features checkbox in for users who wish to opt-out.


&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

When using C# or VB we will set new default colors for Methods, Operator Overloads, Control Keywords, Local variables and Parameters. 

### Bugs this fixes

None, this is just defaulting a feature which we shipped in Preview 2.

### Workarounds, if any

None

### Risk

Low.

### Performance impact

none

### Is this a regression from a previous update?

No

### Root cause analysis

NA


</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32959</IssueID>
    <RepoID>1</RepoID>
    <Title>Unused Parameter analysis is not resilient to bad invocations</Title>
    <Description>```C#
using System;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            Test(true, false);
        }

        static void Test(bool arg1, bool arg2)
        {
            Invoke&lt;string&gt;(() =&gt; arg1 &amp;&amp; arg2);

            T Invoke&lt;T&gt;(Func&lt;T&gt; a) { return a(); }
        }
    }
}
```

`arg1` and `arg2` are grayed out in the ide for being unused. Removing the `&lt;string&gt;` constraint causes all errors in the code to go away, and the parameters are correctly inferred to be used.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32958</IssueID>
    <RepoID>1</RepoID>
    <Title>.Net Core 3.0 compiler complains about `#pragma warning enable xxxx` when using C#7.3</Title>
    <Description>**Version Used**: 

3.0.0-preview-27324-05

**Steps to Reproduce**:

```powershell
pwsh
git clone git@github.com:bergmeister/PowerShell.git bergmeister
cd bergmeister
git checkout netcore3.0
ipmo ./build.psm1
start-psbootstrap
start-psbuild
```

**Expected Behavior**:

Successful build

**Actual Behavior**:

In files using `#pragma warning enable xxxx` it errors:

```output
/Users/steve/repos/PowerShell/src/System.Management.Automation/engine/COM/ComUtil.cs(318,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/Authenticode.cs(193,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/Authenticode.cs(516,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/Authenticode.cs(541,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/Authenticode.cs(611,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/nativeMethods.cs(1070,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
/Users/steve/repos/PowerShell/src/System.Management.Automation/security/nativeMethods.cs(1205,17): error CS1658: Feature 'warning action enable or safeonly' is not available in C# 7.3. Please use language version 8.0 or greater.. See also error CS8370. [/Users/steve/repos/PowerShell/src/System.Management.Automation/System.Management.Automation.csproj]
Execution of { dotnet $Arguments } by build.psm1: line 374 failed with exit code 1
At /Users/steve/repos/PowerShell/build.psm1:1999 char:17
+                 throw $errorMessage
+                 ~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : OperationStopped: (Execution of { dotn\u2026ed with exit code 1:String) [], RuntimeException
+ FullyQualifiedErrorId : Execution of { dotnet $Arguments } by build.psm1: line 374 failed with exit code 1
```

This built find with 3.0 preview.1 and only occured when we tried to move to 3.0 preview.2

This is blocking PSCore6 from moving to .Net Core 3.0 https://github.com/PowerShell/PowerShell/pull/8370</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32957</IssueID>
    <RepoID>1</RepoID>
    <Title>ref locals marked as redundant/never used</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59

Related to #32856

**Steps to Reproduce**:
```C#
static void Main(string[] args)
{
    int[] a = new int[4];

    ref int ra = ref a[0];
    ra = 4;

    Console.WriteLine(a[0]);
}
```

**Actual Behavior**: `IDE0059 Value assigned to 'ra' never` used on both lines containing `ra`.

The fixes are very wrong. The first line suggests

```C#
_ = ref a[0];
int ra = 4;
```
which not only changes the behavior but also does not compile, and the second line suggests removing self altogether as a redundant assignment, which also changes the behavior.

**Expected Behavior**:

I would argue assignments to ref locals should mark them as used and should never be marked as redundant (unless perhaps clearly overwritten by another value).
</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32956</IssueID>
    <RepoID>1</RepoID>
    <Title>Questionable IDE0052 for private members that keep a side-effect producing reference (timer) alive</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2.0

**Steps to Reproduce**:
```csharp
class C
{
    private readonly Timer timer // IDE0052
            = new Timer(_ =&gt; Console.WriteLine("still running"), null, 0, 10_000);
}
```
That is, the live-time of the timer is bound to the live-time of the instance of C. Without the member, the garbage collector will remove the timer eventually before removing the instance of C.

I typically have a couple of singletons in my code base that simulate actual hardware while developing. These are put in the DI container and remain active for the entire application runtime. I could implement `IDisposable`, but this seems like overkill just to silence the warning given that the end of the program also ends the timer…</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32955</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow .editorconfig naming differentiation for [ThreadStatic]s</Title>
    <Description>I would like to be able to enforce a convention that [ThreadStatic] statics are different in naming from other statics, using "t_" as prefix for the former and "s_" as a prefix for the latter.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32954</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix Formatting Warnings on Build</Title>
    <Description>This PR fixes the several format warnings that occur when building with .\Build.cmd</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32953</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn does not warn about type arguments that does not match nullability constraints in signatures</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.0
VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C&lt;T&gt; where T : A
{
  C&lt;A?&gt; M(C&lt;A?&gt; c1) // no warnings
  {
    C&lt;A?&gt; c2; // CS8631
    return new C&lt;A?&gt;(); // CS8631
  }
}
```

**Expected Behavior**:
`CS8631 The type 'A?' cannot be used as type parameter 'T' in the generic type or method 'C&lt;T&gt;'. Nullability of type argument 'A?' doesn't match constraint type 'A'.` warnings issued for both `c1` and `M`

**Actual Behavior**:
No warnings for the `M` method signature.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32952</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid unnecessary thread-local variables</Title>
    <Description>This unnecessary use of `ThreadLocal&lt;T&gt;` was showing up in formatter performance traces. The improvement is small, but the code is also simpler when normal local variables are used.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32951</IssueID>
    <RepoID>1</RepoID>
    <Title>Include file counts in success message for dotnet-format</Title>
    <Description>
    </Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32950</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32949</IssueID>
    <RepoID>1</RepoID>
    <Title>VerifyTypeIl now replaces some strings of IL that are .Net Core …</Title>
    <Description>…specific with their .Net Framework equaivalent.

The motivation for this was #32092, where all the VerifyTypeIl tests were failing as a result of differences like this:

```csharp
++&gt; 	extends [netstandard]System.Object
--&gt; 	extends [mscorlib]System.Object
 {
 	// Nested Types
 	.class nested private auto ansi sealed beforefieldinit '&lt;&gt;c__DisplayClass0_0'
++&gt; 		extends [netstandard]System.Object
--&gt; 		extends [mscorlib]System.Object
 	{
++&gt; 		.custom instance void [netstandard]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (
--&gt; 		.custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (
```

The solution is a simple string replace to normalize such differences before comparing.

Since this is presumable not desired in some cases (eg when testing IL specifically for a platform), there is an optional switch to turn this off.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32948</IssueID>
    <RepoID>1</RepoID>
    <Title>'pull up members' code action text is too long and is cut off.</Title>
    <Description>![image](https://user-images.githubusercontent.com/4564579/51965436-6a25ed00-241e-11e9-8a98-83e82821059b.png)

We shouldn't use the fully qualified name here.  We should just use hte member name.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32947</IssueID>
    <RepoID>1</RepoID>
    <Title>No nullability warnings in best type and type inference</Title>
    <Description>The invariant merge rules no longer produce a warning when there is a mismatch.
So scenarios like `new[] { x, y }` and `M(x, y)` should not report any diagnostics for failing to find a best type including nullability. Instead, we find a best type, and then produce conversion warnings from the elements to the inferred type.
Then elements can be suppressed.
This also affects the conditional operator.

This allows removing much machinery for passing `hadNullabilityMismatch` around, and a few "no best type" error codes.

Fixes https://github.com/dotnet/roslyn/issues/30376 (suppression in array initializer and conditional)
Fixes https://github.com/dotnet/roslyn/issues/30151 (suppression in array initializer)
Fixes https://github.com/dotnet/roslyn/issues/30480 (no nullability warning for type inference with lambda argument)

I'll push an additional commit shortly which:
Closes https://github.com/dotnet/roslyn/issues/30955
Closes https://github.com/dotnet/roslyn/issues/30925
Closes https://github.com/dotnet/roslyn/issues/31958
Closes https://github.com/dotnet/roslyn/issues/30941
Closes https://github.com/dotnet/roslyn/issues/28377
Closes https://github.com/dotnet/roslyn/issues/31295
Closes https://github.com/dotnet/roslyn/issues/26654
(Note: I verified that those issues aren't referenced elsewhere in the code)</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32946</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0059 - Remove redundant assignment triggered for variable used from closure</Title>
    <Description>**Version Used**: VS 16.0 Preview 2.0

**Steps to Reproduce**:

```csharp
int i = 1;
Action a = () =&gt; Console.WriteLine(i);
```

**Expected Behavior**:

IDE0059 is not fired, and no suggested fix to remove a redundant assignment is made.

**Actual Behavior**:

IDE0059 fires and suggests to remove the redundant assignment, which results in:

```csharp
int i;
Action a = () =&gt; Console.WriteLine(i);
```

which doesn't compile. Adding a use site outside the lambda/delegate body makes IDE0059 go away.

**Context**:

The bigger repro for this issue is a place where we cache delegates that have a reference to a loop variable, which is copied to a local inside the body of a `for` loop, like this:

```csharp
Action[] GetCachedDelegates(int n)
{
    var res = new Action[n];

    for (var i = 0; i &lt; n; i++)
    {
        var j = i;
        res[i] = () =&gt; DoSomething(j); // closure over `this` and `j`
    }

    return res;
}
```
</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32945</IssueID>
    <RepoID>1</RepoID>
    <Title>ChangeSignature should highlight the currently selected paramater</Title>
    <Description>Invoke ChangeSignature on `void M(int i, int j)` with the cursor on `j`.
When the dialog comes up, the selection should be on `j`.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32944</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualStudioSymbolSearchProgressService is passing null TaskHandlerOptions.DisplayTaskDetails</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 2.0

**Steps to Reproduce**:

Hit this while debugging. TaskStatusCenterModel.PreRegister is throwing an ArgumentNullException on this path because askHandlerOptions.DisplayTaskDetails is null.

```
ArgumentNullException: Value cannot be null.\r\nParameter name: DisplayTaskDetails
&gt;	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.TaskStatusCenter.TaskStatusCenterModel.PreRegister(Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions options, Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData data) Line 139	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchProgressService.OnDownloadFullDatabaseStartedWorkerAsync(string title) Line 67	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchProgressService.OnDownloadFullDatabaseStartedAsync(string title) Line 35	C#
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.DownloadFullDatabaseAsync()	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.TimeSpan&gt;.Start&lt;Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;DownloadFullDatabaseAsync&gt;d__9&gt;(ref Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;DownloadFullDatabaseAsync&gt;d__9 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.DownloadFullDatabaseAsync()	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.UpdateDatabaseInBackgroundWorkerAsync()	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.TimeSpan&gt;.Start&lt;Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;UpdateDatabaseInBackgroundWorkerAsync&gt;d__7&gt;(ref Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;UpdateDatabaseInBackgroundWorkerAsync&gt;d__7 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.UpdateDatabaseInBackgroundWorkerAsync()	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.UpdateInBackgroundAsync()	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;UpdateInBackgroundAsync&gt;d__5&gt;(ref Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.&lt;UpdateInBackgroundAsync&gt;d__5 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.Updater.UpdateInBackgroundAsync()	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.SymbolSearch.SymbolSearchUpdateEngine.UpdateContinuouslyAsync(string source, string localSettingsDirectory)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchService.UpdateSourceInBackgroundAsync(string sourceName) Line 109	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchService.StartWorking.AnonymousMethod__0() Line 89	C#

```

**Expected Behavior**:

**Actual Behavior**:
</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32943</IssueID>
    <RepoID>1</RepoID>
    <Title>Small amounts of cleanup</Title>
    <Description>
    </Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>08/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32942</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix IDE0058 on lambda expression results in unexpected behavior</Title>
    <Description>**Version Used**: 3.0.19.6832 (231aeb8b)

**Steps to Reproduce**:

1. The following code is common in EF Core migrations.

```
_ = migrationBuilder.CreateTable(
                name: "",
                columns: table =&gt; new {},
                constraints: table =&gt; table.PrimaryKey("PK_", x =&gt; x.Id));
                                      ^^^
```

2. Fix IDE0058 on code highlighted.

**Expected Behavior**:

Discard is added at correct position.

```
_ = migrationBuilder.CreateTable(
                name: "",
                columns: table =&gt; new {},
                constraints: table =&gt; _ = table.PrimaryKey("PK_", x =&gt; x.Id));
```

**Actual Behavior**:

Discard is added at wrong position.

```
_ = _ = migrationBuilder.CreateTable(
                name: "",
                columns: table =&gt; new {},
                constraints: table =&gt; table.PrimaryKey("PK_", x =&gt; x.Id));
```

Also, if fix other IDE0058, then select fix all, which includes the one shown above, SyntaxEditorBasedFixAllProvider will crash.

```
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.Kind(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.GetDeclarationKind(SyntaxNode declaration)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.AsNodeLike(SyntaxNode existingNode,SyntaxNode newNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.ReplaceNode(SyntaxNode root,SyntaxNode declaration,SyntaxNode newDeclaration)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()
   at async Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedValuesCodeFixProvider`11.FixAllAsync[TExpressionSyntax,TStatementSyntax,TBlockSyntax,TExpressionStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TForEachStatementSyntax,TSwitchCaseBlockSyntax,TSwitchCaseLabelOrClauseSyntax,TCatchStatementSyntax,TCatchBlockSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.FixDocumentAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsCoreAsync(&lt;Unknown Parameters&gt;)
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass17_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32941</IssueID>
    <RepoID>1</RepoID>
    <Title>Add feature to make applicable local functions static.</Title>
    <Description>Looks like this:

![image](https://user-images.githubusercontent.com/4564579/51958546-430ef180-2405-11e9-92ea-d93019ffa403.png)

Todo:
- [x] Tests
- [x] User facing option in Tools|Options</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32940</IssueID>
    <RepoID>1</RepoID>
    <Title>The focus of IntelliSence is not right in  vs2019preview2 when async code completion=on</Title>
    <Description>**Version Used**: The one in vs2019 preview2

The testcase used to be crash in vs2019preview1(#31263), so not sure what happened in preview1. And works well in vs2017 15.9.5.

**Steps to Reproduce**:

1. Set Options/Environment/Preview Features/`Use asynchronous code completion in C# and Basic` to on.
2. Type `string.Equals("","",StringComparison.[cursor here, and an autocompleted char ')']` in an .cs file
3. Press arrow up/down.

**Expected Behavior**:
Switch between members of `StringComparison`, like it does in vs2017 15.9.5

**Actual Behavior**:
Switch between the overload of method `string.Equals`.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32939</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32938</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32937</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32936</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32935</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32934</IssueID>
    <RepoID>1</RepoID>
    <Title>#nullable enable causes bogus cycle in struct layout error</Title>
    <Description>**Version Used**: VS2019 Preview 2

**Steps to Reproduce**:

1. Create a new .NET core C# library project
2. Change the C# language version to 8.0
3. Type the following code

```
#nullable enable
struct Foo&lt;T&gt;
{
	static Foo&lt;T&gt; Bar;
}
```

**Expected Behavior**: Code compiles fine whether or not `#nullable enable` is used
**Actual Behavior**: With `#nullable enable` the compiler emits this error:

`Error CS0523: Struct member 'Foo&lt;T&gt;.Bar' of type 'Foo&lt;T&gt;' causes a cycle in the struct layout`</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32933</IssueID>
    <RepoID>1</RepoID>
    <Title>Ignore InvalidOperationException from GetInstalledPackages</Title>
    <Description>The NFW from these aren't meaningful, and it's expected that eventually this will work. 

Current NFW reports are [here](https://features.vsdata.io/investigatefault?mt=MAC_ADDRESS_HASHES&amp;et=FAULT&amp;sd=2018-12-29&amp;ed=2019-01-28&amp;pn=vs&amp;fn=ide/vbcs/nonfatalwatson&amp;en=nonfatalwatson&amp;fh=13e849c3-da74-b9b7-5ed0-817c663d2226&amp;ex=devenv&amp;ut=external)

Helps resolve part of #20101 </Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32932</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert "Delete VisualStudioMetadataReference, which was now an empty type"</Title>
    <Description>This reverts commit 73f1152e961c57e68c34331040e94b60c14ead24. Right now F# is still implicitly mentioning this type. This has been fixed in https://github.com/Microsoft/visualfsharp/pull/6153 but until we can get that rolled out we'll roll back the name change.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32931</IssueID>
    <RepoID>1</RepoID>
    <Title>fix some out-of-sync file names</Title>
    <Description>Noticed this while looking at some old PRs</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32930</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure we refresh the project output path when the obj path changes</Title>
    <Description>For legacy projects, we would update our bin path whenever the obj path was updated as a heuristic. We lost that as a part of my rewrite as a simple oversight; this restores that back.

Fixes https://github.com/dotnet/roslyn/issues/32711

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

If you switch between Debug/Release, the path in a Roslyn API isn't updated. This API is used by many things, like Live Unit Testing, which causes things to get out of sync and you may see duplicate or missing tests.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/32711
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763897

### Workarounds, if any

Don't switch configurations, but there's no alternative if you need to do that.

### Risk

Low.

### Performance impact

There's a small impact because we're querying the project system for additional information. We were doing this in Dev15 so it's not a regression from our previous major release.

### Is this a regression from a previous update?

This was broken in Dev16.0 Preview 1.

### Root cause analysis

We don't have any unit tests that cover this particular area. Creating tests are particularly complicated because there's a lot of mocks that are required. We're actively looking to deprecate this legacy code in future Dev16 updates.

### How was the bug found?

Internal testing.
&lt;/details&gt;</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32929</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail out on delegate creation wrapped a in tuple operation</Title>
    <Description>Another case where we need PointsTo analysis for precise flow analysis, we bail out as we currently do not perform any PointsTo analysis.

Fixes #32903</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32928</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32927</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32926</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32925</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>30/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32924</IssueID>
    <RepoID>1</RepoID>
    <Title>"Remove unused parameter" IDE0060 triggered for captured parameter</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2.0

**Steps to Reproduce**:
```csharp
public void Test(int foo) // IDE0060 triggered for foo
    =&gt; Console.CancelKeyPress += (s, e) =&gt; e.Cancel = foo != 0;
```

**Expected Behavior**:
`foo` is used, so no warning.

**Actual Behavior**:
The warning is shown, there's a code fix light bulb when hovering over the parameter, but that one disappears when being clicked.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32923</IssueID>
    <RepoID>1</RepoID>
    <Title>Unused variable warning IDE0059 triggered on "discard"</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2

**Steps to Reproduce**:
```csharp
private void test()
{
    ReadOnlySequence&lt;byte&gt; a = default;
    var count = 0;
    foreach (var _ in a) // IDE0059 smudge here on _
        ++count;
}
```

**Expected Behavior**:
VS2017 doesn't show that and using `List&lt;byte&gt;` instead of the `ReadOnlySequence&lt;byte&gt;` doesn't either, so I'm not expecting to see this.

**Actual Behavior**:
IDE0059 is triggered and there's a light bulb is VS. However, trying to click the light bulb that appears when hovering the `_` with the mouse just makes it disappear instead of showing possible fixes. The light bulb at the line number just offers to suppress IDE0059 and unrelated code fixes (whitespace for example).

To my knowledge, this foreach loop is the only way to count the number of `ReadOnlyMemory&lt;byte&gt;` that make up the `ReadOnlySequence&lt;byte&gt;`, the `Length` property only counts the total number of bytes in the entire sequence.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32922</IssueID>
    <RepoID>1</RepoID>
    <Title>Need to handle array access in VisitLvalue</Title>
    <Description>VisitLvalue in NullableWalker need to have a special case for array access, so that oblivious is properly handled in the callers.  This will be an issue once we start tracking binary states per the specification.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32920</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix rootnamespce property name we received from project-system</Title>
    <Description>This would light up sync namespace refactoring fro CPS projects.

@dotnet/roslyn-ide @jasonmalinowski </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32919</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle ICoalesceAssignmentOperation in GetValueUsageInfo(operation) h…</Title>
    <Description>…elper

Fixes #32842</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32918</IssueID>
    <RepoID>1</RepoID>
    <Title>Make '^' operation nodes internal</Title>
    <Description>We plan to mark this as a non-user overridable unary operator in a later release, so this node should not be in the public API.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32917</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix verify</Title>
    <Description>
    </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32916</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove Mono CI --no-cache flag </Title>
    <Description>PR #32885 introduce the `--no-cache` flag to mono.sh due to a mono upgrade bug (https://github.com/dotnet/roslyn/pull/32885/files#diff-f3cb96ed939670f5061167bac0220bc8R25)

We should remove this after a sufficient time that all the machines have re-cycled the docker cache to no longer contain the bugger 5.21 install in their cache.

</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32915</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Language Feature Status.md</Title>
    <Description>
    </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32914</IssueID>
    <RepoID>1</RepoID>
    <Title>Update Language Feature Status</Title>
    <Description>@jaredpar @agocke @RikkiGibson </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32913</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete a number of nullable test issues</Title>
    <Description>
    </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32912</IssueID>
    <RepoID>1</RepoID>
    <Title>Classify constructor/destructor as containing type</Title>
    <Description>In addition to fixing the case of qualified Attributes this also fixes qualified constructors in xml documentation cref.

Fixes #32817

Fixed the reported regression:
![image](https://user-images.githubusercontent.com/611219/52140257-23471b80-2607-11e9-8133-64b645100951.png)

Shows experience with QuickInfo and FAR:
![image](https://user-images.githubusercontent.com/611219/52140206-00b50280-2607-11e9-9f7d-e9d254005651.png)

</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32911</IssueID>
    <RepoID>1</RepoID>
    <Title>Test plan for "readonly members"</Title>
    <Description>Proposal: dotnet/csharplang#1710

This issue is a place to collect test ideas and track their validation. Use the [compiler test plan](
https://github.com/dotnet/roslyn/blob/master/docs/contributing/Compiler%20Test%20Plan.md) as a tool for brainstorming.

- [x] write speclet
- [x] update compiler test plan
- [x] validate with LangVersion 7.3

### Methods
- [x] struct instance methods
- [x] struct static methods (should error)
- [x] class/interface static/instance methods (should error)
- [x] ref/ref readonly returning methods
- [x] Inherited object members should be considered readonly
- [x] 'readonly partial' methods
- [x] 'readonly partial' where one of declaration or implementation is missing keyword (error)
- [x] `readonly` on `new ToString()`

### Properties
- [x] struct readonly getters
- [x] struct readonly setters (not auto-implemented)
- [x] struct static properties with readonly accessors (should error)
- [x] class/interface properties with readonly accessors (should error)
- [x] expression bodied properties `int P readonly =&gt; 42;` (should error)
- [x] indexers (allow)
- [x] readonly getter in a readonly property? (should be disallowed)
- [x] readonly on `int P { readonly get; set; }` allowed
- [x] getter implicitly readonly for all auto-props
- [x] `int P { readonly get; }` not allowed -&gt; `readonly int P { get; }`


### Misc
- [x] Constructors (disallow)
- [x] Operators (disallow)
- [x] Delegates (disallow)
- [x] Field-like events (disallow)
- [x] Manually implemented events (allow)
- [x] lambdas/local functions (error)
- [x] explicit interface implementations (should allow)
~~- [ ] SymbolDisplay on methods and property/indexer/event accessors~~ #34650
~~- [ ] IsDeclaredReadonly on ISymbol or IPropertySymbol/IMethodSymbol~~ #34213

### Semantic

- [x] Calling readonly methods from readonly methods
- [x] Calling non-readonly struct methods from readonly methods
- [x] Calling a non-readonly method on a reference type field from a readonly method
- [x] Variants of these which use different combinations of properties and methods
- [x] Assignment to `this`
- [x] Reference to instance fields in readonly member
    - [x] Assignment is an error
    - [x] Invocation w/ instance field as receiver causes copy when type is non-readonly struct
- [x] Invocation of non-readonly method or getter on `this` inside a `readonly` member causes copy and a warning. Non-readonly setter access on `this` or a value typed field is an error.
- [x] Unary increment/decrement operators on fields are errors
- [x] Compound assignment on fields is an error
- [x] Round-tripping through metadata
- [x] Error to take `ref` to `this` in `readonly` member
- [x] Property assignment:
  - [x] Disallow on non-readonly instance properties on `this` or value-typed fields
  - [x] Allow on static or readonly properties, or properties on reference-typed fields
  - [x] Compound assignment behavior should be consistent with a getter-then-setter access
https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLRKgEwPYDsA2AnqgLYQnAQLIA0MIAlvjZiANQA+AAgAwAEXAIwBuALAAoDDgKE+yGAjgBjGHwDKEgN4S+uvg1yqACn018A5hFVmuAdj49hAXzlXTfF0517vurgBY+AFkACgN1OQBKX1MYvT4YAAsGZAA6EwBePn8AJjFxePi0zOy8mK8Cn3EKiXlFFXUcrRiDY3dLawF7RxdkNzNPGJipPCIBQNDwtRy5HOjK3W0FwoB6FaSU9L4s3PzCvTXkHK2dsuX4gH1thOTivf2bzZM2LLP4iviJJyA=

### IDE
~~- [ ] Extracting a method from a `readonly` method should produce a `readonly` method~~ #34647
~~- [ ] Suggestion to make a member `readonly` when it is called on a `ref readonly` receiver~~ #34648
~~- [ ] WRN_ImplicitCopyInReadOnlyMember should have a suggestion to make the callee `readonly` if possible~~ #34649
~~- [ ] WRN_ImplicitCopyInReadOnlyMember should have a suggestion to make an explicit copy of the receiver~~ 
- [x] Offered in completion in existing member
~~- [ ] Metadata as source~~ #34650

### Major sections of work (ideally PRs will not cover more than one of these)
- [x] Parsing of `readonly` method and property syntax (mostly just testing)
- [x] IsReadOnly API on MethodSymbol
  - In the case of properties, is `prop.GetMethod.IsReadOnly` acceptable design, or is it confusing to have `prop.IsReadOnly` potentially return a different value than `prop.GetMethod.IsReadOnly`?
- [x] Flow analysis to prevent mutation of `this` in `readonly` member implementation
  - maybe the analysis used for `in` params or `readonly struct` can just be reused?
- [x] Error on invalid usage of `readonly`
  - Any method or property without a `this` parameter (i.e. statics)
  - Any member inside a non-struct declaration (i.e. class, interface)
- [x] Emit tests to demonstrate that expected metadata (IsReadOnly, modopt, modreq) and optimizations (reduced value copying) are present in IL

~~- [ ] Should some synthesized methods be marked as readonly? ([discussion](https://github.com/dotnet/roslyn/pull/34260#issuecomment-474994280))~~ #36587
- [x] Should we disallow readonly members on readonly structs, since redundant? Or maybe we create an IDE fixer?
  - Resolution: Should be allowed, based on the principle that changing `struct` to `readonly struct` on a type where all members are marked readonly shouldn't result in a compile error. </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32910</IssueID>
    <RepoID>1</RepoID>
    <Title>dotnet-format --dry-run</Title>
    <Description>Add a `--dry-run` argument to **dotnet-format**.

🚧 This change builds on #32909, and depends on #32907 for correct behavior on Roslyn.sln.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32909</IssueID>
    <RepoID>1</RepoID>
    <Title>Update System.Commandline in dotnet-format</Title>
    <Description>Update to System.CommandLine.Experimental 0.1.0-alpha-63729-01.

Fixes failure to recognize the `[parse]` argument, and aligns on newer APIs.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32908</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid touching files that didn't actually change</Title>
    <Description>Substantially improves the performance of **dotnet-format** when a solution is mostly already formatted.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32907</IssueID>
    <RepoID>1</RepoID>
    <Title>Add Newtonsoft.Json dependency to dotnet-format</Title>
    <Description>Fixes failure to resolve NuGet SDKs.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32906</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32905</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32904</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32903</IssueID>
    <RepoID>1</RepoID>
    <Title>A variable from tuple deconstruction offers "Use discard" refactoring even when captured in a local function</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2.0

**Steps to Reproduce**:
https://github.com/Tragetaschen/DbusCore/blob/a4c1292b3df5fb8885c94a153e7c82f32019e477/src/Dbus/Decoder.cs#L225
![image](https://user-images.githubusercontent.com/1947968/51894602-8c7d2380-23a8-11e9-8df9-0dbbf0147d72.png)


**Expected Behavior**:
The "Use discard" should not be offered

**Actual Behavior**:
The "Use discard" code fix creates invalid code.
![image](https://user-images.githubusercontent.com/1947968/51894541-52ac1d00-23a8-11e9-9683-5f22f513408b.png)
</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32902</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect code generation when using pattern matching causing an InvalidCastException</Title>
    <Description>**Version Used**: 
[3.0.0 Beta2 Final](https://www.nuget.org/packages/Microsoft.Net.Compilers/3.0.0-beta2-final)

**Steps to Reproduce**:

Compile the following C# program:

```csharp
namespace BingSNRCGRegressionRepro
{
    using System;
    using System.Collections.Generic;

    interface IBase
    {
    }

    interface IThing : IBase
    {
    }

    interface IExtended : IBase
    {
    }

    interface IA : IExtended
    {
        IList&lt;IThing&gt; Value { get; set; }
    }

    interface IB : IExtended
    {
        IList&lt;IThing&gt; Value { get; set; }
    }
    
    interface IC : IExtended
    {
        IList&lt;IThing&gt; Value { get; set; }
    }

    class Extended : IExtended
    {
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(DoWork(new Extended()).Count);
        }

        private static IList&lt;IThing&gt; DoWork(IExtended answer)
        {
            switch (answer)
            {
                case IA a when a.Value != null:
                    return a.Value;
                case IB a:
                    return a.Value;
                case IC a:
                    return a.Value;
                default:
                    return new List&lt;IThing&gt;();
            }
        }
    }
}
```


**Expected Behavior**:

```Prints 0.```

**Actual Behavior**:

```System.InvalidCastException: 'Unable to cast object of type 'BingSNRCGRegressionRepro.Extended' to type 'BingSNRCGRegressionRepro.IB'.'```</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32901</IssueID>
    <RepoID>1</RepoID>
    <Title>[NO MERGE] BitOps analysis Roslyn (WIP)</Title>
    <Description>Update call sites for https://github.com/dotnet/coreclr/pull/22225

Note that this PR will **not build** right now - it is being used to analyze the consolidation of call sites for https://github.com/dotnet/corefx/issues/32269.

cc @tannergooding </Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32900</IssueID>
    <RepoID>1</RepoID>
    <Title>OptProf cleanup</Title>
    <Description>Infrastructure only change.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32899</IssueID>
    <RepoID>1</RepoID>
    <Title>Generate top-level nullability rewriter.</Title>
    <Description>Generate a rewriter that will set the top-level nullability bits on `BoundExpression` given a map of expressions to TSWA.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32898</IssueID>
    <RepoID>1</RepoID>
    <Title>Issue 26640 Fix unnecessary cast warning in conditional expressions when required.</Title>
    <Description>For https://github.com/dotnet/roslyn/issues/26640

This makes the check for semantic changes look at the boxing result for the conditional expression - if it is boxed, the types being boxed should be the same in the original and speculated.  I'm not sure if this logic is correct, there might be case where this should not apply but I haven't thought of one.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32897</IssueID>
    <RepoID>1</RepoID>
    <Title>Classify C# 8 ControlKeywords</Title>
    <Description>- classify `switch` keyword within SwitchExpression
- classify `when` keyword within WhenClause
- classify `throw` keyword within ThrowExpression

Fixes #32896</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32896</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch keyword in switch expression is not classified as ControlKeyword</Title>
    <Description>Moved from [Developer Community issue](https://developercommunity.visualstudio.com/content/problem/437625/switch-keyword-in-switch-statement-is-not-colored.html):

The Preview 2 of Visual Studio 2019 brings an option to "use enhanced colors for C# and Basic", where flow-controlling keywords (`if`, `for`, `goto`, etc.) are colored pink. In the previously existing version of `switch` block the keyword switch is also colored as expected, however in the switch statement (in C# 8.0) the color of the keyword is still blue.

![image](https://user-images.githubusercontent.com/611219/51876622-116f2b00-231e-11e9-9489-6e4402def837.png)
</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32895</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail out for ref locals for unused value assignment analyzer</Title>
    <Description>We need points to analysis for properly analyzing unused assignments to ref locals, which is currently not supported.
Fixes #32855</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32894</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32893</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32892</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>29/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32891</IssueID>
    <RepoID>1</RepoID>
    <Title>Update usages of the source file name when copying a banner to a new file.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32792</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32890</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle string concat with no string literals in ConvertToInterpolatedString</Title>
    <Description>Fix #32864.

I have considered a few different options based on this particular scenario, e.g. 
```cs
var x = 1 + ("string");
```

1. Provide refactoring to convert it to 
```cs
var x = $"{1}{("string")}";
```

2. Provide refactoring that first removes unnecessary parentheses
```cs
var x = $"{1}string";
```

3. Don't offer to "convert to interpolated string". User must explicitly remove unnecessary parentheses first.

Option 1 is the simplest and most flexible (users might want the paren?). But once "convert to interpolated string" is selected first and then "remove paren", there's no way to flatten it to `${1}string` automatically.

Option 2 and 3 would avoid this problem by limiting the action user can take.

I ended up choosing Option 1 because (1) it's a very small change, with no behavior change to the refactoring, and (2) "flatten interpolated string" seems like a useful refactoring/codefix to have :)

@dotnet/roslyn-ide @CyrusNajmabadi 
</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32889</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpEditAndContinueAnalyzer.ClassifyUpdate of VariableDeclaratorSyntax. Cast exception on  (TypeDeclarationSyntax)oldNode.Parent.Parent.Parent;</Title>
    <Description>**Callstack reported**: 
```
System.InvalidCastException: Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax'.
   at Microsoft.CodeAnalysis.CSharp.EditAndContinue.CSharpEditAndContinueAnalyzer.EditClassifier.ClassifyUpdate(VariableDeclaratorSyntax oldNode, VariableDeclaratorSyntax newNode)
   at Microsoft.CodeAnalysis.CSharp.EditAndContinue.CSharpEditAndContinueAnalyzer.EditClassifier.ClassifyUpdate(SyntaxNode oldNode, SyntaxNode newNode)
   at Microsoft.CodeAnalysis.CSharp.EditAndContinue.CSharpEditAndContinueAnalyzer.EditClassifier.ClassifyEdit()
   at Microsoft.CodeAnalysis.CSharp.EditAndContinue.CSharpEditAndContinueAnalyzer.ReportSyntacticRudeEdits(List`1 diagnostics, Match`1 match, Edit`1 edit, Dictionary`2 editMap)
   at Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AnalyzeSyntax(EditScript`1 script, Dictionary`2 editMap, SourceText oldText, SourceText newText, DocumentId documentId, IActiveStatementTrackingService trackingService, ImmutableArray`1 oldActiveStatements, ActiveStatement[] newActiveStatements, ImmutableArray`1[] newExceptionRegions, List`1 updatedMethods, List`1 diagnostics)
   at Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.&lt;AnalyzeDocumentAsync&gt;d__65.MoveNext()
…
```

It seems that 
http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp.Features/EditAndContinue/CSharpEditAndContinueAnalyzer.cs,2491
should be changed from
 `   var fieldDeclaration = (FieldDeclarationSyntax)oldNode.Parent.Parent;`
to
`    var fieldDeclaration = (BaseFieldDeclarationSyntax)oldNode.Parent.Parent;`

We should add a unit test for this as well.
</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32888</IssueID>
    <RepoID>1</RepoID>
    <Title>Readonly members syntax and symbol API</Title>
    <Description>Modified syntax checks and added symbol API to support the readonly members feature. See dotnet/csharplang#1710.

I outlined how I think the entire development of this feature breaks down in #32911. Would also appreciate feedback on that.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>01/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32887</IssueID>
    <RepoID>1</RepoID>
    <Title>Verifying a number of NRT bugs are fixed</Title>
    <Description>Found a number of NRT bugs which are now fixed and added the appropriate verification. In the EE tests it was mostly ensuring the tests were run with the latest language version (now the default). </Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32886</IssueID>
    <RepoID>1</RepoID>
    <Title>ILRepack + EasyConsole makes code execution unreachable</Title>
    <Description>**Version Used**: 2.10.0.0

**Steps to Reproduce**:

1. Create a console application (.NET Framework).
2. Import [this NuGet package](https://www.nuget.org/packages/ILRepack.Lib.MSBuild.Task/).
3. Import [this source code](https://github.com/splttingatms/EasyConsole.git) into your newly created project.
4. Then create these three classes:

DemoProgram.cs
```
using EasyConsole;

namespace PoC
{
    internal class DemoProgram : Program
    {
        public DemoProgram()
            : base("EasyConsole Demo", breadcrumbHeader: true)
        {
            AddPage(new MainPage(this));
            AddPage(new ExamplePage(this));

            SetPage&lt;MainPage&gt;();
        }
    }
}
```

MainPage.cs
```
using EasyConsole;
using System;

namespace PoC
{
    public class MainPage : MenuPage
    {
        public MainPage(Program program)
        : base("Main Page", program,
          new Option("one", () =&gt; program.NavigateTo&lt;ExamplePage&gt;()),
          new Option("two", () =&gt; program.NavigateTo&lt;ExamplePage&gt;()),
          new Option("three", () =&gt; program.NavigateTo&lt;ExamplePage&gt;()),
          new Option("Exit", () =&gt; Environment.Exit(0)))
        {
        }
    }
}
```

ExamplePage.cs
```
using EasyConsole;
using System.Linq;

namespace PoC
{
    public class ExamplePage : MenuPage
    {
        public ExamplePage(Program program)
            : base("Example Page", program, Enumerable.Range(0, 3).Select(i =&gt; new Option($"Option {i}", null)).ToArray())
        {
        }
    }
}
```

5. Navigate to `Program.cs` inside of `&lt;your EasyConsole lib path&gt;\Program.cs`, and put a breakpoint in line 98.

6. Compile in Release mode and then execute it.

7. Navigate to any page (by typing 1, 2 or 3), then, let the breakpoint enter in action.

8. Start pressing F10 (next step).

**Expected Behavior**:

You should be able to put the execution step at `CurrentPage.Display();` line (this will read another input, by this reason this will never reach the return statement).

**Actual Behavior**:

Before Display() is reached, execution is ended. Also, you can try to put a `Console.WriteLine("something")` after Console.Clear() and this will not be outputted in the screen.

If you remove ILRepack.MSBuild.Task package or you change to `Debug Mode` (the .targets file inside this package has defined a condition, ILRepack will only execute if `Release Mode` is selected), as you can see here:

`Condition="$(Configuration.Contains('Release')) and !Exists('$(ILRepackTargetsFile)') and '$(ClearOutputDirectory)' != 'False'"`

In line 32 from `packages\ILRepack.Lib.MSBuild.Task.2.0.16\build\ILRepack.Lib.MSBuild.Task.targets`.

This behavior will not happen. This happens as soon as you use ILRepack.

</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32885</IssueID>
    <RepoID>1</RepoID>
    <Title>update mono-devel in dockerfile, and don't cache later commands</Title>
    <Description>This fixes a couple of related Mono CI things:

1. Pass --debug on the command line for future debugging:
    - We invoke xunit via arcade, which has limited extensibility points. I've hooked in a target with a bit of quote foo to enable it. It's not very pretty, I'll open a separate bug on Arcade to let us do this in the future more elegantly.

2. Docker compose caches layers, causing out of date mono builds:
    - We grab mono as part of the docker container build out. If the underlying machines hang around for a while, we'll never rebuild due to caching. 
    - This PR adds a dummy arg to the dockerfile that we pass in as current datetime; this allows us to cache up to that point, then always rebuild afterwards (see https://github.com/moby/moby/issues/1996)
    - We add a new apt-get update/upgrade pair after the dummy arg, so we'll always update mono to the latest regardless of caching, but its much quicker than always rebuilding from scratch 

3. A mono upgrade bug between 5.21 and 5.23 breaks `apt-get update`:
    - Sadly we hit this bug (https://github.com/mono/mono/issues/12316) upgrading between our cached images and latest
    - For now we need to rebuild docker images from scratch in order to flush out the earlier build from all of our build machines 
    - When all the machines in the pool have cycled through we can remove the `--no-cache` option and just do an incremental update (bullet 2). 
</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32884</IssueID>
    <RepoID>1</RepoID>
    <Title>Address minor issues identified in review #32431.</Title>
    <Description>Fixes #32807</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32883</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail out on reporting unused parameter diagnostic for special paramet…</Title>
    <Description>…er names

We ignore parameter names that start with an underscore and are optionally followed by an integer, such as `_`, `_1`, `_2`, etc.
This allows bailing out on unused parameters for methods that need a specific signature and are forced to have these parameters. This also serves as a convenient way to suppress instances of unused parameter diagnostic without disabling the diagnostic completely.

Fixes #32851
Fixes #32228</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32882</IssueID>
    <RepoID>1</RepoID>
    <Title>Pattern matching with ValueTuple causes Compiler Error </Title>
    <Description>**Version Used**: 
Microsoft (R) Visual C# Compiler version 2.10.0.0 (b9fb1610)

**Steps to Reproduce**:

Add a case statement to a switch statement that checks for a ValueTuple&lt;bool, string&gt; and checks for the value of Item1 e.g.,

```c#

switch (val)
{
  case ValueTuple&lt;bool,string&gt; t when t.Item1 == true
    // do stuff
    break;
  // extraneous code omitted
}
```

Note that val is of type object.

The error can be overcome by two different syntax changes:
1. Move the value checking logic from the case and into the case body:

```c#
case ValueTuple&lt;bool,string&gt; t:
if (t.Item1 == true) do stuff...
```

2. Change equality `==` to `is` e.g., `case ValueTuple&lt;bool,string&gt; t when t.Item1 is true`

**Expected Behavior**:
Code should compile

**Actual Behavior**:
1&gt;Build FAILED.
1&gt;
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error MSB6006: "csc.exe" exited with code -2146232797.
1&gt;    0 Warning(s)
1&gt;    1 Error(s)
1&gt;
1&gt;Time Elapsed 00:00:04.04
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32881</IssueID>
    <RepoID>1</RepoID>
    <Title>Representation of suppression in IOperation</Title>
    <Description>With the change to remove the bound suppression node, the corresponding IOperation node was removed.
A few options:
- represent the suppression as a flag (like we do in the bound tree)
- inject some IOperation nodes back in</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32880</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail on null type information in GenerateDeconstructMethodCodeFixProvider</Title>
    <Description>It's possible that a valid foreach statement has an invalid variable declaration syntax, which can result in no type information on calling `GetForEachStatementInfo`

Fixes #32510 </Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32879</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect possible dereference of a null reference warning in case of 'x ?? throw' null check</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.0
VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code
```cs
#nullable enable
class C
{
  void Test(string? s)
  {
    _ = s ?? throw new System.ArgumentNullException(nameof(s));
    s.ToString();
  }
}
```

**Expected Behavior**:
No warnings. `s` is explicitly checked for null and if it's null an exception is throw on the first line. It's impossible for `s` to hold a null value on the second line.

**Actual Behavior**:
Incorrect `Possible dereference of a null reference` warning for `s.ToString()`
</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32878</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove redundant pattern check</Title>
    <Description>
    </Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32877</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing warnings for nullable references under `throw` statement/expression</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.0
VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C
{
  void M1() =&gt; throw null;
  void M2(System.Exception? ex = null) =&gt; throw ex;
}
```

**Expected Behavior**:
Nullable reference types warnings e.g. `Possible dereference of a null reference` for `throw null` and `throw ex` expressions.

**Actual Behavior**:
No warnings
</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32876</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix assertion in UsePatternMatching analyzer</Title>
    <Description>Hit this a couple of times while testing.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32875</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32874</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32873</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32872</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32871</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32870</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32869</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32868</IssueID>
    <RepoID>1</RepoID>
    <Title>Hardcode OptProf Drop Name not Drop object</Title>
    <Description>Ran a [signed build](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2363299) this time to ensure it was correct. </Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32867</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32866</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP Merge dev16.0-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32865</IssueID>
    <RepoID>1</RepoID>
    <Title>WIP Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32864</IssueID>
    <RepoID>1</RepoID>
    <Title>"Sequence contains no matching element" in ConvertToInterpolatedString</Title>
    <Description>**Version Used**: Preview 2.0

Press Ctrl+. anywhere from `$` to `)`:

```cs
class C
{
    void M()
    {
        _ = $"foo" + ("bar");
    }
}
```

Gives:

![image](https://user-images.githubusercontent.com/8040367/51810644-2644b380-2277-11e9-9ce0-94638239316c.png)

```
System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source,Func`2 predicate)
   at async Microsoft.CodeAnalysis.ConvertToInterpolatedString.AbstractConvertConcatenationToInterpolatedStringRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32863</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32862</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32861</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32860</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>28/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32859</IssueID>
    <RepoID>1</RepoID>
    <Title>Introduce a new 'wrap binary expression' (without alignment) refactoring.</Title>
    <Description>Implements https://github.com/dotnet/roslyn/issues/32830
Followup to https://github.com/dotnet/roslyn/pull/32858

This gives users the option to both 'wrap' and 'wrap and align' a binary expression.  The difference between the two can be seen in cases like this:

![image](https://user-images.githubusercontent.com/4564579/51808161-262bc000-2245-11e9-93a4-d397118e5201.png)

![image](https://user-images.githubusercontent.com/4564579/51808168-33e14580-2245-11e9-9fc5-49e9cbe29bb5.png)

'Wrap expression' wraps as if the user hit 'enter' at each operator.  i.e. it will do whatever 'smart indent' would do.

'Wrap and align expression' wraps the individual parts of the expression, but aligns them with the start of the expression.

The former is for those who just want to speed up the act of pressing 'enter' a lot, and who want whatever default indentation VS would do.  The latter is for people who want the indentation to more clearly indicate the parent/child relationship between the wrapped parts.

</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32858</IssueID>
    <RepoID>1</RepoID>
    <Title>Add helpers to make it easy to compute smart-indenting in wrapping refactoring.</Title>
    <Description>
    </Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32857</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix dev div insertion files unsigning</Title>
    <Description>Corrects logic in DevDivInsertionFiles.csproj - separate assembly re-signing of libraries that we need to do to enable ResultProvider to run on Win10S from optimization data embedding. Previous thinking was that we can exploit optimization data embedding to force resigning with Win10S, but that does not work. We can only apply optimization data on assemblies we train against, and we don't train libraries loaded msvsmon process. 

Actually fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/755193.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32856</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove redundant assignment fails to handle 'if' conditions without a block</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

**Steps to Reproduce**:

```csharp
class Test
{
  int[] data = { 0 };

  void Method()
  {
    ref int target = ref data[0];
    if (target != 1)
      target = 1;
  }
}
```

With the caret on `target = 1;`, attempt to apply the **Remove redundant assignment** code fix.

**Expected Behavior**:

```csharp
class Test
{
  int[] data = { 0 };

  void Method()
  {
    ref int target = ref data[0];
    if (target != 1)
    {
    }
  }
}
```

**Actual Behavior**:

```text
System.ArgumentNullException : Value cannot be null.
Parameter name: statement
   at Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(SyntaxToken ifKeyword,SyntaxToken openParenToken,ExpressionSyntax condition,SyntaxToken closeParenToken,StatementSyntax statement,ElseClauseSyntax else)
   at Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Update(SyntaxToken ifKeyword,SyntaxToken openParenToken,ExpressionSyntax condition,SyntaxToken closeParenToken,StatementSyntax statement,ElseClauseSyntax else)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIfStatement(IfStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.SyntaxRemover.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(BlockSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.SyntaxRemover.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMethodDeclaration(MethodDeclarationSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.SyntaxRemover.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassDeclaration(ClassDeclarationSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.SyntaxRemover.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.SyntaxRemover.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxNodeRemover.RemoveNodes[TRoot](TRoot root,IEnumerable`1 nodes,SyntaxRemoveOptions options)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.RemoveNodesCore(IEnumerable`1 nodes,SyntaxRemoveOptions options)
   at Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNode[TRoot](TRoot root,SyntaxNode node,SyntaxRemoveOptions options)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.RemoveNodeInternal(SyntaxNode root,SyntaxNode declaration,SyntaxRemoveOptions options)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.&lt;&gt;c__DisplayClass196_0.&lt;RemoveNode&gt;b__0(SyntaxNode r)
   at Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PreserveTrivia[TNode](TNode node,Func`2 nodeChanger)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.RemoveNode(SyntaxNode root,SyntaxNode node,SyntaxRemoveOptions options)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.RemoveChange.Apply(SyntaxNode root,SyntaxGenerator generator)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()
   at async Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedValuesCodeFixProvider`11.FixAllAsync[TExpressionSyntax,TStatementSyntax,TBlockSyntax,TExpressionStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TForEachStatementSyntax,TSwitchCaseBlockSyntax,TSwitchCaseLabelOrClauseSyntax,TCatchStatementSyntax,TCatchBlockSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
```
</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32855</IssueID>
    <RepoID>1</RepoID>
    <Title>Unused value assignment analysis doesn't handle ref locals</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

Found while working on https://github.com/tonerdo/coverlet/pull/309

**Steps to Reproduce**:

```csharp
class Test
{
  int[] data = { 0 };

  void Method()
  {
    ref int target = ref data[0];
    target = 1;
  }
}
```

**Expected Behavior**:

IDE0059 is not reported for the assignment.

**Actual Behavior**:

IDE0059 is reported for the assignment.
</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32854</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32853</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32852</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 - Remove unused parameter should not fire for user-defined operators</Title>
    <Description>Removing the parameter isn't an option when it's required. Compare this to the case of implementing an interface and not using a parameter, which is fine and doesn't cause IDE0060 to fire.

```csharp
class Op
{
    // IDE0060 - Remove unused parameter
    public static Op operator -(Op op) =&gt; throw new NotImplementedException();
}
```</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32851</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 - Remove unused parameter for internal method referenced by a delegate in another type</Title>
    <Description>This warning fires incorrectly when the method is used in a method group conversion from another type, as shown below with `Bar.Foo` referenced from `Baz`.

```csharp
class Baz
{
    private static readonly Action&lt;int&gt; s_foo = Bar.Foo;
}

class Bar
{
    // IDE0060 - Remove unused parameter
    internal static void Foo(int unused) { }
}

class Qux
{
    private static readonly Action&lt;int&gt; s_foo = Foo;

    // No warning
    internal static void Foo(int unused) { }
}
```</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32850</IssueID>
    <RepoID>1</RepoID>
    <Title>Use flag to represent suppression in bound tree</Title>
    <Description>This PR addresses some issues with the suppression operator. It does not address tuple scenarios or the semantic model.
Compared to https://github.com/dotnet/roslyn/pull/32699 which added many special cases based on bound node for suppression, this PR drops the suppression node from the bound tree and represents suppression as a flag.

Fixed a number of crashes
Fixes https://github.com/dotnet/roslyn/issues/29862 (top-level nullability of !)
Fixes https://github.com/dotnet/roslyn/issues/29903 (`t! = s` should be an error)
I also noticed that we skipped some warnings in cast scenarios (latest [LDM notes](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-08-20.md#11-suppression-of-nested-nullability) on the topic)
Fixes https://github.com/dotnet/roslyn/issues/31294 (`throw null!;` isn't allowed)
Fixes https://github.com/dotnet/roslyn/issues/29905
Fixes https://github.com/dotnet/roslyn/issues/29906

Follow-ups:
- We'll need to refine where suppressions are allowed (I probably made more cases illegal than strictly necessary, for now)
- https://github.com/dotnet/roslyn/issues/29710 (analysis of ref re-assignment and CheckValueKind)
- https://github.com/dotnet/roslyn/issues/31297 (escape rules and suppressions)
- https://github.com/dotnet/roslyn/issues/32553 (suppressions on tuple literals)
- https://github.com/dotnet/roslyn/issues/32364 (nullable and dynamic)
- https://github.com/dotnet/roslyn/issues/32661 (follow-up on semantic model on suppressed expressions)
- https://github.com/dotnet/roslyn/issues/32697 (need to re-analyze method group conversions)
- https://github.com/dotnet/roslyn/issues/32698 (need to analyze delegate creations)
- https://github.com/dotnet/roslyn/issues/32844 (need to analyze default parameter values better)
- https://github.com/dotnet/roslyn/issues/32881 (represent suppressions in IOperation)

Notes:
- Although I ended up removing the IOperation test I'd added, I adjusted the comparison logic for IOperation assertions to tolerate whitespaces</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32849</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32848</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32847</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview3-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32846</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>27/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32845</IssueID>
    <RepoID>1</RepoID>
    <Title>Performance improvements for formatting analyzer</Title>
    <Description>Recommended review strategy: review each commit.

On request I can easily break up the pull request to simplify review of individual changes, but keep in mind nearly all of the *observable* performance improvement comes from the final changes in the PR.

Times prior to this change:

* 46150ms
* 46215ms
* 47086ms

Times with `IFormattingRule` replaced with `AbstractFormattingRule` (eliminate interface dispatch):

* 46215ms
* 45208ms
* 45355ms

&lt;details&gt;&lt;summary&gt;Times with virtual dispatch and elimination of &lt;tt&gt;ThreadLocal&amp;lt;List&amp;lt;T&amp;gt;&amp;gt;&lt;/tt&gt;:&lt;/summary&gt;

Moved to #32952 

* 45618ms
* 44991ms
* 46964ms

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;Times with above plus &lt;tt&gt;IndentationOptions&lt;/tt&gt;:&lt;/summary&gt;

Change is not included in this pull request.

* 48296ms
* 45684ms
* 44475ms

&lt;/details&gt;

&lt;br/&gt;

Times with generics expanded to per-operation non-generic types.

* 40041ms
* 40309ms
* 41543ms</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>09/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32844</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable analysis of default parameter values</Title>
    <Description>We currently do a simple, but incomplete, analysis of default parameter values.

```C#
        [WorkItem(26626, "https://github.com/dotnet/roslyn/issues/26626")]
        [Fact]
        public void ParameterDefaultValue_02()
        {
            var source =
@"class C
{
    const string? S0 = null;
    static void F0(string s = null!) { }
    static void F1(string x = (string)null!, string y = ((string)null)!) { }
    static void F2(string x = default!, string y = default(string)!) { }
    static void F3(string s = (S0!)!) { }
    static void M()
    {
        F0();
        F1();
        F2();
        F3();
        F1(x: null);
        F1(y: null);
        F2(null!, null);
    }
}";
            // TODO2 we should warn on the conversion of `null` to `string` in `(string)null`
            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics(
                // (14,15): warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.
                //         F1(x: null);
                Diagnostic(ErrorCode.WRN_NullAsNonNullable, "null").WithLocation(14, 15),
                // (15,15): warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.
                //         F1(y: null);
                Diagnostic(ErrorCode.WRN_NullAsNonNullable, "null").WithLocation(15, 15),
                // (16,19): warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.
                //         F2(null!, null);
                Diagnostic(ErrorCode.WRN_NullAsNonNullable, "null").WithLocation(16, 19)
                );
        }
```</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32843</IssueID>
    <RepoID>1</RepoID>
    <Title>Captures Invalid Dimensions from an array variable declaration.</Title>
    <Description>Initially this pull request enables the dimensions specified in error in a variable declaration such as this:

```csharp
int[10] x;
```
To be captured in a `BoundTypeExpression` as `BoundDimensionsOpt`, and to be consumed via an added `IgnoredDimensions` Property in `IVariableDeclarationOperation`.

See #32464

In future pull requests I may look at including support for capturing the invalid dimensions in:

- parameters
- foreach and for loop variables
- typeof expressions
- type arguments
- is type expressions
- casts
- as expressions
- Return types
- Field types 
etc.

It is unlikely that I will do all of these however, so suggestions as to which would be highest priority would be useful.
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32842</IssueID>
    <RepoID>1</RepoID>
    <Title>Null Coalescing Assignment: Compiler should not report IDE0052 when assigning a value to a property backing field</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

**Steps to Reproduce**:
When using the new null coalescing assignment operator to initialize a field used as the backing store for a property, message IDE0052 is reported for the backing field.

For example:
```c#
private Foo _foo1; // Message IDE0052: Private member '_foo1' can be removed as the value assigned to it is never read.
public Foo Foo1 =&gt; _foo1 ??= new Foo();

private Foo _foo2; // No message when using this kind of conditional assignment construction
public Foo Foo2 =&gt; _foo2 ?? (_foo2 = new Foo());
```

**Expected Behavior**:
No message is reported.

**Actual Behavior**:
Message IDE0052 is reported.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32841</IssueID>
    <RepoID>1</RepoID>
    <Title>Updated version to 3.0.0 beta 4</Title>
    <Description>
    </Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32840</IssueID>
    <RepoID>1</RepoID>
    <Title>Resources.Designer.cs bug</Title>
    <Description>This bug only appear when the language of VS is Chinese.

**Version Used**: VS2017 15.9.6

**Steps to Reproduce**:

1.  Create a WinForm project, and open Resources.Designer.cs, if the language is English, the summary of Culture property is:
```
        /// &lt;summary&gt;
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// &lt;/summary&gt;
```
If the language is Chinese, the summary of Culture property is:
```
        /// &lt;summary&gt;
        ///   覆盖当前线程的 CurrentUICulture 属性
        ///   使用此强类型的资源类的资源查找。
        /// &lt;/summary&gt;
```
2. Double click Resources.resx, and write any thing in String1.

**Expected Behavior**:
If the language is English, the summary doesn't change, but If the language is Chinese, it will become to:
```
        /// &lt;summary&gt;
        ///   重写当前线程的 CurrentUICulture 属性
        ///   重写当前线程的 CurrentUICulture 属性。
        /// &lt;/summary&gt;
```
There're same text in 2 lines.

**Actual Behavior**: Don't change, keep:
```
        /// &lt;summary&gt;
        ///   覆盖当前线程的 CurrentUICulture 属性
        ///   使用此强类型的资源类的资源查找。
        /// &lt;/summary&gt;
```
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32839</IssueID>
    <RepoID>1</RepoID>
    <Title>Language service shows non-accessible protected setters inside object initializers</Title>
    <Description>**Version Used**:

Visual Studio Enterprise 2017 version 15.9.4 / VisualStudio.15.Release/15.9.4+28307.222
C# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a

**Steps to Reproduce**:

1. Write an abstract class A with a public property that has a public getter and a protected setter.
2. Write a non-abstract class B that inherits from A.
3. In a class C that doesn't inherit from A or B, instantiate a class B and hit [Ctrl]+[Space] inside the object initializer.

**Expected Behavior**:
Do not show properties with protected setters.

**Actual Behavior**:
Showing properties with protected setters.

![image](https://user-images.githubusercontent.com/13019179/51789038-f492f600-216b-11e9-84cd-fa46689d7722.png)

```cs
namespace X
{
    class Y
    {
        Animal[] animals = new Animal[]
        {
            new Dog
            {
                Name = "Leo", // error
            },
            new Dog
            {
                /* [Ctrl]+[Space] here */
            }
        }
    }

    abstract class Animal
    {
        public string Type { get; }
        public string Name { get; protected set; }
    }

    class Dog : Animal
    {

    }
}
```
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32838</IssueID>
    <RepoID>1</RepoID>
    <Title>Object browser does not render &lt;br/&gt;</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/176321

**Steps to Reproduce**:

1. Attempt to write a documentation comment with a line break that is _not_ a paragraph break using `&lt;br/&gt;`
2. View the documentation comment in Object Browser

**Expected Behavior**:

The `&lt;br/&gt;` is rendered as a line break that is not a paragraph break.

**Actual Behavior**:

The `&lt;br/&gt;` is ignored. Attempting to use `&lt;para&gt;` as an alternative creates a paragraph break.
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32837</IssueID>
    <RepoID>1</RepoID>
    <Title>C# console app, turn virtual space on</Title>
    <Description>**Version Used**: Visual Studio 2015

Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/173194

**Steps to Reproduce**:

C# console app, turn virtual space on.

Main(null); |

press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Backspace&lt;/kbd&gt; couple of times to get rid of the null

**Expected Behavior**:

Main(|

like in previous Visual Studio version. 

**Actual Behavior**:

Main( |
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32836</IssueID>
    <RepoID>1</RepoID>
    <Title>The color of links when using the dollar sign operator is wrong</Title>
    <Description>Affected Branch: 
Affected Build: 
Affected Product Language: 

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/172884

Steps to reproduce:

1. create a console app with the following

```csharp
class Program
{
    static void Main(string[] args)
    {
        var x = "value";
        var text = $"http://test/{x}/test";
    }
}
```

expected: the link is not blue
expected: clicking on the link does nothing
actual: this link is blue
actual: clicking on the link takes you to the url</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32835</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot comment code with 'REM'</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

:link: Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/159051

**Steps to Reproduce**:

Type `REM` to start a line comment in VB.

**Expected Behavior**:

Autocomplete does not replace `REM` when &lt;kbd&gt;Space&lt;/kbd&gt; is pressed.

**Actual Behavior**:

Autocomplete replaces `REM` with `RemoveHandler` when &lt;kbd&gt;Space&lt;/kbd&gt; is pressed.
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32834</IssueID>
    <RepoID>1</RepoID>
    <Title>Absent Public API </Title>
    <Description>The following public api isn't in either of the PublicAPI files.
```vbnet
Public Shared ReadOnly Property [Default] As VisualBasicParseOptions = New VisualBasicParseOptions()
```
[VisualBasicParseOptions.vb](https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Portable/VisualBasicParseOptions.vb#L17).

This is due to how the exist DeclarePublicAPIAnalyzer works, I am implementing an update to recognise auto-implemented properties. It also raises another question, should the analyser recognise changes to `ReadOnly` / `WriteOnly` of a property? 
eg
```
Public Property [Property]() As Integer
' to
Public ReadOnly Property [Property]() As Integer
```
or visa-versa?

If it did it would produce thousand of diagnostics against the Roslyn code base, as it currently isn't being accounted for.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32833</IssueID>
    <RepoID>1</RepoID>
    <Title>I would like to have the "base"-element in the "local/QuickWatch"-window back</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/151529

**Steps to Reproduce**:

```csharp
class A
{
    int Value { get; }
}

class B : A
{
}
```

Add `new B()` to the **Quick Watch** window, or see a local variable of type `B` in the **Locals** window.

**Expected Behavior**:

The inherited `A.Value` property is hidden under a **base** node in the debugger tree.

**Actual Behavior**:

The `Value` property shows as a child of `B`.
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32832</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider using IBlankLineIndentationService as a language service</Title>
    <Description>Obtaining `IBlankLineIndentationService` as a language service could avoid the need for language-specific overrides.

Originally requested in https://github.com/dotnet/roslyn/pull/32809#discussion_r251176526.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32831</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid creating instances of IBlankLineIndentationService on-the-fly</Title>
    <Description>`CSharpIndentationService` and `VisualBasicIndentationService` are stateless, but instances of these types are created on-the-fly in refactorings. Consider using a singleton instance instead.

Originally requested in https://github.com/dotnet/roslyn/pull/32809#discussion_r251176464</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32830</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider supporting column-aligned indentation levels when wrapping binary expressions</Title>
    <Description>**Version Used**: Master branch once #32809 is merged

**Steps to Reproduce**:

Wrap the binary expression in the following code:

```csharp
while (a &amp;&amp; b)
{
}
```

**Expected Behavior**:

Users should have an option to wrap the expression with wrapped sub-expressions aligned to the original expression, like this:

```csharp
while (a &amp;&amp;
       b)
{
}
```

**Actual Behavior**:

Users only have the option to wrap the expression the way Smart Indent would wrap the expression when pressing &lt;kbd&gt;Enter&lt;/kbd&gt;.

```csharp
while (a &amp;&amp;
    b)
{
}
```
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>09/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32829</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32828</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32827</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32826</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32825</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to dev16.0-preview3-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps
git reset --hard upstream/dev16.0-preview3-vs-deps
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32824</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32823</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview3 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview3-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview3
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview3-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32822</IssueID>
    <RepoID>1</RepoID>
    <Title>'VisualBasicConvertForToForEachCodeRefactoringProvider' encountered an error and has been disabled</Title>
    <Description>VSF_TYPE_MARKDOWNStacktrace


```
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.VisualBasic.ConvertForToForEach.VisualBasicConvertForToForEachCodeRefactoringProvider.TryGetForStatementComponents(ForBlockSyntax forBlock,SyntaxToken&amp;amp; iterationVariable,ExpressionSyntax&amp;amp; initializer,MemberAccessExpressionSyntax&amp;amp; memberAccess,ExpressionSyntax&amp;amp; stepValueExpressionOpt,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.ConvertForToForEach.AbstractConvertForToForEachCodeRefactoringProvider`6.ComputeRefactoringsAsync[TStatementSyntax,TForStatementSyntax,TExpressionSyntax,TMemberAccessExpressionSyntax,TTypeNode,TVariableDeclaratorSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/435505/visualbasicconvertfortoforeachcoderefactoringprovi.html
VSTS ticketId: 777066_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32821</IssueID>
    <RepoID>1</RepoID>
    <Title>Add type IL verifier helper</Title>
    <Description>This adds a test helper that can be used to verify the IL for a whole type. It should be very helpful for tests that introduce new members into a type, like closure conversion and async/iterator rewriting.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32820</IssueID>
    <RepoID>1</RepoID>
    <Title>Updated conditions for the publish tasks of Spanish_Unit_Tests</Title>
    <Description>
    </Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32819</IssueID>
    <RepoID>1</RepoID>
    <Title>make Sqlite to handle error better</Title>
    <Description>we have bunch of NFW on SqlException such as 

..

Microsoft.CodeAnalysis.SQLite.Interop.SqlException: disk I/O error
disk I/O error
   in Microsoft.CodeAnalysis.SQLite.Interop.SqlConnection.Throw(sqlite3 handle, Result result)
   in Microsoft.CodeAnalysis.SQLite.Interop.SqlConnection.ExecuteCommand(String command, Boolean throwOnError)
   in Microsoft.CodeAnalysis.SQLite.SQLitePersistentStorage.Initialize(Solution solution)
   in Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.TryCreatePersistentStorage(Solution solution, String workingFolderPath, AbstractPersistentStorage&amp; persistentStora

…

looks like when this kind exception is thrown on write, we just leak the exception out rather than handling it by returning "false"

didn't dig in through so not 100% sure how it is handled, but opening issue since SqlException is top 1 NFW issue we have.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32818</IssueID>
    <RepoID>1</RepoID>
    <Title>Simulate the C# 7 compiler's behavior on traditional switch statements with old language versions</Title>
    <Description>Fixes #32806
This was a "forward compatibility" bug, where new compilers would accept code in old language versions that the older compilers would not have accepted.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32817</IssueID>
    <RepoID>1</RepoID>
    <Title>"Enhanced colors": Different attribute highlighting</Title>
    <Description>Moved from [Developer Community issue](https://developercommunity.visualstudio.com/content/problem/435306/enhanced-colors-different-attribute-highlighting.html):

With this:
```csharp
using System.Diagnostics.CodeAnalysis;

[assembly: SuppressMessage("", "")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("", "")]
```
From 15.9:
![image](https://user-images.githubusercontent.com/611219/51780554-47b16e00-20c4-11e9-8a6c-8a036473e87a.png)

From 16.0 preview 2:
![image](https://user-images.githubusercontent.com/611219/51780470-93174c80-20c3-11e9-8623-6116de3bc108.png)

`SuppressMessage` gets highlighted with the class color and `System.Diagnostics.CodeAnalysis.SuppressMessage` gets highlighted with the method color.
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32816</IssueID>
    <RepoID>1</RepoID>
    <Title>If a solution is closed and reopened, still recreate a SolutionId</Title>
    <Description>We previously always considered that closing and reopening a solution should generate a new Id, even if it happened to be the same file. Since we sometimes otherwise hold onto old state, we'll continue this.

Fixes dotnet/roslyn#31686.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32815</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: allow pattern-based disposal in await using and foreach (#32731)</Title>
    <Description>
    </Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32814</IssueID>
    <RepoID>1</RepoID>
    <Title>Revert hardcoding the OptDrop drop location</Title>
    <Description>In https://github.com/dotnet/roslyn/pull/32801 we hardcoded which version of OptProf data to build against while we work out issues with the OptProf generation. We need to revert this once OptProf is generating properly again.
</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32813</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix bug where references didn't always have a file watcher</Title>
    <Description>This is retargeting #32649 to Preview 3.


&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Customer has a project with lots of P2P references and loads/unloads projects in various orders. In some cases, this will cause VS to crash or at least the project system to get in a missynced state.

### Bugs this fixes

dotnet/roslyn#32554 and https://devdiv.visualstudio.com/DevDiv/_workitems/edit/750094

### Workarounds, if any

None, really. If you don't unload projects you won't hit it, but creating some types of projects implicitly do the problematic operations in their template wizard.

### Risk

Moderate: it's a fair amount of code churn, but the churn is fairly straightforward.

### Performance impact

None.

### Is this a regression from a previous update?

Yes, this was broken by a late Preview 1 fix that missed an edge case.

### Root cause analysis

This edge case noticed in testing of a fix we made for Preview 1, but the full impact wasn't realized, and at the time a bug was filed to follow up on it. This is fixing the issue. Tests have been added to cover this scenario too.

### How was the bug found?

Noticed during testing of another fix, and also internal testing with certain templates that also trigger the bug.

&lt;/details&gt;</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32812</IssueID>
    <RepoID>1</RepoID>
    <Title>Add 16.0-preview3 branches to publish and azure pipelines</Title>
    <Description>
    </Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32811</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow locals, parameters, range variables inside a lambda to shadow names outside the lambda</Title>
    <Description>Porting #32754 to dev16.0-preview3.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32810</IssueID>
    <RepoID>1</RepoID>
    <Title>Regression test for 32503</Title>
    <Description>This issue is fixed. Adding a regression test.

closes #32503</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32809</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix indentation of wrapped expressions</Title>
    <Description>The previous implementation did not use the standard indentation service to determine the proper indentation level. The code is updated to use the indentation reported by the indentation service.</Description>
    <CreatedDate>26/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32808</IssueID>
    <RepoID>1</RepoID>
    <Title>Bad code for consecutive interface type tests with a when clause in a switch</Title>
    <Description>Fixes #32774

@dotnet/roslyn-compiler May I please have a couple of reviews for this bad code fix targeting preview 3?
</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>09/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32807</IssueID>
    <RepoID>1</RepoID>
    <Title>Follow up on minor code review comments on #32431</Title>
    <Description>There are a number of small code review comments on #32431 which were not addressed before integration. They should be addressed.
</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32806</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch Expression Exhaustiveness needs to be conditions on langver</Title>
    <Description>```C#
namespace ConsoleApp1
{
    class Program
    {
        static int Main(string[] args)
        {
            bool? test = null;

            switch (test)
            {
                case true:
                    return 1;
                case false:
                    return 0;
                case null:
                    return -1;
            }
        }
    }
}
```

This code currently compiles in a brand-new C# project on dev16, but will not compile with an older 7.x roslyn compiler because it did not do the exhaustiveness checking that the new compiler will do. We need to condition this on langver 8.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32805</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove extra well-known members from Range</Title>
    <Description>We currently require more members than strictly necessary for range
syntax. This change makes it so we only require one member. It may be
useful for performance to use extra members in the future, but right
now optimal range performance is not what we're focusing on and this
allows CoreFX to change the names without require a compiler change.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32804</IssueID>
    <RepoID>1</RepoID>
    <Title>Support long paths in compilers &amp; compiler servers</Title>
    <Description>Ideally, the compilers (in their various forms) would support using files with paths that exceed `MAX_PATH`.

This [requires several changes](https://blogs.msdn.microsoft.com/jeremykuhne/2016/07/30/net-4-6-2-and-long-paths-on-windows-10/) to coordinate to convince Windows and .NET to support long paths:

- [ ] Long paths have to be enabled at the OS level via registry or Group Policy config (nothing Roslyn can do about this)
- [ ] The application .exe must carry a win32 manifest that declares that the application is `longPathAware`
- [x] The application must target .NET 4.6.2 or higher (or opt in its `app.config`)

Long paths were enabled for MSBuild 16.0 in https://github.com/Microsoft/msbuild/pull/3507; similar changes would need to be made for each of the Roslyn executables.

Simple repro of `csc.exe` failing here:

**Version Used**: 

231aeb8b

**Steps to Reproduce**:

```
s:\repro\long_paths&gt;dir /b s:\repro\long_paths\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\Program.cs
Program.cs

s:\repro\long_paths&gt;csc s:\repro\long_paths\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\Program.cs
Microsoft (R) Visual C# Compiler version 3.0.19.6812 (231aeb8b)
Copyright (C) Microsoft Corporation. All rights reserved.

error CS2001: Source file 's:\repro\long_paths\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\Program.cs' could not be found.
```

Alternately, in MSBuild, using the compiler server:

```
Microsoft (R) Build Engine version 16.0.360-preview+g9781d96883 for .NET Framework
Copyright (C) Microsoft Corporation. All rights reserved.

Build started 1/25/2019 4:28:41 PM.
Project "s:\repro\long_paths\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\sample.csproj" on node 1 (default targets).
_CheckForNETCoreSdkIsPreview:
C:\Program Files\dotnet\sdk\3.0.100-preview-009812\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.RuntimeIdentifierInference.targets(142,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [s:\repro\long_paths\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\sample.csproj]
_WriteAppConfigWithSupportedRuntime:
Skipping target "_WriteAppConfigWithSupportedRuntime" because all output files are up-to-date with respect to the input files.
GenerateBindingRedirects:
  No suggested binding redirects from ResolveAssemblyReferences.
GenerateTargetFrameworkMonikerAttribute:
Skipping target "GenerateTargetFrameworkMonikerAttribute" because all output files are up-to-date with respect to the input files.
CoreGenerateAssemblyInfo:
Skipping target "CoreGenerateAssemblyInfo" because all output files are up-to-date with respect to the input files.
CoreCompile:
  C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\15.0\Bin\Roslyn\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702 /nostdlib+ /platform:AnyCPU /errorreport:prompt /warn:4 /define:TRACE;DEBUG;NETFRAMEWORK;NET472 /highentropyva+ /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\mscorlib.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Core.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Data.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Drawing.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.IO.Compression.FileSystem.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Numerics.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Runtime.Serialization.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Xml.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Xml.Linq.dll" /debug+ /debug:portable /filealign:512 /optimize- /out:obj\Debug\net472\sample.exe /ruleset:"C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\Team Tools\Static Analysis Tools\\Rule Sets\MinimumRecommendedRules.ruleset" /subsystemversion:6.00 /target:exe /warnaserror- /utf8output /deterministic+ Program.cs "C:\Users\raines\AppData\Local\Temp\.NETFramework,Version=v4.7.2.AssemblyAttributes.cs" obj\Debug\net472\sample.AssemblyInfo.cs /warnaserror+:NU1605
  Using shared compilation with compiler from directory: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\15.0\Bin\Roslyn
CSC : error CS2001: Source file 's:\repro\long_paths\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\Program.cs' could not be found. [s:\repro\long_paths\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\sample.csproj]
CSC : error CS2001: Source file 's:\repro\long_paths\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\obj\Debug\net472\sample.AssemblyInfo.cs' could not be found. [s:\repro\long_paths\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\sample.csproj]
Done Building Project "s:\repro\long_paths\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\sample.csproj" (default targets) -- FAILED.

Build FAILED.
```</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32803</IssueID>
    <RepoID>1</RepoID>
    <Title>Update GetAllowedModifiers</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32423
</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32802</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge Master to dev16.0-preview3</Title>
    <Description>
    </Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32801</IssueID>
    <RepoID>1</RepoID>
    <Title>Hardcode the optprof drop to the last known good build</Title>
    <Description>
    </Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32800</IssueID>
    <RepoID>1</RepoID>
    <Title>EE: Consider enumerating members lazily in member expansion</Title>
    <Description>Tracking TODO in the code.

https://github.com/dotnet/roslyn/blob/594c6592e26a13a53c8ffdec579a2c34f347c5be/src/ExpressionEvaluator/Core/Source/ResultProvider/Expansion/MemberExpansion.cs#L67</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32799</IssueID>
    <RepoID>1</RepoID>
    <Title>Keep the version of languages used in EE current</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/30436.
Fixes https://github.com/dotnet/roslyn/issues/31179.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32798</IssueID>
    <RepoID>1</RepoID>
    <Title>Extension methods in method groups when using static imports</Title>
    <Description>```
using static A;

public static class A
{
    public static bool M(string path) // add 'this' modifier here
    {
        return true;
    }
}
public static class B
{
    static void Main()
    {
        var list = new string[0];
        list.Where(M);
    }
}
```

**Expected behavior**

Adding `this` has no impact whether `M` can be used as method group.

**Actual behavior**

Compile error. Note that fully qualifying the method with `A.M` fixes the error.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32797</IssueID>
    <RepoID>1</RepoID>
    <Title>Documentation: VB LanguageVersion enum is missing doc comments</Title>
    <Description>While C# [LanguageVersion](https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/LanguageVersion.cs#L10) enum has a list of all language features introduced in the version (which is very useful), VB has no comments at all: https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Portable/LanguageVersion.vb#L10.

</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32796</IssueID>
    <RepoID>1</RepoID>
    <Title>Link DefaultInterfaceImplementation feature to C# 8 language version.</Title>
    <Description>
    </Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32795</IssueID>
    <RepoID>1</RepoID>
    <Title>[EE] Unmangle compiler-generated names shown in the watch windows</Title>
    <Description>From VSO issue: [94580](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/94580)

Steps to reproduce:

1. Debug the following code:

 
```C#
private static void Main(string[] args)
{
  IEnumerable&lt;string&gt; enumerable = GetEnumerable();
  Console.WriteLine(enumerable);
}
 
public static IEnumerable&lt;string&gt; GetEnumerable()
{
  yield break;
}
```

2. Set a breakpoint on enumerable
3. Drag it to the watch window

Make note of the Value column for row that contains "enumerable".

*Expected:*
![image](https://user-images.githubusercontent.com/41759/51762117-b0c4c180-2083-11e9-93c7-d57d03898bf4.png)

*Actual:*
![image](https://user-images.githubusercontent.com/41759/51762127-b6220c00-2083-11e9-95c9-2721cd774a90.png)


</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32794</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: Add test for `ref struct` enumerator</Title>
    <Description>Should be disallowed in `await foreach`, as ref struct variables aren't allowed in async methods.

```C#
class C
{
    public Enumerator GetAsyncEnumerator()
    {
        return new Enumerator();
    }

    public ref struct Enumerator
    {
        public async Task&lt;bool&gt; MoveNextAsync() =&gt; true;
        public int Current =&gt; throw null;
        public Task DisposeAsync() { }
    }
}
```</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32793</IssueID>
    <RepoID>1</RepoID>
    <Title>Move toolset to the dev16.0p2 compiler</Title>
    <Description>This version of the build task can run correctly on .NET Core 3.0. Our
current one is suffering from a private reflection bug that causes the
build tasks to crash on startup. This is the PR which previously fixed
that bug.

https://github.com/dotnet/roslyn/pull/31763</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32792</IssueID>
    <RepoID>1</RepoID>
    <Title>Banner of "Add file banner" filename  refactoring in the header should replaced with the target filename</Title>
    <Description>When I execute "Add file banner" (even with disabled ReSharper 2018.3.1), I always get the following file banner:

```csharp
//-----------------------------------------------------------------------
// &lt;copyright file="MfctCommandHandler.cs" company="Fubar Development Junker"&gt;
//     Copyright (c) Fubar Development Junker. All rights reserved.
// &lt;/copyright&gt;
// &lt;author&gt;Mark Junker&lt;/author&gt;
//-----------------------------------------------------------------------
```

The problem is two-fold:

1. It always inserts `MfctCommandHandler.cs` as file - even though I tried to add it to a different file
2. I'd like to reconfigure the banner to something like the following:

```csharp
// &lt;copyright file="LangCommandHandler.cs" company="Fubar Development Junker"&gt;
// Copyright (c) Fubar Development Junker. All rights reserved.
// &lt;/copyright&gt;
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/435193/banner-of-add-file-banner-code-fix-is-not-configur.html
VSTS ticketId: 776909_
_These are the original issue comments:_

Mark Junker on 1/24/2019, 03:35 AM (31 hours ago): &lt;p&gt;The `&amp;lt;`/`&amp;gt;`, etc... seems to be an encoding problem with issues sent over the "Visual Studio Feedback" tool.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32791</IssueID>
    <RepoID>1</RepoID>
    <Title>Edit.GotoBrace does not work for block comments</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally filed at:

Related to #7120, and likely can be fixed similar to #7327.

**Steps to Reproduce**:

1. Create a block comment
2. Place the caret at the start of `/*`
3. Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;]&lt;/kbd&gt;
4. Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;]&lt;/kbd&gt;

**Expected Behavior**:

After step (3), the caret moves to the ending `*/` (immediately before the `/`).
After step (4), the caret moves back to before the `/*`.

**Actual Behavior**:

No caret movement.

This is a regression relative to Visual Studio 2013.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32790</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio doesn't adjust XML Literal tag when changing tag name</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally here: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/132619

**Steps to Reproduce**:

1. Add the following VB code:

    ```vb
    Module Module1

        Sub Main()
            Dim xml = &lt;root&gt;
                          &lt;nam&gt;Name&lt;/nam&gt;
                      &lt;/root&gt;
        End Sub

    End Module
    ```

2. Change `&lt;nam&gt;` to `&lt;name&gt;`

**Expected Behavior**:

`&lt;/nam&gt;` changes to `&lt;/name&gt;`

**Actual Behavior**:

The closing tag is not adjusted.
</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32789</IssueID>
    <RepoID>1</RepoID>
    <Title>Odd behaviour with the step by step debugging</Title>
    <Description>**Version Used**: Unknown (bug originally filed 10 June 2015)

🔗 Moved to GitHub from https://devdiv.visualstudio.com/DevDiv/_workitems/edit/129328

**Steps to Reproduce**:

![vwa83pw](https://user-images.githubusercontent.com/1408396/51753883-88879380-2080-11e9-9b89-61251b6fb64e.gif)

**Expected Behavior**:

Stepping does not show current statement as a line that will not execute.

**Actual Behavior**:

Stepping shows current statement as a line that will not execute.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32788</IssueID>
    <RepoID>1</RepoID>
    <Title>Rude edits do not appear in refactoring preview</Title>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

🔗 Originally filed as https://devdiv.visualstudio.com/DevDiv/_workitems/edit/123201

### Steps to reproduce:

1. Create a new .NET Framework Console application.
2. Add some functioning code to Main()--it doesn't really matter what it is.
3. Set a breakpoint at the beginning of Main().
4. Start debugging.
5. Add the following to Main():

    ```csharp
    var b = new Blah();
    ```

6. Open the light bulb and select the item to generate a new *nested* type named `Blah` in the same file.
 
### Expected:

Preview shows a purple squiggle under `private class Blah()` because it will be a rude edit.
 
### Actual:

No squiggle in the preview. It doesn't show up until the code for the new type is generated.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32787</IssueID>
    <RepoID>1</RepoID>
    <Title>Overload Resolution Error</Title>
    <Description>**Version Used**: VS 15.9.6

**Steps to Reproduce**:

```c#
class Program
{
    static void Main(string[] args)
    {
        Derived derived = new Derived();
        ulong value = 10;
        derived.Write(value);
    }
}

public class Base
{
    public void Write(ulong value) =&gt; Console.WriteLine("ulong");
}

public class Derived : Base
{
    public void Write(object value) =&gt; Console.WriteLine("object");
}
```

**Expected Behavior**:
"ulong" would be written to the console.

**Actual Behavior**:
"object" is written to the console.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32786</IssueID>
    <RepoID>1</RepoID>
    <Title>After upgrading from VS 2019 preview1 to preview2 some code related to Nullable References stop working</Title>
    <Description>**Version Used**: 

Visual Studio 2019 preview 2

**Steps to Reproduce**:

```csharp
public object? TestA() =&gt; default;
public T? TestC&lt;T&gt;() where T: class =&gt; (T?)TestA();
public T TestB&lt;T&gt;() =&gt; (T)TestA();
```

![image](https://user-images.githubusercontent.com/13922845/51747872-b10b8f80-2078-11e9-8db2-9ecfe0e166f3.png)

**Expected Behavior**:

`TestB` should work.

**Actual Behavior**:

`TestB` shows compile time error.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32785</IssueID>
    <RepoID>1</RepoID>
    <Title>remove fatal watson from roslyn</Title>
    <Description>it is requested to remove all fatal watson (never crash VS) and move to NFW with new critical severity. 

once NFW with critical severity has occurred, we should treat VS as crashed and stop sending any NFW after that point.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32784</IssueID>
    <RepoID>1</RepoID>
    <Title>made VS not to crash when servicehub couldn't locate our servicehub s…</Title>
    <Description>…ervices.

when it happens we will show the info bar and proceed. this is not error recovery but not forcing users to restart VS right away by crashing VS. now a user will have time to do what they want and then restart VS

this is what user will see when this happens
![image](https://user-images.githubusercontent.com/1333179/51745506-e358c500-2057-11e9-932d-e46b439293fc.png)

this mitigate this issue - https://github.com/dotnet/roslyn/issues/26308

..

**Customer scenario**

a user launched VS and shortly after, VS crashes.

**Bugs this fixes:**

https://devdiv.visualstudio.com/DevDiv/_workitems/edit/620375

**Workarounds, if any**

no workaround. 

**Risk**

low risk

**Performance impact**

probably none

**Is this a regression from a previous update?**

No

**Root cause analysis:**

the crash is due to us calling FailFast explicitly in Roslyn code. the reason we call it is due to us not being able to connect to service hub services that some of our features require for them to run. there are multiple reasons why servicehub couldn't be reached. so can't say 1 specific issues. 

after discussion and feedbacks, we decide not to force VS to crash in this situation, but just show an infobar on the issue and let VS to keep alive. but this is not an error recovery. in info bar, we clearly tell them to close VS and re-lanuch since VS is in broken state.

**How was the bug found?**

Watson</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32783</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32782</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32781</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32780</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32779</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32778</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32777</IssueID>
    <RepoID>1</RepoID>
    <Title>make solution crawler to handle removed document as high priority.</Title>
    <Description>this will make clean up to happen faster. this is following existing pattern of remove things faster and show up things slower pattern we have been using on squiggles.

impact on user expierence will be like errors from error list or todo comments on todo list goes away faster when document is removed or project is removed from solution.

mitigating https://github.com/dotnet/roslyn/issues/30577</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32776</IssueID>
    <RepoID>1</RepoID>
    <Title>loading and unloading project multiple times mess up workspace</Title>
    <Description>repro

git clone https://github.com/dotnet/testimpact

open SourceBasedTestDiscovery.sln

unload SourceBasedTestDiscovery
load SourceBasedTestDiscovery

repeat unload/load multiple times. at some point, the project stuck in the workspace and not possible to remove.

...

this is callstack

&gt;	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CheckNotContainsProjectReference(Microsoft.CodeAnalysis.ProjectId projectId, Microsoft.CodeAnalysis.ProjectReference referencedProject) Line 1973	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.AddProjectReferences(Microsoft.CodeAnalysis.ProjectId projectId, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.ProjectReference&gt; projectReferences) Line 863	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Solution.AddProjectReferences(Microsoft.CodeAnalysis.ProjectId projectId, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.ProjectReference&gt; projectReferences) Line 433	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.OnBatchScopeDisposed.AnonymousMethod__0(Microsoft.CodeAnalysis.Solution solution) Line 433	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyBatchChangeToProject(Microsoft.CodeAnalysis.ProjectId projectId, System.Func&lt;Microsoft.CodeAnalysis.Solution, Microsoft.CodeAnalysis.Solution&gt; mutation) Line 1323	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.OnBatchScopeDisposed() Line 375	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.BatchScope.Dispose() Line 356	C#
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.Legacy.AbstractLegacyProject.EndBatch() Line 24	C#

</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32775</IssueID>
    <RepoID>1</RepoID>
    <Title>IOperation GetOpeartionsToAnalyzer assert</Title>
    <Description>---------------------------
Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue
---------------------------
Expected operation with kind 'Invocation' to be the root operation with null 'Parent', but instead it has a non-null Parent with kind 'ExpressionStatement'



   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.GetOperationsToAnalyze(ImmutableArray`1 operationBlocks)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.&lt;&gt;c__DisplayClass14_0.&lt;TryExecuteDeclaringReferenceActions&gt;g__getOperationsToAnalyzeWithStackGuard|4(ImmutableArray`1 operationBlocksToAnalyze)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.&lt;&gt;c__DisplayClass14_0.&lt;TryExecuteDeclaringReferenceActions&gt;g__executeExecutableCodeActions|3()

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions(SyntaxReference decl, Int32 declarationIndex, SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, GroupedAnalyzerActions additionalPerSymbolActions, Boolean shouldExecuteSyntaxNodeActions, Boolean shouldExecuteOperationActions, Boolean should......

&lt;truncated&gt;
---------------------------
Abort   Retry   Ignore   
---------------------------

dump - \\mlangfs1\public\hechang\IOperationDump</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32774</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Studio 2019 Preview 2 breaks Switch Case with when Statements</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Preview 2

**Steps to Reproduce**:
Certain switch case statements including a when clause stopped working since updating to VS 2019 Preview 2.

The following statement will fail for every case that is not matched before the when clause:

        switch (someObject)
         {
            case string x:
               return true;
            case int x:
               return true;
            case IObject x when x.SubObject != null:
               return true;
            case IOtherObject x:
               return true;
            case double x:
               return true;
            default:
               return false;
         }

The following exception is thrown:  
_System.InvalidCastException: Unable to cast object of type 'System.Double' to type 'IOtherObject'._

However if you have an additional case just after the when where check without a condition it works fine:  

         switch (someObject)
         {
            case string x:
               return true;
            case int x:
               return true;
            case IObject x when x.SubObject != null:
               return true;
            case IObject x:
               return true;
            case IOtherObject x:
               return true;
            case double x:
               return true;
            default:
               return false;
         }

I uploaded a demo project to github that includes both cases and respective tests to showcase the problem:
https://github.com/huserben/VS19_SwitchCaseWhen

You can run the tests in VS 19 Preview 1 and one will fail, while both succeed if run from VS 2017

**Expected Behavior**:
Switch Case works in any of the cases
</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>09/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32773</IssueID>
    <RepoID>1</RepoID>
    <Title>false positive redundant cast</Title>
    <Description>Assuming that bounds is long, start and end is int. following gives a warning

&gt;Bitwise-or operator used on a sign-extended operand; consider casting to a smaller unsigned type first

```c#
bounds = (((long)end) &lt;&lt; 32) | start;
```

In my case it doesn't really matter to use sign or zero extension. start is always positive. for sake of hiding the warning

```c#
bounds = (((long)end) &lt;&lt; 32) | ((long)start);
```

says cast is redundant. I think if compiler suggests to resolve ambiguity, then it shouldn't suggest to introduce ambiguity again. (in my case it doesn't matter but i thought its good to share)</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32772</IssueID>
    <RepoID>1</RepoID>
    <Title>Preserve Extern modifier when running code cleanup</Title>
    <Description>Fixes #29561 

outstanding issues:

- [ ] Fix the formatting of the line after the field declaration

- [ ] Add tests for other modifiers

</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32771</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master into features/nested-stackalloc</Title>
    <Description>
    </Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32770</IssueID>
    <RepoID>1</RepoID>
    <Title>Support additive classifications in ClassifiedSpans and TaggedText </Title>
    <Description>Currently ClassifiedSpans and TaggedText can be tagged with a single classification. Now that we added the additive classification Static Symbol the same span or text could have two classifications. We should handle this gracefully.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32769</IssueID>
    <RepoID>1</RepoID>
    <Title>Display compiler generated members in raw view.</Title>
    <Description>The debugger has an option 
![image](https://user-images.githubusercontent.com/41759/51713097-c2f02280-1fe5-11e9-8e84-0de910ef5906.png)

which is also available via `raw` modifier (`&lt;expr&gt;, raw`). 

The meaning for managed objects right now is to disable using debugger visualizer attributes on the object instance. For example, an instance of `Dictionary&lt;string,string&gt;` is displayed like so:

![image](https://user-images.githubusercontent.com/41759/51713561-35adcd80-1fe7-11e9-90f5-ceed912570e7.png)

This change shows all compiler-generated members in this view.

An iterator looks like so:
![image](https://user-images.githubusercontent.com/41759/51713697-b7056000-1fe7-11e9-807a-4bb690e37177.png)

An async state machine like so:
![image](https://user-images.githubusercontent.com/41759/51717880-904f2580-1ff7-11e9-929f-fbfabdb84c0a.png)

Fixes https://github.com/dotnet/roslyn/issues/22428.
</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32768</IssueID>
    <RepoID>1</RepoID>
    <Title>Crash Visual Studio 2017 15.9.5 - NotImplementedException</Title>
    <Description>Visual Studio 15.9.5

**Steps to Reproduce**:

Create a new dotnet core project (dotnet new console)

0. Create a new file "foo.cs"

```
namespace repro {
   public class Foo {
      public string name;
   }
}
```

1. Add this to "Program.cs"

```
using System;
using Bar = System.ValueTuple&lt;string, uint&gt;;

namespace repro {
   class Program {
      static void Main(string[] args) {
         Bar b = ("hello world", 4);
         Console.WriteLine(b.Item1);
      }
   }
}
```

2. Rename the Bar in Program.cs to Foo. Open the "quick actions" menu and choose "Raname 'Bar' to 'Foo'"
3. Visual studio exits and restarts

**Expected Behavior**:

Probably a dialog telling me this is a bad idea.

**Actual Behavior**:


CLR: Managed code called FailFast, saying "System.NotImplementedException: The method or operation is not implemented.
at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.VisitSimpleName(SimpleNameSyntax rewrittenSimpleName, SimpleNameSyntax originalSimpleName)
at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.VisitIdentifierName(IdentifierNameSyntax node)
at Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitVariableDeclaration(VariableDeclarationSyntax node) at Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor)
at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)
at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)
at Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expand(SyntaxNode node, SemanticModel semanticModel, SyntaxAnnotation annotationForReplacedAliasIdentifier, Func2 expandInsideNode, Boolean expandParameter, CancellationToken cancellationToken)
at Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Complexify(SyntaxNode originalNode, SyntaxNode newNode)
at Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node)
at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList1 list) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(BlockSyntax node) at Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor)
at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
at Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node)
at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMethodDeclaration(MethodDeclarationSyntax node)
at Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList1 list)
at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassDeclaration(ClassDeclarationSyntax node)
at Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList1 list)
at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
at Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList1 list)
at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)
at Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
at Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node)
at Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.AnnotateAndRename(RenameRewriterParameters parameters)
at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session.&lt;AnnotateAndRename_WorkerAsync&gt;d__26.MoveNext()"</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32767</IssueID>
    <RepoID>1</RepoID>
    <Title>`Dispose` extension methods should not even be considered in pattern-based disposal</Title>
    <Description>Currently, we bind `x.Dispose()` and reject the result if it is an extension. But we should not even consider extensions, to avoid diagnostics about ambiguities.

There is the same issue with binding `GetAsyncEnumerator`.

```C#
        [Fact]
        public void UsingPatternScopedExtensionMethodTest()
        {
            var source = @"
ref struct S1
{
}

namespace N1
{
    static class C2 
    {
        public static void Dispose(this S1 s1) { }
    }
}

namespace N2
{
    static class C3 
    {
        public static void Dispose(this S1 s1) { }
    }
}

namespace N3
{
    static class C4 
    {
        public static int Dispose(this S1 s1) { return 0; }
    }
}


namespace N4
{
    partial class C5
    {
        static void M()
        {
            using (S1 s = new S1()) // error 1
            {
            }
        }
    }
}
namespace N4
{
    using N1;
    partial class C5
    {
        static void M2()
        {
            using (S1 s = new S1()) // error 2
            {
            }
        }
    }
}
namespace N4
{
    using N3;
    partial class C5
    {
        static void M3()
        {
            using (S1 s = new S1()) // error 3
            {
            }
        }
    }
}
namespace N4
{
    using N1;
    using N3;
    partial class C5
    {
        static void M4()
        {
            using (S1 s = new S1())  // error 4
            {
            }
        }
    }
}
namespace N4
{
    using N3;
    namespace N5
    {
        partial class C5
        {
            static void M5()
            {
                using (S1 s = new S1())  // error 5 
                {
                }
            }
        }

        namespace N6
        {
            using N1;
            partial class C5
            {
                static void M6()
                {
                    using (S1 s = new S1())  // error 6 
                    { 
                    }
                }
            }
        }
    }
}";
            // Extension methods should just be ignored, rather than rejected after-the-fact. So there should be no error about ambiguities

            CreateCompilation(source).VerifyDiagnostics(
                // (37,20): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.
                //             using (S1 s = new S1()) // error 1
                Diagnostic(ErrorCode.ERR_NoConvToIDisp, "S1 s = new S1()").WithArguments("S1").WithLocation(37, 20),
                // (50,20): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.
                //             using (S1 s = new S1()) // error 2
                Diagnostic(ErrorCode.ERR_NoConvToIDisp, "S1 s = new S1()").WithArguments("S1").WithLocation(50, 20),
                // (63,20): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.
                //             using (S1 s = new S1()) // error 3
                Diagnostic(ErrorCode.ERR_NoConvToIDisp, "S1 s = new S1()").WithArguments("S1").WithLocation(63, 20),
                // (77,20): error CS0121: The call is ambiguous between the following methods or properties: 'N1.C2.Dispose(S1)' and 'N3.C4.Dispose(S1)'
                //             using (S1 s = new S1())  // error 4
                Diagnostic(ErrorCode.ERR_AmbigCall, "S1 s = new S1()").WithArguments("N1.C2.Dispose(S1)", "N3.C4.Dispose(S1)").WithLocation(77, 20),
                // (77,20): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.
                //             using (S1 s = new S1())  // error 4
                Diagnostic(ErrorCode.ERR_NoConvToIDisp, "S1 s = new S1()").WithArguments("S1").WithLocation(77, 20),
                // (92,24): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.
                //                 using (S1 s = new S1())  // error 5 
                Diagnostic(ErrorCode.ERR_NoConvToIDisp, "S1 s = new S1()").WithArguments("S1").WithLocation(92, 24),
                // (105,28): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.
                //                     using (S1 s = new S1())  // error 6 
                Diagnostic(ErrorCode.ERR_NoConvToIDisp, "S1 s = new S1()").WithArguments("S1").WithLocation(105, 28)
                );
        }
```</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32766</IssueID>
    <RepoID>1</RepoID>
    <Title>Localize regex tests</Title>
    <Description>/cc @CyrusNajmabadi @mavasani @tmeschter </Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32765</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32764</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32763</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32762</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32761</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32760</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1 </Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32759</IssueID>
    <RepoID>1</RepoID>
    <Title>UseLocalFunction should not report diagnostics on invalid decleration code</Title>
    <Description>If the declaration contains invalid code the analyzer should not report any fixes, they are not guaranteed to be correct. 


Fixes #29793 </Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32758</IssueID>
    <RepoID>1</RepoID>
    <Title>Gracefully handle documented exceptions from AssemblyMetadata.GetModules</Title>
    <Description>We have done so in past for other callsites to this API, such as #17687. This change does the same for the remaining two callsites in the IDE layer.

Fixes VSO Watson [234447](https://devdiv.visualstudio.com/DevDiv/_queries/edit/234447): _CLR_EXCEPTION_System.BadImageFormatException_8007000b_Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.PEModule.get_ReferencedAssemblies_</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32757</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException'</Title>
    <Description>**Version Used**: Visual Studio 2019 preview 2

**Steps to Reproduce**:

Open the solution of the repo https://github.com/meziantou/Meziantou.Framework

````
Analyzer Severity	Code	Description	Project	File	Line	Suppression State	Detail Description
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.	Meziantou.Framework.CodeDom (net461)		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Meziantou.Framework.CodeDom
ISymbol: Write (Method)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.OnWriteReferenceFound(ISymbol symbol, IOperation operation, Boolean maybeWritten)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.OnReferenceFound(ISymbol symbol, IOperation operation)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.VisitDeclarationPattern(IDeclarationPatternOperation operation)
   at Microsoft.CodeAnalysis.Operations.DeclarationPatternOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitPatternCaseClause(IPatternCaseClauseOperation operation)
   at Microsoft.CodeAnalysis.Operations.BasePatternCaseClauseOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitchCase(ISwitchCaseOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseSwitchCaseOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitch(ISwitchOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseSwitchOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitBlock(IBlockOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseBlockOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.Visit(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.AnalyzeOperationsAndUpdateData(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Run(IOperation rootOperation, ISymbol owningSymbol, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeUnusedValueAssignments(OperationBlockAnalysisContext context, Boolean isComputingUnusedParams, PooledHashSet`1 symbolUsageResultsBuilder, Boolean&amp; hasBlockWithAllUsedSymbolWrites)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
````</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32756</IssueID>
    <RepoID>1</RepoID>
    <Title>Tuples in public API of IRecursivePatternOperation</Title>
    <Description>`IRecursivePatternOperation` contains

``` c#
        ImmutableArray&lt;(ISymbol, IPatternOperation)&gt; PropertySubpatterns { get; }
```

Should we have tuples in our public APIs, or should we use a struct defined for just this purpose?
</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32755</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix compiler crash and remove spurious hidden sequence points for switch expression</Title>
    <Description>Fixes #32370

Fix parsing error recovery for incomplete switch expression
Fixes #32749 

See also https://devdiv.visualstudio.com/DevDiv/_workitems/edit/792979 for shiproom purposes.

@dotnet/roslyn-compiler May I please have a couple of reviews?</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32754</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow locals, parameters, range variables inside a lambda to shadow names outside the lambda</Title>
    <Description>
    </Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32753</IssueID>
    <RepoID>1</RepoID>
    <Title>GetLocation and FindNode are not always reliable</Title>
    <Description>Context: 

[PR Discussion](https://github.com/dotnet/roslyn/pull/32685#discussion_r250021980)
#29793 from the original bug

Our messaging for roundtrip nodes for analyzers has been

&gt;if you want to find a node between analysis and fixing, then use AdditionalLocaitons, and just add someNode.GetLocation() to it. You can then find that later with someLocation.FindNode().

This doesn't always hold true if there is ignored trivia contained in a span. Currently [GetLocation](http://source.roslyn.io/#Microsoft.CodeAnalysis/Syntax/SyntaxNode.cs,111ac3d15ffccc76) uses the `Span` property, while  [FindNode](http://source.roslyn.io/#Microsoft.CodeAnalysis/Syntax/SyntaxNode.cs,1973a2affa06beb8) uses `FullWidth` and `FullSpan` properties to evaluate spans and break ties. 

A proposed change is to add a `SourceFullSpan` property to [Location](http://source.roslyn.io/#Microsoft.CodeAnalysis/Diagnostic/Location.cs,ad289cd0d5b2b950) 

```C#
public virtual TextSpan SourceFullSpan =&gt; SourceSpan;
``` 

The above would be the change to the abstract base, where implementations can use whatever they see fit. For `SourceLocation` that would mean storing the `FullSpan` property. 

Then the implementation for `Location.FindNode` can use the `SourceFullSpan` property</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32752</IssueID>
    <RepoID>1</RepoID>
    <Title>Account for both parts of partial methods while computing dependent s…</Title>
    <Description>…ymbols for symbol end action

We invoke symbol end actions for named type symbols after symbol callbacks have been made for all its member symbols. However, we did not account for both parts of partial methods, which means we would end up with a symbol end callback for a named type prior to the partial implementation part being analyzed. This caused the remove unused member analyzer in IDE to incorrectly flag private members referenced in partial methods.

Fixes #32702</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32751</IssueID>
    <RepoID>1</RepoID>
    <Title>Push package querying to another thread</Title>
    <Description>Once the DteProject is retrieved, the work to get installed packages can be done off the UI thread. 

This will help reduce hanging from long running NuGet  commands. 

Fixes #20101 </Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32750</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix cast exception in AbstractProject.RemoveDocument</Title>
    <Description>AbstractProject.RemoveDocument was trying to support removing ContainedDocuments, but had a misplaced cast which negated the whole attempt.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/776782

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/776782

### Workarounds, if any

None.

### Risk

Zero: just moving a cast later. In the broken case, maybe there's a different bug lurking but it won't be worse than what we have. In the existing functioning cases, nothing changes.

### Performance impact

None.

### Is this a regression from a previous update?

Unsure. The buggy code was put into Preview 1; why we're seeing it now is unclear.

### Root cause analysis

It seems TypeScript has some timing-dependent code where _sometimes_ they try to remove a contained document with AbstractProject.RemoveDocument(). Clearly we tried handling that, but didn't do it correctly. As best I can remember, I might have hit this once in testing but couldn't figure out a repro myself; I "fixed" the code regardless but clearly didn't hit the repro scenario again to observe it was still broken.

### How was the bug found?

DDRITs.

&lt;/details&gt;</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32749</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler crash on incomplete switch expression</Title>
    <Description>Parsing the following expression causes the parser (or compiler) to crash with an out-of-memory exception

``` c#
(e switch {)
```
</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32748</IssueID>
    <RepoID>1</RepoID>
    <Title>Tweak bail out approach from unused member analyzer for struct layout types</Title>
    <Description>Current implementation bailed out in symbol start action, which caused both analysis and reporting to be skipped in a type with StructLayout attribute. New implementation bails out in symbol end action, so we only skip reporting not analysis.

Fixes #32727</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32747</IssueID>
    <RepoID>1</RepoID>
    <Title>Assert when emitting a box IL opcode for ref like type</Title>
    <Description>Ensure we don't accidentally emit invalid code due to bad lowering.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32746</IssueID>
    <RepoID>1</RepoID>
    <Title>It looks like TypeSymbolExtensions.IsSameType(t1 As TypeSymbol, t2 As TypeSymbol, compareKind As TypeCompareKind) lacks proper handling for PointerTypeSymbol</Title>
    <Description>
    </Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32745</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable nullable analysis for generated code</Title>
    <Description>Disable nullable analysis for generated code unless the file contains explicit `#nullable enable`.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32744</IssueID>
    <RepoID>1</RepoID>
    <Title>Issue 32480 - Don't suggest adding braces with interceding compiler directive</Title>
    <Description>For https://github.com/dotnet/roslyn/issues/32480

Added call to helper to determine if there are interceding compiler directives in add braces analyzer.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32743</IssueID>
    <RepoID>1</RepoID>
    <Title>Finalize the shape of the PragmaWarningDirectiveTriviaSyntax node around NullableKeyword</Title>
    <Description>Right now the shape of the node is following:
```
  &lt;Node Name="PragmaWarningDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax"&gt;
    &lt;Kind Name="PragmaWarningDirectiveTrivia"/&gt;
    &lt;Field Name="HashToken" Type="SyntaxToken" Override="true"&gt;
      &lt;Kind Name="HashToken"/&gt;
    &lt;/Field&gt;
    &lt;Field Name="PragmaKeyword" Type="SyntaxToken"&gt;
      &lt;Kind Name="PragmaKeyword"/&gt;
    &lt;/Field&gt;
    &lt;Field Name="WarningKeyword" Type="SyntaxToken"&gt;
      &lt;Kind Name="WarningKeyword"/&gt;
    &lt;/Field&gt;
    &lt;Field Name="DisableOrRestoreKeyword" Type="SyntaxToken"&gt;
      &lt;Kind Name="DisableKeyword"/&gt;
      &lt;Kind Name="RestoreKeyword"/&gt;
      &lt;Kind Name="EnableKeyword"/&gt;
      &lt;Kind Name="SafeOnlyKeyword"/&gt;
    &lt;/Field&gt;
    &lt;Field Name="NullableKeyword" Type="SyntaxToken" Optional="true"&gt;
      &lt;Kind Name="NullableKeyword"/&gt;
    &lt;/Field&gt;
    &lt;Field Name="ErrorCodes" Type="SeparatedSyntaxList&amp;lt;ExpressionSyntax&amp;gt;"/&gt;
    &lt;Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true"&gt;
      &lt;Kind Name="EndOfDirectiveToken"/&gt;
    &lt;/Field&gt;
    &lt;Field Name="IsActive" Type="bool" Override="true"/&gt;
  &lt;/Node&gt;
```

During code review a suggestion was made to generalize the name of the NullableKeyword property to be something like GroupKeyword - a keyword designating a group of warnings. Right now the only token that can be used in that place is NullableKeyword, but we will be able to expand the set if/when new groups will be added.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32742</IssueID>
    <RepoID>1</RepoID>
    <Title>Should #nullable and #pragma nullable have effect on all warnings related to nullable feature rather than only on those reported by flow analysis?</Title>
    <Description>Right now ```#nullable``` and ```#pragma nullable``` have effect only on warnings that are reported by flow analysis. Other nullable related warnings, for example, for various mismatches in declarations are enabled by default. Should all those warnings be disabled by default and obey ```#nullable``` and ```#pragma nullable``` settings?</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32741</IssueID>
    <RepoID>1</RepoID>
    <Title>Disallow an explicit usage of Nullable attribute in VB in places where we disallow that in C#</Title>
    <Description>At VB LDM yesterday we thought it would be a good idea to disallow an explicit usage of Nullable attribute in VB in places where we disallow that in C#. The primary motivation is to keep the door open for adding similar feature to VB without the risk of a breaking change.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32740</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable Mono testing</Title>
    <Description>These issues should be fixed now. Enabling the assemblise again.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32739</IssueID>
    <RepoID>1</RepoID>
    <Title>'Convert to for' disappears when struct member is invoked on the foreach variable</Title>
    <Description>**Version Used**: VS 2019 Preview 2.0

```cs
var test = new[] { new Foo() };
foreach (var foo in test)
{
    _ = foo.SomeProperty; // Remove `.SomeProperty` and 'Convert to for' comes back
    // Calling a struct method also scares it away.
    // Interestingly, calling .ToString() does not scare it away so long as it is `Object.ToString`
    // that is being called and not a struct override.
}

struct Foo
{
    public string SomeProperty { get; }
}
```

**Expected Behavior**: 'Convert to for' should be available. Otherwise I'm going to have to do this by hand, which has been nearly exclusively the case for me.

I don't care if the semantics change. Even if the struct was mutable and even if it mutated during calls in the loop body, that's not going to stop me from needing access to `i` and wanting to do this particular refactoring to get there.

**Actual Behavior**: Refactoring is not offered.
</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32738</IssueID>
    <RepoID>1</RepoID>
    <Title>Code Lens reference count is broken</Title>
    <Description>Reported in Build :15.0.26206.0 


Pick any class that is used directly in code. Extract an interface for this class and pick some properties/methods to be part of the interface. Open the interface. Even though the interface is not referenced anywhere except by the implementing class, all properties and methods on the interface have multiple references. It looks like it is showing references to the properties/methods of any classes implementing the interface instead of actual references that use the interface. At best this is somehow useful to some people, at worst it's just plain wrong. Certainly it's not a reference. 

At the very least there should be an option to disable this behavior, or to show either/both &amp;quot;strict&amp;quot; and &amp;quot;loose&amp;quot; references.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/20609/code-lens-reference-count-is-broken.html
VSTS ticketId: 418871_
_These are the original issue comments:_

Morten Mertner on 7/19/2018, 06:15 AM (189 days ago): It's great to see that these issues are being monitored and acted upon. Or wait...
Alexander Martens on 8/8/2018, 09:56 AM (169 days ago): &lt;p&gt;The other Issue I saw on this were closed as by design. It's awful. Why on earth should every IDisposable Dispose() be linked...&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32737</IssueID>
    <RepoID>1</RepoID>
    <Title>Round Tripping Causes SyntaxNode.IsEquivalentTo() to Fail When There Are No Changes</Title>
    <Description>I have written a small utility to enforce some formatting rules using the Roslyn Formatter; after putting it in CI under our code base a single file kept popping out; the resulting format resulted in no changes which may indicate that there is an issue somewhere in SyntaxNode.IsEquivalentTo(SyntaxNode).

I stripped down our utility program to the bare minimum and ran the trouble file through Delta Debugging (https://www.st.cs.uni-saarland.de/dd/) using this utility which produced this nonsensical minimal test case, any removal of any character in this file will cause it to pass (I have also attached the file just in case this is something weird with the file format it is minifail.cs in the zip file).

```csharp
e t
{
	I
	//
```

Below is the test program (also included in the ZIP file) that will help reproduce the issue

```csharp
namespace RoslynRoundTripBug
{
    using System;
    using System.IO;
    using System.Linq;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.Formatting;
    using Microsoft.CodeAnalysis.Options;

    class Program
    {
        static void Main(string[] args)
        {
            int exitCode = 0;
            string targetFile = args.First();
            string tempFileName = Path.ChangeExtension(targetFile, ".tmp");
            (bool WasFormatted, bool WasIdentical) roundtripFormatFailed = FromFile(targetFile, tempFileName);

            if (roundtripFormatFailed.WasFormatted &amp;&amp; roundtripFormatFailed.WasIdentical)
            {
                exitCode = 1;
            }

            Environment.Exit(exitCode);
        }

        internal static (bool WasFormatted, bool WasIdentical) FromFile(string pathToDocumentToFormat, string tempFile)
        {
            bool wasFormatted = false;
            bool wasIdentical = false;

            ProjectId projectId = ProjectId.CreateNewId();

            using (AdhocWorkspace adhocWorkspace = new AdhocWorkspace())
            {
                Solution solution =
                    adhocWorkspace
                    .CurrentSolution
                    .AddProject(projectId, "AdhocProject", "AdhocAssembly", LanguageNames.CSharp)
                    .AddDocument(DocumentId.CreateNewId(projectId), Path.GetFileName(pathToDocumentToFormat), new FileTextLoader(pathToDocumentToFormat, new System.Text.UTF8Encoding(false)));

                OptionSet formattingOptions = _GetFormattingOptions(adhocWorkspace);

                foreach (Project project in solution.Projects)
                {
                    foreach (Document document in project.Documents)
                    {
                        SyntaxNode formattedDocument = Formatter.Format(document.GetSyntaxRootAsync().Result, adhocWorkspace, formattingOptions);

                        // If there are no changes to the document then we would not format
                        SyntaxNode originalDocument = document.GetSyntaxRootAsync().Result;

                        if (formattedDocument.IsEquivalentTo(originalDocument))
                        {
                            wasFormatted = false;
                        }
                        else
                        {
                            wasFormatted = true;

                            // If its going to be formatted lets save it out
                            using (StreamWriter sw = new StreamWriter(tempFile, false, new System.Text.UTF8Encoding(true)))
                            {
                                formattedDocument.WriteTo(sw);
                            }

                            wasIdentical = CompareFiles(pathToDocumentToFormat, tempFile);
                        }
                    }
                }
            }

            return (wasFormatted, wasIdentical);
        }

        private static bool CompareFiles(string pathToDocumentToFormat, string tempFile)
        {
            return File.ReadAllText(pathToDocumentToFormat).Equals(File.ReadAllText(tempFile));
        }

        private static OptionSet _GetFormattingOptions(AdhocWorkspace adhocWorkspace)
        {
            return adhocWorkspace.Options
            .WithChangedOption(FormattingOptions.UseTabs, LanguageNames.CSharp, true);
        }
    }
}
```

[RoslynRoundTripBug.zip](https://github.com/dotnet/roslyn/files/2792170/RoslynRoundTripBug.zip)

The only other reference to round tripping issues I can find that might be related are #30212 but that is on Linux (we're on Windows).</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32736</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32735</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32734</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32733</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32732</IssueID>
    <RepoID>1</RepoID>
    <Title>Breaking change in switches over a boolean value</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.0
VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code:
```cs
using System.Runtime.InteropServices;

class C
{
  [StructLayout(LayoutKind.Explicit)]
  public class M
  {
    [FieldOffset(0)]
    public bool b;

    [FieldOffset(0)]
    public int i;
  }

  static void Main()
  {
    var b = new M() { i = 42 }.b;
    System.Console.WriteLine(Test(b));
  }

  static int Test(bool b)
  {
    switch(b)
    {
      case true: return 1;
      case false: return 2;
      default: return 3;
    }
  }
}
```

**Expected Behavior**:
The code should print `3` as it does now in VS2013-2017 and VS 2019 preview 1.

**Actual Behavior**:
The code prints `1` since VS 2019 preview 2.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32731</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: allow pattern-based disposal in await using and foreach</Title>
    <Description>## Customer scenario
Use new BCL helpers `WithCancellation` and `ConfigureAwait` on an `IAsyncEnumerable`.
If you `await foreach` over the resulting async collection, but break out of the loop before the end of the collection, the enumerator will not be disposed (but it should).


## Bugs this fixes
Fixes https://github.com/dotnet/roslyn/issues/32316 (async using and foreach should allow pattern-based disposal)
Fixes https://github.com/dotnet/roslyn/issues/32722 (fix diagnostic message)

## Workarounds, if any
None

## Risk
## Performance impact
Low. We are extending the recently added logic that allows `foreach` to bind to a pattern-based `Dispose` method so that `await foreach` can find a `DisposeAsync` method.

## Is this a regression from a previous update?
No

## Root cause analysis
This was supposed to fall out of the feature to bind pattern-based `Dispose` methods. But that feature was implemented later than expected, and it had some restrictions (only allowed for ref structs, due to last minute LDM decision).

## How was the bug found?
While reviewing the BCL API.

Async-streams umbrella: https://github.com/dotnet/roslyn/issues/24037

----
Filed https://devdiv.visualstudio.com/DevDiv/_workitems/edit/783198 for shiproom</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32730</IssueID>
    <RepoID>1</RepoID>
    <Title>Linked file with rooted path with '..' shows up in Miscellaneous Files</Title>
    <Description>**Version Used**: 15.9.5, 16.0 Preview 2

**Steps to Reproduce**:

1. Create a csproj C# project (was not able to reproduce with the new project system)
2. Link a source file using a rooted file path containing a `..`, e.g.:

        C:\Users\sam\source\repos\ConsoleApp1\ConsoleApp1\..\Source\Program.cs

3. Reload the project and open the source file

**Expected Behavior**:

The file shows up as part of the project.

**Actual Behavior**:

The file opens in the **Miscellaneous Files** workspace.

🔗 Originally filed https://devdiv.visualstudio.com/DevDiv/_workitems/edit/132040</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32729</IssueID>
    <RepoID>1</RepoID>
    <Title>Copy nullable state through nullable conversions</Title>
    <Description>Fixes #32531.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32728</IssueID>
    <RepoID>1</RepoID>
    <Title>Error message for pattern-based using in C# 7.3</Title>
    <Description>**Version Used**: 

Visual Studio 2019 Preview Version 16.0.0 Preview 2.0
LangVersion latest (C# 7.3)

**Steps to Reproduce**:

```cs
using System;

class Program
{
    static void Main()
    {
        var y = Console.ReadLine() switch { _ =&gt; 0 };
        // ↑ CS8370  Feature 'recursive patterns' is not available in C# 7.3. Please use language version 8.0 or greater.

        using (var x = new X()) { }
        // ↑ CS1674  'X': type used in a using statement must be implicitly convertible to 'System.IDisposable'
        // Why not CS8370?
    }

    ref struct X { public void Dispose() { } }
}
```

**Expected Behavior**:

CS8370 error in line 10.

**Actual Behavior**:

CS1674
</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32727</IssueID>
    <RepoID>1</RepoID>
    <Title>False positive for IDE0051 </Title>
    <Description>**Version Used**: VS2019 Preview 2

**Steps to Reproduce**:

Minimal code to reproduce:

````csharp
using System.Runtime.InteropServices;

class Program
{
    private const int MAX_PATH = 260; // IDE0051 unused field

    [StructLayout(LayoutKind.Sequential)]
    internal struct ProcessEntry32
    {
        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = MAX_PATH)]
        public string szExeFile;
    }
}
````

**Expected Behavior**:

`MAX_PATH` should not be reported as unused as there is a usage in the attribute `MarshalAs`.

**Actual Behavior**:

`MAX_PATH` is reported as unused.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32726</IssueID>
    <RepoID>1</RepoID>
    <Title>add new compilation options to data sync to OOP.</Title>
    <Description>2 new options. NullableContextOptions and MetadataImportOptions

if compiler team do this (https://github.com/dotnet/roslyn/issues/12795), IDE side can simply use compiler's serialization rather than doing it in IDE side

fix https://github.com/dotnet/roslyn/issues/31870</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32725</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove additive classifications when generating ClassifiedText from ClassifiedSpans</Title>
    <Description>fixes #32641</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32724</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion for immediate window commands displays two popups</Title>
    <Description>**Steps to Reproduce**:

1.  Start debugging
2.  Stop at a breakpoint
3. Go to Immediate Window
4. Type "&gt; a"

**Expected Behavior**:
See a legacy old command completion popup only

**Actual Behavior**:
See a legacy old command completion popup as well as a regular completion popup (both old and new completions).</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32723</IssueID>
    <RepoID>1</RepoID>
    <Title>Enhanced colors feedback.</Title>
    <Description>Overall i like it.  Feels like vscode (which is good).  One thing i don't like at first blush is the bolded statics.  They just make things feel 'off balance' without there being a good reason for it.

i.e. 'bold' is generally used for emphasis or impact.  But i see no reason (and do not feel good about) statics having that.  This is quite likely because static stuff is generally *less* important to me.  It's stuff like helpers.  Or utilities.  And it ends up feeling like it's *more* important despite being stuff i care far less about.

Thanks!</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32722</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust wording for ERR_NoConvToIDisp</Title>
    <Description>The current message when attempting to dispose something that is non disposable is incorrect (due to #32177) `'{0}': type used in a using statement must be implicitly convertible to 'System.IDisposable'.` We should update to specifically mention `ref struct` patterns.

We should correspondingly update `ERR_NoConvToIDispWrongAsync` to match as needed.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32721</IssueID>
    <RepoID>1</RepoID>
    <Title>'return value is unused' is overly aggressive</Title>
    <Description>I'm getting a warning by default for writing code like this:

![image](https://user-images.githubusercontent.com/4564579/51645611-fa999480-1f29-11e9-86be-cd06a93bd4fb.png)

This is because i'm not bothering to look at the return value.  This is because the return value is pretty irrelevant to me.  All it has is:

![image](https://user-images.githubusercontent.com/4564579/51645640-19982680-1f2a-11e9-9e33-b1703e358ecc.png)

However, i'm now forced to update my code to look much more ugly as:

![image](https://user-images.githubusercontent.com/4564579/51645659-2a489c80-1f2a-11e9-9014-3c7af8ec9b59.png)

Or to suppress the warning.  However, the original code was *the* idiomatic way to just call code and not have to worry about the return value. 

It seems like the feature is super aggressive here.  In our projects, we see literally thousands of these warnings, and i'm struggling to think how we could deal with them.  either:

1. we bulk-fix.  but that means if we're actually ignoring something we shouldn't be ignoring, then we're SOL.
2. we don't have this feature on.

It seems like the feature needs to be smarter.  Perhaps by having an understanding of which APIs it's very much a problem to ignore results from.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32720</IssueID>
    <RepoID>1</RepoID>
    <Title>Large squiggles for unused expression values</Title>
    <Description>![image](https://user-images.githubusercontent.com/4564579/51645579-d6d64e80-1f29-11e9-9a3e-4e1fc43620c3.png)

It looks like we're sguiggling the entire expression, leading to a super poor experience during typing.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32719</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32718</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32717</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32716</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32715</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32714</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32713</IssueID>
    <RepoID>1</RepoID>
    <Title>made all VersionStamp constructor to share initialization and argumen…</Title>
    <Description>…t validation.

This change will help diagnose #31928 by ensuring `VersionStamp` throws an exception the first time it is created with an invalid argument, rather than delaying the exception to an unknown future point.
</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32712</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix NRE in HighlightingService</Title>
    <Description>Internal bug [763988](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763988)

@dotnet/roslyn-ide @CyrusNajmabadi </Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32711</IssueID>
    <RepoID>1</RepoID>
    <Title>After configuration change in desktop csproj, project.OutputFilePath still points to old output path</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview Version 16.0.0 Preview 2.0 [28522.59.d16.0]

**Steps to Reproduce**:
We have a solution-crawler based analyzer (for source-based unit test discovery)  that detects and reacts to project configuration changes via the `IIncrementalAnalyzer.AnalyzeProjectAsync(Project project, bool projectConfigurationChanged, CancellationToken token)` API.

In a desktop csproj, after a solution-wide configuration change (i.e. change Debug -&gt; Release in VS drop-down), the solution crawler correctly calls the above method on our analyzer with `projectConfigurationChanged = true`. However `project.OutputFilePath` points to the old (Debug) output path instead of the new (Release) path.

On debugging, looks like `project.Solution.Workspace.CurrentSolution.Projects.First().OutputFilePath` is also set to the old (Debug) path. So looks like the output path is not being updated in Roslyn's internal project system abstractions after a configuration change.

**Expected Behavior**:
`project.OutputFilePath` should point to the new (Release) output path.

**Actual Behavior**:
`project.OutputFilePath` still points to the old (Debug) output path.
</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32710</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix preview changes application for linked files</Title>
    <Description>Fixes #32490

When showing the preview changes dialog, we correctly de-duplicate the linked files by only showing changes for a single file. When applying changes, we undo changes which have been unchecked by the user in the preview changes dialog. However, the latter did not account for linked files. This led to us undoing unchecked changes for non-linked files, but not for all linked files. This PR ensures that we also handle linked files when undoing changes.

Testing: Manually validated the fix. Unfortunately, we have no unit tests or integration tests for preview changes dialog.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32709</IssueID>
    <RepoID>1</RepoID>
    <Title>Support Dynamic Deconstruction</Title>
    <Description>I expect the following to compile:
```c#
dynamic data = new { foo = 42 };
var ( foo ) = data;
```
But instead I get the error:

![image](https://user-images.githubusercontent.com/4120386/51641164-936be800-1f09-11e9-9a53-1adecf7eb78c.png)

The type of `foo` can be inferred. It's `dynamic`!
</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32708</IssueID>
    <RepoID>1</RepoID>
    <Title>Switch to IVsDropDownBarClient4 to let us handle image monikers directly</Title>
    <Description>We had a non-trivial bit of code we would use to fetch ImageMonikers from IVsHierarchies for use in the project drop down, but we would still have to convert them into legacy imagelists because that's what the old API expected. The editor added a new API that we could implement that just works natively with ImageMonikers. Besides being generally ugly, the old code also had lifetime problems where we might reuse image lists between different calls and all sorts of badness would happen.

Unfortunately I can't delete all of the code that was doing the conversion, because there is still one remaining use (the "preview changes" dialog) that is still not moved over yet. I am deleting any
of the helper methods that were exclusively used in this path though.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

If you are using the editor and have multiple projects in your solution, the icon for the project dropdown might flicker between different project's icons.

### Bugs this fixes

Fixes #28236.

### Workarounds, if any

Don't look at the navbar, and you won't ever notice. :smile:

### Risk

Low, possibly negative. The change is straightforward and is mostly deleting complicated codepaths that were tricky in the first place. The only regression I can imagine is the icon might _not_ appear for projects that don't have an ImageMoniker at all, but in testing I couldn't find a project that met that and that'd be a high DPI/theming bug _anyways_ if such a project exists.

But why "negative?" The code we're no longer calling was tricky and doing manual resource management. The fact that we see this flickering indicates the logic wasn't correct, so it's possible this was one step away from a crash. The editor did see crashes in this area per Watson, so this is removing a source of problems.

### Performance impact

None, possibly improved because we're removing some legacy icon conversion code.

### Is this a regression from a previous update?

No.

### Root cause analysis

We had some really icky code that was introduced when VS moved to Image Monikers, that would convert them back to legacy icons in some cases for legacy APIs. This code doesn't seem to maintain lifetime semantics well (since admittedly it's not even clear what the semantics are it *should* implement) and it causes flickering.

### How was the bug found?

Dogfooding, ad-hoc testing when we've tested other changes.

&lt;/details&gt;</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32707</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: `await using` doesn't ecognize `DisposeAsync` that returns an awaitable</Title>
    <Description>Relates to API change https://github.com/dotnet/corefx/issues/33336</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32706</IssueID>
    <RepoID>1</RepoID>
    <Title> Add structure provider for interpolated strings</Title>
    <Description>
    </Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32705</IssueID>
    <RepoID>1</RepoID>
    <Title>CodeRefactoring in nuget package doesn't work</Title>
    <Description>**Version Used**: Microsoft.CodeAnalysis 1.0.0

**Steps to Reproduce**:

1. Install the nuget package for my Serilog Analyzer https://github.com/Suchiman/SerilogAnalyzer from https://www.nuget.org/packages/SerilogAnalyzer
2. Attempt to invoke a CodeRefactoring like the ShowConfigCodeRefactoringProvider like shown here https://github.com/Suchiman/SerilogAnalyzer#refactors

**Expected Behavior**:
Works as in the gif

**Actual Behavior**:
Nothing happens, Analyzers and CodeFixes work fine but CodeRefactorings only work in the VSIX version.
</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32704</IssueID>
    <RepoID>1</RepoID>
    <Title>Features/unmanaged constructed types</Title>
    <Description>Related to dotnet/csharplang#1744 and #31374 

This merges the unmanaged constructed types feature into `dev16.1-preview1`. @jaredpar approval is required. All of this code has been previously reviewed before being merged into the `dotnet/features/unmanaged-constructed-types` branch.

It's worth noting that this implementation allows taking a pointer to a generic ref struct, because taking a pointer to a non-generic ref struct is already allowed. @agocke @gafter so you're aware as this came up in the test plan review.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32703</IssueID>
    <RepoID>1</RepoID>
    <Title>Not inferring nullability of non-nullable value compared to null</Title>
    <Description>Should report warnings for `s.Length` and `c.F.ToString()`:
```C#
#pragma warning disable 0649
#pragma warning disable 8618

class C
{
    internal object F;
}

class Program
{
    static void F(string s, C c)
    {
        if (s == null)
            _ = s.Length;

        if (c.F != null) return;
        c.F.ToString();
    }
}
```</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32702</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 2019 Preview 1 is reporting members as unused when they are</Title>
    <Description>**Version Used**:  VS2019 Preview 1

**Steps to Reproduce**:

Note that this is hit or miss. It randomly seems fine with some methods but not others.

```csharp
static partial class ContainerConfig
{
   static partial void Configure( ContainerBuilder builder, Assembly assembly )
    {
     builder.ConfigureMvcBindings()
                .ConfigureCoreBindings();
     builder.ConfigureLogging();
   }  

   //CodeLens says ref count = 1, method is marked as unused
   private static ContainerBuilder ConfigureCoreBindings( this ContainerBuilder builder )
   {
       return builder;
   }

   //CodeLens says ref count = 1, method is seen as used
   public static ContainerBuilder ConfigureMvcBindings( this ContainerBuilder builder )
   {
      return builder;
   }

   //CodeLens says ref count = 1, method is seen as unused
   private static ContainerBuilder ConfigureLogging( this ContainerBuilder builder )
   {
      return builder;
   }
}
```

This seems to be working correctly in VS 2018 15.9.4. Closing and reopening VS doesn't change anything.

**Expected Behavior**:

Members that are being used are not marked as unused.

**Actual Behavior**:

Some members that are clearly being used in the same source file are still being marked as unused. The CodeLens reference count is correct but Roslyn doesn't seem to detect the reference.

![unusedmembers](https://user-images.githubusercontent.com/3778674/51635061-80faaa00-1f1b-11e9-94b5-0e0418b92338.PNG)
</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32701</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing warning for assigning an annotated possible null value to an unconstrained generic</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code
```cs
#nullable enable
class C
{
  static void Main()
  {
    string nonNullableString = "";
    M&lt;string&gt;(ref nonNullableString, null); 
    nonNullableString.ToString();
  }
  static void M&lt;T&gt;(ref T t, dynamic? d)
  {
    t = d; // missing warning
  }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGFGBvRiipgIwA2fgBYKAWQgBLXAAoAlLwo8GfPoIAMFXAHtcAOSIkycAMowEsgOYUAvBQBEjgNzK+EgDxaAfHIRwAGY6+kbEtOaWNkg6xgouFO4hhsYRFla41gB0ACq66TaKbmoUAL7KgiJM4l45fgHBORQwMSgAnjRg0gDGAPwUKEolqurN9gMJAPSTFF1QUDYUAO4QCLg2yuUMpUA=

**Expected Behavior**:
Warning for possible null reference assignment to an unconstrained generic type. `d` is explicitly annotated as nullable and T can be substituted with non-nullable type. There should be a warning just as for e.g. `t = default`

**Actual Behavior**:
No warnings. The code compiles and fails at runtime with a `NullReferenceException`</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32700</IssueID>
    <RepoID>1</RepoID>
    <Title>Update the Spanish_Unit_Tests test results path</Title>
    <Description>
    </Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32699</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle special cases with suppression operator</Title>
    <Description>This PR addresses some issues with the suppression operator.

The main thing is that `e` in `e!` should be target-typed. For example, `string s = null!;` or `Func&lt;string?&gt; f = () =&gt; { return null; }!`.
In those situations, the suppression is left underneath the BoundConversion. This also properly represents scenarios with casts: `(string)null!`.
But we have lots of locations in the code where we check a conversion kind and then proceed to cast the underlying expression. Now such locations need to expect that a suppression might be there (can't directly cast).
This PR does not address tuple scenarios however.

I started from `ClassifyImplicitBuiltInConversionFromExpression`.
Then I reviewed uses of `BoundKind.UnboundLambda`, `BoundKind.Lambda`, `BoundKind.MethodGroup`, `IsLiteralDefault`, `IsLiterallNull`, `IsLiterallNullOrDefault`, `BoundKind.InterpolatedString`.

Fixed a number of crashes
Fixes https://github.com/dotnet/roslyn/issues/29862 (top-level nullability of !)
Fixes https://github.com/dotnet/roslyn/issues/29903 (`t! = s` should be an error)
I also noticed that we skipped some warnings in cast scenarios (latest [LDM notes](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-08-20.md#11-suppression-of-nested-nullability) on the topic)
Closes https://github.com/dotnet/roslyn/issues/31294 (`throw null!;` isn't allowed)

Follow-ups:
- We'll need to refine where suppressions are allowed (I probably made more cases illegal than strictly necessary, for now)
- https://github.com/dotnet/roslyn/issues/29710 (analysis of ref re-assignment and CheckValueKind)
- https://github.com/dotnet/roslyn/issues/31297 (escape rules and suppressions)
- https://github.com/dotnet/roslyn/issues/32553 (suppressions on tuple literals)
- https://github.com/dotnet/roslyn/issues/32364 (nullable and dynamic)
- https://github.com/dotnet/roslyn/issues/32661 (follow-up on semantic model on suppressed expressions)
- https://github.com/dotnet/roslyn/issues/32697 (need to re-analyze method group conversions)
- https://github.com/dotnet/roslyn/issues/32698 (need to analyze delegate creations)

Notes:
- Although I ended up removing the IOperation test I'd added, I adjusted the comparison logic for IOperation assertions to tolerate whitespaces</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32698</IssueID>
    <RepoID>1</RepoID>
    <Title>Need nullability analysis of delegate creation expressions</Title>
    <Description>
```C#
        [Fact]
        public void SuppressNullableWarning_DelegateCreation()
        {
            var source =
@"class C
{
    static void Main()
    {
        _ = new System.Func&lt;string, string&gt;((string? x) =&gt; { return null; }!);
        _ = new System.Func&lt;string?, string?&gt;((string x) =&gt; { return string.Empty; }!);
        _ = new System.Func&lt;string, string&gt;(M1!);
        _ = new System.Func&lt;string?, string?&gt;(M2!);

        // without suppression
        _ = new System.Func&lt;string, string&gt;((string? x) =&gt; { return null; }); // 1
        _ = new System.Func&lt;string?, string?&gt;((string x) =&gt; { return string.Empty; }); // 2
        _ = new System.Func&lt;string, string&gt;(M1); // 3
        _ = new System.Func&lt;string?, string?&gt;(M2); // 4
    }
    static string? M1(string? x) =&gt; throw null;
    static string M2(string x) =&gt; throw null;
}";

            // missing warnings

            // cover cases in BindDelegateCreationExpression
            var comp = CreateCompilation(source, options: WithNonNullTypesTrue(TestOptions.DebugExe));
            comp.VerifyDiagnostics(
                );
            CompileAndVerify(comp);

            // Need to verify the semantic model
            // Tracked by https://github.com/dotnet/roslyn/issues/32661
        }
```</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32697</IssueID>
    <RepoID>1</RepoID>
    <Title>Need to re-analyze method groups</Title>
    <Description>In `Binder.CreateConversion`, the bound method group node gets fixed to have a type (with oblivious annotations). During nullable analysis, we need to undo and re-do that with proper nullable annotation.

Note there is a parallel with lambda conversions. In `NullableWalker.GetUnboundLambda()` and `NullableWalker.ApplyConversion` we do this process for lambdas. I suspect we need something similar for method groups.

We should test all scenarios involving `NullableWalker.RemoveConversion()`. I suspect this logic of undoing effects of `Binder.CreateConversion` should be factored there. For example, `new[] { new Func&lt;string?&gt;(...), () =&gt; "" };`.

```C#
        [Fact]
        public void SuppressNullableWarning_LambdaInOverloadResolution()
        {
            var source =
@"class C
{
    static void Main(string? x)
    {
        var s = M(() =&gt; { return x; });
        s /*T:string?*/ .ToString(); // 1

        var s2 = M(() =&gt; { return x; }!); // suppressed
        s2 /*T:string?*/ .ToString(); // 2

        var s3 = M(M2);
        s3 /*T:string*/ .ToString(); // 3

        var s4 = M(M2!); // suppressed
        s4 /*T:string*/ .ToString(); // 4
    }
    static T M&lt;T&gt;(System.Func&lt;T&gt; x) =&gt; throw null;
    static string? M2() =&gt; throw null;
}";
            var comp = CreateCompilation(source, options: WithNonNullTypesTrue());
            comp.VerifyTypes();

            // TODO2
            // Missing warnings on s3 and s4
            comp.VerifyDiagnostics(
                // (6,9): warning CS8602: Possible dereference of a null reference.
                //         s /*T:string?*/ .ToString(); // 1
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "s").WithLocation(6, 9),
                // (9,9): warning CS8602: Possible dereference of a null reference.
                //         s2 /*T:string?*/ .ToString(); // 2
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "s2").WithLocation(9, 9)
                );
            CompileAndVerify(comp);
        }

```</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32696</IssueID>
    <RepoID>1</RepoID>
    <Title>dotnet sln add not working with Xamarin projects</Title>
    <Description>I try to make one grand solution from all my projects for debugging purposes. When I try to add .netstandard project using command `dotnet sln add`, then everything works ok. When I try to add Xamarin project (Xamarin.Android or Xamarin.iOS) then I'm receiving error described in section actual behavior, which points on import declaration like this one:

`
&lt;Import Project="$(MSBuildExtensionsPath)\Xamarin\iOS\Xamarin.iOS.CSharp.targets" /&gt;
`

**Steps to Reproduce**:

1. Run command `dotnet sln add some-xamarin-project.csproj`

**Expected Behavior**:
Project is added to solution

**Actual Behavior**:
dotnet command returns an error:

&gt; Invalid project "someproject.csproj". The imported project "C:\Program Files\dotnet\sdk\2.1.502\Xamarin\iOS\Xamarin.iOS.CSharp.targets" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk. 

Normally, I'am building Xamarin projects without any issues. </Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32695</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32694</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32693</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32692</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32691</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32690</IssueID>
    <RepoID>1</RepoID>
    <Title>[WIP] naive implementation that adds a new API to IWorkspaceProjectContext</Title>
    <Description>This API returns a task that the caller can wait on
until the workspace is up-to-date</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32689</IssueID>
    <RepoID>1</RepoID>
    <Title>Implement the check whether runtime supports DefaultImplementationsOfInterfaces.</Title>
    <Description>
    </Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32688</IssueID>
    <RepoID>1</RepoID>
    <Title>Trim sequence point column numbers greater than 0xffff.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/20118</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32687</IssueID>
    <RepoID>1</RepoID>
    <Title>Go to All doesn't find methods with dot</Title>
    <Description>Go to All used to find methods using dot syntax, like ClassName.MethodName.

Repro steps:
1.Create a Console App Project
2. Open Edit-&gt;Go To-&gt;Go To All (Or press 'Ctrl+F')
3.Enter Program.Main, Go To All doesn't find methods. But after deleting last character 'n', Go To All can find the result.
Expect: Enter Program.Main, Go To All can find the result.

![d15ac2a6-da5c-4e05-8576-0ba23d98b98b](https://user-images.githubusercontent.com/12449387/51578881-ef842d00-1e73-11e9-8e93-9fb38e6d0bb1.gif)


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/335046/go-to-all-doesnt-find-methods-with-dot.html
VSTS ticketId: 683494_
_These are the original issue comments:_

Sara Shi [MSFT] on 9/14/2018, 02:20 AM (130 days ago): &lt;p&gt;&lt;strong&gt;Thanks for taking the time to report this issue to us. We’ve created a bug for this issue as internal tracking. The status on this Developer Community item will be updated as that bug is resolved. Thanks again for your feedback.&lt;/strong&gt; &lt;/p&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32686</IssueID>
    <RepoID>1</RepoID>
    <Title>Export CodeCleanUpFixerProvider rather than register it</Title>
    <Description>
    </Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32685</IssueID>
    <RepoID>1</RepoID>
    <Title>Create source locations with FullSpan instead of Span</Title>
    <Description>`CreateLocation` is meant to be an inverse function to `FindNode`, but sometimes would fail when extra trivia wasn't included. To be inclusive of all trivia, which may directly impact the ability to find a location, use `FullSpan` instead of just `Span`

#29793 </Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32684</IssueID>
    <RepoID>1</RepoID>
    <Title>Handled exception from a COM call to `IOleUndoManager`</Title>
    <Description>This fix [internal bug 443515](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/443515)

@jasonmalinowski @dotnet/roslyn-ide </Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32683</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32682</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32681</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32680</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32679</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC: Handle full line active statement spans correctly</Title>
    <Description>C++ uses _full line_ active statement spans, i.e. spans that span the entire line, with zeroed start and columns. These were not handled correctly in code that enumerates active statements and were causing EnC to fail.

Fixes [DevDiv 672524](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/672524)</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32678</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32677</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 into features/unmanaged-constructed-types</Title>
    <Description>Resolving some conflicts in preparation for merging the feature branch into dev16.1-preview1. Conflicts are due to #32536.

Please review commit 8ccfd1e.</Description>
    <CreatedDate>22/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32676</IssueID>
    <RepoID>1</RepoID>
    <Title>Cannot build latest roslyn</Title>
    <Description>I'm getting:

```
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Sdks\Microsoft.NET.Sdk\build\Microsoft.NET.TargetFrameworkInference.targets(126,5): error : The current .NET SDK does not support targeting .NET Standard 2.0.  Either target .NET Standard 1.6 or lower, or use a version of the .NET SDK that supports .NET Standard 2.0.
```
</Description>
    <CreatedDate>22/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32675</IssueID>
    <RepoID>1</RepoID>
    <Title>Add bail out cases for unused members analyzer</Title>
    <Description>1. Usages as an argument to `nameof`: We have multiple reports of these being false positives in presence of reflection based usages and in variour test frameworks. Fixes #32488.
2. Presence of 'dynamic' in C# - Conservatively bail out in presence of any dynamic operations. Fixes #32522.</Description>
    <CreatedDate>22/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32674</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect binding of suppressed target-typed array initializer</Title>
    <Description>
```C#
        [Fact]
        public void SuppressNullableWarning_TargetTypedArrayInitializer()
        {
            var comp = CreateCompilation(@"
class C
{
    void M()
    {
        string[] s = (new[] { null })!;
    }
}");
            comp.VerifyDiagnostics(
                // (6,22): error CS0029: Cannot implicitly convert type '?[]' to 'string[]'
                //         string[] s = (new[] { null })!;
                Diagnostic(ErrorCode.ERR_NoImplicitConv, "(new[] { null })!").WithArguments("?[]", "string[]").WithLocation(6, 22),
                // (6,23): error CS0826: No best type found for implicitly-typed array
                //         string[] s = (new[] { null })!;
                Diagnostic(ErrorCode.ERR_ImplicitlyTypedArrayNoBestType, "new[] { null }").WithLocation(6, 23)
                );
        }
```</Description>
    <CreatedDate>22/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32673</IssueID>
    <RepoID>1</RepoID>
    <Title>Add check to AbstractEditorFactory to load new WinForms designer if necessary</Title>
    <Description>When the AbstractEditorFactory needs to load the WinForms designer, it must first check the
project's TFM. If the TFM is netcoreapp and is greater or equal to 3.0, it specifies a
different string to the IVSMDDesignerService.CreateDesignerLoader(...) to indicate that the
new WinForms designer should be instantiated.

Eventually, this code will move into the WinForms designer itself.

Note: At the moment, this will only use the netcoreapp3.0 TFM for a multi-targeted project if the netcoreapp3.0 TFM appears first in the list of TFMs. There is further design work needed to determine what to do in the case that there are multiple TFMs.</Description>
    <CreatedDate>22/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32672</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature: Enable setting the "NoWarn" option on a per-file basis</Title>
    <Description>_From @fubar-coder on January 21, 2019 13:57_

### Steps to reproduce

Example project file (as suggestion):

```xml
&lt;Project Sdk="Microsoft.NET.Sdk.Web"&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt;
    &lt;GenerateDocumentationFile Condition="'$(Configuration)' == 'Release'"&gt;true&lt;/GenerateDocumentationFile&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;PackageReference Include="Microsoft.AspNetCore.App" /&gt;
    &lt;PackageReference Include="Microsoft.AspNetCore.Razor.Design" Version="2.2.0" PrivateAssets="All" /&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Compile Update="Program.cs"&gt;
      &lt;NoWarn&gt;CS1591;$(NoWarn)&lt;/NoWarn&gt;
    &lt;/Compile&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
```

### Expected  behavior

No CS1591 warning for `Program.cs`.

### Actual behavior

I get a warning for `Program.cs`.



_Copied from original issue: Microsoft/msbuild#4087_</Description>
    <CreatedDate>22/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32671</IssueID>
    <RepoID>1</RepoID>
    <Title>Annotations do not work for user defined conversion operators</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Professional 2017 
Version 15.2 (26430.16) Release
VisualStudio.15.Release/15.2.0+26430.16
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code
```cs
#nullable enable
using System.Runtime.CompilerServices;

class C
{
  void M(C? c)
  {
    if (c)
    {
      c.ToString();
    }
  }

  public static extern implicit operator bool([NotNullWhenTrue] C? c);
}

namespace System.Runtime.CompilerServices
{
  class NotNullWhenTrueAttribute : System.Attribute { }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABABgqYEYA6AJX1xgBLMHC4BhAPZgADoPIIAyogBuggMZwoAbkaMmAJgpjGAb0YV2AFgoBZABRiA/BTUBKcxTMMLFwQDMKOzcPCy8fHzUuABUJBRgEQVwAcztXHW8fAF8PbIYPJgBmdg4ANioAD3gEXAphaUJ1QRgKCWlECBgJBApgCQlCOwBtADkJGGGiQgB1AAtqKIR8OABdI2c3dNzGGhEoaQgNYt5+IRFxKVl5JQRVDShTfMNR8cnZ+cW4AEEYeMFgfHgFBAR2+v3+gJMFFymSAA==

**Expected Behavior**:
No warnings for `c.ToString()` as according to the annotation it cannot be null when the conversion operator returns `true`

**Actual Behavior**:
`warning CS8602: Possible dereference of a null reference.`

[jcouv update:] We should also test `[NotNullIfNotNull]`, `[DoesNotReturn]`, etc</Description>
    <CreatedDate>22/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32670</IssueID>
    <RepoID>1</RepoID>
    <Title>incorrect null coalescing ?? operator precedence with nullable int - int?</Title>
    <Description>**Version Used**: 
Reproducible with C# interactive x64, Microsoft (R) Roslyn C# Compiler version 2.10.0.0
Solution target framework is: 4.6.2
**Steps to Reproduce**:
int? x = null;
int? y = 1;
Write(x??0+y) // =&gt; prints 1, which is expected since 0 + 1 = 1

Now if you do this:
int? x = 1;
int? y = 1:
Write(x??0+y) // =&gt; prints 1???, although it should be 1+1 = 2, but due to a weird operator precedence with int? and ?? it resolves to 1.

The workaround is to put Parentheses around, like this:
Write((x??0)+y) // =&gt; now it prints 2 as you would expect.

**Expected Behavior**:
When using ?? operator over int?, I expect it to have higher precedence over the later operators, in this case the +

**Actual Behavior**:
int? x = 1;
int? y = 1:
Write(x??0+y) // results in 1, while it should be 2
</Description>
    <CreatedDate>21/01/2019</CreatedDate>
    <ClosedDate>21/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32669</IssueID>
    <RepoID>1</RepoID>
    <Title>6% of CPU opening a bunch of source files is GetService(typeof(SComponentModel))</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 3.0 [28517.116.d16.0stg]

**Steps to Reproduce**:

1. `&gt; git clone http://github.com/dotnet/project-system`
2. `&gt; cd project-system`
3. `project-system&gt; build.cmd`
4. `project-system&gt; ProjectSystem.sln`
5. File -&gt; Open -&gt; File
6. In project-system\src, search for ext:"cs"
7. Select All to selected all files
8. Open 

6% of the CPU time is just calling GetService over and over again. The overhead is almost all due the JoinableTaskFactory.Run call underneath inside VS's global service provider.
![image](https://user-images.githubusercontent.com/1103906/51453456-a8266f80-1d93-11e9-91f3-5fe87ddd9bd5.png)

This line should be cached: https://github.com/dotnet/roslyn/blob/a6bc53bee0fbc893ec5e24c97fc2b510a86a6953/src/VisualStudio/Core/Def/Implementation/LanguageService/AbstractPackage%602.cs#L121.
</Description>
    <CreatedDate>21/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32668</IssueID>
    <RepoID>1</RepoID>
    <Title>Exposes additional compilation options to the scripting API</Title>
    <Description>The values for the properties in the `ScriptOptions` are [the same as before](https://github.com/dotnet/roslyn/blob/master/src/Scripting/CSharp/CSharpScriptCompiler.cs#L57). To ensure no behavior change and being compatible with previous versions.

Closes #32667 

</Description>
    <CreatedDate>20/01/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32667</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose additonal compiler options to the scripting API</Title>
    <Description>The following compilation options [OptimizationLevel](https://github.com/dotnet/roslyn/blob/8c24e04bd2343bd719b62f57abbc859b9305cb36/src/Compilers/Core/Portable/Compilation/CompilationOptions.cs#L134), [AllowUnsafe](https://github.com/dotnet/roslyn/blob/8c24e04bd2343bd719b62f57abbc859b9305cb36/src/Compilers/CSharp/Portable/CSharpCompilationOptions.cs#L25), [CheckOverflow](https://github.com/dotnet/roslyn/blob/8c24e04bd2343bd719b62f57abbc859b9305cb36/src/Compilers/Core/Portable/Compilation/CompilationOptions.cs#L123), [WarningLevel](https://github.com/dotnet/roslyn/blob/8c24e04bd2343bd719b62f57abbc859b9305cb36/src/Compilers/Core/Portable/Compilation/CompilationOptions.cs#L144) aren't exposed in the [scripting options API](https://github.com/dotnet/roslyn/blob/master/src/Scripting/Core/ScriptOptions.cs) ([CSharpScriptCompiler](https://github.com/dotnet/roslyn/blob/master/src/Scripting/CSharp/CSharpScriptCompiler.cs#L57)).

Related issue: #1262</Description>
    <CreatedDate>20/01/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32666</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32665</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32664</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32663</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>20/01/2019</CreatedDate>
    <ClosedDate>20/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32662</IssueID>
    <RepoID>1</RepoID>
    <Title>"Make field readonly" triggers on field of generic parameter type constrained to struct</Title>
    <Description>**Version Used**: VS 16.0 Preview 1.1

**Steps to Reproduce**:

```csharp
interface IQux
{
    bool this[int i] { get; set; }
}

class Foo&lt;T&gt; where T : struct, IQux
{
    private T t; // "Make field readonly" makes code in Bar invalid.

    public Foo(T t) =&gt; this.t = t;

    public void Bar() =&gt; t[0] = true;
}
```
</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32661</IssueID>
    <RepoID>1</RepoID>
    <Title>Verify semantic model on suppressed expressions</Title>
    <Description>From discussion with Neal, we think the suppression expression should have matching `Type` and `ConvertedType`, which would be the converted type of the underlying expression.
In `(Delegate)(() = {}!)` and `Delegate x = () =&gt; {}!;`, the suppressed expressions would have type and converted type `Delegate`.

Other interesting scenarios involving conversions from expressions: `null`, `default`, lambdas, method groups, interpolated strings.

Look for uses of `BoundNode.Kind` and `BoundKind.MethodGroup` (for instance, `GetTypeInfoForNode`)</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>21/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32660</IssueID>
    <RepoID>1</RepoID>
    <Title>VB does not produce an error when Conditional is placed on Function members</Title>
    <Description>**Version Used**: VS 16.0 Preview 1.1

**Steps to Reproduce**:

1. Copy the code below into a VB project.
2. Compile.

```vbnet
Public Class ConditionalAttrRepro
    Public ReadOnly Property I As Integer
        &lt;Conditional("SOMETHING")&gt;
        Get
            Return 0
        End Get
    End Property

    &lt;Conditional("SOMETHING")&gt;
    Public Function M() As Integer
        Return 0
    End Function
End Class
```

**Expected Behavior**: The code does not compile, because the Conditional attribute is placed on invalid members.

From the [docs](https://docs.microsoft.com/en-gb/dotnet/api/system.diagnostics.conditionalattribute?view=netframework-4.7.2#remarks):

&gt; You will get a compilation error in Visual Studio if you apply this attribute to a method that does not return void.

**Actual Behavior**: The code compiles with warning BC41007 ("Attribute 'Conditional' is only valid on 'Sub' declarations"). No idea what would happen if a compiler consuming the assembly were to respect the attribute.</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32659</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/NullableDogfood</Title>
    <Description>
This is an automatically generated pull request from master into features/NullableDogfood.

``` bash
git fetch --all
git checkout merges/master-to-features/NullableDogfood
git reset --hard upstream/features/NullableDogfood
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/NullableDogfood --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32658</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>19/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32657</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>19/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32656</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>19/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32655</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>19/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32654</IssueID>
    <RepoID>1</RepoID>
    <Title>Misc improvements in Roslyn preview installer scripts.</Title>
    <Description>Allow installing on Dev16.
Allow to specify rootSuffix.
Bump min required VS version to 15.8.
Misc cleanup.</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32653</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't crash if we can't fetch the IVsOutputWindow</Title>
    <Description>We potentially run the creation of the output window pane during the shutdown of Visual Studio. This can happen because we're using InvokeBelowInputPriorityAsync, which queues the switch to the UI thread
using IThreadingContext.JoinableTaskFactory.SwitchToMainThreadAsync(). This resulting continuation can run during package shutdown when services are no longer available.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Customer closes Visual Studio. While it's shutting down, it might crash.

### Bugs this fixes

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/744155

### Workarounds, if any

None.

### Risk

Low, just adding a null check that should have been there all along. And this is fixing a crash-during-shutdown scenario so we can't really make it worse.

### Performance impact

None.

### Is this a regression from a previous update?

We believe so; this will now crash more often in 16.0 vs. 15.9.

### Root cause analysis

There was a missing null check that should have been there, but it would have been difficult in practice to hit, because the code that would have crashed during shutdown wouldn't have actually ran. When we changed to use the Joinable Task Factory, these now can run during shutdown which can crash.

We're having a followup conversation to better the scenario here; this partly happened because of an unexpected link between tasks we scheduled and the asynchronous package that loaded us. Once we fully understand the behavior we may have to do an audit to look for other offenses, but that's a longer-term conversation.

### How was the bug found?

Windows Error Reporting (Watson) reports.

&lt;/details&gt;


</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32652</IssueID>
    <RepoID>1</RepoID>
    <Title>Make method body generation not rely on destination type</Title>
    <Description>Fix #30750.

I think being able to extract method in an interface might be useful during a refactoring (this is how this bug was found), so I opt to make this change instead of disabling the refactoring in this scenario. Thoughts?

@dotnet/roslyn-ide @CyrusNajmabadi 

</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32651</IssueID>
    <RepoID>1</RepoID>
    <Title>invoke completion does not work at the beginning of partial symbol</Title>
    <Description>This happens with both existing and new completions.

**Steps to Reproduce**:

1. 

```
namespace ClassLibrary1
{
    public class Class1
    {
        Class1()
        {
            $$Ba
        }
        void Bar()
        {

        }
    }
}
```

2.  press Ctrl+J or Ctrl+Space
3. completion popup appears.

**Expected Behavior**:
Bar is selected in the completion popup

**Actual Behavior**:
The first element is selected in the completion popup
</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32650</IssueID>
    <RepoID>1</RepoID>
    <Title>Extract Method C7 crash was not fixed successfully?</Title>
    <Description>This ExtractMethodCodeRefactoringProvider C7 crash was supposed to be fixed, but surprisingly it happened to me again today with VS 15.9.3.  Following is the code that caused it (with some names changed).

```
		private MyEnum1 _GetValueValidity(StringSegment inValueStr, out StringSegment outCorrectedString, bool inAllowTrim)
		{
			outCorrectedString = inValueStr;
			if (!fIsSurroundingWhiteSpaceAllowed)
			{
				StringSegment trimmedStrSeg = inValueStr.Trim();
				if (trimmedStrSeg.Length &lt; inValueStr.Length)   // xxxxx
				{
					if (!inAllowTrim) return MyEnum1.XXX1;
					inValueStr = trimmedStrSeg;
					outCorrectedString = trimmedStrSeg;
				}
			}

			if (!fAreLineBreakCharsAllowed &amp;&amp; MyHelper1.FindVertWhiteSpace(inValueStr) &gt;= 0)
				return MyEnum1.XXX2;
			
			if (fAllowedCharMatcher != null &amp;&amp; fAllowedCharMatcher.FindNonChar(inValueStr) &gt;= 0)
				return MyEnum1.XXX1;

			int valueStrLength = inValueStr.Length;
			if (valueStrLength &lt; fMinCharCount)
				return (valueStrLength == 0) ? MyEnum1.XXX3 : MyEnum1.XXX4;
			int mxcc = fMaxCharCount;
			if (mxcc &gt;= 0 &amp;&amp; valueStrLength &gt; mxcc)
				return MyEnum1.XXX5;

			return MyEnum1.XXX6;
		}

		public override MyEnum1 GetValueValidity()
		{
			return this._GetValueValidity(fEditTextBox.Text, inAllowTrim: true);
		}
```

```
ExtractMethodCodeRefactoringProvider encountered an error and has been disabled.
System.InvalidOperationException : Matrix does not contain Key 'C7'.
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

_Originally posted by @verelpode in https://github.com/dotnet/roslyn/issue_comments#issuecomment-455733140_

and   https://github.com/dotnet/roslyn/issues/29658</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32649</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix metadata references not always having file watchers</Title>
    <Description>When we created metadata references inside of VisualStudioProject, we ensured we created them with a file watcher so we would know about changes. When we created a metadata reference after we converted a project reference back to a metadata reference that was originally a metadata reference, we didn't do so since that conversion happens in VisualStudioWorkspaceImpl itself and it couldn't access the file watcher.

This fixes this. The majority of the work here is just moving code around. Basically the watchers were per-project, which meant that it'd be forbidden to call into them the Workspace code because that would violate the lock hierarchy. To fix this, I move the file watching logic into it's own little type with a lock, and since no calls are made back into the workspace under that lock, it removes the deadlock concerns.

Fixes #32554.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Customer has a project with lots of P2P references and loads/unloads projects in various orders. In some cases, this will cause VS to crash or at least the project system to get in a missynced state.

### Bugs this fixes

dotnet/roslyn#32554 and https://devdiv.visualstudio.com/DevDiv/_workitems/edit/750094

### Workarounds, if any

None, really. If you don't unload projects you won't hit it, but creating some types of projects implicitly do the problematic operations in their template wizard.

### Risk

Moderate: it's a fair amount of code churn, but the churn is fairly straightforward.

### Performance impact

None.

### Is this a regression from a previous update?

Yes, this was broken by a late Preview 1 fix that missed an edge case.

### Root cause analysis

This edge case noticed in testing of a fix we made for Preview 1, but the full impact wasn't realized, and at the time a bug was filed to follow up on it. This is fixing the issue. Tests have been added to cover this scenario too.

### How was the bug found?

Noticed during testing of another fix, and also internal testing with certain templates that also trigger the bug.

&lt;/details&gt;</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32648</IssueID>
    <RepoID>1</RepoID>
    <Title>Issue 31304 Check variables in scope when getting name declaration suggestions</Title>
    <Description>Fixes #31304

This changes the behavior of the declaration name provider to check to see if the variable name is already defined in the current scope.  

Raising this to get some clarity on a couple issues.
1.  I'm not sure what the performance impact of calling `LookupSymbols` on the location is when providing the suggestions.  It should only be called once every time the suggestion list is generated.
2.  What symbols should be considered as conflicting?  Parameters and locals seem to be a definite, but I've also included ones like fields (which could be shadowed).
</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32647</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>19/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32646</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32645</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>19/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32644</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>19/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32643</IssueID>
    <RepoID>1</RepoID>
    <Title>'Find All References' should find references in XAML files</Title>
    <Description>&lt;p&gt;It seems that when I right click a Dependency property in my .cs file and choose the 'Find All Refernces' function, it only show references in other .cs files. It omits any references in xaml files. It would be nice if it identified all references.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/425409/enhance-the-find-all-references-function.html
VSTS ticketId: 765186_
_These are the original issue comments:_

Jane Wu [MSFT] on 1/14/2019, 01:17 AM (4 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32642</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure we react to metadata reference adds and deletes too</Title>
    <Description>FileChangeWatcher wasn't specifying all the file watcher flags it should have been. Reuse the constant that already existed for FileChangeTracker so we get the same behavior.

FileChangeTracker is eventually going to be retired, and so I'm moving over the constant to the long-term home.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

The user opens a solution where a project is directly referencing some output path that they expect their build to produce. For example, they have some project autogenerating binaries that should get picked up by another project. If they don't do a build before they open the solution, the IDE might not refresh when the binaries get created.

### Bugs this fixes

No bug, noticed this as I was testing #32649.

### Workarounds, if any

Only workaround would be to unload and reload your solution.

### Risk

Low.

### Performance impact

None.

### Is this a regression from a previous update?

Yes, this was broken in 16.0 Preview 1.

### Root cause analysis

We weren't specifying the right file watcher flags, a mistake it looks like we've made before. When I was refactoring this it was just my fault to not carry that code forward. We don't have tests on this since the system is pretty heavily asynchronous and since it's mocking some VS interfaces we haven't gone through the trouble.

### How was the bug found?

Doing regression testing for another bug.

&lt;/details&gt;
</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32641</IssueID>
    <RepoID>1</RepoID>
    <Title>Text gets duplicated in Find References if there are multiple classifications</Title>
    <Description>**Steps to Reproduce**:

0. Be a part of the enhanced colors flight.
1. Copy this into a source file:
```c#
        const int Foo = 42;
        const int Bar = Foo;
```
2. Invoke Find References on Foo.

**Actual Behavior**:

![image](https://user-images.githubusercontent.com/201340/51418423-503ffc80-1b38-11e9-9f3f-23bd94905f14.png)

Observe the "BarBar". Since we now have two classifications on this span, we aren't handling it well. Also note the span for Foo (which should be highlighted as the thing we're search on) is all screwed up.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32640</IssueID>
    <RepoID>1</RepoID>
    <Title>Dispose pattern based enumerators in foreach:</Title>
    <Description>- Introduce a new bound node to represent a disposable placeholder
- Run disposal lookup on ref structs and store the result
- Lower the looked up disposal method if found</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32639</IssueID>
    <RepoID>1</RepoID>
    <Title>Be able to write notes/comments in the code without requiring rebuild</Title>
    <Description>&lt;p&gt;I'm not even asking for modifying the pdb to reindex lines if necessary (though that would be cool).  I'm just saying to have a temporary comment object that is not inserted into the code, which could be then converted to source code comments when the code stops executing or when the developer wants it to be converted.&lt;/p&gt;&lt;p&gt;Use case:&lt;/p&gt;&lt;p&gt;Trying to keep track of what a large code base does and why is complex.  Yes, we could write notes at some other location, but then they can get lost, mislabeled, etc and then have to be typed/copied in afterwards, requiring to open the file again, find the line and copy from the notes.&lt;/p&gt;&lt;p&gt;Having the ability to put a note down at some location in the code and not have it result in the debugger complaining that the source code has changed and then have them able to convert to proper source code comments when the developer wants would be of &lt;b&gt;immense&lt;/b&gt; value. &lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/376672/be-able-to-write-notescomments-in-the-code-without.html
VSTS ticketId: 724712_
_These are the original issue comments:_

Fiona Niu[MSFT] on 11/7/2018, 01:07 AM (72 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps. &lt;/p&gt;</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32638</IssueID>
    <RepoID>1</RepoID>
    <Title>Bail out on error type in CSharpTypeStyleDiagnosticAnalyzer</Title>
    <Description>Fixes #29718</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32637</IssueID>
    <RepoID>1</RepoID>
    <Title>Quick Action ability to Change/Add a prefix to the field variable when adding a parameter to a constructor</Title>
    <Description>&lt;p&gt;When I am adding another parameter to class constructor and I like, IAprovalResolver approvalsResolver, and press Ctrl+ (Quick Actions). it gives me the option to Create and initialize property 'ApprovalsResolver' or Create and initialize field 'approvalsResolver'.  I usually select the initialize field, but when it does it creates it without any prefix.  I end up with:&lt;/p&gt;&lt;pre&gt;private readonly IApprovalResolver approvalsResolver;
&lt;/pre&gt;&lt;p&gt;And in the constructor I get:&lt;/p&gt;&lt;pre&gt;this.approvalsResolver = approvalsResolver;
&lt;/pre&gt;&lt;p&gt;I would really like to be able to set a prefix for the field variable.  Our coding standard is to have an _ before field variables.  I want it to end up generating this code: &lt;/p&gt;&lt;pre&gt;private readlonly IApprovalsResolver _approvalsResolver;&lt;/pre&gt;&lt;p&gt;And then in the constructor, I would want:&lt;/p&gt;&lt;pre&gt; _approvalsResolver = approvalsResolver;
&lt;/pre&gt;&lt;p&gt;Currently, I have to go change it myself and then remove the this&lt;/p&gt;&lt;p&gt;That is probably the biggest Quick Action that I would like to have control over the code it generates.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/380765/quick-action-ability-to-changeadd-a-prefix-to-the.html
VSTS ticketId: 727649_
_These are the original issue comments:_

Fiona Niu[MSFT] on 11/12/2018, 07:29 PM (66 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps. &lt;/p&gt;</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32636</IssueID>
    <RepoID>1</RepoID>
    <Title>Repos that are on github do not need to archive sources</Title>
    <Description>Infrastructure change.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32635</IssueID>
    <RepoID>1</RepoID>
    <Title>Support unassigned variable dataflow in local functions</Title>
    <Description>
    </Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32634</IssueID>
    <RepoID>1</RepoID>
    <Title>Add New Item &gt; editorconfig export option</Title>
    <Description>In Visual Studio 2019 Preview 1 we enabled the ability to [export editor settings to an editorconfig](https://github.com/dotnet/roslyn/issues/20253).

Users may not think to go to Tools &gt; Options in order to create an editorconfig file. It'd be nice if the Add New Item dialog had a "generate from editor settings" option.

![image](https://user-images.githubusercontent.com/8293542/51416544-d9523600-1b2e-11e9-8829-67d4526564a5.png)

</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32633</IssueID>
    <RepoID>1</RepoID>
    <Title>Update dotnet buildtools</Title>
    <Description>This backports [changes](https://github.com/dotnet/roslyn/pull/32613/files) merged into dev16.0-preview2-vs-deps. </Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32632</IssueID>
    <RepoID>1</RepoID>
    <Title>Use BuildNumber when publishing OptProf artifacts</Title>
    <Description>
    </Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32631</IssueID>
    <RepoID>1</RepoID>
    <Title>disable completion for immediate window commands</Title>
    <Description>Fix https://github.com/dotnet/roslyn/issues/32724

There is a legacy command completion (not Roslyn old completion) in the Immediate window appearing after one types `&gt;`  there. Code owners of the immediate window said they cannot remove the legacy completion for the case. They want Roslyn to disable/enable regular (both old Roslyn and new Editor) completions when called `EnableStatementCompletion`.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32630</IssueID>
    <RepoID>1</RepoID>
    <Title>Enable skipped tests that previously failed on AssertIsForeground</Title>
    <Description>Of the three stack traces included or linked to from #20953 two were being skipped and one had never been marked as skipped.
PeekTests.TestPeekAcrossProjectsInvolvingPortableReferences - Not Skipped
LinkedFileDiffMergingEditorTests.TestCodeActionPreviewAndApply - Skipped
InteractivePasteCommandhandlerTests.PasteCommandWithOutInteractiveFormat - Skipped

I was unable to find any hits on the failures. I recommend removing the skip and seeing if we can collect more data from these tests.

Closes #20953</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32629</IssueID>
    <RepoID>1</RepoID>
    <Title>Delete UnboundIdentifiersDiagnosticAnalyzer</Title>
    <Description>Delete the UnboundIdentifiersDiagnosticAnalyzer analyzer once compiler feature to report semantic diagnostics in lambdas requested in https://github.com/dotnet/roslyn/issues/32628 has been implemented.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32628</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler should report semantic diagnostics from broken lambdas</Title>
    <Description>Derived from https://github.com/dotnet/roslyn/issues/23667 and more precisely from @gafter's comment https://github.com/dotnet/roslyn/issues/23667#issuecomment-374980551, which states the requested compiler feature.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32627</IssueID>
    <RepoID>1</RepoID>
    <Title>Broken link in summary for Csc</Title>
    <Description>In class Csc (https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/MSBuildTask/Csc.cs) summary contains link to http://devdiv/spectool/Documents/Whidbey/VCSharp/Design%20Time/M3%20DCRs/DCR%20Assembly%20aliases.doc that isn't work. Is this link correct?

https://github.com/dotnet/roslyn/blob/6b7e1fce652ecc86d9b6f28bcfea1bb2905013ca/src/Compilers/Core/MSBuildTask/Csc.cs#L273-L279</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32626</IssueID>
    <RepoID>1</RepoID>
    <Title>Recognize `Nullable&lt;T&gt;(T value)` when inferring nullability of `Value` field</Title>
    <Description>No warning should be reported for `y.Value.F`:
```C#
using System;

struct S
{
    internal object? F;
}

class Program
{
    static void F()
    {
        S? x = new Nullable&lt;S&gt;(new S());
        x.Value.F.ToString(); // warning

        S? y = new Nullable&lt;S&gt;(new S() { F = 2 });
        y.Value.F.ToString(); // ok
    }
}
```

[jcouv:] As part of this we should test a nullable tuple: `(string, string)? t = (null, ""); ...`</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32625</IssueID>
    <RepoID>1</RepoID>
    <Title>Recognize `ValueTuple.Create()` methods when setting tuple element nullability</Title>
    <Description>No warning should be reported for `t.Item1.ToString()`:
```C#
class Program
{
    static void F(object x, string? y)
    {
        (object?, string?) t = System.ValueTuple.Create(x, y);
        t.Item1.ToString(); // ok
        t.Item2.ToString(); // warning
    }
}
```
</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32624</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should allow explicit implementation of interfaces with missing tuple names</Title>
    <Description>According to the following LDM decision: https://github.com/dotnet/csharplang/blob/master/meetings/2017/LDM-2017-06-28.md#issue-1-c-60-has-to-implement-it-without-names-but-c-70-requires-names

Members without tuple names in their signatures should be allowed to override members with with tuple names in their signatures. However Roslyn currently does not allow it for explicit interfaces implementations which seems to be a bug in the compiler according to the LDM notes.

**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Try to compile the following code (you can put both interfaces into a separate assembly to emulate the scenario from the original LDM issues)
```cs
using System.Collections.Generic;

interface IInterface&lt;T&gt;
{
  (int x, int y) Foo(IEnumerable&lt;T&gt; z);
}

interface IDerivedInterface : IInterface&lt;(int x, int y)&gt; {}

class A : IDerivedInterface
{
  extern System.ValueTuple&lt;int, int&gt; IInterface&lt;System.ValueTuple&lt;int, int&gt;&gt;.Foo(IEnumerable&lt;System.ValueTuple&lt;int, int&gt;&gt; z);

  public static void Main() { }
}
```

**Expected Behavior**:
No errors. There are no tuple names in the `A.Foo` signature.

**Actual Behavior**:
`CS0535 'A' does not implement interface member 'IInterface&lt;(int x, int y)&gt;.Foo(IEnumerable&lt;(int x, int y)&gt;)'`

</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32623</IssueID>
    <RepoID>1</RepoID>
    <Title> Delete Roslyn's ICommandHandler interface and all support code</Title>
    <Description>Now that the editor has their own public version of this API, and all code has been migrated to use the new system, we can delete all of the code that was supporting the old handlers. It may be surprising that much of this code was dead, but the command handler list that was being invoked by all of this was indeed empty.

Things still to do:

- [x] Test debugger intellisense
- [x] Test F#
- [x] Test TypeScript</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32622</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 'upstream/dev16.0-preview2' into feature branch</Title>
    <Description>
    </Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32621</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unnecessary properties from projects</Title>
    <Description>
    </Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>19/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32620</IssueID>
    <RepoID>1</RepoID>
    <Title>"Remove unused member" suggests to remove a private method referenced using nameof</Title>
    <Description>**Version Used**: VS 16.0 Preview 1.1

**Steps to Reproduce**:

```csharp
class Program
{
    private static readonly MethodInfo m = typeof(Program).GetMethod(nameof(F), BindingFlags.NonPublic | BindingFlags.Static);

    private static void F()
    {
    }
}
```

**Expected Behavior**:

Use of `nameof` should prevent the member from being considered for removal.

**Actual Behavior**:

Quick fix shows up and when applied, `nameof(F)` is invalid.
</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32619</IssueID>
    <RepoID>1</RepoID>
    <Title>"Use pattern matching" code fix provider produces invalid code</Title>
    <Description>**Version Used**: VS 16.0 Preview 1.1

**Steps to Reproduce**:

```csharp
static bool F(object o1, object o2)
{
    var s1 = o1 as string;
    var s2 = o2 as string;

    if (s1 != null &amp;&amp; s2 != null)
    {
        return s1 == s2;
    }

    if (s1 == null || s2 == null)
    {
        return false;
    }

    return o1 == o2;
}
```

**Actual Behavior**:

Applying suggested "Use pattern matching" code fixes produce the following code:

```csharp
static bool F(object o1, object o2)
{
    if (s1 != null &amp;&amp; s2 != null)
    {
        return s1 == s2;
    }

    if (!(o1 is string s1) || !(o2 is string s2))
    {
        return false;
    }

    return o1 == o2;
}
```

The declaration site of `s1` and `s2` is beyond the first use of the variables, thus making the first line produce "use before declare" errors.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32618</IssueID>
    <RepoID>1</RepoID>
    <Title>Update nuspec for Microsoft.CodeAnalysis NuGet package</Title>
    <Description>_From @mavasani on January 18, 2019 15:14_

Currently, this NuGet package has a development dependency on version 2.6.1 of Microsoft.CodeAnalysis.Analyzers NuGet package. That version of the analyzers package has a [known bug](https://github.com/dotnet/roslyn-analyzers/issues/1888), that causes an AD0001 diagnostic for large number of code bases. That bug is fixed in the latest version (2.6.3) of Microsoft.CodeAnalysis.Analyzers NuGet package, so we should updating the nuspec for Microsoft.CodeAnalysis to use version 2.6.3

_Copied from original issue: dotnet/roslyn-sdk#243_</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32617</IssueID>
    <RepoID>1</RepoID>
    <Title>Add structure provider for string literals</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/24919</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32616</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn master-vs-deps | 20190118</Title>
    <Description>
    </Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32615</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32614</IssueID>
    <RepoID>1</RepoID>
    <Title>Mark fields as "read-only" fires on assignments via nested classes</Title>
    <Description>**Steps to Reproduce**:
``` C#
    class Parent
    {
        private string field; // &lt;-- Fires

        private class Child
        {
            Parent parent;

            public Child(Parent parent)
            {
                this.parent = parent;
                this.parent.field = "Empty";
            }
        }
    }
```
**Expected Behavior**:
Not to fire

**Actual Behavior**:
```
Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0044	Make field readonly	ConsoleApp345	C:\Users\davkean\Source\Repos\ConsoleApp345\ConsoleApp345\Program.cs	21	Active
```</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32613</IssueID>
    <RepoID>1</RepoID>
    <Title>Add nuget.packaging dependency to RoslynPublish</Title>
    <Description>Updated version of dotnet buildtools requires NuGet.Packaging</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32612</IssueID>
    <RepoID>1</RepoID>
    <Title>Copy nullable state of tuples at construction and through identity conversions</Title>
    <Description>Example:
```C#
class Program
{
    static void F(object? x, string y)
    {
        (object, string?) t = (x, y); // warning
        (object?, string?) u = t;     // warning

        t.Item1.ToString(); // warning
        t.Item2.ToString(); // ok

        u.Item1.ToString(); // warning
        u.Item2.ToString(); // ok
    }
}
```
See #29970.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>20/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32611</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32610</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32609</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32608</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32607</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32606</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32605</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32604</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32603</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32602</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32601</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32600</IssueID>
    <RepoID>1</RepoID>
    <Title>Copy nullable state of tuple elements independently</Title>
    <Description>Warning should be reported for `t.Item1`, not `t.Item2`:
```C#
class A
{
    public static implicit operator B?(A a) =&gt; null;
}
class B
{
}
struct S
{
    internal object? F;
}
class Program
{
    static void F()
    {
        (B, S?) t = (new A(), new S() { F = 1 }); // warning: assigning A to B
        t.Item1.ToString();         // warning: Item1 may be null
        t.Item2.Value.F.ToString(); // ok
    }
}
```</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32599</IssueID>
    <RepoID>1</RepoID>
    <Title>Copy nullable state through implicit and explicit tuple conversions</Title>
    <Description>The following should report warnings for `u1.Item2` and `u2.Item2` only:
```C#
class Program
{
    static void F1((string?, string) t1)
    {
        (object?, object?) u1 = t1;
        u1.Item1.ToString(); // warn
        u1.Item2.ToString();
    }

    static void F2((object?, object) t2)
    {
        var u2 = ((string?, string?))t2;
        u2.Item1.ToString(); // warn
        u2.Item2.ToString();
    }
}
```</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32598</IssueID>
    <RepoID>1</RepoID>
    <Title>Updated dotnet build tools</Title>
    <Description>Update the buildtools specifically for this fix https://github.com/dotnet/buildtools/pull/2213</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32597</IssueID>
    <RepoID>1</RepoID>
    <Title>Code transformation results in error</Title>
    <Description>While trying out the Uint128.cs files from
https://github.com/ricksladkey/dirichlet-numerics Intellisense suggests turning the s0 and s1 fields into auto properties. If I allow it, the transformation leads to uncompilable code, their usage will become unassigned out parameters in many functions below.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/425210/code-transformation-results-in-error.html
VSTS ticketId: 765035_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32596</IssueID>
    <RepoID>1</RepoID>
    <Title>do not search symbols in obj folder</Title>
    <Description>attempt to navigate to symbol alway hit these autogenerated files in obj folder, please stop doing that

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/6793/do-not-search-symbols-in-obj-folder.html
VSTS ticketId: 413006_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32595</IssueID>
    <RepoID>1</RepoID>
    <Title>QuickInfo should display decoded XML literals</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Preview 2 28516.60.d16.0

**Steps to Reproduce**:

1. Create a .NET Core  C# project
2. Write some code that have usages of value tuples such as:
```c#
return (a: 1, b: 2, c: 3, d: 4);
```
3. Mouse over to any of the fields (a, b, c or d)
4. QuickInfo displays the field definition as well as the XML comments summary.

**Expected Behavior**:
The XML comments summary text should correctly display `'s`

**Actual Behavior**:
It displays `&amp;#39;` See the below image, it does not decode the literal (') encoded in XML.

![image](https://user-images.githubusercontent.com/12908526/51365465-45805b80-1a95-11e9-80d8-c9d79bf39d26.png)
</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32594</IssueID>
    <RepoID>1</RepoID>
    <Title>Change IWorkspaceProjectContext.SetOptions to take an IEnumerable&lt;string&gt;</Title>
    <Description>The project system needs to combine the resulting command-line into a giant long string: https://github.com/dotnet/project-system/blob/5bb96b4ce3633e2ae1d4e0029411708869646893/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/LanguageServices/ApplyChangesToWorkspaceContext.cs#L154, only for Roslyn to split it up again: https://github.com/dotnet/roslyn/blob/33e254624c206f851cff11db34caf76a651c6a1d/src/VisualStudio/Core/Def/Implementation/ProjectSystem/VisualStudioProjectOptionsProcessor.cs#L89.

For large projects, these are ending up on the Large Object Heap. To avoid the allocations here and the extra GC pressure, let's change this API to take an IEnumerable&lt;string&gt;.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32593</IssueID>
    <RepoID>1</RepoID>
    <Title>"Quick Actions" (Ctrl + .) should offer suggestions for errors in enclosing block (e.g. Implement Abstract Class)</Title>
    <Description>&lt;p&gt;Currently &amp;quot;Quick Actions&amp;quot; (Ctrl + .) offers suggestions for errors/refactoring on the current line where the cursor is positioned.&lt;/p&gt;&lt;p&gt;This feature would be monumentally more useful if it offered suggestions regarding errors in the scope of the enclosing code block, for example: Implement Abstract Class error. &lt;/p&gt;&lt;p&gt;Imagine starting to code this subclass:&lt;/p&gt;&lt;p&gt;1.  class MyClass : AbstractBase {&lt;/p&gt;&lt;p&gt;
2.&lt;/p&gt;&lt;p&gt;3.  }&lt;/p&gt;&lt;p&gt;Type line 1 and hit enter, indentation and the closing bracket are automatically created and your cursor is on line 2. Now you'll get squiggly line under &amp;quot;MyClass&amp;quot; saying that abstract members must be implemented. Currently, we have to move the cursor back up to line 1 and right underneath &amp;quot;MyClass&amp;quot; in order to benefit from &amp;quot;Ctrl + . &amp;gt; Implement Abstract Class&amp;quot;, whereas it would be a fantastically better UX to be offered &amp;quot;Implement Abstract Class&amp;quot; while the cursor is on line 2. &lt;/p&gt;&lt;p&gt;For comparision, Android Studio has a similar &amp;quot;alt + enter&amp;quot; shortcut for &amp;quot;Project quick fix (show intention actions and quick fixes)&amp;quot; which offers a nice hierarchical list of suggestions starting with those relevant to the current line, then the current code block, and all the way up to the current document.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/8987/quick-actions-ctrl-should-offer-suggestions-for-er.html
VSTS ticketId: 420981_
_These are the original issue comments:_

Arash Motamedi on 12/25/2016, 04:24 PM (753 days ago): &lt;p&gt;&lt;a target='_blank' href="https://developercommunity.visualstudio.com/storage/temp/947-quickactionsuggestion.png"&gt;quickactionsuggestion.png&lt;/a&gt;&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32592</IssueID>
    <RepoID>1</RepoID>
    <Title>Optimize both netstandard2.0 and netstandard1.0 versions of SCI/SRM</Title>
    <Description>Sign SCI and SRM with Windows 10S compatible certificate.

Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/755193</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32591</IssueID>
    <RepoID>1</RepoID>
    <Title>Finish testing for unmanaged constructed types</Title>
    <Description>Related to #31374 

- Test for struct private field in metadata
- Test ref structs
  - We decided it's legal to allow taking a pointer here
- Test fixed size buffers
  - Mostly just ensuring that a fixed size buffer of generic structs is not allowed
- Add IsManagedType checks in tests related to circular structs
  - Should these change to IsUnmanagedType checks? It didn't look like this API was available on NamedTypeSymbol in the context of the test. Perhaps I was doing something wrong?

Will make another pass tomorrow to make sure I covered as much as possible before opening up for team review.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32590</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: Confirm whether [DebuggerStepThroughAttribute] is needed on some methods</Title>
    <Description>The state machine types for async-iterators has:
- a private `MoveNext` that contains the user code
- a public `MoveNextAsync` which is repeatedly called (by `await foreach`) and calls `MoveNext`
- a public `DisposeAsync`, which also calls `MoveNext`

The kick-off method only creates the state machine type, but does not start execution.

Here's an [example](https://github.com/jcouv/roslyn/blob/blog-post/async-iterator.md#end-to-end-example).

Currently, we do not emit `[DebuggerStepThrough]` on any of those methods. But we do emit `[DebuggerHidden]` (which has the same effect when it comes to stepping and "Just My Code").

I observed that `[DebuggerStepThrough]` is [not emitted](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEAMACFBGA3AWACgUBmLAJgwGEMBvIjRrMnAFgDocSAeASwDsYAPgwBZABQBKDAyb1CTRVmzYsAdgx5ZjAL5EdQA==) for iterator state machines.</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32589</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC: support `using` declarations, including asynchronous ones</Title>
    <Description>In C# 8, you can transform a local declaration (`var x = y;`) into a `using` declaration: `using var x = y;`. It works if `y` implements `IDisposable`.
You can even transform it into an `await using` declaration: `await using var x = y;` (if `y` implements `IAsyncDisposable`).

@tmat mentioned this is likely to be tricky for EnC.
FYI @ivanbasov @jinujoseph</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>31/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32588</IssueID>
    <RepoID>1</RepoID>
    <Title>MatchFailureException captures an unreified tuple input</Title>
    <Description>Fixes #31482</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32587</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 'dotnet/master' into DefaultInterfaceImplementation</Title>
    <Description>
    </Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32586</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler should depend on the minimal number of well-known members for Index and Range</Title>
    <Description>Right now the compiler depends on the following:

```C#
namespace System
{
    public readonly partial struct Index : IEquatable&lt;Index&gt;
    {
        public Index(int value, bool fromEnd); // well-known
        public bool FromEnd { get; }           // well-known
        public int Value { get; }              // well-known
    }

    public readonly partial struct Range : IEquatable&lt;Range&gt;
    {
        public Index End { get; }                           // well-known
        public Index Start { get; }                         // well-known
        public static Range All();                          // well-known
        public static Range Create(Index start, Index end); // well-known
        public static Range FromStart(Index start);         // well-known
        public static Range ToEnd(Index end);               // well-known
    }
}
```

But we could probably strip `Range` down to

```C#
    public readonly partial struct Range : IEquatable&lt;Range&gt;
    {
        public Index End { get; }                           // well-known
        public Index Start { get; }                         // well-known
        public static Range Create(Index start, Index end); // well-known
    }
```</Description>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32585</IssueID>
    <RepoID>1</RepoID>
    <Title>Update cross-platform.md to reflect recent infra changes</Title>
    <Description>
    </Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32584</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32583</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32582</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32581</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32580</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to dev16.0-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps
git reset --hard upstream/dev16.0-preview2-vs-deps
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32579</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32578</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32577</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push upstream merges/dev16.0-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32576</IssueID>
    <RepoID>1</RepoID>
    <Title>A number of C# and VB compiler unit-tests utilizing decimal numbers fail due to a baseline difference when run against netcoreapp3.0</Title>
    <Description>The issue for coreclr https://github.com/dotnet/coreclr/issues/22046

Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenIncrementTests.TestIncrementDecimal
Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenTests.DecimalBinaryOp_03
Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenTests.DecimalLiteral_BreakingChange
Microsoft.CodeAnalysis.VisualBasic.UnitTests.CodeGenTests.DecimalLiteral_BreakingChange
Microsoft.CodeAnalysis.VisualBasic.UnitTests.CodeGenTests.PreserveZeroDigitsInDecimal

The tests are temporarily disabled for CoreClr in DefaultInterfaceImplementation branch. Need to decide what to do about them.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32575</IssueID>
    <RepoID>1</RepoID>
    <Title>No warning for field from default tuple value in conditional</Title>
    <Description>No warning reported for `x.Item2.ToString()`:
```C#
class Program
{
    static void F&lt;T, U&gt;(bool b, T t, U u)
        where U : class
    {
        var x = b ? (t, u) : default;
        x.Item1.ToString(); // warning: maybe null
        x.Item2.ToString();
    }
}
```</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32574</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve CFG for switch expression when clauses</Title>
    <Description>Also some related minor changes and improved testing.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32573</IssueID>
    <RepoID>1</RepoID>
    <Title>Emit DebuggerStepThroughAttribute in optimized code</Title>
    <Description>"Step in" doesn't work for optimized async/iterator methods.

See https://github.com/dotnet/sourcelink/issues/232 for repro.

This attribute indicates that a compiler generated code calls into user code and that "step in" should continue stepping it until it finds the user code, rather than returning to the caller immediately.

This condition needs to be removed:
https://github.com/dotnet/roslyn/blob/7f63622119ed367186ccc47560caba4da2586976/src/Compilers/CSharp/Portable/Symbols/Compilation_WellKnownMembers.cs#L485

The same for VB.

[update jcouv:] the debugger is also adding a [fix](https://devdiv.visualstudio.com/DevDiv/_git/Concord/pullrequest/159939).</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32572</IssueID>
    <RepoID>1</RepoID>
    <Title>[Question] Why the output is CS0165 when using a Null-Conditional Operator.</Title>
    <Description>**Steps to Reproduce**:

1. https://sharplab.io/#v2:D4AQDABCCMAsDcBYAUCkBmKAmCAxA9vhCgN4TnHIUQAOATgJYBuAhgC4CmEdHLAJvgB2AGwCeEACIMAxmwZCWdUQB4YYADRRoYAHwQA+gCNFEALwRBHAO6SZchUtXbNanQAoAlEioUU1DFqQAOIcbG5qEADWHKIeZnpGigD8AHQAKkohbABqLMIArhxu0aKa+PlsEKx0VXmFcabmbHSFlNTUSbUFXH7t5ABcEHwcAGYs+cJs3gC+QA==

Given the following C# example:

```cs
using System.Collections.Generic;

public class Foo 
{    
    private readonly Dictionary&lt;string, string&gt; _bar = new Dictionary&lt;string, string&gt;();
    
    public string Get(string key) =&gt; _bar?.TryGetValue(key, out var value) == true 
        ? value 
        : default;
}
```

The following result is returned:

-  CS0165: Use of unassigned local variable 'value'

When I adjust the C# example without the Null-Conditional Operator:

```cs
using System.Collections.Generic;

public class Foo 
{
    
    private readonly Dictionary&lt;string, string&gt; _bar = new Dictionary&lt;string, string&gt;();
    
    public string Get(string key) =&gt; _bar != null &amp;&amp; _bar.TryGetValue(key, out var value) 
        ? value 
        : default;
}
```
this will compile without any error(s). So my question is, aren't these essentially the same? If not could you elaborate on why the output result is CS0165?</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>14/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32571</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow Obsolete Attribute on Accessors</Title>
    <Description>See #32472, https://github.com/dotnet/csharplang/issues/2152, https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-02-27.md

This PR makes the following changes:

1. Allow Obsolete and Deprecated attributes on property accessors in C# 8. They remain invalid on event accessors.

2. An obsolete or deprecated attribute on any accessor (property or event) will suppress warnings from the usage of obsolete/deprecated symbols in that accessor. For simplicity, this applies across all language versions.

3. A new error has been added to indicate that deprecated and obsolete attributes cannot be used on event accessors but can be used on property accessors.

4. The error for using obsolete/deprecated on an attribute pre C# 8 now reads: 
```
                // (5,24): error CS8652: The feature 'obsolete on property accessor' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version.
```

C# already had to be able to consume code which declared an accessor obsolete, as that is perfectly legal both in IL, and in VB. As such no changes have been necessary to allow consumption of obsolete accessors in C#.

In any cases where I made design decisions which I am unsure of, I will leave a review.
</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32570</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for .razor files</Title>
    <Description>ASP.NET Core 3.0 adds support for Razor Components, a new way to write client-side web UI. Razor Component files are Razor files (like .cshtml files) that get compiled to .NET classes that render to a structured presentation of the DOM. This allows the runtime to efficiently figure out exactly which parts of the DOM need to be updated. Because Razor Components use a fundamentally different compilation model from MVC views/pages they will have a different file extension: .razor.

Broadly speaking we need all our partner teams that special case .cshtml files today to also support .razor files. In .razor files you should get a rich C# editing experience and rich debugging experience in both web and class libraries just like you do with .cshtml files today. We want to land this work to support .razor files in the first update preview of VS2019 so that folks can start trying it out with the new Razor Component support in .NET Core 3.0.

@kendrahavens @rynowak @jinujoseph @heejaechang @jasonmalinowski </Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32569</IssueID>
    <RepoID>1</RepoID>
    <Title>Suggestion: IAsyncQueryable</Title>
    <Description>[jcouv summary:] requesting support for `await` in expression trees.

---- 
@lillo42 commented on [Wed Dec 19 2018](https://github.com/dotnet/corefx/issues/34161)

I'm studying C# 8 and new we have a new interface call ``IAsyncEnumerable`` and I was think maybe it's a good ideia create a new interface call ``IAsyncQueryable`` to be possible using ``await foreach`` async with ORM like EF or NHibernarte:

```csharp

IAsyncQueryable query = database.Where(...);

await foreach(var a in query) {
...
}
```

I was thinking ``IAsyncQueryable`` could be:
```csharp
public interface IAsyncQueryable : IAsyncEnumerable
{
   Type ElementType { get; }
    Expression Expression { get; }
    IQueryProvider Provider { get; }
}


public interface IAsyncQueryable&lt;T&gt; : IAsyncQueryable, IAsyncEnumerable&lt;T&gt;
{

}
```

or

```csharp

public interface IAsyncQueryable : IQueryable, IAsyncEnumerable
{

}


public interface IAsyncQueryable&lt;T&gt; : IQueryable&lt;T&gt;, IAsyncQueryable,  IAsyncEnumerable&lt;T&gt;
{

}
```



---

@Suchiman commented on [Wed Dec 19 2018](https://github.com/dotnet/corefx/issues/34161#issuecomment-448587573)

Since IQueryable is about composing a query rather than constructing an execution pipeline, it would probably make more sense to follow the current Approach (used by EF) of adding an extension like this
```csharp
public static IAsyncEnumerable&lt;TSource&gt; AsAsyncEnumerable&lt;TSource&gt;(this IQueryable&lt;TSource&gt; source)
```

---

@quinmars commented on [Thu Dec 20 2018](https://github.com/dotnet/corefx/issues/34161#issuecomment-448949021)

The async enumerable implementation is developed in the dotnet/reactive repo. And there actually is already an `IAsyncQueryable` interface:

https://github.com/dotnet/reactive/blob/IxAsyncCSharp8/Ix.NET/Source/System.Linq.Async.Queryable/System/Linq/IAsyncQueryable.cs


---

@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455242991)

cc @stephentoub 

---

@stephentoub commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455244515)

Without language support for awaits in expression trees, I don't think there's much that can or should be done here.
cc: @cston, @jaredpar 

---

@jaredpar commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455251737)

I agree. There is currently no plans to invest in our expression tree support at this time.

---

@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455255954)

@jaredpar should we move this issue to your repo you may track it for the future if anything change? 

---

@jaredpar commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455257999)

Either way. This is one of those features that crosses our repositories so I'm fine with it being here or there. 

---

@tarekgh commented on [Thu Jan 17 2019](https://github.com/dotnet/corefx/issues/34161#issuecomment-455259014)

Thanks @jaredpar I'll move it because corefx can support it if the it is decided from your side to support it. 

</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32568</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow use of AdhocWorkspace within custom debug visualizer</Title>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis v. 2.10.0

**Steps to Reproduce**:

1. Create a visualizer that calls `new AdhocWorkspace` on the debuggee side:
```csharp
using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.DebuggerVisualizers;
using System;
using System.Diagnostics;
using System.IO;
using System.Windows;
using System.Windows.Controls;

[assembly: DebuggerVisualizer(typeof(_testVisualizer.TestVisualizer), typeof(_testVisualizer.TestVisualizerDataObjectSource), Target = typeof(System.Linq.Expressions.Expression), Description = "Test Visualizer")]

namespace _testVisualizer {
    public class TestVisualizer : DialogDebuggerVisualizer {
        protected override void Show(IDialogVisualizerService windowService, IVisualizerObjectProvider objectProvider) {
            var data = (TestVisualizerData)objectProvider.GetObject();
            var txt = new TextBlock();
            txt.SetBinding(TextBlock.TextProperty, "Status");
            var window = new Window {
                DataContext = data,
                Content = txt
            };
            window.ShowDialog();
        }
    }

    [Serializable]
    public class TestVisualizerData {
        public TestVisualizerData() { }
        public TestVisualizerData(System.Linq.Expressions.Expression expr) {
            var workspace = new AdhocWorkspace();
            Status = "Success";
        }
        public string Status { get; set; }
    }

    public class TestVisualizerDataObjectSource : VisualizerObjectSource {
        public override void GetData(object target, Stream outgoingData) {
            var expr = (System.Linq.Expressions.Expression)target;
            var data = new TestVisualizerData(expr);
            base.GetData(data, outgoingData);
        }
    }
}
```
2. Write code with the target type of the visualizer:
```csharp
using Microsoft.VisualStudio.DebuggerVisualizers;
using System;
using System.Linq.Expressions;

namespace _testVisualizer {
    class Program {
        [STAThread]
        static void Main(string[] args) {
            Expression&lt;Func&lt;bool&gt;&gt; expr = () =&gt; true;

            // this call forces Microsoft.VisualStudio.DebuggerVisualizers.dll to be loaded
            var visualizerHost = new VisualizerDevelopmentHost(null, typeof(TestVisualizer));

            Console.ReadKey(true);
        }
    }
}
```
3. Hover over the `expr` variable, click on the arrow next to the magnifying glass, and select "Test Visualizer"
![Choose the "Test Visualizer"](https://user-images.githubusercontent.com/312166/51334818-4ad7a900-1a89-11e9-8b26-86dda4fc9a40.png)

**Expected Behavior**:

Display the WPF window with data from the serialized visualizer data class:

![screenshot2](https://user-images.githubusercontent.com/312166/51336129-76a85e00-1a8c-11e9-847b-f9c16cf78c26.jpg)

**Actual Behavior**:
A window pops up with the following message:

&gt; Unable to perform function evaluation on the process being debugged.
&gt;
&gt; **Additional information**
&gt;
&gt; The function evaluation requires all threads to run.

![screenshot3](https://user-images.githubusercontent.com/312166/51336291-d69f0480-1a8c-11e9-8ef9-e3001e904db0.jpg)

**Additional information**
I know this is happening at the `AdhocWorkspace` constructor, because a `throw new NotImplementedException()` before the constructor shows a different message, but not after the constructor.

SO post requesting a workaround -- https://stackoverflow.com/questions/54171930/this-function-requires-all-threads-to-evaluate-after-new-adhocworkspace-wi</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32567</IssueID>
    <RepoID>1</RepoID>
    <Title>Use DoNotAllowVarAnnotation.Kind instead of DoNotAllowVarAnnotation.Annotation</Title>
    <Description>I would propose to use `DoNotAllowVarAnnotation.Kind` instead of `DoNoAllowVarAnnotation.Annotation`.

This would allow 3rd party developers to create their own `DoNotAllowVarAnnotation`. Currently, if `csharp_style_var_for_built_in_types` is set to `true` any type with `Simplifier.Annotation` will be simplified to `var` even if a developer intends to keep explicit type.

This change would be consistent with `NavigationAnnotation` which is also `internal` but uses `Kind` property and thus allow anybody to create their own `NavigationAnnotation`.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32566</IssueID>
    <RepoID>1</RepoID>
    <Title>[master] Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19066.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19067.6

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19068.4

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19069.2

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19072.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19080.6

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19081.3

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19101.16

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19102.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19103.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19104.18

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19105.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19106.4

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19107.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19108.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19108.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19108.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19108.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19112.3

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19113.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.5

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19126.6

</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32565</IssueID>
    <RepoID>1</RepoID>
    <Title>Update dependencies from dotnet/arcade</Title>
    <Description>This pull request updates the following dependencies

Updates from https://github.com/dotnet/arcade

- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19066.1

</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32564</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should allow top level implicit nullability conversion from 'out' method parameters to delegate 'out' parameters  in method group conversions</Title>
    <Description>Similar to https://github.com/dotnet/roslyn/issues/32563

**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

```cs
#nullable enable
delegate void MyDelegate(out string? s);
class C
{
  void Test()
  {
    MyDelegate md = Method; // Warning CS8622
  }

  extern void Method(out string s);
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgU5yBzCeCgAQBYKBZAJ4ARFnHbwAFAHt8MbgEYADAH4KUAJQBuRlwBMFAMKMA3owrc+AFTixJG8xTMMLFoaLYdKYFBQC8AnAwABbSKFoUAPSRFADqEAi4AJa4rEYAygAcAGx6eo4AvoyOcAAe8ImWgSFhMnKKSurajAVAA=

**Expected Behavior**:
No warnings. `Method` is only allowed to assign non-nullable values to the delegate parameter which is safe. `Method` cannot receive any null values from the delegates arguments since `out` parameters cannot be read until reassigned.

**Actual Behavior**:
`warning CS8622: Nullability of reference types in type of parameter 's' of 'void C.Method(out string s)' doesn't match the target delegate 'MyDelegate'.`
</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32563</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn should allow top level implicit nullability conversion from 'in' delegate parameters to 'in' method parameters in method group conversions</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code snippets
```cs
#nullable enable
delegate void MyDelegate(in string s);
class C
{
  void Test()
  {
    MyDelegate md = Method; // Warning CS8622
  }

  extern void Method(in string? s);
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgU5yBzCeCgAQBYKBZAJ4ARFnHbwAFAEtc3AIwAGClACUAbkZcATBQDCjAN6MK3PgBU4sSapMVjDU6aGi2HSmBQUAvALgwACwB7FHUKAHpwigB1CARcWVZ9AGUADgA2bW07AF9GOzgAD3h4sz9AkJk5LiUAfhUNRhygA

**Expected Behavior**:
No warnings. An `in` parameter cannot be assigned within the method. Passing non-nullable values from delegate arguments into the method parameter which allows nulls is also safe.

**Actual Behavior**:
`warning CS8622: Nullability of reference types in type of parameter 's' of 'void C.Method(out string s)' doesn't match the target delegate 'MyDelegate'.`</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>24/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32562</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32561</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps </Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32560</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32559</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32558</IssueID>
    <RepoID>1</RepoID>
    <Title>Upgrade ICSharpCode.Decompiler to 4.0.0.4521</Title>
    <Description>For more information about the changes in this release,
see https://github.com/icsharpcode/ILSpy/releases/tag/v4.0.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32557</IssueID>
    <RepoID>1</RepoID>
    <Title>fix of the issue #24991</Title>
    <Description>Issue #24991 fix.
Avoid duplicates being added to the reference dictionary in SolutionState.CompilationTracker.cs

I'd like to discuss if proposed solution is acceptable. 
The other option is to throw exception with the meaningful error. In this case I think the code can continue to work without trouble, so its not neccessary to throw here. I may be wrong.

Also, the class is private and I can't really add unit tests to it easily. Any suggestions here will be appreciated.

tagging @DustinCampbell here as the one who was involved in the discussion of the issue.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32556</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature Request: Expose ability to query Roslyn about current solution in Visual Studio</Title>
    <Description>This issue is based on a discussion Gitter, starting at https://gitter.im/dotnet/csharplang?at=5c3fa0f820b78635b634d230

It is often the case that developers would like to gain insight into some specific metric about the code base they're working on.

Examples mentioned were:

- Ratio of structs to classes
- Ratio of static to instance methods

Other metrics might be

- Number of classes/interfaces/structs etc. in a project etc.
- Usages of some specific set of types/methods/ etc.
- What is the greatest number of values an Enum has in the solution?

I have often been interested in similar such metrics, but have not found it worth the effort to create a ConsoleApp to do.

The thing that underpins all of these, is that they are relatively trivial to calculate given access to Roslyn, but rarely important enough to go to the effort of writing a ConsoleApp for. If they were able to be calculated directly from the solution in a couple of lines of code though, I think it likely that people would do so.

Intellisense uses Roslyn behind the scenes, and so much of this information should be available reasonably performantly in visual studio, if there were some way of accessing Roslyn from VS directly.

The C# Interactive window could be one means of exposing a subset of Roslyn APIs so that they could be queried from Visual Studio.

Access to SyntaxTree, SemanticModel, Compilation, Document, Project, and Solution objects would provide for a very reasonable Minimal Viable Product, where all would be contextually determined by the 'active window' or 'active project', or by the open solution.

It would also hopefully be possible to write extension packages on top of those APIs, which might make querying them more fluent via a Linq like set of APIs. This should currently be possible via Nuget, but it would help if the experience in the C# Interactive window surrounding Nuget could be improved a little, as I believe currently it's necessary to download the nuget package and reference the dll directly.

Whilst initially this feature could be readonly, to gain real power it ought to be able to alter the documents in the solution. This would allow Roslyn to be used as a find and replace on steroids, and would hopefully lessen the uses of horrible regexes when doing any reasonably complex Find And Replace.

Consider for example this script I hacked together to convert Fixie tests to Nunit: https://github.com/YairHalberstadt/FixieToNunit/blob/master/Source/Program.cs.

Simple as it is, it took many iterations to get right, and each iteration involved passing in the path to a file, project or solution, running the Console App, checking the changes in the VS Diff window, reseting all changes, and iterating. Being able to do this all without leaving Visual Studio, would make the whole process far smoother. 

Does this sound like a reasonable set of ideas?</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32555</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge 'dotnet/master' into DefaultInterfaceImplementation</Title>
    <Description>
    </Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32553</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle tuple conversion on tuple with suppression</Title>
    <Description>In order to segment my current work on suppressions, I'm going to split the tuple scenarios off.

Also, tuple equality including `default` or `null` with suppressions.
Also, deconstructions.

```C#
        [Fact, WorkItem(31370, "https://github.com/dotnet/roslyn/issues/31370")]
        public void SuppressNullableWarning_Deconstruction()
        {
            var source =
@"class C
{
    void M(C&lt;string?&gt; c)
    {
        (string d1, (C&lt;string&gt; d2, string d3)) = (null, (c, null));
        (string e1, (C&lt;string&gt; e2, string e3)) = (null, (c, null))!;
        (string f1, (C&lt;string&gt; f2, string f3)) = (null, (c, null)!);
    }
}";
            var comp = CreateCompilation(source, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics(
                );
            // TODO2 verify diagnostics, fix crash
            CompileAndVerify(comp);
            // TODO2: verify semantic model
        }

        [Fact, WorkItem(31370, "https://github.com/dotnet/roslyn/issues/31370")]
        public void SuppressNullableWarning_Tuple()
        {
            // TODO2 crash
            var source =
@"class C&lt;T&gt;
{
    static void M(C&lt;string?&gt; x)
    {
        (string, C&lt;string&gt;) tuple = (null, x);
        _ = tuple;
        (string, C&lt;string&gt;) tuple2 = (null, x)!;
        _ = tuple2;
        (string, C&lt;string&gt;) tuple3 = (null!, x!);
        _ = tuple3;
    }
}";
            var comp = CreateCompilation(source, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics(
                // (5,37): warning CS8619: Nullability of reference types in value of type '(string?, C&lt;string?&gt; x)' doesn't match target type '(string, C&lt;string&gt;)'.
                //         (string, C&lt;string&gt;) tuple = (null, x);
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "(null, x)").WithArguments("(string?, C&lt;string?&gt; x)", "(string, C&lt;string&gt;)").WithLocation(5, 37)
                );
            CompileAndVerify(comp);
        }

        [Fact, WorkItem(31370, "https://github.com/dotnet/roslyn/issues/31370")]
        public void SuppressNullableWarning_TupleEquality()
        {
            // TODO2 unexpected diagnostic
            var source =
@"class C&lt;T&gt;
{
    static void M((string, C&lt;string&gt;) tuple, C&lt;string?&gt; x)
    {
        _ = tuple == (null, x);
        _ = tuple == (null, x)!;
        _ = (1, tuple) == (1, (null, x)!);
    }
}";
            var comp = CreateCompilation(source, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics(
                // (6,13): error CS0019: Operator '==' cannot be applied to operands of type '(string, C&lt;string&gt;)' and '(&lt;null&gt;, C&lt;string?&gt;)'
                //         _ = tuple == (null, x)!;
                Diagnostic(ErrorCode.ERR_BadBinaryOps, "tuple == (null, x)!").WithArguments("==", "(string, C&lt;string&gt;)", "(&lt;null&gt;, C&lt;string?&gt;)").WithLocation(6, 13)
                );
            CompileAndVerify(comp);
            // TODO2: verify semantic model
        }
```</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32552</IssueID>
    <RepoID>1</RepoID>
    <Title>workaround for concurrent event causing VS to crash</Title>
    <Description>basically, if RegisteryText happens and then UnregisterText happens in perfect timing, RegisterText got slightly delayed since it is async event, and UnregisterText happens at the same time since it is a synchronous event, and they happens in 2 different threads, boom, we get NRE.

this is a workaround for 16.0.preview 2.

....

**Customer scenario**

a user is using VS, opening and closing files and navigating files in VS and boom VS crashes.

**Bugs this fixes:**

https://devdiv.visualstudio.com/DevDiv/_workitems/edit/744145

**Workarounds, if any**

no workaround

**Risk**

I believe the risk is low, but it has a theoretical deadlock possibility. but in practice, that would require a third party extension that does something really bad for it to happen

**Performance impact**

probably none

**Is this a regression from a previous update?**

No

**Root cause analysis:**

WorkspaceRegistration.WorkspaceChanged event could have raised on multiple threads concurrently causing event listeners to mess up their states. this change makes sure we never raise the event concurrently.

we have https://github.com/dotnet/roslyn/issues/32551 to fix the caller side in the post preview.

**How was the bug found?**

Watson</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32551</IssueID>
    <RepoID>1</RepoID>
    <Title>make sure workspace related events are serialized</Title>
    <Description>currently, we have async event queue per workspace for workspace events. and we have WorkspaceRegistration.WorkspaceChanged event.

our workspace events within the same workspace, we make sure all events are serialized. we guarantee the ordering of all events as they happens.

it gets interesting when a file is opened in the editor, we have this dance where the file is first added to misc workspace and then moved to another workspace such as VSWorkspace. same goes for when the file is closed.

it is interesting since a file is now interacting with 2 workspaces. currently, we don't have a way to preserve ordering of events between 2 different workspaces. when a file is moved between 2 workspaces, one might see the file added to 1 workspace before it is removed from the other workspace even though the actual event happened in reverse order since events are happening in 2 different async queues.

furthermore, WorkspaceRegistration.WorkspaceChanged events use the async queue of a workspace to raise "RegisterText", but use the synchronous event for "UnregisterText". also, since async queue raise event on UI thread but synchronous event happen on the thread it is called, we have a chance where the event raised concurrently.

we don't know what is the right fix for it yet. but opening the issue to make sure we figure out what to do after preview.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32550</IssueID>
    <RepoID>1</RepoID>
    <Title>add more telemetry to track feature performances</Title>
    <Description>adding performance tracking telemetry on "go to implementation" and "solution explorer/progression"
</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32549</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve naming style diagnostics when identifier begins with common prefixes</Title>
    <Description>Fixes #18409 
Fixes #26588</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32548</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow skipping tests and opt data in official builds</Title>
    <Description>Infrastructure only change.

When queuing an official build it is now possible to set the following variables in the UI:
- `SkipTests` to `true` to skip running tests,
- `SkipApplyOptimizationData` to `true` to skip merging optimization data into binaries.
   The build still triggers training release pipeline and thus produces new set of optimization data.
   This is useful when the currently available data are bad and cause the build to fail.
- `SignType` to `test` 
   Test sign artifacts instead of the default real signing.

</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32547</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense cannot be shown when the caret is between two dots</Title>
    <Description>In VS 2019 Preview 1.1 (and I think 1), when you backspace and retype a dot but there's another dot ahead of the caret, VS doesn't show intellisense anymore. Alt+Right also stops working while the caret is between the two dots.

Sometimes I see a very brief flash of a tiny light-colored square over the editor when intellisense fails to show, like a window opening and closing immediately.

VS2019:
![vs2019](https://user-images.githubusercontent.com/8040367/51287093-e6064b00-19c3-11e9-9817-48f0fd520e1e.gif)


VS2017:
![vs2017](https://user-images.githubusercontent.com/8040367/51286808-907d6e80-19c2-11e9-9d6c-2c1db8f6f621.gif)

I'm typing nonsense for demo purposes in the file I had open, but the same thing happens everywhere.

I've tripped over it several times a day every day I've been using the preview. I assume ranges had something to do with this, and I tried to reconcile myself to it for the past month on that basis, but I just can't deal with it. I hope this change wasn't intentional. This is a common thing for me to do when refactoring, fixing changed names after things move, etc.
</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32546</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32545</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32544</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32543</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32542</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32541</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>17/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32540</IssueID>
    <RepoID>1</RepoID>
    <Title>A number of test scenarios utilizing Default Interface Implementations across assembly boundaries are broken due to a bug in CoreCLR </Title>
    <Description>Here is a link to the CoreCLR issue https://github.com/dotnet/coreclr/issues/22021.

Affected tests:
```
Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.DefaultInterfaceImplementationTests.EventImplementationInDerived_01
Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.DefaultInterfaceImplementationTests.EventImplementationInDerived_11
Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.DefaultInterfaceImplementationTests.IndexerImplementationInDerived_01
Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.DefaultInterfaceImplementationTests.IndexerImplementationInDerived_11
Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.DefaultInterfaceImplementationTests.MethodImplementationInDerived_01
Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.DefaultInterfaceImplementationTests.MethodImplementationInDerived_11
Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.DefaultInterfaceImplementationTests.PropertyImplementationInDerived_01
Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.DefaultInterfaceImplementationTests.PropertyImplementationInDerived_11
```

The relevant portions of the unit-tests are temporarily disabled and should be re-enabled once the underlying issue is fixed in CoreCLR.
</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32539</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability constraint warnings are not reported for method signatures</Title>
    <Description>No warnings reported for `C&lt;object?&gt;` in method signatures:
```C#
class C&lt;T&gt; where T : class
{
}

class Program
{
    static C&lt;object?&gt; F1() =&gt; throw null;

    static void F2(C&lt;object?&gt; c) { }
}
```</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32538</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for splitting &amp; merging "consecutive" conditional expressions</Title>
    <Description>Followup to #30640

Please allow me to invoke the refactoing on code like this
```c#
        return
            a || b ? "foo" :
            c ? "bar" :
            "foobar";
```
to convert to
```c#
        return
            a ? "foo" :
            b ? "foo" :
            c ? "bar" :
            "foobar";
```
and vice versa.

This might seem like it would make the refactorings unnecessarily more complicated but I suspect that won't be the case thanks to the way the actual if-statement manipulation is abstracted into `IIfLikeStatementGenerator`. I expect this to be fairly easy or at worst take about as much work as #32535 and possibly only require changes in `IIfLikeStatementGenerator` itself.

cc @jasonmalinowski </Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32537</IssueID>
    <RepoID>1</RepoID>
    <Title>IntroduceVariableCodeRefactoringProvider ArgumentOutOfRangeException</Title>
    <Description>Type a space after the plus symbol then double click the mouse to cause ```IntroduceVariableCodeRefactoringProvider ArgumentOutOfRangeException : 'end' must not be less than 'start'.```

```csharp
namespace IntroduceVariableCodeRefactoringProvider_ArgumentOutOfRangeException
{
    public class Class
    {
        public string Test =&gt; "123" +
    }
}
```

I'm using Visual Studio 15.9.5.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32536</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix crash with unmanaged constraint and recursive type argument</Title>
    <Description>Fixes #31439

This turns out to not be valid code right now, but it's easy to get mixed up about that when we're far along the way toward making it valid in 8.0.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32535</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for splitting/merging VB single-line if statements</Title>
    <Description>Followup to #30640 

Some notes:
&gt; &gt; Keep in mind that `If a Then If b Then Console.WriteLine(a AndAlso b) Else Console.WriteLine() Else Console.WriteLine()` is (unfortunately) a valid statement in VB. 
&gt;
&gt; I know. I just spent another hour trying to handle single-line ifs but gave up after realizing that they have the same dangling else problem as C# does, but there's no way to resolve it like in C#.
&gt;
&gt; &gt; I'm not sure we want to bring all the functionality to VB single line ifs,
&gt; 
&gt; I agree. I think the best behavior when encountering a single-line if would be to just convert it to multi-line. I don't think splitting single-line ifs into nested single-line ifs or into single-line else ifs is a good idea.

cc @jasonmalinowski </Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32534</IssueID>
    <RepoID>1</RepoID>
    <Title>Cant see definitions</Title>
    <Description>I get the error cannot navigate to the symbol under the caret.

```csharp
public class T
{
  new // &lt;-- caret is on the 'new' keyword
  void Method() { }
}
```

1. Place the caret on the `new` keyword
2. Press &lt;kbd&gt;F12&lt;/kbd&gt;

The following message is shown in a pop-up dialog:

&gt; Cannot navigate to the symbol under the caret.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/346960/cant-see-definitions.html
VSTS ticketId: 694698_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32533</IssueID>
    <RepoID>1</RepoID>
    <Title>GenerateMethodUsingTypeConstraint_2BaseTypeConstraints_Interfaces Test Failure</Title>
    <Description>Saw this in #32525 - [Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=74067&amp;view=ms.vss-test-web.test-result-details) Windows Desktop Debug Test64 Attempt 1

```
Error message
System.AggregateException : One or more errors occurred.\r\n---- System.InvalidOperationException : WaitAndGetResult cannot be called from a thread pool thread.
Stack trace
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)
   at System.Threading.Tasks.Task.Wait()
   at Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AbstractCrossLanguageUserDiagnosticTest.VB$StateMachine_10_GetDiagnosticAndFixesAsync.MoveNext() in /_/src/EditorFeatures/Test2/Diagnostics/AbstractCrossLanguageUserDiagnosticTest.vb:line 133
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AbstractCrossLanguageUserDiagnosticTest.VB$StateMachine_8_GetDiagnosticAndFixAsync.MoveNext() in /_/src/EditorFeatures/Test2/Diagnostics/AbstractCrossLanguageUserDiagnosticTest.vb:line 108
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.AbstractCrossLanguageUserDiagnosticTest.VB$StateMachine_6_TestAsync.MoveNext() in /_/src/EditorFeatures/Test2/Diagnostics/AbstractCrossLanguageUserDiagnosticTest.vb:line 55
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.GenerateMethod.GenerateMethodCrossLanguageTests.VB$StateMachine_16_GenerateMethodUsingTypeConstraint_2BaseTypeConstraints_Interfaces.MoveNext() in /_/src/EditorFeatures/Test2/Diagnostics/GenerateFromUsage/GenerateMethodCrossLanguageTests.vb:line 659
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
----- Inner Stack Trace -----
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult[T](Task`1 task, CancellationToken cancellationToken) in /_/src/Workspaces/Core/Portable/Utilities/TaskExtensions.cs:line 74
   at Microsoft.CodeAnalysis.Shared.Extensions.ITypeSymbolExtensions.ReplaceTypeParameterBasedOnTypeConstraintVisitor.&lt;&gt;c__DisplayClass10_0.&lt;VisitTypeParameter&gt;b__1(ITypeSymbol ct) in /_/src/Workspaces/Core/Portable/Shared/Extensions/ITypeSymbolExtensions.ReplaceTypeParameterBasedOnTypeConstraintVisitor.cs:line 102
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at Microsoft.CodeAnalysis.Shared.Extensions.ITypeSymbolExtensions.ReplaceTypeParameterBasedOnTypeConstraintVisitor.VisitTypeParameter(ITypeParameterSymbol symbol) in /_/src/Workspaces/Core/Portable/Shared/Extensions/ITypeSymbolExtensions.ReplaceTypeParameterBasedOnTypeConstraintVisitor.cs:line 99
```</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32532</IssueID>
    <RepoID>1</RepoID>
    <Title>VB and C# ignore Conditional attribute on property setters</Title>
    <Description>**Version Used**: VS 16.0 Preview 1.1

**Steps to Reproduce**:

1. Create a VB project (I named it "Basic") and copy the first bit of code into a source file.
2. Create a C# project (I named it "Sharp") that references the VB project and copy the second bit of code into a source file.
3. Build the solution.
4. Open the DLLs with ILDASM and look at `Sharp.C.M` and `Basic.C.M` respectively.

```vbnet
Public Class C

    Public WriteOnly Property P As Integer
        &lt;Conditional("DO_NOT_DEFINE_THIS")&gt;
        Set(value As Integer)
        End Set
    End Property

    &lt;Conditional("DO_NOT_DEFINE_THIS")&gt;
    Public Sub ConditionalM()
    End Sub

    Public Sub M()
        Dim c As New C
        c.P = 32
        c.ConditionalM()
    End Sub

End Class
```

```csharp
namespace Sharp
{
    public class C
    {
        public void M()
        {
            var c = new Basic.C();
            c.P = 32;
            c.ConditionalM();
        }
    }
}
```

**Expected Behavior**:

The call to the `set_P` is omitted (similar to the `ConditionalM` call), because the setter method is marked with a Conditional attribute whose condition is not met.

```
IL_0000:  nop
IL_0001:  newobj     instance void [Basic]Basic.C::.ctor()
IL_0006:  stloc.0
IL_0007:  ret
```

**Actual Behavior**:

The call to `set_P` is emitted into IL, but not that to `ConditionalM`, despite both of them having the same `Conditional` attribute.

```
IL_0000:  nop
IL_0001:  newobj     instance void [Basic]Basic.C::.ctor()
IL_0006:  stloc.0
IL_0007:  ldloc.0
IL_0008:  ldc.i4.s   32
IL_000a:  callvirt   instance void [Basic]Basic.C::set_P(int32)
IL_000f:  nop
IL_0010:  ret
```
</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32531</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nullability within `Nullable&lt;T&gt;.Value`</Title>
    <Description>```C#
struct S&lt;T&gt;
{
    internal T F;
}

class Program
{
    static void F()
    {
        S&lt;object&gt;? x = new S&lt;object&gt;();
        x.Value.F.ToString(); // maybe null

        S&lt;object?&gt;? y = new S&lt;object?&gt;() { F = 1 };
        y.Value.F.ToString(); // ok
    }
}
```

Expected: Warning that `x.Value.F` may be null; no warning for `y.Value.F`.

Actual: No warning for `x.Value.F`; warning for `y.Value.F`.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32530</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove workaround for Navigate To running on old versions of Visual Studio</Title>
    <Description>Our minimum required version is 15.9, so this workaround isn't necessary anymore.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32529</IssueID>
    <RepoID>1</RepoID>
    <Title>UnsafeTests.FixedBufferUsageDifferentAssemblies Test Failure</Title>
    <Description>Saw this in #32517 - [Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=74099&amp;view=ms.vss-test-web.test-result-details) Attempt 1

```
Error message
Roslyn.Test.Utilities.ExecutionException : \r\nExecution failed for assembly ''.\r\nExpected: TrueFalse\r\nActual: TrueTrue\r\n

Stack trace
   at Roslyn.Test.Utilities.Desktop.DesktopRuntimeEnvironment.Execute(String moduleName, String[] args, String expectedOutput) in /_/src/Test/Utilities/Portable/Platform/Desktop/DesktopRuntimeEnvironment.cs:line 245
   at Microsoft.CodeAnalysis.Test.Utilities.CompilationVerifier.Emit(String expectedOutput, Nullable`1 expectedReturnCode, String[] args, IEnumerable`1 manifestResources, EmitOptions emitOptions, Verification peVerify, SignatureDescription[] expectedSignatures) in /_/src/Test/Utilities/Portable/CompilationVerifier.cs:line 169
   at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.Emit(Compilation compilation, IEnumerable`1 dependencies, IEnumerable`1 manifestResources, SignatureDescription[] expectedSignatures, String expectedOutput, Nullable`1 expectedReturnCode, String[] args, Action`1 assemblyValidator, Action`1 symbolValidator, EmitOptions emitOptions, Verification verify) in /_/src/Test/Utilities/Portable/CommonTestBase.cs:line 154
   at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompileAndVerifyCommon(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 assemblyValidator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Nullable`1 expectedReturnCode, String[] args, EmitOptions emitOptions, Verification verify) in /_/src/Test/Utilities/Portable/CommonTestBase.cs:line 68
   at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBase.CompileAndVerify(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 validator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Nullable`1 expectedReturnCode, String[] args, EmitOptions emitOptions, Verification verify) in /_/src/Compilers/Test/Utilities/CSharp/CSharpTestBase.cs:line 679
   at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBase.CompileAndVerify(CSharpTestSource source, IEnumerable`1 references, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 assemblyValidator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Nullable`1 expectedReturnCode, String[] args, CSharpCompilationOptions options, CSharpParseOptions parseOptions, EmitOptions emitOptions, TargetFramework targetFramework, Verification verify) in /_/src/Compilers/Test/Utilities/CSharp/CSharpTestBase.cs:line 638
   at Microsoft.CodeAnalysis.CSharp.UnitTests.UnsafeTests.FixedBufferUsageDifferentAssemblies() in /_/src/Compilers/CSharp/Test/Semantic/Semantics/UnsafeTests.cs:line 8615
```</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32528</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32527</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32526</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to dev16.0-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps
git reset --hard upstream/dev16.0-preview2-vs-deps
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32525</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32524</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32523</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix bug with 'add parameter to constructor'</Title>
    <Description>Related bug: [28775](https://github.com/dotnet/roslyn/issues/28775)

Problem:
Add parameter to constructor will lead
```c#
class C
{
    int i;
    int k;
    int j;

    public C(int i, int j)
    {
        this.i = i;
        this.j = j;
    }
}
```
to
```c#
class C
{
    int i;
    int k;
    int j;

    public C(int i, int j, int j)
    {
        this.i = i;
        this.j = j;
        this.j = j;
    }
}
```
Reason:
The currently 'add parameter to constructor' compare parameters by their types. So it leeds to the problem the issue mentioned if `int i, int j, int k` are not in order. I fix this by comparing parameters by their names.
</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32522</IssueID>
    <RepoID>1</RepoID>
    <Title>'Remove unused member' quick fix removes used members with dynamic parameter</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50

**Steps to Reproduce**:
```C#
static void Main()
{
    dynamic d = null;
    Test(d);
}

static void Test(dynamic d) { }
```

**Expected Behavior**: The `Test` method to be treated as used by the code.

**Actual Behavior**: The 'Remove unused member' quick fix appears, suggesting to remove the `Test` method. That results in a compile error that `Test` does not exist.
</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32521</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32520</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32519</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32518</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32517</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix bad merge conflict resolution in azure-pipelines-official</Title>
    <Description>Fix the bad merge by using the master version of the yml file.

/cc @jaredpar </Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32516</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32515</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32514</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to dev16.0-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps
git reset --hard upstream/dev16.0-preview2-vs-deps
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32513</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32512</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32511</IssueID>
    <RepoID>1</RepoID>
    <Title>Go To Member not working</Title>
    <Description>When using the Go To Member filter &amp;quot;m&amp;quot; no members are found.
Members show up when searching for symbols, or &amp;quot;all&amp;quot; prefixing with the type name.

Examples:
&amp;quot;m SomeMethod&amp;quot; gives no results.
&amp;quot;SomeMethod&amp;quot; gives the method, but also a lot of non-relevant results
&amp;quot;# SomeMethod&amp;quot; gives the method, but also a lot of non-relevant results
&amp;quot;SomeType.SomeMethod&amp;quot; gives the method, but also a lot of non-relevant results

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/401830/go-to-member-not-working.html
VSTS ticketId: 743097_
_These are the original issue comments:_

Ladislav Burkovsky on 12/7/2018, 08:03 AM (39 days ago): same here
Rock Li [MSFT] on 12/11/2018, 08:51 PM (35 days ago): &lt;p&gt;Thanks for taking the time to report this issue to us. We’ve created a bug for this issue as internal tracking. The status on this Developer Community item will be updated as that bug is resolved. Thanks again for your feedback.&amp;nbsp;&lt;/p&gt;
Jonathan Sheely on 12/12/2018, 09:16 AM (34 days ago): +1 Still broken in Preview 1
Aaron on 1/4/2019, 10:53 AM (11 days ago): &lt;p&gt;Still broken in Preview 1.1&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32510</IssueID>
    <RepoID>1</RepoID>
    <Title>Null Reference in GenerateDeconstructMethodCodeFixProvider</Title>
    <Description>VS 28515.53

Stack:
```
System.NullReferenceException : Object reference not set to an instance of an object.
   at async Microsoft.CodeAnalysis.CSharp.CodeFixes.GenerateDeconstructMethod.GenerateDeconstructMethodCodeFixProvider.RegisterCodeFixesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

I've been update to create a small repro here, as my initial tests in a simple consoleapp haven't shown the same issue. The code I typed was this:
```C#
                var topLevelNullabilityMap = PooledDictionary&lt;BoundExpression, TypeSymbolWithAnnotations&gt;.GetInstance();
                foreach ((key, value) in topLevelNullabilityMap) // Yes, invalid variable declarator syntax.
                {

                }
```

I've put a dump here: "\\mlangfs1\public\frsilb\dumps\32510\devenv.dmp"
Probably related to https://github.com/dotnet/roslyn/issues/29718, or at least a similar underlying issue, as I hit both these at the same time.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32509</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable ngen for System.Numerics.Vectors</Title>
    <Description>
    </Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32508</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix regression where renaming a CodeElement didn't update node keys</Title>
    <Description>In a larger refactoring I had commented some code out in NodeKeyValidation.AddProject. This meant that when we did a refactor rename of a CodeElement, we wouldn't end up updating node keys for all the existing CodeElements out there. The expectation is CodeElements are still valid. Uncommenting the code and bringing it back inline with the current design makes everything work again.

Fixes #31735.

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

**Customer scenario**

Change the name of a control in a Win Forms project. Once you try to save it, you get an error saying your file can't be saved. At this point, all you can do is close the file without saving and try again.

**Bugs this fixes:** 

GitHub Bug: #31735
Feedback link: https://developercommunity.visualstudio.com/content/problem/400702/cant-save-cs-file-after-changing-the-name-attribut.html

**Workarounds, if any**

You'd have to perform the rename manually in the codebehind of the file. This isn't an obvious workaround (the error the customer gives does not give any hint which operation caused you to get into this state), and is also fairly risky since we normally don't want customers tinkering in the codebehind.

**Risk**

Low: this is fixing one particular method which is only used in the rename path for CodeModel elements.

**Performance impact**

None.

**Is this a regression from a previous update?**

Yes. This was broken in Dev16.0 Preview 1.

**Root cause analysis:**

This was broken as a part of a very large refactoring; some code wasn't fixed up correctly and this slipped through code review. There weren't any unit tests covering this, and any integration tests must have since been disabled. Unit tests have now been written to cover this, which were confirmed to correctly catch the bug before the fix was checked in.

**How was the bug found?**

Many customer reports: https://developercommunity.visualstudio.com/content/problem/400702/cant-save-cs-file-after-changing-the-name-attribut.html

&lt;/details&gt;</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32507</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32506</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32505</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32504</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>16/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32503</IssueID>
    <RepoID>1</RepoID>
    <Title>inline declaration breaks nullable check</Title>
    <Description>```c#
class A { }
class B : A { }

A Foo()
{
	var s = new A();
	if (s is B b) {}
	return s; // Possible null reference return.
}
```

the weird thing is that if you change the `if` line to `if (s is B) {}` then the warning goes away.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32502</IssueID>
    <RepoID>1</RepoID>
    <Title>"Invalid public key" error with newer versions of csc</Title>
    <Description>**Version Used**: 
git 9e501093bc44a15361704aa057ebbdaf477fa9a2

**Steps to Reproduce**:

1. Build csc
2. Use roslyn csc and/or compiler server to build mono

**Expected Behavior**:
Building for all assemblies should work

**Actual Behavior**:
Building fails because csc can no longer load the signing key for nunit

```
--- PID=111075 TID=667 Ticks=232118991: ****Running C# compiler...
--- PID=111075 TID=667 Ticks=232119027: ****C# Compilation complete.
****Return code: 1
****Output:
error CS7027: Error signing output with public key from file '/home/kate/Projects/mono/mcs/nunit24/nunit.snk' -- Invalid public key.
error CS8102: Public signing was specified and requires a public key, but no public key was specified.
--- PID=111075 TID=667 Ticks=232119027: Client 349: End compilation
```

Visual studio &amp; windows msbuild already have had this problem for some time, when I was updating the .csproj generator for mono I had to disable signing. It appears that command-line csc now has this problem as well. It was working for me a few weeks ago on an older rev of roslyn, though it's possible the signing just wasn't happening for some reason until now.

The key can be found here: https://github.com/mono/mono/blob/master/mcs/nunit24/nunit.snk

We currently keep a specific version of roslyn in-tree to use for mono builds, so this only shows up if you manually use a new version (I'm working on updating us to a new version &amp; adding compiler server support)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32501</IssueID>
    <RepoID>1</RepoID>
    <Title>Track nested slot states in assignments and compound assignments</Title>
    <Description>```C#
class C
{
    object? F = null;
    static void M(C c1, C c2)
    {
        if (c1.F == null) return;
        if (c2.F == null) return;

        (c1 = c2).F.ToString(); // Currently a null reference warning
        (c1 ??= c2).F.ToString(); // Currently a null reference warning
    }
}

```

We should support these scenarios. `VisitAssignmentOperator` and `VisitNullCoalescingAssignmentOperator` should be copying state.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32500</IssueID>
    <RepoID>1</RepoID>
    <Title>Issue 27925 - Squiggle first line / entire parenthetical expression in remove unnecessary parentheses diagnostic</Title>
    <Description>See https://github.com/dotnet/roslyn/issues/27925

When a warning / error to remove unnecessary parentheses is created it will currently squiggle the first parentheses character and fade the open and closing parentheses.  This PR changes the functionality to squiggle (but not fade) the entire expression.  If the expression goes beyond one line, only the first line is squiggled.  The open and close parentheses remain faded.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32499</IssueID>
    <RepoID>1</RepoID>
    <Title>Roslyn doesn't verify nullable reference types in a signature of a delegate constructor argument</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code
```cs
#nullable enable
delegate void MyDelegate(C? c);
class C
{
  public static void Main()
  {
    var action = new MyDelegate(M);
    action(null);
  }

  static void M(C c)
  {
    c.ToString();
  }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxAgrgOyQExAagB8BiTdAG3ImHLgAI5NraBYAKBzloHMJ46AAgBY6AWQCeAES5xe8ABQBhAPx0AxgEoA3OwEAmOovYBvdnUEBmQQEYAbIJGiIAS0zyNZuqbbnzANwgEOgg1GGcAe0w6AF46TDgAdzEpGTk4eVFtT3MQsMj5MkosnzoAX3ZPATsHMSV1DxLvX3UAOgAVcIBlGARXbncdEvK2UqA=

**Expected Behavior**:
`warning CS8622: Nullability of reference types in type of parameter 'c' of 'void C.M(C c)' doesn't match the target delegate 'MyDelegate'.`
Just as it would have been reported for `MyDelegate action = M;`

**Actual Behavior**:
No warnings. The program crashes at runtime with a `NullReferenceException`
</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32498</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable reference type inspections should not make assumptions about custom equality operators</Title>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code
```cs
#nullable enable
class C
{
  public static bool operator ==(C? c1, C? c2) =&gt; true;
  public static bool operator !=(C? c1, C? c2) =&gt; true;

  public static void Main()
  {
    M(null);
  }

  static void M(C? c)
  {
    if (c != null)
    {
      c.ToString();
    }
  }
}
```
https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGFGBvRiipgMz8AjADYKwAPaTCFSQAdEEGJIQUAvOoAU7APwUAxsKQd9BlgEoNAPgowE+OAG5e/IUzETpshUpVqAQm09Q2NTQ0sbOwdnRldBEXEmABYKAFkIAEtcLQtXHgY+PjStAmILF0KKAF84qo8k1JKQgzyqgqKKTIAzCi0DCiCKMsI2zo7OwwA6ABVJAGV7bIBzXMrO2qrN6qA==

**Expected Behavior**:
`Possible dereference of a null reference` for `c.ToString();`

**Actual Behavior**:
No warnings for nullable reference types. The program crashes at runtime with a `NullReferenceException`</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32497</IssueID>
    <RepoID>1</RepoID>
    <Title>report NFW instead of crash when creating formatting rules if encoutered unexpected state</Title>
    <Description>Fixing internal bug [753909](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/753909).

I couldn't figure out a repro, so opted for NFW. Tagging @heejaechang @jasonmalinowski, who's more knowledgeable in this area (editor and Razor) and might know how to trigger the crash.

FYI @dotnet/roslyn-ide </Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32496</IssueID>
    <RepoID>1</RepoID>
    <Title>dynamic format specifier duplicated when stepping</Title>
    <Description>**Version Used**: 

16.0.0 P1

**Steps to Reproduce**:

1. Create VB console application:

```VB
Imports System.Dynamic

Module Module1

    Sub Main()
        Dim x As Object = New ExpandoObject()
        x.z = 1
        x.y = 2
        x.w = 3
    End Sub

End Module
```

2. Place breakpoint to `x.y = 2` and F5.
3. Add `x, dynamic` to Watch window
4. Step (F10), Step (F10)

**Expected Behavior**:

The Watch window lists `x, dynamic`.

**Actual Behavior**:

The Watch window lists `x, dynamic, dynamic` and then `x, dynamic, dynamic, dynamic`.
Each step adds one `dynamic` modifier.


</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32495</IssueID>
    <RepoID>1</RepoID>
    <Title>Missing 'possible dereference of a null reference' warning - nested property initializers</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code
```cs
#nullable enable
class C
{
  C? f;
  static void Main()
  {
    new C() { f = { f = null }};
  }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxAgrgOyQExAagB8BiTdAG3ImHLgAI5NraBYAKAAEAmOgYXYDe7OnwD8dAGYBuYXQ4BGAGxyALHQCyEAJaYAFAEpZQtiJGY4Adz4G6AyXQC8t+07KU6AXw8yTn9h6A=

**Expected Behavior**:
`Possible derefernce of a null reference` warning for `f = { f = null }` initializer as it dereferences a field which is explicitly marked as nullable in order to set its properties.

**Actual Behavior**:
No warnings for nullable reference types. The program crashes at runtime with a `NullReferenceException`</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32494</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC: Rude edits not reported when file is added by Generate from Usage</Title>
    <Description>Repro:

1. Create a C# console app.
2. Start debugging (F10).
2. Type `new C();` in the `Main` method.
3. Invoke generate from usage - into a new file. This adds a new file.

If EnC is enabled this file should have Rude Edit squiggles but it doesn't since the tagger is not created.
The tagger is created when you focus the file, but it should have been created when the file was opened.

 

 </Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32493</IssueID>
    <RepoID>1</RepoID>
    <Title>False possible dereference of a null reference - equality to an expression known to be not null</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
```cs
#nullable enable
class C
{
  void M(string? s)
  {
    if (s == "")
    {
      s.ToString();
    }
  }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGFGBvRiipgCwUAsgAomARgAMAfgpQAlLwo8GfPgEsAZhVFQKAXgMUARCaVr1q9eqgA6ACoB7AMowEG3AHNRCgNzKfAC+yiEMQUA=

**Expected Behavior**:
No warnings. `s` should be known to be not null since it is equal to an expression which is known to be not null.

**Actual Behavior**:
`warning CS8602: Possible dereference of a null reference.`</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32492</IssueID>
    <RepoID>1</RepoID>
    <Title>C# EE: The type of hoisted dynamic variables displayed as object</Title>
    <Description>Step thru `Main` and `M` methods. In `Main` the type of `e` is displayed as `dynamic` in Locals window. In `M` the type of `d` is `object`. It should be `dynamic` as well.
 
```C#
using System;
using System.Linq;
using System.Collections.Generic;

class C
{
    static IEnumerable&lt;int&gt; M()
    {
        dynamic d = 1;
        yield return d;
        Console.WriteLine(d);
    }

    public static void Main()
    {
        dynamic e = 1;
        M().ToArray();
    }
}
```

We should put `DynamicAttribute` on the lifted fields, or add and use dynamic variable CDI to the iterator method.
</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32491</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0004 quickfix is incorrect when casting IntPtr to pointer</Title>
    <Description>Given something like this:

```csharp
struct Block&lt;T&gt;
    where T : unmanaged
{
    IntPtr m_ptr;
    unsafe ref T GetRef( int index )
    {
        return ref ((T*)m_ptr)[index];
    }
}
```

I get a quickfix suggestion to remove the cast to T*, which is obviously incorrect.

Amusingly, the IDE actually puts the red squiggly under the suggested change in the quickfix preview popup itself. :D

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/423511/ide0004-quickfix-is-incorrect-when-casting-intptr.html
VSTS ticketId: 763320_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32490</IssueID>
    <RepoID>1</RepoID>
    <Title>Code suggestions are applied to linked source files even if unchecked</Title>
    <Description>In a C# project containing both regular source files and linked source files (Project | Add Existing Item | drop down on Add button | Add as Link), enter some code that will generate a suggestion (eg. potential inline variable declaration (IDE0018)).
In the project's own source file, select the corresponding code suggestion tip icon in the editor gutter and choose to apply it to the Project.
Uncheck the linked file, so that the correction should only be made to the project's own file, and click Apply.
The project's own file will only be modified if it was checked (good). The linked file will be modified even though it was unchecked (bad).
I've seen this with multiple suggestions (IDE0018, 19, and 20), so it seems to be a bug in the Preview Changes | Apply logic.
The attached screenshot shows the check state; in this case Utils.cs is a linked file, and is modified when Apply is clicked, even though it shouldn't be.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/422759/code-suggestions-are-applied-to-linked-source-file.html
VSTS ticketId: 762694_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32489</IssueID>
    <RepoID>1</RepoID>
    <Title>C# no warning for assignment of property to itself </Title>
    <Description>Given the following code

        public CAccountContract(CAccount account, DateTime signDate, DateTime inceptionDate, decimal registrationFee)
        {
            Requires.That(account != null, &amp;quot;account is required, to create contract!&amp;quot;);
            Requires.That(inceptionDate &amp;gt; signDate, &amp;quot;inception date must be &amp;gt;= sign date, to create contract!&amp;quot;);
            Requires.That(signDate &amp;gt;= new DateTime(2019, 1, 1), &amp;quot;sign date must be &amp;gt;= 2019-01-01, to create contract!&amp;quot;);
            Requires.That(registrationFee &amp;gt; 0m, &amp;quot;registration fee must be &amp;gt;= 0, to create contract!&amp;quot;);

            Account = account;
            SignDate = signDate;
            InceptionDate = InceptionDate;
            RegistrationFee = registrationFee;
        }

It is not obvious that there is an error in this code. The compiler should have warned that the second last statement was asigning a variable to itself, and perhaps also warned that the variable passed to the function was not used.

Specifically, the error here is that

       InceptionDate = InceptionDate;

should actually read

            InceptionDate = inceptionDate;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/420322/c-no-warning-for-assignment-of-property-to-itself.html
VSTS ticketId: 761249_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32488</IssueID>
    <RepoID>1</RepoID>
    <Title>False positive for IDE0051</Title>
    <Description>C# Code:

```csharp
using System;
using System.Reflection;

namespace Test
{
    class TestClass
    {
        private static readonly MethodInfo TesteMethod =
            typeof(TestClass).GetTypeInfo().GetMethod(nameof(Test), BindingFlags.Static | BindingFlags.NonPublic);

        private static DateTime Test()
        {
            return DateTime.Now;
        }
    }
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/419930/false-positive-for-ide0051.html
VSTS ticketId: 760860_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32487</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense broken on large files</Title>
    <Description>&lt;p&gt;No matter how many times you close IntelliSense bug reports, it's still not fixed. :-)&lt;br&gt;&lt;br&gt;I have a 492k source file in my project. No, I can't and don't want to split it up, it's a large data list, initialized in code, I need it. There's no problem with the compilation and the functioning of the program whatsoever. But as soon as I as much as open this file for a moment. IntelliSense stops working for the whole solution until I restart VS. No error messages will ever be shown, neither during typing nor after compilation (!).&lt;br&gt;&lt;br&gt;Sometimes deleting .vs is required, sometimes it isn't. IntelliSense clearly cannot cope with otherwise perfectly fine larger files and it can't let them go correctly, either.&lt;/p&gt;&lt;p&gt;I can't send you the file but it's easy to reproduce. Just create a struct with a dozen or so items, add an array initialization like:&lt;/p&gt;&lt;pre&gt;    public static MyStruct[] LargeTabe = new MyStruct[] {
      new MyStruct(...),
      new MyStruct(...),
      ...
      new MyStruct(...),
    };&lt;/pre&gt;&lt;p&gt;repeat it a couple thousand times and that's it.&lt;/p&gt;
&lt;/pre&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/419744/intellisense-broken-on-large-files.html
VSTS ticketId: 760798_
_These are the original issue comments:_

Yanghua Zhang[MSFT] on 1/8/2019, 04:15 AM (7 days ago): &lt;p&gt;Thank you for your feedback! Could you please tell us what type of project did your problem appear in? We tried repro this issue with a VC++ console project, it has many errors and intellisense is not broken. We record a video for your reference (&lt;a target='_blank' href="https://developercommunity.visualstudio.com/storage/temp/54701-repro.gif"&gt;repro.gif&lt;/a&gt;). If we miss something, please tell us. For us to investigate this further, could you please share more detail information to us(e.g. repro project and so on). We look forward to hearing from you!&lt;/p&gt;

Gábor Deák Jahn on 1/8/2019, 11:57 AM (6 days ago): &lt;p&gt;Plain and simple C# .NET.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32486</IssueID>
    <RepoID>1</RepoID>
    <Title>Find all references on a property returns unrelated properties</Title>
    <Description>Using VS 2017 professional (15.9.4):
Given a large solution with 61 projects and about 21000 .cs files, hitting Shift+F12 on a property sometimes returns matches that belong to different class hierarchies, and thus acts more like &amp;quot;Find in files&amp;quot;, rather than &amp;quot;Find all references&amp;quot;.

Simplified example:

```csharp
class Foo{
 public int MyProperty { get; set; }
}

class Bar{
 public int MyProperty { get; set; }
}

class Other
{
  void Method()
  {
    var foo = new Foo();
    foo.MyProperty = 1;  // hitting Shift+F12 on MyProperty here
  }
}
```

The references belonging are obviously the assignment and the declaration of MyProperty in the Foo class.
At least in our large solution, the results of Find All References sometimes include other code elements (I am not sure whether this is limited to properties) having the same name, which in the simplified example would mean that also Bar.MyProperty is included, but that's wrong.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/419689/find-all-references-on-a-property-returns-unrelate.html
VSTS ticketId: 760763_
_These are the original issue comments:_

jonas on 1/7/2019, 04:17 AM (8 days ago): Note that I was a bit lazy when I wrote the example. The thing is that simple projects show references as expected, but within a certain large solution, I am experiencing false positives, which is confusing to work with.I can't share the source code. The problem extends to (at least) methods as well, not only properties.The symptom is basically that "find all references" works like "find in files" to some extent.
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32485</IssueID>
    <RepoID>1</RepoID>
    <Title>Comment indentation</Title>
    <Description>Hello,
Formatting code doesn't preserve comment indentation style. It is always aligned to code.
It is impossible to preserve all comments position to the first column. Even there is no command to move alll comments to first column.
It slows down programming.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/418017/comment-indentation.html
VSTS ticketId: 758587_
_These are the original issue comments:_

Cytheria Ji [MSFT] on 1/3/2019, 07:09 PM (11 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

P3400023 on 1/5/2019, 11:37 AM (9 days ago): &lt;p&gt;Visual Studio is my everyday tool, I spend 10 hours a day. You cannot imagine, how annoying is press Ctrl-Z every time I paste code or manually move all indented comment back. It is really crazy and no option how to disable this horrible behaviour.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32484</IssueID>
    <RepoID>1</RepoID>
    <Title>view compilation while debugging</Title>
    <Description>1. My project is an asp.net core project using MVC
2. I wanted to try Visual Studio 2019 and upgrade to Asp.Net Core 3.0
3. In Visual Studio 2017 if i edit a .cshtml and refresh the page the view edits are applied without stopping the debugger
4. in Visual Studio 2019 if i edit a .cshtml file while debugging the updates are not applied.  I have to stop the debugger and re-run the project.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/416767/view-compilation-while-debugging.html
VSTS ticketId: 757844_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32483</IssueID>
    <RepoID>1</RepoID>
    <Title>Exception when add #nulable enable</Title>
    <Description>Visual studio throws an exception when adding &amp;quot;#nullable enable&amp;quot; directive. Here is exception and stack trace.

Severity	Code	Description	Project	File	Line	Suppression State	Detail Description
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.Formatting.FormattingDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Unexpected false'.	ConsoleApp7		1	Active	Analyzer 'Microsoft.CodeAnalysis.Formatting.FormattingDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: ConsoleApp7
SyntaxTree: C:\Users\Libor\source\repos\ConsoleApp7\ConsoleApp7\Program.cs

System.InvalidOperationException: Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.Analyzer.Analyze(SyntaxTriviaList list, AnalysisResult&amp;amp; result)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.Analyzer.Leading(SyntaxToken token)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.CreateLeadingTrivia(SyntaxToken token)
   at Microsoft.CodeAnalysis.Formatting.TokenStream.GetOriginalTriviaData(TokenData token1, TokenData token2)
   at Microsoft.CodeAnalysis.Formatting.TokenStream.GetColumn(TokenData tokenData, Func`3 triviaDataGetter)
   at Microsoft.CodeAnalysis.Formatting.FormattingContext.AddAnchorIndentationOperation(AnchorIndentationOperation operation)
   at Roslyn.Utilities.EnumerableExtensions.Do[T](IEnumerable`1 source, Action`1 action)
   at Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.&amp;lt;&amp;gt;c__DisplayClass14_0.&amp;lt;FormatAsync&amp;gt;b__0(Task`1 task)
   at Microsoft.CodeAnalysis.Formatting.TaskExecutor.SynchronousExecutor.ContinueWith[T1,T2](Task`1 previousTask, Func`2 nextAction, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.&amp;lt;FormatAsync&amp;gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Formatting.AbstractSyntaxFormattingService.&amp;lt;FormatIndividuallyAsync&amp;gt;d__8.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Formatting.Formatter.&amp;lt;GetFormattedTextChangesAsync&amp;gt;d__22.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Formatting.Formatter.GetFormattedTextChanges(SyntaxNode node, Workspace workspace, OptionSet options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeStyle.FormattingAnalyzerHelper.AnalyzeSyntaxTree(SyntaxTreeAnalysisContext context, DiagnosticDescriptor descriptor, Workspace workspace, OptionSet options)
   at Microsoft.CodeAnalysis.Formatting.FormattingDiagnosticAnalyzer.AnalyzeSyntaxTree(SyntaxTreeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&amp;lt;&amp;gt;c.&amp;lt;ExecuteSyntaxTreeActionsCore&amp;gt;b__49_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/411190/exception-when-add-nulable-enable.html
VSTS ticketId: 753485_
_These are the original issue comments:_

David Lowndes on 12/18/2018, 05:21 AM (28 days ago): I've got this with every project where I've tried building as C# 8 with nullable reference types enabled.
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32482</IssueID>
    <RepoID>1</RepoID>
    <Title>Unsuitable code suggestion in ExpandoObject</Title>
    <Description>On version 15.7
When you declare an object of type ExpandoObject a code suggestion will show up to simplify the object initialization. This will not work as expected because the class members are dynamic and they are late binding

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/411147/unsuitable-code-suggestion-in-expandoobject.html
VSTS ticketId: 753395_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32481</IssueID>
    <RepoID>1</RepoID>
    <Title>Intellisense incorrectly work in C# lambda excpressions</Title>
    <Description>If you quickly type the text inside lambda function, the Intellisense shows wrong suggestions.

Please see the video from the link below:

http://take.ms/plpka

Let me know if you need additional details.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/394868/intellisense-incorrectly-work-in-c-lambda-excpress.html
VSTS ticketId: 737177_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32480</IssueID>
    <RepoID>1</RepoID>
    <Title>Bulk fix "add braces to if statement" results in broken code.</Title>
    <Description>This code:

```csharp
#if DEBUG
    if (!mSmmEndOfRideGenerated)
#endif
    record = null;

will become this:

#if DEBUG
    if (!this.mSmmEndOfRideGenerated)
    {
#endif
        record = null;
    }
```

which obviously won't compile without the DEBUG directive. If there is a compiler directive found before the statement, it better be left as is.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/390182/bulk-fix-add-braces-to-if-statement-results-in-bro.html
VSTS ticketId: 734356_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32479</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixed issue suggesting 'var' for tuples with different names of fields.</Title>
    <Description>Fixes #32088</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32478</IssueID>
    <RepoID>1</RepoID>
    <Title>Emitting Debug.Assert(e != null) via null-supression operator</Title>
    <Description>When we're passing a `e!` where `e` is not the literal `null`, we expect it to be not null at that point but the flow analysis couldn't infer that, so I think we should emit `Assert(e != null)` to catch an unexpected null early, rather than silently passing it through until a thought-to-be-safe dereference occurs.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32477</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32476</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32475</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32474</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32473</IssueID>
    <RepoID>1</RepoID>
    <Title>fixes #23123</Title>
    <Description>Opened up this PR with respect to #23123 for further discussion of proposed solution.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32472</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow Obsolete attribute on getters and setters</Title>
    <Description>Currently in C# the Obsolete attribute is not allowed on property getters and setters. 

```
using System;

class C
{
    int P { get; [Obsolete] set; }
}
```
Has the error 

`error CS1667: Attribute 'System.ObsoleteAttribute' is not valid on property or event accessors. It is only valid on 'class, struct, enum, constructor, method, property, indexer, field, event, interface, delegate' declarations.`

In VB it is allowed, and seems to work as expected.

It would also be useful, for example when I want to start making a property readonly, and so mark usages of the setter obsolete in the meantime. Also a property setter might have to be declared for eg. XmlSerialization, but I don't want anyone else using it, so I would like to mark it obsolete.

Since the obsolete attribute seems to be unique in this regard among attributes, I'm guessing this is either a compiler or a language feature.

I'm not sure which repository is the correct place for this issue, so I'm asking it here, and if necessary I will move it to csharplang.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32471</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32470</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32469</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32468</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32467</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect IDE0004 "Cast is redundant" when passing enum cast to int as constructor parameter accepting int</Title>
    <Description>This is a fix for #31963

```ReplacementChangesSemanticsForNode``` did not correctly detect that the fixed expression would create an error in the new code.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32466</IssueID>
    <RepoID>1</RepoID>
    <Title>Vs stop working</Title>
    <Description>1.应用程序: devenv.exe
Framework 版本: v4.0.30319
说明: 应用程序通过 System.Environment.FailFast(string message) 请求终止进程。
消息: StreamJsonRpc.RemoteInvocationException: Request locate failed with message: Cannot find service module info file '*/roslynCodeAnalysis.servicehub.service.json' in 'd:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\ServiceHub\Services', using discovery services failed: VsixServiceDiscovery: connect ENOENT \\?\pipe\90f6de52698644129c6632a232ffe862
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   在 StreamJsonRpc.JsonRpc.&lt;InvokeCoreAsync&gt;d__67`1.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.VisualStudio.Threading.ThreadingTools.&lt;WithCancellationSlow&gt;d__11`1.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.ServiceHub.Client.HubClient.&lt;LocateServiceAsync&gt;d__40.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 Microsoft.ServiceHub.Client.HubClient.&lt;LocateServiceAsync&gt;d__40.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.ServiceHub.Client.HubClient.&lt;RequestServiceChannelNameAsync&gt;d__26.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.ServiceHub.Client.HubClient.&lt;RequestServiceAsync&gt;d__29.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RetryRemoteCallAsync&gt;d__0`2.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RequestServiceAsync&gt;d__1.MoveNext()
--- 引发异常的上一位置中堆栈跟踪的末尾 ---
   在 Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
堆栈:
   在 System.Environment.FailFast(System.String, System.Exception)
   在 Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   在 Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   在 Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   在 Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient+Connections+&lt;RequestServiceAsync&gt;d__1.MoveNext()
   在 System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   在 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   在 System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   在 System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   在 System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   在 System.Threading.Tasks.Task.FinishContinuations()
   在 System.Threading.Tasks.Task.FinishStageThree()
   在 System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   在 System.Threading.Tasks.Task+DelayPromise.Complete()
   在 System.Threading.Tasks.Task+&lt;&gt;c.&lt;Delay&gt;b__274_1(System.Object)
   在 System.Threading.TimerQueueTimer.CallCallbackInContext(System.Object)
   在 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   在 System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   在 System.Threading.TimerQueueTimer.CallCallback()
   在 System.Threading.TimerQueueTimer.Fire()
   在 System.Threading.TimerQueue.FireQueuedTimerCompletion(System.Object)
   在 System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   在 System.Threading.ThreadPoolWorkQueue.Dispatch()
   在 System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32465</IssueID>
    <RepoID>1</RepoID>
    <Title>non-nullability of anonymous type properties in lambdas are messed up</Title>
    <Description>
```c#
System.Linq.Expressions.Expression&lt;int&gt;? first;
var q = first?.Parameters.Select(f =&gt; new { f });
```

hover over the `f` in `new { f }`:

![image](https://user-images.githubusercontent.com/1088194/51151855-385b3680-1821-11e9-9add-c5625f21397a.png)

which is it? is `f` nullable or not?</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32464</IssueID>
    <RepoID>1</RepoID>
    <Title>Capture extra invalid dimensions for SemanticModel and IOperation</Title>
    <Description>In invalid code such as `void M(string[20] x)`, we should capture the expression `20` for use in the `SemanticModel` and `IOperation`. These were previously a syntax error and result in skipped tokens, but they are now being parsed but not bound after https://github.com/dotnet/roslyn/pull/32431</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32463</IssueID>
    <RepoID>1</RepoID>
    <Title>nullability checking inconsisten between locals &amp; parameters</Title>
    <Description>```c#
public void Foo(string? param)
{
	if (param != null)
	{
		var l1 = param.Length;
		var l2 = new[] { 0 }.Select(_ =&gt; param.Length);  // CS8602
	}

	string? local = "";
	if (local != null)
	{
		var l1 = local.Length;
		var l2 = new[] { 0 }.Select(_ =&gt; local.Length);
	}
}
```

only `param` get a `warning CS8602: Possible dereference of a null reference.`.

for some reason the `local` doesn't get the same warning.

- both should be consistent.
- really, since both are read-only in the method, _neither_ should get that warning.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32462</IssueID>
    <RepoID>1</RepoID>
    <Title>Run tests in AfterSolutionBuild.targets</Title>
    <Description>Roslyn is not using Arcade SDK test runner on Windows - we have a custom runner that optimizes scheduling of the tests for overall speed.

This test runner is invoked from function [TestUsingOptimizedRunner](https://github.com/dotnet/roslyn/blob/master/eng/build.ps1#L212) in `build.ps1` after the Arcade driven build completes. 

This means that in official build we run tests after building and publishing artifacts. This is not ideal since we'll end up publishing packages and symbols even when tests fail.

To fix the ordering the test runner needs to be executed from a target in `eng\AfterSolutionBuild.targets`. This is a file that's imported by Arcade SDK after the solution is built and before artifacts are published.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32461</IssueID>
    <RepoID>1</RepoID>
    <Title>provide fix all ability to CodeRefactoringProvider</Title>
    <Description>fix all is just a concept of scope. not something tightly coupled with the concept of diagnostics or code fixer or code refactoring.

we should provide a way to let users select a scope for CodeRefactoringProvider (http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeRefactorings/CodeRefactoringProvider.cs,11)

...

proposal will be

1. add RefactoringFixAllProvider as in CodeFixProvider.GetFixAllProvider
http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeFixes/CodeFixProvider.cs,33 to CodeRefactoringProvider

which is the same as FixAllProvider but without GetSupportedFixAllDiagnosticIds.

it would be awesome if we can merge those 2, but if we can't, having new type seems fine.

2. FixAllContext for GetFixAsync gets new one RefactoringFixAllContext. again, it would be nice if we can merge those 2 but, if that's a problem (due to it being public API and etc), having new type seems fine to me

and like RefactoringFixAllprovider, RefactoringFixAllContext should not have any API related to DiagnosticIDs but all other ones like Scope, CancellationToken and etc should be provided same.

in this proposal, implementer of RefactoringFixAllProvider will implement the fix all provider almost same way as existing FixAllProvider, only difference will be rather than get code location to apply fix by diagnostics, it will run its own discovery code based on given scope and return fix all code action as existing CodeFix FixAllProvider.

like existing FixAllProvider, we can provide general RefactoringFixAllProvider such as BatchFixAllProvider (http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeFixes/FixAllOccurrences/BatchFixAllProvider.cs,23) by let it accept discoverer that will run on the given scope to find places to call existing CodeRefactoringProvider almost same way as we do for CodeFixProvider.

...

it doesn't need to be the way I proposed above, but the point is us providing a way for user to invoke code refactoring fix all so that it doesn't become a reason to make people to convert refactoring to analyzers. 

people should convert one to analyzer if they believe it is something worth to break build in CI. LB or Fix all shouldn't be the reason. in that sense, once we have this, we should consider some of analyzer with hidden diagnostics, whether we should move those to refactoring rather than analyzers.
</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32460</IssueID>
    <RepoID>1</RepoID>
    <Title>Why is CodeFixer run thrice to apply the actual fix instead of being cached?</Title>
    <Description>**Version Used**: 
2.6.3
**Steps to Reproduce**:

```csharp
class StaticInheritanceAnalyzer 
{ 
    internal static ConcurrentDictionary&lt;Location, DiagnosticData&gt; DiagnosticDataDict =
            new ConcurrentDictionary&lt;Location, DiagnosticData&gt;();
} // gets poplated by all the necesary data to ensure static inheritance.
// also: can't use context.RegisterCompilationStartAction to clear DiagnosticDataDict. because it wipes data arbitrarily and unreliably.`
```

CodeFixer:

```csharp
        private ConcurrentDictionary&lt;Location, int&gt; cacheReleaseCounter = new ConcurrentDictionary&lt;Location, int&gt;();

        private async Task&lt;Document&gt; FixInheritanceAsync(Document document, Location location,
            CancellationToken cancellationToken)
        {
            DiagnosticData diagnosticData;
            int counter = cacheReleaseCounter.GetOrAdd(location, 0);
            switch (counter)
            {
                case 0:
                case 1:
                    StaticInheritanceAnalyzer.DiagnosticDataDict.TryGetValue(location, out diagnosticData);
                    break;
                case 2:
                    StaticInheritanceAnalyzer.DiagnosticDataDict.TryRemove(location, out diagnosticData);
                    break;
                default:
                    throw new Exception(counter.ToString());
            }
            cacheReleaseCounter.TryUpdate(location, counter == 2 ? 0 : counter + 1, counter);
            // counter == 2 =&gt; fix gets applied, analyzer will finally produce a new Solution
            [... actual code ...]
        }
```

1. Cache some DiagnosticData
2. Try to release Data on first CodeFix run
3. Run into the Issue that first Run is only used for the Preview
4. Wonder what the next two runs do
5. Be happy that it at least needs 3 runs consistently ( for what I've encountered so far)

**Expected Behavior**:

cached Data can be released by first call / CodeFixer needs to be run only once

**Actual Behavior**:

Codefixer has to be run thrice before Fix is applied</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32459</IssueID>
    <RepoID>1</RepoID>
    <Title>implicitly typed array of nullables has wrong type</Title>
    <Description>```c#
var foo = new [] { default(string?) };
```

hover over `foo`, it shows type `string[]`, i would expect `string?[]`

</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32458</IssueID>
    <RepoID>1</RepoID>
    <Title>non-nullability is not preserved</Title>
    <Description>```c#
public static Foo()
{
	Func&lt;T, A0&gt; Func&lt;T, A0&gt;(Func&lt;T, A0&gt; func) =&gt; func;
	var func = Func((int i) =&gt; default(string?));
	var val = func();
}
```

hover over the last `var` keyword. it shows `string`

i would expect `string?`

</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32457</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32456</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32455</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32454</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32453</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to dev16.0-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps
git reset --hard upstream/dev16.0-preview2-vs-deps
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32452</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32451</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32450</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid KeyNotFound when updating inline rename state</Title>
    <Description>Check to ensure our subject buffer has undo state before trying to update.

Fixes #31883</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32449</IssueID>
    <RepoID>1</RepoID>
    <Title>Make array Range indexer expression an rvalue</Title>
    <Description>Fixes #31889</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32448</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 into features/unmanaged-constructed-types</Title>
    <Description>Apologies for the large number of force pushes. Goofed up a few times getting the manual fixups consolidated into one commit.

Please review commit 86f0984.

- Resolved a conflict in MessageID.cs by adding the unmanaged constructed feature ID to the end of the enum declaration.
- Resolved conflicts in SourceNamedTypeSymbol_Bases.cs by using the modified ConstraintsHelper.CheckAllConstraints() that takes a CSharpCompilation
- Resolved conflicts in NullableReferenceTypesTests.cs by changing the expected error spans in a few places as a result of constraint checking being delayed until after type members are added.</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32447</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability dropped in binding typeof()</Title>
    <Description>The compiler accepts `typeof(string?)`, but totally ignores the nullability annotation.

In my opinion the nullability annotation should be forbidden here.</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>31/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32446</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullability dropped in binding __refvalue</Title>
    <Description>[The following code](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABABgqYEYBuRpgZnYAmCgGEKAb0YVp7AUwAsFALIAKACoBPAA5wUAJTgAzRNQDGlBAEoJUmXYD6FALwV79hEYBuEQvjgrkdg4WAH5LADoAGWoAcxgACx4GOwBfRjSGIA==) fails to produce a warning, even though it dereferences a possibly-null lvalue produced through `__refvalue`.  This is caused by us discarding the nullable annotation when binding the type in `Binder.BindRefValue`.

``` c#
#nullable enable
using System;
public class C {
    public void M(TypedReference r) {
        _ = __refvalue(r, string?).Length;
    }
}
```
</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32445</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix UseExpressionBodyHelper.GetDiagnosticLocation for indexer declara…</Title>
    <Description>…tions

Port existing override [UseExpressionBodyForPropertiesHelper.GetDiagnosticLocation](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp.Features/UseExpressionBody/Helpers/UseExpressionBodyForPropertiesHelper.cs,76) to `UseExpressionBodyForIndexersHelper`

Fixes #31308</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32444</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8618 lines numbers are unhelpful</Title>
    <Description>_From @Spongman on January 14, 2019 23:3_

```
c:\path\file.cs(14,27,14,41): CS8618: Non-nullable property 'XYZ' is uninitialized.
```

the line number points to the line containing the property's parent `class` definition. it would be _much_ more useful if it pointed to the property definition itself.

_Copied from original issue: dotnet/csharplang#2143_</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32443</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix typo</Title>
    <Description>
    </Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32442</IssueID>
    <RepoID>1</RepoID>
    <Title>Publish to BAR</Title>
    <Description>Infrastructure only change.

Adds builds steps to official build that publish build artifacts to Build Asset Storage.</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32441</IssueID>
    <RepoID>1</RepoID>
    <Title>Not many Compiler issues tagged Help Wanted</Title>
    <Description>I've recently started contributing to Roslyn, and I am eager to contribute more.

I'm more interested in contributing to the compiler than to the IDE or to Analyzers. However there are not many issues tagged both with `Area-Compilers` and `help wanted`. Of those that are, I've gone through a few, and opened some pull requests. However less than 20 issues from the last year with both these tags are open, and those that are suitable/interest me are running a bit thin.

So a few requests here:

a) Could more compiler issues be marked `help wanted` in the future?

b) Similarly could open compiler issues be looked at and tagged `help wanted` or could someone point me towards issues that might be relevant?

c) I've noticed that there are no compiler issues marked both with `New Language Feature` and `help wanted`. Is there a reason for that?

d) If anyone does open an issue, which they think I might be able to help with, please do tag me in a comment!

I love C# and I really appreciate the work all of you put in to make such a great language and tooling experience! I'm looking to expand my knowledge of language and compiler design, and I feel like contributing to Roslyn is the perfect way to do so and give back to the community.

Thank you very much! </Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32440</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix assert in UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer</Title>
    <Description>1. Bail out early if there is a reference to assigned local between the declaration and null check being replaced with pattern matching.
2. Remove assert for bail out in presence of errors/unhandled cases.

Fixes #31388</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32439</IssueID>
    <RepoID>1</RepoID>
    <Title>Don't offer "Generate Equals/GetHashCode" on ref structs</Title>
    <Description>Fixes #25708.

The family of *Generate Equals/GetHashCode* refactorings does not work for ref structs at all: they generate code with unfixable errors due to the [constraints placed on ref structs](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref#ref-struct-types) (casting from Object, implementing interfaces, using it as a type argument are all forbidden).

This PR disables these refactorings on ref structs.</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32438</IssueID>
    <RepoID>1</RepoID>
    <Title>Lambda Formatter indents incorrectly if opening brace is misaligned</Title>
    <Description>Our house rules use Tabs (for some terrible reason) and if you have code like this:

![image](https://user-images.githubusercontent.com/2592881/51129719-6b350880-17e8-11e9-948d-5c674ce73482.png)


```csharp
namespace RoslynFormattingBug
{
	using System;

	class Program
	{
		delegate void TestDelegate(string s);

		static void Main(string[] args)
		{
			// This is a comment
			TestDelegate del = n =&gt;
			 {
				// This is a comment
				string s = n + " World";
				Console.WriteLine(s);
			};
		}
	}
}
```

It gets formatted by adding a space:
![image](https://user-images.githubusercontent.com/2592881/51129680-3f198780-17e8-11e9-8892-e9c1bb4ec1c9.png)

```csharp
namespace RoslynFormattingBug
{
	using System;

	class Program
	{
		delegate void TestDelegate(string s);

		static void Main(string[] args)
		{
			// This is a comment
			TestDelegate del = n =&gt;
			 {
				 // This is a comment
				 string s = n + " World";
				 Console.WriteLine(s);
			 };
		}
	}
}
```

Our .editorconfig is set as follows:
```text
[*]
indent_style = tab
```

I am not sure what we really should expect here; I could see it go both ways; either:
1. Align with TestDelegate (trimming the space)
2. Insert a Tab (replacing the space) and intend everything to match

_Originally posted by @aolszowka in https://github.com/dotnet/roslyn/issues/31418#issuecomment-454093984_

Tagging @CyrusNajmabadi as per the original thread</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32437</IssueID>
    <RepoID>1</RepoID>
    <Title>Integration test failure in CSharpNavigationBar.VerifyNavBar</Title>
    <Description>See https://dev.azure.com/dnceng/public/_build/results?buildId=72058&amp;view=ms.vss-test-web.test-result-details

```
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; Xunit.Sdk.EqualException: Assert.Equal() Failure
          ↓ (pos 0)
Expected: public static bool operator 
Actual:   !=(C c1, C c2) { return fals
          ↑ (pos 0)
   at Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) in C:\projects\xunit\src\xunit.assert\Asserts\StringAsserts.cs:line 244
   at Xunit.Assert.Equal(String expected, String actual) in C:\projects\xunit\src\xunit.assert\Asserts\StringAsserts.cs:line 174
   at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.Editor_OutOfProc.Verifier.CurrentLineTextAndAssertCaretPosition(String expectedText, Boolean trimWhitespace) in /_/src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/Editor_OutOfProc.Verifier.cs:line 87
   at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.Editor_OutOfProc.Verifier.CurrentLineText(String expectedText, Boolean assertCaretPosition, Boolean trimWhitespace) in /_/src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/Editor_OutOfProc.Verifier.cs:line 29
   at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpNavigationBar.VerifyNavBar() in /_/src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpNavigationBar.cs:line 53
```
![csharpnavigationbar verifynavbar-equalexception-16 57 19](https://user-images.githubusercontent.com/10605811/51133407-c287a880-17e9-11e9-8ba3-aeb4aece453d.png)

</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32436</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable a few tests on Mono</Title>
    <Description>This disables a few tests that have recently turned up as flaky on Mono.

- DestructorOverridesNonDestructor: this test is pretty specific to the
JIT / GC implementation. It doesn't run on CoreClr already due to the
subtle differences. Shouldn't have been run on Mono in the first place.
- TestCallMethodsWithLeastCustomModifiers: there appears to be a runtime
race condition around how overloads that differ by only `modopt`
elements are resolved. Follow up issue
https://github.com/mono/mono/issues/12422</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32435</IssueID>
    <RepoID>1</RepoID>
    <Title>Reorder wrapping refactoring to show after initialize member from par…</Title>
    <Description>…ameter refactoring

Fixes #32151 

![image](https://user-images.githubusercontent.com/10605811/51123216-8136cf00-17d0-11e9-8adc-c0bcfd888514.png)
</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32434</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn master-vs-deps | 20190114</Title>
    <Description>
    </Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32433</IssueID>
    <RepoID>1</RepoID>
    <Title>No way to make nullable pattern variable in nullable analysis</Title>
    <Description>**Version Used**: `features/NullableReferenceTypes`

**Steps to Reproduce**:

```cs
void M(object o) { 
  if (!(o is string s)) s = null; // wraning: Converting null literal or possible null value to non-nullable type.
  var l = s.Length; // warning: Possible null dereference
}
```

Using `null!` would resolve both warnings but there's no way to keep the second warning - making `s` a nullable type for nullable analysis.


</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32432</IssueID>
    <RepoID>1</RepoID>
    <Title>Syntax changes for recursive pattern-matching feature</Title>
    <Description>Rename "deconstruct pattern" to "positional pattern" in the APIs.
Fixes #32291

Permit a trailing commas in two places
- Permit a trailing comma after the last arm of a switch expression
- Permit a trailing comma after the last subpattern of a property pattern clause

Fixes #32292
</Description>
    <CreatedDate>14/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32431</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable annotation is no longer part of array rank specifier</Title>
    <Description>Fixes #32290 and other related issues</Description>
    <CreatedDate>13/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32430</IssueID>
    <RepoID>1</RepoID>
    <Title>Supress 1579 when the type being enumerated is an Error Type</Title>
    <Description>A fix to https://github.com/dotnet/roslyn/issues/32334</Description>
    <CreatedDate>13/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32429</IssueID>
    <RepoID>1</RepoID>
    <Title>async function generates wrong return</Title>
    <Description>&lt;p&gt;Consider the following code: &lt;br&gt;&lt;br&gt;    async Task DoAsync() =&amp;gt; await NoExistsAsync();&lt;br&gt;&lt;br&gt;Where the function NoExistsAsync doesn't yet exist. The function NoExistsAsync is meant to return Task according to this code. Now I try using ctrl + . to generate a new function. &lt;br&gt;&lt;br&gt;Expected result: &lt;br&gt;&lt;br&gt;    Task NoExistsAsync() {&lt;br&gt;&lt;br&gt;Actual result: &lt;br&gt;&lt;br&gt;    Task&amp;lt;Task&amp;gt; NoExistsAsync() {&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/410064/async-function-generates-wrong-return.html
VSTS ticketId: 752719_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>13/01/2019</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32428</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 2017 RC - move type to file bug</Title>
    <Description>Using the IDE feature move type to file on Form2 erroneously brings the #endregion directive surrounding a separate class above it. After the feature runs the code no longer compiles because of the broken regions. See attached screenshot.
![image](https://user-images.githubusercontent.com/12449387/51084211-f1632900-16da-11e9-8ee5-8c818b6e7842.png)

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/14922/vs-2017-rc-move-type-to-file-bug.html
VSTS ticketId: 419697_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>13/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32427</IssueID>
    <RepoID>1</RepoID>
    <Title>VS 2017 RC - refactor doesnt respect editorconfig settings</Title>
    <Description>Even though the settings below are defined in my editorconfig file the IDE suggests that I should change type TFirst to var. See attached screenshot.

```
[*.cs]
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = false:suggestion
csharp_style_var_elsewhere = false:suggestion
```

![image](https://user-images.githubusercontent.com/12449387/51084105-9bda4c80-16d9-11e9-8b97-13c806b8788e.png)


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/14923/vs-2017-rc-refactor-doesnt-respect-editorconfig-se.html
VSTS ticketId: 419604_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>13/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32426</IssueID>
    <RepoID>1</RepoID>
    <Title>C# Interactive crash VS2019 preview 1.1 </Title>
    <Description>With the use of using statements in the C# Interactive in VS2019 preview 1.1, studio crashes when I try to autocomplete code suggestions with tab. 

Steps:
&amp;gt;using System.Text.RegularExpressions;
&amp;gt;Regex.IsMatch(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, *tab to autocomplete RegexOptions*)

Studio crashes and I can't find any helpfull logs.

Visual Studio 2019 Professional Preview
Version 16.0.0 Preview 1.1

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/418789/c-interactive-crash-vs2019-preview-11.html
VSTS ticketId: 759558_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>13/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32425</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSence doesn't show any info if the summary contains '&amp;'</Title>
    <Description>**Version Used**:  VS2017 15.9.5

**Steps to Reproduce**:

1. 
```
        /// &lt;summary&gt;
        /// Update name &amp; text
        /// &lt;/summary&gt;
        void Update()
        {
        }
```
2.  Move mouse to Update method.

**Expected Behavior**: Show `Update name &amp; text`, or give me error reason

**Actual Behavior**: nothing

</Description>
    <CreatedDate>13/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32424</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>13/01/2019</CreatedDate>
    <ClosedDate>13/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32423</IssueID>
    <RepoID>1</RepoID>
    <Title>SyntaxGenerator's GetAllowedModifiers is buggy</Title>
    <Description>As a result, `WithModifiers` will ignore modifiers it doesn't think are allowed. Discovered in https://github.com/dotnet/roslyn/pull/32422/files#r247326449</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32422</IssueID>
    <RepoID>1</RepoID>
    <Title>Adding code fix to unseal a class</Title>
    <Description>Fixes #31832</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32421</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32420</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32419</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32418</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32417</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32416</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32415</IssueID>
    <RepoID>1</RepoID>
    <Title>Add to test plan places where inference is used</Title>
    <Description>Add to the compiler test plan all the places type inference is used.
- Lambda return type
- Array creation
- Method invocation
- Conditional expression
- Switch expression
</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32414</IssueID>
    <RepoID>1</RepoID>
    <Title>switch expression in nullable walker</Title>
    <Description>It has been reported to me that the nullable walker does not currently handle the switch expression.
</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>30/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32413</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32412</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32411</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32410</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to dev16.0-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps
git reset --hard upstream/dev16.0-preview2-vs-deps
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32409</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32408</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>12/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32407</IssueID>
    <RepoID>1</RepoID>
    <Title>Renaming alias of ValueTuple type shows unresolvable conflict incorrectly</Title>
    <Description>Originally reported here https://github.com/dotnet/roslyn/pull/32265#issuecomment-453386927

When trying to rename the alias for a ValueTuple type, it shows the references of the alias as unresolvable conflicts.

Additionally, when try to rename the alias from the reference, it says "You cannot rename this element" (this behavior is introduced in #14588, which seems unintended for this scenario).

![](https://user-images.githubusercontent.com/823398/51015681-74ff0780-156d-11e9-9976-890eccba76b1.png)
</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32406</IssueID>
    <RepoID>1</RepoID>
    <Title>Factor implementation of `BestTypeInferrer` and `MethodTypeInferrer`</Title>
    <Description>From discussion with Mads, the two should be equivalent.
For example, `new[] { x, y }` should behave like `M(x, y)` (with `T M&lt;T&gt;(T x, T y)`).

But currently, the implementations are largely disjoint.

Scenarios: array type inference, method type inference, lambda return type inference, switch expression return type inference, and also conditional (although that one may need to remain separate due to a historical bug).

FYI @gafter </Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32405</IssueID>
    <RepoID>1</RepoID>
    <Title>Read/Write Kind in FAR Appears Offscreen</Title>
    <Description>Using Int Preview 25810.146, hitting FAR on an identifier has the Read/Write Kind off the side of the screen, I have to resize the Code section to see it. If I didn't know it was there, I wouldn't discover it.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32404</IssueID>
    <RepoID>1</RepoID>
    <Title>AsynchronousOperationListenerTests.IgnoredCancel Test Failed</Title>
    <Description>Saw this on #32390 - Windows Desktop Debug Test32 - [Test Logs](https://dnceng.visualstudio.com/public/_build/results?buildId=70891&amp;view=ms.vss-test-web.test-result-details) Attempt 1

```
Error message
We waited for the cancelled task to finish.\r\nExpected: False\r\nActual: True
Stack trace
   at Microsoft.CodeAnalysis.Editor.UnitTests.Utilities.AsynchronousOperationListenerTests.IgnoredCancel() in /_/src/EditorFeatures/Test/Utilities/AsynchronousOperationListenerTests.cs:line 293
```</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32403</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure that we always mark an analyzer file reference full path as a</Title>
    <Description>dependency location, otherwise we might fail to load the assembly if any of its _referencing_ analyzer assemblies are loaded first.

Fixes #32226</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32402</IssueID>
    <RepoID>1</RepoID>
    <Title>Copy nullability of struct fields of unconstrained type</Title>
    <Description>Fixes #32338.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32401</IssueID>
    <RepoID>1</RepoID>
    <Title>Use events for WaitForNoErrorsInErrorList</Title>
    <Description>Currently this helper method loops until a timeout expires. It should be updated to simply wait for the asynchronous features responsible for error updating to complete and then assert that the list is now empty.

https://github.com/dotnet/roslyn/blob/1252f52b623bf2df7dbf6361a28c37b247c8c370/src/VisualStudio/IntegrationTest/TestUtilities/InProcess/ErrorList_InProc.cs#L27-L30</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32400</IssueID>
    <RepoID>1</RepoID>
    <Title>Need an analyzer to warn about ignored `Dispose` method</Title>
    <Description>In C# 8.0, we're adding support for pattern-based disposal. Due to compatibility concerns, the feature is restricted to ref structs for `foreach` and `using`. But it not restricted for `await foreach` and `await using`.

This unfortunate situation could cause user confusion. It would be useful for an analyzer to warn on `foreach` or `using` where the user might hope an instance `Dispose()` method to be called but it is in fact not called.

Umbrella for enhanced-using feature: https://github.com/dotnet/roslyn/issues/28588</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32399</IssueID>
    <RepoID>1</RepoID>
    <Title>Cast with type conversion function in VB marks cast as removable when calling GetType</Title>
    <Description>**Version Used**: 
16.0.0 Preview 2.0 [28510.146.d16.0

**Steps to Reproduce**:

1. Open a VB project.
2. Enter the following code
```vb
Dim a = 2
Dim b = CStr(a).GetType
Console.WriteLine(b.FullName)
```
3.  Note the remove unnecessary cast fix showing up on the second line.  
4.  If you accept the fix, the code changes to
```vb
Dim a = 2
Dim b = a.GetType
Console.WriteLine(b.FullName)
```
Note that now the value of b is different.  In the first block, it evaluated to String.  In the second it evaluates to Int32.

This seems to also apply to other type conversion functions - https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/functions/type-conversion-functions
But only occurs with GetType (not other methods like ToString, Equals).

**Expected Behavior**:
There should not be a fix suggested for the second line to remove the 'unnecessary' cast as it changes the value of b

**Actual Behavior**:
An 'unnecessary' cast fix is shown and accepting the fix removes the cast and changes the value of b.
</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32398</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unused TypeSymbol.EqualsIgnoringTupleNames static readonly field.</Title>
    <Description>Closes #30657.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32397</IssueID>
    <RepoID>1</RepoID>
    <Title>Linux Mono - DestructorOverridesNonDestructor test failure</Title>
    <Description>Test logs - https://dnceng.visualstudio.com/public/_build/results?buildId=70682&amp;view=ms.vss-test-web.test-result-details
(Attempt 1)

```
Error message
Roslyn.Test.Utilities.ExecutionException : \nExecution failed for assembly '/opt/code/artifacts/tmp/Debug/RoslynTests'.\nExpected: \n~Derived\n~Base\n\nActual:   \n
Stack trace
  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&amp;)
  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0003b] in &lt;5a872f306a874e34bfe4796f739b7324&gt;:0 
```
</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32396</IssueID>
    <RepoID>1</RepoID>
    <Title>MissingMethodException when compiling with Visual Basic in a UWP Application since UWP version 6.1.9</Title>
    <Description>**Version Used**: Microsoft.CodeAnalysis.VisualBasic package version 2.10.0

**Steps to Reproduce**:
1. Create a new UWP Application in Visual Studio 2017
2. In the nuget package manager, select Microsoft.NETCore.UniversalWindowsPlatform package to a version &gt;= 6.1.9
3. In the nuget package manager, add a reference to the Microsoft.CodeAnalysis.VisualBasic package.
4. Add a button on the main page and in the Click event, write the following code :
```
VisualBasicCompilationOptions options = new VisualBasicCompilationOptions(
                        OutputKind.DynamicallyLinkedLibrary,
                        optimizationLevel: OptimizationLevel.Release,
                        embedVbCoreRuntime: false,
                        optionStrict: OptionStrict.Off,
                        optionInfer: true,
                        optionExplicit: true);

                VisualBasicCompilation compilation = VisualBasicCompilation.Create(
                    "Test",
                    new[] { VisualBasicSyntaxTree.ParseText("Public Class Test\r\nEnd Class").WithFilePath("Test.cs") },
                    new[] { MetadataReference.CreateFromFile(typeof(object).Assembly.Location) },
                    options);

                using (MemoryStream peStream = new MemoryStream())
                {
                    EmitResult emitResult = compilation.Emit(peStream);
                }
```

I attached a repro project : [ReproCompilation.zip](https://github.com/dotnet/roslyn/files/2749886/ReproCompilation.zip)

The problem does not happen if I change the Microsoft.NETCore.UniversalWindowsPlatform package to version 6.1.7. This could be a problem for our product if we need to move to a more recent version.

**Expected Behavior**:
Compilation should succeed.

**Actual Behavior**:
And exception is thrown :

&gt; System.MissingMethodException
  HResult=0x80131513
  Message=Method not found: 'Void System.Reflection.PortableExecutable.DebugDirectoryBuilder.AddPdbChecksumEntry(System.String, System.Collections.Immutable.ImmutableArray`1&lt;Byte&gt;)'.
  Source=Microsoft.CodeAnalysis
  Arborescence des appels de procédure :
   à Microsoft.Cci.PeWriter.WritePeToStream(EmitContext context, CommonMessageProvider messageProvider, Func`1 getPeStream, Func`1 getPortablePdbStreamOpt, PdbWriter nativePdbWriterOpt, String pdbPathOpt, Boolean metadataOnly, Boolean isDeterministic, Boolean emitTestCoverageData, Nullable`1 privateKeyOpt, CancellationToken cancellationToken)
   à Microsoft.CodeAnalysis.Compilation.SerializePeToStream(CommonPEModuleBuilder moduleBeingBuilt, DiagnosticBag metadataDiagnostics, CommonMessageProvider messageProvider, Func`1 getPeStream, Func`1 getMetadataPeStreamOpt, Func`1 getPortablePdbStreamOpt, PdbWriter nativePdbWriterOpt, String pdbPathOpt, Boolean metadataOnly, Boolean includePrivateMembers, Boolean isDeterministic, Boolean emitTestCoverageData, Nullable`1 privateKeyOpt, CancellationToken cancellationToken)
   à Microsoft.CodeAnalysis.Compilation.SerializeToPeStream(CommonPEModuleBuilder moduleBeingBuilt, EmitStreamProvider peStreamProvider, EmitStreamProvider metadataPEStreamProvider, EmitStreamProvider pdbStreamProvider, Func`2 testSymWriterFactory, DiagnosticBag diagnostics, Boolean metadataOnly, Boolean includePrivateMembers, Boolean emitTestCoverageData, String pePdbFilePath, Nullable`1 privateKeyOpt, CancellationToken cancellationToken)
   à Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream metadataPEStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, CompilationTestData testData, CancellationToken cancellationToken)
   à Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, Stream metadataPEStream, CancellationToken cancellationToken)
   à TestFocus.MainPage.&lt;&gt;c.&lt;Button_Click&gt;b__1_0() dans D:\Projets\Recherche\TestFocus\TestFocus\MainPage.xaml.cs :ligne 59
   à System.Threading.Tasks.Task`1.InnerInvoke()
   à System.Threading.Tasks.Task.&lt;&gt;c.&lt;.cctor&gt;b__276_1(Object obj)
   à System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32395</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn master-vs-deps | 20190111</Title>
    <Description>
    </Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32394</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32393</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32392</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32391</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32390</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32389</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler should not declare var as dynamic if it is the result of a function call with typed return value</Title>
    <Description>**VS 2017 C# Tool 2.10.0-beta2*: 

**Repro Steps**:

Function has return type `string`:

```
        private static string ToStringFromDynamic(dynamic dynamicString)
        {
           return dynamicString?.ToString() as string;
        }
```

Usage like this:

```
  dynamic y = string.Empty;
  var x = ToStringFromDynamic(y);
```


**Expected Behavior**:

x is declared as string because of the function return type.

**Actual Behavior**:

x is also declared as dynamic.


Interestingly if I declare `ToStringFromDynamic` as local func:

```
string ToStringFromDynamic(dynamic dynamicString)
        {
           return dynamicString?.ToString() as string;
        }

  dynamic y = string.Empty;
  var x = ToStringFromDynamic(y);
```

it works as expected.
</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32388</IssueID>
    <RepoID>1</RepoID>
    <Title>made high lighting not to crash VS and get better dump on failure</Title>
    <Description>this doesn't address root cause of this - https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763988
due to the dump we have is created at the point where await is used, dump is broken at the wrong spot and we only have callstack from inner exception and lost all context. this should let us to have better dump when this happen again

...

**Customer scenario**

a user moves around caret in editor and VS suddenly crashes.

**Bugs this fixes**

https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763988

**Workarounds, if any**

turn off high lighting features from tools-&gt;options-&gt;text editor-&gt;C#/VB

![image](https://user-images.githubusercontent.com/1333179/51030688-0e6af100-154f-11e9-8d50-e9dddc81cb3e.png)

**Risk**

Low

**Performance impact**

Should be low most of time except when it actually report NFW.

**Is this a regression from a previous update?**

No

**Root cause analysis**

one of highlighters is throwing and that cause us to crash VS. this change doesn't fix the root cause due to not enough info, but this change add code for us to get better dump next time and make sure VS doesn't crash due to high lighting failure.

**How was the bug found?**

Watson</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32387</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix formatting rule creates new lines inside a tuple</Title>
    <Description>Related bugs: [32113](https://github.com/dotnet/roslyn/issues/32113)

Current formatting rule will let this happen:
```
(Action, Action, Action) tuple = (
	() =&gt; { },   
	() =&gt; { },			
	() =&gt; { });
```
```
(Action, Action, Action) tuple = (
	() =&gt; { }
,   
	() =&gt; { }
,			
	() =&gt; { });
```
Seems like caused by we are not checking the case where a comma is the delimiter inside a tuple.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32386</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactoring feature to suggest to use recursive patterns</Title>
    <Description>
    </Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32385</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32384</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32383</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32382</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32381</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to dev16.0-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps
git reset --hard upstream/dev16.0-preview2-vs-deps
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32380</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32379</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32378</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32377</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32376</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove workaround for persistent errors</Title>
    <Description>Closes #32121</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32375</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid navigating to message severity items unless requested</Title>
    <Description>Fixes an occasional failure in the ErrorList test.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32374</IssueID>
    <RepoID>1</RepoID>
    <Title>Add IterationDataAttribute for easy test looping</Title>
    <Description>
    </Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32373</IssueID>
    <RepoID>1</RepoID>
    <Title>Typing closing brace of switch expression results in duplicate brace</Title>
    <Description>The deduplication of the closing brace works if the switch expression is typed on a single line.
But it doesn't work for a multi-line switch expression.
I expect the same behavior as typing a multi-line `if` statement with braces.

![switch-closing](https://user-images.githubusercontent.com/12466233/51007429-5280d600-14fc-11e9-830c-da9c2d65b501.gif)

CC @gafter 

Umbrella for recursive-patterns: https://github.com/dotnet/roslyn/issues/25935</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32372</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix NullReferenceException in LocalRewriter.MakeConversionNode</Title>
    <Description>Resolves #31587 essentially by dropping in @jaredpar's reproducer and adding a null-conditional operator.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32371</IssueID>
    <RepoID>1</RepoID>
    <Title>Add tests for nullable reference types.</Title>
    <Description>Closes #31862.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32370</IssueID>
    <RepoID>1</RepoID>
    <Title>Stepping through switch expression is wrong</Title>
    <Description>The whole statement with the switch expression never gets highlighted as I step forward.

![switch-stepping](https://user-images.githubusercontent.com/12466233/51006761-8c041200-14f9-11e9-8738-029e04f8ec81.gif)

When fixing this, please also verify that LUT (live unittesting) instrumentation works.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32369</IssueID>
    <RepoID>1</RepoID>
    <Title>Exception on casted object member access suggestions in VB</Title>
    <Description>**Version Used**: 
Debug build of roslyn on commit 16b21be788981784851d9aa946ec7e8406c76ea8

**Steps to Reproduce**:

1.  Checkout roslyn at above commit.
2.  Run the debug build via F5
3.  Create a new (or use existing VB project)
4.  Start with the following code.
```vb
Dim a = 1
Dim b = CStr(a)
```
5.  Then continue typing on the b expression and try and autosuggest a member of CStr(a) like Length
E.g.
```vb
Dim a = 1
Dim b = CStr(a).L
```
When you hit the .L, an exception should appear.

**Expected Behavior**:
CStr(a).L suggests .Length as a member to access.

**Actual Behavior**:
Exception is thrown.
Stacktrace - 
```
---------------------------
Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue
---------------------------
Unexpected value 'ExtensionMethod' of type 'System.String'



   at Roslyn.Utilities.ExceptionUtilities.UnexpectedValue(Object o)

   at Microsoft.CodeAnalysis.Classification.ClassificationTags.GetClassificationTypeName(String textTag)

   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetVisibleDisplayString(TaggedText part, Boolean includeLeftToRightMarker)

   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetRun(TaggedText part, IClassificationFormatMap formatMap, ClassificationTypeMap typeMap)

   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.GetTextBlock(ImmutableArray`1 parts)

   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl.ProcessDescription(Task`1 obj)

   at System.Threading.Tasks.ContinuationTaskFromResultTask`1.InnerInvoke()

   at System.Threading.Tasks.Task.Execute()

   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)

   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)

   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)

   at System.Threading.Tasks.SynchronizationContextTaskScheduler.PostCallback(Object obj)

   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)

   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)

   at System.Windows.Threading.DispatcherOperation.InvokeImpl()

   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)

   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)

   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)

   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)

   at System.Windows.Threading.DispatcherOperation.Invoke()

   at System.Windows.Threading.Dispatcher.ProcessQueue()

   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)

   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)

   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)

   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)

   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)

   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)

   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)


---------------------------
Abort   Retry   Ignore   
---------------------------

```

</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32368</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32367</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32366</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>11/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32365</IssueID>
    <RepoID>1</RepoID>
    <Title>RuntimeBinderException when trying to subscribe from C# to dynamic object event defined in C++/CLR module</Title>
    <Description>When I'm trying to subscribe in C# to event defined in C++/CLR module using dynamic object I get RuntimeBinderException {&amp;quot;The event 'Event' can only appear on the left hand side of += or -=&amp;quot;}

It works when dynamic object comes from C# module or when I use C++/CLR object directly (without dynamic). 

This problem doesn't occur in latest VS2017.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/399539/runtimebinderexception-when-trying-to-subscribe-fr.html
VSTS ticketId: 740220_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32364</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable + dynamic</Title>
    <Description>If there is defined class A which overloads + operator such that it returns always null then it is possible to write program throwing ArgumentNullException but has no warnings by dynamics.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/401974/nullable-dynamic.html
VSTS ticketId: 743594_
_These are the original issue comments:_

libor.drozdek on 12/7/2018, 01:58 AM (34 days ago): &lt;p&gt;I have problems with formatting when I use "insert Code" so I will post the code here:

```csharp
#nullable enable 
class Program
{
    private static void Main()
    {
        A obj = new A();
        var x = f(obj); 
        // Null reference exception but no warning
        x.ToString();
    }
    
    public static object f(dynamic a)
    {
        if (a == null)
            throw new System.Exception();

        return a + a;
    }
    
    public class A
    {
        public static A? operator +(A fst, A snd) =&gt; null;
    }
}
```

_These are the original issue solutions:_
(no solutions)

----
[jcouv update:] I referenced this issue in code. Please find those references before closing this issue.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>05/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32363</IssueID>
    <RepoID>1</RepoID>
    <Title>Using ternary operator with a type check</Title>
    <Description>The following code does not compile in VS2019, but works in VS2017:

```csharp
var test = new byte[5];
var res = test is byte[] ? "yes" : "no";
```

There error seems to be the parser thinking the '?' is trying to set byte[] to a nullable reference type and I see the error message:

'Feature nullable reference type is not available in C# 7.0.'

The parser should recognize the difference between a nullable type, and the ternary operator syntax.

The issue is resolved by converting the 'res' line to:

```csharp
var res = (test is byte[]) ? "yes": "no";
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/408856/using-ternary-operator-with-a-type-check.html
VSTS ticketId: 752025_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32362</IssueID>
    <RepoID>1</RepoID>
    <Title>C#8.0 feature block the past code</Title>
    <Description>```csharp
public static string PrintArray(object[] array)
  =&gt; string.Join(
    ",",
    array.Aggregate(
      new object[0].AsEnumerable(),
      (a, b) =&gt; a.Concat(b is object[] ? (object[]) b : new[] {b})));
```

in VS2019 perview, C# Console Project and target C# 7.3,this code can not compile.but it can compile in VS 2017 15.9.3.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/407690/c80-feature-block-the-past-code.html
VSTS ticketId: 750482_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32361</IssueID>
    <RepoID>1</RepoID>
    <Title>CS4009 should not be suppressed in the Error List window when set to "Build + Intellisense" VS2019</Title>
    <Description>Create a new console application containing this code. I reproduced this in both a .NET Core 3.0 and .NET Framework 4.7.2 project.

```csharp
class Program
{
    static async void Main(string[] args) { }
}
```

Open the Error List window, and set it to &amp;quot;Entire Solution&amp;quot;, no filter, and &amp;quot;Build Only&amp;quot;. Build the solution.

Observed and expected behavior: Error CS5001, error CS4009, and warning CS1998 appear in the Error List window.

Set the Error List window to &amp;quot;Build + Intellisense&amp;quot; instead of &amp;quot;Build Only&amp;quot;

Observed behavior: Error CS4009 is removed from the Error List window.

Expected behavior: Error CS4009 should not be removed from the Error List window, unless the user changes the code in a way that resolves the error.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/414443/cs4009-should-not-be-suppressed-in-the-error-list.html
VSTS ticketId: 756143_
_These are the original issue comments:_

Dale McCoy on 1/3/2019, 00:08 PM (7 days ago): &lt;p&gt;This looks to me like this is the Visual Studio 2019 version of https://github.com/dotnet/roslyn/issues/17259 and https://github.com/dotnet/roslyn/issues/29698&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32360</IssueID>
    <RepoID>1</RepoID>
    <Title>Peek Definition in C# ignores Language Version</Title>
    <Description>With right-click, peek definition (Alt+F12), the nullable reference types feature is reported as not being supported?

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/411186/peek-definition-in-c-ignores-language-version.html
VSTS ticketId: 753476_
_These are the original issue comments:_

johnm on 12/18/2018, 02:10 AM (23 days ago): &lt;p&gt;Not sure what happened to my attachments - peeking at code in the same solution, targeting C# 8, displays an error in the peek definition window, stating that nullable reference types are not supported in C# 7.3 (none of the projects in the solution targets this version).&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32358</IssueID>
    <RepoID>1</RepoID>
    <Title>C#8 with nullable compiler only checks code in constructors before producing CS8618 warning</Title>
    <Description>The following code snippet initializes both member variables, but, when compiled with C# 8 with nullable enabled, produces the warning:

warning CS8618: Non-nullable field 'm_str1' is uninitialized.

		// Demonstrates CS8618 doesn't check methods called from the constructor for initialisation
		class MyClass
		{
			private string m_str1;
			private string m_str2;

			public MyClass()    // warning CS8618: Non-nullable field 'm_str1' is uninitialized.
			{
				Init();
				m_str2 = string.Empty;	// No warning for m_str2
			}

			private void Init()
			{
				m_str1 = string.Empty;
			}
		}

To repro, just paste the snippet into a C# console project and set it to build with the V8 compiler with #nullable enable set.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/412341/c8-with-nullable-compiler-only-checks-code-in-cons.html
VSTS ticketId: 754367_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32357</IssueID>
    <RepoID>1</RepoID>
    <Title>Suspicious logic in ```LocalDataFlowPass&lt;TLocalState&gt;.GetOrCreateSlot``` method</Title>
    <Description>```
        protected int GetOrCreateSlot(Symbol symbol, int containingSlot = 0)
        {
            if (symbol.Kind == SymbolKind.RangeVariable) return -1;

            containingSlot = DescendThroughTupleRestFields(ref symbol, containingSlot, forceContainingSlotsToExist: true);

            VariableIdentifier identifier = new VariableIdentifier(symbol, containingSlot);
            int slot;

            // Since analysis may proceed in multiple passes, it is possible the slot is already assigned.
            if (!_variableSlot.TryGetValue(identifier, out slot))
...
```
It looks like DescendThroughTupleRestFields can return -1. Does it make sense to continue in this case? It looks like we will go ahead and allocate a new slot for the member even in this case. It also looks like that slot is going to be shared across distinct original containers, effectively treating members of different containers as the same storage location. 
</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32356</IssueID>
    <RepoID>1</RepoID>
    <Title>c# 8 null checking in lambdas</Title>
    <Description>It seems null-elimination of class members is not working in lambdas

In the attached code you will see that when the member &amp;quot;Parameters&amp;quot; is used outside the lambda, the compiler understands it cannot be null. When it's captured in the lambda it doesn't. 

Either there's something about ref values in closures I'm not getting, or there's no good reason this happens.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/414633/c-8-null-checking-in-lambdas.html
VSTS ticketId: 756306_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>27/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32355</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler Issues</Title>
    <Description>This code compiled in VS2017

static void Test() {
	Collection&amp;lt;int&amp;gt; c = null;
	// compiles in VS 15.9
	var v1 = c is int[] ? (int[])c : c.ToArray&amp;lt;int&amp;gt;();

	// compiles in VS 15.9 and VS 16.0
	var v2 = (c is int[]) ? (int[])c : c.ToArray&amp;lt;int&amp;gt;();
}

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/420292/compiler-issues-1.html
VSTS ticketId: 761215_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32354</IssueID>
    <RepoID>1</RepoID>
    <Title>Project doesn't compile with c#8.0</Title>
    <Description>protected virtual object ReformatReadValue(object value)
{ 
...
return value is byte[] ? new Guid((byte[])value) : new Guid(value.ToString());
}

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/408628/project-doesnt-compile-with-c80.html
VSTS ticketId: 751838_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32353</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove unnecessary test hooks</Title>
    <Description>These hooks are unused, and if code ever did want to wait for a dialog to show, there are better ways to do so.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32352</IssueID>
    <RepoID>1</RepoID>
    <Title>NullReferenceException: CS$&lt;&gt;8__locals0 was null.</Title>
    <Description>When i use a variable in a linq expression inside a if statement that evaluates to false, and in debug mode drags execution pointer inside the If statement, i get a Null Ref exeption.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/424252/nullreferenceexception-cs8-locals0-was-null.html
VSTS ticketId: 763734_
_These are the original issue comments:_

Helje, Peter on 1/10/2019, 07:17 AM (6 hours ago): &lt;p&gt;This problem hav been reported before:&lt;br&gt;&lt;a target='_blank' href="https://developercommunity.visualstudio.com/content/problem/190606/nullreferenceexception-cs8-locals1.html" target="_blank"&gt;https://developercommunity.visualstudio.com/content/problem/190606/nullreferenceexception-cs8-locals1.html&lt;/a&gt;&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32351</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve error recovery in type argument list</Title>
    <Description>This tries to prevent entire methods/properties/fields/classes being mangled by the parser when a '&gt;' token is missing in certain locations. 

For example:

```csharp
public class A : List&lt;int
{
    public void M()
    {
        M();
        C.M();
    }
}

public class B
{
    
    public List&lt;int M()
    {
        var x = 42;
    }
    
    public List&lt;int F = 42;
    
    public List&lt;int P {get;set;}
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABAzAAmwCZ8BBfEfAGQEtYAeGgOxgFgAoAbw/18IOwAWfAFkAFAEoefbuz7zRkgNzSF+AMIA6cRJVy+AXw5H2HPIRIAhDrPmr+1OjEYtFU/b1tr8ANwgJ8AA98AF58QSI9eRM7DwdaBmYYfAAxUPDI+3tzBOck/AAFfE4AczgYJShypRMTDiA==

The relevant issue is #24642
A previous closed PR is at https://github.com/dotnet/roslyn/pull/32124</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32350</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32349</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32348</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32347</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32346</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to dev16.0-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps
git reset --hard upstream/dev16.0-preview2-vs-deps
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32345</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32344</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32343</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32342</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32341</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix default color check used by enhanced color experiment</Title>
    <Description>Since enhanced colors are only applied when the user has default colors configured, check for other color values that represent the 'default' color for a classification.

**Customer scenario**
User is part of the experiment flight or opt-ins to enhanced colors and they fail to apply despite having default colors.

**Bugs this fixes**

**Workarounds, if any**
-	Start VS
-	Ensure ‘enhanced colors’ are disabled in the Preview Features page
-	Click ‘Use Defaults’ on the Fonts and Colors page and click OK
-	Without restarting, Go back into Preview Features and enable ‘enhanced colors’ and click OK

**Risk**
**Performance impact**
Low.

**Is this a regression from a previous update?**
No, this is the result of a feature introduced in preview2.

**Root cause analysis**
In some configurations the experiment fails to apply new colors due to the color cache not having been initialized.

**How was the bug found?**
When users internally went to opt-in and the colors failed to apply.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32340</IssueID>
    <RepoID>1</RepoID>
    <Title>Prevent unnecessary cast warning for required casts in with statements </Title>
    <Description>Issue - https://github.com/dotnet/roslyn/issues/30617

This adds an additional check for with statements to ensure that invalid cast removal suggestions are not given.

Q:  Currently it will only check if the cast is unnecessary by looking at the type of the cast with and without replacement.  It does not check downward into the with block to see if the resultant type actually references the type.  This means that potentially unnecessary casts will not be suggested to fix when the type is not referenced in the with block.
Should we do this check as well?  </Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32339</IssueID>
    <RepoID>1</RepoID>
    <Title>VB IMethodXML does not handle array literals correctly</Title>
    <Description>```VB
Sub M()
    Dim o As Object = {1, 2, 3}
End Sub
```

The code above produces the following XML through the IMethodXML interface:

```XML
&lt;Block&gt;
    &lt;Local line="1"&gt;
        &lt;Type&gt;System.Object&lt;/Type&gt;
        &lt;Name&gt;o&lt;/Name&gt;
        &lt;Expression&gt;
            &lt;Expression&gt;
                &lt;Literal&gt;
                    &lt;Number type="System.Int32"&gt;1&lt;/Number&gt;
                &lt;/Literal&gt;
            &lt;/Expression&gt;
            &lt;Expression&gt;
                &lt;Literal&gt;
                    &lt;Number type="System.Int32"&gt;2&lt;/Number&gt;
                &lt;/Literal&gt;
            &lt;/Expression&gt;
            &lt;Expression&gt;
                &lt;Literal&gt;
                    &lt;Number type="System.Int32"&gt;3&lt;/Number&gt;
                &lt;/Literal&gt;
            &lt;/Expression&gt;
        &lt;/Expression&gt;
    &lt;/Local&gt;
&lt;/Block&gt;
```

However, that gets parsed incorrectly by the WinForms CodeDom XML processor (it ends up just picking the first expression rather than creating an array of expressions). Additional `&lt;Literal&gt;` and `&lt;Array&gt;` elements must also be generated, like so:

```XML
&lt;Block&gt;
    &lt;Local line=""1""&gt;
        &lt;Type&gt;System.Object&lt;/Type&gt;
        &lt;Name&gt;o&lt;/Name&gt;
        &lt;Expression&gt;
            &lt;Literal&gt;
                &lt;Array&gt;
                    &lt;Expression&gt;
                        &lt;Literal&gt;
                            &lt;Number type=""System.Int32""&gt;1&lt;/Number&gt;
                        &lt;/Literal&gt;
                    &lt;/Expression&gt;
                    &lt;Expression&gt;
                        &lt;Literal&gt;
                            &lt;Number type=""System.Int32""&gt;2&lt;/Number&gt;
                        &lt;/Literal&gt;
                    &lt;/Expression&gt;
                    &lt;Expression&gt;
                        &lt;Literal&gt;
                            &lt;Number type=""System.Int32""&gt;3&lt;/Number&gt;
                        &lt;/Literal&gt;
                    &lt;/Expression&gt;
                &lt;/Array&gt;
            &lt;/Literal&gt;
        &lt;/Expression&gt;
    &lt;/Local&gt;
&lt;/Block&gt;
```</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32338</IssueID>
    <RepoID>1</RepoID>
    <Title>Dropping nullability of struct field of unconstrained type</Title>
    <Description>No warning should be reported for `t.F.ToString()`:
```C#
#pragma warning disable 649

struct S&lt;T&gt;
{
    internal T F;
}

class Program
{
    static void M&lt;T&gt;(S&lt;T&gt; s)
    {
        if (s.F == null) return;
        var t = s;
        t.F.ToString(); // warning: maybe null
    }
}
```</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32337</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete statement - don't complete when multiple characters are selected</Title>
    <Description>Update Complete Statement to return early when multiple characters are selected.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>12/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32336</IssueID>
    <RepoID>1</RepoID>
    <Title>Align VB implementation with recent changes around interface implementations and tuple types in C#.</Title>
    <Description>This is a follow up on https://github.com/dotnet/roslyn/pull/32041 on VB side.
Closes #30655.
Closes #31977.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32335</IssueID>
    <RepoID>1</RepoID>
    <Title>Incorrect possible dereference of a null reference after assertion method</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code

```cs
#nullable enable

using System.Runtime.CompilerServices;

public class C
{
  public extern void M([EnsuresNotNull] C? c1);

  public void Test1(C? c1, C? c2, C? c3)
  {
    M(c1?.Method());

    c1.ToString(); // warning
  }
    
  public extern C? Method();
}

namespace System.Runtime.CompilerServices
{
  class EnsuresNotNullAttribute : System.Attribute { }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWAChGABABguYEYA6AJX1wwAlmDjcAwgHswAByHkEAZUQA3IQGM4UANyMWAZg4AmCuMYBvRhQ6G4AD3gJcHACwUAsgAoA2gFFcUPgIWgBykjAhRIQAuqYA/BTqnACUukwM1syGzG4AKlownJ7iCUlI8YlG5SWJ+slWFJYZ1h6eSXHc7nAwABaSKJ7JqXrN1kncuZKKMAhCuADmg9oUAPQrFADuEE5z8w0Avg3WDVlUDojONV29/UuMh+k0olAyEJocPPyCImJSsvKIZQINSaKAWE4mfyBYJQMIRKIAQRgMyEwHw8AoIA+3CRKLRGPMFAeDyAA==

**Expected Behavior**:

No warnings. `c1?.Method()` is known to be not null and consequently `c1` is known to be not null.

**Actual Behavior**:
Incorrect warning
`warning CS8602: Possible dereference of a null reference.`</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32334</IssueID>
    <RepoID>1</RepoID>
    <Title>Prevent cascading error: foreach statement cannot operate on variables of type '?'</Title>
    <Description>**Version Used**: master

**Steps to Reproduce**:
Compile the following code:

```csharp
public class C {
    public void M() {
        var a = A;
        foreach(var item in a);
    }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEDMACFAmDBhDAbwFgAoDCrTFAFgwFkAKASiLMo4wDcIEMIMAXgwBBANztOFAGYB7BHAgBjABaMefAJbwwGTQDt+zCeUoBfMmaA===

**Expected Behavior**:

One error is produced

`error CS0103: The name 'A' does not exist in the current context`

**Actual Behavior**:

Two error are produced

```
error CS0103: The name 'A' does not exist in the current context
error CS1579: foreach statement cannot operate on variables of type '?' because '?' does not contain a public instance definition for 'GetEnumerator'
```

I would be happy to fix this myself
</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>20/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32333</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32332</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32331</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32330</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32329</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32328</IssueID>
    <RepoID>1</RepoID>
    <Title>Inference of non-nullability of receiver should happen before evaluating arguments</Title>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code

```cs
#nullable enable
class C
{
  public static void Main()
  {
      new C().M(new C());
  }

  public string M(C? c)
  {
    if (c?.M(c = null) != null)
    {
      c.ToString();
    }

    return "";
  }
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGFGBvRiipgMz8AjADZ+AFgoBZCAEtcACgCUvCjwZ8tFXHADuHFQDppi3QfYrlAbjUBfRmsEiADDMXsA/BQDGqzepqfD5GACoA9gDKMAgKAOYqtgF8cgBmFIo+niaZFAC8OkSEyhQAhAUExP7aGtrBYVEx8YlBFA4MrUwA7BQARL1JfO12QA=

**Expected Behavior**:
`warning CS8602: Possible dereference of a null reference.` reported for `c.ToString()` call.

**Actual Behavior**:
No warnings, the program crashes with `System.NullReferenceException` at runtime.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32327</IssueID>
    <RepoID>1</RepoID>
    <Title>CS8019 occurs in the &lt;auto-generated/&gt; files in .net core projects.</Title>
    <Description>**Version Used**: 
VS 2017 15.9.4-15.9.5

**Steps to Reproduce**:
Please check this [repo ](https://github.com/meteogish/CodeAnalysisTest) I've created.

or:

1. 

Use VS 2017
Enable [full solution analysis](https://docs.microsoft.com/en-us/visualstudio/code-quality/how-to-enable-and-disable-full-solution-analysis-for-managed-code?view=vs-2017).
Create an empty ASP Net Core 2.1 project from a template.
Create NUnit-Tests .net core project from a template.

2.
Add ruleset file to solution folder with CS8019 rule turned on to Warning or an Error.

3. 
In each csproj in PropertyGroup add those lines:
`
    &lt;CodeAnalysisRuleSet&gt;$(SolutionDir)Test.ruleset&lt;/CodeAnalysisRuleSet&gt;
    &lt;GenerateAssemblyInfo&gt;false&lt;/GenerateAssemblyInfo&gt;
    &lt;TargetFrameworkMonikerAssemblyAttributesFileClean&gt;False&lt;/TargetFrameworkMonikerAssemblyAttributesFileClean&gt;
    &lt;TargetFrameworkMonikerAssemblyAttributesPath&gt;$(SolutionDir)SharedAssemblyAttributes.cs&lt;/TargetFrameworkMonikerAssemblyAttributesPath&gt;
`

Here we are using this [workaround ](http://stackoverflow.com/a/35553079/1108891) for eliminating CS8019 analysis on AssemblyAttributes generated files.

But in the Error list you should notice CS8019 errors/warnings and some of them refer to auto-generated files placed in the /obj folder.

![image](https://user-images.githubusercontent.com/11160217/50966452-387fcd00-14d5-11e9-91fa-b6c2102c6757.png)

![image](https://user-images.githubusercontent.com/11160217/50966518-741a9700-14d5-11e9-9f6d-569092d4973e.png)

![image](https://user-images.githubusercontent.com/11160217/50966551-8563a380-14d5-11e9-8541-1a82dca785df.png)

According to [this comment](https://github.com/dotnet/roslyn/issues/24976#issuecomment-406873296)  CS8019 does not exclude those generated files. I even can not suppress the errors to GlobalSuppressions.cs file because it is CS (c# compiler level errors)

Is there a workaround for it like we have for AssemblyInfo files?
Is there a solution to suppress those errors only for those files or maybe there is something I am doing wrong here?</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32326</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32325</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32324</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to dev16.0-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps
git reset --hard upstream/dev16.0-preview2-vs-deps
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32323</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32322</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32321</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32320</IssueID>
    <RepoID>1</RepoID>
    <Title>Type references count are not shown for const in C#</Title>
    <Description>**Version Used**: VS 2017 15.8.3, 15.9.1, 15.9.5

**Steps to Reproduce**:

1. Create any C# class/code with const
2. Use the const in other class or in other method in the same class
3. Look at the const declaration

**Expected Behavior**:
The const should show how many (count of total) references in the C# project

**Actual Behavior**:
Total references are not shown.

Sample code:
For const:
```csharp
    public class MiscelanousConstants
    {
        public const decimal SPEED_OF_LIGHT = 299792458M;
        public const decimal MATH_PI = 3.14123123M;
        public const decimal ONE_PARSEC = 3.26M;
    }

``` 
Sample use of the const:

```csharp
    class AstronomicDistanceCalculator
    {
        public static decimal CalculateLightYears(decimal yearsFraction)
        {
            return Decimal.Multiply(yearsFraction, Decimal.Multiply(MiscelanousConstants.SPEED_OF_LIGHT, (365 * 24 *3600)));
        }
        public static decimal ConvertParsecToLightYears(decimal parsec)
        {
            return (decimal)(parsec * CalculateLightYears(MiscelanousConstants.ONE_PARSEC));
        }
        public static decimal CalculateLightSeconds(Int32 seconds)
        {
            return Decimal.Multiply((decimal)seconds, MiscelanousConstants.SPEED_OF_LIGHT);
        }
    }
```

```csharp
    class Program
    {
        const decimal ABSOLUTE_ZERO = 0.0M;

        static void Main(string[] args)
        {
            decimal oneLightSecond = MiscelanousConstants.SPEED_OF_LIGHT;
            Console.WriteLine("one light second = " + oneLightSecond + "m");
            Console.WriteLine("one parsec = " + AstronomicDistanceCalculator.ConvertParsecToLightYears(1) + "m");
            Console.WriteLine("zero = " + ABSOLUTE_ZERO);
            Console.ReadLine();
        }
    }
```

On VS 2017, the const declaration has no total of type references:

![image](https://user-images.githubusercontent.com/8773147/50963597-bfe23600-14ff-11e9-92a3-f324df6f2481.png)

Only the enclosing `MiscelanousConstants` class that has the types has total references shown.

But when using "Find All References" on `MiscelanousConstants.SPEED_OF_LIGHT`, I get correct number of the references:

![image](https://user-images.githubusercontent.com/8773147/50963669-ec964d80-14ff-11e9-99f8-8619d5cbdff6.png)

The same problem happens on the const of ABSOLUTE_ZERO:

![image](https://user-images.githubusercontent.com/8773147/50963920-9aa1f780-1500-11e9-8694-c40533a99d31.png)


Finally, my questions are:

1. Is this by design?
2. If is this by design, why const is not showing total references before the declaration, like other type/member such as class, method, field and properties?

If this is not by design and easy to fix, I'd like to propose a PR later.

</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32319</IssueID>
    <RepoID>1</RepoID>
    <Title>LOC CHECKIN | dotnet/roslyn master-vs-deps | 20190110</Title>
    <Description>
    </Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32318</IssueID>
    <RepoID>1</RepoID>
    <Title>Parsing of `await using` incorrectly reports about `async streams` feature</Title>
    <Description>The parsing for `await using` should not use `IDS_FeatureAsyncStreams`. Once the parsing is fixed, we can probably remove the duplicate diagnostic.

```C#
        [Fact]
        public void AwaitUsingDeclarationsWithLangVer7_3()
        {
            var source = @"
using System;
using System.Threading.Tasks;
class C
{
    static async Task Main()
    {
        await using IAsyncDisposable x = null;
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}";
            CreateCompilationWithTasksExtensions(source, parseOptions: TestOptions.Regular7_3).VerifyDiagnostics(
                // (8,9): error CS8370: Feature 'async streams' is not available in C# 7.3. Please use language version 8.0 or greater.
                //         await using IAsyncDisposable x = null;
                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7_3, "await").WithArguments("async streams", "8.0").WithLocation(8, 9),
                // (8,15): error CS8370: Feature 'using declarations' is not available in C# 7.3. Please use language version 8.0 or greater.
                //         await using IAsyncDisposable x = null;
                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7_3, "using").WithArguments("using declarations", "8.0").WithLocation(8, 15)
                );
        }
```

Umbrella for enhanced-using feature: https://github.com/dotnet/roslyn/issues/28588</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32317</IssueID>
    <RepoID>1</RepoID>
    <Title>Allow pattern-based disposal in `foreach`</Title>
    <Description>It seems that `foreach` only every binds disposal via the interface, and never via pattern-based approach.
I expect that `foreach` would bind pattern-based `Dispose()` methods on ref struct enumerators, at least.

Note: in that scenario, the compiler should not produce `enumerator as IDisposable` logic.

Note: there is a similar issue with pattern-based disposal in `await foreach`, except that we likely need to lift the ref struct restriction there. (see https://github.com/dotnet/roslyn/issues/32316)

Update (1/16): from [LDM today](https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-01-16.md#pattern-based-disposal-in-await-foreach), we've decided that extension methods will not contribute to pattern-based disposal, even if we decide they contribute for binding pattern-based `GetEnumerator()` in a `foreach`.

Tagging @agocke 

----

Per [notes](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-12-12.md#when-we-start-recognizing-pattern-dispose-do-we-call-it-in-foreach) (emphasis mine):


### When we start recognizing pattern Dispose, do we call it in foreach?

__Certainly__, it seems very important for the feature. Since a ref struct
cannot implement interfaces, pattern Dispose is the only way to implement
disposal.

There are a number of possible breaking changes:

1. A pattern enumerable type did not implement IDisposable, but had a
   Dispose method. This method would now be call.
2. If there are two Dispose extension methods, that will now produce
   an ambiguity and thus a compilation error.

**Conclusion**

Let's narrow the pattern-based Dispose change down to ref structs only.
This means every other type will be required to implement IDisposable.

----
Umbrella for enhanced-using feature: https://github.com/dotnet/roslyn/issues/28588</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32316</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: `await foreach` doesn't dispose result from `ConfigureAwait`</Title>
    <Description>`ConfiguredCancelableAsyncEnumerable&lt;T&gt;.Enumerator.DisposeAsync()` returns `ConfiguredValueTaskAwaitable`, which doesn't match the interface.

The problem is a side-effect of the recent decision to restrict pattern-based disposal to ref structs. Maybe we need to relax that restriction for async case.

Note: when we implement pattern-based disposal in `await foreach` (on any type), then we should also implement pattern-based disposal in `await using` (statements or declarations, also on any type).

Relates to API https://github.com/dotnet/corefx/issues/33909

Umbrella for async-streams feature: https://github.com/dotnet/roslyn/issues/24037</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32315</IssueID>
    <RepoID>1</RepoID>
    <Title>Address PROTOTYPE comment for control flow graph on switch expression</Title>
    <Description>A PROTOTYPE comment inadvertently made it into a main branch. Converting it to an issue.

```C#
        public override IOperation VisitSwitchExpression(ISwitchExpressionOperation operation, int? captureIdForResult)
        {
            // PROTOTYPE(recusrive-patterns): This is known not to be correct or working.

            // expression switch { pat1 when g1 =&gt; e1, pat2 when g2 =&gt; e2 }
            //
            // becomes
            //
            // captureInput = expression
            // START scope 1 (arm1 locals)
            // GotoIfFalse (captureInput is pat1 &amp;&amp; g1) label1;
            // captureOutput = e1
            // goto afterSwitch
            // label1:
            // END scope 1
            // START scope 2
            // GotoIfFalse (captureInput is pat2 &amp;&amp; g2) label2;
            // captureOutput = e2
            // goto afterSwitch
            // label2:
            // END scope 2
            // throw new switch failure
            // afterSwitch:
            // result = captureOutput

            INamedTypeSymbol booleanType = _compilation.GetSpecialType(SpecialType.System_Boolean);
            SpillEvalStack();
            RegionBuilder resultCaptureRegion = _currentRegion;
            int captureOutput = captureIdForResult ?? GetNextCaptureId(resultCaptureRegion);
            var capturedInput = VisitAndCapture(operation.Value);
            var afterSwitch = new BasicBlockBuilder(BasicBlockKind.Block);

            foreach (var arm in operation.Arms)
            {
                // START scope (arm locals)
                var armScopeRegion = new RegionBuilder(ControlFlowRegionKind.LocalLifetime, locals: arm.Locals);
                EnterRegion(armScopeRegion);
                var afterArm = new BasicBlockBuilder(BasicBlockKind.Block);

                // GotoIfFalse (captureInput is pat1) label;
                {
                    EvalStackFrame frame = PushStackFrame();
                    var visitedPattern = (IPatternOperation)Visit(arm.Pattern);
                    var patternTest = new IsPatternOperation(
                        OperationCloner.CloneOperation(capturedInput), visitedPattern, semanticModel: null,
                        arm.Syntax, booleanType, default, IsImplicit(arm));
                    ConditionalBranch(patternTest, jumpIfTrue: false, afterArm);
                    _currentBasicBlock = null;
                    PopStackFrameAndLeaveRegion(frame);
                }

                // GotoIfFalse (guard) afterArm;
                if (arm.Guard != null)
                {
                    EvalStackFrame frame = PushStackFrame();
                    IOperation guard = Visit(arm.Guard);
                    ConditionalBranch(guard, jumpIfTrue: false, afterArm);
                    _currentBasicBlock = null;
                    PopStackFrameAndLeaveRegion(frame);
                }

                // captureOutput = e
                VisitAndCapture(arm.Value, captureOutput);

                // goto afterSwitch
                UnconditionalBranch(afterSwitch);

                // afterArm:
                AppendNewBlock(afterArm);

                // END scope 1
                LeaveRegion(); // armScopeRegion
            }

            LeaveRegionsUpTo(resultCaptureRegion);

            // throw new SwitchExpressionException
            var matchFailureCtor =
                (IMethodSymbol)_compilation.CommonGetWellKnownTypeMember(WellKnownMember.System_Runtime_CompilerServices_SwitchExpressionException__ctor) ??
                (IMethodSymbol)_compilation.CommonGetWellKnownTypeMember(WellKnownMember.System_InvalidOperationException__ctor);
            var makeException = (matchFailureCtor is null)
                ? MakeInvalidOperation(operation.Syntax, type: _compilation.GetSpecialType(SpecialType.System_Object), ImmutableArray&lt;IOperation&gt;.Empty)
                : new ObjectCreationOperation(
                    matchFailureCtor, initializer: null, ImmutableArray&lt;IArgumentOperation&gt;.Empty, semanticModel: null, operation.Syntax,
                    type: matchFailureCtor.ContainingType, constantValue: default, isImplicit: true);
            LinkThrowStatement(makeException);
            _currentBasicBlock = null;

            // afterSwitch:
            AppendNewBlock(afterSwitch, linkToPrevious: false);

            // result = captureOutput
            return GetCaptureReference(captureOutput, operation);
        }
```</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32314</IssueID>
    <RepoID>1</RepoID>
    <Title>Feature/move to namespace</Title>
    <Description>**Implement MoveToNamespace feature**

Move to namespace allows a user to move all symbols in a context
to a different namespace, whether it's a new one or existing. This is
different from renaming a namespace as not all symbols in the namespace
are moved, only ones within the current document.

It relies on the IChangeNamespaceService implementation to do the heavy
lifting. Since the current implementation only supports C#, this new
feature will as well.

After this is checked in, when a user has the cursor inside a namespace
declaration that has no nested namespace declarations within it, a code
fix will be suggested to pop up a dialog and help the user choose a new
namespace.

#32314 

![image](https://user-images.githubusercontent.com/475144/51065128-14e18300-15b8-11e9-84e2-3f43f50a54fa.png)

![image](https://user-images.githubusercontent.com/475144/51065140-29258000-15b8-11e9-8ae4-0dafe874dcb0.png)
</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>04/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32313</IssueID>
    <RepoID>1</RepoID>
    <Title>Finish the project context implementation for the free-threaded project system shims</Title>
    <Description>The handling for determination of project contexts wasn't finished when we merged the work for free-threaded project system shims. This completes the work and fixes a bunch of issues as well.

This should fix the Roslyn side of #21358, but there are also some project system bugs that have been found too that will impact it.

Reviewers are **strongly** encouraged to go commit-by-commit here.

Work remaining:

- [x] Remove the existing hack around skipping locks when we remove projects, since those don't work correctly if just files are removed.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

The customer has a multitargeting SDK project, linked files, or is using shared asset projects. If they try to use the dropdown in the editor to change the context, it won't work reliably or at all.

### Bugs this fixes

#31019
#31365
#21358 (but still needs more fixes from the Visual Studio side, it seems)

### Workarounds, if any

Only workaround would be to use 15.9.

### Risk

Moderate: this is a technical area in the code and interacts with a number of Visual Studio components. In the process of writing this we've discovered at least three bugs in _other_ components, to give a sense of how tricky this area is!

### Performance impact

Better; this also fixes a few memory leaks that would have leaked some project information when projects and solutions were closed.

### Is this a regression from a previous update?

Yes.

### Root cause analysis

This was a known limitation when we merged the original free-threaded project initialization code. This only impacts a subset of our users, and when they do hit it is supremely annoying, but it was best to get all the other stuff in their hands and worry about this later. The existing code already had some bugs too; since we were rewriting all of it meant it was a good opportunity to get it right.

### How was the bug found?

Various bugs reported from customers, but this was tracked internally in our own backlog.

&lt;/details&gt;
</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32312</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32311</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32310</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32309</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32308</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32307</IssueID>
    <RepoID>1</RepoID>
    <Title>Completion window tooltip for constants/extension methods always show…</Title>
    <Description>### Customer scenario

**Scenario**
1. A completion popup is displayed.  
2. User sets focus on an item in the popup which corresponds either to an _extension method_ or to a _constant_.

**Expected**
A tooltip for the extension method or for the constant is displayed providing description based on their documentation.

**Actual**
NFW happens
Tooltip displays "..."

### Bugs this fixes
Fixes https://github.com/dotnet/roslyn/issues/32209
Fixes https://github.com/dotnet/roslyn/issues/32369

### Workarounds, if any
None

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
Yes

### Root cause analysis
We found two instances of code providing tagged text classification for tooltips. Both them provide same functionality and used in different scenarios. One of them was updated by https://github.com/dotnet/roslyn/pull/31231.

We should just keep a single structure for this functionality.

### How was the bug found?
Team validation</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32554</IssueID>
    <RepoID>1</RepoID>
    <Title>IntelliSense errors for dependency references in newly created Service Fabric project</Title>
    <Description>Regression in 16.0.

1. Launch the new project dialog
2. Create a Service Fabric Application project
3. Select the .NET Core Actor Service template from the New Service Fabric Service dialog
4. Wait for the solution to load and dependencies to restore
5. Check the Error List window and ensure the filter is set to show IntelliSense errors

Expected:
No IntelliSense errors should be reported (dependencies are restored and all references are resolvable).

Actual:
All references to dependencies (NuGet, SDK, or Project references) in the primary service project (Actor1 by default) are flagged as IntelliSense errors.

The errors are only reported for the newly created project and don't reappear after closing and re-opening the solution or unloading and reloading the specific project the errors are associated with. A full build succeeds without any errors or warnings, but doesn't clear the IntelliSense errors.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32306</IssueID>
    <RepoID>1</RepoID>
    <Title>Avoid retrying work after the queue is cancelled</Title>
    <Description>Fixes #28062

&lt;details&gt;&lt;summary&gt;Ask Mode&lt;/summary&gt;

### Customer scenario

No direct reproducer is known.

### Bugs this fixes

#28062

### Workarounds, if any

None.

### Risk

Very low. This change avoids scheduling work items in three specific queues after global shutdown is requested.

### Performance impact

This change may improve test performance, but is unlikely to have an observable impact elsewhere.

### Is this a regression from a previous update?

No.

### Root cause analysis

If project or document processing was cancelled because the workspace was shut down, items could be rescheduled for execution and never actually execute.

### How was the bug found?

Caught by automated testing.

### Test documentation updated?

N/A

&lt;/details&gt;</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32305</IssueID>
    <RepoID>1</RepoID>
    <Title>Quite confusing error message CS0282</Title>
    <Description>**Version Used**: Microsoft (R) Visual C# Compiler version 2.8.2.62916 (2ad4aabc)

**Steps to Reproduce**:

1. Compile following code
```c#
using System;
using System.Runtime.InteropServices;

partial class Exception2
{
	protected event Action a;
}

[StructLayout (LayoutKind.Sequential)]
partial class Exception2
{
	protected event Action b;
}
```

**Expected Behavior**:

A warning which makes sense

**Actual Behavior**:

```warning CS0282: There is no defined ordering between fields in multiple declarations of partial struct 'Exception2'. To specify an ordering, all instance fields must be in the same declaration.```

- there is no struct 'Exception2' (it's a class)
- referring to events underlying implementation fields is also confusing
</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32304</IssueID>
    <RepoID>1</RepoID>
    <Title>Non-nullable fields of default struct value should be treated as nullable</Title>
    <Description>Fixes #30731</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32303</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32302</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32301</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32300</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32299</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to dev16.0-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps
git reset --hard upstream/dev16.0-preview2-vs-deps
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32298</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32297</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32296</IssueID>
    <RepoID>1</RepoID>
    <Title>Add missed space in markdown header</Title>
    <Description>
    </Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32295</IssueID>
    <RepoID>1</RepoID>
    <Title>Need documentation page itemizing the command handling chains</Title>
    <Description>From PR comments https://github.com/dotnet/roslyn/pull/30743#discussion_r245030803 and https://github.com/dotnet/roslyn/pull/30743#discussion_r246420636

We should document command handling chains </Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32294</IssueID>
    <RepoID>1</RepoID>
    <Title>Skip flaky test Test_TagSourceDiffer</Title>
    <Description>#28062 tracks fixing and unskipping the test</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32293</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle null value for `IDeclarationPatternOperation.DeclaredSymbol`</Title>
    <Description>https://github.com/dotnet/roslyn/commit/6224a5c2feb8c9096cf5765f3d8d2ded396e7e88#diff-b68aa1802251151217571a56d9bfd2b8R31 changed the semantics of `IDeclarationPatternOperation` to allow null `DeclaredSymbol`. Fix SymbolUsageAnalysis invoked by unused parameters/values analyzer to handle this case. Confirmed the NRE in the unit test prior to the fix.

Fixes #32287</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32292</IssueID>
    <RepoID>1</RepoID>
    <Title>Permit a trailing comma inside a switch expression</Title>
    <Description>Per LDM 2019-01-09 we have accepted the proposal in https://github.com/dotnet/csharplang/issues/2098 to allow a trailing comma inside a switch expression
``` c#
_ = e switch
    {
        1 =&gt; 2,
        3 =&gt; 4, // comma now allowed here
    }
```
Similarly, we have accepted a proposal to allow a trailing comma inside a property subpattern.
``` c#
_ = e is T
    {
        X: 2,
        Y: 3, // comma now allowed here
    };
```
This needs to be implemented.
</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32291</IssueID>
    <RepoID>1</RepoID>
    <Title>Rename deconstruct_pattern to positional_pattern</Title>
    <Description>We should change both the spec grammar and the syntax nodes.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32290</IssueID>
    <RepoID>1</RepoID>
    <Title>Change the syntactic interaction of array dimension specifiers and the nullable annotation</Title>
    <Description>Per LDM 2019-01-09: We revisited the interaction of the nullable annotation and array dimension specifiers.  The new resolution is that the `?` annotation is a type constructor that can be applied to array types, and an array type does not have any `?` among its array specifiers.  This is the second option in https://github.com/dotnet/roslyn/issues/32141#issuecomment-451801073.

The [current implementation of specifying nullable annotations on array types](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-11-28.md#nullable-array-specifiers) is something like this

``` antlr
array_type
    : non_array_type rank_specifier+
    ;

nullable_type
    : non_array_or_nullable_type '?'
    ;

rank_specifier
    : '[' dim_separator* ']' '?'?
    ;

dim_separator
    : ','
    ;
```

The revised approach is something like this

``` antlr
array_type
    : non_array_type rank_specifier+
    ;

nullable_type
    : non_nullable_type '?'
    ;

rank_specifier
    : '[' dim_separator* ']'
    ;

dim_separator
    : ','
    ;
```
</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32289</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: allow pattern-based `await foreach` to use extension methods</Title>
    <Description>Previously, we thought this would be handled by the general feature of allowing pattern-based `foreach` to use extension methods. But that was split into a separate feature (hopefully still candidate for 8.0).

Even if we don't do it for regular `foreach`, LDM wants to do this for `await foreach`.
And when we do it, the order should be: (1) instance method, (2) interface, (3) extension method.
That order matches the behavior we want for `foreach` and we also think it is sensible in general.

From LDM 1/9.

```C#
        [Fact]
        public void TestGetAsyncEnumeratorPatternViaExtensions()
        {
            string source = @"
public class C
{
    async System.Threading.Tasks.Task M()
    {
        await foreach (var i in new C())
        {
        }
    }
    public sealed class Enumerator
    {
    }
}
public static class Extensions
{
    public static C.Enumerator GetAsyncEnumerator(this C c)
    {
        throw null;
    }
}";
            var comp = CreateCompilationWithMscorlib46(source);
            comp.VerifyDiagnostics(
                // (6,33): error CS8411: Async foreach statement cannot operate on variables of type 'C' because 'C' does not contain a public definition for 'GetAsyncEnumerator'
                //         await foreach (var i in new C())
                Diagnostic(ErrorCode.ERR_AwaitForEachMissingMember, "new C()").WithArguments("C", "GetAsyncEnumerator").WithLocation(6, 33)
                );
        }
```</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32288</IssueID>
    <RepoID>1</RepoID>
    <Title>Nested nullability cannot be cast away without warning</Title>
    <Description>Casting away nested nullability results in a warning:

``` c#
#nullable enable
class C&lt;T&gt;
{
    static void F(C&lt;object?&gt; y)
    {
        var x = (C&lt;object&gt;)y; // warning CS8619: Nullability of reference types in value of type 'C&lt;object?&gt;' doesn't match target type 'C&lt;object&gt;'
    }
}

```

Possibly related to #29641</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32287</IssueID>
    <RepoID>1</RepoID>
    <Title>Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException'</Title>
    <Description>**Version Used**: VS 2019 Preview 28508.105.d16.0
C# Tools   3.0.0-beta2-19055-10+15504ac30ab7b6f5bfedcdeee0a180915689f66f

**Steps to Reproduce**:
I don't have a repro yet. The following warnings are showing in my Error List

```

Severity	Code	Description	Project	File	Line	Suppression State	Detail Description
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.	Microsoft.CodeAnalysis.Converter		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Microsoft.CodeAnalysis.Converter
ISymbol: VisitSimpleArgument (Method)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.OnWriteReferenceFound(ISymbol symbol, IOperation operation, Boolean maybeWritten)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.OnReferenceFound(ISymbol symbol, IOperation operation)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.VisitDeclarationPattern(IDeclarationPatternOperation operation)
   at Microsoft.CodeAnalysis.Operations.DeclarationPatternOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitPatternCaseClause(IPatternCaseClauseOperation operation)
   at Microsoft.CodeAnalysis.Operations.BasePatternCaseClauseOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitchCase(ISwitchCaseOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseSwitchCaseOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitch(ISwitchOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseSwitchOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitBlock(IBlockOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseBlockOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitConditional(IConditionalOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseConditionalOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)
   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitBlock(IBlockOperation operation)
   at Microsoft.CodeAnalysis.Operations.BaseBlockOperation.Accept(OperationVisitor visitor)
   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.Visit(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.AnalyzeOperationsAndUpdateData(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Run(IOperation rootOperation, ISymbol owningSymbol, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeUnusedValueAssignments(OperationBlockAnalysisContext context, Boolean isComputingUnusedParams, PooledHashSet`1 symbolUsageResultsBuilder, Boolean&amp; hasBlockWithAllUsedSymbolWrites)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```


**Expected Behavior**:

No AD0001 warnings

**Actual Behavior**:
</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32286</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix formatting of positional patterns</Title>
    <Description>Closes #27268 

&lt;details&gt;&lt;summary&gt;Ask Mode&lt;/summary&gt;

### Customer scenario

A customer uses the new C# 8 recursive patterns feature with a positional pattern. The IDE ignores the users code style preferences for formatting the new construct, and by default does not follow the default recommended style for these patterns.

### Bugs this fixes

#27268

### Workarounds, if any

None.

### Risk

Low. This change only impacts the formatting of positional patterns, and tests are included to show the expected behavior is followed for both default and customized scenarios.

### Performance impact

Negligible.

### Is this a regression from a previous update?

No.

### Root cause analysis

Reported during feature development, but work to correct it waited for the feature to land in the main development branch.

### How was the bug found?

Reported by feature author.

### Test documentation updated?

No.

&lt;/details&gt;</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32285</IssueID>
    <RepoID>1</RepoID>
    <Title>Trigger Branch and PR CI builds for 16.0 preview branches</Title>
    <Description>
    </Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32284</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix remove parentheses bugs</Title>
    <Description>Related issue: [31103](https://github.com/dotnet/roslyn/issues/31103) and [32085](https://github.com/dotnet/roslyn/issues/32085)

Two problems of the current remove parentheses analyzer:
1. When conditional expression used as a left hand side value, 
`(x : ref a ? ref b) = c`
The parentheses should not be removed.
2. When conditional expression is used inside a string interpolation expression, and the whole string live inside an parentheses, like
`Func&lt;bool, string&gt; lambda = x =&gt; ($"{(x ? "foo" : "bar")}")`
The inner pair should not be removed.
</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32283</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle recursive patterns in IOperation based GetValueUsageInfo method</Title>
    <Description>Added unit tests for remove unused values analyzer/fix, which invokes this method, and was asserting with the repro in the issue.
Fixes #32271</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32282</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32281</IssueID>
    <RepoID>1</RepoID>
    <Title>Bad "unused field" warning for interface-implementing event</Title>
    <Description>**Version Used**: 
Visual Studio 2019 Preview 1.1

**Steps to Reproduce**:
```csharp
interface I
{
    event Action E;
}

class C : I
{
    public event Action E;
}

class D : I
{
    event Action I.E
    {
        add { }
        remove { }
    }
}
```

**Expected Behavior**:
No warning

**Actual Behavior**:
`C.E`: warning CS0067: The event 'C.E' is never used, after compiling
`D.E`: warning IDE0051: Private member 'D.I.E' is unused, after typing</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32280</IssueID>
    <RepoID>1</RepoID>
    <Title>Update GetTypeByMetadataName docs for case when type is ambiguous</Title>
    <Description>See #3864</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32279</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: Add sequence point after resume label for yield</Title>
    <Description>This should fix one of the issues in https://github.com/dotnet/roslyn/issues/32246
Specifically, when you reach a `yield return`, the next step correctly goes to the caller, but the next time you step into the async-iterator method, the same `yield return` is highlighted again instead of the statement after it.

~~I'm still exploring out to validate this in VS (I expect the technique used in https://github.com/dotnet/roslyn/pull/31679 should work).~~

Update: that method of testing proved useful and I was able to validate that `yield return` no longer gets highlighted twice after this fix.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32278</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix accessibility issues for extract interface dialog</Title>
    <Description>AutomationDelegatingListView did not have the correct AutomationControlType. Refer to [https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_localizedcontroltype?branch=master](https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_localizedcontroltype?branch=master )

MemberSelectionList uses `x:Name`, which is correct but does not fulfill automation needs. Add `AutomationProperties.Name` directly to be the same name. See [https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_name?branch=master](https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_name?branch=master)</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32277</IssueID>
    <RepoID>1</RepoID>
    <Title>Add ITypeSymbol.IsUnmanagedType and ITypeSymbol.IsRefLikeType</Title>
    <Description>Fixes #30427
Fixes #30426</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32276</IssueID>
    <RepoID>1</RepoID>
    <Title>Strange behaviour in async method</Title>
    <Description>I have a solution targeting NetCoreApp2.0.

Lately I've seen that when running an async method, the debugger shows me variables that are non allocated (out of scope).

If this variable is an IQueryable&amp;lt;string&amp;gt; it will show show up in the 'Locals window' as NullReferenceException.

If I manually set the 'next statement' to first statement in the block containing this IQueryable&amp;lt;string&amp;gt;, a NullReferenceException will be thrown when accessing the variable.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/238451/strange-behaviour-in-async-method.html
VSTS ticketId: 604787_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32275</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32274</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32273</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32272</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32271</IssueID>
    <RepoID>1</RepoID>
    <Title>"Unhandled declaration pattern context" when using switch expressions </Title>
    <Description>Affected Branch: master
Affected Build:  16.0.0 Preview 1.1+ 
Affected Product Language: C#  
Solution: \\\\mlangfs1\public\andrha\ConsoleApp1.zip 
Dump: \\\\mlangfs1\public\andrha\unhandled_decl_dump.dmp

Steps to reproduce:

1. Open zipped solution, specifically Program.cs. 
2. Run VS under debugger with debug Roslyn (I used f5 from Roslyn repo) 
</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32270</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32269</IssueID>
    <RepoID>1</RepoID>
    <Title>DebuggerDisplay fails to correctly format string if property is a ref return</Title>
    <Description>With C# 7.0, a function/property can return a reference to a field. If this is used from within a DebuggerDisplay, it just outputs the name of the type, rather than the string of that variable.

Example:

```csharp
using System;
using System.Diagnostics;

namespace DebuggerView
{
    class Program
    {
        static void Main(string[] args)
        {
            var s = new[] { "Hello" };
            var test = new Test(s);
        }
    }

    //[DebuggerDisplay("{DebuggerString}")] // Displays 'Hello'
    [DebuggerDisplay("{Name}")] // Displays 'string'
    readonly struct Test
    {
        private readonly string[] _s;

        public Test(string[] s)
        {
            _s = s;
        }

        private string DebuggerString =&gt; Name;

        public ref string Name =&gt; ref _s[0];
    }
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/252771/debuggerdisplay-fails-to-correctly-format-string-i.html
VSTS ticketId: 615995_
_These are the original issue comments:_

Taylor Southwick [MSFT] on 5/14/2018, 00:42 PM (239 days ago): &lt;p&gt;The wider issue seems to be that the debugger does not support ref returns. Properties that are ref returns cannot be viewed in the debugger (ie there is no arrow to expand to see the members on it)&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32268</IssueID>
    <RepoID>1</RepoID>
    <Title>fix rename crash when an invalid for-loop control variable exist in VB syntax tree</Title>
    <Description>fix #32086 

@dotnet/roslyn-ide @CyrusNajmabadi </Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32267</IssueID>
    <RepoID>1</RepoID>
    <Title>AsyncCompletion in Debugger: potential commit chars is empty</Title>
    <Description>### Customer scenario

**Scenario**
1. A completion (new completion implementation) happens in a multi-buffer scenario such as Razor, Debugger or TypeScript+C#.
2. Roslyn provides calculates _potential commit characters_ for a content type (using completion service) and put into a subject buffer.
3. Editor does not pass a surface buffer to the Commit Manager. The surface buffer differs from the subject buffer and it does not contains the _potential commit characters_.
4. Later one user presses a commit character.

**Expected**
Editor verifies that a commit character has been pressed and asks Roslyn to TryCommit.

**Actual**
Editor could not find any commit character and does not make any completion commits. 
### Bugs this fixes

Fixes https://github.com/dotnet/roslyn/issues/31922

### Workarounds, if any
None

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
No

### Root cause analysis
This functionality is under validation before shipping.
There was a design discussion between the Roslyn team and the Editor team regarding transporting information about potential commit characters from CompletionSource to CommitManager. A decision was made some time ago: use buffers. Some time after that the Editor found that the buffer provided to CompletionSource should be different from one found in the CommitManager. This caused the bug.

Actually, the Editor team and the Roslyn team should think about a better, more reliable transport for this information rather than a property bag. A better solution require changing the API.

### How was the bug found?
Partner team verification</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32266</IssueID>
    <RepoID>1</RepoID>
    <Title>EnC: support async-iterator methods</Title>
    <Description>I noticed that there is some EnC for handling iterator and async methods, so there will likely be some handling for async-iterator methods too.

FYI @tmat @ivanbasov @jinujoseph 
Let me know what you think in terms of scheduling. If this could be looked at in preview3, then I don't need to block this scenario.
Thanks

Async-streams umbrella: https://github.com/dotnet/roslyn/issues/24037</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>31/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32265</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for expanding of alias of value tuple types</Title>
    <Description>Fix #30903 
This also fixed the crash when renaming the alias name for a ValueTuple type.

@jcouv @dotnet/roslyn-ide @CyrusNajmabadi </Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32264</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32263</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32262</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32261</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32260</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor LooksLikeNodeInArgumentList method of Complete Statement</Title>
    <Description>Per comment posted by @CyrusNajmabadi in https://github.com/dotnet/roslyn/pull/30743/files#r245081027

Look into breaking main loop of method into two.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32259</IssueID>
    <RepoID>1</RepoID>
    <Title>`TypeSymbolWithAnnotations.ToDisplayString` misplaces `?` on multidimensional arrays</Title>
    <Description>The implementation of `TypeSymbolWithAnnotations.ToDisplayString` places the `?` after a type. That placement is incorrect for multidimensional arrays, in which it should be placed after the first pair of brackets.

We probably need to handle arrays specially, as we do in `SymbolDisplayVisitor.VisitTypeSymbolWithAnnotations`.

For the moment I'm working around this by avoiding `TypeSymbolWithAnnotations` in diagnostics.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32258</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable array type improperly accepted in array creation</Title>
    <Description>As pointed out in https://github.com/dotnet/roslyn/issues/31991#issuecomment-451384616:

&gt; Another case where this is incorrectly accepted:
&gt; ```cs
&gt; #nullable enable
&gt; public class C {
&gt;     public void M() {
&gt;     	_ = new C?(); // error 
&gt;         _ = new string[50]?; // no error (incorrect)
&gt;         _ = new string[50]?[,]; // no error (incorrect)
&gt;     }
&gt; }
&gt; ```
&gt; Looks like the same issue.

See also https://github.com/dotnet/roslyn/issues/32243 which shows that this is a breaking change.

</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32257</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove more private reflection from compiler</Title>
    <Description>This change continues the removal of private reflection code from the compiler code base and instead relying on mulit-targeting to have detect the runtime. This also necessarily cleans up a number of our `#if` checks in the code base. 

Follow up to #31763</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32256</IssueID>
    <RepoID>1</RepoID>
    <Title>Discover .editorconfig files during evaluation</Title>
    <Description>Currently we discover .editorconfig files using a target and task that run before `CoreCompile`. On the plus side, this is relatively straightforward and yields (almost) exactly the right set of .editorconfig files that could be used by the compiler--e.g., it will find .editorconfig files that are next to .cs/.vb files produced/found by other targets (so long as they run earlier) and will _not_ pass along any .editorconfig files that are excluded due to `root=true`. It can also pass along to the project systems the (almost) exact set of places where .editorconfig files don't exist but would be interesting if they did. This allows the project systems to place file watchers on those locations and rerun the design-time build if they appear.

The big downside is that this doesn't play well with the caches that we use to limit the number of design-time builds. These generally expect "interesting" project changes to alter something in MSBuild's evaluated model of the project--adding a property modifies a project file or one of its imports; adding or removing a code file modifies the project file or causes a glob to evaluate to a different set of items, etc. But as .editorconfig files don't show up in the evaluated model at all our caches don't notice when one is added or removed.

This leads to weird problems. If you add a .editorconfig before opening a solution the proejct system won't see it at all--it will have been passed cached data. And if you add one _after_ opening the solution, the project system (if it has set up file watchers) may see it and request a new design-time build--but that build will just return cached data that doesn't include the file. Similar problems occur with deleting files.

To better support this scenario, [Microsoft/msbuild #4050](https://github.com/Microsoft/msbuild/pull/4050) adds a new intrinsic item function, `GetPathsOfAllFilesAbove`, that maps from a set of items to all the files of a given name that are found next to those items or above them in the directory tree. This commit uses the new functionalty to map from all `&lt;Compile&gt;` items to the applicable .editorconfig files and add them to the evaluated model.

On the plus side this will help us avoid the caching problem and eliminates a set of MSBuild tasks and targets.

On the negative side, we will no longer be able to find .editorconfig files related to `&lt;Compile&gt;` items produced by tasks/targets. This is a minor consideration as we couldn't guarantee our task would "see" these items, anyway, as it would depend on the relative ordering of the targets during a build.

Also, we no longer get the set of "potential" .editorconfig files to pass to the project system. This isn't great, but the project systems can figure out these locations on their own without too much work.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32255</IssueID>
    <RepoID>1</RepoID>
    <Title>updating OptimizationData to 3.0.0-beta2-19053-01</Title>
    <Description>VAL build for RPS with new Optimization Data
https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/158472?_a=overview

it looks like we only got expected result (bigger dll size due to increased optimization data)</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32254</IssueID>
    <RepoID>1</RepoID>
    <Title>[Wiki] Mistake in markdown file </Title>
    <Description>On page https://github.com/dotnet/roslyn/wiki/Labels-used-for-issues#general mistake in markdown. 

Above the "General" header:
- **Expected**: `## Areas`
- **Actual**: `##Areas`

![image](https://user-images.githubusercontent.com/22368203/50863702-9a92e200-13b0-11e9-8e4d-caa39dfdeebd.png)
</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32253</IssueID>
    <RepoID>1</RepoID>
    <Title>use NoProjection option once it becomes public API</Title>
    <Description>related to this PR
https://github.com/dotnet/roslyn/pull/32248

we should use
http://index/?query=NoProjection&amp;rightProject=Microsoft.VisualStudio.Text.Internal&amp;file=TextLogic%5CTagAggregatorOptions2.cs&amp;line=59

in here
https://github.com/dotnet/roslyn/blob/9cb17ff35bd69a8e4f0bfcbe6ea87e14b5807024/src/VisualStudio/Core/Def/Implementation/Venus/ContainedLanguage.cs#L149

to make sure we don't create tagger not directly related to our buffer.

we expect the option to be public in preview 3. so we should consume the option once it becomes public.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32252</IssueID>
    <RepoID>1</RepoID>
    <Title>Nullable ignoring explicit null checks when variable is considered nullable.</Title>
    <Description>```C#
#nullable enable
public class C
{
	void M(object o)
	{
		if (o == null) o.ToString();
	}
}
```

Currently, no warning is reported for this code. This is especially bad for code with W warnings turned off, such that variable declarations not having annotations is considered normal.

/cc @MadsTorgersen, do you agree that we should have a safety warning here? This is related to the reachability topic I added to the agenda.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32251</IssueID>
    <RepoID>1</RepoID>
    <Title>[c# 7.3] cannot pass this with in? Seems like you should</Title>
    <Description>**Version Used**: 7.3

**Steps to Reproduce**:

1. Use the code below

```csharp
class A
{
    public string Name;
    public void MapObjectB(in B obj) { }
}

class B
{
    public string Name;
    public void DoWorkWithA(A obj) =&gt; obj.MapObjectB(in this);
}

class Program
{
    void Main()
    {
        var a = new A();
        var b = new B();
        a.Name = "Bob";
        b.DoWorkWithA(a);
    }
}
```

**Expected Behavior**:

I could use `in this` as `this` is passed with `in`, it is read-only and not assignable.

**Actual Behavior**:

Error that you cannot pass `this` by `ref`</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32250</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete statement - fix semicolon placement on For statement initializer with missing semicolon</Title>
    <Description>This code
`for (i = s.IndexOf(""bcd""$$) i &lt; 10; i++)`

incorrectly interprets that there are 2 initializers 
1)	`i = s.IndexOf(""bcd""$$)`
2)	`i &lt; 10`

Because of this, complete statement places the semicolon after the condition.

</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32249</IssueID>
    <RepoID>1</RepoID>
    <Title>Internal error in the C# compiler (Core Console) with trivial code</Title>
    <Description>Based on https://developercommunity.visualstudio.com/content/problem/381477/internal-error-in-the-c-compiler-core-console.html
**Version Used**: 
Dev 16. Was able to reproduce
**Steps to Reproduce**:

1.  Create a standard C# .NET Core console app with the default code:
```
using System;

namespace ConsoleApp6CSCore
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}
```

2.  Set a breakpoint at             `Console.WriteLine("Hello World!");`
3. In the Immediate Window, type `var test = "test";`

**Expected Behavior**:
Statement executed

**Actual Behavior**:
The immediate window displays "Internal error in the C# compiler"</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32248</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix failure to dispose ContainedLanguage`2._bufferTagAggregator</Title>
    <Description>1. we never disposed tag aggregator leaking all taggers ever created on the buffer involved in contained document

2. we hold on to taggers not related to our buffer but ones that are related to other buffers. for example, our subject buffer is actually a subject buffer which involves template C# buffer + HTML buffer where a portion of HTML buffer is mapped to the subject buffer. that we end up holding on to all HTML taggers.

...

**Customer scenario**

there are no user experience changes due to this. but since it is a leak, the user could get into OOM after a while.

**Bugs this fixes**

https://devdiv.visualstudio.com/DevDiv/_workitems/edit/762499

**Workarounds, if any**

there is no workaround.

**Risk**

Low

**Performance impact**

no more tagger leaks

**Is this a regression from a previous update?**

No

**Root cause analysis**

we forgot to dispose tagger aggregator we holding onto for C# projecting buffer from HTML file. that caused all taggers involved in C# projection buffer leaked.

**How was the bug found?**

Tests from razor team.
</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32247</IssueID>
    <RepoID>1</RepoID>
    <Title>[Dev16]Error "Changes are not allowed while code is running" shows while ENC about VB framework app</Title>
    <Description>There are some VSO bugs / Feedback requests. Here are some of them: https://developercommunity.visualstudio.com/content/problem/410323/vs-2019-preview-11-cannot-edit-code-in-break-mode.html
https://developercommunity.visualstudio.com/content/problem/415406/edit-and-continue-is-not-working.html

**[Machine]**

OS: Windows-10-Enterprise-RS4

Product: VS Enterprise ENU d16.0stg 28405.127
 

Steps to reproduce:


1. Create a VB Console app(.Net Framework) and add code as following:
```
Sub Main()
For index = 1 To 10
Console.WriteLine("hello")
Next
End Sub
```
2. Set a BP at line which contains string "Console.WriteLine("hello")" 
3. F5
4. Press "Enter" key on the end of the line while it hit BP

**[Expected]**
It could modify code successfully.

**[Actual]**
It cannot ENC(see Capture.PNG).

Microsoft Visual Studio
Changes are not allowed while code is running.
OK   
![image](https://user-images.githubusercontent.com/5455484/50856161-c1b0cb80-133e-11e9-9ff3-b36a370aeca8.png)


 [Investigate]

1. The issue cannot repro on VB core console app.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32246</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: stepping through async-iterator seems wrong</Title>
    <Description>- If you repeatedly "step into", any code after an await will not show as steps. I expect that it would step inside the async-iterator method, through awaits and such. ~~I suspect this works for async methods because the VS debugger recognizes `AsyncMethodStateMachineAttribute`, but doesn't recognize the new `AsyncIteratorMethodStateMachineAttribute`.~~ It was a problem with `AsyncIteratorMethodBuilder` (fixed in [debugger](https://devdiv.visualstudio.com/DevDiv/_git/Concord/commit/65cc1a7c43aaf93189797bd9b3891e9a1ec0e2f9) for preview3)
- After an item was yielded to the foreach and you "step into" again, the last "yield return" will be highlighted. (fix https://github.com/dotnet/roslyn/pull/32279)

```C#
class Program
{
    static async Task Main(string[] args)
    {  
        // ..., 1 on `in`, 5 on `in`, 6 on `int i`, 10 on `in`, 13 on `in` (unexpected), 14 on `int i`, 18 on `in`
        await foreach (int i in M()) 
        { // 7, 15
            Console.Write(i);  // 8, 16
        } // 9, 17
    }

    static async IAsyncEnumerable&lt;int&gt; M()
    { // 2
        Console.Write(0); // 3
        yield return 0; // 4, 11 (unexpected)
        await Task.Delay(100); // 12
        Console.Write(0);
        yield return 1; // 19 (unexpected)
        Console.Write(1);
        await Task.Delay(100);
        yield return 2;
        Console.Write(2);
        await Task.Delay(100);
    }
}
```

![debug-stream](https://user-images.githubusercontent.com/12466233/50851132-c2dafc00-1330-11e9-98ac-6e04d4e1abeb.gif)

FYI @stephentoub @tmat </Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32245</IssueID>
    <RepoID>1</RepoID>
    <Title>Use PipeOptions.CurrentUserOnly</Title>
    <Description>Now that we are targetting netcoreapp2.1 we can use the
`PipeOptions.CurrentUserOnly` option:

- https://github.com/dotnet/corefx/issues/25427

This is implemented by both CoreClr and Mono. It covers all of the
identity checking to make sure the same user is connected to both ends
of a named pipe. This is mostly just an implementation of what we were
already doing via ACLS and private reflection. But now it can simply be
delegated to the runtime entirely</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32244</IssueID>
    <RepoID>1</RepoID>
    <Title>Run CI integration tests on preview-vs-deps branches</Title>
    <Description>
    </Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32243</IssueID>
    <RepoID>1</RepoID>
    <Title>Breaking change in parsing array allocation on the left of a conditional operator</Title>
    <Description>The following code is accepted by the compiler in C# 7 but rejected by recent prototypes of C# 8. Although this particular example is slightly contrived, there are likely realistic examples that would be broken.
``` c#
    class C
    {
        static void M(string[][] x, bool y, bool z)
        {
            if (x == new string[3][] ? y : z)
            {
            }
        }
    }
```
</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32242</IssueID>
    <RepoID>1</RepoID>
    <Title>No warning dereferencing field of default struct instance</Title>
    <Description>Warnings should be reported dereferencing `S.F`:
```C#
#pragma warning disable 649
struct S
{
    internal object F;
}
class Program
{
    static void M()
    {
        S s = default;
        S t = new S();
        s.F.ToString(); // warning
        t.F.ToString(); // warning
    }
}
```</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32241</IssueID>
    <RepoID>1</RepoID>
    <Title>can't run restore.cmd</Title>
    <Description>Can someone help? I apologize in advance if I'm missing something very obvious.

**Version Used**: latest `master`. I have powershell 3.0

**Steps to Reproduce**:

1. run `restore.cmd`

**Expected Behavior**: no error

**Actual Behavior**:
I get an error saying
```
Method invocation failed because [System.Version] doesn't contain a method named 'new'.
```
</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32240</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1  to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32239</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32238</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32237</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32236</IssueID>
    <RepoID>1</RepoID>
    <Title>GoToDeclaration (F12) on a declaration node, should call FindAllReferences</Title>
    <Description>
    </Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32235</IssueID>
    <RepoID>1</RepoID>
    <Title>MessageArgs in CodeFixProvider</Title>
    <Description>I am creating a rule that defines variable prefixes. Examples:

``` c#
int intA;
double dobB;
decimal decC;
Random varD;
DataTable dttE;
string strF;
```

When I created the analyzer, to check if the prefix was correct I had to consult it. During the creation of the diagnosis, he was part of the MessageArgs (following code):

``` c#
////////////////////////////////////
//Consider Prefix is already defined
////////////////////////////////////
private void AnalisaVariavelG(SyntaxNodeAnalysisContext obj)
{
    var varIden = ((FieldDeclarationSyntax)obj.Node).Declaration.Variables;
    for (int i = 0; i &lt; varIden.Count; i++) //For each attribute in declaration
    {
        var al = varIden[i].Identifier.Text;
        if (al.Length &lt;= 3 || Prefix != al.Substring(0, 3))
        {
            var diagnostic = Diagnostic.Create(Rule, varIden[i].Identifier.GetLocation(), al, Prefix);
            obj.ReportDiagnostic(diagnostic);
        }
    }
}
```

But when I try to access the arguments in CodeFixProvider, the list is always empty. If these arguments were received, I would avoid a new query.

``` c#
public sealed override async Task RegisterCodeFixesAsync(CodeFixContext context)
{
    for (int i = 0; i &lt; context.Diagnostics.Length; i++)
    {
        ...
        var span = context.Diagnostics[i].Location.SourceSpan;
        context.RegisterCodeFix(CodeAction.Create("Corrigir prefixo", 
                        c =&gt; CorrigePrefixoAsync(context.Document, span, c)), 
                        context.Diagnostics[i]);
        //context.RegisterCodeFix(CodeAction.Create("Corrigir prefixo", 
                        c =&gt; CorrigePrefixoAsync(context.Document, span, c, context.Diagnostics[i].messageArgs)),
                         context.Diagnostics[i]); 
        //The commented would be ideal (By the way, messageArgs is protected for some reason (_messageArgs))
        ...
    }
}
```</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32234</IssueID>
    <RepoID>1</RepoID>
    <Title>Access to type full name in analyzer</Title>
    <Description>I'm creating an analyzer and I want to analyze in a certain way variables from a specific namespace. To access the namespace, the only way I found was with the following code

``` c#
...
context.RegisterSyntaxNodeAction(ClassAttributesA, SyntaxKind.FieldDeclaration); //ClassAttributes
...
private void ClassAttributesA(SyntaxNodeAnalysisContext obj) 
{
	var declStr = obj.Node.ToString();
	var varDecl = ((FieldDeclarationSyntax) obj.Node).Declaration;
	//SemanticModel varSemantic = obj.SemanticModel; //Return something meaningless

	var fullType = obj.ContainingSymbol.OriginalDefinition;

	/*if (((Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol)obj.ContainingSymbol).Type.ToString() 
                == "Microsoft.")
        {

        }*/ //Comented since Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol is protected

	...
}
```

However, the only way to access the Type property of obj.ContainingSymbol is by converting obj.ContainingSymbol to Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol which is a protected class. Unfortunately I did not find another way. Basically, I need a way to access the type full name. If there is any other way of access to what I'm looking for, I'll be happy to know.

Examples:
``` c# 
Random a; //Should return System.Random
int b; //Should return System.Int32
DataTable c; //Should return System.Data.DataTable
Microsoft.Win32.TimerElapsedEventArgs d; //Should return Microsoft.Win32.TimerElapsedEventArgs
TimerElapsedEventArgs e; //Should return Microsoft.Win32.TimerElapsedEventArgs
```



</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32233</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: Recognize MoveNextAsync that returns an awaitable</Title>
    <Description>## Customer scenario

Previously, we only recognized `MoveNextAsync` methods that returned a task-like type. But we should actually recognize any return type that is awaitable.

The scenario is `await foreach (var z in someIAsyncEnumerable.ConfigureAwait(false)) ...`.  I've copied the API below (from [corefx](https://github.com/dotnet/corefx/issues/33909)). It involves a pattern-based async-enumerable, and `MoveNextAsync` returns a `ConfiguredValueTaskAwaitable&lt;bool&gt;` (which is not "task-like" but is "awaitable").


## Bugs this fixes
Fixes https://github.com/dotnet/roslyn/issues/31609

## Workarounds, if any


Risk
Performance impact
Low. The logic to recognize appropriate `MoveNextAsync` methods was adjusted to accept the proper category of types.

## Is this a regression from a previous update?
No

## Root cause analysis
We have two categories of types that are relevant to async methods: task-likes (more restrictive) and awaitables. I used the wrong category in the implementation of the feature.

## How was the bug found?
Reported by customer using preview1.

----


```C#
namespace System.Threading.Tasks
{
  public static class TaskExtensions // previously existing class
    {
        public static ConfiguredCancelableAsyncEnumerable&lt;T&gt; WithCancellation&lt;T&gt;(this IAsyncEnumerable&lt;T&gt; source, CancellationToken cancellationToken);
        public static ConfiguredCancelableAsyncEnumerable&lt;T&gt; ConfigureAwait&lt;T&gt;(this IAsyncEnumerable&lt;T&gt; source, bool continueOnCapturedContext);
    }
}

namespace System.Runtime.CompilerServices
{
   [StructLayout(LayoutKind.Auto)]
   public readonly struct ConfiguredCancelableAsyncEnumerable&lt;T&gt;
    {
        public ConfiguredCancelableAsyncEnumerable&lt;T&gt; WithCancellation(CancellationToken cancellationToken);
        public ConfiguredCancelableAsyncEnumerable&lt;T&gt; ConfigureAwait(bool continueOnCapturedContext);

        public Enumerator GetAsyncEnumerator();
        public readonly struct Enumerator
        {
            public ConfiguredValueTaskAwaitable&lt;bool&gt; MoveNextAsync();
            public T Current { get; }
            public ConfiguredValueTaskAwaitable DisposeAsync();
        }
    }
}
```

Async-streams umbrella: https://github.com/dotnet/roslyn/issues/24037

----
Filed https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763984 for shiproom</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32232</IssueID>
    <RepoID>1</RepoID>
    <Title>Predefined type 'System.Object' is not defined or imported</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. MSBuild Upgrade to the15.7.9
2. Parse the project with Roslyn
3. Predefined type 'System.Object' or 'System.*'is not defined or imported
4.[mycode](https://github.com/wangchaoyu1992/First/blob/master/444.jpg)
I test project is https://github.com/sschmid/Entitas-CSharp
**Expected Behavior**:

**Actual Behavior**:
I've installed .net framwork 4.6 but
Unable to find .net framwork
If you can
Can you tell me how I can find .net framwork
Thanks.
</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>19/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32231</IssueID>
    <RepoID>1</RepoID>
    <Title>CSharpAddMissingReferenceCodeFixProvider encountered an error and has been disabled</Title>
    <Description>Trying to use a .NET Standard 2.0 library in a .NET 4.6.2 ASP.NET web site. Getting a compiler error that says:  &amp;quot;The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.&amp;quot;

I went to the line of code with the error and attempted the suggested fix of &amp;quot;Add reference to 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'&amp;quot;. When attempting the fix, a yellow bar appears on top that says &amp;quot;CSharpAddMissingReferenceCodeFixProvider encountered an error and has been disabled.&amp;quot;

Stack Trace:
System.AggregateException : One or more errors occurred. ---&amp;gt; Unable to cast COM object of type 'System.__ComObject' to interface type 'VSLangProj.VSProject'. This operation failed because the QueryInterface call on the COM component for the interface with IID '{2CFB826F-F6BF-480D-A546-95A0381CC411}' failed due to the following error: No such interface supported (Exception from HRESULT: 0x80004002 (E_NOINTERFACE)).
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&amp;lt;&amp;gt;c__DisplayClass18_0.&amp;lt;InvokeCore&amp;gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&amp;gt; (Inner Exception #0) System.InvalidCastException : Unable to cast COM object of type 'System.__ComObject' to interface type 'VSLangProj.VSProject'. This operation failed because the QueryInterface call on the COM component for the interface with IID '{2CFB826F-F6BF-480D-A546-95A0381CC411}' failed due to the following error: No such interface supported (Exception from HRESULT: 0x80004002 (E_NOINTERFACE)).
   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryAddReferenceToProject(ProjectId projectId,String assemblyName)
   at Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioAddMetadataReferenceCodeActionOperationFactoryWorkspaceService.AddMetadataReferenceOperation.Apply(Workspace workspace,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeActions.CodeActionOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&amp;lt;Unknown Parameters&amp;gt;)&amp;lt;---

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/335717/csharpaddmissingreferencecodefixprovider-encounter.html
VSTS ticketId: 684188_
_These are the original issue comments:_

Adam Humpherys on 10/25/2018, 01:28 PM (74 days ago): Trying to add a .NET Standard 2.0 NuGet package to a .NET 4.7 ASP WebForms project and it tells me to reference netstandard. Attempting to have Visual Studio do this for me fails with:'CSharpAddMissingReferenceCodeFixProvider' encountered an error and has been disabled.And clicking Show Stack Trace provides the following output:System.AggregateException : One or more errors occurred. ---&gt; Unable to cast COM object of type 'System.__ComObject' to interface type 'VSLangProj.VSProject'. This operation failed because the QueryInterface call on the COM component for the interface with IID '\{2CFB826F-F6BF-480D-A546-95A0381CC411}' failed due to the following error: No such interface supported (Exception from HRESULT: 0x80004002 (E_NOINTERFACE)).   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass18_0.b__0()   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)---&gt; (Inner Exception #0) System.InvalidCastException : Unable to cast COM object of type 'System.__ComObject' to interface type 'VSLangProj.VSProject'. This operation failed because the QueryInterface call on the COM component for the interface with IID '\{2CFB826F-F6BF-480D-A546-95A0381CC411}' failed due to the following error: No such interface supported (Exception from HRESULT: 0x80004002 (E_NOINTERFACE)).   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryAddReferenceToProject(ProjectId projectId,String assemblyName)   at Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioAddMetadataReferenceCodeActionOperationFactoryWorkspaceService.AddMetadataReferenceOperation.Apply(Workspace workspace,CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.CodeActions.CodeActionOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync()&lt;---Only manually adding  to the web.config fixes this issue.
_These are the original issue solutions:_

Adam Humpherys solved on 10/25/2018, 01:31 PM (74 days ago), 0 votes: 
&lt;p&gt;A workaround for an ASP.NET project is to manually add this to your web.config at system.web/compilation/assemblies:&lt;/p&gt;
&lt;pre&gt;&amp;lt;add assembly=&amp;quot;netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51&amp;quot;/&amp;gt;&lt;/pre&gt;
&lt;p&gt;Which I presume CSharpAddMissingReferenceCodeFixProvider is attempting to do when it encounters an error.&lt;/p&gt; 
</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32230</IssueID>
    <RepoID>1</RepoID>
    <Title>Async-streams: Produce diagnostic for async-iterator missing async</Title>
    <Description>**Customer scenario**
Fixes https://github.com/dotnet/roslyn/issues/31608

**Bugs this fixes**
Crash when you type an async-iterator method, but forget the `async` keyword.

**Workarounds, if any**
Don't forget?

**Risk**
**Performance impact**
Low. The fix is small. Adding a check and producing a diagnostic.

**Is this a regression from a previous update?**
No

**Root cause analysis**
I missed this scenario in my validation for this C# 8.0 beta feature.

**How was the bug found?**
Reported by customer using preview1

----

Filed https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763367 for shiproom

----

By producing an error, we no longer reach lowering which cannot handle such methods.

Async-streams umbrella: https://github.com/dotnet/roslyn/issues/24037</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32229</IssueID>
    <RepoID>1</RepoID>
    <Title>Add vs-deps branches for dev16.0-preview2 &amp; dev16.1-preview1 to pipelines.yml</Title>
    <Description>CI isn't running for PRs into dev16.1-preview1-vs-deps - https://github.com/dotnet/roslyn/pull/32197

/cc @jaredpar </Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32228</IssueID>
    <RepoID>1</RepoID>
    <Title>"Remove unused parameter" doesn't handle VB's addressof</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 

``` VB
New PropertyControlData(VsProjPropId110.VBPROJPROPID_Prefer32Bit, "Prefer32Bit", chkPrefer32Bit, AddressOf Prefer32BitSet, AddressOf Prefer32BitGet)
```

``` VB
Protected Function Prefer32BitGet(control As Control, prop As PropertyDescriptor, ByRef value As Object) As Boolean ' &lt;--- Fires
End Function
```

``` VB
Public Class PropertyControlData

    Public Sub New(id As Integer, name As String, FormControl As Control, setter As SetDelegate, getter As GetDelegate)
    End Sub

End Class

Public Delegate Function GetDelegate(control As Control, prop As PropertyDescriptor, ByRef value As Object) As Boolean
```


**Expected Behavior**:
No message

**Actual Behavior**:

```
Severity	Code	Description	Project	File	Line	Category	Suppression State
Message	IDE0060	Remove unused parameter 'prop'	Microsoft.VisualStudio.Editors	E:\project-system2\src\Microsoft.VisualStudio.Editors\PropPages\BuildPropPageBase.vb	129	Style	Active

```</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32227</IssueID>
    <RepoID>1</RepoID>
    <Title>"Remove unused parameter" doesn't recognize serialization constructors</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 3.0 [28507.140.d16.0stg]

**Steps to Reproduce**:

``` VB
        Private NotInheritable Class PropertyPageSerializationStore
            Implements ISerializable

            Private Sub New(Info As SerializationInfo, Context As StreamingContext)
                _serializedState = DirectCast(Info.GetValue(KEY_STATE, GetType(ArrayList)), ArrayList)
            End Sub
        End Class
```

**Expected Behavior**:
No warning

**Actual Behavior**:
Severity	Code	Description	Project	File	Line	Category	Suppression State
Message	IDE0060	Remove unused parameter 'Context'	Microsoft.VisualStudio.AppDesigner	E:\project-system2\src\Microsoft.VisualStudio.AppDesigner\PropPageDesigner\PropertyPageSerializationService_Store.vb	127	Style	Active

</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32226</IssueID>
    <RepoID>1</RepoID>
    <Title>Analyzer loader fails to load dll that lives next to analyzer</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. git clone http://github.com/dotnet/project-system
2. cd project-system
3. git checkout eacf50af576d7016b40e5b880c18cc93ee22f258
4. build
5. ProjectSystem.sln

**Expected Behavior**:
No errors about loading binaries

**Actual Behavior**:

```
Severity	Code	Description	Project	File	Line	Category	Suppression State	Detail Description
Warning	CS8032	An instance of analyzer Roslyn.Diagnostics.CSharp.Analyzers.CSharpCodeActionCreateAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\roslyn.diagnostics.analyzers\2.6.3-beta1.18614.2\analyzers\dotnet\cs\Roslyn.Diagnostics.CSharp.Analyzers.dll: Could not load file or assembly 'Roslyn.Diagnostics.Analyzers, Version=2.6.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed.VS		1	Roslyn.HostError	Active	Could not load file or assembly 'Roslyn.Diagnostics.Analyzers, Version=2.6.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
-----
Assembly manager loaded from:  C:\Windows\Microsoft.NET\Framework\v4.0.30319\clr.dll
Running under executable  C:\Program Files (x86)\Microsoft Visual Studio\2019\16.0stg\Common7\IDE\devenv.exe
--- A detailed error log follows. 

=== Pre-bind state information ===
LOG: DisplayName = Roslyn.Diagnostics.Analyzers, Version=2.6.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
 (Fully-specified)
LOG: Appbase = file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/
LOG: Initial PrivatePath = NULL
Calling assembly : Roslyn.Diagnostics.CSharp.Analyzers, Version=2.6.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.
===
LOG: This bind starts in LoadFrom load context.
WRN: Native image will not be probed in LoadFrom context. Native image will only be probed in default load context, like with Assembly.Load().
LOG: Using application configuration file: C:\Users\davkean\AppData\Local\Microsoft\VisualStudio\16.0_afa0bdd1\devenv.exe.config
LOG: Using host configuration file: 
LOG: Using machine configuration file from C:\Windows\Microsoft.NET\Framework\v4.0.30319\config\machine.config.
LOG: Post-policy reference: Roslyn.Diagnostics.Analyzers, Version=2.6.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PublicAssemblies/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PublicAssemblies/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TemplateProviders/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TemplateProviders/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TestWindow/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TestWindow/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/XamlLanguageService/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/XamlLanguageService/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/Debugger/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/Debugger/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/DiagnosticsHub/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/DiagnosticsHub/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/x86/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/x86/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PublicAssemblies/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PublicAssemblies/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TemplateProviders/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TemplateProviders/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TestWindow/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TestWindow/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/XamlLanguageService/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/XamlLanguageService/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/Debugger/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/Debugger/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/DiagnosticsHub/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/DiagnosticsHub/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/x86/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/x86/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Users/davkean/AppData/Local/Temp/VS/AnalyzerAssemblyLoader/36ea2f77fde84a02b288afa6ce94ba22/12/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Users/davkean/AppData/Local/Temp/VS/AnalyzerAssemblyLoader/36ea2f77fde84a02b288afa6ce94ba22/12/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Users/davkean/AppData/Local/Temp/VS/AnalyzerAssemblyLoader/36ea2f77fde84a02b288afa6ce94ba22/12/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Users/davkean/AppData/Local/Temp/VS/AnalyzerAssemblyLoader/36ea2f77fde84a02b288afa6ce94ba22/12/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.

-----


```

If I look at the "shadow caching" (I presume), I see:

```
&gt; dir C:\Users\davkean\AppData\Local\Temp\VS\AnalyzerAssemblyLoader\36ea2f77fde84a02b288afa6ce94ba22\12

Roslyn.Diagnostics.CSharp.Analyzers.dll
```

If I look at the package, I see:

```
&gt; dir C:\Users\davkean\.nuget\packages\roslyn.diagnostics.analyzers\2.6.3-beta1.18614.2\analyzers\dotnet\cs

Roslyn.Diagnostics.Analyzers.dll
Roslyn.Diagnostics.CSharp.Analyzers.dll
```</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32225</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for ??= to NullableWalker</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/30140.

Commit 1 fixes a bug I noticed while coming up with a test matrix for ??=. The fix I took here was my first instinct and may be incorrect, so if there's a better way to accomplish this I would love to know.
Commit 2 implements ??=.
Commit 3 is a bug fix caught by CI.

@dotnet/roslyn-compiler @jcouv @cston @AlekseyTs for review.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>33240</IssueID>
    <RepoID>1</RepoID>
    <Title>PropertiesShouldNotBeWriteOnlyAnalyzer threw an exception of type 'System.NullReferenceException'</Title>
    <Description>``` C#
        protected override ImmutableDictionary&lt;string, string&gt; GetMap =&gt; s_getOutputTypeExMap;
        protected override ImmutableDictionary&lt;string, string&gt; SetMap =&gt; s_setOutputTypeExMap;
```
```
Severity	Code	Description	Project	File	Line	Category	Suppression State	Detail Description
Error	AD0001	Analyzer 'Microsoft.CodeQuality.Analyzers.ApiDesignGuidelines.PropertiesShouldNotBeWriteOnlyAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.	Microsoft.VisualStudio.ProjectSystem.Managed.VS		1	Compiler	Active	Analyzer 'Microsoft.CodeQuality.Analyzers.ApiDesignGuidelines.PropertiesShouldNotBeWriteOnlyAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Microsoft.VisualStudio.ProjectSystem.Managed.VS
ISymbol: GetMap (Property)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.Symbols.MemberSignatureComparer.HaveSameReturnTypes(Symbol member1, TypeMap typeMap1, Symbol member2, TypeMap typeMap2, TypeCompareKind typeComparison)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MemberSignatureComparer.Equals(Symbol member1, Symbol member2)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.IsInterfaceMemberImplementation(Symbol candidateMember, Symbol interfaceMember, Boolean implementingTypeIsFromSomeCompilation)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.FindPotentialImplicitImplementationMemberDeclaredInType(Symbol interfaceMember, Boolean implementingTypeIsFromSomeCompilation, TypeSymbol currType, Symbol&amp; implicitImpl, Symbol&amp; closeMismatch)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.ComputeImplementationForInterfaceMember(Symbol interfaceMember, TypeSymbol implementingType, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.ComputeImplementationAndDiagnosticsForInterfaceMember(Symbol interfaceMember)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.FindImplementationForInterfaceMemberWithDiagnostics(Symbol interfaceMember)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.FindImplementationForInterfaceMember(Symbol interfaceMember)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.Microsoft.CodeAnalysis.ITypeSymbol.FindImplementationForInterfaceMember(ISymbol interfaceMember)
   at Analyzer.Utilities.Extensions.ISymbolExtensions.IsImplementationOfAnyImplicitInterfaceMember[TSymbol](ISymbol symbol)
   at Microsoft.CodeQuality.Analyzers.ApiDesignGuidelines.PropertiesShouldNotBeWriteOnlyAnalyzer.AnalyzeSymbol(SymbolAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c.&lt;ExecuteSymbolActionsCore&gt;b__40_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
```</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32224</IssueID>
    <RepoID>1</RepoID>
    <Title>Edit and Continue debugger bug with async Task Main in VS 2017</Title>
    <Description>copies from https://github.com/dotnet/corefx/issues/31241

The debugger does not display values correctly after "Edit and Continue" when called directly within async Task Main.

In each example there are 2 lines of code commented out. While executing a particular snippet, debug up to var x = 5 and then uncomment the commented lines, save, and proceed to step over. In the "Examples that fail", after editing and continuing and stepping over y, it will appear as 0, and if you click the "evaluate now" button in the local or watch windows, you will receive the error, The debugger is unable to evaluate this expression. I included the Console.WriteLine to demonstrate that the value is still correctly printed to console, it's just not viewable while debugging.

Examples that work:

//works
static Task Main(string[] args)
{
    var x = 5;
    //var y = 6;
    //Console.WriteLine(y);
    return Task.FromResult(0);
}

//works
static async Task Main(string[] args)
{
    await Task.Yield();
    Helper();

    void Helper()
    {
        var x = 5;
        //var y = 6;
        //Console.WriteLine(y);
    }
}
Examples that fail:

//fails
static async Task Main(string[] args)
{
    var x = 5;
    //var y = 6;
    //Console.WriteLine(y);
}

//fails
static async Task Main(string[] args)
{
    await Task.Yield();
    var x = 5;
    //var y = 6;
    //Console.WriteLine(y);
} </Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32223</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix simplifier when reducing nodes inside a C# AnonymousObjectMemberDeclarator</Title>
    <Description>Fix #31795 

@CyrusNajmabadi @dotnet/roslyn-ide </Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32222</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32221</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32220</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32219</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to dev16.0-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps
git reset --hard upstream/dev16.0-preview2-vs-deps
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32218</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32217</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to master</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into master.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-master
git reset --hard upstream/master
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-master --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32216</IssueID>
    <RepoID>1</RepoID>
    <Title>An unnecessary control flow graph capture is introduced for a switch expression arm that is using ```&amp;&amp;```/```||``` operators within guard expression </Title>
    <Description>```
        [CompilerTrait(CompilerFeature.IOperation, CompilerFeature.Dataflow)]
        [Fact]
        public void SwitchExpression_Guard()
        {
            string source = @"
#pragma warning disable CS8509
public sealed class MyClass
{
    void M(bool result, int input, bool a, bool b)
    /*&lt;bind&gt;*/{
        result = input switch
            {
                1 when a &amp;&amp; b =&gt; false
            };
    }/*&lt;/bind&gt;*/
}
";
            var expectedDiagnostics = DiagnosticDescription.None;
            string expectedFlowGraph = @"
Block[B0] - Entry
    Statements (0)
    Next (Regular) Block[B1]
        Entering: {R1}

.locals {R1}
{
    CaptureIds: [0] [1]
    Block[B1] - Block
        Predecessors: [B0]
        Statements (1)
            IFlowCaptureOperation: 0 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'result')
              Value: 
                IParameterReferenceOperation: result (OperationKind.ParameterReference, Type: System.Boolean) (Syntax: 'result')

        Next (Regular) Block[B2]
            Entering: {R2}

    .locals {R2}
    {
        CaptureIds: [2]
        Block[B2] - Block
            Predecessors: [B1]
            Statements (1)
                IFlowCaptureOperation: 2 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'input')
                  Value: 
                    IParameterReferenceOperation: input (OperationKind.ParameterReference, Type: System.Int32) (Syntax: 'input')

            Jump if False (Regular) to Block[B8]
                IIsPatternOperation (OperationKind.IsPattern, Type: System.Boolean) (Syntax: '1 when a &amp;&amp; b =&gt; false')
                  Value: 
                    IFlowCaptureReferenceOperation: 2 (OperationKind.FlowCaptureReference, Type: System.Int32, IsImplicit) (Syntax: 'input')
                  Pattern: 
                    IConstantPatternOperation (OperationKind.ConstantPattern, Type: null) (Syntax: '1') (InputType: System.Int32)
                      Value: 
                        ILiteralOperation (OperationKind.Literal, Type: System.Int32, Constant: 1) (Syntax: '1')
                Leaving: {R2}

            Next (Regular) Block[B3]
                Entering: {R3}

        .locals {R3}
        {
            CaptureIds: [3]
            Block[B3] - Block
                Predecessors: [B2]
                Statements (0)
                Jump if False (Regular) to Block[B5]
                    IParameterReferenceOperation: a (OperationKind.ParameterReference, Type: System.Boolean) (Syntax: 'a')

                Next (Regular) Block[B4]
            Block[B4] - Block
                Predecessors: [B3]
                Statements (1)
                    IFlowCaptureOperation: 3 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'b')
                      Value: 
                        IParameterReferenceOperation: b (OperationKind.ParameterReference, Type: System.Boolean) (Syntax: 'b')

                Next (Regular) Block[B6]
            Block[B5] - Block
                Predecessors: [B3]
                Statements (1)
                    IFlowCaptureOperation: 3 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'a')
                      Value: 
                        ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: False, IsImplicit) (Syntax: 'a')

                Next (Regular) Block[B6]
            Block[B6] - Block
                Predecessors: [B4] [B5]
                Statements (0)
                Jump if False (Regular) to Block[B8]
                    IFlowCaptureReferenceOperation: 3 (OperationKind.FlowCaptureReference, Type: System.Boolean, IsImplicit) (Syntax: 'a &amp;&amp; b')
                    Leaving: {R3} {R2}

                Next (Regular) Block[B7]
                    Leaving: {R3}
        }

        Block[B7] - Block
            Predecessors: [B6]
            Statements (1)
                IFlowCaptureOperation: 1 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'false')
                  Value: 
                    ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: False) (Syntax: 'false')

            Next (Regular) Block[B9]
                Leaving: {R2}
    }

    Block[B8] - Block
        Predecessors: [B2] [B6]
        Statements (0)
        Next (Throw) Block[null]
            IObjectCreationOperation (Constructor: System.InvalidOperationException..ctor()) (OperationKind.ObjectCreation, Type: System.InvalidOperationException, IsImplicit) (Syntax: 'input switc ... }')
              Arguments(0)
              Initializer: 
                null
    Block[B9] - Block
        Predecessors: [B7]
        Statements (1)
            IExpressionStatementOperation (OperationKind.ExpressionStatement, Type: null) (Syntax: 'result = in ... };')
              Expression: 
                ISimpleAssignmentOperation (OperationKind.SimpleAssignment, Type: System.Boolean) (Syntax: 'result = in ... }')
                  Left: 
                    IFlowCaptureReferenceOperation: 0 (OperationKind.FlowCaptureReference, Type: System.Boolean, IsImplicit) (Syntax: 'result')
                  Right: 
                    IFlowCaptureReferenceOperation: 1 (OperationKind.FlowCaptureReference, Type: System.Boolean, IsImplicit) (Syntax: 'input switc ... }')

        Next (Regular) Block[B10]
            Leaving: {R1}
}

Block[B10] - Exit
    Predecessors: [B9]
    Statements (0)
";
            VerifyFlowGraphAndDiagnosticsForTest&lt;BlockSyntax&gt;(source, expectedFlowGraph, expectedDiagnostics);
        }
```

Note the following region:
```
        .locals {R3}
        {
            CaptureIds: [3]
            Block[B3] - Block
                Predecessors: [B2]
                Statements (0)
                Jump if False (Regular) to Block[B5]
                    IParameterReferenceOperation: a (OperationKind.ParameterReference, Type: System.Boolean) (Syntax: 'a')

                Next (Regular) Block[B4]
            Block[B4] - Block
                Predecessors: [B3]
                Statements (1)
                    IFlowCaptureOperation: 3 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'b')
                      Value: 
                        IParameterReferenceOperation: b (OperationKind.ParameterReference, Type: System.Boolean) (Syntax: 'b')

                Next (Regular) Block[B6]
            Block[B5] - Block
                Predecessors: [B3]
                Statements (1)
                    IFlowCaptureOperation: 3 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'a')
                      Value: 
                        ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: False, IsImplicit) (Syntax: 'a')

                Next (Regular) Block[B6]
            Block[B6] - Block
                Predecessors: [B4] [B5]
                Statements (0)
                Jump if False (Regular) to Block[B8]
                    IFlowCaptureReferenceOperation: 3 (OperationKind.FlowCaptureReference, Type: System.Boolean, IsImplicit) (Syntax: 'a &amp;&amp; b')
                    Leaving: {R3} {R2}

                Next (Regular) Block[B7]
                    Leaving: {R3}
        }
```

This region and the capture ```[3]``` are unnecessary, there is no reason to calculate result of ```a &amp;&amp; b``` into the capture and then branch based on that value. An appropriate branch can be taken based on individual tests for ```a``` and ```b```, as we would do for an ```if``` statement, or a conditional expression.

I think, this is caused by the fact that ControlFlowGraphBuilder.VisitSwitchExpression builds conditional branches manually rather than using VisitConditionalBranch helper, which is used for every other construct where a conditional logic is based on a general boolean expression, including handling of switch statement in ControlFlowGraphBuilder.VisitSwitch.   </Description>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32215</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto generated ref assemblies does not include xml documentations.</Title>
    <Description>**Version Used**: 

latest with .NET Core 3 and Visual Studio 2017 15.9.4 Preview 1.

**Steps to Reproduce**:

1. Create a package and setup reference assemblies similar to how it is done for https://github.com/AraHaan/XmlAbstraction/
2. build and package
3. Install it with a new project then try to use the package’s classes, and the members of the classes.

**Expected Behavior**:
For Visual Studio, Rider or any other ide to display xml documentation according from the metadata of the reference assemblies.

**Actual Behavior**:
No xml documentation is added to the metadata and no xml documentation file for the reference assembly is generated either.

cc: @jcouv </Description>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32214</IssueID>
    <RepoID>1</RepoID>
    <Title>StaticKeywordRecommender doesn't give a stable answer between usings in script</Title>
    <Description>This test fails with `absent: true` and `absent: false`. The reason is that `CSharpSyntaxContext.IsGlobalStatementContext` changes after one character is typed.

```C#
        [Fact, Trait(Traits.Feature, Traits.Features.KeywordRecommending)]
        public async Task TestNotBetweenUsings()
        {
            var source = @"using Goo;
$$
using Bar;";

            await VerifyWorkerAsync(source, absent: true, Options.Script);
        }
```

Relates to (but precedes) https://github.com/dotnet/roslyn/pull/32187</Description>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32213</IssueID>
    <RepoID>1</RepoID>
    <Title>Move Dev15 servicing CI to Azure</Title>
    <Description>This changes our Dev15 servicing branch to use Azure Pipelines.
Presently this is the last place we use Jenkins.</Description>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32212</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor Complete Statement to use a matrix model</Title>
    <Description>Per this comment: https://github.com/dotnet/roslyn/pull/30743/files#r245100396

Once Complete Statement is complete, refactor it to use a matrix model for easier maintenance.

</Description>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32211</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto-complete inserts closing brace causing auto-format to not be triggered</Title>
    <Description>&lt;p&gt;I like VS's ability to auto-format C# code as I enter it, but that feature does not work well with auto-complete.  Auto format of a block occurs when a closing brace is typed, but auto-complete inserts the closing brace, and I have to navigate to the closing brace that was entered, delete it, and enter it again to fire the auto-format.  I would like to see auto-format occur if auto-complete inserts the closing brace.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/410260/improvement-to-code-editing-features.html
VSTS ticketId: 752824_
_These are the original issue comments:_

Jane Wu [MSFT] on 12/17/2018, 11:55 PM (20 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;
Kendra Havens [MSFT] on 1/3/2019, 02:50 PM (3 days ago): &lt;p&gt;Thank you for the feedback! What gesture are you using to accept the auto-complete closing brace at the end of a block? Could you give an example? It may be a bug, auto-format should occur if auto-complete inserts the ending brace and you use the enter/return key. The &amp;quot;Automatically format on return&amp;quot; option should be checked in your &lt;strong&gt;Tools &amp;gt; Options &amp;gt; Text Editor &amp;gt; C# &amp;gt; Code Style &amp;gt; Formatting &amp;gt; General.&lt;/strong&gt; Thank you for verifying. Using a different gesture like (Tab, Tab) will not auto-format the block.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Instead of this, if you ever want to quickly Format Document the keyboard shortcut is (Ctrl + K, D).&lt;/p&gt;

Dan Franzblau on 1/5/2019, 00:18 PM (45 hours ago): &lt;p&gt;Example: I type the following:&lt;/p&gt;&lt;p&gt;for(int i=1; i&amp;lt;10; i++)&lt;br&gt;  \{&lt;/p&gt;&lt;p&gt;and VS completes the block to give me:&lt;/p&gt;&lt;p&gt;for(int i=1; i&amp;lt;10; i++)&lt;br&gt;  \{ }&lt;/p&gt;&lt;p&gt;with the caret (insertion point) between the braces.  I then enter carriage return, and VS gives me:&lt;/p&gt;&lt;p&gt;for(int i=1; i&amp;lt;10; i++)&lt;br&gt;  \{&lt;/p&gt;&lt;p&gt;}&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;with the insertion point now on a line between the braces and the insertion point indented ready for a line of code in the block.  Note, however that auto-format has not occurred in the for statement line.  If I then delete and re-type the closing brace of the block, autoformatting will occur and I get:&lt;/p&gt;&lt;p&gt;for (int i = 1; i &amp;lt; 10; i++)&lt;br&gt;  \{ &lt;/p&gt;&lt;p&gt;}&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;where "I=1;" has become "I = 1;", etc.  Does this help explain the situation?&lt;/p&gt;&lt;p&gt;Thank you.&lt;/p&gt;
</Description>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32210</IssueID>
    <RepoID>1</RepoID>
    <Title>Fixup the triggers</Title>
    <Description>Fixup our triggers for branches.</Description>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32209</IssueID>
    <RepoID>1</RepoID>
    <Title> Completion window tooltip for constants/extension methods always shows as "..."</Title>
    <Description>**Version Used**: 
Version 16.0.0 Preview 3.0 [28505.103.d16.0stg]

**Steps to Reproduce**:

1. Drop the completion window at $$$

``` C#
    public class Class1
    {
        /// &lt;summary&gt; (The "TargetPath" property).&lt;/summary&gt;
        internal const string TargetPathProperty = "TargetPath";
    }

    public class Foo
    {
        public void Main()
        {
            Class1.$$$
        }
    }
```
**Expected Behavior**:
15.9:
![image](https://user-images.githubusercontent.com/1103906/50749302-19452d80-1292-11e9-9257-489284d48084.png)

**Actual Behavior**:
16.0:
![image](https://user-images.githubusercontent.com/1103906/50749240-ba7fb400-1291-11e9-9db5-862ad16dc2eb.png)
</Description>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32208</IssueID>
    <RepoID>1</RepoID>
    <Title>Add support for enable/safeonly/nullable within #pragma directive</Title>
    <Description>Customer scenario
The spec the nullable reference types in C# 8.0 beta includes support for `#pragma warning enable|safeonly nullable`.

Bugs this fixes
Umbrella for nullable feature: https://github.com/dotnet/roslyn/issues/22152

Workarounds, if any
You could control/suppress warnings individually, but the "nullable" group has many warnings.

Risk
Performance impact
Low. This is a shorthand to suppress many warnings at once, which is already possible today (just quite long/verbose compared to this new syntax).

Is this a regression from a previous update?
No

Root cause analysis
Part of new C# 8.0 beta feature

How was the bug found?

----
Filed https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763407 for shiproom purpose

----


The relevant portion of the spec https://github.com/dotnet/csharplang/blob/master/proposals/nullable-reference-types-specification.md is implemented.</Description>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32207</IssueID>
    <RepoID>1</RepoID>
    <Title>Tuple formatting ignore SpaceAfterComma</Title>
    <Description>Always set to false, still add a space

![image](https://user-images.githubusercontent.com/1042507/50747794-73c99400-1268-11e9-8ff5-f7c382559d20.png)
</Description>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32206</IssueID>
    <RepoID>1</RepoID>
    <Title>Update DocComment on UnassignedAddressTakenVariablesWalker</Title>
    <Description>The original Doc Comment was copied from UnassignedVariablesWalker, and so was incorrect.

See issue #31483</Description>
    <CreatedDate>06/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32205</IssueID>
    <RepoID>1</RepoID>
    <Title>Syntax Highlighting gets messed up when using string interpolation in a url.</Title>
    <Description>Syntax Highlighting gets messed up when using string interpolation in a url.

Example:
var someVariable = &amp;quot;hello&amp;quot;;
var url =$&amp;quot;https://www.google.com/{someVariable.Replace(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)}&amp;quot;;


![image](https://user-images.githubusercontent.com/12449387/50734394-5c4cb700-1153-11e9-9cae-01457872a6a6.png)


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/135605/syntax-highlighting-gets-messed-up-when-using-stri.html
VSTS ticketId: 512911_
_These are the original issue comments:_

Rick Harker on 1/5/2019, 10:48 PM (2 hours ago): This bug still happens as of Visual Studio 2017 15.9.4.The entire hyperlink is visible as a continuous blue link, reguardless of the interpolations.Can we get this fixed, please?
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>06/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32204</IssueID>
    <RepoID>1</RepoID>
    <Title>Selecting a named parameter from intelisense list not inserting the colon</Title>
    <Description>&lt;p&gt;When adding a method’s parameters and using named parameters, I’ll see the parameters in the list twice, one with a colon and one without.  When you scroll down in the list and select the parameter with the colon and press tab/enter to select/insert the parameter, the named parameters are always without the necessary colon as expected.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/394019/selecting-a-named-parameter-from-intelisense-line.html
VSTS ticketId: 736597_
_These are the original issue comments:_

Cytheria Ji [MSFT] on 11/29/2018, 05:08 PM (37 days ago): &lt;p&gt;Thank you for your feedback! For us to investigate this further, could you please provide your project type and language?  We look forward to hearing from you!&lt;/p&gt;

Daniel Doris on 11/30/2018, 08:43 AM (36 days ago): &lt;p&gt;Thanks for following up.  &lt;/p&gt;&lt;p&gt;Version: VS 2017 15.8.8&lt;br&gt;Project type: C# old .Net (not Core) solution contains a mix of DLLs and a console app.&lt;br&gt;Environment Settings: (General/C#/VB/Web)  i'm using C# Development Settings.&lt;br&gt;&lt;br&gt;Can't think of anything else that will impact the behavior but will provide if you need anything else.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>06/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32203</IssueID>
    <RepoID>1</RepoID>
    <Title>Disable CS8170 and CS8157 ("escaping this") for `ref struct` types</Title>
    <Description>As I understand it, the point of `ref struct` is essentially to publish limitations on the value-type's use that redound as a guarantee that its `this` pointer is in some way fixed, typically in an upper stack frame, or perhaps unmanaged memory, but never boxed or otherwise GC heap-bound.

If this is the correct, then it seems like there's significantly less danger, if any, to allowing the escape of `this`  from a value-type's instance methods (and isn't doing so the whole point anyway?) when it is marked as a `ref struct`. As such, the following errors should be either demoted to warnings or not emitted at all from within instance methods of `ref struct` types.

&lt;code&gt;error CS8170: Struct members cannot return 'this' or other instance members by reference&lt;/code&gt;

&lt;code&gt;error CS8157: Cannot return 'x' by reference because it was initialized to a value that cannot be returned by reference&lt;/code&gt;

The problem with these (and perhaps others of their ilk), is that they are prone to false-positives. There are numerous cases where special knowledge that the compiler can't see or infer in fact ensures that the escaping `this` is previously, ultimately, or in some other way correctly contained.

Furthermore, owing to the use limitations, `ref struct` can really only be deployed in pretty advanced situations requiring experts, and these types of developers are likely to have less need or desire for the aggressive static analysis of **CS8170** / **CS8157**, as they currently stand.
</Description>
    <CreatedDate>06/01/2019</CreatedDate>
    <ClosedDate>06/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32202</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>06/01/2019</CreatedDate>
    <ClosedDate>06/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32201</IssueID>
    <RepoID>1</RepoID>
    <Title>Synthesize Object.Equals override for records</Title>
    <Description>
    </Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32200</IssueID>
    <RepoID>1</RepoID>
    <Title>Expose compiled Assembly instance to user through CSharpScript Script instance</Title>
    <Description>CSharpScript compiles to an assembly in memory. This assembly's `System.Reflection.Assembly` instance can be accessed by returning either the assembly or a type defined in it as a the return value from a script, but there is currently no way to access the instance directly through the `Script` class API.

This prevents using scripts as compiled-on-demand assemblies that can otherwise be treated as dynamically loaded assemblies, using Reflection to access its types.

Ideally the `Script` class should be extended with a `GetCompiledAssembly()` method that provides the instance, and either throws if it hasn't been compiled yet or compiles it just as `RunAsync` and related methods do.

From what i can tell the assembly is created here: https://github.com/dotnet/roslyn/blob/d304f63cbe2ff3eb57fc4fc8a136c3757a703472/src/Scripting/Core/ScriptBuilder.cs#L159

So making it accessible directly may require some refactoring first.

~~However, caching the generated assembly may result in reduced memory usage when the script is executed repeatedly. Since `ContinueWith` leaves the original script untouched there is no need to worry about outdated assemblies being returned.~~

The assembly should probably be returned by `ScriptBuilder`'s `CreateExecutor` method and cached in `Script`.

A good reason to add this is to allow using CSharpScript assemblies with [MEF](https://docs.microsoft.com/en-us/dotnet/framework/mef/)</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32199</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32198</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32197</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master-vs-deps to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/master-vs-deps
# Fix merge conflicts
git commit
git push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32196</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2-vs-deps to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/dev16.0-preview2-vs-deps
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32195</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to dev16.1-preview1</Title>
    <Description>
This is an automatically generated pull request from master into dev16.1-preview1.

``` bash
git fetch --all
git checkout merges/master-to-dev16.1-preview1
git reset --hard upstream/dev16.1-preview1
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-dev16.1-preview1 --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32194</IssueID>
    <RepoID>1</RepoID>
    <Title>Record merged features</Title>
    <Description>
    </Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32193</IssueID>
    <RepoID>1</RepoID>
    <Title>Update the version number to 3.1.0 beta1</Title>
    <Description>/cc @jaredpar </Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32192</IssueID>
    <RepoID>1</RepoID>
    <Title>Publish VSIX installer with build</Title>
    <Description>
    </Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32191</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to features/enhanced-using</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-features/enhanced-using
git reset --hard upstream/features/enhanced-using
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-features/enhanced-using --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32190</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.1-preview1 to dev16.1-preview1-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps
git reset --hard upstream/dev16.1-preview1-vs-deps
git merge upstream/dev16.1-preview1
# Fix merge conflicts
git commit
git push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32189</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge dev16.0-preview2 to dev16.0-preview2-vs-deps</Title>
    <Description>
This is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.

``` bash
git fetch --all
git checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps
git reset --hard upstream/dev16.0-preview2-vs-deps
git merge upstream/dev16.0-preview2
# Fix merge conflicts
git commit
git push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32188</IssueID>
    <RepoID>1</RepoID>
    <Title>Update the version number to 3.0.0 beta3</Title>
    <Description>In preparation for the snap to preview 3</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32187</IssueID>
    <RepoID>1</RepoID>
    <Title>Recommend keyword static for static local functions</Title>
    <Description>**Customer scenario**
User types a static local function (C# 8.0 beta).
Completion gets in the way of typing `static`, by auto-completing to `System.ContextStaticAttribute`.

**Bugs this fixes**
Fixes https://github.com/dotnet/roslyn/issues/32174

**Workarounds, if any**
You can dismiss the incorrect completion, but more often than not, you'll need to delete `System.ContextStaticAttribute` and type `static` and dismiss the incorrect completion.

**Risk**
**Performance impact**
Low. This is a one-line fix in the recommender for `static` keyword.

**Is this a regression from a previous update?**
No, this is the result of a feature introduced in preview2.

**Root cause analysis**
New feature requires some adjustments to tooling. 

**How was the bug found?**
Ad-hoc IDE validation as part of compiler test plan for new language features.

----

Filed https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763373 for shiproom purpose

----

@dotnet/roslyn-ide for review. Thanks

CC @cston 
Relates to https://github.com/dotnet/roslyn/issues/32069

![image](https://user-images.githubusercontent.com/12466233/50718663-d5aab380-1046-11e9-838b-7a4419446aa2.png)
</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32186</IssueID>
    <RepoID>1</RepoID>
    <Title>Update the nuget publishing data with new branch information</Title>
    <Description>/cc @jaredpar </Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32185</IssueID>
    <RepoID>1</RepoID>
    <Title>Start dogfooding editorconfig support in the branch</Title>
    <Description>Switches our LKG compiler to a build from the editorconfig branch and moves a diagnostic to be suppressed through editorconfig to test functionality.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32184</IssueID>
    <RepoID>1</RepoID>
    <Title>Pattern-based 'await foreach' should find parameterless 'GetAsyncEnumerator' and 'MoveNextAsync'</Title>
    <Description>**Customer scenario**
Users implement an async-enumerable not by implementing `IAsyncEnumerable&lt;T&gt;`, but by implementing the pattern. The `GetAsyncEnumerator` they write should be callable with no arguments, but the compiler currently requires a `CancellationToken` parameter to be present in the signature.


**Bugs this fixes**
Fixes https://github.com/dotnet/roslyn/issues/32111


**Workarounds, if any**
Add an optional `CancellationToken` parameter to your implementation of `GetAsyncEnumerator`.

**Risk**
**Performance impact**
The change only affects binding of `await foreach` (C# 8.0 beta), and leaves `foreach` unaffected.

**Is this a regression from a previous update?**
Yes. In preview1, we accepted such a `GetAsyncEnumerator`, but in preview2 we added the `CancellationToken` to `IAsyncEnumerable&lt;T&gt;.GetAsyncEnumerator` and the pattern-based scenario was updated to assume a `CancellationToken` parameter. LDM then clarified this scenario: we should call pattern-based `GetAsyncEnumerator` without argument, rather than always passing a `default` `CancellationToken`.

**Root cause analysis**
Subtlety of the language.

**How was the bug found?**
Discovered by Stephen Toub just before the holidays.

----

File shiproom issue: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/763366

----

We bind as `enumerable.GetAsyncEnumerator()` and `enumerator.MoveNextAsync()`, which means that both a `GetAsyncEnumerable()` and a `GetAsyncEnumerable(CancellationToken token = default)` are recognized.

Note that those methods must still be instance methods (not extensions).

Per email decision by LDM on 12/19 and confirm on 1/9.

FYI @stephentoub 


Async-streams umbrella: https://github.com/dotnet/roslyn/issues/24037
</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32183</IssueID>
    <RepoID>1</RepoID>
    <Title>Update the experimental struct color to have more contrast.</Title>
    <Description>against declaration highlight background.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32182</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32181</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>05/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32180</IssueID>
    <RepoID>1</RepoID>
    <Title>Publish OptProf Data files</Title>
    <Description>This publishes the OptProf Data files during an official build. This
just allows for us to easily inspect the results without having to do a
download from the drop server.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32179</IssueID>
    <RepoID>1</RepoID>
    <Title>Should warn about nullability of assigning `default` to a struct with non-nullable fields</Title>
    <Description>```C#
struct S
{
    string field;
    void M(S parameter)
    { 
        S local = default; // we just set `local.field` to null (we should warn)
        M(default); // we should also warn
    }
}
```

We probably need some discussion on private fields. We could:
1. not warn (opens some safety issues)
2. warn the consumer of the struct
3. warn the producer of the struct (private fields or maybe even all fields should be nullable)

Also @sharwell mentioned some related scenarios:
```C#
class C { private S _field; }
class D
{
   void M()
   {
       var c = new C(); // equivalent to `new C { _field = default }`
   }
}
```

Note: this is one more reason why reference assemblies should either include all fields, or at least keep a "representative" set of fields.

FYI @cston </Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32178</IssueID>
    <RepoID>1</RepoID>
    <Title>Use raw IBC data from VSTS drop</Title>
    <Description>Infrastructure only change.

Acquires raw optimization data from VSTS drop and runs IBC merge to embed them to the binaries being built as well as dependencies we insert into VS (such as SRM, SCI, etc.).

Test signed build: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2322101

Notice lines:

```
2019-01-10T19:17:00.5365633Z Acquiring optimization data
2019-01-10T19:17:03.0887955Z Downloading optimization data from drop https://devdiv.artifacts.visualstudio.com/OptimizationData/dotnet/roslyn/master-vs-deps/e2fccb261df50aeb117768af1b492c0abb7501c1/226747/952663/1
```

Fixes https://github.com/dotnet/roslyn/issues/31486.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32177</IssueID>
    <RepoID>1</RepoID>
    <Title>Change no conversion to idisposable message:</Title>
    <Description>- Restore previous message to remove any mention of 'public void-returning Dispose method'
- Update test comments to match</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32176</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor handling of OLECMD in KeybindingResetDetector</Title>
    <Description>As discussed here: https://github.com/dotnet/roslyn/pull/31918#discussion_r243450908</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32175</IssueID>
    <RepoID>1</RepoID>
    <Title>Cleanup project and solution</Title>
    <Description>Implements Code Cleanup support for projects and solution.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32174</IssueID>
    <RepoID>1</RepoID>
    <Title>Auto-complete does not include `static` for local function</Title>
    <Description>Inside `Main`, type `static&lt;space&gt;`. Auto-complete will complete to `System.ContextStaticAttribute` rather than `static`.
```C#
using System;

class Program
{
    static void Main()
    {
        static
    }
}
```</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32173</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master into features/nested-stackalloc</Title>
    <Description>
    </Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32172</IssueID>
    <RepoID>1</RepoID>
    <Title>Unexpected error CS8107: Feature 'nullable reference types' is not available in C# 7.0. for a #nullable directive in disabled code</Title>
    <Description>```
#if ENABLE
#nullable disable
#endif
```</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32171</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix async test</Title>
    <Description>Merges more master latest, fixes the IL in a broken test</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32170</IssueID>
    <RepoID>1</RepoID>
    <Title>Build correctness leg should prevent "PROTOTYPE" markers in master branch</Title>
    <Description>FYI @jaredpar </Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32169</IssueID>
    <RepoID>1</RepoID>
    <Title>Compiler permits creation of nullable array type</Title>
    <Description>In https://github.com/dotnet/roslyn/issues/31991#issuecomment-451384616 it is reported that the compiler permits creation of a nullable array type:

``` c#
#nullable enable
public class C {
    public void M() {
    	_ = new C?(); // error (correct)
        _ = new string[50]?; // no error (incorrect)
        _ = new string[50]?[,]; // no error (incorrect)
    }
}
```
</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32168</IssueID>
    <RepoID>1</RepoID>
    <Title>Using Declarations should be a rude edit-and-continue edit</Title>
    <Description>As per https://github.com/dotnet/roslyn/blob/6f83204ee88fd684a3a00565d4712476cb21802a/src/Compilers/CSharp/Portable/Lowering/AsyncRewriter/AsyncExceptionHandlerRewriter.cs#L135-L141

We should check that edit-and-continue works correctly with using declarations. Suspect it wont, and we should make using declarations a rude-edit.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32167</IssueID>
    <RepoID>1</RepoID>
    <Title>Remove prototype comments</Title>
    <Description>
    </Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32166</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix parsing regression on switch case expression that is parenthesized unary expression</Title>
    <Description>Fixes #32161</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32165</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge Features/enhanced-using to master</Title>
    <Description>
    </Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32164</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to enahanced using</Title>
    <Description>
    </Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32163</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor SemicolonIsMissing and RequiredDelimiterIsMissing methods in Complete Statement</Title>
    <Description>As asked for in https://github.com/dotnet/roslyn/pull/30743#discussion_r231757706 and https://github.com/dotnet/roslyn/pull/30743#discussion_r245098282 and https://github.com/dotnet/roslyn/pull/30743#discussion_r245082434

After all statement completion cases are addressed, refactor the SemicolonIsMissing and RequiredDelimiterIsMissing methods.

</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32162</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master vs deps</Title>
    <Description>emergency merge from master to master-vs-deps</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32161</IssueID>
    <RepoID>1</RepoID>
    <Title>Parenthesized switch case expressions rejected in master with langver 7</Title>
    <Description>The following C# code is reportedly rejected in `master` with language version 7. This is a breaking change.

``` c#
switch (notesColumn)
{
    case (-1):
        {
            // not found, do nothing;
            break;
        }
    case (0):
        {
            // root column, add to Items
            item.Text = justification.Text;
            break;
        }
    default:
        {
            // add to sub items
            item.SubItems[notesColumn].Text = justification.Text;
            break;
        }
}
```

</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32160</IssueID>
    <RepoID>1</RepoID>
    <Title>Classifier for accessibility modifiers </Title>
    <Description>As a follow-up to dotnet/roslyn#31231, it looks like one type of classifier was omitted -- one for visibility modifiers (public, internal, etc). Some people like to color those differently to call attention to them.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32159</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix null check combined with nullable bool test</Title>
    <Description>* Fixes #31739 
* Fixes timeout for integration tests (they took 1:30 locally so I allowed for 2:00 on CI)

### Customer scenario

Visual Studio can crash with a FailFast during editing.

### Bugs this fixes

#31739

### Workarounds, if any

None.

### Risk

Low. The change restores a null check that was unintentionally removed.

### Performance impact

Negligible.

### Is this a regression from a previous update?

Yes.

### Root cause analysis

The issue was caught during code review but not corrected before merge.

### How was the bug found?

Integration tests.

### Test documentation updated?

N/A
</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32158</IssueID>
    <RepoID>1</RepoID>
    <Title>roperty is an enum</Title>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32157</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 doesn't warn about unused params in ISerializable constructors</Title>
    <Description>Fixes #32133.

Logic that tests for such constructors is pulled out to a helper struct, `SerializationConstructorCheck`. I couldn't find existing patterns for this kind of thing, so perhaps a different approach is preferred. It cannot be an extension method as it caches symbols from the compilation for reuse across multiple calls.

Fixed some typos too, in a separate commit.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32156</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32155</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32154</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix Visual Basic classifications for ControlKeyword</Title>
    <Description>Noticed a few issues while working in VB unit tests.

- Stop classifying EndKeyword in EndUsingStatement
- Begin classifying ToKeyword in ForStatement
- Begin classifying IfKeyword in TernaryConditionalExpression</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32153</IssueID>
    <RepoID>1</RepoID>
    <Title>Handle GetIntellisenseProjectName returning empty</Title>
    <Description>CPS-based projects have moved from a "fake" IVsHierarchy being passed to the Roslyn to returning the "real" hiearchy representing the project. This results in GetItemContext actually returning a real implementation of "IWebApplicationCtxSvc" instead of previously failing.

This implementation returns S_OK and an "empty" project name - to indicate that it doesn't actually handle the call (with a giant TODO). Handle that situation and treated it as failed, so that we proceed onto IVsContainedLanguageProjectNameProvider which provides the real underlying value.

This is blocking https://github.com/dotnet/project-system/pull/4419.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32152</IssueID>
    <RepoID>1</RepoID>
    <Title>Do not pass /warnaserror to msbuild</Title>
    <Description>
    </Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32151</IssueID>
    <RepoID>1</RepoID>
    <Title>"Wrap every parameter/unwrap and indent all paramaters" is higher than "create/initialize parameter"</Title>
    <Description>These new code fixes have been given a higher priority than "create/initialize parameter" which feels wrong because the former is something you probably do once, the latter I do all the time just after I've written a parameter:

![image](https://user-images.githubusercontent.com/1103906/50671149-3a084b80-1024-11e9-9200-7d769b4d05e5.png)

Can we change the priority of this?</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32150</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix the InvalidCastException when trying to introduce a variable</Title>
    <Description>Fix https://github.com/dotnet/roslyn/issues/30207

Just want to call out that after this change, we no longer introduce variable for user selection if its type can't be decided. For example, this is what would happen before this change
```cs
// int.Foo() is undeclared

// before introduce local:
        Action&lt;int&gt; goo = x =&gt; [|x.Foo()|];

// after introduce local:
        Action&lt;int&gt; goo = x =&gt;
        {
            object v = x.Foo();
        };
```

~~There's a similar bug reported [here](https://developercommunity.visualstudio.com/content/problem/395106/vs-2017-1593-introducevariablecoderefactoringprovi.html), the difference is the exception is thrown when we somehow replaced a `TypeSyntax` in an array declaration with the introduced variable.  However, I couldn't figure out the pattern that triggers this. Should I leave it be and hope some day some one will hit this and provide us a repro so we can pinpoint the cause and fix it properly, or just plug the hole so it won't crash? Thoughts?~~

@dotnet/roslyn-ide </Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32149</IssueID>
    <RepoID>1</RepoID>
    <Title>Nagivate up / down the inheritance chain</Title>
    <Description>&lt;p&gt;It's currently really inconvenient to navigate from interface to all implementations. Or from a method in implementation upwards to interface definition.&lt;/p&gt;&lt;p&gt;Prior art:&lt;/p&gt;&lt;p&gt;https://www.jetbrains.com/help/resharper/Navigation_and_Search__Go_to_Base.html&lt;/p&gt;&lt;p&gt;https://www.jetbrains.com/help/resharper/Navigation_and_Search__Go_to_Inheritor.html&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/411986/nagivate-up-down-the-inheritance-chain.html
VSTS ticketId: 754193_
_These are the original issue comments:_

Jane Wu [MSFT] on 12/18/2018, 11:48 PM (15 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32148</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to enhanced using</Title>
    <Description>
    </Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32147</IssueID>
    <RepoID>1</RepoID>
    <Title>Add "static local functions" to status page</Title>
    <Description>@cston @jaredpar for review</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32146</IssueID>
    <RepoID>1</RepoID>
    <Title>The ability to collapse a #region at #regionend</Title>
    <Description>&lt;p&gt;Just so you don't have to scroll up to look for the start of the region, a minus box at #endregion would be nice.&lt;/p&gt;&lt;p&gt;I suppose that would extend to brackets as well, but I haven't run into that need.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/411260/the-ability-to-collapse-a-region-at-regionend.html
VSTS ticketId: 753515_
_These are the original issue comments:_

Jane Wu [MSFT] on 12/18/2018, 11:46 PM (15 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32145</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix projects being removed from the Workspace</Title>
    <Description>We were leaving them in the workspace by accident.

Fixes #32036 and probably a bunch of dupes too.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32144</IssueID>
    <RepoID>1</RepoID>
    <Title>tabs should not trigger completion</Title>
    <Description>```
using System;

 class C
{
    void M()
    {
        var replyUri = new Uri("");
        $$
    }
}
```

Start typing 'repl' and hit tab three times

**Expected**
'replyUri' has been added once and two times tab has been added

**Actual**
'replyUri' has been added once and 'uri' was added once from another completion session</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32143</IssueID>
    <RepoID>1</RepoID>
    <Title>async completion: fixing 'Nullable object must have a value' when del…</Title>
    <Description>Scenario:
1. 
```
using System;

class C
{
    void M()
    {
        var replyUri = new Uri("");
        $$
    }
}
```

2. Type 'repl' and press Tab. 'replyUri' appears
3. Hit Backspace 8 times

**Expected**
'replyUri' has been deleted. A new completion appears with the default list

**Actual**
```
System.InvalidOperationException: Nullable object must have a value. at 
System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource) at 
Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.HandleDeletionTrigger(List`1 filterResults, String filterText, ImmutableArray`1 filters, ImmutableArray`1 highlightedList) at 
Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.UpdateCompletionList(IAsyncCompletionSession session, AsyncCompletionSessionDataSnapshot data, CancellationToken cancellationToken) at 
Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.UpdateCompletionListAsync(IAsyncCompletionSession session, AsyncCompletionSessionDataSnapshot data, CancellationToken cancellationToken) at 
Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Implementation.AsyncCompletionSession.&lt;&gt;c__DisplayClass92_0.&lt;UpdateSnapshot&gt;b__0() at 
Microsoft.VisualStudio.Text.Utilities.GuardedOperations.&lt;CallExtensionPointAsync&gt;d__34`1.MoveNext() --- End of stack trace from previous location where exception was thrown --- at 
Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```
</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32142</IssueID>
    <RepoID>1</RepoID>
    <Title>Revisit warnings flags to `NullableWalker.ApplyConversion`</Title>
    <Description>Currently, we pass two flags to control warnings: `reportTopLevelWarnings` and `reportRemainingWarnings`.
`reportTopLevelWarnings` controls outer top-level warnings, while `reportRemainingWarnings` controls the rest (including top-level warnings involved in user-defined conversions).

There are only few scenarios where we set one flag, but not the other. I think we should review those scenarios in light of user-defined conversions. 
It is possible that the flags may be wrong (not reflecting the semantics we need) or that they could be merged.


FYI @cston </Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32141</IssueID>
    <RepoID>1</RepoID>
    <Title>Breaking parsing change in nullable reference types for arrays</Title>
    <Description>There is an unfortunate ambiguity in parsing an array type introduced by the addition of the nullable feature.  This prefix of an expression
``` c#
a ? x is A[][] ? b : c
```
Can be considered to mean
``` c#
a ? (x is A[][]? b) : c
```
But it could also be followed by a couple of additional tokens (`: d`)and taken to mean
``` c#
a ? ((x is A[][]) ? b : c)
  : d
```
We would have to know the context (of the enclosing expression) in order to know how to parse the array type deep down inside of it.  I don’t see a straightforward way to disambiguate at parse time. The latter interpretation was the correct interpretation in C# 5 code.  The parser changes for nullable types therefore broke compatibility here, as this code is now attempted (and failing) to parse as the first interpretation.

Similarly, the expression
``` c#
x is A[][] ? b &amp;&amp; c
```
Can be considered to mean
``` c#
(x is A[][]? b) &amp;&amp; c
```
But it could also be followed by a couple of additional tokens (`: d`) and taken to mean
``` c#
(x is A[][]) ? b &amp;&amp; c
    : d
```
Similarly, the latter interpretation was the correct interpretation in C# 5 code but is now rejected in the parser due to parsing changes for nullable types.

See also #32025 and #31911 which are symptoms of this problem.

Note that we would not have this ambiguity if we had taken a different decision on how to parse the nullable annotations on an array type.  For example, if we parsed array types using the natural order rather than the inside-out order, the first interpretation is not a valid parse because we would never accept a nullable type as the type of a declaration pattern.  I suggest that this should motivate the LDM to reconsider how nullable annotations of array types are parsed.

</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32140</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32139</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32138</IssueID>
    <RepoID>1</RepoID>
    <Title>Add accessibility modifier quick fix removes extern</Title>
    <Description>**Version Used**: VS 2019 Preview 1

**Steps to Reproduce**:

1. Use .editorconfig that requires accessibility modifiers
2. Put this in a class:

```csharp
[DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
static extern int GetCurrentPackageFullName(ref int packageFullNameLength, StringBuilder packageFullName);
```

3. Run the quick fix "Add accessibility modifiers"


**Expected Behavior**:
```csharp
[DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
private static extern int GetCurrentPackageFullName(ref int packageFullNameLength, StringBuilder packageFullName);
```

**Actual Behavior**:

```csharp
[DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
private static int GetCurrentPackageFullName(ref int packageFullNameLength, StringBuilder packageFullName);
```
The `extern` was removed.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32137</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix and validate compiler extension VSIX</Title>
    <Description>This adds validation to Roslyn.Compilers.Extension.vsix to verify all of the correct DLLs are present. This is essentially the same list we have for Microsoft.Net.Compilers.nupkg as it's logically the same deployment. 

This also fixes up the missing DLL that it found. 

Follow up to #32115</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32136</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix ITableDataSource support for multiple sinks</Title>
    <Description>While the VS TDS only adds one sink of its own, this is something of an implementation detail, and doesn't support anyone else adding their own sink, which would lead to this code malfunctioning.
With this change, the FindUsages code tracks and updates all sinks, and only terminates an async search when *all* sinks have been removed.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>17/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32135</IssueID>
    <RepoID>1</RepoID>
    <Title>Refactor: Extract Local Function</Title>
    <Description>&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;public void Add()
{
    var radius = 1.23;

    var area = 3.14 * radius * radius
}&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;When&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&amp;quot;Quick Actions and Refactorings&amp;quot; menu is opened and &amp;quot;Extract Local Function&amp;quot; is selected&lt;br&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Then&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;public void Add()
{
    var radius = 1.23;
    NewLocalFunction();

    void NewLocalFunction()
    {
        var area = 3.14 * radius * radius;
    }
}&lt;/pre&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/360438/refactor-extract-local-function.html
VSTS ticketId: 707648_
_These are the original issue comments:_

Fiona Niu[MSFT] on 10/17/2018, 07:11 PM (77 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps. &lt;/p&gt;
Kendra Havens [MSFT] on 10/31/2018, 00:53 PM (64 days ago): &lt;p&gt;Your suggestion has been queued up for prioritization.  Feature suggestions are prioritized based on the value to our broader developer community and the product roadmap. We may not be able to pursue this one immediately, but we will continue to monitor it up to 90 days for community input&lt;/p&gt;

Kendra Havens [MSFT] on 1/3/2019, 00:35 PM (58 min ago): &lt;p&gt;To clarify, is this request specifically for providing an option for the extracted method to be local as opposed to the current &lt;a target="_blank"&gt;extract method refactoring&lt;/a&gt;? Would you prefer both options to appear in the Quick Actions drop down all the time or only in a specific context? I appreciate any details that help explain your preferred experience.&lt;/p&gt;

Lopez Marc Rainier on 1/3/2019, 00:51 PM (42 min ago): &lt;p&gt;The request is specifically for providing an additional option for the extracted method to be local in addition to the current extract method refactoring. Both options appearing in the Quick Actions if the code to extract is inside a regular method and not already in a local function is my preferred experience.&lt;/p&gt;
</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32134</IssueID>
    <RepoID>1</RepoID>
    <Title>completion: do not insert extra colon if colon has been typed</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/32096
fixes https://github.com/dotnet/roslyn/issues/32074</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32133</IssueID>
    <RepoID>1</RepoID>
    <Title>IDE0060 (remove unused parameter) should not fire for deserialization constructor</Title>
    <Description>**Version Used**: 

28502.214.d16.0stg

**Steps to Reproduce**:

```c#
internal sealed class NonSerializable
{
    private readonly string _value;
    public NonSerializable(string value) =&gt; _value = value;
    public string Value =&gt; _value;
}

[Serializable]
internal sealed class CustomSerializingType : ISerializable
{
    private readonly NonSerializable _nonSerializable;

    public CustomSerializingType(SerializationInfo info, StreamingContext context) // IDE0060 wants to remove 'context'
    {
        _nonSerializable = new NonSerializable(info.GetString("KEY"));
    }

    public void GetObjectData(SerializationInfo info, StreamingContext context)
    {
        info.AddValue("KEY", _nonSerializable.Value);
    }
}
```

**Expected Behavior**:

No diagnostic.

**Actual Behavior**:

Diagnostic.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32132</IssueID>
    <RepoID>1</RepoID>
    <Title>Navigate to has an error when open two solutions one by one</Title>
    <Description>**Affected Branch:** d16.0stg 
**Affected Build:** 28419.233
**Steps to reproduce:**
1. Open a new and then open a solution1
2. Close solution1 and open a solution2
3. Search "Main" in navigate to box

**Expect:** Only one result

**Actual:** There are two results, including solution1 result

![image](https://user-images.githubusercontent.com/1408396/50656931-7cfdec80-0f5a-11e9-848b-980dc7461aad.png)

Note: This issue worked well on early d16.0stg[28417.116]</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32131</IssueID>
    <RepoID>1</RepoID>
    <Title>Bring over CancellationTokenSequence</Title>
    <Description>As mentioned by @sharwell in https://github.com/dotnet/roslyn/pull/31918#discussion_r242721204

</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32130</IssueID>
    <RepoID>1</RepoID>
    <Title>Visual Basic editor election is off</Title>
    <Description>When I copy text from an edited line and then Control+Click another word and paste, the word is not replaced correctly.

Instead it replaces the selection shifted. This seems to occur when the source line will be formatted once the caret leaves the line, selecting the same amount of text in the new location.

I noticed this started about one or two updates ago and I was hoping it would be fixed. It's really annoying so I'm reporting it now.

![visualbasicbug](https://user-images.githubusercontent.com/12449387/50657122-5b950480-0f4a-11e9-91a2-fb8a844c77e3.gif)


_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/408239/visual-basic-editor-election-is-off.html
VSTS ticketId: 751139_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32129</IssueID>
    <RepoID>1</RepoID>
    <Title>C# simplify intitialiation does not understand that 'default(T)' is equivalent to new 'T()'</Title>
    <Description>For exposition purposes:

```csharp
class T { public int f; }
```

For the following, you get the suggestion to simplify init. That's good.

```csharp
var t = new T();
t.f = 0;
```

For the following (equivalent) code, you do not get that suggestion. That's bad.

```csharp
var t = default(T);
t.f = 0;
```

Please give that latter case some TLC.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/405414/c-simplify-intitialiation-does-not-understand-that.html
VSTS ticketId: 748847_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32128</IssueID>
    <RepoID>1</RepoID>
    <Title>Wait for design mode before closing a solution</Title>
    <Description>This change improves integration test reliability by ensuring the debugger is terminated prior to attempting to close a solution.

📝 This pull request builds on #32122. Only the last commit is unique to this pull request.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32127</IssueID>
    <RepoID>1</RepoID>
    <Title>Use VsShellUtilities to open a file in design view</Title>
    <Description>This change replaces the use of DTE with `VsShellUtilities.OpenDocument` for opening a file in design mode.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32126</IssueID>
    <RepoID>1</RepoID>
    <Title>Expand complete statement tests to include formatting and completion variations</Title>
    <Description>Follow-up issue for #30743 
 
Complete statement tests should include permutations of the following features enabled/disabled
1. formatting
2. brace completion
3. normal completion
4. "complete statement" (this feature).

As requested by @CyrusNajmabadi  https://github.com/dotnet/roslyn/pull/30743#discussion_r231997757</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32125</IssueID>
    <RepoID>1</RepoID>
    <Title>Complete statement should return early for multiple caret and/or rectangular selection</Title>
    <Description>Follow-up issue for https://github.com/dotnet/roslyn/pull/30743

Complete statement should return early when multiple carets, non-empty selections, and/or rectangular selection are active.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32124</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve error recovery after missing "&gt;" token</Title>
    <Description>Previously we assumed that when a `&gt;` or `,` token was missing, the missing token was a `,`.

This PR assumes that the missing token is `&gt;`, unless a lookahead of one suggests otherwise.

A fix to https://github.com/dotnet/roslyn/issues/24642</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>06/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32123</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32122</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix .NET Core project tests</Title>
    <Description>Closes #18996
Closes #19090
Closes #19091

Implements a workaround for #32121.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32121</IssueID>
    <RepoID>1</RepoID>
    <Title>Error list sometimes doesn't clear on solution close</Title>
    <Description>Observed in some recent integration test runs.

⚠️ The following workaround should be removed when this issue is fixed:

https://github.com/dotnet/roslyn/blob/f4e99378935b880202d49e3a75ca99cbd8f498c3/src/VisualStudio/IntegrationTest/TestUtilities/InProcess/ErrorList_InProc.cs#L106-L112</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32120</IssueID>
    <RepoID>1</RepoID>
    <Title>Synthesize record non-virtual Equals</Title>
    <Description>
    </Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32119</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix QuickInfo tests</Title>
    <Description>Closes #19914</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32118</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix IDE0055 formatting errors</Title>
    <Description>
    </Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32117</IssueID>
    <RepoID>1</RepoID>
    <Title>Add System.Runtime.CompilerServices.Unsafe to compilers extension</Title>
    <Description>This missing dependency resulted in integration test failures for project build scenarios.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32116</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix a regression in dynamic event addition that would fail at runtime.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/32068. This was a regression in how we check for dynamic events. Previous to my original bugfix, dynamic compound assignment would be evaluated like this:
```C#
d.Property += value;

// Roughly converted to

var valTemp = value;
var dTemp = d;
if (Runtime.IsEvent(d, "Property") add_Event(dTemp, "Property", valTemp);
else dTemp.Property += valTemp;
```

This is, of course, very wrong, and messes up order of operations even for non-event compound assignments. After my original bugfix, we has this:

```C#
var dTemp = d;
var propertyTemp = dTemp.Property; // Bug here: if d.Property is an event, runtime throws an exception
var valTemp = val;
if (Runtime.IsEvent(dTemp, "Property") add_Event(dTemp, "Property", valTemp);
else propertyTemp += valTemp;
```

The new version generates this:
```C#
var dTemp = d;
var isEvent = Runtime.IsEvent(d, "Property");
var propertyTemp = !isEvent ? d.Property : null; // Unfortunately necessary, because if value is a lambda or other similar expression (or has nested similar expressions) we don't want to duplicate across branches.
var valTemp = value;
if (isEvent) add_Event(dTemp, "Property", valTemp);
else propertyTemp += valTemp;
```

This final version correctly preserves the order of operations and checks whether the property is event before attempting to save off to a field.

@dotnet/roslyn-compiler @jcouv @AlekseyTs for review. Unfortunately the dynamic il changes are massive, because large blocks of code were reordered.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32115</IssueID>
    <RepoID>1</RepoID>
    <Title>Fix compiler extension VSIX dependencies</Title>
    <Description>We did not include required dependencies in Compiler Extension VSIX.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32114</IssueID>
    <RepoID>1</RepoID>
    <Title>async completion: do not participate for some LiveShare scenarios</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/31965

draft: needs a validation from the LiveShare team</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32113</IssueID>
    <RepoID>1</RepoID>
    <Title>A Tuple of Actions gets formatted with extra newlines incorrectly</Title>
    <Description>In Visual Studio 15.9.3 the following tuple gets formatted weirdly. This is the initial tuple:

```csharp
(Action, Action, Action) tuple = (
	() =&gt; { },   
	() =&gt; { },			
	() =&gt; { });
```

and it gets formatted as such:

```csharp
(Action, Action, Action) tuple = (
	() =&gt; { }
,
	() =&gt; { }
,
	() =&gt; { }
);
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/397417/a-tuple-of-actions-gets-formatted-with-extra-newli.html
VSTS ticketId: 739232_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32112</IssueID>
    <RepoID>1</RepoID>
    <Title>Ensure IOperation/CFG doesn't crash in presence of using declarations:</Title>
    <Description>- Make using declarations return operationkind.none
- Return the declarations as child nodes of the using declaration
- Add a couple of placeholder tests to ensure nothing crashes</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32111</IssueID>
    <RepoID>1</RepoID>
    <Title>Adjust pattern-based lookup for `await foreach`</Title>
    <Description>Pattern-based 'await foreach' should find 'GetAsyncEnumerator' and 'MoveNextAsync' by binding them with no arguments.

So `GetAsyncEnumerator(params int[] x)` or `GetAsyncEnumerator(int optional = 0)` would be recognized, in addition to `GetAsyncEnumerator()` and `GetAsyncEnumerator(CancellationToken token = default)`.

</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32110</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master into features/recursive-patterns</Title>
    <Description>
    </Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32109</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to features/editorconfig-in-compiler</Title>
    <Description>
This is an automatically generated pull request from master into features/editorconfig-in-compiler.

``` bash
git fetch --all
git checkout merges/master-to-features/editorconfig-in-compiler
git reset --hard upstream/features/editorconfig-in-compiler
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-features/editorconfig-in-compiler --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32108</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32107</IssueID>
    <RepoID>1</RepoID>
    <Title>bound-node representation of ITuple-based positional pattern with properties</Title>
    <Description>It isn't clear how to represent, in bound nodes, an ITuple-based positional pattern with a property subpattern.  Looking at the bound nodes, it probably does not work.
</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32106</IssueID>
    <RepoID>1</RepoID>
    <Title>Improve diagnostics for duplicate modifiers on local functions</Title>
    <Description>Improve diagnostics for duplicate modifiers on local functions:
```C#
class Program
{
    static void M()
    {
        static static void L1() { }
        async async void L2() { }
        unsafe unsafe void L3() { }
    }
}
```
```
c.cs(5,9): error CS0106: The modifier 'static' is not valid for this item
c.cs(5,16): error CS0106: The modifier 'static' is not valid for this item
c.cs(6,21): error CS1002: ; expected
c.cs(7,16): error CS1031: Type expected
```
Compare to the diagnostics reported for methods:
```C#
class Program
{
    static static void F1() { }
    async async void F2() { }
    unsafe unsafe void F3() { }
}
```
```
c.cs(3,12): error CS1004: Duplicate 'static' modifier
c.cs(4,11): error CS1004: Duplicate 'async' modifier
c.cs(5,12): error CS1004: Duplicate 'unsafe' modifier
```
</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32105</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider warning for `?` clashing with `!`</Title>
    <Description>In the following example, it is possible that `!` is suppressing a bug which I didn't intend. Maybe I know that `field` is not null, but that `c` could be null.

```C#
public class C
 {
     public string? field;
     void M(C? c)
     {
         c?.field!.ToString();
          c.ToString(); // We learned from suppressed dereference that `c` isn't null
     }
 }
```
Found in https://github.com/dotnet/roslyn/pull/32078/files#r244872246</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32104</IssueID>
    <RepoID>1</RepoID>
    <Title>Wrong region indenting in switch block</Title>
    <Description>This code gets wrongly indented:

switch (...)
{
    case ...

    #region Name

    case ...:
        break;

    #endregion Name
}

The endregion line is indented one level too far to the right. This is reproducible by simple selecting  such code, cutting and pasting it back.

Reported at https://developercommunity.visualstudio.com/content/problem/328622/wrong-region-indenting-in-switch-block.html</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32103</IssueID>
    <RepoID>1</RepoID>
    <Title>Issue with tuples and unmanaged constraint</Title>
    <Description>https://stackoverflow.com/questions/53992855/how-do-a-struct-containing-valuetuple-can-satisfy-unmanaged-constraint-but-valu

```cs
class Program
{
    static void DoSomething&lt;T&gt;() where T : unmanaged { }
    struct MyStruct {  public (int, int) Value; }
    static void Main(string[] args)
    {
        DoSomething&lt;MyStruct&gt;();    // → OK
        DoSomething&lt;(int, int)&gt;();  // → Shows compile-time error
    }
}
```

Reported by @johnkellyoxford</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32102</IssueID>
    <RepoID>1</RepoID>
    <Title>Baselining new rules (aka. grandfathering in debt) on a large repo is quite difficult</Title>
    <Description>**Version Used**: 
2.9

**Steps to Reproduce**:
With the goal of bringing Roslyn Analyzers as a build-breaking code hygiene tool to your large, many-sln codebase....

1. Wire up Roslyn to run a default set of analyzers as part of every project. This will likely require .targets changes and build.props edits.
2. Run a build. As expected, the build is broken in potentially thousands of places.
3. Grandfather in all existing debt.

**Expected Behavior**:
Feature exists to baseline the entire repo.

**Actual Behavior**:
No such feature exists. 

Since the feature does not yet exist, we built a custom [ScopeIdentifier analyzer](https://o365exchange.visualstudio.com/O365%20Core/_git/bothell?path=%2Fsources%2Fdev%2FAnalyzers%2Fsrc%2FRoslyn%2FScopeIdentifier%2FScopeIdentifier.cs&amp;version=GBmaster) which generates all of the missing information needed to be able to crunch a Roslyn SARIF file into a LocalSuppressions.cs. We include this scopeidentifier like a normal analyzer `&lt;Analyzer Include="…ScopeIdentifier.dll" /&gt;` and drop an `&lt;errorlog&gt;foo.Sarif&lt;/errorlog&gt;` during a build. From there we have a [Roslyn suppressor tool](https://o365exchange.visualstudio.com/O365%20Core/_git/bothell?path=%2Fsources%2Fdev%2FTools%2Fsrc%2FRoslynSuppression&amp;version=GBmaster) combine these two files into LocalSuppressions.cs.</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32101</IssueID>
    <RepoID>1</RepoID>
    <Title>VS debugger should stop on the first line of async Main method when the debugging is started with the "Step Into" or "Step Over" command</Title>
    <Description>**Version Used**: 2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a

**Steps to Reproduce**:

1. Create a new console app project with async Main() method.
2. Build the project and start debugging using F10 (Step Over) or F11 (Step Into).

**Expected Behavior**: The program starts and the VS debugger stops on the line with the opening brace of the Main() method. Currently, this is the behavior of the debugger when the Main() method is not async.

**Actual Behavior**: The program starts and runs to completion.

**Workaround**: Add an explicit breakpoint in the beginning of the Main() method.</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32100</IssueID>
    <RepoID>1</RepoID>
    <Title>Support BoundUsingLocalDeclarations in IOperation and CFG</Title>
    <Description>BoundUsingLocalDeclarations are currently implemented as OperationKind.None, and return the List of local declarations as its children. We should implement this correctly with an Operation node.

We should also support CFG correctly with using declarations. Currently we report the using declaration as OperationKind.None in a single block, and thus don't report the actual underlying block structure generated by lowering. 

[jcouv update:] When fixing this, let's also verify IDE behavior got fixed. For example https://github.com/dotnet/roslyn/issues/36502</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32099</IssueID>
    <RepoID>1</RepoID>
    <Title>Instantiating types not suggested inside tuples</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50

**Steps to Reproduce**:
```C#
(int a, string b) tuple = (4, new |
```

**Expected Behavior**: `new string` to be suggested by autocompletion.

**Actual Behavior**: No autocompletion suggestions even when invoked explicitly. The tooltip suggests the type is known though and should be suggested.
</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32098</IssueID>
    <RepoID>1</RepoID>
    <Title>Add parameter quick fix does not support multiple parameters</Title>
    <Description>**Version Used**: VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50

**Steps to Reproduce**:

```C#
static void Main()
{
    Test(true, true, true);
}

static void Test() { }
```
1. Invoke 'Add Parameter to Program.Test()'

**Expected Behavior**:
```C#
static void Test(bool v, bool v1, bool v2);
```

**Actual Behavior**:
Quick fix does not result in compilable code as it needs to be invoked for all parameters individually.
```
static void Test(bool v);
```</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32097</IssueID>
    <RepoID>1</RepoID>
    <Title>Items added to s_structuresTable are never removed</Title>
    <Description>The values of `s_structuresTable` always contain strong references to their keys, so items added to the table will never be removed. See dotnet/corefx#19765.</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32096</IssueID>
    <RepoID>1</RepoID>
    <Title>Extra ':' added when typing named argument</Title>
    <Description>16.0 build 28501:

In a compiler unit test, say `LocalFunctionTests.RefReturningAsyncLocalFunction`, enter:
```
    CreateCompilation(source, parseOptions:
```

Result:
&lt;img width="401" alt="extracharacter" src="https://user-images.githubusercontent.com/10732005/50606209-d17d6b00-0e79-11e9-9c0e-bc92a3bb8668.png"&gt;</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32095</IssueID>
    <RepoID>1</RepoID>
    <Title>Consider adding complete statement support for additional statement kinds</Title>
    <Description>- [ ] What about a local-function with an expression body?
- [ ] What about goto-default?
- [ ] What about 'break/continue'?
- [ ] What about 'yield'?
- [ ] What about using-directives?
- [ ] What about a delegate-decl?
- [ ] What about a property with an expression-body (or any member with an expression body)?

_Originally posted by @CyrusNajmabadi in https://github.com/dotnet/roslyn/pull/30743#discussion_r242672376_</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32094</IssueID>
    <RepoID>1</RepoID>
    <Title>(switch) Pattern matching fail on type with implicit cast operator?</Title>
    <Description>@paolomeozzi commented on [Fri Dec 29 2017](https://github.com/dotnet/csharplang/issues/1229)

I have a struct type `Gender` (a _strong enum type_):
```C#
public struct Gender
{
    public static readonly Gender Male = new Gender(0);
    public static readonly Gender Female = new Gender(1);

    private readonly int value;
    public static Gender Parse(string text)
    {
        text = text.ToUpper();
        if (text == "M")
            return Male;

        if (text == "F")
            return Female;

        throw new FormatException("Invalid format");
    }
    private Gender(int value) =&gt; this.value = value;

    public static bool operator ==(Gender left, Gender right) =&gt; left.value == right.value;
    public static bool operator !=(Gender left, Gender right) =&gt; left.value != right.value;
    public override string ToString() =&gt; value == 0 ? "M" : "F";

}
```

And this code, that work fine:
```C#
Gender gender = Gender.Parse("M");
switch (gender)
{
    case Gender g when g == Gender.Male: Console.WriteLine("Male");break;
    case Gender g when g == Gender.Female: Console.WriteLine("Female"); break;
    default:
        break;
}
```
But, if i add a implicit  cast operator:

```C#
public struct Gender
{
    ...
    public static implicit operator string(Gender gender) =&gt; gender.ToString();
}
```

The code dot not compile: "Error CS8121 An expression of type 'string' cannot be handled by a pattern of type 'Gender'.	"

Same thing if cast operator is `int` instead of `string`.
But, if i add both cast operators, the `switch` works well again!

Is a weird behavior or is by design?


---

@svick commented on [Fri Dec 29 2017](https://github.com/dotnet/csharplang/issues/1229#issuecomment-354499700)

This seems to be according to [the version of the spec that's quoted in the relevant part of the compiler source code](https://github.com/dotnet/roslyn/blob/1d28ff9/src/Compilers/CSharp/Portable/Binder/SwitchBinder.cs#L437-L446):

```c#
// SPEC:    The governing type of a switch statement is established by the switch expression.
// SPEC:    1) If the type of the switch expression is sbyte, byte, short, ushort, int, uint,
// SPEC:       long, ulong, bool, char, string, or an enum-type, or if it is the nullable type
// SPEC:       corresponding to one of these types, then that is the governing type of the switch statement. 
// SPEC:    2) Otherwise if exactly one user-defined implicit conversion (§6.4) exists from the
// SPEC:       type of the switch expression to one of the following possible governing types:
// SPEC:       sbyte, byte, short, ushort, int, uint, long, ulong, char, string, or, a nullable type
// SPEC:       corresponding to one of those types, then the result is the switch governing type
// SPEC:    3) Otherwise (in C# 7 and later) the switch governing type is the type of the
// SPEC:       switch expression.
```

So, if you have exactly one conversion operator to `int` or `string`, point 2 applies and your type is converted. If you have zero or more than one such operators, point 3 applies and the type is not converted.

I believe this is because of backwards compatibility: if you had a type with one such conversion operator in C# 6, you could use it in a `switch` because of the conversion. To make sure C# 7 doesn't break any old code, it still has to apply that conversion.

---

@bondsbw commented on [Fri Dec 29 2017](https://github.com/dotnet/csharplang/issues/1229#issuecomment-354526500)

That is an unfortunate rule given that the provided example `switch` block is not valid for versions less than 7.

It might be too specific a case, but since it is an error in any version then it would not be a breaking change to fix it, a la better betterness.

---

@svick commented on [Sat Dec 30 2017](https://github.com/dotnet/csharplang/issues/1229#issuecomment-354542641)

@bondsbw What exactly is your suggestion? That if the `switch` contains any C# 7-only `case`s, it should skip point 2? I think that wouldn't be a breaking change, if it was added in C# 7.0, but it's too late for that now. Or do you have a different suggestion?

---

@paolomeozzi commented on [Sat Dec 30 2017](https://github.com/dotnet/csharplang/issues/1229#issuecomment-354554992)

@svick Thanks for explanation, but... why would the @bondsbw proposal be a breaking change?
The old code (C# 6.0) is not affected by a possible modification of the language; 
new code currently does not compile; after the change would compile. I do not think it's a breaking change.

I'm not concerned of example posted per sé:
```C#
switch (gender)
{
    case Gender g when g == Gender.Male: Console.WriteLine("Male");break;
    case Gender g when g == Gender.Female: Console.WriteLine("Female"); break;
    default:
        break;
}
```
I think is a rare use of switch. I concerned of this scenario:

1. I realize a type.
2. Others programmers consume my type. (And write code above)
3. I add a function to my type (implicit operator cast) and programmer's code breaks!

That is an unfortunate.


---

@gafter commented on [Sat Dec 30 2017](https://github.com/dotnet/csharplang/issues/1229#issuecomment-354566931)

@bondsbw Are you suggesting that the addition of a `when` clause should cause the switch expression to no longer be subject to the conversion? That is something that people can do (without error) in C# 7, so it would be a breaking change.


---

@paolomeozzi commented on [Sat Dec 30 2017](https://github.com/dotnet/csharplang/issues/1229#issuecomment-354572392)

@gafter, I (and @bondsbw, i think) suggest something more specific. 
Currently, if switch expression is a user defined type (no enum) that defines a (only) implicit cast to primitive type, and exists a case with that type, the code does not compile. This code can not exist in c# 6, so it should be possible to change the language without producing a breaking change.


---

@bondsbw commented on [Sat Dec 30 2017](https://github.com/dotnet/csharplang/issues/1229#issuecomment-354574789)

@svick @gafter My suggestion would alter spec item 2) above to something like the following:

```rst
2) Otherwise if exactly one user-defined implicit conversion (§6.4) exists from the
   type of the switch expression to one of the following possible governing types:
   sbyte, byte, short, ushort, int, uint, long, ulong, char, string, or, a nullable type
   corresponding to one of those types, 
   *and no case patterns exist which are incompatible with the result,*
   then the result is the switch governing type
```

So this rule would still apply the conversion if the switch only contains existing valid cases such as these:
```c#
case string s when s.StartsWith("M"):
case string s:
case object o:
case string _:
```

But this rule would not apply if there exists any currently-invalid cases, meaning they would drop to rule 3 and the switch type would become the type `Gender` (eliminating CS8121):
```c#
case Gender g when g == Gender.Male:
case Gender g:
```

---

@bondsbw commented on [Sat Dec 30 2017](https://github.com/dotnet/csharplang/issues/1229#issuecomment-354574947)

Another idea:

Make it so the type isn't determined for the entire `switch`, but just at each `case` which would allow a mixture of `case Gender g when g == Gender.Male:` and a fallback `case string s:`.

I haven't thought this through so there might be issues with such an interpretation.

---

@HaloFour commented on [Sat Dec 30 2017](https://github.com/dotnet/csharplang/issues/1229#issuecomment-354576236)

I think I'd rather wait to see how ADTs play out.  I imagine they would just follow some convention as described in this issue.  But it would suck if a decision here to make pseudo-ADTs work would box in future design.

---

@gafter commented on [Sun Dec 31 2017](https://github.com/dotnet/csharplang/issues/1229#issuecomment-354622261)

The LDM did consider these options. Early on we favored some of the suggested approaches, but found them problematic:
- If we make some cases use the original value and some use the converted value, it is hard to reason about the set of cases as a whole, and some of them may have unexpected meaning due to the conversion being unexpectedly applied or not applied.
- If we make the conversion depend on whether there are any "new" constructs, then the addition of a "where" clause near the bottom of the switch can affect the meaning of the expression at the top of the switch. That kind of nonlocal behavior is usually confusing.
- A similar issue occurs if we depend on pattern compatibility.

If you are so unfortunate that the author of the type you're switching on provided a conversion to a switchable type, then you can cast your switch expression to `object` to avoid the conversion occurring. The LDM felt that this was an easy enough workaround for the problem that no more complicated accommodation would be needed.

---

@bondsbw commented on [Sun Dec 31 2017](https://github.com/dotnet/csharplang/issues/1229#issuecomment-354624070)

Makes sense.  In that case, I suggest extending the error message to explain that the implicit cast is being applied and perhaps hint at the `object` cast suggestion by @gafter.

---

@gafter commented on [Wed Jan 02 2019](https://github.com/dotnet/csharplang/issues/1229#issuecomment-450935746)

Moving to Roslyn for a possibly improved diagnostic.

</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32093</IssueID>
    <RepoID>1</RepoID>
    <Title>Style preferences to include `this.` don't work in ctor</Title>
    <Description>A constructor calling its base class' constructor can't use `this.`, but auto-formatting applies the chage.

```csharp
public class Base{
  public string Name{get;}
  public Base(string name){...}
}

public class Child: Base{  
  public Child():
     base(AppContext.GetValueFor(nameof(this.Name)){
}
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/415902/style-preferences-to-include-this-dont-work-in-cto.html
VSTS ticketId: 757067_
_These are the original issue comments:_

Jinu Joseph [MSFT] on 1/1/2019, 05:31 PM (17 hours ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32092</IssueID>
    <RepoID>1</RepoID>
    <Title>Optimise DisplayClass Allocations</Title>
    <Description>Merge display classes created for closures when it is safe to do so in order to reduce allocations.

Fix to https://github.com/dotnet/roslyn/issues/29965</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32091</IssueID>
    <RepoID>1</RepoID>
    <Title>Track assignments to ref/out parameters as normal locals</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/29954</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32090</IssueID>
    <RepoID>1</RepoID>
    <Title>No nested nullability warnings on converting suppressed expressions</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/29642 (! operator should suppress warning for nested nullability mismatch)
Fixes https://github.com/dotnet/roslyn/issues/29900 (missing diagnostic in compound assignment)

Because `!` can now suppress nested warnings or warnings from user-defined conversions, it is useful to allow `!` on all types. So I removed `WRN_SuppressionOperatorNotReferenceType`.

Relates to https://github.com/dotnet/roslyn/issues/29907 (finalize which types `!` should be allowed on)</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32089</IssueID>
    <RepoID>1</RepoID>
    <Title>If I remove the space from { 0}, to {0}, it works perfectly. </Title>
    <Description>With this statement: Console.WriteLine(&amp;quot;char.IsWhiteSpace('Hello There',5): { 0}&amp;quot;,char.IsWhiteSpace(&amp;quot;Hello There&amp;quot;, 5));

I get:
Unhandled Exception: System.FormatException: Input string was not in a correct format.
   at System.Text.StringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ParamsArray args)
   at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)
   at System.IO.TextWriter.WriteLine(String format, Object arg0)
   at System.IO.TextWriter.SyncTextWriter.WriteLine(String format, Object arg0)
   at System.Console.WriteLine(String format, Object arg0)
   at WriteTextFile.WriteTextFile.CharFunctionality() in C:\Users\qetuo\Documents\Visual Studio 2018\WriteTextFile\WriteTextFile\Program.cs:line 182

If I remove the space from { 0}, to {0}, it works perfectly. 

Having the space should not be a problem.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/398878/if-i-remove-the-space-from-0-to-0-it-works-perfect.html
VSTS ticketId: 739988_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32088</IssueID>
    <RepoID>1</RepoID>
    <Title>Problem with simplify suggestion var</Title>
    <Description>    static class Program
    {
        static void Main(string[] args)
        {
            if (!_data.TryGetValue(0, out List&lt;(int X, int Y)&gt; value))
                return;

            var x = value.FirstOrDefault().X;
        }

        private static Dictionary&lt;int, List&lt;(int, int)&gt;&gt; _data =
            new Dictionary&lt;int, List&lt;(int, int)&gt;&gt;();
    }


In this code `List&lt;(int X, int Y)&gt;` is faded with suggestion to simplify name to `var`. Although simplifying leads to compile time error

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/397138/problem-with-simplify-suggestion-var.html
VSTS ticketId: 739018_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32087</IssueID>
    <RepoID>1</RepoID>
    <Title>VisualBasicUseConditionalExpressionForAssignmentCodeRefactoringProvider STILL on Error</Title>
    <Description>You closed my last Error message as Duplicate but there is still the same error sice many releases.

try the following refactoring:

    Public Function ColName(aExtendedName As Boolean) As String
        If aExtendedName Then
            ColName = Current.SchemaName &amp; "." &amp; ColName()
        Else
            ColName = Name
        End If
    End Function

Result:
IDE0045 goes to Error

```
Here the Stack Trace:
System.InvalidCastException : Das Objekt des Typs &amp;quot;Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax&amp;quot; kann nicht in Typ &amp;quot;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&amp;quot; umgewandelt werden.
   at Microsoft.CodeAnalysis.VisualBasic.UseConditionalExpression.VisualBasicUseConditionalExpressionForAssignmentCodeRefactoringProvider.GetDeclaratorSyntax(IVariableDeclaratorOperation declarator)
   at Microsoft.CodeAnalysis.UseConditionalExpression.AbstractUseConditionalExpressionForAssignmentCodeFixProvider`6.TryConvertWhenAssignmentToLocalDeclaredImmediateAbove(ISyntaxFactsService syntaxFacts,SyntaxEditor editor,IConditionalOperation ifOperation,ISimpleAssignmentOperation trueAssignment,ISimpleAssignmentOperation falseAssignment,TExpressionSyntax conditionalExpression)
   at async Microsoft.CodeAnalysis.UseConditionalExpression.AbstractUseConditionalExpressionForAssignmentCodeFixProvider`6.FixOneAsync[TStatementSyntax,TIfStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TExpressionSyntax,TConditionalExpressionSyntax](&amp;lt;Unbekannte Parameter&amp;gt;)
   at async Microsoft.CodeAnalysis.UseConditionalExpression.AbstractUseConditionalExpressionCodeFixProvider`4.FixAllAsync[TStatementSyntax,TIfStatementSyntax,TExpressionSyntax,TConditionalExpressionSyntax](&amp;lt;Unbekannte Parameter&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&amp;lt;Unbekannte Parameter&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&amp;lt;Unbekannte Parameter&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&amp;lt;Unbekannte Parameter&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&amp;lt;Unbekannte Parameter&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&amp;lt;Unbekannte Parameter&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&amp;lt;&amp;gt;c__DisplayClass11_0.&amp;lt;GetPreviewAsync&amp;gt;b__0(&amp;lt;Unbekannte Parameter&amp;gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&amp;lt;Unbekannte Parameter&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/403049/visualbasicuseconditionalexpressionforassignmentco.html
VSTS ticketId: 744255_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32086</IssueID>
    <RepoID>1</RepoID>
    <Title>Crash "Visual Studio" at rename variable in code</Title>
    <Description>&lt;p&gt;If the code contains a line with an error, and you are trying to rename the variable, the development environment crashes and Visual Studio restarts.

Visual Studio Verion 15.9.3 
Simple code: (Console app, Visual Basic)

```
Module Module1

    Sub Main()

        ' Try renaming the variable "val". (Right Click -&gt; Rename...)
        Dim val As Integer = 10

        ' Line code with error
        For (Int() i = 0; i &lt;val; i++)

    End Sub

End Module
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/394687/crash-visual-studio-at-rename-variable-in-code.html
VSTS ticketId: 736894_
_These are the original issue comments:_

Fiona Niu[MSFT] on 11/29/2018, 06:20 PM (32 days ago): &lt;p&gt;Thank you for your feedback. In order for us to investigate this further, could you please give us a dump file so that we can conduct further research? &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; 1. Please follow the instructions below, especially &amp;quot;Provide a trace and heap dump&amp;quot; section to record the issue you are experiencing.&lt;/p&gt;&lt;p&gt; 2.  https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio-2017 &lt;/p&gt;&lt;p&gt; 3. The recorded files can be found under %TEMP%\Microsoft\VSFeedbackCollector.&lt;/p&gt;&lt;p&gt; 4. Upload the files to this ticket by choosing insert file tag on add comment field then submit.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;We look forward to hearing from you!&lt;/p&gt;

Тютрюмов Максим on 11/29/2018, 08:42 PM (32 days ago): &lt;p&gt;Sent a record. Is that what you wanted?&lt;/p&gt;&lt;p&gt;Memory_8252_1543552764291.dmp 669 100 Kb (O_O). This is madness.&lt;/p&gt;

Fiona Niu[MSFT] on 11/29/2018, 11:32 PM (32 days ago): &lt;p&gt;Thank you for providing the information. We are forwarding the issue to the engineering team for investigating. The engineer will investigate the issue and keep you posted. &lt;/p&gt;
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32085</IssueID>
    <RepoID>1</RepoID>
    <Title>remove unnecessary parentheses causes compile error</Title>
    <Description>I surround my code with parentheses, after completeing code VS mark two pair of parentheses in a line unnecessary, when cursor is on first one and allow VS to &amp;quot;remove unnecessary parentheses&amp;quot; with &amp;quot;Alt + Enter&amp;quot; the second pair is now NOT unnecessary, and if cursor is on second one and allow VS to  &amp;quot;remove unnecessary parentheses&amp;quot; causes compile error

Line 59 in screenshot

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/415284/remove-unnecessary-parentheses-causes-compile-erro.html

![image](https://user-images.githubusercontent.com/12449387/50577730-68e3af00-0de3-11e9-93dc-c4007ddaf55f.png)

VSTS ticketId: 756627_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32084</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32083</IssueID>
    <RepoID>1</RepoID>
    <Title>Go to implementation not working in Visual Studio Community 2017</Title>
    <Description>DC Priority 1 issue 

When I try Go to implementation on an interface(through mouse right click as well as keywboard shortcut F12), it throws an error first time. On subsequent attempts nothing happens.
I am attaching the screenshot of the error and the activity log as well. Below is the error section from ActivityLog.xml generated in roaming profile for VS:

&amp;lt;entry&amp;gt;
    &amp;lt;record&amp;gt;2116&amp;lt;/record&amp;gt;
    &amp;lt;time&amp;gt;2018/12/20 11:25:51.813&amp;lt;/time&amp;gt;
    &amp;lt;type&amp;gt;Error&amp;lt;/type&amp;gt;
    &amp;lt;source&amp;gt;Editor or Editor Extension&amp;lt;/source&amp;gt;
    &amp;lt;description&amp;gt;System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.NullReferenceException: Object reference not set to an instance of an object.&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;amp;lt;CreateIndexAsync&amp;amp;gt;d__8.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;AddSourceTypesInProjectAsync&amp;amp;gt;d__29.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesInProjectAsync&amp;amp;gt;d__19.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesAsync&amp;amp;gt;d__17.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTransitivelyImplementingTypesWorkerAsync&amp;amp;gt;d__14.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;&amp;amp;gt;c__DisplayClass9_0.&amp;amp;lt;&amp;amp;lt;FindTypesFromCacheOrComputeAsync&amp;amp;gt;b__0&amp;amp;gt;d.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesFromCacheOrComputeAsync&amp;amp;gt;d__9.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__48.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__47.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsWorkerAsync&amp;amp;gt;d__4.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__3.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__2.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.AbstractFindUsagesService.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__0.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.GoToImplementation.GoToImplementationCommandHandler.StreamingGoToImplementation(Document document, Int32 caretPosition, IFindUsagesService findUsagesService, IStreamingFindUsagesPresenter streamingPresenter, CancellationToken cancellationToken, String&amp;amp;amp; messageToShow)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.GoToImplementation.GoToImplementationCommandHandler.ExecuteCommand(Document document, Int32 caretPosition, IFindUsagesService streamingService, CommandExecutionContext context)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.GoToImplementation.GoToImplementationCommandHandler.ExecuteCommand(GoToImplementationCommandArgs args, CommandExecutionContext context)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.&amp;amp;lt;&amp;amp;gt;c__DisplayClass14_1`1.&amp;amp;lt;Execute&amp;amp;gt;b__1()&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call, Predicate`1 exceptionFilter)&amp;amp;#x000D;&amp;amp;#x000A;---&amp;amp;gt; (Inner Exception #0) System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.NullReferenceException: Object reference not set to an instance of an object.&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;amp;lt;CreateIndexAsync&amp;amp;gt;d__8.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;AddSourceTypesInProjectAsync&amp;amp;gt;d__29.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesInProjectAsync&amp;amp;gt;d__19.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesAsync&amp;amp;gt;d__17.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTransitivelyImplementingTypesWorkerAsync&amp;amp;gt;d__14.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;&amp;amp;gt;c__DisplayClass9_0.&amp;amp;lt;&amp;amp;lt;FindTypesFromCacheOrComputeAsync&amp;amp;gt;b__0&amp;amp;gt;d.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesFromCacheOrComputeAsync&amp;amp;gt;d__9.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__48.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__47.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsWorkerAsync&amp;amp;gt;d__4.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__3.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__2.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.AbstractFindUsagesService.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__0.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;---&amp;amp;gt; (Inner Exception #0) System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.NullReferenceException: Object reference not set to an instance of an object.&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;amp;lt;CreateIndexAsync&amp;amp;gt;d__8.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;AddSourceTypesInProjectAsync&amp;amp;gt;d__29.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesInProjectAsync&amp;amp;gt;d__19.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesAsync&amp;amp;gt;d__17.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTransitivelyImplementingTypesWorkerAsync&amp;amp;gt;d__14.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;&amp;amp;gt;c__DisplayClass9_0.&amp;amp;lt;&amp;amp;lt;FindTypesFromCacheOrComputeAsync&amp;amp;gt;b__0&amp;amp;gt;d.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;---&amp;amp;gt; (Inner Exception #0) System.NullReferenceException: Object reference not set to an instance of an object.&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;amp;lt;CreateIndexAsync&amp;amp;gt;d__8.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;amp;lt;---&amp;amp;#x000D;&amp;amp;#x000A;&amp;amp;lt;---&amp;amp;#x000D;&amp;amp;#x000A;&amp;amp;lt;---&amp;amp;#x000D;&amp;amp;#x000A;&amp;lt;/description&amp;gt;
  &amp;lt;/entry&amp;gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/413245/go-to-implementation-not-working-in-visual-studio.html
VSTS ticketId: 754985_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32082</IssueID>
    <RepoID>1</RepoID>
    <Title>C# code format for linq should with an indent</Title>
    <Description>1. Create a new C# project, and type code just in the Main function:

```
var s = (from c in "test" select c).Distinct();
```

2-A. Press Enter before `select`, the code format will be:

```
var s = (from c in "test"
         select c).Distinct();
```

`select` will align to `from`, not good.
What about the new format:

```
var s = (from c in "test"
    select c).Distinct();
```

2-B. OR, Insert Enter before “.” will be:

```
var s = (from c in "test"select c)
.Distinct();
```

&amp;quot;.&amp;quot; will align to &amp;quot;var&amp;quot;, not good.
What about the new format:

```
var s = (from c in "test" select c)
    .Distinct();
```

2-C. OR, Insert Enter before “select” will be:

```
var s = (from c in "the"
select c).Distinct();
```

&amp;quot;.&amp;quot; will align to &amp;quot;var&amp;quot;, not good.
What about the new format:

```
var s = (from c in "test"
    select c).Distinct();
```

In a word, any new line in one code line block should always with an indent.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/409183/c-code-format-for-linq-should-with-an-indent.html
VSTS ticketId: 752329_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32081</IssueID>
    <RepoID>1</RepoID>
    <Title>PopulateSwitchCodeFixProvider encountered an error and has been disabled</Title>
    <Description>I am trying to play with a new C# 8 language feature using switch.  The compiler doesn't like what I have done and adds a red squiggle to the &amp;quot;switch&amp;quot; keyword. When I put the cursor on it and then click the light bulb, I get a message in the yellow info bar at the top that says:

'PopulateSwitchCodeFixProvider' encountered an error and has been disabled

It then has a link to &amp;quot;Show Stack Trace&amp;quot; (I have included it below) and 2 buttons, &amp;quot;Enable&amp;quot; and &amp;quot;Enable and ignore future errors&amp;quot;.

If I click on &amp;quot;Enable&amp;quot; and then on the light bulb, it does the same thing again.

The code I am trying to write is:

```
static string GetName(Person p)
{
	return (p.FirstName, p.MiddleName, p.LastName) switch
		{
			(string f, string m, string l)	=&gt; $"{f} {m[0]}. {l}",
			(string f, null, string l)	=&gt; $"{f} {l}",
			(string f, string m, null)	=&gt; $"{f} {m[0]}. &lt;someone&gt;",
			(string f, null, null)		=&gt; $"{f} &lt;someone&gt;",
			(null, string m, string l)	=&gt; $"Ms/Mr {m[0]}. {l}",
			(null, null, string l)		=&gt; $"Ms/Mr {l}",
			(null, string m, null)		=&gt; $"Ms/Mr {m[0]}. &lt;someone&gt;",
			(null, null, null)		=&gt; $"Ms/Mr &lt;someone&gt;",
		};
}
```

```
The stack trace is:
System.InvalidOperationException : Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.Analyzer.Analyze(SyntaxTriviaList list,AnalysisResult&amp;amp; result)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.Analyzer.Between(SyntaxToken token1,SyntaxToken token2)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.Create(SyntaxToken token1,SyntaxToken token2)
   at Microsoft.CodeAnalysis.Formatting.TokenStream.GetOriginalTriviaData(TokenData token1,TokenData token2)
   at Microsoft.CodeAnalysis.Formatting.TokenStream.GetColumn(TokenData tokenData,Func`3 triviaDataGetter)
   at Microsoft.CodeAnalysis.Formatting.FormattingContext.AddAnchorIndentationOperation(AnchorIndentationOperation operation)
   at Roslyn.Utilities.EnumerableExtensions.Do[T](IEnumerable`1 source,Action`1 action)
   at Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.&amp;lt;&amp;gt;c__DisplayClass14_0.&amp;lt;FormatAsync&amp;gt;b__0(Task`1 task)
   at Microsoft.CodeAnalysis.Formatting.TaskExecutor.SynchronousExecutor.ContinueWith[T1,T2](Task`1 previousTask,Func`2 nextAction,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.FormatAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Formatting.AbstractSyntaxFormattingService.FormatIndividuallyAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.CleanupDocumentAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessChangesAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&amp;lt;&amp;gt;c__DisplayClass11_0.&amp;lt;GetPreviewAsync&amp;gt;b__0(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&amp;lt;Unknown Parameters&amp;gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/416889/populateswitchcodefixprovider-encountered-an-error.html
VSTS ticketId: 757882_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32080</IssueID>
    <RepoID>1</RepoID>
    <Title>MoveTypeCodeRefactoringProvider encounted an error</Title>
    <Description>when I ctrl-dot on a class or interface that is in the file of a different piece of code, and then press down to select &amp;quot;move to ...&amp;quot; I get an error that tells me &amp;quot;MoveTypeCodeRefactoringProvider encounted an error and has been disabled&amp;quot;.

The stacktrace is:
```
System.InvalidOperationException : Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.Analyzer.Analyze(SyntaxTriviaList list,AnalysisResult&amp;amp; result)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.Analyzer.Leading(SyntaxToken token)
   at Microsoft.CodeAnalysis.CSharp.Formatting.TriviaDataFactory.CreateLeadingTrivia(SyntaxToken token)
   at Microsoft.CodeAnalysis.Formatting.TokenStream.GetOriginalTriviaData(TokenData token1,TokenData token2)
   at Microsoft.CodeAnalysis.Formatting.TokenStream.GetColumn(TokenData tokenData,Func`3 triviaDataGetter)
   at Microsoft.CodeAnalysis.Formatting.FormattingContext.AddAnchorIndentationOperation(AnchorIndentationOperation operation)
   at Roslyn.Utilities.EnumerableExtensions.Do[T](IEnumerable`1 source,Action`1 action)
   at Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.&amp;lt;&amp;gt;c__DisplayClass14_0.&amp;lt;FormatAsync&amp;gt;b__0(Task`1 task)
   at Microsoft.CodeAnalysis.Formatting.TaskExecutor.SynchronousExecutor.ContinueWith[T1,T2](Task`1 previousTask,Func`2 nextAction,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Formatting.AbstractFormatEngine.FormatAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Formatting.AbstractSyntaxFormattingService.FormatIndividuallyAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CSharp.RemoveUnnecessaryImports.AbstractCSharpRemoveUnnecessaryImportsService.FormatResultAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CSharp.RemoveUnnecessaryImports.AbstractCSharpRemoveUnnecessaryImportsService.RemoveUnnecessaryImportsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.MoveTypeEditor.AddNewDocumentWithSingleTypeDeclarationAndImportsAsync[TService,TTypeDeclarationSyntax,TNamespaceDeclarationSyntax,TMemberDeclarationSyntax,TCompilationUnitSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.MoveTypeEditor.GetOperationsAsync[TService,TTypeDeclarationSyntax,TNamespaceDeclarationSyntax,TMemberDeclarationSyntax,TCompilationUnitSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.MoveType.AbstractMoveTypeService`5.MoveTypeCodeAction.ComputeOperationsAsync[TService,TTypeDeclarationSyntax,TNamespaceDeclarationSyntax,TMemberDeclarationSyntax,TCompilationUnitSyntax](&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&amp;lt;&amp;gt;c__DisplayClass11_0.&amp;lt;GetPreviewAsync&amp;gt;b__0(&amp;lt;Unknown Parameters&amp;gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&amp;lt;Unknown Parameters&amp;gt;)
```

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/416137/movetypecoderefactoringprovider-encounted-an-error.html
VSTS ticketId: 757134_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32079</IssueID>
    <RepoID>1</RepoID>
    <Title>Synthesize record ctor body</Title>
    <Description>Add code to synthesize a record constructor body. Unfortunately this
breaks field initializers in records because the current MethodCompiler
code can only handle 100% synthesized bodies, empty bodies, or
user-written bodies for constructors and initializers are added only for
the last two.</Description>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32078</IssueID>
    <RepoID>1</RepoID>
    <Title>Learn from non-null test through suppression operator</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/31733

</Description>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32077</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>01/01/2019</ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32076</IssueID>
    <RepoID>1</RepoID>
    <Title>If you write Else after an Exit "iterator" Intellisense shown ElseIf</Title>
    <Description>&lt;p&gt;If you write Else after an Exit &amp;lt;iterator&amp;gt; Intellisense shown ElseIf&lt;br&gt;&lt;br&gt;If you have a &amp;quot;loop&amp;quot; (For, Do, etc.) and have an If ... End If condition wich includes an Ext &amp;quot;loop&amp;quot; if you try to wrtite an Else clause, Intellisense shows only ElseIf (see attached capture).&lt;br&gt;If the IF/End If don't have an Exit clause shows both Else and ElseIf as expected.&lt;br&gt;&lt;br&gt;It happens in Visual Studio 2019 Preview 1.1 (16.0.0) and also in Visual Studio 2017 15.9.4&lt;br&gt;&lt;br&gt;I'm using Visual Basic. With C# there is no problem only shows else :-)&lt;br&gt;&lt;br&gt;For example:&lt;br&gt;&lt;br&gt;For i = 1 To 10&lt;br&gt;    Dim j = 3&lt;br&gt;    If j&amp;gt;2 Then&lt;br&gt;        Exit For&lt;br&gt;&lt;br&gt;        ' If you write Else, Intellisense only shows ElseIf&lt;br&gt;&lt;br&gt;    End If&lt;br&gt;Next&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/413645/if-you-write-else-after-an-exit-intellisense-shown.html
VSTS ticketId: 755189_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>
    </ClosedDate>
  </Issue>
  <Issue>
    <IssueID>32075</IssueID>
    <RepoID>1</RepoID>
    <Title>Merge master to master-vs-deps</Title>
    <Description>
This is an automatically generated pull request from master into master-vs-deps.

``` bash
git fetch --all
git checkout merges/master-to-master-vs-deps
git reset --hard upstream/master-vs-deps
git merge upstream/master
# Fix merge conflicts
git commit
git push merges/master-to-master-vs-deps --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>01/01/2019</ClosedDate>
  </Issue>
</Issues>
<PullRequests>
  <PullRequest>
    <IssueID>42961</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jnm2</FixedByID>
    <Title>Do not offer to simplify ToString on ref structs</Title>
    <Description>Fixes #42936

@CyrusNajmabadi </Description>
    <CreatedDate>31/03/2020</CreatedDate>
    <ClosedDate>01/04/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42961</PullRequestID>
        <IssueID>42936</IssueID>
        <Title>IDE0071 (Interpolation can be simplified) - invalid suggestion on ref structs</Title>
        <Description>**Version Used**: VS 16.5.0

**Steps to Reproduce**:

``

**Expected Behavior**:

Do not suggest IDE0071 since removing `ToString()` is invalid for ref structs.

**Actual Behavior**:

IDE0071 is suggested.</Description>
        <CreatedDate>31/03/2020</CreatedDate>
        <ClosedDate>01/04/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-CodeStyle</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>42931</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Ensure that the public GetOption API returns the public CodeStyle opt…</Title>
    <Description>…ion value

Fixes `InvalidCastException` from #42923
We already ensured that we return the correct CodeStyle option value for `T OptionSet.GetOption&lt;T&gt;` overloads to fetch option. However, for `object? OptionSet.GetOption(OptionKey)`, we did not ensure that the public CodeStyleOption is returned, which could lead to a cast exception if an external consumer tries to cast the return value to CodeStyleOption.

**NOTE:** Even though theoretically this change introduces a breaking change for all public sub-types of `OptionSet` by making an abstract public method a non-abstract method, it is not really a breaking change as `OptionSet` already has internal abstract methods, hence cannot be sub-typed outside Roslyn. I also verified none of our IVT partners sub-type `OptionSet`. Another possible approach here is to revert the abstract to non-abstract breaking API change, and call out `(T)GetOption(optionKey)` as an unsupported/deprecated operation in favor of invoking `GetOption&lt;T&gt;(optionKey)`, which provides type safe access to option value. Former was relying on internal implementation details, which were never part of the Options API contract.

Verified the repro case + also unit test failure for the modified test before the fix.</Description>
    <CreatedDate>31/03/2020</CreatedDate>
    <ClosedDate>01/04/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42931</PullRequestID>
        <IssueID>42923</IssueID>
        <Title>Opening C# Code-Style options page crashes and tears down VS.</Title>
        <Description>![image](https://user-images.githubusercontent.com/4564579/77972001-11154b80-72a5-11ea-96da-cb263dfd178e.png)

Latest master

``</Description>
        <CreatedDate>30/03/2020</CreatedDate>
        <ClosedDate>01/04/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>42926</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>CyrusNajmabadi</FixedByID>
    <Title>Fix 'use explicit type' with ref variables.</Title>
    <Description>Fixes #42880</Description>
    <CreatedDate>31/03/2020</CreatedDate>
    <ClosedDate>01/04/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42926</PullRequestID>
        <IssueID>42880</IssueID>
        <Title>The refactoring 'Use explicit type' should conserve the ref-ness of the variable.</Title>
        <Description>**Version Used**: 
netcoreapp3.1 
VS 16.5.1

**Steps to Reproduce**:

``

**Expected Behavior**:
The codefix should conserve the ref-ness of the variable.
In this case, 'ref var' should be replaced with 'ref string'.

**Actual Behavior**:
The codefix discards the ref-ness of the variable, producing unexpected and invalid code.</Description>
        <CreatedDate>29/03/2020</CreatedDate>
        <ClosedDate>01/04/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-CodeStyle</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>42913</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Add tests to demonstrate that string patterns no longer produce a redundant null check</Title>
    <Description>Fixes #31494</Description>
    <CreatedDate>30/03/2020</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42913</PullRequestID>
        <IssueID>31494</IssueID>
        <Title>Suboptimal constant pattern codegen</Title>
        <Description>**Version Used**:  `features/recursive-patterns`

**Steps to Reproduce**: Examples:

https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLRIMaOQSwG4SoAOsMECAdsgD4ACAjAGwAEtATK/QOwCwAUAG9+zEawDMnFsAD20gDbMAksgCCGeFDkAKBgAZmADwCUzALwA+Q8xzJmAIjsBuYaNoSGU2QuUBRA0Qh1CAATHXp9YzNLAzNTeycXEUTxSWYZeWYAZQB3HBgMAAsAJRC4CmCoChgAOTg5OQBhAsCAazCIkwsrZFz8guYBByjmGAQ4CAAaexU7YdHxqYB9KLBNZAgAX2c+UWZkt1T0hQAFBGkAhBgATzUNbQYAOgAVK4DDTujrWwFmaqgAWwgIHsDC4sy2+3cTDSXmYp3O5GufgCQVCjxeb0iXRiAEI4hQ6goAGREwwPP6A2Ig7gJHaiSGHWHKW5wTRaHBVAD872GMRszHojj2dJEBw8MIyvn8gTIoQ5MG5WM+pjigv4G34/CAA==

</Description>
        <CreatedDate>02/12/2018</CreatedDate>
        <ClosedDate>31/03/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>42889</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jnm2</FixedByID>
    <Title>Only simplify to format interpolation component for IFormattable values</Title>
    <Description>Fixes #42887</Description>
    <CreatedDate>30/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42889</PullRequestID>
        <IssueID>42887</IssueID>
        <Title>IDE0071 needs to factor in whether the type implements IFormattable</Title>
        <Description>**Version Used**: 
3.6.0-2.20167.1+926207070b0c62d6a76aec4627ec26dee17870bb

**Steps to Reproduce**:
``

**Expected Behavior**:
IDE0071 isn't offered, because MyType doesn't implement IFormattable.

**Actual Behavior**:
IDE0071 is offered, and changes the code from `$"{t.ToString("X")}"` to `$"{t:X}"`.  The former was using the `ToString(string)` method, but as the instance doesn't implement IFormattable, the latter will end up just using the `ToString()` overload, changing the meaning of the program.  Before the refactoring, this would output "X", and after, it outputs "hello", as the format string gets ignored.</Description>
        <CreatedDate>30/03/2020</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>42850</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Collapse empty lines between elements of the same kind</Title>
    <Description>This change updates **Collapse to Definitions** to produce a view closer to **Metadata As Source**, where empty lines are omitted between collapsed elements of the same kind. Since the blank lines are included in the folding region, this feature works without removing the blank lines from the original source.

Supersedes #42809

## Go To Decompiled Source

### Before

### After

![image](https://user-images.githubusercontent.com/1408396/77811157-dff30c00-7055-11ea-88bc-867a0ef5643a.png)

## Collapse to Definitions

### Before

![image](https://user-images.githubusercontent.com/1408396/77811178-ff8a3480-7055-11ea-9f20-702f0e8209dd.png)

### After

![image](https://user-images.githubusercontent.com/1408396/77811182-044ee880-7056-11ea-8dbd-3fc209eea4ba.png)
</Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>28/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42850</PullRequestID>
        <IssueID>42809</IssueID>
        <Title>Use the same spacing between members in decompilation that we do for Metadata-as-Source.</Title>
        <Description>Followup to @sharwell's great work

Before:

![image](https://user-images.githubusercontent.com/4564579/77694874-08044180-6f68-11ea-9703-7ddd85247871.png)

After:

![image](https://user-images.githubusercontent.com/4564579/77694878-0aff3200-6f68-11ea-9efe-ff6208380d6d.png)
</Description>
        <CreatedDate>26/03/2020</CreatedDate>
        <ClosedDate>28/03/2020</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>42824</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Adjust sequence point for if-then-else and switch</Title>
    <Description>Addresses known issues with sequence points.

Fixes #31665
Related to #17076 (included test; unable to repro)
Fixes #28288
</Description>
    <CreatedDate>27/03/2020</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42824</PullRequestID>
        <IssueID>31665</IssueID>
        <Title>A switch inside an if .. else .. can confuse the debugger</Title>
        <Description>Moved from https://devdiv.visualstudio.com/DevDiv/_workitems/edit/729380

I reconstructed the problem in the following code:

``

If this code is debugged, the active statement marker will jump from the break; statement, to the throw... statement.

The throw statement will not be executed, but it had me confused for a couple of hours.
</Description>
        <CreatedDate>10/12/2018</CreatedDate>
        <ClosedDate>31/03/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42824</PullRequestID>
        <IssueID>17076</IssueID>
        <Title>Strange debugger stepping in code that has pattern matching.</Title>
        <CreatedDate>10/02/2017</CreatedDate>
        <ClosedDate>27/03/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Blocked</Label>
          <Label>Bug</Label>
          <Label>Need More Info</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42824</PullRequestID>
        <IssueID>28288</IssueID>
        <Title>Bad sequence point in switch with pattern matching in async method</Title>
        <Description>Set a breakpoint in `GenerateDeconstructMethodCodeFixProvider.RegisterCodeFixesAsync` and start debugging any of the tests for this fixer (such as `TestDeconstructionDeclaration_Simple`).
The stepping shows the `return` statement as executed, when it is not actually executed.

![switch-seq-point](https://user-images.githubusercontent.com/12466233/42296693-aa370b42-7fad-11e8-9e67-ba0cc604ad74.gif)

Unfortunately, I was not able to narrow down a small repro yet (the ones I tried behaved as expected).

This is using `VisualStudio.15.Preview/15.8.0-pre.2.0+27729.1` on PR https://github.com/dotnet/roslyn/pull/28286
</Description>
        <CreatedDate>05/07/2018</CreatedDate>
        <ClosedDate>31/03/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Area-External</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>42792</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Add option 'Show remarks in Quick Info'</Title>
    <Description>See #42606

C#:

![image](https://user-images.githubusercontent.com/1408396/77669416-f740d500-6f41-11ea-9a73-cd6471542c61.png)

Visual Basic:

![image](https://user-images.githubusercontent.com/1408396/77669507-1c354800-6f42-11ea-940b-a779975dd9d0.png)
</Description>
    <CreatedDate>26/03/2020</CreatedDate>
    <ClosedDate>27/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42792</PullRequestID>
        <IssueID>42606</IssueID>
        <Title>Showing &lt;remarks&gt; in QuickInfo results in very large tooltips for Xamarin</Title>
        <Description>**Version Used**: Version 16.6.0 Preview 2.0 [29918.199.master]

**Steps to Reproduce**:

1. Create new Xamarin.iOS single view project.
2. Open `ViewController.cs`.
3. Hover over `UIViewController`

**Expected Behavior**:

&lt;img width="570" alt="image" src="https://user-images.githubusercontent.com/155076/77126638-0b974600-6a07-11ea-8d66-22ab04c0011d.png"&gt;


**Actual Behavior**:

&lt;img width="2353" alt="image" src="https://user-images.githubusercontent.com/155076/77126657-1f42ac80-6a07-11ea-9e50-d85e43bc39cb.png"&gt;

---

This is the result of the (otherwise very useful!) https://github.com/dotnet/roslyn/pull/42135.

Mono and Xamarin historically make extensive use of `&lt;remarks&gt;` in documentation, and that information is typically kept intact for offline documentation (via the MonoDoc tool, see `Help -&gt; API Documentation` on VSmac). Apparently, .NET Framework BCL documentation strips out `&lt;remarks&gt;` on user machines, but the data is available in online documentation.

VSmac has not yet inserted this week's Roslyn in order to avoid this issue on very basic types like `System.Console` and boolean literals:

![image](https://user-images.githubusercontent.com/155076/77126773-83fe0700-6a07-11ea-8db7-780a2e224f9c.png)

(Of note, the above behavior only occurs for Mono-based projects on Mac, but that includes Xamarin.iOS, etc)

---

To be fair, it has always been possible to make unhelpfully large QuickInfo tooltips even before this change. While I feel that we do need to seriously address the problem over large tooltips, that should probably be a separate issue.

For now, we should decide how to move forward on showing `&lt;remarks&gt;` content. Some proposals:

1. **Remove the feature entirely.**
   This would be a bummer, as it seems generally useful. But maybe it's the right thing to do if QuickInfo UX needs some new design work.
2. **Add an option for this feature, and disable it by default.**
   This might be the best default behavior, but many people would never discover the option.
3. **Add an option for this feature, enable it by default, but allow it to be disabled on a per-buffer level**
   This would require additional work from the Xamarin and VSmac teams to keep it turned off for Mono-based workspaces/buffers/whatever. These users would miss out on the feature and have no way to force it on (unless the IDE added an additional option for that). I'm not personally familiar with how to implement this for Xamarin on VSwin.
4. **Disable the feature for some specific namespaces, such as `System.*`, and perhaps `UIKit.*` and other Xamarin namespaces**
   Seems reasonable for most Visual Studio users, but doesn't help scenarios where namespaces we don't know about have similarly lengthy `&lt;remarks&gt;`.
5. **Truncate content to some "reasonable maximum"**
   This seems problematic for the case of boolean literals in Mono. It is not especially helpful to show anything beyond a simple tooltip when mousing over `false`. And conversely, I would not want to over-truncate reasonable documentation.

Personally, I'd prefer 2 or maybe 3, to be followed by more general work on what to do about too-long QuickInfo content (regardless of `&lt;remarks&gt;`).

Prior art on huge tooltips: https://github.com/dotnet/roslyn/issues/21493</Description>
        <CreatedDate>20/03/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>42769</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Remove duplicate validation logic</Title>
    <Description>The MSBuild task for csc / vbc compilers contained validation to detect
that no duplicate source files or resources were provided. This
validation is duplicated with logic in the compiler hence it's
unnecessary.

Further this use came during `ValidateParameters` which means that when
it fails the underlying task doesn't actually execute. This means that
design time builds don't process the project in the face of that type of
error which blocks a number of Visual Studio based scenarios.

closes #42465</Description>
    <CreatedDate>25/03/2020</CreatedDate>
    <ClosedDate>26/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42769</PullRequestID>
        <IssueID>42465</IssueID>
        <Title>Project.AssemblyName does not accurately report assembly name.</Title>
        <Description>_This issue has a corresponding [ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/943329/projectassemblyname-does-not-accurately-report-ass.html). Please vote and comment there to make sure your voice is heard._

---
The following code suddently started appending ".csproj" onto assembly names which seems wrong.

``

Note: I must have `&lt;AssemblyName&gt;` in this new format project because there is no other way (known? supported?) to find the target assembly programmatically between old and new format csproj files.
</Description>
        <CreatedDate>10/03/2020</CreatedDate>
        <ClosedDate>26/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-Project</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>42751</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Support SemanticModel that ignores accessibility for top level statements in a Simple Program</Title>
    <Description>Related to #41704.</Description>
    <CreatedDate>25/03/2020</CreatedDate>
    <ClosedDate>26/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42751</PullRequestID>
        <IssueID>41704</IssueID>
        <Title>Implement "Simple Programs" feature</Title>
        <Description>Proposal: https://github.com/dotnet/csharplang/blob/master/proposals/Simple-programs.md
See also https://github.com/dotnet/csharplang/issues/3117.</Description>
        <CreatedDate>14/02/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Simple Programs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>42713</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Follow-up to #42323</Title>
    <Description>Address pending PR feedback from #42323

Verified that the first commit resolves the binary breaking change for TS. This commit renames the completion options used by TS to have the `2` suffix for internal use in Roslyn and restores the original option with public type for consumption by TS. Once TS moves to external access model, we can move the field with public type to TS layer, similar to the approach taken for all F# options.</Description>
    <CreatedDate>24/03/2020</CreatedDate>
    <ClosedDate>24/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>42713</PullRequestID>
        <IssueID>42323</IssueID>
        <Title>Move Options and CodeStyle APIs to shared layer</Title>
        <Description>Strongly recommend reviewing commit by commit. I have tried to add descriptive comments to each commit for aid in review. Gist of the change:

1. Move common Options and CodeStyle related public and internal types from the Workspaces layer into the shared layer. First commit of the PR https://github.com/dotnet/roslyn/commit/6692e76f4071e015ae07a90490ebf806e95f4612 has these core changes. The public types are renamed to end with a `2` suffix and are _internal_ types, most of which have implicit conversions to the public type. For example, the shared layer has new internal types `IOption2`, `Option2&lt;T&gt;`, `PerLanguageOption2&lt;T&gt;`, `CodeStyleOption&lt;2&gt;`, `CodeStyleOptions2` and so on. These are the core types that will replace the public Options types in our shared analyzer and fixer layer, and possibly even all of Roslyn IDE, to avoid name clashes. The public types are now just thin shims that are forwarders to their internal counterparts and primarily for external consumption.
2. https://github.com/dotnet/roslyn/commit/a2c78bd9561e811bb1d688e396360b2615624df0 has very similar changes made to `FormattingOptions` and `CSharpFormattingOptions`.
3. https://github.com/dotnet/roslyn/commit/3ba9025a8851a29e0683d2fb6fd25d1dd6fd76f7 shows how our exposed options transition to be based on these new option types.
4. https://github.com/dotnet/roslyn/commit/70774316d69f951f9009d0f34d193a627d4a7051 moves our core analyzer base types to be based off these new types
5. https://github.com/dotnet/roslyn/commit/e182acda64d13d1d181e8524cf99dd3a11467b61 moves our shared analyzer layer to these types, a bunch of nice cleanup and no longer need of `#if CODE_STYLE` in this layer.
6. https://github.com/dotnet/roslyn/commit/214365629ce61128e59b9affb16100d966563e3c is similar to the previous commit, but applied to all the IDE analyzers in Features layer - very mechanical change.
7. https://github.com/dotnet/roslyn/commit/a9da22c3d987a92a6fba996af865650ad05a81d9 adds a `BannedSymbols.txt` to Features layer to prevent accidental use of public CodeStyle and Options related types from Workspaces in analyzer/fixer layer. This should keep our IDE layer clean and stick to a single Options and CodeStyle API - you will get a warning if you use the wrong types in these layers.
8. Rest of the commits are pretty mechanical changes, though large scale that touch many files:
   1. https://github.com/dotnet/roslyn/commit/00b3593fb6dbcdad13f087f0b64a2f4466e4b093: Move EditorFeatures layer to use new types
   2.  https://github.com/dotnet/roslyn/commit/6e1e5dd3f5789d5e197a53632b543dfb3951d1b6: Move VS layer to use new types
   3. https://github.com/dotnet/roslyn/commit/f1b4348c6b3c9821f92389df846a11b1e60998e8: CodeStyle layer test library split to avoid CodeStyle fixes test project having type ambiguity errors for shared option types from Workspaces and CodeStyle analyzer layer.
   4. https://github.com/dotnet/roslyn/commit/e4c7e8e37cb708a36ac4f945893255b01e60a9eb: Cleanup `#if CODE_STYLE` directive in analyzer tests in shared layer
   5. https://github.com/dotnet/roslyn/commit/7e3c47ec73711afae6d3769d0599816c9dc0ecec: Biggest commit that moves our tests in different layers (Workspaces, Features, EditorFeatures and VS) to new options types
   6. https://github.com/dotnet/roslyn/commit/c765e1f8f7bf8b0918c983054a55fdd3588484c2: Commit for all project file, resx moves and xlf file changes. Feel free to skip or skim through these.</Description>
        <CreatedDate>10/03/2020</CreatedDate>
        <ClosedDate>24/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>auto-merge</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41918</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Fix well-known Equals method nullable analysis bug</Title>
    <Description>Closes #40577

I wrongly assumed that a method that implements e.g. IEquatable&lt;T&gt;.Equals would be contained in a class that implements IEquatable&lt;T&gt;.

edit: among other wrong assumptions! This PR has been a journey into how interfaces actually work/what's possible in .NET.</Description>
    <CreatedDate>25/02/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41918</PullRequestID>
        <IssueID>40577</IssueID>
        <Title>Roslyn doesn't consider quasi-implemenations of IEqualityComparer.Equals and IEqutable.Equals as well known members in nullability analysis</Title>
        <Description>**Version Used**: 

``</Description>
        <CreatedDate>24/12/2019</CreatedDate>
        <ClosedDate>16/03/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41815</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>[WIP] Port ConvertSwitchStatementToExpression analyzer/fixer to shared layer</Title>
    <Description>Extracted out of #41363 so it only contains the following changes:

1. Port analyzer/fixer/test files for ConvertSwitchStatementToExpression to shared layer
2. Options related namespace changes (see comment https://github.com/dotnet/roslyn/pull/41363#discussion_r376442419 for details)
3. MEF based language service discovery in CodeStyle layer. #41462 tracks replacing this with a non-MEF based approach.
4. Minimal resx/xlf file changes - few were needed as the resources used by analyzer/fixer were moved to shared resx file.
5. Enable .editorconfig based unit test support for CodeStyle layer. NOTE: First commit https://github.com/dotnet/roslyn/commit/b006324ce5c635a5c51f6d5e68a46990c744da3a just ports changes from #40513 which are required to enable this support. This commit should become redundant once that PR is merged in.</Description>
    <CreatedDate>20/02/2020</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41815</PullRequestID>
        <IssueID>41363</IssueID>
        <Title>Port few IDE analyzers/fixers to shared layer to be enabled in CodeStyle NuGet package</Title>
        <Description>**NOTE: More than half the changed files in this PR are xlf files and majority of source file changes are just using resources from a shared resx file. Strongly recommend reviewing with GitHub filter feature to collapse all xlf file changes: [Review Link](https://github.com/dotnet/roslyn/pull/41363/files?file-filters%5B%5D=.cs&amp;file-filters%5B%5D=.csproj&amp;file-filters%5B%5D=.json&amp;file-filters%5B%5D=.projitems&amp;file-filters%5B%5D=.sln&amp;file-filters%5B%5D=.targets&amp;file-filters%5B%5D=.txt&amp;file-filters%5B%5D=.vb&amp;file-filters%5B%5D=.vbproj)**

Following analyzers/fixers have been ported to the shared layer and will get enabled in CodeStyle NuGet package:
1. **Remove unused private members (IDE0051)**: An analyzer without options.
2. **C# make struct fields writable (IDE0064)**: Another simple analyzer without options.
3. **C# convert switch statement to expression (IDE0066)**: An analyzer with a C# code style option. Also includes refactoring of options infrastructure and test framework code to support option based analyzers and corresponding unit tests.
4. **C# use implicit or explicit type style analyzers (IDE0007 and IDE0008)**: Typical code style analyzers with bunch of utility types.
5. **Remove unnecessary usings/imports (IDE0005)**: Analyzer which used some language services, and is very commonly requested analyzer for CI enforcement.
_NOTE: This analyzer works on command line only if XML document comments are enabled for the project._ This seems to be a compiler bug (https://github.com/dotnet/roslyn/issues/41640): https://github.com/dotnet/roslyn/blob/41bc8954aa449ee96a0858de5f614f8a61fa2cad/src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs#L2116-L2118

![CodeStyleAnalyzers](https://user-images.githubusercontent.com/10605811/74381230-ed06b500-4d9f-11ea-8c6c-4b9db762d2c6.png)

https://github.com/dotnet/roslyn/issues/41462 tracks follow-up items once this PR goes in.</Description>
        <CreatedDate>03/02/2020</CreatedDate>
        <ClosedDate>20/02/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41815</PullRequestID>
        <IssueID>41462</IssueID>
        <Title>Follow up items after PR 41363</Title>
        <Description>During the design meeting discussion on https://github.com/dotnet/roslyn/pull/41363, we decided to go ahead with the current approach in the PR with the following follow-up items:

- [x] **[Implemented with [41687](https://github.com/dotnet/roslyn/pull/41687) and [41768](https://github.com/dotnet/roslyn/pull/41768)]** De-dupe analyzers and code fixes in IDE Features layer and Code Style layer inside the diagnostic analyzer and code fix engines. Currently, both the copies execute and we also see duplicate diagnostics being reported.
- [ ] Remove MEF based discovery of language services. Replace it with an explicit mapping from each language service to the type implementing it. We also need to design how external clients, similar to CodeStyle, can be supported, which means we may not be able to explicitly hardcode the assembly/types that implement the language services.
- [x] Remove duplicated resources from CodeStyle and Workspaces/Features layer with a shared resource file. Need to wait on @tmat's change that simplifies resource generation in Roslyn.sln.
- [ ] Revert changes required to get existing IDE analyzer/fixer tests working in CodeStyle layer once all the tests are switched to `Microsoft.CodeAnalysis.Testing`:
  - [ ] Test framework files linked into CodeStyle.UnitTests projects
  - [ ] IVTs added from Roslyn test utilities and Workspaces to CodeStyle.UnitTests projects
  - [ ] Project references added to test utilities project
- [ ] Move all our analyzers and fixers to work completely based on `AnalyzerConfigOptions` instead of `OptionSet`. This involves adding support for creating and passing a fallback .editorconfig/AnalyzerConfigOptions from Tools Options settings into analysis context.
- [ ] Remove use of `GetDocumentOptionSetAsync` API in the shared layer, which is currently used to get fallback Workspace options. Likely the work in prior bullet item will automatically take care of this, but adding an explicit cleanup item here so we validate that.
- [ ] Remove the TODOs added for code moved to shared layer which uses very recently added compiler APIs, which are not yet available in CodeStyle layer. For example, see [this](https://github.com/dotnet/roslyn/pull/41363/files?file-filters%5B%5D=.cs&amp;file-filters%5B%5D=.csproj&amp;file-filters%5B%5D=.targets&amp;file-filters%5B%5D=.txt&amp;file-filters%5B%5D=.vb#r376532640) comment.
- [x] **[Implemented with [42323](https://github.com/dotnet/roslyn/pull/42323)]** Remove all the `#if CODE_STYLE` from the shared projects. All of them should be possible to remove trivially, except the ones related to public Options related types (OptionSet, IOption, CodeStyleOption, CodeStyleOptions, NotificationOptions, etc.), which are public APIs in Workspaces layer but also need by the CodeStyle analyzers which do not have access to Workspaces.
- [ ] We have lot more scope of refactoring the existing extension methods and utilities in Workspaces layer and move them down into the shared layers. There is scope even to move lot of code in WorkspaceExtensions layer that is currently used by code fixes, but not specific to Workspaces itself, to be moved down to CompilerExtensions layer. This will likely be a continuous refactoring work item.
- [ ] `CodeAction.DocumentChangeAction` is used in IDE code fixes, and was replaced with a new type `CustomCodeActions` in shared layer. Do we want to get rid of the CustomCodeActions types completely? Do we want to avoid them just in CodeStyle layer but still use them for analyzers linked into Features? Latter will introduce `#if CODE_STYLE` clutter in each code fix file, which seems undesirable.
- [ ] Cleanup the API signature for `SytnaxEditorBasedCodeFixProvider.IncludeDiagnosticDuringFixAll` as per https://github.com/dotnet/roslyn/pull/41510#discussion_r377391657
- [ ] Remove `AbstractRemoveUnnecessaryImportsDiagnosticAnalyzer.IsRegularCommentOrDocComment` and directly call into syntax facts service once it is available in shared analyzer layer.
- [ ] Consider deleting `IGeneratedCodeRecognitionService.IsGeneratedCode` and moving all existing callers to `IGeneratedCodeRecognitionService.IsGeneratedCodeAsync` 
- [ ] Rationalize use of `SyntaxGenerator.GetGenerator(document)` versus `document.GetRequiredLanguageService&lt;SyntaxGenerator&gt;()` in our code base.
- [ ] Revert `#if CODE_STYLE` directives added to product source and tests due for the scenario where certain new Nullability APIs are not yet available in CodeStyle layer. This might mean either moving the CodeStyle layer to new Microsoft.CodeAnalysis API OR adding reflection based lightup support in CodeStyle layer.
- [ ] Consider porting `ISemanticFactsService` to shared CompilerExtensions project so they can be used in our analyzers in the shared layer. See https://github.com/dotnet/roslyn/pull/42264#discussion_r390999980
- [ ] Nullability related changes mentioned in https://github.com/dotnet/roslyn/pull/42323#discussion_r392717832 and https://github.com/dotnet/roslyn/pull/42323#discussion_r392720810
- [ ] Update nullability of `OptionSet` in `EditorConfigStorageLocation2` to allow null values. See https://github.com/dotnet/roslyn/pull/42323#discussion_r392730378
- [ ] Move all the IDE tests that use options to pass in `IOptionsCollection` instead of `IDictionary&lt;OptionKey, object`. See https://github.com/dotnet/roslyn/pull/42323#discussion_r395386979</Description>
        <CreatedDate>06/02/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Need Design Review</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41815</PullRequestID>
        <IssueID>40513</IssueID>
        <Title>Always try to register the EditorConfigDocumentOptionsProvider</Title>
        <Description>Updates the Workspace to try to register the EditorConfigDocumentOptionsProvider.</Description>
        <CreatedDate>19/12/2019</CreatedDate>
        <ClosedDate>02/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41802</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Fix DataFlowsOut for certain local function situations</Title>
    <Description>There are two problems here, the first of which is the most important.

First, certain data flow analyses use "normalization" to adjust an existing
state variable for more variables declared after that state was created.
The default behavior is to extend that state to the "top" state, meaning
the starting state for that data flow analysis. This is usually the
right extension. However, some analysis requires extending the
variables the other way, to the bottom state. This PR adds functionality
for that customization.

The second problem is that data flow for local functions may include
variables that are not captured. This is by filtering the transfer function
to only include captured variables.

This PR is structured into two commits, each of which fix the associated
problem.

Fixes fixes #41600</Description>
    <CreatedDate>20/02/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41802</PullRequestID>
        <IssueID>41600</IssueID>
        <Title>Incorrect result is produced by DataFlowAnalysis.DataFlowsOut when local functions are involved</Title>
        <Description>`` remains a local function.</Description>
        <CreatedDate>12/02/2020</CreatedDate>
        <ClosedDate>11/03/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Feature - Flow Analysis</Label>
          <Label>New Language Feature - Local Functions</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41768</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Implement de-duplication of code actions from NuGet and VSIX code fixers</Title>
    <Description>Implements the code fix part for #18818

First commit adds the unit tests as per the design, and second commit implements the de-duplication in code fix service.</Description>
    <CreatedDate>19/02/2020</CreatedDate>
    <ClosedDate>18/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41768</PullRequestID>
        <IssueID>18818</IssueID>
        <Title>Define expected behavior for simultaneous install of NuGet and VSIX analyzers</Title>
        <Description>## Scenario

This issue involves defining the expected behavior when all of the following conditions are met:

* The IDE has an analyzer installed as a VSIX which reports diagnostic *D*
* A project has an analyzer installed via NuGet (or more generally, as an `&lt;Analyzer&gt;` reference) which reports diagnostic *D*

## Expected behavior

### Analyzers

Diagnostics reported by analyzers are evaluated according to their diagnostic ID, as obtained through the `SupportedDiagnostics` property. If a project has a NuGet-installed analyzer which reports diagnostic *D*, then results filtering will be applied such that diagnostic *D* is never reported for this project by a VSIX-installed analyzer.

:memo: The comparison is performed on individual diagnostic IDs in order to support several scenarios expected to arise over time:

* A VSIX-installed analyzer supports diagnostics *A*, *B*, and *C*. Diagnostic *B* is later provided through NuGet to allow its use during command-line builds. Both packages should be used, where results of *B* are displayed only from the NuGet-installed analyzer while *A* and *C* continue to be displayed from the VSIX-installed analyzer.
* The assembly identity is generally irrelevant for determining the source of a diagnostic. Analyzer assemblies may be freely renamed, split, merged, etc., and/or change any other identity property without changing the expected behavior for the scenario described in this issue.

⚠️ The filtering does not necessarily mean that the VSIX-installed analyzer which reports diagnostic *D* will not run. If one VSIX-installed analyzer instance reports *A* and *B*, while the NuGet-installed analyzer instance only reports *B*, the VSIX-installed analyzer which reports *B* will still run (so diagnostic *A* is gathered), but all reports of *B* from the VSIX-installed analyzer will be filtered from the result before displaying it to users.

### Code Fixes

For each reported (non-filtered per the previous step) instance of diagnostic *D*, code fixes from both NuGet-installed analyzers and VSIX-installed analyzers are gathered in this scenario. Code actions are compared by their equivalence key. In the event one or more code actions with equivalence key *E* are provided by the NuGet-installed analyzers, all code actions provided by VSIX-installed analyzers with equivalence key *E* will be ignored.

:memo: It's important to consider code actions provided by both NuGet- and VSIX-installed analyzers even in scenarios where the diagnostic is reported by a NuGet-installed analyzer. It is possible that a user installs a VSIX-installed code fix specifically to improve their IDE experience (e.g. by adding new options to the fixes provided by the NuGet-installed analyzers). Use of a NuGet-installed analyzer should not preclude this scenario.

:warning: Note that the specific omission of code actions provided by VSIX-installed analyzers is important when an equivalence key duplication is identified. Since it is possible for the NuGet-installed and VSIX-installed analyzers to be different versions of the same analyzer assembly, we cannot expect code actions from a VSIX-installed analyzer to understand the diagnostic details provided by a NuGet-installed analyzer. We favor the code actions provided by the NuGet-installed analyzer with the assumption that the analyzer and fixer provided through NuGet understand each other.</Description>
        <CreatedDate>19/04/2017</CreatedDate>
        <ClosedDate>18/03/2020</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-IDE</Label>
          <Label>Feature Specification</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41687</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Implement de-duplication of NuGet and VSIX analyzer execution and diagnostics</Title>
    <Description>Implements the design in #18818 for analyzers. De-duping for code actions will be implemented in a follow-up PR.

1. We now execute only those VSIX analyzers which report at least one unique diagnostic ID that is not reported by any NuGet based project analyzers.
2. Additionally, we filter out the diagnostics of IDs reported by VSIX analyzers, which also have a corresponding NuGet analyzer reporting the same diagnostic ID.

First commit implements the unit tests as per the design mentioned in #18818 - all the added unit tests failed after this commit
Second commit implements the above logic in the IDE diagnostic analyzer engine.
</Description>
    <CreatedDate>14/02/2020</CreatedDate>
    <ClosedDate>18/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41687</PullRequestID>
        <IssueID>18818</IssueID>
        <Title>Define expected behavior for simultaneous install of NuGet and VSIX analyzers</Title>
        <Description>## Scenario

This issue involves defining the expected behavior when all of the following conditions are met:

* The IDE has an analyzer installed as a VSIX which reports diagnostic *D*
* A project has an analyzer installed via NuGet (or more generally, as an `&lt;Analyzer&gt;` reference) which reports diagnostic *D*

## Expected behavior

### Analyzers

Diagnostics reported by analyzers are evaluated according to their diagnostic ID, as obtained through the `SupportedDiagnostics` property. If a project has a NuGet-installed analyzer which reports diagnostic *D*, then results filtering will be applied such that diagnostic *D* is never reported for this project by a VSIX-installed analyzer.

:memo: The comparison is performed on individual diagnostic IDs in order to support several scenarios expected to arise over time:

* A VSIX-installed analyzer supports diagnostics *A*, *B*, and *C*. Diagnostic *B* is later provided through NuGet to allow its use during command-line builds. Both packages should be used, where results of *B* are displayed only from the NuGet-installed analyzer while *A* and *C* continue to be displayed from the VSIX-installed analyzer.
* The assembly identity is generally irrelevant for determining the source of a diagnostic. Analyzer assemblies may be freely renamed, split, merged, etc., and/or change any other identity property without changing the expected behavior for the scenario described in this issue.

⚠️ The filtering does not necessarily mean that the VSIX-installed analyzer which reports diagnostic *D* will not run. If one VSIX-installed analyzer instance reports *A* and *B*, while the NuGet-installed analyzer instance only reports *B*, the VSIX-installed analyzer which reports *B* will still run (so diagnostic *A* is gathered), but all reports of *B* from the VSIX-installed analyzer will be filtered from the result before displaying it to users.

### Code Fixes

For each reported (non-filtered per the previous step) instance of diagnostic *D*, code fixes from both NuGet-installed analyzers and VSIX-installed analyzers are gathered in this scenario. Code actions are compared by their equivalence key. In the event one or more code actions with equivalence key *E* are provided by the NuGet-installed analyzers, all code actions provided by VSIX-installed analyzers with equivalence key *E* will be ignored.

:memo: It's important to consider code actions provided by both NuGet- and VSIX-installed analyzers even in scenarios where the diagnostic is reported by a NuGet-installed analyzer. It is possible that a user installs a VSIX-installed code fix specifically to improve their IDE experience (e.g. by adding new options to the fixes provided by the NuGet-installed analyzers). Use of a NuGet-installed analyzer should not preclude this scenario.

:warning: Note that the specific omission of code actions provided by VSIX-installed analyzers is important when an equivalence key duplication is identified. Since it is possible for the NuGet-installed and VSIX-installed analyzers to be different versions of the same analyzer assembly, we cannot expect code actions from a VSIX-installed analyzer to understand the diagnostic details provided by a NuGet-installed analyzer. We favor the code actions provided by the NuGet-installed analyzer with the assumption that the analyzer and fixer provided through NuGet understand each other.</Description>
        <CreatedDate>19/04/2017</CreatedDate>
        <ClosedDate>18/03/2020</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-IDE</Label>
          <Label>Feature Specification</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41687</PullRequestID>
        <IssueID>18818</IssueID>
        <Title>Define expected behavior for simultaneous install of NuGet and VSIX analyzers</Title>
        <Description>## Scenario

This issue involves defining the expected behavior when all of the following conditions are met:

* The IDE has an analyzer installed as a VSIX which reports diagnostic *D*
* A project has an analyzer installed via NuGet (or more generally, as an `&lt;Analyzer&gt;` reference) which reports diagnostic *D*

## Expected behavior

### Analyzers

Diagnostics reported by analyzers are evaluated according to their diagnostic ID, as obtained through the `SupportedDiagnostics` property. If a project has a NuGet-installed analyzer which reports diagnostic *D*, then results filtering will be applied such that diagnostic *D* is never reported for this project by a VSIX-installed analyzer.

:memo: The comparison is performed on individual diagnostic IDs in order to support several scenarios expected to arise over time:

* A VSIX-installed analyzer supports diagnostics *A*, *B*, and *C*. Diagnostic *B* is later provided through NuGet to allow its use during command-line builds. Both packages should be used, where results of *B* are displayed only from the NuGet-installed analyzer while *A* and *C* continue to be displayed from the VSIX-installed analyzer.
* The assembly identity is generally irrelevant for determining the source of a diagnostic. Analyzer assemblies may be freely renamed, split, merged, etc., and/or change any other identity property without changing the expected behavior for the scenario described in this issue.

⚠️ The filtering does not necessarily mean that the VSIX-installed analyzer which reports diagnostic *D* will not run. If one VSIX-installed analyzer instance reports *A* and *B*, while the NuGet-installed analyzer instance only reports *B*, the VSIX-installed analyzer which reports *B* will still run (so diagnostic *A* is gathered), but all reports of *B* from the VSIX-installed analyzer will be filtered from the result before displaying it to users.

### Code Fixes

For each reported (non-filtered per the previous step) instance of diagnostic *D*, code fixes from both NuGet-installed analyzers and VSIX-installed analyzers are gathered in this scenario. Code actions are compared by their equivalence key. In the event one or more code actions with equivalence key *E* are provided by the NuGet-installed analyzers, all code actions provided by VSIX-installed analyzers with equivalence key *E* will be ignored.

:memo: It's important to consider code actions provided by both NuGet- and VSIX-installed analyzers even in scenarios where the diagnostic is reported by a NuGet-installed analyzer. It is possible that a user installs a VSIX-installed code fix specifically to improve their IDE experience (e.g. by adding new options to the fixes provided by the NuGet-installed analyzers). Use of a NuGet-installed analyzer should not preclude this scenario.

:warning: Note that the specific omission of code actions provided by VSIX-installed analyzers is important when an equivalence key duplication is identified. Since it is possible for the NuGet-installed and VSIX-installed analyzers to be different versions of the same analyzer assembly, we cannot expect code actions from a VSIX-installed analyzer to understand the diagnostic details provided by a NuGet-installed analyzer. We favor the code actions provided by the NuGet-installed analyzer with the assumption that the analyzer and fixer provided through NuGet understand each other.</Description>
        <CreatedDate>19/04/2017</CreatedDate>
        <ClosedDate>18/03/2020</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-IDE</Label>
          <Label>Feature Specification</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41357</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chris-schuetz</FixedByID>
    <Title>Support conditionally invoked indexers in Find-All-References.</Title>
    <Description>Fixes #39847.</Description>
    <CreatedDate>02/02/2020</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41357</PullRequestID>
        <IssueID>39847</IssueID>
        <Title>Find References does not display all references for getter if those references are conditional</Title>
        <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/729179/find-references-does-not-display-all-references-fo.html)._

---
When a class contains **indexer** which contains both **getter** and **setter** and getter is accessed via **conditional** **access** , such a reference is not displayed .
But thanks very much for finaly distinguishing setters and getters in your references search !

---
### Original Comments

#### Visual Studio Feedback System on 9/11/2019, 03:58 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/17/2019, 10:03 PM: 

I have detected that for the last 35 days, this issue didn't have any product team activity and a very small amount of new votes or comments.&amp;nbsp;Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.

---
### Original Solutions
(no solutions)</Description>
        <CreatedDate>15/11/2019</CreatedDate>
        <ClosedDate>06/03/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>IDE-Navigation</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41264</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dibarbet</FixedByID>
    <Title>Switch VS search to use LSP workspace/symbols</Title>
    <Description>Upgrade the LSP package version so we can implement the new streaming workspace symbols.

Resolves #41115 
Resolves #40829

TODO
test insertion (updating streamjsonrpc)
~~finish testing liveshare~~</Description>
    <CreatedDate>28/01/2020</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41264</PullRequestID>
        <IssueID>41115</IssueID>
        <Title>Performing a Ctrl+Q search leads to redundant GoTo items</Title>
        <Description>**Version Used**: 
Visual Studio 2019 Int Preview 16.5 29716.156

**Steps to Reproduce**:

1. Create a console app with a 'Program.cs' file.
2. Perform a 'Ctrl+Q' search for 'Program.cs'. Note that there is one file, and one class result.
3. Perform a 'Ctrl+T' search for 'Program.cs'.

**Expected Behavior**:
There is one file and one class result.

**Actual Behavior**:
There is one file and two exactly matching class results.

![image](https://user-images.githubusercontent.com/5387680/72833718-3f8b0080-3c3c-11ea-8377-d2fbe1acce22.png)


Effectively the problem is that the same feature (GoTo/NavigateTo) is being lit up by Roslyn via both LSP and an in-proc provider. The intent, however, is to leave Ctrl+T on the in-proc provider to avoid regressing the scenario and build out the new Ctrl+Q exclusively via LSP, eventually switching both over to LSP.

To facilitate this transitionary period, there is a _VSServerCapabilities.DisableGoToWorkspaceSymbols_ capability on the LSP client that can be set to eliminate LSP results from the GoTo feature.

I'd also recommend using this opportunity to move from the 'workspace/beginSymbol' message that was introduced temporarily for 16.3 to the official 'workspace/symbol' protocol which has been upgraded to support streaming via $/progress/IProgress&lt;T&gt; notifications.

Refer to the [C++ language server update](https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/217789) for more information.

**cc:** @dibarbet </Description>
        <CreatedDate>21/01/2020</CreatedDate>
        <ClosedDate>12/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41264</PullRequestID>
        <IssueID>40829</IssueID>
        <Title>Update LSP protocol package versions</Title>
        <Description>We need to consume the latest versions of the LSP protocol packages so we can get new features (sum type) and make sure we're up to date with the types they send us.

There are a bunch of breaking changes since we last updated.</Description>
        <CreatedDate>08/01/2020</CreatedDate>
        <ClosedDate>19/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40685</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Pooled delegates to avoid capturing allocations</Title>
    <Description>Changes made in this pull request are based on investigation data from #26778. Currently the total allocations for the scenario vastly exceed the ability to take a complete measurement, but _each_ of the changes produces allocation reductions of a few hundred MB to a few GB.

Recommended review strategy is commit-by-commit.</Description>
    <CreatedDate>01/01/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40685</PullRequestID>
        <IssueID>26778</IssueID>
        <Title>Manual allocation performance testing: AnalyzerRunner for IDE analyzers on Roslyn.sln</Title>
        <Description>### Scenario details

This test executes the C# and VB analyzers defined in the **CSharpFeatures** and **BasicFeatures** projects, which includes the majority of IDE analyzers that ship with Visual Studio. The test stresses the following code path on its inner loop, and the measurement is a sampling of GC allocations over a fixed work unit.

https://github.com/dotnet/roslyn/blob/184ab3ea74581b8e0b3cde2da97237ac05301af3/src/Tools/AnalyzerRunner/Program.cs#L429-L434

### Steps to run the test:

1. Check out a Roslyn branch for AnalyzerRunner testing
    * Make sure #23087 is merged in the local branch
1. Run Roslyn's AnalyzerRunner tool (release configuration, no debugger) with the following options:

    &gt; $(SolutionDir)Binaries\\$(Configuration)\\Exes\\AnalyzerRunner $(SolutionDir)Roslyn.sln /concurrent /stats

1. Start PerfView GC-only profiling during the 5 second delay before project analysis starts
    * Make sure to use a circular buffer large enough to hold the complete result data
1. Stop profiling when the AnalyzerRunner completes</Description>
        <CreatedDate>10/05/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Performance</Label>
          <Label>Investigating</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40572</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jnm2</FixedByID>
    <Title>Make event backing fields accessible to third-party analyzers</Title>
    <Description>Fixes #36259. Other than where I commented, all changes are meant to restore identical outcomes now that the event backing field comes along with the other fields for free. I seemed to remove a lot of workarounds.</Description>
    <CreatedDate>24/12/2019</CreatedDate>
    <ClosedDate>12/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40572</PullRequestID>
        <IssueID>36259</IssueID>
        <Title>No associated IFieldSymbol is provided for a field-like event</Title>
        <Description>If you create a compilation with the following syntax:

``

And you get the ITypeSymbol for the type declaration from the symbolic model, it contains an IFieldSymbol representing the backing field for the property but none for the backing field of the event:

![](https://files.gitter.im/dotnet/roslyn/m0CW/image.png)

Why is an associated IFieldSymbol surfaced for an autoprop but not an auto event?
Is there any chance that an associated IFieldSymbol might not be surfaced for an autoprop in some circumstances if I got the containing ITypeSymbol from a TypeDeclarationSyntax? 

@CyrusNajmabadi reproduced this and asked me to file since this doesn't seem right to him.

https://github.com/dotnet/roslyn/blob/611578d74c11a34da7142f6d62dbb9f0610c4cec/src/Compilers/Core/Portable/Symbols/IFieldSymbol.cs#L17-L24

https://github.com/dotnet/roslyn/blob/611578d74c11a34da7142f6d62dbb9f0610c4cec/src/Compilers/CSharp/Portable/Symbols/Source/SourceFieldLikeEventSymbol.cs#L74-L80</Description>
        <CreatedDate>08/06/2019</CreatedDate>
        <ClosedDate>12/03/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-API</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40097</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Use MEF for all completion provider registrations</Title>
    <Description>* Convert default completion providers to MEF registration, will full testing of deterministic order
* Remove 'exclusive providers' hook
* Remove 'SetTestProviders' hook

This pull request simplifies the completion provider logic as part of a move in the direction of #30270.</Description>
    <CreatedDate>03/12/2019</CreatedDate>
    <ClosedDate>05/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40097</PullRequestID>
        <IssueID>30270</IssueID>
        <Title>Allow CompletionProviders via nuget package's Analyzers</Title>
        <Description>Currently, you need a VS extension to provide one. Since a completion provider might provide completion to an accompanying library, it might be more useful to ship it together with the library via a nuget package, just like the analyzers and code fixes can.

See https://github.com/dotnet/roslyn/issues/15974#issuecomment-426364738</Description>
        <CreatedDate>02/10/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-API</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39838</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>NextTurn</FixedByID>
    <Title>Don't remove pointer cast in return statements</Title>
    <Description>Fixes #38599</Description>
    <CreatedDate>15/11/2019</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39838</PullRequestID>
        <IssueID>38599</IssueID>
        <Title>IDE0004 on pointer cast in return statement</Title>
        <Description>**Version Used**: Visual Studio 2019 version 16.3

**Steps to Reproduce**:

``

**Expected Behavior**:

IDE0004 is not reported for the cast.

**Actual Behavior**:

IDE0004 is reported for the cast.</Description>
        <CreatedDate>09/09/2019</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-CodeStyle</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39734</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AndrewGumenyuk</FixedByID>
    <Title>Fix Unused interpolated string with nothing to interpolate (#38546)</Title>
    <Description>Fix for #38546 </Description>
    <CreatedDate>08/11/2019</CreatedDate>
    <ClosedDate>09/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39734</PullRequestID>
        <IssueID>3361</IssueID>
        <Title>Unused interpolated string (with nothing to interpolate) should produce warning similar to unused string literal</Title>
        <Description>``</Description>
        <CreatedDate>06/09/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38090</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jnm2</FixedByID>
    <Title>Refactoring to add DebuggerDisplay</Title>
    <Description>Closes #37990</Description>
    <CreatedDate>19/08/2019</CreatedDate>
    <ClosedDate>22/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38090</PullRequestID>
        <IssueID>37990</IssueID>
        <Title>Refactoring to add [DebuggerDisplay("{GetDebuggerDisplay(),nq}")]</Title>
        <Description>Would you accept a refactoring on the header of a type containing an overridden ToString to add `[DebuggerDisplay("{ToString(),nq}")]` and `using System.Diagnostics;`?

I'm typing this all the time without intellisense because of the rare namespace.

The `nq` specifier means "no quotes" and it prevents the custom instance being surrounded with curlies and displayed as `{value}`. This is rarely something I want, whether it's `{0}` or `{C:\some\file.txt}` or `{Some(42)}` and `{None}`.

I'd happily send a PR your way if this sounds good to you.</Description>
        <CreatedDate>14/08/2019</CreatedDate>
        <ClosedDate>22/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>IDE-CodeStyle</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33323</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>🔼 Remember decompiler EULA in the solution user options</Title>
    <Description>Fixes #26415</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>27/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33323</PullRequestID>
        <IssueID>26415</IssueID>
        <Title>Remember "Navigate to decompiled sources" user agreement</Title>
        <Description>**Version Used**: 15.7

**Steps to Reproduce**:

1. Enable "Navigate to decompiled sources"
2. Press &lt;kbd&gt;F12&lt;/kbd&gt; to navigate to a symbol in metadata
3. Accept the license agreement
4. Restart Visual Studio and repeat the steps above

**Expected Behavior**:

During step 4, the disclaimer should not be shown. In particular, a value of Accept should be remembered in the following conditions:

1. The disclaimer was accepted for the current solution
2. Step 1 was completed on the current machine

The value of accept could be stored in the .suo file to meet the above conditions. If stored in the VS profile somewhere, roaming for the option should be explicitly disabled.

📝  The above design has been approved by legal. Deviations from the above may require separate approval and could delay the work, so at this point the issue is considered a "task" more than a discussion.

**Actual Behavior**:

The disclaimer acceptance state is reset every time Visual Studio is launched.</Description>
        <CreatedDate>26/04/2018</CreatedDate>
        <ClosedDate>27/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>22919</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>ivanbasov</FixedByID>
    <Title>Add declaration kind for local functions</Title>
    <Description>Towards #22918
Need this declaration kind in analyzers</Description>
    <CreatedDate>30/10/2017</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>22919</PullRequestID>
        <IssueID>22918</IssueID>
        <Title>local functions are not supported by SyntaxGenerator</Title>
        <CreatedDate>30/10/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41775</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add shared resx files to our shared projects</Title>
    <Description>Extracted from #41363
Third follow-up item from #41462

Apart from adding resx files, changes also include:
1. Moving resource strings duplicated across Workspaces and CodeStyle layer into the shared resx files
2. Source file changes to use the resource strings from the shared resx.

We should no longer require use of `#if CODE_STYLE` in the shared layer for the purpose of resource strings.</Description>
    <CreatedDate>19/02/2020</CreatedDate>
    <ClosedDate>19/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41775</PullRequestID>
        <IssueID>41363</IssueID>
        <Title>Port few IDE analyzers/fixers to shared layer to be enabled in CodeStyle NuGet package</Title>
        <Description>**NOTE: More than half the changed files in this PR are xlf files and majority of source file changes are just using resources from a shared resx file. Strongly recommend reviewing with GitHub filter feature to collapse all xlf file changes: [Review Link](https://github.com/dotnet/roslyn/pull/41363/files?file-filters%5B%5D=.cs&amp;file-filters%5B%5D=.csproj&amp;file-filters%5B%5D=.json&amp;file-filters%5B%5D=.projitems&amp;file-filters%5B%5D=.sln&amp;file-filters%5B%5D=.targets&amp;file-filters%5B%5D=.txt&amp;file-filters%5B%5D=.vb&amp;file-filters%5B%5D=.vbproj)**

Following analyzers/fixers have been ported to the shared layer and will get enabled in CodeStyle NuGet package:
1. **Remove unused private members (IDE0051)**: An analyzer without options.
2. **C# make struct fields writable (IDE0064)**: Another simple analyzer without options.
3. **C# convert switch statement to expression (IDE0066)**: An analyzer with a C# code style option. Also includes refactoring of options infrastructure and test framework code to support option based analyzers and corresponding unit tests.
4. **C# use implicit or explicit type style analyzers (IDE0007 and IDE0008)**: Typical code style analyzers with bunch of utility types.
5. **Remove unnecessary usings/imports (IDE0005)**: Analyzer which used some language services, and is very commonly requested analyzer for CI enforcement.
_NOTE: This analyzer works on command line only if XML document comments are enabled for the project._ This seems to be a compiler bug (https://github.com/dotnet/roslyn/issues/41640): https://github.com/dotnet/roslyn/blob/41bc8954aa449ee96a0858de5f614f8a61fa2cad/src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs#L2116-L2118

![CodeStyleAnalyzers](https://user-images.githubusercontent.com/10605811/74381230-ed06b500-4d9f-11ea-8c6c-4b9db762d2c6.png)

https://github.com/dotnet/roslyn/issues/41462 tracks follow-up items once this PR goes in.</Description>
        <CreatedDate>03/02/2020</CreatedDate>
        <ClosedDate>20/02/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41775</PullRequestID>
        <IssueID>41462</IssueID>
        <Title>Follow up items after PR 41363</Title>
        <Description>During the design meeting discussion on https://github.com/dotnet/roslyn/pull/41363, we decided to go ahead with the current approach in the PR with the following follow-up items:

- [x] **[Implemented with [41687](https://github.com/dotnet/roslyn/pull/41687) and [41768](https://github.com/dotnet/roslyn/pull/41768)]** De-dupe analyzers and code fixes in IDE Features layer and Code Style layer inside the diagnostic analyzer and code fix engines. Currently, both the copies execute and we also see duplicate diagnostics being reported.
- [ ] Remove MEF based discovery of language services. Replace it with an explicit mapping from each language service to the type implementing it. We also need to design how external clients, similar to CodeStyle, can be supported, which means we may not be able to explicitly hardcode the assembly/types that implement the language services.
- [x] Remove duplicated resources from CodeStyle and Workspaces/Features layer with a shared resource file. Need to wait on @tmat's change that simplifies resource generation in Roslyn.sln.
- [ ] Revert changes required to get existing IDE analyzer/fixer tests working in CodeStyle layer once all the tests are switched to `Microsoft.CodeAnalysis.Testing`:
  - [ ] Test framework files linked into CodeStyle.UnitTests projects
  - [ ] IVTs added from Roslyn test utilities and Workspaces to CodeStyle.UnitTests projects
  - [ ] Project references added to test utilities project
- [ ] Move all our analyzers and fixers to work completely based on `AnalyzerConfigOptions` instead of `OptionSet`. This involves adding support for creating and passing a fallback .editorconfig/AnalyzerConfigOptions from Tools Options settings into analysis context.
- [ ] Remove use of `GetDocumentOptionSetAsync` API in the shared layer, which is currently used to get fallback Workspace options. Likely the work in prior bullet item will automatically take care of this, but adding an explicit cleanup item here so we validate that.
- [ ] Remove the TODOs added for code moved to shared layer which uses very recently added compiler APIs, which are not yet available in CodeStyle layer. For example, see [this](https://github.com/dotnet/roslyn/pull/41363/files?file-filters%5B%5D=.cs&amp;file-filters%5B%5D=.csproj&amp;file-filters%5B%5D=.targets&amp;file-filters%5B%5D=.txt&amp;file-filters%5B%5D=.vb#r376532640) comment.
- [x] **[Implemented with [42323](https://github.com/dotnet/roslyn/pull/42323)]** Remove all the `#if CODE_STYLE` from the shared projects. All of them should be possible to remove trivially, except the ones related to public Options related types (OptionSet, IOption, CodeStyleOption, CodeStyleOptions, NotificationOptions, etc.), which are public APIs in Workspaces layer but also need by the CodeStyle analyzers which do not have access to Workspaces.
- [ ] We have lot more scope of refactoring the existing extension methods and utilities in Workspaces layer and move them down into the shared layers. There is scope even to move lot of code in WorkspaceExtensions layer that is currently used by code fixes, but not specific to Workspaces itself, to be moved down to CompilerExtensions layer. This will likely be a continuous refactoring work item.
- [ ] `CodeAction.DocumentChangeAction` is used in IDE code fixes, and was replaced with a new type `CustomCodeActions` in shared layer. Do we want to get rid of the CustomCodeActions types completely? Do we want to avoid them just in CodeStyle layer but still use them for analyzers linked into Features? Latter will introduce `#if CODE_STYLE` clutter in each code fix file, which seems undesirable.
- [ ] Cleanup the API signature for `SytnaxEditorBasedCodeFixProvider.IncludeDiagnosticDuringFixAll` as per https://github.com/dotnet/roslyn/pull/41510#discussion_r377391657
- [ ] Remove `AbstractRemoveUnnecessaryImportsDiagnosticAnalyzer.IsRegularCommentOrDocComment` and directly call into syntax facts service once it is available in shared analyzer layer.
- [ ] Consider deleting `IGeneratedCodeRecognitionService.IsGeneratedCode` and moving all existing callers to `IGeneratedCodeRecognitionService.IsGeneratedCodeAsync` 
- [ ] Rationalize use of `SyntaxGenerator.GetGenerator(document)` versus `document.GetRequiredLanguageService&lt;SyntaxGenerator&gt;()` in our code base.
- [ ] Revert `#if CODE_STYLE` directives added to product source and tests due for the scenario where certain new Nullability APIs are not yet available in CodeStyle layer. This might mean either moving the CodeStyle layer to new Microsoft.CodeAnalysis API OR adding reflection based lightup support in CodeStyle layer.
- [ ] Consider porting `ISemanticFactsService` to shared CompilerExtensions project so they can be used in our analyzers in the shared layer. See https://github.com/dotnet/roslyn/pull/42264#discussion_r390999980
- [ ] Nullability related changes mentioned in https://github.com/dotnet/roslyn/pull/42323#discussion_r392717832 and https://github.com/dotnet/roslyn/pull/42323#discussion_r392720810
- [ ] Update nullability of `OptionSet` in `EditorConfigStorageLocation2` to allow null values. See https://github.com/dotnet/roslyn/pull/42323#discussion_r392730378
- [ ] Move all the IDE tests that use options to pass in `IOptionsCollection` instead of `IDictionary&lt;OptionKey, object`. See https://github.com/dotnet/roslyn/pull/42323#discussion_r395386979</Description>
        <CreatedDate>06/02/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Need Design Review</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41767</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Add regression test for #40981</Title>
    <Description>Closes #40981. This was fixed in 16.5, but crashes in 16.4.</Description>
    <CreatedDate>19/02/2020</CreatedDate>
    <ClosedDate>19/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41767</PullRequestID>
        <IssueID>40981</IssueID>
        <Title>csc.exe returns exits code -2146232797 without messages</Title>
        <Description>**Version Used**: 
16.4.29709.97

**Steps to Reproduce**:
Create two files, `interface.cs` and `lib.cs`, with the following content. The file `interface.cs` should contain:
``</Description>
        <CreatedDate>15/01/2020</CreatedDate>
        <ClosedDate>19/02/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41762</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Fix classview sync</Title>
    <Description>Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1070087. Same change as #41752 but targeted at 16.5
```
Calling View.SynchronizeClassView using keyboard shortcut is not working anymore.

View.SynchronizeClassView is registered to a keyboard shortcut (Alt+M). The shortcut is not shared with other commands and was working fine with version 16.3.10.

Under 16.4.0, doing the keyboard shortcut is not working anymore. I have no idea if the shortcut system itself is broken or if the call to “View.SynchronizeClassView” is broken.

I’m using the very same solution in my tests between version 16.3.10 (working) and 16.4.0 (not working).

I tried changing the shortcut but the result is still the same, not working.
I only ear a beep sound (ding.wav) and nothing happens.
```
The change in https://github.com/dotnet/roslyn/commit/8259140989826cfa3072bffb2c80f2496bf1d682 removes code that intercepted availability requests in order to always reply available. The SyncClassView CommandHandler should have been updated to reply accordingly. This fix implements that behavior.</Description>
    <CreatedDate>18/02/2020</CreatedDate>
    <ClosedDate>19/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41762</PullRequestID>
        <IssueID>41752</IssueID>
        <Title>Always return available for SyncClassView command</Title>
        <Description>Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1070152
``
The change in https://github.com/dotnet/roslyn/commit/8259140989826cfa3072bffb2c80f2496bf1d682 removes code that intercepted availability requests in order to always reply available. The SyncClassView CommandHandler should have been updated to reply accordingly. This fix implements that behavior.</Description>
        <CreatedDate>18/02/2020</CreatedDate>
        <ClosedDate>19/02/2020</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41726</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>skarllot</FixedByID>
    <Title>Test convert nullable to non-nullable using custom awaitable</Title>
    <Description>Test reporting on methods that returns ConfiguredTaskAwaitable (closes #39417).</Description>
    <CreatedDate>15/02/2020</CreatedDate>
    <ClosedDate>18/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41726</PullRequestID>
        <IssueID>39417</IssueID>
        <Title>CS8600: Should report on methods that returns ConfiguredTaskAwaitable</Title>
        <Description>**Version Used**: Visual Studio 2019 Version 16.3.5

**Steps to Reproduce**:

``

**Expected Behavior**:
`CS8600` to be reported when using `NoSync` method extension.

**Actual Behavior**:
`CS8600` is not reported when using `NoSync` method extension.</Description>
        <Code>```csharp
static class TaskExtensions
{
    public static ConfiguredTaskAwaitable&lt;TResult&gt; NoSync&lt;TResult&gt;(this Task&lt;TResult&gt; task)
    {
        return task.ConfigureAwait(false);
    }
}

class Request
{
    public string? Name { get; }
    public Task&lt;string?&gt; GetName() =&gt; Task.FromResult(Name);
}

class Handler
{
    public async Task Handle(Request request)
    {
        string a = request.Name;    // &lt;-- CS8600
        string b = await request.GetName().ConfigureAwait(false);    // &lt;-- CS8600
        string c = await request.GetName().NoSync();    // &lt;-- No warning here
    }
}
`</Code>
        <CreatedDate>21/10/2019</CreatedDate>
        <ClosedDate>18/02/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41725</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Merge master to local-function-attributes</Title>
    <Description>This PR integrates changes from master including #41585, which requires some manual fixup.

Suggest reviewing commit-by-commit starting with 9a88cd4.</Description>
    <CreatedDate>15/02/2020</CreatedDate>
    <ClosedDate>21/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41725</PullRequestID>
        <IssueID>41585</IssueID>
        <Title>Inline statement parsing</Title>
        <Description>This reduces teh amount of stack frames we need when parsing.  It should actually routinely halve the number as there's no need for all the indirections.

This should be reviewed one commit at a time to make the changes clear.  Individual commits are lkely clearer with whitespace diffs off.</Description>
        <CreatedDate>11/02/2020</CreatedDate>
        <ClosedDate>19/02/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41712</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>Fix sorting for import completion</Title>
    <Description>Fix #41601

The main issue is a regression in sorting order caused by a bug fix in editor
https://devdiv.visualstudio.com/DevDiv/_git/VS-Platform/pullrequest/219864

Which basically exposed a long existing bug in Roslyn that completion service and async completion sort items differently. 

A second issue is we show unimported items when in attribute name context as in-scope because we didn't mark it as "expanded", which also cause expander malfunctioning. 

AzDO bug: 
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1069318</Description>
    <CreatedDate>14/02/2020</CreatedDate>
    <ClosedDate>25/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41712</PullRequestID>
        <IssueID>41601</IssueID>
        <Title>Add items from unimported namespaces does not sort items</Title>
        <Description>**Version Used**: 
Version 16.6.0 Preview 1.0 [29811.143.master]

But this could repro on 16.5, but I don't have build.

**Steps to Reproduce**:
``
**Expected Behavior**:
Order to be in:

AppliesTo
AppliesTo (Another)
AppliesToA
AppliesToA (Another)

**Actual Behavior**:

Order switches between:

AppliesTo (Another)
AppliesTo
AppliesToA (Another)
AppliesToA

AppliesTo (Another)
AppliesToA (Another)
AppliesTo
AppliesToA

![Order](https://user-images.githubusercontent.com/1103906/74301662-debc9700-4da7-11ea-8978-23e10b359c43.gif)</Description>
        <CreatedDate>12/02/2020</CreatedDate>
        <ClosedDate>26/02/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Regression</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41711</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Allow structures to implement nested interfaces as we do for classes.</Title>
    <Description>Fixes #41501.</Description>
    <CreatedDate>14/02/2020</CreatedDate>
    <ClosedDate>15/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41711</PullRequestID>
        <IssueID>41501</IssueID>
        <Title>C# Struct Inherited Interface Causes Cycle In Interface Hierarchy</Title>
        <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/872880/c-struct-inherited-interface-causes-cycle-in-inter.html)._

---
[regression] [worked-in:15.9.18]
When compiling the following code in Visual Studio 2019 (.NET 4.6.1 project)

``
to change the version of the compiler to an older version the code can successfully compile.

---
### Original Comments

#### Visual Studio Feedback System on 1/2/2020, 10:32 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 2/6/2020, 07:32 PM: 

I have detected that for the last 35 days, this issue didn't have much product team activity and a very small amount of new votes or comments. Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.
#### David Symmonds on 2/7/2020, 00:16 AM: 

&lt;p&gt;I've been waiting patiently for this to be resolved as this is also breaking my existing code base. The last (automated?) comment is a little disheartening given that I'd assumed breaking changes to existing code bases would be prioritised.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
        <CreatedDate>07/02/2020</CreatedDate>
        <ClosedDate>15/02/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41709</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Bind expression variables appearing in a goto case statement.</Title>
    <Description>Fixes #40714</Description>
    <CreatedDate>14/02/2020</CreatedDate>
    <ClosedDate>22/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41709</PullRequestID>
        <IssueID>40714</IssueID>
        <Title>C#: Typing goto case (ValueTuple&lt;,&gt;) in switch statement crashes Visual Studio</Title>
        <Description>**Version Used**: 
VS2019 16.4.2
.NET Core 3.1

**Steps to Reproduce**:
1. Use the following code
``</Description>
        <CreatedDate>03/01/2020</CreatedDate>
        <ClosedDate>22/02/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41706</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Initial support for "Simple Programs" feature.</Title>
    <Description>This is a punch through to support simple single file scenarios.
Related to #41704.
</Description>
    <CreatedDate>14/02/2020</CreatedDate>
    <ClosedDate>24/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41706</PullRequestID>
        <IssueID>41704</IssueID>
        <Title>Implement "Simple Programs" feature</Title>
        <Description>Proposal: https://github.com/dotnet/csharplang/blob/master/proposals/Simple-programs.md
See also https://github.com/dotnet/csharplang/issues/3117.</Description>
        <CreatedDate>14/02/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Simple Programs</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41703</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Add test for reported issue</Title>
    <Description>Fixes #41481</Description>
    <CreatedDate>14/02/2020</CreatedDate>
    <ClosedDate>15/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41703</PullRequestID>
        <IssueID>41481</IssueID>
        <Title>crash C# (Incorrect source)</Title>
        <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/897601/clash-c-incorrect-source.html)._

---
C#プロジェクト(Microsoft .NET Framework Version 4.8.03752)で、  
以下の誤ったソースを記述するとVisual Studio Community 2019(Version 16.4.3)が動作停止することを確認したので報告致します。

``

---
### Original Comments

#### Visual Studio Feedback System on 1/28/2020, 03:45 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 2/5/2020, 11:26 AM: 

Thank you for reporting this issue to us. We have changed the title to better describe the problem so others can find and engage with it.

---
### Original Solutions
(no solutions)</Description>
        <CreatedDate>07/02/2020</CreatedDate>
        <ClosedDate>15/02/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41701</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Avoid use-site diagnostics in TupleTypeDecoder</Title>
    <Description>Fixes #41699

Relates to https://github.com/dotnet/roslyn/pull/40704</Description>
    <CreatedDate>14/02/2020</CreatedDate>
    <ClosedDate>20/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41701</PullRequestID>
        <IssueID>41699</IssueID>
        <Title>StackOverflowException loading type with missing base with tuple names</Title>
        <Description>`vbc /t:library a.vb`
``

`Process is terminated due to StackOverflowException.`</Description>
        <CreatedDate>14/02/2020</CreatedDate>
        <ClosedDate>20/02/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41697</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Implementation of relational patterns for decimal (C# 9.0)</Title>
    <Description>This should be reviewed after https://github.com/dotnet/roslyn/pull/41503 is integrated.

This fulfills one of the remaining work items tracked at #41502.
</Description>
    <CreatedDate>14/02/2020</CreatedDate>
    <ClosedDate>24/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41697</PullRequestID>
        <IssueID>41502</IssueID>
        <Title>Remaining work for C# 9 pattern-matching changes</Title>
        <Description>The following is the remaining work items not yet implemented for the C# 9 pattern-matching changes described in https://github.com/dotnet/csharplang/issues/2850

- [x] Update license comments in recently added files on the branch. (https://github.com/dotnet/roslyn/pull/41503)
- [x] Support relational patterns for `decimal`. (https://github.com/dotnet/roslyn/pull/41697)
- [X] In the decision DAG builder, collapse states that have identical behavior so that the generated decision dag is simpler in some cases. (https://github.com/dotnet/roslyn/pull/42012)
- [x] In an `and` pattern, use the type from the left as the input type for the right.  This requires some spec work.
- [x] Overhaul the lowering of the is-pattern expression to support `or`, `not`, etc.
- [x] Improve lowering (code gen) for a sequence of relational pattern tests.  See https://github.com/dotnet/roslyn/issues/42054
- [X] The semantic model is not yet supported for relational operators (https://github.com/dotnet/roslyn/pull/42357)
- [X] IOperation not yet supported for the new forms. (https://github.com/dotnet/roslyn/pull/42474)
- [X] CFG for new pattern forms (https://github.com/dotnet/roslyn/pull/42548)
- [x] For the *type pattern*, we can give the same set of warnings as we do for the *is type* expression.
- [x] Implement single-element ITuple-based positional pattern (once the open issue is resolved)
- [ ] Additional testing (see https://github.com/dotnet/roslyn/issues/40727)
- [x] Document the "breaking" change around completeness for enumerated `byte` and `sbyte` switches. (https://github.com/dotnet/roslyn/pull/42632)
- [ ] Are formatter changes required?
- [x] Document breaking change: `not` is considered a type in C# 8 and a pattern in C# 9. (https://github.com/dotnet/roslyn/pull/42632)
- [x] Document breaking change: `and` and `or` are allowed as variable names in C# 8, but are pattern combinators in C# 9. (https://github.com/dotnet/roslyn/pull/42632)

## Open Issues
- [ ] What is the *narrowed type* for a  for an `or` pattern? The current spec (common type) doesn't work as the common type permits representation-changing conversions (e.g. for `int or long`).
- [ ] Is `e is dynamic` a "pure" null check?
</Description>
        <CreatedDate>07/02/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41681</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>Fix completion of unimported types</Title>
    <Description>Fix #41601</Description>
    <CreatedDate>14/02/2020</CreatedDate>
    <ClosedDate>14/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41681</PullRequestID>
        <IssueID>41601</IssueID>
        <Title>Add items from unimported namespaces does not sort items</Title>
        <Description>**Version Used**: 
Version 16.6.0 Preview 1.0 [29811.143.master]

But this could repro on 16.5, but I don't have build.

**Steps to Reproduce**:
``
**Expected Behavior**:
Order to be in:

AppliesTo
AppliesTo (Another)
AppliesToA
AppliesToA (Another)

**Actual Behavior**:

Order switches between:

AppliesTo (Another)
AppliesTo
AppliesToA (Another)
AppliesToA

AppliesTo (Another)
AppliesToA (Another)
AppliesTo
AppliesToA

![Order](https://user-images.githubusercontent.com/1103906/74301662-debc9700-4da7-11ea-8978-23e10b359c43.gif)</Description>
        <CreatedDate>12/02/2020</CreatedDate>
        <ClosedDate>26/02/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Regression</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41630</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Skip flaky Emit test</Title>
    <Description>Reported in #41617 and based on a 12% test failure rate (#41626). Skipping `Emit.DeterministicTests.CompareAllBytesEmitted_Debug`</Description>
    <CreatedDate>12/02/2020</CreatedDate>
    <ClosedDate>13/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41630</PullRequestID>
        <IssueID>41617</IssueID>
        <Title>Emit tests are faily sporadically in CI.</Title>
        <Description>For example:

https://dev.azure.com/dnceng/public/_build/results?buildId=517914&amp;view=logs&amp;j=f8acb639-1c51-5880-d963-c0898b5cea4a

``

</Description>
        <CreatedDate>12/02/2020</CreatedDate>
        <ClosedDate>12/02/2020</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Flaky</Label>
          <Label>Resolution-Duplicate</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41630</PullRequestID>
        <IssueID>41626</IssueID>
        <Title>CompareAllBytesEmitted_Debug is failing in CI / PR</Title>
        <Description>## CompareAllBytesEmitted_Debug

### Console Log Summary

There is a difference in the expected set of PDB bytes. Long binary diff

### Builds
|Build|Pull Request | Test Failure Count|
| --- | --- | --- |
|[#516959](https://dev.azure.com/dnceng/public/_build/results?buildId=516959)|#41571|1|
|[#517087](https://dev.azure.com/dnceng/public/_build/results?buildId=517087)|#41519|1|
|[#517683](https://dev.azure.com/dnceng/public/_build/results?buildId=517683)|Rolling|1|
|[#517894](https://dev.azure.com/dnceng/public/_build/results?buildId=517894)|#41613|1|
|[#517914](https://dev.azure.com/dnceng/public/_build/results?buildId=517914)|#41519|1|
|[#517939](https://dev.azure.com/dnceng/public/_build/results?buildId=517939)|Rolling|1|
### Configurations
- Windows CoreClr Release</Description>
        <CreatedDate>12/02/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Disabled Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41625</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Revert compiler update that slowed down the build</Title>
    <Description>This restores the compiler toolset from prior to #41575 to mitigate the build performance regression.

Compile time prior to this change: 6:34
Compile time with this change: 2:22</Description>
    <CreatedDate>12/02/2020</CreatedDate>
    <ClosedDate>13/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41625</PullRequestID>
        <IssueID>41575</IssueID>
        <Title>[master] Update dependencies from dotnet/arcade</Title>
        <Description>This pull request updates the following dependencies

[marker]: &lt;&gt; (Begin:00c0f9e9-f204-49af-fd58-08d7a4f28342)
## From https://github.com/dotnet/arcade
- **Subscription**: 00c0f9e9-f204-49af-fd58-08d7a4f28342
- **Build**: 20200210.11
- **Date Produced**: 2/11/2020 4:57 AM
- **Commit**: 56e162725058d80918f7aa7e0e689e1fde5c2106
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 5.0.0-beta.20110.11

[marker]: &lt;&gt; (End:00c0f9e9-f204-49af-fd58-08d7a4f28342)

</Description>
        <CreatedDate>11/02/2020</CreatedDate>
        <ClosedDate>11/02/2020</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>41619</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>allisonchou</FixedByID>
    <Title>Fix for LSP diagnostic bugs</Title>
    <Description>Fixes bug where IDE info diagnostics are reported as warnings with purple squiggles (https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1062989).

Also partially fixes #41029, pending a bug fix from LSP side (https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1067885).
</Description>
    <CreatedDate>12/02/2020</CreatedDate>
    <ClosedDate>15/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>41619</PullRequestID>
        <IssueID>41029</IssueID>
        <Title>[LSP] Diagnostic squiggles don't appear for client until edits are made</Title>
        <Description>Repro - Have a file with diagnostic errors / warning / info in a sln.  Open the file as a liveshare guest.  Notice that squiggles are missing until an edit is made.

This is likely because joining a liveshare session and opening the document on the client will not trigger the server to recompute diagnostics - http://sourceroslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/LanguageClient/InProcLanguageServer.cs,151 

Likely need some way to force publish when the client opens the document.</Description>
        <CreatedDate>17/01/2020</CreatedDate>
        <ClosedDate>15/02/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40558</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>YairHalberstadt</FixedByID>
    <Title>Don't suggest using named arguments for implicit Index and Range indexers</Title>
    <Description>This is the IDE half of the fix for #39852.

The compiler half is at #40556 </Description>
    <CreatedDate>22/12/2019</CreatedDate>
    <ClosedDate>28/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40558</PullRequestID>
        <IssueID>39852</IssueID>
        <Title>Can name parameter of range indexer</Title>
        <Description>**Version Used**: VS 16.4 preview 4

**Steps to Reproduce**:

``

**Unexpected Behavior**:

Range indexers are converted to a method `Slice(int, int)`. Since the range becomes both parameters, it is nonsensical to be able to name the parameter. At the very least the suggestion should be removed from VS.

![image](https://user-images.githubusercontent.com/29174528/68998392-3dae6500-08ba-11ea-9056-00db12e337fd.png)


</Description>
        <Code>```csharp
public class C 
{
    public static void M(string text) 
    {
        _ = text[startIndex: 1..^1];
        _ = text.AsSpan()[start: 1..^1];
    }
}
`</Code>
        <CreatedDate>16/11/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40558</PullRequestID>
        <IssueID>40556</IssueID>
        <Title>Don't allow named arguments for implicit indexers</Title>
        <Description>This fixes the compiler half of https://github.com/dotnet/roslyn/issues/39852

I'll fix the IDE half in a separate PR to simplify review, and because this is a breaking change where the IDE fix wont be.

Currently any argument name is allowed for an implicit Range or Index indexer. This disallows all names.
If the compiler team does decide to fix this, I assume it is best to fix it sooner rather than later.

It could be argued based on the spec that the names `range` and `index` should be allowed respectively, but seeing as they provide no useful information, I can't see the point of adding complexity to support them.</Description>
        <CreatedDate>22/12/2019</CreatedDate>
        <ClosedDate>26/12/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40543</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Implement designator restrictions for C# 9.0 patterns</Title>
    <Description>Fixes #40533

Relates to https://github.com/dotnet/csharplang/issues/2850
Relates to https://github.com/dotnet/roslyn/issues/40727 (test plan for C# 8 patterns)</Description>
    <CreatedDate>21/12/2019</CreatedDate>
    <ClosedDate>06/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40543</PullRequestID>
        <IssueID>40533</IssueID>
        <Title>Implement designator restrictions for C# 9.0 patterns</Title>
        <Description>In the currently proposed C# 9.0 pattern-matching extensions, it is forbidden to declare a designator in a pattern that is beneath a `not` or `or` pattern combinator. This needs to be implemented in the prototype.

Relates to https://github.com/dotnet/csharplang/issues/2850</Description>
        <CreatedDate>20/12/2019</CreatedDate>
        <ClosedDate>06/01/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40515</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>String Splitter - Properly indent when Use Tabs is enabled</Title>
    <Description>Fixes #40277</Description>
    <CreatedDate>19/12/2019</CreatedDate>
    <ClosedDate>03/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40515</PullRequestID>
        <IssueID>40277</IssueID>
        <Title>C# automatic string literal wrapping gets wrong indentation with Keep Tabs enabled</Title>
        <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/102134/c-automatic-string-literal-wrapping-gets-wrong-ind.html)._

---
I really like the feature that the C# editor now automatically adds the proper concatenation when pressing ENTER in a non-verbatim string literal, but I cannot get it to indent correctly after the second line of the string literal. I am using VS 2017 V15.3.2.

E.g. I start with a new Console Application for .NET 4.7 and type the following line inside the Main method:
``

For every further line break it outdents by one more level

I would be glad if this could be resolved. Or can it be caused by some editor setting?
Thank you.

---
### Original Comments

#### Blair Wang [MSFT] on 6/26/2018, 08:43 PM: 

Thanks for reporting this problem. After careful evaluation of the problem impact &amp;amp; severity we are closing this problem as low priority. We understand that this might not be an ideal resolution for you, but be assured that we don’t make these decisions lightly.  We prioritize problem investigations by impact and severity for a broad set of customers; the impact of this problem is limited relative to other existing problems. 
 
 We have made significant improvements to the product over the past few months, notably in the areas of performance, reliability &amp;amp; general quality of the product. It is possible that this problem has been addressed in the latest version of Visual Studio. We encourage you to update to latest version of Visual Studio and continue to give us feedback.

#### Christian Hornung on 10/22/2019, 06:42 AM: 

The problem is still present in VS 2019 version 16.3.5, unfortunately.&lt;br&gt;It only occurs if the editor is set to use tabs instead of spaces for indentation - maybe that helps to narrow it down.
#### Christian Hornung on 12/4/2019, 01:45 AM: 

Still a problem in 16.4.0.

---
### Original Solutions
(no solutions)</Description>
        <CreatedDate>10/12/2019</CreatedDate>
        <ClosedDate>03/01/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-Formatter</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40503</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Further work on C# 9 pattern-matching changes</Title>
    <Description>Further implementation of type patterns and parenthesized patterns.
Fixes #40149

Relates to https://github.com/dotnet/roslyn/issues/40727 (test plan for C# 8 patterns)</Description>
    <CreatedDate>19/12/2019</CreatedDate>
    <ClosedDate>06/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40503</PullRequestID>
        <IssueID>40149</IssueID>
        <Title>Handle array type patterns in switch statements</Title>
        <Description>In the proposed changes for C# 9.0, a type expression such as `A[]` can in theory be used as a switch case.
``
This should have the same meaning as above, but currently parses as an erroneous cast expression.
</Description>
        <CreatedDate>05/12/2019</CreatedDate>
        <ClosedDate>06/01/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40469</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Fixed IDE0009 suggestion in property pattern.</Title>
    <Description>Fixes #40242
Fixes #40331
`AbstractQualifyMemberAccessDiagnosticAnalyzer` doesn't correctly handle property pattern.</Description>
    <CreatedDate>18/12/2019</CreatedDate>
    <ClosedDate>14/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40469</PullRequestID>
        <IssueID>40242</IssueID>
        <Title>CSharpQualifyMemberAccessCodeFixProvider encountered an error</Title>
        <Description>Repro code:

``</Description>
        <CreatedDate>08/12/2019</CreatedDate>
        <ClosedDate>14/01/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-CodeStyle</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40469</PullRequestID>
        <IssueID>40331</IssueID>
        <Title>IDE0009 mis-fires on pattern matching</Title>
        <Description>**Version Used**: 29610.145.master

**Steps to Reproduce**:

Set up a project where IDE0009 (require `this.` qualifier) is active. Then add this file:

``</Description>
        <CreatedDate>12/12/2019</CreatedDate>
        <ClosedDate>14/01/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-CodeStyle</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40457</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Determine whether a stackalloc expression is target-typed when it is bound (not later).</Title>
    <Description>This change documents and adopts the design guideline that a bound node shall capture all semantically relevant information from syntax.
Fixes #40197</Description>
    <CreatedDate>17/12/2019</CreatedDate>
    <ClosedDate>03/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40457</PullRequestID>
        <IssueID>40197</IssueID>
        <Title>Fragile logic in classification of Stackalloc conversion</Title>
        <Description>``

We should not be checking syntax here, all required information should be available from bound nodes.
</Description>
        <CreatedDate>06/12/2019</CreatedDate>
        <ClosedDate>03/01/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-Design Debt</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40412</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>lameox</FixedByID>
    <Title>Fixed handling of variable declarations inside of for loops in related code fixers</Title>
    <Description>fixes #40336.

This PR introduces two fixes for `AbstractRemoveUnusedValuesCodeFixProvider` and `AbstractRemoveUnusedVariableCodeFixProvider` respectively when dealing with variables declared inside a `ForStatementSyntax`. Both classes made the wrong assumption that a `LocalDeclarationStatementSyntax` was always present in the tree above a `VariableDeclaratorSyntax`.

Also added some tests that cover these cases.</Description>
    <CreatedDate>16/12/2019</CreatedDate>
    <ClosedDate>06/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40412</PullRequestID>
        <IssueID>40336</IssueID>
        <Title>'CSharpRemoveUnusedVariableCodeFixProvider' encountered an error and has been disabled</Title>
        <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/843951/csharpremoveunusedvariablecodefixprovider-encounte.html)._

---
Here is the stack trace:
System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax'.
   at Microsoft.CodeAnalysis.RemoveUnusedVariable.AbstractRemoveUnusedVariableCodeFixProvider`3.MergeNodesToRemove(HashSet`1 nodesToRemove)
   at async Microsoft.CodeAnalysis.RemoveUnusedVariable.AbstractRemoveUnusedVariableCodeFixProvider`3.FixAllAsync[TLocalDeclarationStatement,TVariableDeclarator,TVariableDeclaration](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0. &lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)

---
### Original Comments

#### Visual Studio Feedback System on 12/4/2019, 10:53 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
        <CreatedDate>12/12/2019</CreatedDate>
        <ClosedDate>06/01/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40396</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>lameox</FixedByID>
    <Title>Introduce a DiscardSyntaxClassifier</Title>
    <Description>fixes #39768 .

This is my first contribution so please let me know if there is anything else needed apart from the exported highlighter or if there is a better place in the codebase to introduce the changes.</Description>
    <CreatedDate>14/12/2019</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40396</PullRequestID>
        <IssueID>39768</IssueID>
        <Title>Discard in 'out _' is not classified as a keyword</Title>
        <Description>**Version Used**: 16.4 Preview 4

**Steps to Reproduce**:

1. `int.TryParse("", out _);`
2. `int.TryParse("", out var _);`

**Expected Behavior**:

The `_` in both cases is classified as a keyword.

**Actual Behavior**:

The `_` is classified as an identifier in the first case, but classified as a keyword in the second case.
</Description>
        <CreatedDate>12/11/2019</CreatedDate>
        <ClosedDate>27/01/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40367</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Continue parsing on separate thread when near stack limit</Title>
    <Description>Fixes #40303</Description>
    <CreatedDate>13/12/2019</CreatedDate>
    <ClosedDate>23/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40367</PullRequestID>
        <IssueID>40303</IssueID>
        <Title>Continue parsing on separate thread when nearing the stack limit</Title>
        <Description>Make C# parser more resilient to deeply nested constructs by continuing parsing on a separate thread when nearing the stack limit.</Description>
        <CreatedDate>11/12/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-Continuous Improvement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40358</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Optimize compilation tracker for solution close</Title>
    <Description>Reduces the time in `VisualStudioProject.RemoveFromWorkspace` from ~1945ms to ~275ms for closing **Roslyn.sln**.

Fixes #37616</Description>
    <CreatedDate>13/12/2019</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40358</PullRequestID>
        <IssueID>37616</IssueID>
        <Title>Unloading large c# solutions are slow again</Title>
        <Description>This used to be heavily improved and fast but something has happened with later versions which has made it slow again.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/668659/unloading-large-c-solutions-are-slow-again.html
VSTS ticketId: 957603_
_These are the original issue comments:_

Visual Studio Feedback System on 7/30/2019, 09:40 PM (12 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>31/07/2019</CreatedDate>
        <ClosedDate>29/01/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>Developer Community</Label>
          <Label>IDE-Project</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40289</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Save serializable options on the solution snapshot</Title>
    <Description>Fixes #19284

**TODOs:**
1. ~~Cleanup + comments + renaming~~
2. ~~More manual testing + possibly add unit tests~~
</Description>
    <CreatedDate>11/12/2019</CreatedDate>
    <ClosedDate>08/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40289</PullRequestID>
        <IssueID>19284</IssueID>
        <Title>make Solution.Options actually part of solution snapshot</Title>
        <Description>right now, Solution.Options is not actually part of snapshot but use Workspace.Options

we should make it as part of solution snapshot. which means when Workspace option is changed, new CurrentSolution should be created. and all normal process should begin from there such as workspace changed events and etc.

OptionSet should support checksum and support creating checksum without reading all options in to make creating checksum for solution efficient.

</Description>
        <CreatedDate>05/05/2017</CreatedDate>
        <ClosedDate>08/01/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-OOP</Label>
          <Label>Need Design Review</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40287</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>DiagnosticAnalyzerInfoCache refactorings</Title>
    <Description>1) When reporting analyzer telemetry we need to check if we own the analyzer and avoid reporting telemetry on analyzers that we do not own. This information was calculated and cached in a static conditional weak table on `DiagnosticAnalyzerLogger`. Instead, move tracking this information to   `DiagnosticAnalyzerInfoCache` where we track other analyzer information.

2) Remove methods that were defined on `DiagnosticService` but only operated on `DiagnosticAnalyzerInfoCache` and use the cache object directly.

3) Delete dead test code.

4) Remove reporting analyzer exceptions from SupportedDiagnostics. 

5) Clean up diagnostic analyzer telemetry reporting.

6) Fixes diagnostic verification test helpers to test the actual product behavior
The test helpers used to hook up `onAnalyzerException` delegate and added diagnostics reported via this callback to the results. The diagnostics reported for misbehaving analyzers should however be reported along with other compilation level diagnostics in GetDiagnostics result. Adding them after the fact in the test harness hides a bug in the analyzer driver that doesn't report these diagnostics properly: #41212</Description>
    <CreatedDate>11/12/2019</CreatedDate>
    <ClosedDate>28/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40287</PullRequestID>
        <IssueID>41212</IssueID>
        <Title>Diagnostics created for exceptions thrown by suppressors are not reported correctly</Title>
        <Description>See skipped tests: 
- `DiagnosticSuppressorTests.TestExceptionFromSuppressor`
- `DiagnosticSuppressorTests.TestInvalidDiagnosticSuppressionReported`
- `DiagnosticSuppressorTests.TestNonReportedDiagnosticCannotBeSuppressed`
- `DiagnosticSuppressorTests.TestUnsupportedSuppressionReported`</Description>
        <CreatedDate>24/01/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40257</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dibarbet</FixedByID>
    <Title>Activate language client during workspace load.</Title>
    <Description>~~pending RPS validation + RPS exception for new DLLs being loaded~~
exception granted

resolved #39280</Description>
    <CreatedDate>09/12/2019</CreatedDate>
    <ClosedDate>14/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40257</PullRequestID>
        <IssueID>39280</IssueID>
        <Title>Roslyn C#/VB language server fails to start</Title>
        <Description>**Version Used**: 
Visual Studio 2019 16.3 and later

**Steps to Reproduce**:

This is an intermittent repro that appears to be the result of the Roslyn language server returning a null connection when its ILanguageClient is called.

1. Open a C# or VB solution
2. Attempt to search for code in Ctrl+Q search box

**Expected Behavior**:
Symbols appear in the box.

**Actual Behavior**:
Occasionally, the language client fails to start due to a null connection being returned by Roslyn's language client.</Description>
        <CreatedDate>15/10/2019</CreatedDate>
        <ClosedDate>14/02/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Investigation Required</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39920</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>nbalakin</FixedByID>
    <Title>WIP: Optimise condition and if expression with constant boolean branches (#34726)</Title>
    <Description>Replace "simple" if statements with conditional operator expression to reuse condition operator optimisations.

Issue: #34726</Description>
    <CreatedDate>21/11/2019</CreatedDate>
    <ClosedDate>28/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39920</PullRequestID>
        <IssueID>34726</IssueID>
        <Title>Compiler should optimize common boolean return patterns</Title>
        <Description>**Version Used**: 
Rosyln master branch from 2nd April 2019

**Steps to Reproduce**:
[[Sharplab Demo](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAGAAhwEYBuAWACgcBmIgJgIGECBvKgzou4Ae14wEAygAteAVwwATAEJwA8gAcYaMGgBecKQApewAFZwAxjAK8AlGw5cbaAGYFdBNFDMHjMc9Zud2lHwFEAOwEMAjicBT+gQC+3j44IXYQGFCR8XHRnPG0BHwCBAAKCLyKiLruJmaWfoHBZs6ueoYmUTaZMUA)]
1. Have this code:
`public bool Proper(object o) {
        return o is object;
    }`
2. Also, have this unoptimized version
`public bool ShouldBeOptimized(object o) {
        if (o is object)
        {
            return true;
        }
        return false;
    }`

**Expected Behavior**:
Identical IL output, as they are semantically identical. This wouldn't be an issue but it does affect JIT output seemingly (JIT64 desktop, tested on Sharplab above) - it switches a `setcc ; movzx` pattern to a full branch, which is not ideal

**Actual Behavior**:
IL generation has an additional branch and changes the generated JIT

It is a very minor issue but was recommended to create an issue for it</Description>
        <CreatedDate>03/04/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Code Gen Quality</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39625</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Handle dependent slots in pattern-matching null tests.</Title>
    <Description>Fixes #39264</Description>
    <CreatedDate>01/11/2019</CreatedDate>
    <ClosedDate>06/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39625</PullRequestID>
        <IssueID>39264</IssueID>
        <Title>Roslyn doesn't understand pattern-matching null check for properties</Title>
        <Description>**Version Used**: 

``</Description>
        <CreatedDate>14/10/2019</CreatedDate>
        <ClosedDate>06/01/2020</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39593</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Run integration tests with .NET Core SDK shipped with VS (#2)</Title>
    <Description>Integration tests were being run with the dotnet SDK from the
build environment. This broke when VS updated to creating new
.NET Core projects against a TFM not supported by the version
of the SDK we were building against.

This change allows the .NET Core SDK that shipped with VS to
be found when running integration tests. Which is likely the
desired behavior.

Fixes #39588</Description>
    <CreatedDate>30/10/2019</CreatedDate>
    <ClosedDate>07/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39593</PullRequestID>
        <IssueID>39588</IssueID>
        <Title>Integration test failures with netcoreapp31 </Title>
        <Description>Integration tests are failing for .NET Core workspace tests. As reported in https://github.com/dotnet/roslyn/pull/39444#issuecomment-547615317

``

This seems to be caused by the VS build on the integration VMs defaulting to a netcoreapp31 TFM for new projects which is unsupported by the .NET Core SDK in our build environment.

- [x] Disable integration test requirement for PRs
- [x] Skip integration tests
- [x] Re-enable integration test requirement for PRs
- [ ] Fix integration tests and remove Skip</Description>
        <CreatedDate>30/10/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Integration-Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39462</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AmadeusW</FixedByID>
    <Title>Implement Editor symbol search APIs</Title>
    <Description>Implement Editor's Symbol Search APIs
This will allow Find All References, etc to combine results from Roslyn and other providers.

Notice that the last two results come from a cloud service. This allows us to fill in the gaps when, for example, user opened a solution filter.
![image](https://user-images.githubusercontent.com/1673956/68889509-ebaaeb00-06d1-11ea-968f-87d82a831486.png)

Outstanding work:
- [ ] Correctly relay reference\definition information to the Editor
- [x] Use a preview flag to control whether Roslyn uses its own command handler or participates in the Editor API
- [ ] Rebase to no longer depend on #39159 where Jason made necessary refactoring to allow Roslyn to consume 16.4 Editor bits.
</Description>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>03/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39462</PullRequestID>
        <IssueID>39159</IssueID>
        <Title>Infer indentation in files with IIndentationManagerService</Title>
        <Description>IIndentationManagerService is a new service from the editor that looks at the existing tabs and spaces in a file and attempts to determine what the prevailing format is. This is useful for repositories that may have not had an .editorconfig to specify what is happening, or for repositories that have such a mix that an .editorconfig may not be immediately useful.

## Task List

- [x] Correctly implementing ordering between this and .editorconfig.
- [x] Investigate issue where Introduce Variable still used the wrong formatting.
- [x] Tests.

## Customer and scenario info

**Who is impacted by this bug?**
This enables new support for the editor's "Adaptive Formatting" feature. Working in a C# file with tabs or spaces that differ from Tools &gt; Options will no longer make things more inconsistent.

**Bugs fixed**
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1007701

**What is the customer scenario and impact of the bug?**
Typing in a C# or VB file that doesn't match your tab/spaces settings will now do the right thing.

**What is the workaround?**
Users change their Tools &gt; Options all the time, which is a huge complaint.

**How was the bug found?**
New feature work.

**Testing**
We've added unit tests for some core scenarios and have done some ad-hoc testing for the direct feature and related features.</Description>
        <CreatedDate>09/10/2019</CreatedDate>
        <ClosedDate>24/10/2019</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39301</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Address issues with nullable flow analysis slot container types and changing types during inference</Title>
    <Description>Fixes #39220
Fixes #39297
Fixes #33428</Description>
    <CreatedDate>15/10/2019</CreatedDate>
    <ClosedDate>24/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39301</PullRequestID>
        <IssueID>39220</IssueID>
        <Title>Roslyn doesn't handle inferred nullability in the presence of `goto`.</Title>
        <Description>**Version Used**: 
``

**Expected Behavior**:
`warning CS8602: Dereference of a possibly null reference.` reported for `prop.ToString()`

**Actual Behavior**:
No warnings are reported for the program above. The program crashes at runtime with a `NullReferenceException`

**Notes**
If you specify the type of `c` explicitly i.e. `C&lt;string?&gt; c = GetC(s);` you'll get the correct warning.</Description>
        <CreatedDate>10/10/2019</CreatedDate>
        <ClosedDate>24/02/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39301</PullRequestID>
        <IssueID>39297</IssueID>
        <Title>NullableWalker violates invariants of slot and slot parents</Title>
        <Description>I tried adding the following assertion

``

but there are a number of failures (of this assertion) in `NullableWalker`.  It is possible that some of these are symptoms of https://github.com/dotnet/roslyn/issues/20648 but I believe at least the failure in `NullableReferenceTypesTests.Conversions_TupleConversions_03` and two other tests is a deeper problem.  I am skipping those tests to make progress on https://github.com/dotnet/roslyn/issues/39220, and I removing the assertion for now.  The assertion should be readded after https://github.com/dotnet/roslyn/issues/20648 has been fixed and any issues causing the assertion to fail should be reevaluated.

</Description>
        <CreatedDate>15/10/2019</CreatedDate>
        <ClosedDate>24/02/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Disabled Test</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39301</PullRequestID>
        <IssueID>33428</IssueID>
        <Title>Ensure NullableWalker.InheritNullableStateOfMember is not copying state for invalid members</Title>
        <Description>`NullableWalker.InheritNullableStateOfMember` should assert the member is valid for value and target.</Description>
        <CreatedDate>15/02/2019</CreatedDate>
        <ClosedDate>24/02/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38316</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Make Task&lt;T&gt; nullable covariant</Title>
    <Description>This is a possible solution for #36894. I think LDT needs to discuss before we consider taking this change.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>14/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38316</PullRequestID>
        <IssueID>36894</IssueID>
        <Title>When should variance be permitted for nullable type arguments?</Title>
        <Description>I encountered the following couple of scenarios just now:

``

I see a few fixes users can do for this:
1. change to `Task.FromResult("hello")!`
2. change to `Task.FromResult&lt;string?&gt;("hello")`
3. `Task.FromResult((string?)"hello")` ~~(this gets marked as redundant by the IDE)~~

It feels like there should be some way to allow nullable variance of certain type parameters so that such workarounds aren't necessary. Interface types can have `in`/`out` modifiers on their type parameters but this doesn't work for types like `Task&lt;T&gt;`.</Description>
        <CreatedDate>29/06/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Area-Language Design</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38227</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Treat AddImport replacement text changes as insertions.</Title>
    <Description>In AddMissingImports refactoring, AddImport fix text changes can come back
as a replacement instead of an insertion when there are multiple trailing
newlines following the using directives. Convert these to insertions so
that we retain the newlines and the text changes don't step on each other.

Fixes #35982</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>07/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38227</PullRequestID>
        <IssueID>35982</IssueID>
        <Title>CSharpAddMissingImportsRefactoringProvider thrown ArgumentOutOfRangeException in FindTokenCore</Title>
        <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.2.0 Preview 1.0
VisualStudio.16.Preview/16.2.0-pre.1.0+28917.182
Microsoft .NET Framework
Version 4.8.03761

**Steps to Reproduce**:
It happened after inserting a whole method into a new class. Apart from missing using directives the whole code was correct.

**Actual Behavior**:

``
</Description>
        <CreatedDate>27/05/2019</CreatedDate>
        <ClosedDate>10/10/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37287</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Run naming styles on closed files</Title>
    <Description>Our best guess is we ran naming styles on open files only for two reasons:

1. At the time, we only supported .editorconfig in-proc, so out of proc wouldn't have used the right settings.
2. Even if we were running in-proc, there might have been performance issues since we were running across a lot of files.

Neither of these concerns apply at this point: we now support .editorconfig out of proc (both in the legacy path and the new path) and since we're already running other analyzers that use .editorconfig,
the cost of processing it will exist regardless.

Fixes #15760</Description>
    <CreatedDate>16/07/2019</CreatedDate>
    <ClosedDate>04/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37287</PullRequestID>
        <IssueID>15760</IssueID>
        <Title>The Error List shows different results based on whether you've ever opened a source file</Title>
        <Description>1. Clone this repo to this commit: https://github.com/dotnet/roslyn-project-system/commit/e8f444a1ebe3d78b6b494d5dc355e95b7da19086
2. From a VS command prompt, run build.cmd from the root
3. Open src\ProjectSystem.sln (build 26005.0 D15PreRel)
4. Change your VB code style settings to:
![image](https://cloud.githubusercontent.com/assets/1103906/21003545/17200750-bd80-11e6-9058-5a78ad4bd2bd.png)
6. Make sure Background Analysis is turned on for VB
7. Wait till Error List no longer has "..." after name
-- Error List should look something like --
![image](https://cloud.githubusercontent.com/assets/1103906/21003576/4dff3b6a-bd80-11e6-819f-ea045f4aa7f6.png)



7. Open src\Microsoft.VisualStudio.AppDesigner\ApplicationDesigner\ApplicationDesignerView.vb
8. Close that file

-- Error List should look something like (Notice that there's 22 more messages that have appeared) -- 

![image](https://cloud.githubusercontent.com/assets/1103906/21003625/887fae82-bd80-11e6-8cf9-f8661b17b043.png)


Very confused how or why messages show up the Error List? What exactly do I need to do to show *all* possible messages?</Description>
        <CreatedDate>08/12/2016</CreatedDate>
        <ClosedDate>04/02/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36491</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Show &lt;value&gt; documentation in Metadata as Source and Object Browser</Title>
    <Description>* Show `&lt;value&gt;` documentation in Metadata as Source
* Show `&lt;value&gt;` documentation in Object Browser

This establishes the initial data flow and first features as a prerequisite for #31618 and #8627.</Description>
    <CreatedDate>15/06/2019</CreatedDate>
    <ClosedDate>06/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36491</PullRequestID>
        <IssueID>31618</IssueID>
        <Title>Intellisense Return Value Documentation</Title>
        <Description>&lt;p&gt;I can't believe this still hasn't been done in VS...can someone PLEASE make it possible to display the &amp;lt;return&amp;gt; xml doc content in Intellisense? The return value documentation is usually only a single line and it is extremely important to properly using methods and properties. I really don't understand why it's expected that I go to the online docs everytime I want to figure out what a method is returning.&lt;/p&gt;

_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/402037/intellisense-return-value-documentation.html
VSTS ticketId: 743723_
_These are the original issue comments:_
(no comments)</Description>
        <CreatedDate>07/12/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Developer Community</Label>
          <Label>Feature Request</Label>
          <Label>Need Design Review</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36491</PullRequestID>
        <IssueID>8627</IssueID>
        <Title>VB XML doc inconsistency between template and IntelliSense for property (template contains &lt;returns&gt;, IntelliseSense not)</Title>
        <Description>Related to #8546, there is inconsistency between what gets inserted when I type ''', and what IntelliSense offers for properties.
When I type ''' above property &lt;summary&gt;

 and &lt;returns&gt; gets inserted. But when I delete &lt;returns&gt; and want to insert it again, IntelliSense does not offer it.
![vbprop](https://cloud.githubusercontent.com/assets/2221259/13007609/d1f9d636-d191-11e5-9dba-7366a04bda80.png)
</Description>
        <CreatedDate>12/02/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35871</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Provide context information for analyzer exceptions</Title>
    <Description>Fixes #30660</Description>
    <CreatedDate>22/05/2019</CreatedDate>
    <ClosedDate>04/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35871</PullRequestID>
        <IssueID>30660</IssueID>
        <Title>Include enough information in AD0001 (when an analyzer throws) to be able to disable &amp; file a bug</Title>
        <Description>I've got the following error in my error list:

``


This is blocking my build, but there's not enough information in the error to be able to file a bug &amp; disable the analyzer. Please include the analyzer ID &amp; the full identity of the assembly it comes from.</Description>
        <CreatedDate>23/10/2018</CreatedDate>
        <ClosedDate>04/02/2020</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35726</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Revert "Write secondary process dumps to a separate directory"</Title>
    <Description>🚧 Builds on #35603 (will rebase this to a single commit after that merges)

:x: Blocked on verifying ability of Azure Pipelines to correctly include the **xunit.console.x86.dmp** file in the build results following an integration test hang.

This reverts commit 80cdb06828c6773def553c9c3b3c3dcae9e5652d.
</Description>
    <CreatedDate>15/05/2019</CreatedDate>
    <ClosedDate>16/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35726</PullRequestID>
        <IssueID>35603</IssueID>
        <Title>Use the hosted pool for integration tests</Title>
        <CreatedDate>09/05/2019</CreatedDate>
        <ClosedDate>15/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35685</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Implement support for CodeRefactoringProvider in NuGet packages</Title>
    <Description>Fixes #32705</Description>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>04/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35685</PullRequestID>
        <IssueID>32705</IssueID>
        <Title>CodeRefactoring in nuget package doesn't work</Title>
        <Description>**Version Used**: Microsoft.CodeAnalysis 1.0.0

**Steps to Reproduce**:

1. Install the nuget package for my Serilog Analyzer https://github.com/Suchiman/SerilogAnalyzer from https://www.nuget.org/packages/SerilogAnalyzer
2. Attempt to invoke a CodeRefactoring like the ShowConfigCodeRefactoringProvider like shown here https://github.com/Suchiman/SerilogAnalyzer#refactors

**Expected Behavior**:
Works as in the gif

**Actual Behavior**:
Nothing happens, Analyzers and CodeFixes work fine but CodeRefactorings only work in the VSIX version.
</Description>
        <CreatedDate>23/01/2019</CreatedDate>
        <ClosedDate>04/01/2020</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35593</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Implement external access API for CodeLens</Title>
    <Description>Builds on #35499</Description>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>14/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35593</PullRequestID>
        <IssueID>35499</IssueID>
        <Title>More external access</Title>
        <Description>Add external access projects for additional partners.</Description>
        <CreatedDate>03/05/2019</CreatedDate>
        <ClosedDate>20/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35552</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Implement external access layer for dotnet/project-system</Title>
    <Description>Builds on #35499

See #35070</Description>
    <CreatedDate>07/05/2019</CreatedDate>
    <ClosedDate>14/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35552</PullRequestID>
        <IssueID>35499</IssueID>
        <Title>More external access</Title>
        <Description>Add external access projects for additional partners.</Description>
        <CreatedDate>03/05/2019</CreatedDate>
        <ClosedDate>20/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35552</PullRequestID>
        <IssueID>35070</IssueID>
        <Title>Migrate project system IVTs to external access pattern</Title>
        <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* Microsoft.VisualStudio.ProjectSystem.CSharp
* Microsoft.VisualStudio.ProjectSystem.Managed
* Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests
* Microsoft.VisualStudio.ProjectSystem.Managed.VS
* Microsoft.VisualStudio.ProjectSystem.Managed.VS.UnitTests
* Microsoft.VisualStudio.ProjectSystem.VisualBasic

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34254</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix incorrect task chaining in InlineRenameSession</Title>
    <Description>Fixes #29483</Description>
    <CreatedDate>19/03/2019</CreatedDate>
    <ClosedDate>10/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34254</PullRequestID>
        <IssueID>29483</IssueID>
        <Title>[Flaky] CSharp_FixupSpanDuringResolvableConflict_ComplexificationReordersReferenceSpans Failure</Title>
        <Description>Test Log:
``

https://ci.dot.net/job/dotnet_roslyn/job/features_null-operator-enhancements/job/windows_release_unit32_prtest/20/
https://github.com/dotnet/roslyn/pull/29476

From the failure output, it appears that some of the spans are duplicated? I've not seen this failure before, and that particular branch has no changes related to anything used in the test over features/compiler.</Description>
        <CreatedDate>24/08/2018</CreatedDate>
        <ClosedDate>10/01/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Flaky</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32473</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>TobiasBreuer</FixedByID>
    <Title>fixes #23123</Title>
    <Description>Opened up this PR with respect to #23123 for further discussion of proposed solution.</Description>
    <CreatedDate>15/01/2019</CreatedDate>
    <ClosedDate>28/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32473</PullRequestID>
        <IssueID>23123</IssueID>
        <Title>Microsoft.CodeAnalysis.Scripting.CompilationErrorException: '(1,8): error CS1503</Title>
        <Description>**Version Used**: 
.Net 4.6.1
VS 2015 w/ Update 3
Nuget Package: Microsoft.CodeAnalysis.CSharp.Scripting V2.4.0

**Steps to Reproduce**:
``

**Expected Behavior**:
"test" is written to the Console.

**Actual Behavior**:
Error is thrown when executing .RunAsync

Unhandled Exception: Microsoft.CodeAnalysis.Scripting.CompilationErrorException:
(1,28): error CS1503: Argument 1: cannot convert from 
'RoslynExperimentation.MyClass [D:\Projects2\RoslynExperimentation\RoslynExperimentation\bin\Debug\RoslynExperimentation.exe]' to 
'RoslynExperimentation.MyClass [RoslynExperimentation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]'
</Description>
        <CreatedDate>10/11/2017</CreatedDate>
        <ClosedDate>28/02/2020</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Question</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32351</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>YairHalberstadt</FixedByID>
    <Title>Improve error recovery in type argument list</Title>
    <Description>This tries to prevent entire methods/properties/fields/classes being mangled by the parser when a '&gt;' token is missing in certain locations. 

For example:

```csharp
public class A : List&lt;int
{
    public void M()
    {
        M();
        C.M();
    }
}

public class B
{
    
    public List&lt;int M()
    {
        var x = 42;
    }
    
    public List&lt;int F = 42;
    
    public List&lt;int P {get;set;}
}
```

https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABAzAAmwCZ8BBfEfAGQEtYAeGgOxgFgAoAbw/18IOwAWfAFkAFAEoefbuz7zRkgNzSF+AMIA6cRJVy+AXw5H2HPIRIAhDrPmr+1OjEYtFU/b1tr8ANwgJ8AA98AF58QSI9eRM7DwdaBmYYfAAxUPDI+3tzBOck/AAFfE4AczgYJShypRMTDiA==

The relevant issue is #24642
A previous closed PR is at https://github.com/dotnet/roslyn/pull/32124</Description>
    <CreatedDate>10/01/2019</CreatedDate>
    <ClosedDate>04/02/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32351</PullRequestID>
        <IssueID>24642</IssueID>
        <Title>Poor error recovery after missing &gt;</Title>
        <Description>Reported at [Link](https://developercommunity.visualstudio.com/content/problem/187402/roslyn-parser-bug.html)
**Version Used**: 15.6 Preview 3

**Steps to Reproduce**:

``

**Expected Behavior**:

A message saying the `&gt;` is missing between `Description)` and `GetAllValues`.

**Actual Behavior**:

48 errors, and an editor that looks like this:

![image](https://user-images.githubusercontent.com/1408396/35807105-54d007a2-0a47-11e8-9f20-accfc8669a54.png)
</Description>
        <CreatedDate>05/02/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>24809</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Enable ObjectFormatterTests</Title>
    <Description>Fixes #15860 
See #19027</Description>
    <CreatedDate>13/02/2018</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>24809</PullRequestID>
        <IssueID>15860</IssueID>
        <Title>Enable more scripting tests on Unix</Title>
        <Description>Search for issue number in CSharpScriptingTests.</Description>
        <CreatedDate>13/12/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Interactive</Label>
          <Label>Disabled Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>24809</PullRequestID>
        <IssueID>19027</IssueID>
        <Title>CoreCLR scripting tests loading PDBs fail after move to SDK</Title>
        <Description>This may be due to a new version of CoreCLR. Needs more investigation.</Description>
        <CreatedDate>26/04/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21475</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Insert value documentation instead of returns for properties</Title>
    <Description>Fixes #8627
</Description>
    <CreatedDate>12/08/2017</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21475</PullRequestID>
        <IssueID>8627</IssueID>
        <Title>VB XML doc inconsistency between template and IntelliSense for property (template contains &lt;returns&gt;, IntelliseSense not)</Title>
        <Description>Related to #8546, there is inconsistency between what gets inserted when I type ''', and what IntelliSense offers for properties.
When I type ''' above property &lt;summary&gt;

 and &lt;returns&gt; gets inserted. But when I delete &lt;returns&gt; and want to insert it again, IntelliSense does not offer it.
![vbprop](https://cloud.githubusercontent.com/assets/2221259/13007609/d1f9d636-d191-11e5-9dba-7366a04bda80.png)
</Description>
        <CreatedDate>12/02/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40534</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Do not include binding cache in BoundLambda</Title>
    <Description>Fixes #40495</Description>
    <CreatedDate>20/12/2019</CreatedDate>
    <ClosedDate>23/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40534</PullRequestID>
        <IssueID>40495</IssueID>
        <Title>Possible out of memory crash when attempting to insert this code</Title>
        <Description>**Version Used**: 16.4.2

**Steps to Reproduce**:

1. Start new console application, .NET Core or .NET Framework
2. Insert the following code in the `Main` entrypoint:
``
</Description>
        <CreatedDate>19/12/2019</CreatedDate>
        <ClosedDate>23/12/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40479</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Use a temp when a local or parameter is ref/in/out in pattern input</Title>
    <Description>Closes #40403

I manually verified that the bug repros with the 3.5.0-beta2 compiler, but does not repro with a compiler freshly built with this change.

I wasn't sure whether or not to make this defensive copy for all ref kinds-- I figured that for a ref parameter or local, "somebody else" controls the actual storage being referenced, and it could always change out from under you if you read it multiple times. It makes me wonder if there's the same risk if you pass a regular parameter off by 'ref' and then use the parameter as input to a pattern. This seems to put into question whether you can ever "safely" reuse a local/parameter input to a pattern, and when/whether we want to say "caveat emptor" in some situations and do something that is "probably" safe but not certain to be safe.</Description>
    <CreatedDate>18/12/2019</CreatedDate>
    <ClosedDate>19/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40479</PullRequestID>
        <IssueID>40403</IssueID>
        <Title>`is` check is not atomic and can throw `InvalidCastException`</Title>
        <Description>**Version Used**: 

`%ProgramFiles%\dotnet\sdk\3.1.100\Roslyn\bincore\Microsoft.CodeAnalysis.CSharp.dll`
File SHA1: `46f61df92a8fb01930a0f8b529b0abb365ffd64b`
File Version: `3.400.19.56205`
Product Version: [`3.4.0-beta4-19562-05+ff930dec4565e2bc424ad3bf3e22ecb20542c87d`](https://github.com/dotnet/roslyn/commit/ff930dec4565e2bc424ad3bf3e22ecb20542c87d)

`%ProgramFiles%\dotnet\dotnet.exe`
File SHA1: `755f1b51255447383e514cb0a2d0e2f43b4b27c9`
File Version: `3.100.19.56502`
Product Version: `3,100,19,56502 @Commit: 65f04fb6db7a5e198d05dbebd5c4ad21eb018f89`

**Steps to Reproduce**:

Compile and run:
``

**Expected Behavior**:

No exception. `is` check should behave as an atomic operation. If a reference to a mutable variable is involved, it should create a local copy of that variable and work with it.
Cf. the implementation of the `?.` operator.</Description>
        <CreatedDate>16/12/2019</CreatedDate>
        <ClosedDate>19/12/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40465</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Give errors on implicit conversions to 'void'</Title>
    <Description>Closes #40405

Any additional test case ideas would be appreciated--think unusual or new language features where we might accidentally let you convert something to 'void'.</Description>
    <CreatedDate>18/12/2019</CreatedDate>
    <ClosedDate>19/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40465</PullRequestID>
        <IssueID>40405</IssueID>
        <Title>Roslyn doesn't detect error and generates a C7038 error: Failed to emit module</Title>
        <Description>**Version Used**: 
SDK Version: 3.1.100
Windows 10 pro 1909

**Steps to Reproduce**:
1- Use the following code

``

2- dotnet build

**Expected Behavior**:
Error : CS0127	Since 'ConcreteClass.Foo()' returns void, a return keyword must not be followed by an object expression

**Actual Behavior**:
Microsoft (R) Build Engine version 16.4.0+e901037fe for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 110,44 ms for ...\console1.csproj.
CSC : error CS7038: Failed to emit module 'console1'. [...\console1.csproj]
Program.cs(11,31): warning CS0649: Field 'ConcreteClass._next' is never assigned to, and will always have its default value null [...\console1.csproj]

Build FAILED.

Program.cs(11,31): warning CS0649: Field 'ConcreteClass._next' is never assigned to, and will always have its default value null [...\console1.csproj]
CSC : error CS7038: Failed to emit module 'console1'. [...\console1.csproj]
    1 Warning(s)
    1 Error(s)</Description>
        <CreatedDate>16/12/2019</CreatedDate>
        <ClosedDate>19/12/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40456</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Merge feature branch features/editorconfig-generated-code into master</Title>
    <Description>Fixes #3705</Description>
    <CreatedDate>17/12/2019</CreatedDate>
    <ClosedDate>20/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40456</PullRequestID>
        <IssueID>3705</IssueID>
        <Title>Exclude files or folder from running through the analyzers through a configuration file.</Title>
        <Description>Hi,

we have a lot of generated files that trigger warnings, errors when analyzers run them.
since the file name of the generated files do not follow the common naming conventions for generated code roslyn fires the analyzers away. As a result there are ten of thousands of warnings in the solution.
Could we get a exclude file from analyzing logic that:
- Exclude a file by adding it to a exclusion list
- Exclude a file by adding it to a exclusion list
- Annotate classes with a special Attribute that exclude the class
- exclude certain file name extensions ( like js files generated by typescript)
- Combination of the above like exclude all js files that live under the folder x including all sub folders

Most of the rules come straight from Resharper's exclusion file manager

Thanks
</Description>
        <CreatedDate>26/06/2015</CreatedDate>
        <ClosedDate>20/12/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40441</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>allisonchou</FixedByID>
    <Title>Fix for introduce local variable bugs</Title>
    <Description>Fixes #40374 and fixes #40381 and adds applicable tests.</Description>
    <CreatedDate>17/12/2019</CreatedDate>
    <ClosedDate>30/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40441</PullRequestID>
        <IssueID>40374</IssueID>
        <Title>Introduce local can introduce local in wrong place with local functions</Title>
        <Description>Steps to reproduce:
1. Original code:
``

In short, there should be two conditions on where to place the new local declaration:
1) Before all calls to local functions that use the variable.
2) Before the local function itself.

(Thanks to @dpoeschl for originally catching this and for outlining the two conditions!)</Description>
        <CreatedDate>13/12/2019</CreatedDate>
        <ClosedDate>30/12/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40441</PullRequestID>
        <IssueID>40381</IssueID>
        <Title>Introduce local tries to introduce across static local functions</Title>
        <Description>Steps to reproduce:
1) With the following code, highlight ``
</Description>
        <CreatedDate>13/12/2019</CreatedDate>
        <ClosedDate>30/12/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>40418</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jessetrinity</FixedByID>
    <Title>Remove hard-coded TS check for RaiseDiagnosticsRemovedForDocument</Title>
    <Description>Removing the hard-coded workaround for TypeScript added in #39892.

@mavasani @minestarks</Description>
    <CreatedDate>16/12/2019</CreatedDate>
    <ClosedDate>20/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>40418</PullRequestID>
        <IssueID>39892</IssueID>
        <Title>Remove diagnostics from error list on document close or reset for tha…</Title>
        <Description>…t document

This fixes a recent regression where we stopped clearing out documents diagnostics on document close for TypeScript.

Fixes #39902

--------------------
**More Context**

1. Prior behavior (when closed file diagnostics/FSA is turned off):
    1. We only compute diagnostics for opened files and populate error list
    2. When user closes a file, we explicitly remove the diagnostics from the error list for that file.
2. Recently, we added [new functionality](https://github.com/dotnet/roslyn/pull/39596) to re-purpose “Run Code Analysis” command for C# and VB projects, which regressed the above behavior.
    1. With this command, users can force compute live diagnostics for any project or current solution on demand. Computed diagnostics include both open file and closed file diagnostics and they are automatically populated in the error list.
    2. We want these diagnostics to stay in the error list even for closed files. I had to make a change to diagnostic service to not force remove all closed file diagnostics, otherwise this command was populating the correct diagnostics in error list only for them to be immediately removed for all closed files.
3. New behavior:
    1. We only compute diagnostics for opened files and populate error list by default
    2. Users can force complete diagnostics for closed files by using explicit commands, at which point error list will also contain closed file diagnostics
    3. When user closes the file, we do not remove the diagnostics from the error list. User can switch the error list scope combo box to “Open documents” instead of the default “Entire solution” to only view diagnostics for opened documents.

We feel the new behavior is more logical – error list contents are purely what diagnostics have been computed and is not affected by actions such as closing a file. Users should be taught to use the error list scope combo box if they desire to get differing views over data, such as Current Document, Open Documents, and so on, instead of us trying to proactively do so for users by modifying the actual error list contents.

However, TypeScript would like to retain the old behavior. So we have decided to add a hook to allow a per-language setting to decide between the old and new behavior.</Description>
        <CreatedDate>19/11/2019</CreatedDate>
        <ClosedDate>03/12/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39708</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Show QuickInfo on references to indexers</Title>
    <Description>Fixes #38283

![image](https://user-images.githubusercontent.com/235241/68326504-6b0c3f00-0080-11ea-916a-99e657464b93.png)
</Description>
    <CreatedDate>06/11/2019</CreatedDate>
    <ClosedDate>06/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39708</PullRequestID>
        <IssueID>38283</IssueID>
        <Title>Show indexer's quickinfo when hovering over either of brackets</Title>
        <CreatedDate>25/08/2019</CreatedDate>
        <ClosedDate>06/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39699</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add "Active file" analysis scope for background analysis in the IDE</Title>
    <Description>![BackgroundAnalysisScope](https://user-images.githubusercontent.com/10605811/68250914-ddc0e000-ffd6-11e9-99bf-9b92c50b2afb.png)

Replaces the existing "Full Solution Analysis" option, with a background analysis scope to allow users to control the analysis scope for all solution crawler based background analysis (except for Test explorer's unit testing incremental analyzer, which will always execute for full solution).

Fixes #38429. Active file scope minimizes all the background analysis to the active files, saving on CPU consumption from background analysis on remaining files in the solution.

I have also updated up the low virtual memory listener which detects low VM and used to turn off just the full solution analysis to now set the background analysis scope to "Active file" for the current session.

TODOs:
1. ~~Add unit tests and integration tests for new analysis scope~~
2. ~~Update DesignerAttributeIncrementalAnalyzer to work at single file level for active file analysis.~~</Description>
    <CreatedDate>05/11/2019</CreatedDate>
    <ClosedDate>20/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39699</PullRequestID>
        <IssueID>38429</IssueID>
        <Title>provide a power save mode</Title>
        <Description>we have been adding more and more features to IDE. it is long-tail features so it always helps some portion of our users. but there is also another portion of users who don't care that features or want to reduce noise or reduce system resource consumed from those features that they don't use much.

these people have been asking a way to disable those features altogether. and let those features only run when it is explicitly asked.

basically no solution crawler running, no background compilation running and etc. 

it requires design meeting, but similar to power save mode other IDE team provides for exactly same reason.</Description>
        <CreatedDate>30/08/2019</CreatedDate>
        <ClosedDate>20/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Developer Community</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39697</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>An input requires analysis using a different slot when suppressed</Title>
    <Description>Fixes #38586</Description>
    <CreatedDate>05/11/2019</CreatedDate>
    <ClosedDate>16/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39697</PullRequestID>
        <IssueID>38586</IssueID>
        <Title>'warning CS8655: The switch expression does not handle some null inputs' on suppressed nulls</Title>
        <Description>**Version Used**: master 

**Steps to Reproduce**:

``

**Expected Behavior**: no warnings in M2

**Actual Behavior**: compiler warns about unhandled null in M2
</Description>
        <CreatedDate>09/09/2019</CreatedDate>
        <ClosedDate>16/12/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39695</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>When converting to LINQ calls, omit .Select(x =&gt; x) when possible.</Title>
    <Description>Fixes #31784

In cases where converting to LINQ calls would leave no LINQ calls at all,
we leave the .Select(x =&gt; x) in case the user is trying to do some different
operation.</Description>
    <CreatedDate>05/11/2019</CreatedDate>
    <ClosedDate>07/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39695</PullRequestID>
        <IssueID>31784</IssueID>
        <Title>Convert to LINQ (call form) generates extra .Select() overhead</Title>
        <Description>**Version Used**: VS 2019 Preview 1

Related to #31780. An example of this in action:
![image](https://user-images.githubusercontent.com/454813/49978116-ffc0f800-ff16-11e8-935e-21542ab1b8c0.png)

**Steps to Reproduce**:
``</Description>
        <CreatedDate>14/12/2018</CreatedDate>
        <ClosedDate>07/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39672</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Tolerate empty assembly names</Title>
    <Description>Fixes #39647

/cc @jaredpar</Description>
    <CreatedDate>04/11/2019</CreatedDate>
    <ClosedDate>06/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39672</PullRequestID>
        <IssueID>39647</IssueID>
        <Title>Make AssemblyIdentity tolerate empty string names</Title>
        <Description>See https://github.com/dotnet/roslyn/blob/fab7134296816fc80019c60b0f5bef7400cf23ea/src/Compilers/Core/Portable/MetadataReference/AssemblyIdentity.DisplayName.cs#L727
</Description>
        <CreatedDate>01/11/2019</CreatedDate>
        <ClosedDate>16/01/2020</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39667</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Fix crash where we are not always finding text snapshots</Title>
    <Description>Backport of #39607 to Preview 3.</Description>
    <CreatedDate>04/11/2019</CreatedDate>
    <ClosedDate>04/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39667</PullRequestID>
        <IssueID>39607</IssueID>
        <Title>Fix crash where we are not always finding text snapshots</Title>
        <Description>Given this is not a reliable crash, my guess is the problem is we are sometimes processing an older Solution snapshot. Asking a specific SourceText for the specific ITextSnapshot it came from could fail
if that snapshot had been GC'ed, whereas going to the container first and asking for the buffer directly should be more reliable. Either way we now also handle the null case.

Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1010045</Description>
        <CreatedDate>31/10/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39660</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>siegfriedpammer</FixedByID>
    <Title>Upgrade ICSharpCode.Decompiler to 5.0.2.5153</Title>
    <Description>For more information about the changes in this release,
see https://github.com/icsharpcode/ILSpy/releases/tag/v5.0.

Fixes #37184</Description>
    <CreatedDate>03/11/2019</CreatedDate>
    <ClosedDate>06/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39660</PullRequestID>
        <IssueID>37184</IssueID>
        <Title>Navigate to decompiled source doesn't handle nullable attributes</Title>
        <Description>We'll need to update to a newer ILSpy library.</Description>
        <CreatedDate>12/07/2019</CreatedDate>
        <ClosedDate>06/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39655</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>CyrusNajmabadi</FixedByID>
    <Title>Simplify how we compute and store the location we use to persist the sqlite storage cache.</Title>
    <Description>Fixes https://github.com/dotnet/roslyn/issues/39653
Fixes https://github.com/dotnet/roslyn/issues/23060

This change removed a lot of complexity we currently have in VS around determining and maintaining the folder where we keep the sqlite cache.  It does this by no longer using the .vs folder (which has additional downsides for the user) and instead storing the db under `%localappdata%/Roslyn` in a unique folder determined for the current solution/workspace-kind pair.

This has several benefits:
1. there is a lot less code to maintain.
2. the existing code is complex and buggy.  For example, it has caused #39653 where we don't actually properly persist data in OOP in mainline scenarios.
3. the existing code places a lock on hte user directory, making external FS operations (like `git clean`) not possible.
</Description>
    <CreatedDate>02/11/2019</CreatedDate>
    <ClosedDate>26/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39655</PullRequestID>
        <IssueID>39653</IssueID>
        <Title>Persistence service no longer seems to work in OOP.</Title>
        <Description>While debugging through https://github.com/dotnet/roslyn/issues/39364 i discovered something very bad.

Specifically, in OOP we don't get persistence working *at all* in some cases.  This is because operations like AddImport end up calling over to OOP which end updoing the search on a "RemoteTemporaryWorkspace".  I have no idea what thi workspace is, but it's *not* the actual RemoteWorkspace that OOP persistence was written to use.

This specifically breaks because we are unable to get a Storage instance back from teh storage service due to the final line here:

``

But we never defined this for the 'remote temporary workspace'.

Several things i don't understand at all here:

1. what is a "remote temporary workspace"?
2. why are we using it for some calls (like the call 'add import' makes to search the external index)?
3. what is even the right fix here? 

Basically, the entire scenario is broken making is so that that in OOP we have to compute the indices for at least some operations for the entire solutoin.  this likely leads to additional slowness and excess costs on startup for people trying to do normal operations that use OOP.</Description>
        <CreatedDate>02/11/2019</CreatedDate>
        <ClosedDate>26/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Concept-OOP</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39644</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Follow-up on adding NullableAnnotation/WithNullableAnnotation APIs to ITypeSymbol.</Title>
    <Description>Related to #39641.
Related to #39643.</Description>
    <CreatedDate>01/11/2019</CreatedDate>
    <ClosedDate>04/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39644</PullRequestID>
        <IssueID>39641</IssueID>
        <Title>Microsoft.CodeAnalysis.CSharp.UnitTests.Editing.AddImportsTests.TestSafeWithMatchingSimpleNameInAllLocations started failing after ITypeSymbol.NullableAnnotation API was added.</Title>
        <Description>`` API was added in https://github.com/dotnet/roslyn/pull/39498 and TestSafeWithMatchingSimpleNameInAllLocations unit-test started failing in that PR. Presumably due to the fact that presence of NullableAnnotation affects the way symbols are matched by involved components.

Per request in https://github.com/dotnet/roslyn/pull/39498#discussion_r340840007, the base-line for the test is restored to the original state and the test is disabled.</Description>
        <CreatedDate>01/11/2019</CreatedDate>
        <ClosedDate>21/01/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39644</PullRequestID>
        <IssueID>39643</IssueID>
        <Title>Microsoft.CodeAnalysis.Shared.Utilities.SymbolEquivalenceComparer should be modified to properly deal with differences caused by nullability</Title>
        <Description>`` API was added in https://github.com/dotnet/roslyn/pull/39498 and some unit-test started failing in that PR due to the fact that SymbolEquivalenceComparer stopped treating some symbols equivalent when the only difference comes from NullableAnnotation.
A temporary workaround was added to AreEquivalent method to get tests passing, it is not guaranteed to handle all different situations that can arise in the real world. A more robust long term solution should be implemented instead.</Description>
        <CreatedDate>01/11/2019</CreatedDate>
        <ClosedDate>29/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39639</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Revert "Run integration tests with .NET Core SDK shipped with VS"</Title>
    <Description>Reverts dotnet/roslyn#39587

These changes did not help the integration test situation.</Description>
    <CreatedDate>01/11/2019</CreatedDate>
    <ClosedDate>04/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39639</PullRequestID>
        <IssueID>39587</IssueID>
        <Title>Run integration tests with .NET Core SDK shipped with VS</Title>
        <Description>Integration tests were being run with the dotnet SDK from the build environment. This broke when VS updated to creating new .NET Core projects against a TFM not supported by the version of the SDK we were building against.

This change allows the .NET Core SDK that shipped with VS to be found when running integration tests. Which is likely the desired behavior.

Fixes #39588</Description>
        <CreatedDate>30/10/2019</CreatedDate>
        <ClosedDate>31/10/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>PR For Personal Review Only</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39636</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix stack overflow in inheritdoc evaluation</Title>
    <Description>Fixes #39158</Description>
    <CreatedDate>01/11/2019</CreatedDate>
    <ClosedDate>12/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39636</PullRequestID>
        <IssueID>39158</IssueID>
        <Title>Using cref to itself inside inheritdoc crashes VS</Title>
        <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/761030/using-cref-to-itself-inside-inheritdoc-crashes-vs.html)._

---
This is a new issue as inheritdoc is just being added in 16.4.0 preview 1. This problem therefor only happens in 16.4.0 preview 1 (or later?). 

With the new feature, we can use /// &amp;lt;inheritdoc/&amp;gt; to define the same xml comments from the inheritted class on members that are inherited. /// &amp;lt;inheritdoc/&amp;gt; works fine, but /// &amp;lt;inheritdoc cref=&amp;quot;MyProperty&amp;quot; /&amp;gt; crashes Visual Studio to desktop ('CTD') upon hovering the mouse over MyProperty. 

To recreate:

1. Create a new .NET Core Console App.
2. Create a new interface: IMyClass with a member (can be property, method, ...) MyMember and add a summary to it with ///.
3. Create a new class: MyClass that implements IMyClass (add &amp;quot;: IMyClass&amp;quot;).
4. Implement the member MyMember. 
5. Add /// &amp;lt;inheritdoc /&amp;gt; above MyMember. So far so good.
6. Change &amp;lt;inheritdoc /&amp;gt; to &amp;lt;inheritdoc cref=&amp;quot;MyMember&amp;quot;/&amp;gt; and move your mouse over MyMember. VS will crash before it can show the tooltip.

---
### Original Comments

#### Visual Studio Feedback System on 10/6/2019, 09:24 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/8/2019, 01:54 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
        <CreatedDate>09/10/2019</CreatedDate>
        <ClosedDate>12/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39634</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Fix crash where we are not always finding text snapshots</Title>
    <Description>This is just a direct-to-master-vs-deps version of #39607.

Given this is not a reliable crash, my guess is the problem is we are sometimes processing an older Solution snapshot. Asking a specific SourceText for the specific ITextSnapshot it came from could fail
if that snapshot had been GC'ed, whereas going to the container first and asking for the buffer directly should be more reliable. Either way we now also handle the null case.

Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1010045</Description>
    <CreatedDate>01/11/2019</CreatedDate>
    <ClosedDate>01/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39634</PullRequestID>
        <IssueID>39607</IssueID>
        <Title>Fix crash where we are not always finding text snapshots</Title>
        <Description>Given this is not a reliable crash, my guess is the problem is we are sometimes processing an older Solution snapshot. Asking a specific SourceText for the specific ITextSnapshot it came from could fail
if that snapshot had been GC'ed, whereas going to the container first and asking for the buffer directly should be more reliable. Either way we now also handle the null case.

Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1010045</Description>
        <CreatedDate>31/10/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39629</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>YairHalberstadt</FixedByID>
    <Title>Add CrefSignaturePart to SyntaxFacts.IsInTypeOnlyContext</Title>
    <Description>Fixes #39592</Description>
    <CreatedDate>01/11/2019</CreatedDate>
    <ClosedDate>09/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39629</PullRequestID>
        <IssueID>39592</IssueID>
        <Title>Incorrect Overrides completion in VB</Title>
        <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.5.0 Preview 1.0 [29427.7.master]

**Steps to Reproduce**:

1. Add the following API to Compilation class in  src\Compilers\Core\Portable\Compilation\Compilation.cs

``</Description>
        <CreatedDate>30/10/2019</CreatedDate>
        <ClosedDate>09/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39609</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Fix compiler crash in scripting.</Title>
    <Description>ON HOLD pending https://github.com/dotnet/roslyn/pull/39584
Fixes #39548
</Description>
    <CreatedDate>31/10/2019</CreatedDate>
    <ClosedDate>04/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39609</PullRequestID>
        <IssueID>39548</IssueID>
        <Title>C# pattern match crashes VS 2019</Title>
        <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784408/c-pattern-match-crashes-vs-2019.html)._

---
In VS 2019 16.3.5, or 16.4P2, open C# interactive and type the following:
``
Press enter after `;`
Expected the second expression to evaluate to `true`,
but instead right after typing the last `)` VS hangs then restarts.

---
### Original Comments

#### Visual Studio Feedback System on 10/20/2019, 11:01 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/21/2019, 10:11 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Visual Studio Feedback System on 10/21/2019, 10:23 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Robert Larkins on 10/27/2019, 11:04 PM: 

&lt;p&gt;I was able to replicate this on 16.3.6.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
        <CreatedDate>28/10/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>Interactive-ScriptingLogic</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39596</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Hook up "Run Code Analysis" commands in Visual Studio to execute Rosl…</Title>
    <Description>…yn analyzers.

Closes #38051: Users can now use this command to force complete all the analyzers on a project/solution (includes NuGet based + VSIX based analyzers, including IDE code style analyzers).

Complements #39544: Users can now potentially disable continuous analyzer execution  during live analysis and instead execute them on demand with these commands.

Few things to note:
1. This change hooks up new "Run Code Analysis on ProjectName" menu commands for CPS based managed projects. These commands are already hooked up for csproj based legacy projects in StanCore, but that should eventually go away.
2. ~~This change only hooks up these new commands for top level Build and Analyze menus. Adding these to "Analyzer and Code Cleanup" context menus for project/solution in solution explorer is much trickier as the command groups are defined in StanCore. I will do so in a separate PR.~~ Implemented with https://github.com/dotnet/roslyn/pull/39596/commits/38e4eda41251b043d5a92d696506de38243db315
3. This change also exposes a "RunAnalyzers" API for StanCore, so we can trigger analyzer execution when user executes run code analysis on solution/csproj based project. There is a VS side [PR](https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/211392) that will consume this functionality to make the experience uniform across all "Run Code Analysis" commands.</Description>
    <CreatedDate>30/10/2019</CreatedDate>
    <ClosedDate>01/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39596</PullRequestID>
        <IssueID>38051</IssueID>
        <Title>provide a way for users to run vsix analyzers on build</Title>
        <Description>some users want to run analyzers and see all issues before invoking fix all for the issues to understand/predict impacts before running fix all.

nuget analyzers work great for this scenario. since you can build to force run them. problem is vsix analyzers including built-in IDE analyzers. since the only way for users to see all issues is turning on full solution analysis and wait for them to run full-analysis.

the catch is our full solution analysis is not built for throughput but as low priority background work. what I mean by that is to reduce the impact on GC and VS UX, it runs on a  lower priority process with plenty of yield to VS to never interfere with VS operations. 

to mitigate this, users can explicitly build to force run analyzers for throughput. VBCSCompiler will run these analyzers for throughput. you can see that VBCSCompiler basically overtake all resources on the machine (100% CPU and IO) since it puts the priority on throughput than VS responsiveness.

but unfortunately, vsix analyzers won't participate in VBCSCompiler. leaving no choice for users to force run those.

we should provide a way to do so. it doesn't need to be VBCSCompiler but a way to force run those for throughput like how we do that for fix all. but to show issues to users.</Description>
        <CreatedDate>16/08/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>IDE-CodeStyle</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39596</PullRequestID>
        <IssueID>39544</IssueID>
        <Title>Respect RunAnalyzers and RunCodeAnalysisDuringLiveAnalysis project pr…</Title>
        <Description>…operties for VSIX analyzer execution

We recently added project properties for configuring analyzer execution during build and live analysis, see documentation [here](https://docs.microsoft.com/visualstudio/code-quality/disable-code-analysis). Currently, these properties are only respected for NuGet based analyzers. This PR adds support to respect these properties even for VSIX based analyzers, including the built-in IDE code style analyzers. https://github.com/dotnet/project-system/pull/5598 passes the required properties down to the Roslyn langauge service, and this PR consumes these properties and adds this support.

PS: @ryzngard I have shamelessly copied quite a bit of your implementation for `MaxSupportedLangVersion` support</Description>
        <CreatedDate>27/10/2019</CreatedDate>
        <ClosedDate>06/11/2019</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39595</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Evaluate tuple elements in a switch control expression in the order written</Title>
    <Description>Fixes #39564</Description>
    <CreatedDate>30/10/2019</CreatedDate>
    <ClosedDate>05/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39595</PullRequestID>
        <IssueID>39564</IssueID>
        <Title>Incorrect order of evaluation for tuple element expressions when the tuple is the operand of a switch expression</Title>
        <Description>@atifaziz commented on [Tue Oct 29 2019](https://github.com/dotnet/docs/issues/15496)

I believe this belongs in the [**Switch expressions**](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#switch-expressions) section, but also in [the tutorial](https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/pattern-matching).

There seems to be a subtle and historical change in how C# respects, or actually _no longer respects_, the _evaluation order_ when using pattern-matching in a switch-expression. This can bite people (as it bit me when refactoring code) in subtle ways if not documented and called out with a warning. At first I thought it was a bug, but then I think this subtle change is intended if I am reading the following [section](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/atterns#order-of-evaluation-in-pattern-matching) of the [C# 8 specification proposal on recursive pattern matching](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/patterns) right:

&gt; ### Order of evaluation in pattern-matching
&gt;
&gt; Giving the compiler flexibility in reordering the operations executed during pattern-matching can permit flexibility that can be used to improve the efficiency of pattern-matching. The (unenforced) requirement would be that properties accessed in a pattern, and the Deconstruct methods, are required to be "pure" (side-effect free, idempotent, etc). That doesn't mean that we would add purity as a language concept, only that we would allow the compiler flexibility in reordering operations.
&gt;
&gt; **Resolution 2018-04-04 LDM**: confirmed: the compiler is permitted to reorder calls to `Deconstruct`, property accesses, and invocations of methods in `ITuple`, and may assume that returned values are the same from multiple calls. The compiler should not invoke functions that cannot affect the result, and we will be very careful before making any changes to the compiler-generated order of evaluation in the future.

To demonstrate the problem in action, suppose the following code:

``


---

@BillWagner commented on [Tue Oct 29 2019](https://github.com/dotnet/docs/issues/15496#issuecomment-547436682)

Thanks for bringing this to our attention @atifaziz 

I'm adding a couple folks on the C# LDM to discuss how we should explain this behavior.

/cc @gafter @MadsTorgersen 

---

@gafter commented on [Tue Oct 29 2019](https://github.com/dotnet/docs/issues/15496#issuecomment-547459405)

This is a bug.  The tuple expression is required to evaluate its operands in order, and in this case the compiler does not do so.

</Description>
        <CreatedDate>29/10/2019</CreatedDate>
        <ClosedDate>05/11/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39584</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>YairHalberstadt</FixedByID>
    <Title>Fix Host Object Access in Interactive</Title>
    <Description>Fixes #39565
Fixes #39581
Fixes #39548

Note that instead of reporting `error CS8422: A static local function cannot contain a reference to 'this' or 'base'.` we instead report `error CS0120: An object reference is required for the non-static field, method, or property`

Given that this is an extremely edge scenario in scripting I think that's not too much of an issue?

Also fixing #39581 is a breaking change. I highly doubt it's one anyone's hit, but insofar as that's true, maybe there's no point fixing it?</Description>
    <CreatedDate>30/10/2019</CreatedDate>
    <ClosedDate>01/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39584</PullRequestID>
        <IssueID>39565</IssueID>
        <Title>CreateDelegate throws exception on calling function with "out var x" (Regression in Microsoft.CodeAnalysis.CSharp.Scripting 3.3.1))</Title>
        <Description>**Version Used**: 
Issue can be reproduced with .net Core 2.2 or .net Core 3.0 (Not tested on older .net Core versions)
with Microsoft.CodeAnalysis.CSharp.Scripting 3.3.1 (Older versions of this package do work correctly)

**Steps to Reproduce**:
Run the following program:

``


**Expected Behavior**:
Runs without errors.

**Actual Behavior**:
Throws exception on line `var d = script.CreateDelegate()` with message: **only methods, properties, fields and events can take a receiver (Parameter 'symbol')**

This code works fine with versions of Microsoft.CodeAnalysis.CSharp.Scripting **prior** to 3.3.1
This has been reproduced with .net Core 2.2 and .net Core 3.0

For version 3.3.1 one can explicitly mention the type as a workaround and no exception will be thrown: replace `TryGetFastHelp(out var result)` with `TryGetFastHelp(out HelpResult result)` 




</Description>
        <CreatedDate>29/10/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39584</PullRequestID>
        <IssueID>39581</IssueID>
        <Title>C# Interactive static local can invoke instance method on global</Title>
        <Description>**Version Used**: VS 16.4 preview 2, Microsoft.CodeAnalysis.Scripting.CSharp v 3.3.1

**Steps to Reproduce**:

Run the following:
``

**Actual Behavior**:

No error</Description>
        <Code>```csharp
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;

public class ExecutionContext
{
	public bool TryGetValue(out object obj)
	{
		obj = new object();
		return true;
	}
}

class Program
{
	static async System.Threading.Tasks.Task Main(string[] args)
	{
		var options = ScriptOptions.Default
			.AddReferences(typeof(ExecutionContext).Assembly);

		var code = @"
			bool M()
			{
				return Inner();
				static bool Inner()
				{
					if(TryGetValue(out var result)){
					    _ = result;
					}
					return true;
				}
			}
			return M();
            ";

		await CSharpScript.RunAsync&lt;bool&gt;(code, globalsType: typeof(ExecutionContext), options: options, globals: new ExecutionContext());
	}
}
```

**Expected Behavior**:

error CS8422: A static local function cannot contain a reference to 'this' or 'base'.

Note that you do get `error CS0120: An object reference is required for the non-static field, method, or property 'ExecutionContext.TryGetValue(out object)'` when you run the following:

```csharp
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;

public class ExecutionContext
{
	public bool TryGetValue(out object obj)
	{
		obj = new object();
		return true;
	}
}

class Program
{
	static async System.Threading.Tasks.Task Main(string[] args)
	{
		var options = ScriptOptions.Default
			.AddReferences(typeof(ExecutionContext).Assembly);

		var code = @"
			static bool M()
			{
				if(TryGetValue(out var result)){
				    _ = result;
				}
				return true;
			}
			return M();
            ";

		await CSharpScript.RunAsync&lt;bool&gt;(code, globalsType: typeof(ExecutionContext), options: options, globals: new ExecutionContext());
	}
}
`</Code>
        <CreatedDate>30/10/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>Interactive-ScriptingLogic</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39584</PullRequestID>
        <IssueID>39548</IssueID>
        <Title>C# pattern match crashes VS 2019</Title>
        <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/784408/c-pattern-match-crashes-vs-2019.html)._

---
In VS 2019 16.3.5, or 16.4P2, open C# interactive and type the following:
``
Press enter after `;`
Expected the second expression to evaluate to `true`,
but instead right after typing the last `)` VS hangs then restarts.

---
### Original Comments

#### Visual Studio Feedback System on 10/20/2019, 11:01 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/21/2019, 10:11 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Visual Studio Feedback System on 10/21/2019, 10:23 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Robert Larkins on 10/27/2019, 11:04 PM: 

&lt;p&gt;I was able to replicate this on 16.3.6.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
        <CreatedDate>28/10/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>Interactive-ScriptingLogic</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39584</PullRequestID>
        <IssueID>39581</IssueID>
        <Title>C# Interactive static local can invoke instance method on global</Title>
        <Description>**Version Used**: VS 16.4 preview 2, Microsoft.CodeAnalysis.Scripting.CSharp v 3.3.1

**Steps to Reproduce**:

Run the following:
``

**Actual Behavior**:

No error</Description>
        <Code>```csharp
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;

public class ExecutionContext
{
	public bool TryGetValue(out object obj)
	{
		obj = new object();
		return true;
	}
}

class Program
{
	static async System.Threading.Tasks.Task Main(string[] args)
	{
		var options = ScriptOptions.Default
			.AddReferences(typeof(ExecutionContext).Assembly);

		var code = @"
			bool M()
			{
				return Inner();
				static bool Inner()
				{
					if(TryGetValue(out var result)){
					    _ = result;
					}
					return true;
				}
			}
			return M();
            ";

		await CSharpScript.RunAsync&lt;bool&gt;(code, globalsType: typeof(ExecutionContext), options: options, globals: new ExecutionContext());
	}
}
```

**Expected Behavior**:

error CS8422: A static local function cannot contain a reference to 'this' or 'base'.

Note that you do get `error CS0120: An object reference is required for the non-static field, method, or property 'ExecutionContext.TryGetValue(out object)'` when you run the following:

```csharp
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;

public class ExecutionContext
{
	public bool TryGetValue(out object obj)
	{
		obj = new object();
		return true;
	}
}

class Program
{
	static async System.Threading.Tasks.Task Main(string[] args)
	{
		var options = ScriptOptions.Default
			.AddReferences(typeof(ExecutionContext).Assembly);

		var code = @"
			static bool M()
			{
				if(TryGetValue(out var result)){
				    _ = result;
				}
				return true;
			}
			return M();
            ";

		await CSharpScript.RunAsync&lt;bool&gt;(code, globalsType: typeof(ExecutionContext), options: options, globals: new ExecutionContext());
	}
}
`</Code>
        <CreatedDate>30/10/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>Interactive-ScriptingLogic</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39570</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Support non-monotonic transfer for local functions</Title>
    <Description>Local function flow analysis has always been special-cased for definite
assignment, and specifically for definite assignment with monotonic
assignment. This change implements the same non-monotonic tracking that
we use for try-finally for local functions. This is a conservative
analysis, meaning that certain rare cases may not transfer as much
information as possible. It's currently assumed that these cases are
rare enough to not be frustrating. No safety problems should be present
in the conservative analysis.

Fixes #14400
Fixes #14214</Description>
    <CreatedDate>29/10/2019</CreatedDate>
    <ClosedDate>01/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39570</PullRequestID>
        <IssueID>14400</IssueID>
        <Title>DataFlowsOut vs local functions</Title>
        <Description>The region analysis API `DataFlowsOut` is not computed correctly when the region is inside a local function. Below is a test case suitable for addition to `RegionAnalysisTests.cs`. The line testing `DataFlowsOut` fails (it returns an empty set rather than the correct result, `"x"`).

``
</Description>
        <CreatedDate>09/10/2016</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39570</PullRequestID>
        <IssueID>14214</IssueID>
        <Title>Flow analysis APIs do not work with local functions</Title>
        <Description>Due to the recent changes to data flow analysis with local functions, the flow analysis APIs now sometimes return an incorrect result or crash. Here are tests:

``
</Description>
        <CreatedDate>30/09/2016</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39556</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>KristianJakubik</FixedByID>
    <Title>Support nullability codefix for default, ternary, conditional expressions</Title>
    <Description>Fixes: #39422
Fixes: #39420
Fixes: #39423</Description>
    <CreatedDate>28/10/2019</CreatedDate>
    <ClosedDate>17/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39556</PullRequestID>
        <IssueID>39422</IssueID>
        <Title>CS8603 code fix should support conditional access operator</Title>
        <Description>**Version Used**: 16.4 Preview 2

**Steps to Reproduce**:

``

**Actual Behavior**:

No code fix is provided.

📝 The code fix should use a unique Equivalence Key for this situation.</Description>
        <CreatedDate>21/10/2019</CreatedDate>
        <ClosedDate>17/12/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>IDE-CodeStyle</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39556</PullRequestID>
        <IssueID>39420</IssueID>
        <Title>CS8603 code fix should support ternary expressions with explicit null</Title>
        <Description>**Version Used**: 16.4 Preview 2

**Steps to Reproduce**:

``

**Actual Behavior**:

No code fix is provided.</Description>
        <CreatedDate>21/10/2019</CreatedDate>
        <ClosedDate>17/12/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>IDE-CodeStyle</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39556</PullRequestID>
        <IssueID>39423</IssueID>
        <Title>CS8603 code fix should support default expressions and literals</Title>
        <Description>**Version Used**: 16.4 Preview 2

**Steps to Reproduce**:

``

**Actual Behavior**:

No code fix is provided.
</Description>
        <CreatedDate>21/10/2019</CreatedDate>
        <ClosedDate>17/12/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>IDE-CodeStyle</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39543</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>christophertrml</FixedByID>
    <Title>Implicit numeric casts shouldn't be recommended to be removed if doing so loses precision</Title>
    <Description>Fixes #39042 . This check already existed in other code paths, but wasn't in this short circuit path.

Verified manually and all tests pass locally.</Description>
    <CreatedDate>27/10/2019</CreatedDate>
    <ClosedDate>03/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39543</PullRequestID>
        <IssueID>39042</IssueID>
        <Title>Visual Studio says that cast to double is redundant when it is not (C#)</Title>
        <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/750100/visual-studio-says-that-cast-to-double-is-redundan.html)._

---
&lt;p&gt;Visual Studio says “Cast is redundant” here:&lt;/p&gt;
&lt;pre&gt;            long x = 121645100408832000;
            return ((long)(double)x == x) &amp;amp;&amp;amp; ((long)(double)(x + 1) == x + 1);
&lt;/pre&gt;&lt;p&gt;If I “Remove Unnecessary Cast” as Visual Studio suggests, then the return value changes from false to true.&lt;/p&gt;

---
### Original Comments

#### Visual Studio Feedback System on 9/27/2019, 00:00 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
        <CreatedDate>03/10/2019</CreatedDate>
        <ClosedDate>03/12/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>IDE-CodeStyle</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39249</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jnm2</FixedByID>
    <Title>Generate proper nullability annotation for IEquatable.Equals</Title>
    <Description>Fixes #39243, fixes #38069

If you take the first commit (adding tests) without the second commit (implementation change), you will actually get a debug assertion failure when the name simplifier tries to simplify the generated `[AllowNull]` name:

https://github.com/dotnet/roslyn/blob/97b75fcb5807881b0e768357b82c1a3476a3ec2c/src/Compilers/CSharp/Portable/Compilation/MemberSemanticModel.cs#L157-L162

I don't know how important this is.

Since `[AllowNull]` is no longer generated when generating the Equals method, it isn't interfering with this PR.

Stack trace:

&lt;details&gt;

```
   at System.Diagnostics.Debug.Assert(Boolean condition)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetRemappedSymbols() in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Compilation\MemberSemanticModel.cs:line 160
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.CreateSpeculativeAttributeSemanticModel(Int32 position, AttributeSyntax attribute, Binder binder, AliasSymbol aliasOpt, NamedTypeSymbol attributeType) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Compilation\SyntaxTreeSemanticModel.cs:line 746
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.TryGetSpeculativeSemanticModel(Int32 position, AttributeSyntax attribute, SemanticModel&amp; speculativeModel) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Compilation\CSharpSemanticModel.cs:line 2554
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.TryGetSpeculativeSemanticModel(SemanticModel semanticModel, Int32 position, AttributeSyntax attribute, SemanticModel&amp; speculativeModel) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\CSharpExtensions.cs:line 1136
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.CreateSpeculativeSemanticModelForNode(SyntaxNode nodeToSpeculate, SemanticModel semanticModel, Int32 position, Boolean isInNamespaceOrTypeContext) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Utilities\SpeculationAnalyzer.cs:line 142
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.CreateSpeculativeSemanticModelForNode(SyntaxNode originalNode, SyntaxNode nodeToSpeculate, SemanticModel semanticModel) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Utilities\SpeculationAnalyzer.cs:line 103
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.CreateSpeculativeSemanticModel(SyntaxNode originalNode, SyntaxNode nodeToSpeculate, SemanticModel semanticModel) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Utilities\SpeculationAnalyzer.cs:line 96
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.EnsureSpeculativeSemanticModel() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Utilities\AbstractSpeculationAnalyzer.cs:line 185
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.get_SpeculativeSemanticModel() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Utilities\AbstractSpeculationAnalyzer.cs:line 149
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode originalRoot, Boolean skipVerificationForCurrentNode) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Utilities\AbstractSpeculationAnalyzer.cs:line 419
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Utilities\AbstractSpeculationAnalyzer.cs:line 408
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(NameSyntax name, TypeSyntax reducedName, SemanticModel semanticModel, CancellationToken cancellationToken) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Extensions\ExpressionSyntaxExtensions.cs:line 2218
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Extensions\ExpressionSyntaxExtensions.cs:line 1774
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Extensions\ExpressionSyntaxExtensions.cs:line 809
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression, SemanticModel semanticModel, ExpressionSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Extensions\ExpressionSyntaxExtensions.cs:line 767
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node, SemanticModel semanticModel, OptionSet optionSet, CancellationToken cancellationToken) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\CSharpNameReducer.cs:line 48
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyNode[TNode](TNode node, SyntaxNode newNode, SyntaxNode parentNode, Func`5 simplifier) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\AbstractCSharpReducer.AbstractReductionRewriter.cs:line 125
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyExpression[TExpression](TExpression expression, SyntaxNode newNode, Func`5 simplifier) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\AbstractCSharpReducer.AbstractReductionRewriter.cs:line 149
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\CSharpNameReducer.Rewriter.cs:line 47
   at Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Syntax.Generated.cs:line 429
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Syntax\CSharpSyntaxRewriter.cs:line 39
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Main.Generated.cs:line 2615
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\CSharpNameReducer.Rewriter.cs:line 65
   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Syntax.Generated.cs:line 155
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Syntax\CSharpSyntaxRewriter.cs:line 39
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Main.Generated.cs:line 2615
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\CSharpNameReducer.Rewriter.cs:line 65
   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Syntax.Generated.cs:line 155
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Syntax\CSharpSyntaxRewriter.cs:line 39
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Main.Generated.cs:line 2615
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\CSharpNameReducer.Rewriter.cs:line 65
   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Syntax.Generated.cs:line 155
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Syntax\CSharpSyntaxRewriter.cs:line 39
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAttribute(AttributeSyntax node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Main.Generated.cs:line 3734
   at Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Generated\Syntax.xml.Syntax.Generated.cs:line 13507
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) in C:\Users\Joseph\Source\Repos\roslyn\src\Compilers\CSharp\Portable\Syntax\CSharpSyntaxRewriter.cs:line 39
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken, SemanticModel semanticModel, Boolean simplifyAllDescendants) in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\CSharp\Portable\Simplification\Reducers\AbstractCSharpReducer.AbstractReductionRewriter.cs:line 188
   at Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;&gt;c__DisplayClass10_1.&lt;&lt;ReduceAsync&gt;b__0&gt;d.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Simplification\AbstractSimplificationService.cs:line 248
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;ReduceAsyncInternal&gt;d__9.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Simplification\AbstractSimplificationService.cs:line 137
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;ReduceAsync&gt;d__8.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Simplification\AbstractSimplificationService.cs:line 76
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Simplification.Simplifier.&lt;ReduceAsync&gt;d__14.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\Simplification\Simplifier.cs:line 165
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;CleanupDocumentAsync&gt;d__29.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeAction.cs:line 274
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;PostProcessChangesAsync&gt;d__27.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeAction.cs:line 234
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;PostProcessAsync&gt;d__26.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeAction.cs:line 203
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;GetOperationsCoreAsync&gt;d__16.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeAction.cs:line 89
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.GenerateEqualsAndGetHashCodeFromMembers.GenerateEqualsAndGetHashCodeFromMembersCodeRefactoringProvider.GenerateEqualsAndGetHashCodeWithDialogCodeAction.&lt;ComputeOperationsAsync&gt;d__10.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Features\Core\Portable\GenerateEqualsAndGetHashCodeFromMembers\GenerateEqualsAndHashWithDialogCodeAction.cs:line 90
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.&lt;GetOperationsAsync&gt;d__1.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeActionWithOptions.cs:line 37
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.&lt;GetOperationsCoreAsync&gt;d__2.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\Workspaces\Core\Portable\CodeActions\CodeActionWithOptions.cs:line 51
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;VerifyActionAndGetOperationsAsync&gt;d__31.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\EditorFeatures\TestUtilities\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 565
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestActionAsync&gt;d__27.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\EditorFeatures\TestUtilities\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 404
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestAsync&gt;d__26.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\EditorFeatures\TestUtilities\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 388
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestInRegularAndScript1Async&gt;d__24.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\EditorFeatures\TestUtilities\CodeActions\AbstractCodeActionOrUserDiagnosticTest.cs:line 351
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.GenerateEqualsAndGetHashCodeFromMembers.GenerateEqualsAndGetHashCodeFromMembersTests.&lt;TestImplementIEquatableOnClassInNullableContextWithAnnotatedMetadata&gt;d__53.MoveNext() in C:\Users\Joseph\Source\Repos\roslyn\src\EditorFeatures\CSharpTest\GenerateFromMembers\GenerateEqualsAndGetHashCodeFromMembers\GenerateEqualsAndGetHashCodeFromMembersTests.cs:line 1762
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
```

&lt;/details&gt;</Description>
    <CreatedDate>12/10/2019</CreatedDate>
    <ClosedDate>08/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39249</PullRequestID>
        <IssueID>39243</IssueID>
        <Title>'Generate Equals' does not annotate Equals(T) to allow nulls and causes CS8604</Title>
        <Description>**Version Used**: 16.4p1

In .NET Core 3.0, `IEquatable.Equals` is annotated to accept a nullable parameter:

``</Description>
        <CreatedDate>11/10/2019</CreatedDate>
        <ClosedDate>08/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-CodeStyle</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39249</PullRequestID>
        <IssueID>38069</IssueID>
        <Title>Generated Equals(T) method has pointless [AllowNull] when T is a value type</Title>
        <Description>**Version Used**: Visual Studio 16.2.2

Generate equality members for:

``

Expected behavior: `[AllowNull]` should not be added for value types.
</Description>
        <CreatedDate>17/08/2019</CreatedDate>
        <ClosedDate>08/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39226</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Local function attributes emit</Title>
    <Description>Related to #38801

This PR includes emitting the attributes in metadata, but not compiler recognition of most well-known attributes for local functions in source.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>14/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39226</PullRequestID>
        <IssueID>38801</IssueID>
        <Title>Test plan for "local function attributes"</Title>
        <Description>Championed issue: dotnet/csharplang#1888

- [x] Specification checked in to `csharplang`.
- [x] attribute on declaration
- [x] attributes on declaration are emitted
- [x] attribute on return type
- [x] attributes on return type are emitted
- [x] attribute on type parameters
- [x] attributes on type parameters are emitted
- [x] attribute on parameters
- [x] attributes on parameters are emitted
- [x] Correctness of `AttributeUsage`
  - [x] On declaration and return](https://github.com/dotnet/roslyn/blob/features/local-function-attributes/src/Compilers/CSharp/Test/Semantic/Semantics/LocalFunctionTests.cs#L631)
  - [x] On parameters and type parameters
- [x] interaction with potentially ambiguous syntax?
- [ ] speculative semantic model #24135
- [x] semantic model on attribute arguments for method/return/param/type param attributes
- [x] ~~expected diagnostics when binding a local function statement in speculative semantic model~~
  - Speculative semantic models don't give diagnostics
- [x] Scrub references (skipped tests and such) referencing this issue
- [x] test `Obsolete` attribute (and related)
  - [x] Diagnostics about attributes occur in local function locations
- [x] test `Conditional` attribute
  - [x] test `Conditional` with bad target method (non-void returning)
- [x] test various nullability attributes
- [x] test `[EnumeratorCancellation]` attribute on parameter of async-iterator local function #40959
- [x] MethodImplAttribute
- [x] DllImportAttribute
- [x] `static extern` local functions
- [x] local functions with no body
- [x] ExcludeFromCodeCoverageAttribute #41129 
- [x] MarshalAsAttribute #41299
- [x] SkipLocalsInitAttribute #41183
- [x] test restricted attributes such as IsReadOnlyAttribute, IsUnmanaged, ExtensionAttribute, etc.
- [x] Caller...Attribute #41299
- [x] LanguageVersion (tests added in #38808)
  - [x] Including in parameters
- [x] Scoping inside full syntax (See LookupTests.cs)
  - [x] Scoping for attribute lists on incomplete statements https://github.com/dotnet/roslyn/pull/41379#issuecomment-585453870
- [x] Can't use locals inside attribute creation, e.g. calling other local functions, using captured variables
  - [x] Local constants should probably be valid
  - [x] Attribute argument with declaration pattern
  - [x] Attribute argument with call containing 'out var'
  - [x] Attribute constructor with `out` parameter (disallowed)
     - [x] Out to a local
     - [x] Out var
- [x] Referencing local function with ConditionalAttribute only in a "dead" condition `#if` should not produce unused warning
- [x] ConditionalAttribute should be disallowed on non-static local functions #41333

IDE:
- [x] Test interactive typing
- [x] Start with an attribute
- [x] Completion
- [x] Keyword recommendation (`extern`)

Before merge:

- [x] ConditionalAttribute disallowed on non-static local functions #41333
- [x] IDE interactive testing
- [x] [AttributeUsage](https://github.com/dotnet/roslyn/blob/features/local-function-attributes/src/Compilers/CSharp/Test/Semantic/Semantics/LocalFunctionTests.cs#L631)
- [x] Prevent regressing EndToEndTests
- [x] Draft spec checked into proposals, awaiting validation by Neal</Description>
        <CreatedDate>23/09/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Test</Label>
          <Label>Test-Gap</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39215</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>huoyaoyuan</FixedByID>
    <Title>Fix AddImports codefix on implicit extension methods</Title>
    <Description>See #39155. If that's by-design and cannot be changed any more, please close that issue.
Fixes #25861, but missing unit test.</Description>
    <CreatedDate>10/10/2019</CreatedDate>
    <ClosedDate>06/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39215</PullRequestID>
        <IssueID>39155</IssueID>
        <Title>Inconsist diagnostics on extension GetAwaiter</Title>
        <Description>After invesgating #25861, I've found that using `await` when missing `GetAwaiter()` *extension* method can results in 3 different error codes:
- **CS1061** No such instance or extension member
``
This makes code fix much easier to deal with it.
In all the three syntaxes, diagnostics span differs on existence of extension on other type.

Can we unify the error codes and diagnostics span for such scenarios? </Description>
        <Code>```csharp
    public class Foo
    {
        async void M(Foo foo)
        {
            await foo;
        }
    }
```
- **CS4036** Specialised  for WinRT async interfaces
```csharp
    public class Foo
    {
        async void M(Windows.Foundation.IAsyncAction ia)
        {
            await ia;
        }
    }
```
- **CS1929** Extension method overload resolution fail
```csharp
using System;
using System.Runtime.CompilerServices;

namespace A
{
    public class Foo
    {
        async void M(Foo foo)
        {
            await foo;
        }
    }

    public static class BarExtension
    {
        public static Extension.FooAwaiter GetAwaiter(this string s) =&gt; default;
    }
}

namespace A.Extension
{
    public static class FooExtensions
    {
        public static FooAwaiter GetAwaiter(this Foo foo) =&gt; default;
    }

    public struct FooAwaiter : INotifyCompletion
    {
        public bool IsCompleted { get; }
        public void OnCompleted(Action continuation) {}
        public void GetResult() {}
    }
}

```

Currently, add imports service can only recognize the first case **CS1061**.
Linq syntax provides a specialised **CS1929** and the general **CS1936**.
However, missing method for deconstruction provides one consist error code **CS8129**:
```csharp
using System;
using System.Runtime.CompilerServices;

namespace A
{
    public class Foo
    {
        async void M(Foo foo)
        {
            var (a, b) = foo;
        }
    }

    public static class BarExtension
    {
        // Reports CS8129 no matter existence of this method
        public static void Deconstruct(this string foo, out int a, out int b)
        {
            a = 1;
            b = 2;
        }
    }
}

namespace A.Extension
{
    public static class FooExtensions
    {
        public static void Deconstruct(this Foo foo, out int a, out int b)
        {
            a = 1;
            b = 2;
        }
    }
}
`</Code>
        <CreatedDate>09/10/2019</CreatedDate>
        <ClosedDate>14/10/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Won't Fix</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39215</PullRequestID>
        <IssueID>25861</IssueID>
        <Title>Feature Request: CodeFix to add using for extension method</Title>
        <Description>**Scenario**:
`Windows.Foundation.IAsyncOpearation&lt;T&gt;` does not has definition for `GetAwaiter()`

**Expected**:
Add `Using System;` to make the extension method into scope.</Description>
        <CreatedDate>31/03/2018</CreatedDate>
        <ClosedDate>06/12/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39148</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tokarzkj</FixedByID>
    <Title>Feature: Add wrap all elements for initializer expressions</Title>
    <Description>Users will now be offered wrapping refactor options similar to functions with multiple arguments and parameters. The following refactor options are available for initializer expressions:

- Wrap every
- Unwrap and indent
- Wrap long list

I added 3 unit tests to test:

- Initializer that should offer no suggestion
- Small initializer with a few values
- Long initializer with 9 values

This implements the request from issue #37428</Description>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>19/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39148</PullRequestID>
        <IssueID>37428</IssueID>
        <Title>Wrap array initializer expressions.</Title>
        <Description>Before:
``

Would be nice if there was a refactoring `Wrap every expression` similar to `Wrap every argument`</Description>
        <CreatedDate>23/07/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39126</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>Completion for unimported extension methods</Title>
    <Description>#35059


TODO:
- Finalize the experience when indices are not completely available (e.g. show a banner in completion list saying still loading stuff?)
- ~~More tests for VB~~
- ~~Perf analysis.~~
- ~~Needs to Call into remote process for filtering, since that's where index is built.~~
- ~~Implement item description~~
- ~~Determine the bail condition (e.g. if any of the filter items isn't calculated? And/Or a timebox? )~~ now it bails if any of the required filter is not already created. Using expander would force build them.
- ~~Telemetry~~

There's an existing bug in SymbolTreeInfo that would cause us to miss extension methods declared in PE references which was compiled from VB source code. #39558 

@CyrusNajmabadi Could you please give this a quick look and let me know if the implementation of  the filter makes sense? Thanks!</Description>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>06/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39126</PullRequestID>
        <IssueID>35059</IssueID>
        <Title>Completion should provide extension methods from unimported namespaces</Title>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>06/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>IDE-IntelliSense</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39126</PullRequestID>
        <IssueID>39558</IssueID>
        <Title>SymbolTreeInfo is ignoring extension method from VB compiled PE reference</Title>
        <Description>Here's the code that builds SymbolTreeInfo for metadata:
http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/FindSymbols/SymbolTree/SymbolTreeInfo_Metadata.cs,393

The problem is the IL for module contains extension methods in VB looks like this (i.e. sealed but not abstract):
![image](https://user-images.githubusercontent.com/788783/67721576-1f78d780-f994-11e9-8efa-d5b5e6f81164.png)

One issue this causes is "add using" won't be able to fix a reference to extension method declared in such a metadata reference.
</Description>
        <CreatedDate>28/10/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39051</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Add API for marking a syntax tree as generated</Title>
    <Description>Provides API to fix #3705.</Description>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>19/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39051</PullRequestID>
        <IssueID>3705</IssueID>
        <Title>Exclude files or folder from running through the analyzers through a configuration file.</Title>
        <Description>Hi,

we have a lot of generated files that trigger warnings, errors when analyzers run them.
since the file name of the generated files do not follow the common naming conventions for generated code roslyn fires the analyzers away. As a result there are ten of thousands of warnings in the solution.
Could we get a exclude file from analyzing logic that:
- Exclude a file by adding it to a exclusion list
- Exclude a file by adding it to a exclusion list
- Annotate classes with a special Attribute that exclude the class
- exclude certain file name extensions ( like js files generated by typescript)
- Combination of the above like exclude all js files that live under the folder x including all sub folders

Most of the rules come straight from Resharper's exclusion file manager

Thanks
</Description>
        <CreatedDate>26/06/2015</CreatedDate>
        <ClosedDate>20/12/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>39003</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>bgrainger</FixedByID>
    <Title>Fix incorrect diagnostic message for "using"</Title>
    <Description>This removes the incorrect phrase " or implement a suitable 'Dispose' method" when `using` a type that doesn't implement `IDisposable`.

For #33746.</Description>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>13/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>39003</PullRequestID>
        <IssueID>33746</IssueID>
        <Title>Compiler error with new using pattern</Title>
        <Description>**Version Used**: 
VS 16.0.0 Preview 4.0

**Steps to Reproduce**:

    class Test
    {
        public void Dispose()
        {

        }
    }

    using (var t = new Test()) // Error CS1674
    {

    }

**Expected Behavior**:
No compiler error?

**Actual Behavior**:
Compiler error: Error CS1674 'Test': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.

Not sure what's intended behavior... If everything is working as intended, then error message is misleading...

According to https://github.com/dotnet/csharplang/issues/1623

&gt; This proposal is allow **any type** which structurally matches `IDisposable` (has a public void-returning non-generic instance method taking no arguments) to be used in a `using` statement.

this is a bug...
</Description>
        <CreatedDate>28/02/2019</CreatedDate>
        <ClosedDate>13/12/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-Diagnostic Clarity</Label>
          <Label>New Language Feature - enhanced using</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38908</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Evangelink</FixedByID>
    <Title>Add codefix for CS0708</Title>
    <Description>**Description**
This PR provides a code-fix for the compiler error `CS0708`.

**Issues fixed**
Fix #31838 </Description>
    <CreatedDate>27/09/2019</CreatedDate>
    <ClosedDate>13/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38908</PullRequestID>
        <IssueID>31838</IssueID>
        <Title>Code fix for CS0708 to make member static</Title>
        <Description>``
It would be nice to have a code fix to make `M` static.</Description>
        <CreatedDate>16/12/2018</CreatedDate>
        <ClosedDate>13/12/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38803</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add options to configure background analysis in the IDE</Title>
    <Description>1. Option to **enable power save mode**: Fixes #38429. This option turns off all the background analysis and also turns off remote host (RoslynCodeAnalysis service hub process) for C# and VB projects to reduce memory consumption in this mode. This option turns off most of the background analyses that are executed by the solution crawler. We still execute the bare minimum analysis for a reasonable editing experience: compiler analyzer to get compiler warnings/errors and also execute the add usings and remove unncessary usings analyzers. We can tune this required analysis set in future, as required.

2. Option to **disable live analyzer execution**: There have been lot of requests in past to give users a single knob to turn on/off execution of all Roslyn analyzers in the IDE (third party analyzers + IDE code style analyzers which are enabled by default).

I have also hooked up the low virtual memory listener which detects low VM and used to turn off just the full solution analysis to now instead turn on a forced power save mode for the current VS session (which also turns off full solution analysis, along with other background analyses).

**TODOs:**
1. More manual testing
2. Get design consensus on the preferred option(s):
   1. 2 options (current PR): Options to configure Power save mode and Analyzer execution
   2. Single option to configure Power save mode only
   3. Multiple options: One top level option to configure Power save mode, with lot of individual options to control individual background analyses. This is less preferable due to overload of options and information for users.</Description>
    <CreatedDate>23/09/2019</CreatedDate>
    <ClosedDate>21/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38803</PullRequestID>
        <IssueID>38429</IssueID>
        <Title>provide a power save mode</Title>
        <Description>we have been adding more and more features to IDE. it is long-tail features so it always helps some portion of our users. but there is also another portion of users who don't care that features or want to reduce noise or reduce system resource consumed from those features that they don't use much.

these people have been asking a way to disable those features altogether. and let those features only run when it is explicitly asked.

basically no solution crawler running, no background compilation running and etc. 

it requires design meeting, but similar to power save mode other IDE team provides for exactly same reason.</Description>
        <CreatedDate>30/08/2019</CreatedDate>
        <ClosedDate>20/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Developer Community</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38582</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>YairHalberstadt</FixedByID>
    <Title>Extract Method Can Call ConfigureAwait(False) if extracted method does.</Title>
    <Description>See #38529

If anywhere in the extracted method we call ConfigureAwait false, we call ConfigureAwait(false) in the invocation of the extracted method.

This preserves semantics around configure await, since if ConfigureAwait(false) is called anywhere in a method, the rest of the method will not continue on the original captured context.

I also fixed a bug at the same time, namely now Extract Method does not make the extracted method async, if it only used await in a local function.</Description>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>13/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38582</PullRequestID>
        <IssueID>38529</IssueID>
        <Title>Automatically add . ConfigureAwait(false) when extracting an async method</Title>
        <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/705733/automatically-add-configureawaitfalse-when-extract.html)._

---
When using the c# Extract Method feature, if the method created is an async method, Visual Studio should automatically add . ConfigureAwait(false) to the end of the call to the new method it replaces the original code with, if the final await statement in the extracted code (on any branch of execution) has . ConfigureAwait(false)

---
### Original Comments

#### Jane Wu [MSFT] on 8/23/2019, 00:08 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;
</Description>
        <CreatedDate>05/09/2019</CreatedDate>
        <ClosedDate>13/11/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>IDE-CodeStyle</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35526</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Revert "Make compilation outputs available via a workspace service</Title>
    <Description>(Original PR #34809)

This change broke some unit tests on the VS side with a `System.Reflection.ReflectionTypeLoadException : Unable to load one or more of the requested types.` 

See https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/179585 for details.

</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>19/12/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35526</PullRequestID>
        <IssueID>34809</IssueID>
        <Title>Make compilation outputs available via a workspace service</Title>
        <Description>Based on discussion on https://github.com/dotnet/roslyn/pull/34698. Instead of exposing paths/Streams on a project this change adds a workspace service that provides data from compiler output files.

The abstraction allows for the files to be in-memory or on a different machine. In the latter case it makes it possible to only transfer relevant parts of the output files rather then their entirety.

Fixes https://github.com/dotnet/roslyn/issues/34371</Description>
        <CreatedDate>06/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34891</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Nullable bug fixes</Title>
    <Description>This comprises the following changes:

1. Renames `SetUnknownNullability*` to `SetObliviousNullability*` 
1. Fixes a stack overflow in `SetObliviousNullabilityForReferenceTypes` (#30023).
1. Completes the duplication of #29898 to #29605 by updating a comment


</Description>
    <CreatedDate>09/04/2019</CreatedDate>
    <ClosedDate>27/11/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34891</PullRequestID>
        <IssueID>30023</IssueID>
        <Title>StackOverflowException in SetUnknownNullabilityForReferenceTypes.</Title>
        <Description>``</Description>
        <CreatedDate>19/09/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34891</PullRequestID>
        <IssueID>29898</IssueID>
        <Title>Follow up on comments in ImplicitConversions_07 unit-test</Title>
        <Description>``</Description>
        <CreatedDate>14/09/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34891</PullRequestID>
        <IssueID>29605</IssueID>
        <Title>Update methods from initial binding based on inferred nullability</Title>
        <Description>There are a number of cases in `NullableWalker` where methods from initial binding should be updated based on the inferred nullability.

For instance, both calls to `.ToString()` below should report warnings but no warning is reported for the second case currently.
``

Test cases affected: `NullableReferenceTypesTests.ImplicitConversions_07`


[jcouv update:] both calls to `.ToString()` now report warnings ([sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGEAeAFQD5GA3owoiKAS1zwENQhW4UAYgAoAlBQC8vCjAAWCAPYB3CgWIBCANyMAvo1YUmARgDsg4aKcA2Djy3sEcBDwvkryMCruIkIMorEOziZwxlx8qlYxorYZIl4OACyKSk4ADAD8FFAR2RTRcaK4ST4lpbyqAHTKKm3c+gDKMAgSAOZpFAD0YxSGENLDIBSQAJ7AlKaEkXH+gfBKlR3tPf2DuCMqFnUiEyb6UzO4wxtZ1kA==)) but more references to this issue remain in the source.</Description>
        <CreatedDate>30/08/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38435</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Remove incorrect assertion</Title>
    <Description>Fixes #37783</Description>
    <CreatedDate>31/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38435</PullRequestID>
        <IssueID>37783</IssueID>
        <Title>Debug assert firing in SpillSequenceSpiller.cs</Title>
        <Description>**Version Used**: 

Debug build of release/dev16.2 branch.

**Steps to Reproduce**:

Due to the issue reported [here](https://github.com/dotnet/roslyn/issues/37456) I had to build and run my first debug version of the Roslyn compiler. Now when building our .net core 2.2 web application project, an assert on row 1090 in [SpillSequenceSpiller.cs](https://github.com/dotnet/roslyn/blob/release/dev16.2/src/Compilers/CSharp/Portable/Lowering/SpillSequenceSpiller.cs#L1090) will fire repeatedly (&gt;10-15 times).

**Expected Behavior**:

I would have expected either

1) That no debug assert would fire during a build
2) Or that some annotation (code comment or debug.assert message) would provide any hint on whether there is something wrong in my code or Roslyn code

**Actual Behavior**:

The assert fires. 

Trying blame on _SpillSequenceSpiller.cs_ does not seem to show any intent to why this assert was introduced. Build will complete successfully, and the application seems to work fine as well. 

Perhaps the assert is unnecessary? It was easy to just ignore it, but since it was the only assert firing during build I'm curious on why.

Ping @tmat seems to have touched the code five years ago, perhaps you know if this assert should fire, remove it or help annotate it?

</Description>
        <CreatedDate>07/08/2019</CreatedDate>
        <ClosedDate>09/09/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38415</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Support compound operators with pattern Index/Range indexers</Title>
    <Description>When we added a pattern-based range, compound operator lowering was
not updated to deal with the new node, which it does pre-lowering, since
some bound nodes (like indexers) have different code gen in the presence
of compound operators.

This change implements compound operator support for pattern Index/Range.

Fixes #37789</Description>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38415</PullRequestID>
        <IssueID>37789</IssueID>
        <Title>InvalidOperationException: Regression after netcore3.0-preview4</Title>
        <Description>Hi !
**Version Used**: 
dotnet core: 3.0.100-preview7-012821
Microsoft (R) Build Engine version 16.3.0-preview-19329-01+d31fdbf01 for .NET Core
**Steps to Reproduce**:

``

**Expected Behavior**:
Compile correctly (compile fine in preview4).
**Actual Behavior**:
Fail to compile and fail horribly.

&gt; C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : Process terminated. System.InvalidOperationException: Unexpected value 'IndexOrRangePatternIndexerAccess' of type 'Microsoft.CodeAnalysis.CSharp.BoundKind' [C:\Users\nicolas.vandeginste\test\test.csproj]
&gt;[Truncated]
</Description>
        <CreatedDate>07/08/2019</CreatedDate>
        <ClosedDate>11/09/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Range</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38362</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Update operand flow state after an unboxing conversion</Title>
    <Description>Closes #38170

I incidentally found and fixed a bug where explicit nullable conversions to non-nullable value types would fail to update all affected slots.</Description>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38362</PullRequestID>
        <IssueID>38170</IssueID>
        <Title>Cast to a non-nullable value type should update variable state to non-null</Title>
        <Description>**Version Used**: 

Branch master (13 Aug 2019)
Latest commit a08336 by David:
Merge pull request #37916 from dibarbet/partial_load_str

Update partial load dialog string to better match task center.

**Steps to Reproduce**:

Compile the following code:
``

**Expected Behavior**:
`CS8602` is not reported for `i.ToString()`. If the variable contains a null value an exception will be thrown from the cast.

**Actual Behavior**:
Roslyn repots `CS8602: Dereference of a possibly null reference.` for the dereference of `i` in the code above.</Description>
        <CreatedDate>21/08/2019</CreatedDate>
        <ClosedDate>04/09/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38325</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Allow is operators to update null state of value types</Title>
    <Description>Closes #38213 

I saw that VisitIsOperator requires the operand type to not be value type in order to update the flow-state to not-null. I don't see a reason why it should require this, so I just removed the check and added a few tests for @sharwell's scenario.</Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38325</PullRequestID>
        <IssueID>38213</IssueID>
        <Title>'is object' does not work for Nullable&lt;T&gt;</Title>
        <Description>**Version Used**: 16.3 Preview 2

**Steps to Reproduce**:

``

**Expected Behavior**:

No warning for `arg.Value`.

**Actual Behavior**:

A warning is reported for `arg.Value`:

&gt; warning CS8629: Nullable value type may be null.
</Description>
        <CreatedDate>22/08/2019</CreatedDate>
        <ClosedDate>04/09/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38324</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dibarbet</FixedByID>
    <Title>Remove IVTs to liveshare</Title>
    <Description>Tested locally with liveshare running.  Runs fine.
Liveshare build should not be affected as the older DLLs build with specific roslyn versions.

Closes #35074 </Description>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>24/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38324</PullRequestID>
        <IssueID>35074</IssueID>
        <Title>Migrate Live Share IVTs to the external access pattern</Title>
        <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* Microsoft.VisualStudio.LanguageServices.Remote
* Microsoft.VisualStudio.LanguageServices.Remote.15.7
* Microsoft.VisualStudio.LanguageServices.Remote.15.8
* Microsoft.VisualStudio.LanguageServices.Remote.16.0
* Microsoft.VisualStudio.LanguageServices.Remote.16.1
* Microsoft.VisualStudio.LanguageServices.Remote.CSharp
* Microsoft.VisualStudio.LanguageServices.Remote..CSharp.15.7
* Microsoft.VisualStudio.LanguageServices.Remote.CSharp.15.8
* Microsoft.VisualStudio.LanguageServices.Remote.CSharp.16.0
* Microsoft.VisualStudio.LanguageServices.Remote.CSharp.16.1

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>24/09/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38320</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Re-infer unary and binary operators in NullableWalker</Title>
    <Description>See #29605.</Description>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>13/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38320</PullRequestID>
        <IssueID>29605</IssueID>
        <Title>Update methods from initial binding based on inferred nullability</Title>
        <Description>There are a number of cases in `NullableWalker` where methods from initial binding should be updated based on the inferred nullability.

For instance, both calls to `.ToString()` below should report warnings but no warning is reported for the second case currently.
``

Test cases affected: `NullableReferenceTypesTests.ImplicitConversions_07`


[jcouv update:] both calls to `.ToString()` now report warnings ([sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGEAeAFQD5GA3owoiKAS1zwENQhW4UAYgAoAlBQC8vCjAAWCAPYB3CgWIBCANyMAvo1YUmARgDsg4aKcA2Djy3sEcBDwvkryMCruIkIMorEOziZwxlx8qlYxorYZIl4OACyKSk4ADAD8FFAR2RTRcaK4ST4lpbyqAHTKKm3c+gDKMAgSAOZpFAD0YxSGENLDIBSQAJ7AlKaEkXH+gfBKlR3tPf2DuCMqFnUiEyb6UzO4wxtZ1kA==)) but more references to this issue remain in the source.</Description>
        <CreatedDate>30/08/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38238</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>alrz</FixedByID>
    <Title>Update IfToSwitch refactoring for switch expressions</Title>
    <Description>Fixes #38083 
Fixes #37035

Also the feature is rewritten to share most logic for VB and C# as they get close to feature parity.</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38238</PullRequestID>
        <IssueID>38083</IssueID>
        <Title>IDE refactoring for cascading ifs?</Title>
        <Description>Consider a method like:
``
It'd be nice if there were an IDE refactoring for that.</Description>
        <CreatedDate>18/08/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Need Design Review</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38238</PullRequestID>
        <IssueID>37035</IssueID>
        <Title>Convert to switch replaces with broken code.</Title>
        <Description>``

![Animation](https://user-images.githubusercontent.com/1640096/60790007-bf4df380-a160-11e9-92a9-2f1621060833.gif)</Description>
        <CreatedDate>07/07/2019</CreatedDate>
        <ClosedDate>13/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38232</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>A switch expression only has a common type if all arms can be converted to that type.</Title>
    <Description>Fixes #38226</Description>
    <CreatedDate>23/08/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38232</PullRequestID>
        <IssueID>38226</IssueID>
        <Title>Compiler computes incorrect common type for switch expression with null arm</Title>
        <Description>See https://github.com/dotnet/roslyn/issues/37950

The following method does not compile, but it should.  A switch expression should only be considered to have a natural type when all switch arm expressions can be converted to the computed common type.

``
</Description>
        <CreatedDate>22/08/2019</CreatedDate>
        <ClosedDate>12/09/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38200</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>Exclude textual changes made in unchangeable document</Title>
    <Description>This is my third attempt of fixing the feedback below (see #38070 for another approach)
https://developercommunity.visualstudio.com/content/problem/682938/csharperenametrackingcodefixprovider-encountered-a.html 

The root cause is symbol finder returns all the references for a given symbol, including those from unchangeable document (i.e. *.g.cs file from Razor). As a result, refactoring uses "find reference" would end up fixing those references and cause workspace to throw when the change is being applied.

This added a new helper method that simply drop all changes made in those unchangeable document. And call this helper before refactoring returns final solution.

Affected refactoring:
1. rename
2. sync/change namespace (#37521)
3. change signature

Note that this change only avoids the crash. User code will be left in a broken state, which is really undesirable, but there's not much we can do until Razor provides us a way to modify closed files.</Description>
    <CreatedDate>22/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38200</PullRequestID>
        <IssueID>38070</IssueID>
        <Title>Don't include unchangeable references as renamable references</Title>
        <Description>Fix feedback https://developercommunity.visualstudio.com/content/problem/682938/csharperenametrackingcodefixprovider-encountered-a.html

I tried an alternative approach @jasonmalinowski suggested, i.e. creating a more general helper like
``
However, simply replacing the text/syntax in new document with the one from old one doesn't seem to work, because later when we apply the change, it just check the ref equality of the old and new DocumentState in `GetChangedDocuments`. So I ended up having the "fixed" document still being flagged as changed.

---

@CyrusNajmabadi @heejaechang The repro I have is to rename a type referenced in a .cshtml file, when the cshtml file is not opened in editor. In that scenario, the corresponding .g.cs document contains an auto-generated syntax tree that has the reference, which is then found by SymbolFinder. The part I don't quite understand is that it seems whenever the .cshtml is opened, it's added to the project on the fly and removed when closed, as a result for the .g.cs file, the one with auto-gen syntax tree is replaced with one with empty tree when cshtml is opened (and replaced back when it's closed). Is this how Razor works? 

That said, it seems FAR can handle this regardless of whether cshtml is opened nor not, do you know where it is implemented? It seems to be a different path from `FindReferencesSearchEngine.FindReferencesAsync` that is used by `SymbolFinder.FindRenamableReferencesAsync`? If possible, I'd rather fix this by making rename use whatever implementation that supports FAR.</Description>
        <CreatedDate>17/08/2019</CreatedDate>
        <ClosedDate>22/08/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38200</PullRequestID>
        <IssueID>37521</IssueID>
        <Title>CSharpSyncNamespaceCodeRefactoringProvider crashes when refactoring class reference have a reference in g.cshtml.cs</Title>
        <Description>In VS 2019 (community edition), When I try to move a class from namespace1 to namespace2, the Roslyn refactoring crashing by saying that `CSharpSyncNamespaceCodeRefactoringProvider changing document g.cshtml.cs file is not supported`. It looks like the refactoring of the razor generated file is not working(my file was at obj\Debug\netcoreapp2.2\Razor\Views\**\**.g.cshtml.cs).

</Description>
        <CreatedDate>27/07/2019</CreatedDate>
        <ClosedDate>05/09/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38194</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Add ETW events for recovering syntax trees</Title>
    <Description>Closes #37477

The steps for manually recording traces have already been updated to enable the provider.

![image](https://user-images.githubusercontent.com/1408396/63475983-fdaf2180-c433-11e9-9b55-b603c778c9fb.png)
</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38194</PullRequestID>
        <IssueID>37477</IssueID>
        <Title>Report an ETW event when reconstituting a syntax tree</Title>
        <Description>It will be helpful if performance traces submitted for feedback tickets contained an event for each time a syntax tree is reconstituted, along with the identifier for that tree. This will allow us to see both of the following:

* Cases where a large number of trees get pulled back into memory
* Cases where a single tree (or small number of trees) get repeatedly pulled back into memory and subsequently discarded</Description>
        <CreatedDate>25/07/2019</CreatedDate>
        <ClosedDate>19/09/2019</ClosedDate>
        <Labels>
          <Label>Area-Performance</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Telemetry</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38188</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>petrroll</FixedByID>
    <Title>Nullable annotations refactoring helpers &amp; bits and pieces elsewhere</Title>
    <Description>Based on #38166</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38188</PullRequestID>
        <IssueID>38166</IssueID>
        <Title>Cleanup &amp; rework of `IsOnTypeHeader` usage</Title>
        <Description>~Based on: #37884~
Work for: #35525</Description>
        <CreatedDate>21/08/2019</CreatedDate>
        <ClosedDate>29/08/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38187</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Add infromation to bound nodes for converted tuples and switches to determine if they were target-typed.</Title>
    <Description>Fixes #37193
These changes are internal only, so no behavioral (test) changes are expected.
</Description>
    <CreatedDate>21/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38187</PullRequestID>
        <IssueID>37193</IssueID>
        <Title>Changes needed to support nullability of tuple and switch expressions</Title>
        <Description>Tuple expressions can be either target-typed or self-typed.  The nullability walker needs to know which it is in order to properly compute the types with nullability.  It currently guesses based on whether the natural type is the same as the converted type, but that is not correct.

In order to support that, the bound node for a (converted) tuple literal should have a boolean flag that says whether it was self-typed or target-typed.

Similarly for switch expressions.
</Description>
        <CreatedDate>12/07/2019</CreatedDate>
        <ClosedDate>03/09/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
          <Label>New Language Feature - Nullable Semantic Model</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>38147</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Ensure synthesized closure method is static for static local function</Title>
    <Description>Fixes #38143</Description>
    <CreatedDate>20/08/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>38147</PullRequestID>
        <IssueID>38143</IssueID>
        <Title>`static` Local Functions are not being emitted as static</Title>
        <Description>``
Capturing the local function in an `Action` is causing it to be emitted as an instance function on an inner class, instead of being a static method.
https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDZICYgNQA+AAgEwCMAsAFBEDMABKfQML0De1AkEWQGyMAWegFkAFAEouHKvXqdufQfQwB7AMYQMRAKww0KgHYT29AL7VZlyzxL0I9ALzL1mnXsMBuLuaqmgA==</Description>
        <CreatedDate>20/08/2019</CreatedDate>
        <ClosedDate>17/10/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37973</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Move to new suppression state column in error list</Title>
    <Description>Platform team recently moved our Suppression State column down to Microsoft.VisualStudio.Shell.Framework. This change deletes Roslyn's implementation of this column and moves all the uses to now reference the column from the shell framework assembly.

1. https://github.com/dotnet/roslyn/commit/91535578b5c02686e9efecaeed2514d8d549f469: Updates our VS dependencies
2. https://github.com/dotnet/roslyn/commit/c3c9fa56646bf74220fa3a0bcae21111a6770a5f: Moves our VS layer to new suppression state column. Verified manually that the new Suppression state column works fine after installing the locally built Roslyn VSIX.

Fixes VSO RPS bug [#940318](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/940318) due to perf refression in C++ solution loading Roslyn from the error list due to the Suppression state column.</Description>
    <CreatedDate>14/08/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>37912</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jhinder</FixedByID>
    <Title>VB: Check for script context in '#R' directive recommender</Title>
    <Description>Fixes #37911.</Description>
    <CreatedDate>12/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37912</PullRequestID>
        <IssueID>37911</IssueID>
        <Title>VB: #R directive is recommended in non-scripting context</Title>
        <Description>**Version Used**: 16.2.1

**Steps to Reproduce**:

1. Open a regular VB file.
2. Type `#`.

**Expected Behavior**: `#R` does not appear in the list, as it's not a scripting context.

**Actual Behavior**: `#R` does appear, leading to a compiler error if it is inserted.</Description>
        <CreatedDate>12/08/2019</CreatedDate>
        <ClosedDate>04/09/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-IntelliSense</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37831</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>nbalakin</FixedByID>
    <Title>Clean up dead code (#36138)</Title>
    <Description>Fix #36138</Description>
    <CreatedDate>08/08/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37831</PullRequestID>
        <IssueID>36138</IssueID>
        <Title>Clean up dead code in AbstractLegacyProject_IIntellisenseBuildTarget.cs</Title>
        <Description>https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/ProjectSystem/Legacy/AbstractLegacyProject_IIntellisenseBuildTarget.cs#L15-L72</Description>
        <CreatedDate>03/06/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>Concept-OOP</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37802</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chborl</FixedByID>
    <Title>Add Containing Type and Containing Member columns to FAR</Title>
    <Description>Fixes #34336 

This PR adds 2 new columns to the FAR window: Containing Type and Containing Member.  
![GroupByContaining](https://user-images.githubusercontent.com/25776963/64829257-7fe8bc80-d580-11e9-8874-d334cab00904.gif)
</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37802</PullRequestID>
        <IssueID>34336</IssueID>
        <Title>Find All References should allow grouping by type and member</Title>
        <Description>Find All References should allow grouping by type and member - currently, Definition, Project then Path is the closest analog, but grouping by type is more useful than file path and member is also a useful grouping-level for heavily used symbols.</Description>
        <CreatedDate>21/03/2019</CreatedDate>
        <ClosedDate>19/09/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>InternalAsk</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37801</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Enable debugging/EnC integration tests</Title>
    <Description>The recent failures for BasicEnC integration tests were because of the test image updating to 16.3 preview1. The changes in the vs-deps branches were waiting on this update and we can enable these tests again in these branches.

Closes #35965
Closes #37689</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>24/10/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37801</PullRequestID>
        <IssueID>35965</IssueID>
        <Title>Enable debugging/EnC integration tests</Title>
        <Description>This PR disables integration tests: https://github.com/dotnet/roslyn/pull/34027, because it requires the lab/16.2stg build with VS debugger insertion which won't be available on the CI machine.

Enable the tests again once the CI machine is upgraded.

Also uncomment `#if TODO` in `WaitForDesignMode` </Description>
        <CreatedDate>25/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Integration-Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37801</PullRequestID>
        <IssueID>37689</IssueID>
        <Title>BasicEditAndContinue Integration Tests Failing</Title>
        <Description>A recent update to the preview version of Visual Studio that is used for integration tests has caused Basic EnC tests to consistently fail.

- [x] Make integration tests not required for PRs
- [x] Add skips for these tests and flow through
- [x] Make integration tests required for PRs
- [ ] Unskip these tests when a fix is in place.</Description>
        <CreatedDate>03/08/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Integration-Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37795</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add support to use editorconfig for set severity command in the Analy…</Title>
    <Description>…zers node context menu

Fixes #37846
1. Renamed "Set Rule Set Severity" command to "Set severity". Also renamed "Info" and "Hidden" sub-menus to "Suggestion" and "Silent" respectively to align with our editorconfig severity terminology.
2. The set severity command handler checks if the project uses no ruleset or the default built-in ruleset, and if so it adds or updates editorconfig to configure severity. Otherwise, we continue using specified ruleset for configuration.
3. Updated the effective ruleset severity computation for the rule nodes under Analyzers node to account for severity settings from editorconfig (analyzer config documents).
4. https://github.com/dotnet/roslyn/pull/37795/commits/c15ca2fcfe26442efdc6d8ef86d31197e6df1e65 hooks up the `Set severity` context menu and functionality from error list. Executing the command creates/updates editorconfig file.

![image](https://user-images.githubusercontent.com/10605811/62746448-87a6c580-ba04-11e9-828c-048b4d06b091.png)

Follow-up work for subsequent PR:
1. Add a new right click menu command to Analyzers node to open active editorconfig for project (and create one if none exists) - similar to the existing "Open Active Rule Set" command for rulesets.
2. Hide the "Open Active Rule Set" command, unless the project already has a non-default non-built in ruleset.</Description>
    <CreatedDate>07/08/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37795</PullRequestID>
        <IssueID>37846</IssueID>
        <Title>Better Roslyn Analyzer UI integration for global rule configuration</Title>
        <Description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/466977/better-roslyn-analyzer-ui-integration-for-global-r.html)._

---
&lt;p&gt;&lt;strong&gt;PROBLEM&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using Roslyn analyzers like StyleCop is much more difficult than it should be.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Firstly, when installing a Roslyn analyzer and you make a default `.ruleset` file, opening the file in the ruleset editor does not give you the option of disabling any rules from this roslyn analyzer. &lt;/p&gt;&lt;p&gt;For example, I installed StyleCop.Analyzers across all projects using Directory.Build.props. Since this is a global option I would expect the rules to appear in my global ruleset file.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Secondly, when you have an issue in code and you press `Ctrl + .`, the quick actions menu gives you 2 options for suppression:&lt;/p&gt;&lt;p&gt;1. Suppress in code (#pragma warning disable)&lt;/p&gt;&lt;p&gt;2. Suppress in file (GlobalSuppressions.cs)&lt;/p&gt;&lt;p&gt;However it gives no options for my global ruleset file! Every blog and Stack Overflow post I've read suggests using a ruleset file as a means for sharing rules between projects, but there doesnt seem to be any UI integration with it. Why can't I select a rule from code and just disable it globally? Why do I need to manually open the ruleset file in an XML editor and hand-craft the correct runes in text?&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Firstly, the ruleset file editor should know about your installed analyzers and provide a method to disable those rules.&lt;/p&gt;&lt;p&gt;Secondly, on code quick fixes menu, there should be a 3rd option:&lt;/p&gt;&lt;p&gt;3. Suppress in global ruleset file&lt;/p&gt;&lt;p&gt;This would add something like this to your ruleset file&lt;/p&gt;&lt;p&gt; &amp;lt;Rule Id=&amp;quot;SA1600&amp;quot; Action=&amp;quot;None&amp;quot; /&amp;gt; &amp;lt;!-- Elements should be documented --&amp;gt;&lt;/p&gt;

---
### Original Comments

#### Jane Wu [MSFT] on 2/25/2019, 01:28 AM: 

&lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
        <CreatedDate>08/08/2019</CreatedDate>
        <ClosedDate>22/08/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Developer Community</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37629</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>lavanyaguru</FixedByID>
    <Title>Codefix and Code Refactoring for making local functions static</Title>
    <Description>Codefix: Passes in variables explicitly when static limits the scope of the variables within local functions @GovernessS  

Code Refactoring: Suggests to make the local function static and also passes in the variables explicitly to avoid errors @lavanyaguru  

#35136 and #35135 </Description>
    <CreatedDate>31/07/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37629</PullRequestID>
        <IssueID>35136</IssueID>
        <Title>Code fix for CS8421: Pass 'item' as an argument</Title>
        <Description>**Version Used**: Visual Studio 2019 version 16.0

🔗 Related to #35135 

**Steps to Reproduce**:

``

**Expected Behavior**:

* CS8421: A static local function cannot contain a reference to 'x'.
* A code fix is presented which offers to explicitly pass `x` as an argument.

**Actual Behavior**:

The error is reported, but the code fix must be applied manually.
</Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>17/09/2019</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>IDE-CodeStyle</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37629</PullRequestID>
        <IssueID>35135</IssueID>
        <Title>New refactoring: Make local function static</Title>
        <Description>This refactoring would add the `static` modifier to a local function, and automatically add parameters to the local function for each item previously captured by the function.</Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>17/09/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>IDE-CodeStyle</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37228</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>YairHalberstadt</FixedByID>
    <Title>Feature/add import annotation</Title>
    <Description>See #35806

The aim of this PR is to improve the ability of Roslyn to add imports to code, in particular with regards to code generated by code actions.

This PR consists of 4 commits (EDIT: plenty more commits added now, but the first 4 contain most of the interesting stuff :-)).

The first commit merges the ImportAdderService which previously just added imports based on QualifiedNameSyntaxes, with the AbstractImportAdder which previously added imports based upon the SymbolAnnotations. This way both approaches gain the benefits of the changes in the next commit, whilst reducing code duplication and technical debt. We also first calculate all using statements to add before adding them, and are stricter about not adding unnecessary using statements. This allows us to make the changes in the next commit more efficient, since we can skip them if there are no imports to add.

The second commit adds a safe flag to the AddImportsService. When this flag is set to true, we will try to complexify code as necessary in order to prevent the addition of namespaces from changing the semantic meaning of the code.

The third commit adds a static `Annotation` property to `ImportAdder`'s public API. When a subtree is marked with this annotation, the post processing stage of a code action will add import statements to nodes in the subtree which have SymbolAnnotations attached.

The fourth commit adds this annotation by default in the AbstractCodeGenerationService APIs. It can be switched off by Setting AddImports in CodeGenerationOptions to false.</Description>
    <CreatedDate>15/07/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37228</PullRequestID>
        <IssueID>35806</IssueID>
        <Title>Code Fixes/refactorings should add using statements if necessary and possible</Title>
        <Description>For example, when pull members up to base class is used, and the base class is in a separate document without a suitable using statement, the following happens:

``

Similiar applies to Implement members, generate variable, etc.</Description>
        <CreatedDate>20/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36960</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chborl</FixedByID>
    <Title>Complete statement - don't move semicolon outside of lambda statements.</Title>
    <Description>Fixes #36945</Description>
    <CreatedDate>03/07/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36960</PullRequestID>
        <IssueID>36945</IssueID>
        <Title>Complete Statement should not move semicolon outside of lambda statements</Title>
        <Description>I encounter this issue a lot when converting single line lambda expressions into multiline (block).
For example, typing a semicolon after ToString() inserts the semicolon at the end of the line:
    var items = new[] { 1, 2, 3 };
    items.Select(i =&gt; { i.ToString())

This issue comes from comments added to https://developercommunity.visualstudio.com/content/problem/605241/typing-a-semicolon-within-a-function-argument-list.html
</Description>
        <CreatedDate>03/07/2019</CreatedDate>
        <ClosedDate>09/10/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34965</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chborl</FixedByID>
    <Title>Offer 'convert concatenated to interpolated string' refactoring when inside an interpolated string</Title>
    <Description>Fixes #33865</Description>
    <CreatedDate>12/04/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34965</PullRequestID>
        <IssueID>33865</IssueID>
        <Title>VS2019.4: "Convert to interpolated string" refactoring is not always offered and does not work correctly in some circumstances</Title>
        <Description>Given the following struct:

``

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/474404/vs20194-convert-to-interpolated-string-refactoring.html
VSTS ticketId: 806630_
_These are the original issue comments:_

Visual Studio Feedback System on 3/3/2019, 11:31 PM (26 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>05/03/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>IDE-CodeStyle</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34762</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Therzok</FixedByID>
    <Title>Reduce allocations in DiagnosticIncrementalAnalyzer</Title>
    <Description>This PR reduces allocations in DiagnosticIncrementalAnalyzer by a good
margin, 450MB for loading a solution and a short edit session.

The total allocations in VSMac were 3GB, and these amounted for 450MB.

Since the methods were private, implementations can be switched from
IEnumerable and LINQ to concrete enumerator iteration and removal
of lambdas with captures.

Fixes #34761</Description>
    <CreatedDate>04/04/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34762</PullRequestID>
        <IssueID>34761</IssueID>
        <Title>Lambda and boxed enumerator allocations in DiagnosticIncrementalAnalyzer</Title>
        <Description>**Version Used**: 
3.0.0-beta4-19157-04

**Steps to Reproduce**:

1. Open a solution in VSMac
2. Observe a lot of allocations in GetActiveFileStates

145MB Enumerable System.Linq.Enumerable.Where&lt;TSource&gt;(IEnumerable&lt;T&gt; source, Func&lt;T, TResult&gt; predicate)
145MB System.Linq.Enumerable+WhereEnumerableIterator&lt;TSource&gt;.Select&lt;TResult&gt;(Func&lt;T, TResult&gt; selector)
129MB 
System.Func&lt;System.Collections.Generic.KeyValuePair&lt;Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+ActiveFileState&gt;, System.Boolean&gt;
48MB Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+StateSet+&lt;&gt;c__DisplayClass28_0


**Expected Behavior**:
Lambda captures and IEnumerable should be avoided there, it's coming in from a private method.

**Actual Behavior**:
Allocations.

Preparing a PR, opened an issue to add PerformanceSensitive attributes.</Description>
        <CreatedDate>04/04/2019</CreatedDate>
        <ClosedDate>27/09/2019</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34617</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>🐛 Fix Type/Constructor deduplication in Find All References</Title>
    <Description>~~The behavior once provided by this field will be generalized in #35139.~~

Closes #35139</Description>
    <CreatedDate>31/03/2019</CreatedDate>
    <ClosedDate>14/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34617</PullRequestID>
        <IssueID>35139</IssueID>
        <Title>Find References results should distinguish direct and indirect references</Title>
        <Description>See discussion in #34617.

Currently Find All References on a named type returns references to both the type itself and references to the constructor(s). In this and similar cases, the `FinderLocation` should indicate whether the location is a direct reference to the symbol passed to Find All References, or to a related symbol.

The Find All References presenter should be updated to not show references to a related symbol on the searched symbol whenever the related symbol will also be shown in the results. For example the following image shows a reference location that should not have been presented because it is a duplicate:

![image](https://user-images.githubusercontent.com/1408396/56428465-0c6aa980-6285-11e9-8ee0-ef35a4189040.png)

Related to #32738</Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>14/09/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34617</PullRequestID>
        <IssueID>35139</IssueID>
        <Title>Find References results should distinguish direct and indirect references</Title>
        <Description>See discussion in #34617.

Currently Find All References on a named type returns references to both the type itself and references to the constructor(s). In this and similar cases, the `FinderLocation` should indicate whether the location is a direct reference to the symbol passed to Find All References, or to a related symbol.

The Find All References presenter should be updated to not show references to a related symbol on the searched symbol whenever the related symbol will also be shown in the results. For example the following image shows a reference location that should not have been presented because it is a duplicate:

![image](https://user-images.githubusercontent.com/1408396/56428465-0c6aa980-6285-11e9-8ee0-ef35a4189040.png)

Related to #32738</Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>14/09/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32772</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chborl</FixedByID>
    <Title>Preserve Extern modifier when running code cleanup</Title>
    <Description>Fixes #29561 

outstanding issues:

- [ ] Fix the formatting of the line after the field declaration

- [ ] Add tests for other modifiers

</Description>
    <CreatedDate>25/01/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32772</PullRequestID>
        <IssueID>29561</IssueID>
        <Title>"Add accessibility modifiers" C# formatting rule breaks code</Title>
        <Description>We do not use &amp;quot;private&amp;quot; and &amp;quot;internal&amp;quot; everywhere because they are default modifiers and we don't want to see defaults in our code. That rule adds them, making lots of diffs for no reason. This rule should not be opt-out, it should be opt-in.

Another problem is methods with &amp;quot;extern&amp;quot; modifier. This rule removes &amp;quot;extern&amp;quot;, breaking our interop code. Please don't do that.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/293507/add-accessibility-modifiers-c-formatting-rule-brea.html
VSTS ticketId: 648040_
_These are the original issue comments:_

Jinu Joseph [MSFT] on 8/5/2018, 00:53 AM (22 days ago): &lt;p&gt;Thank you for your feedback! For us to investigate this further, could you please provide code snippet which leads to this issue, specific example will help us to investigate better.  We look forward to hearing from you!&lt;/p&gt;

Roy Scheerens on 8/5/2018, 03:28 AM (22 days ago): &lt;p&gt;I have this problem as well, and it seems to happen with every extern function/method that doesn't have an access modifier. If I enable the additional code cleanup, and the 'add accessibility modifiers' option, it will remove extern and replace it with private.&lt;/p&gt;&lt;p&gt;&lt;img src="https://developercommunity.visualstudio.com/storage/temp/36550-missingextern.png"&gt;&lt;/p&gt;&lt;pre&gt;using System;&lt;br&gt;using System.Runtime.InteropServices;&lt;br&gt;&lt;br&gt;namespace ConsoleApp8&lt;br&gt;\{&lt;br&gt;  class Program&lt;br&gt;  \{&lt;br&gt;    [DllImport("User32.dll", CharSet = CharSet.Unicode)]&lt;br&gt;     static extern int MessageBox(IntPtr h, string m, string c, int type);&lt;br&gt;&lt;br&gt;    static void Main(string[] args)&lt;br&gt;    \{&lt;br&gt;      MessageBox(IntPtr.Zero, "hello world", "My Message Box", 0);&lt;br&gt;    }&lt;br&gt;  }&lt;br&gt;}&lt;/pre&gt;
![image](https://user-images.githubusercontent.com/17056651/44694435-464f1d00-aa22-11e8-8b6b-d8e17c16ce76.png)

Jinu Joseph [MSFT] on 8/5/2018, 10:52 PM (21 days ago): &lt;p&gt;thanks much for the example, we will investigate the issue&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>28/08/2018</CreatedDate>
        <ClosedDate>09/03/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30651</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>[WIP] Don't Debug.Assert in ChangedText.GetTextChanges</Title>
    <Description>Resolves #26305 

This solution is pretty naive but is intended to follow @heejaechang's suggestion. The changes that result from running the `WithChanges` test don't match what I predicted, as someone who has only started to touch this API in the last week or so. Specifically, there's no list entry that matches the deletion of the `"Console"` substring in the source text.

I'd greatly appreciate the chance to go over what ChangedText.Merge is really doing with someone who's familiar with it. :)</Description>
    <CreatedDate>22/10/2018</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30651</PullRequestID>
        <IssueID>26305</IssueID>
        <Title>ChangedText.GetTextChanges should not assert</Title>
        <Description>``

add this test and run. then, this will assert
http://source.roslyn.io/#Microsoft.CodeAnalysis/Text/ChangedText.cs,375

this should return full file content as changed if it can't figure out text changes between 2 given SourceText.

our SourceText doesn't have concept of before or after text like editor's ITextImage (there is no prevous or next pointer in SourceText or versioning). ChangedText implementation of SourceText internally seems have that info, but that shouldn't leak out to outside.</Description>
        <CreatedDate>21/04/2018</CreatedDate>
        <ClosedDate>20/10/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30391</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>alatas</FixedByID>
    <Title>#29938 changes for Turkish input issue</Title>
    <Description>I changed discussed lines, added missing tests, and synced tests between C# and VB for Turkish character issue #29938 </Description>
    <CreatedDate>09/10/2018</CreatedDate>
    <ClosedDate>19/10/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30391</PullRequestID>
        <IssueID>29938</IssueID>
        <Title>Intellisense mismatches "i" letter when current culture is Turkish (tr-TR)</Title>
        <Description>**Version Used** : 15.8.4

In Turkish, i and I characters are different. i is the lowercase form of İ, and I is the uppercase form of ı. Because of this disparity, Intellisense mismatches "i" letter when system culture is set to Turkish (tr-TR). 

When you type "if", Intellisense match any word starts with i but not I (ex. "If"). When you type "if" and space, it changes "if" to smth else that matches first but not "If". 

It becomes very annoying especially in VB, because "if" starts with uppercase in VB. That does not cause much problem in C#.

I identified the source code, found the problem and corrected it. It's needed to change string match culture to invariant. I will open a pull request and refer to this issue.</Description>
        <CreatedDate>17/09/2018</CreatedDate>
        <ClosedDate>23/10/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Globalization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37516</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Handle speculation for AsNewClause by generating an EqualsValue node</Title>
    <Description>CreateSpeculativeSemanticModelForNode will create a speculativeModel from a generated EqualsValue node already, but the Type node we are searching for won't be part of the tree. So we generate the EqualsValue node instead and find the Type node so that we can get symbol information.

Fixes #23807</Description>
    <CreatedDate>26/07/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37516</PullRequestID>
        <IssueID>23807</IssueID>
        <Title>VB: GenerateConstructorCodeFixProvider should not crash when code has semantic errors.</Title>
        <Description>**Version Used**: 

Visual Studio Community 2017 v15.5.1

**Steps to Reproduce**:

Type in the following code in a VB console project:

``

**Expected Behavior**:

It should not crash. I have used the `GenerateConstructorCodeFixProvider` many times and I usually trigger it by placing the caret on a blank line within the class just after the fields/properties. In fact you can trigger it without crashing in the sample code above, if you do this by placing the caret in the blank below `Private bar As String`. However the moment you hover the cursor over the red squiggly line, it crashes.</Description>
        <CreatedDate>15/12/2017</CreatedDate>
        <ClosedDate>07/08/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Community</Label>
          <Label>Developer Community</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37513</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Handle checking for language version in speculative semantic model</Title>
    <Description>Asking for Location.SourceTree may not produce a syntax tree, even if there
is a backing syntax tree, because a speculative tree node may produce NoLocation
when asked for one, even if there is a backing tree. This change stops us from
trying to do the SyntaxTree-&gt;Location-&gt;SyntaxTree roundtrip because it's not guaranteed
to succeed.

Fixes #37454</Description>
    <CreatedDate>26/07/2019</CreatedDate>
    <ClosedDate>30/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37513</PullRequestID>
        <IssueID>37454</IssueID>
        <Title>Renaming a variable when range syntax is in use results in crash</Title>
        <Description>I'm not positive that this is an issue with Roslyn rather than Visual Studio, but I'm reporting it here just in case.  I initially reported it on the [Feedback Hub](https://developercommunity.visualstudio.com/content/problem/645303/multiple-c-8-issues-intellisense-breaks-gathering.html), but it was marked as low priority ("Under Consideration").

* Visual Studio 2019.3.0 Preview 1.0 (prior preview versions also exhibit the issue)
* .NET Core 3.0.0-preview7 (prior preview versions also exhibit the issue)
* C# 8.0 preview

If I attempt to rename `bar` to `foobar` in the following code by putting my cursor within it, pressing F2, and typing `foobar`, Visual Studio will immediately crash without showing an error dialog as soon as I've typed `foo`. Any unsaved changes will be lost. Normally, Visual Studio would report that there's a conflict when I reach `foo`, then allow me to continue typing the rest of the variable name; however, in this context, it crashes. If I change `data[..2]` to `data.Slice(0, 2)`, Visual Studio doesn't crash, and the rename is successful.

``</Description>
        <CreatedDate>24/07/2019</CreatedDate>
        <ClosedDate>30/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37507</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Report WRN_UninitializedNonNullableField for uninitialized static members</Title>
    <Description>Fixes #34668</Description>
    <CreatedDate>26/07/2019</CreatedDate>
    <ClosedDate>28/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37507</PullRequestID>
        <IssueID>34668</IssueID>
        <Title>No warning on uninitialized static non-nullable fields?</Title>
        <Description>**Version Used**:
3.0.0-beta4-19170-01+1deafee3682da88bf07d1c18521a99f47446cee8

**Repro**:
``
There's no warning here, but it will obviously null ref.  Shouldn't there be a warning for a non-nullable static field that's not initialized as part of the declaration or a static cctor?

cc: @cston, @jaredpar, @danmosemsft, @dotnet/nullablefc</Description>
        <CreatedDate>02/04/2019</CreatedDate>
        <ClosedDate>28/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37493</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Don't drop a token passed to a syntax factory method.</Title>
    <Description>Fixes #37467

@dotnet/roslyn-compiler May I please have a couple of reviews for this one-line bug fix for 16.3?
</Description>
    <CreatedDate>26/07/2019</CreatedDate>
    <ClosedDate>26/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37493</PullRequestID>
        <IssueID>37467</IssueID>
        <Title>SyntaxFactory.MethodDeclaration bug</Title>
        <Description>**Version Used**: 
v3.1.0 Microsoft.CodeAnalysis.CSharp

**Steps to Reproduce**:
Use `SyntaxFactory.MethodDeclaration(SyntaxList&lt;AttributeListSyntax&gt;, SyntaxTokenList, TypeSyntax, ExplicitInterfaceSpecifierSyntax, SyntaxToken, TypeParameterListSyntax, ParameterListSyntax, SyntaxList&lt;TypeParameterConstraintClauseSyntax&gt;, BlockSyntax, SyntaxToken)` overload

**Expected Behavior**:
Semicolon SyntaxToken passed to wrapped method

**Actual Behavior**:
Semicolon SyntaxToken replaced with `default(SyntaxToken)`

Checked IL in downloaded nugget package to verify issue.</Description>
        <CreatedDate>25/07/2019</CreatedDate>
        <ClosedDate>26/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37488</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Use signature return type to determine task type in NullableWalker</Title>
    <Description>`_methodSignatureOpt.ReturnType` might differ from `((MethodSymbol)_symbol).ReturnType` in the case of errors in method inference with lambdas.

Fixes #37269</Description>
    <CreatedDate>25/07/2019</CreatedDate>
    <ClosedDate>26/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37488</PullRequestID>
        <IssueID>37269</IssueID>
        <Title>Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Symbols.SubstitutedTypeParameterSymbol' to type 'Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol'</Title>
        <Description>**Version Used**: Microsoft (R) Visual C# Compiler version 3.100.19.22309 (ce8ac3f7)

Visual Studio crashes when trying to type out the following. While there are compile errors (you haven't finished typing) VS is very sluggish and then crashes.

``

Full stack trace: https://pastebin.com/raw/1QY6hnEx</Description>
        <CreatedDate>16/07/2019</CreatedDate>
        <ClosedDate>26/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37459</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Support local constants being captured in static local functions</Title>
    <Description>Fixes #36091</Description>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37459</PullRequestID>
        <IssueID>36091</IssueID>
        <Title>static local function compilation error while referencing constants</Title>
        <Description>**Version Used**: 
VS 16.1.1 stock compiler (ie no NuGet compiler packages)

**Steps to Reproduce**:

``

Note that this was only observed after following the automatic static function refactoring, which correctly added the `static` modifier on the function and nothing else, so the refactoring engine is also expecting this to work. 
</Description>
        <CreatedDate>31/05/2019</CreatedDate>
        <ClosedDate>25/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37450</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Fix region tracking for regions with local functions</Title>
    <Description>Fixes #37427

/cc @agocke
@CyrusNajmabadi I suspect this will address the anomaly you are seeing in your PR.</Description>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>26/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37450</PullRequestID>
        <IssueID>37427</IssueID>
        <Title>Region analysis gives incorrect results in the presence of local functions</Title>
        <Description>Region analysis gives incorrect results in the presence of local functions.  The implementation does not properly track the start and end of the region, resulting in incorrect results.

See also https://github.com/dotnet/roslyn/issues/37421 https://github.com/dotnet/roslyn/issues/19497

/cc @CyrusNajmabadi @agocke 

``
</Description>
        <CreatedDate>23/07/2019</CreatedDate>
        <ClosedDate>26/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-API</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37445</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Add IMethodSymbol.Construct overload with nullable annotations</Title>
    <Description>Fixes #37310
Fixes #37279</Description>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37445</PullRequestID>
        <IssueID>37310</IssueID>
        <Title>IMethodSymbol.Construct doesn't have a way to pass top-level nullability</Title>
        <Description>This is the same as #36046 but for IMethodSymbol.</Description>
        <CreatedDate>17/07/2019</CreatedDate>
        <ClosedDate>25/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37445</PullRequestID>
        <IssueID>37279</IssueID>
        <Title>NamedTypeSymbolWithNullableAnnotation.Construct(ImmutableArray&lt;ITypeSymbol&gt;, ImmutableArray&lt;NullableAnnotation&gt;) drops top-level nullability</Title>
        <Description>`NamedTypeSymbolWithNullableAnnotation.Construct(ImmutableArray&lt;ITypeSymbol&gt;, ImmutableArray&lt;NullableAnnotation&gt;)` drops top-level nullability.

See https://github.com/dotnet/roslyn/pull/37271#discussion_r304076179</Description>
        <CreatedDate>16/07/2019</CreatedDate>
        <ClosedDate>25/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37431</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Use NullableAnnotation.NotAnnotated for value types</Title>
    <Description>Use `NullableAnnotation.NotAnnotated` always for value type annotations in the public API.

Previously, the annotation was `NotAnnotated` if the type reference was from source and `Disabled` if the type reference was from metadata.

Fixes #34412</Description>
    <CreatedDate>23/07/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37431</PullRequestID>
        <IssueID>34412</IssueID>
        <Title>Use a single representation of non-nullable value types in the compiler</Title>
        <Description>``

For the above code, `FieldSymbol.TypeWithAnnotations` is different for the field `i` between source and metadata. When the `FieldSymbol` is created from source, it has a `TypeWithAnnotations` of `NotAnnotated`. When the `FieldSymbol` is parsed from metadata, it has a `TypeWithAnnotations` of `Oblivious`. This is because we don't emit a `Nullable` attribute for the field, as it's a value type and can never be null. We should make our handling of these consistent between source and metadata, as this will affect the public API.</Description>
        <CreatedDate>25/03/2019</CreatedDate>
        <ClosedDate>25/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Semantic Model</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37373</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Handle reduced extension method invocations in remove unused member a…</Title>
    <Description>…nalyzer

Fixes #37213</Description>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>19/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37373</PullRequestID>
        <IssueID>37213</IssueID>
        <Title>False positive for IDE0051 with Private &lt;Extensions&gt;</Title>
        <Description>**Version Used**: 
VS 2019 16.2.0 Preview 3.0
**Steps to Reproduce**:
![image](https://user-images.githubusercontent.com/12789369/61180349-d6aa3800-a5c9-11e9-94c7-73750e8b8ed3.png)
Create module with the Private &lt;Extensions"&gt;, CodeLens shows they are referenced and you can see the first references the second.
If you remove the \&lt;Extension\&gt; and call the routine the issue goes away. This seems to only happen with Private extensions
**Expected Behavior**:
IDE0051 would not show up
**Actual Behavior**:
IDE0051</Description>
        <CreatedDate>14/07/2019</CreatedDate>
        <ClosedDate>19/07/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37370</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>🚧 Remove broken PackageReference heuristic and prevent incorrect framework assembly references</Title>
    <Description>See #37246

🚧 I'm expecting tests to fail in CI that I need to mark as skipped...</Description>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37370</PullRequestID>
        <IssueID>37246</IssueID>
        <Title>Type finding in DLLs and reference additions is unintuitive/brittle</Title>
        <Description>**Visual Studio Version**: 16.2 Preview 3

**Summary**:
When using IntelliSense to find a type (first thought to be the result of a missing `using`), Visual Studio helpfully finds the DLL. However, the result of this operation is probably not one we'd ever desire to happen: a direct DLL reference added to the .csproj.

**Steps to Reproduce**:
1. Add a type from an non-referenced package. I was adding `IMemoryCache`.
2. `Ctrl+.` on the not-found `IMemoryCache`
3. Select "Add Reference to 'Microsoft.Extensions.Caching.Abstractions.dll'" from the fixes list.

**Expected Behavior**:
Ideally, this would offer to add `&lt;PackageReference Include="Microsoft.Extensions.Caching.Abstractions"... /&gt;` instead, or suggest `&lt;FrameworkReference /&gt;`.

**Actual Behavior**:
A direct DLL reference is added to the `.csproj`:
``

**User Impact**:
It works...but in a very brittle, undesirable way. The app would very likely break when deployed.

**Screenshots**:
![image](https://user-images.githubusercontent.com/454813/61178120-0f3f1700-a5b4-11e9-84b7-7f2671e17765.png)
![image](https://user-images.githubusercontent.com/454813/61178123-1534f800-a5b4-11e9-9309-889b40952258.png)

cc @davkean</Description>
        <CreatedDate>14/07/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Blocked</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37359</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gundermanc</FixedByID>
    <Title>WIP: Expose Roslyn OOP as a limited LSP server supporting code search via extended LSP</Title>
    <Description>Polish for @olegtk's PR #37190... I don't have permissions to push directly to the existing PR.

This prototype exposes RoslynCodeAnalysis service hub service as a limited LSP server supporting only extended (streaming) version of LSP's workspace symbol search. This allows Roslyn to support VS search on par with GoTo.

More context: VS Search (former Quick Launch) public extensibility is LSP only, it supports both standard workspace/symbol and extended workspace/beginSymbol and workspace/publishSymbol (not yet documented). Standard LSP's workspace/symbol doesn't support streaming of results yet (expected in next version via microsoft/vs-streamjsonrpc#139), that's why until it does we need to extend LSP with workspace/beginSymbol.

This implementation is reusing AbstractNavigateToSearchServic, just like GoTo, but unlike GoTo it uses PrimaryWorkspace as LSP doesn't support workspace synchronization.

Initialization of this Roslyn LSP server is left to VS LSP client for now, it will initialize it when user starts interacting with VS Search (based on "Capability" metadata).</Description>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>31/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37359</PullRequestID>
        <IssueID>37190</IssueID>
        <Title>Expose Roslyn OOP as a limited LSP server supporting code search via extended LSP</Title>
        <Description>This prototype exposes RoslynCodeAnalysis service hub service as a limited LSP server supporting only extended (streaming) version of LSP's workspace symbol search. This allows Roslyn to support VS search on par with GoTo.

More context: VS Search (former Quick Launch) public extensibility is LSP only, it supports both standard workspace/symbol and extended workspace/beginSymbol, workspace/publishSymbol, workspace/completeSymbol (not yet documented). Standard LSP's workspace/symbol doesn't support streaming of results yet (expected in next version via https://github.com/microsoft/vs-streamjsonrpc/issues/139), that's why until it does we need to extend LSP with workspace/beginSymbol.

This implementation is reusing AbstractNavigateToSearchServic, just like GoTo, but unlike GoTo it uses PrimaryWorkspace as LSP doesn't support workspace synchronization.

Initialization of this Roslyn LSP server is left to VS LSP client for now, it will initialize it when user starts interacting with VS Search (based on "Capability" metadata).</Description>
        <CreatedDate>12/07/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Community</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37359</PullRequestID>
        <IssueID>139</IssueID>
        <Title>C# Support for First Class Delegation</Title>
        <Description>The delegation pattern is a very common alternative to inheritance for sharing a common implementation of an interface. However in C# utilizing delegation is very heavy weight requiring lots of boiler point code which could easily be generated by the compiler. The [Kotlin](http://kotlinlang.org/docs/reference/delegation.html) language includes such a feature which greatly reduces the effort and cost of utilizing the pattern. It would be great if C# 7 included such a feature as well. 
</Description>
        <CreatedDate>29/01/2015</CreatedDate>
        <ClosedDate>21/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Language Design</Label>
          <Label>Discussion</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
          <Label>Resolution-Duplicate</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37351</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Update the LangVersion and Nullable command line text</Title>
    <Description>Fixes #33821</Description>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>20/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37351</PullRequestID>
        <IssueID>33821</IssueID>
        <Title>help message for langversion isn't updated</Title>
        <Description>**Version Used**: 

csc 3.0.19.12206 (ec366687)
(installed with Visual Studio 2019 RC)

**Steps to Reproduce**:

Show csc help message.

**Expected Behavior**:

Help message for `-langversion` should refer to `latestMajor` and `preview`, and describe `default` as latest including minor.

**Actual Behavior**:

The message isn't updated: https://github.com/dotnet/roslyn/blob/2566316b364148050f60e83bc9a6c73e73209114/src/Compilers/CSharp/Portable/CSharpResources.resx#L4625
</Description>
        <CreatedDate>02/03/2019</CreatedDate>
        <ClosedDate>20/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Documentation</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37330</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Fix InvalidOperationException in AbstractRemoveUnusedParametersAndVal…</Title>
    <Description>…uesDiagnosticAnalyzer.ShouldReportUnusedParameters

We recently changed the enum values for `UnusedParametersPreference` (see https://github.com/dotnet/roslyn/commit/ee61cc53ff02b55df8c9d756235c0e1085dafa4b), which seems to lead to this exception if customers had explicitly changed this option in the Tools Option page prior to that fix. I have changed the code to be much more defensive.

Fixes #37326</Description>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37330</PullRequestID>
        <IssueID>37326</IssueID>
        <Title>InvalidOperationException from CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer</Title>
        <Description>I'm seeing this message a lot in the Error List:

&amp;gt;Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'This program location is thought to be unreachable.'.

There's no file/llne reference for this message pointing to something that might need fixing.
 
The longer I run VS, the more instances of this message I see (i'm up to 10 now) and the only way I've found to get rid of them is to restart VS.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/649894/invalidoperationexception-from-csharpremoveunusedp.html
VSTS ticketId: 948443_
_These are the original issue comments:_

Visual Studio Feedback System on 7/18/2019, 01:40 AM (6 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;
&lt;/markdown&gt;
Visual Studio Feedback System on 7/18/2019, 06:32 AM (73 min ago): &lt;markdown&gt;&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>18/07/2019</CreatedDate>
        <ClosedDate>18/07/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37323</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>diryboy</FixedByID>
    <Title>Add ref and qualified generic name detection for SpeculativeT completion.</Title>
    <Description>Fixes #37224 
Fixes #37268 
Fixes #37361 </Description>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37323</PullRequestID>
        <IssueID>37224</IssueID>
        <Title>Intellisense not listing "T" when starting to write a ref return method</Title>
        <Description>**Version Used**: 
VS16.1.6

**Steps to Reproduce**:

1. Inside a C# class, type `ref Span&lt;T&gt;`

**Expected Behavior**:

`ref Span&lt;T&gt;`

**Actual Behavior**:

`ref Span&lt;ThreadStaticAttribute&gt;`</Description>
        <CreatedDate>15/07/2019</CreatedDate>
        <ClosedDate>08/08/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-IntelliSense</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37323</PullRequestID>
        <IssueID>37268</IssueID>
        <Title>Intellisense not listing "T" when starting to write a qualified return type</Title>
        <Description>**Version Used**: 16.2 Preview 3

:link: Found while reviewing #37224

**Steps to Reproduce**:

1. Inside a C# class, type `System.Span&lt;T&gt;`

**Expected Behavior**:

`System.Span&lt;T&gt;`

**Actual Behavior**:

`System.Span&lt;ThreadStaticAttribute&gt;`</Description>
        <CreatedDate>16/07/2019</CreatedDate>
        <ClosedDate>08/08/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-IntelliSense</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37323</PullRequestID>
        <IssueID>37361</IssueID>
        <Title>SpeculativeT completion does not support tuples.</Title>
        <Description>This is found during review of #37323

**Version Used**:
VS16.2 

**Steps to Reproduce**:

1. Inside a C# class, type `(T `

**Expected Behavior**:

`(T )`

**Actual Behavior**:

`(ThreadStaticAttribute )`</Description>
        <CreatedDate>19/07/2019</CreatedDate>
        <ClosedDate>08/08/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37320</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Delay pointer managed type check on type members until after binding</Title>
    <Description>Fixes #37051 by delaying the CheckManagedAddr check on pointers in type members until after type members are bound. Here is the scenario fixed by this change:

```cs
public unsafe class A
{
    public virtual T* M&lt;T&gt;() where T : unmanaged =&gt; throw null!;
}

public unsafe class B : A
{
    // before this we would crash when checking the unmanaged constraint on `T*`
    public override T* M&lt;T&gt;() =&gt; throw null!;
}
```

Similar to other scenarios where we delay constraint checking, this change makes it impossible to detect the illegal usage of a pointer type a la the following:

```cs
class A { public class B { } }
class C&lt;T&gt; : A { }

class Test
{
    // today this gives ErrorCode.ERR_ManagedAddr,
    // but in post-binding checks the type is seen as `A.B` so there's nothing to error about
    C&lt;object*&gt;.B f;
}
```

The fact that `Test.f` resolves to type `A.B` can be verified in the IL produced by this compiler:
```cil
.class private auto ansi beforefieldinit Test
	extends [mscorlib]System.Object
{
	// Fields
	.field private class A/B f

        // constructor, etc...

} // end of class Test
```</Description>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37320</PullRequestID>
        <IssueID>37051</IssueID>
        <Title>Compiler crash when overriding method that returns a generic pointer</Title>
        <Description>**Version Used**: 

3.100.19.26603 (9d80dea7)

**Steps to Reproduce**:

1. Create a base class with an abstract method that returns a `T*` (of course `where T : unmanaged`).
2. Create a derived class that overrides that method.

Or you can just compile a .cs file with this code:

``

**Expected Behavior**:

The compiler should accept this program (if it is correct) or print a diagnostic (if it is incorrect).

**Actual Behavior**:

The compiler crashes. When used from Visual Studio, the IDE abruptly shuts down. When used from VS Code, the editor shows the text `!!MISSING: command!!` above the offending methods.</Description>
        <CreatedDate>08/07/2019</CreatedDate>
        <ClosedDate>07/08/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37319</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>petrroll</FixedByID>
    <Title>Syntax kinds service cleanup </Title>
    <Description>New PR due to devops issues #37236</Description>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37319</PullRequestID>
        <IssueID>37236</IssueID>
        <Title>Syntax kinds service cleanup</Title>
        <Description>Based on #37196 (only last commit is new).
</Description>
        <CreatedDate>15/07/2019</CreatedDate>
        <ClosedDate>18/07/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37312</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Fix make method async/sync and some related code fixes</Title>
    <Description>Fixes #30325.</Description>
    <CreatedDate>17/07/2019</CreatedDate>
    <ClosedDate>30/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37312</PullRequestID>
        <IssueID>30325</IssueID>
        <Title>MakeMethodAsync isn't aware of nullability</Title>
        <Description>![image](https://user-images.githubusercontent.com/12466233/46498620-d2e3bc80-c7d2-11e8-8fe2-6d7a267eb24d.png)

FYI @dpoeschl </Description>
        <CreatedDate>04/10/2018</CreatedDate>
        <ClosedDate>30/07/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37303</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Analyzer driver performance fixes for IDE open file analysis</Title>
    <Description>IDE analyzer host invokes [CompilationWithAnalyzers.GetAnalyzerSemanticDiagnosticsAsync](http://source.roslyn.io/#q=CompilationWithAnalyzers.GetAnalyzerSemanticDiagnosticsAsync) APIs to compute open file semantic diagnostics. This PR performs the following optimizations on this code path:
1. `AnalysisState.PerAnalyzerState`: Delay allocations of per-symbol dictionary values stored in `_pendingDeclarations` map until we actually start analyzing the first declaration for the symbol. This avoids unncessary allocation overhead on the dictionary pool from which these dictionaries are allocated.
2. `CompilationWithAnalyzers` and `AnalyzerDriver`: Ensure that we force complete partial type trees only for symbol start analyzer(s) in the original analysis scope for which diagnostics were requested. Our current logic force completed partial tree diagnostics for all analyzers if at least one of the analyzer is a symbol start analyzer, which is always true as IDE already has few symbol start analyzers.

Addresses VS Feedback performance issues [#922802](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/922802) and [#922837](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/922837)

**NOTE:** ~~This PR currently targets master branch, but we need to decide if this meets the current 16.3 bar as the code changes are in the compiler layer, even though the affected code path/APIs are only ever invoked during IDE open file analysis.~~ Retargeted to `features/compilerNext` based on offline discussion.</Description>
    <CreatedDate>17/07/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>37301</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Syntax factory for switch statement adds parens when needed.</Title>
    <Description>Fixes #33685

/cc @jcouv @agocke 
</Description>
    <CreatedDate>17/07/2019</CreatedDate>
    <ClosedDate>20/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37301</PullRequestID>
        <IssueID>33685</IssueID>
        <Title>SyntaxFactory.SwitchStatement without parentheses in VS 2019 Preview 3</Title>
        <Description>**Version Used**: 
Visual Studio 2019 Preview 3
**Steps to Reproduce**:

1. Use SyntaxFactory.SwitchStatement(ExpressionSyntax) (C#)

**Expected Behavior**:
The switch statement should surround the expression with parentheses

**Actual Behavior**:
The expression inserts without parentheses

Inside the Visual Studio 2017 (15.9.7) the expression correctly inserts with parentheses but in VS 2019 Preview 3 not. If we manually add parentheses, then in VS 2017, double parentheses will be inserted.</Description>
        <CreatedDate>26/02/2019</CreatedDate>
        <ClosedDate>20/07/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Documentation</Label>
          <Label>Regression</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37290</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>Fully qualify unimported type name when in import directive</Title>
    <Description>Fix #37038
Fix #37523</Description>
    <CreatedDate>17/07/2019</CreatedDate>
    <ClosedDate>31/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37290</PullRequestID>
        <IssueID>37038</IssueID>
        <Title>Completion for "Show items from unimported namespaces" within a using alias results in unbuildable code</Title>
        <Description>Using aliases need to full specify types used as generic arguments. "Show items from unimported namespaces" is unaware of that and attempts to add a using directive, which still results in a build error.

**Steps to Reproduce**:

``

tag @genlu </Description>
        <CreatedDate>08/07/2019</CreatedDate>
        <ClosedDate>31/07/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-IntelliSense</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37290</PullRequestID>
        <IssueID>37523</IssueID>
        <Title>Intellisense for using static adds an import rather than a full qualification</Title>
        <Description>**Version Used**: VS 16.3 preview 1

**Steps to Reproduce**:

![usingStatic](https://user-images.githubusercontent.com/29174528/62006252-19c1ea80-b136-11e9-814d-cd33a63ecd22.gif)

Make sure "Show Items From Unimported Namespaces" is switched on in `Tools-&gt;options-&gt;Text Editor-&gt;C#-&gt;Intellisense`

at the top of a file start typing `using static &lt;SomeType&gt;`
When intellisense shows up for `&lt;SomeType&gt;` press enter.

**Expected Behavior**:

The file now shows 
``
</Description>
        <CreatedDate>28/07/2019</CreatedDate>
        <ClosedDate>31/07/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37283</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Respect root editorconfig files when getting options for a file</Title>
    <Description>Walk the AnalyzerConfigDocuments from most nested to least nested. Check each applicable editorconfig for whether it is the root or not before continuing.

Fixes #37282</Description>
    <CreatedDate>16/07/2019</CreatedDate>
    <ClosedDate>20/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37283</PullRequestID>
        <IssueID>37282</IssueID>
        <Title>Compiler EditorConfig support does not respect `root = true`</Title>
        <Description>When determining AnalyzerOptions for a source file. We should not add options from an .editorconfig files above a rooted .editorconfig.

**Steps to Reproduce**:

1. Open Roslyn master in VS
2. Open AnalyzerConfigTests.cs
3. Add the following test
``</Description>
        <CreatedDate>16/07/2019</CreatedDate>
        <ClosedDate>20/07/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37272</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>petrroll</FixedByID>
    <Title>Move some ComputeRefactoringsAsync to common helpers 4/n</Title>
    <Description>Work for: #35525 and #35180

Based on (previous) PRs: #37236 (and thus subsequently on #37196)</Description>
    <CreatedDate>16/07/2019</CreatedDate>
    <ClosedDate>19/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37272</PullRequestID>
        <IssueID>35525</IssueID>
        <Title>Improve discoverability of code refactorings</Title>
        <Description>A bunch of recent customer surveys done by @kendrahavens identified that quite a few customers find our refactorings to be not discoverable. The refactorings that they requested were already implemented by us, but they needed Kendra to point out where to put the cursor or how to change the selection span for these to show up in the light bulb menu. The same concern does not apply to code fixes due to visual cue from the squiggle/suggestion dots in the UI, and pressing Ctrl + dot anywhere on the line shows up the fix, ordering being based on the distance from the diagnostic span. Note that the primary reason why we don't show up all the refactorings available on a given line are to avoid overloading the light bulb menu, which is already quite noisy. We need to fine tune the experience here to find a balance between discoverability of actions and overloading the light bulb menu.

We have talked about adding 2 different discoverability enhancements to address these concerns:

1. **Show additional actions in light bulb menu**
Improve the discoverability of the refactorings in the light bulb, by showing additional, but likely less relevant actions, that are applicable for positions _near_ the current cursor or selection span. Most relevant refactorings would still be show at the top of the menu and these additional actions will either be shown at the bottom of the menu or nested within a separate menu towards the bottom. Internal discussions have led to bunch of different implementation suggestions on how to achieve this (discussed below), but the primary conclusion being that we need to somehow _associate a fix span/ideal span with each registered code action within a refactoring, so the engine can prioritize the ordering and/or nesting of these refactorings based on promixity of this span with current cursor position or selection span_.
Possible implementation approaches that came out:
   1. **Implementation 1**: Convert all the IDE refactorings that are not selection based into a pair of diagnostic analyzer reporting hidden diagnostics + code fix. The diagnostic span would be the ideal span for the code actions.

      PROS:
         1. All refactorings available on any position in a line show up in the light bulb, solving the discoverability concerns. 
         2. We get other useful analyzer/fixer features for free: fix all, ability to bump up the severity to see squiggles/error list entries across a wider scope, etc.

      CONS:
         1. Likely to overload the light bulb menu with lot more actions now showing up. If so, one option might be to move all the code actions registered for hidden diagnostics whose span does not intersect with current position into a nested menu near the bottom of the light bulb menu.
         2. This approach adds quite a bit of implementation cost as we need to refactor code in each code refactoring into a pair of diagnostic analyzer/code fix.

   2. **Implementation 2**: Currently, the refactoring service executes naively for identifying available actions for current cursor position or span. It passes in the entire line span or selection span into each refactoring, and then treats all registered refactorings to be on par with each other. This forces our refactorings to then be implemented in a restrictive manner, so they are not offered everywhere on the line and do not overload the light bulb menu. This whole setup relies on the assumption that users are already aware about where to put their cursor or what span to select to get the relevant refactorings, which does not seem to be true as mentioned at the start of this post. This proposal tries to remove this assumption by making the following changes:
      1. Change the code refactoring service to perform multiple passes instead of just one. It first identifies the current token/node at the position or selection span and identifies available actions. These would be the most relevant refactorings that get offered at the top level of the light bulb menu. Then the service walks up the parent node and asks available actions for the parent and siblings of previous token/node. These actions would automatically be assigned a lower priority and will be shown under a nested menu near the bottom. These additional nearby actions would serve as a discoverability point for beginner users, while also not polluting the menu for advanced users.
      2. Change all the refactorings so they only register an action if the input text span exactly matches the token/node that is most relevant to it.

     PROS:
         1. We do not alter the existing light bulb menu significantly for advanced/experienced users, while adding a new discoverability point for beginner users to discover new potential actions in nearby locations.
         2. The implementation for each refactoring is greatly simplified and unified as they only work when input span exactly matches it's fixed span.

      CONS: 
         1. We might end up with a perf hit due to the code refactoring service doing multiple passes. We would need perf measurements to identify if this indeed a concern as most refactorings would just bail out upfront. 
         2. We need to experiment/decide if a nested menu is indeed a good discoverability point as beginner users might not know that they need to dive into a nested menu at the bottom.

   3. **Implementation 3**: Allow refactorings to specify a span in [RegisterRefactoring](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeRefactorings/CodeRefactoringContext.cs,51) callback. This would serve as the virtual diagnostic span for the code action. We would need to change all the refactorings to then operate on all the nodes/tokens of interest in the input context span and register refactorings for each node/token with their span. The code refactoring service would be changed to prioritize refactorings whose registered span is a close match to current position/span, and show the rest of refactorings in a nested menu or towards the bottom of the menu.

     PROS: Get the similar user experience as prior approaches, with potentially lesser implementation cost then approach i. and avoid multiple passes that are needed in approach ii.

     CONS: Adds implementation complexity in each refactoring of identifying multiple nodes/tokens of interest and then register each action with a span.

   4. **Implementation 4**: Enforce common [helpers](https://github.com/dotnet/roslyn/blob/master/src/Features/Core/Portable/CodeRefactoringHelpers.cs) that each code refactoring ought to use to determine it's applicability span and bail out if that is not the case. We need to ensure we polish and/or extend the existing helpers, make them public as appropriate and audit all existing or just the problematic refactorings to ensure they are using these helpers.

2. **New UI for viewing available actions in a broader scope**: Create a separate tool window to show available code actions within a given scope (document/project/solution, with document being the default). Few open questions:
   1. Should the refactorings shown in this window be opt-in to avoid polluting it with common refactorings that show up everywhere?
   2. Should the tool window automatically be opened and brought to focus when user invokes light bulb and/or applies a code action? If not, how would we make this UI discoverable for users?
   3. Should the actions list in the window be ordered such that the actions closer to current cursor are near the top?
   We would potentially start with a simple UI, that only works for document scope to start with, and iterate on improving it to work with broader scopes.
</Description>
        <CreatedDate>06/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37272</PullRequestID>
        <IssueID>35180</IssueID>
        <Title>Offer codefixes on selections</Title>
        <Description>## Scenario
Codefixes often don't show if code is selected as opposed to only having your cursor placed within a word.
*  **5 out of the 11 users struggled with this in user studies.** 
* One user **only** ever double-clicked when clicking around the editor. This means he saw fewer codefixes since double clicking always selects the word and we don't show available codefixes in the context. Some users are used to double-clicking around their codebase.

## Proposal
Enable the same codefixes to appear if a block is selected as would appear if the cursor was placed inside a specific name. If this improves discoverability of codefixes we can enable this on a case-by-case basis per refactoring. My study observed more issues with the 'pull members up to base type' refactoring than others though general struggling was observed with many refactorings.

**Example: Pull members up**
Codefix offered when cursor is in the name:
![image](https://user-images.githubusercontent.com/8293542/56520118-8bb3e380-64f8-11e9-94fa-b79c60ed7ddb.png)

Codefix not offered if full line is selected:
![image](https://user-images.githubusercontent.com/8293542/56520215-bf8f0900-64f8-11e9-9022-7a5ebd464553.png)

**Example: Convert local function to method**
Offered if cursor is in name
![image](https://user-images.githubusercontent.com/8293542/56520344-0d0b7600-64f9-11e9-8fb9-6ac6d7b8de69.png)

Not offered when entire local function is selected
![image](https://user-images.githubusercontent.com/8293542/56520368-1ac0fb80-64f9-11e9-92a4-49037caea806.png)

**Example: LINQ to Foreach conversions**
![image](https://user-images.githubusercontent.com/8293542/56521136-1517e580-64fa-11e9-828a-a23aa22d8ce2.png)

If semi-colon is included in selection the conversion does not appear:
![image](https://user-images.githubusercontent.com/8293542/56521033-00d3e880-64fa-11e9-849f-2cc7a675f3ff.png)







</Description>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>06/09/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37272</PullRequestID>
        <IssueID>37236</IssueID>
        <Title>Syntax kinds service cleanup</Title>
        <Description>Based on #37196 (only last commit is new).
</Description>
        <CreatedDate>15/07/2019</CreatedDate>
        <ClosedDate>18/07/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37272</PullRequestID>
        <IssueID>37196</IssueID>
        <Title>Move some ComputeRefactoringsAsync to common helpers 3/n</Title>
        <Description>Continuation of work on #35525 and #35180</Description>
        <CreatedDate>12/07/2019</CreatedDate>
        <ClosedDate>17/07/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37271</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Add INamedType.Construct overload with nullable annotations</Title>
    <Description>Fixes #36046</Description>
    <CreatedDate>16/07/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37271</PullRequestID>
        <IssueID>36046</IssueID>
        <Title>INamedTypeSymbol.Construct() does not have a way to pass in nested nullabilities</Title>
        <Description>INamedTypeSymbol.Construct() lets you take a generic type and construct a, well, constructed generic type. But you can't give nested nullabilities -- it needs an overload or way to pass them in.</Description>
        <CreatedDate>29/05/2019</CreatedDate>
        <ClosedDate>16/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-API</Label>
          <Label>New Language Feature - Nullable Semantic Model</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37270</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Enable code actions to configure code style options and diagnostic severity from light bulb</Title>
    <Description>Fixes #36330

Now that editorconfig discovery is enabled by default, we can enable the light bulb actions to configure code style options and diagnostic severity via editorconfig</Description>
    <CreatedDate>16/07/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37270</PullRequestID>
        <IssueID>36330</IssueID>
        <Title>Enable code actions to configure code style options and diagnostic severity from light bulb</Title>
        <Description>https://github.com/dotnet/roslyn/pull/35691 adds support for new code actions to configure code style options and diagnostic severity from light bulb, but the code actions were disabled by https://github.com/dotnet/roslyn/pull/35691/commits/55416aad645aee9556db2e77bd30b1999b509ed0 towards the end of the PR. Enabling these code actions is blocked on following items:

1. All the editorconfig features in compiler, project system and IDE layers are enabled by default. In absence of any of this hooks, the code action does not work as expected.
2. https://github.com/dotnet/roslyn/issues/35690 leads to the generated severity entries by this code action not being respected by the compiler.

Once the above two have been resolved, we should revert the following commits from https://github.com/dotnet/roslyn/pull/35691, which should enable the code actions and unskip relevant tests:
1. https://github.com/dotnet/roslyn/pull/35691/commits/55416aad645aee9556db2e77bd30b1999b509ed0
2. https://github.com/dotnet/roslyn/pull/35691/commits/1be6eafaf6b6b8033a183fc26cd8eca129cb1259</Description>
        <CreatedDate>11/06/2019</CreatedDate>
        <ClosedDate>20/08/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>37266</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>diryboy</FixedByID>
    <Title>Add ref var decl detection for for/foreach</Title>
    <Description>Fixes #37223
</Description>
    <CreatedDate>16/07/2019</CreatedDate>
    <ClosedDate>17/07/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>37266</PullRequestID>
        <IssueID>37223</IssueID>
        <Title>Intellisense not listing "var" when starting to write a foreach ref loop</Title>
        <Description>**Version Used**: 
VS16.1.6

**Steps to Reproduce**:

1. Type "foreach" and hit &lt;kbd&gt;tab&lt;/kbd&gt; twice
2. Type "ref var" and hit &lt;kbd&gt;tab&lt;/kbd&gt;

**Expected Behavior**:

``</Description>
        <CreatedDate>15/07/2019</CreatedDate>
        <ClosedDate>17/07/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36818</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Fix couple of false positives in unused parameter analyzer</Title>
    <Description>1. Do not flag parameters whose name has not yet been written (empty string). Fixes #36817
2. Do not flag parameters of partial method definition part. Fixes #36816</Description>
    <CreatedDate>27/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36818</PullRequestID>
        <IssueID>36817</IssueID>
        <Title>IDE0060 Remove Unused Parameter reported for code I'm still working on</Title>
        <Description>VSF_TYPE_MARKDOWNI'm adding a new parameter to a method that already exists. As I'm typing the type of the parameter, VS immediately suggests I should fix the &amp;quot;error&amp;quot; of having an unused parameter by suppressing the IDE0060 code warning. However, in this scenario I haven't even typed in the parameter's *name* yet, so there's no point warning me about an unused parameter because the code isn't even valid!

Please see the screenshot where I've typed in `IMemoryCache` as the type name for my constructor parameter, but I haven't typed in the parameter name. The suppression suggestion shouldn't show up until I at least have a variable name.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/586149/ide0060-remove-unused-parameter-reported-for-code.html
VSTS ticketId: 900624_
_These are the original issue comments:_

Visual Studio Feedback System on 5/29/2019, 01:18 AM (29 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 5/30/2019, 07:50 PM (27 days ago): &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/ . We'll keep you posted on any updates to this feedback.&lt;/p&gt;

Visual Studio Feedback System on 6/10/2019, 06:19 PM (16 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>27/06/2019</CreatedDate>
        <ClosedDate>29/06/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36818</PullRequestID>
        <IssueID>36816</IssueID>
        <Title>False positive of IDE0060 on a partial method with parameters</Title>
        <Description>VSF_TYPE_MARKDOWNWhen defining a partial method such as 

``
IDE0060 is shown in the messages with the suggestion to remove the parameter
This should not happen because the parameter can be needed in the real implementation.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/448246/false-positive-of-ide0060-on-a-partial-method-with.html
VSTS ticketId: 788478_
_These are the original issue comments:_

Johan Gillis on 2/11/2019, 01:21 AM (136 days ago): &lt;p&gt;another false positive:&lt;/p&gt;&lt;p&gt;following code gives: IDE0060 Remove unused parameter 'xyz' &lt;/p&gt;&lt;pre&gt;    Private Function ExtractInfo(xyz As XDocument) As String
        Dim txt = xyz.Root.&amp;lt;ad&amp;gt;.&amp;lt;title&amp;gt;.&amp;lt;tx&amp;gt;.Value &amp; vbCrLf
        Return txt
    End Function
&lt;br&gt;&lt;/pre&gt;

Visual Studio Feedback System on 2/19/2019, 06:58 PM (127 days ago): &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact.See details at:  https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2017#faq  . In case you need answers to common questions or need assisted support, be sure to use  https://visualstudio.microsoft.com/vs/support/  . We'll keep you posted on any updates to this feedback.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>27/06/2019</CreatedDate>
        <ClosedDate>29/06/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36799</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title> Skip BasicEditAndContinue tests</Title>
    <Description>Same as #36764 but merging into 16.3 p2</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36799</PullRequestID>
        <IssueID>36764</IssueID>
        <Title>Skip BasicEditAndContinue tests</Title>
        <Description>This is the first step outlined in #36763</Description>
        <CreatedDate>25/06/2019</CreatedDate>
        <ClosedDate>26/06/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36798</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Skip BasicEditAndContinue tests</Title>
    <Description>same as #36764 but merging into 16.3 P1</Description>
    <CreatedDate>26/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36798</PullRequestID>
        <IssueID>36764</IssueID>
        <Title>Skip BasicEditAndContinue tests</Title>
        <Description>This is the first step outlined in #36763</Description>
        <CreatedDate>25/06/2019</CreatedDate>
        <ClosedDate>26/06/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36764</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Skip BasicEditAndContinue tests</Title>
    <Description>This is the first step outlined in #36763</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36764</PullRequestID>
        <IssueID>36763</IssueID>
        <Title>BasicEditAndContinue Integration Tests Failing</Title>
        <Description>A recent update to the preview version of Visual Studio that is used for integration tests has caused Basic EnC tests to consistently fail. 

To unblock contributors we made the Integration tests non-required for PRs. 

- [x] We should instead Skip these tests.
- [x] Return Integration tests to their required state.
- [x] Unskip these tests when a fix is in place.</Description>
        <CreatedDate>25/06/2019</CreatedDate>
        <ClosedDate>03/07/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Integration-Test</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36761</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Do not warn about an oblivious mismatch for an explicitly implemented interface.</Title>
    <Description>Related to #35619.

Only the last commit needs a review, previous are coming from https://github.com/dotnet/roslyn/pull/35613.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>26/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36761</PullRequestID>
        <IssueID>35619</IssueID>
        <Title>Decide nullable context for implicit outer type</Title>
        <Description>``

Relates to https://github.com/dotnet/roslyn/pull/35613

Mads thinks this is likely a bug that should be fixed. The implicit behavior should match the explicit behavior.</Description>
        <CreatedDate>10/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36740</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Handle lazy loading of analyzer command handlers</Title>
    <Description>Fixes #36304</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36740</PullRequestID>
        <IssueID>36304</IssueID>
        <Title>Crash on right-click a analyse rule in Solution-Explorer</Title>
        <Description>Visual Studio crash when I right-click on a analyse rule in the solution explorer in a .NET Core 3.0 project. There is no additional information about the crash.

I have start Visual Studio with the `/Log` switch, but the log file contains no errors and no warnings and Visual Studio don't restart always.

Question: Is there another way to get a crash log from Visual Studio 2019?

I have noticed that the ruleset-window don't show the rule name of a changed rule and the rule-set window show only changed rules and not all rules. 

![2019-06-11 10_43_45-PowerCalculator](https://user-images.githubusercontent.com/17874713/59258569-817cae80-8c38-11e9-92e9-76285793db2a.png)

**Version Used**: 
Microsoft Visual Studio Professional 2019 Preview
Version 16.2.0 Preview 1.0
German language

**Steps to Reproduce**:
1. Start Visual Studio 2019 
2. Open a project with a AnlyseTools
3. Right-click on a rule in the Solution-Explorer

**Expected Behavior**:
* Don't crash on right-click a analyse rule in the Solution-Explorer and show the context menu for this rule

**Actual Behavior**:
* Crash on right-click a analyse rule in the Solution-Explorer

**Current workaround for me**
1. Start Visual Studio 2019 
2. Open a minimal project with a Anlysetools (.NET Standard 2.1)
3. Right-click on a rule in the Solution-Explorer (context menu is shown)
4. Open another project with Anlysetools (.NET Core 3.0)
5. Right-click on a rule in the Solution-Explorer (context menu is shown)
6. -&gt; works fine
</Description>
        <CreatedDate>11/06/2019</CreatedDate>
        <ClosedDate>25/06/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36734</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add workarounds to IDE analyzers for missing IOperation/CFG support for using declarations</Title>
    <Description>Workaround for #32100
1. https://github.com/dotnet/roslyn/commit/a08f86e3d5ec1701fc6ccd3c0e3538341832c2ad: Workaround in dispose analyzer
2. https://github.com/dotnet/roslyn/commit/b0a9514603afde201b10caf990e035fc5d92a2f1: Workaround in unused parameter/value analyzer</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36734</PullRequestID>
        <IssueID>32100</IssueID>
        <Title>Support BoundUsingLocalDeclarations in IOperation and CFG</Title>
        <Description>BoundUsingLocalDeclarations are currently implemented as OperationKind.None, and return the List of local declarations as its children. We should implement this correctly with an Operation node.

We should also support CFG correctly with using declarations. Currently we report the using declaration as OperationKind.None in a single block, and thus don't report the actual underlying block structure generated by lowering. 

[jcouv update:] When fixing this, let's also verify IDE behavior got fixed. For example https://github.com/dotnet/roslyn/issues/36502</Description>
        <CreatedDate>02/01/2019</CreatedDate>
        <ClosedDate>16/10/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>Feature - Flow Analysis</Label>
          <Label>Feature - IOperation</Label>
          <Label>New Language Feature - enhanced using</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36733</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Couple of AD0001 fixes for unused parameter analyzer</Title>
    <Description>1. https://github.com/dotnet/roslyn/commit/3146d928ef5eeb0244e34ea6536ade1069e8f844: Handle generic local function usages in finally region in symbol usage analysis. Fixes #36715

2. https://github.com/dotnet/roslyn/commit/ee61cc53ff02b55df8c9d756235c0e1085dafa4b: Fix AD0001 from unhandled UnusedParametersPreference. Fixes #34830</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36733</PullRequestID>
        <IssueID>36715</IssueID>
        <Title>ArgumentOutOfRangeException from CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer in AspNetCore solution </Title>
        <Description>**Version Used**: 
16.2 Preview 2

**Steps to Reproduce**:

1. Clone https://github.com/aspnet/AspNetCore and install dependencies
2. Enable full solution analysis.
3. Run `restore.cmd`
4. Open `src\MusicStore\MusicStore.sln`
5. Wait

**Expected Behavior**:
No `AD0001` failure

**Actual Behavior**:
``</Description>
        <CreatedDate>24/06/2019</CreatedDate>
        <ClosedDate>22/08/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36733</PullRequestID>
        <IssueID>34830</IssueID>
        <Title>Two AD0001 (unreachable and KeyNotFoundException) from valid code in CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer </Title>
        <Description>**Version Used**: 
16.0.0

**Steps to Reproduce**:

``
</Description>
        <Code>```csharp
using System;
using System.Threading.Tasks;

public interface IFoo { event Action Fooed; }

public sealed class C : IDisposable
{
    private readonly Task&lt;IFoo&gt; foo;

    public C(Task&lt;IFoo&gt; foo)
    {
        this.foo = foo;
        Task.Run(async () =&gt; (await foo).Fooed += fooed);
    }

    private void fooed() { }

    public void Dispose() =&gt; foo.Result.Fooed -= fooed;
}
```

Opening my solution with this file already open immediately results in two AD0001 diagnostics:
```
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'This program location is thought to be unreachable.'.	*		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: *
ISymbol: .ctor (Method)

System.InvalidOperationException: This program location is thought to be unreachable.
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.ShouldReportUnusedParameters(ISymbol symbol, UnusedParametersPreference unusedParametersPreference, ReportDiagnostic unusedParametersSeverity)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__55`2.&lt;ExecuteBlockActions&gt;b__55_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
```
and
```
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.Collections.Generic.KeyNotFoundException' with message 'The given key was not present in the dictionary.'.	*		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: *
IOperation: ExpressionStatement
SyntaxTree: *
SyntaxNode: Task.Run(async () =&gt; (await foo ... [ExpressionStatementSyntax]@[247..296) (12,8)-(12,57)

System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.
   at System.Collections.Immutable.ImmutableDictionary`2.get_Item(TKey key)
   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeExpressionStatement(OperationAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c.&lt;ExecuteOperationAction&gt;b__51_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
`</Code>
        <CreatedDate>08/04/2019</CreatedDate>
        <ClosedDate>25/06/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-CodeStyle</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36731</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Show nullability flow analysis in Quick Info</Title>
    <Description>If you mouse over a local, field, etc., and we have computed nullable flow analysis for it, we'll tell you whether the compiler thinks the item is null or not at that point.

![image](https://user-images.githubusercontent.com/201340/60065460-c123ab80-96b8-11e9-8dbf-a83c6bf3d1d1.png)

The symbol shown on the first line is always shown with the declared nullability; we decided to keep it that way out of concerns that it differing from the declared nullability (without a clear statement of what is different) would be too confusing -- a simple, straightforward sentence more easily expresses the message, and putting 'here' in the message clarifies that it's a piece of information depending on the exact invocation point, which is somewhat a first for Quick Info.

I don't like that this is rebinding the symbol after we lost it in the quick info infrastructure. There is more cleanup I'd like to do here of the Quick Info code but that'll wait for another PR -- it went into weeds far deeper than I expected at first.

Closes #36191.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36731</PullRequestID>
        <IssueID>36191</IssueID>
        <Title>QuickInfo should display null-state and declared type</Title>
        <CreatedDate>05/06/2019</CreatedDate>
        <ClosedDate>27/06/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>IDE-IntelliSense</Label>
          <Label>New Language Feature - Nullable Semantic Model</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36729</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>petrroll</FixedByID>
    <Title>Refact select fix foreach &amp; PullMemberUp</Title>
    <Description>Further work on #35180 

Based on #36592 that can't be merged due to conflicts described in #36697. 
Only the last commit is new.</Description>
    <CreatedDate>25/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36729</PullRequestID>
        <IssueID>35180</IssueID>
        <Title>Offer codefixes on selections</Title>
        <Description>## Scenario
Codefixes often don't show if code is selected as opposed to only having your cursor placed within a word.
*  **5 out of the 11 users struggled with this in user studies.** 
* One user **only** ever double-clicked when clicking around the editor. This means he saw fewer codefixes since double clicking always selects the word and we don't show available codefixes in the context. Some users are used to double-clicking around their codebase.

## Proposal
Enable the same codefixes to appear if a block is selected as would appear if the cursor was placed inside a specific name. If this improves discoverability of codefixes we can enable this on a case-by-case basis per refactoring. My study observed more issues with the 'pull members up to base type' refactoring than others though general struggling was observed with many refactorings.

**Example: Pull members up**
Codefix offered when cursor is in the name:
![image](https://user-images.githubusercontent.com/8293542/56520118-8bb3e380-64f8-11e9-94fa-b79c60ed7ddb.png)

Codefix not offered if full line is selected:
![image](https://user-images.githubusercontent.com/8293542/56520215-bf8f0900-64f8-11e9-9022-7a5ebd464553.png)

**Example: Convert local function to method**
Offered if cursor is in name
![image](https://user-images.githubusercontent.com/8293542/56520344-0d0b7600-64f9-11e9-8fb9-6ac6d7b8de69.png)

Not offered when entire local function is selected
![image](https://user-images.githubusercontent.com/8293542/56520368-1ac0fb80-64f9-11e9-92a4-49037caea806.png)

**Example: LINQ to Foreach conversions**
![image](https://user-images.githubusercontent.com/8293542/56521136-1517e580-64fa-11e9-828a-a23aa22d8ce2.png)

If semi-colon is included in selection the conversion does not appear:
![image](https://user-images.githubusercontent.com/8293542/56521033-00d3e880-64fa-11e9-849f-2cc7a675f3ff.png)







</Description>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>06/09/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36729</PullRequestID>
        <IssueID>36592</IssueID>
        <Title>Fix - local function - refactorings not available when selection is used </Title>
        <Description>WIP on fixing low-hanging fruits from #35180

Includes some new Helpers for determining whether current position/span is desirable for refactoring.</Description>
        <CreatedDate>19/06/2019</CreatedDate>
        <ClosedDate>25/06/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36729</PullRequestID>
        <IssueID>36697</IssueID>
        <Title>Merge master to release/dev16.3-preview1</Title>
        <Description>
This is an automatically generated pull request from master into release/dev16.3-preview1.

``

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>24/06/2019</CreatedDate>
        <ClosedDate>25/06/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>36718</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Unwrap nullability-wrapped symbols in object initializer completion </Title>
    <Description>This slipped through because we didn't have any tests at all for the case where we are using the type-inferrer to infer the case like:

    a = new A { B = { } }

where the inner one doesn't have a `new B` before it. The scenario wasn't new but just happened to be the precise case that was broken.

Fixes #36702</Description>
    <CreatedDate>24/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>36718</PullRequestID>
        <IssueID>36702</IssueID>
        <Title>CSharpSemanticModel.ToLanguageSpecific throws ArgumentException</Title>
        <Description>**Version Used**: VS 16.2 Preview 4 (29021.251.d16.2stg)

**Steps to Reproduce**:

1. Create a new C# console application (.NET Core or .NET Framework)
2. In the main method, type these characters individually (do not copy-paste): `var ts = new TraceSource("hi") {  Switch = { ` (trailing space should follow the open curly brace)

**Expected Behavior**:

Auto-completion assists in writing out the nested initializers by offering property names.

**Actual Behavior**:

Roslyn promptly throws an exception and offers no completion within the nested initializers. VS shows the exception as an infobar across the top, with an offer to view the log. 

![image](https://user-images.githubusercontent.com/3548/60021624-94877980-964f-11e9-9f87-574e80f78e2a.png)

Looking at the log file reveals the following callstack:

``

Even when I use copy-paste or edit an existing code block with a nested initializer like this to avoid the exception infobar being displayed, I still get no completion assist within this syntax.</Description>
        <CreatedDate>24/06/2019</CreatedDate>
        <ClosedDate>25/06/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>New Language Feature - Nullable Semantic Model</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35535</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Ignore annotations analyzing method calls for attributes</Title>
    <Description>Ignore annotations on method parameters when analyzing method calls within a `BoundAttribute`.

This is a simple solution to avoid cycles binding attributes at the expense of additional nullable warnings. The additional warnings should only occur in error cases.

Fixes #35056.</Description>
    <CreatedDate>06/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35535</PullRequestID>
        <IssueID>35056</IssueID>
        <Title>StackOverflow in NullableWalker for circular attributes</Title>
        <Description>### Repro

Compile the below code using the latest nightly and `LangVersion=preview` (this was specifically repro'd on `3.1.0-beta3-19213-02` and `3.1.0-beta3-19217-05`)

``

### Stack Trace

[StackTrace.txt](https://github.com/dotnet/roslyn/files/3089967/StackTrace.txt)
</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>07/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35508</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Don't emit readonly attributes on members within readonly structs</Title>
    <Description>Resolves #35114

This has a minor consequence which is that 'readonly' is going to roundtrip less often from metadata now--hence the deleted parameter in one of the tests. The effective readonly-ness will always round trip, though, so it shouldn't cause any ill effects in practice.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35508</PullRequestID>
        <IssueID>35114</IssueID>
        <Title>Compiler is emitting `IsReadOnlyAttribute` for getter only auto properties of readonly structs.</Title>
        <Description>The compiler is currently emitting `IsReadOnlyAttribute` on getter only auto properties of a readonly struct.

While this is harmless, it unnecessarily increases metadata size and could likely be stripped given that it isn't emitted for other members (such as methods) and the readonly-ness can be detected from the attribute on the struct.

Also see: https://sharplab.io/#v2:C4LglgNgPgAgDAAhgRgNwFgBQMDMCBOApgIYAmA9gHYQCeCAzsPgK4DGwCAwggN5YICkeGABYEAWQAUASl79BAX3kDlQhGEocAGrwQBzQsFQIlmBUA==</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>06/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35506</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Change accessibility of explicit implementations in interfaces to 'private'.</Title>
    <Description>Related to #32054.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35506</PullRequestID>
        <IssueID>32054</IssueID>
        <Title>Default Interface Method Base Calls</Title>
        <Description>[The LDM decided](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-11-14.md#default-interface-implementations) on the base invocation syntax `base(N.I1&lt;T&gt;).M(s)`.  We also decided that the syntax should be permitted in classes (e.g. to invoke an implementation from a skip-base class or a base interface).

This needs to be implemented in the compiler.  Also, we need to decide on an implementation strategy.  What IL would that generate?  Since interface implementations are currently private methods, it may require further CLR changes.</Description>
        <CreatedDate>29/12/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Default Interface Impl</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35500</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Add external access APIs for legacy code analysis</Title>
    <Description>Implements the APIs required to complete #35080.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35500</PullRequestID>
        <IssueID>35080</IssueID>
        <Title>Migrate legacy code analysis assemblies to the External Access pattern</Title>
        <Description>We are planning to remove IVT access to dotnet/roslyn from the following assemblies for 16.2 Preview 1:

* CodeAnalysis
* ManagedSourceCodeAnalysis
* StanCore

These assemblies should be updated to operate correctly without IVT access to roslyn, or use an External Access assembly for all access to Roslyn internals. I will be assisting in the creation of the External Access layer if necessary for these components.</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35494</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Improve diagnostic messaging for unused value assignment and unused p…</Title>
    <Description>…arameter diagnostics

Fixes #35203

1. Improve the message for unused value assignment diagnostic to make it clear that we are flagging an unnecessary assignment, not an unused variable
2. Add descriptions for unused value assignment and unused parameter diagnostics to allow users to specify special discard symbol names that are respected by the analyzer. There are various cases where user wants to retain unused parameters (signature compat, documentation) and unnecessary assignments to locals (ease of debugging), but do not want to blanket suppress these diagnostics.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35494</PullRequestID>
        <IssueID>35203</IssueID>
        <Title>IDE0059 false positive</Title>
        <Description>**Version Used**: 
Visual Studio 2019 16.02 and .NET Core 3.0 preview4

**Steps to Reproduce**:

``
Will produce IDE0059 Value assigned to 'globalImage' is never used

**Expected Behavior**:
No IDE0059
**Actual Behavior**:
IDE0059
</Description>
        <CreatedDate>23/04/2019</CreatedDate>
        <ClosedDate>06/05/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-CodeStyle</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35492</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Remove legacy IVTs</Title>
    <Description>Closes #35071
Closes #35072
Closes #35090
Closes #35091
Closes #35098</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35492</PullRequestID>
        <IssueID>35071</IssueID>
        <Title>Verify safe removal of EnC.UnitTests IVTs</Title>
        <Description>The repository currently contains IVTs to the following assemblies:

* Roslyn.Compilers.CSharp.EnC.UnitTests
* Roslyn.Compilers.VisualBasic.EnC.UnitTests

I cannot find a record of these ever existing. The IVTs should be removed if they are no longer in use.</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>16/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35492</PullRequestID>
        <IssueID>35072</IssueID>
        <Title>Verify safe removal of legacy testing IVTs</Title>
        <Description>The following IVTs are likely unused, in which case they can be removed:

* RoslynETAHost
* RoslynTaoActions</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>16/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35492</PullRequestID>
        <IssueID>35090</IssueID>
        <Title>Verify removal of Scripting.Desktop IVT</Title>
        <Description>I can't find any indication that **Microsoft.CodeAnalysis.Scripting.Desktop** ever existed. If this is the case, we should remove the IVTs to it.</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>16/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35492</PullRequestID>
        <IssueID>35091</IssueID>
        <Title>Verify removal of Microsoft.CodeAnalysis.Editor.UI.Wpf IVT</Title>
        <Description>I can't find any indication the IVT for **Microsoft.CodeAnalysis.Editor.UI.Wpf** was ever used. This IVT should be removed if not needed.</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>16/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35492</PullRequestID>
        <IssueID>35098</IssueID>
        <Title>Remove old Microsoft.VisualStudio.InteractiveServices project and IVTs</Title>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>16/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35483</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Update analyzers to follow recommended patterns</Title>
    <Description>* Fix violations of RS1025 (Configure generated code analysis)
* Fix violations of RS1026 (Enable concurrent execution)

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35483</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35482</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of CA2237 (Mark ISerializable types with serializable)</Title>
    <Description>This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35482</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35481</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.EditorFeatures.UnitTests</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35481</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35480</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.EditorFeatures</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>20/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35480</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35479</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.CSharp.Features</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35479</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35478</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.VisualBasic.Features</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35478</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35477</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.UnitTests</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35477</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35476</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.VisualBasic.Workspaces</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35476</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35475</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.CSharp.Workspaces</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35475</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35472</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.VisualBasic</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35472</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35471</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Roslyn.Test.Utilities</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35471</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35470</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.Workspaces</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35470</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35469</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis.CSharp</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35469</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35468</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.CodeAnalysis</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35468</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35467</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix violations of RS1024 in Microsoft.VisualStudio.LanguageServices</Title>
    <Description>(Compare symbols correctly)

📝 The changes here were applied by a refactoring which I believe correctly translates the comparison operators. However, reviewers should pay particular attention to cases where reference equality was intentionally used for correctness or performance.

This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35467</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35466</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title> Use expected syntax for intentional reference equality test</Title>
    <Description>This is a prerequisite to updating our diagnostic analyzer package in #35439.

The new `ISymbol` comparison analyzer (RS1024) has exclusions in it for the most common patterns used in C# compiler code for intentionally comparing symbols using reference equality. The cast-to-object pattern was established primarily because the C# compiler code almost always operates on concrete symbol types, and these types have an overridden `operator==`. This change updates the outlying cases, typically cases where the cast-to-object was unnecessary due to the use of interfaces as operands, to follow the patterns used elsewhere in the code.

In addition to the C# cases, there is one outlier case in VB code. The VB compiler code does not have a pattern for intentional reference comparison of `ISymbol`, so the analyzer allows the use of `Is` and `IsNot` for *concrete* symbol types (classes that implement `ISymbol`). This does not impact user scenarios because concrete symbol types are only allowed inside the compiler itself. All of the VB compiler code uses concrete types to interfaces for performance, so this was the only case that couldn't be automatically handled by the analyzer.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35466</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35464</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix mismatched use of MEF 1 and 2</Title>
    <Description>This is a prerequisite to updating our diagnostic analyzer package in #35439.</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>16/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35464</PullRequestID>
        <IssueID>35439</IssueID>
        <Title>Update to Roslyn.Diagnostics.Analyzers 2.9.3-beta1.19273.2+0e597a9e</Title>
        <Description>Review is only possible commit-by-commit.

Closes #35941</Description>
        <CreatedDate>02/05/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35463</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Fix lambda lowering for cast to generic ReadOnlySpan&lt;T&gt;</Title>
    <Description>Fixes #31685

The problem to be solved is to generate good code for
``` c#
ReadOnlySpan&lt;byte&gt; s = new byte[] { 1, 2, 3 };
```

There is an implicit conversion operator declared in `ReadOnlySpan&lt;T&gt;` that converts from `T[]` to `ReadOnlySpan&lt;T&gt;`.  However, in the particular case above we would like to elide creation of the array and create a read-only span that wraps the underlying data in the assembly.  There are primitives for doing this.

This was previously done in the compiler by eliding the lowering of the conversion to a bound call.  Lowering would instead preserve the user-defined conversion in the tree.  Then, in emit we would recognize that particular conversion and either perform the optimization if possible, or simply produce a call to the conversion method.  However, that had an unfortunate side-effect (bug), which this PR addresses.

Normally, the lowering phase would translate an invocation of a user-defined conversion operator into a `BoundCall`.  Subsequent phases of the compiler that need to rewrite symbols (such as lambda lowering and iterator rewriting, when the enclosing method is generic) would inherit the proper handling of rewriting symbols from the bound tree rewriter that is generated from `BoundNodes.xml`.  Unfortunately, the symbol appearing inside the conversion is not rewritten by that generated code, and there is no simple way to make it do so.  The bug report #31685 describes symptoms of this underlying issue.

There are a number of approaches one could take to address this issue:
1. Attempt to rehabilitate the original approach by extending the generated rewriter to handle conversions that may contain symbols.  That would require extending a few internal APIs and the bound tree rewriter.
2. Have the emit phase recognize a call to this particular conversion operator, and perform the optimization on that basis.
3. Add a new `BoundNode` that represents this particular optimizable pattern (which we would lower to), and let the generated bound node rewriter handle the contained symbol in subsequent phases where needed.

The approach here takes the third approach.  We back out the implementation of the optimization and add a new implementation based on a newly added bound node.
</Description>
    <CreatedDate>03/05/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35463</PullRequestID>
        <IssueID>31685</IssueID>
        <Title>Lambda type parameter lowering for implicit cast to ReadOnlySpan&lt;T&gt; appears to be incorrect</Title>
        <Description>**Version Used**: 
Don't know. I know it happened as of the build of Roslyn that was used to compile several of the most recently released versions of ML.NET (0.7 and 0.8)

**Steps to Reproduce**:

1. Build the https://github.com/dotnet/machinelearning repo
2. Examine Microsoft.ML.Transforms.dll
3. Examine the  lambda body associated with  Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ComposeGetterVecToVec&lt;TSrc&gt;.
4. The translation of the lambda incorrectly handles the method generic parameter associated with the implicit conversion to a ReadOnlySpan.

The problematic line of code is line 563 of HashJoiningTransform.cs ( see https://github.com/dotnet/machinelearning/blob/521acad830408b43175821575f5f774629aeafe7/src/Microsoft.ML.Transforms/HashJoiningTransform.cs ) 

**Expected Behavior**:

The above C# line is translated into
``
Note... the difference is that the broken line specifies a method generic parameter not the necessary type generic parameter.
</Description>
        <CreatedDate>11/12/2018</CreatedDate>
        <ClosedDate>07/05/2019</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35463</PullRequestID>
        <IssueID>31685</IssueID>
        <Title>Lambda type parameter lowering for implicit cast to ReadOnlySpan&lt;T&gt; appears to be incorrect</Title>
        <Description>**Version Used**: 
Don't know. I know it happened as of the build of Roslyn that was used to compile several of the most recently released versions of ML.NET (0.7 and 0.8)

**Steps to Reproduce**:

1. Build the https://github.com/dotnet/machinelearning repo
2. Examine Microsoft.ML.Transforms.dll
3. Examine the  lambda body associated with  Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ComposeGetterVecToVec&lt;TSrc&gt;.
4. The translation of the lambda incorrectly handles the method generic parameter associated with the implicit conversion to a ReadOnlySpan.

The problematic line of code is line 563 of HashJoiningTransform.cs ( see https://github.com/dotnet/machinelearning/blob/521acad830408b43175821575f5f774629aeafe7/src/Microsoft.ML.Transforms/HashJoiningTransform.cs ) 

**Expected Behavior**:

The above C# line is translated into
``
Note... the difference is that the broken line specifies a method generic parameter not the necessary type generic parameter.
</Description>
        <CreatedDate>11/12/2018</CreatedDate>
        <ClosedDate>07/05/2019</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35456</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Remove support for base access with explicit base type.</Title>
    <Description>Related to #32054.</Description>
    <CreatedDate>02/05/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35456</PullRequestID>
        <IssueID>32054</IssueID>
        <Title>Default Interface Method Base Calls</Title>
        <Description>[The LDM decided](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-11-14.md#default-interface-implementations) on the base invocation syntax `base(N.I1&lt;T&gt;).M(s)`.  We also decided that the syntax should be permitted in classes (e.g. to invoke an implementation from a skip-base class or a base interface).

This needs to be implemented in the compiler.  Also, we need to decide on an implementation strategy.  What IL would that generate?  Since interface implementations are currently private methods, it may require further CLR changes.</Description>
        <CreatedDate>29/12/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Default Interface Impl</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35414</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chborl</FixedByID>
    <Title>Expand Complete Statement to complete delegate declaration statements</Title>
    <Description>Fixes #34051</Description>
    <CreatedDate>01/05/2019</CreatedDate>
    <ClosedDate>17/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35414</PullRequestID>
        <IssueID>34051</IssueID>
        <Title>Complete Statement should work for delegate declaration</Title>
        <Description>Complete Statement should work for 
`delegate void ChangeHandler(object sender)`</Description>
        <CreatedDate>12/03/2019</CreatedDate>
        <ClosedDate>17/05/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>35375</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title> Revert two step initialization of constraints</Title>
    <Description>Closes #28834.
Closes #30061.</Description>
    <CreatedDate>30/04/2019</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35375</PullRequestID>
        <IssueID>28834</IssueID>
        <Title>Revert two step initialization of constraints and base type</Title>
        <Description>Revert recent changes for two step initialization of constraints and base type if those changes are no longer necessary.

Constraints: `TypeParameterSymbol.EnsureAllConstraintsAreResolved(bool early)` https://github.com/dotnet/roslyn/pull/27525
Base type: `PENamedTypeSymbol.GetDeclaredBaseType(bool ignoreNullability)` https://github.com/dotnet/roslyn/pull/28028
</Description>
        <CreatedDate>25/07/2018</CreatedDate>
        <ClosedDate>03/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>35375</PullRequestID>
        <IssueID>30061</IssueID>
        <Title>Consider adding factory method to TypeParameterBounds type</Title>
        <Description>``</Description>
        <CreatedDate>20/09/2018</CreatedDate>
        <ClosedDate>03/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34695</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>`t is null` with LangVersion 7 should produce a diagnostic</Title>
    <Description>Fixes #34678</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>06/04/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34695</PullRequestID>
        <IssueID>34678</IssueID>
        <Title>`t is null` with LangVersion 7 should produce a diagnostic</Title>
        <Description>The issue was reported by @varobc in https://github.com/dotnet/cli/issues/11020
FYI @peterhuene @333fred 

When this is fixed (likely in 16.1), this should be documented as a breaking change, albeit a short-lived one.</Description>
        <CreatedDate>02/04/2019</CreatedDate>
        <ClosedDate>06/04/2019</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34687</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Infer nullability in switch on conditional access operator</Title>
    <Description>Adds a test for an already-fixed issue
Fixes #34246</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>07/04/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34687</PullRequestID>
        <IssueID>34246</IssueID>
        <Title>Infer nullability in switch on conditional access operator</Title>
        <Description>A warning is reported for `s.ToString()` currently:
``</Description>
        <CreatedDate>19/03/2019</CreatedDate>
        <ClosedDate>07/04/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34686</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Re-infer nullable result of switch expression</Title>
    <Description>Fixes #34233</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>11/04/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34686</PullRequestID>
        <IssueID>34233</IssueID>
        <Title>Re-infer nullable result of switch expression</Title>
        <Description>In the nullable walker, we need to recompute the result type and state of the switch expression based on the result type and state of all of the arms.  This can be done in a way similar to how it is done for an implicit array creation expression.

This issue link is being used in a code comment where it needs to be fixed.</Description>
        <CreatedDate>19/03/2019</CreatedDate>
        <ClosedDate>11/04/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34682</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Disallow declaration of static members in interfaces when target runtime doesn’t support Default Interface Methods.</Title>
    <Description>Fixes #34590</Description>
    <CreatedDate>02/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34682</PullRequestID>
        <IssueID>34590</IssueID>
        <Title>Prevent static methods in interfaces unless DIM is supported in the runtime</Title>
        <Description>At the LDM on 2019-03-27 we decided that, to prevent existing C# compilers from being confused, the C# compiler should not support static methods in interfaces unless compiling against a runtime that supports default interface methods.

We decided to do this for any features that are found to confound earlier compilers.  @agocke will be looking to see what other features are affected.
</Description>
        <CreatedDate>29/03/2019</CreatedDate>
        <ClosedDate>03/04/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Default Interface Impl</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34654</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>heejaechang</FixedByID>
    <Title>Revert "move StreamJsonRpc to 2.x from 1.3.x"</Title>
    <Description>Reverts dotnet/roslyn#33960

reverting this until platform and other partners to move to 2.0 first due breaking functionality if only one team moves.</Description>
    <CreatedDate>01/04/2019</CreatedDate>
    <ClosedDate>03/04/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34654</PullRequestID>
        <IssueID>33960</IssueID>
        <Title>move StreamJsonRpc to 2.x from 1.3.x</Title>
        <Description>time to move to new version. right now, 1.3 and 2.0 versions are mix used in VS and 2.x has breaking changes. so we are trying to move to 2.x so that we can drop 1.3 from VS.

also, 2.0 has some of bug fixes it had before. so removed those workarounds as well.</Description>
        <CreatedDate>08/03/2019</CreatedDate>
        <ClosedDate>29/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34542</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Revert "Allow source based test discovery to access ISolutionCrawlerService"</Title>
    <Description>Reverts dotnet/roslyn#34534

A proxy will be added to **Microsoft.CodeAnalysis.ExternalAccess.[SomethingTest]** instead, following the new IVT policies.</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34542</PullRequestID>
        <IssueID>34534</IssueID>
        <Title>Allow source based test discovery to access ISolutionCrawlerService</Title>
        <CreatedDate>28/03/2019</CreatedDate>
        <ClosedDate>28/03/2019</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>34530</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>heejaechang</FixedByID>
    <Title>Revert "Revert "set no activation context on provisional tab when navigate to""</Title>
    <Description>From #33400:

&gt; when PreferProvisionalTab option is added, work is done only in OpenDocument, but not in NavigateTo making the option useless in some cases since NavigateTo makes focus to move to provisional tab right after OpenDocument call which make sure provisional tab to not activated.
&gt;
&gt; fix is following editor team's recommendation from https://devdiv.visualstudio.com/DevDiv/_workitems/edit/402396</Description>
    <CreatedDate>28/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>34530</PullRequestID>
        <IssueID>33400</IssueID>
        <Title>set no activation context on provisional tab when navigate to</Title>
        <Description>when PreferProvisionalTab option is added, work is done only in OpenDocument, but not in NavigateTo making the option useless in some cases since NavigateTo makes focus to move to provisional tab right after OpenDocument call which make sure provisional tab to not activated.

fix is following editor team's recommendation from https://devdiv.visualstudio.com/DevDiv/_workitems/edit/402396</Description>
        <CreatedDate>14/02/2019</CreatedDate>
        <ClosedDate>21/02/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Needs Shiproom Approval</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33976</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Simplify some names in the nullable reference types feature</Title>
    <Description>- Rename `TypeSymbolWithAnnotations` to `TypeWithAnnotations`
- Rename its type field from `TypeSymbol` to `Type`
- Fields of Symbols that are of type `TypeWithAnnotations` that are currently named `Type` would be renamed `TypeWithAnnotations`
- Add corresponding properties named `Type` that are of type `TypeSymbol`.
Fixes #33736</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33976</PullRequestID>
        <IssueID>33736</IssueID>
        <Title>Simplify and regularize some names (nullable ref types)</Title>
        <Description>I propose to simplify some names in the nullable reference types feature:

- Rename `TypeSymbolWithAnnotations` to `TypeWithAnnotations`
- Rename its type field from `TypeSymbol` to `Type`
- Fields of Symbols that are of type `TypeWithAnnotations` that are currently named `Type` would be renamed `TypeWithAnnotations`
- Other such relief as the court shall find in the interests of justice.
</Description>
        <CreatedDate>27/02/2019</CreatedDate>
        <ClosedDate>14/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33972</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Nullable nontrivial constructor should propagate state of the argument to Value.</Title>
    <Description>Nullable nontrivial constructor should propagate state of the argument to Value.

```cs
S? x = &lt;expr of Type S&gt;;  // works already
S? x = new Nullable&lt;S&gt;(&lt;expr of Type S&gt;);  // means the same as above and should work the same.
```

Fixes:#32626</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33972</PullRequestID>
        <IssueID>32626</IssueID>
        <Title>Recognize `Nullable&lt;T&gt;(T value)` when inferring nullability of `Value` field</Title>
        <Description>No warning should be reported for `y.Value.F`:
``

[jcouv:] As part of this we should test a nullable tuple: `(string, string)? t = (null, ""); ...`</Description>
        <CreatedDate>18/01/2019</CreatedDate>
        <ClosedDate>11/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33971</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Improve test performance</Title>
    <Description>* Cherry pick #33817 to master
* Rewrite dispatcher bug fix to avoid creating new `Dispatcher` instances for each test (construction of the associated `MediaContext` is time consuming)</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33971</PullRequestID>
        <IssueID>33817</IssueID>
        <Title>improving performance on running completion tests</Title>
        <CreatedDate>02/03/2019</CreatedDate>
        <ClosedDate>06/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33962</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Track inferred state changes in a finally block</Title>
    <Description>Fixes #33446</Description>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33962</PullRequestID>
        <IssueID>33446</IssueID>
        <Title>Missing nullability warning after assignment to variable in finally block</Title>
        <Description>The following should, but does not, produce a warning.
``
</Description>
        <CreatedDate>16/02/2019</CreatedDate>
        <ClosedDate>13/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33954</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Readonly members emit changes</Title>
    <Description>Related to #32911

- fill out implementations for MethodSymbol.IsReadOnly
- create a temp receiver when calling a non-readonly method from a readonly method
- share `this` without value copying when calling a readonly method from a readonly method</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33954</PullRequestID>
        <IssueID>32911</IssueID>
        <Title>Test plan for "readonly members"</Title>
        <Description>Proposal: dotnet/csharplang#1710

This issue is a place to collect test ideas and track their validation. Use the [compiler test plan](
https://github.com/dotnet/roslyn/blob/master/docs/contributing/Compiler%20Test%20Plan.md) as a tool for brainstorming.

- [x] write speclet
- [x] update compiler test plan
- [x] validate with LangVersion 7.3

### Methods
- [x] struct instance methods
- [x] struct static methods (should error)
- [x] class/interface static/instance methods (should error)
- [x] ref/ref readonly returning methods
- [x] Inherited object members should be considered readonly
- [x] 'readonly partial' methods
- [x] 'readonly partial' where one of declaration or implementation is missing keyword (error)
- [x] `readonly` on `new ToString()`

### Properties
- [x] struct readonly getters
- [x] struct readonly setters (not auto-implemented)
- [x] struct static properties with readonly accessors (should error)
- [x] class/interface properties with readonly accessors (should error)
- [x] expression bodied properties `int P readonly =&gt; 42;` (should error)
- [x] indexers (allow)
- [x] readonly getter in a readonly property? (should be disallowed)
- [x] readonly on `int P { readonly get; set; }` allowed
- [x] getter implicitly readonly for all auto-props
- [x] `int P { readonly get; }` not allowed -&gt; `readonly int P { get; }`


### Misc
- [x] Constructors (disallow)
- [x] Operators (disallow)
- [x] Delegates (disallow)
- [x] Field-like events (disallow)
- [x] Manually implemented events (allow)
- [x] lambdas/local functions (error)
- [x] explicit interface implementations (should allow)
~~- [ ] SymbolDisplay on methods and property/indexer/event accessors~~ #34650
~~- [ ] IsDeclaredReadonly on ISymbol or IPropertySymbol/IMethodSymbol~~ #34213

### Semantic

- [x] Calling readonly methods from readonly methods
- [x] Calling non-readonly struct methods from readonly methods
- [x] Calling a non-readonly method on a reference type field from a readonly method
- [x] Variants of these which use different combinations of properties and methods
- [x] Assignment to `this`
- [x] Reference to instance fields in readonly member
    - [x] Assignment is an error
    - [x] Invocation w/ instance field as receiver causes copy when type is non-readonly struct
- [x] Invocation of non-readonly method or getter on `this` inside a `readonly` member causes copy and a warning. Non-readonly setter access on `this` or a value typed field is an error.
- [x] Unary increment/decrement operators on fields are errors
- [x] Compound assignment on fields is an error
- [x] Round-tripping through metadata
- [x] Error to take `ref` to `this` in `readonly` member
- [x] Property assignment:
  - [x] Disallow on non-readonly instance properties on `this` or value-typed fields
  - [x] Allow on static or readonly properties, or properties on reference-typed fields
  - [x] Compound assignment behavior should be consistent with a getter-then-setter access
https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLRKgEwPYDsA2AnqgLYQnAQLIA0MIAlvjZiANQA+AAgAwAEXAIwBuALAAoDDgKE+yGAjgBjGHwDKEgN4S+uvg1yqACn018A5hFVmuAdj49hAXzlXTfF0517vurgBY+AFkACgN1OQBKX1MYvT4YAAsGZAA6EwBePn8AJjFxePi0zOy8mK8Cn3EKiXlFFXUcrRiDY3dLawF7RxdkNzNPGJipPCIBQNDwtRy5HOjK3W0FwoB6FaSU9L4s3PzCvTXkHK2dsuX4gH1thOTivf2bzZM2LLP4iviJJyA=

### IDE
~~- [ ] Extracting a method from a `readonly` method should produce a `readonly` method~~ #34647
~~- [ ] Suggestion to make a member `readonly` when it is called on a `ref readonly` receiver~~ #34648
~~- [ ] WRN_ImplicitCopyInReadOnlyMember should have a suggestion to make the callee `readonly` if possible~~ #34649
~~- [ ] WRN_ImplicitCopyInReadOnlyMember should have a suggestion to make an explicit copy of the receiver~~ 
- [x] Offered in completion in existing member
~~- [ ] Metadata as source~~ #34650

### Major sections of work (ideally PRs will not cover more than one of these)
- [x] Parsing of `readonly` method and property syntax (mostly just testing)
- [x] IsReadOnly API on MethodSymbol
  - In the case of properties, is `prop.GetMethod.IsReadOnly` acceptable design, or is it confusing to have `prop.IsReadOnly` potentially return a different value than `prop.GetMethod.IsReadOnly`?
- [x] Flow analysis to prevent mutation of `this` in `readonly` member implementation
  - maybe the analysis used for `in` params or `readonly struct` can just be reused?
- [x] Error on invalid usage of `readonly`
  - Any method or property without a `this` parameter (i.e. statics)
  - Any member inside a non-struct declaration (i.e. class, interface)
- [x] Emit tests to demonstrate that expected metadata (IsReadOnly, modopt, modreq) and optimizations (reduced value copying) are present in IL

~~- [ ] Should some synthesized methods be marked as readonly? ([discussion](https://github.com/dotnet/roslyn/pull/34260#issuecomment-474994280))~~ #36587
- [x] Should we disallow readonly members on readonly structs, since redundant? Or maybe we create an IDE fixer?
  - Resolution: Should be allowed, based on the principle that changing `struct` to `readonly struct` on a type where all members are marked readonly shouldn't result in a compile error. </Description>
        <CreatedDate>29/01/2019</CreatedDate>
        <ClosedDate>19/06/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33950</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Confirm suppression for ref/out/in parameters</Title>
    <Description>Ref and out parameters with suppression should change the nullable state
for the argument being suppressed. Moreover, the changes should flow
through type inference.

Closes #27743</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33950</PullRequestID>
        <IssueID>27743</IssueID>
        <Title>Follow-up on suppression operator feedback (regarding `ref`/`out` arguments)</Title>
        <Description>@AlekseyTs had [more feedback.](https://github.com/dotnet/roslyn/pull/27317#pullrequestreview-127781268) : Should the `!` have any effect on type argument inference?</Description>
        <CreatedDate>12/06/2018</CreatedDate>
        <ClosedDate>12/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Area-Language Design</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33946</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Add AssertEx.EqualOrDiff</Title>
    <Description>Based on work by @AArnott in dotnet/roslyn-sdk#240.
</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33946</PullRequestID>
        <IssueID>240</IssueID>
        <Title>Test bug - TFS to Git port tool</Title>
        <Description>Ported from TFS WorkItem: &lt;b&gt;1119695&lt;/b&gt;

---

&lt;p&gt;&lt;b&gt;Repro Steps:&lt;/b&gt;&lt;/p&gt;

Test bug - TFS to Git port tool

---

&lt;p&gt;&lt;b&gt;Revisions:&lt;/b&gt;&lt;/p&gt;


1) Created By Manish Vasani (2/4/2015 11:21:26 AM)

---

2) Edited By Manish Vasani (2/4/2015 11:21:33 AM)

Dummy update.

---

3) Edited By Manish Vasani (2/4/2015 11:22:43 AM)

Another update.

---
</Description>
        <CreatedDate>04/02/2015</CreatedDate>
        <ClosedDate>04/02/2015</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33942</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Copy nullable state from a limited set of BoundExpression types only</Title>
    <Description>Reverts fix for #31395 for now.

Fixes #33908.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33942</PullRequestID>
        <IssueID>31395</IssueID>
        <Title>Nullability of class fields are not inherited on assignment</Title>
        <Description>A warning is reported for `d.F`. (Compare with `t.F`.)
``
</Description>
        <CreatedDate>27/11/2018</CreatedDate>
        <ClosedDate>16/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33942</PullRequestID>
        <IssueID>33908</IssueID>
        <Title>StackOverflow when compiling CoreFX</Title>
        <Description>Trying to move to the current Arcade toolset results in a stackoverflow when compiling CoreFX: https://github.com/dotnet/corefx/pull/35826

Stack trace is 
[stacktrace2.txt](https://github.com/dotnet/corefx/files/2938556/stacktrace2.txt) -- Worth noting it exceeds the number of stack frames VS supports. I also have a dump locally, but it is 500mb.

Compiler version is `3.1.0-beta1-19127-06`, which corresponds to https://github.com/dotnet/roslyn/commits/3ef46d8367f4ae</Description>
        <CreatedDate>06/03/2019</CreatedDate>
        <ClosedDate>07/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33938</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix several outstanding small formatter bugs</Title>
    <Description>📝 I can break this pull request up on request.

* `NewLineForElse` must check parent of preceding brace (fixes #33458)
* Fix spacing before parameter list for conversion operators (fixes #31571, fixes #33910)
* Fix formatting of switch expression blocks (fixes #33839)</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33938</PullRequestID>
        <IssueID>33458</IssueID>
        <Title>C# formatter missing linebreak after curly braces of for block</Title>
        <Description>When using an for block inside an if condition without curly braces, the else gets put in the same line as the closing brace of the for block.

example:

``

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/431619/c-formatter-missing-linebreak-after-curly-braces-o.html
VSTS ticketId: 774047_
_These are the original issue comments:_

roland.fredenhagen on 1/20/2019, 06:42 AM (27 days ago): The Title misses "else" sorry for that, but it seams like I am not able to edit anything.
_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>17/02/2019</CreatedDate>
        <ClosedDate>15/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>IDE-Formatter</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33938</PullRequestID>
        <IssueID>31571</IssueID>
        <Title>Incorrect formatting of conversion operator to nullable type</Title>
        <Description>**Version Used**: Visual Studio 2019 Preview 1

**Steps to Reproduce**:

Run Format Document on the following code:

``
</Description>
        <CreatedDate>06/12/2018</CreatedDate>
        <ClosedDate>15/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-Formatter</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33938</PullRequestID>
        <IssueID>33910</IssueID>
        <Title>Incorrect formatter behavior in implicit conversions to a tuple</Title>
        <Description>``

Currently, the formatter wants to insert a space between the type and the argument list here. It should not, like all other conversions.</Description>
        <CreatedDate>06/03/2019</CreatedDate>
        <ClosedDate>15/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-Formatter</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33938</PullRequestID>
        <IssueID>33839</IssueID>
        <Title>Intendation for switch expression is not good in expression bodied method</Title>
        <Description>**Version Used**: 
VS 2019 RC
![image](https://user-images.githubusercontent.com/5644458/53704071-b3b98b80-3e53-11e9-8187-a382808d578c.png)
![image](https://user-images.githubusercontent.com/5644458/53704073-c2a03e00-3e53-11e9-942c-e4bcbf396cc6.png)
![image](https://user-images.githubusercontent.com/5644458/53704077-d350b400-3e53-11e9-9810-2b2c682df721.png)
The first case should be considered mis-aligned, comparing to object initializer.</Description>
        <CreatedDate>04/03/2019</CreatedDate>
        <ClosedDate>15/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-Formatter</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33930</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>YairHalberstadt</FixedByID>
    <Title>Reduce allocations in CanonicallyCompareDiagnostics</Title>
    <Description>In UnboundLambda.CanonicallyCompareDiagnostics, we currently have this code:
```csharp
     return codeCompare == 0 ? string.CompareOrdinal(x.ToString(), y.ToString()) : codeCompare;
```
Both `x` and `y` are diagnostics, and Diagnostic.ToString() is quite an expensive operation, involving numerous allocations.

In a pathological case, this was responsible for nearly 8GB of allocations! See #33846 .

The ironic thing is, the diagnostic message is utterly irrelevant here. The purpose of calling ToString is just to have some repeatable way of selecting a diagnostic to display, so that the tests for roslyn don't keep on having to be updated.

See this comment for example in UnboundLambda.GenerateSummaryErrors:
```csharp
            // It is highly likely that "the same" error will be given for two different
            // bindings of the same lambda but with different values for the parameters
            // of the error. For example, if we have x=&gt;x.Blah() where x could be int
            // or string, then the two errors will be "int does not have member Blah" and 
            // "string does not have member Blah", but the locations and errors numbers
            // will be the same.
            //
            // We should first see if there is a set of errors that are "the same" by
            // this definition that occur in every lambda binding; if there are then
            // those are the errors we should report.
            //
            // If there are no errors that are common to *every* binding then we
            // can report the complete set of errors produced by every binding. However,
            // we still wish to avoid duplicates, so we will use the same logic for
            // building the union as the intersection; two errors with the same code
            // and location are to be treated as the same error and only reported once,
            // regardless of how that error is parameterized.
            //
            // The question then rears its head: when given two of "the same" error
            // to report that are nevertheless different in their arguments, which one
            // do we choose? To the user it hardly matters; either one points to the
            // right location in source code. But it surely matters to our testing team;
            // we do not want to be in a position where some small change to our internal
            // representation of lambdas causes tests to break because errors are reported
            // differently.
            //
            // What we need to do is find a *repeatable* arbitrary way to choose between
            // two errors; we can for example simply take the one that is lower in alphabetical
            // order when converted to a string.
```

Replacing the above code with this code which tests each argument individually:

```csharp
            if (codeCompare != 0)
                return codeCompare;

            for (int i = 0; i &lt; x.Arguments.Count &amp;&amp; i &lt; y.Arguments.Count; i++)
            {
                object argx = x.Arguments[i];
                object argy = y.Arguments[i];

                codeCompare = string.CompareOrdinal(argx?.ToString(), argy?.ToString());
                if (codeCompare != 0)
                    return codeCompare;
            }

            return x.Arguments.Count.CompareTo(y.Arguments.Count);
```

all the tests still pass, but allocations should be significantly reduced.</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33930</PullRequestID>
        <IssueID>33846</IssueID>
        <Title>Heavy allocations in UnboundLambdaState.CanonicallyCompareDiagnostics</Title>
        <Description>**Version Used**: 15.9.7

:link: Originally filed as https://developercommunity.visualstudio.com/content/problem/463943/significant-wait-dialogs-all-projects.html

`UnboundLambdaState.CanonicallyCompareDiagnostics` is responsible for nearly 8GB of allocations (14% of total) in this trace. Nearly all of this number comes from `CSDiagnostic.ToString()` calling `DiagnosticFormatter.Format`. Nested within those we find:

* `CSharp.ErrorFacts.GetMessage` calls `Enum.ToString` (4.5GB)
* `DiagnosticFormatter.Format` calls `string.Format` (1.6GB)
* `DiagnosticInfo.GetMessage` calls `string.Format` (0.64GB)
* `DiagnosticFormatter.Format` calls `DiagnosticFormatter.FormatSourceSpan` (0.4GB)
* `DiagnosticFormatter.Format` calls `DiagnosticFormatter.GetMessagePrefix` (0.4GB)
</Description>
        <CreatedDate>04/03/2019</CreatedDate>
        <ClosedDate>17/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Developer Community</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33927</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Refine the set of NullableAnnotation values to the three speakable options</Title>
    <Description>- Eliminate values of `NullableAnnotation` that are "unspeakable"
- Change the result of dynamic invocations to result in an oblivious state
- Simplify the code in a few places where we compute result annotations (TSWA and `TypeWithState` are capable of storing an annotation/state even for typeless expressions)

Fixes #33638 
Filed #33924 to fix the result state of `?:`
</Description>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33927</PullRequestID>
        <IssueID>33638</IssueID>
        <Title>Incorrect nullability inferred with nested generics (nullable walker)</Title>
        <Description>The following test should produce no diagnostics, but it produces diagnostics.

``
</Description>
        <CreatedDate>24/02/2019</CreatedDate>
        <ClosedDate>08/03/2019</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33927</PullRequestID>
        <IssueID>33924</IssueID>
        <Title>Conditional expression should compute nullable result state from result state of operands</Title>
        <Description>Currently the computation is done in terms of nullable annotations.  But that is not correct, for example, with unconstrained type parameters that are known not to be null.  That fact is not representable in annotations, only in the nullable flow state.

See also #33664</Description>
        <CreatedDate>07/03/2019</CreatedDate>
        <ClosedDate>26/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33911</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Suppress nullable diagnostics in unreachable code</Title>
    <Description>Fixes #33905</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33911</PullRequestID>
        <IssueID>33905</IssueID>
        <Title>Suppress nullable diagnostics in unreachable code</Title>
        <Description>Per LDM 2019-03-06, we should suppress nullable diagnostics in unreachable code.</Description>
        <CreatedDate>06/03/2019</CreatedDate>
        <ClosedDate>07/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33907</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Restore fluent call depth</Title>
    <Description>The change to move nullable to a two state solution inadverntently
changed how the CLR inlines a number of method calls. The combination of
not-inlining and over-inlining caused us to have a much larger "frame"
for analyzing a fluent call and exceeded our tolerance levels.

This adjusts the inlining so that we get the same results as before.

closes #33775</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33907</PullRequestID>
        <IssueID>33775</IssueID>
        <Title>Follow-up on stack using in fluent invocation binding</Title>
        <Description>As part of PR https://github.com/dotnet/roslyn/pull/33648, I lowered our expectations for how long of a fluent call we can handle (commit https://github.com/dotnet/roslyn/pull/33648/commits/a5bc25a99a978b1b3e3b3489683f225413f7423d).
I didn't manage to figure out which part of the PR might cause this change (greater stack usage during binding).

</Description>
        <CreatedDate>28/02/2019</CreatedDate>
        <ClosedDate>07/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33902</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>handle extension methods in "Sync Namespace" refactoring</Title>
    <Description>Fix #33890 

@dotnet/roslyn-ide @CyrusNajmabadi 
FYI @AbhitejJohn </Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33902</PullRequestID>
        <IssueID>33890</IssueID>
        <Title>"Sync namespace" doesn't fix references via extension methods defined in affected types</Title>
        <Description>If you try to change the namespace below to `SyncExtMethods.Foo` using "sync namespace" refactoring

``

Thanks @AbhitejJohn for reporting this issue!
FYI @jinujoseph </Description>
        <CreatedDate>06/03/2019</CreatedDate>
        <ClosedDate>12/03/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33892</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Implement LDM decisions on the behavior of `??` and `??=` operators</Title>
    <Description>Fixes #33743</Description>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33892</PullRequestID>
        <IssueID>33743</IssueID>
        <Title>Implement LDM decision on nullability of `??` operator</Title>
        <Description>The expression `e1 ?? e2` should result in the nullability from `e2`, with the inference that `e1` can be null in `e2` (and after the whole expression if reachable from `e2`).</Description>
        <CreatedDate>28/02/2019</CreatedDate>
        <ClosedDate>11/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33885</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Test handling of a small selection of lifted built-in unary and binary operators</Title>
    <Description>Closes #33330</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33885</PullRequestID>
        <IssueID>33330</IssueID>
        <Title>Nullable warnings reported for lifted operators when operands are not null</Title>
        <Description>``
Reported by @onovotny.

When resolving this issue, please also track down any references to  https://github.com/dotnet/roslyn/issues/31500 (which was resolved as dupe of present issue).</Description>
        <CreatedDate>12/02/2019</CreatedDate>
        <ClosedDate>07/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33883</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chborl</FixedByID>
    <Title>Complete statement: special handling needed for caret at end of line, outside of delimiters</Title>
    <Description>Fixes #33851

If caret is at the end of a line, root.FindToken will return the character right before it.  

In this case,

```csharp
obj.method()$
   .method2();
```
Complete statement will incorrectly think it is inside of `method` argument list.  

This PR adds a check for this special case and adjusts the handling of the statement accordingly.
</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33883</PullRequestID>
        <IssueID>33851</IssueID>
        <Title>Semicolon typed mid-expression goes to an unexpected location</Title>
        <Description>**Version Used**: Visual Studio 2019 Preview 4 Build 28701.123.d16.0

**Repro**: 
I hit &lt;kbd&gt;;&lt;/kbd&gt; between the two invocations in this declaration:

![semicolonweirdlocation](https://user-images.githubusercontent.com/235241/53765071-d794c580-3e83-11e9-8175-361e64f25bc0.gif)

**Expected**: The semicolon is inserted at that location. In my scenario, I could then continue typing a down arrow and then comment current line, thus reducing the declaration to just the first call.

**Actual**: The semicolon goes to the end of the entire declaration. Also, it's not done in a two-step undo, so ctrl+z doesn't put the semicolon back where I typed it.</Description>
        <CreatedDate>04/03/2019</CreatedDate>
        <ClosedDate>13/03/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33882</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Simplify error message to not mention unconstrained type parameter that it doesn't apply to.</Title>
    <Description>Fixes #33847
</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33882</PullRequestID>
        <IssueID>33847</IssueID>
        <Title>Use distinct warning message for using `default` for unconstrained type parameter</Title>
        <Description>The existing warning is used for `null` plus `default` and reference types plus unconstrained type parameters. We should use distinct warnings to reduce confusion.
``</Description>
        <CreatedDate>04/03/2019</CreatedDate>
        <ClosedDate>06/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-Diagnostic Clarity</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33880</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Remove comments for already-resolved github issues.</Title>
    <Description>See also #28798, #32047, #33879
Closes #29953</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33880</PullRequestID>
        <IssueID>28798</IssueID>
        <Title>Handle unreachable code in the nullable walker</Title>
        <Description>In unreachable code, the state for every trackable variable should be "not null".

There are a few reasons for this:
1. From a formal, flow-analysis theoretical point of view, this is one end of the lattice and is therefore the default value of the state that is refined as flow analysis proceeds.
2. From a practical point of view, this prevents producing (most) warnings in unreachable code (even if those warnings would later be suppressed).
3. The flow analysis base classes expect the state to implement `bool AbstractState.Reachable { get; }`

There are a couple of approaches for doing this. The simplest is to have a bit in the state that tracks whether the state is reachable or not (just like control flow analysis and data flow analysis). When such a state is asked for the nullable state of some variable, it always answers "not null".

Another approach, which may be worth doing in addition, would be to
1. Suppress all warnings when the state is unreachable.
2. When merging two states, if one of them is reachable then the result state is the other one.
</Description>
        <CreatedDate>23/07/2018</CreatedDate>
        <ClosedDate>10/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Area-Language Design</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33880</PullRequestID>
        <IssueID>32047</IssueID>
        <Title>Null state in unreachable code</Title>
        <Description>I think the null state of an expression should take into account when it occurs in unreachable code.  An expression in unreachable code is never ever `null`.  Even the expression `null` is never null in unreachable code.

This is not the same as simply suppressing warnings in unreachable code (though we should consider that too).  For example:
``
Formally, my proposal is that an expression is never `null` in an unreachable statement, never `null` when false after the constant true, never `null` when true after the constant false, and never `null` when false after `expr is var x` and similar patterns (which are always true but not a constant).  These all have in common that the “current” state in the nullable analysis should be the unreachable state when evaluating the code in question.  That means there is a nice bottleneck in the rvalue-visiting method where this can be implemented.

</Description>
        <CreatedDate>28/12/2018</CreatedDate>
        <ClosedDate>05/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Area-Language Design</Label>
          <Label>Need Design Review</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33880</PullRequestID>
        <IssueID>33879</IssueID>
        <Title>Issues with lifted conversions</Title>
        <Description>There are three comments in `NullableWalker.cs` regarding issues in lifted operators, particularly conversions, that need to be reexamined.  They are marked with this issue number.

In `GetSlotsToMarkAsNotNullable`:
``
</Description>
        <CreatedDate>05/03/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Investigation Required</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33880</PullRequestID>
        <IssueID>29953</IssueID>
        <Title>Various issues with nullability analysis in unary/binary operators</Title>
        <Description>In particular, one of the recurring PROTOTYPE markers was to handle lifted operators.

``</Description>
        <CreatedDate>17/09/2018</CreatedDate>
        <ClosedDate>06/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33871</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Split CloseFile into CloseCodeFile and CloseDesignerFile</Title>
    <Description>Fixes #26442
Fixes #26443
Fixes #26444</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33871</PullRequestID>
        <IssueID>26442</IssueID>
        <Title>Flaky integration test VisualBasic.BasicWinForms.AddControl</Title>
        <Description>**VisualBasic.BasicWinForms.AddControl** [failed](https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_debug_vs-integration_prtest/915/testReport/junit/Roslyn.VisualStudio.IntegrationTests.VisualBasic/BasicWinForms/AddControl/) in debug on a non-code PR (https://github.com/dotnet/roslyn/pull/26416) with the following message:

**Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.AddControl** (from Roslyn.VisualStudio.IntegrationTests)

Failing for the past 1 build (Since Failed#915 )
Took 2.6 sec.
Stacktrace
MESSAGE:
Assert.Contains() Failure
Not found: ``Me.SomeButton.Name = "SomeButton"``
In value: 
``
+++++++++++++++++++
STACK TRACE:
at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.AddControl()</Description>
        <CreatedDate>27/04/2018</CreatedDate>
        <ClosedDate>05/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Flaky</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33871</PullRequestID>
        <IssueID>26443</IssueID>
        <Title>Flakey integration test VisualBasic.BasicWinForms.ChangeControlProperty</Title>
        <Description>**VisualBasic.BasicWinForms.ChangeControlProperty** [failed](https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_debug_vs-integration_prtest/915/testReport/junit/Roslyn.VisualStudio.IntegrationTests.VisualBasic/BasicWinForms/ChangeControlProperty/) in debug on a non-code PR (https://github.com/dotnet/roslyn/pull/26416) with the following message:

**Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.ChangeControlProperty** (from Roslyn.VisualStudio.IntegrationTests)

Failing for the past 1 build (Since Failed#915 )
Took 3.3 sec.
Stacktrace
MESSAGE:
Assert.Contains() Failure
Not found: `Me.SomeButton.Text = "NewButtonText"`
In value:
``
+++++++++++++++++++
STACK TRACE:
at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.ChangeControlProperty()</Description>
        <CreatedDate>27/04/2018</CreatedDate>
        <ClosedDate>14/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Flaky</Label>
          <Label>Integration-Test</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33871</PullRequestID>
        <IssueID>26444</IssueID>
        <Title>Flaky integration test VisualBasic.BasicWinForms.ChangeControlPropertyInCode</Title>
        <Description>**VisualBasic.BasicWinForms.ChangeControlPropertyInCode** [failed](https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_debug_vs-integration_prtest/915/testReport/junit/Roslyn.VisualStudio.IntegrationTests.VisualBasic/BasicWinForms/ChangeControlPropertyInCode/) in debug on a non-code PR (https://github.com/dotnet/roslyn/pull/26416) with the following message:

**Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.ChangeControlPropertyInCode** (from Roslyn.VisualStudio.IntegrationTests)

Failing for the past 1 build (Since Failed#915 )
Took 2.7 sec.
Stacktrace
MESSAGE:
Assert.Contains() Failure
Not found: `Me.SomeButton.Text = "ButtonTextGoesHere"`
In value:
``
+++++++++++++++++++
STACK TRACE:
at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.ChangeControlPropertyInCode()</Description>
        <CreatedDate>27/04/2018</CreatedDate>
        <ClosedDate>14/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Flaky</Label>
          <Label>Integration-Test</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33870</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Regression test for suppression on ref-returns</Title>
    <Description>Verifies that the current implementation matches the latest
LDM decisions on nullable suppression and out variables

Closes #27522</Description>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33870</PullRequestID>
        <IssueID>27522</IssueID>
        <Title>Suppression operator on L-values</Title>
        <Description>- `M(out x!);` (note this also definitely assigns to `x` through the `!`)
- `M(out (x!));`
- `M(out (RefReturning()!));`
- `x! = y;`
- `M(out string x!);`

Current implementation is to allow in `out` scenarios, but disallow in assignment scenarios.
</Description>
        <CreatedDate>06/06/2018</CreatedDate>
        <ClosedDate>05/03/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Area-Language Design</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33850</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Close the Find Source window in case it's open</Title>
    <Description>See #33785

This change changes the problematic case from a *test hang* to a *flaky test*, which is a slight improvement.</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33850</PullRequestID>
        <IssueID>33785</IssueID>
        <Title>Integration test cleanup fails to close debugger Find Source window</Title>
        <Description>![image](https://user-images.githubusercontent.com/1408396/53644151-807cbf80-3bfb-11e9-9da1-838c11cdc8a5.png)

``</Description>
        <CreatedDate>01/03/2019</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Integration-Test</Label>
          <Label>Interactive-Debugging</Label>
          <Label>Investigation Required</Label>
          <Label>Regression</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33848</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>NRKirby</FixedByID>
    <Title>Update PowerShell version</Title>
    <Description>Update the PowerShell version in the [Building, Debugging, and Testing on Windows](https://github.com/dotnet/roslyn/blob/e8f03e407226a43c122ce004c66e1795883f564b/docs/contributing/Building%2C%20Debugging%2C%20and%20Testing%20on%20Windows.md) docs to 5.0 as per issue #32241

</Description>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33848</PullRequestID>
        <IssueID>32241</IssueID>
        <Title>can't run restore.cmd</Title>
        <Description>Can someone help? I apologize in advance if I'm missing something very obvious.

**Version Used**: latest `master`. I have powershell 3.0

**Steps to Reproduce**:

1. run `restore.cmd`

**Expected Behavior**: no error

**Actual Behavior**:
I get an error saying
``
</Description>
        <CreatedDate>08/01/2019</CreatedDate>
        <ClosedDate>07/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Bug</Label>
          <Label>Contributor Pain</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33830</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix completion at the start of readonly documents</Title>
    <Description>Fixes #33829</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33830</PullRequestID>
        <IssueID>33829</IssueID>
        <Title>Typing at the start of a read-only document crashes the IDE</Title>
        <Description>**Version Used**: 2773f5e

Caught by integration test `BasicEditAndContinue.DocumentStateTrackingReadonlyInRunMode`.
</Description>
        <CreatedDate>02/03/2019</CreatedDate>
        <ClosedDate>11/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Disabled Test</Label>
          <Label>IDE-IntelliSense</Label>
          <Label>Integration-Test</Label>
          <Label>Regression</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33828</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Restore original behavior of Shift+Enter during completion</Title>
    <Description>Fixes #33823 

This change is a workaround for https://devdiv.visualstudio.com/DevDiv/_workitems/edit/809579, since we will not be able to fix _and validate_ that from the editor side prior to 16.0 RTM.</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33828</PullRequestID>
        <IssueID>33823</IssueID>
        <Title>Commit on shift+enter fails for async completion</Title>
        <Description>**Version Used**: 2773f5e

Caught by integration test `CommitOnShiftEnter`.
</Description>
        <CreatedDate>02/03/2019</CreatedDate>
        <ClosedDate>11/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Disabled Test</Label>
          <Label>Integration-Test</Label>
          <Label>Regression</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33827</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Ensure the caret is visible after commit</Title>
    <Description>Fixes #33822</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33827</PullRequestID>
        <IssueID>33822</IssueID>
        <Title>Async completion fails to scroll the caret into view</Title>
        <Description>**Version Used**: 2773f5e

Caught by integration test `EnsureTheCaretIsVisibleAfterALongEdit`.
</Description>
        <CreatedDate>02/03/2019</CreatedDate>
        <ClosedDate>11/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Disabled Test</Label>
          <Label>Integration-Test</Label>
          <Label>Regression</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33816</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chsienki</FixedByID>
    <Title>Report nullability for attribute arguments:</Title>
    <Description>- Add an entry point to nullable walker for attribute analysis
- Implement analyze attribute in the walker
- Remove the analysis from binder_attributes and call nullable walker instead
- Add extra fields to BoundAttribute that are needed for nullable analysis
- Add tests

Fixes #23697</Description>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33816</PullRequestID>
        <IssueID>23697</IssueID>
        <Title>Null warnings not reported for attribute arguments</Title>
        <Description>`[MyAttribute(null)]` should generate `warning: cannot convert null to non-nullable reference`:
``

Also: `new string[] { null }` in an attribute.</Description>
        <CreatedDate>10/12/2017</CreatedDate>
        <ClosedDate>14/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33806</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dibarbet</FixedByID>
    <Title>Move leading trivia with node when removing unused values.</Title>
    <Description>Resolves #33312

</Description>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>04/03/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33806</PullRequestID>
        <IssueID>33312</IssueID>
        <Title>"Remove redundant assignment" code fix moves variables above prepended trivia</Title>
        <Description>``</Description>
        <CreatedDate>12/02/2019</CreatedDate>
        <ClosedDate>04/03/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-CodeStyle</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33509</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Avoid trying to write log files longer than max path</Title>
    <Description>Fixes #12106</Description>
    <CreatedDate>20/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33509</PullRequestID>
        <IssueID>12106</IssueID>
        <Title>Intermittent test failure: "xunit produced no error output but had exit code -2146233082"</Title>
        <Description>http://dotnet-ci.cloudapp.net/job/dotnet_roslyn/job/master/job/windows_debug_unit32_prtest/660/console

Unfortunately there is nothing helpful in the output or log.
</Description>
        <CreatedDate>20/06/2016</CreatedDate>
        <ClosedDate>20/02/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33498</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Fix stack overflow where overload resolution gets parameter type attributes</Title>
    <Description>Fixes #33388 by refraining from normalizing task-like types when binding an attribute argument.

I'd like to make sure I completely understand the implications of this change. If we stop normalizing task-like parameters to attribute constructors, what user-facing consequences could possibly occur?</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33498</PullRequestID>
        <IssueID>33388</IssueID>
        <Title>Incorrect usage of StructLayout attribute cause VS crash</Title>
        <Description>Create C# project and use this code:

    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Sequential, Size = Marshal.SizeOf(Test))]
    public struct Test
    {
    }

or:

    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Sequential, Pack = Marshal.SizeOf(Test))]
    public struct Test
    {
    }

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/450661/incorrect-usage-of-structlayout-attribute-cause-vs.html
VSTS ticketId: 790164_
_These are the original issue comments:_

Visual Studio Feedback System on 2/12/2019, 01:29 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>14/02/2019</CreatedDate>
        <ClosedDate>27/02/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33494</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>ivanbasov</FixedByID>
    <Title>Convert to struct has errors on uninitiated members</Title>
    <Description>### Customer scenario
1. Have code

```cs
public class Class
{
    void MyMethod()
    {
        var tuple = (3, "string");
    }
```

2. Place cursor before open parenthesis and type (Ctrl+.) to open codefixes
3. Choose "convert to struct" and run the refactoring.

**Expected**
The code generated is valid.

**Actual**
The code generated is invalid: it misses definitions for fields corresponding to non-named in the tuple such as Item1, Item2 and so on.

### Bugs this fixes
#33407

### Workarounds, if any
Manually add code for those fields.

### Risk
Low

### Performance impact
None

### Is this a regression from a previous update?
This is a new feature just added. It was added with this defect.

### Root cause analysis
Test cases actually covered the situation but code provided in those tests cases contained errors. We may need to consider adding a validation of code generated in test scenarios.

### How was the bug found?
Internal customers</Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33494</PullRequestID>
        <IssueID>33407</IssueID>
        <Title>Convert to struct has errors on uninitiated members</Title>
        <Description>**Version Used**: Visual studio 2019

**Steps to Reproduce**:

1. Have code

``

@CyrusNajmabadi Julien mentioned you might want to take a look. :)</Description>
        <Code>```csharp
public class Class
{
    void MyMethod()
    {
        var tuple = (3, "string");
    }

```
2. Place cursor before open parenthesis and type (Ctrl+.) to open codefixes
![image](https://user-images.githubusercontent.com/8293542/52825445-a178d880-3071-11e9-822e-47189759e04c.png)

3. Select Convert to struct

**Expected Behavior**:
Generated struct gives no errors.

**Actual Behavior**:
Generated struct gives errors on uninitialized members Item1 and Item2.
![image](https://user-images.githubusercontent.com/8293542/52825427-9160f900-3071-11e9-92e5-3ecd00e1f702.png)

Adding these declarations fixes warnings:
```
internal struct NewStruct
{
    public int Item1 { get; }
    public string Item2 { get; }
...
`</Code>
        <CreatedDate>15/02/2019</CreatedDate>
        <ClosedDate>21/02/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33491</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chsienki</FixedByID>
    <Title>Re-enable docker caching up to the cache-busted layers</Title>
    <Description>The machines should have cycled by now. This will improve performance of the mono legs.

Fixes #32916 </Description>
    <CreatedDate>19/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33491</PullRequestID>
        <IssueID>32916</IssueID>
        <Title>Remove Mono CI --no-cache flag </Title>
        <Description>PR #32885 introduce the `--no-cache` flag to mono.sh due to a mono upgrade bug (https://github.com/dotnet/roslyn/pull/32885/files#diff-f3cb96ed939670f5061167bac0220bc8R25)

We should remove this after a sufficient time that all the machines have re-cycled the docker cache to no longer contain the bugger 5.21 install in their cache.

</Description>
        <CreatedDate>29/01/2019</CreatedDate>
        <ClosedDate>27/02/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33475</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Ensure pipename argument quoted</Title>
    <Description>The name for the named pipe used between MSBuild and VBCSCompiler is
generated from a combination of values including the current user name,
specifically `%USERNAME%`. It is possible for this value to have spaces
in it and hence the argument must be quoted when passing it to the
command line of VBCSCompiler instances.

Regression initially introduced: #32257</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33475</PullRequestID>
        <IssueID>32257</IssueID>
        <Title>Remove more private reflection from compiler</Title>
        <Description>This change continues the removal of private reflection code from the compiler code base and instead relying on mulit-targeting to have detect the runtime. This also necessarily cleans up a number of our `#if` checks in the code base. 

Follow up to #31763</Description>
        <CreatedDate>08/01/2019</CreatedDate>
        <ClosedDate>16/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33474</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Ensure pipename argument quoted</Title>
    <Description>The name for the named pipe used between MSBuild and VBCSCompiler is
generated from a combination of values including the current user name,
specifically `%USERNAME%`. It is possible for this value to have spaces
in it and hence the argument must be quoted when passing it to the
command line of VBCSCompiler instances.

Regression initially introduced: #32257</Description>
    <CreatedDate>18/02/2019</CreatedDate>
    <ClosedDate>18/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33474</PullRequestID>
        <IssueID>32257</IssueID>
        <Title>Remove more private reflection from compiler</Title>
        <Description>This change continues the removal of private reflection code from the compiler code base and instead relying on mulit-targeting to have detect the runtime. This also necessarily cleans up a number of our `#if` checks in the code base. 

Follow up to #31763</Description>
        <CreatedDate>08/01/2019</CreatedDate>
        <ClosedDate>16/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33462</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tiesmaster</FixedByID>
    <Title>Fix issue #33242: ExtractMethodCodeRefactoringProvider throws invalid cast when used within the body of a constructor expression-member body</Title>
    <Description>Fixes #33242 
This crash was caused by [`CSharpCodeGenerator.CreateStatementsOrInitializerToInsertAtCallSiteAsync()` ](https://github.com/dotnet/roslyn/blob/de57f6daeee86908cc9dcd0386d2f66d60e8cee1/src/Features/CSharp/Portable/ExtractMethod/CSharpMethodExtractor.CSharpCodeGenerator.cs#L137-L140) not evaluating the expression bodied constructor as such, since [`MemberDeclarationSyntaxExtensions.GetExpressionBody()`](https://github.com/dotnet/roslyn/blob/de57f6daeee86908cc9dcd0386d2f66d60e8cee1/src/Workspaces/CSharp/Portable/Extensions/MemberDeclarationSyntaxExtensions.cs#L282-L299) wasn't updated yet to handle expression bodied constructors.

It seemed most appropriate to handle that in `MemberDeclarationSyntaxExtensions`, and not in `CSharpMethodExtractor.CSharpCodeGenerator`.</Description>
    <CreatedDate>17/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33462</PullRequestID>
        <IssueID>33242</IssueID>
        <Title>ExtractMethodCodeRefactoringProvider throws invalid cast when used within the body of a constructor expression-member body</Title>
        <Description>1. Highlight between the $$ (after removing them)

``</Description>
        <CreatedDate>08/02/2019</CreatedDate>
        <ClosedDate>20/02/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>IDE-CodeStyle</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33455</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Replace slot watermark</Title>
    <Description>Stop copying nullable state at the target slot rather than at the highest slot.

Fixes #33429.</Description>
    <CreatedDate>16/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33455</PullRequestID>
        <IssueID>33429</IssueID>
        <Title>Remove NullableWalker.GetSlotWatermark() if possible</Title>
        <Description>Remove `NullableWalker.GetSlotWatermark` if possible. For instance, could `TrackNullableStateForAssignment` handle cycles by avoiding copying nullable state from either `targetSlot` or from slots that were already copied?
</Description>
        <CreatedDate>15/02/2019</CreatedDate>
        <ClosedDate>20/02/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33434</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Make sure to set the scan code for KEYBDINPUT</Title>
    <Description>See michaelnoonan/inputsimulator#13</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33434</PullRequestID>
        <IssueID>13</IssueID>
        <Title>Feature request: Anonymous types that implement interfaces</Title>
        <Description>It would be very useful if C# anonymous types could implement interfaces, including methods. This would make a huge difference when developing using interface driven design. It would also allow for very easy mocking in unit tests.

``

Or by just defaulting to methods unless the interface calls for a property. That would make the first example with the same code valid, and I guess would make the syntax better.
</Description>
        <CreatedDate>16/01/2015</CreatedDate>
        <ClosedDate>21/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Language Design</Label>
          <Label>Discussion</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33431</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>nguerrera</FixedByID>
    <Title>LOC CHECKIN | dotnet/roslyn dev16.0-vs-deps | 20190213</Title>
    <Description>Replacement for #33353 because the fork was deleted preventing a way to push further changes that were needed</Description>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>20/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33431</PullRequestID>
        <IssueID>33353</IssueID>
        <Title>LOC CHECKIN | dotnet/roslyn dev16.0-vs-deps | 20190213</Title>
        <CreatedDate>13/02/2019</CreatedDate>
        <ClosedDate>15/02/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33395</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Copy field nullability on assignment for all expressions</Title>
    <Description>Fixes #31395.</Description>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33395</PullRequestID>
        <IssueID>31395</IssueID>
        <Title>Nullability of class fields are not inherited on assignment</Title>
        <Description>A warning is reported for `d.F`. (Compare with `t.F`.)
``
</Description>
        <CreatedDate>27/11/2018</CreatedDate>
        <ClosedDate>16/05/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33336</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Nullable tuple constraints in method bodies</Title>
    <Description>This change enforces nullable validation on tuple type parameters,
assuming a custom defined tuple, inside of method bodies.

closes #33303</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33336</PullRequestID>
        <IssueID>33303</IssueID>
        <Title>Nullable constraints not validated on tuple types inside method bodies</Title>
        <Description>Consider the following code: 

``

The compiler will issue a warning for the tuple inside the method signature but not inside the method body. </Description>
        <CreatedDate>11/02/2019</CreatedDate>
        <ClosedDate>16/02/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33327</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Correct assert in CustomModifierUtils</Title>
    <Description>The assert for custom modifier checking should include the nullable
validation

closes #30740</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33327</PullRequestID>
        <IssueID>30740</IssueID>
        <Title>An assert in CustomModifierUtils should be adjusted to check Nullable modifiers as well</Title>
        <Description>``</Description>
        <CreatedDate>24/10/2018</CreatedDate>
        <ClosedDate>12/02/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>33311</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Handle the newly added null coalescing assignment operation in the un…</Title>
    <Description>…used parameters and values analyzer.

Unfortunately, this operation is not an ICompoundAssignmentOperation, hence needs to be handled specially by analyzers that need to analyze read/writes.
Also added support to the fixer to handle coalesce assignments.

Fixes #33299</Description>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>33311</PullRequestID>
        <IssueID>33299</IssueID>
        <Title>Wrong "Remove unused parameter" suggestion when using compound assigments</Title>
        <Description>VSF_TYPE_MARKDOWN
``

The light bulp says `first` and `second` arguments are **unused** but they not.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/447307/wrong-remove-unused-parameter-suggestion-when-usin.html
VSTS ticketId: 787940_
_These are the original issue comments:_

cihanyakar on 2/11/2019, 02:25 AM (9 hours ago): &lt;p&gt;A small info: C# 8.0 nullable feature is enabled&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>11/02/2019</CreatedDate>
        <ClosedDate>13/02/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32166</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Fix parsing regression on switch case expression that is parenthesized unary expression</Title>
    <Description>Fixes #32161</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32166</PullRequestID>
        <IssueID>32161</IssueID>
        <Title>Parenthesized switch case expressions rejected in master with langver 7</Title>
        <Description>The following C# code is reportedly rejected in `master` with language version 7. This is a breaking change.

``

</Description>
        <CreatedDate>04/01/2019</CreatedDate>
        <ClosedDate>04/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32159</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix null check combined with nullable bool test</Title>
    <Description>* Fixes #31739 
* Fixes timeout for integration tests (they took 1:30 locally so I allowed for 2:00 on CI)

### Customer scenario

Visual Studio can crash with a FailFast during editing.

### Bugs this fixes

#31739

### Workarounds, if any

None.

### Risk

Low. The change restores a null check that was unintentionally removed.

### Performance impact

Negligible.

### Is this a regression from a previous update?

Yes.

### Root cause analysis

The issue was caught during code review but not corrected before merge.

### How was the bug found?

Integration tests.

### Test documentation updated?

N/A
</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32159</PullRequestID>
        <IssueID>31739</IssueID>
        <Title>FailFast in integration tests</Title>
        <Description>Observed in the debug leg.
https://dnceng.visualstudio.com/public/_build/results?buildId=57289

``</Description>
        <CreatedDate>13/12/2018</CreatedDate>
        <ClosedDate>11/01/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Integration-Test</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32159</PullRequestID>
        <IssueID>31739</IssueID>
        <Title>FailFast in integration tests</Title>
        <Description>Observed in the debug leg.
https://dnceng.visualstudio.com/public/_build/results?buildId=57289

``</Description>
        <CreatedDate>13/12/2018</CreatedDate>
        <ClosedDate>11/01/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Integration-Test</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32157</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>drewnoakes</FixedByID>
    <Title>IDE0060 doesn't warn about unused params in ISerializable constructors</Title>
    <Description>Fixes #32133.

Logic that tests for such constructors is pulled out to a helper struct, `SerializationConstructorCheck`. I couldn't find existing patterns for this kind of thing, so perhaps a different approach is preferred. It cannot be an extension method as it caches symbols from the compilation for reuse across multiple calls.

Fixed some typos too, in a separate commit.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32157</PullRequestID>
        <IssueID>32133</IssueID>
        <Title>IDE0060 (remove unused parameter) should not fire for deserialization constructor</Title>
        <Description>**Version Used**: 

28502.214.d16.0stg

**Steps to Reproduce**:

``

**Expected Behavior**:

No diagnostic.

**Actual Behavior**:

Diagnostic.</Description>
        <CreatedDate>03/01/2019</CreatedDate>
        <ClosedDate>07/01/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32145</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Fix projects being removed from the Workspace</Title>
    <Description>We were leaving them in the workspace by accident.

Fixes #32036 and probably a bunch of dupes too.</Description>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32145</PullRequestID>
        <IssueID>32036</IssueID>
        <Title>Roslyn leaking AbstractProjects</Title>
        <Description>**Version Used**: 
Version 16.0.0 Preview 2.0 [28420.135.d16.0stg]

**Steps to Reproduce**:

1. Create new Windows Forms App
2. Unload project 
3. Reload project
4. Repeat step 2-3 above 2 more times

**Expected Behavior**:
Only to have a single representation of the project

**Actual Behavior**:
4 representations of the project:

![image](https://user-images.githubusercontent.com/1103906/50502341-a928f180-0ab2-11e9-873b-2075e21ca3d5.png)

Debugged into this, the project-system is correctly disposing the workspace project context. This occurs in both new and old project-system

tag @jasonmalinowski 
</Description>
        <CreatedDate>28/12/2018</CreatedDate>
        <ClosedDate>04/01/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32137</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Fix and validate compiler extension VSIX</Title>
    <Description>This adds validation to Roslyn.Compilers.Extension.vsix to verify all of the correct DLLs are present. This is essentially the same list we have for Microsoft.Net.Compilers.nupkg as it's logically the same deployment. 

This also fixes up the missing DLL that it found. 

Follow up to #32115</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32137</PullRequestID>
        <IssueID>32115</IssueID>
        <Title>Fix compiler extension VSIX dependencies</Title>
        <Description>We did not include required dependencies in Compiler Extension VSIX.</Description>
        <CreatedDate>03/01/2019</CreatedDate>
        <ClosedDate>03/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32128</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Wait for design mode before closing a solution</Title>
    <Description>This change improves integration test reliability by ensuring the debugger is terminated prior to attempting to close a solution.

📝 This pull request builds on #32122. Only the last commit is unique to this pull request.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32128</PullRequestID>
        <IssueID>32122</IssueID>
        <Title>Fix .NET Core project tests</Title>
        <Description>Closes #18996
Closes #19090
Closes #19091

Implements a workaround for #32121.</Description>
        <CreatedDate>03/01/2019</CreatedDate>
        <ClosedDate>03/01/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Integration-Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32122</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix .NET Core project tests</Title>
    <Description>Closes #18996
Closes #19090
Closes #19091

Implements a workaround for #32121.</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32122</PullRequestID>
        <IssueID>18996</IssueID>
        <Title>CSharpErrorListDesktop.ErrorLevelWarning test and related are flakey</Title>
        <Description>
Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListNetCore.ErrorList
Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListNetCore.ErrorLevelWarning
Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListDesktop.ErrorList
Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListDesktop.ErrorLevelWarning</Description>
        <CreatedDate>26/04/2017</CreatedDate>
        <ClosedDate>03/01/2019</ClosedDate>
        <Labels>
          <Label>Area-External</Label>
          <Label>Disabled Test</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32122</PullRequestID>
        <IssueID>19090</IssueID>
        <Title>investigate flaky netcore tests</Title>
        <CreatedDate>28/04/2017</CreatedDate>
        <ClosedDate>03/01/2019</ClosedDate>
        <Labels>
          <Label>Area-External</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32122</PullRequestID>
        <IssueID>19091</IssueID>
        <Title>CSharpSquigglesDesktop and CSharpSquigglesNetCore tests are flaky</Title>
        <Description>VerifySemanticErrorSquiggles
VerifySyntaxErrorSquiggles</Description>
        <CreatedDate>28/04/2017</CreatedDate>
        <ClosedDate>03/01/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Disabled Test</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32122</PullRequestID>
        <IssueID>32121</IssueID>
        <Title>Error list sometimes doesn't clear on solution close</Title>
        <Description>Observed in some recent integration test runs.

⚠️ The following workaround should be removed when this issue is fixed:

https://github.com/dotnet/roslyn/blob/f4e99378935b880202d49e3a75ca99cbd8f498c3/src/VisualStudio/IntegrationTest/TestUtilities/InProcess/ErrorList_InProc.cs#L106-L112</Description>
        <CreatedDate>03/01/2019</CreatedDate>
        <ClosedDate>25/01/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Integration-Test</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32119</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix QuickInfo tests</Title>
    <Description>Closes #19914</Description>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32119</PullRequestID>
        <IssueID>19914</IssueID>
        <Title>Unskip quickinfo tests after moving to new VS build</Title>
        <Description>https://github.com/dotnet/roslyn/pull/19728 removes our QuickInfo command handler now that one is implemented by the editor. However, we haven't yet moved Jenkins to a machine with editor bits that have their command handler. Skipping all tests that use the quickinfo command until we move to a new build. We'll need to unskip when we move forward.</Description>
        <CreatedDate>31/05/2017</CreatedDate>
        <ClosedDate>03/01/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32067</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Static local functions</Title>
    <Description>Allow `static` modifier for local functions in C#8; report errors for `static` local functions that reference `this` or a variable in an outer scope; and allow shadowing of local and parameter names inside local functions.

[jcouv update:]
Championed issue: https://github.com/dotnet/csharplang/issues/1565
Last LDM notes: https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-09-10.md
Test plan: https://github.com/dotnet/roslyn/issues/32069</Description>
    <CreatedDate>31/12/2018</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32067</PullRequestID>
        <IssueID>8</IssueID>
        <Title>Feature request: Async stream generators</Title>
        <Description>Currenty C# supports pull based sequence generators. 
As IObservable&amp;lt;T&amp;gt; and IObserver&amp;lt;T&amp;gt; are now in mscorlib and Rx is such a success not only in .NET but in other languages and runtimes  why not to add to C# ability to easily create async push based stream generators.

It could look like this:

``

It would complete language support in the matrix of generators:

|  | sync | async |
| --- | --- | --- |
| **single** | T | Task&amp;lt;T&amp;gt; |
| **multiple** | IEnumerable&amp;lt;T&amp;gt; | IObservable&amp;lt;T&amp;gt; |
</Description>
        <CreatedDate>15/01/2015</CreatedDate>
        <ClosedDate>29/01/2015</ClosedDate>
        <Labels>
          <Label>Area-Language Design</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32063</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>KristianJakubik</FixedByID>
    <Title>Diagnostic for assignment to this with readonly fields</Title>
    <Description>Implements  #30263

The PR contains implementation of diagnostic, which is triggered when `struct` declaration contains at least one `readonly` field and contains assignment to `this` in a method.
The CodeFix changes readonly fields to writable fields by deleting `readonly` keyword out of field's declaration.

**Example:**
Input:
```
struct MyStruct
{
    public readonly int Value;

    public MyStruct(int value)
    {
        Value = value;
    }

    public void Test()
    {
        [|this = new MyStruct(5)|];
    }
}
```

Output:
```
struct MyStruct
{
    public int Value;

    public MyStruct(int value)
    {
        Value = value;
    }

    public void Test()
    {
        this = new MyStruct(5);
    }
}
```

**Questions**
* These questions remain unanswered:
- [x] What value should `IDE***` constant have
- &lt;strike&gt;  [ ] Should be the analyzer provided in VB.NET as well&lt;/strike&gt;
- &lt;strike&gt;[ ] Should the analyzer be reported for getters of struct&lt;/strike&gt;


</Description>
    <CreatedDate>30/12/2018</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32063</PullRequestID>
        <IssueID>30263</IssueID>
        <Title>Report a diagnostic for assignment to this with readonly fields</Title>
        <Description>This is related to #30240 and #30262.

A diagnostic should be reported if an assignment to `this` appears outside the constructor of a `struct` when the type contains one or more fields marked `readonly`.</Description>
        <CreatedDate>02/10/2018</CreatedDate>
        <ClosedDate>22/02/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32051</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jp2masa</FixedByID>
    <Title>Fixed adding attribute list with target specifier</Title>
    <Description>Fixes #27200

## Changes
- Fixed adding attribute list with target specifier.</Description>
    <CreatedDate>29/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32051</PullRequestID>
        <IssueID>27200</IssueID>
        <Title>DocumentEditor.AddAttribute does not always add the assembly keyword.</Title>
        <Description>15.7.2: 

**Steps to Reproduce**:

1. Open a minimal C# console app in an `MSBuildWorkspace`.
2. Add an assembly-level attribute to one of the source files in the project, say `Program.cs`.
3. Get a `Document` instance for the file.
4. Get a `DocumentEditor` instance for the file.
5. Create an assembly-level attribute via the following:
``
6. Call `DocumentEditor.AddAttribute` on the `CompilationUnit` associated with the file, supplying the above attribute list.
7. Note that the `assembly` keyword is not added to the file.
8. Now remove any assembly-level attributes from the source file.
9. Repeat the experiment and note that the `assembly` keyword is properly added.

**Expected Behavior**:
The `assembly` keyword should always be added if the proper `AttributeTargetSpecifier` is included.

**Actual Behavior**:
The `assembly` keyword is only added if there are no other assembly-level attributes in the compilation unit.

See attached repro.
[RoslynTest.zip](https://github.com/dotnet/roslyn/files/2042865/RoslynTest.zip)
</Description>
        <CreatedDate>27/05/2018</CreatedDate>
        <ClosedDate>02/01/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Concept-API</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32048</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Remove empty leading trivia when removing unused imports.</Title>
    <Description>When removing unused imports we attempt to preserve non-empty leading trivia. We do this by pre-pending it to the next import. However, if that import had non-preservable trivia, it would then be preservable and we could accumulate lots of blanks lines.

![remove empty trivia3](https://user-images.githubusercontent.com/611219/50650756-34ccd300-0f36-11e9-9d62-4f9485b3a544.gif)

Fixes #27006</Description>
    <CreatedDate>28/12/2018</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32048</PullRequestID>
        <IssueID>27006</IssueID>
        <Title>"Remove and sort usings" won't remove the blank lines it introduced</Title>
        <Description>_From @davkean on May 21, 2018 9:0_

When "Separate using directive groups" is turned on, "Remove and Sort usings" doesn't remove the blank lines it introduced:

Remove and sort the following class (which is what it original generated before all the code was removed)

``


_Copied from original issue: dotnet/project-system#3559_</Description>
        <CreatedDate>21/05/2018</CreatedDate>
        <ClosedDate>04/01/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32041</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Ensure nullability mismatch in implemented interface types is treated as a warning.</Title>
    <Description>Fixes #31974
Related to #30655, fixes for C#
Related to #31977, fixes for C#
Fixes #31858</Description>
    <CreatedDate>28/12/2018</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32041</PullRequestID>
        <IssueID>31974</IssueID>
        <Title>C# compiler fails to detect duplicate explicit implementation for the same member, an invalid assembly is emitted</Title>
        <Description>``
Probably a special error would be better.</Description>
        <CreatedDate>21/12/2018</CreatedDate>
        <ClosedDate>04/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32041</PullRequestID>
        <IssueID>30655</IssueID>
        <Title>Should Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.MetadataDecoder.GetSymbolForMemberRef ignore tuple names when it compares type symbols?</Title>
        <Description>``

I had to adjust this code to ignore nullability information in order to get correct behavior in presence of nullability modifiers. It feels like that tuple names could cause the same problem.</Description>
        <CreatedDate>22/10/2018</CreatedDate>
        <ClosedDate>12/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32041</PullRequestID>
        <IssueID>31977</IssueID>
        <Title>```Interfaces``` and ```AllInterfaces``` disagree in tuple element names used by interfaces, FindImplementationForInterfaceMember fails to locate correct implementation in some scenarios </Title>
        <Description>``

Expected:
Both APIs should return the same interface type, tuple element names should match. </Description>
        <CreatedDate>21/12/2018</CreatedDate>
        <ClosedDate>12/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32041</PullRequestID>
        <IssueID>31858</IssueID>
        <Title>Many errors reported when enabling nullable reference types</Title>
        <Description>**Version Used**: Microsoft.Net.Compilers 3.0.0-beta2-18616-01

🔗 https://github.com/tunnelvisionlabs/dotnet-trees/pull/65
🔗 https://ci.appveyor.com/project/sharwell/dotnet-trees/builds/21060162

**Steps to Reproduce**:

tunnelvisionlabs/dotnet-trees#65

**Expected Behavior**:

The project compiles, with zero or more new warnings related to nullable reference types reported.

**Actual Behavior**:

The project does not compile. The reported errors appear to be unrelated to nullable reference types.

``
</Description>
        <CreatedDate>17/12/2018</CreatedDate>
        <ClosedDate>04/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32037</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>vepanimas</FixedByID>
    <Title>Add code fix for non-ref structs with members of the specific types</Title>
    <Description>Fixes #31831.

A code fix for the compiler error "CS8345: Field or auto-implemented property cannot be of type '&lt;specific type&gt;' unless it is an instance member of a ref struct."

It fixes a case when we have such kind of code:
```
struct S
{
    Span&lt;int&gt; span;
}
```

Instance fields of a `Span&lt;T&gt;` type require a containing struct to be allocated on the stack, this is implemented using a `ref` keyword. So it's good to have an auto-fix converting the previous code to
```
ref struct S
{
    Span&lt;int&gt; span;
}
```

**Questions:**

- [ ] We probably also need a separate code fix changing a static `Span&lt;T&gt;` prop/field to the instance one.
- [x] Fix assembly references for unit tests.</Description>
    <CreatedDate>28/12/2018</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32037</PullRequestID>
        <IssueID>31831</IssueID>
        <Title>Code fix for CS8345 to make struct a ref struct</Title>
        <Description>``

It would be nice to have a code fix to make `S` a ref struct.</Description>
        <CreatedDate>16/12/2018</CreatedDate>
        <ClosedDate>28/01/2019</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>32018</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>IDiscardPatternOperation, ISwitchExpressionOperation, ISwitchExpressionArmOperation</Title>
    <Description>Adds further IOperation nodes for recursive patterns
Follow-up to #31967 per #32012 
Issue #32012 also describes additional open issues to be addressed later.
</Description>
    <CreatedDate>25/12/2018</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32018</PullRequestID>
        <IssueID>31967</IssueID>
        <Title>IOperation for recursive pattern and switch expression</Title>
        <Description>Despite the title, I have not done switch expression nodes in this PR.  That will be a later PR.
Part of #27749</Description>
        <CreatedDate>20/12/2018</CreatedDate>
        <ClosedDate>27/12/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-API</Label>
          <Label>Feature - IOperation</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32018</PullRequestID>
        <IssueID>32012</IssueID>
        <Title>Open IOperation issues in recursive patterns</Title>
        <Description>The following open issues relating to IOperation exist in the `features/recursive-patterns` branch after #31967 and #32018:

#### Addressed in https://github.com/dotnet/roslyn/pull/32018 and elsewhere
- [X] Need to get some feedback on whether we should be using Tuples in the API here. We could potentially replace with a struct instead. https://github.com/dotnet/roslyn/pull/31967#discussion_r243438943 [Moved to https://github.com/dotnet/roslyn/issues/32756]
- [X] Add additional verifications in tests for recursive patterns. https://github.com/dotnet/roslyn/pull/31967#discussion_r244034176 [https://github.com/dotnet/roslyn/commit/511c06e0414a073e534f4e956deb083e5546e9ac]
- [X] Testing around `HasErrors` scenarios, such as when there is no `DeconstructSymbol` but there are patterns. https://github.com/dotnet/roslyn/pull/31967#discussion_r243438375 [https://github.com/dotnet/roslyn/commit/511c06e0414a073e534f4e956deb083e5546e9ac]
- [X] Additional tests for CFG for switch expressions, including error scenarios.
- [X] Add CFG tests for control-flow within a constant pattern within a recursive pattern within an is-expression.
  - [X] @AlekseyTs says "The kind of test that would be interesting is a scenario with a control flow somewhere at the end of the recursive pattern, in the last sub-pattern, etc. I think the added test (`IsPattern_ControlFlowInPattern_02`) isn't a good representative of possible shortcomings of the current rewrite. It is not blocking for this PR, but please open an issue to follow-up on this subject."  Since the test does precisely as requested, I am not sure what this is suggesting.
- [x] switch expression IOperation still needs to be designed and implemented.
- [x] The discard pattern should be a separate IOperation node from the discard expression. https://github.com/dotnet/roslyn/pull/31967#discussion_r243717420
- [x] Could improve code slightly by using the `SetParentOperation` that takes an array https://github.com/dotnet/roslyn/pull/31967#pullrequestreview-187570778
- [x] Remove `DataFlow` from test https://github.com/dotnet/roslyn/pull/31967#discussion_r243718235
- [x] Use `nameof` to keep code in sync https://github.com/dotnet/roslyn/pull/31967#discussion_r243718570 https://github.com/dotnet/roslyn/pull/31967#discussion_r244030559 https://github.com/dotnet/roslyn/pull/31967#discussion_r244029776
- [x] Rename `d` to `p` in `foreach (var d in propertySubpatterns)` [https://github.com/dotnet/roslyn/pull/31967#discussion_r244034690]
- [x] `IPatternOperation.InputType` should be printed in IOperation tests.
- [x] Revert the change to VisitArray to permit default arrays. https://github.com/dotnet/roslyn/pull/31967#discussion_r244032274
</Description>
        <CreatedDate>24/12/2018</CreatedDate>
        <ClosedDate>24/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>32018</PullRequestID>
        <IssueID>32012</IssueID>
        <Title>Open IOperation issues in recursive patterns</Title>
        <Description>The following open issues relating to IOperation exist in the `features/recursive-patterns` branch after #31967 and #32018:

#### Addressed in https://github.com/dotnet/roslyn/pull/32018 and elsewhere
- [X] Need to get some feedback on whether we should be using Tuples in the API here. We could potentially replace with a struct instead. https://github.com/dotnet/roslyn/pull/31967#discussion_r243438943 [Moved to https://github.com/dotnet/roslyn/issues/32756]
- [X] Add additional verifications in tests for recursive patterns. https://github.com/dotnet/roslyn/pull/31967#discussion_r244034176 [https://github.com/dotnet/roslyn/commit/511c06e0414a073e534f4e956deb083e5546e9ac]
- [X] Testing around `HasErrors` scenarios, such as when there is no `DeconstructSymbol` but there are patterns. https://github.com/dotnet/roslyn/pull/31967#discussion_r243438375 [https://github.com/dotnet/roslyn/commit/511c06e0414a073e534f4e956deb083e5546e9ac]
- [X] Additional tests for CFG for switch expressions, including error scenarios.
- [X] Add CFG tests for control-flow within a constant pattern within a recursive pattern within an is-expression.
  - [X] @AlekseyTs says "The kind of test that would be interesting is a scenario with a control flow somewhere at the end of the recursive pattern, in the last sub-pattern, etc. I think the added test (`IsPattern_ControlFlowInPattern_02`) isn't a good representative of possible shortcomings of the current rewrite. It is not blocking for this PR, but please open an issue to follow-up on this subject."  Since the test does precisely as requested, I am not sure what this is suggesting.
- [x] switch expression IOperation still needs to be designed and implemented.
- [x] The discard pattern should be a separate IOperation node from the discard expression. https://github.com/dotnet/roslyn/pull/31967#discussion_r243717420
- [x] Could improve code slightly by using the `SetParentOperation` that takes an array https://github.com/dotnet/roslyn/pull/31967#pullrequestreview-187570778
- [x] Remove `DataFlow` from test https://github.com/dotnet/roslyn/pull/31967#discussion_r243718235
- [x] Use `nameof` to keep code in sync https://github.com/dotnet/roslyn/pull/31967#discussion_r243718570 https://github.com/dotnet/roslyn/pull/31967#discussion_r244030559 https://github.com/dotnet/roslyn/pull/31967#discussion_r244029776
- [x] Rename `d` to `p` in `foreach (var d in propertySubpatterns)` [https://github.com/dotnet/roslyn/pull/31967#discussion_r244034690]
- [x] `IPatternOperation.InputType` should be printed in IOperation tests.
- [x] Revert the change to VisitArray to permit default arrays. https://github.com/dotnet/roslyn/pull/31967#discussion_r244032274
</Description>
        <CreatedDate>24/12/2018</CreatedDate>
        <ClosedDate>24/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31986</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Unify StrongNameProvider implementations</Title>
    <Description>There are two ways the compiler implements strong name signing:

1. Using the `IClrStrongName` COM interface. This supports all forms of signing but is only available on Windows. 
1. Using the `ManagedPEBuilder.Sign` method. This works on every operating system but does not support key containers or counter signatures. 

The preference in the compiler is to use the portable signing (option 2). The key container and counter signature scenarios are fairly rare. The majority of code uses key file and this option is much more portable and efficient (doesn't require writing a temporary unsigned PE out to `%TEMP%`). 

Customers though should be unaware of this difference. The compiler should detect when a key container / counter signature is used and silently back off to the COM based implementation. In the case that this happened on a non-Windows platform it will just issue an error. 

The compiler attempted to make this switch in VS 15.6 but had to back out after customer bugs revealed we'd missed a key scenario. The compiler implemented it's signing detection by looking at the command line arguments for a key container. Yet signing can also be specified by using the [AssemblyKeyNameAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assemblykeynameattribute?view=netframework-4.7.2) attribute. This means the compiler can't actually know how signing is implemented until we're fairly far along in the compilation process. Hence we had to back off a bit and make non-portable the default in most cases.

This change again makes portable signing our default and corrects the detection code to be during compilation, not during command line argument parsing. Additionally it makes the following changes:

- Deletes `PortableStrongNameProvider`. There is really no reason to have two providers here. It's just one provider that knows different ways to sign assemblies
- Changes our test infrastructure to test on both providers where as before portable signing testing was pretty scattered. 
- Extends our signing tests to run on Linux 
- The changes to our tests is quite large but it is also mostly mechanical

closes #22327
closes #24050 
closes #30152

related to #25340
related to #26683

</Description>
    <CreatedDate>21/12/2018</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31986</PullRequestID>
        <IssueID>22327</IssueID>
        <Title>Remove StrongNameProviderTests.cs/VirtualizedStrongnameProvider</Title>
        <Description>With some changes, this can be changed to use the VirtualizedStrongNameFileSystem and a regular PortableStrongNameProvider instance.</Description>
        <CreatedDate>25/09/2017</CreatedDate>
        <ClosedDate>07/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31986</PullRequestID>
        <IssueID>24050</IssueID>
        <Title>With portable signing enabled, Roslyn does not support signing with the ECMA strong name key</Title>
        <Description>The ECMA strong name key appears to be a special case for signing that will need to be handled separately.</Description>
        <CreatedDate>04/01/2018</CreatedDate>
        <ClosedDate>07/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31986</PullRequestID>
        <IssueID>30152</IssueID>
        <Title>Strong name test infrastructure broken on Unix</Title>
        <Description>Our code for testing strong name signatures is broken on Unix. It appears to be a combination of bad windows paths and placing items into disk locations that aren't valid. </Description>
        <CreatedDate>26/09/2018</CreatedDate>
        <ClosedDate>07/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31986</PullRequestID>
        <IssueID>25340</IssueID>
        <Title>Strong Name signing with a key installed in a container</Title>
        <Description>After upgrading to respectively installing Visual Studio 2017 Version 15.6 no assemblies will be signed with a strong name.

We are using the AssemblyKeyName Attribute in AssemblyInfo.cs.

Using a KeyFile instead (created from the projects properties) will work.

Am I missing something?

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/209811/strong-name-signing-with-a-key-installed-in-a-cont.html
VSTS ticketId: 578075_
_These are the original issue comments:_

Matthew Dodds on 3/7/2018, 10:24 AM (12 hours ago): &lt;p&gt;I am also having this problem with using AssemblyKeyName, which is showing up as two different issues. I am using C#, ASP.NET, .NET 4.7.1. Both of these issues were fixed once I reverted to Visual Studio 15.5.7. I also confirmed that using AssemblyKeyFile referencing a .snk instead of using AssemblyKeyName fixed both issues.&lt;/p&gt;&lt;p&gt;First: &lt;/p&gt;&lt;p&gt;Attempting to load the program in IIS results in the exception: "Could not load file or assembly '[redacted], Culture=neutral, PublicKeyToken=928c297f0d8e5e72' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference." &lt;/p&gt;&lt;p&gt;Fusion log contained: "Comparing the assembly name resulted in the mismatch: PUBLIC KEY TOKEN" &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;
Second:&lt;/p&gt;&lt;p&gt;
Building of a solution that references some of our C# libraries built outside of the solution will result in: "Error CS8002: Referenced assembly '[redacted], Version=6.3.0.144, Culture=neutral, PublicKeyToken=null' does not have a strong name." &lt;/p&gt;&lt;p&gt;Building this solution a second time will result it successfully building, but will always fail if telling Visual Studio to rebuild. &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>08/03/2018</CreatedDate>
        <ClosedDate>16/03/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31986</PullRequestID>
        <IssueID>26683</IssueID>
        <Title>Enable portable signing for Mono</Title>
        <Description>### Customer scenario

Signing was previously working on Mono for keyfiles, but does not work after 2.7.1.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/26678
https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/615168

### Workarounds, if any

None, for Mono.

### Risk

This check is only used for switching the key providers, and has a focused change just to allow mono to go through the same path as CoreCLR.

### Performance impact

Low, one small reflection check per compile.

### Is this a regression from a previous update?

Yes.

### Root cause analysis

We have no Mono tests. It's not clear that this was supposed to work for Mono, it may have simply been functioning by accident.

### How was the bug found?

Mono reported.
</Description>
        <CreatedDate>07/05/2018</CreatedDate>
        <ClosedDate>11/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Needs Shiproom Approval</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31976</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Add enhanced color experiment for new classifications.</Title>
    <Description>An experiment for adding new theme colors for some of the classifications added in #31231. The option to enable/disable the experiment will be in the Tools&gt;Options Preview Features page.
![image](https://user-images.githubusercontent.com/611219/50315510-fb8d6100-0467-11e9-8490-a565f167d009.png)

If the user has customized any of the target colors then, this experiment will not apply colors. If the user has customized their theme but wishes to enable enhanced colors then, they can use the 'Use Defaults' button on the Tools&gt;Options Fonts and Colors page to get their theme into a state where enhanced colors can be applied (a restart may be required).
![image](https://user-images.githubusercontent.com/611219/50317784-414f2700-0472-11e9-8ec0-bf8cf41a2735.png)

The goal was to choose colors and use them in a similar fashion as the VS Code Light+ and Dark+ themes.
![image](https://user-images.githubusercontent.com/611219/50316402-570d1e00-046b-11e9-8ad2-c371ab1fb35c.png)

Light Theme Sample
![image](https://user-images.githubusercontent.com/611219/50312471-49509c00-045d-11e9-87a9-78f7dc1c085d.png)

Dark Theme Sample
![image](https://user-images.githubusercontent.com/611219/50312414-1dcdb180-045d-11e9-801d-209694ede67d.png)

</Description>
    <CreatedDate>21/12/2018</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31976</PullRequestID>
        <IssueID>31231</IssueID>
        <Title>Add new classifications</Title>
        <Description>This PR introduces new classifications for 4 concepts
- Symbol Kinds
- Operator Overloads
- Control Keywords
- Static Symbols

Fixes #31714

## Symbol Kinds
Most of the classifications have already been added but never exposed to users via `ClassifiationFormatDefinitions`. In this PR I add `ClassificationFormatDefinitions` for the classifications added in https://github.com/dotnet/roslyn/pull/25126 as well as new classifications for Namespace name and Label name.
•	User Symbols - Field Name
•	User Symbols - Enum Member Name
•	User Symbols - Constant Name
•	User Symbols - Local Name
•	User Symbols - Parameter Name
•	User Symbols - Method Name
•	User Symbols - Extension Method Name
•	User Symbols - Property Name
•	User Symbols - Event Name
•	User Symbols - Namespace Name
•	User Symbols - Label Name

## Operator Overloads 
Requested in https://github.com/dotnet/roslyn/issues/29492. This classification sematically classifies overloaded operators.
•	Operator - Overload

## Control Keywords
Requested in https://github.com/dotnet/roslyn/issues/18810. This classification syntactically classifies control keywords
•	Keyword - Control

## Static Symbols
This classification would visually inform developers that a Symbol was static. This classification is additive in that it is an additional tag that static symbols are given in addition to their identifier type. This allows for Static Symbols to be configured to be Bold and Field Names to be Orange and the editor will render Static Fields in Bold Orange.
•	Symbol - Static


</Description>
        <CreatedDate>17/11/2018</CreatedDate>
        <ClosedDate>20/12/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31966</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Cache the return values for GetIdForErrorCode</Title>
    <Description>Fixes #31964</Description>
    <CreatedDate>20/12/2018</CreatedDate>
    <ClosedDate>01/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31966</PullRequestID>
        <IssueID>31964</IssueID>
        <Title>Error list filtering results in error code allocations</Title>
        <Description>This method should use a cache for the ID&amp;rarr;error code mapping to reduce allocations.

🔗 Observed in https://developercommunity.visualstudio.com/content/problem/412691/typing-lag-in-preview-2.html

https://github.com/dotnet/roslyn/blob/51638c7f7adf70c72c80eae27732e0337de3ccca/src/Compilers/Core/Portable/Diagnostic/CommonMessageProvider.cs#L102-L105</Description>
        <CreatedDate>20/12/2018</CreatedDate>
        <ClosedDate>01/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>Developer Community</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31918</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chborl</FixedByID>
    <Title>Keybinding reset gold bar is displayed when not applicable</Title>
    <Description>Fix for reverted PR: #31132

Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/659765

In some scenarios we display the gold bar with "We notice you suspended 'ReSharper Ultimate'. Reset Keymappings to continue to navigate and refactor" when ReSharper is in fact running. This occurs when launching VS by opening a project that takes a while to load, for example a project that last had a XAML page open.

We originally did a single check for ReSharper's Suspend button; if it was active ReSharper was assumed to be running, if not it was assumed to be suspended.

This fix will instead periodically check for ReSharper's Resume button to be active, and if that doesn't occur after a reasonable amount of time will assume ReSharper is running.</Description>
    <CreatedDate>18/12/2018</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31918</PullRequestID>
        <IssueID>31132</IssueID>
        <Title>Fix issue where we show the 'ReSharper is suspended' gold bar before ReSharper has finished loading</Title>
        <Description>Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/659765

In some scenarios we display the gold bar with "*We notice you suspended 'ReSharper Ultimate'.  Reset Keymappings to continue to navigate and refactor"* when ReSharper is in fact running.  This occurs when launching VS by opening a project that takes a while to load, for example a project that last had a XAML page open.

We originally did a single check for ReSharper's Suspend button;  if it was active ReSharper was assumed to be running, if not it was assumed to be suspended.  

This fix will instead periodically check for ReSharper's Resume button to be active, and if that doesn't occur after a reasonable amount of time will assume ReSharper is running.  </Description>
        <CreatedDate>13/11/2018</CreatedDate>
        <ClosedDate>07/12/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31851</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cshung</FixedByID>
    <Title>Include the member name in the error message when one attempt to explicitly implement an interface event in an interface</Title>
    <Description>This is my attempt to fix #19034</Description>
    <CreatedDate>17/12/2018</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31851</PullRequestID>
        <IssueID>19034</IssueID>
        <Title>Incomplete member name in errors CS0541 and CS0065 </Title>
        <Description>``

Observed:
Error	CS0541	'I1.': explicit interface declaration can only be declared in a class or struct	
Error	CS0065	'I1.': event property must have both add and remove accessors	

Expected:
Error	CS0541	'I1.P10': explicit interface declaration can only be declared in a class or struct	
Error	CS0065	'I1.P10': event property must have both add and remove accessors	</Description>
        <CreatedDate>27/04/2017</CreatedDate>
        <ClosedDate>14/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-Diagnostic Clarity</Label>
          <Label>Language-C#</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31782</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Fix additional newlines being added when adding all missing imports</Title>
    <Description>Before applying the missing imports remove any additional newlines that are introduced by add import wanting to separate the import from the rest of the code. This only occurs when there are no pre-existing imports.

Fixes #31768
</Description>
    <CreatedDate>14/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31782</PullRequestID>
        <IssueID>31768</IssueID>
        <Title>Add missing usings has extra whitespace</Title>
        <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.0.0 Preview 1.1 [28407.52.d16.0]

**Steps to Reproduce**:

1. Copy and paste in code that needs usings
2. Apply new codefix that adds missing usings

![image](https://user-images.githubusercontent.com/8293542/49971575-ce7b0480-fee3-11e8-8cd7-7093d87896a5.png)



**Expected Behavior**:
There should be only one new line between usings.
![image](https://user-images.githubusercontent.com/8293542/49971636-f8342b80-fee3-11e8-9f02-269de5981f74.png)


**Actual Behavior**:
There are two new lines between usings
![image](https://user-images.githubusercontent.com/8293542/49971781-7db7db80-fee4-11e8-9c1e-8ecdc45e72e8.png)

@JoeRobich for reference.
</Description>
        <CreatedDate>13/12/2018</CreatedDate>
        <ClosedDate>02/01/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31602</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Unmanaged constructed types tests</Title>
    <Description>Related to #31374 and dotnet/csharplang#1744

Seeing an interesting test failure in the new verification test in 
7b278f4. Anything come to mind on how to address this @jaredpar @agocke?

```
System.Exception : Verification failed
---- Roslyn.Test.Utilities.Desktop.RuntimePeVerifyException : 
PeVerify failed for assembly 'C:\Users\rigibson\AppData\Local\Temp\RoslynTests':
[ : MyStruct`1[T]::get_Item][mdToken=0x6000002][offset 0x0000000F][found unmanaged pointer] Expected numeric type on the stack.
[ : C::Main][mdToken=0x6000003][offset 0x00000012][found address of Single] Expected numeric type on the stack.


Stack Trace:
  C:\Users\rigibson\src\roslyn\src\Test\Utilities\Portable\Platform\Desktop\DesktopRuntimeEnvironment.cs(320,0): at Roslyn.Test.Utilities.Desktop.DesktopRuntimeEnvironment.Verify(Verification verification)
  C:\Users\rigibson\src\roslyn\src\Test\Utilities\Portable\CompilationVerifier.cs(160,0): at Microsoft.CodeAnalysis.Test.Utilities.CompilationVerifier.Emit(String expectedOutput, Nullable`1 expectedReturnCode, String[] args, IEnumerable`1 manifestResources, EmitOptions emitOptions, Verification peVerify, SignatureDescription[] expectedSignatures)
  C:\Users\rigibson\src\roslyn\src\Test\Utilities\Portable\CommonTestBase.cs(154,0): at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.Emit(Compilation compilation, IEnumerable`1 dependencies, IEnumerable`1 manifestResources, SignatureDescription[] expectedSignatures, String expectedOutput, Nullable`1 expectedReturnCode, String[] args, Action`1 assemblyValidator, Action`1 symbolValidator, EmitOptions emitOptions, Verification verify)
  C:\Users\rigibson\src\roslyn\src\Test\Utilities\Portable\CommonTestBase.cs(68,0): at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompileAndVerifyCommon(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 assemblyValidator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Nullable`1 expectedReturnCode, String[] args, EmitOptions emitOptions, Verification verify)
  C:\Users\rigibson\src\roslyn\src\Compilers\Test\Utilities\CSharp\CSharpTestBase.cs(605,0): at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBase.CompileAndVerify(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 validator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Nullable`1 expectedReturnCode, String[] args, EmitOptions emitOptions, Verification verify)
  C:\Users\rigibson\src\roslyn\src\Compilers\Test\Utilities\CSharp\CSharpTestBase.cs(564,0): at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBase.CompileAndVerify(CSharpTestSource source, IEnumerable`1 references, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 assemblyValidator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Nullable`1 expectedReturnCode, String[] args, CSharpCompilationOptions options, CSharpParseOptions parseOptions, EmitOptions emitOptions, TargetFramework targetFramework, Verification verify)
  C:\Users\rigibson\src\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\GenericConstraintsTests.cs(3659,0): at Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests.Semantics.GenericConstraintsTests.NestedGenericStructContainingPointer()
  ----- Inner Stack Trace -----
  C:\Users\rigibson\src\roslyn\src\Test\Utilities\Portable\Platform\Desktop\RuntimeAssemblyManager.cs(455,0): at Roslyn.Test.Utilities.Desktop.RuntimeAssemblyManager.PeVerifyModules(String[] modulesToVerify, Boolean throwOnError)
     at Roslyn.Test.Utilities.Desktop.RuntimeAssemblyManager.PeVerifyModules(String[] modulesToVerify, Boolean throwOnError)
  C:\Users\rigibson\src\roslyn\src\Test\Utilities\Portable\Platform\Desktop\DesktopRuntimeEnvironment.cs(310,0): at Roslyn.Test.Utilities.Desktop.DesktopRuntimeEnvironment.Verify(Verification verification)

```

Umbrella issue for unmanaged constructed types: https://github.com/dotnet/roslyn/issues/31374</Description>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31602</PullRequestID>
        <IssueID>31374</IssueID>
        <Title>Test plan for "unmanaged generic structs"</Title>
        <Description>Proposal: https://github.com/dotnet/csharplang/issues/1744

This issue is a place to collect test ideas and track their validation. Use the [compiler test plan](https://github.com/dotnet/roslyn/blob/master/docs/contributing/Compiler%20Test%20Plan.md) as a tool for brainstorming.

- [x] validate with LangVersion 7.3
- [x] test with tuple type ([SO](https://stackoverflow.com/questions/53992855/how-do-a-struct-containing-valuetuple-can-satisfy-unmanaged-constraint-but-valu) thread) #32103 
- [x] write speclet (contained under Design section of proposal)
- ~~[ ] update compiler test plan~~ (doesn't appear to be anything to add)
- [x] test public API `IsUnmanagedType` in new scenarios
- [x] Test for ref structs
- [x] Test the IsManagedType API as suggested by Julien
- [x] Test moveability (existing rules should be sufficient)
- [x] Have at least one test spit some IL to look at and have a few tests run with "expected output" to make sure the CLR can handle the code.
- [x] Stackalloc array of items
- [x] (Mutually) Recursive struct definition
  - [x] Also check the IsUnmanagedType API for these
- [x] Fixed-size buffer inside generic struct
- [x] Also check across metadata (metadata struct definition has private object or unmanaged field)
  - [x] Also private `T` field
- [x] For all places unmanaged type is required, we should have a test that covers that code path and ensures that the required feature diagnostic is produced at language version &lt; 8.0
  - [x] addressOf `&amp;`
  - [x] `fixed` with address of field
  - [x] `fixed` with array of generic structs
  - [x] `sizeof`
  - [x] `stackalloc` with size
  - [x] implicit `stackalloc` with initializer
  - [x] field of type pointer to unmanaged generic struct
  - [x] unmanaged constraint</Description>
        <CreatedDate>26/11/2018</CreatedDate>
        <ClosedDate>30/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31602</PullRequestID>
        <IssueID>1744</IssueID>
        <Title>Incomplete catch block in lambda doesn't show Add Using quick fix</Title>
        <Description>Source:

``

The Add Using/Qualify Name quick fix will not appear until after adding `) {`.
</Description>
        <CreatedDate>01/04/2015</CreatedDate>
        <ClosedDate>28/04/2015</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31093</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Exhaustiveness checking tracks only non-null decision paths</Title>
    <Description>Addresses part of #30597
Later, in a separate PR, the null paths will be checked in the nullable walker</Description>
    <CreatedDate>10/11/2018</CreatedDate>
    <ClosedDate>14/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31093</PullRequestID>
        <IssueID>30597</IssueID>
        <Title>Handling of null values in computing switch expression exhaustiveness</Title>
        <Description>The "nullable reference types" feature tracks when values in executable code likely can or cannot contain null.  This would be useful in performing exhaustiveness analysis of a switch expression, because warning about a "possible" unhandled null in a switch expression is sort of pointless if the nullability analysis determines that the value ought not be null.

We'd like to organize the analysis so that exhaustiveness checking is sensitive to the results of the nullable analysis. To do that, the binding phase will assume (for the purposes of exhaustiveness analysis) that no value in a pattern-matching operation can be a reference null. If the nullable feature is enabled, the nullable checked pass will complete the analysis by checking for exhaustiveness in cases where some input value is null.

That means code like this

``

Then a warning that the switch expression is incomplete will be produced by the nullable analysis pass.

(I don't know precisely when this was discussed in the LDM, but @jcouv, @AlekseyTs and I @gafter remember this being a decision)
</Description>
        <CreatedDate>18/10/2018</CreatedDate>
        <ClosedDate>30/03/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31092</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add a new SuppressMessageAttribute target scope to suppress diagnosti…</Title>
    <Description>…cs in a namespace and all its descendant symbols

Fixes #486

This SuppressMessageAttribute feature has been requested for a very long time and still gets frequent customer requests to date.

The current "Namespace" target scope for SuppressMessageAttribute suppresses diagnostics only in nodes directly contained within the namespace, but not in any of it's descendant symbols. This makes it very tedious to suppress certain analyzer diagnostics in entire namespace as one needs to add suppressions to individual types/namespaces within the namespace. This also creates a maintenance nightmare.

This PR adds a new target scope "NamespaceAndChildren" which suppresses diagnostics on the corresponding namespace and all its descendant symbols/members. Better naming suggestions for this scope name are welcome!

Example: `[assembly: SuppressMessage("Test", "Declaration", Scope="NamespaceAndChildren", Target="N.N1")]`</Description>
    <CreatedDate>10/11/2018</CreatedDate>
    <ClosedDate>15/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31092</PullRequestID>
        <IssueID>486</IssueID>
        <Title>Provide ability to suppress issues for all types within a namespace</Title>
        <Description>Copied from this [UserVoice request](https://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/7091554-allow-suppressmessageattribute-to-work-types-withi):

&gt; Right now the SuppressMessageAttribute only suppresses diagnostics against a namespace, but not the types within it. 
&gt; So this: 
&gt; 
&gt; ``
&gt; 
&gt; Would not work against types inside the `CodeCracker.Test.Design` namespace, but only if the diagnostic was on the namespace itself. To be able to do that, we need to add a SuppressMessageAttribute to each type individually, what is error prone, ugly and demands a lot of attention. 
&gt; There needs to be a way to allow for the suppression of diagnostics agains all types within a namespace. It should be a single line of code, just like the one above, but I don't want to suggest a syntax or format, and leave that to the C# team.

We could have a new scope called TypesInNamespace which would suppress within all types in that namespace.
</Description>
        <CreatedDate>13/02/2015</CreatedDate>
        <ClosedDate>15/11/2018</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Developer Community</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31082</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Track nullable state in try statements</Title>
    <Description>Fixes #30561</Description>
    <CreatedDate>09/11/2018</CreatedDate>
    <ClosedDate>13/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31082</PullRequestID>
        <IssueID>30561</IssueID>
        <Title>Variable should be nullable outside try block if assigned nullable value inside try block</Title>
        <Description>`s.Length` should result in a warning:
``
Reported by @gafter.</Description>
        <CreatedDate>17/10/2018</CreatedDate>
        <ClosedDate>13/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31075</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Add dynamic file support and hook it up to the project system</Title>
    <Description>Extracted from #30733</Description>
    <CreatedDate>09/11/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31075</PullRequestID>
        <IssueID>30733</IssueID>
        <Title>Added a way to inject dynamic file to workspace for component like ra…</Title>
        <Description>…zor.

through IDynamicFileInfoProvider and etc, external component such as razor should be able to provide us dynamic file (such as generated c# content for cshtml file) on the fly and let us know update on the content.

renamed Column to Character since Column should be only used when it accounts "tab". and count "tab" as tab size rather than just 1 char.

moved FAR to work on top of new set of APIs. it should now show things on html correctly

added support for code lens. but found 1 issue. without changing VS side, I can't fix filename. and without fixing filename, navigation won't work properly

...

need to add unit tests and etc. doens't work without project system and razor side changes yet.

![image](https://user-images.githubusercontent.com/1333179/47454003-e86d5600-d782-11e8-8c12-4b8b20b7cc80.png)
</Description>
        <CreatedDate>24/10/2018</CreatedDate>
        <ClosedDate>12/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31073</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Define IContentControlService for tool tips in EditorFeatures.Wpf</Title>
    <Description>Extracted from #30733</Description>
    <CreatedDate>09/11/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31073</PullRequestID>
        <IssueID>30733</IssueID>
        <Title>Added a way to inject dynamic file to workspace for component like ra…</Title>
        <Description>…zor.

through IDynamicFileInfoProvider and etc, external component such as razor should be able to provide us dynamic file (such as generated c# content for cshtml file) on the fly and let us know update on the content.

renamed Column to Character since Column should be only used when it accounts "tab". and count "tab" as tab size rather than just 1 char.

moved FAR to work on top of new set of APIs. it should now show things on html correctly

added support for code lens. but found 1 issue. without changing VS side, I can't fix filename. and without fixing filename, navigation won't work properly

...

need to add unit tests and etc. doens't work without project system and razor side changes yet.

![image](https://user-images.githubusercontent.com/1333179/47454003-e86d5600-d782-11e8-8c12-4b8b20b7cc80.png)
</Description>
        <CreatedDate>24/10/2018</CreatedDate>
        <ClosedDate>12/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31066</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Code style cleanup</Title>
    <Description>Extracted from #30733</Description>
    <CreatedDate>09/11/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31066</PullRequestID>
        <IssueID>30733</IssueID>
        <Title>Added a way to inject dynamic file to workspace for component like ra…</Title>
        <Description>…zor.

through IDynamicFileInfoProvider and etc, external component such as razor should be able to provide us dynamic file (such as generated c# content for cshtml file) on the fly and let us know update on the content.

renamed Column to Character since Column should be only used when it accounts "tab". and count "tab" as tab size rather than just 1 char.

moved FAR to work on top of new set of APIs. it should now show things on html correctly

added support for code lens. but found 1 issue. without changing VS side, I can't fix filename. and without fixing filename, navigation won't work properly

...

need to add unit tests and etc. doens't work without project system and razor side changes yet.

![image](https://user-images.githubusercontent.com/1333179/47454003-e86d5600-d782-11e8-8c12-4b8b20b7cc80.png)
</Description>
        <CreatedDate>24/10/2018</CreatedDate>
        <ClosedDate>12/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31065</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Handle errors in Inline Rename</Title>
    <Description>Extracted from #30733

This prevents the IDE from crashing when an Inline Rename operation triggers the problem described in #31074.</Description>
    <CreatedDate>09/11/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31065</PullRequestID>
        <IssueID>30733</IssueID>
        <Title>Added a way to inject dynamic file to workspace for component like ra…</Title>
        <Description>…zor.

through IDynamicFileInfoProvider and etc, external component such as razor should be able to provide us dynamic file (such as generated c# content for cshtml file) on the fly and let us know update on the content.

renamed Column to Character since Column should be only used when it accounts "tab". and count "tab" as tab size rather than just 1 char.

moved FAR to work on top of new set of APIs. it should now show things on html correctly

added support for code lens. but found 1 issue. without changing VS side, I can't fix filename. and without fixing filename, navigation won't work properly

...

need to add unit tests and etc. doens't work without project system and razor side changes yet.

![image](https://user-images.githubusercontent.com/1333179/47454003-e86d5600-d782-11e8-8c12-4b8b20b7cc80.png)
</Description>
        <CreatedDate>24/10/2018</CreatedDate>
        <ClosedDate>12/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31065</PullRequestID>
        <IssueID>31074</IssueID>
        <Title>Workspace.TryApplyChanges throwing not supported exception</Title>
        <Description>we have this in Workspace.TryApplyChanges
http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Workspace/Workspace.cs,1168

that can throw if new solution contains changes the host can't support.

but, it doesn't looks like we actually handle the exception in Roslyn or host.

due to that, when such situation happens, we sometimes show infobar, or generic VS exception mesasge box or crash.

probably need to figure out how to handle it in VS.</Description>
        <CreatedDate>09/11/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31064</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Move DisposableToolTip</Title>
    <Description>* The first two commits are extracted from #30733 
* Changes made relative to the original PR:
    * The type is `sealed` (correct `IDisposable` implementation)
    * The `Dispose` implementation allows for multiple calls (correct `IDisposable` implementation)</Description>
    <CreatedDate>09/11/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31064</PullRequestID>
        <IssueID>30733</IssueID>
        <Title>Added a way to inject dynamic file to workspace for component like ra…</Title>
        <Description>…zor.

through IDynamicFileInfoProvider and etc, external component such as razor should be able to provide us dynamic file (such as generated c# content for cshtml file) on the fly and let us know update on the content.

renamed Column to Character since Column should be only used when it accounts "tab". and count "tab" as tab size rather than just 1 char.

moved FAR to work on top of new set of APIs. it should now show things on html correctly

added support for code lens. but found 1 issue. without changing VS side, I can't fix filename. and without fixing filename, navigation won't work properly

...

need to add unit tests and etc. doens't work without project system and razor side changes yet.

![image](https://user-images.githubusercontent.com/1333179/47454003-e86d5600-d782-11e8-8c12-4b8b20b7cc80.png)
</Description>
        <CreatedDate>24/10/2018</CreatedDate>
        <ClosedDate>12/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31063</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Extract DocumentSpanExtensions to its own file</Title>
    <Description>Extracted from #30733</Description>
    <CreatedDate>09/11/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31063</PullRequestID>
        <IssueID>30733</IssueID>
        <Title>Added a way to inject dynamic file to workspace for component like ra…</Title>
        <Description>…zor.

through IDynamicFileInfoProvider and etc, external component such as razor should be able to provide us dynamic file (such as generated c# content for cshtml file) on the fly and let us know update on the content.

renamed Column to Character since Column should be only used when it accounts "tab". and count "tab" as tab size rather than just 1 char.

moved FAR to work on top of new set of APIs. it should now show things on html correctly

added support for code lens. but found 1 issue. without changing VS side, I can't fix filename. and without fixing filename, navigation won't work properly

...

need to add unit tests and etc. doens't work without project system and razor side changes yet.

![image](https://user-images.githubusercontent.com/1333179/47454003-e86d5600-d782-11e8-8c12-4b8b20b7cc80.png)
</Description>
        <CreatedDate>24/10/2018</CreatedDate>
        <ClosedDate>12/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31056</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Pattern-matching fixes for ITuple, short tuple patterns, and nulls</Title>
    <Description>* Implement LDM disambiguation rules for Deconstruct vs ITuple
* Permit 0-element and 1-element tuple patterns
Fixes #30962
Replaces #31027

* Handle null and nullable input for a var pattern with a tuple designation
Fixes #30906
Replaces #30935

* Don't report missing Deconstruct when there is more than one applicable Deconstruct
Fixes #31031
</Description>
    <CreatedDate>09/11/2018</CreatedDate>
    <ClosedDate>29/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31056</PullRequestID>
        <IssueID>30962</IssueID>
        <Title>Pattern-matching changes for short tuples</Title>
        <Description>Adjust the implementation of pattern-matching to reflect LDM [resolutions from 2018-11-05](https://github.com/dotnet/csharplang/issues/1054#issuecomment-436025050).  The last point will be included in the changes for https://github.com/dotnet/roslyn/issues/20648.

## Deconstruction vs ITuple

### **Proposed:**

1. If the type is a tuple type (any arity &gt;=0; see below), then use the tuple semantics
2. if the type has no accessible instance `Deconstruct`, and satisfies the `ITuple` deconstruct constraints, use `ITuple` semantics
3. Otherwise attempt `Deconstruct` semantics (instance or extension)

Alternative
1. If the type is a tuple type (any arity &gt;= 0; see below), then use the tuple semantics
2. If "binding" a Deconstruct invocation would finds one or more applicable methods, use Deconstruct.
3. if the satisfies the `ITuple` deconstruct constraints, use `ITuple` semantics

In both cases, 4. Error

***Decision***: Alternative

### Proposed:

1. Permit pattern-matching tuple patterns with 0 and 1 elements (appropriately disambiguated as previously decided)

``

***Conclusion***: Approved


### Proposed:

As part of this, I propose that we consider `System.ValueTuple&lt;T&gt;` instantitations to be considered tuple types.  I do not propose any syntax changes related to this.

As part of this, I propose that we consider `System.ValueTuple` to be considered a tuple type.  I do not propose any syntax changes related to this.

***Conclusion***: Approved
</Description>
        <CreatedDate>05/11/2018</CreatedDate>
        <ClosedDate>30/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31056</PullRequestID>
        <IssueID>31027</IssueID>
        <Title>Support 0-element and 1-element tuple patterns</Title>
        <Description>Fixes #30962
Unfortunately we cannot test binding `var ()` and `var (x)` until #30935 has been integrated
</Description>
        <CreatedDate>07/11/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>PR For Personal Review Only</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31056</PullRequestID>
        <IssueID>30906</IssueID>
        <Title>Matching nullables with var pattern</Title>
        <Description>**Version Used**: features/recursive-patterns

**Steps to Reproduce**:

``


**Expected Behavior**: Should check for HasValue and deconstruct.

**Actual Behavior**: Error.

Note: should work for any deconstructible, not just tuples.
Note: in effect, this should be equivalent to the `(var x, var y)` pattern.

</Description>
        <CreatedDate>01/11/2018</CreatedDate>
        <ClosedDate>29/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31056</PullRequestID>
        <IssueID>30935</IssueID>
        <Title>Handle null and nullable input for a var pattern with a tuple designation</Title>
        <Description>Fixes #30906</Description>
        <CreatedDate>02/11/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31056</PullRequestID>
        <IssueID>31031</IssueID>
        <Title>"No suitable Deconstruct instance or extension method was found" is incorrect</Title>
        <Description>Compiling the following reports (among other things) that `CS8129 No suitable Deconstruct instance or extension method was found for type 'IA', with 2 out parameters and a void return type.`

``

However, there are indeed suitable `Deconstruct` instance methods for type `IA`. In fact there are too many of them. This diagnostic is simply incorrect.
</Description>
        <CreatedDate>07/11/2018</CreatedDate>
        <ClosedDate>29/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-Diagnostic Clarity</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31052</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Fix up our build badges</Title>
    <Description>closes #30827</Description>
    <CreatedDate>08/11/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31052</PullRequestID>
        <IssueID>30827</IssueID>
        <Title>Per job GitHub badges</Title>
        <Description>Azure DevOps now provides per job GitHub badges.

See https://raw.githubusercontent.com/Microsoft/azure-pipelines-agent/master/README.md as an example.

This means the Roslyn readme.md can provide status at the same granularity as the Jenkins badges are reporting.

side note: I don't think the Localization badge for Roslyn has been updated yet.

FYI @jaredpar 
</Description>
        <CreatedDate>29/10/2018</CreatedDate>
        <ClosedDate>09/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31050</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Parse array type in conditional operator</Title>
    <Description>### Customer scenario

Parse error reported for array types used in conditional operator expression: `x is T[] ? y : z`

### Bugs this fixes

Internal issue

### Workarounds, if any

Modify code. For instance, add parentheses: `(x is T[]) ? y : z`

### Risk

Low.

### Performance impact

None.

### Is this a regression from a previous update?

Regression from C#7.3.

### How was the bug found?

Customer report</Description>
    <CreatedDate>08/11/2018</CreatedDate>
    <ClosedDate>13/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31050</PullRequestID>
        <IssueID>7</IssueID>
        <Title>Feature: Parameter Name Aliasing</Title>
        <Description>The human meaning of parameters may vary from method caller's perspective.

It would be useful if the language provides an ability to assign aliases to the parameters.

``

Note: the parameter `devNull` may violate [CA1026](http://msdn.microsoft.com/en-us/library/ms182135.aspx), in case of `overridden` methods. On the flip side, setting `devNull` as non-default parameter would yield "unused parameter".

Related / Real world example: https://github.com/madskristensen/WebEssentials2013/pull/380#issuecomment-31402391
</Description>
        <CreatedDate>15/01/2015</CreatedDate>
        <ClosedDate>26/08/2015</ClosedDate>
        <Labels>
          <Label>Area-Language Design</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
          <Label>Resolution-Won't Fix</Label>
          <Label>Verification Not Required</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31048</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Fix Edit and Continue in CPS projects</Title>
    <Description>The problem was our CPSProject type no longer was implementing the ENC interfaces the project system expects; this copy/pastes the same code over that's being used for AbstractLegacyProject.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Try to use edit and continue in an CPS-based C# or VB project. It just silently doesn't work, potentially resulting in strange debugger behavior since it then can't match up source files after an edit.

### Bugs this fixes

#31034 and https://devdiv.visualstudio.com/DevDiv/_workitems/edit/725662

### Workarounds, if any

None.

### Risk

Low.

### Performance impact

None.

### Is this a regression from a previous update?

Yes.

### Root cause analysis

The problem occurred because the larger project system refactoring accidentally caused us to drop certain interfaces we must implement that CPS expected. Our type hierarchy was changed around and the implementation that was on a base class wasn't there anymore. CPS in Edit and Continue itself was accidentally dropped from our test matrix.

### How was the bug found?

Dogfooding.

&lt;/details&gt;
</Description>
    <CreatedDate>08/11/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31048</PullRequestID>
        <IssueID>31034</IssueID>
        <Title>Edit &amp; Continue no longer works for .NET Core projects</Title>
        <Description>To make edit &amp; continue work, we cast the workspace context to IVsENCRebuildableProjectCfg2/IVsENCRebuildableProjectCfg4 - this was an implicit dependency that appears to be accidentally removed.

We need these interfaces reimplemnted.</Description>
        <CreatedDate>08/11/2018</CreatedDate>
        <ClosedDate>09/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31046</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Neme12</FixedByID>
    <Title>Fixing inferred type for yield return in async iterator methods</Title>
    <Description>Towards #24037:
&gt; ## Productivity (code fixers/refactorings/etc):
&gt;  Review TypeInferrer #30211 (comment)

The fix is just to return the type argument, not matter what the type is. I think that's actually good for error recovery, in case someone is just missing a `using`.

Tagging @jcouv</Description>
    <CreatedDate>08/11/2018</CreatedDate>
    <ClosedDate>28/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31046</PullRequestID>
        <IssueID>24037</IssueID>
        <Title>[Umbrella] Work items and test plan for async streams</Title>
        <Description>Proposal: https://github.com/dotnet/csharplang/blob/master/proposals/csharp-8.0/async-streams.md


## FAQ and known issues
- "missing ManualResetValueTaskSourceLogic": 
The preview1 compiler is looking for that type, but .NET Core 3 preview 1 contains `ManualResetValueTaskSourceCore`. The solution is to include this [code snippet](https://github.com/dotnet/coreclr/issues/21379#issuecomment-444473061) in your program. This will be fixed in preview2.
- enumerator disposed too early (`yield return` in construct with `finally`) (see issue https://github.com/dotnet/roslyn/issues/31268)
- `NullableReferenceTypes` project property doesn't take full effect in legacy projects yet (https://github.com/dotnet/project-system/issues/4058) 

----


## Async-iterator methods
- [x] EnC
  - [x] ~~block~~
  - [x] enable (issue https://github.com/dotnet/roslyn/issues/32266, issue https://github.com/dotnet/roslyn/issues/32589 for `await using` declarations)
- [x] making cancellation token available to producers (PRs https://github.com/dotnet/roslyn/pull/35121 and https://github.com/dotnet/roslyn/pull/35326, API proposal https://github.com/dotnet/corefx/issues/37012)
- [ ] Consider optimizing handling of `yield return` when directly following another `yield return` (to reduce cost in `ManualResetValueTaskSourceCore.SetResult`) (issue https://github.com/dotnet/roslyn/issues/31248, needs LDM)
- [ ] Factor the implementation of `GetStatus` and `OnCompleted` for implementing `IValueTaskSource` and `IValueTaskSource&lt;bool&gt;` https://github.com/dotnet/roslyn/issues/31517
- [ ] Test `goto`, `continue`, `break`
- [ ] Consider optimizing stack consumption https://github.com/dotnet/roslyn/issues/26567
- [ ] Improve message when missing `async` https://github.com/dotnet/roslyn/issues/31113
- [ ] test async method returning a custom type that derives from `IAsyncEnumerable&lt;T&gt;` and `IAsyncEnumerator&lt;T&gt;`.
- [x] BCL design
    - [x] ~~factor some code into a base type?~~ (no)
    - [x] ~~introduce new exception type?~~ (not needed at the moment)
    - [x] Any work needed for mono support? (issue https://github.com/mono/mono/issues/12019, PR https://github.com/mono/mono/pull/12674, `EnumeratorCancellation` issue https://github.com/mono/mono/issues/14454)
- [x] test spilling (maybe need to integrate with Neal's changes in patterns branch)
- [x] Get more test ideas from async method and iterator method tests
- [x] Debugging experience (issue https://github.com/dotnet/roslyn/issues/32246, fixed in preview3)
- [x] Consider adding a guard in `DisposeAsync()`: if state is `-1`, then throw. PR https://github.com/dotnet/roslyn/pull/31764
- [x] Optimize value returned from `MoveNextAsync()` if possible (issue https://github.com/dotnet/roslyn/issues/31246, PR https://github.com/dotnet/roslyn/pull/31645)
- [x] Add optional token to `GetAsyncEnumerator` API (PR https://github.com/dotnet/roslyn/pull/31624)
- [x] Should we add some guards for API mis-use? https://github.com/dotnet/roslyn/issues/30109
- [x] Generate token checks (answer: no)
- [x] Dispose on async-iterator with `finally` issue https://github.com/dotnet/roslyn/issues/30260, PR https://github.com/dotnet/roslyn/pull/31527
- [x] Confirm desired behavior for `DisposeAsync()`. it is ok to dispose before enumerating, and then you start enumerating?
- [x] Consider optimizing disposeModeField away when it isn't needed (answer: the optimization is not worth the loss of regularity)
- [x] Emit `AsyncIteratorStateMachineAttribute` PR https://github.com/dotnet/roslyn/pull/31553
- [x] Test scenario that uses `AwaitOnCompleted` instead of `AwaitUnsafeOnCompleted`
- [x] Adopt new BCL APIs (`AsyncIteratorMethodBuilder`, `ManualResetValueTaskSourceCore`, remove `IStrongBox&lt;T&gt;`) PR https://github.com/dotnet/roslyn/pull/31330
- [x] Returning `IAsyncEnumerator&lt;T&gt;` https://github.com/dotnet/roslyn/issues/31057, PR https://github.com/dotnet/roslyn/pull/31114
- [x] What do exception stack traces look like? Does the stack trace simplifier need to be updated?
- [x] Confirm `threadID` design (see https://github.com/dotnet/corefx/issues/3481)
- [x] `GetAsyncEnumerator()` method should make a new instance in some cases https://github.com/dotnet/roslyn/issues/30275, PR https://github.com/dotnet/roslyn/pull/31105
- [x] `IOperation` and `CFG` should not crash https://github.com/dotnet/roslyn/pull/30363
- [x] Update `IAsyncEnumerable` API https://github.com/dotnet/roslyn/pull/30280
- [x] hand-crafted prototype (https://github.com/jcouv/async-iterators/blob/master/src/Program.cs)
- [x] lowering implementation (https://github.com/dotnet/roslyn/pull/28218)
- [x] CoreCLR testing issue https://github.com/dotnet/coreclr/issues/20032
- [x] support generic methods
- [x] manual testing in IDE (setting up project references, typing, debugging)

## Async using and foreach
- [x] Design and fix IOperation and CFG support https://github.com/dotnet/roslyn/issues/30362
- [ ] test with ref struct iterator (issue https://github.com/dotnet/roslyn/issues/32794)
- [ ] pattern-based disposal should not even consider extensions (issue https://github.com/dotnet/roslyn/issues/32767)
- [ ] add test with pattern-based GetAsyncEnumerator with a Caller attribute on optional parameter (check LINQ behavior)
- [ ] Allow extension methods to contribute to pattern-based binding (issue https://github.com/dotnet/roslyn/issues/32289)
- [ ] Tweak message for `ERR_AwaitForEachMissingMemberWrongAsync`
- [ ] Implement semantic model API similar to `GetAwaitExpressionInfo`
- [ ] Test scripting
- [ ] Test subtleties of `SatisfiesForEachPattern` (special method of looking up `Current`)
- [ ] Test type that is both `IEnumerable&lt;T&gt;` and `IAsyncEnumerable&lt;T&gt;`.
- [ ] Test type that is both `IDisposable` and `IAsyncDisposable`.
- [x] Allow pattern-based disposal in `await foreach` and `await using` (issue https://github.com/dotnet/roslyn/issues/32316)
- [x] Async-enumerable returned by `ConfigureAwait`/`WithCancellation` not recognized by `await foreach` (issue https://github.com/dotnet/roslyn/issues/31609, PR https://github.com/dotnet/roslyn/pull/32233)
- [x] Pattern-based lookup should pass no argument for `CancellationToken` (issue https://github.com/dotnet/roslyn/issues/32111, PR https://github.com/dotnet/roslyn/pull/32184)
- [x] Integration with "enhanced using and foreach" feature https://github.com/dotnet/roslyn/issues/28588
- [x] Test/block expression trees (N/A because they are statements)
- [x] `IOperation` and `CFG` should not crash https://github.com/dotnet/roslyn/pull/30363
- [x] Use `await using` and `await foreach` syntax https://github.com/dotnet/roslyn/pull/30525
- [x] Update `IAsyncEnumerable` API https://github.com/dotnet/roslyn/pull/30280
- [x] Do we prefer pattern-based over interface-based? (I assume perf is better)
- [x] ~~Only convert/deconstruct when `TryGetNext` succeeded https://github.com/dotnet/roslyn/issues/30258~~
- [x] async using (PR https://github.com/dotnet/roslyn/pull/23961)
- [x] async foreach (PR https://github.com/dotnet/roslyn/pull/24750)
- [x] Update `IAsyncEnumerator.WaitForNextAsync` to return a `ValueTask&lt;bool&gt;`.
- [x] Pattern-based foreach should recognize task-like return from `WaitForNextAsync`
- [x] Verify debugging and sequence points
- [x] Handle `foreach await (ref x in ...) ...` (error, ` TestWithPattern_Ref`)
- [x] Test with missing well-known members, if not already covered
- [x] Pattern-based async-foreach should recognized `WaitForNextAsync` that returns a task-like.

## Productivity (code fixers/refactorings/etc):
- [x] ~~ExtractMethod doesn't work on parts of or entire async-iterator method body~~ (that's expected)
- [x] FindAllReferences (moved all FAR issues into https://github.com/dotnet/roslyn/issues/28228)
    - [x] it should find implicit references to `GetAwaiter` from an async-foreach or async-dispose. 
     - [x] it should find implicit references to `DisposeAsync` from an async-foreach or async-dispose. 
- [x] Verify FAR on `AsyncDispose` method
- [x] ~~decompilation feature in IDE~~ (we'll let ILSpy library fix this)
- [ ] Verify proper warnings if any involved member is obsolete (implicit conversions and such)
- [x] Code fixers: 
    - [x] fix `foreach` (by adding/removing `await`) depending on the collection type. (PR https://github.com/dotnet/roslyn/pull/33463)
    - [x] fix `using` (by adding/removing `await`) depending on resource type. (PR https://github.com/dotnet/roslyn/pull/33463)
    - [x] fix method declaration depending on presence/absence of `yield` or `await` (MakeMethodAsync PR https://github.com/dotnet/roslyn/pull/31846)
    - [x] using `foreach await` in non-async method should offer to convert the method to `async` https://github.com/dotnet/roslyn/pull/26632
- [x] IDE logic probably needs to be adjusted for completion inside `await using` and `await foreach`. For instance, see `IsLocalVariableDeclarationContext`.
- [x] Review TypeInferrer https://github.com/dotnet/roslyn/pull/30211#discussion_r221462807 (PR https://github.com/dotnet/roslyn/pull/31046)
- [x] parsing (PR https://github.com/dotnet/roslyn/pull/23866)
- [x] IDE completion and colorizing (https://github.com/dotnet/roslyn/pull/23960)
- [x] Verify highlighting for `async` and `await` (see https://github.com/dotnet/roslyn/pull/25037, PR https://github.com/dotnet/roslyn/pull/25056) (verified manually on method and local function)
- [x] Test with `ConvertForeachToFor` refactoring (verified manually, not triggered)

## LDM open issues:

- [ ] async LINQ
    - [ ] Parsing issue with `return from e in async-collection select await e + 1; // await isn't a keyword`
    - [ ] how does above scenario and `return from e in async-collection select e + 1;` lower into LINQ APIs? (the one with `await` involves `Task&lt;int&gt;` and the other one involves `int` directly) How many overloads of `Select` do we need?
- [ ] Should there be some helper method to convert from IEnumerable to IAsyncEnumerable, or from Task&lt;T&gt; to IAsyncEnumerable?
- [x] Should the generate token checks be in `GetAsyncEnumerator` or in `MoveNextAsync`? (if we do, we need to store the token and maybe dispose it too) (answer: no)
- [x] Revisit blocking off a word (either in parameter list, like `params`, or for variable name, like `value`) for token (answer: we're not going to use a keyword)
- [x] pattern-based `await using` should recognize a `DisposeAsync` method that returns a task-like (or only `ValueTask`)? (not applicable because no ref structs in async methods)
- [x] Should pattern-based `foreach` recognize `... GetAsyncEnumerator()` (without `CancellationToken`)? (yes, LDM 1/9)
- [x] What attributes should be emitted on async-iterator state machines? (answer: `AsyncIteratorStateMachineAttribute`)
- [x] cancellation of async-streams (both as consumer and producer) (see LDM 11/28)
- [x] confirm syntax for async foreach
- [x] Should we disallow `struct` async enumerator? (no, same as regular async, see ` TestWithPattern_WithStruct_MoveNextAsyncReturnsTask`)
- [x] Should `DisposeAsync` return a non-generic `ValueTask`, since there is now one? Or stick with `Task`?
- [x] Extension methods for `GetAsyncEnumerator`, `WaitForNextAsync`, and `TryGetNext` do not contribute. This mirrors behavior for regular `foreach`. But I'd like to confirm. (answer: this is probably something we want to support. Let's queue that for later in the implementation)
- [x] Should the pattern for async enumerators also recognize when a task-like is returned instead of `Task&lt;bool&gt;`? (answer: yes)
- [x] I think we'll need to block `dynamic` since there is no async counterpart to the non-generic `IEnumerable` that would convert `dynamic` to. (answer: seems ok)
- [x] Do we need `async` keyword on async iterator methods? I assume yes.
- [x] Since not enumerable lambdas, I assume the same for async-enumerable. (answer: correct. No async iterator lambda)
- [x] async-iterator without `yield` or `await`, should warn? (answer: without `yield` it's not recognized as an iterator, warn when no `await`)
- [x] I suspect we'll need to declare the loop variable differently: calling `TryGetNext` first, then checking `success` and only then dealing with conversions and deconstructions.

Championed issue: https://github.com/dotnet/csharplang/issues/43 (includes LDM notes)

## Test ideas for async foreach:
- [x] Verify that async-dispose doesn't have a similar bug with struct resource

## Test ideas for async using:
- [ ] Look up Lippert's blog on using with struct or generic type T
- [ ] Does the pattern or the interface get picked up first? Is it observable? (maybe if the pattern allows task-like returning method)

## Test ideas for async iterators:
- [ ] From Andy: we should have at least one test that runs using a non-trivial sync context. 
- [ ] From Andy: would it be useful to emit asserts for invalid/unexpected states for at least a little while? We could do it only for debug codegen.
- [x] Test with yield or await in try/catch/finally
- [ ] More tests with exception thrown in async-iterator
- [ ] There is a case in `GetIteratorElementType` with `IsDirectlyInIterator` that relates to speculation, needs testing
- [ ] yield break disallowed in finally and top-level script (see `BindYieldBreakStatement`); same for yield return (see `BindYieldReturnStatement`)
- [ ] binding for yield return (`BindYieldReturnStatement`) validates escape rules, needs testing
- [x] test yield in async lambda (still error)
- [ ] test with `IAsyncEnumerable&lt;dynamic&gt;`
- [ ] other tests with `dynamic`?
- [x] test should cover both case with `AwaitOnCompleted` and `AwaitUnsafeOnCompleted`
- [ ] test `async IAsyncEnumerable&lt;int&gt; M() { return TaskLike(); }`
- [ ] Can we avoid making `IAsyncEnumerable&lt;T&gt;` special from the start? Making mark it with an attribute like we did for task-like?
- [ ] Do some manual validation on debugging scenarios, including with exceptions (thrown after yield and after await).
- [ ] Test with one or both or the threadID APIs missing.


----
## BCL (Core)
- Add `DefaultCancellationAttribute` type: https://github.com/dotnet/corefx/issues/37012
- Design IAsyncEnumerable and supporting types to BCL: https://github.com/dotnet/corefx/issues/32640 
- Design IAsyncDisposable in BCL: https://github.com/dotnet/corefx/issues/32665
- Design for CancellationToken in IAsyncEnumerable: https://github.com/dotnet/corefx/issues/33338
PRs https://github.com/dotnet/coreclr/pull/20442 and https://github.com/dotnet/corefx/pull/33104
- Stack pretty printing https://github.com/dotnet/coreclr/pull/21103
- Add optional token to `GetAsyncEnumerator` API
- Add extension method `WithCancellation(...)` to call `GetAsyncEnumerator` and wrap the result into an `IAsyncEnumerable`
- AsyncIteratorStateMachineAttribute https://github.com/dotnet/corefx/issues/33770, PR https://github.com/dotnet/coreclr/pull/21313 (and using it https://github.com/dotnet/coreclr/pull/21396)
- Add `CancellationToken` to `GetAsyncEnumerator()` PR https://github.com/dotnet/coreclr/pull/21397, documentation https://github.com/dotnet/corefx/issues/33338#issuecomment-444728011
- Add `WithCancellation` design https://github.com/dotnet/corefx/issues/33909
- Add `IAsyncDisposable.ConfigureAwait` (PRs https://github.com/dotnet/coreclr/pull/22160 and https://github.com/dotnet/corefx/pull/34783)

## BCL (mono)
- Port types to mono (https://github.com/mono/mono/issues/12019)

## BCL (package)
- Add `EnumeratorCancellationAttribute` (PR https://github.com/dotnet/corefx/pull/37719)

-----
## References:
- [ValueTask](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Threading/Tasks/ValueTask.cs#L60)
- [IValueTaskSource](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Threading/Tasks/Sources/IValueTaskSource.cs) </Description>
        <CreatedDate>04/01/2018</CreatedDate>
        <ClosedDate>19/09/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Feature - Async Streams</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31046</PullRequestID>
        <IssueID>30211</IssueID>
        <Title>Fixing bugs in C# TypeInferrer</Title>
        <Description>This PR simplifies the C# TypeInferrer and fixes 3 bugs along the way. The vast majority of additions are new tests. Can be reviewed commit by commit to see more granular changes and each of the 3 fixes individually.

Fixes #30232
Fixes #30235
Fixes #27647</Description>
        <CreatedDate>28/09/2018</CreatedDate>
        <ClosedDate>17/10/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31036</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add bunch of exclusions to dead code analysis for special methods</Title>
    <Description>Fixes #30886: Bail out on special serialization constructors and methods with certain special attributes indicating special usage.

Fixes #30887: Bail out on ShouldSerializeXXX and ResetXXX pattern that was also excluded from legacy FxCop implementation and seems to be common in real world code.

Fixes #30377 : Bail out on methods with signature matching event handlers, which are very common in Web apps.</Description>
    <CreatedDate>08/11/2018</CreatedDate>
    <ClosedDate>08/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31036</PullRequestID>
        <IssueID>30886</IssueID>
        <Title>"Private members are unused" fires on serialization constructors</Title>
        <Description>

#### Repro steps

``

#### Expected behavior
Severity	Code	Description	Project	Project Rank	File	Line	Category	Suppression State	Tool
Message	IDE0051	Private member 'ProjectReloadedException..ctor' is unused.	Microsoft.VisualStudio.AppDesigner	2	E:\project-system2\src\Microsoft.VisualStudio.AppDesigner\PropPages\ProjectReloadedException.vb	32	Code Quality	Active	Compiler


#### Actual behavior
Should not fire</Description>
        <CreatedDate>31/10/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31036</PullRequestID>
        <IssueID>30887</IssueID>
        <Title>"Private members is unused" fires on ShouldSerializeXXX pattern</Title>
        <Description>#### Repro steps

``
#### Expected behavior
No warning on ShouldSerializeName()


#### Actual behavior
Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0051	Private member 'WebReferenceComponent.ShouldSerializeName' is unused.	Microsoft.VisualStudio.Editors	E:\project-system2\src\Microsoft.VisualStudio.Editors\PropPages\WebReferenceComponent.vb	41	Active


ShouldSerializeXXX is a pattern used by controls &amp; things that show up in the property grid that determines whether they are written to InitializeComponent for a WinForms component. The associated FxCop original rule has an exclusion for this.
</Description>
        <CreatedDate>30/10/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31036</PullRequestID>
        <IssueID>30377</IssueID>
        <Title>IDE0051 should not be reported for certain methods</Title>
        <Description>In ASP.NET web app `Application_Start` is marked as unused:

![image](https://user-images.githubusercontent.com/41759/46624509-d4b8c300-cae5-11e8-8c0a-4b1df4d2bec3.png)
</Description>
        <CreatedDate>08/10/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31027</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Support 0-element and 1-element tuple patterns</Title>
    <Description>Fixes #30962
Unfortunately we cannot test binding `var ()` and `var (x)` until #30935 has been integrated
</Description>
    <CreatedDate>07/11/2018</CreatedDate>
    <ClosedDate>08/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31027</PullRequestID>
        <IssueID>30962</IssueID>
        <Title>Pattern-matching changes for short tuples</Title>
        <Description>Adjust the implementation of pattern-matching to reflect LDM [resolutions from 2018-11-05](https://github.com/dotnet/csharplang/issues/1054#issuecomment-436025050).  The last point will be included in the changes for https://github.com/dotnet/roslyn/issues/20648.

## Deconstruction vs ITuple

### **Proposed:**

1. If the type is a tuple type (any arity &gt;=0; see below), then use the tuple semantics
2. if the type has no accessible instance `Deconstruct`, and satisfies the `ITuple` deconstruct constraints, use `ITuple` semantics
3. Otherwise attempt `Deconstruct` semantics (instance or extension)

Alternative
1. If the type is a tuple type (any arity &gt;= 0; see below), then use the tuple semantics
2. If "binding" a Deconstruct invocation would finds one or more applicable methods, use Deconstruct.
3. if the satisfies the `ITuple` deconstruct constraints, use `ITuple` semantics

In both cases, 4. Error

***Decision***: Alternative

### Proposed:

1. Permit pattern-matching tuple patterns with 0 and 1 elements (appropriately disambiguated as previously decided)

``

***Conclusion***: Approved


### Proposed:

As part of this, I propose that we consider `System.ValueTuple&lt;T&gt;` instantitations to be considered tuple types.  I do not propose any syntax changes related to this.

As part of this, I propose that we consider `System.ValueTuple` to be considered a tuple type.  I do not propose any syntax changes related to this.

***Conclusion***: Approved
</Description>
        <CreatedDate>05/11/2018</CreatedDate>
        <ClosedDate>30/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31027</PullRequestID>
        <IssueID>30935</IssueID>
        <Title>Handle null and nullable input for a var pattern with a tuple designation</Title>
        <Description>Fixes #30906</Description>
        <CreatedDate>02/11/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31025</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add CFG based dataflow analysis framework to the Workspaces layer</Title>
    <Description>This PR extracts out the flow-analysis component from #30777 for easier code review.

Support added in this PR:
1. Core dataflow walker to walk the control flow graph and compute/track custom analysis data (CustomDataFlowAnalysis).
2. Internal API (DataFlowAnalyzer) to implement custom dataflow analysis on top of the above walker.
3. Implementation of a SymbolUsageAnalysis dataflow analyzer to compute read/write usages for local and parameter symbols
4. Implementation of a test-only BasicBlockReachabilityDataFlowAnalyzer to compute and validate basic block reachability on all CFGs generated in compiler's flow analysis unit tests.

Please refer to #30777 for the unit tests for SymbolUsageAnalysis. This PR is targeting a feature branch, which will get unit tests from #30777 before it gets merged into master or dev16.0-preview2 branch.</Description>
    <CreatedDate>07/11/2018</CreatedDate>
    <ClosedDate>16/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31025</PullRequestID>
        <IssueID>30777</IssueID>
        <Title>Dataflow analysis based analyzer/fixer to identify unused expression values and parameters</Title>
        <Description>1. **Analyzer** to report unused expression values and parameters. It flags the following cases:
    1. **Expression statements that drop computed value**, for example, `Computation();`. These should either be removed (redundant computation) or should be replaced with explicit assignment to discard variable OR an unused local variable, i.e. `_ = Computation();` or `var unused = Computation();`
    2. **Value assignments to locals/parameters that are never used on any control flow path**. For example, value assigned to 'x' in first statement below is unused and will be flagged:
    ``
    Just as for case 1 above, these should either be removed (redundant computation) or should be replaced with explicit assignment to discard variable OR an unused local i.e. `_ = Computation();` or `var unused = Computation();`

     3. **Redundant/unused parameters** that fall into one of the following two categories:
         1. Have no references in the executable code block(s) for it's containing method symbol.
         2. Have one or more references but it's initial value at start of code block is never used. For example, if 'x' in the example for case 2. above was a parameter symbol with `RefKind.None` and `x = Computation();` is the first statement in the method body, then it's initial value is never used. Such a parameter should be removed and 'x' should be converted into a local.
       We provide additional information in the diagnostic message to clarify the above two categories and also detect and mention about potential breaking change if the containing method is a public API. Currently, we do not provide any code fix for removing unused parameters as it needs fixing the call sites and any automated fix can lead to subtle overload resolution differences, though this may change in future.

2. **Code fixer** for unused expression value diagnostics reported by this analyzer providing following code fixes:
    1. If the unused value assigned to a local/parameter has no side-effects, we **recommend removing the assignment**. We consider an expression value to have no side effects if one of the following is true:
        1. Value is a compile time constant.
        2. Value is a local or parameter reference.
        3. Value is a field reference with no or implicit this instance.
    2. Otherwise, if user preference is set to Discard Variable, and project's language version supports discard variable, we **recommend assigning the value to discard**.
    3. Otherwise, we **recommend assigning the value to a new unused local variable which has no reads**.

3. **Implementation details:**
    1. Refactor and generalize the currently implemented reachability dataflow analysis in the compiler layer that works on internal CFG builder data types so that it works with custom data and public BasicBlock and ControlFlowBranch types.
    2. Move the above analysis into separate files that can be linked into both the Compiler and Workspaces layer to enable writing custom dataflow analysis in the IDE layer.
    3. The two primary (internal) types for implementing custom dataflow analysis are:
         1. `IDataFlowAnalyzer`: The dataflow analyzer type defines the custom data being tracked per basic block, the transfer and merge functions for dataflow across blocks and AnalyzeBlock and AnalyzerXXXBranch functions for analyzing dataflow within basic blocks and control flow branches.
         2. `CustomDataFlowAnalysis`: This types exposes a static method that runs dataflow analysis on the given control flow graph using the given dataflow analyzer, until fix point is reached and returns the analysis data at the end of the Exit block.
    4. Use the above dataflow framework to implement a custom reaching definition dataflow analysis to compute the set of reaching definitions (value writes) for local/parameter symbols in a method body, along with a boolean indicating whether or not each definition may be read on at least one possible control flow path, false indicating an unused/redundant definition that is flagged by the analyzer.
    
**TODO:** Finalize the editorconfig options for the analyzer/code fix and implement the Tools/Options UI for the same.</Description>
        <CreatedDate>26/10/2018</CreatedDate>
        <ClosedDate>27/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - Flow Analysis</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31025</PullRequestID>
        <IssueID>30777</IssueID>
        <Title>Dataflow analysis based analyzer/fixer to identify unused expression values and parameters</Title>
        <Description>1. **Analyzer** to report unused expression values and parameters. It flags the following cases:
    1. **Expression statements that drop computed value**, for example, `Computation();`. These should either be removed (redundant computation) or should be replaced with explicit assignment to discard variable OR an unused local variable, i.e. `_ = Computation();` or `var unused = Computation();`
    2. **Value assignments to locals/parameters that are never used on any control flow path**. For example, value assigned to 'x' in first statement below is unused and will be flagged:
    ``
    Just as for case 1 above, these should either be removed (redundant computation) or should be replaced with explicit assignment to discard variable OR an unused local i.e. `_ = Computation();` or `var unused = Computation();`

     3. **Redundant/unused parameters** that fall into one of the following two categories:
         1. Have no references in the executable code block(s) for it's containing method symbol.
         2. Have one or more references but it's initial value at start of code block is never used. For example, if 'x' in the example for case 2. above was a parameter symbol with `RefKind.None` and `x = Computation();` is the first statement in the method body, then it's initial value is never used. Such a parameter should be removed and 'x' should be converted into a local.
       We provide additional information in the diagnostic message to clarify the above two categories and also detect and mention about potential breaking change if the containing method is a public API. Currently, we do not provide any code fix for removing unused parameters as it needs fixing the call sites and any automated fix can lead to subtle overload resolution differences, though this may change in future.

2. **Code fixer** for unused expression value diagnostics reported by this analyzer providing following code fixes:
    1. If the unused value assigned to a local/parameter has no side-effects, we **recommend removing the assignment**. We consider an expression value to have no side effects if one of the following is true:
        1. Value is a compile time constant.
        2. Value is a local or parameter reference.
        3. Value is a field reference with no or implicit this instance.
    2. Otherwise, if user preference is set to Discard Variable, and project's language version supports discard variable, we **recommend assigning the value to discard**.
    3. Otherwise, we **recommend assigning the value to a new unused local variable which has no reads**.

3. **Implementation details:**
    1. Refactor and generalize the currently implemented reachability dataflow analysis in the compiler layer that works on internal CFG builder data types so that it works with custom data and public BasicBlock and ControlFlowBranch types.
    2. Move the above analysis into separate files that can be linked into both the Compiler and Workspaces layer to enable writing custom dataflow analysis in the IDE layer.
    3. The two primary (internal) types for implementing custom dataflow analysis are:
         1. `IDataFlowAnalyzer`: The dataflow analyzer type defines the custom data being tracked per basic block, the transfer and merge functions for dataflow across blocks and AnalyzeBlock and AnalyzerXXXBranch functions for analyzing dataflow within basic blocks and control flow branches.
         2. `CustomDataFlowAnalysis`: This types exposes a static method that runs dataflow analysis on the given control flow graph using the given dataflow analyzer, until fix point is reached and returns the analysis data at the end of the Exit block.
    4. Use the above dataflow framework to implement a custom reaching definition dataflow analysis to compute the set of reaching definitions (value writes) for local/parameter symbols in a method body, along with a boolean indicating whether or not each definition may be read on at least one possible control flow path, false indicating an unused/redundant definition that is flagged by the analyzer.
    
**TODO:** Finalize the editorconfig options for the analyzer/code fix and implement the Tools/Options UI for the same.</Description>
        <CreatedDate>26/10/2018</CreatedDate>
        <ClosedDate>27/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - Flow Analysis</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31025</PullRequestID>
        <IssueID>30777</IssueID>
        <Title>Dataflow analysis based analyzer/fixer to identify unused expression values and parameters</Title>
        <Description>1. **Analyzer** to report unused expression values and parameters. It flags the following cases:
    1. **Expression statements that drop computed value**, for example, `Computation();`. These should either be removed (redundant computation) or should be replaced with explicit assignment to discard variable OR an unused local variable, i.e. `_ = Computation();` or `var unused = Computation();`
    2. **Value assignments to locals/parameters that are never used on any control flow path**. For example, value assigned to 'x' in first statement below is unused and will be flagged:
    ``
    Just as for case 1 above, these should either be removed (redundant computation) or should be replaced with explicit assignment to discard variable OR an unused local i.e. `_ = Computation();` or `var unused = Computation();`

     3. **Redundant/unused parameters** that fall into one of the following two categories:
         1. Have no references in the executable code block(s) for it's containing method symbol.
         2. Have one or more references but it's initial value at start of code block is never used. For example, if 'x' in the example for case 2. above was a parameter symbol with `RefKind.None` and `x = Computation();` is the first statement in the method body, then it's initial value is never used. Such a parameter should be removed and 'x' should be converted into a local.
       We provide additional information in the diagnostic message to clarify the above two categories and also detect and mention about potential breaking change if the containing method is a public API. Currently, we do not provide any code fix for removing unused parameters as it needs fixing the call sites and any automated fix can lead to subtle overload resolution differences, though this may change in future.

2. **Code fixer** for unused expression value diagnostics reported by this analyzer providing following code fixes:
    1. If the unused value assigned to a local/parameter has no side-effects, we **recommend removing the assignment**. We consider an expression value to have no side effects if one of the following is true:
        1. Value is a compile time constant.
        2. Value is a local or parameter reference.
        3. Value is a field reference with no or implicit this instance.
    2. Otherwise, if user preference is set to Discard Variable, and project's language version supports discard variable, we **recommend assigning the value to discard**.
    3. Otherwise, we **recommend assigning the value to a new unused local variable which has no reads**.

3. **Implementation details:**
    1. Refactor and generalize the currently implemented reachability dataflow analysis in the compiler layer that works on internal CFG builder data types so that it works with custom data and public BasicBlock and ControlFlowBranch types.
    2. Move the above analysis into separate files that can be linked into both the Compiler and Workspaces layer to enable writing custom dataflow analysis in the IDE layer.
    3. The two primary (internal) types for implementing custom dataflow analysis are:
         1. `IDataFlowAnalyzer`: The dataflow analyzer type defines the custom data being tracked per basic block, the transfer and merge functions for dataflow across blocks and AnalyzeBlock and AnalyzerXXXBranch functions for analyzing dataflow within basic blocks and control flow branches.
         2. `CustomDataFlowAnalysis`: This types exposes a static method that runs dataflow analysis on the given control flow graph using the given dataflow analyzer, until fix point is reached and returns the analysis data at the end of the Exit block.
    4. Use the above dataflow framework to implement a custom reaching definition dataflow analysis to compute the set of reaching definitions (value writes) for local/parameter symbols in a method body, along with a boolean indicating whether or not each definition may be read on at least one possible control flow path, false indicating an unused/redundant definition that is flagged by the analyzer.
    
**TODO:** Finalize the editorconfig options for the analyzer/code fix and implement the Tools/Options UI for the same.</Description>
        <CreatedDate>26/10/2018</CreatedDate>
        <ClosedDate>27/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - Flow Analysis</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31024</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Add csharp_prefer_braces to .editorconfig</Title>
    <Description>Closes #30908</Description>
    <CreatedDate>07/11/2018</CreatedDate>
    <ClosedDate>08/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31024</PullRequestID>
        <IssueID>30908</IssueID>
        <Title>Add csharp_prefer_braces to .editorconfig</Title>
        <Description>Roslyn expects braces to be used, including places where the language says they are optional. The .editorconfig setting for this is `csharp_prefer_braces`, but it's not currently set. ~~It should be added to .editorconfig with severity Warning.~~ (see https://github.com/dotnet/roslyn/issues/30908#issuecomment-435129541)</Description>
        <CreatedDate>01/11/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>31015</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Implement skipped ExceptionHelpers tests</Title>
    <Description>See #31014</Description>
    <CreatedDate>07/11/2018</CreatedDate>
    <ClosedDate>13/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>31015</PullRequestID>
        <IssueID>31014</IssueID>
        <Title>ExceptionHelpers.SuppressFailFast does not do anything</Title>
        <Description>**Version Used**: 1abe9656700bc7b8021d13154545354b30b2dde2

See the following tests:

* ExceptionHelpersTests.TestExecuteWithErrorReportingWithSuppressFailFast
* ExceptionHelpersTests.TestExecuteAsyncWithErrorReportingWithSuppressFailFast
</Description>
        <CreatedDate>07/11/2018</CreatedDate>
        <ClosedDate>08/02/2019</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30998</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>Get root namespace from the project</Title>
    <Description>This is the implementation for the API added in #31254. 

Also this include the change that (hopefully) clarified the "default namespace vs root namespace for VB" issue. Right now VB doesn't have the concept of "default namespace". In this change, we conjure one in workspace, and assign the value of the project's root namespace to it for now. Individual IDE features can choose to use it for their own purpose. This would enable us to introduce "default namespace" for VB project in the future. One possibility is through a new `&lt;defaultnamespace&gt;` msbuild property which by default set to the value of `&lt;rootnamespace&gt;`, but user can choose to set it to something else when `&lt;rootnamespace&gt;` is left empty, i.e. root namespace is `Global` and IDE can enforce namespace declaration in the project based on the value of `&lt;defaultnamespace&gt;`

FYI @jasonmalinowski @davkean 


</Description>
    <CreatedDate>06/11/2018</CreatedDate>
    <ClosedDate>05/12/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30998</PullRequestID>
        <IssueID>31254</IssueID>
        <Title>Add an API to pass additional msbuild properties to workspace</Title>
        <Description>I have separated new API which we agreed upon from the implementation in #30998. 

This is a breaking change for project system (see [here](https://github.com/dotnet/project-system/blob/d8de8cd390ab04474f8e88ec68b785757b14d350/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/LanguageServices/WorkspaceProjectContextProvider.ForegroundWorkspaceProjectContext.cs)). So we need to coordinate the insertion with project system. @jasonmalinowski mentioned the code linked above is deadcode, so we might not break anything after all. Either way, it needs to be verified.

This is blocked until https://github.com/dotnet/project-system/pull/4221 is merged

@jasonmalinowski @CyrusNajmabadi </Description>
        <CreatedDate>19/11/2018</CreatedDate>
        <ClosedDate>27/11/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30992</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AustinWise</FixedByID>
    <Title>Select better auto-property backing field type to support devirtualization</Title>
    <Description>

Fixes #30797</Description>
    <CreatedDate>06/11/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30992</PullRequestID>
        <IssueID>30797</IssueID>
        <Title>Select better auto-prop backing field type to help with devirtualization</Title>
        <Description>Given code like:
``
it would be easier for the JIT to devirtualize calls to `C.Shared.Foo();`  It seems like the C# compiler could do this fairly easily, using the type of the RHS expression rather than the type of the property, as long as there isn't a conversion/boxing/etc. involved.</Description>
        <CreatedDate>26/10/2018</CreatedDate>
        <ClosedDate>09/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30984</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Unused members analyzer: Do not flag write-only properties that are n…</Title>
    <Description>…ot read

Fixes #30894</Description>
    <CreatedDate>06/11/2018</CreatedDate>
    <ClosedDate>08/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30984</PullRequestID>
        <IssueID>30894</IssueID>
        <Title>IDE0052 fires on write-only properties</Title>
        <Description>While write-only properties are questionable, just because they don't have a getter doesn't mean they can be removed.

``</Description>
        <CreatedDate>01/11/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30982</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Handle event symbols with explicit interface implementation in unused…</Title>
    <Description>… members analyzer

Fixes #30965</Description>
    <CreatedDate>06/11/2018</CreatedDate>
    <ClosedDate>08/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30982</PullRequestID>
        <IssueID>30965</IssueID>
        <Title>Incorrect IDE0051 (private member is unused)</Title>
        <Description>**Version Used**: 2.11.0-beta1-63430-07+c96268112e069a5282fe6ab2b55db213c524b80c

**Steps to Reproduce**:

``

**Expected Behavior**: No IDE0051 on interface impl

**Actual Behavior**: IDE0051 on interface impl

Seems like it might be specific to events.
</Description>
        <CreatedDate>05/11/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30980</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Workaround in RemoveUnusedMembersDiagnosticAnalyzer for VB handles cl…</Title>
    <Description>…ause

Fixes #30895

This analyzer does not function correctly in presence of VB handles clause due to IOperation bugs #30978 and #30979. This change adds a temporary workaround to the analyzer to handle this case specially.

~~TODO: File a bug to track reverting the temporary workaround once #30978 and #30979 are fixed.~~ Filed https://github.com/dotnet/roslyn/issues/30981</Description>
    <CreatedDate>06/11/2018</CreatedDate>
    <ClosedDate>08/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30980</PullRequestID>
        <IssueID>30895</IssueID>
        <Title>IDE0052 fires on WithEvents that are used by Handles</Title>
        <Description>``</Description>
        <CreatedDate>01/11/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Language-VB</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30980</PullRequestID>
        <IssueID>30978</IssueID>
        <Title>SemanticModel.GetOperation fails for any node within the VB handles clause sub-tree</Title>
        <Description>Invoking `SemanticModel.GetOperation` on any node within the `HandlesClauseSyntax` returns null. For example, consider the below code:

``

![image](https://user-images.githubusercontent.com/10605811/48068201-0ffeee00-e187-11e8-99d2-f7c7096004f1.png)

This leads to no `IMemberReferenceOperation` generated for references to members within the handles clause, causing incorrect functioning for IOperation analyzers analyzing references to members. For example, see https://github.com/dotnet/roslyn/issues/30895

Investigating further, I found that this is due to the fact VB uses a special binder to [bind the handles clause](http://source.roslyn.io/#Microsoft.CodeAnalysis.VisualBasic/Symbols/Source/SourceMemberMethodSymbol.vb,584), which is not part of the binder chain, and there is no corresponding member semantic model for positions within the handles clause.</Description>
        <CreatedDate>06/11/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30980</PullRequestID>
        <IssueID>30979</IssueID>
        <Title>AnalyzerDriver does should add executable code blocks for VB handles clause</Title>
        <Description>There are couple of compiler/analyzer issues related to IOperations in regards to VB handles clause:

1. https://github.com/dotnet/roslyn/issues/30978: Core bug in `GetOperation` causing the compiler to never return operations within VB handles clause.
2. `VisualBasicDeclarationComputer.vb` never marks nodes within VB handles clause as executable code, which leads to the analyzer driver never attempting to invoke GetOperation within these nodes, and hence never making analyzer callbacks for operations within handles clause. https://github.com/mavasani/roslyn/commit/8e3e8e83751f2118c27bd866b4785b1f347d7658 fixes this issue, but needs to go in after https://github.com/dotnet/roslyn/issues/30978 has been fixed.

This bug tracks issue 2. above in the VB declaration computer.</Description>
        <CreatedDate>06/11/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30980</PullRequestID>
        <IssueID>30978</IssueID>
        <Title>SemanticModel.GetOperation fails for any node within the VB handles clause sub-tree</Title>
        <Description>Invoking `SemanticModel.GetOperation` on any node within the `HandlesClauseSyntax` returns null. For example, consider the below code:

``

![image](https://user-images.githubusercontent.com/10605811/48068201-0ffeee00-e187-11e8-99d2-f7c7096004f1.png)

This leads to no `IMemberReferenceOperation` generated for references to members within the handles clause, causing incorrect functioning for IOperation analyzers analyzing references to members. For example, see https://github.com/dotnet/roslyn/issues/30895

Investigating further, I found that this is due to the fact VB uses a special binder to [bind the handles clause](http://source.roslyn.io/#Microsoft.CodeAnalysis.VisualBasic/Symbols/Source/SourceMemberMethodSymbol.vb,584), which is not part of the binder chain, and there is no corresponding member semantic model for positions within the handles clause.</Description>
        <CreatedDate>06/11/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30980</PullRequestID>
        <IssueID>30979</IssueID>
        <Title>AnalyzerDriver does should add executable code blocks for VB handles clause</Title>
        <Description>There are couple of compiler/analyzer issues related to IOperations in regards to VB handles clause:

1. https://github.com/dotnet/roslyn/issues/30978: Core bug in `GetOperation` causing the compiler to never return operations within VB handles clause.
2. `VisualBasicDeclarationComputer.vb` never marks nodes within VB handles clause as executable code, which leads to the analyzer driver never attempting to invoke GetOperation within these nodes, and hence never making analyzer callbacks for operations within handles clause. https://github.com/mavasani/roslyn/commit/8e3e8e83751f2118c27bd866b4785b1f347d7658 fixes this issue, but needs to go in after https://github.com/dotnet/roslyn/issues/30978 has been fixed.

This bug tracks issue 2. above in the VB declaration computer.</Description>
        <CreatedDate>06/11/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30969</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>RikkiGibson</FixedByID>
    <Title>Add regression test for attribute with async delegate parameter</Title>
    <Description>Resolves #30833 

This test should prevent the error described in #30833 from recurring. It **passes on master** but on the **15.9 branch** it produces the following error:

```
Microsoft.CodeAnalysis.CSharp.UnitTests.AttributeTests.AttributeWithTaskDelegateParameter [FAIL]
    System.AggregateException : One or more errors occurred.
    ---- System.AggregateException : One or more errors occurred.
    -------- System.NullReferenceException : Object reference not set to an instance of an object.
    Stack Trace:
        at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
        at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)
        at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)
        at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceNamespaceSymbol_Completion.cs(53,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceModuleSymbol.cs(258,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceAssemblySymbol.cs(908,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2308,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Func`4 locationFilterOpt, CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2195,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2131,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2125,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken)
    src\Test\Utilities\Portable\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
    src\Compilers\CSharp\Test\Emit\Attributes\AttributeTests.cs(8948,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.AttributeTests.AttributeWithTaskDelegateParameter()
    ----- Inner Stack Trace -----
        at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
        at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)
        at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)
        at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceNamespaceSymbol_Completion.cs(53,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Symbols\Symbol.cs(712,0): at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceNamespaceSymbol_Completion.cs(56,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.&lt;&gt;c__DisplayClass47_1.&lt;ForceComplete&gt;b__0(Int32 i)
    src\Compilers\Core\Portable\InternalUtilities\UICultureUtilities.cs(166,0): at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param)
        at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1()
        at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)
        at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object )
    ----- Inner Stack Trace -----
    src\Compilers\CSharp\Portable\Symbols\Source\SourceOrdinaryMethodSymbol.cs(686,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceOrdinaryMethodSymbol.get_ReturnTypeCustomModifiers()
    src\Compilers\CSharp\Portable\Symbols\SymbolExtensions.cs(381,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SymbolExtensions.GetTypeOrReturnType(Symbol symbol, RefKind&amp; refKind, TypeSymbol&amp; returnType, ImmutableArray`1&amp; returnTypeCustomModifiers, ImmutableArray`1&amp; refCustomModifiers)
    src\Compilers\CSharp\Portable\Symbols\SymbolExtensions.cs(360,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SymbolExtensions.GetTypeOrReturnType(Symbol symbol)
    src\Compilers\CSharp\Portable\Binder\Binder_Conversions.cs(653,0): at Microsoft.CodeAnalysis.CSharp.Binder.MemberGroupFinalValidationAccessibilityChecks(BoundExpression receiverOpt, Symbol memberSymbol, SyntaxNode node, DiagnosticBag diagnostics, Boolean invokedAsExtensionMethod)
    src\Compilers\CSharp\Portable\Binder\Binder_Conversions.cs(499,0): at Microsoft.CodeAnalysis.CSharp.Binder.MemberGroupFinalValidation(BoundExpression receiverOpt, MethodSymbol methodSymbol, SyntaxNode node, DiagnosticBag diagnostics, Boolean invokedAsExtensionMethod)
    src\Compilers\CSharp\Portable\Binder\Binder_Conversions.cs(812,0): at Microsoft.CodeAnalysis.CSharp.Binder.MethodGroupConversionHasErrors(SyntaxNode syntax, Conversion conversion, BoundExpression receiverOpt, Boolean isExtensionMethod, NamedTypeSymbol delegateType, DiagnosticBag diagnostics)
    src\Compilers\CSharp\Portable\Binder\Binder_Conversions.cs(314,0): at Microsoft.CodeAnalysis.CSharp.Binder.CreateMethodGroupConversion(SyntaxNode syntax, BoundExpression source, Conversion conversion, Boolean isCast, TypeSymbol destination, DiagnosticBag diagnostics)
    src\Compilers\CSharp\Portable\Binder\Binder_Conversions.cs(90,0): at Microsoft.CodeAnalysis.CSharp.Binder.CreateConversion(SyntaxNode syntax, BoundExpression source, Conversion conversion, Boolean isCast, Boolean wasCompilerGenerated, TypeSymbol destination, DiagnosticBag diagnostics)
    src\Compilers\CSharp\Portable\Binder\Binder_Conversions.cs(46,0): at Microsoft.CodeAnalysis.CSharp.Binder.CreateConversion(SyntaxNode syntax, BoundExpression source, Conversion conversion, Boolean isCast, TypeSymbol destination, DiagnosticBag diagnostics)
    src\Compilers\CSharp\Portable\Binder\Binder_Expressions.cs(2539,0): at Microsoft.CodeAnalysis.CSharp.Binder.CoerceArguments[TMember](MemberResolutionResult`1 methodResult, ArrayBuilder`1 arguments, DiagnosticBag diagnostics)
    src\Compilers\CSharp\Portable\Binder\Binder_Expressions.cs(4983,0): at Microsoft.CodeAnalysis.CSharp.Binder.TryPerformConstructorOverloadResolution(NamedTypeSymbol typeContainingConstructors, AnalyzedArguments analyzedArguments, String errorName, Location errorLocation, Boolean suppressResultDiagnostics, DiagnosticBag diagnostics, MemberResolutionResult`1&amp; memberResolutionResult, ImmutableArray`1&amp; candidateConstructors, Boolean allowProtectedConstructorsOfBaseType)
    src\Compilers\CSharp\Portable\Binder\Binder_Attributes.cs(498,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindAttributeConstructor(AttributeSyntax node, NamedTypeSymbol attributeType, AnalyzedArguments boundConstructorArguments, DiagnosticBag diagnostics, LookupResultKind&amp; resultKind, Boolean suppressErrors, HashSet`1&amp; useSiteDiagnostics)
    src\Compilers\CSharp\Portable\Binder\Binder_Attributes.cs(152,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindAttributeCore(AttributeSyntax node, NamedTypeSymbol attributeType, DiagnosticBag diagnostics)
    src\Compilers\CSharp\Portable\Binder\Binder_Attributes.cs(105,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindAttribute(AttributeSyntax node, NamedTypeSymbol attributeType, DiagnosticBag diagnostics)
    src\Compilers\CSharp\Portable\Binder\Binder_Attributes.cs(98,0): at Microsoft.CodeAnalysis.CSharp.Binder.GetAttribute(AttributeSyntax node, NamedTypeSymbol boundAttributeType, DiagnosticBag diagnostics)
    src\Compilers\CSharp\Portable\Binder\Binder_Attributes.cs(74,0): at Microsoft.CodeAnalysis.CSharp.Binder.GetAttributes(ImmutableArray`1 binders, ImmutableArray`1 attributesToBind, ImmutableArray`1 boundAttributeTypes, CSharpAttributeData[] attributesBuilder, DiagnosticBag diagnostics)
    src\Compilers\CSharp\Portable\Symbols\Symbol_Attributes.cs(317,0): at Microsoft.CodeAnalysis.CSharp.Symbol.LoadAndValidateAttributes(OneOrMany`1 attributesSyntaxLists, CustomAttributesBag`1&amp; lazyCustomAttributesBag, AttributeLocation symbolPart, Boolean earlyDecodingOnly, Binder binderOpt, Func`2 attributeMatchesOpt)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceMemberMethodSymbol.cs(1010,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.GetAttributesBag(CustomAttributesBag`1&amp; lazyCustomAttributesBag, Boolean forReturnType)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceMemberMethodSymbol.cs(968,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.GetAttributesBag()
    src\Compilers\CSharp\Portable\Symbols\Source\SourceMemberMethodSymbol.cs(931,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.GetDecodedWellKnownAttributeData()
    src\Compilers\CSharp\Portable\Symbols\Source\SourceMemberMethodSymbol.cs(1597,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.get_ImplementationAttributes()
    src\Compilers\CSharp\Portable\Symbols\Source\SourceOrdinaryMethodSymbol.cs(434,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceOrdinaryMethodSymbol.LazyAsyncMethodChecks(CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceOrdinaryMethodSymbol.cs(292,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceOrdinaryMethodSymbol.MethodChecks(MethodDeclarationSyntax syntax, Binder withTypeParamsBinder, DiagnosticBag diagnostics)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceOrdinaryMethodSymbol.cs(472,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceOrdinaryMethodSymbol.MethodChecks(DiagnosticBag diagnostics)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceMemberMethodSymbol.cs(293,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.LazyMethodChecks()
    src\Compilers\CSharp\Portable\Symbols\Source\SourceMemberMethodSymbol.cs(743,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.get_OverriddenOrHiddenMembers()
    src\Compilers\CSharp\Portable\Symbols\Source\SourceMemberContainerSymbol_ImplementationChecks.cs(392,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.CheckMembersAgainstBaseType(DiagnosticBag diagnostics, CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceMemberContainerSymbol_ImplementationChecks.cs(31,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetSynthesizedExplicitImplementations(CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceMemberContainerSymbol.cs(499,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Symbols\Symbol.cs(712,0): at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken)
    src\Compilers\CSharp\Portable\Symbols\Source\SourceNamespaceSymbol_Completion.cs(56,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.&lt;&gt;c__DisplayClass47_1.&lt;ForceComplete&gt;b__0(Int32 i)
    src\Compilers\Core\Portable\InternalUtilities\UICultureUtilities.cs(166,0): at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param)
        at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1()
        at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)
        at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object )
```

Note that this doesn't actually test emit because attributes can't actually take delegate arguments. This is kind of an attribute test, though, and it seems independent from the GetSymbolInfo API. Where should this actually go?</Description>
    <CreatedDate>05/11/2018</CreatedDate>
    <ClosedDate>06/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30969</PullRequestID>
        <IssueID>30833</IssueID>
        <Title>VS crash with specifically crafted attributes</Title>
        <Description>**Version Used**: VS 15.7.1 

**Steps to Reproduce**:

Paste this into Visual Studio and let it analyze it
``

**Expected Behavior**:

Error or something

**Actual Behavior**:

Visual studio crashes</Description>
        <CreatedDate>29/10/2018</CreatedDate>
        <ClosedDate>06/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30969</PullRequestID>
        <IssueID>30833</IssueID>
        <Title>VS crash with specifically crafted attributes</Title>
        <Description>**Version Used**: VS 15.7.1 

**Steps to Reproduce**:

Paste this into Visual Studio and let it analyze it
``

**Expected Behavior**:

Error or something

**Actual Behavior**:

Visual studio crashes</Description>
        <CreatedDate>29/10/2018</CreatedDate>
        <ClosedDate>06/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30968</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Implement constraints on pointer types as input to pattern-matching.</Title>
    <Description>A pointer type can match a var pattern (e.g. `var x`), a discard pattern (e.g. `_`), and a constant pattern with the value null (e.g. `null`). No other pattern forms would permit an input of a pointer type.
Fixes #30798</Description>
    <CreatedDate>05/11/2018</CreatedDate>
    <ClosedDate>19/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30968</PullRequestID>
        <IssueID>30798</IssueID>
        <Title>Pattern-matching vs pointer types</Title>
        <Description>On 2018-10-24, the LDM resolved:

&gt; A pointer type can match a var pattern (e.g. `var x`), a discard pattern (e.g. `_`), and a constant pattern with the value null (e.g. `null`). No other pattern forms would permit an input of a pointer type.

This needs to be implemented and tested.
</Description>
        <CreatedDate>26/10/2018</CreatedDate>
        <ClosedDate>19/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30961</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Ensure PinnedRemotableDataScope is disposed</Title>
    <Description>Fixes #30271

### Customer scenario

Under unknown situations, the IDE crashes due to a failure to clean up a database resource.

### Bugs this fixes

#30271 
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/671157

### Workarounds, if any

None.

### Risk

Low. This pull request cannot alter execution behavior except on a code path which was certain to crash the IDE.

### Performance impact

N/A

### Is this a regression from a previous update?

No.

### Root cause analysis

Found by Watson. The steps to reproduce this issue are unknown.

### How was the bug found?

Watson.

### Test documentation updated?

N/A

</Description>
    <CreatedDate>05/11/2018</CreatedDate>
    <ClosedDate>06/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30961</PullRequestID>
        <IssueID>30271</IssueID>
        <Title>Fix failure to dispose 'scope' after failure to dispose 'connection'</Title>
        <Description>In the following code, an exception during the call to `connection.Dispose` will result in `scope` not getting disposed. This eventually leads to an exception in the finalizer of `PinnedRemotableDataScope`.

https://github.com/dotnet/roslyn/blob/1f082e40860963edcd81d1567069aae924d9369f/src/Workspaces/Core/Portable/Remote/RemoteHostSessionHelpers.cs#L43-L46

:link: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/671157</Description>
        <CreatedDate>02/10/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30961</PullRequestID>
        <IssueID>30271</IssueID>
        <Title>Fix failure to dispose 'scope' after failure to dispose 'connection'</Title>
        <Description>In the following code, an exception during the call to `connection.Dispose` will result in `scope` not getting disposed. This eventually leads to an exception in the finalizer of `PinnedRemotableDataScope`.

https://github.com/dotnet/roslyn/blob/1f082e40860963edcd81d1567069aae924d9369f/src/Workspaces/Core/Portable/Remote/RemoteHostSessionHelpers.cs#L43-L46

:link: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/671157</Description>
        <CreatedDate>02/10/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30935</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Handle null and nullable input for a var pattern with a tuple designation</Title>
    <Description>Fixes #30906</Description>
    <CreatedDate>02/11/2018</CreatedDate>
    <ClosedDate>08/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30935</PullRequestID>
        <IssueID>30906</IssueID>
        <Title>Matching nullables with var pattern</Title>
        <Description>**Version Used**: features/recursive-patterns

**Steps to Reproduce**:

``


**Expected Behavior**: Should check for HasValue and deconstruct.

**Actual Behavior**: Error.

Note: should work for any deconstructible, not just tuples.
Note: in effect, this should be equivalent to the `(var x, var y)` pattern.

</Description>
        <CreatedDate>01/11/2018</CreatedDate>
        <ClosedDate>29/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30921</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>Add support for default namespace to workspace</Title>
    <Description>I'm separating this independent part from #30156, which provides the basic support in workspace for the refactoring. All the changes are intentionally made `internal`, so we don't have to worry about public API design until we are ready to do so.

@CyrusNajmabadi @heejaechang @jasonmalinowski You have already reviewed and signed off on this in the other PR. This is just an exact port. Could you please review and sign-off again?</Description>
    <CreatedDate>01/11/2018</CreatedDate>
    <ClosedDate>02/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30921</PullRequestID>
        <IssueID>30156</IssueID>
        <Title>[WIP] Sync namespace and folder refactoring (C#)</Title>
        <Description>[Marked as WIP avoid accidental merge, this change should target master. A [new PR](https://github.com/dotnet/roslyn/pull/30920) is created for that but I'd like to keep this around for review purpose]

Implement #14341

As mentioned in https://github.com/dotnet/vblang/issues/351, this will not be provided for VB.

Remaining issues/work that will be addressed in separate PRs
- [ ] Fix "undo" for "move file to folder" refactoring
- [ ] Enable this refactoring for CPS based project (this requires a crosscutting change between roslyn and project system)
- [ ] refactor the language service to support "Move type to new namespace" and "change namespace (selected declaration only)" refactoring. (we might implement those for VB as well, still under discussion)

Just to give you an idea, here's how current implementation works with some basic scenarios. The root namespace for the sample project is `ClassLibrary4`

- Move file to a new folder to match declared namespace:

![mocefile](https://user-images.githubusercontent.com/788783/46179218-0e303980-c26f-11e8-957a-d67c8adfb071.gif)


- Rename namespace to match folder hierarchy: 

![renamenamespace](https://user-images.githubusercontent.com/788783/46179219-0e303980-c26f-11e8-8ca9-71256093d665.gif)

</Description>
        <CreatedDate>26/09/2018</CreatedDate>
        <ClosedDate>16/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30916</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Allow VisualStudioExperimentationService to initialize on a background thread</Title>
    <Description>Fixes #30892 

### Customer scenario

When the first Roslyn document opened in the editor is opened via the Navigate To feature, the Roslyn package fails to load and its IDE features are missing substantial functionality.

### Bugs this fixes

#30892
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/725190

### Workarounds, if any

Open a source document before using Navigate To.

### Risk

Low. In the event other initialization code has bugs (fails to follow required threading rules of the host application), the IDE could hang (deadlock) during the test scenario. However, this is unlikely to result in loss of data because changes cannot be made to most source documents prior to opening the first source document.

### Performance impact

Code paths are not altered outside of the broken scenario.

### Is this a regression from a previous update?

Unknown.

### Root cause analysis

Manual testing scenarios should be updated to cover this case.

### How was the bug found?

Internal report.

### Test documentation updated?

Not yet.
</Description>
    <CreatedDate>01/11/2018</CreatedDate>
    <ClosedDate>08/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30916</PullRequestID>
        <IssueID>30892</IssueID>
        <Title>Package load failure when trying to lauch Navigate To after opening a solution</Title>
        <Description>**Version Used**: VS 16.0 P1 build 28231.51.d16.0

**Steps to Reproduce**:

1. Open a solution in VS without any files open in the editor
2. Ctrl + , to launch Navigate To
3. Search for some type

Note: Problem does not repro if you already had some files from the solution open in the editor at the point where Navigate To was launched.

**Expected Behavior**: Should succeed

**Actual Behavior**: Following package load failure error -

![image](https://user-images.githubusercontent.com/10579684/47826323-7d002700-dd34-11e8-874d-0213e1d24703.png)

On debugging the underlying issue appears to be that `AbstractNavigateToSearchService` is trying to instantiate `VisualStudioExperimentationService` from the background thread resulting in an `InvalidOperationException` from the following `Contract.ThrowIfFalse()` call.

**Dump file**: Available at `\\&lt;internalshare&gt;\\&lt;myfolder&gt;\Dumps\RoslynPackageLoad`

``</Description>
        <CreatedDate>01/11/2018</CreatedDate>
        <ClosedDate>09/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30916</PullRequestID>
        <IssueID>30892</IssueID>
        <Title>Package load failure when trying to lauch Navigate To after opening a solution</Title>
        <Description>**Version Used**: VS 16.0 P1 build 28231.51.d16.0

**Steps to Reproduce**:

1. Open a solution in VS without any files open in the editor
2. Ctrl + , to launch Navigate To
3. Search for some type

Note: Problem does not repro if you already had some files from the solution open in the editor at the point where Navigate To was launched.

**Expected Behavior**: Should succeed

**Actual Behavior**: Following package load failure error -

![image](https://user-images.githubusercontent.com/10579684/47826323-7d002700-dd34-11e8-874d-0213e1d24703.png)

On debugging the underlying issue appears to be that `AbstractNavigateToSearchService` is trying to instantiate `VisualStudioExperimentationService` from the background thread resulting in an `InvalidOperationException` from the following `Contract.ThrowIfFalse()` call.

**Dump file**: Available at `\\&lt;internalshare&gt;\\&lt;myfolder&gt;\Dumps\RoslynPackageLoad`

``</Description>
        <CreatedDate>01/11/2018</CreatedDate>
        <ClosedDate>09/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30915</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jhinder</FixedByID>
    <Title>Fix mis-translation of VB documentation comment marker</Title>
    <Description>This fixes the translation mistake I've pointed out in my [comment](https://github.com/dotnet/roslyn/pull/30905#issuecomment-435122983) for PR #30905.

I've also fixed this for the Russian translation, seeing as it was already wrong there.

You can see in the attached screenshot that it looks very wrong. (On the left is 15.9 Preview 4 in English, on the right is 15.8 in Russian).

![ticks](https://user-images.githubusercontent.com/823398/47876257-2587b700-de19-11e8-9bc2-303cd061e9eb.png)</Description>
    <CreatedDate>01/11/2018</CreatedDate>
    <ClosedDate>13/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30915</PullRequestID>
        <IssueID>30905</IssueID>
        <Title>LOC CHECKIN | dotnet/roslyn dev15.9.x | 20181101</Title>
        <CreatedDate>01/11/2018</CreatedDate>
        <ClosedDate>01/11/2018</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30914</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>Target NetStandard 2.0 and .NET Framework 4.7.2</Title>
    <Description>Retargets Roslyn projects to netstandard2.0 and net472.

Moves most code from Workspaces.Desktop to Workspaces, except for MEF V1 implementation.
Removes dependencies on Workspaces.Desktop.
Removes Workspaces.Desktop from Micrososft.CodeAnalysis.Workspaces.Common package.

Removes PortableFacades.vsix.

Enables more scripting tests on Core.

Fixes #29292 (Cleanup Microsoft.CodeAnalysis.Workspaces packages)
Fixes #18479 (Scripting Tuples test has broken references between desktop/coreclr tests)

Implements IBC optimization data embedding.

</Description>
    <CreatedDate>01/11/2018</CreatedDate>
    <ClosedDate>01/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30914</PullRequestID>
        <IssueID>29292</IssueID>
        <Title>Cleanup Microsoft.CodeAnalysis.Workspaces packages</Title>
        <Description>We package Microsoft.CodeAnalysis.Workspaces and Microsoft.CodeAnalysis.Workspaces.Desktop in the same package, which is an unusal pattern that's not supported by NuGet Pack and needs a custom NuSpec file. Remove the custom NuSpec once we target netstandard2.0 and merge these two assemblies. 

When referencing Microsoft.CodeAnalysis.Workspaces.Desktop.csproj from other project that produce packages we need to do so with `PrivateAssets="all"` since the actual Microsoft.CodeAnalysis.Workspaces.Common package reference is added via reference to Microsoft.CodeAnalysis.Workspaces.csproj.</Description>
        <CreatedDate>14/08/2018</CreatedDate>
        <ClosedDate>05/04/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30914</PullRequestID>
        <IssueID>18479</IssueID>
        <Title>Scripting Tuples test has broken references between desktop/coreclr tests</Title>
        <Description>The test is Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests.CommandLineRunnerTests.Tuples

On CoreCLR System.ValueTuple is in the runtime corlib, meaning that if System.ValueTuple is passed to the scripting compilation, compilations fail due to duplicate tuple types.

On the other hand, if the reference is removed, compilations fail on Desktop since the current corlib does not have System.ValueTuple.</Description>
        <CreatedDate>05/04/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Disabled Test</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30913</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Remove NonNullTypes context and other unnecessary information stored in TypeSymbolWithAnnotations.</Title>
    <Description>Fixes #30845.</Description>
    <CreatedDate>01/11/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30913</PullRequestID>
        <IssueID>30845</IssueID>
        <Title>Nullability mismatch in parameter of explicit interface implementation is not detected</Title>
        <Description>``

Observed:
No WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation warning for B.IA.M2. Reported when mismatch is in return type, see existing unit-test ImplementingNullableWithNonNull.
</Description>
        <CreatedDate>30/10/2018</CreatedDate>
        <ClosedDate>10/11/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30889</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Gracefully handle project systems not giving us a file path</Title>
    <Description>We previously didn't throw if a project system refused to give us a file path for the project file itself. In my refactoring, this accidentally switched over to a Marshal.ThrowExceptionForHR, which is now causing us to crash on at least Visual Studio Tools for Office projects. Put this back for now.

Ultimately, after this "fix" we're back to the behavior described in dotnet/rosyn#30429: we won't crash, but we won't have a project file for the project.</Description>
    <CreatedDate>31/10/2018</CreatedDate>
    <ClosedDate>06/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30889</PullRequestID>
        <IssueID>30429</IssueID>
        <Title>Project.FilePath is null for Project class instance created for Word 2013 or 2016 VSTO AddIn</Title>
        <Description>**Version Used**: 
15.8.6

**Steps to Reproduce**:

1. Create new Word 2013 or 2016 VSTO AddIn c# project
2. Obtain roslyn Project class instance for this newly created project

**Expected Behavior**:
Project.FilePath should contain correct data

**Actual Behavior**:
Project.FilePath is null</Description>
        <CreatedDate>10/10/2018</CreatedDate>
        <ClosedDate>21/02/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>30876</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Document operations</Title>
    <Description>* Add `IDocumentOperationService.CanApplyChange`
* Add `IDocumentOperationService.SupportDiagnostics`

📝 Extracted from #30733</Description>
    <CreatedDate>31/10/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>30876</PullRequestID>
        <IssueID>30733</IssueID>
        <Title>Added a way to inject dynamic file to workspace for component like ra…</Title>
        <Description>…zor.

through IDynamicFileInfoProvider and etc, external component such as razor should be able to provide us dynamic file (such as generated c# content for cshtml file) on the fly and let us know update on the content.

renamed Column to Character since Column should be only used when it accounts "tab". and count "tab" as tab size rather than just 1 char.

moved FAR to work on top of new set of APIs. it should now show things on html correctly

added support for code lens. but found 1 issue. without changing VS side, I can't fix filename. and without fixing filename, navigation won't work properly

...

need to add unit tests and etc. doens't work without project system and razor side changes yet.

![image](https://user-images.githubusercontent.com/1333179/47454003-e86d5600-d782-11e8-8c12-4b8b20b7cc80.png)
</Description>
        <CreatedDate>24/10/2018</CreatedDate>
        <ClosedDate>12/11/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29639</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>BlakeWills</FixedByID>
    <Title>Ensure 'this' completion is not offered inside anonymous functions within static methods</Title>
    <Description>Fixes #27923

The `IsInstanceContext` method traversed the syntax tree to check if the enclosing method was static. This was not aware of anonymous functions, meaning the enclosing method would never be reached and as such `IsStatic` was always false.</Description>
    <CreatedDate>01/09/2018</CreatedDate>
    <ClosedDate>12/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29639</PullRequestID>
        <IssueID>27923</IssueID>
        <Title>Completion for `this` is always offered in anonymous functions</Title>
        <Description>``
In both places at `$$`, `this` keyword is offered even though the method is static.

Discovered here:
https://github.com/dotnet/roslyn/pull/27690#pullrequestreview-128730842

I believe the fix should be really easy - just modify `method.MethodKind == MethodKind.LocalFunction` to `method.MethodKind == MethodKind.LocalFunction || method.MethodKind == MethodKind.AnonymousFunction` and add appropriate tests including nested anonymous functions and possibly even cases with a lambda inside a local function and vice versa, if you want to be extra diligent :smile:</Description>
        <CreatedDate>15/06/2018</CreatedDate>
        <ClosedDate>11/09/2018</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>good first issue</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29631</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>allisonchou</FixedByID>
    <Title>Fix generate field doesn't recognize accessibility modifier configuration</Title>
    <Description>Fixes #27716 
--
This fix operates under the assumption that the option "omit_if_default" operates the same way as "never" whenever the generate field/property option is invoked.

Also added applicable tests.</Description>
    <CreatedDate>31/08/2018</CreatedDate>
    <ClosedDate>08/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29631</PullRequestID>
        <IssueID>27716</IssueID>
        <Title>Generate field doesn't recognize accessibility modifier configuration</Title>
        <Description>**Version Used**: 
VS 2017 15.8p2
**Steps to Reproduce**:

1.  Add the following to an .editorconfig: 
`dotnet_style_require_accessibility_modifiers = omit_if_default:suggestion`
2. Create a class and add a constructor with a parameter. Hit `Ctrl + .` to get the quickfix to add and initialize a field.


**Expected Behavior**:
Field gets created as `readonly int foo;`

**Actual Behavior**:

Field gets created as `private readonly int foo;`
</Description>
        <CreatedDate>11/06/2018</CreatedDate>
        <ClosedDate>08/10/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29620</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>VB Continuation Comments.</Title>
    <Description>@jcouv I've refactored @paul1956 pull-request from #28327.</Description>
    <CreatedDate>31/08/2018</CreatedDate>
    <ClosedDate>04/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29620</PullRequestID>
        <IssueID>28327</IssueID>
        <Title>VB: Added support for line continuation comments</Title>
        <Description>https://github.com/dotnet/vblang/issues/65</Description>
        <CreatedDate>06/07/2018</CreatedDate>
        <ClosedDate>19/09/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Community</Label>
          <Label>Language-VB</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29591</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Fix temp creation with `in` parameters</Title>
    <Description>There's a variety of cases in the compiler where we need to store an
expression into a temporary variable, e.g. to sequence side effects
in the right order. This code was not adjusted to deal with `in`
parameters, so it exhibited various pathologies.

The first case is the simplest -- sometimes when using the "explicit in"
modifier on an argument, the temp creation routine would simply crash.

The other cases are more subtle and mostly have to do with whether or
not the temp is created as a ref local or regular local. This is
specific to the "implicit in", where the "in" keyword is not mentioned
on the argument. In this case, the semantics for the call should be that
the argument is passed by-ref without storing to a copy unless
absolutely necessary. Absolutely necessary in this case is defined as 1)
the argument is an rvalue or 2) the argument requires a conversion to
the parameter type.

A lot of this knowledge was already present in CodeGen, but not available
in lowering, so I've pulled out the HasHome helper to Binding, as I felt that
was the best place for the common code.

Fixes #29371 </Description>
    <CreatedDate>30/08/2018</CreatedDate>
    <ClosedDate>12/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29591</PullRequestID>
        <IssueID>29371</IssueID>
        <Title>`in` arguments crash the compiler when temp stores are required</Title>
        <Description>When trying to build one of my solution's code libraries, csc.exe exits with errorlevel 0x‭80131623‬, and 'dotnet build shows these stack traces:

``


_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>17/08/2018</CreatedDate>
        <ClosedDate>09/10/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29533</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Cleanup Mono heplers</Title>
    <Description>Change the Mono helpers:

1. Properly don't run verification on Mono. Only Windows Desktop runs
verification at this time
1. Use the CoreClr ilasm utility instead of the Mono version. It has the
functionality we need for our unit tests.

Related #28011</Description>
    <CreatedDate>27/08/2018</CreatedDate>
    <ClosedDate>05/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29533</PullRequestID>
        <IssueID>28011</IssueID>
        <Title>Port C# compiler tests to Mono</Title>
        <Description>This tracks the progress of porting our compiler tests to run on Mono.

- [x] C# syntax tests
- [x] C# symbol tests
- [x] C# emit tests
- [x] C# semantic tests
- [x] C# IOperation tests

</Description>
        <CreatedDate>20/06/2018</CreatedDate>
        <ClosedDate>03/10/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29517</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Do not eliminate conditional branch if it falls through to a different exception handler.</Title>
    <Description>Fixes #29481.</Description>
    <CreatedDate>24/08/2018</CreatedDate>
    <ClosedDate>05/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29517</PullRequestID>
        <IssueID>29481</IssueID>
        <Title>Finally block belonging to unexecuted try runs anyway</Title>
        <Description>_From @jakobbotsch on August 23, 2018 12:50_

The following program prints something in release even though it shouldn't:
``

_Copied from original issue: dotnet/coreclr#19627_</Description>
        <Code>```csharp
// Debug: Prints 0 lines
// Release: Prints 1 line
using System;

public class Program
{
    public static void Main()
    {
        try
        {
            bool b = false;
            if (b)
            {
                try
                {
                    return;
                }
                finally
                {
                    Console.WriteLine("Prints");
                }
            }
            else
            {
                return;
            }
        }
        finally
        {
            GC.KeepAlive(null);
        }
    }
}
```

Disassembly is:
```asm
; Assembly listing for method Program:Main()
; Emitting BLENDED_CODE for X64 CPU with AVX
; optimized code
; rbp based frame
; fully interruptible
; Final local variable assignments
;
;  V00 OutArgs      [V00    ] (  1,  1   )  lclBlk (32) [rsp+0x00]
;  V01 PSPSym       [V01    ] (  1,  1   )    long  -&gt;  [rbp-0x10]   do-not-enreg[X] addr-exposed
;
; Lcl frame size = 48

G_M5092_IG01:
       55                   push     rbp
       4883EC30             sub      rsp, 48
       488D6C2430           lea      rbp, [rsp+30H]
       488965F0             mov      qword ptr [rbp-10H], rsp

G_M5092_IG02:
       48B968302ED59B010000 mov      rcx, 0x19BD52E3068
       488B09               mov      rcx, gword ptr [rcx]
       E850FCFFFF           call     System.Console:WriteLine(ref)
       90                   nop

G_M5092_IG03:
       33C9                 xor      rcx, rcx
       E8B85B1E5E           call     System.GC:KeepAlive(ref)
       90                   nop

G_M5092_IG04:
       488D6500             lea      rsp, [rbp]
       5D                   pop      rbp
       C3                   ret

G_M5092_IG05:
       55                   push     rbp
       4883EC30             sub      rsp, 48
       488B6920             mov      rbp, qword ptr [rcx+32]
       48896C2420           mov      qword ptr [rsp+20H], rbp
       488D6D30             lea      rbp, [rbp+30H]

G_M5092_IG06:
       33C9                 xor      rcx, rcx
       E8985B1E5E           call     System.GC:KeepAlive(ref)
       90                   nop

G_M5092_IG07:
       4883C430             add      rsp, 48
       5D                   pop      rbp
       C3                   ret

; Total bytes of code 79, prolog size 14 for method Program:Main()
; ============================================================
`</Code>
        <CreatedDate>23/08/2018</CreatedDate>
        <ClosedDate>05/09/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29516</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Explore options to allow users to add all missing imports</Title>
    <Description>Exploring different options to allow users to add missing imports
to code that they copied into their solution (#10272). When multiple fixes are
found for the same diagnostic no action is taken. Allowing the user to
sort out ambiguity.

1) From the light bulb menu the user can now specify fix all for missing
using statements (#23528). 

![fix all missing imports solution](https://user-images.githubusercontent.com/611219/45244322-2b936880-b2ac-11e8-9630-013d9ba8fa83.gif)

This is an odd UX. In the light bulb menu the fix will have a name such as,
`using System.Collections.Generic;`. The user will then choose a fix all
scope from a preview of the fix. The fix all preview will show many other
using statements to be added. 

There is also odd behavior around solutions with a mix of C# and VB
project. For instance, if fixing all in the Solution scope only the 
projects of the same language as the file that the fix was invoked 
in will be considered. This is due to AddImportFixProvider being
per language and not sharing diagnostic ids.

2) When invoking the Remove and Sort Using command missing imports will
be added.

![add imports during organize](https://user-images.githubusercontent.com/611219/45244309-20d8d380-b2ac-11e8-8cf4-013522abb461.gif)

This could be confusing since the current behavior is simply to remove and sort. 


Things to explore:
- [ ] Create a new fixer for missing imports that is separate from the AddImport fixer.
- [ ] Create a separate command from Remove and Sort Imports for Add Missing Imports
- [ ] Need to bring attention to the diagnostics that have multiple fixes.
</Description>
    <CreatedDate>24/08/2018</CreatedDate>
    <ClosedDate>12/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29516</PullRequestID>
        <IssueID>10272</IssueID>
        <Title>Offer code fix to add usings for pasted code snippets</Title>
        <Description>Filed on behalf of a customer from interviews
</Description>
        <CreatedDate>01/04/2016</CreatedDate>
        <ClosedDate>15/10/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29516</PullRequestID>
        <IssueID>23528</IssueID>
        <Title>Missing FixAll support for bunch of IDE CodeFixProviders</Title>
        <Description>**Version Used**: Roslyn master

**Steps to Reproduce**:

1. Move Roslyn to latest analyzers: https://www.nuget.org/packages/Microsoft.Net.RoslynDiagnostics/2.6.0-beta1 by changing `MicrosoftNetRoslynDiagnosticsVersion` over [here](https://github.com/dotnet/roslyn/blob/master/build/Targets/Packages.props#L54) to `2.6.0-beta1`. If this value is already greater than equals `2.6.0-beta1`, then search for source suppressions for RS1016.
2. Build solution

**Expected Behavior**:
No RS1016 diagnostics (CodeFixProviders should override GetFixAllProvider).

**Actual Behavior**:
``</Description>
        <CreatedDate>02/12/2017</CreatedDate>
        <ClosedDate>17/04/2019</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29513</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chsienki</FixedByID>
    <Title>Fix Tuple Crefs causing null exception</Title>
    <Description>Fix for #29090 

During binding we transform tuple types into a TupleTypeSymbol https://github.com/dotnet/roslyn/blob/6dc66246aecc90d029e04dc9b08dbe0b31896314/src/Compilers/CSharp/Portable/Binder/Binder_Symbols.cs#L1117 When passing in a tuple from a cref, the type arguments for ```type``` are not yet resolved. 

Later, during DocumentationComment walking, we access the underlying named type of the tuple, which returns the type with unbound type arguments from above https://github.com/dotnet/roslyn/blob/8d7908c1a0897b4868e4189dae40a3de42664bf2/src/Compilers/CSharp/Portable/DocumentationComments/DocumentationCommentIDVisitor.PartVisitor.cs#L176
When we try and print that out, we access Symbol.ContainingSymbol. 
https://github.com/dotnet/roslyn/blob/8d7908c1a0897b4868e4189dae40a3de42664bf2/src/Compilers/CSharp/Portable/DocumentationComments/DocumentationCommentIDVisitor.PartVisitor.cs#L149
Because the type parameters were unbound, we get ```null``` and end up with a NullReferenceException when trying to reason about it https://github.com/dotnet/roslyn/blob/8d7908c1a0897b4868e4189dae40a3de42664bf2/src/Compilers/CSharp/Portable/DocumentationComments/DocumentationCommentIDVisitor.PartVisitor.cs#L150

This change checks the tuple type before visiting it to see if its type arguments have been resolved. If not, we instead visit the types original definition, which does have the bound type arguments. (We can't always just visit the OriginalDefinition, because there are cases where it isn't valid; we do know that it's valid in this specific case however)
</Description>
    <CreatedDate>24/08/2018</CreatedDate>
    <ClosedDate>11/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29513</PullRequestID>
        <IssueID>29090</IssueID>
        <Title>Using cref to ValueTuple in doc comment causes compiler failure</Title>
        <Description>### Version

Microsoft (R) Build Engine version 15.7.179.6572 for .NET Core

`dotnet --info`

``
</Description>
        <CreatedDate>05/08/2018</CreatedDate>
        <ClosedDate>11/09/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29450</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Fix C# symbols + emit tests</Title>
    <Description>This changes the C# symbols and emit tests to use the correct `CreateCompilation` helper methods for portable code execution. 

Part of #29427</Description>
    <CreatedDate>22/08/2018</CreatedDate>
    <ClosedDate>05/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29450</PullRequestID>
        <IssueID>29427</IssueID>
        <Title>Enforce tests executing on CoreClr compiled against netstandard</Title>
        <Description>A number of our tests in the compiler are still compiling against desktop assemblies when executing on CoreClr. Essentially using `CreateCompilationWithMscorlib` instead of `CreateCompilation`. These tests execute successfully on CoreClr by accident, not by design. 

This is okay-ish on Windows. The runtime there seems more tolerant this. On Linux though it leads to lots of hangs and hard to diagnose errors. This is just wrong overall and needs to be fixed. 
</Description>
        <CreatedDate>21/08/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29405</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>werwolfby</FixedByID>
    <Title>Fix #29390, add space after tuple type and identifier</Title>
    <Description>Fix for #29390

But I don't know what to do with this:
```csharp
var a = new(string a, int b)[10];
```

From my point of view it should have space:
```csharp
var a = new (string a, int b)[10];
```

Completely similar to:
```csharp
var a = new string[10];
var b = new Lazy&lt;int&gt;[10];
// etc.
```

We don't have spaces only in 2 cases:
```csharp
class Foo&lt;T&gt;
    where T : new() // case #1
{
    public Foo()
    {
        var a = new[2] { 1, 2 }; // case #2
    }
}
```

In both cases we don't specify any type here, so skip space looks natural.
But for tuple from my point of view it is unnatural, because tuple - is just a type, and for types we have extract space.

I've found a few discussions:
from @jcouv: https://github.com/dotnet/csharplang/issues/100#issuecomment-350823105
and @sharwell : https://github.com/dotnet/roslyn/pull/23686#discussion_r156090382

But I can't find final decision

Right now I'll leave test code commented. And will not add whitespace before tuple in `new` expression. I need your input on this.</Description>
    <CreatedDate>20/08/2018</CreatedDate>
    <ClosedDate>29/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29405</PullRequestID>
        <IssueID>29390</IssueID>
        <Title>NormalizeWhitespace do not add space after tuple type in parameter and in return</Title>
        <Description>**Version Used**: 
The same behavior on *2.8.2*, *2.9.0*

**Steps to Reproduce**:

1. Create method declaration:
``
</Description>
        <CreatedDate>19/08/2018</CreatedDate>
        <ClosedDate>29/09/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29405</PullRequestID>
        <IssueID>1</IssueID>
        <Title>Initial port and addition of README.md</Title>
        <Description>This is a port of the readme from CodePlex.  Some of the links have been updated to point to locations on GitHub, but many of the links still point back to CodePlex as comparable GitHub locations are currently absent.
</Description>
        <CreatedDate>14/01/2015</CreatedDate>
        <ClosedDate>14/01/2015</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29405</PullRequestID>
        <IssueID>2</IssueID>
        <Title>Update links in README.md with ported wiki content</Title>
        <CreatedDate>14/01/2015</CreatedDate>
        <ClosedDate>14/01/2015</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29374</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>carlos-quintero</FixedByID>
    <Title>Fix to return attributes of VB.NET enum members when using the code model EnvDTE.CodeVariable.Attributes</Title>
    <Description>Fix for bug #29353 
</Description>
    <CreatedDate>17/08/2018</CreatedDate>
    <ClosedDate>08/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29374</PullRequestID>
        <IssueID>29353</IssueID>
        <Title>EnvDTE.CodeVariable.Attributes returns empty collection for VB.NET enum members (it works for C# enum members)</Title>
        <Description>Members of an enum are mapped to EnvDTE.CodeVariable. Calling EnvDTE.CodeVariable.Attributes returns an empty collection for this VB.NET code:

``
That's because the method:

[Public Overrides Function GetAttributeNodes(node As SyntaxNode) As IEnumerable(Of SyntaxNode)](http://source.roslyn.io/Microsoft.VisualStudio.LanguageServices.VisualBasic/a.html#13b757deda39757e)

of file CodeModel\VisualBasicCodeModelService.vb lacks the EnumMemberDeclarationSyntax case.

(for C#, the [public override IEnumerable&lt;SyntaxNode&gt; GetAttributeNodes(SyntaxNode parent)](http://source.roslyn.io/Microsoft.VisualStudio.LanguageServices.CSharp/a.html#0311a1745d048aed) method doesn't lack it) </Description>
        <CreatedDate>16/08/2018</CreatedDate>
        <ClosedDate>09/10/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29306</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Remove AbstractPackage.ForegroundObject, and its costly initialization</Title>
    <Description>Fixes #29283</Description>
    <CreatedDate>14/08/2018</CreatedDate>
    <ClosedDate>25/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29306</PullRequestID>
        <IssueID>29283</IssueID>
        <Title>Remove AbstractPackage.ForegroundObject</Title>
        <Description>From https://github.com/dotnet/roslyn/pull/28781#discussion_r208391862:

&gt; PERF: Remove `AbstractPackage.ForegroundObject`, and its costly initialization</Description>
        <CreatedDate>14/08/2018</CreatedDate>
        <ClosedDate>25/10/2018</ClosedDate>
        <Labels>
          <Label>Area-Performance</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29263</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>add SyntaxFactory.ParseDeclaration</Title>
    <Description>Fixes #367</Description>
    <CreatedDate>14/08/2018</CreatedDate>
    <ClosedDate>28/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29263</PullRequestID>
        <IssueID>367</IssueID>
        <Title>Please add SyntaxFactory.ParseDeclaration</Title>
        <Description>&gt; Subject: Could we have SyntaxFactory.ParseDeclaration(...)?
&gt; From: Mark Zhou
&gt; To: Roslyn Discussion
&gt; Sent: Sunday, December 14, 2014 7:25 PM

Hi, 

I am doing a side analysis project that requires adding/removing `MemberDeclarationSyntax` and derives for the code fix. some code fix providers in my code heavily depend on `SyntaxFactory` and `SyntaxGenerator` APIs. When I explore `ParseXxx` methods from `SyntaxFactory`, I noticed there isn’t one for simply parsing a text into `MemberDeclarationSyntax`. Adding a member into a type becomes a mess for me – since you need to call either `SyntaxFactory.MethodDeclaration` or `SyntaxGenerator.AddMembers` or equivalent. 

My ask is whether we can have one API to parse text to a member declaration? 

Thanks,
Mark.

[Migrated from TFS DevDiv 1096321]
</Description>
        <CreatedDate>10/02/2015</CreatedDate>
        <ClosedDate>28/09/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-API</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29233</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>Extended Keyword Parsing to cover member lookup expressions.</Title>
    <Description>Fix for #29231
Extend the parsing for keywords, to look ahead at the next token to ee if it is a qualifier token.

If it is then treat the keyword as an identifier (with an attached diagnostic) thus considering it member lookup expression.
This allows Interpolation String to "correctly" parse this form as an expression, thus the rest is parsed as part of the string interpolation and not treat the expression as text.

![keywordexpr_01](https://user-images.githubusercontent.com/900107/44095315-69048076-9fd0-11e8-8a51-32b5c0f2a9f9.png)
</Description>
    <CreatedDate>12/08/2018</CreatedDate>
    <ClosedDate>01/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29233</PullRequestID>
        <IssueID>29231</IssueID>
        <Title>String Interpolation parses an expression as Text.</Title>
        <Description>**Version Used**: `Visual Basic Tools   2.9.0-beta8-63119-10`

**Steps to Reproduce**:

1. The is a repo of the issue. 
``
The classifier / parser thinks the `End.ToString()` is text and not an expression.
2.  Now escape the `End` eg `[End]`
3.  Classified / Parsed correctly

I'd expect the expression to be parsed correctly with and error diagnostic (to indicate the identifier `End` could not be found.). A possible additional diagnostic could be possible, to indicate an unescaped keyword identifier usage. </Description>
        <CreatedDate>11/08/2018</CreatedDate>
        <ClosedDate>31/10/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29219</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Ashera138</FixedByID>
    <Title>Fixed a bug with Intellisense on Enum</Title>
    <Description>Fixed a bug where Intellisense was stripping square brackets from Enum on autocomplete. Issue: #28767</Description>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>13/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29219</PullRequestID>
        <IssueID>28767</IssueID>
        <Title>VB: Intellisense should NOT strip square brackets when autocompleting "Enum" type name.</Title>
        <Description>**Version Used**: 

Visual Studio Community 2017 v15.5.6

**Steps to Reproduce**:

Let's say you want to write code similar to:

``

In the above code the class `CDec` uses the reserved keyword `CDec` for converting values to type `Decimal`. So if you want to call the shared method `DoSomething` which must be qualified with type name `[CDec]`, you can type the square brackets, then begin typing `cd` to bring up Intellisense:

![vs_reserved_kwd_6](https://user-images.githubusercontent.com/20465797/43042096-c46722c2-8d7c-11e8-9e05-f21bb3313244.png)

Note the autocomplete list above shows `CDec` as a keyword and `CDec` as a type. If you choose to autocomplete with the keyword `CDec` **it correctly strips the brackets as expected**. If you choose to autocomplete with the type name `CDec` **it correctly PRESERVES the brackets as expected**. This bracket preservation should also work for the `Enum` type which like the `CDec` class we defined above just happens to be named after a reserved keyword.</Description>
        <CreatedDate>22/07/2018</CreatedDate>
        <ClosedDate>13/10/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Language-VB</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29104</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>KristianJakubik</FixedByID>
    <Title>Fix removes previous #region</Title>
    <Description>Fixed issue: #27675</Description>
    <CreatedDate>06/08/2018</CreatedDate>
    <ClosedDate>16/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29104</PullRequestID>
        <IssueID>27675</IssueID>
        <Title>Apply fix will remove previous #region statements</Title>
        <Description>**Version Used**: 2.8.3.6292307

**Steps to Reproduce**:
Adding Code like this
``
</Description>
        <CreatedDate>09/06/2018</CreatedDate>
        <ClosedDate>19/10/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28776</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>nprad</FixedByID>
    <Title>Remove this recommendation for anonymous functions in static methods</Title>
    <Description>### Customer scenario

`this` keyword should not be offered as completion for anonymous functions in static methods

### Bugs this fixes

Fixes #27923 

### Workarounds, if any

Do not select `this` when offered for anonymous functions in static methods.

### Risk

Little risk.

### Performance impact

Low.

### Is this a regression from a previous update?

No.

### Root cause analysis

Missed this in [PR #27690](https://github.com/dotnet/roslyn/pull/27690).

### How was the bug found?

@Neme12 found this in [PR #27690](https://github.com/dotnet/roslyn/pull/27690)

### Test documentation updated?

Test documentation update is not needed for this PR.

&lt;/details&gt;
</Description>
    <CreatedDate>22/07/2018</CreatedDate>
    <ClosedDate>11/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28776</PullRequestID>
        <IssueID>27923</IssueID>
        <Title>Completion for `this` is always offered in anonymous functions</Title>
        <Description>``
In both places at `$$`, `this` keyword is offered even though the method is static.

Discovered here:
https://github.com/dotnet/roslyn/pull/27690#pullrequestreview-128730842

I believe the fix should be really easy - just modify `method.MethodKind == MethodKind.LocalFunction` to `method.MethodKind == MethodKind.LocalFunction || method.MethodKind == MethodKind.AnonymousFunction` and add appropriate tests including nested anonymous functions and possibly even cases with a lambda inside a local function and vice versa, if you want to be extra diligent :smile:</Description>
        <CreatedDate>15/06/2018</CreatedDate>
        <ClosedDate>11/09/2018</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>good first issue</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28776</PullRequestID>
        <IssueID>27690</IssueID>
        <Title>Recommend 'this' inside local functions</Title>
        <Description>### Customer scenario
Try to type `this` inside a local function that is inside an instance method. `this` should be offered as a completion.

### Bugs this fixes
Fixes https://github.com/dotnet/roslyn/issues/27028

### Workarounds, if any
Type `this` in full.

### Risk
### Performance impact
Low. The change only impacts the case of typing inside a local function.

### Is this a regression from a previous update?
No.

### Root cause analysis
The semantic model shows local functions as static (since that is how they are emitted).

### How was the bug found?
Internally.</Description>
        <CreatedDate>10/06/2018</CreatedDate>
        <ClosedDate>12/06/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28776</PullRequestID>
        <IssueID>27690</IssueID>
        <Title>Recommend 'this' inside local functions</Title>
        <Description>### Customer scenario
Try to type `this` inside a local function that is inside an instance method. `this` should be offered as a completion.

### Bugs this fixes
Fixes https://github.com/dotnet/roslyn/issues/27028

### Workarounds, if any
Type `this` in full.

### Risk
### Performance impact
Low. The change only impacts the case of typing inside a local function.

### Is this a regression from a previous update?
No.

### Root cause analysis
The semantic model shows local functions as static (since that is how they are emitted).

### How was the bug found?
Internally.</Description>
        <CreatedDate>10/06/2018</CreatedDate>
        <ClosedDate>12/06/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28490</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Share file watchers for metadata references</Title>
    <Description>Under the covers, we were already reusing the actual metadata, but not sharing VisualStudioMetadataReference meant that each project would create it's own copies of file watchers for all metadata references. These were (hopefully) being consolidated by the Visual Studio file watching service, but the overhead of doing so was still much larger than not doing it in the first place.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Opening a large solution isn't as fast as we'd like it to be.

### Bugs this fixes

[bug needs to be filed if needed]

### Workarounds, if any

None, other than make your solution smaller.

### Risk

Moderate: generally changes how the lifetime of some objects are. Change is mechanical though and uses established patterns in the codebase.

### Performance impact

Improved! Because of #28475, we were no longer eagerly subscribing to file watchers, but in the Roslyn.sln case we were still calling AdviseFileChanges 18,000 times on the background thread. Although the file change service in VS would be sharing those, that's still a non-trivial amount of time we're occupying in a single-threaded service that other things need during load as well. By reducing our load we're removing work happening on that background thread, allowing other work to get done first. This also means we're reusing timestamp reading, which was causing lots of disk I/O (or at least CPU time) as well.

### Is this a regression from a previous update?

Nope.

### Root cause analysis

Always been designed this way.

### How was the bug found?

Perf trace analysis.

&lt;/details&gt;
</Description>
    <CreatedDate>12/07/2018</CreatedDate>
    <ClosedDate>24/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28490</PullRequestID>
        <IssueID>28475</IssueID>
        <Title>Don't ensure we have a FileChangeTracker until we actually read the file</Title>
        <Description>This .EnsureSubscription() was very premature.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

User opens a large solution that's using CPS. We do work on the UI thread (including disk I/O) that simply doesn't need to be there. This is also doing work in csproj.dll/msvbprj.dll projects, but there's a good chance we've already done the subscription asynchronously and so we don't care.

### Bugs this fixes

No bug directly for this one at this time, observed as part of larger solution load work.

### Workarounds, if any

Buy a really, really fast computer.

### Risk

Very low -- code change is straightforward.

### Performance impact

Should shave off 5.5 seconds from the UI thread when loading a CPS-based Roslyn.sln, as well as IO.

### Is this a regression from a previous update?

Nope.

### Root cause analysis

We are subscribing to a file watcher synchronously when we can defer that until the background thread later. It seems we don't see this cost in non-CPS because we defer the call to VisualStudioMetadataReference.CurrentSnapshot until a bit later, at which point we might have already done the work in a background thread.

### How was the bug found?

Examining perf traces.

&lt;/details&gt;
</Description>
        <CreatedDate>12/07/2018</CreatedDate>
        <ClosedDate>14/07/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28441</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Enable incremental updates of the dependency graph</Title>
    <Description>This set of changes enables us to incrementally update the ProjectDependencyGraph rather than throwing it away and recomputing it each time we make any change to the topology of our solution. In the CPS case (where right now we aren't doing smarter batching right now, so each individual reference triggers a recompute), this eliminates almost two seconds of CPU time. I fully contend that's an extreme example (and yes, we will still fix the batching problem), but the hope by attacking this directly is we still make improvements where the direct batching might not be so useful. In the examples given by #25823, there may still be multiple times in a large solution where we end up adding a project references (but only a few) to a bunch of projects; even if we do one batch per project that's still not a great reason to throw this out and recompute everything again.

I strongly suggest you review a commit at a time, which will make the series of changes pretty straightforward.

Prior to the change, the state of the world was any topology change would result in us creating a new dependency graph from scratch. We did this by:

1. Walking the SolutionState to produce a new `ImmutableDictionary&lt;ProjectId, ImmutableHashSet&lt;ProjectId&gt;&gt;`. This rewalking alone counted for about a second of CPU time.
2. Creating the new ProjectDependencyGraph with this directly. Note, everything else was "lazy", but...
3. We would then have to create a new CompilationTracker map. This caused us to ask for reverse transitive references, causing us to realize the "lazy" reverse project reference map every time, so the laziness was worthless. This map is the reverse of the `ImmutableDictionary&lt;ProjectId, ImmutableHashSet&lt;ProjectId&gt;&gt;`, so every topology change was computing the full reverse one in addition to the forward one...every time.
4. We'd then actually compute the reverse transitive information in some cases.

This resulted in huge allocations, even when it didn't make sense. See @davkean's bug #25823 for a few examples.

The primary win of this change is instead of steps 1 and 3, where we recreated the direct project references and direct reverse project references every time from scratch, we just incrementally update them whenever we're adding a new reference. I suspect this is the result of most or perhaps all of the wins here. We try to also update the transitive and reverse transitive maps if we can easily do so; it's less clear to me right now if that's really helping much. In my testing right now it looks like we're occasionally getting a project reference _removal_ in my build, where we do still throw away everything.

My primary concern about this change would be whether this increases stable memory. What do I mean by that? Previously, we were actively throwing away the transitive data all the time; in practice it might have not been surviving very long. Now since we're incrementally updating it, this might actually be holding onto _more_ memory. If this becomes a concern, we could just throw away the transitive maps; this would bring us to the memory usage we had before, while still leaving all the wins we get from the direct map updates. Right now prior to this change we're churning so much memory it's just hard to say.

(Fixes #25823.)</Description>
    <CreatedDate>10/07/2018</CreatedDate>
    <ClosedDate>10/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28441</PullRequestID>
        <IssueID>25823</IssueID>
        <Title>UI delays opening a large solution due allocation pattern we use for adding project references</Title>
        <Description>Have a large &gt; 350 project that is having UI delays, took a few traces. In this case, 70% of CPU and 100% of the UI time was spent cleaning up Gen1 allocations while adding references to Roslyn:

UI thread view only (note this is CPU not time):
![image](https://user-images.githubusercontent.com/1103906/38120647-110b76a2-3416-11e8-801b-3064be434536.png)

Allocations on this path:
![image](https://user-images.githubusercontent.com/1103906/38121075-c06ae9e6-3418-11e8-8536-16298a2d65d2.png)


Note, this might be particular bad because of this scenario:

- Open solution
- Design-time build finishes -&gt; Add direct ProjectReferences 
- NuGet restore
- Design-time build finishes -&gt; Add transitive ProjectReferences</Description>
        <CreatedDate>30/03/2018</CreatedDate>
        <ClosedDate>10/09/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Performance</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28441</PullRequestID>
        <IssueID>25823</IssueID>
        <Title>UI delays opening a large solution due allocation pattern we use for adding project references</Title>
        <Description>Have a large &gt; 350 project that is having UI delays, took a few traces. In this case, 70% of CPU and 100% of the UI time was spent cleaning up Gen1 allocations while adding references to Roslyn:

UI thread view only (note this is CPU not time):
![image](https://user-images.githubusercontent.com/1103906/38120647-110b76a2-3416-11e8-801b-3064be434536.png)

Allocations on this path:
![image](https://user-images.githubusercontent.com/1103906/38121075-c06ae9e6-3418-11e8-8536-16298a2d65d2.png)


Note, this might be particular bad because of this scenario:

- Open solution
- Design-time build finishes -&gt; Add direct ProjectReferences 
- NuGet restore
- Design-time build finishes -&gt; Add transitive ProjectReferences</Description>
        <CreatedDate>30/03/2018</CreatedDate>
        <ClosedDate>10/09/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Performance</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28441</PullRequestID>
        <IssueID>25823</IssueID>
        <Title>UI delays opening a large solution due allocation pattern we use for adding project references</Title>
        <Description>Have a large &gt; 350 project that is having UI delays, took a few traces. In this case, 70% of CPU and 100% of the UI time was spent cleaning up Gen1 allocations while adding references to Roslyn:

UI thread view only (note this is CPU not time):
![image](https://user-images.githubusercontent.com/1103906/38120647-110b76a2-3416-11e8-801b-3064be434536.png)

Allocations on this path:
![image](https://user-images.githubusercontent.com/1103906/38121075-c06ae9e6-3418-11e8-8536-16298a2d65d2.png)


Note, this might be particular bad because of this scenario:

- Open solution
- Design-time build finishes -&gt; Add direct ProjectReferences 
- NuGet restore
- Design-time build finishes -&gt; Add transitive ProjectReferences</Description>
        <CreatedDate>30/03/2018</CreatedDate>
        <ClosedDate>10/09/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Performance</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28013</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>wachulski</FixedByID>
    <Title>Fix naming consistency of ConvertAutoPropertyToFullProperty refactoring</Title>
    <Description>ConvertAutoPropertyToFullProperty had prefixed fields with '_' by default
when no user naming preferences had been set up (hardcode for that specific
refactoring).

According to dotnet/roslyn#22884, it should be aligned to fallback defaults
of CSharpInitializeMemberFromParameterCodeRefactoringProvider.

Fixes dotnet/roslyn#26992
</Description>
    <CreatedDate>20/06/2018</CreatedDate>
    <ClosedDate>29/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28013</PullRequestID>
        <IssueID>22884</IssueID>
        <Title>Initialize field from constructor parameter defaults to using "this.", where it should default to field with prefixed underscore</Title>
        <Description>**Steps to Reproduce**:

1. Ensure you don't have custom naming styles set in Visual Studio.
2. Add a constructor to some class with a parameter which is not initialized yet:

`` 
This conflicts with the aforementioned C# coding style, which explicitly states that using `this.` should be avoided unless absolutely necessary.

I would like to hear your opinion(s) about this! Also, I will look into this today and see if I can provide a fix for this if you agree with this issue.</Description>
        <CreatedDate>27/10/2017</CreatedDate>
        <ClosedDate>19/11/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Resolution-By Design</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28013</PullRequestID>
        <IssueID>26992</IssueID>
        <Title>"Convert to full property" creates field with underscore prefix</Title>
        <Description>When there is no custom naming style for fields, the default behavior of "Convert to full property" is to prefix the field with an underscore:
``

on the other hand, "Initialize field from constructor" does *not* use an underscore by default, as was discussed in #22884.

There should probably be consistency here.</Description>
        <CreatedDate>19/05/2018</CreatedDate>
        <ClosedDate>29/10/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26793</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>alrz</FixedByID>
    <Title> Integrate elseless-if handling for 'invert-if' refactoring</Title>
    <Description>Integrate https://github.com/dotnet/roslyn/pull/24649 on top of #25233 
</Description>
    <CreatedDate>11/05/2018</CreatedDate>
    <ClosedDate>13/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26793</PullRequestID>
        <IssueID>25233</IssueID>
        <Title>Enable InvertIf</Title>
        <Description>PR to reenable the InvertIf feature.  </Description>
        <CreatedDate>05/03/2018</CreatedDate>
        <ClosedDate>01/05/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26191</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Enable completion of object initializer of generic type constraint.</Title>
    <Description>Fixes #24612
&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.

&lt;/details&gt;
</Description>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>19/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26191</PullRequestID>
        <IssueID>24612</IssueID>
        <Title>New generic class, No prompts if initialization</Title>
        <Description>The generic T constraint is a subclass of an interface with parameterless constructors, both A and B are properties of the interface new t{a=&amp;quot;&amp;quot;,b=&amp;quot;&amp;quot;}; The IDE does not hint

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/173607/new泛型类时若进行初始化则无提示.html
VSTS ticketId: 544394_
_These are the original issue comments:_

Ariel Yang - MSFT on ‎12‎/‎26‎/‎2017, 08:36 PM (37 days ago): &lt;p&gt;Translated from bing :&lt;/p&gt;&lt;p&gt;A generic t constraint is a subclass of an interface with a parameterless constructor, and A and B are all properties of an interface
&lt;br&gt;New T\{a= "", b= ""};
&lt;br&gt;The IDE does not hint&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;

Jinu Joseph [MSFT] on ‎1‎/‎7‎/‎2018, 06:00 PM (25 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>02/02/2018</CreatedDate>
        <ClosedDate>19/09/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>25925</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>MaStr11</FixedByID>
    <Title>Refactor ISyntaxFactsService.IsQueryKeyword</Title>
    <Description>### Customer scenario

This is a follow up to #23049. That PR introduced the `bool IsQueryKeyword(SyntaxToken token);` method in  `ISyntaxFactsService` in commit 2f160258186111147dbe0f24738bc8bfbda23cb8. The way the methods checks the keyword might break if any of the keywords is allowed in other contexts. This was revealed in https://github.com/dotnet/roslyn/pull/25711#discussion_r176950992 by @CyrusNajmabadi. This PR fixes this by checking if the parent SyntaxNode of each keyword token is somehow related to query syntax for `CSharpSyntaxFactsService` and `VisualBasicSyntaxFactsServiceFactory`.

~Unfortunately I can't provide tests with this change because there isn't any test infrastructure in place for `ISyntaxFactsService`. The way I *tested* the code was by looking for the usage of the keywords in the `SyntaxFactory` of VB and C#. That way I found the places where the keywords got used and their parents type.~

Update: VB and C# implementations are covered by tests now.

### Bugs this fixes

None.

### Workarounds, if any

None.

### Risk

Low. This method is only called by [GetSemanticInfo.SemanticModelExtensions](https://github.com/dotnet/roslyn/blob/master/src/Workspaces/Core/Portable/Shared/Extensions/SemanticModelExtensions.cs#L238).

### Performance impact

Low.

### Is this a regression from a previous update?

Just a re-factoring.

### Root cause analysis

Found via code review after PR was already merged.

### How was the bug found?

Found by @CyrusNajmabadi 

/cc @Neme12 
</Description>
    <CreatedDate>04/04/2018</CreatedDate>
    <ClosedDate>17/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>25925</PullRequestID>
        <IssueID>23049</IssueID>
        <Title>Support GotoDefinition in LINQ query syntax</Title>
        <Description>**Customer scenario**

Support *GotoDefinition* for LINQ query syntax. Enables Ctrl+Click and tool-tip info for LINQ query clauses. Proposal #23394.

*GotoDefinition* and *QuickInfo* are finding the right overloads in `System.Linq.Enumerable`,  `System.Linq.Queryable` and the  [query expression pattern](https://github.com/ljw1004/csharpspec/blob/gh-pages/expressions.md#the-query-expression-pattern) depending on the source.

![gotodefinitionlinq](https://user-images.githubusercontent.com/24472128/33327545-0d2bb59c-d458-11e7-9aaf-0ad7e030cf5f.gif)

(Use [gif-explode](http://gif-explode.com/?explode=https://user-images.githubusercontent.com/24472128/33327545-0d2bb59c-d458-11e7-9aaf-0ad7e030cf5f.gif) to view the single frames).

**Bugs this fixes:**

Feature request #22096 by @dpoeschl.

**Workarounds, if any**

New feature.

**Risk**

Performance degradation in the editor. VS crashes.

**Performance impact**

Unknown.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Support for LINQ query syntax was already included but was missing some features (only `select` and `group by` was supported and `UnoptimizedForm` of the query was not taken into account as fall-back).

**How was the bug found?**

Feature request #22096 and proposal #23394.

**Test documentation updated?**

No.</Description>
        <CreatedDate>07/11/2017</CreatedDate>
        <ClosedDate>21/03/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
          <Label>Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23619</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>DiablosOffens</FixedByID>
    <Title>Partially revert changes from 0f5b10ac92573603591f623a5e55f1f87fae70e5</Title>
    <Description>Fixes #23617</Description>
    <CreatedDate>06/12/2017</CreatedDate>
    <ClosedDate>19/10/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23619</PullRequestID>
        <IssueID>23617</IssueID>
        <Title>Typing &lt;space&gt; after override keyword crashes Visual Studio</Title>
        <Description>**Version Used**:
1.3.4.60902 (Visual Studio 2015 Update 3 with KB3165756 applied)

**Steps to Reproduce**:

1. Create a C# source file.
2. Insert the following code:
``
I found a gist file which shows the same exception, but I don't know where it belongs to:
https://gist.github.com/tomasr/9a7f2997f01d4180c6618df89a12d43f</Description>
        <CreatedDate>06/12/2017</CreatedDate>
        <ClosedDate>08/12/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21338</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Fixed IntelliSense suggestion for read-only class properties in object initializers </Title>
    <Description>**Customer scenario**
IntelliSense doesn't show read-only class properties in object initializers

**Bugs this fixes:**
Fixes #15205

**Risk**
Low

**Performance impact**
Low

**Is this a regression from a previous update?**
No

**How was the bug found?**
customer reported</Description>
    <CreatedDate>06/08/2017</CreatedDate>
    <ClosedDate>20/09/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21338</PullRequestID>
        <IssueID>15205</IssueID>
        <Title>IntelliSense doesn't show read-only class properties in object initializers</Title>
        <Description>**Version Used**: 2015, 15

``

Inside the last pair of braces, IntelliSense should show `P`, to allow `new C { P = { x = 2 } }` (which is completely legal).

It currently only shows writable properties and concrete collection properties.</Description>
        <CreatedDate>13/11/2016</CreatedDate>
        <ClosedDate>20/09/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29352</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chsienki</FixedByID>
    <Title>Expose refonly as an msbuild property</Title>
    <Description>Expose /refonly via an MSBuild property (see #28279)

I went with ```ProduceOnlyReferenceAssembly``` as the property name. (compare with ```ProduceReferenceAssembly``` for /refout) Feel free to bike shed on the name.</Description>
    <CreatedDate>16/08/2018</CreatedDate>
    <ClosedDate>20/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29352</PullRequestID>
        <IssueID>28279</IssueID>
        <Title>Expose `/refonly` option via MSBuild Tasks</Title>
        <Description>Currently, the `/refonly` option can only be triggered from the command-line, whereas the `/refout` option is available via MSBuild.
@onovotny [pointed out](https://twitter.com/onovotny/status/1014281720781209600) that the `/refonly` would be useful too.</Description>
        <CreatedDate>04/07/2018</CreatedDate>
        <ClosedDate>20/08/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29332</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>allisonchou</FixedByID>
    <Title>Configure severity level of .editorconfig rule from editor with Additional Files</Title>
    <Description>Added support to configure the severity level of an .editorconfig rule directly through the editor. If a user does not currently have an .editorconfig file at the project level, one will be generated for them.

Example if user already has pre-existing .editorconfig file (marked as Additional File):
![configexample1](https://user-images.githubusercontent.com/16968319/44180220-14e46200-a0b0-11e8-8beb-1288ce5f7962.png)

Example if user does not have a pre-existing .editorconfig file:
![configexample2](https://user-images.githubusercontent.com/16968319/44180224-17df5280-a0b0-11e8-9fe8-79bd4ab2ffd4.png)

**Note:** This feature is currently in its very early iterations and is expected to see large changes in the future.
Some things of note:
1. Due to technical limitations, this feature currently only works if an .editorconfig file is marked as an Additional File at the project-level. If there is an existing .editorconfig file at the project-level but it is not marked as an Additional File, then the file will not be recognized. In future iterations of this feature, we likely want to consider a solution such as automatically marking an .editorconfig file as an Additional File upon the file being added to the project/solution, or allowing an .editorconfig file to recognized as a regular document and getting rid of the Additional Document workaround altogether.

2. Adding an .editorconfig and marking it as an Additional File is currently not supported by Roslyn (see issue [#4655](https://github.com/dotnet/roslyn/issues/4655)). Therefore, while we can currently add the .editorconfig file for the user, the user must mark it as an Additional File manually.</Description>
    <CreatedDate>16/08/2018</CreatedDate>
    <ClosedDate>28/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29332</PullRequestID>
        <IssueID>4655</IssueID>
        <Title>Solution.AddAdditionalDocument does not add a new file with AdditionalFiles item type</Title>
        <Description>When adding a new file to a solution from within a codefix provider using the `Solution.AddAdditionalDocument` method, the file gets added with an item type of `None` where an item type of `AdditionalFiles` is expected.

This issue was observed using VS2015 RTM with roslyn 1.0.0
</Description>
        <CreatedDate>19/08/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Concept-API</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29290</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Use a contextual UnderscoreToken for the discard pattern.</Title>
    <Description>Fixes #27750</Description>
    <CreatedDate>14/08/2018</CreatedDate>
    <ClosedDate>21/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29290</PullRequestID>
        <IssueID>27750</IssueID>
        <Title>Should treat `_` as a contextual keyword</Title>
        <Description>In the `features/recursive_patterns` branch, we have started to treat `_` as a contextual keyword. However, there are a few places that we don't, such as this:

``

We should be consistent, probably by treating it as a contextual keyword here too.
</Description>
        <CreatedDate>12/06/2018</CreatedDate>
        <ClosedDate>21/08/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29287</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Document new warning on `e is _`.</Title>
    <Description>Fixes #27748

@dotnet/roslyn-compiler May I please have one review for this small doc change?
</Description>
    <CreatedDate>14/08/2018</CreatedDate>
    <ClosedDate>14/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29287</PullRequestID>
        <IssueID>27748</IssueID>
        <Title>New warning on existing code `e is _`</Title>
        <Description>The *is_type_expression* can be used with a type named `_`.

However, in C# 8 we are introducing a discard pattern written `_`.

To reduce confusion, we are proposing a new warning when you write `e is _`:

``

Being a *new* warning, this could be considered a compat break. We should confirm that break is acceptable.</Description>
        <CreatedDate>12/06/2018</CreatedDate>
        <ClosedDate>14/08/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29269</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Allow unnamed assembly in IVT check</Title>
    <Description>Fixes #29253.</Description>
    <CreatedDate>14/08/2018</CreatedDate>
    <ClosedDate>14/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29269</PullRequestID>
        <IssueID>29253</IssueID>
        <Title>ArgumentNullException binding inaccessible type</Title>
        <Description>`csc /t:library a.cs`:
``</Description>
        <CreatedDate>13/08/2018</CreatedDate>
        <ClosedDate>14/08/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29243</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Avoid reentrancy in ConditionalWeakTable</Title>
    <Description>Fixes #28256 

### Customer scenario

Runs Visual Studio for Mac on Mono.

### Bugs this fixes

#28256

### Workarounds, if any

None

### Risk

Low. A call sequence is split to break recursion without changing the overall algorithm.

### Performance impact

Negligible.

### Is this a regression from a previous update?

No.

### Root cause analysis

The .NET Framework supports the case in question without causing problems. The bug only appears in certain cases when running on Mono.

### How was the bug found?

Reported by @KirillOsenkov from a review of Visual Studio for Mac customer reports.

### Test documentation updated?

N/A

&lt;/details&gt;</Description>
    <CreatedDate>13/08/2018</CreatedDate>
    <ClosedDate>15/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29243</PullRequestID>
        <IssueID>28256</IssueID>
        <Title>Reentrancy in SnapshotSourceText.From() causes exception on Mono</Title>
        <Description>See Mono Runtime bug https://github.com/mono/mono/issues/8700

Roslyn has a situation where the delegate used to create the value when ConditionalWeakTable.GetValue returns false goes ahead and reentrantly adds the same value to the weak table, so by the time the delegate returns and the ConditionalWeakTable wants to add the result, it is already there, causing this line to throw:
https://github.com/mono/mono/blob/217a1424ee083283f53ccda4b8be8ff87d62463f/mcs/class/corlib/System.Runtime.CompilerServices/ConditionalWeakTable.cs#L201

While we work with the Mono runtime team to try to fix this bug, it would be nice to see if the Roslyn team can find a workaround that would avoid reentrancy here. Maybe a simple lock as a temporary workaround. Even if the runtime team fixes the bug, it will take time for the fixed version of Mono to propagate around, so ideally we'd need a fix in Roslyn.</Description>
        <CreatedDate>03/07/2018</CreatedDate>
        <ClosedDate>15/08/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29243</PullRequestID>
        <IssueID>28256</IssueID>
        <Title>Reentrancy in SnapshotSourceText.From() causes exception on Mono</Title>
        <Description>See Mono Runtime bug https://github.com/mono/mono/issues/8700

Roslyn has a situation where the delegate used to create the value when ConditionalWeakTable.GetValue returns false goes ahead and reentrantly adds the same value to the weak table, so by the time the delegate returns and the ConditionalWeakTable wants to add the result, it is already there, causing this line to throw:
https://github.com/mono/mono/blob/217a1424ee083283f53ccda4b8be8ff87d62463f/mcs/class/corlib/System.Runtime.CompilerServices/ConditionalWeakTable.cs#L201

While we work with the Mono runtime team to try to fix this bug, it would be nice to see if the Roslyn team can find a workaround that would avoid reentrancy here. Maybe a simple lock as a temporary workaround. Even if the runtime team fixes the bug, it will take time for the fixed version of Mono to propagate around, so ideally we'd need a fix in Roslyn.</Description>
        <CreatedDate>03/07/2018</CreatedDate>
        <ClosedDate>15/08/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29221</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Ensure we have no `null` positions in source parameter symbols.</Title>
    <Description>No tests are added specifically for this fix, as the new assertions would be thrown on many existing tests.
Fixes #28862 

@dotnet/roslyn-compiler May I please have a couple of reviews for this tiny bug fix?
</Description>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>12/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29221</PullRequestID>
        <IssueID>28862</IssueID>
        <Title>LambdaSymbol parameter with Locations[0] == null</Title>
        <Description>Compiling the following, the `SourceParameterSymbol` for the  `LambdaSymbol` `y != null` has `Locations.Length == 1` and `Locations[0] == null`. `Locations` should contain non-`null` values only.
``</Description>
        <CreatedDate>26/07/2018</CreatedDate>
        <ClosedDate>12/08/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29197</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Check constraint nullability lazily for attribute arguments</Title>
    <Description>Fixes #29186.</Description>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>10/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29197</PullRequestID>
        <IssueID>29186</IssueID>
        <Title>StackOverflowException binding attribute with generic type argument</Title>
        <Description>Compile with `-langversion:8`:
``</Description>
        <CreatedDate>09/08/2018</CreatedDate>
        <ClosedDate>14/08/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29191</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Use a `BoundDiscardPattern` to represent a discard designator in a `var` pattern</Title>
    <Description>No externally visible behavior change
Fixes #27751
</Description>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>10/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29191</PullRequestID>
        <IssueID>27751</IssueID>
        <Title>Use a `BoundDiscardPattern` to represent a discard designator in a `var` pattern</Title>
        <Description>This refers to this code in `Binder_Patterns.cs`. This issue replaces the PROTOTYPE comment:

``
</Description>
        <CreatedDate>12/06/2018</CreatedDate>
        <ClosedDate>10/08/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29188</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Compute val escape for recursive pattern-matching</Title>
    <Description>Fixes #28633 
</Description>
    <CreatedDate>09/08/2018</CreatedDate>
    <ClosedDate>17/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29188</PullRequestID>
        <IssueID>28633</IssueID>
        <Title>Need to preserve val escape for recursive pattern-matching</Title>
        <Description>Recursive pattern matching does not compute the val escape for pattern variables in the recursive patterns branch.
</Description>
        <CreatedDate>18/07/2018</CreatedDate>
        <ClosedDate>17/08/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29169</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JoeRobich</FixedByID>
    <Title>Fix NRE in DeferredContentFrameworkElementFactory.CreateElement</Title>
    <Description>Constructing the QuickInfoDisplayDeferredContent with `capturesText: null` causes a NRE when 
creating elements for the QuickInfo popup. Instead use the constructor overload that sets `capturesText`
to an empty content.

This fixes #26672.</Description>
    <CreatedDate>08/08/2018</CreatedDate>
    <ClosedDate>08/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29169</PullRequestID>
        <IssueID>26672</IssueID>
        <Title>Opening a Visual Basic file resulted in &gt;100 editor errors about NullReferenceException in DeferredContentFrameworkElementFactory.CreateElement</Title>
        <Description>No repro, just opened a Visual Basic source file, resulting in:

``

Looked at [ActivityLog.zip](https://github.com/dotnet/roslyn/files/1978545/ActivityLog.zip) and this was output about ~100 times.

</Description>
        <CreatedDate>07/05/2018</CreatedDate>
        <ClosedDate>05/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>29166</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fork completion tests</Title>
    <Description>This change improves our ability to review the async completion tests through GitHub. In particular, it preserves `git diff` and `git blame` functionality for both the "old tests" (which should be preserved without alterations) and the "new tests" (which will be modified to test the new async completion features).

Recommended review strategy:

* Review the first two commits individually.
* The final commit is an identity preservation of the result of the first two commits. GitHub cannot show this, so if you want to check my work, you'll need local tools.

After this change is merged, I will update #29016, and the result will be a *much* smaller review.</Description>
    <CreatedDate>08/08/2018</CreatedDate>
    <ClosedDate>08/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>29166</PullRequestID>
        <IssueID>29016</IssueID>
        <Title>Implementation of new editor completion API</Title>
        <CreatedDate>01/08/2018</CreatedDate>
        <ClosedDate>27/11/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28483</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>MaStr11</FixedByID>
    <Title>Fix InternalsVisibleToCompletionProvider showing unsupported project types</Title>
    <Description>Fixes #28465 
Fixes #28573 

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Customer starts writing an InternalsVisibleTo attribute, when you are inside the string (which takes an assembly name), we provide completion of assembly names in your solution. You might see several potentially bad behaviors:

1, F# projects and TypeScript projects may appear; selecting and trying to complete them throws an exception and shows the "extension caused an error" dialog.
2. Any XAML-containing projects might get entries that are intended for internal tracking and shouldn't appear.

### Bugs this fixes

#28465 and #28573.

### Workarounds, if any

Hit escape in InternalsVisibleTo completion.

### Risk

Extremely low: adding what is effectively a null check so we don't process projects we shouldn't.

### Performance impact

None.

### Is this a regression from a previous update?

No, new-ish feature.

### Root cause analysis

F#, TypeScript, and XAML create "fake" projects in the Roslyn workspace. This feature didn't filter them out.

### How was the bug found?

Customer reported _and_ fixed.

&lt;/details&gt;
</Description>
    <CreatedDate>12/07/2018</CreatedDate>
    <ClosedDate>20/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28483</PullRequestID>
        <IssueID>28465</IssueID>
        <Title>InternalsVisibleToCompletionProvider lists "XamlProject" entries</Title>
        <Description>**Version Used**: 
15.7.5

**Steps to Reproduce**:

1. Create a solution with two WPF projects (libraries containing a WPF-Usercontrol).
2. Open at least one XAML file per library with the XAML designer
3. Trigger the InternalsVisibleToCompletionProvider 

**Expected Behavior**:
Only valid targets for `InternalsVisibleTo` are shown

**Actual Behavior**:
The list contains entries like `ClassLibrary1-XamlProject`
![2018-07-11 11_31_24-clipboard](https://user-images.githubusercontent.com/24472128/42563496-b21f2db6-84fe-11e8-9de8-9c6505aeb964.png)

Root cause:

https://github.com/dotnet/roslyn/blob/99537b06dd202fc0938188cb034bc512be54a51e/src/Features/Core/Portable/Completion/Providers/AbstractInternalsVisibleToCompletionProvider.cs#L126 

`context.Document.Project.Solution.Projects` contains projects with `project.Language == "Xaml"`.</Description>
        <CreatedDate>11/07/2018</CreatedDate>
        <ClosedDate>20/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28483</PullRequestID>
        <IssueID>28573</IssueID>
        <Title>InternalsVisibleToCompletionProvider raises an NRE if a F# assembly is selected</Title>
        <Description>**Version Used**: 
15.7.5
**Steps to Reproduce**:

1. Create VS solution with a C# and F# project
2. Enter `[assembly:InternalsVisibleTo("` in the C# project
3. Select the F# project from the list

**Expected Behavior**:

F# assembly name is inserted (and the public key is inserted if needed).

**Actual Behavior**:

VS displays a message box ("An exception occurred probably caused by an extension.") and reports an error in the ActivityLog.xml

Root cause:
 F# projects doesn't support compilation but the [`AbstractInternalsVisibleToCompletionProvider.GetPublicKeyOfProjectAsync`](https://github.com/dotnet/roslyn/blob/master/src/Features/Core/Portable/Completion/Providers/AbstractInternalsVisibleToCompletionProvider.cs#L241) method assumes it does.

Related #28465
</Description>
        <CreatedDate>16/07/2018</CreatedDate>
        <ClosedDate>20/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28483</PullRequestID>
        <IssueID>28465</IssueID>
        <Title>InternalsVisibleToCompletionProvider lists "XamlProject" entries</Title>
        <Description>**Version Used**: 
15.7.5

**Steps to Reproduce**:

1. Create a solution with two WPF projects (libraries containing a WPF-Usercontrol).
2. Open at least one XAML file per library with the XAML designer
3. Trigger the InternalsVisibleToCompletionProvider 

**Expected Behavior**:
Only valid targets for `InternalsVisibleTo` are shown

**Actual Behavior**:
The list contains entries like `ClassLibrary1-XamlProject`
![2018-07-11 11_31_24-clipboard](https://user-images.githubusercontent.com/24472128/42563496-b21f2db6-84fe-11e8-9de8-9c6505aeb964.png)

Root cause:

https://github.com/dotnet/roslyn/blob/99537b06dd202fc0938188cb034bc512be54a51e/src/Features/Core/Portable/Completion/Providers/AbstractInternalsVisibleToCompletionProvider.cs#L126 

`context.Document.Project.Solution.Projects` contains projects with `project.Language == "Xaml"`.</Description>
        <CreatedDate>11/07/2018</CreatedDate>
        <ClosedDate>20/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28483</PullRequestID>
        <IssueID>28573</IssueID>
        <Title>InternalsVisibleToCompletionProvider raises an NRE if a F# assembly is selected</Title>
        <Description>**Version Used**: 
15.7.5
**Steps to Reproduce**:

1. Create VS solution with a C# and F# project
2. Enter `[assembly:InternalsVisibleTo("` in the C# project
3. Select the F# project from the list

**Expected Behavior**:

F# assembly name is inserted (and the public key is inserted if needed).

**Actual Behavior**:

VS displays a message box ("An exception occurred probably caused by an extension.") and reports an error in the ActivityLog.xml

Root cause:
 F# projects doesn't support compilation but the [`AbstractInternalsVisibleToCompletionProvider.GetPublicKeyOfProjectAsync`](https://github.com/dotnet/roslyn/blob/master/src/Features/Core/Portable/Completion/Providers/AbstractInternalsVisibleToCompletionProvider.cs#L241) method assumes it does.

Related #28465
</Description>
        <CreatedDate>16/07/2018</CreatedDate>
        <ClosedDate>20/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28469</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chborl</FixedByID>
    <Title>Fix discard symbol for declaration pattern</Title>
    <Description>

### Customer scenario

Get control flow graph for this code:

```csharp
class C
{
    static void M(object o)
    /*&lt;bind&gt;*/
    {
        if (o is var _)
        {
            return;
        }
    }/*&lt;/bind&gt;*/
}
```

### Issue this fixes

#27086

### Workarounds, if any
none

### Risk
low

### Performance impact
low, very small change

### Is this a regression from a previous update?
no

### Root cause analysis


### Test documentation updated?
n/a
</Description>
    <CreatedDate>11/07/2018</CreatedDate>
    <ClosedDate>12/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28469</PullRequestID>
        <IssueID>27086</IssueID>
        <Title>DeclaredSymbol in IDeclarationPatternOperation shouldn't be null for discard</Title>
        <Description>features/dataflow branch

**Steps to Reproduce**:
Get control flow graph for this code:
``

**Expected Behavior**:
The declaration pattern should have IDiscardSymbol as the declared symbol.

**Actual Behavior**:
`IDeclarationPatternOperation (**Declared Symbol: null**) `
</Description>
        <CreatedDate>23/05/2018</CreatedDate>
        <ClosedDate>17/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - Flow Analysis</Label>
          <Label>Feature - IOperation</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28385</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>chborl</FixedByID>
    <Title>Add telemetry for code cleanup</Title>
    <Description>Adding telemetry for Code Cleanup

- [x] infobar displayed
- [x] button on infobar clicked
- [x] Tools|Options settings when Format Document is run
- [x] running time for Code Cleanup

 Bugs this fixes
#28337 

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario
When a customer formats a document, an infobar is displayed asking if they want to configure Code Cleanup or never show this infobar again.  This PR adds telemetry on when the infobar is show, what option the user chooses on this infobar, and what Code Cleanup options were set at the time of running Format Document.

### Bugs this fixes
#28337

### Workarounds, if any
n/a

### Risk
Low.  No feature code has been changed, just added logging.

### Performance impact
Very low or negligible

### Is this a regression from a previous update?
No, telemetry was not previously added

### Root cause analysis
n/a

### How was the bug found?
n/a</Description>
    <CreatedDate>09/07/2018</CreatedDate>
    <ClosedDate>14/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28385</PullRequestID>
        <IssueID>28337</IssueID>
        <Title>Add telemetry for code clean up feature  </Title>
        <CreatedDate>06/07/2018</CreatedDate>
        <ClosedDate>17/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28385</PullRequestID>
        <IssueID>28337</IssueID>
        <Title>Add telemetry for code clean up feature  </Title>
        <CreatedDate>06/07/2018</CreatedDate>
        <ClosedDate>17/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28313</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Reject base.Method() calls inside restricted types, because that requires boxing</Title>
    <Description>Fixes #27049</Description>
    <CreatedDate>05/07/2018</CreatedDate>
    <ClosedDate>07/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28313</PullRequestID>
        <IssueID>27049</IssueID>
        <Title>Compiler should report base method calls in ref struct declarations</Title>
        <Description>**Version Used**: 
Visual Studio 2017 d15.7+

**Steps to Reproduce**:

1. Create a C# project
2. Add a `ref struct` declaration, override any of the base methods and inside the body, call base method. for example:
``

**Expected Behavior**:
Compiler should report the usage of the base method invocations inside the `ref struct`, issue a warning or an error to disallow the invocation of base methods from `System.Object`.

**Actual Behavior**:
You will get a runtime error: `System.InvalidProgramException`: Cannot create boxed by-ref like object. 

</Description>
        <CreatedDate>22/05/2018</CreatedDate>
        <ClosedDate>07/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28311</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Use default constant value for synthesized local reference for LockTa…</Title>
    <Description>…ken variable in CFG

Fixes #28301

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

When an analyzer using the new ControlFlowGraph compiler APIs tries to request and analyze a flow graph for source code containing a `lock` statement, we return a corrupt graph. This can cause analsysis to fail in various ways (throws exception(s), fires assert(s), produce incorrect analysis result, etc.). In fact, attempting to move the features/dataflow branch on https://github.com/dotnet/roslyn-analyzers to the latest Microsoft.CodeAnalysis NuGet package is causing all the lock related tests to fail with asserts.

### Bugs this fixes

Fixes #28301

### Workarounds, if any

All CFG based analyzers have to explicitly identify and handle such corrupt cases.

### Risk

Low. This only affects analyzers based on new CFG APIs, which need to be executed under an experimental feature flag. The fix is also pretty trivial.

### Performance impact

None

### Is this a regression from a previous update?

No, this is a new public API.

### Root cause analysis

Missed it while reviewing the tests.

### How was the bug found?

Attempting to move roslyn-analyzers repo to latest Microsoft.CodeAnalysis NuGet pacakge

### Test documentation updated?

N/A

&lt;/details&gt;</Description>
    <CreatedDate>05/07/2018</CreatedDate>
    <ClosedDate>12/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28311</PullRequestID>
        <IssueID>28301</IssueID>
        <Title>Invalid ConstantValue for the ILocalReferenceOperation generated for LockTaken variable reference in CFG</Title>
        <Description>Look at any of the flow tests for ILockStatement, for example http://source.roslyn.io/#Roslyn.Compilers.CSharp.Semantic.UnitTests/IOperation/IOperationTests_ILockStatement.cs,455:

``

Note that the local reference operation is of type `bool`, but it has a constant value of `null` instead of having no constant value. Issue seems to be at couple of places in the CFG builder where we synthesize LocalReferenceExpression [here](http://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/ControlFlowGraphBuilder.cs,3757) and [here](http://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/ControlFlowGraphBuilder.cs,3797), we incorrectly use `constantValue: null` instead of `constantValue: default`.</Description>
        <CreatedDate>05/07/2018</CreatedDate>
        <ClosedDate>13/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - Flow Analysis</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28311</PullRequestID>
        <IssueID>28301</IssueID>
        <Title>Invalid ConstantValue for the ILocalReferenceOperation generated for LockTaken variable reference in CFG</Title>
        <Description>Look at any of the flow tests for ILockStatement, for example http://source.roslyn.io/#Roslyn.Compilers.CSharp.Semantic.UnitTests/IOperation/IOperationTests_ILockStatement.cs,455:

``

Note that the local reference operation is of type `bool`, but it has a constant value of `null` instead of having no constant value. Issue seems to be at couple of places in the CFG builder where we synthesize LocalReferenceExpression [here](http://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/ControlFlowGraphBuilder.cs,3757) and [here](http://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/ControlFlowGraphBuilder.cs,3797), we incorrectly use `constantValue: null` instead of `constantValue: default`.</Description>
        <CreatedDate>05/07/2018</CreatedDate>
        <ClosedDate>13/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - Flow Analysis</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28310</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>In region analysis, recover gracefully from zero-width nodes.</Title>
    <Description>Fixes #26028

This fixes a crash in debug builds caused by a slightly too aggressive assertion.

@dotnet/roslyn-compiler Please review this smallest possible (1 character) bug fix. I am hoping to get this into 15.8.
</Description>
    <CreatedDate>05/07/2018</CreatedDate>
    <ClosedDate>16/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28310</PullRequestID>
        <IssueID>26028</IssueID>
        <Title>Assertion failure in PreciseAbstractFlowPass: "last comes before first"</Title>
        <Description>1. Checkout master &amp; run a debug build of VisualStudioSetup
2. Paste the following code &amp; put cursor after 'x':
``

This is what I get:
![image](https://user-images.githubusercontent.com/11444821/38473592-b270d7c0-3b92-11e8-9c2f-7431cddfb886.png)
</Description>
        <CreatedDate>08/04/2018</CreatedDate>
        <ClosedDate>16/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28295</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Set VSSDKTargetPlatformRegRootSuffix for Roslyn.csproj</Title>
    <Description>Fixes broken &lt;kbd&gt;F5&lt;/kbd&gt; experience with **Roslyn.csproj** set as the startup project.

The issue became especially apparent after #28016.

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.

&lt;/details&gt;
</Description>
    <CreatedDate>05/07/2018</CreatedDate>
    <ClosedDate>17/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28295</PullRequestID>
        <IssueID>28016</IssueID>
        <Title>Make "Roslyn" default setup project</Title>
        <Description>By default, VS sets the first project listed in the solution as the default project. This saves new contributors from having to manually set the default project.</Description>
        <CreatedDate>20/06/2018</CreatedDate>
        <ClosedDate>21/06/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
          <Label>Contributor Pain</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28285</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>wachulski</FixedByID>
    <Title>Add GetCorrespondingLoop() (and Switch) branch operation extensions</Title>
    <Description>Fixes dotnet/roslyn#28095

[jcouv update:] Summary from Fred is we're adding an API to get the corresponding switch or loop structure for a given `break` or other branch operation.</Description>
    <CreatedDate>04/07/2018</CreatedDate>
    <ClosedDate>13/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28285</PullRequestID>
        <IssueID>28095</IssueID>
        <Title>Extension method to map an IBranchOperation to the parenting ILoopOperation or ISwitchOperation</Title>
        <Description>See the second bullet point in Nice to have listed by @bkoelman in this comment: https://github.com/dotnet/roslyn/issues/27208#issuecomment-396575101</Description>
        <CreatedDate>25/06/2018</CreatedDate>
        <ClosedDate>13/08/2018</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Feature Request</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28268</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>heejaechang</FixedByID>
    <Title>use correct line ending</Title>
    <Description>### Customer scenario

user commit completion in razor on mac and code got messed up.

### Bugs this fixes

 https://devdiv.visualstudio.com/DevDiv/_workitems/edit/585147 and #28240

### Workarounds, if any

don't use tab and use windows line ending.

### Risk

Low. no code loss. 

### Performance impact

Low. no perf impacting changes

### Is this a regression from a previous update?

No

### Root cause analysis

formatter we used for razor didn't set line ending correctly (always used windows style) and didn't check tab for whitespace causing it to group strings in the wrong group (whitespace group)

### How was the bug found?

A customer from VS for Mac
</Description>
    <CreatedDate>03/07/2018</CreatedDate>
    <ClosedDate>12/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28268</PullRequestID>
        <IssueID>28240</IssueID>
        <Title>Razor: Code in indented @{} block jumps up a line when committed, cannot be repositioned</Title>
        <Description>See https://devdiv.visualstudio.com/DevDiv/_workitems/edit/585147

When using Tabs and `\n` line endings, use this:

``</Description>
        <CreatedDate>02/07/2018</CreatedDate>
        <ClosedDate>16/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28252</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Track enclosing symbol in data flow analysis, which might be a field or property.</Title>
    <Description>Code used to assume it was (and typed it as) a method.
Fixes #19845
Fixes #27969

@dotnet/roslyn-compiler May I please have a couple of reviews?

&lt;details&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

Code containing a reference to a property in an initializer undergoes region analysis. The compiler crashes.

### Bugs this fixes

Fixes #19845
Fixes #27969

### Workarounds, if any

None known.

### Risk

Low. This is a localized correction that widens the type of a field so that we can track the enclosing symbol when it is not a method.

### Performance impact

None expected.

### Is this a regression from a previous update?

Probably.

### Root cause analysis

### How was the bug found?

Customer reported.

### Test documentation updated?

N/A

&lt;/details&gt;
</Description>
    <CreatedDate>03/07/2018</CreatedDate>
    <ClosedDate>03/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28252</PullRequestID>
        <IssueID>19845</IssueID>
        <Title>ExtractMethodCodeRefactoringProvider throws on property reference in initializer</Title>
        <Description>**Version Used**:  15.2 (26430.6) Release

``</Description>
        <CreatedDate>29/05/2017</CreatedDate>
        <ClosedDate>03/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28252</PullRequestID>
        <IssueID>27969</IssueID>
        <Title>Crash in DataFlowAnalysis</Title>
        <Description>**Version Used**: 
Microsoft.CodeAnalysis v2.8.2

**Steps to Reproduce**:
Consider the next program, which runs data flow analysis on lambda expression `x =&gt; true`:
``</Description>
        <Code>```csharp
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace RoslynDataFlowCrash
{
    class Program
    {
        static void Main()
        {
            const string source = @"
class C
{
    object P { get; } = Create(nameof(P), x =&gt; true);

    static object Create(string name, Func&lt;string, bool&gt; f) =&gt; throw null;
}
";

            SyntaxTree tree = CSharpSyntaxTree.ParseText(source);
            var compilation = CSharpCompilation.Create("test.dll", new[] { tree });
            var model = compilation.GetSemanticModel(tree);

            SimpleLambdaExpressionSyntax lambdaSyntax = tree.GetRoot().DescendantNodes().OfType&lt;SimpleLambdaExpressionSyntax&gt;().First();

            DataFlowAnalysis dataFlowAnalysis = model.AnalyzeDataFlow(lambdaSyntax.Body);

            bool succeeded = dataFlowAnalysis.Succeeded; // NullReferenceException
        }
    }
}
```

**Expected Behavior**:
No exception.

**Actual Behavior**:
`NullReferenceException`. Full stack trace:
```
System.NullReferenceException
  HResult=0x80004003
  Message=Object reference not set to an instance of an object.
  Source=Microsoft.CodeAnalysis.CSharp
  StackTrace:
   at Microsoft.CodeAnalysis.CSharp.Binder.AccessingAutoPropertyFromConstructor(BoundExpression receiver, PropertySymbol propertySymbol, Symbol fromMember)
   at Microsoft.CodeAnalysis.CSharp.Binder.AccessingAutoPropertyFromConstructor(BoundPropertyAccess propertyAccess, Symbol fromMember)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.VisitPropertyAccess(BoundPropertyAccess node)
   at Microsoft.CodeAnalysis.CSharp.BoundPropertyAccess.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitNameOfOperator(BoundNameOfOperator node)
   at Microsoft.CodeAnalysis.CSharp.BoundNameOfOperator.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitArguments(ImmutableArray`1 arguments, ImmutableArray`1 refKindsOpt, MethodSymbol method)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Analyze(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.Analyze(Boolean&amp; badRegion, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.UnassignedVariablesWalker.Analyze(CSharpCompilation compilation, Symbol member, BoundNode node, Boolean convertInsufficientExecutionStackExceptionToCancelledByStackGuardException)
   at Microsoft.CodeAnalysis.CSharp.CSharpDataFlowAnalysis.get_UnassignedVariables()
   at Microsoft.CodeAnalysis.CSharp.CSharpDataFlowAnalysis.get_DataFlowsIn()
   at Microsoft.CodeAnalysis.CSharp.CSharpDataFlowAnalysis.get_Succeeded()
   at RoslynDataFlowCrash.Program.Main() in E:\Bart\Source\Visual Studio 2017\RoslynDataFlowCrash\RoslynDataFlowCrash\Program.cs:line 29
`</Code>
        <CreatedDate>18/06/2018</CreatedDate>
        <ClosedDate>03/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28252</PullRequestID>
        <IssueID>19845</IssueID>
        <Title>ExtractMethodCodeRefactoringProvider throws on property reference in initializer</Title>
        <Description>**Version Used**:  15.2 (26430.6) Release

``</Description>
        <CreatedDate>29/05/2017</CreatedDate>
        <ClosedDate>03/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28252</PullRequestID>
        <IssueID>27969</IssueID>
        <Title>Crash in DataFlowAnalysis</Title>
        <Description>**Version Used**: 
Microsoft.CodeAnalysis v2.8.2

**Steps to Reproduce**:
Consider the next program, which runs data flow analysis on lambda expression `x =&gt; true`:
``</Description>
        <Code>```csharp
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace RoslynDataFlowCrash
{
    class Program
    {
        static void Main()
        {
            const string source = @"
class C
{
    object P { get; } = Create(nameof(P), x =&gt; true);

    static object Create(string name, Func&lt;string, bool&gt; f) =&gt; throw null;
}
";

            SyntaxTree tree = CSharpSyntaxTree.ParseText(source);
            var compilation = CSharpCompilation.Create("test.dll", new[] { tree });
            var model = compilation.GetSemanticModel(tree);

            SimpleLambdaExpressionSyntax lambdaSyntax = tree.GetRoot().DescendantNodes().OfType&lt;SimpleLambdaExpressionSyntax&gt;().First();

            DataFlowAnalysis dataFlowAnalysis = model.AnalyzeDataFlow(lambdaSyntax.Body);

            bool succeeded = dataFlowAnalysis.Succeeded; // NullReferenceException
        }
    }
}
```

**Expected Behavior**:
No exception.

**Actual Behavior**:
`NullReferenceException`. Full stack trace:
```
System.NullReferenceException
  HResult=0x80004003
  Message=Object reference not set to an instance of an object.
  Source=Microsoft.CodeAnalysis.CSharp
  StackTrace:
   at Microsoft.CodeAnalysis.CSharp.Binder.AccessingAutoPropertyFromConstructor(BoundExpression receiver, PropertySymbol propertySymbol, Symbol fromMember)
   at Microsoft.CodeAnalysis.CSharp.Binder.AccessingAutoPropertyFromConstructor(BoundPropertyAccess propertyAccess, Symbol fromMember)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.VisitPropertyAccess(BoundPropertyAccess node)
   at Microsoft.CodeAnalysis.CSharp.BoundPropertyAccess.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitNameOfOperator(BoundNameOfOperator node)
   at Microsoft.CodeAnalysis.CSharp.BoundNameOfOperator.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitArguments(ImmutableArray`1 arguments, ImmutableArray`1 refKindsOpt, MethodSymbol method)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Analyze(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.Analyze(Boolean&amp; badRegion, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.UnassignedVariablesWalker.Analyze(CSharpCompilation compilation, Symbol member, BoundNode node, Boolean convertInsufficientExecutionStackExceptionToCancelledByStackGuardException)
   at Microsoft.CodeAnalysis.CSharp.CSharpDataFlowAnalysis.get_UnassignedVariables()
   at Microsoft.CodeAnalysis.CSharp.CSharpDataFlowAnalysis.get_DataFlowsIn()
   at Microsoft.CodeAnalysis.CSharp.CSharpDataFlowAnalysis.get_Succeeded()
   at RoslynDataFlowCrash.Program.Main() in E:\Bart\Source\Visual Studio 2017\RoslynDataFlowCrash\RoslynDataFlowCrash\Program.cs:line 29
`</Code>
        <CreatedDate>18/06/2018</CreatedDate>
        <ClosedDate>03/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28250</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Added more tests to ref assignment to invalid expressions</Title>
    <Description>Closes #28238
Responds to additional feedback from #28118

cc @dotnet/roslyn-compiler for review.
cc @agocke for original feedback.</Description>
    <CreatedDate>02/07/2018</CreatedDate>
    <ClosedDate>07/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28250</PullRequestID>
        <IssueID>28238</IssueID>
        <Title>Visual Studio crashed when type { object = ref</Title>
        <Description>**Version Used**: 
15.7.4

**Steps to Reproduce**:
open any method, or C# interactive and start writing:
var temp = new { object = ref

**Expected Behavior**:
Error that "object" appears.

**Actual Behavior**:
Visual Studio crashed
</Description>
        <CreatedDate>02/07/2018</CreatedDate>
        <ClosedDate>07/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28250</PullRequestID>
        <IssueID>28118</IssueID>
        <Title>Ref-assigning to array elements should produce an error</Title>
        <Description>Fixes #28087 </Description>
        <CreatedDate>26/06/2018</CreatedDate>
        <ClosedDate>02/07/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28219</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>ivanbasov</FixedByID>
    <Title>Async completion bug fixes</Title>
    <Description>Fixes: #27692, #27693</Description>
    <CreatedDate>29/06/2018</CreatedDate>
    <ClosedDate>10/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28219</PullRequestID>
        <IssueID>27692</IssueID>
        <Title>Editor Completion Tests: VB TestExclusiveNamedParameterCompletion2</Title>
        <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
        <CreatedDate>10/06/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>0 - Backlog</Label>
          <Label>1 - Planning</Label>
          <Label>Area-IDE</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28219</PullRequestID>
        <IssueID>27693</IssueID>
        <Title>Editor Completion Tests: VB SelectKeywordFirst</Title>
        <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
        <CreatedDate>10/06/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>0 - Backlog</Label>
          <Label>1 - Planning</Label>
          <Label>Area-IDE</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28217</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Enable refactorings which were unintentionally removed by 'none' severity</Title>
    <Description>### Customer scenario

A customer creates a .editorconfig file with `none` severity for rules they do not wish to enforce. After updating to Visual Studio 2017 version 15.8 Preview 3, some manual refactorings related to these rules stop working as well. The impacted refactorings are:

* Use implicit type
* Use explicit type
* Use expression body
* Use block body

### Bugs this fixes

N/A

### Workarounds, if any

Update the .editorconfig to specify `silent` instead of `none`.

### Risk

The risk is relatively low.

### Performance impact

None relative to 15.8 Preview 2 and earlier. The refactoring is now evaluated in the same manner and locations it was prior to the change in meaning of `none` severity in .editorconfig.

### Is this a regression from a previous update?

Yes, introduced by #27220.

### Root cause analysis

Currently we test the diagnostic analyzers separately from the refactorings, even when the two are operating on the same underlying feature in code. Each set of tests assumes behavior about the other in order to test the remaining cases. #27720 caused the analyzer to no longer operate under one of these scenarios where the refactoring tests continued to assume the diagnostic would provide a code fix.

The ideal fix is implementing a new test strategy that enables multiple analyzers and/or code fixes known to operate on the same body of code, and make assertions about the combined impact from the user's perspective. These assertions would more accurately reflect the behavior of the application in production, and detect two specific situations that are currently undetected by tests:

1. Tests would fail if the analyzer stopped providing a code fix and the refactoring was not updated to offer it (and vice versa)
2. Tests would fail if the analyzer started offering a code fix and the refactoring was not updated to exclude it (and vice versa)

I have filed #28216 to improve this situation in the future.

### How was the bug found?

Dogfooding.

### Test documentation updated?

No.
</Description>
    <CreatedDate>29/06/2018</CreatedDate>
    <ClosedDate>02/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28217</PullRequestID>
        <IssueID>27220</IssueID>
        <Title>Map 'none' in .editorconfig to ReportDiagnostic.Suppress</Title>
        <Description>Fixes #26972 

:memo: This is an intentionally constrained change.

* Each commit is a unit of work (single topic, complete, all tests passing). I **strongly encourage** reviewing each commit separately after a quick look to understand the overall direction.
* All *known* breaking (or possibly breaking) changes, except for those described in the design for #26972, are called out in comments.
* The inconsistent handling of `DiagnosticSeverity.Hidden` is preserved for all current diagnostics. Given the new ability to differentiate between `ReportDiagnostic.Hidden` and `ReportDiagnostic.Suppress`, we will likely want to revisit this behavior and make all diagnostics consistent.

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.

&lt;/details&gt;
</Description>
        <CreatedDate>29/05/2018</CreatedDate>
        <ClosedDate>11/06/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28217</PullRequestID>
        <IssueID>27720</IssueID>
        <Title>build -pack does not work</Title>
        <Description>In master branch, in a clean repository, repro as follows:

``

![image](https://user-images.githubusercontent.com/3804346/41251846-0d794940-6d70-11e8-8674-fa170918645b.png)

This is blocking our attempt to diagnose #27523 

</Description>
        <CreatedDate>11/06/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28217</PullRequestID>
        <IssueID>28216</IssueID>
        <Title>Create combined tests for diagnostic/refactoring pairs</Title>
        <Description>Currently analyzers and refactorings are tested separately, which leaves the test suite unable to detect certain regressions. See the root cause analysis in #28217 for details.</Description>
        <CreatedDate>29/06/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>Test</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28212</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Enable incremental updates of the dependency graph</Title>
    <Description>This set of changes enables us to incrementally update the ProjectDependencyGraph rather than throwing it away and recomputing it each time we make any change to the topology of our solution. In the CPS case (where right now we aren't doing smarter batching right now, so each individual reference triggers a recompute), this eliminates almost two seconds of CPU time. I fully contend that's an extreme example (and yes, we will still fix the batching problem), but the hope by attacking this directly is we still make improvements where the direct batching might not be so useful. In the examples given by #25823, there may still be multiple times in a large solution where we end up adding a project references (but only a few) to a bunch of projects; even if we do one batch per project that's still not a great reason to throw this out and recompute everything again.

I strongly suggest you review a commit at a time, which will make the series of changes pretty straightforward.

Prior to the change, the state of the world was any topology change would result in us creating a new dependency graph from scratch. We did this by:

1. Walking the SolutionState to produce a new `ImmutableDictionary&lt;ProjectId, ImmutableHashSet&lt;ProjectId&gt;&gt;`. This rewalking alone counted for about a second of CPU time.
2. Creating the new ProjectDependencyGraph with this directly. Note, everything else was "lazy", but...
3. We would then have to create a new CompilationTracker map. This caused us to ask for reverse transitive references, causing us to realize the "lazy" reverse project reference map every time, so the laziness was worthless. This map is the reverse of the `ImmutableDictionary&lt;ProjectId, ImmutableHashSet&lt;ProjectId&gt;&gt;`, so every topology change was computing the full reverse one in addition to the forward one...every time.
4. We'd then actually compute the reverse transitive information in some cases.

This resulted in huge allocations, even when it didn't make sense. See @davkean's bug #25823 for a few examples.

The primary win of this change is instead of steps 1 and 3, where we recreated the direct project references and direct reverse project references every time from scratch, we just incrementally update them whenever we're adding a new reference. I suspect this is the result of most or perhaps all of the wins here. We try to also update the transitive and reverse transitive maps if we can easily do so; it's less clear to me right now if that's really helping much. In my testing right now it looks like we're occasionally getting a project reference _removal_ in my build, where we do still throw away everything.

My primary concern about this change would be whether this increases stable memory. What do I mean by that? Previously, we were actively throwing away the transitive data all the time; in practice it might have not been surviving very long. Now since we're incrementally updating it, this might actually be holding onto _more_ memory. If this becomes a concern, we could remove the "step 3" and "step 4" in the incremental add methods and just throw away the transitive maps; this would bring us to the memory usage we had before, while still leaving all the wins we get from steps 1 and step 2 which is perhaps the majority of the wins. Right now prior to this change we're churning so much memory it's just hard to say. I propose we merge this, make batching improvements, and once we've done that take a look at the total memory being consumed by this data structure and see if that's still a concern. If it is, just delete "step 3" and "step 4" in the code.

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.

&lt;/details&gt;
</Description>
    <CreatedDate>29/06/2018</CreatedDate>
    <ClosedDate>06/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28212</PullRequestID>
        <IssueID>25823</IssueID>
        <Title>UI delays opening a large solution due allocation pattern we use for adding project references</Title>
        <Description>Have a large &gt; 350 project that is having UI delays, took a few traces. In this case, 70% of CPU and 100% of the UI time was spent cleaning up Gen1 allocations while adding references to Roslyn:

UI thread view only (note this is CPU not time):
![image](https://user-images.githubusercontent.com/1103906/38120647-110b76a2-3416-11e8-801b-3064be434536.png)

Allocations on this path:
![image](https://user-images.githubusercontent.com/1103906/38121075-c06ae9e6-3418-11e8-8536-16298a2d65d2.png)


Note, this might be particular bad because of this scenario:

- Open solution
- Design-time build finishes -&gt; Add direct ProjectReferences 
- NuGet restore
- Design-time build finishes -&gt; Add transitive ProjectReferences</Description>
        <CreatedDate>30/03/2018</CreatedDate>
        <ClosedDate>10/09/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Performance</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28212</PullRequestID>
        <IssueID>25823</IssueID>
        <Title>UI delays opening a large solution due allocation pattern we use for adding project references</Title>
        <Description>Have a large &gt; 350 project that is having UI delays, took a few traces. In this case, 70% of CPU and 100% of the UI time was spent cleaning up Gen1 allocations while adding references to Roslyn:

UI thread view only (note this is CPU not time):
![image](https://user-images.githubusercontent.com/1103906/38120647-110b76a2-3416-11e8-801b-3064be434536.png)

Allocations on this path:
![image](https://user-images.githubusercontent.com/1103906/38121075-c06ae9e6-3418-11e8-8536-16298a2d65d2.png)


Note, this might be particular bad because of this scenario:

- Open solution
- Design-time build finishes -&gt; Add direct ProjectReferences 
- NuGet restore
- Design-time build finishes -&gt; Add transitive ProjectReferences</Description>
        <CreatedDate>30/03/2018</CreatedDate>
        <ClosedDate>10/09/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Performance</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28206</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Produce errors on ref-assignment to byval parameters</Title>
    <Description>Fixes #28117 </Description>
    <CreatedDate>28/06/2018</CreatedDate>
    <ClosedDate>03/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28206</PullRequestID>
        <IssueID>28117</IssueID>
        <Title>Ref-assigning to a non-ref parameter should be an error</Title>
        <Description>``</Description>
        <CreatedDate>26/06/2018</CreatedDate>
        <ClosedDate>03/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28181</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Lower expressions of in arguments to correct temp locals</Title>
    <Description>Fixes #27831 </Description>
    <CreatedDate>28/06/2018</CreatedDate>
    <ClosedDate>02/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28181</PullRequestID>
        <IssueID>27831</IssueID>
        <Title>csc.exe FailFast exception on combination of implicit array cast, `await` and `in` keyword</Title>
        <Description>**Version Used**: 
Microsoft.Net.Compilers 2.8.2

**Steps to Reproduce**:

1. Checkout https://github.com/mycroes/NetStandardConversionCrash (or add the following code:)
``

Further notes:
When the `in` keyword is removed from `items` in C, the crash is gone. When the `length` passed is a constant in `A`, the crash is gone.</Description>
        <CreatedDate>14/06/2018</CreatedDate>
        <ClosedDate>02/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Readonly References</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28118</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Ref-assigning to array elements should produce an error</Title>
    <Description>Fixes #28087 </Description>
    <CreatedDate>26/06/2018</CreatedDate>
    <ClosedDate>02/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28118</PullRequestID>
        <IssueID>28087</IssueID>
        <Title>Exception: Unexpected value 'ArrayAccess' In BoundExpressionExtensions.GetRefKind()</Title>
        <Description>Examples of the crash:

``</Description>
        <CreatedDate>23/06/2018</CreatedDate>
        <ClosedDate>02/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>28090</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jhinder</FixedByID>
    <Title>Fix NRE when handling multiline documentation comments in C#</Title>
    <Description>Fixes #25746.  
Fixes #27223.

This is a small fix: the extension method that caused the exception/crash now returns `false` when the parameter is `null`.

Side note: I don't know whether the current behaviour (insert exterior trivia text on the next line in both cases) is the expected behaviour, but it's in line with VB's behaviour.

### Customer scenario

After pressing &lt;kbd&gt;Enter&lt;/kbd&gt; on a line starting with `///`, a gold bar (or error dialog) is shown alerting the user to a problem running an internal command.

### Bugs this fixes

Fixes #25746.  
Fixes #27223.

### Workarounds, if any

Enter the text using a different order.

### Risk

Low.

### Performance impact

None significant.

### Is this a regression from a previous update?

No.

### Root cause analysis

Two edge cases related to handling &lt;kbd&gt;Enter&lt;/kbd&gt; within documentation comments (or comments that *look* like documentation comments were identified. Tests were added to prevent regressing these cases in the future.

### How was the bug found?

Multiple but rare reports from internal and external customers.

### Test documentation updated?

No.
</Description>
    <CreatedDate>23/06/2018</CreatedDate>
    <ClosedDate>12/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28090</PullRequestID>
        <IssueID>25746</IssueID>
        <Title>NullReferenceException in DocumentationCommentExtensions.IsMultilineDocComment</Title>
        <Description>Originally posted by @Jehoel in DotNetAnalyzers/StyleCopAnalyzers#2648

&gt; While a editing C# Console project and typing "//////" on an empty line line inside my `void Main` I got a message informing me an Editor Extension had crashed.
&gt; 
&gt; Here's the message logged in `ActivityLog.xml`:
&gt; 
&gt; ``
&gt; 
&gt; Repro steps:
&gt; 
&gt; 1. Open an existing C# console project in VS 2017 (15.6.4)
&gt; 2. On an empty line inside a method type "/////" (several forward-slashes)
&gt; 3. VS will display the extension crash warning dialog. The above stack-trace will be written to `ActivityLog.xml`.
</Description>
        <CreatedDate>27/03/2018</CreatedDate>
        <ClosedDate>12/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28090</PullRequestID>
        <IssueID>27223</IssueID>
        <Title>NRE from DocumentationCommentExtensions.IsMultilineDocComment</Title>
        <Description>[VS Feedback issue](https://developercommunity.visualstudio.com/content/problem/229613/nullreferenceexception-in-ismultilinedoccomment.html)

Repro:

Create a console app, place cursor in line 10 between `&lt;summary&gt;` and `&lt;/summary&gt;`, hit enter.

``</Description>
        <CreatedDate>29/05/2018</CreatedDate>
        <ClosedDate>12/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28090</PullRequestID>
        <IssueID>25746</IssueID>
        <Title>NullReferenceException in DocumentationCommentExtensions.IsMultilineDocComment</Title>
        <Description>Originally posted by @Jehoel in DotNetAnalyzers/StyleCopAnalyzers#2648

&gt; While a editing C# Console project and typing "//////" on an empty line line inside my `void Main` I got a message informing me an Editor Extension had crashed.
&gt; 
&gt; Here's the message logged in `ActivityLog.xml`:
&gt; 
&gt; ``
&gt; 
&gt; Repro steps:
&gt; 
&gt; 1. Open an existing C# console project in VS 2017 (15.6.4)
&gt; 2. On an empty line inside a method type "/////" (several forward-slashes)
&gt; 3. VS will display the extension crash warning dialog. The above stack-trace will be written to `ActivityLog.xml`.
</Description>
        <CreatedDate>27/03/2018</CreatedDate>
        <ClosedDate>12/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>28090</PullRequestID>
        <IssueID>27223</IssueID>
        <Title>NRE from DocumentationCommentExtensions.IsMultilineDocComment</Title>
        <Description>[VS Feedback issue](https://developercommunity.visualstudio.com/content/problem/229613/nullreferenceexception-in-ismultilinedoccomment.html)

Repro:

Create a console app, place cursor in line 10 between `&lt;summary&gt;` and `&lt;/summary&gt;`, hit enter.

``</Description>
        <CreatedDate>29/05/2018</CreatedDate>
        <ClosedDate>12/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>27993</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Fix generating types into an existing file</Title>
    <Description>An errant refactoring changed a property being consumed by XAML during binding from a property to a method, which isn't going to work. Change this back.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

User tries to invoke "generate type" into an existing file with our dialog, but the list of files to generate into is unpopulated.

### Bugs this fixes

Bug not filed; discovered this while testing #27973.

### Workarounds, if any

Nope, feature is totally broken.

### Risk

Very low -- unbreaking code that is 100% broken.

### Performance impact

None.

### Is this a regression from a previous update?

Yes; this was regressed about a year or so ago, so this may have not been working during all of Dev15.

### Root cause analysis

A large refactoring changed a property to a method in a XAML view model. This isn't supported in binding so it broke.

### How was the bug found?

While testing #27973.

&lt;/details&gt;
</Description>
    <CreatedDate>19/06/2018</CreatedDate>
    <ClosedDate>12/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27993</PullRequestID>
        <IssueID>27973</IssueID>
        <Title>Stop calling IVsHerarchy.ParseCanonicalName if we don't need it</Title>
        <Description>We were calling IVsHierarchy.ParseCanonicalName to get the item ID of a file, to then turn around and use that to get the folder names. In some cases, we already had the folder names so this was just silly.

Note: I update a compatibility overload for TypeScript here. They had since moved off of the compatibility overload, so updating it and repurposing it is safe to do.

**Remaining Work**

- [x] Test TypeScript
- [x] Test F#
- [x] Test the code actions that consume this data in CPS projects
- [x] Test the code actions that consume this data in legacy projects
- [x] Verify we are getting the expected performance

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.

&lt;/details&gt;</Description>
        <CreatedDate>19/06/2018</CreatedDate>
        <ClosedDate>22/06/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27993</PullRequestID>
        <IssueID>27973</IssueID>
        <Title>Stop calling IVsHerarchy.ParseCanonicalName if we don't need it</Title>
        <Description>We were calling IVsHierarchy.ParseCanonicalName to get the item ID of a file, to then turn around and use that to get the folder names. In some cases, we already had the folder names so this was just silly.

Note: I update a compatibility overload for TypeScript here. They had since moved off of the compatibility overload, so updating it and repurposing it is safe to do.

**Remaining Work**

- [x] Test TypeScript
- [x] Test F#
- [x] Test the code actions that consume this data in CPS projects
- [x] Test the code actions that consume this data in legacy projects
- [x] Verify we are getting the expected performance

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.

&lt;/details&gt;</Description>
        <CreatedDate>19/06/2018</CreatedDate>
        <ClosedDate>22/06/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>27924</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Check receiver escape scope for invocation expressions</Title>
    <Description>Fixes #27772 </Description>
    <CreatedDate>15/06/2018</CreatedDate>
    <ClosedDate>02/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27924</PullRequestID>
        <IssueID>27772</IssueID>
        <Title>GetInvocationEscapeScope() issue allows accessing invalid stack locations</Title>
        <Description>From @TessenR in #27218

Compile and run the following code in debug to get access violation exception:
``

If  the receiver is ref-like and the code did not return earlier (that's why an additional scope is required in the example above) the method completely ignores arguments' aggregated escape scope and just returns the receiver's value escape scope which is 'external scope' in this case.</Description>
        <CreatedDate>12/06/2018</CreatedDate>
        <ClosedDate>02/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>27897</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>wachulski</FixedByID>
    <Title>Fix implicit type use analyzer.</Title>
    <Description>Fixes edge cases where variable identifier name is reused in the initializer as first part of member access qualification.
Example: SomeEnum SomeEnum = SomeEnum.EnumVal1

Fixes dotnet/roslyn#26894

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/26894

### Workarounds, if any

no

### Risk

?

### Performance impact

Low

### Is this a regression from a previous update?

?

### Root cause analysis

?

### How was the bug found?

?

### Test documentation updated?

n/a</Description>
    <CreatedDate>15/06/2018</CreatedDate>
    <ClosedDate>03/08/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27897</PullRequestID>
        <IssueID>26894</IssueID>
        <Title>IDE0007 when enum name is the same as variable name</Title>
        <Description>**Version Used**: 

Not sure what version is meant but I'm using Visual Studio 15.7.1, I hope that helps.

**Steps to Reproduce**:

Config:

``</Description>
        <CreatedDate>16/05/2018</CreatedDate>
        <ClosedDate>03/08/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>27459</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>davidwengier</FixedByID>
    <Title>Don't offer to qualify property from inside an attribute on a class</Title>
    <Description>### Customer scenario

When using `nameof` in an attribute on a class the fixer for qualifying with `this.` appears, which results in broken code.

### Bugs this fixes

FIxes #26893 and #23803

### Workarounds, if any

None

### Risk

Low

### Performance impact

Low, just checking existing property

### Root cause analysis

Added tests to prevent regression in VB and C#

### How was the bug found?

Customer reported

### Test documentation updated?

N/A

&lt;/details&gt;
</Description>
    <CreatedDate>04/06/2018</CreatedDate>
    <ClosedDate>20/07/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27459</PullRequestID>
        <IssueID>26893</IssueID>
        <Title>IDE0009 should not nag in static context</Title>
        <Description>Repro code:

``
</Description>
        <CreatedDate>16/05/2018</CreatedDate>
        <ClosedDate>19/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Duplicate</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27459</PullRequestID>
        <IssueID>23803</IssueID>
        <Title>IDE0009 incorrectly suggested in nameof expression used to class attribute constructor argument in VS 15.5</Title>
        <Description>**Version Used**: VS2017 15.5.2

**Steps to Reproduce**:

1. Open `Opetions`, select `Text Editor -&gt; C# -&gt; Code Style -&gt; General` tab, set `Qualify property access with 'this'` option to `Prefer 'this.'`
2. Create Visual C# Console App Project
3. Copy and paste following code:
``

**Expected Behavior**:
IDE0009 is not suggested.

**Actual Behavior**:
IDE0009 is suggested.
If I add "this" qualification, I get an compile error: CS0027 `Keyword 'this' is not available in the current context`.</Description>
        <CreatedDate>15/12/2017</CreatedDate>
        <ClosedDate>07/08/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>27492</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Remove prototype comments in tests</Title>
    <Description>We are now tracking this work with #27491. Our justification for postponing this work past the feature merge is that majority of the pending test work items have coverage in at least one language.</Description>
    <CreatedDate>05/06/2018</CreatedDate>
    <ClosedDate>06/06/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27492</PullRequestID>
        <IssueID>27491</IssueID>
        <Title>Pending test work items for Flow analysis </Title>
        <Description>**C# tests:**

 - [ ] Branch operation: Port applicable `BranchFlow_38 - BranchFlow_48` tests from VB.
 - [ ] Fixed statement tests improvements. For further details, see comments in `IOperationTests_IFixedStatement.cs` with this issue ID.
 - [ ] Add flow tests for Variable declaration operation in Using/For/Fixed declarations.

**VB tests:**

 - [ ] Branch operation: Port applicable `BranchFlow_02 - BranchFlow_05` and `BranchFlow_07 - BranchFlow_11` tests from C#.
 - [ ] Block operation: Port applicable `BlockFlow` tests from `IOperationTests_IBlock.cs`.
 - [ ] Conditional access operation: Port applicable `ConditionalAccessFlow` tests from C#.
 - [ ] Conditional operation: Port applicable `IfFlow` tests from C#.
 - [ ] Lock operation: Port applicable `LockFlow` tests from C#.
 - [ ] Return operation: Port applicable `ReturnFlow_03 - ReturnFlow_16` tests from C#.
 - [ ] Throw operation: Port applicable `ThrowFlow` tests from `IOperationTests_IThrowOperation.cs`.
 - [ ] Try/Catch/Finally operation: Port applicable flow tests from `IOperationTests_TryCatch.cs`.
 - [ ] Using operation: Port applicable `UsingFlow_01 - UsingFlow_13` tests from C#.
 - [ ] Add flow tests for Variable declaration operation in Using/For/ declarations.

**Both Tests**
 - [ ] Split C# IOperation tests
 - [ ] Consider restructuring IOperation tests to not be all in one class and take advantage of being in a separate test assembly.</Description>
        <CreatedDate>05/06/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature - Flow Analysis</Label>
          <Label>Feature - IOperation</Label>
          <Label>Test</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>27484</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Revert #25047 - [SQLite] Bump and use byte[] variants added to blob_open for performance</Title>
    <Description>Reverts #25047 as it is causing NGen issues in official builds.
We need to consolidate different versions of that binary that ship into VS.

cc @tannergooding can you please review?</Description>
    <CreatedDate>05/06/2018</CreatedDate>
    <ClosedDate>06/06/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27484</PullRequestID>
        <IssueID>25047</IssueID>
        <Title>[SQLite] Bump and use byte[] variants added to blob_open for performance</Title>
        <Description>Fixes https://github.com/dotnet/roslyn/issues/23424

NOTE: Currently using CI as a build bot, roslyn builds take too much time on my machine.

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.

&lt;/details&gt;
</Description>
        <CreatedDate>25/02/2018</CreatedDate>
        <ClosedDate>29/05/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>27424</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Fixed error messages around fixed fields</Title>
    <Description>Fixes #26688 
Fixes #26743 </Description>
    <CreatedDate>04/06/2018</CreatedDate>
    <ClosedDate>15/06/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27424</PullRequestID>
        <IssueID>26688</IssueID>
        <Title>C# 7.3 fixed field still requires pinning with implicit `this` reference</Title>
        <Description>**Version Used**:  C# 7.3 / VS 15.7

**Steps to Reproduce**:

In reading through the proposal for relaxing the pinning requirement for fixed fields, I believe the following code should now be valid


``

Is there a reason these would be interpreted differently by the compiler?
</Description>
        <CreatedDate>07/05/2018</CreatedDate>
        <ClosedDate>15/06/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27424</PullRequestID>
        <IssueID>26743</IssueID>
        <Title>C# 7.3 allows unmanaged pointer to fixed field without pinning</Title>
        <Description>**Version Used**: C# 7.3 / VS 15.7.1

**Steps to Reproduce**:

Using an explicit `this` pointer to work around #26688, I am able to take the address of a fixed field, giving me an unmanaged pointer without pinning.  If I'm understanding the relaxed restrictions correctly, this should not be possible, as the pointer should only be useable as an indexer.

``
</Description>
        <CreatedDate>09/05/2018</CreatedDate>
        <ClosedDate>15/06/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>27411</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>KrisVandermotten</FixedByID>
    <Title>bug fix: don't optimize interpolations when in an expression lambda</Title>
    <Description>Interpolated strings should not be optimized to string concatenations when in an expression lambda.

This PR fixes this bug, which was introduced by #26612 (an optimization implemented in 15.8).

</Description>
    <CreatedDate>04/06/2018</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27411</PullRequestID>
        <IssueID>26612</IssueID>
        <Title>lower interpolated strings to string concatenation where possible</Title>
        <Description>This PR handles #22594 and is a follow up for #22595.

**Customer scenario**

The user uses string interpolation where concatenation could be used.

**Risk**

This PR modifies code generation of interpolated strings, but only in the case where all fill-ins are strings without alignment or format specifiers.

**Performance impact**

Code generation for interpolated strings will be somewhat slower. The generated code will be significantly faster in the case where all fill-ins in the interpolated string are strings, without alignment or format specifiers. In all other cases, the new implementation has one additional loop over the parts with no memory allocations in it, fairly simple logic and early exit as soon it is determined that the code gen optimization cannot be done.

Given the following declarations:

    const string constantabc = "abc";
    const string constantnull = null;

With `/o`, the following methods compile to the following IL:

    string M1() =&gt; $"";

	IL_0000: ldstr ""
	IL_0005: ret

    string M2() =&gt; $"abc";

	IL_0000: ldstr "abc"
	IL_0005: ret

    string M3() =&gt; $"{constantabc}";

	IL_0000: ldstr "abc"
	IL_0005: ret

    string M4() =&gt; $"{constantnull}";

	IL_0000: ldstr ""
	IL_0005: ret

    string M5() =&gt; $"{constantabc}{constantnull}";

	IL_0000: ldstr "abc"
	IL_0005: ret

    string M6(string a) =&gt; $"{a}";

	IL_0000: ldarg.1
	IL_0001: dup
	IL_0002: brtrue.s IL_000a
	IL_0004: pop
	IL_0005: ldstr ""
	IL_000a: ret

    string M7(string a) =&gt; $"a: {a}";

	IL_0000: ldstr "a: "
	IL_0005: ldarg.1
	IL_0006: call string [mscorlib]System.String::Concat(string, string)
	IL_000b: ret

    string M8(string a, string b) =&gt; $"{a + b}";

	IL_0000: ldarg.1
	IL_0001: ldarg.2
	IL_0002: call string [mscorlib]System.String::Concat(string, string)
	IL_0007: ret

    string M9(string a, string b) =&gt; $"{a}{b}";

	IL_0000: ldarg.1
	IL_0001: ldarg.2
	IL_0002: call string [mscorlib]System.String::Concat(string, string)
	IL_0007: ret

    string M10(string a, string b) =&gt; $"a: {a}, b: {b}";

	IL_0000: ldstr "a: "
	IL_0005: ldarg.1
	IL_0006: ldstr ", b: "
	IL_000b: ldarg.2
	IL_000c: call string [mscorlib]System.String::Concat(string, string, string, string)
	IL_0011: ret

    string M11(object a) =&gt; $"{a}";

	IL_0000: ldstr "{0}"
	IL_0005: ldarg.1
	IL_0006: call string [mscorlib]System.String::Format(string, object)
	IL_000b: ret

    string M12(object a) =&gt; $"a: {a}";

	IL_0000: ldstr "a: {0}"
	IL_0005: ldarg.1
	IL_0006: call string [mscorlib]System.String::Format(string, object)
	IL_000b: ret

    string M13(string a) =&gt; $"{{{a}}}";

	IL_0000: ldstr "{"
	IL_0005: ldarg.1
	IL_0006: ldstr "}"
	IL_000b: call string [mscorlib]System.String::Concat(string, string, string)
	IL_0010: ret

    string M14(string a) =&gt; "a:" + $" {a}";

	IL_0000: ldstr "a: "
	IL_0005: ldarg.1
	IL_0006: call string [mscorlib]System.String::Concat(string, string)
	IL_000b: ret</Description>
        <CreatedDate>03/05/2018</CreatedDate>
        <ClosedDate>01/06/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-Compilers</Label>
          <Label>Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>27402</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>davidwengier</FixedByID>
    <Title>Offer generate variable fixer when inside a lock statement in C#</Title>
    <Description>&lt;details&gt;&lt;summary&gt;Show generate variable fix inside lock&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

When typing a new identifier inside a lock statement none of the Generate Variable fixers are offered as suggestions.

### Bugs this fixes

Fixes #26406 

### Workarounds, if any

None

### Risk

Low, the fix is one more item in a switch statement, and Visual Basic already had that option. I've added tests for C# and VB to prevent regression.

### Performance impact

Low, no extra allocations etc.

### Is this a regression from a previous update?

I don't know

### Root cause analysis

There is a large switch statement that has a whitelist of places where the generate variable refactoring is offered, and it was missing from there. There is a reasonable chance there are other things listed.

### How was the bug found?

I was just browsing Help Wanted issues, guessing the original requester found it in the course of using VS.

### Test documentation updated?

N/A?

&lt;/details&gt;
</Description>
    <CreatedDate>04/06/2018</CreatedDate>
    <ClosedDate>05/06/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27402</PullRequestID>
        <IssueID>26406</IssueID>
        <Title>Don't get offered to generate a field in a lock statement</Title>
        <Description>``

Expected: Get offered to generate a field of type "object"
Actual:

![image](https://user-images.githubusercontent.com/1103906/39289980-62419c66-4971-11e8-9cdb-bbf47a351d1a.png)

</Description>
        <CreatedDate>26/04/2018</CreatedDate>
        <ClosedDate>05/06/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>27394</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>davidwengier</FixedByID>
    <Title>Fix unnecessary cast</Title>
    <Description>Don't offer unnecessary cast fixer on invalid code

### Customer scenario

When trying to cast to a TypedReference (or presumably any other ref-like struct) from object, the RemoveUnnecessaryCast diagnostic pops up which is confusing, since its incorrect, and can hide the underlying compilation error. Allowing the error to bubble up in this case is a better user experience.

### Bugs this fixes

Fixes: #27239 

### Workarounds, if any

None really.

### Risk

There is a small chance that there could be scenarios where the diagnostic is desired even though no conversion is valid, but I couldn't think of one. An alternate approach if necessary could be to make the diagnostic use similar logic to the compiler in determining specifically that the unboxing conversion will be going to something stack only, and not show in those circumstances.

### Performance impact

Low, because the analyzer had already done the work

### Is this a regression from a previous update?

Not as far as I know

### Root cause analysis

I added a test for this case. Presumably missed because most (all?) other invalid conversions meet one of the other conditions, ie explicit, implicit, unboxing etc.

### How was the bug found?

Not much detail on the issue. I just picked something off the "Help Wanted" label 🙂

### Test documentation updated?

N/A
</Description>
    <CreatedDate>04/06/2018</CreatedDate>
    <ClosedDate>07/06/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>27394</PullRequestID>
        <IssueID>27239</IssueID>
        <Title>Incorrect "Cast is redundant"</Title>
        <Description>``

![image](https://user-images.githubusercontent.com/3804346/40693540-b91a4ea6-636c-11e8-901b-81838e9b4f39.png)
</Description>
        <CreatedDate>30/05/2018</CreatedDate>
        <ClosedDate>07/06/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26592</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix Use Auto Property handling of VB's As New syntax</Title>
    <Description>Fixes #26256

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.

&lt;/details&gt;
</Description>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26592</PullRequestID>
        <IssueID>26256</IssueID>
        <Title>"Use auto property" code fix loses initialized value</Title>
        <Description>**Version Used**:  Version 15.7.0 Preview 4.0 [27612.3001.d15.7stg]

**Steps to Reproduce**:

``</Description>
        <CreatedDate>19/04/2018</CreatedDate>
        <ClosedDate>04/05/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26590</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Remove IBuiltInAnalyzer.OpenFileOnly</Title>
    <Description>This internal method overlaps the behavior of `DiagnosticSeverity.Hidden`. The the few analyzers relying on it for correctness already reported **Hidden** diagnostics by default. These analyzers are updated to include `NotConfigurable`, ensuring that **Hidden** severity will be used for the diagnostics in all configurations.

Fixes #15760
Fixes #16026
Closes #16700

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.

&lt;/details&gt;
</Description>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>10/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26590</PullRequestID>
        <IssueID>15760</IssueID>
        <Title>The Error List shows different results based on whether you've ever opened a source file</Title>
        <Description>1. Clone this repo to this commit: https://github.com/dotnet/roslyn-project-system/commit/e8f444a1ebe3d78b6b494d5dc355e95b7da19086
2. From a VS command prompt, run build.cmd from the root
3. Open src\ProjectSystem.sln (build 26005.0 D15PreRel)
4. Change your VB code style settings to:
![image](https://cloud.githubusercontent.com/assets/1103906/21003545/17200750-bd80-11e6-9058-5a78ad4bd2bd.png)
6. Make sure Background Analysis is turned on for VB
7. Wait till Error List no longer has "..." after name
-- Error List should look something like --
![image](https://cloud.githubusercontent.com/assets/1103906/21003576/4dff3b6a-bd80-11e6-819f-ea045f4aa7f6.png)



7. Open src\Microsoft.VisualStudio.AppDesigner\ApplicationDesigner\ApplicationDesignerView.vb
8. Close that file

-- Error List should look something like (Notice that there's 22 more messages that have appeared) -- 

![image](https://cloud.githubusercontent.com/assets/1103906/21003625/887fae82-bd80-11e6-8cf9-f8661b17b043.png)


Very confused how or why messages show up the Error List? What exactly do I need to do to show *all* possible messages?</Description>
        <CreatedDate>08/12/2016</CreatedDate>
        <ClosedDate>04/02/2020</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26590</PullRequestID>
        <IssueID>16026</IssueID>
        <Title>"Open Files" analysis doesn't occur on files that were opened from a previous solution session</Title>
        <Description>1. Create a project
2. Create two files containing a violation on something that only occurs in open files (for example, interfaces must start with I
3. Open both files

-- Note that you see both errors in the error list --

4. File -&gt; Close Solution
5. Open the solution you just closed

Expected: For both errors to appear in the error list
Actual: Only error from the file that current the selected tab is in the error list

Very confusing - especially when I was using the "Open Documents" filter.</Description>
        <CreatedDate>20/12/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26590</PullRequestID>
        <IssueID>16700</IssueID>
        <Title>Bumping diagnostic severity for some IDE analyzers to error/warning doesn't cause it to run for closed files.</Title>
        <Description>**Version Used**: 
D15PreRel 26120.4

**Steps to Reproduce**:

1. Enable full solution analysis for C#
2. Create a C# console app with the following source code:
``
3. Verify IDE0008 is shown in the error list.
3. In solution explorer, right click on Analyzers node under `Project -&gt; References -&gt; Analyzers` and click "Open active ruleset".
4. Search "IDE0008" in the ruleset editor, and change the severity of both the listed diagnostics to "Error".
5. Verify IDE0008 is now shown as "Error" in the error list
6. Close the source file

**Expected Behavior**:
Error IDE0008 is still shown in the error list. Any diagnostics marked as error in the project's ruleset should always be executed for closed files.

**Actual Behavior**:
IDE0008 will disappear, and only show for open files. Even closing and re-opening solution/VS doesn't seem to help.
The problem seems to be that many IDE analyzers compute OpenFileOnly value using just the Workspace level NotificationOption, see [here](http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/QualifyMemberAccess/AbstractQualifyMemberAccessDiagnosticAnalyzer.cs,25). They should instead be using the effective severity of the diagnostic ID for the current compilation to decide this value.</Description>
        <CreatedDate>23/01/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26589</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title> Strip common prefixes before applying naming suggestions</Title>
    <Description>Fixes #26566

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.

&lt;/details&gt;
</Description>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>07/06/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26589</PullRequestID>
        <IssueID>26566</IssueID>
        <Title>Naming violation code fix should strip known common prefixes</Title>
        <Description>From https://github.com/dotnet/roslyn/issues/26556#issuecomment-385988580:

&gt; For StyleCop Analyzers, we strip the prefixes `m_`, `s_`, `t_`, and `_` until there are no more *or* the next step would leave an empty string. Then we apply the expected naming convention to the result. In combination with an appropriate set of naming convention rules in .editorconfig, this approach would cover everything from the table except cases where multiple letters need to change from uppercase to lowercase.

:memo: This task is an easy improvement to the current naming fix heuristics which partially covers the cases requested in #26556.</Description>
        <CreatedDate>02/05/2018</CreatedDate>
        <ClosedDate>07/06/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26570</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Revert "The LDM decided to try : instead of =&gt; in the switch expression syntax."</Title>
    <Description>Reverts dotnet/roslyn#26524</Description>
    <CreatedDate>02/05/2018</CreatedDate>
    <ClosedDate>02/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26570</PullRequestID>
        <IssueID>26524</IssueID>
        <Title>The LDM decided to try : instead of =&gt; in the switch expression syntax.</Title>
        <Description>This changes the prototype to accept : instead of =&gt;
Fixes #26514

@cston @agocke @jcouv Could you please review this change for Build?
@dotnet/roslyn-compiler 
</Description>
        <CreatedDate>01/05/2018</CreatedDate>
        <ClosedDate>02/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26524</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>The LDM decided to try : instead of =&gt; in the switch expression syntax.</Title>
    <Description>This changes the prototype to accept : instead of =&gt;
Fixes #26514

@cston @agocke @jcouv Could you please review this change for Build?
@dotnet/roslyn-compiler 
</Description>
    <CreatedDate>01/05/2018</CreatedDate>
    <ClosedDate>02/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26524</PullRequestID>
        <IssueID>26514</IssueID>
        <Title>Change `=&gt;` to `:` in switch expression prototype</Title>
        <Description>The LDM decided to try `:` instead of `=&gt;` in the switch expression syntax. Change the prototype to accept `:` instead of `=&gt;`.</Description>
        <CreatedDate>30/04/2018</CreatedDate>
        <ClosedDate>02/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26522</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Fix the analyzer driver to make IOperation callbacks for code in cons…</Title>
    <Description>…tructor/destructor expression body

Fixes #26520 

Reported via https://github.com/dotnet/roslyn-analyzers/issues/1606,  https://github.com/dotnet/roslyn-analyzers/issues/1607 and https://github.com/dotnet/roslyn-analyzers/issues/1563.

&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

Customer uses analyzer package that has an IOperation analyzer and gets false positives and/or false negatives for C# code which has constructor/destructor declarations with an expression body.

### Bugs this fixes

#26520 

### Workarounds, if any

Disable IOperation analyzers or don't use expression body for constructors/destructors.

### Risk

Low, seems like an oversight of the fields of `ConstructorDeclarationSyntax` and `DestructorDeclarationSyntax` nodes.

### Performance impact

Low

### Is this a regression from a previous update?

No, seems this has never worked.

### Root cause analysis

We didn't have test covering this area, now we have a regression test. Verified that added unit test fails prior to this fix.

### How was the bug found?

Yes, reported by customers using FxCop analyzer packages (see https://github.com/dotnet/roslyn-analyzers/issues/1606, https://github.com/dotnet/roslyn-analyzers/issues/1607 and https://github.com/dotnet/roslyn-analyzers/issues/1563)

### Test documentation updated?

N/A

&lt;/details&gt;
</Description>
    <CreatedDate>30/04/2018</CreatedDate>
    <ClosedDate>03/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26522</PullRequestID>
        <IssueID>26520</IssueID>
        <Title>No IOperation callbacks into analyzer for operations in constructor/destructor expression body</Title>
        <Description>**Version Used**: 2.6.0 or later

**Steps to Reproduce**:

See https://github.com/dotnet/roslyn-analyzers/issues/1606 and https://github.com/dotnet/roslyn-analyzers/issues/1607.

**Expected Behavior**:
Below code should cause analyzer action callbacks for `IFieldReferenceOperation` for `flag` within constructor/destructor expression body:

``

**Actual Behavior**:
No analyzer action callbacks.
</Description>
        <CreatedDate>30/04/2018</CreatedDate>
        <ClosedDate>03/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26522</PullRequestID>
        <IssueID>26520</IssueID>
        <Title>No IOperation callbacks into analyzer for operations in constructor/destructor expression body</Title>
        <Description>**Version Used**: 2.6.0 or later

**Steps to Reproduce**:

See https://github.com/dotnet/roslyn-analyzers/issues/1606 and https://github.com/dotnet/roslyn-analyzers/issues/1607.

**Expected Behavior**:
Below code should cause analyzer action callbacks for `IFieldReferenceOperation` for `flag` within constructor/destructor expression body:

``

**Actual Behavior**:
No analyzer action callbacks.
</Description>
        <CreatedDate>30/04/2018</CreatedDate>
        <ClosedDate>03/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26521</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Add a prototype implementation for GetTypeInfo(PatternSyntax)</Title>
    <Description>This is a first draft of #26494, and requires more testing.
</Description>
    <CreatedDate>30/04/2018</CreatedDate>
    <ClosedDate>01/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26521</PullRequestID>
        <IssueID>26494</IssueID>
        <Title>GetTypeInfo for a PatternSyntax</Title>
        <Description>GetTypeInfo for a PatternSyntax should give the incoming type, and possibly also the type required for matching (ConvertedType). For example in the code
``
The result of `GetTypeInfo` for pattern `3` should have `Type` of `object`, and a `ConvertedType` of `int` (the incoming object is converted to int for the match).
</Description>
        <CreatedDate>29/04/2018</CreatedDate>
        <ClosedDate>30/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26517</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Allow nullable array in parser</Title>
    <Description>Fixes #23272 and #24482.</Description>
    <CreatedDate>30/04/2018</CreatedDate>
    <ClosedDate>01/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26517</PullRequestID>
        <IssueID>23272</IssueID>
        <Title>Crash while typing using nullable reference types preview</Title>
        <Description>**Version Used**: Preview 11152017

``

working in the following order:

1. Add `?` to array
2. Type the `EmptyArray` field definition
3. Add the `private` accessibility modifiers to the existing fields</Description>
        <Code>```
Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxFactsService.GetMemberBodySpanForSpeculativeBinding(SyntaxNode node)
   at Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetSemanticModelForNodeAsync(ISemanticModelService semanticModelService, ISyntaxFactsService syntaxFactService, Document document, SyntaxNode node, TextSpan span, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.&lt;GetSemanticModelForSpanAsync&gt;d__2.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions+&lt;GetSemanticModelForSpanAsync&gt;d__2.MoveNext()
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxFactsService.GetMemberBodySpanForSpeculativeBinding(Microsoft.CodeAnalysis.SyntaxNode)
   at Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetSemanticModelForNodeAsync(Microsoft.CodeAnalysis.SemanticModelWorkspaceService.ISemanticModelService, Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsService, Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Text.TextSpan, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions+&lt;GetSemanticModelForSpanAsync&gt;d__2.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions+&lt;GetSemanticModelForSpanAsync&gt;d__2, Microsoft.CodeAnalysis.Workspaces, Version=2.7.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;GetSemanticModelForSpanAsync&gt;d__2 ByRef)
   at Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetSemanticModelForSpanAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__5.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__5, Microsoft.CodeAnalysis.Workspaces, Version=2.7.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;AddSemanticClassificationsAsync&gt;d__5 ByRef)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Func`2&lt;Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt;, System.Func`2&lt;Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__2.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Classification.AbstractClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__2, Microsoft.CodeAnalysis.Workspaces, Version=2.7.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;AddSemanticClassificationsAsync&gt;d__2 ByRef)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.WorkspaceClassificationDelegationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Classification.IClassificationService, Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ClassifySpansAsync&gt;d__2`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ClassifySpansAsync&gt;d__2`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=2.7.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ClassifySpansAsync&gt;d__2`1&lt;System.__Canon&gt; ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ClassifySpansAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IClassificationDelegationService`1&lt;System.__Canon&gt;, System.__Canon, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ProduceTagsAsync&gt;d__0`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ProduceTagsAsync&gt;d__0`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=2.7.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ProduceTagsAsync&gt;d__0`1&lt;System.__Canon&gt; ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ProduceTagsAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IClassificationDelegationService`1&lt;System.__Canon&gt;, System.__Canon, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationViewTaggerProvider.ProduceTagsAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IClassificationDelegationService`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationViewTaggerProvider.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&lt;RecomputeTagsAsync&gt;d__73[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&lt;RecomputeTagsAsync&gt;d__73[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=2.7.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;RecomputeTagsAsync&gt;d__73&lt;System.__Canon&gt; ByRef)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].RecomputeTagsAsync(System.Object, System.Nullable`1&lt;Microsoft.VisualStudio.Text.SnapshotPoint&gt;, System.Nullable`1&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan&gt;, System.Collections.Immutable.ImmutableDictionary`2&lt;Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree`1&lt;System.__Canon&gt;&gt;, Boolean, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&lt;&gt;c__DisplayClass63_0[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;RecomputeTagsForeground&gt;b__0(System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Shared.Threading.AsynchronousSerialWorkQueue+&lt;&gt;c__DisplayClass11_0.&lt;EnqueueBackgroundTask&gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```

The crash occurred twice while typing to replace the following lines:

https://github.com/Microsoft/perfview/blob/118f6bc000c9aaaa5e80f98e03fdfedf754b1790/src/FastSerialization/GrowableArray.cs#L359-L360

with this:

```csharp
private static readonly T[] EmptyArray = new T[0];
private T[]? array;
private int arrayLength;
`</Code>
        <CreatedDate>18/11/2017</CreatedDate>
        <ClosedDate>01/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26517</PullRequestID>
        <IssueID>24482</IssueID>
        <Title>Syntax error reported for nullable array cast</Title>
        <Description>``</Description>
        <CreatedDate>26/01/2018</CreatedDate>
        <ClosedDate>01/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26490</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Add a test to show that and old performance-related issue no longer exists.</Title>
    <Description>Fixes #5062

@dotnet/roslyn-compiler May I please have a review of the addition of one test?
</Description>
    <CreatedDate>29/04/2018</CreatedDate>
    <ClosedDate>02/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26490</PullRequestID>
        <IssueID>5062</IssueID>
        <Title>switch statements inhibit local lifting optimization in iterators</Title>
        <Description>Consider this example:

``

When compiled in release, the state machine object for Iter1 has `result` lifted to be a field, whereas the state machine object for Iter2 successfully keeps `result` as a local.
</Description>
        <CreatedDate>08/09/2015</CreatedDate>
        <ClosedDate>03/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26486</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>huoyaoyuan</FixedByID>
    <Title>Handle expression body in PartialMethodCompletionProvider</Title>
    <Description>Fixes #26388 

The original issue was created by myself. Want to get help for adding tests.</Description>
    <CreatedDate>29/04/2018</CreatedDate>
    <ClosedDate>24/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26486</PullRequestID>
        <IssueID>26388</IssueID>
        <Title>Partial method completion provider broken</Title>
        <Description>**Version Used**: 
Visual Studio 15.6.6, 15.7 Preview 4.0
**Steps to Reproduce**:

``</Description>
        <Code>```csharp
partial class C
{
    partial void M();
    partial $$
}
```
The completion list provides `M()`, then press enter.

**Expected Behavior**:
`partial void M() =&gt; throw new NotImplementedException();` filled.
**Actual Behavior**:
Visual Studio displays an error.

Stack trace in log:
```
System.NullReferenceException: 
Microsoft.CodeAnalysis.CSharp.Completion.Providers.PartialMethodCompletionProvider.GetTargetCaretPosition(SyntaxNode caretTarget)
Microsoft.CodeAnalysis.Completion.Providers.AbstractMemberInsertingCompletionProvider.&amp;lt;GetChangeAsync&amp;gt;d__7.MoveNext()
--- 
System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.&amp;lt;GetChangeAsync&amp;gt;d__35.MoveNext()
--- 
Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task, CancellationToken cancellationToken)
]Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Commit(CompletionItem item, Model model, Nullable`1 commitChar, ITextSnapshot initialTextSnapshot, Action nextHandler)
Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.CommitOnEnter(Boolean&amp;amp; sendThrough, Boolean&amp;amp; committed)
Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Microsoft.VisualStudio.Commanding.IChainedCommandHandler&amp;lt;Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs&amp;gt;.ExecuteCommand(ReturnKeyCommandArgs args, Action nextHandler, CommandExecutionContext context)
Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)
Microsoft.CodeAnalysis.Editor.CommandHandlers.AbstractCompletionCommandHandler.ExecuteCommandWorker[TCommandArgs](TCommandArgs args, Action nextHandler, CommandExecutionContext context)
Microsoft.CodeAnalysis.Editor.CommandHandlers.AbstractCompletionCommandHandler.Microsoft.VisualStudio.Commanding.IChainedCommandHandler&amp;lt;Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs&amp;gt;.ExecuteCommand(ReturnKeyCommandArgs args, Action nextHandler, CommandExecutionContext context)
Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)
Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.&amp;lt;&amp;gt;c__DisplayClass14_1`1.&amp;lt;Execute&amp;gt;b__1()
Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call)
--- 
Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
`</Code>
        <CreatedDate>25/04/2018</CreatedDate>
        <ClosedDate>24/05/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26469</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Align the implementations of IAssemblySymbol.GivesAccessTo</Title>
    <Description>It now has the same semantics across languages with a shared core implementation.
Fixes #26459

Note that this is built on https://github.com/dotnet/roslyn/pull/26367. Only the last iteration is specific to this PR.

PERSONAL REVIEW ONLY
</Description>
    <CreatedDate>28/04/2018</CreatedDate>
    <ClosedDate>08/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26469</PullRequestID>
        <IssueID>26459</IssueID>
        <Title>IAssemblySymbol.GivesAccessTo returns incorrect result cross languages</Title>
        <Description>The following test demonstrates that `IAssemblySymbol.GivesAccessTo` gives an incorrect result when the two assemblies result from compilations in different languages. The consequence of this bug is that the [new extension API `ISymbol.IsAccessibleWithin`](https://github.com/dotnet/roslyn/pull/26367) gives an incorrect result for some cases across languages.

``
</Description>
        <CreatedDate>27/04/2018</CreatedDate>
        <ClosedDate>10/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26425</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Do not report unused using/imports if not processing doc comments.</Title>
    <Description>Also silently process doc comments when parsing them so we can report unused usings.
Fixes #2773
</Description>
    <CreatedDate>26/04/2018</CreatedDate>
    <ClosedDate>03/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26425</PullRequestID>
        <IssueID>2773</IssueID>
        <Title>Usage analysis ignores references in documentation comments</Title>
        <Description>[_Migrated from CodePlex_](https://roslyn.codeplex.com/workitem/249)

Consider the following class.

``

The behavior of **Organize Usings** varies by whether or not the current project is configured to generate an XML documentation file with the output.
- If XML documentation file is enabled: The **Organize Usings** feature will not make any changes to the file shown above.
- If XML documentation file is disabled: The **Organize Usings** feature will remove both of the `using` declarations in the file shown above.

At least for the purpose of analyzing `using` declarations, the behavior of Roslyn should not depend on whether or not the project is currently configured to produce an XML documentation file during the build.
</Description>
        <CreatedDate>14/05/2015</CreatedDate>
        <ClosedDate>03/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26367</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Provide public API to determine if a symbol is accessible</Title>
    <Description>Fixes #24518
Fixes #23842

@dotnet/roslyn-compiler Please review this new proposed CodeAnalysis API
@dotnet/roslyn-ide I have removed the old Workspaces implementation (but not the tests)
@Pilchie @DustinCampbell @CyrusNajmabadi Feedback welcome.
</Description>
    <CreatedDate>24/04/2018</CreatedDate>
    <ClosedDate>30/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26367</PullRequestID>
        <IssueID>24518</IssueID>
        <Title>Access control should be implemented in compiler layer, not workspaces layer</Title>
        <Description>See https://github.com/dotnet/roslyn/blob/master/src/Workspaces/Core/Portable/Shared/Extensions/ISymbolExtensions_Accessibility.cs

These language questions (of accessibility) should be implemented in the compiler layer, not the workspaces layer.

See https://github.com/dotnet/roslyn/blob/94ab292d2c79b1675de0d6ff0a7361ecfbf20cfb/src/Compilers/CSharp/Portable/Binder/Semantics/AccessCheck.cs for the C# implementation.

This is related to https://github.com/dotnet/roslyn/issues/23842, which requests these APIs be publicly available.
</Description>
        <CreatedDate>29/01/2018</CreatedDate>
        <ClosedDate>09/10/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-Continuous Improvement</Label>
          <Label>Concept-Design Debt</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26367</PullRequestID>
        <IssueID>23842</IssueID>
        <Title>Provide API to determine whether one symbol is accessible within another symbol</Title>
        <Description>The code fix I'm writing needs to be able to distinguish whether an attribute constructor is accessible from a property or not. This method does precisely what I need, but it's in an internal class.

https://github.com/dotnet/roslyn/blob/69e99a8ba2a044fcf73339ea7d11e2a51975d11d/src/Workspaces/Core/Portable/Shared/Extensions/ISymbolExtensions_Accessibility.cs#L13-L16

Would you please make this method available in the public API?</Description>
        <CreatedDate>18/12/2017</CreatedDate>
        <ClosedDate>17/07/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-API</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26355</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>CyrusNajmabadi</FixedByID>
    <Title>Add support for generating fields/properties for property patterns.</Title>
    <Description>Fixes #9090

Reopening https://github.com/dotnet/roslyn/pull/10873</Description>
    <CreatedDate>24/04/2018</CreatedDate>
    <ClosedDate>08/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26355</PullRequestID>
        <IssueID>9090</IssueID>
        <Title>Generate field/property not offered for complex pattern member.</Title>
        <Description>``

No code action to generate the member X inside Blah.
</Description>
        <CreatedDate>23/02/2016</CreatedDate>
        <ClosedDate>19/06/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26336</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Neme12</FixedByID>
    <Title>Naming style for locals</Title>
    <Description>fixes https://github.com/dotnet/roslyn/issues/22440#issuecomment-333562450 / half of #18121
This PR is separate from #26165 and only contains added support for local variables.

![image](https://user-images.githubusercontent.com/11444821/39136852-7055e066-471c-11e8-8963-b095e0be233b.png)
</Description>
    <CreatedDate>23/04/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26336</PullRequestID>
        <IssueID>18121</IssueID>
        <Title>Cannot create naming rules for type parameters and local variables</Title>
        <Description>In trying to configure naming rules in an .editorconfig, I've found that the current implementation of naming rules lacks the ability to target certain symbol kinds. In my scenario I need the ability to target type parameters and local variables.

Type parameters and variables should be supported symbol kinds both through the options UI in VS and through .editorconfig files.
</Description>
        <CreatedDate>23/03/2017</CreatedDate>
        <ClosedDate>19/06/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26336</PullRequestID>
        <IssueID>26165</IssueID>
        <Title>Naming style for local functions</Title>
        <Description>fixes #22440

I added a new option for local functions because it seems that people are divided on whether they should be named as locals or methods. For the same reason, I think we shouldn't give them a default style for now.

They're not even included in the default set of specifications. Users can to either include them with methods or add a new specification.

![image](https://user-images.githubusercontent.com/11444821/38782435-98906f8a-40f3-11e8-87bb-fbe07c184fa7.png)
![image](https://user-images.githubusercontent.com/11444821/38782437-abc6db5c-40f3-11e8-9342-163f96c0498f.png)
</Description>
        <CreatedDate>15/04/2018</CreatedDate>
        <ClosedDate>01/06/2018</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
          <Label>Community</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26248</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Produce correct diagnostics on implicit operator conversions for stackalloc expressions</Title>
    <Description>Fixes #26195
cc @dotnet/roslyn-compiler for reivew.</Description>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26248</PullRequestID>
        <IssueID>26195</IssueID>
        <Title>Visual Studio crashes while analyzing provided code</Title>
        <Description>**Version Used**: 
Microsoft Visual Studio Professional 2017, Version 15.6.6

**Steps to Reproduce**:
Create new solution and copy-paste sample code there:

``

**Expected Behavior**:
No crasg

**Actual Behavior**:
Visual studio crashes
</Description>
        <CreatedDate>17/04/2018</CreatedDate>
        <ClosedDate>09/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26230</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>davkean</FixedByID>
    <Title>Avoid stealing focus from the active output window pane</Title>
    <Description>Avoid stealing focus when creating our output window pane.

Fixes part of #12202.

~NOTE: I've spent three hours trying to test this but failed miserably due to a number of issues. I'm not going to spend anymore time on it but others are welcome to take my changes, test and merge.~ I've since tested this and it works.</Description>
    <CreatedDate>18/04/2018</CreatedDate>
    <ClosedDate>21/06/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26230</PullRequestID>
        <IssueID>12202</IssueID>
        <Title>IDE shouldn't switch to output window when listing intellisense issues</Title>
        <Description>many times when user opens a solution, they get list of file read failures such as below.

we should find out who is responsible for these files and make sure either project system (or whoever responsible for those files) doesn't add those files to us until they actually exist or create them before hand if possible.

![image](https://cloud.githubusercontent.com/assets/1333179/16348474/9b17b762-3a07-11e6-8daa-6eff20d7f07f.png)

Another duplicate at https://developercommunity.visualstudio.com/content/problem/24671/intellisense-error-after-renaming-windows-form.html</Description>
        <CreatedDate>24/06/2016</CreatedDate>
        <ClosedDate>06/02/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Not Applicable</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26188</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Enable "prefer 'this.' qualifier" on methods.</Title>
    <Description>Fixed #25981 

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.

&lt;/details&gt;
</Description>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>05/06/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26188</PullRequestID>
        <IssueID>25981</IssueID>
        <Title>C# code style "prefer 'this.' qualifier" on methods not working</Title>
        <Description>In code style preferences, I want to specify that all methods should be prefixed with the this qualifier in C# files. It doesn't seem to work for methods (as opposed to fields and properties).

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/225029/c-code-style-prefer-this-qualifier-on-methods-not.html
VSTS ticketId: 591906_
_These are the original issue comments:_

Jinu Joseph [MSFT] on ‎4‎/‎2‎/‎2018, 02:57 AM (3 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>06/04/2018</CreatedDate>
        <ClosedDate>05/06/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26165</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Neme12</FixedByID>
    <Title>Naming style for local functions</Title>
    <Description>fixes #22440

I added a new option for local functions because it seems that people are divided on whether they should be named as locals or methods. For the same reason, I think we shouldn't give them a default style for now.

They're not even included in the default set of specifications. Users can to either include them with methods or add a new specification.

![image](https://user-images.githubusercontent.com/11444821/38782435-98906f8a-40f3-11e8-87bb-fbe07c184fa7.png)
![image](https://user-images.githubusercontent.com/11444821/38782437-abc6db5c-40f3-11e8-9342-163f96c0498f.png)
</Description>
    <CreatedDate>15/04/2018</CreatedDate>
    <ClosedDate>01/06/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26165</PullRequestID>
        <IssueID>22440</IssueID>
        <Title>Naming codestyles should handle local functions</Title>
        <Description>The screenshot below shows the list of specifications we currently support. 
Can we add local functions?

![image](https://user-images.githubusercontent.com/12466233/31037750-6450e604-a527-11e7-9022-381188fa61bb.png)

FYI @kuhlenh @sharwell @agocke </Description>
        <CreatedDate>29/09/2017</CreatedDate>
        <ClosedDate>01/06/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26135</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>JieCarolHu</FixedByID>
    <Title>fix UpgradeProject crashes IDE with Unable to check out the files fro…</Title>
    <Description>…m source control #18199

&lt;details&gt;&lt;summary&gt;fix UpgradeProject crashes IDE with Unable to check out the files from source control #18199&lt;/summary&gt;

### Customer scenario
When choose Upgrade all projects to language version 'Latest' from quick fixes, IDE crashes because of "Unable to check out the files from source control" 
The file it tries to checkout are the TemporaryGeneratedFile_xxxx files, which get deleted and generated again when making project wide changes. Therefore the documentId changed and it cannot find the filepath for the old documentId, so it cannot checkout the file.

### Bugs this fixes
https://github.com/dotnet/roslyn/issues/18199

### Workarounds, if any
No

### Risk
Low, just added some null checks

### Performance impact
Low, just added some null checks without extra allocations

### Is this a regression from a previous update?
Not sure

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?
Customer reported it

### Test documentation updated?
No
&lt;/details&gt;
</Description>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>02/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26135</PullRequestID>
        <IssueID>18199</IssueID>
        <Title>UpgradeProject crashes IDE with "Unable to check out the files from source control"</Title>
        <Description>I’m getting a crash when using the UpgradeProject fixer.
It comes from `void EnsureEditableDocuments(IEnumerable&lt;DocumentId&gt; documents)`

The input is a single document, which apparently has a null path.

I see a few possible interpretations, but I don’t know what’s the proper expectations:
1.	We should not be checking this document in the first place
2.	We should check this document, but it should have a path
3.	It’s ok for the check to fail, but the exception should not blow up the IDE

I have a repro project and a minidump if needed.

`[0] = (DocumentId, #15fef80d-55d3-442e-91f5-88ec51476497 - C:\Users\jcouv\AppData\Local\Temp\.NETFramework,Version=v4.6.AssemblyAttributes.cs)`


The result from QueryEditFiles is` -2147467261`.

``
</Description>
        <CreatedDate>27/03/2017</CreatedDate>
        <ClosedDate>02/05/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26135</PullRequestID>
        <IssueID>18199</IssueID>
        <Title>UpgradeProject crashes IDE with "Unable to check out the files from source control"</Title>
        <Description>I’m getting a crash when using the UpgradeProject fixer.
It comes from `void EnsureEditableDocuments(IEnumerable&lt;DocumentId&gt; documents)`

The input is a single document, which apparently has a null path.

I see a few possible interpretations, but I don’t know what’s the proper expectations:
1.	We should not be checking this document in the first place
2.	We should check this document, but it should have a path
3.	It’s ok for the check to fail, but the exception should not blow up the IDE

I have a repro project and a minidump if needed.

`[0] = (DocumentId, #15fef80d-55d3-442e-91f5-88ec51476497 - C:\Users\jcouv\AppData\Local\Temp\.NETFramework,Version=v4.6.AssemblyAttributes.cs)`


The result from QueryEditFiles is` -2147467261`.

``
</Description>
        <CreatedDate>27/03/2017</CreatedDate>
        <ClosedDate>02/05/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26106</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>robinvanpoppel</FixedByID>
    <Title>Fix possible stack overflow in IntegrationHelper (#25313)</Title>
    <Description>Hi, this is my first pull request. I tried to fill the ask mode template as good as i could.

This should fix a possible stack overflow exception in the KillProcess method in IntegrationHelper.cs as reported in #25313 

&lt;details&gt;&lt;summary&gt;Ask Mode template completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

Calling KillProcess could result in a StackOverflowException.

### Bugs this fixes
Fixes #25313 

### Workarounds, if any

None

### Risk

Low risk

### Performance impact

Low performance impact. No extra allocations and no extra complexity

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

Reported via #25313 

### Test documentation updated?

No

&lt;/details&gt;
</Description>
    <CreatedDate>11/04/2018</CreatedDate>
    <ClosedDate>17/06/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26106</PullRequestID>
        <IssueID>25313</IssueID>
        <Title>Possible stack overflow in IntegrationHelper</Title>
        <Description>Use of an incorrect variable on the following line can produce a stack overflow at runtime:

https://github.com/dotnet/roslyn/blob/e123a4207123d5df8c45fb1caba0fb3acbae0e00/src/VisualStudio/IntegrationTest/TestUtilities/IntegrationHelper.cs#L217</Description>
        <CreatedDate>07/03/2018</CreatedDate>
        <ClosedDate>17/06/2018</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26106</PullRequestID>
        <IssueID>25313</IssueID>
        <Title>Possible stack overflow in IntegrationHelper</Title>
        <Description>Use of an incorrect variable on the following line can produce a stack overflow at runtime:

https://github.com/dotnet/roslyn/blob/e123a4207123d5df8c45fb1caba0fb3acbae0e00/src/VisualStudio/IntegrationTest/TestUtilities/IntegrationHelper.cs#L217</Description>
        <CreatedDate>07/03/2018</CreatedDate>
        <ClosedDate>17/06/2018</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26106</PullRequestID>
        <IssueID>25313</IssueID>
        <Title>Possible stack overflow in IntegrationHelper</Title>
        <Description>Use of an incorrect variable on the following line can produce a stack overflow at runtime:

https://github.com/dotnet/roslyn/blob/e123a4207123d5df8c45fb1caba0fb3acbae0e00/src/VisualStudio/IntegrationTest/TestUtilities/IntegrationHelper.cs#L217</Description>
        <CreatedDate>07/03/2018</CreatedDate>
        <ClosedDate>17/06/2018</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26056</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>[WIP] Effects Of #26034 StringComparer Usage Changes.</Title>
    <Description>Issue #26034. **Test Failures Are To Be Expected**

Change some usage of `StringComparer.OrdinalIgnoreCase` and `CaseInse…nsitiveComparison.Comparer`
To `CaseInsensitiveComparison`

</Description>
    <CreatedDate>10/04/2018</CreatedDate>
    <ClosedDate>26/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26056</PullRequestID>
        <IssueID>26034</IssueID>
        <Title>Some uses of StringComparer.OrdinalIgnoreCase instead of CaseInsensitiveComparison.Comparer</Title>
        <Description>If you need a `StringComparer` that performs case-mapping, you have two choices:
1. `StringComparer.OrdinalIgnoreCase`
2. `CaseInsensitiveComparison.Comparer`

These two case-mapping techniques differ in how they are implemented, and therefore in how they behave.

- `StringComparer.OrdinalIgnoreCase` uses the invariant mapping to compare two strings mapped to uppercase. This is perfect for file system operations, because that corresponds to the way the Windows file system works. Although the invariant mapping has bugs and is "out of date" with respect to Unicode, it is guaranteed not to change, which is what you want for a file system.
- `CaseInsensitiveComparison.Comparer` uses a recent Unicode version culture-invariant lowercase mapping to compare two strings. This is perfect for language operations, because that corresponds to the way we compare identifiers for VB.

The Roslyn code base is inconsistent in how it uses these two. The most common error is using the former when the latter would be more appropriate. Here two examples of probably incorrect uses in the compiler:

- `Roslyn\src\Compilers\Core\Portable\Collections\IdentifierCollection.cs(26):            StringComparer.OrdinalIgnoreCase);`
- `Roslyn\src\Compilers\Core\Portable\Emit\AnonymousTypeKey.cs(43):                   (IgnoreCase ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal).Equals(Name, other.Name);`

We should probably survey the rest of Roslyn for other incorrect uses.
</Description>
        <CreatedDate>09/04/2018</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-Design Debt</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>26023</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>siegfriedpammer</FixedByID>
    <Title>Update ICSharpCode.Decompiler to version 3.1.0.3652</Title>
    <Description>See release notes: https://github.com/icsharpcode/ILSpy/releases/tag/v3.1-final

### Customer scenario

A user enables the **Navigate to decompiled sources** feature, and the generated code does not appear as expected.

### Bugs this fixes

* Fixes dotnet/roslyn#25251 (Decompilation should simplify "type" usage)
* Fixes dotnet/roslyn#25246 (Decompilation cannot decompile xUnit's `Assert.All`)
* Fixes icsharpcode/ILSpy#1095 (C# decompilation, for flags enums always use hex prefix)

### Workarounds, if any

None.

### Risk

Low. No changes were made to transitive dependencies for the update, and the library is only used as part of an experimental feature which is disabled by default.

### Performance impact

No performance impact outside of the experimental scenario.

### Is this a regression from a previous update?

No.

### Root cause analysis

N/A

### How was the bug found?

Dogfooding, customer reporting

### Test documentation updated?

No.
</Description>
    <CreatedDate>08/04/2018</CreatedDate>
    <ClosedDate>01/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26023</PullRequestID>
        <IssueID>25251</IssueID>
        <Title>Decompilation should simplify "type" usage</Title>
        <Description>Decompilation isn't apply the simplifier on the result of the decompilation, resulting in more complex code:

Current:

``</Description>
        <CreatedDate>06/03/2018</CreatedDate>
        <ClosedDate>01/05/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26023</PullRequestID>
        <IssueID>25246</IssueID>
        <Title>Decompilation cannot decompile xUnit's `Assert.All`</Title>
        <Description>Attempted to decompile `Assert.All` from xUnit.Assert (2.1.0) and got the following:

``</Description>
        <CreatedDate>06/03/2018</CreatedDate>
        <ClosedDate>01/05/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>26023</PullRequestID>
        <IssueID>1095</IssueID>
        <Title>fix crash due to control following through next statement</Title>
        <Description>I forgot to put "continue" in some places and it made null to pass into next statement.

it looks like I missed this case since I was concentrated on project document case not project case so this call path never exercised.
</Description>
        <CreatedDate>06/03/2015</CreatedDate>
        <ClosedDate>06/03/2015</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>25622</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Neme12</FixedByID>
    <Title>Completion for attributes: searching for attributes recursively</Title>
    <Description>### Customer scenario

A user tries to use code completion to add an attribute using a namespace-qualified name. The namespace doesn't appear in the completion list, and must be typed manually.

### Bugs this fixes

Fixes #25589

### Workarounds, if any

* Type the namespace name manually
* Add a `using` directive

### Risk

Low. The pull request re-implements a change from an earlier release, preserving its performance-improving characteristics and restoring the original behavior.

### Performance impact

We have no indication that this change will degrade performance in an observable manner. The change which led to this regression targeted a performance problem, but ended up making two changes: one of the changes was necessary to address the measured performance problem while the under was an unintended semantics change. This change restores the original semantics while preserving the performance improvement from the recent work.

### Is this a regression from a previous update?

Yes. Introduced as part of #19863.

### Root cause analysis

This situation only occurred when multiple levels of namespace nesting occurred. Tests have been added to prevent future regressions.

### How was the bug found?

Customer reported.

### Test documentation updated?

No.</Description>
    <CreatedDate>20/03/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>25622</PullRequestID>
        <IssueID>25589</IssueID>
        <Title>Intellisense doens't work in Attributes</Title>
        <Description>When typing out an Attribute, Intellisense doesn't include any available Namespaces other than those included in the System namespace.

This makes traversing Namespaces very difficult when specifying an attribute on a member.

To replicate:
Start typing out an Attribute Usage on a Class, Method, Field, Property, etc.
Look through the Intellisense list for a Namespace that you're looking for (other than System). It doesn't appear.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/216577/intellisense-doenst-work-in-attributes.html
VSTS ticketId: 584324_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>19/03/2018</CreatedDate>
        <ClosedDate>04/05/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>25622</PullRequestID>
        <IssueID>19863</IssueID>
        <Title>[Perf] Optimize IsOrContainsAccessibleAttribute</Title>
        <Description>the AbstractRecommendationService does a filter for which symbols should be included. Given this is called from ShouldIncludeSymbol, with this change we gain:
1. Fewer iterations, as an Attribute is a type declaration, so GetMembers -&gt; GetTypeMembers should give us fewer items to work with
2. One less lambda capture by unrolling the foreach loop.

**Customer scenario**

https://gist.github.com/Therzok/4a168d452c6dcd5cd9ac0ee9cf25ae0e

The stacktrace above details how these issues were found.

**Risk**

Risk is low. IsAttribute() can only be true on type members.

**Performance impact**

Improves performance

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

How did we miss it?  What tests are we adding to guard against it in the future?

¯\_(ツ)_/¯, not a functionality change, but an optimization.

**How was the bug found?**

Profiling VSfM.
</Description>
        <CreatedDate>30/05/2017</CreatedDate>
        <ClosedDate>09/06/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>25099</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>71</FixedByID>
    <Title>Fixes NullReferenceException in NewLineUserSettingFormattingRule</Title>
    <Description>The method checked if "node" was null *after* calling `Kind` on it, which threw a null reference exception. This PR performs the null check *before* anything else.

### Bugs this fixes
- Issue #25098

### Workarounds
- Making sure all nodes are non-null, which is a problem considering nodes can be empty without their parent being invalid.
- Using [Ryder](https://github.com/6A/Ryder), I was able to [avoid the error](https://gist.github.com/6A/3ee85d7204c31907aac89eb912e16f40).

### Performance impact
- None, the null check was only moved.

### How was the bug found?
- Exception thrown when working with the latest release of Roslyn.</Description>
    <CreatedDate>27/02/2018</CreatedDate>
    <ClosedDate>02/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>25099</PullRequestID>
        <IssueID>25098</IssueID>
        <Title>NewLineUserSettingFormattingRule.IsControlBlock throws if node == null</Title>
        <Description>**Version Used**: 2.6.1

**Steps to Reproduce**:  
1. Create a syntax node which contains a null node (in my case, using `SyntaxFactory.StructDeclaration("Foo")`).
2. Call `Formatter.Format(...)` using this node.

**Expected Behavior**:  
A formatted node is returned.

**Actual Behavior**:  
An exception is thrown.

**Additional informations**:  
I've already found the source of the bug, and am submitting a PR right now.</Description>
        <CreatedDate>27/02/2018</CreatedDate>
        <ClosedDate>02/05/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>25056</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Neme12</FixedByID>
    <Title>Adding await keyword highlighting on async using &amp; foreach</Title>
    <Description>for #24037</Description>
    <CreatedDate>26/02/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>25056</PullRequestID>
        <IssueID>24037</IssueID>
        <Title>[Umbrella] Work items and test plan for async streams</Title>
        <Description>Proposal: https://github.com/dotnet/csharplang/blob/master/proposals/csharp-8.0/async-streams.md


## FAQ and known issues
- "missing ManualResetValueTaskSourceLogic": 
The preview1 compiler is looking for that type, but .NET Core 3 preview 1 contains `ManualResetValueTaskSourceCore`. The solution is to include this [code snippet](https://github.com/dotnet/coreclr/issues/21379#issuecomment-444473061) in your program. This will be fixed in preview2.
- enumerator disposed too early (`yield return` in construct with `finally`) (see issue https://github.com/dotnet/roslyn/issues/31268)
- `NullableReferenceTypes` project property doesn't take full effect in legacy projects yet (https://github.com/dotnet/project-system/issues/4058) 

----


## Async-iterator methods
- [x] EnC
  - [x] ~~block~~
  - [x] enable (issue https://github.com/dotnet/roslyn/issues/32266, issue https://github.com/dotnet/roslyn/issues/32589 for `await using` declarations)
- [x] making cancellation token available to producers (PRs https://github.com/dotnet/roslyn/pull/35121 and https://github.com/dotnet/roslyn/pull/35326, API proposal https://github.com/dotnet/corefx/issues/37012)
- [ ] Consider optimizing handling of `yield return` when directly following another `yield return` (to reduce cost in `ManualResetValueTaskSourceCore.SetResult`) (issue https://github.com/dotnet/roslyn/issues/31248, needs LDM)
- [ ] Factor the implementation of `GetStatus` and `OnCompleted` for implementing `IValueTaskSource` and `IValueTaskSource&lt;bool&gt;` https://github.com/dotnet/roslyn/issues/31517
- [ ] Test `goto`, `continue`, `break`
- [ ] Consider optimizing stack consumption https://github.com/dotnet/roslyn/issues/26567
- [ ] Improve message when missing `async` https://github.com/dotnet/roslyn/issues/31113
- [ ] test async method returning a custom type that derives from `IAsyncEnumerable&lt;T&gt;` and `IAsyncEnumerator&lt;T&gt;`.
- [x] BCL design
    - [x] ~~factor some code into a base type?~~ (no)
    - [x] ~~introduce new exception type?~~ (not needed at the moment)
    - [x] Any work needed for mono support? (issue https://github.com/mono/mono/issues/12019, PR https://github.com/mono/mono/pull/12674, `EnumeratorCancellation` issue https://github.com/mono/mono/issues/14454)
- [x] test spilling (maybe need to integrate with Neal's changes in patterns branch)
- [x] Get more test ideas from async method and iterator method tests
- [x] Debugging experience (issue https://github.com/dotnet/roslyn/issues/32246, fixed in preview3)
- [x] Consider adding a guard in `DisposeAsync()`: if state is `-1`, then throw. PR https://github.com/dotnet/roslyn/pull/31764
- [x] Optimize value returned from `MoveNextAsync()` if possible (issue https://github.com/dotnet/roslyn/issues/31246, PR https://github.com/dotnet/roslyn/pull/31645)
- [x] Add optional token to `GetAsyncEnumerator` API (PR https://github.com/dotnet/roslyn/pull/31624)
- [x] Should we add some guards for API mis-use? https://github.com/dotnet/roslyn/issues/30109
- [x] Generate token checks (answer: no)
- [x] Dispose on async-iterator with `finally` issue https://github.com/dotnet/roslyn/issues/30260, PR https://github.com/dotnet/roslyn/pull/31527
- [x] Confirm desired behavior for `DisposeAsync()`. it is ok to dispose before enumerating, and then you start enumerating?
- [x] Consider optimizing disposeModeField away when it isn't needed (answer: the optimization is not worth the loss of regularity)
- [x] Emit `AsyncIteratorStateMachineAttribute` PR https://github.com/dotnet/roslyn/pull/31553
- [x] Test scenario that uses `AwaitOnCompleted` instead of `AwaitUnsafeOnCompleted`
- [x] Adopt new BCL APIs (`AsyncIteratorMethodBuilder`, `ManualResetValueTaskSourceCore`, remove `IStrongBox&lt;T&gt;`) PR https://github.com/dotnet/roslyn/pull/31330
- [x] Returning `IAsyncEnumerator&lt;T&gt;` https://github.com/dotnet/roslyn/issues/31057, PR https://github.com/dotnet/roslyn/pull/31114
- [x] What do exception stack traces look like? Does the stack trace simplifier need to be updated?
- [x] Confirm `threadID` design (see https://github.com/dotnet/corefx/issues/3481)
- [x] `GetAsyncEnumerator()` method should make a new instance in some cases https://github.com/dotnet/roslyn/issues/30275, PR https://github.com/dotnet/roslyn/pull/31105
- [x] `IOperation` and `CFG` should not crash https://github.com/dotnet/roslyn/pull/30363
- [x] Update `IAsyncEnumerable` API https://github.com/dotnet/roslyn/pull/30280
- [x] hand-crafted prototype (https://github.com/jcouv/async-iterators/blob/master/src/Program.cs)
- [x] lowering implementation (https://github.com/dotnet/roslyn/pull/28218)
- [x] CoreCLR testing issue https://github.com/dotnet/coreclr/issues/20032
- [x] support generic methods
- [x] manual testing in IDE (setting up project references, typing, debugging)

## Async using and foreach
- [x] Design and fix IOperation and CFG support https://github.com/dotnet/roslyn/issues/30362
- [ ] test with ref struct iterator (issue https://github.com/dotnet/roslyn/issues/32794)
- [ ] pattern-based disposal should not even consider extensions (issue https://github.com/dotnet/roslyn/issues/32767)
- [ ] add test with pattern-based GetAsyncEnumerator with a Caller attribute on optional parameter (check LINQ behavior)
- [ ] Allow extension methods to contribute to pattern-based binding (issue https://github.com/dotnet/roslyn/issues/32289)
- [ ] Tweak message for `ERR_AwaitForEachMissingMemberWrongAsync`
- [ ] Implement semantic model API similar to `GetAwaitExpressionInfo`
- [ ] Test scripting
- [ ] Test subtleties of `SatisfiesForEachPattern` (special method of looking up `Current`)
- [ ] Test type that is both `IEnumerable&lt;T&gt;` and `IAsyncEnumerable&lt;T&gt;`.
- [ ] Test type that is both `IDisposable` and `IAsyncDisposable`.
- [x] Allow pattern-based disposal in `await foreach` and `await using` (issue https://github.com/dotnet/roslyn/issues/32316)
- [x] Async-enumerable returned by `ConfigureAwait`/`WithCancellation` not recognized by `await foreach` (issue https://github.com/dotnet/roslyn/issues/31609, PR https://github.com/dotnet/roslyn/pull/32233)
- [x] Pattern-based lookup should pass no argument for `CancellationToken` (issue https://github.com/dotnet/roslyn/issues/32111, PR https://github.com/dotnet/roslyn/pull/32184)
- [x] Integration with "enhanced using and foreach" feature https://github.com/dotnet/roslyn/issues/28588
- [x] Test/block expression trees (N/A because they are statements)
- [x] `IOperation` and `CFG` should not crash https://github.com/dotnet/roslyn/pull/30363
- [x] Use `await using` and `await foreach` syntax https://github.com/dotnet/roslyn/pull/30525
- [x] Update `IAsyncEnumerable` API https://github.com/dotnet/roslyn/pull/30280
- [x] Do we prefer pattern-based over interface-based? (I assume perf is better)
- [x] ~~Only convert/deconstruct when `TryGetNext` succeeded https://github.com/dotnet/roslyn/issues/30258~~
- [x] async using (PR https://github.com/dotnet/roslyn/pull/23961)
- [x] async foreach (PR https://github.com/dotnet/roslyn/pull/24750)
- [x] Update `IAsyncEnumerator.WaitForNextAsync` to return a `ValueTask&lt;bool&gt;`.
- [x] Pattern-based foreach should recognize task-like return from `WaitForNextAsync`
- [x] Verify debugging and sequence points
- [x] Handle `foreach await (ref x in ...) ...` (error, ` TestWithPattern_Ref`)
- [x] Test with missing well-known members, if not already covered
- [x] Pattern-based async-foreach should recognized `WaitForNextAsync` that returns a task-like.

## Productivity (code fixers/refactorings/etc):
- [x] ~~ExtractMethod doesn't work on parts of or entire async-iterator method body~~ (that's expected)
- [x] FindAllReferences (moved all FAR issues into https://github.com/dotnet/roslyn/issues/28228)
    - [x] it should find implicit references to `GetAwaiter` from an async-foreach or async-dispose. 
     - [x] it should find implicit references to `DisposeAsync` from an async-foreach or async-dispose. 
- [x] Verify FAR on `AsyncDispose` method
- [x] ~~decompilation feature in IDE~~ (we'll let ILSpy library fix this)
- [ ] Verify proper warnings if any involved member is obsolete (implicit conversions and such)
- [x] Code fixers: 
    - [x] fix `foreach` (by adding/removing `await`) depending on the collection type. (PR https://github.com/dotnet/roslyn/pull/33463)
    - [x] fix `using` (by adding/removing `await`) depending on resource type. (PR https://github.com/dotnet/roslyn/pull/33463)
    - [x] fix method declaration depending on presence/absence of `yield` or `await` (MakeMethodAsync PR https://github.com/dotnet/roslyn/pull/31846)
    - [x] using `foreach await` in non-async method should offer to convert the method to `async` https://github.com/dotnet/roslyn/pull/26632
- [x] IDE logic probably needs to be adjusted for completion inside `await using` and `await foreach`. For instance, see `IsLocalVariableDeclarationContext`.
- [x] Review TypeInferrer https://github.com/dotnet/roslyn/pull/30211#discussion_r221462807 (PR https://github.com/dotnet/roslyn/pull/31046)
- [x] parsing (PR https://github.com/dotnet/roslyn/pull/23866)
- [x] IDE completion and colorizing (https://github.com/dotnet/roslyn/pull/23960)
- [x] Verify highlighting for `async` and `await` (see https://github.com/dotnet/roslyn/pull/25037, PR https://github.com/dotnet/roslyn/pull/25056) (verified manually on method and local function)
- [x] Test with `ConvertForeachToFor` refactoring (verified manually, not triggered)

## LDM open issues:

- [ ] async LINQ
    - [ ] Parsing issue with `return from e in async-collection select await e + 1; // await isn't a keyword`
    - [ ] how does above scenario and `return from e in async-collection select e + 1;` lower into LINQ APIs? (the one with `await` involves `Task&lt;int&gt;` and the other one involves `int` directly) How many overloads of `Select` do we need?
- [ ] Should there be some helper method to convert from IEnumerable to IAsyncEnumerable, or from Task&lt;T&gt; to IAsyncEnumerable?
- [x] Should the generate token checks be in `GetAsyncEnumerator` or in `MoveNextAsync`? (if we do, we need to store the token and maybe dispose it too) (answer: no)
- [x] Revisit blocking off a word (either in parameter list, like `params`, or for variable name, like `value`) for token (answer: we're not going to use a keyword)
- [x] pattern-based `await using` should recognize a `DisposeAsync` method that returns a task-like (or only `ValueTask`)? (not applicable because no ref structs in async methods)
- [x] Should pattern-based `foreach` recognize `... GetAsyncEnumerator()` (without `CancellationToken`)? (yes, LDM 1/9)
- [x] What attributes should be emitted on async-iterator state machines? (answer: `AsyncIteratorStateMachineAttribute`)
- [x] cancellation of async-streams (both as consumer and producer) (see LDM 11/28)
- [x] confirm syntax for async foreach
- [x] Should we disallow `struct` async enumerator? (no, same as regular async, see ` TestWithPattern_WithStruct_MoveNextAsyncReturnsTask`)
- [x] Should `DisposeAsync` return a non-generic `ValueTask`, since there is now one? Or stick with `Task`?
- [x] Extension methods for `GetAsyncEnumerator`, `WaitForNextAsync`, and `TryGetNext` do not contribute. This mirrors behavior for regular `foreach`. But I'd like to confirm. (answer: this is probably something we want to support. Let's queue that for later in the implementation)
- [x] Should the pattern for async enumerators also recognize when a task-like is returned instead of `Task&lt;bool&gt;`? (answer: yes)
- [x] I think we'll need to block `dynamic` since there is no async counterpart to the non-generic `IEnumerable` that would convert `dynamic` to. (answer: seems ok)
- [x] Do we need `async` keyword on async iterator methods? I assume yes.
- [x] Since not enumerable lambdas, I assume the same for async-enumerable. (answer: correct. No async iterator lambda)
- [x] async-iterator without `yield` or `await`, should warn? (answer: without `yield` it's not recognized as an iterator, warn when no `await`)
- [x] I suspect we'll need to declare the loop variable differently: calling `TryGetNext` first, then checking `success` and only then dealing with conversions and deconstructions.

Championed issue: https://github.com/dotnet/csharplang/issues/43 (includes LDM notes)

## Test ideas for async foreach:
- [x] Verify that async-dispose doesn't have a similar bug with struct resource

## Test ideas for async using:
- [ ] Look up Lippert's blog on using with struct or generic type T
- [ ] Does the pattern or the interface get picked up first? Is it observable? (maybe if the pattern allows task-like returning method)

## Test ideas for async iterators:
- [ ] From Andy: we should have at least one test that runs using a non-trivial sync context. 
- [ ] From Andy: would it be useful to emit asserts for invalid/unexpected states for at least a little while? We could do it only for debug codegen.
- [x] Test with yield or await in try/catch/finally
- [ ] More tests with exception thrown in async-iterator
- [ ] There is a case in `GetIteratorElementType` with `IsDirectlyInIterator` that relates to speculation, needs testing
- [ ] yield break disallowed in finally and top-level script (see `BindYieldBreakStatement`); same for yield return (see `BindYieldReturnStatement`)
- [ ] binding for yield return (`BindYieldReturnStatement`) validates escape rules, needs testing
- [x] test yield in async lambda (still error)
- [ ] test with `IAsyncEnumerable&lt;dynamic&gt;`
- [ ] other tests with `dynamic`?
- [x] test should cover both case with `AwaitOnCompleted` and `AwaitUnsafeOnCompleted`
- [ ] test `async IAsyncEnumerable&lt;int&gt; M() { return TaskLike(); }`
- [ ] Can we avoid making `IAsyncEnumerable&lt;T&gt;` special from the start? Making mark it with an attribute like we did for task-like?
- [ ] Do some manual validation on debugging scenarios, including with exceptions (thrown after yield and after await).
- [ ] Test with one or both or the threadID APIs missing.


----
## BCL (Core)
- Add `DefaultCancellationAttribute` type: https://github.com/dotnet/corefx/issues/37012
- Design IAsyncEnumerable and supporting types to BCL: https://github.com/dotnet/corefx/issues/32640 
- Design IAsyncDisposable in BCL: https://github.com/dotnet/corefx/issues/32665
- Design for CancellationToken in IAsyncEnumerable: https://github.com/dotnet/corefx/issues/33338
PRs https://github.com/dotnet/coreclr/pull/20442 and https://github.com/dotnet/corefx/pull/33104
- Stack pretty printing https://github.com/dotnet/coreclr/pull/21103
- Add optional token to `GetAsyncEnumerator` API
- Add extension method `WithCancellation(...)` to call `GetAsyncEnumerator` and wrap the result into an `IAsyncEnumerable`
- AsyncIteratorStateMachineAttribute https://github.com/dotnet/corefx/issues/33770, PR https://github.com/dotnet/coreclr/pull/21313 (and using it https://github.com/dotnet/coreclr/pull/21396)
- Add `CancellationToken` to `GetAsyncEnumerator()` PR https://github.com/dotnet/coreclr/pull/21397, documentation https://github.com/dotnet/corefx/issues/33338#issuecomment-444728011
- Add `WithCancellation` design https://github.com/dotnet/corefx/issues/33909
- Add `IAsyncDisposable.ConfigureAwait` (PRs https://github.com/dotnet/coreclr/pull/22160 and https://github.com/dotnet/corefx/pull/34783)

## BCL (mono)
- Port types to mono (https://github.com/mono/mono/issues/12019)

## BCL (package)
- Add `EnumeratorCancellationAttribute` (PR https://github.com/dotnet/corefx/pull/37719)

-----
## References:
- [ValueTask](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Threading/Tasks/ValueTask.cs#L60)
- [IValueTaskSource](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Threading/Tasks/Sources/IValueTaskSource.cs) </Description>
        <CreatedDate>04/01/2018</CreatedDate>
        <ClosedDate>19/09/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Feature - Async Streams</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20745</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Use an analyzer to validate file headers</Title>
    <Description>* Enable StyleCop Analyzers file header validation for C# code
* Fix all existing file header discrepancies in C# files

Fixes #20785, but only for C# files.</Description>
    <CreatedDate>10/07/2017</CreatedDate>
    <ClosedDate>22/03/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20745</PullRequestID>
        <IssueID>20785</IssueID>
        <Title>Validate file headers during the build</Title>
        <Description>Currently the header used in source files is not validated as part of the build. An existing (third-party) analyzer rule provides the ability to combine this validation with a code fix that inserts/corrects the header as necessary. Adopting this analyzer would be helpful for a few reasons:

1. It helps ensure files have the expected headers
2. It helps Roslyn developers working on the IDE experience understand the desired behavior of additional analyzers and code fixes
3. It defers the work on this particular code style feature so we can better consider the design choices to make it relevant to a broad audience
</Description>
        <CreatedDate>11/07/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20743</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>MaStr11</FixedByID>
    <Title>#20630 Cast is redundant on attribute with params fix</Title>
    <Description>**Customer scenario**

False positive on IDE0004 "Cast is redundant" analyzer


**Bugs this fixes:**

Fixes #20630

**Workarounds, if any**

Disable IDE0004

**Risk**

Code fix changes behavior.

**Performance impact**

Low.

**Is this a regression from a previous update?**

Variation of: #18978
Related: #20741 #20742

**Root cause analysis:**

Analyzer misses test for prams in attribute constructor calls.

**How was the bug found?**

Customer reported
</Description>
    <CreatedDate>10/07/2017</CreatedDate>
    <ClosedDate>28/03/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20743</PullRequestID>
        <IssueID>20630</IssueID>
        <Title>Wrong IDE0004 Cast is redundant when applying attribute with params argument</Title>
        <Description>**Version Used**: 
First seen in VS2015. Subsequently reproduced on:

&gt; VS2017, version 15.2 (26430.14) Release

**Steps to Reproduce**:

Use this complete Console app:

``

When compiled and run, correctly writes 1 to the console.

**Expected Behavior**:

No suggestion to remove cast syntax on null literal in attribute specification on class Program.

**Actual Behavior**:

Cast to string is in a pale text color, and a light bulb suggests, "Remove Unnecessary Cast". If the bad suggestion is followed, program behavior changes from writing 1 into writing -2147483648.

Obviously, the issue is with a params constructor that can apply in either normal form or expanded form.

While this seems _similar_ to other issues, like #18978, I do not know if it is a duplicate of any issue.</Description>
        <CreatedDate>04/07/2017</CreatedDate>
        <ClosedDate>28/03/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20743</PullRequestID>
        <IssueID>18978</IssueID>
        <Title>IDE0004 "Cast is redundant" when casting `object[]` to `object` calling a method that takes `params object[]` changes behavior</Title>
        <Description>**Version Used**: VS2017 15.1 (26403.7)

**Steps to Reproduce**:
``

Produces:
&gt;2
&gt;2</Description>
        <CreatedDate>25/04/2017</CreatedDate>
        <ClosedDate>25/05/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20743</PullRequestID>
        <IssueID>20741</IssueID>
        <Title>C# Named params argument in attribute constructor gets assigned wrong.</Title>
        <Description>**Version Used**: 
Visual Studio 15.1 (26403.7)
**Steps to Reproduce**:

Using named arguments in conjunction with params arguments seems to assign the wrong parameter in attribute constructor calls.

``

Discovered during working on #20630.</Description>
        <Code>```CSharp
using System;
using System.Reflection;

sealed class MarkAttribute : Attribute
{
    public MarkAttribute(bool otherArg, params object[] args)
    {
        Args = args;
        OtherArg = otherArg;
    }
    public object[] Args { get;  }
    public bool OtherArg { get; }
}

[Mark(args: new string[] { "Hello", "World" }, otherArg: true)]
static class Program
{
    private static void Test(bool otherArg, params object[] args)
        =&gt; PrintOutArgsInfo(args);

    public static void Main()
    {
        Console.WriteLine("Method call");
        Test(args: new string[] { "Hello", "World" }, otherArg: true);

        var attr = typeof(Program).GetCustomAttribute&lt;MarkAttribute&gt;();
        Console.WriteLine("\nAttribute constructor call");
        PrintOutArgsInfo(attr.Args);
    }

    private static void PrintOutArgsInfo(object[] args)
    {
        Console.WriteLine($"Length: { args.Length } ");
        Console.WriteLine($"Value of Arr[0]: { args[0] } ");
        Console.WriteLine($"Type of Value[0]: { args[0].GetType().ToString() } ");
    }
}
```
**Expected Behavior**:
Does not compile or print out:
```
Method call
Length: 2
Value of Arr[0]: Hello
Type of Value[0]: System.String

Attribute constructor call
Length: 2
Value of Arr[0]: Hello
Type of Value[0]: System.String
```

**Actual Behavior**:
```
Method call
Length: 2
Value of Arr[0]: Hello
Type of Value[0]: System.String

Attribute constructor call
Length: 1
Value of Arr[0]: True
Type of Value[0]: System.Boolean
`</Code>
        <CreatedDate>10/07/2017</CreatedDate>
        <ClosedDate>29/09/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20743</PullRequestID>
        <IssueID>20742</IssueID>
        <Title>IDE0004 "Cast is redundant" when casting `object[]` to `object` calling a method that takes `params object[]` and named arguments changes behavior.</Title>
        <Description>**Version Used**: 

Visual Studio 15.1  (26403.7)

**Steps to Reproduce**:

``</Description>
        <Code>```CSharp
static class Program
{
    public static void Main(string[] args)
    {
        var takesArgs = new[] { "Hello", "World" };
        TakesParams(bar: (object)takesArgs, foo: true); //before IDE0004 is applied
        TakesParams(bar: takesArgs, foo: true); // after IDE0004 is applied
    }

    private static void TakesParams(bool foo, params object[] bar)
    {
        System.Console.WriteLine(bar.Length);
    }
}
```
Output:
&gt; 1
&gt; 2

**Expected Behavior**:
Don't offer IDE0004.
**Actual Behavior**:
Offers IDE0004.

This is a variation of #18978 that is still present after #19619.
Caused by:
https://github.com/dotnet/roslyn/blob/master/src/Workspaces/CSharp/Portable/Extensions/CastExpressionSyntaxExtensions.cs#L167-L177
This code assumes that the params argument is the last parameter in the call which isn't true for named arguments.

Test for:
roslyn\src\EditorFeatures\CSharpTest\Diagnostics\RemoveUnnecessaryCast\RemoveUnnecessaryCastTests.cs

```CSharp
        [WorkItem(20742, "https://github.com/dotnet/roslyn/issues/20742")]
        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsRemoveUnnecessaryCast)]
        public async Task DontRemoveCastOnCallToMethodWithParamsArgsAndNamedArgs()
        {
            await TestMissingInRegularAndScriptAsync(
@"
static class Program
{
    public static void Main(string[] args)
    {
        var takesArgs = new[] { ""Hello"", ""World"" };
        TakesParams(bar: [|(object)|]takesArgs, foo: true);
    }

    private static void TakesParams(bool foo, params object[] bar)
    {
        System.Console.WriteLine(bar.Length);
    }
}");
        }
`</Code>
        <CreatedDate>10/07/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>_Product-level triaged</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19444</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>khyperia</FixedByID>
    <Title>Mark local function default parameter expressions as used</Title>
    <Description>**Customer scenario**

Referencing a local/local-function with `nameof` or a constant expression in a local function default parameter expression does not mark the other variable as used. This would emit a warning, and cause VS to suggest to eliminate the variable - which doesn't work, as it *is* being used.

**Bugs this fixes:**

#16821, #16454

**Workarounds, if any**

User ignores the warning.

**Risk**

The only major modification is changing the way `SourceComplexParameterSymbol` calculates the default value (it now holds onto the bound expression) - but it's unlikely this would affect anything.

**Performance impact**

Extra allocation when storing the `ConstantValue` and `BoundExpression` (to allow a single Interlocked.CompExch to update both), plus retaining the `BoundExpression`. Note this only happens in `SourceComplexParameterSymbol`, which is a subset of all parameters - only "special" ones (complex means "has default value", etc.)

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Overlooked probably because it's not a very intrusive error, easy to ignore and not report. The case where this could go wrong is also new (with local functions), as we never needed to report usage before (but note that a couple tests changed - a normal method referencing a static variable in a default param now recognizes it as being used)

**How was the bug found?**

Github issues (linked above)

---

Ping @dotnet/roslyn-compiler for review. The weirdest thing up for review is probably the LazyDefaultValue class I created - I think that's the cleanest way to do it (lazy init two fields linked together), but I'm open for other suggestions.</Description>
    <CreatedDate>11/05/2017</CreatedDate>
    <ClosedDate>05/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19444</PullRequestID>
        <IssueID>16821</IssueID>
        <Title>Roslyn incorrectly reports local functions as unused if they are used only under nameof as default parameter values</Title>
        <Description>``</Description>
        <CreatedDate>30/01/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19444</PullRequestID>
        <IssueID>16454</IssueID>
        <Title>Constants used in local function parameter default not considered "used"</Title>
        <Description>This program

``
</Description>
        <CreatedDate>12/01/2017</CreatedDate>
        <ClosedDate>11/05/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
          <Label>Resolution-Duplicate</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19067</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Hosch250</FixedByID>
    <Title>Add Make Field Readonly analyzer/code fix</Title>
    <Description>VSO bug : https://devdiv.visualstudio.com/DevDiv/_workitems/edit/590185

Close #10273

## Specs

- Only works on private fields (more accessible fields should be replaced with properties anyway)
- Quick fix separates any fields declared in a single statement
- Fields are split for Fix One and declared in the same order as originally
- For Fix All, if all the fields in a declaration can be readonly, they are not split
- User-facing option allows user to enable/disable and set the severity for this analyzer</Description>
    <CreatedDate>28/04/2017</CreatedDate>
    <ClosedDate>28/03/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19067</PullRequestID>
        <IssueID>10273</IssueID>
        <Title>Add "Make readonly" analyzer and code fix</Title>
        <Description>Filed on behalf of a customer from interviews
</Description>
        <CreatedDate>01/04/2016</CreatedDate>
        <ClosedDate>28/03/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>17918</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Add overload resolution perf tests</Title>
    <Description>Tests for #13685.</Description>
    <CreatedDate>16/03/2017</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17918</PullRequestID>
        <IssueID>13685</IssueID>
        <Title>Overload resolution uses quadratic algorithm to find the best candidate.</Title>
        <Description>Overload resolution (unary operators, binary operators, and methods) uses a quadratic algorithm to select the best candidate, because it compares every candidate to every other candidate.

There is a simple linear algorithm that gives the same result: scan once to find a possibly best method, and then scan a second time to ensure that it is better than every other candidate.
</Description>
        <CreatedDate>08/09/2016</CreatedDate>
        <ClosedDate>21/06/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Community</Label>
          <Label>Language-C#</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16541</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>SLaks</FixedByID>
    <Title>Expose Deconstruct() method as symbol on deconstructing AssignmentExpressionSyntax</Title>
    <Description>This lets F12 on the `=` token jump to `Deconstruct()`.

I will soon also make this report rename conflicts (#16102)

**Customer scenario** 

Using F12 to explore how deconstructing assignments are compiled, or to explore deconstructing assignments in a complex unfamiliar codebase

**Bugs this fixes:** #16529

**Workarounds, if any** None

**Risk** Moderate; adds new return value to core method, but shouldn't matter, because it didn't previously do anything meaningful here.

**Performance impact** None; this codepath should only run for this new feature

**Is this a regression from a previous update?** No
**Root cause analysis:** Missing part of new feature
**How was the bug found?** Reported</Description>
    <CreatedDate>16/01/2017</CreatedDate>
    <ClosedDate>18/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16541</PullRequestID>
        <IssueID>16102</IssueID>
        <Title>Rename should report a conflict when renaming Deconstruct</Title>
        <Description>**Version Used**: 2017 RC Refresh

_pedantic_ :)

``</Description>
        <CreatedDate>25/12/2016</CreatedDate>
        <ClosedDate>15/11/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16541</PullRequestID>
        <IssueID>16529</IssueID>
        <Title>Go To Definition should go to Deconstruct() in deconstructing assignments</Title>
        <Description>When I press F12 on the `=` token in `(a, b) = blah` (where `blah` has a `Deconstruct()`), can you open the `Deconstruct()` method?

Just like F12 already opens operator overloads.

This would help people understand how tuples work in general, and would be quite helpful when navigating an unfamiliar codebase that uses custom deconstructable types.</Description>
        <CreatedDate>16/01/2017</CreatedDate>
        <ClosedDate>06/04/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15494</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>daveaglick</FixedByID>
    <Title>Adds support for namespace XML doc comments</Title>
    <Description>This PR addresses the lack of support for namespace XML comments as described in #15474. Since it was a fairly simple change, I decided to go ahead and implement so that the PR could be used for discussion (and hopefully merged eventually).

**Customer scenario**

.NET documentation generators have been forced to come up with their own ways of representing namespace documentation, and nearly all of them have tried to approach namespace-level documentation in one way or another. This shows that the lack of official compiler support for namespace documentation comments is an ongoing deficit. This PR adds support for reporting XML documentation comments at the namespace level in both Roslyn symbol representations and the generated XML documentation output file.

**Bugs this fixes:** 

#15474

**Workarounds, if any**

Reflection can be used to get the formatted XML documentation for a namespace (see #15474).

**Risk**

There is a chance that changes to the generated XML documentation output file to include namespace XML documentation comments might break consumers of the file. This is mitigated by the fact that unless a namespace has XML documentation comments in the first place, they won't be output to the file. The presence of such comments on a namespace prior to this change is unlikely as they wouldn't have been picked up by the compiler and so would have been of little use.

**Performance impact**

I suspect (though do not know for sure) that this has a low performance impact since it uses the same mechanisms of compiling documentation comments as do other symbols, which have already been optimized.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

This is new functionality, and a test has been added to verify correct operation.

**How was the bug found?**

While developing a Roslyn-based .NET documentation generator and requiring information about namespaces to be available.
</Description>
    <CreatedDate>23/11/2016</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15494</PullRequestID>
        <IssueID>15474</IssueID>
        <Title>Support for namespace XML doc comments</Title>
        <Description>Over the years, different .NET documentation generators have used different techniques for representing documentation on a namespace. For example, NDoc and SHFB both use a special `NamespaceDoc` class and "promote" any XML doc comments on that type to the containing namespace.

As far as I can tell, Roslyn doesn't currently support XML doc comments on namespaces (there's no `GetDocumentationCommentXml()` override for namespace symbols). I propose that XML doc comments applied to a use of the namespace get picked up and returned from `GetDocumentationCommentXml()`. This would work just like a partial class and if multiple doc comment blocks are provided for a namespace, the last one wins.

I suppose namespace comments should also be included in the generated XML documentation output file (as created in `DocumentationCommentCompiler`). That seems like it might be a bit trickier since consumers probably don't expect comment elements at the namespace level. Is there a formalized schema somewhere for this XML output?</Description>
        <CreatedDate>22/11/2016</CreatedDate>
        <ClosedDate>22/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15494</PullRequestID>
        <IssueID>15474</IssueID>
        <Title>Support for namespace XML doc comments</Title>
        <Description>Over the years, different .NET documentation generators have used different techniques for representing documentation on a namespace. For example, NDoc and SHFB both use a special `NamespaceDoc` class and "promote" any XML doc comments on that type to the containing namespace.

As far as I can tell, Roslyn doesn't currently support XML doc comments on namespaces (there's no `GetDocumentationCommentXml()` override for namespace symbols). I propose that XML doc comments applied to a use of the namespace get picked up and returned from `GetDocumentationCommentXml()`. This would work just like a partial class and if multiple doc comment blocks are provided for a namespace, the last one wins.

I suppose namespace comments should also be included in the generated XML documentation output file (as created in `DocumentationCommentCompiler`). That seems like it might be a bit trickier since consumers probably don't expect comment elements at the namespace level. Is there a formalized schema somewhere for this XML output?</Description>
        <CreatedDate>22/11/2016</CreatedDate>
        <ClosedDate>22/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15494</PullRequestID>
        <IssueID>15474</IssueID>
        <Title>Support for namespace XML doc comments</Title>
        <Description>Over the years, different .NET documentation generators have used different techniques for representing documentation on a namespace. For example, NDoc and SHFB both use a special `NamespaceDoc` class and "promote" any XML doc comments on that type to the containing namespace.

As far as I can tell, Roslyn doesn't currently support XML doc comments on namespaces (there's no `GetDocumentationCommentXml()` override for namespace symbols). I propose that XML doc comments applied to a use of the namespace get picked up and returned from `GetDocumentationCommentXml()`. This would work just like a partial class and if multiple doc comment blocks are provided for a namespace, the last one wins.

I suppose namespace comments should also be included in the generated XML documentation output file (as created in `DocumentationCommentCompiler`). That seems like it might be a bit trickier since consumers probably don't expect comment elements at the namespace level. Is there a formalized schema somewhere for this XML output?</Description>
        <CreatedDate>22/11/2016</CreatedDate>
        <ClosedDate>22/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>14423</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>axel-habermaier</FixedByID>
    <Title>Added test for fix of #9828</Title>
    <Description>Issue #9828 apparently has been fixed by commit 1b4ef7a1f5d6982169a5c5a0e914a26eb92a3c40. Added a minor, more explicit test for the fix and removed a comment that become outdated by the fix.

Closes #9828.
</Description>
    <CreatedDate>11/10/2016</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>14423</PullRequestID>
        <IssueID>9828</IssueID>
        <Title>SyntaxGenerator (C#) produces inconsistent type expressions</Title>
        <Description>`SyntaxGenerator.TypeExpression` produces inconsistent output when used with primitive types. For instance, `SyntaxGenerator.TypeExpression(SpecialType.System_Int32)` produces `int`, whereas `SyntaxGenerator.TypeExpression(symbolForSystemInt32)` produces `System.Int32`. This is inconsistent because all other types (as far as I've seen, at least) are prefixed with `global::`.

`syntaxGenerator.TypeExpression(symbolForSystemInt32)` should either generate `int` or `global::System.Int32`. Similar for all other primitive types. Particularly, I do _not_ care whether `int` or `global::System.Int32` is generated; `System.Int32`, however, should definitely _not_ be generated.

I came across this issue when generating code for a solution that declares another non-top-level `System` namespace; while this certainly is not good practice, it can definitely happen. The issue is particularly annoying as it makes using certain convenience methods impossible: For instance, `SyntaxGenerator.ParameterDeclaration(IParameterSymbol)` is also affected by this problem.

The following example demonstrates this issue.

**Version Used**: 

NuGet Package `Microsoft.CodeAnalysis.CSharp.Workspaces`, version 1.1.1

**Steps to Reproduce**:

Run the following code in a console application with the `Microsoft.CodeAnalysis.CSharp.Workspaces` package installed:

``
</Description>
        <CreatedDate>17/03/2016</CreatedDate>
        <ClosedDate>02/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Not Reproducible</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>14423</PullRequestID>
        <IssueID>9828</IssueID>
        <Title>SyntaxGenerator (C#) produces inconsistent type expressions</Title>
        <Description>`SyntaxGenerator.TypeExpression` produces inconsistent output when used with primitive types. For instance, `SyntaxGenerator.TypeExpression(SpecialType.System_Int32)` produces `int`, whereas `SyntaxGenerator.TypeExpression(symbolForSystemInt32)` produces `System.Int32`. This is inconsistent because all other types (as far as I've seen, at least) are prefixed with `global::`.

`syntaxGenerator.TypeExpression(symbolForSystemInt32)` should either generate `int` or `global::System.Int32`. Similar for all other primitive types. Particularly, I do _not_ care whether `int` or `global::System.Int32` is generated; `System.Int32`, however, should definitely _not_ be generated.

I came across this issue when generating code for a solution that declares another non-top-level `System` namespace; while this certainly is not good practice, it can definitely happen. The issue is particularly annoying as it makes using certain convenience methods impossible: For instance, `SyntaxGenerator.ParameterDeclaration(IParameterSymbol)` is also affected by this problem.

The following example demonstrates this issue.

**Version Used**: 

NuGet Package `Microsoft.CodeAnalysis.CSharp.Workspaces`, version 1.1.1

**Steps to Reproduce**:

Run the following code in a console application with the `Microsoft.CodeAnalysis.CSharp.Workspaces` package installed:

``
</Description>
        <CreatedDate>17/03/2016</CreatedDate>
        <ClosedDate>02/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Not Reproducible</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>14068</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zanqi</FixedByID>
    <Title>Inline temp retain comment. Fix for #1017</Title>
    <Description>Fix for #1017</Description>
    <CreatedDate>26/09/2016</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>14068</PullRequestID>
        <IssueID>1017</IssueID>
        <Title>Inline Temp should keep comments</Title>
        <Description>Ported from TFS WorkItem: **580497**

---

**Repro Steps:**

``

The comment still disappears, and not removing the line break introduces some errors.

---

3) Edited By Balaji Krishnan (6/18/2014 10:56:18 AM)

Notes: introducing compilation errors is a bug. 

Without breaking compilation, the current code's intent is to preserve/move trivia if the local declaration has more than 1 declarators, with a single or multi-line comment and &amp;quot;delete&amp;quot; them completely if there was only 1 variable declarator. 

Check how it actually works though. 

This is also related with how the feature handles pre-processor directives (Bug 527376)
</Description>
        <CreatedDate>04/03/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13464</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>antonssonj</FixedByID>
    <Title>Don't use static overloads on instance for QuickInfo</Title>
    <Description>Fix #13462
</Description>
    <CreatedDate>30/08/2016</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13464</PullRequestID>
        <IssueID>13462</IssueID>
        <Title>Wrong number of overloads in QuickInfo</Title>
        <Description>**Version Used**: 
VS2015, Update 3
**Steps to Reproduce**:

``

When I hoover over the M in the main method a quickinfo with + 1 overload is shown.

**Expected Behavior**:
![image](https://cloud.githubusercontent.com/assets/12250134/18104126/e5616468-6ef9-11e6-9626-d01286ea8f96.png)
**Actual Behavior**:
![image](https://cloud.githubusercontent.com/assets/12250134/18104136/f42a8e02-6ef9-11e6-8c73-a18174e57530.png)
</Description>
        <CreatedDate>30/08/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13442</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Track incremental parse depth</Title>
    <Description>Fixes issue #13398 

Add ability to track the number of incremental parses queued up on a document and switch to using full parsing if the queue gets too long.

@heejaechang @Pilchie @jasonmalinowski @CyrusNajmabadi  please review
</Description>
    <CreatedDate>29/08/2016</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13442</PullRequestID>
        <IssueID>13398</IssueID>
        <Title>Can't find logic that squash many incremental parses into one full parse </Title>
        <Description>Hi,

I can't find logic(code) that does what this comment says: https://github.com/dotnet/roslyn/blob/1c4d8b40/src/Workspaces/Core/Portable/Workspace/Solution/DocumentState.cs#L401-L403

My problem is... In XS if we do many(talking about 1000+(formatting full file or something like that on huge file)) changes to file... Roslyn than incrementally parses all of this changes which results in stack overflow since it's requesting ParseIncrementally from AsyncTask which is chaining until stackoverflow occurs...

Regards,
David
</Description>
        <CreatedDate>26/08/2016</CreatedDate>
        <ClosedDate>02/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Question</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13153</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>svick</FixedByID>
    <Title>Ran code formatter tool</Title>
    <Description>Fixes #12709.

This PR contains 5 commits:
1. The result of running `CodeFormatter.exe Roslyn.sln /nounicode /copyright:copyright-header.txt`.
2. Reverting changes to indentation of comments inside `switch` statements that I think were incorrect.
3. Removing two superfluous semicolons. Not really related to the rest of this PR, but I noticed them when going over the CodeFormatter diff and I think it's too small a change for a separate PR.
4. Removing unused field and override in base class, which was revealed by [build failure](http://dotnet-ci.cloudapp.net/job/dotnet_roslyn/job/master/job/windows_debug_unit32_prtest/2437/) after CodeFormatter renamed field in a derived class.
5. Reverting renaming of fields used in `NameOf` (caused [this build failure](http://dotnet-ci.cloudapp.net/job/dotnet_roslyn/job/master/job/windows_debug_unit32_prtest/2438/)).

This PR is fairly large, which might make it hard to review. It could make sense to split it into multiple PRs or commits based on groups of projects or based on formatter rules.
</Description>
    <CreatedDate>13/08/2016</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13153</PullRequestID>
        <IssueID>12709</IssueID>
        <Title>Incorrect indentation in LambdaRewriter</Title>
        <Description>While looking at [LambdaRewriter.cs](https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LambdaRewriter/LambdaRewriter.cs), I noticed that some lines are incorrectly indented. Specifically, it's the lines fixed by [this commit in my fork](https://github.com/svick/roslyn/commit/31faee02e1113e0e27d178d6ca10e0b0713020b0).

As far as I can tell, the incorrect changes are from [this merge](https://github.com/dotnet/roslyn/commit/e75ca21dffedb84f73a26b3038b6612236336a35#diff-e76253173c2d97f7e497cf28434637f5) from September 2015.

I haven't checked if other files have similar problems.

[The _Contributing Code_ page in the repo wiki](https://github.com/dotnet/roslyn/wiki/Contributing-Code#code-formatter) says that Code Formatter is regularly run on the code in the repo. Presumably, running it would fix the indentation, so I guess it hasn't been run at least since September 2015?

My questions are: Should I just submit a PR with the commit above? Or should someone run the Code Formatter?
</Description>
        <CreatedDate>24/07/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12977</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Shiney</FixedByID>
    <Title>Fix #12708 and add two tests for it</Title>
    <Description>Fixes issue #12708 
</Description>
    <CreatedDate>06/08/2016</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12977</PullRequestID>
        <IssueID>12708</IssueID>
        <Title>CS0123 (no overload matches delegate) should offer 'Generate method' quick action</Title>
        <Description>**Version Used**: 15.0.25428.1/2.0.0.60620

**Steps to Reproduce**:

``

**Expected Behavior**:
Quick action to generate `OnChanged(object, NotifyCollectionChangedEventArgs)` method to be offered.

**Actual Behavior**:
`CS0123 No overload for 'OnChanged' matches delegate 'NotifyCollectionChangedEventHandler'`
No quick actions available here.
</Description>
        <CreatedDate>24/07/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12685</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Fix crash in inline rename</Title>
    <Description>This change fixes #7566

The change adds a check for null after trying to get the snapshot of a supposedly open document. This can fail due to the weak reference map used to associate source texts with their editor text snapshots.

@rchande @tmat @Pilchie  please review
</Description>
    <CreatedDate>22/07/2016</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12685</PullRequestID>
        <IssueID>7566</IssueID>
        <Title>"Unexpected null" from extract method</Title>
        <Description>While trying to extract method, got this exception from the rename phase. Dump at rchande\dumps\nulltextbuffer.dmp

``

&gt;   Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.InitializeOpenBuffers(Microsoft.VisualStudio.Text.SnapshotSpan triggerSpan) Line 175    C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.InlineRenameSession(Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService renameService, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.VisualStudio.Text.SnapshotSpan triggerSpan, Microsoft.CodeAnalysis.Editor.IInlineRenameInfo renameInfo, Microsoft.CodeAnalysis.Editor.Host.IWaitIndicator waitIndicator, Microsoft.CodeAnalysis.Editor.ITextBufferAssociatedViewService textBufferAssociatedViewService, Microsoft.VisualStudio.Text.ITextBufferFactoryService textBufferFactoryService, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Editor.IRefactorNotifyService&gt; refactorNotifyServices, Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener asyncListener) Line 140 C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService.StartInlineSession(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan textSpan, System.Threading.CancellationToken cancellationToken) Line 62   C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.ExtractMethod.AbstractExtractMethodCommandHandler.Execute(Microsoft.VisualStudio.Text.ITextBuffer textBuffer, Microsoft.VisualStudio.Text.Editor.ITextView view, System.Threading.CancellationToken cancellationToken) Line 174  C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.ExtractMethod.AbstractExtractMethodCommandHandler.ExecuteCommand.AnonymousMethod__0(Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext) Line 104    C#
&gt;     Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(string title, string message, bool allowCancel, System.Action&lt;Microsoft.CodeAnalysis.Editor.Host.IWaitContext&gt; action)  Unknown
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.ExtractMethod.AbstractExtractMethodCommandHandler.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs args, System.Action nextHandler) Line 107   C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers&lt;Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs&gt;(System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Editor.ICommandHandler&lt;Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs&gt;&gt; commandHandlers, Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs args, System.Action lastHandler) Line 104  C#
&gt;     Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.Execute&lt;Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs&gt;(Microsoft.VisualStudio.Utilities.IContentType contentType, Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs args, System.Action lastHandler) Line 71  C#
&gt;     Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteExtractMethod(Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType, System.Action executeNextCommandTarget)  Unknown
&gt;     Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut, Microsoft.VisualStudio.Text.ITextBuffer subjectBuffer, Microsoft.VisualStudio.Utilities.IContentType contentType)    Unknown
&gt;     Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.Exec(ref System.Guid pguidCmdGroup, uint commandId, uint executeInformation, System.IntPtr pvaIn, System.IntPtr pvaOut) Unknown
&gt;     Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)   Unknown
&gt;     Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)    Unknown
&gt;     Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindow.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)  Unknown
&gt;     Microsoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.DocumentObjectSite.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut)  Unknown
&gt;     Microsoft.VisualStudio.Platform.WindowManagement.dll!Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Exec(ref System.Guid pguidCmdGroup, uint nCmdID, uint nCmdexecopt, System.IntPtr pvaIn, System.IntPtr pvaOut) Unknown
</Description>
        <CreatedDate>17/12/2015</CreatedDate>
        <ClosedDate>08/01/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Duplicate</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11743</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zanqi</FixedByID>
    <Title>Default constructor reference: fix issue #11049</Title>
    <Description>Add the logic into the finder. Fix issue #11049
</Description>
    <CreatedDate>03/06/2016</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11743</PullRequestID>
        <IssueID>11049</IssueID>
        <Title>Find All References on a constructor, only finds explicit callers via : base()</Title>
        <Description>1.

``

Find all references on Abstract's constructor.

As expected find expected usage from base() call.
</Description>
        <CreatedDate>04/05/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11004</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>aochagavia</FixedByID>
    <Title>Add a null check for TextLoader parameter in DocumentInfo.Create()</Title>
    <Description>Fixes #7310
</Description>
    <CreatedDate>30/04/2016</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11004</PullRequestID>
        <IssueID>7310</IssueID>
        <Title>DocumentInfo.Create() allows you to create instances with a null TextLoader</Title>
        <Description>This doesn't really make sense. A document you can't get the text of? Do we use this somewhere, or should a null check be added?
</Description>
        <CreatedDate>07/12/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10863</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>bmay2</FixedByID>
    <Title>Remove as/is after various expressions</Title>
    <Description>Includes lambdas, anonymous methods, and expressions of type 'void' or 'method group'

Fixes #8319
</Description>
    <CreatedDate>25/04/2016</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10863</PullRequestID>
        <IssueID>8319</IssueID>
        <Title>Extra as/is in IntelliSense</Title>
        <Description>Expressions of type 'void' and 'method group' should only show 'is' in IntelliSense, not 'as'. 
Arguably, they shouldn't show 'is' either, since it will always result in a warning, but 'as' will always result in an error, so it certainly shouldn't be shown. 

Similarly, lambdas &amp; anonymous methods shouldn't show any IntelliSense afterwards, as neither is nor as is applicable. 

Source: 

``

Press Ctrl+Space at the end of each line. 
</Description>
        <CreatedDate>02/02/2016</CreatedDate>
        <ClosedDate>02/03/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10072</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>kuhlenh</FixedByID>
    <Title>Suggests parameter name for IntroduceLocal on an argument</Title>
    <Description>Fixes #2423.

@dotnet/roslyn-ide for review :tada: 
</Description>
    <CreatedDate>24/03/2016</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10072</PullRequestID>
        <IssueID>2423</IssueID>
        <Title>IntroduceLocal should take into account parameter name when naming locals.</Title>
        <Description>Say i have:

``

If i introduce local for `int.Parse(a)` then we should suggest calling this local 'start' because of the name of the parameter i'm calling.
</Description>
        <CreatedDate>01/05/2015</CreatedDate>
        <ClosedDate>08/05/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Feature Request</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>9356</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dimalypai</FixedByID>
    <Title>Fix cref's IntelliSense ordering for generic types (#8623)</Title>
    <Description>Comparing on symbol text resulted in the opposite order, because of the ordering between &gt; or } and , (comma). More discussion was happening in the issue #8623.
</Description>
    <CreatedDate>01/03/2016</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>9356</PullRequestID>
        <IssueID>8623</IssueID>
        <Title>cref's IntelliSense orders types by longest arity</Title>
        <Description>![image](https://cloud.githubusercontent.com/assets/1103906/13001914/3708d324-d11f-11e5-83ac-acacdcc80aef.png)

It seems to me, that this order should be reversed to match the sig helper and probably the more used type:

![image](https://cloud.githubusercontent.com/assets/1103906/13001925/510c6402-d11f-11e5-861a-652bcbf2c45b.png)
</Description>
        <CreatedDate>12/02/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7849</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Unsupported local signature should fail with unreported exception</Title>
    <Description>Fixes #4141
</Description>
    <CreatedDate>08/01/2016</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7849</PullRequestID>
        <IssueID>4141</IssueID>
        <Title>UnsupportedSignatureContent in MetadataUtilities.GetLocalInfo</Title>
        <Description>``
</Description>
        <CreatedDate>27/07/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>Interactive-Debugging</Label>
          <Label>Tenet-Telemetry</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4556</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>esdrubal</FixedByID>
    <Title>Fixes for scripting tests in Mono</Title>
    <Description>This fixes tests that do not pass in Mono except those that require GAC and

Roslyn.Services.UnitTests.MetadataShadowCopyProviderTests.Modules [#33007](https://bugzilla.xamarin.com/show_bug.cgi?id=33007)
Microsoft.CodeAnalysis.Scripting.CSharp.UnitTests.InteractiveSessionTests.AssemblyResolution [#32966](https://bugzilla.xamarin.com/show_bug.cgi?id=32966)
</Description>
    <CreatedDate>14/08/2015</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4556</PullRequestID>
        <IssueID>33007</IssueID>
        <Title>non-nullability of anonymous type properties in lambdas are messed up (part 2)</Title>
        <Description>here's another one:

``
there's nowhere there where anything should be nullable.

_Originally posted by @Spongman in https://github.com/dotnet/roslyn/issues/32465#issuecomment-454246264_</Description>
        <CreatedDate>31/01/2019</CreatedDate>
        <ClosedDate>22/02/2019</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Nullable Reference Types</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4556</PullRequestID>
        <IssueID>32966</IssueID>
        <Title>Merge dev16.0-preview3 to master</Title>
        <Description>
This is an automatically generated pull request from dev16.0-preview3 into master.

``

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.</Description>
        <CreatedDate>30/01/2019</CreatedDate>
        <ClosedDate>30/01/2019</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>25082</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>Fix #17761</Title>
    <Description>Fix #17761</Description>
    <CreatedDate>27/02/2018</CreatedDate>
    <ClosedDate>27/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>25082</PullRequestID>
        <IssueID>17761</IssueID>
        <Title>[Bug] Forgot to update Localisation of Feature String.</Title>
        <Description>[Comment in code](https://github.com/dotnet/roslyn/blob/1e38875dd13c712bf347050d7b27512bc8365a13/src/Compilers/VisualBasic/Portable/Parser/Parser.vb#L6171)
``

</Description>
        <CreatedDate>12/03/2017</CreatedDate>
        <ClosedDate>26/03/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Localization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>25070</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Fix code that violated the (!Alive || !Reported) control-flow-analysis invariant.</Title>
    <Description>### Customer scenario

An assertion error in the compiler arises when using a debug build of Roslyn and analyzing control-flow in code in which there is a "fall through" error in a switch statement.

### Bugs this fixes

Fixes #25043

### Workarounds, if any

None needed (customers do not usually use a Debug build).

### Risk

Tiny. The fix is the deletion of code that simply violates asserted invariants.

### Performance impact

Deletion of code could, if anything, speed up the compiler.

### Is this a regression from a previous update?

No; longstanding bug not previously detected.

### Root cause analysis

Unusual combination of conditions not hit in existing tests.

### How was the bug found?

Customer reported.

### Test documentation updated?

N/A

@dotnet/roslyn-compiler May I please have a couple of reviews of this ultra-tiny bug fix?
</Description>
    <CreatedDate>27/02/2018</CreatedDate>
    <ClosedDate>27/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>25070</PullRequestID>
        <IssueID>25043</IssueID>
        <Title>Assertion failure in ControlFlowPass.IntersectWith with local function inside switch statement</Title>
        <Description>1. Checkout master &amp; run a debug build of VisualStudioSetup.Next
2. Paste the following code:
``
3. Select the line with `switch (true)` or any line inside the switch statement. This repros most consistently when selecting the whole line by clicking in the left margin in VS.

This is what I get:
![image](https://user-images.githubusercontent.com/11444821/36645188-474f4a6a-1a65-11e8-9e7f-08ae262f29aa.png)
</Description>
        <CreatedDate>25/02/2018</CreatedDate>
        <ClosedDate>27/02/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>25035</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Remove Binder.CheckFeatureAvailability that uses useSiteDiagnostics</Title>
    <Description>Fixes #25028

cc @jcouv @AlekseyTs 
@dotnet/roslyn-compiler for review</Description>
    <CreatedDate>24/02/2018</CreatedDate>
    <ClosedDate>28/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>25035</PullRequestID>
        <IssueID>25028</IssueID>
        <Title>Fix `GetStackAllocConversion` and remove `Binder.CheckFeatureAvailability` method</Title>
        <Description>During overload resolution or conversion classification, we use use-site diagnostics to report problems with symbols that might affect the correctness of result. 
`GetStackAllocConversion` should not be putting language-version-related diagnostics as use-site diagnostics since there was nothing wrong with symbols. Also, we don't want language version to affect the result of the binding (including conversion classification).

We should review this method's use of use-site diagnostics to comply with this guideline.

This was reported by @AlekseyTs in a PR that was also going to mis-use use-site diagnostics (https://github.com/dotnet/roslyn/pull/24913#discussion_r170335206).

``

Tagging @VSadov @OmarTawfik </Description>
        <CreatedDate>24/02/2018</CreatedDate>
        <ClosedDate>28/02/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-Design Debt</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>25022</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Restrict overload stress tests to release</Title>
    <Description>Only run our overload performance stress suites in Release. The suites guard against
overload bugs which previously caused the compiler to virtually hang.

The situation we're guarding against is algorithm flaws in the compiler that would
easily reproduce even in release code. This is evidenced by the fact that customers
found this code on released compilers :)

This stress though causes an unacceptable increase in time to run the suites in
DEBUG mode. The semantic tests jump from 3-4 minutes of execution to 12-13. There is
no extra value gained by running these in DEBUG hence we're disabling them
in that context.

closes #25004
</Description>
    <CreatedDate>23/02/2018</CreatedDate>
    <ClosedDate>26/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>25022</PullRequestID>
        <IssueID>25004</IssueID>
        <Title>OverloadResolutionPerfTests should be RELEASE only</Title>
        <Description>`OverloadResolutionPerfTests` should be `RELEASE` only to avoid overhead of additional asserts, etc.</Description>
        <CreatedDate>22/02/2018</CreatedDate>
        <ClosedDate>01/03/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>24965</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>SubstituteNoPiaLocalType - use comparison of SpecialTypes to match bases across distinct core libraries.</Title>
    <Description>Fixes #24964.

### Customer scenario

From https://github.com/dotnet/project-system/issues/2954:
1. git clone github.com/dotnet/projectsystem
2. git checkout 4d3123c
3. Open ProjectSystem.sln 

Observe massive amount of unexpected errors like:
```
Error	CS1748	Cannot find the interop type that matches the embedded interop type 'Microsoft.VisualStudio.Imaging.Interop.ImageMoniker'. Are you missing an assembly reference?	Microsoft.VisualStudio.ProjectSystem.Managed.VS.UnitTests	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.VS.UnitTests\Mocks\IDependencyModelFactory.cs	125	Active
```

### Bugs this fixes

#24964
https://github.com/dotnet/project-system/issues/2954

### Workarounds, if any

Target the same version of mscorlib in projects that depend on each other

### Risk

Low

### Performance impact

Low perf impact because no extra allocations/no complexity changes

### Is this a regression from a previous update?

No

### Root cause analysis

A test gap. A unit-test is added.

### How was the bug found?

Internal customer.

### Test documentation updated?

N/A</Description>
    <CreatedDate>21/02/2018</CreatedDate>
    <ClosedDate>22/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>24965</PullRequestID>
        <IssueID>24964</IssueID>
        <Title>Unexpected error about inability to locate canonical definition for a NoPia local type when different core libraries are involved</Title>
        <Description>``

Expected:
Actual:
                // (6,9): error CS1748: Cannot find the interop type that matches the embedded interop type 'Test'. Are you missing an assembly reference?
                //         UsePia1.M1();
                Diagnostic(ErrorCode.ERR_NoCanonicalView, "UsePia1.M1").WithArguments("Test").WithLocation(6, 9)
Diff:
++&gt;                 Diagnostic(ErrorCode.ERR_NoCanonicalView, "UsePia1.M1").WithArguments("Test").WithLocation(6, 9)
</Description>
        <CreatedDate>21/02/2018</CreatedDate>
        <ClosedDate>22/02/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>24965</PullRequestID>
        <IssueID>24964</IssueID>
        <Title>Unexpected error about inability to locate canonical definition for a NoPia local type when different core libraries are involved</Title>
        <Description>``

Expected:
Actual:
                // (6,9): error CS1748: Cannot find the interop type that matches the embedded interop type 'Test'. Are you missing an assembly reference?
                //         UsePia1.M1();
                Diagnostic(ErrorCode.ERR_NoCanonicalView, "UsePia1.M1").WithArguments("Test").WithLocation(6, 9)
Diff:
++&gt;                 Diagnostic(ErrorCode.ERR_NoCanonicalView, "UsePia1.M1").WithArguments("Test").WithLocation(6, 9)
</Description>
        <CreatedDate>21/02/2018</CreatedDate>
        <ClosedDate>22/02/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>24945</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Revert "Enable multicore JIT in the compilers (#23173)"</Title>
    <Description>This reverts commit eed147d330e92a55cb2daa26acb28fcde1776f04.

We've seen crashes that appear to be involved with multicore JIT that
only started soon after multicore JIT was enabled for the compiler
(tracked in #23846). This change disables multicore JIT until we can fix
the root cause of the crashes.

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;
</Description>
    <CreatedDate>20/02/2018</CreatedDate>
    <ClosedDate>20/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>24945</PullRequestID>
        <IssueID>23846</IssueID>
        <Title>Intermittent error "csc.dll exited with code 255"</Title>
        <Description>**Version Used**: 
The version embedded in the Dotnet Sdk version `2.2.0-preview1-007796`.

**Steps to Reproduce**:

1. Run `./build.cmd` in aspnet/Universe. Build may or may not fail. Seemingly even with the same commits.

**Expected Behavior**:
Successful compilation.

**Actual Behavior**:
Recieve error: `C:\BuildAgent\work\33bdfc1cae7b2a38\.dotnet\x64\sdk\2.2.0-preview1-007522\Roslyn\Microsoft.CSharp.Core.targets(84,5): error MSB6006: "csc.dll" exited with code 255.`

Tracked [here](aspnet/Universe#699) on the ASP.NET end. Complete logs can be found [here](http://aspnetci/viewLog.html?tab=buildLog&amp;logTab=tree&amp;filter=debug&amp;expand=all&amp;buildId=370006&amp;_focus=8865) but unfortunately the above error seems to be the only relevant part. If there's anything we can do to gather more data from this let us know, we can deploy that then update the issue with the new information.</Description>
        <CreatedDate>18/12/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>24917</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Invoke NullableWalker for all methods in DEBUG</Title>
    <Description>Some existing `NullableWalker` tests are now skipped. Those tests will be re-enabled in a subsequent PR.

Extracted from #23981.

Please ignore the first commit which is PR #24901.</Description>
    <CreatedDate>17/02/2018</CreatedDate>
    <ClosedDate>20/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>24917</PullRequestID>
        <IssueID>23981</IssueID>
        <Title>Handle conversions with nested nullability in flow analysis</Title>
        <Description>Initial binding should be ignoring nullability with nullability handled in `NullableWalker` only.</Description>
        <CreatedDate>30/12/2017</CreatedDate>
        <ClosedDate>19/03/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>PR For Personal Review Only</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>24917</PullRequestID>
        <IssueID>24901</IssueID>
        <Title>Move Result calculated in flow analysis from NullableWalker.LocalState to NullableWalker</Title>
        <Description>Extracted from https://github.com/dotnet/roslyn/pull/23981.</Description>
        <CreatedDate>16/02/2018</CreatedDate>
        <ClosedDate>20/02/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>24904</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Use LHS of ref-assignment for ref-readonly</Title>
    <Description>The spec for ref-reassignment is that the LHS of the ref-reassignment
expression is the ref-readonlyness of the LValue produced by the
expression. That is, if the LHS of a ref assignment is readonly, the
resulting LValue is as well.

This PR also fixes a related issue for ref-like assignments, where the
resulting lifetime of the assignment was decided based on the RHS,
instead of the LHS.

Fixes #24874</Description>
    <CreatedDate>16/02/2018</CreatedDate>
    <ClosedDate>27/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>24904</PullRequestID>
        <IssueID>24874</IssueID>
        <Title>Ref reassignment should propagate `readonly` as proposed.</Title>
        <Description>- if LHS is readonly, the whole expression is readonly

It looks like the logic above is NYI.

Example:

``</Description>
        <CreatedDate>15/02/2018</CreatedDate>
        <ClosedDate>05/03/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Ref Reassignment</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23519</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Remove the use of Parallel.ForEach in ClsComplianceChecker</Title>
    <Description>### Customer scenario

Running analyzer during a build is slower than it should be, with the analyzer driver contributing substantial overhead even when the analyzers themselves are lightweight.

### Bugs this fixes

Fixes #23459

### Workarounds, if any

None needed

### Risk

Low.

### Performance impact

15-20% reduction in allocations for running IDE analyzers. The benefits extend to other analyzers that call GetDiagnostics, with a 30-70% reduction in execution time for analyzers that depend on compiler diagnostics.

### Is this a regression from a previous update?

No.

### Root cause analysis

AnalyzerRunner is a new tool for helping us test analyzer performance in isolation.

### How was the bug found?

AnalyzerRunner.

### Test documentation updated?

No.</Description>
    <CreatedDate>01/12/2017</CreatedDate>
    <ClosedDate>02/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23519</PullRequestID>
        <IssueID>23459</IssueID>
        <Title>ClsComplianceChecker allocations impact performance of unrelated analyzers</Title>
        <Description>**Version Used**: 15.5 Preview 4

**Steps to Reproduce**:

Use AnalyzerRunner to run all CSharpFeatures analyzers an Orchard.sln.

**Results**:

The `ClsComplianceChecker` results in substantial performance overhead. One primary cause of this impact is allocation rates due to the use of `Parallel.For`. This checker is responsible for ~20% of the overall allocations during analyzer testing. Alternative approaches that produce less GC overhead should be considered.

`ClsComplianceChecker` ends up called indirectly by `SyntaxTreeSemanticModel.GetDiagnostics`, which is in turn used by several other analyzers:

* Remove Unnecessary Imports
* Remove Unreachable Code
* Inline Declaration</Description>
        <CreatedDate>29/11/2017</CreatedDate>
        <ClosedDate>03/02/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23498</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Added support for pattern matching syntax to smart variable completion provider</Title>
    <Description>### Customer scenario

The pattern matching syntax is used with an explicit type name, but code completion does not assist the user in typing the name of the new variable.

### Bugs this fixes

Fixes #23497

### Workarounds, if any

Type the variable name.

### Risk

Low. The new code has many tests and only applies to pattern matching cases.

### Performance impact

Negligible. The algorithm used for pattern matching syntax is the same as the one used for other declaration locations.

### Is this a regression from a previous update?

No.

### Root cause analysis

Lack of testing for this case of declaring variables. Tests are now in place.

### How was the bug found?

Reported by external user.

### Test documentation updated?

No.</Description>
    <CreatedDate>30/11/2017</CreatedDate>
    <ClosedDate>23/01/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23498</PullRequestID>
        <IssueID>23497</IssueID>
        <Title>Smart variable naming should support pattern matching syntax</Title>
        <Description>**Version Used**: 
VS 2017 15.4

**Steps to Reproduce**:

``
1. Put the cursor to $$
2. Try to invoke completion

**Expected Behavior**:
Completion should provide variable names

**Actual Behavior**:
Nothing happen</Description>
        <CreatedDate>30/11/2017</CreatedDate>
        <ClosedDate>23/01/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23457</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Avoid skewing analysis time when logging analyzer times</Title>
    <Description>### Customer scenario

A user attempts to run analyzers through the Roslyn API for performance testing. The measured performance overhead is significantly greater than the observed overhead for the analyzer in other cases.

### Bugs this fixes

N/A

### Workarounds, if any

None

### Risk

Low. The code was only intended to add stability to analyzer performance testing. After running the code through AnalyzerRunner, measurements indicated that the approach caused substantial performance overhead which obscured the true performance of the analyzers. The issue was most apparent during document edit testing (#23104).

### Performance impact

For applications like Visual Studio, no change in performance. For some applications using the Roslyn API, e.g. AnalyzerRunner, performance is either unchanged or improved.

### Is this a regression from a previous update?

No.

### Root cause analysis

Analyzer performance was only tested in limited scenarios previously.

### How was the bug found?

AnalyzerRunner

### Test documentation updated?

No.</Description>
    <CreatedDate>29/11/2017</CreatedDate>
    <ClosedDate>06/01/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23457</PullRequestID>
        <IssueID>23104</IssueID>
        <Title>Analyzer runner: differential cost for documents</Title>
        <Description>During recent performance investigations, we've observed cases where individual analyzers were costly within the context of specific documents in the solution. To improve performance in transient cases, it would be exceptionally valuable to do the following:

``

At the end of the test, a table could be presented of the most expensive analyzers in the context of specific problematic documents.</Description>
        <CreatedDate>09/11/2017</CreatedDate>
        <ClosedDate>19/05/2018</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23448</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>CyrusNajmabadi</FixedByID>
    <Title>Simplify diagnostic tagging by making it use the standard tagging model.</Title>
    <Description>### Customer scenario

User is working on a big solution and switching between git branches multiple times or close and reopen solutions multiple times. and on some unfortunate cases, VS will crash with out of memory exception. 

### Bugs this fixes

Fixes #24055
Fixes [DevDiv 512757](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/512757)

Supersedes #22920, #23377, #23409, #23411

### Workarounds, if any

after each git branch switching or solution open/close, give VS sometimes to process pending works enqueued by the operation.

### Risk

this simplify our diagnostic tagger dramatically. so there is a risk where behavior might not exactly same as before. but we believe this is right direction to go. 

### Performance impact

this should remove OOM due to too many pending UI work items completely. that is source of most of our OOM crash.

### Is this a regression from a previous update?

No

### Root cause analysis

previously, diagnostic service didn't support pull model for all diagnostics source. so, tagger used event (push model) to hold onto last reported diagnostics and later use that to report tags. and that made us to use custom logic for the tagger which ends up forcing us to use UI thread to synchronize many states to remove potential race. and that caused us to push too many work items to UI thread in certain case such as git branch switching.

now, diagnostic service fully supporting pull model for all sources, this moves diagnostic taggers to follow our tagger framework which doesn't require UI thread for state synchronization. removing the root cause of OOM from the picture completely.

### How was the bug found?

MemoryWatson

....

more dev detail.

From a conversation with @heejaechang https://github.com/dotnet/roslyn/pull/23409#issuecomment-347675771 

A while back the diagnostics subsystem had a limitation where you could only hear about some diagnostics if you explicitly listened for diagnostic events.  i.e. if you weren't listenting and capturing those events, you couldn't go back and ask for those diagnostics later.  This meant that we couldn't do diagnostic tagging (squiggles/fading/suggestions) like we did normal tagging. Normal tagging hears about events, pauses a bit, then goes and gets all the data necessary later to produce the tags.  Because that data wasn't available 'later', diagnostic tagging had to aggregate the info and contort things to fit into the tagging infrastructure.

This restriction from the diagnostics service no longer exists. THat means we can great simplify how we do our tagging computation.  </Description>
    <CreatedDate>28/11/2017</CreatedDate>
    <ClosedDate>16/01/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23448</PullRequestID>
        <IssueID>24055</IssueID>
        <Title>Microsoft CodeAnalysis OOM Exception </Title>
        <Description>Ported from https://github.com/dotnet/roslyn-analyzers/issues/1503

-----------------------------
@chillryan

I've reported this issue through the visual studio feedback tool [see link](https://developercommunity.visualstudio.com/content/problem/174842/visual-studio-155-crashes-when-switching-git-branc.html) but figured I'd try my chances posting here.

I'm using the Code Analysis 2017 extension for VS 2017 15.5. In looking at the stack trace, I can only assume that since the extension is running inside the devenv process, when its analysis a loaded solution, it hits the OOM. 

Since I've hit this situation a very frequent basis, I've disabled solution analysis for C# projects hoping that will help. I'll report back here if there are any changes or comment on the visual studio feedback link posted prior.
  </Description>
        <CreatedDate>04/01/2018</CreatedDate>
        <ClosedDate>16/01/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23448</PullRequestID>
        <IssueID>22920</IssueID>
        <Title>reduce diagnostic tagger's usages of UI thread for synchronization</Title>
        <Description>**Customer scenario**

Customer is working on a VS. doing code fix and watching previews, applying fix all and etc, and suddenly VS crash due to OOM.

**Bugs this fixes:**

https://devdiv.visualstudio.com/DevDiv/_workitems/edit/512757

**Workarounds, if any**

there is no easy workaround.

**Risk**

I don't see risk of crash, but since it is highly visible area (tagger), we probably want more dogfooding time for this.

**Performance impact**

it should move more work to background thread, and reduce need for UI thread. in turn, improving responsiveness and memory.

**Is this a regression from a previous update?**

Yes.

**Root cause analysis:**

this one is hard to pin point to 1 issue. but caused by several different fixes. 

first, we made all state management to happen on UI thread to remove any potential race. and that caused us to use more FG than before.

second, we merged preview only tagger with regular diagnostic tagger, making preview tagger to be as expansive as normal diagnostic tagger meaning it uses same amount of UI threads since it now has same states tracking as normal ones.

third, along with that, some filtering on BG got removed which was there to reduce work on FG since all those are changed to be done on FG. 

forth, diagnostic tagger didn't pass cancellation token all the way through, leaving already cancelled works in the UI work queue.

fifth, foreground work queue cleaned up cancelled works too lazily and let cancelled work to pile up.

..

this reduces demand for UI thread, but due to the fact that UI thread can be blocked (due to exclusive operation running such as Fix All, or model dialog box or Wait dialog box and more), we can't completely get rid of pending requests for UI threads. but with this change, we should have way less chance to hit 2.1 million pending UI requests.

**How was the bug found?**

MemoryWatson
</Description>
        <CreatedDate>31/10/2017</CreatedDate>
        <ClosedDate>29/11/2017</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23448</PullRequestID>
        <IssueID>23377</IssueID>
        <Title>Batch up and flatten diagnostic updates.</Title>
        <Description>In response to https://github.com/dotnet/roslyn/pull/22920#issuecomment-346950158

This is a tweak to the diagnostic taggers to improve how they respond to a flood of notifications from the underlying diagnostic services.  There are a few improvements as part of this PR.  

1. We batch up diagnostic notifications over a 50ms window and process them all at once, instead of enqueing and processing each notification on the UI thread individually.
2. Because we're batching, we can do a lot of preprocessing of the notifications to throw out information that has been superceded.  For example, if we get a notification that we're actually removing all the diagnostics for a provider, we can just ignore all previous diagnostic-creates that we haven't processed yet.  Also, any more diagnostic creations we hear about will supercede previous diagnostic creations for that provider.  
</Description>
        <CreatedDate>26/11/2017</CreatedDate>
        <ClosedDate>16/01/2018</ClosedDate>
        <Labels />
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23448</PullRequestID>
        <IssueID>23409</IssueID>
        <Title>Batch up and flatten diagnostic updates, second approach.</Title>
        <Description>This is a followup to https://github.com/dotnet/roslyn/pull/23377.  The primary difference between this PR and that one is that we also do filtering of diagnostic events on teh BG (acknowledging that this is racey, but just as racey as before).</Description>
        <CreatedDate>28/11/2017</CreatedDate>
        <ClosedDate>16/01/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Community</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23448</PullRequestID>
        <IssueID>23411</IssueID>
        <Title>Batch up and flatten diagnostic updates, third approach.</Title>
        <Description>Followup to https://github.com/dotnet/roslyn/pull/23409.

But with a simpler batching model where we only have to store the latest args for any id+doc pair.  </Description>
        <CreatedDate>28/11/2017</CreatedDate>
        <ClosedDate>16/01/2018</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23357</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>recursive-patterns(4): Parsing the switch expression.</Title>
    <Description>- Disallow `default` as a pattern to reduce confusion in the match expression. See #23499. Only a warning in `case default:`.
- Syntax nodes and parsing for the match expression
- Change punctuation for switch expression per LDM advice from () to {}
- Add a when clause to the switch expression's cases
- Add support for binding the switch expression (but not decision tree)
- Implement flow analysis for switch expression
- Adjust precedence of the constant pattern in a switch expression arm.
- Implement and test lazily inferring variables in the match expression.
- Test that we do not permit a short discard as the _pattern_ of an *is-pattern-expression* (per LDM).
- Forbid a parenthsized pattern to be used as a single-element deconstruct without additional disambiguating syntax, per 2017-11-20 LDM decision.
- Add a "var pattern" corresponding to deconstruction using a parenthesized designation.
- As part of the above, we now forbid the use of `var` as a pattern's type except in the var pattern, where it is forbidden to bind to a user-declared type. Requires compat council review.
- Add contextual keyword "var" for use in the *var-pattern*.

This is the fourth of several PRs for the implementation of recursive pattern-matching, each of which builds on the previous.</Description>
    <CreatedDate>22/11/2017</CreatedDate>
    <ClosedDate>27/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23357</PullRequestID>
        <IssueID>23499</IssueID>
        <Title>Disallow `default` as a constant pattern.</Title>
        <Description>The LDM has tentatively decided to disallow a `default` keyword (literal) as a constant pattern, in order to reduce confusion with "default" cases in switch statements and expressions. A programmer can always write `null`, `0`, or `'\0'` instead. This is technically a breaking change.

In a switch statement, the case label
`case default:`
is proposed to produce an error something like
`error CS8313: A default literal 'default' is not valid as a pattern. Use another literal (e.g. '0' or 'null') as appropriate. To match everything, use a discard pattern '_'.`
We already produce approximately this diagnostic, but as a warning.

In an _is-pattern_ expression and other places where patterns appear
`e is default`
is proposed to produce an error something like
`error CS8405: A default literal 'default' is not valid as a pattern. Use another literal (e.g. '0' or 'null') as appropriate. To match everything, use a discard pattern '_'.`

This will need review from the compatibility council.
</Description>
        <CreatedDate>30/11/2017</CreatedDate>
        <ClosedDate>10/12/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>22460</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>Made BoundNodeClassWriter an abstract class.</Title>
    <Description>Pulling the language specific parts into derived classes.
Part of the work for Issue #22461 

**Important this changes the layout of the generated files**
 * Currently just bound nodes.
So requires a carefully review to see if the changes hasn't affect the behave of the nodes.</Description>
    <CreatedDate>02/10/2017</CreatedDate>
    <ClosedDate>18/01/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>22460</PullRequestID>
        <IssueID>22461</IssueID>
        <Title>Refactoring Compiler Tools</Title>
        <Description>I'm looking at refactoring some of the compiler tools, so they can utilise upto date language features. abstractions and readability.
 * [BoundNodeClassWriter](https://github.com/dotnet/roslyn/blob/master/src/Tools/Source/CompilerGeneratorTools/Source/BoundTreeGenerator/BoundNodeClassWriter.cs) ( Covered in PR #22460)
This can be made abstract so the language specific aspects are implement in a derived class.
 * [SyntaxGenerator Tools should throw exceptions.](https://github.com/dotnet/roslyn/issues/22131)
Implement better reporting of issues and errors.
 * [Syntax.xml](https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Portable/Syntax/Syntax.xml)
Could do with better documentation on it's usage and expected structuring.
 * [BoundNodes.xml](https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Portable/BoundTree/BoundNodes.xml)
Could do with better documentation on it's usage and expected structuring.
</Description>
        <CreatedDate>02/10/2017</CreatedDate>
        <ClosedDate>31/10/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>22114</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>MaStr11</FixedByID>
    <Title>Class view should show nested private types if source code is available.</Title>
    <Description>**Customer scenario**

Class view should show nested private types if source code is available. See #21329 for the motivation of the request. 

Implementation remarks:
The new method `IncludeTypeMember` has the about the same structure as the existing method `IncludeMemberSymbol`. Most changes are related to the tests.

**Bugs this fixes:**

Fixes #21329

**Workarounds, if any**

None.

**Risk**

Might break class view or shows types in class view that are not relevant to the user.

**Performance impact**

Low.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Private type members were considered but private types were not.

**How was the bug found?**

Customer reported.

**Test documentation updated?**

Maybe https://msdn.microsoft.com/en-us/library/whks02wf.aspx needs to be adopted.</Description>
    <CreatedDate>14/09/2017</CreatedDate>
    <ClosedDate>14/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>22114</PullRequestID>
        <IssueID>21329</IssueID>
        <Title>Class View should show non-public nested types.</Title>
        <Description>**Version Used**: 

Visual Studio 2017 Community (v15.2)

**Steps to Reproduce**:

Type the following VB code into any kind of project (e.g. a console project)

``

Now open Class View directly (or put the caret on `PrivateInnerClass` and execute the `View.SynchronizeClassView` command, e.g. from the Immediate window).

**Expected Behavior**:

The Class View should show all classes (the outer class and all the nested inner classes with different visibility modifiers). If you use the `View.SynchronizeClassView` command on a non-public nested class, that should also jump to said class.

**Actual Behavior**:

Class View only shows `OuterClass` and `OuterClass.PublicInnerClass`. It does not show the `PrivateInnerClass` and `ProtectedInnerClass` and as a result, the `View.SynchronizeClassView` command also fails to navigate to those non-public nested classes. Ticking all the various "Show..." options in that Class View gear icon doesn't help.

I think the problem is that the nested types are non-public, because the same problem happens if you try this with non-public enum/struct/interface types.

I say this is a bug because if Class View can show me `OuterClass` for which I have the source code, it makes no sense to not show me `PrivateInnerClass` and `ProtectedInnerClass` as they are (by definition) also available in the same source code.</Description>
        <CreatedDate>04/08/2017</CreatedDate>
        <ClosedDate>14/02/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>22114</PullRequestID>
        <IssueID>21329</IssueID>
        <Title>Class View should show non-public nested types.</Title>
        <Description>**Version Used**: 

Visual Studio 2017 Community (v15.2)

**Steps to Reproduce**:

Type the following VB code into any kind of project (e.g. a console project)

``

Now open Class View directly (or put the caret on `PrivateInnerClass` and execute the `View.SynchronizeClassView` command, e.g. from the Immediate window).

**Expected Behavior**:

The Class View should show all classes (the outer class and all the nested inner classes with different visibility modifiers). If you use the `View.SynchronizeClassView` command on a non-public nested class, that should also jump to said class.

**Actual Behavior**:

Class View only shows `OuterClass` and `OuterClass.PublicInnerClass`. It does not show the `PrivateInnerClass` and `ProtectedInnerClass` and as a result, the `View.SynchronizeClassView` command also fails to navigate to those non-public nested classes. Ticking all the various "Show..." options in that Class View gear icon doesn't help.

I think the problem is that the nested types are non-public, because the same problem happens if you try this with non-public enum/struct/interface types.

I say this is a bug because if Class View can show me `OuterClass` for which I have the source code, it makes no sense to not show me `PrivateInnerClass` and `ProtectedInnerClass` as they are (by definition) also available in the same source code.</Description>
        <CreatedDate>04/08/2017</CreatedDate>
        <ClosedDate>14/02/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>22100</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Make analyzer diagnostics independent of the current warning level</Title>
    <Description>Fixes #20377

**Customer scenario**

Sets the C# compiler warning level to 1, 2, or 3 (instead of the default 4). Several IDE features stop working, including fading out unused `using` directives and all "suggestion" level editor hints.

**Bugs this fixes:**

Fixes #20377.

**Workarounds, if any**

Set the compiler warning level to 4, then manually disable warnings it introduces. This works, and warning level 4 is certainly recommended, but users are not likely to understand why the IDE is "not working" when the warning level changes.

**Risk**

Low.

* The behavior in default and overwhelming majority scenarios does not change
* The behavior the edge case where `/warn:0` is used for the compiler to only show "true" errors is retained
* Diagnostic severity is not tied to diagnostic warning level, so the change is not even observable in most cases

**Performance impact**

For most users, performance will not change at all. For users with customized warning levels, performance could drop, but only because we would now be showing diagnostic results which were previously suppressed at the filtering stage.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Almost no one uses warning level 3.

**How was the bug found?**

Observed broken functionality in [Microsoft/perfview](https://github.com/Microsoft/perfview).

**Test documentation updated?**

Unknown

&lt;!-- If this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting. --&gt;
</Description>
    <CreatedDate>13/09/2017</CreatedDate>
    <ClosedDate>16/01/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>22100</PullRequestID>
        <IssueID>20377</IssueID>
        <Title>Warning Level 3 breaks Remove Unused Usings and Simplify Type Name</Title>
        <Description>**Version Used**: 15.3 Preview 2.1

**Steps to Reproduce**:

1. Set C# warning level to 3
2. Add the following code

    ``

**Expected Behavior**:

1. `System.Threading` is indicated as an unused using directive, and the light bulb allows its removal
2. The `System.` qualification in `System.Action` is marked as unnecessary, and the light bulb allows the type to be simplified to `Action`

**Actual Behavior**:

1. Both using directives are indicated as used
2. `System.Action` is not indicated as overly qualified

Neither the light bulb nor the Remove and Sort Usings command may be used to make the desired corrections.</Description>
        <CreatedDate>21/06/2017</CreatedDate>
        <ClosedDate>16/01/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>22100</PullRequestID>
        <IssueID>20377</IssueID>
        <Title>Warning Level 3 breaks Remove Unused Usings and Simplify Type Name</Title>
        <Description>**Version Used**: 15.3 Preview 2.1

**Steps to Reproduce**:

1. Set C# warning level to 3
2. Add the following code

    ``

**Expected Behavior**:

1. `System.Threading` is indicated as an unused using directive, and the light bulb allows its removal
2. The `System.` qualification in `System.Action` is marked as unnecessary, and the light bulb allows the type to be simplified to `Action`

**Actual Behavior**:

1. Both using directives are indicated as used
2. `System.Action` is not indicated as overly qualified

Neither the light bulb nor the Remove and Sort Usings command may be used to make the desired corrections.</Description>
        <CreatedDate>21/06/2017</CreatedDate>
        <ClosedDate>16/01/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21472</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>CyrusNajmabadi</FixedByID>
    <Title>Better handle surrounding directives when inlining a local variable.</Title>
    <Description>### Customer scenario

The Inline Temporary Variable code fix is applied to code containing preprocessor directives. The operation fails to consider the syntax requirements of the preprocessor directives, and the resulting file is no longer valid code.

### Bugs this fixes

Fixes #21455

### Workarounds, if any

None.

### Risk

Low. Existing test behavior was not altered except where the previous code was obviously incorrect, and new tests were implemented to cover the new behavior.

### Performance impact

Low. There are no key algorithm changes and the approach is consistent with other cases needing similar patterns.

### Is this a regression from a previous update?

No.

### Root cause analysis

Tests were configured to ignore trivia by default (including preprocessor directives), so the validation described in previous unit tests did not match the actual validation occurring. The test suite was corrected in #21439, leaving this bug as a follow-up work item.

### How was the bug found?

Unit tests.

### Test documentation updated?

No.</Description>
    <CreatedDate>12/08/2017</CreatedDate>
    <ClosedDate>31/01/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21472</PullRequestID>
        <IssueID>21455</IssueID>
        <Title>Inline temporary leaves preprocessor directives inconsistent</Title>
        <Description>**Version Used**: 15.3 Preview 7

:link: Originally revealed by `InlineTemporaryTests.Preprocessor2` in #21439.

### Steps to Reproduce

1. Use the following code:

    ``
</Description>
        <CreatedDate>11/08/2017</CreatedDate>
        <ClosedDate>08/03/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21472</PullRequestID>
        <IssueID>21439</IssueID>
        <Title>Consider trivia when testing code fixes and refactorings</Title>
        <Description>* Change `ignoreTrivia` to default to false
* Fix tests so the expected test results accurately reflect reality, including trivia

**Reviewers:** The main item to verify is that this pull request only changes expected test outputs. Test inputs should remain the same. One (seemingly unavoidable) exception is indicated with a ⚠️ comment.

:memo: The changes to expected test results reveal a large number of bugs. These will be identified in comments in this PR, and bugs filed so they can be fixed later.</Description>
        <CreatedDate>11/08/2017</CreatedDate>
        <ClosedDate>11/08/2017</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20554</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>DustinCampbell</FixedByID>
    <Title>New Quick Info API</Title>
    <Description>This is a PR to create a new public Quick Info API (#11103)

- [x] Move @mattwar's original PR (#13623) forward to the latest master bits and get it building.
- [x] Get all tests passing and ensure Quick Info actually still works.
- [x] Update with @CyrusNajmabadi's comments on the original PR (#13623).
- [x] Close #13623.
- [x] Finalize public API surface area.

cc @dotnet/roslyn-ide </Description>
    <CreatedDate>29/06/2017</CreatedDate>
    <ClosedDate>16/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20554</PullRequestID>
        <IssueID>11103</IssueID>
        <Title>Make QuickInfo API public</Title>
        <Description>Needs to be moved to Features layer and redesigned for better separation between model and view.

Follow model for Completion API.

IQuickInfoProvider, needs to be divorced from WPF dependencies, needs consumption API
</Description>
        <CreatedDate>05/05/2016</CreatedDate>
        <ClosedDate>14/03/2020</ClosedDate>
        <Labels>
          <Label>0 - Backlog</Label>
          <Label>Area-IDE</Label>
          <Label>Concept-API</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20554</PullRequestID>
        <IssueID>13623</IssueID>
        <Title>Quick info api2</Title>
        <Description>@DustinCampbell @jasonmalinowski @Pilchie @dpoeschl @CyrusNajmabadi   please review

Here is my proposal for the new public QuickInfo API...  (note: the API as presented is not yet public.)

This is the "simple" form of the API, not the "almost as complicated as XML" form that I describe a few weeks ago.  It has one API to get the QuickInfoItem for a position in document, and that item simply lays out the data/text that we typically display for C# and VB.  It also includes information we use in the syntactic c# provider (that shows ranges of the original document where the matching open braces are).  The presenter then choses what to do with it.  There is no customization of the presenter on the editor side.

If other languages need different information and different presentation, the plan is to add those extra data times to the one QuickInfoItem class and change the single presenter to account for it.   Worst case scenario if we decide we want something drastically different in the future, then we invent QuickInfo2.
</Description>
        <CreatedDate>06/09/2016</CreatedDate>
        <ClosedDate>05/12/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20554</PullRequestID>
        <IssueID>13623</IssueID>
        <Title>Quick info api2</Title>
        <Description>@DustinCampbell @jasonmalinowski @Pilchie @dpoeschl @CyrusNajmabadi   please review

Here is my proposal for the new public QuickInfo API...  (note: the API as presented is not yet public.)

This is the "simple" form of the API, not the "almost as complicated as XML" form that I describe a few weeks ago.  It has one API to get the QuickInfoItem for a position in document, and that item simply lays out the data/text that we typically display for C# and VB.  It also includes information we use in the syntactic c# provider (that shows ranges of the original document where the matching open braces are).  The presenter then choses what to do with it.  There is no customization of the presenter on the editor side.

If other languages need different information and different presentation, the plan is to add those extra data times to the one QuickInfoItem class and change the single presenter to account for it.   Worst case scenario if we decide we want something drastically different in the future, then we invent QuickInfo2.
</Description>
        <CreatedDate>06/09/2016</CreatedDate>
        <ClosedDate>05/12/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20554</PullRequestID>
        <IssueID>13623</IssueID>
        <Title>Quick info api2</Title>
        <Description>@DustinCampbell @jasonmalinowski @Pilchie @dpoeschl @CyrusNajmabadi   please review

Here is my proposal for the new public QuickInfo API...  (note: the API as presented is not yet public.)

This is the "simple" form of the API, not the "almost as complicated as XML" form that I describe a few weeks ago.  It has one API to get the QuickInfoItem for a position in document, and that item simply lays out the data/text that we typically display for C# and VB.  It also includes information we use in the syntactic c# provider (that shows ranges of the original document where the matching open braces are).  The presenter then choses what to do with it.  There is no customization of the presenter on the editor side.

If other languages need different information and different presentation, the plan is to add those extra data times to the one QuickInfoItem class and change the single presenter to account for it.   Worst case scenario if we decide we want something drastically different in the future, then we invent QuickInfo2.
</Description>
        <CreatedDate>06/09/2016</CreatedDate>
        <ClosedDate>05/12/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20540</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Remove dependency on ICompletionSession and ISignatureHelpSession</Title>
    <Description>Fixes #20525
</Description>
    <CreatedDate>29/06/2017</CreatedDate>
    <ClosedDate>30/01/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20540</PullRequestID>
        <IssueID>20525</IssueID>
        <Title>AsyncCompletionService shouldn't depend on VS Editor's ICompletionSession</Title>
        <Description>http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/Implementation/Intellisense/Completion/AsyncCompletionService.cs,28

``

We have an IIntelliSensePresenter that depends on ICompletionSession which is an Editor concept. We need to find a way to remove this since it's only used by the Quick Info implementation. This prevents the Visual Studio for Mac team from implementing our own IIntelliSensePresenter.

cc @toddgrun</Description>
        <CreatedDate>28/06/2017</CreatedDate>
        <ClosedDate>24/07/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19777</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>Fix the Build.cmd and Test.cmd to handle filepath spaces.</Title>
    <Description>**Customer scenario**

The location of the repo is at location in which path contains a space(s).
Following the guidance online on how to build and test roslyn.
They follow the steps
 
1. `Restore.cmd` works
2. `Build.cmd` fails
3. `Test.cmd` fails

**Bugs this fixes:**
Provides a fix for Issue #19726.

**Workarounds, if any**
Only know work around (known to me) is to use a different location without containing a space.

**Risk**

Small *(I believe)*  only affects the powershell scripts and 1 project file. `BuildAndTest.proj`. 
Some unit tests will fail in this scenario, do the space in filepath issue.

**Performance impact**

Minor.

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

**Is this a regression from a previous update?**

**Root cause analysis:**

* How did we miss it? 
No testing of the command in setup with a space in the filepath.

*  What tests are we adding to guard against it in the future?
**Don't know**

**How was the bug found?**
Contributor ad hoc testing.
</Description>
    <CreatedDate>25/05/2017</CreatedDate>
    <ClosedDate>18/01/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19777</PullRequestID>
        <IssueID>19726</IssueID>
        <Title>Build.cmd and Test.cmd don't handle space in path.</Title>
        <Description>**Version Used**: 
Commit: [4a78582](https://github.com/dotnet/roslyn/commit/4a785825c725cb1a41edbaf47de9018a3c7e5c89)
``

**Steps to Reproduce**:

1. Requires a path contain a space.
2. Run `Build.cmd` or `Test.cmd`

**Expected Behavior**:
No Errors
**Actual Behavior**:
`MSBuild` thinks it is two projects, not one.</Description>
        <CreatedDate>23/05/2017</CreatedDate>
        <ClosedDate>31/10/2018</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19719</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>alrz</FixedByID>
    <Title>Check argument index range to avoid out of range exception</Title>
    <Description>Possible fix for #19135

/cc @Pilchie </Description>
    <CreatedDate>23/05/2017</CreatedDate>
    <ClosedDate>19/01/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19719</PullRequestID>
        <IssueID>19135</IssueID>
        <Title>CSharpUseNamedArgumentsCodeRefactoringProvider crashed with IndexOutOfRangeException</Title>
        <Description>VS Build: 26426.1 VSUWPT

``</Description>
        <CreatedDate>01/05/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19319</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>Fixes #13228 and #17761</Title>
    <Description>Application of #17906 on to more recently created branch off `master`, as to provide a solution to the weird merge issue that pull request had. No changes to the prior code have been made, only the commits have squashed down to a now single commit.

**Bugs this fixes:**

Fixes #13228 Unifies the implementation of Feature Checking into a utility module.
Fixes #17761 Implements the localisation of the Feature InterpolatedStrings 

**Risk**
Low, affected code is internal.

**Performance impact**
Similar, to existing

**How was the bug found?**

Code Inspection
</Description>
    <CreatedDate>06/05/2017</CreatedDate>
    <ClosedDate>27/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19319</PullRequestID>
        <IssueID>17906</IssueID>
        <Title>Fixes #13228 and Fixes #17761</Title>
        <Description>Unifies `CheckFeatureAvailability` from `Scanner` and `Parser` into a utility class.
Minimises the number of functions.
Incorporating recent changes by @jcouv  
Add in the missed localization of the feature `Interpolation Strings`. 
~Fixes a minor where we don't correctly free a pooled string builder.~</Description>
        <CreatedDate>16/03/2017</CreatedDate>
        <ClosedDate>06/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19319</PullRequestID>
        <IssueID>13228</IssueID>
        <Title>Need to see if we can unify implementations of CheckFeatureAvailability methods across Parser and Scanner</Title>
        <Description>In VB, both Parser and Scanner expose API called CheckFeatureAvailability, but each has its own implementation. Moreover, it looks like implementation in the Parser doesn't quite handle experimental features. 
</Description>
        <CreatedDate>17/08/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>Language-VB</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19319</PullRequestID>
        <IssueID>17761</IssueID>
        <Title>[Bug] Forgot to update Localisation of Feature String.</Title>
        <Description>[Comment in code](https://github.com/dotnet/roslyn/blob/1e38875dd13c712bf347050d7b27512bc8365a13/src/Compilers/VisualBasic/Portable/Parser/Parser.vb#L6171)
``

</Description>
        <CreatedDate>12/03/2017</CreatedDate>
        <ClosedDate>26/03/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Localization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13264</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>viceroypenguin</FixedByID>
    <Title>Add new options for switch case statement blocks</Title>
    <Description>Change "Indent case contents" to be a radio button for three options:
1. Always indent case block
2. Never indent case block
3. Only indent if case block is statements and not if case block is a block statement.

Fixes #12304. 
</Description>
    <CreatedDate>19/08/2016</CreatedDate>
    <ClosedDate>23/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13264</PullRequestID>
        <IssueID>12304</IssueID>
        <Title>Setting `Indent case contents` gives undesired behavior when braces are used to surround case contents.</Title>
        <Description>If I set 'Indent case contents' in the C# options, things look fine when I don't use curly braces to surround the case contents:

``
</Description>
        <CreatedDate>30/06/2016</CreatedDate>
        <ClosedDate>25/06/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12243</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tvand7093</FixedByID>
    <Title>Change Signature refactoring no longer appears when caret is on an expression body</Title>
    <Description>This is a fix for #8333. I wasn't sure where exactly the best place for the test case was, so I placed it in the best place I could find.
</Description>
    <CreatedDate>28/06/2016</CreatedDate>
    <ClosedDate>16/02/2018</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12243</PullRequestID>
        <IssueID>8333</IssueID>
        <Title>Change Signature refactoring should not appear when caret is on the expression body</Title>
        <Description>Ported from internal bug 97820
1.  paste the following code
   
   ``
2. ctrl+[dot] on the expression body of Move1() (not on the constructor call or "new")

**Expected**: Change Signature not offered for Move1(), similar to when the caret is inside of the Move2() body.
**Actual**: It is offered.
</Description>
        <CreatedDate>02/02/2016</CreatedDate>
        <ClosedDate>23/02/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23397</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Making sure that "in" matches exactly in method group conversions.</Title>
    <Description>It looks like method group conversions apply regular method overload resolution when resolving target method group.
However we know that in such scenario, unlike the regular argument passing, "byval" cannot match "in".

We should reject candidates with in/val mismatches when doing overload resolution for group conversion purposes. Otherwise we may encounter false ambiguity errors or even pick wrong candidates that crash at run time.

Fixes:#23319

### Customer scenario

Customer uses code that converts a method group with `in` parameters to a delegate that uses ordinary byval parameters in the same positions. 
It is expected that C# compiler rejects such assignment ans it is not permitted by CLR. (ref and val parameters are not compatible, during delegate creation).

Because of the bug, code compiles and crashes at run time.

### Bugs this fixes

Fixes:#23319

### Workarounds, if any

Not using the described scenario that results in broken code.

### Risk

Low. 
The change is mostly about propagating "isMethodConversion" further, so that conversion machinery could reject candidates with `in` --&gt; `byval` parameter match when performing resolution for the purpose of method group conversions. 

### Performance impact

Low.

### Is this a regression from a previous update?

No.

### Root cause analysis

Similar rules govern lambda conversions and were implemented and tested. The case with method group conversions goes on a different path (since it needs to do overload resolution form multiple candidates) and thus the scenario was missed.

### How was the bug found?

Reported by external customer.

### Test documentation updated?

N/A</Description>
    <CreatedDate>27/11/2017</CreatedDate>
    <ClosedDate>04/12/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23397</PullRequestID>
        <IssueID>23319</IssueID>
        <Title>C# compiler allows unsafe conversions from method groups to delegates with mismatching `in` modifier</Title>
        <Description>**Version Used**: 
Version 15.5.0 Preview 4.0
VisualStudio.15.Preview/15.5.0-pre.4.0+27110.0

Visual C# 2017   00369-60000-00001-AA127
Microsoft Visual C# 2017

C# 7.2

**Steps to Reproduce**:

Compile and run:

``

**Expected Behavior**:
A compile-time error.

**Actual Behavior**:
The program compiles successfully, but fails at runtime:
&gt; Unhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
   at Program.F(DateTime&amp; x) in Program.cs:line 7</Description>
        <CreatedDate>21/11/2017</CreatedDate>
        <ClosedDate>04/12/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23397</PullRequestID>
        <IssueID>23319</IssueID>
        <Title>C# compiler allows unsafe conversions from method groups to delegates with mismatching `in` modifier</Title>
        <Description>**Version Used**: 
Version 15.5.0 Preview 4.0
VisualStudio.15.Preview/15.5.0-pre.4.0+27110.0

Visual C# 2017   00369-60000-00001-AA127
Microsoft Visual C# 2017

C# 7.2

**Steps to Reproduce**:

Compile and run:

``

**Expected Behavior**:
A compile-time error.

**Actual Behavior**:
The program compiles successfully, but fails at runtime:
&gt; Unhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
   at Program.F(DateTime&amp; x) in Program.cs:line 7</Description>
        <CreatedDate>21/11/2017</CreatedDate>
        <ClosedDate>04/12/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23390</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Fixed 'Qualify member access' analyzer for object initializer</Title>
    <Description>Fixes #22776
Fixes #23016

Regression from 15.4

VSO bug : [link](https://devdiv.visualstudio.com/DevDiv/NET%20Developer%20Experience%20Productivity/_workitems/edit/529870)</Description>
    <CreatedDate>27/11/2017</CreatedDate>
    <ClosedDate>28/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23390</PullRequestID>
        <IssueID>22776</IssueID>
        <Title>Incorrect "Add 'this.'" diagnostic for class initializers</Title>
        <Description>This is reported in a few Developer Community feedback items, I will link them as they're processed.
-  https://developercommunity.visualstudio.com/content/problem/131432/add-this-or-me-qualification-for-class-initializer.html
- https://developercommunity.visualstudio.com/content/problem/129705/incorrect-ide0009-in-object-initializer.html
- https://developercommunity.visualstudio.com/content/problem/161932/ide0009-add-this-or-me-qualification-incorrectly-r.html

I have not been able to reproduce this locally using the settings in the Tools | Options. Maybe it requires the editorconfig? That doesn't make much sense but I haven't been able to come up with anything else.</Description>
        <CreatedDate>19/10/2017</CreatedDate>
        <ClosedDate>21/12/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Developer Community</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23390</PullRequestID>
        <IssueID>23016</IssueID>
        <Title>Add this or me qualification rule triggered incorrectly in return statement</Title>
        <Description>Have the following code:

            return new UserSession
            {
                UserId = subject
            };

Where UserSession is a simple class with property UserId. I'm getting green squiggles under the UserId in that statement, suggesting I add this or me qualification.

_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/126539/add-this-or-me-qualification-rule-triggered-incorr.html
VSTS ticketId: 505612_
_These are the original issue comments:_

David Poeschl [MSFT] on ‎10‎/‎18‎/‎2017, 00:37 PM (17 days ago): &lt;p&gt;Thank you for your feedback! I've so far been unable to reproduce this problem. I tried with the following code:&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;class C&lt;/p&gt;&lt;p&gt;\{&lt;/p&gt;&lt;p&gt;  static UserSession M()&lt;/p&gt;&lt;p&gt;  \{&lt;/p&gt;&lt;p&gt;    object subject = null;&lt;/p&gt;&lt;p&gt;    return new UserSession&lt;/p&gt;&lt;p&gt;    \{&lt;/p&gt;&lt;p&gt;      UserId = subject&lt;/p&gt;&lt;p&gt;    };&lt;/p&gt;&lt;p&gt;  }&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;internal class UserSession&lt;/p&gt;&lt;p&gt;\{&lt;/p&gt;&lt;p&gt;  public object UserId \{ get; set; }&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;And under &amp;quot;Text Editor | C# | Code Style | General | 'this.' preferences&amp;quot; I've set everything to &amp;quot;Prefer 'this.'&amp;quot; with &amp;quot;Warning&amp;quot; severity. Am I missing a step that you can tell? Thanks!&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
        <CreatedDate>05/11/2017</CreatedDate>
        <ClosedDate>09/01/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Developer Community</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23359</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Do not use constrained call on a conditional access receiver known to be a reference type.</Title>
    <Description>Fixes #23351.
</Description>
    <CreatedDate>22/11/2017</CreatedDate>
    <ClosedDate>22/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23359</PullRequestID>
        <IssueID>23351</IssueID>
        <Title>Invalid IL is emitted for a conditional access of off a constrained generic type parameter</Title>
        <Description>Compile and run the following program:
``
PEVerify succeeds.</Description>
        <CreatedDate>22/11/2017</CreatedDate>
        <ClosedDate>22/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-VB</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23343</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Address a number of IOperation issues for VB</Title>
    <Description>Related to #22548 and #22229.
</Description>
    <CreatedDate>21/11/2017</CreatedDate>
    <ClosedDate>27/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23343</PullRequestID>
        <IssueID>22548</IssueID>
        <Title>Follow up on isImplicit mismatch </Title>
        <Description>Address feedback from https://github.com/dotnet/roslyn/pull/22309 </Description>
        <CreatedDate>05/10/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
          <Label>Urgency-Now</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23343</PullRequestID>
        <IssueID>22229</IssueID>
        <Title>IsImplicit for multiple operation nodes with same syntax</Title>
        <Description>we want to make sure there is only one explicit IOperation when multiple IOperations are pointing to same syntax node.

right now, we have case such as this (https://github.com/dotnet/roslyn/pull/21857#pullrequestreview-64081939 or https://github.com/dotnet/roslyn/pull/21857#issuecomment-330950924) where InvalidExpression is pointing to same syntax node as its child. or ExpressionStatement pointing to same syntax node as its expression (ex, expression lambda body)

we need to decide whether we want to mark those as implicit or not. if we do, those IOperation will not be returned by GetOperation. but user can still get to that operation through parent and children.
</Description>
        <CreatedDate>20/09/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
          <Label>Urgency-Now</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23315</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>333fred</FixedByID>
    <Title>Handle parentheses in explicit VB delegate creation scenarios.</Title>
    <Description>This updates our implementation to handle cases such as `DirectCast(((Sub() Console.WriteLine())), Action)`. Previously, we would have an Identity conversion as the top node, alternating IParenthesizedOperation and IConversionOperations down the tree, until we got to an explicit IConversion on top of the lambda or addressof. These final nodes shared a syntax node and both were explicit. This removes the alternating IConversionOperations from the tree, so we only have 2 conversion, one at the top and one at the bottom. When we encounter this scenario, we remove the lower conversion from the tree, and use it's characteristics for the upper conversion (which becomes an IDelegateCreationExpression). Fixes #22988, fixes #22879.

Ask Mode Template:
### Customer scenario

When an analyzer runs on VB code that has parenthesis inside an explicit conversion (CType, DirectCast, TryCast), the IOperation tree contains bogus nodes and is incorrect. This scenario can also violate our invariant of no duplicate explicit syntax nodes in some of these scenarios.

### Bugs this fixes

https://github.com/dotnet/roslyn/issues/22988
https://github.com/dotnet/roslyn/issues/22879

### Workarounds, if any

None

### Risk

Minimal. We're slightly modifying the bound nodes that get generated in this scenario, but these were already ignored later in the compiler.

### Performance impact

Minimal. This will add a few functions calls to generating VB IOperation trees involving this specific scenario, but doesn't affect any other scenarios.

### Is this a regression from a previous update?

No, bug in original implementation.

### Root cause analysis

Added a number of new tests around nested delegates to cover this.

### How was the bug found?

Internal testing.</Description>
    <CreatedDate>20/11/2017</CreatedDate>
    <ClosedDate>13/12/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23315</PullRequestID>
        <IssueID>22988</IssueID>
        <Title>Lambda conversion when argument is parenthesized fails in VB.</Title>
        <Description>``
Fails with a duplicate explicit syntax node expression. This is because it's not considered a delegate creation conversion, as the operand is a BoundParenthesizedExpression.
</Description>
        <CreatedDate>02/11/2017</CreatedDate>
        <ClosedDate>13/12/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23315</PullRequestID>
        <IssueID>22879</IssueID>
        <Title>Assert about multiple explicit operation nodes with same syntax in VB</Title>
        <Description>I tried to add following VB test as part of https://github.com/dotnet/roslyn/pull/22846 without doing any source changes and I see the following assert fire: `Assert.False(true, $"Duplicate explicit node for syntax ({operation.Syntax.RawKind}): {operation.Syntax.ToString()}");` where both IDelegateCreation and IAnonymousObjectCreation have same syntax

``</Description>
        <CreatedDate>26/10/2017</CreatedDate>
        <ClosedDate>13/12/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23292</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Enabled 'Use Local Function' refactoring for delegate which is invoked with Invoke</Title>
    <Description>**Customer scenario**

Use Local Function refactoring doesn't work when delegate is invoked with Invoke

**Bugs this fixes:**

Fixes #23150
</Description>
    <CreatedDate>20/11/2017</CreatedDate>
    <ClosedDate>23/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23292</PullRequestID>
        <IssueID>23150</IssueID>
        <Title>Use Local Function refactoring doesn't work when delegate is invoked with Invoke</Title>
        <Description>The following test shows a case where the Use Local Function refactoring is not available. However, since the *only* member invoked on the delegate is `Invoke`, the refactoring could be provided.

⚠️ A new test will need to be created showing that the refactoring is still not offered if another member is invoked on the delegate, such as `ToString()`.

https://github.com/dotnet/roslyn/blob/3a34dce98a5482652f9976f0fe482a0b54ab5215/src/EditorFeatures/CSharpTest/UseLocalFunction/UseLocalFunctionTests.cs#L1438-L1459</Description>
        <CreatedDate>13/11/2017</CreatedDate>
        <ClosedDate>23/11/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23285</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Construct proper IOperation node for a RaiseEvent statement for a static custom event.</Title>
    <Description>Fixes #23282.
</Description>
    <CreatedDate>20/11/2017</CreatedDate>
    <ClosedDate>21/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23285</PullRequestID>
        <IssueID>23282</IssueID>
        <Title>Unexpected IOperation tree for recursive RaiseEvent</Title>
        <Description>``

Expected: IRaiseEventOperation rather than IInvalidOperation node
Microsoft.CodeAnalysis.Operations.VisualBasicOperationFactory.CreateBoundRaiseEventStatementOperation(BoundRaiseEventStatement boundRaiseEventStatement) shouldn't assert in debug build.
 
</Description>
        <CreatedDate>20/11/2017</CreatedDate>
        <ClosedDate>21/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23284</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Fix System.InvalidOperationException in IOperation factory for an Option statement inside a method body</Title>
    <Description>Fixes #23283.

**Customer scenario**

Request IOperation tree for an Option statement like the one below:
```
    Sub Method()
        Option Strict On 'BIND:"Option Strict On"
    End Sub
```

An InvalidOperationException is thrown by IOperation factory.

**Bugs this fixes:**

Fixes #23283.

**Workarounds, if any**

No

**Risk**

Low

**Performance impact**

Low perf impact because no extra allocations/no complexity changes

**Is this a regression from a previous update?**

No

**Root cause analysis:**

A test gap. Unit-tests are added.

**How was the bug found?**

Running existing compiler tests with IOperation validation test hook enabled.
</Description>
    <CreatedDate>20/11/2017</CreatedDate>
    <ClosedDate>20/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23284</PullRequestID>
        <IssueID>23283</IssueID>
        <Title>IOperation factory throws System.InvalidOperationException for an Option statement inside a method body</Title>
        <Description>``</Description>
        <CreatedDate>20/11/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23284</PullRequestID>
        <IssueID>23283</IssueID>
        <Title>IOperation factory throws System.InvalidOperationException for an Option statement inside a method body</Title>
        <Description>``</Description>
        <CreatedDate>20/11/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23265</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Improve the syntax error when a conditional expression used in an interpolated string</Title>
    <Description>**Customer scenario**

When using a conditional expression `e1 ? e2 : e3` inside of an interpolated string `$"{e1 ? e2 : e3}"` the compiler interprets the colon as the end of the interpolation and the beginning of the format string. That is by design and intentional. However, the error message for this situation is confusing: the syntax error points at the colon token and reports that a colon was expected. We need a more clear diagnostic. After this fix, the error message will be
`error CS8361: A conditional expression cannot be used directly in a string interpolation because the ':' ends the interpolation. Parenthesize the conditional expression.`

**Bugs this fixes:**

Fixes #12214

**Workarounds, if any**

Parenthesize the interpolated string fill-in.

**Risk**

Low. The fix is straightforward and merely changes the diagnostic under this particular circumstance.

**Performance impact**

None expected.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

We simply did not have time to do a good job on the diagnostic for this situation when interpolated strings were first introduced.

**How was the bug found?**

This was a known shortcoming of the implementation.

**Test documentation updated?**

N/A

@dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>17/11/2017</CreatedDate>
    <ClosedDate>21/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23265</PullRequestID>
        <IssueID>12214</IssueID>
        <Title>Strange syntax error in interpolated string when using ?:</Title>
        <Description>``

Here, the "1 " part has a red squiggly saying ": expected". I don't know whether this code is supposed to compile or not but the message does not make sense to me. I would not "expect" a ":" character right after the question mark under any circumstances.

The workaround `$"{(1 / Environment.TickCount == 0 ? 1 : 2)}"` works fine.

I guess this is a low priority issue but I still wanted to report it so that it can be triaged and tracked.
</Description>
        <CreatedDate>27/06/2016</CreatedDate>
        <ClosedDate>21/11/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-Diagnostic Clarity</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23264</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Move imaging dependencies from EditorFeatures</Title>
    <Description>This takes care of Microsoft.VisualStudio.Imaging and Microsoft.VisualStudio.ImageCatalog, which for now aren't available outside Visual Studio. ImageCatalog is a pretty simple data API so one day it might be useful, but for now isn't.

Fixes dotnet/roslyn#23189.</Description>
    <CreatedDate>17/11/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23264</PullRequestID>
        <IssueID>23189</IssueID>
        <Title>Investigate removing Imaging dependency from EditorFeatures.dll</Title>
        <Description>We currently don't have MS.VS.Imaging.dll and MS.VS.ImageCatalog.dll on VSMac as they don't make any sense in the Mac world.

We see four usages of ImageMonikers by EditorFeatures:
``

If it is feasible, we should refactor these out to EditorFeatures.Wpf.dll.</Description>
        <CreatedDate>15/11/2017</CreatedDate>
        <ClosedDate>18/11/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23252</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Permit array of pointer type to be parsed wherever an array type is permitted</Title>
    <Description>**Customer scenario**

Use the `is` operator to test an expression to see if it is an array of some pointer type. This used to work in earlier compilers, but now produces a syntax error.

**Bugs this fixes:**

Fixes #23100

**Workarounds, if any**

None.

**Risk**

Very low. The fix is focused on the problematic scenarios.

**Performance impact**

None expected, as the change does only a tiny bit more work in unusual circumstances.

**Is this a regression from a previous update?**

No, but it is a regression from C# 6.

**Root cause analysis:**

The introduction of pattern-matching changed the way types are parsed. As a consequence, certain type syntax forms that were previously permitted were unintentionally forbidden by the change.

Generally speaking, we do not permit pointer types to be parsed in certain contexts that require a managed type. These contexts include an is-expression type test, pattern-matching scenarios and tuples. The parser was modified to forbid pointer specifiers in these contexts. However, an array of a pointer type is a managed type and should have been permitted. This bug fix permits parsing arrays of pointer types in these contexts even though pointer types themselves are not permitted. 

**How was the bug found?**

Customer-reported.

**Test documentation updated?**

N/A

@jcouv This affects tuple parsing. Could you please review, particularly the deconstruction test changes?
@agocke Please review.
@pdelvo I would love your feedback, please.
</Description>
    <CreatedDate>17/11/2017</CreatedDate>
    <ClosedDate>27/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23252</PullRequestID>
        <IssueID>23100</IssueID>
        <Title>The C# compiler failed to compile "obj is byte*[]" form</Title>
        <Description>**Version Used**: 
Visual Studio 2017
C#7.1
.NET Framework 4.7

**Steps to Reproduce**:

1. Try to compile this code:
``

**Expected Behavior**:
Compile success.

**Actual Behavior**:
Program.cs(8,20,8,24): error CS1525: Invalid expression term 'byte'
Program.cs(8,25,8,26): error CS1525: Invalid expression term '['
Program.cs(8,26,8,27): error CS0443: Syntax error; value expected</Description>
        <CreatedDate>09/11/2017</CreatedDate>
        <ClosedDate>27/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23243</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>heejaechang</FixedByID>
    <Title>improve error case handling.</Title>
    <Description>when OOP is killed by users, default(DesignerAttributeResult) is returned by designer scanner. it was okay when it was class, but now it being struct, it causes issue because NotApplicable return false rather than true in error case.

so, changed NotApplicable to Applicable so that it can handle the error case better.

**Customer scenario**

User killed OOP while using VS with winforms and VS wrongly detect winform file as normal files.

**Bugs this fixes:**

Fixes #23242

**Workarounds, if any**

don't kill OOP

**Risk**

Very safe change

**Performance impact**

No impact

**Is this a regression from a previous update?**

No

**Root cause analysis:**

default(T) made return to be valid rather than invalid.

**How was the bug found?**

dogfooding
</Description>
    <CreatedDate>17/11/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23243</PullRequestID>
        <IssueID>23242</IssueID>
        <Title>VS mark winform files wrong if OOP is killed</Title>
        <Description>repro steps

1. open winform solution in VS
2. find ServiceHub.RoslynCodeAnalysis32.exe from task list and kill it
3. change winform file.
4. close solution

expected:
nothing changed

actual:
winform file is changed to normal file
</Description>
        <CreatedDate>17/11/2017</CreatedDate>
        <ClosedDate>17/11/2017</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23238</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Fix an InvalidCastException in IOperation factory for an ambiguous user-defined short-circuiting operator</Title>
    <Description>Fixes #23232.
Also fixes incorrect calculation of BinaryOperatorKind for the same node.

**Customer scenario**

Request IOperation tree for an ambiguous user-defined short-circuiting operator like the one below:
```
Option Strict Off

Imports System

Module Module1

    Class B2
        Public Shared Operator And(x As B3, y As B2) As B2
            Return Nothing
        End Operator

        Public Shared Operator Or(x As B3, y As B2) As B2
            Return Nothing
        End Operator
    End Class

    Class B3
        Public Shared Operator And(x As B3, y As B2) As B3
            Return Nothing
        End Operator

        Public Shared Operator Or(x As B3, y As B2) As B3
            Return Nothing
        End Operator
    End Class

    Sub Main()
        Dim x As Object

        x = New B3() AndAlso New B2() 'BIND1:"New B3() AndAlso New B2()"
    End Sub
End Module
```

An InvalidCastException is thrown by IOperation factory.

**Bugs this fixes:**

Fixes #23232.

**Workarounds, if any**

No

**Risk**

Low

**Performance impact**

Low perf impact because no extra allocations/no complexity changes

**Is this a regression from a previous update?**

No

**Root cause analysis:**

A test gap. Unit-tests are added.

**How was the bug found?**

Running existing compiler tests with IOperation validation test hook enabled.
</Description>
    <CreatedDate>17/11/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23238</PullRequestID>
        <IssueID>23232</IssueID>
        <Title>An InvalidCastException is thrown for an ambiguous user-defined short-circuiting operator</Title>
        <Description>``
</Description>
        <CreatedDate>17/11/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23238</PullRequestID>
        <IssueID>23232</IssueID>
        <Title>An InvalidCastException is thrown for an ambiguous user-defined short-circuiting operator</Title>
        <Description>``
</Description>
        <CreatedDate>17/11/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23237</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>CyrusNajmabadi</FixedByID>
    <Title>Change the 'Use auto property' code fixer to not be a 'compilation end' analyzer.</Title>
    <Description>Fixes #23216
Fixes #23215
Fixes #20855
Closes #23217

This PR changes the 'use auto property' code fixer to work as a Semantic-Model-Analyzer, instead of a Compilation-End analyzer.  Compilation-End-Analyzers are basically an unusable part of the analyzer API for code that wants to run in VS.  They are too expensive, and users can't interact with their results in a timely manner, like they can with normal analyzers.

As part of making this happen, I had to make a small change to the functionality of the feature.  Specifically, we used to determine if it was safe to make the change by analyzing all usages of a the field-to-remove in the project the feature was analyzing.  This was very expensive, but was necessary in case some code was using the field in an unexpected manner.  Now, we limit the feature to only private fields.  This means we can do that analysis in a timely manner, as we only have to examine the type it is contained in.  

This should have very little end user impact as the majority of user fields are private (esp. the ones that are paired with a property that you'd want ot make an auto prop out of).
</Description>
    <CreatedDate>17/11/2017</CreatedDate>
    <ClosedDate>20/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23237</PullRequestID>
        <IssueID>23216</IssueID>
        <Title>IDE0032 (Use Auto Property) Fix All does not work</Title>
        <Description>**Version Used**: 15.5 Preview 3

🔗 Observed while investigating [this community report](https://developercommunity.visualstudio.com/content/problem/150002/ide0032-performs-less-than-ideal.html).

### Steps to Reproduce

1. Attempt to apply a Fix All operation to IDE0032 (Use Auto Property)

### Expected Behavior

Fix All, when available, fixes all instances of an issue within the specified context.

### Actual Behavior

Only one instance is fixed.

### Additional Details

* This behavior is observed even when Full Solution Analysis is enabled (see #23215)
* This behavior is observed even when IDE0032 is set to Warning severity</Description>
        <CreatedDate>16/11/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23237</PullRequestID>
        <IssueID>23215</IssueID>
        <Title>IDE0032 (Use Auto Property) does not work when full solution analysis is disabled</Title>
        <Description>**Version Used**: 15.5 Preview 3

🔗 Observed while investigating [this community report](https://developercommunity.visualstudio.com/content/problem/150002/ide0032-performs-less-than-ideal.html).

### Steps to Reproduce

1. Add a property:

    ``

### Expected Behavior

The `_text` field is grayed (unnecessary code), and a code fix is provided to convert the field to an auto property.

### Actual Behavior

No suggestion is given.

### Additional details

If **Full Solution Analysis** is enabled, the feature works as expected. However, this feature is disabled both by default and by recommendation, with no plans to enable it. IDE analyzers cannot rely on this feature being enabled.</Description>
        <CreatedDate>16/11/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23237</PullRequestID>
        <IssueID>20855</IssueID>
        <Title>IDE0032 Use Auto Property code fix mangles code in preexisting property with getter</Title>
        <Description>**Version Used**: d15rel 26711.00

**Steps to Reproduce**:

``

Note that there are absolutely no `#if` directives anywhere in the file. But this file is in a project that has 3 target frameworks.</Description>
        <CreatedDate>13/07/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23237</PullRequestID>
        <IssueID>23217</IssueID>
        <Title>Disable IDE0032 until it works</Title>
        <Description>**Version Used**: 15.5 Preview 3

🔗 Observed while investigating [this community report](https://developercommunity.visualstudio.com/content/problem/150002/ide0032-performs-less-than-ideal.html).

**Steps to Reproduce**:

1. Attempt to use the Use Auto Property diagnostic and code fix

**Expected Behavior**:

1. Code does not break
2. The code fix works
3. The fix all operation either work or is not provided

**Actual Behavior**:

I was unable to use this feature in any context and have it provide a meaningful result.

* The feature was not even visible without enabling a non-default (and not recommended) feature (#23215, #17857)
* The code was broken when the feature was used (#20855)
* The code fix didn't perform as expected (#23216)

This diagnostic needs to be disabled until it meets a reasonable quality bar.</Description>
        <CreatedDate>16/11/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Not Applicable</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23235</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>pdelvo</FixedByID>
    <Title>Fixes that arrays of pointers cannot be used in pattern matching</Title>
    <Description>This PR fixes #23100. The compiler was not able to parse arrays of pointers in pattern places. It would wrongly assume that a pointer was not allowed in this context even though it was followed by an array creation.

**Risk**

The issue suggests that the bug is a regression that causes the compiler to not compile valid code.

**Performance impact**

The performance impact should be low. The reset is only executed in very few cases e.g. if there is a multiplication in a pattern or if a pointer is used in a pattern (which does not compile).

**Is this a regression from a previous update?**

Yes! The code compiled with the native compiler.

**Root cause analysis:**

It was missed that a pointer type can follow an is/case if it is part of an array type. I added a test for that.



@gafter You were assigned to this. i hope it is not a problem that I went ahead and took a shot at this.

Pro Tip: This diff is easier to read by adding ?w=0 to the github url. This hides changes because of indentation.</Description>
    <CreatedDate>17/11/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23235</PullRequestID>
        <IssueID>23100</IssueID>
        <Title>The C# compiler failed to compile "obj is byte*[]" form</Title>
        <Description>**Version Used**: 
Visual Studio 2017
C#7.1
.NET Framework 4.7

**Steps to Reproduce**:

1. Try to compile this code:
``

**Expected Behavior**:
Compile success.

**Actual Behavior**:
Program.cs(8,20,8,24): error CS1525: Invalid expression term 'byte'
Program.cs(8,25,8,26): error CS1525: Invalid expression term '['
Program.cs(8,26,8,27): error CS0443: Syntax error; value expected</Description>
        <CreatedDate>09/11/2017</CreatedDate>
        <ClosedDate>27/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23231</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Ensure the operand of an is-pattern expression is evaluated.</Title>
    <Description>**Customer scenario**

Writing the expression `expr is var _` yields true without evaluating `expr` for its side-effects. It should evaluate `expr`.

**Bugs this fixes:**

Fixes #22619

**Workarounds, if any**

Change `_` to some otherwise unused identifier.

**Risk**

Very low. The fix is very focused on the particular scenario.

**Performance impact**

None. Does not change any algorithms of the compiler.

**Is this a regression from a previous update?**

No. This bug existed since pattern-matching was first introduced.

**Root cause analysis:**

The scenario is a little nonsensical, so we did not think to test it.

**How was the bug found?**

(Internal) customer reported.

**Test documentation updated?**

No.

-----------------
@dotnet/roslyn-compiler  Please review.
</Description>
    <CreatedDate>17/11/2017</CreatedDate>
    <ClosedDate>21/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23231</PullRequestID>
        <IssueID>22619</IssueID>
        <Title>"x is var _" results in the expression being true without x being evaluated</Title>
        <Description>**Version Used**: 
C# 7.1, debug mode

**Steps to Reproduce**:
``

**Expected Behavior**:
I'd expect `ThrowingMethod()` to be invoked, resulting in an exception.

**Actual Behavior**:
The method, `IsVarMethod()`, returns `1` and no exception is thrown.

This only occurs if the `x is T y` expression uses the var pattern and a discard. Change `var` to `bool` or `_` to eg `y` and the method is invoked and the exception thrown. </Description>
        <CreatedDate>09/10/2017</CreatedDate>
        <ClosedDate>21/11/2017</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23225</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Remove dependency on Microsoft.VisualStudio.RemoteControl from EditorFeatures</Title>
    <Description>Moving up to EditorFeatures.Wpf for now. It could potentially go higher if we determine this is a Visual Studio-only thing, but for now it's unclear where it will ultimately land.

Fixes dotnet/roslyn#23184.</Description>
    <CreatedDate>16/11/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23225</PullRequestID>
        <IssueID>23184</IssueID>
        <Title>SymbolSearchUpdateEngine needs thinking of how it should work for VS for Mac</Title>
        <Description>@KirillOsenkov claims it's bad [here](https://github.com/dotnet/roslyn/issues/22959#issuecomment-344480992) but didn't articulate.</Description>
        <CreatedDate>15/11/2017</CreatedDate>
        <ClosedDate>17/11/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23224</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Fix an InvalidCastException in IOperation factory when a name of a range variable conflicts with another range variable.</Title>
    <Description>Fixes #23223.

**Customer scenario**

Request IOperation tree for a query expression like the one below:
```
Dim q As Object = From implicit In New Integer() {1, 2, 3} Let implicit = "1" Select implicit
```

An InvalidCastException is thrown by IOperation factory.

**Bugs this fixes:**

Fixes #23223.

**Workarounds, if any**

No

**Risk**

Low

**Performance impact**

Low perf impact because no extra allocations/no complexity changes

**Is this a regression from a previous update?**

No

**Root cause analysis:**

A test gap. Unit-tests are added.

**How was the bug found?**

Running existing compiler tests with IOperation validation test hook enabled.
</Description>
    <CreatedDate>16/11/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23224</PullRequestID>
        <IssueID>23223</IssueID>
        <Title>An InvalidCastException is thrown when a name of range variable conflicts with another range variable</Title>
        <Description>``</Description>
        <CreatedDate>16/11/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23224</PullRequestID>
        <IssueID>23223</IssueID>
        <Title>An InvalidCastException is thrown when a name of range variable conflicts with another range variable</Title>
        <Description>``</Description>
        <CreatedDate>16/11/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23208</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>recursive-patterns(1): Parsing changes for recursive pattern-matching</Title>
    <Description>Parsing changes for recursive pattern-matching,
currently enabled by `/features:patterns2`

This is the first of several PRs for the implementation of recursive pattern-matching, each of which builds on the previous. This was previously offered for review in #22718.

@AlekseyTs @agocke Please review.
</Description>
    <CreatedDate>16/11/2017</CreatedDate>
    <ClosedDate>28/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23208</PullRequestID>
        <IssueID>22718</IssueID>
        <Title>Parsing changes for recursive pattern-matching</Title>
        <Description>Parsing changes for recursive pattern-matching,
currently enabled by `/features:patterns2`
</Description>
        <CreatedDate>16/10/2017</CreatedDate>
        <ClosedDate>11/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23206</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Fix an InvalidCastException in IOperation factory when a user defined conversions involves an integer overflow.</Title>
    <Description>Fixes #23203.

**Customer scenario**

Request IOperation tree for a variable initializer like the one below:
```
Module Module1

    Class C1
        Shared Widening Operator CType(x As Byte) As C1
            Return Nothing
        End Operator
    End Class

    Sub Main()
        Dim z1 As C1 = &amp;H7FFFFFFFL 'BIND:"= &amp;H7FFFFFFFL"
    End Sub
End Module
```

An InvalidCastException is thrown by IOperation factory.

**Bugs this fixes:**

Fixes #23203.

**Workarounds, if any**

No

**Risk**

Low

**Performance impact**

Low perf impact because no extra allocations/no complexity changes

**Is this a regression from a previous update?**

No

**Root cause analysis:**

A test gap. Unit-tests are added.

**How was the bug found?**

Running existing compiler tests with IOperation validation test hook enabled.
</Description>
    <CreatedDate>16/11/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23206</PullRequestID>
        <IssueID>23203</IssueID>
        <Title>InvalidCastException is thrown when user defined conversions involves integer overflow</Title>
        <Description>``</Description>
        <CreatedDate>15/11/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23206</PullRequestID>
        <IssueID>23203</IssueID>
        <Title>InvalidCastException is thrown when user defined conversions involves integer overflow</Title>
        <Description>``</Description>
        <CreatedDate>15/11/2017</CreatedDate>
        <ClosedDate>20/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23199</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Merge misc. changes for embedded attributes from 7a0467e</Title>
    <Description>Merge misc. changes for embedded attributes from features/NullableReferenceTypes branch.

Fixes #22952.</Description>
    <CreatedDate>15/11/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23199</PullRequestID>
        <IssueID>22952</IssueID>
        <Title>Remove SynthesizedImplementationMethod.AddSynthesizedAttributes</Title>
        <Description>Remove `SynthesizedImplementationMethod.AddSynthesizedAttributes`.

See https://github.com/dotnet/roslyn/pull/22820#pullrequestreview-72650279.
</Description>
        <CreatedDate>01/11/2017</CreatedDate>
        <ClosedDate>17/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23172</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Fixes an issue with flow analysis where branches within `try` could be considered as going through `finally`</Title>
    <Description>Fixes an issue with flow analysis where branches within `try` could be considered as going through `finally`

We could incorrectly assume that variable is assigned (or unassigned in async capture tracking case).

As a result we could
- allow use of unassigned locals (undefined behavior)
- not capture a local whose value survives `await` (NRE crash)

Also added a regression test for VB, which does not seem affected.

Fixes:#19831
</Description>
    <CreatedDate>15/11/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23172</PullRequestID>
        <IssueID>19831</IssueID>
        <Title>C# Async/Await optimization cause NRE on local variables access (maybe try/finally related)</Title>
        <Description>Version Used: Roslyn shipped with VS2015, VS2017

Steps to Reproduce:
1.  Create console application project
2.  Use following code https://gist.github.com/deniszykov/9a9dcd4f6fb5ea7905b8a15e5bc7d0c0
3.  Run in debug mode and see 10000 in output
4.  Run in release mode (make sure optimization flag is on) and get NullReferenceException.

Expected Behavior:
Same behavior as in non-optimized code.

Actual Behavior:
NRE when accessing local variable in optimized code.
</Description>
        <CreatedDate>28/05/2017</CreatedDate>
        <ClosedDate>17/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23170</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Do not expose type expression as IDynamicMemberReferenceOperation.Instance</Title>
    <Description>Related to #22548 and #22229.
</Description>
    <CreatedDate>14/11/2017</CreatedDate>
    <ClosedDate>15/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23170</PullRequestID>
        <IssueID>22548</IssueID>
        <Title>Follow up on isImplicit mismatch </Title>
        <Description>Address feedback from https://github.com/dotnet/roslyn/pull/22309 </Description>
        <CreatedDate>05/10/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
          <Label>Urgency-Now</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23170</PullRequestID>
        <IssueID>22229</IssueID>
        <Title>IsImplicit for multiple operation nodes with same syntax</Title>
        <Description>we want to make sure there is only one explicit IOperation when multiple IOperations are pointing to same syntax node.

right now, we have case such as this (https://github.com/dotnet/roslyn/pull/21857#pullrequestreview-64081939 or https://github.com/dotnet/roslyn/pull/21857#issuecomment-330950924) where InvalidExpression is pointing to same syntax node as its child. or ExpressionStatement pointing to same syntax node as its expression (ex, expression lambda body)

we need to decide whether we want to mark those as implicit or not. if we do, those IOperation will not be returned by GetOperation. but user can still get to that operation through parent and children.
</Description>
        <CreatedDate>20/09/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
          <Label>Urgency-Now</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23162</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Fix NullReferenceException thrown while building IOperation node for dynamic object member initializer.</Title>
    <Description>Fixes #23154.
VSO Bug https://devdiv.visualstudio.com/DevDiv/_workitems?id=524873

**Customer scenario**

Request IOperation tree for an object creation expression like the one below:
```
        dynamic x = 1;
        var a = new A {[y: x, x: x] = { X = 1} };
...
class A
{
    dynamic this[int x, int y]
    {
        get
        {
            return new A();
        }
    }

    dynamic this[string x, string y]
    {
        get
        {
            return null;
        }
    }

    int X, Y, Z;
}
```

A null reference exception is thrown by IOperation factory.

**Bugs this fixes:**

Fixes #23154.
VSO Bug https://devdiv.visualstudio.com/DevDiv/_workitems?id=524873

**Workarounds, if any**

No

**Risk**

Low

**Performance impact**

Low perf impact because no extra allocations/no complexity changes

**Is this a regression from a previous update?**

No

**Root cause analysis:**

A test gap. Unit-tests are added.

**How was the bug found?**

Running existing compiler tests with IOperation validation test hook enabled.
</Description>
    <CreatedDate>14/11/2017</CreatedDate>
    <ClosedDate>16/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23162</PullRequestID>
        <IssueID>23154</IssueID>
        <Title>System.NullReferenceException is thrown for dynamic object member initializer</Title>
        <Description>``</Description>
        <CreatedDate>14/11/2017</CreatedDate>
        <ClosedDate>16/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23162</PullRequestID>
        <IssueID>23154</IssueID>
        <Title>System.NullReferenceException is thrown for dynamic object member initializer</Title>
        <Description>``</Description>
        <CreatedDate>14/11/2017</CreatedDate>
        <ClosedDate>16/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23141</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Clean-up IOperation tree representing tuple literal conversions.</Title>
    <Description>Related to #22548 and #22229.

There are several issues with IOperation tree when it comes to conversions applied to tuple literals:
1. When conversion is explicitly specified in code, it is translated to conversions on individual
elements of the literal and these BoundConversion nodes are also marked as explicitly
specified in code (which makes sense). However, the syntax associated with a BoundConversion
node on top of an element matches the syntax of the element (which also makes sense).
The problem is that both the conversion node and the element appear as “explicit” in
IOperation tree, which violates one of the tree invariants – at most one “explicit” node for
a given syntax node.
2. When a tuple literal is converted, compiler creates a BoundConvertedTupleLiteral node,
which has the target tuple type as its Type, but the BoundConversion node on top of the
BoundConvertedTupleLiteral captures conversion information (kind, etc.) for conversion
From tuple’s natural type to the target type. So, often, we end up with both nodes having
The same Type, but the conversion says it is not an identity conversion. This shape helps
SemanticModel to provide accurate information about types and conversions, but the
IOperation tree looks very confusing.
3. When conversion is explicitly specified in code, the BoundConversion node from the
previous item is marked as explicitly specified in code, but it shares syntax node with
BoundConvertedTupleLiteral. Both nodes appear as “explicit” in IOperation tree, which
violates the same invariant.
4. When conversion is explicitly specified in code, compiler adds yet another explicit
Identity conversion on top of the BoundConversion node from the previous item.
It is needed for proper SemanticModel behavior. Even when it uses different syntax,
the IOperation tree looks very confusing, there are two conversions on top of each other
and it is not clear why intermediate conversion node is needed.

In order to address all these issue the following changes are made to IOperation factory:
- If conversion node is associated with the same syntax as its operand, the conversion
is marked as isImplicit.
- If Type of BoundConvertedTupleLiteral matches the Type of BoundConversion node
on top of it the conversion node is not added to the IOperation tree. Instead a new property
is added to ITupleOperation interface, called NaturalType. The property exposes the natural
type of the tuple literal and makes it easy for consumers to figure out if a conversion from
a natural type of a tuple literal took place.
-  If Type of BoundConvertedTupleLiteral doesn’t match the Type of BoundConversion node
on top of it and there is an identity conversion node on top of the BoundConversion node,
the intermediate conversion node is not added to the IOperation tree, its conversion
information is used for the top-most conversion node (instead of saying that it is identity).
</Description>
    <CreatedDate>13/11/2017</CreatedDate>
    <ClosedDate>15/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23141</PullRequestID>
        <IssueID>22548</IssueID>
        <Title>Follow up on isImplicit mismatch </Title>
        <Description>Address feedback from https://github.com/dotnet/roslyn/pull/22309 </Description>
        <CreatedDate>05/10/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
          <Label>Urgency-Now</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23141</PullRequestID>
        <IssueID>22229</IssueID>
        <Title>IsImplicit for multiple operation nodes with same syntax</Title>
        <Description>we want to make sure there is only one explicit IOperation when multiple IOperations are pointing to same syntax node.

right now, we have case such as this (https://github.com/dotnet/roslyn/pull/21857#pullrequestreview-64081939 or https://github.com/dotnet/roslyn/pull/21857#issuecomment-330950924) where InvalidExpression is pointing to same syntax node as its child. or ExpressionStatement pointing to same syntax node as its expression (ex, expression lambda body)

we need to decide whether we want to mark those as implicit or not. if we do, those IOperation will not be returned by GetOperation. but user can still get to that operation through parent and children.
</Description>
        <CreatedDate>20/09/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
          <Label>Urgency-Now</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23129</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>333fred</FixedByID>
    <Title>Address followup nits from IOp prs.</Title>
    <Description>Fixes nits raised during review for #23041 and #22972. Fixes https://github.com/dotnet/roslyn/issues/23093.</Description>
    <CreatedDate>11/11/2017</CreatedDate>
    <ClosedDate>14/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23129</PullRequestID>
        <IssueID>23041</IssueID>
        <Title>Compound expressions conversions</Title>
        <Description>This adds support for InConversion and OutConversion to ICompoundExpression, and adds VB support for compound expression scenarios with in and out conversions in them. Fixes https://github.com/dotnet/roslyn/issues/21738.

vso:https://devdiv.visualstudio.com/DevDiv/NET%20Developer%20Experience%20Productivity/_workitems/edit/521161</Description>
        <CreatedDate>07/11/2017</CreatedDate>
        <ClosedDate>09/11/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23129</PullRequestID>
        <IssueID>22972</IssueID>
        <Title>Update static instance handling</Title>
        <Description>There were a few places in IOperation error cases where we would drop receivers of static calls always, even if it was explicit. This updates our handling of receivers in both languages to only exclude implicit `this` as a receiver, as that is only ever present when the compiler optimistically generates a receiver before determining the symbol is static. I also added tests for these scenarios, as they were missing. This fixes https://github.com/dotnet/roslyn/issues/22585 and https://github.com/dotnet/roslyn/issues/22737.

vso : [link](https://devdiv.visualstudio.com/DevDiv/NET%20Developer%20Experience%20Productivity/_workitems/edit/518824)</Description>
        <CreatedDate>02/11/2017</CreatedDate>
        <ClosedDate>09/11/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23121</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Add the Roslyn version string into Help &gt; About</Title>
    <Description>This shows our informational version in Help &gt; About instead of a
useless ProductID GUID.

Fixes dotnet/roslyn#17038.

Before:

![image](https://user-images.githubusercontent.com/201340/32678454-3ca70500-c617-11e7-8c9c-8a779b4f2aa7.png)

After:

![image](https://user-images.githubusercontent.com/201340/32678494-6a727bf4-c617-11e7-980d-35e4219b5673.png)
</Description>
    <CreatedDate>10/11/2017</CreatedDate>
    <ClosedDate>13/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23121</PullRequestID>
        <IssueID>17038</IssueID>
        <Title>Help &gt; About should list useful versions for the language services</Title>
        <Description>Help &gt; About shows this:

![image](https://cloud.githubusercontent.com/assets/201340/22758050/da5c8dc2-ee01-11e6-8853-3606e955f52c.png)

The C#/VB entries are useless, since they show some ancient and meaningless product ID. Instead we should show the version number / sha1 / etc. of the Roslyn Language Services package installed.</Description>
        <CreatedDate>08/02/2017</CreatedDate>
        <ClosedDate>17/11/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23110</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Upgrade CoreCLR toolset to work on Windows</Title>
    <Description>The old package had a bug in RunCsc.cmd that didn't properly
quote the dotnet path. When the SDK is upgraded to a sufficient
version by VS, the full dotnet path will be used, which contains
spaces and fails without proper quoting. This updates us to a package
which contains almost the same compilers, but includes the fix for
quoting the dotnet path properly (in PR #23034).</Description>
    <CreatedDate>10/11/2017</CreatedDate>
    <ClosedDate>10/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23110</PullRequestID>
        <IssueID>23034</IssueID>
        <Title>Fixes for Microsoft.NETCore.Compilers package</Title>
        <Description>When dogfooding I ran into a few bugs in the Microsoft.NETCore.Compilers package,
including

1. We need to override the CopyRefAssembly task
2. We need to surround the path components of the call with quotes</Description>
        <CreatedDate>06/11/2017</CreatedDate>
        <ClosedDate>08/11/2017</ClosedDate>
        <Labels />
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>23103</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Test for #19609 that looks like have been fixed</Title>
    <Description>
Test only change
Closes:#19609</Description>
    <CreatedDate>09/11/2017</CreatedDate>
    <ClosedDate>09/11/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>23103</PullRequestID>
        <IssueID>19609</IssueID>
        <Title>Array element assignment behaves differently depending if the RHS is awaited or not</Title>
        <Description>if the RHS is awaited we throw IndexOutOfRange _before_ evaluating the RHS, 
if the RHS is not awaited we throw IndexOutOfRange _after_ evaluating the RHS, 

The difference is subtle and I wonder if it is expected.

Repro:

The following outputs:
``
</Description>
        <CreatedDate>18/05/2017</CreatedDate>
        <ClosedDate>09/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>Resolution-Not Reproducible</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21791</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Changes to the IOperation API shape for loop statements</Title>
    <Description>1. Flatten the loop statement hierarchy to only derive from ILoopStatement
2. Separate out do loops and while loops
3. Separate out the C# and VB for loops due to different semantics and syntax.

Fixes #21282</Description>
    <CreatedDate>29/08/2017</CreatedDate>
    <ClosedDate>14/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21791</PullRequestID>
        <IssueID>21282</IssueID>
        <Title>IForEachLoopStatement, IForLoopStatement, IForWhileUntilLoopStatement, IWhileUntilLoopStatement API Review</Title>
        <Description>We need to investigate this , 
- IForLoopStatement should not derive from IForWhileStatement ...etc </Description>
        <CreatedDate>03/08/2017</CreatedDate>
        <ClosedDate>14/09/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Concept-API</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21777</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>ivanbasov</FixedByID>
    <Title>PDB tests for local functions</Title>
    <Description>Towards #5156</Description>
    <CreatedDate>28/08/2017</CreatedDate>
    <ClosedDate>07/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21777</PullRequestID>
        <IssueID>5156</IssueID>
        <Title>[future] Add tests for edit-and-continue interaction with local functions</Title>
        <Description>Please add tests for the interaction of edit-and-continue with local functions.

That testing effort is likely to uncover work items for the feature.
</Description>
        <CreatedDate>11/09/2015</CreatedDate>
        <ClosedDate>08/09/2017</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Interactive-EnC</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21746</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Change stackalloc conversion to a converted bound node</Title>
    <Description>Follow up on comments from #21006 
Fixes #21887

cc @gafter @VSadov 
@dotnet/roslyn-compiler </Description>
    <CreatedDate>25/08/2017</CreatedDate>
    <ClosedDate>05/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21746</PullRequestID>
        <IssueID>21006</IssueID>
        <Title>Parser changes for stackalloc</Title>
        <CreatedDate>20/07/2017</CreatedDate>
        <ClosedDate>15/08/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Readonly References</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21746</PullRequestID>
        <IssueID>21887</IssueID>
        <Title>IDE crashes when editing code that involves stackalloc expressions</Title>
        <Description>When I am trying to edit stuff that involves stackalloc I frequently see a crash with the following stack.
It seems that semantic model is not robust against broken code when stackalloc is involved.

==============

Message: System.InvalidCastException: Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.BoundBadExpression' to type 'Microsoft.CodeAnalysis.CSharp.BoundConversion'.
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoForNode(BoundNode lowestBoundNode, BoundNode highestBoundNode, BoundNode boundNodeForSyntacticParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)

</Description>
        <CreatedDate>01/09/2017</CreatedDate>
        <ClosedDate>06/09/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Readonly References</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21711</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add IOperation APIs for Dynamic invocations and indexer access</Title>
    <Description>Fixes #20114 and #20122</Description>
    <CreatedDate>23/08/2017</CreatedDate>
    <ClosedDate>15/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21711</PullRequestID>
        <IssueID>20114</IssueID>
        <Title>IOperation API support for BoundDynamicInvocation</Title>
        <Description>This bound node is very similar to BoundCall, except that we have a set of applicable methods instead of a single TargetMethod.

We have couple of choices for the API here:

1. Reuse `IInvocationExpression`, and set the `TargetMethod` to null. In future, when we expose the MethodGroup from IInvocationExpression, the applicable methods can be exposed through this API.
2. Create a new IDynamicInvocationExpression type:
``

(1) is similar to the approach we chose for Dynamic collection initializer, but it might be more error prone for analyzer authors as everyone might expect a non-null `IInvocationExpression.TargetMethod` method for an error free case.</Description>
        <CreatedDate>08/06/2017</CreatedDate>
        <ClosedDate>15/09/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Concept-API</Label>
          <Label>Feature - IOperation</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21711</PullRequestID>
        <IssueID>20122</IssueID>
        <Title>IOperation API shape for BoundDynamicIndexerAccess</Title>
        <Description>Same design issue as other BoundDynamicXXX nodes. We can either reuse IIndexedPropertyReferenceExpression or define a new IDynamicIndexedPropertyReferenceExpression with a set of applicable indexers.

``</Description>
        <CreatedDate>08/06/2017</CreatedDate>
        <ClosedDate>15/09/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Concept-API</Label>
          <Label>Feature - IOperation</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21709</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>natidea</FixedByID>
    <Title>Don't crash in QuickInfo if the search for linked tokens goes out of bounds</Title>
    <Description>Port #17884 and #21567 to dev15.0.x

15.0.x Tracking Bug: [484304](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/484304)</Description>
    <CreatedDate>23/08/2017</CreatedDate>
    <ClosedDate>08/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21709</PullRequestID>
        <IssueID>17884</IssueID>
        <Title>Capture better dumps when the contents of linked files don't match</Title>
        <Description>In order to gather more information on
https://devdiv.visualstudio.com/DevDiv/_workitems?id=209299, we created
https://github.com/dotnet/roslyn/pull/16918 to capture the text of the
linked documents that aren't in sync. However, we tried to do so by
putting their text in local variables that were optimized away in dumps.

This change introduces a custom exception object that holds onto the
text of the conflicting documents and reports that exception.

Ask Mode Template
==========
**Customer scenario** We don't quite know. The customer has linked files (very common in cross-targeting) in their project and when they type in a file Visual Studio crashes occasionally.

**Bugs this fixes:** This change fixes no bugs, but helps us understand https://devdiv.visualstudio.com/DevDiv/_workitems?id=209299.

**Workarounds, if any**: Unknown.

**Risk**: Very low, we just report a new exception when this failure happens. The new code is in a `catch` block that is going to intentionally crash anyway.

**Performance impact**: Essentially none. We create a couple new objects during the process of crashing.

**Is this a regression from a previous update?**: No.

**Root cause analysis:** Unknown.

**How did we miss it?** The previous attempt to gather data for this issue was unintentionally ineffective.

**How was the bug found?** We investigated the dumps and found that the previous attempt was ineffective.</Description>
        <CreatedDate>15/03/2017</CreatedDate>
        <ClosedDate>17/03/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21709</PullRequestID>
        <IssueID>21567</IssueID>
        <Title>Don't crash in QuickInfo if the search for linked tokens goes out of bounds</Title>
        <Description>Works around 3/4 of the 12 dumps investigated for https://devdiv.visualstudio.com/DevDiv/_workitems?id=209299

**Customer scenario**

Unknown. At least one dump has indicated that this happens in linked/shared/multitargeted .cshtml files, where one of the linked documents is fully populated and the other is just a basically empty type.

**Bugs this fixes:**

Works around 3/4 of the 12 dumps investigated for https://devdiv.visualstudio.com/DevDiv/_workitems?id=209299

**Workarounds, if any**

None

**Risk**

It's possible that something will crash later on that was being caught by this earlier.

**Performance impact**

None

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

We still don't understand it.

**How was the bug found?**

Watsons</Description>
        <CreatedDate>16/08/2017</CreatedDate>
        <ClosedDate>17/08/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21479</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Bug fixes and testing for completion in XML documentation comments</Title>
    <Description>Supersedes #17970.

Builds on the *outstanding* original work by @lorcanmooney.

* Implements support for `&lt;see langword="null"/&gt;` (Fixes #11490, Fixes #11489)
* Add tests for expected behavior of `&lt;returns&gt;` and `&lt;value&gt;` (Improves upon the work in #21475)
* Implements proper support for `&lt;typeparamref name="T"/&gt;`, where `T` is defined by an enclosing code element (Fixes #17872)

Notable changes from the original:

* The set of keywords presented in code completion is restricted to a subset of keywords. This keeps the list from being overwhelming.
* The tests for `&lt;returns&gt;` and `&lt;value&gt;` were modified according to the new direction taken by the original bug.
* The handling of &lt;kbd&gt;Space&lt;/kbd&gt; after typing `&lt;see` was restored to the original behavior to avoid muscle memory problems for long-time users.</Description>
    <CreatedDate>13/08/2017</CreatedDate>
    <ClosedDate>01/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21479</PullRequestID>
        <IssueID>17970</IssueID>
        <Title>XML doc comment completion fixes</Title>
        <Description>A handful of fixes and features for XML doc completion. Also, where possible, I've factored out duplicated logic from the language-specific and into the base class.
- Closes #11489, adding support for a more fluid completion experience around attributes and values. This changes the behaviour of `&lt;space&gt;` when committing items. See #11489 for the discussion, and a description of the new behaviour.
- Closes #11490, adding support for the `see` `langword` attribute and suggesting keywords for the current language.
- Fixes #8627, adding `returns` to the completion list for properties with getters.
- Fixes a few issues that prevented suggestions for the `name` attribute in `[type]param[ref]` tags.
- Adds support for suggesting the possible `list` `type` values.
- Fixes some inconsistencies between C# and VB when suggesting top-level tags, and which tags are considered single-use vs. repeatable.
- Fixes an issue in VB where `value` and `returns` would be suggested even if the tags are already present.
- Fixes #17872, including all generic parameters in the symbol container hierarchy for `typeparamref` tags.

The commits are fairly logical and self-contained, so reading them one-by-one might make the review easier.</Description>
        <CreatedDate>19/03/2017</CreatedDate>
        <ClosedDate>13/08/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Community</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21479</PullRequestID>
        <IssueID>11490</IssueID>
        <Title>Auto suggest language keywords inside &lt;see langword="" /&gt;</Title>
        <Description>It would be great to be able to auto-suggest language keywords such as `null`, `abstract`, `true`, `false`, etc inside &lt;see langword=""/&gt;. Currently get offered no keywords. :(
</Description>
        <CreatedDate>21/05/2016</CreatedDate>
        <ClosedDate>01/09/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21479</PullRequestID>
        <IssueID>11489</IssueID>
        <Title>Add a &lt;see langword option in the completion window</Title>
        <Description>I often type `&lt;see langword="true"/&gt;`, `&lt;see langword="false"/&gt;`, `&lt;see langword="abstract"/&gt;`, etc like below. It would be great to be offered to add an add `&lt;see langword=""/&gt;` like there is with `&lt;see cref=""/&gt;`. 

``

![image](https://cloud.githubusercontent.com/assets/1103906/15451281/748d9bd2-1f6f-11e6-8bcf-9f602d67b82a.png)
</Description>
        <CreatedDate>21/05/2016</CreatedDate>
        <ClosedDate>01/09/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21479</PullRequestID>
        <IssueID>21475</IssueID>
        <Title>Insert value documentation instead of returns for properties</Title>
        <Description>Fixes #8627
</Description>
        <CreatedDate>12/08/2017</CreatedDate>
        <ClosedDate>27/01/2020</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>PR For Personal Review Only</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21479</PullRequestID>
        <IssueID>17872</IssueID>
        <Title>&lt;typeparamref isn't in the completion list for members of generic types</Title>
        <Description>I get it for the type itself:

![image](https://cloud.githubusercontent.com/assets/1103906/23932381/b685aaa0-098b-11e7-8eef-efe08c7fe892.png)

But not members of the type:

![image](https://cloud.githubusercontent.com/assets/1103906/23932373/a7f546da-098b-11e7-9121-a7d63318fb9b.png)
</Description>
        <CreatedDate>15/03/2017</CreatedDate>
        <ClosedDate>01/09/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21445</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>Fix IArgument.InConversion/OutConversion</Title>
    <Description>Fix #18548. Changed the In/OutConversion from `IConversionExpression` to `CommonConversion` (added in #21040 )

```cs
    public interface IArgument : IOperation
    {
        /// &lt;summary&gt;
        /// Kind of argument.
        /// &lt;/summary&gt;
        ArgumentKind ArgumentKind { get; }
        /// &lt;summary&gt;
        /// Parameter the argument matches.
        /// &lt;/summary&gt;
        IParameterSymbol Parameter { get; }
        /// &lt;summary&gt;
        /// Value supplied for the argument.
        /// &lt;/summary&gt;
        IOperation Value { get; }
        /// &lt;summary&gt;
        /// Information of the conversion applied to the argument value passing it into the target method. Applicable only to VB Reference arguments.
        /// &lt;/summary&gt;
        CommonConversion InConversion { get; }
        /// &lt;summary&gt;
        /// Information of the conversion applied to the argument value after the invocation. Applicable only to VB Reference arguments.
        /// &lt;/summary&gt;
        CommonConversion OutConversion { get; }
    }
``` </Description>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>12/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21445</PullRequestID>
        <IssueID>18548</IssueID>
        <Title>InConversion and OutConversion of VB ByRef argument exposes placeholder nodes as IOperations</Title>
        <Description>When passing a modifiable element as argument for a VB `ByRef` parameter, the `In/OutConversion`  properties of  the `IArgument` operation would expose placeholder nodes as `Operand` (as those properties themselves are of type `IConversionExpression`). 

``

Related: #8905</Description>
        <CreatedDate>08/04/2017</CreatedDate>
        <ClosedDate>12/09/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Concept-API</Label>
          <Label>Feature - IOperation</Label>
          <Label>Language-VB</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21445</PullRequestID>
        <IssueID>21040</IssueID>
        <Title>Conversion expression rewrite</Title>
        <Description>This is the interface changes required to implement https://github.com/dotnet/roslyn/issues/20046. This is just the changes to CodeAnalysis, CSharpCodeAnalysis, and VisualBasic. I'd like to get comments from @dotnet/analyzer-ioperation @CyrusNajmabadi @cston for this initial implementation. Changes from the initial proposal are as follows:
* Added ThrowsExceptionOnFailure for C# `as` and VB `TryCast` distiction.
* Removed the generics. They felt really bad. They've been replaced with
    * A property on `IConversionExpression` that returns the `IConversion`. This will result in a box, which is unfortunate, but the resulting object is castable directly to either C#'s or VB's `Conversion`.
    * Extension methods for VB and C# on `IConversionExpression` that allow the user to directly retrieve the underlying `Conversion`. These are direct access, and require no boxing.
* Added `IsReference` to `IConversion`.

Please leave comments and criticisms on the initial implementation.</Description>
        <CreatedDate>21/07/2017</CreatedDate>
        <ClosedDate>08/08/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Area-Compilers</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20947</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Fixed Inline Temporary Variable refactoring</Title>
    <Description>**Customer scenario**
Inline Temporary Variable adds duplicate cast

**Bugs this fixes:**
Fixes #16819

**Risk**
Low

**Performance impact**
Low

**Is this a regression from a previous update?**
No

**How was the bug found?**
customer reported
</Description>
    <CreatedDate>18/07/2017</CreatedDate>
    <ClosedDate>12/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20947</PullRequestID>
        <IssueID>16819</IssueID>
        <Title>Inline Temporary Variable adds duplicate cast</Title>
        <Description>**Version Used**: 15.0.0-RC.3+26127.0

``</Description>
        <CreatedDate>29/01/2017</CreatedDate>
        <ClosedDate>12/09/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20699</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Fixed Intellisense suggestion non-viable constructor call in delegating constructor</Title>
    <Description>Fixes #2579

**Customer scenario**

When autocompleting calls to ```: this()``` for delegating constructors, IntelliSense is suggesting that the constructor call itself

**Bugs this fixes:**

#2579

**Workarounds, if any**


**Risk**

Low

**Performance impact**

**Is this a regression from a previous update?**
No

**Root cause analysis:**

IntelliSense doesn't exclude current constructor from suggestion list. Existing tests verifies incorrect behavior.

**How was the bug found?**

customer reported
</Description>
    <CreatedDate>07/07/2017</CreatedDate>
    <ClosedDate>05/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20699</PullRequestID>
        <IssueID>2579</IssueID>
        <Title>Intellisense suggests non-viable constructor call in delegating constructor</Title>
        <Description>Using VS2015 RC.

When autocompleting calls to `: this()` for delegating constructors, intellisense is suggesting that the constructor call itself:

![Intellisense Suggestion](https://cloud.githubusercontent.com/assets/1544943/7519822/7a27974a-f497-11e4-97a9-a9a0a5303239.png)

Intellisense should suggest only other constructors here.
</Description>
        <CreatedDate>07/05/2015</CreatedDate>
        <ClosedDate>05/09/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20699</PullRequestID>
        <IssueID>2579</IssueID>
        <Title>Intellisense suggests non-viable constructor call in delegating constructor</Title>
        <Description>Using VS2015 RC.

When autocompleting calls to `: this()` for delegating constructors, intellisense is suggesting that the constructor call itself:

![Intellisense Suggestion](https://cloud.githubusercontent.com/assets/1544943/7519822/7a27974a-f497-11e4-97a9-a9a0a5303239.png)

Intellisense should suggest only other constructors here.
</Description>
        <CreatedDate>07/05/2015</CreatedDate>
        <ClosedDate>05/09/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19805</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>MaStr11</FixedByID>
    <Title>InternalsVisibleToCompletionProvider</Title>
    <Description>**Customer scenario**

Customer request #18889.

**Bugs this fixes:**

#18889 Productivity: IntelliSense support for InternalsVisibleToAttribute 

**Workarounds, if any**

New feature.

**Risk**

New *CompletionProvider*. Might break IntelliSense.

**Performance impact**

Memory pressure and IDE hangs caused by code completion might be possible.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

New Feature.

**How was the bug found?**

Feature request.

**PR description**

![internalsvisibletocompletionprovider](https://cloud.githubusercontent.com/assets/24472128/26581453/d198243e-453c-11e7-9361-bb7f95413dd7.gif)

**30.5.07 Update**

The PR is now ready for review and is feature complete.

What is included?

* The C# version of the *CompletionProvider*
* The option to live test the current implementation by starting *VisualStudioSetup*.
* Support for public key of strong named assemblies
* A few unit tests.

What is missing/broken?

* A VisualBasic version is missing

Beside these points there are some more fundamental questions that should be answered before I proceed: 

* Is a Visual Basic version mandatory? Should there be at least an abstract base class for a future VB implementation?
* Are there any major pieces missing from the current solution?
* How far should the testing of the attribute go? Currently I stopped at syntax level. Should this be extended to SemanticModel.GetTypeInfo() to test whether the attribute is of type *System.Runtime.CompilerServices.InternalsVisibleToAttribute*
* What is the correct way to get the assembly name (Project.AssemblyName or Project.Name)?
* How to detect valid project types?
* Is *CompletionItem.Create* the right way to create the completion entry or should I take *SymbolCompletionItem.CreateWithNameAndKind*?
* The unit test needs a workspace with a solution with more than one project. Is the way I added the project correct or are there better ways to do this?
* Is it okay to trigger the completion list when a double quote is inserted?

Please give me some directions on how to proceed (or just close the PR if this is likely never considered to be included in Roslyn).</Description>
    <CreatedDate>26/05/2017</CreatedDate>
    <ClosedDate>08/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19805</PullRequestID>
        <IssueID>18889</IssueID>
        <Title>Productivity: IntelliSense support for InternalsVisibleToAttribute</Title>
        <Description>There should be IntelliSense support for completing the contents of `InternalsVisibleTo` based on projects in the solution. It should complete the full information with any required public key information.</Description>
        <CreatedDate>21/04/2017</CreatedDate>
        <ClosedDate>31/05/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19805</PullRequestID>
        <IssueID>18889</IssueID>
        <Title>Productivity: IntelliSense support for InternalsVisibleToAttribute</Title>
        <Description>There should be IntelliSense support for completing the contents of `InternalsVisibleTo` based on projects in the solution. It should complete the full information with any required public key information.</Description>
        <CreatedDate>21/04/2017</CreatedDate>
        <ClosedDate>31/05/2018</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18940</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Remove context (enclosing type name) from C# parser.</Title>
    <Description>**Customer scenario**

This is general infrastructure work for the compiler based on [design changes](https://github.com/dotnet/roslyn/blob/master/docs/compilers/Design/Parser.md) the team agreed on. It is also necessary preparation work for the API feature request to add a parser API ParseMemberDeclaration() #367.

**Bugs this fixes:**

Not a bug per se. Related to #367.

**Workarounds, if any**

N/A

**Risk**

Low. The change is focused, and by reducing the context dependence in the parser may reduce the risk of incorrect behavior in the incremental parser in the future.

**Performance impact**

Low if any.

**Is this a regression from a previous update?**

N/A

**Root cause analysis:**

N/A

**How was the bug found?**

N/A
</Description>
    <CreatedDate>23/04/2017</CreatedDate>
    <ClosedDate>11/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18940</PullRequestID>
        <IssueID>367</IssueID>
        <Title>Please add SyntaxFactory.ParseDeclaration</Title>
        <Description>&gt; Subject: Could we have SyntaxFactory.ParseDeclaration(...)?
&gt; From: Mark Zhou
&gt; To: Roslyn Discussion
&gt; Sent: Sunday, December 14, 2014 7:25 PM

Hi, 

I am doing a side analysis project that requires adding/removing `MemberDeclarationSyntax` and derives for the code fix. some code fix providers in my code heavily depend on `SyntaxFactory` and `SyntaxGenerator` APIs. When I explore `ParseXxx` methods from `SyntaxFactory`, I noticed there isn’t one for simply parsing a text into `MemberDeclarationSyntax`. Adding a member into a type becomes a mess for me – since you need to call either `SyntaxFactory.MethodDeclaration` or `SyntaxGenerator.AddMembers` or equivalent. 

My ask is whether we can have one API to parse text to a member declaration? 

Thanks,
Mark.

[Migrated from TFS DevDiv 1096321]
</Description>
        <CreatedDate>10/02/2015</CreatedDate>
        <ClosedDate>28/09/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-API</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18940</PullRequestID>
        <IssueID>367</IssueID>
        <Title>Please add SyntaxFactory.ParseDeclaration</Title>
        <Description>&gt; Subject: Could we have SyntaxFactory.ParseDeclaration(...)?
&gt; From: Mark Zhou
&gt; To: Roslyn Discussion
&gt; Sent: Sunday, December 14, 2014 7:25 PM

Hi, 

I am doing a side analysis project that requires adding/removing `MemberDeclarationSyntax` and derives for the code fix. some code fix providers in my code heavily depend on `SyntaxFactory` and `SyntaxGenerator` APIs. When I explore `ParseXxx` methods from `SyntaxFactory`, I noticed there isn’t one for simply parsing a text into `MemberDeclarationSyntax`. Adding a member into a type becomes a mess for me – since you need to call either `SyntaxFactory.MethodDeclaration` or `SyntaxGenerator.AddMembers` or equivalent. 

My ask is whether we can have one API to parse text to a member declaration? 

Thanks,
Mark.

[Migrated from TFS DevDiv 1096321]
</Description>
        <CreatedDate>10/02/2015</CreatedDate>
        <ClosedDate>28/09/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-API</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18545</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>ivanbasov</FixedByID>
    <Title>Catching flaky test</Title>
    <Description>Could not catch #18428 locally. Trying to catch it on Jenkins. The original PR is not for merge but for running Jenkins test only.</Description>
    <CreatedDate>08/04/2017</CreatedDate>
    <ClosedDate>07/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18545</PullRequestID>
        <IssueID>18428</IssueID>
        <Title>[Flaky Test] Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.ResetInteractiveFromProjectAndVerify failed in release build</Title>
        <Description>Possibly related to #18293, but since that issue doesn't describe this test specifically, opening a separate bug. Failed in https://ci.dot.net/job/dotnet_roslyn/view/Official%20Builds/job/master/job/windows_release_vs-integration/680/. Jenkins Logs:

``
![image](https://cloud.githubusercontent.com/assets/2371880/24670870/8ee39216-1924-11e7-8201-bbdc5c23c0f5.png)

Tagging @tmat @ivanbasov.</Description>
        <CreatedDate>04/04/2017</CreatedDate>
        <ClosedDate>16/06/2017</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Flaky</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18154</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add unit tests for IArrayCreationExpression and IArrayInitializer</Title>
    <Description>Fixes #17596

Issues identified while adding unit tests: https://github.com/dotnet/roslyn/issues/18150</Description>
    <CreatedDate>24/03/2017</CreatedDate>
    <ClosedDate>25/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18154</PullRequestID>
        <IssueID>17596</IssueID>
        <Title>[IExpression] IOperation unit tests for array related expressions</Title>
        <Description>- [x] IArrayCreationExpression
- [x] IArrayInitializer </Description>
        <CreatedDate>07/03/2017</CreatedDate>
        <ClosedDate>25/09/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18075</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>IOperation SyntaxNode check</Title>
    <Description>Hook up part of the compiler tests with `SyntaxNodeGetOperationWalker`, which traverses syntax trees and  examines return value of SemanticModel.GetOpertaion on each `SyntaxNode`. The walker reports null and None kind operations at the end. 

Also refactored and hooked up existing `TestOperationWalker`, which traverses operation tree (currently only on method bodies), accesses each operation and looks for exceptions and None operation.

#17913 
@dotnet/analyzer-ioperation </Description>
    <CreatedDate>22/03/2017</CreatedDate>
    <ClosedDate>18/10/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18075</PullRequestID>
        <IssueID>17913</IssueID>
        <Title>Verify IOperation for all SyntaxNode kinds</Title>
        <Description>Reuse existing compiler syntax tests, to figure out if `IOperation` returned from `SemanticModel.GetOperation` make sense or not.

@dotnet/analyzer-ioperation 

Related:
#17917 
#11903 
#11860</Description>
        <CreatedDate>16/03/2017</CreatedDate>
        <ClosedDate>18/01/2018</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Test</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6951</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>SamB</FixedByID>
    <Title>[WIP] Portable workspace tests</Title>
    <Description>[Note: This comes after PR #6943.]

I've noticed that there is not a portable test project for Workspaces, which is a problem because I wanted to add a test to it.  So, I'm about to try creating one; I'm starting this PR now so I can get some early warning when I screw something up that doesn't show up in my own testing.
</Description>
    <CreatedDate>21/11/2015</CreatedDate>
    <ClosedDate>08/09/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6951</PullRequestID>
        <IssueID>6943</IssueID>
        <Title>.editorconfig: Don't set indent_size for all files</Title>
        <Description>Roslyn has many different kinds of files in it, so it would be a lot of
work to try to assign appropriate indent_size values to all of them, and
would tend to get out of date; consequently, it's not a very good idea
to include indent_size in the [*] section.

One example that was wrong here is .json; .xml and .xsd were also
similarly afflicted. (And .xsd most certainly does not need any more
afflictions beyond those that were "designed" into it.)
</Description>
        <CreatedDate>20/11/2015</CreatedDate>
        <ClosedDate>21/11/2015</ClosedDate>
        <Labels>
          <Label>Community</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21315</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>ivanbasov</FixedByID>
    <Title>CSharpLanguageInstructionDecoder implementation of IDkmLanguageInstructionDecoder is slow (Merge to 15.4)</Title>
    <Description>**Customer scenario**
	1. User debugs a C# project and a VB project.
	2. The call stack of the current frame is deep enough.
	3. The Call Stack window is open.
	4. It takes an essential time to fulfill the Call Stack window.
	5. When moving to another frame in code, it takes again an essential time to update the Call Stack window.

**Bugs this fixes:**

https://devdiv.visualstudio.com/DevDiv/_workitems?id=475900
Fixes #20017

**Workarounds, if any**
No

**Risk**
Low. We avoid loading metadata blocks and allocating memory for them. Instead of this we compare pointers and sizes of the blocks.

**Performance impact**
It is expected to be a good improvement.

**Is this a regression from a previous update?**
No

**Root cause analysis:**
We found that we load all metadata blocks for each frame in the call stack. This involves an essential memory allocation. After loading, we compare the block loaded with existing one. If they match, we throw away the block just loaded. 

Now we avoid loading blocks. Instead of this we compare pointers and block sizes. It should save on unnecessary memory allocation.

Metadata blocks can change e.g. on EnC but this happens essentially rarely than metadata loading. 

**How was the bug found?**
Watson 


This has already been reviewed/merged for 15.5 https://github.com/dotnet/roslyn/pull/20834 
This is to port the change over to dev15.4.x. 
</Description>
    <CreatedDate>03/08/2017</CreatedDate>
    <ClosedDate>08/08/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21315</PullRequestID>
        <IssueID>20017</IssueID>
        <Title>CSharpLanguageInstructionDecoder implementation of IDkmLanguageInstructionDecoder is slow</Title>
        <Description>The implementation of IDkmLanguageFrameDecoder.GetFrameName in Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.CSharpLanguageInstructionDecoder is causing slow stepping performance if the callstack or threads windows are open in Visual Studio.  In ETL traces that we have looked it, we see that about half of the time stepping can be spent in this function.</Description>
        <CreatedDate>05/06/2017</CreatedDate>
        <ClosedDate>14/07/2017</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21258</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>khyperia</FixedByID>
    <Title>Correct the order of parameters to Version</Title>
    <Description>Fixes #21136

No behavior changes, as the order of parameters in the signature was incorrect as well. Manually verified all use sites do not use named arguments (all use sites are within the same file, in the same method).

Also quickly glanced over all calls to the Version ctor in Compilers.sln in non-test projects, and all of them are already correct.

@dotnet/roslyn-compiler this is *incredibly* easy to review :)</Description>
    <CreatedDate>02/08/2017</CreatedDate>
    <ClosedDate>02/08/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21258</PullRequestID>
        <IssueID>21136</IssueID>
        <Title>Potential parameter switch in AssemblyResolution.TryRedirect</Title>
        <Description>**Version Used**: 
Source code on master [AssemblyResolution.TryRedirect](https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/MSBuildTask/AssemblyResolution.cs#L79).

**Expected Behavior**:
The `Version` class constructor with [4 parameters](https://msdn.microsoft.com/en-us/library/kstyaxxh(v=vs.110).aspx) is defined with the following order major, minor, build and revision so it is likely that the code is wrong and should be defined as the following:
`var version = new Version(major, minor, build, revision);`

**Actual Behavior**:
`var version = new Version(major, minor, revision, build);`</Description>
        <CreatedDate>26/07/2017</CreatedDate>
        <ClosedDate>02/08/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21167</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>khyperia</FixedByID>
    <Title>Remove ignored flag</Title>
    <Description>This is a follow-up to PR #21146, which was unable to be merged without
keeping this flag ignore.</Description>
    <CreatedDate>27/07/2017</CreatedDate>
    <ClosedDate>28/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21167</PullRequestID>
        <IssueID>21146</IssueID>
        <Title>Move logic from the Makefile to either cibuild.sh or build/scripts</Title>
        <Description>Also update a couple docs to reflect more modern information. Docs are very out of date at this point, and a review pass should probably be done.

This is an alternative/improvement to #21031. After spending a lot of time reworking the Makefile and simplifying logic, I realized that we're basically using none of the useful features of make, and logic just gets significantly overcomplicated when supporting various operations (using uncommon/advanced make features, which dramatically reduces maintainability).

The mac/linux story, at this point, is good enough to tell users to just `dotnet build CrossPlatform.sln`. I've taken the operation of downloading a custom CLI into a user-runnable script (that is also called from CI), as well as extracted the `DeployCoreClrTestRuntime` into `tests.sh`, which now should be user-runnable as well.</Description>
        <CreatedDate>26/07/2017</CreatedDate>
        <ClosedDate>27/07/2017</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>21146</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>khyperia</FixedByID>
    <Title>Move logic from the Makefile to either cibuild.sh or build/scripts</Title>
    <Description>Also update a couple docs to reflect more modern information. Docs are very out of date at this point, and a review pass should probably be done.

This is an alternative/improvement to #21031. After spending a lot of time reworking the Makefile and simplifying logic, I realized that we're basically using none of the useful features of make, and logic just gets significantly overcomplicated when supporting various operations (using uncommon/advanced make features, which dramatically reduces maintainability).

The mac/linux story, at this point, is good enough to tell users to just `dotnet build CrossPlatform.sln`. I've taken the operation of downloading a custom CLI into a user-runnable script (that is also called from CI), as well as extracted the `DeployCoreClrTestRuntime` into `tests.sh`, which now should be user-runnable as well.</Description>
    <CreatedDate>26/07/2017</CreatedDate>
    <ClosedDate>27/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>21146</PullRequestID>
        <IssueID>21031</IssueID>
        <Title>Clean up Makefile</Title>
        <Description>Every time I opened up the Makefile, I got really sad. This cleans it up to be a tad more reasonable.

List of changes:

* Use immediate sets instead of recursive sets in many places
* Don't assume `$(shell pwd)` is the same thing as the location of the Makefile (use [MAKEFILE_LIST](https://ftp.gnu.org/old-gnu/Manuals/make/html_node/make_17.html) instead)
* Make the WTF of `HOME_DIR = $(shell cd ~ &amp;&amp; pwd)` more clear with docs, and be more sane about setting it (and use Make's env-setting command, instead of copypasting `HOME=$(HOME_DIR)` everywhere)
* Clean up adding dotnet to `PATH` (again, use Make's export command, instead of copy-pasting `PATH=...`)
* Shuffle around whatever the heck `MSBUILD_ADDITIONALARGS` was (just use `MSBUILD_ARGS`)
* Tabs to spaces in areas that aren't rules
* Error if `OS_NAME` is unknown, instead of failing obscurely later
* Don't do bizarre things with `pushd` and single huge commands passed to the shell
* Root paths in commands with vars calculated earlier (e.g. why were we even calculating `SRC_PATH` and then never using it...)
* Pipe `dotnet-install.sh` into bash, instead of doing wacky writes to disk (where we have to worry about `chmod +x` and the current directory)
* Use the specified version of cli for dotnet-install, instead of hardcoding 1.0.0
* Remove `HOME` bizzare-ness from `restore.sh`, as we're setting that in the makefile
* Remove strange comment from `tests.sh`

I'm still really suspicious of strange things happening in the `bootstrap` rule, but that seems like a very invasive and potentially behavior-changing change, so I've left that for now.

Using `pr-for-personal-review-only` until I take a look at ci results to make sure nothing is terribly broken.</Description>
        <CreatedDate>21/07/2017</CreatedDate>
        <ClosedDate>27/07/2017</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20662</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Use IVsSolution to get the correct IVsProject for an IVsHierarchy</Title>
    <Description>Fixes crashes associated with InvisibleEditor.

**Customer scenario**

* Use the Inline Rename functionality to rename an element (rare, never reproduced outside of crash reports)
* Use the following steps:
  1. Open dotnet/vs-threading
  2. Open **AsyncAutoResetEvent.cs**
  3. Use Inline Rename to rename `AsyncAutoResetEvent` to `AsyncAutoResetEvent2`
  4. Use CodeLens to drop down the references to the type
  5. Double click the reference in **AsyncAutoResetEventTests.cs** from the `evt` field

**Bugs this fixes:**

Fixes [DevDiv 458062](https://devdiv.visualstudio.com/DevDiv/_workitems?id=458062).

**Workarounds, if any**

None.

**Risk**

Low. The solution to the problem was implemented using techniques which all project systems should support without trouble.

**Performance impact**

Negligible. The solution was analyzed specifically to ensure the performance benefits of #19919 are retained.

**Is this a regression from a previous update?**

Yes.

**Root cause analysis:**

Edge case / race condition introduced by #19919. The root cause is documented in a comment in code:

&gt; The invisible editor manager will fail in cases where the `IVsProject` passed to it is not consistent with the `IVsProject` known to `IVsSolution` (e.g. if the object is a wrapper like `AbstractHostObject` created by the CPS-based project system). This method returns an `IVsProject` instance known to the solution, or null if the project could not be determined.

**How was the bug found?**

Watson and manual testing.
</Description>
    <CreatedDate>06/07/2017</CreatedDate>
    <ClosedDate>07/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20662</PullRequestID>
        <IssueID>19919</IssueID>
        <Title>Pass a project when creating an invisible editor</Title>
        <Description>This change substantially reduces the amount of work required to locate a document within the solution (file path to hierarchy+itemid).

* Time to apply Fix All from #19895: 2:45 mins
* Time to apply Fix All after this change: 1:32 mins

## Ask Mode

**Customer scenario**

A customer applies a Fix All operation which affects many files in a large solution. (Not specific to any particular code fix.)

**Bugs this fixes:**

Derived from #19900 as the safe option for 15.3 (provides some but not all possible benefits).

**Workarounds, if any**

Wait longer.

**Risk**

Low. This feature adds a hint for a lookup, but valid information is not required in order for the underlying operation to succeed (falls back to slow case when information is not available).

**Performance impact**

This is a substantial performance improvement for Fix All operations.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

No performance tests covering large-scale operations (yet).

**How was the bug found?**

Internal testing.</Description>
        <CreatedDate>31/05/2017</CreatedDate>
        <ClosedDate>01/06/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Tenet-Performance</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20662</PullRequestID>
        <IssueID>19919</IssueID>
        <Title>Pass a project when creating an invisible editor</Title>
        <Description>This change substantially reduces the amount of work required to locate a document within the solution (file path to hierarchy+itemid).

* Time to apply Fix All from #19895: 2:45 mins
* Time to apply Fix All after this change: 1:32 mins

## Ask Mode

**Customer scenario**

A customer applies a Fix All operation which affects many files in a large solution. (Not specific to any particular code fix.)

**Bugs this fixes:**

Derived from #19900 as the safe option for 15.3 (provides some but not all possible benefits).

**Workarounds, if any**

Wait longer.

**Risk**

Low. This feature adds a hint for a lookup, but valid information is not required in order for the underlying operation to succeed (falls back to slow case when information is not available).

**Performance impact**

This is a substantial performance improvement for Fix All operations.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

No performance tests covering large-scale operations (yet).

**How was the bug found?**

Internal testing.</Description>
        <CreatedDate>31/05/2017</CreatedDate>
        <ClosedDate>01/06/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Tenet-Performance</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20658</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Skip BasicCodeActions.GenerateMethodInClosedFile</Title>
    <Description>:arrow_right: See #20371</Description>
    <CreatedDate>05/07/2017</CreatedDate>
    <ClosedDate>06/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20658</PullRequestID>
        <IssueID>20371</IssueID>
        <Title>[Test failure] BasicCodeActions.GenerateMethodInClosedFile</Title>
        <Description>windows_release_vs-integration_prtest failed on #19490 Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicCodeActions.GenerateMethodInClosedFile ([details](https://ci.dot.net/job/dotnet_roslyn/job/dev15.6/job/windows_release_vs-integration_prtest/380/))
``</Description>
        <CreatedDate>21/06/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Flaky</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20655</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Pilchie</FixedByID>
    <Title>Also ensure filewatcher subscriptions for unresolved analyzers</Title>
    <Description>**Customer scenario**: When opening a project where the analyzer doesn't exist on disk, we may not have subscribed to file change tracking when it starts existing, so we may not add it.
**Bugs this fixes:** Fixes #20149 / https://devdiv.visualstudio.com/DevDiv/NET%20Developer%20Experience%20IDE/_workitems?id=460373&amp;_a=edit
**Workarounds, if any**: Wait long enough after opening a project before restoring.
**Risk**: Low - just restoring the wait that was previously there.
**Performance impact**: Small - may lose some of the benefit of https://github.com/dotnet/roslyn/pull/20149, in the case where the files don't exist, but still better than 15.2
**Is this a regression from a previous update?**: Yes, https://github.com/dotnet/roslyn/pull/20149 introduced this.
**Root cause analysis:** We missed it in code review of the previous fix.
**How was the bug found?**: Code inspection.</Description>
    <CreatedDate>05/07/2017</CreatedDate>
    <ClosedDate>13/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20655</PullRequestID>
        <IssueID>20149</IssueID>
        <Title>Some performance and reliability fixes around file change tracking</Title>
        <Description>**Reviewing commit by commit is strongly advised.**

*Perf:* We were creating a bunch of tasks on the thread pool, all of which ultimately contended on the single lock that exists inside of the current implementation of IVsFileChangeEx. That's silly, so let's just only try to do one of the background subscriptions at a time. We also don't need to wait on the UI thread when adding analyzers.

*Reliability:* We were crashing when some transient file system exceptions were happening. We'll now swallow those. Other exceptions will still crash the process.</Description>
        <CreatedDate>09/06/2017</CreatedDate>
        <ClosedDate>16/06/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
          <Label>Tenet-Performance</Label>
          <Label>Tenet-Reliability</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20654</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Remove Retry timeout parameter from test helper</Title>
    <Description>Fixes #20334.</Description>
    <CreatedDate>05/07/2017</CreatedDate>
    <ClosedDate>07/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20654</PullRequestID>
        <IssueID>20334</IssueID>
        <Title>Test failure: CSharpCodeActions.GFUFuzzyMatchAfterRenameTracking: ArgumentOutOfRange in DateTime.AddTicks()</Title>
        <Description>[Failure](https://ci.dot.net/job/dotnet_roslyn/job/master/job/windows_debug_vs-integration_prtest/5490/testReport/junit/Roslyn.VisualStudio.IntegrationTests.CSharp/CSharpCodeActions/GFUFuzzyMatchAfterRenameTracking/) hit in PR #20277.

`WaitForLightBulbSession` calls `Retry` which calls  `beginTime.Add(TimeSpan.MaxValue)`:
``</Description>
        <CreatedDate>20/06/2017</CreatedDate>
        <ClosedDate>07/07/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Flaky</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20647</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix implementation of Dispose in tests</Title>
    <Description>Fixes #20644
</Description>
    <CreatedDate>05/07/2017</CreatedDate>
    <ClosedDate>07/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20647</PullRequestID>
        <IssueID>20644</IssueID>
        <Title>Several integration tests declare unused `Dispose()` methods</Title>
        <Description>`CSharpInteractiveBoxSelection`, `CSharpReplIdeFeatures`, and `BasicExpressionEvaluator` declare `public new void Dispose()` methods but the containing classes do not re-implement `IDisposable` so the `Dispose` methods may not be invoked.</Description>
        <CreatedDate>05/07/2017</CreatedDate>
        <ClosedDate>07/07/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Interactive</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20646</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>khyperia</FixedByID>
    <Title>Add tuple declarations to AllInOneCSharpCode</Title>
    <Description>Also modify the test that checks for all SyntaxKinds to be present to
fail if an "expected to be missing" SyntaxKind is actually present.

Fixes #12446

Test-only change.</Description>
    <CreatedDate>05/07/2017</CreatedDate>
    <ClosedDate>12/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20646</PullRequestID>
        <IssueID>12446</IssueID>
        <Title>TestResource.AllInOneCSharpCode is missing VariableDeconstructionDeclarator</Title>
        <Description>Our test resource that has an example of every syntax node is missing `VariableDeconstructionDeclarator`.
</Description>
        <CreatedDate>12/07/2016</CreatedDate>
        <ClosedDate>12/07/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20645</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Fixed completion list for explicit interface implementation</Title>
    <Description>Fixes #15988
Fixes #19947

**Customer scenario**
Completion list for explicit interface implementations includes invalid members.

**Bugs this fixes:**
#19947, #15988

**Workarounds, if any**
None

**Risk**
Low, affected only ```ExplicitInterfaceMemberCompletionProvider``` class.

**Performance impact**

**Is this a regression from a previous update?**

**Root cause analysis:**
Completion members aren't filtered by interface type. Tests doesn't check that invalid members are not presented in code completion.

**How was the bug found?**

customer reported
</Description>
    <CreatedDate>05/07/2017</CreatedDate>
    <ClosedDate>07/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20645</PullRequestID>
        <IssueID>15988</IssueID>
        <Title>Explicit Interface Implementation Completions show Object methods</Title>
        <Description>**Version Used**: 2017 RC Refresh

``

Pressing Ctrl+Space after the `.` will show the four methods from `object`, even though they cannot be implemented with this syntax.</Description>
        <CreatedDate>18/12/2016</CreatedDate>
        <ClosedDate>07/07/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20645</PullRequestID>
        <IssueID>19947</IssueID>
        <Title>Completion list for explicit interface implementations includes invalid members</Title>
        <Description>![image](https://cloud.githubusercontent.com/assets/10522107/26692210/b4df7fee-46b4-11e7-97e6-2d6efb75b249.png)

Only implementable members declared immediately in the named interface should be in the list, members from derived interfaces will cause an error.</Description>
        <CreatedDate>01/06/2017</CreatedDate>
        <ClosedDate>07/07/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20645</PullRequestID>
        <IssueID>19947</IssueID>
        <Title>Completion list for explicit interface implementations includes invalid members</Title>
        <Description>![image](https://cloud.githubusercontent.com/assets/10522107/26692210/b4df7fee-46b4-11e7-97e6-2d6efb75b249.png)

Only implementable members declared immediately in the named interface should be in the list, members from derived interfaces will cause an error.</Description>
        <CreatedDate>01/06/2017</CreatedDate>
        <ClosedDate>07/07/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20645</PullRequestID>
        <IssueID>15988</IssueID>
        <Title>Explicit Interface Implementation Completions show Object methods</Title>
        <Description>**Version Used**: 2017 RC Refresh

``

Pressing Ctrl+Space after the `.` will show the four methods from `object`, even though they cannot be implemented with this syntax.</Description>
        <CreatedDate>18/12/2016</CreatedDate>
        <ClosedDate>07/07/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20634</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Eliminate dead branches due to always-true or always-false conditions</Title>
    <Description>Fixes #20599
</Description>
    <CreatedDate>04/07/2017</CreatedDate>
    <ClosedDate>07/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20634</PullRequestID>
        <IssueID>20599</IssueID>
        <Title>Always true/false conditions on master</Title>
        <Description>**Version Used**: 
Latest master

**Actual Behavior**:
The following conditions are always true/false.

On class [BinderFactory.BinderFactoryVisitor.cs](https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Binder/BinderFactory.BinderFactoryVisitor.cs#L479), the highlighted `if` condition is always false as it duplicates the previous condition (which returns).

On class [AbstractTriviaFormatter.cs](https://github.com/dotnet/roslyn/blob/master/src/Workspaces/Core/Portable/Formatting/TriviaEngine/AbstractTriviaFormatter.cs#L731), `_firstLineBlank` is always false because when it is true the method returns on line 718.

On class [GraphBuilder.cs](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/Progression/GraphBuilder.cs#L342), `typeSymbol` is always different from null because of the direct cast.

On class [SuggestedActionSetComparer.cs](https://github.com/dotnet/roslyn/blob/master/src/EditorFeatures/Core/Implementation/Suggestions/SuggestedActionSetComparer.cs#L21), the last bit of the `if` condition is always false because it is redundant with the previous check (== null is equivalent to !HasValue).

On class [CSharpRenameRewriterLanguageService.cs](https://github.com/dotnet/roslyn/blob/master/src/Workspaces/CSharp/Portable/Rename/CSharpRenameRewriterLanguageService.cs#L160), the variable `shouldComplexifyNode` is always true because the code is contained in a conditional block.

On class [ParameterHelpers.cs](https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Symbols/Source/ParameterHelpers.cs#L215), the last or clause of the `else if` condition is always false because it was tested to true on the previous `else if` condition.

On class [SolutionState.cs](https://github.com/dotnet/roslyn/blob/master/src/Workspaces/Core/Portable/Workspace/Solution/SolutionState.cs#L1131), the parameter `folders` is always different from `null` because there was an explicit check to null just before.

Cheers</Description>
        <CreatedDate>01/07/2017</CreatedDate>
        <ClosedDate>07/07/2017</ClosedDate>
        <Labels>
          <Label>Concept-Continuous Improvement</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20632</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Fixed 'Generate Constructor' refactoring for an abstract class.</Title>
    <Description>**Customer scenario**
"Generate constructor" code fix generates public constructor for abstract class instead of protected constructor.

**Bugs this fixes:**
#20595

**Workarounds, if any**
None

**Risk**
Low

**Performance impact**
Low, no additional allocations

**Is this a regression from a previous update?**
No

**Root cause analysis:**
Not implemented behavior.

**How was the bug found?**
customer reported</Description>
    <CreatedDate>04/07/2017</CreatedDate>
    <ClosedDate>25/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20632</PullRequestID>
        <IssueID>20595</IssueID>
        <Title>Generate Constructor refactoring generates a public constructor in an abstract class</Title>
        <Description>**Version Used**: 
Visual Studio 2017 (Roslyn 2)

**Steps to Reproduce**:
1. Create the following class

``
</Description>
        <CreatedDate>01/07/2017</CreatedDate>
        <ClosedDate>25/07/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20596</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Fixed Incorrect IDE0004 (Cast is redundant) when negating enum value</Title>
    <Description>**Customer scenario**
Incorrect IDE0004 (Cast is redundant) when negating enum value

**Bugs this fixes:**

Fixes #18510

**Workarounds, if any**
None

**Risk**
Low

**Performance impact**

**Is this a regression from a previous update?**
Also repro in VS2015

**Root cause analysis:**
Not implemented check for negating enum value in CSharpRemoveUnnecessaryCastDiagnosticAnalyzer

**How was the bug found?**
customer reported
</Description>
    <CreatedDate>01/07/2017</CreatedDate>
    <ClosedDate>08/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20596</PullRequestID>
        <IssueID>18510</IssueID>
        <Title>Incorrect IDE0004 (Cast is redundant) when negating enum value</Title>
        <Description>**Version Used**: Visual Studio 2017 (15.1 - 26403.0)

**Steps to Reproduce**:

``

**Expected Behavior**:

IDE0004 is not reported for the `(int)` cast in `(int)mySign`.

**Actual Behavior**:

IDE0004 is reported for the `(int)` cast in `(int)mySign`. Removing the cast results in the following compilation error:

&gt; CS0023: Operator '-' cannot be applied to operand of type 'Sign'

**Reference**:

This appears related to, but not quite a duplicate of #11008.

This was originally reported here:
https://developercommunity.visualstudio.com/content/problem/39596/intellisense-suggests-invalid-cast.html</Description>
        <CreatedDate>06/04/2017</CreatedDate>
        <ClosedDate>08/07/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20592</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix options page</Title>
    <Description>**Customer scenario**

A customer sees a suggestion regarding a naming violation, and uses the light bulb option to Change Naming Style Options. Visual Studio crashes.

**Bugs this fixes:**

https://developercommunity.visualstudio.com/content/problem/25989/crash-when-clicking-change-style-options-on-fix-na.html
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/392353 (Microsoft-internal duplicate of the previous link)
https://devdiv.visualstudio.com/DevDiv/_workitems/edit/395454 (Microsoft-internal link, but just the automated crash report from the public link above)

**Workarounds, if any**

Open the Tools &amp;rarr; Options... page via the menu and manually navigate to the correct page.

**Risk**

Low. This is the pattern [NuGet uses](https://github.com/NuGet/NuGet.Client/blob/f9fa6b3ab4e485a4cac9e88215c59d0c4b0a8ba6/src/NuGet.Clients/NuGet.PackageManagement.VisualStudio/OptionsPageActivator.cs#L73-L79) for opening their options page.

**Performance impact**

Improved performance, but on a path where it doesn't make a difference.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Negative interaction with a Visual Studio extension can cause this, e.g. what was seen in laurentkempe/GitDiffMargin#104. This bug is very difficult to reproduce without seeing an instance of it before, but when it happens it's very frustrating.

**How was the bug found?**

Customer reported.
</Description>
    <CreatedDate>01/07/2017</CreatedDate>
    <ClosedDate>14/08/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20592</PullRequestID>
        <IssueID>104</IssueID>
        <Title>Constrained primitive and string types</Title>
        <Description>To avoid using a string parameter everywhere the value should be a string, but not any string, it would be useful to make a constrained version of a string, which only allows certain values.

The same thing would be true for primitive types like ints, doubles, etc.

People keep building CustomerId, AccountNumber, ZipCode, AddressLine, SSN, etc types, which are all basically constrained strings. It is definitely possible to work around this by creating types like this:

``

Etc, etc. This would make the language richer, and, maybe more checks could be performed compile-time (Roslyn to the rescue).
</Description>
        <CreatedDate>28/01/2015</CreatedDate>
        <ClosedDate>15/08/2016</ClosedDate>
        <Labels>
          <Label>Area-Language Design</Label>
          <Label>Discussion</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20588</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Fix IntelliSense in VSSDK projects that do not produce a VSIX</Title>
    <Description>Workaround for #20543
</Description>
    <CreatedDate>30/06/2017</CreatedDate>
    <ClosedDate>01/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20588</PullRequestID>
        <IssueID>20543</IssueID>
        <Title>Latest roslyn.sln produces error list errors.</Title>
        <Description>I'm getting:

``

In my error list.  I'm at commit ca840979a0f585419abf9f752395d8decaf96c14</Description>
        <CreatedDate>29/06/2017</CreatedDate>
        <ClosedDate>17/11/2017</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Resolution-Not Reproducible</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20587</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Fixes overload resolution regression with ValueTuple</Title>
    <Description>**Customer scenario**

The C# overload resolution tie-breaker involving a more specific type argument isn't respected for instances of ValueTuple. When such a scenario arises, the programmer get an ambiguity error on the invocation.

**Bugs this fixes:**

Fixes #20494
Adds a test for #20583

**Workarounds, if any**

The programmer can provide explicit type arguments to resolve the ambiguity.

**Risk**

Small. The fix is a very local workaround for the symptom. The underlying issue (ValueTuple instances are not recognized by the compiler as generic), may be addressed separately in a more extensive change.

**Performance impact**

Tiny or none.

**Is this a regression from a previous update?**

It is a regression in VS2017 versus VS2015.

**Root cause analysis:**

This is a symptom of our choice of internal representation for tuple types. I am separately looking at a more uniform change to address the underlying issue, which is that tuple types are not recognized by the compiler as generic.

**How was the bug found?**

Ad-hoc testing.

@dotnet/roslyn-compiler May I please have a couple of reviews of this tiny bug fix?
</Description>
    <CreatedDate>30/06/2017</CreatedDate>
    <ClosedDate>09/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20587</PullRequestID>
        <IssueID>20494</IssueID>
        <Title>"More generic" tie-breaker not applied to ValueTuple in C# 7 compiler</Title>
        <Description>**Version Used**: 15.2

**Steps to Reproduce**:

1. Compile the following code

**Expected Behavior**:

Code compiles without problem, just like it did using previous C# compilers.

**Actual Behavior**:

Compile fails at `M2(b)`, complaining that `error CS0121: The call is ambiguous between the following methods or properties: 'C.M2&lt;T&gt;((T, int))' and 'C.M2&lt;T&gt;(((T, int), int))'`

This is a regression from compilers previous to Visual Studio 2017.

``

/cc @jaredpar @MadsTorgersen 
</Description>
        <CreatedDate>28/06/2017</CreatedDate>
        <ClosedDate>09/07/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20587</PullRequestID>
        <IssueID>20583</IssueID>
        <Title>Inference failure for tuple type vs tuple underlying type (regression)</Title>
        <Description>The following correct program compiles successfully in VS2015, but fails to compile in VS2017:

``
</Description>
        <CreatedDate>30/06/2017</CreatedDate>
        <ClosedDate>26/09/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Blocked</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20579</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>zaytsev-victor</FixedByID>
    <Title>Fixed #20437</Title>
    <Description>**Customer scenario**
out var ignores explicit type preference
**Note:** Also fixed ignoring implicit type preference

**Bugs this fixes:**
[#20437](https://github.com/dotnet/roslyn/issues/20437)

**Workarounds, if any**
None

**Risk**
Low

**Performance impact**

**Is this a regression from a previous update?**

**Root cause analysis:**
Analizers don't support new DeclarationExpressionSyntax

**How was the bug found?**
customer reported
</Description>
    <CreatedDate>30/06/2017</CreatedDate>
    <ClosedDate>16/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20579</PullRequestID>
        <IssueID>20437</IssueID>
        <Title>out var ignores explicit type preference</Title>
        <Description>**Version Used**: 2.3.0.61814

**Steps to Reproduce**:
``

![untitled](https://user-images.githubusercontent.com/10546952/27511653-d788cada-5921-11e7-89ab-d9d433eac9b9.png)

**Expected Behavior**: IDE0008: Use explicit type instead of 'var'

**Actual Behavior**: Nothing.
</Description>
        <CreatedDate>24/06/2017</CreatedDate>
        <ClosedDate>16/07/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20578</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Report when a `void` value is the subject of a pattern-match</Title>
    <Description>**Customer scenario**

If the operand of a pattern-match is a void expression, and the pattern is a wildcard, the compiler produces code that crashes.

**Bugs this fixes:**

Fixes #20452

**Workarounds, if any**

Avoid that pattern of code.

**Risk**

Very low, as the fix is a simple local fix for the scenario.

**Performance impact**

None to tiny.

**Is this a regression from a previous update?**

No. The bug has been present since VS2017 when pattern-matching was introduced.

**Root cause analysis:**

We did not test this scenario.

**How was the bug found?**

Customer reported.

@dotnet/roslyn-compiler May I please have two reviews of this trivial bug fix?</Description>
    <CreatedDate>30/06/2017</CreatedDate>
    <ClosedDate>05/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20578</PullRequestID>
        <IssueID>20452</IssueID>
        <Title>"Neither 'is' nor 'as' are valid on void type"</Title>
        <Description>**Version Used**: Visual Studio Enterprise 2017 15.2 (26430.12), .NET Framework 4.6.2

Consider the following line of code:
``
Visual Studio shows a red squiggle with the following error:
&gt;Neither 'is' nor 'as' are valid on void type

However, the code successfully builds. 

I suspect this is not the desired behavior.</Description>
        <CreatedDate>26/06/2017</CreatedDate>
        <ClosedDate>05/07/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20549</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Fix races and skip NoPia test on CoreClr</Title>
    <Description>Fixes #18985</Description>
    <CreatedDate>29/06/2017</CreatedDate>
    <ClosedDate>19/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20549</PullRequestID>
        <IssueID>18985</IssueID>
        <Title>Sometimes the type identity seems to fail on CoreCLR</Title>
        <Description>We see this only in tests and very rarely, it is likely to be an artifact of assembly loading races in tests or something like that.

We need to investigate this and fix. Even if rare, it happens often enough to cause failed builds and other grief.

A typical failure would be a random test failing with something like:

Assert.Same() Failure 
Expected: Pia1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null 
Actual: Pia1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null

or 

12:17:10         Assert.Equal() Failure
12:17:10         Expected: System.IComparable
12:17:10         Actual:   System.IComparable


I.E. Seemingly same types compare as not equal where they are expected to be equal.




</Description>
        <CreatedDate>25/04/2017</CreatedDate>
        <ClosedDate>19/07/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-CoreCLR</Label>
          <Label>Contributor Pain</Label>
          <Label>Flaky</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20548</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Change for `fixed` statement to emit more optimal code.</Title>
    <Description>Fixes: #18615

Also related to:
   - Jit intrinsics for Span&lt;T&gt;.get_Item and ReadOnlySpan&lt;T&gt;.get_Item: https://github.com/dotnet/coreclr/pull/10910
   - Investigate perf diff between the Span ctor that takes array vs pointer: https://github.com/dotnet/corefxlab/issues/1479

In some cases `fixed`  statement uses a peculiar codegen strategy -
Instead of mapping the pointer variable to a pointer, it maps it to the managed pinned reference (which does not even have the same type).
Then the difference is compensated for in all the places where the pointer is used, by converting the reference to a pointer on demand, repeatedly.

I.E.
```C#
fixed(int * p = &amp;v)
{
    Use(p);
    Use(p);
    Use(p);
}
```
is emitted as

```C#
try
{
     pinned ref int refTemp = ref v;

    Use((int*)refTemp);      // unsafely cast pinned ref
    Use((int*)refTemp);      // unsafely cast pinned ref
    Use((int*)refTemp);      // unsafely cast pinned ref
}
finally
{
      // zero-out refTemp
}
```
instead of what logically follows from the semantics:
```C#
try
{
     pinned ref int refTemp = ref v;
     int * p = (int*)refTemp;  // unsafely cast pinned ref

    Use(p);
    Use(p);
    Use(p);
}
finally
{
      // zero-out refTemp
}
```

The reason for the strange emit was never truly understood. In fact, in other cases, like fixed string, the more obvious variant is used.
One theory is that this codegen was just a result of the lack of internal expressiveness in the old compiler around byref locals and it was simply carried forward.

The inconsistency requires special casing of such `fixed` statements - in binding, lowering, codegen and in the semantical model, which must expose the "logical" shape of the statement.

Another guess was that this kind of emit was better for JIT.
That turned out not to be true. To the contrary - while a pointer temp would be very optimizable, repeated accesses to a pinned ref can result in noticeable worse JITted code, forcing users to use workarounds like:

```C#
fixed(int * p = &amp;v)
{
    // PERF: accessing p has additional expenses, so use it via another temp;
    int * cheapP = p;
    Use(cheapP);
    Use(cheapP);
    Use(cheapP);
}
```

Compiler should do that not the users.
</Description>
    <CreatedDate>29/06/2017</CreatedDate>
    <ClosedDate>01/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20548</PullRequestID>
        <IssueID>18615</IssueID>
        <Title>Make fixed pointer local always backed by a pointer.</Title>
        <Description>Currently, in some cases the fixed variable is backed by the actual pinned managed reference, which is converted to a pointer at use sites inside the fixed block.

While, by itself a correct implementation, it is not the most obvious or efficient for the JIT, since it looks like the managed reference is repeatedly accessed and pinned managed references have more loaded semantics than pointers.

A simple solution would be to pin the managed reference, but back the pointer by a real pointer local that is initialized based on the value of the reference.

We are already employing this strategy when pinning strings, we should do the same with arrays and other cases.

===
This came from the analysis of codegen inefficiencies in the Kesterel http server code.
</Description>
        <CreatedDate>11/04/2017</CreatedDate>
        <ClosedDate>01/07/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20531</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>Skip deriving argument operation if duplicate named arguments are specified</Title>
    <Description>**Customer scenario**

This is an erroneous case for analyzers. When the code is in this state, only one of the duplicates will be provided to analyzer as `IOperation`.

**Bugs this fixes:**

#20050

**Workarounds, if any**

No. Have to wait for user to fix the error in the code to analysis all arguments.

**Risk**

Low. This only impact analyzers, not lowering. 

**Performance impact**

Low.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Didn't have test for this particular case.

**How was the bug found?**

Dogfooding
</Description>
    <CreatedDate>29/06/2017</CreatedDate>
    <ClosedDate>13/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20531</PullRequestID>
        <IssueID>20050</IssueID>
        <Title>Debug asserts in LocalRewriter.BuildArgumentsInEvaluationOrder in invalid code</Title>
        <Description>**Version Used**: Latest sources

**Steps to Reproduce**:

1. Copy/paste C#:

``</Description>
        <CreatedDate>06/06/2017</CreatedDate>
        <ClosedDate>05/04/2018</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20378</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>khyperia</FixedByID>
    <Title>Don't crash when an interface is not implemented by the HostObject</Title>
    <Description>Partially resolves #18633, in that instead of crashing when the host object doesn't implement the `I{Vbc,Csc}HostObject` interface, we silently continue. This also fixes another error in the same file, but that fix is more concrete in that there was already logic for handling the error, it just wasn't getting hit (RCWForCurrentContext should throw a NullArgException in its constructor if passed null).

The decision of if we should silently eat the error or explicitly error out (for the first case) is up for debate. The only behavior from something correctly implementing from the interface is to suppress "/sqmsessionguid" during design time builds (if the HostObject does not implement the interface, it will not suppress the flag, which seemed to be the original intent of the code).

The issue still remains of how we got into this state in the first place (with HostObject not implementing `ICscHostObject` - possibly issues with assembly version mismatches), but this at least resolves the NRE.

Ping @agocke as they helped me work through this.</Description>
    <CreatedDate>21/06/2017</CreatedDate>
    <ClosedDate>13/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20378</PullRequestID>
        <IssueID>18633</IssueID>
        <Title>NullReferenceException inside Microsoft.CodeAnalysis.BuildTasks.Csc.AddResponseFileCommands()</Title>
        <Description>**Version Used**:
Microsoft.CodeAnalysis.* = 2.0.0
Visual Studio 2017
Inside .NET Framework 4.6.2 console application

**Steps to Reproduce**:

1. Install Microsoft.CodeAnalysis.CSharp.Workspaces into a .NET Framework 4.6.2 console application
2. Write the following code (the project being loaded here is a .NET Framework 4.6.2 library):
``

**Expected Behavior**:
The project loads into the workspace without problems.

**Actual Behavior**:
`workspace.Diagnostics` contains a diagnostic with the message `{[Failure] Msbuild failed when processing the file 'E:\Code\Wyam\src\core\Wyam.Hosting\Wyam.Hosting.csproj'}`

---

I first noticed this behavior in a more complex application that does run-time loading of project files into workspaces and logs any diagnostic messages. I was getting a ton of these `Msbuild failed when processing` messages, though they didn't seem to actually stop the project file from loading. I figured I'd attempt to reproduce in a simple application to make sure it wasn't something with my host (I do a lot of crazy assembly stuff, so I was concerned that was messing it up). I was able to repro:

![2017-04-12_11h48_51](https://cloud.githubusercontent.com/assets/1020407/24967233/700a943a-1f77-11e7-8f21-8e5d77d3077a.png)

Exploring further, I turned on exception breaking at caught a `NullReferenceException` in `Microsoft.CodeAnalysis.BuildTasks.Csc.AddResponseFileCommands()`:

![2017-04-12_10h54_43](https://cloud.githubusercontent.com/assets/1020407/24967309/ae54c4f4-1f77-11e7-97d4-6730d473533a.png)

A couple points:
* Notice that the `Microsoft.Build.Tasks.CodeAnalysis.dll` assembly is coming from my Visual Studio 2017 folder. Even if I install `Microsoft.Net.Compilers` (disabling the MSBuild tasks that actually use that package for compilation of the host application) and copy the `Microsoft.Build.Tasks.CodeAnalysis.dll` assembly out of the tools folder and into the bin, it still binds to the version in the Visual Studio 2017 path.
* The PDB and source code here is decompiled from the assembly in the Visual Studio 2017 path that I'm apparently linking to.
* I've highlighted the line I think is throwing the NRE.

My best guess (and I could be totally off) is that there's a type mismatch in here somewhere between the `ICscHostObject` interface we're trying to cast to and the actual one implemented by `this.HostObject` (which is a `CSharpCompilerInputs`). The cast fails and we get the NRE.
</Description>
        <CreatedDate>12/04/2017</CreatedDate>
        <ClosedDate>13/07/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Investigation Required</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20364</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add IOperation support for anonymous object creation expressions.</Title>
    <Description>Fixes #19926</Description>
    <CreatedDate>21/06/2017</CreatedDate>
    <ClosedDate>06/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20364</PullRequestID>
        <IssueID>19926</IssueID>
        <Title>IOperation API for anonymous object creation expressions</Title>
        <Description>Two possible approaches:

1. Expose two separate arrays for declared property symbols and arguments:
``</Description>
        <CreatedDate>31/05/2017</CreatedDate>
        <ClosedDate>07/07/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Concept-API</Label>
          <Label>Feature - IOperation</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>20162</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>elijah6</FixedByID>
    <Title>Suppress IDE0004 for switch case label when casting is required</Title>
    <Description>Fixes #19987

**Customer scenario**

Explicit casting used in `switch` case label is sometimes incorrectly given IDE0004 (Cast is redundant) in Visual Studio, and users could incorrectly follow the suggestion, which changes the behaviour of the program.
A specific scenario described at #19987  

**Bugs this fixes:**

#19987 

**Workarounds, if any**

Ignore IDE suggestion.

**Risk**


**Performance impact**

Low, as there is no complexity change. Only an additional check for switch case label. 

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

There was no unit test for this specific case before (probably rarely used scenario). Tests added in this PR branch.

**How was the bug found?**

#19987 (🔗Originally reported by [Thomas Castiglione](https://developercommunity.visualstudio.com/users/21348/873dad1a-b02f-4f5a-8da9-37ef170c009b.html))</Description>
    <CreatedDate>11/06/2017</CreatedDate>
    <ClosedDate>02/08/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20162</PullRequestID>
        <IssueID>19987</IssueID>
        <Title>Incorrect IDE0004 (Cast is redundant) in pattern matching</Title>
        <Description>**Version Used**: 15.3 Preview 1

🔗 Originally reported by [Thomas Castiglione](https://developercommunity.visualstudio.com/users/21348/873dad1a-b02f-4f5a-8da9-37ef170c009b.html).

**Steps to Reproduce**:

``

**Expected Behavior**:

* IDE0004 is not reported on the cast in `(float)1`
* Fixing all violations of IDE0004 does not remove the cast

**Actual Behavior**:

* The cast is removed when fixing IDE0004, resulting in a change in program behavior</Description>
        <CreatedDate>02/06/2017</CreatedDate>
        <ClosedDate>02/08/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20162</PullRequestID>
        <IssueID>19987</IssueID>
        <Title>Incorrect IDE0004 (Cast is redundant) in pattern matching</Title>
        <Description>**Version Used**: 15.3 Preview 1

🔗 Originally reported by [Thomas Castiglione](https://developercommunity.visualstudio.com/users/21348/873dad1a-b02f-4f5a-8da9-37ef170c009b.html).

**Steps to Reproduce**:

``

**Expected Behavior**:

* IDE0004 is not reported on the cast in `(float)1`
* Fixing all violations of IDE0004 does not remove the cast

**Actual Behavior**:

* The cast is removed when fixing IDE0004, resulting in a change in program behavior</Description>
        <CreatedDate>02/06/2017</CreatedDate>
        <ClosedDate>02/08/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20162</PullRequestID>
        <IssueID>19987</IssueID>
        <Title>Incorrect IDE0004 (Cast is redundant) in pattern matching</Title>
        <Description>**Version Used**: 15.3 Preview 1

🔗 Originally reported by [Thomas Castiglione](https://developercommunity.visualstudio.com/users/21348/873dad1a-b02f-4f5a-8da9-37ef170c009b.html).

**Steps to Reproduce**:

``

**Expected Behavior**:

* IDE0004 is not reported on the cast in `(float)1`
* Fixing all violations of IDE0004 does not remove the cast

**Actual Behavior**:

* The cast is removed when fixing IDE0004, resulting in a change in program behavior</Description>
        <CreatedDate>02/06/2017</CreatedDate>
        <ClosedDate>02/08/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>20162</PullRequestID>
        <IssueID>19987</IssueID>
        <Title>Incorrect IDE0004 (Cast is redundant) in pattern matching</Title>
        <Description>**Version Used**: 15.3 Preview 1

🔗 Originally reported by [Thomas Castiglione](https://developercommunity.visualstudio.com/users/21348/873dad1a-b02f-4f5a-8da9-37ef170c009b.html).

**Steps to Reproduce**:

``

**Expected Behavior**:

* IDE0004 is not reported on the cast in `(float)1`
* Fixing all violations of IDE0004 does not remove the cast

**Actual Behavior**:

* The cast is removed when fixing IDE0004, resulting in a change in program behavior</Description>
        <CreatedDate>02/06/2017</CreatedDate>
        <ClosedDate>02/08/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19636</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add IOperation support for tuple expressions</Title>
    <Description>Fixes #10856

```
    public interface ITupleExpression : IOperation
    {
        /// &lt;summary&gt;
        /// Elements for tuple expression.
        /// &lt;/summary&gt;
        ImmutableArray&lt;IOperation&gt; Elements { get; }
    }
```
</Description>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>10/07/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19636</PullRequestID>
        <IssueID>10856</IssueID>
        <Title>Implement IOperation support for tuple literals</Title>
        <Description>Design and implement  IOperation support for tuple literals.

Current implementation intentionally implements this as OperationKind.None

The right alternative seems to be introducing a specific operation kind and make visitor visit all the arguments of the literal.

Alternatively we may make tuple literals look like ObjectCreation (which it is indirectly), but it does not feel right conceptually.
</Description>
        <CreatedDate>25/04/2016</CreatedDate>
        <ClosedDate>17/07/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19633</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Support serializing longs to/from the local registry</Title>
    <Description>Fixes dotnet/roslyn#19629.</Description>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>22/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19633</PullRequestID>
        <IssueID>19629</IssueID>
        <Title>'Live analyzers' check crashses.</Title>
        <Description>``</Description>
        <CreatedDate>18/05/2017</CreatedDate>
        <ClosedDate>18/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19631</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Add some pattern-matching tests suggested by test plan.</Title>
    <Description>Relates to #19038, #16195

Note that this is a test-only change. Comments referring to added tests have been added to #19038.

@AlekseyTs Can you review this test-only change please?
</Description>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>22/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19631</PullRequestID>
        <IssueID>19038</IssueID>
        <Title>Test plan for pattern matching generic type parameters</Title>
        <Description>This is my work-in-progress issue for a test plan for pattern matching generic parameters (https://github.com/dotnet/roslyn/issues/16195).

There should be tests for the following "golden path" scenarios:

* [X] Matching anything against an unconstrained generic parameter succeeds/fails at runtime [@gafter: See tests `TestMatchWithTypeParameter_01` and `TestMatchWithTypeParameter_02` in `CodeGen/SwitchTests.cs`]
* [X] Matching a class type against a type parameter constrained to that class type succeeds/fails at runtime
   - No compile-time diagnostics expected
* [x] Matching against a generic parameter constrained to class/struct succeeds/fails [@gafter see `TestMatchWithTypeParameter_03` and `TestMatchWithTypeParameter_04`]
    - Note: Spec currently suggests that a conversion always exists, and thus even when the check
      could be known to fail at compile time, it seems like no diagnostic is produced. Is this acceptable? [@gafter: We had to select specific criteria for what is detected and what is allowed to pass. We use the same criteria as we do for warning of an always `false` result for the existing `is` operator.]
  * [x] Verify definite assignment agrees
     - Note: If we can refute the match ahead of time should this be considered unreachable code? [@gafter: The subsumption tests confirm this. To pick an arbitrary one, see `TypeParameterSubsumption05`]
* [x] Matching a reference type against a generic parameter constrained to an interface [@gafter: adding a test for this exposed two bugs. See `TestMatchWithTypeParameter_05`]
* [x] Matching a value type against a generic parameter constrained to an interface [@gafter: see `TestMatchWithTypeParameter_06`] [@gafter testing this with the value type being `System.ValueTuple&lt;int,int&gt;` exposed more bugs; fixed with new tests including `ExplicitTupleConversion_Crash`.]
* [x] Matching against a generic parameter constrained with a `new()` constraint [@gafter: see `TestMatchWithTypeParameter_07`]

Edit: Subsumption seems to be spec'd and work OK with certain matching cases right now, e.g.

``
* [x] Matching with the subject as restricted types, pointer types, `ref` types [@gafter for the first two, see `MatchRestrictedTypes`. We don't have a concept of `ref` types, so I don't know what you're suggesting for that. It is possible that `MatchRestrictedTypes` tests what you're suggesting.]
</Description>
        <CreatedDate>27/04/2017</CreatedDate>
        <ClosedDate>07/07/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19631</PullRequestID>
        <IssueID>16195</IssueID>
        <Title>Generic expression of a derived type cannot be handled by a pattern</Title>
        <Description>**Version Used**: 
Microsoft Visual Studio Professional 2017 RC
Version 15.0.26014.0 D15REL
Microsoft .NET Framework
Version 4.6.01586
Visual C# Compiler version 2.0.0.61213

**Steps to Reproduce**:

    public class Packet
    {
    }

    public class KeepalivePacket : Packet
    {
    }

    public void Send&lt;T&gt;(T packet)
        where T : Packet
    {
        if (packet is KeepalivePacket keepalive)
        {
            // Do stuff with keepalive
        }

        switch (packet)
        {
            case KeepalivePacket keepalivePacket:
                // Do stuff with keepalivePacket
                break;
        }
    }

I get a compilation error for both the if statement and case statement. 

&gt; CS8121: An expression of type T cannot be handled by a pattern of type KeepalivePacket

The code compiles successfully if the type is _not_ a derived type of `Packet` (ie. `packet is Packet keepalive` or `packet is object keepalive` works fine).

The code compiles without error if I first cast the parameter to `object`.

    if ((object)packet is KeepalivePacket keepalive)
    {
        // This works
    }

I couldn't find any mention of unsupported pattern matching with generic parameters/variables in the design notes/blog posts. 

Is this expected to fail? Does this compilation error need a more informative message?

Roslyn is recommending pattern matching for the following code with **IDE0019**. Applying the code fix to the following code results in the compilation error above.

    var keepalive = packet as KeepalivePacket;
    if (keepalive != null)
    {
        // Do stuff with keepalive
    }

Does **IDE0019** need to be updated to not apply when the variable/parameter is generic?</Description>
        <CreatedDate>03/01/2017</CreatedDate>
        <ClosedDate>08/05/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Area-Language Design</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19631</PullRequestID>
        <IssueID>19038</IssueID>
        <Title>Test plan for pattern matching generic type parameters</Title>
        <Description>This is my work-in-progress issue for a test plan for pattern matching generic parameters (https://github.com/dotnet/roslyn/issues/16195).

There should be tests for the following "golden path" scenarios:

* [X] Matching anything against an unconstrained generic parameter succeeds/fails at runtime [@gafter: See tests `TestMatchWithTypeParameter_01` and `TestMatchWithTypeParameter_02` in `CodeGen/SwitchTests.cs`]
* [X] Matching a class type against a type parameter constrained to that class type succeeds/fails at runtime
   - No compile-time diagnostics expected
* [x] Matching against a generic parameter constrained to class/struct succeeds/fails [@gafter see `TestMatchWithTypeParameter_03` and `TestMatchWithTypeParameter_04`]
    - Note: Spec currently suggests that a conversion always exists, and thus even when the check
      could be known to fail at compile time, it seems like no diagnostic is produced. Is this acceptable? [@gafter: We had to select specific criteria for what is detected and what is allowed to pass. We use the same criteria as we do for warning of an always `false` result for the existing `is` operator.]
  * [x] Verify definite assignment agrees
     - Note: If we can refute the match ahead of time should this be considered unreachable code? [@gafter: The subsumption tests confirm this. To pick an arbitrary one, see `TypeParameterSubsumption05`]
* [x] Matching a reference type against a generic parameter constrained to an interface [@gafter: adding a test for this exposed two bugs. See `TestMatchWithTypeParameter_05`]
* [x] Matching a value type against a generic parameter constrained to an interface [@gafter: see `TestMatchWithTypeParameter_06`] [@gafter testing this with the value type being `System.ValueTuple&lt;int,int&gt;` exposed more bugs; fixed with new tests including `ExplicitTupleConversion_Crash`.]
* [x] Matching against a generic parameter constrained with a `new()` constraint [@gafter: see `TestMatchWithTypeParameter_07`]

Edit: Subsumption seems to be spec'd and work OK with certain matching cases right now, e.g.

``
* [x] Matching with the subject as restricted types, pointer types, `ref` types [@gafter for the first two, see `MatchRestrictedTypes`. We don't have a concept of `ref` types, so I don't know what you're suggesting for that. It is possible that `MatchRestrictedTypes` tests what you're suggesting.]
</Description>
        <CreatedDate>27/04/2017</CreatedDate>
        <ClosedDate>07/07/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19624</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Smarter resource management in MemoryMappedInfo</Title>
    <Description>* Unmap views of memory mapped files when they are not in use, allowing the process to use the address space for other purposes (#19604)
* Use fewer memory mapped files for small files (#19570)

## Ask Mode

**Customer scenario**

Customer works in a large solution; over time they tend to observe out of memory exceptions.

**Bugs this fixes:**

Fixes #19493
Fixes #19570
Fixes #19604
Fixes #19761 
[DevDiv 435299](https://devdiv.visualstudio.com/web/wi.aspx?pcguid=011b8bdf-6d56-4f87-be0d-0092136884d9&amp;id=435299) (This is the bug that #19522 was supposed to fix, but it didn't address the problem enough for RPS to drop back to the expected values)

**Workarounds, if any**

None available.

**Risk**

Moderate. The code is complex but efficient and reliable.

**Performance impact**

This change substantially improves performance in several scenarios:

* Application responsiveness is improved by unmapping views of memory mapped files when they are no longer in use, which allows the garbage collector to operate more efficiently
* Application shutdown performance is improved by creating fewer `MemoryMappedFile` instances which need to be finalized

**Is this a regression from a previous update?**

Not really. It's possible that 15.3 Preview 1 or Preview 2 could contain a regression for users on small systems.

**Root cause analysis:**

Failed in #19522 to account for `MemoryMappedInfo` being a long-lived object, where the strong reference to `MemoryMappedInfo._accessor` help memory for much longer than was desirable.

**How was the bug found?**

Reported by dogfooding.
</Description>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>01/06/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19624</PullRequestID>
        <IssueID>19604</IssueID>
        <Title>OOM with memory mapped files</Title>
        <Description>``</Description>
        <CreatedDate>17/05/2017</CreatedDate>
        <ClosedDate>01/06/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19624</PullRequestID>
        <IssueID>19570</IssueID>
        <Title>Use larger memory mapped files for temporary storage</Title>
        <Description>**Version Used**: 15.2

We can reduce the number of `MemoryMappedFile` instances getting disposed (a time-consuming process) by creating larger instances and using each memory mapped file as the storage for multiple temporary files. This will improve upon the performance gains already realized in #19522.

Currently files are created to match the specific size needed for each file in the solution. For an initial experiment, it might be reasonable to:

* Create files that are 1MiB in size, and use bump pointer allocation to place files within it
* When a file doesn't fit in the remaining space at the end of the last memory mapped file, create a new memory mapped file where it goes at the beginning
* Any file larger than 256KiB is placed in its own memory mapped file

⚠️ Currently these buffers are shared with the OOP workers. The serialization assumes that each temporary file is placed at offset 0 within the target memory mapped file. This will need to be updated to account for multiple temporary storage buffers within a single memory mapped file.</Description>
        <CreatedDate>16/05/2017</CreatedDate>
        <ClosedDate>01/06/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19624</PullRequestID>
        <IssueID>19493</IssueID>
        <Title>MemoryMappedInfo cleanup delays Visual Studio shutdown</Title>
        <Description>**tl;dr:** We create instances of `MemoryMappedInfo` (and its nested types). These types are disposable and have finalizers, but in some cases we do not explicitly dispose of instances. The large number of instances created for some user scenarios combined with non-deterministic cleanup resulted in a measurable (~50ms) increase in the time it takes to close Visual Studio for some scenarios.

What follows is a long and detailed breakdown of an investigation that started early Friday morning (5/12) in response to a performance regression detected the day before.

:bulb: When we refer to "meeting internal performance goals" in places like the contributor guide for Roslyn, but don't explain how external contributors are supposed to actually accomplish that, part of what we're talking about is covered by the system explained in detail below. If you were ever interested in what exactly we meant by that, I hope you enjoy the following read. :smile:

### How it started (5/11)

As part of my current role ("grasshopper") on the @dotnet/roslyn-infrastructure team, one of my responsibilities is scheduling and monitoring the incorporation of Roslyn code into Visual Studio itself. The whole process is very new to me, but a reasonably accurate way for a non-Microsoft to view this system is a build farm dedicated to running end-to-end tests prior to taking changes from one large team and applying them to another team. The system as a whole serves as both an early warning system for potential problems and helps identify the team responsible for various types of failures.

One of the toughest types of problems to detect reliably is performance regressions, and anyone who's tried to implement such tests in the past knows what I'm talking about. And the bigger the system under test, the harder it is to produce meaningful results. Small sections of code might be easy to benchmark, but in this case we're talking about ~15+ minute end-to-end user scenario tests of Visual Studio. To keep things flowing smoothly, performance tests in the system allow for some amount of "noise" in the test results. Deviations outside the allowed noise signify major problems where we cannot proceed until they are resolved (I haven't had to deal with one of these so there could be exceptions/special cases that I just don't know about). Deviations "under the degrade bar" do not cause a red flag in the system, still show up on performance reports based on a scoring system. Test scenarios that ran slower than the baseline are given a score based on how close to the bar they are: (actual-baseline)/(bar-baseline), and the highest values show up on the top of the report for manual investigation.

I mentioned "tests" and "scenarios". The two concepts are vital to understanding how we review long and complicated test sequence to identify specific possible regressions. The "test" refers to a complete end-to-end test, which might include opening VS, creating one or more projects, writing some code, building, running, and finally closing the solution and closing Visual Studio itself. Each test is divided into several named scenarios corresponding to specific actions, and target metrics may be defined either for the test as a whole or for specific scenarios.

:bulb: For anyone wanting to set up a system like this someday, I recommend you implement the ability to automatically assign metrics based on what you measure in a shipping release. This "baselining" ability allows you to establish target goals relatively easily that help ensure future releases of your product perform *at least as well* as the previous release, which is a great place to start when discussing development strategies to gradually improve the experience your customers have on a daily basis.

Thursday's test run included one test which did not exceed the bar but seemed "worse than normal", thus starting a manual review. The specific scenario was "Close VS", which in this test occurs after the solution is already closed. The degrade bar is set at 100ms slower than the previous release, and the build was showing a value of 52ms slower. The investigation started with a review of the history of this test using a tool that shows the builds on our team and the builds for the "mainline" that all the teams interact with. This overlay of the two branches is important because it can show with relatively high confidence whether a problem originated on our team (shows up on ours before mainline), or another team (shows up in mainline before ours). Here's the graph going back several builds. The orange branch is our team, and the purple branch is one of the main Visual Studio branches.

![image](https://cloud.githubusercontent.com/assets/1408396/26037111/46c48730-38b2-11e7-8a4e-a22204894d9c.png)

This investigation centered around the apparent new trend where we are sitting roughly 40-50ms slower than our goal line, and which started on our team builds prior to showing up in the main branch.

### Tracking down the problem (5/12)

Tracking down the problem is not always easy, but the two things you can do to be successful on this front are preparation and practice.

#### Preparation

Our end-to-end tests which we use for performance monitoring have PerfView running in the background. I don't have details regarding the exact configuration, but the key items would be:

1. Configure your sampling rate such that you have a "manageable" output data file size over the duration of your test. Since our tests are 15+ minutes, this means a slower sampling rate than the default.
2. Make sure you are enabling items that relate to your user experience. The meaning of this will vary by industry/application, but for me the two items I found valuable were having Thread Time enabled and also having marks inserted into the trace by the end-to-end test driver identifying exactly when a scenario (e.g. Close VS) started and ended.
3. Store the outputs of the PerfView traces for a sufficient amount of time that they can be used for comparative analysis in the future.

#### Practice

I had an advantage in investigating this by knowing three things:

1. The scenario which failed was Close VS, so I could filter the PerfView reports to start and end at the markers placed at the start and end of this scenario. As you can see from the graph, this is a ~300ms window out of the ~15 minute report.
2. Since I was investigating an elapsed time performance failure, the view of most immediate interest was the Thread Time view. I needed to account for the additional 50ms of time, regardless of whether that time was BLOCKED TIME or CPU TIME.
3. Even though this was my first experience ever with this test or scenario, I knew I could most easily track down the time by opening two reports side by side: one from a recent "slow" run, and the other from a recent "fast" run.

### Findings

I started with the Call Tree view examining the main thread. By comparing with the previous run, I pretty quickly narrowed down the additional time on the main thread to the following trace. The highlighted value accounts for all of the new time:

![image](https://cloud.githubusercontent.com/assets/1408396/26037288/d844c974-38b5-11e7-9d57-8c8fcf781a56.png)

As you can see, the main thread was blocked during this time, so to find the root cause we have to find out what it was waiting on. In this case, the answer was pretty easy to infer by looking at the thread activity histograms and asking "what would the CLR be waiting for during `clr!??EEShutdown`.

![image](https://cloud.githubusercontent.com/assets/1408396/26037348/cb182722-38b6-11e7-9a6f-818a9d89a63c.png)

Focusing on the finalizer thread showed two items of particular interest:

![image](https://cloud.githubusercontent.com/assets/1408396/26037410/b1d48458-38b7-11e7-95a0-4834f2403dff.png)

The in the conveniently available CoreCLR sources, we can see that these are the two methods called to [finalize a single object](https://github.com/dotnet/coreclr/blob/76cbc581382ebbcf745dd2b79ac02c419970808c/src/vm/finalizerthread.cpp#L98-L99).

* **clr!WKS::CallFinalizer**: This is slow when you have many finalizers, or when finalizers themselves are slow
* **clr!WKS::LogFinalization**: This has no measurable overhead normally, but a small amount of overhead when ETW events are being recorded. While the call within it, **clr!??ETW::GCLog::SendFinalizeObjectEvent**, probably should have been pruned by our analysis as measurement overhead imposed by PerfView recording, it nevertheless provided valuable insight for me. *Time here means a large number of objects are getting finalized.*

A closer look at **clr!WKS::CallFinalizer** revealed the problem with `MemoryMappedInfo`:

![image](https://cloud.githubusercontent.com/assets/1408396/26037484/e9aaa91a-38b8-11e7-900a-d1cdfdb0d313.png)

In the next step of my investigation, I wanted to determine how many `MemoryMappedInfo` objects were getting finalized when the CLR was trying to shut down. This part was rather difficult, but hopefully in the future it can be improved (filed Microsoft/perfview#200 and Microsoft/perfview#201). I filtered the events view to the start/end time for the scenario, set MaxRet to 110000 (so all events would show), and set the process filter to **devenv**. I then opened the **Microsoft-Windows-DotNETRuntime/GC/FinalizeObject** events, showed the **TypeID** column, and exported the resulting view as a CSV file. After opening the CSV file in Excel, I used a pivot table on the TypeID column to get a histogram which I sorted by the number of times an object of that type ID was finalized. Working from the top, I then examined all available events in PerfView of type **Microsoft-Windows-DotNETRuntime/GC/AllocationTick** to associate type IDs with type names. I only made it through the first 5 items before the sampling rate of AllocationTick stopped showing results.

![image](https://cloud.githubusercontent.com/assets/1408396/26037537/834c1a12-38ba-11e7-9d33-e0bc0d7e0e63.png)

### Follow-up

The solution appears to be two-fold:

1. Reduce the number of memory-mapped file handles that need to be cleaned up. For example, rather than create a memory mapped file for every temporary storage request, we could set a minimum size on the file at 1 MiB, and use smaller views within the file for temporary storage. When a request is too large to fit in the available space at the end of the current file, stop creating storage in that file and move to a new one.
2. Reduce the "weight" of finalization by reducing the size of the object graph referenced by finalizable objects. In particular, avoid making `MemoryMappedInfo` and `SharedReadableStream` themselves finalizable, and instead create a minimal type (or types) derived from `CriticalHandle` which is responsible for releasing the unmanaged resources.</Description>
        <CreatedDate>14/05/2017</CreatedDate>
        <ClosedDate>01/06/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19624</PullRequestID>
        <IssueID>19570</IssueID>
        <Title>Use larger memory mapped files for temporary storage</Title>
        <Description>**Version Used**: 15.2

We can reduce the number of `MemoryMappedFile` instances getting disposed (a time-consuming process) by creating larger instances and using each memory mapped file as the storage for multiple temporary files. This will improve upon the performance gains already realized in #19522.

Currently files are created to match the specific size needed for each file in the solution. For an initial experiment, it might be reasonable to:

* Create files that are 1MiB in size, and use bump pointer allocation to place files within it
* When a file doesn't fit in the remaining space at the end of the last memory mapped file, create a new memory mapped file where it goes at the beginning
* Any file larger than 256KiB is placed in its own memory mapped file

⚠️ Currently these buffers are shared with the OOP workers. The serialization assumes that each temporary file is placed at offset 0 within the target memory mapped file. This will need to be updated to account for multiple temporary storage buffers within a single memory mapped file.</Description>
        <CreatedDate>16/05/2017</CreatedDate>
        <ClosedDate>01/06/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19624</PullRequestID>
        <IssueID>19604</IssueID>
        <Title>OOM with memory mapped files</Title>
        <Description>``</Description>
        <CreatedDate>17/05/2017</CreatedDate>
        <ClosedDate>01/06/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19624</PullRequestID>
        <IssueID>19761</IssueID>
        <Title>Access violation in RoslynCodeAnalysisService32 reading from memory mapped file</Title>
        <Description>**Version Used**: 15.3 preview 1

**Stack trace**

``</Description>
        <CreatedDate>24/05/2017</CreatedDate>
        <ClosedDate>16/06/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19624</PullRequestID>
        <IssueID>19522</IssueID>
        <Title>Reduce overhead from memory mapped files</Title>
        <Description>Fixes #19493

## Ask Mode

**Customer scenario**

Customer closes Visual Studio after working in a C# or Visual Basic project.

**Bugs this fixes:**

#19493 
DevDiv 435299 (external users: this internal bug tracks the internal performance regression and just points to the previous public bug where I placed all the actual info)

**Workarounds, if any**

Wait longer.

**Risk**

Low. Of several ways known ways to improve performance in this scenario, I chose the least risky one. Follow-up issues will be filed as opportunistic areas for further improvement in the future.

**Performance impact**

The time it takes to close Visual Studio is reduced by roughly 0.25-1ms for each file in the solution. This is a multiple second improvement for projects like Roslyn.sln.

**Is this a regression from a previous update?**

No. The bug appears to have been introduced with Visual Studio 2015.

**Root cause analysis:**

Failure of internal Regression Prevention System (RPS) tests to exercise code paths related to this bug, and failure to go through PerfView traces in detail for scenarios targeting very large solutions. Discussions are taking place regarding improvements to PerfView which should help reveal these kinds of problems for both us and developers of other applications before they cause problems.

**How was the bug found?**

RPS tests</Description>
        <CreatedDate>15/05/2017</CreatedDate>
        <ClosedDate>17/05/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Tenet-Performance</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19624</PullRequestID>
        <IssueID>19522</IssueID>
        <Title>Reduce overhead from memory mapped files</Title>
        <Description>Fixes #19493

## Ask Mode

**Customer scenario**

Customer closes Visual Studio after working in a C# or Visual Basic project.

**Bugs this fixes:**

#19493 
DevDiv 435299 (external users: this internal bug tracks the internal performance regression and just points to the previous public bug where I placed all the actual info)

**Workarounds, if any**

Wait longer.

**Risk**

Low. Of several ways known ways to improve performance in this scenario, I chose the least risky one. Follow-up issues will be filed as opportunistic areas for further improvement in the future.

**Performance impact**

The time it takes to close Visual Studio is reduced by roughly 0.25-1ms for each file in the solution. This is a multiple second improvement for projects like Roslyn.sln.

**Is this a regression from a previous update?**

No. The bug appears to have been introduced with Visual Studio 2015.

**Root cause analysis:**

Failure of internal Regression Prevention System (RPS) tests to exercise code paths related to this bug, and failure to go through PerfView traces in detail for scenarios targeting very large solutions. Discussions are taking place regarding improvements to PerfView which should help reveal these kinds of problems for both us and developers of other applications before they cause problems.

**How was the bug found?**

RPS tests</Description>
        <CreatedDate>15/05/2017</CreatedDate>
        <ClosedDate>17/05/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Tenet-Performance</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19619</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>MaStr11</FixedByID>
    <Title>Fix for #18978 Cast is redundant on call to params method</Title>
    <Description>Fixes #18978</Description>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>25/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19619</PullRequestID>
        <IssueID>18978</IssueID>
        <Title>IDE0004 "Cast is redundant" when casting `object[]` to `object` calling a method that takes `params object[]` changes behavior</Title>
        <Description>**Version Used**: VS2017 15.1 (26403.7)

**Steps to Reproduce**:
``

Produces:
&gt;2
&gt;2</Description>
        <CreatedDate>25/04/2017</CreatedDate>
        <ClosedDate>25/05/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19606</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Pilchie</FixedByID>
    <Title>Force load project were we don't have command line args in DPL</Title>
    <Description>## Ask Mode
**Customer scenario**

In the case where we AnyCode is unable to determine the command line
arguments for a project (likely because something is different about the
way design time builds are set up), fall back to forcing the project to
load normally so that users still get a good experience from IDE
features.

**Bugs this fixes:**

Fixes #19407, and internal bug 432432.

**Workarounds, if any**

The customer can disable LSL, but we want people to be able to use it and continue to provide feedback.

**Risk**

This code should only be executed if LSL is enabled.

**Performance impact**

Low, because we still operate on the same set of projects, but we might skip some of them.

**Is this a regression from a previous update?**

Currently there is a crash, because AnyCode is now passing the failed projects to us.  

**Root cause analysis:**

How did we miss it?  What tests are we adding to guard against it in the future?

We didn't, it's planned work.

**How was the bug found?**

Planned work for 15.3 to address "broken" features with LSL enabled.</Description>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>07/06/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19606</PullRequestID>
        <IssueID>19407</IssueID>
        <Title>DeferredProjectWorkspaceService needs update to do the filtering on IVsSolutionWorkspaceService.GetManagedCommandLineInfoAsync()</Title>
        <Description>IVsSolutionWorkspaceService.GetManagedCommandLineInfoAsync() used to return a dictionary with only valid intellisense data (CommandLineArgs and TargetPath not null or emtpy); the key is the full project path.

For 15.3 Preview 2, we've made the change to return the ManagedCommandLineInfo for all projects in the solution, so that when Roslyn calls this API, it can filter and act upon the projects that don't have valid Intellisense data, e.g. trigger a full load of those projects. Please make sure do the valid check to avoid crash.
</Description>
        <CreatedDate>10/05/2017</CreatedDate>
        <ClosedDate>09/06/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19593</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Emitted pdb path should respect PathMap</Title>
    <Description>**Customer scenario**

The scenario is enabling fully deterministic builds across different source 
enlistments.  The PDB path is embedded into the PE.  This causes the path 
which is embedded, not the path written to disk, to respect the pathmap 
compiler option. 

Details ...

The PDB path which is written into the PE file should respect the
`/pathmap` option passed to the compiler.  This is necessary to ensure
that PEs can be deterministic when built from different source paths.

The feature flag `pdb-path-determinism` is being kept for the time
being.  Even though it's a feature flag it still seems inappropriate to
break customers in a point release.  Deferring the removal until the
next major release to give customers time to react.  This issue tracks
removing the flag:

https://github.com/dotnet/roslyn/issues/19592

**Bugs this fixes:**

closes #9813

**Workarounds, if any**

No official work around.

**Risk**

Very low

**How was the bug found?**

Dogfood and customer reports</Description>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19593</PullRequestID>
        <IssueID>9813</IssueID>
        <Title>Deterministic builds need a mechanism to control PDB path in PE</Title>
        <Description>Today the full path of the emitted PDB is embedded into the PE file.  This particular path is intentionally excluded from our standard path mapping code.  Hence this makes it impossible to create identical builds unless:
1. All builds are sourced from identical directory names.
2. Builds do not emit a PDB.

Neither of these is a palatable option.  Not having this capability means we can't easily share build artifacts deterministically between various machines.  
</Description>
        <CreatedDate>16/03/2016</CreatedDate>
        <ClosedDate>18/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-Determinism</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19590</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add IOperation support for string interpolation</Title>
    <Description>Fixes #18300 

```
public interface IInterpolatedStringExpression : IOperation
{
    /// &lt;summary&gt;
    /// Constituent parts of interpolated string.
    /// &lt;/summary&gt;
    ImmutableArray&lt;IInterpolatedStringContent&gt; Parts { get; }
}

public interface IInterpolatedStringContent : IOperation
{
}

public interface IInterpolatedStringText : IInterpolatedStringContent
{
    /// &lt;summary&gt;
    /// Text content
    /// &lt;/summary&gt;
    IOperation Text { get; }
}

public interface IInterpolation : IInterpolatedStringContent
{
    /// &lt;summary&gt;
    /// Expression
    /// &lt;/summary&gt;
    IOperation Expression { get; }

    /// &lt;summary&gt;
    /// Optional alignment
    /// &lt;/summary&gt;
    IOperation Alignment { get; }

    /// &lt;summary&gt;
    /// Optional format string.
    /// &lt;/summary&gt;
    IOperation FormatString { get; }
}
```</Description>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>24/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19590</PullRequestID>
        <IssueID>18300</IssueID>
        <Title>IOperation doesn't support string interpolations</Title>
        <Description>**Example Code** 
using System;
class P
{
    private void M()
    {
        var s = "";
        if (int.TryParse(s, out var i))
            Console.WriteLine($"i ={ i}, s ={ s}");
        else
          Console.WriteLine($"i ={ i}, s ={ s}");
    }
}

Try generating Ioperation tree for Ifstatement
**Generated Tree**

IOperation tree for "if (int.TryParse(s, out var i))
            Console.WriteLine($"i ={ i}, s ={ s}");
        else
          Console.WriteLine($"i ={ i}, s ={ s}");"


IIfStatement (OperationKind.IfStatement)
  Condition: IInvocationExpression (static System.Boolean System.Int32.TryParse(System.String s, out System.Int32 result)) (OperationKind.InvocationExpression, Type: System.Boolean)
      IArgument (Matching Parameter: s) (OperationKind.Argument)
        ILocalReferenceExpression: s (OperationKind.LocalReferenceExpression, Type: System.String)
      IArgument (Matching Parameter: result) (OperationKind.Argument)
        ILocalReferenceExpression: i (OperationKind.LocalReferenceExpression, Type: System.Int32)
  IExpressionStatement (OperationKind.ExpressionStatement)
    IInvocationExpression (static void System.Console.WriteLine(System.String value)) (OperationKind.InvocationExpression, Type: System.Void)
      IArgument (Matching Parameter: value) (OperationKind.Argument)
        IOperation:  (OperationKind.None)
  IExpressionStatement (OperationKind.ExpressionStatement)
    IInvocationExpression (static void System.Console.WriteLine(System.String value)) (OperationKind.InvocationExpression, Type: System.Void)
      IArgument (Matching Parameter: value) (OperationKind.Argument)
        IOperation:  (OperationKind.None)</Description>
        <CreatedDate>29/03/2017</CreatedDate>
        <ClosedDate>25/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Concept-API</Label>
          <Label>Feature - IOperation</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19588</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Add test demonstrating that a bug was previously fixed</Title>
    <Description>Fixes #18948

@dotnet/roslyn-compiler May I please have one review of this test-only addition?
</Description>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>21/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19588</PullRequestID>
        <IssueID>18948</IssueID>
        <Title>C# compiler crashes when optimizing a switch with patterns containing awaitable expressions.</Title>
        <Description>**Version Used**: 2.1.0.61520

**Steps to Reproduce**:

1. Unzip and load attached [project](https://github.com/dotnet/roslyn/files/952273/CompilerOptimizationIssue.zip) in Visual Studio 2017.

2. Select `Release` configuration.
3. Build the project.

**Expected Behavior**: the build should succeed

**Actual Behavior**: the build fails
``

</Description>
        <CreatedDate>24/04/2017</CreatedDate>
        <ClosedDate>21/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19579</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>fsacer</FixedByID>
    <Title>Add missing null check to WorkspaceMetadataFileReferenceResolver.Equals</Title>
    <Description>Fixes #19553</Description>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>01/06/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19579</PullRequestID>
        <IssueID>19553</IssueID>
        <Title>NullReferenceException in WorkspaceMetadataFileReferenceResolver.Equals(WorkspaceMetadataFileReferenceResolver)</Title>
        <Description>**Version Used**: 
 Microsoft.CodeAnalysis.Workspaces 2.1.0.61520

**Steps to Reproduce**:
``
</Description>
        <CreatedDate>16/05/2017</CreatedDate>
        <ClosedDate>01/06/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19566</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>brettfo</FixedByID>
    <Title>bypass command line argument passing if no command line parser is available</Title>
    <Description>This is to enable F# to participate in CPS projects, even though it doesn't export an [`ICommandLineParserService`](https://github.com/dotnet/roslyn/blob/0a5202322a8aa23eb2454ff5f05ecdb258d64956/src/Workspaces/Core/Portable/Workspace/Host/CommandLine/ICommandLineParserService.cs).

The entry point into this code is the `SetOptions()` method in the second file.  This simple allows for a graceful exit if no command line parser service is available, instead of the current behavior of crashing [here](https://github.com/dotnet/roslyn/blob/0a5202322a8aa23eb2454ff5f05ecdb258d64956/src/VisualStudio/Core/Def/Implementation/ProjectSystem/AbstractProject_Options.cs#L57).

@srivatsn @jasonmalinowski @CyrusNajmabadi @Pilchie @KevinRansom

Edit: I've verified these changes locally along with dotnet/project-system#2206.</Description>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>19/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19566</PullRequestID>
        <IssueID>2206</IssueID>
        <Title>Proposal: Type constraint for constructor with parameter</Title>
        <Description>Current type constraints allow us to specify that the class must have a default constructor:

``

Lots of really ugly code involving `Activator` and reflection over `ContructorInfo` lists could be removed entirely, in addition to helping support proper dependency inversion of types created generically.
</Description>
        <CreatedDate>23/04/2015</CreatedDate>
        <ClosedDate>02/10/2017</ClosedDate>
        <Labels>
          <Label>1 - Planning</Label>
          <Label>Area-Language Design</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19564</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>BandAid for #19245</Title>
    <Description>For the `NullReferenceException` being thrown in #19245. 
Currently doesn't fixes the Assertions that fail.

Provide protection against there not being a CommitHash in the assembly.
Put implementation in CommonCompiler.cs and change to use this instead of existing.

**Customer scenario**

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

**Bugs this fixes:**

(either VSO or GitHub links)

**Workarounds, if any**

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

**Risk**

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

**Performance impact**

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

**Is this a regression from a previous update?**

**Root cause analysis:**

How did we miss it?  What tests are we adding to guard against it in the future?

**How was the bug found?**

(E.g. customer reported it vs. ad hoc testing)
</Description>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>19/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19564</PullRequestID>
        <IssueID>19245</IssueID>
        <Title>C# command line tests fail in development build</Title>
        <Description>I get this failure

``

Not sure how this code is supposed to behave if the `CommitHashAttribute` is missing.
</Description>
        <CreatedDate>04/05/2017</CreatedDate>
        <ClosedDate>18/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19561</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>heejaechang</FixedByID>
    <Title>tweak how we merge build and live errors for language such as F#</Title>
    <Description>**Customer scenario**

F# user builds and errors from command line and errors from IDE are both shown in error list.

**Bugs this fixes:**

#19547

**Workarounds, if any**

There is no workaround.

**Risk**

I don't see any risk.

**Performance impact**

now VS does build/live errors de-duplication when build ran. compared to build, de-duplication cost is neglect-able. but still it is new cost.

**Is this a regression from a previous update?**

Experience wise, it is a regression from old F# to Roslyn based F#. but this fix is not to fix the experience itself but to make it possible for F# to fix the issue on top of Roslyn.

**Root cause analysis:**

Roslyn's de-duplication assumed it only supports C# and VB. now that assumption is removed and let the framework flexible on ones like F#.

**How was the bug found?**

from F# people.</Description>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>23/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19561</PullRequestID>
        <IssueID>19547</IssueID>
        <Title>ProjectExternalErrorReporter can't be used by F# </Title>
        <Description>#### ProjectExternalErrorReporter can't be used by F# because it requires a CompilerDiagnosticsAnalyzer (and we don't have one of those)

In the Visual F# IDE Tools, we are trying to use Roslyn to report both document (intellisense) and compiler (build) error messages.    We already do the former.  If we use Roslyn for both, we expect we will solve our [error message unification regressions](https://github.com/Microsoft/visualfsharp/issues/3047).

For the document errors we already use a [DocumentDiagnosticAnalyzer](https://github.com/Microsoft/visualfsharp/blob/ce473ddab307c1bbbf027207badf086e71a238ff/vsintegration/src/FSharp.Editor/Diagnostics/DocumentDiagnosticAnalyzer.fs#L26).  For the build-time error messages, our plan was to use the instance of [ProjectExternalErrorReporter we create](https://github.com/Microsoft/visualfsharp/blob/722a64a98735c6c7e9c988f7b43fada0cf4940ba/vsintegration/src/FSharp.Editor/LanguageService/LanguageService.fs#L415) and [pass to CreateProjectContext](https://github.com/Microsoft/visualfsharp/blob/722a64a98735c6c7e9c988f7b43fada0cf4940ba/vsintegration/src/FSharp.Editor/LanguageService/LanguageService.fs#L427).  This seems like a reasonable expectation of how things should work.

However,  AFAICS using this ``ProjectExternalErrorReporter`` ends up trigggering code that goes down [this path which does a FailFast.OnFatalException in DiagnosticIncrementalAnalyzern](https://github.com/dotnet/roslyn/blob/175c1605927859bc3cfcd4a84b720b27c4054ba9/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.StateManager.cs#L139).  because the Visual F# Tools don't implement a CompilerDiagnosticsAnalyzer object. 

Possible solutions are

1. Visual F# Tools just don't try to use ``ProjectExternalErrorReporter`` for this purpose

2. Roslyn's DiagnosticIncrementalAnalyzer is adjusted so it doesn't require the language to have a CompilerDiagnosticsAnalyzer 

3. Someone says the magic recipe to create/register/access an appropriate CompilerDiagnosticsAnalyzer and pass it into roslyn

4. Roslyn makes a change to make it possible for F# to implement a CompilerDiagnosticsAnalyzer, just like C# and VB do

**Version Used**: See https://github.com/Microsoft/visualfsharp/blob/master/packages.config

**Steps to Reproduce**: See  

1.  Build the Visual F# Tools branch mentioned in https://github.com/Microsoft/visualfsharp/issues/3047#issuecomment-301645070. 
1. open VisualFSharp.sln 
1. set VisualFsharpOpernSource as the startup project
1. Launch devenv.exe using F5
2.  In the experimental instance of VS, open a sample F# project like the ones under tests\projects\misc
3.  Make sure the project has an error in it, e.g. a syntax error
4. Compiler the project in the experimental instance

**Expected Behavior**:

Doesn't hit a ``FailFast.OnFatalException`` in Roslyn

**Actual Behavior**:

Hits  a ``FailFast.OnFatalException`` in Roslyn https://github.com/dotnet/roslyn/blob/175c1605927859bc3cfcd4a84b720b27c4054ba9/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.StateManager.cs#L139

</Description>
        <CreatedDate>16/05/2017</CreatedDate>
        <ClosedDate>26/05/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Analyzers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19559</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmeschter</FixedByID>
    <Title>Check for missing hierarchies when mapping to Roslyn projects</Title>
    <Description>In order to shows the "Analyzers" node under the "References" node in
Solution Explorer and show the correct sets of analyzer assemblies and
diagnostics, we need to map the node for the project to the actual
Roslyn `AbstractProject` instance. This is done by matching up various
properties of the `IVsHierarchy` for the node to the same properties on
the `IVsHierarchy` returned by `AbstractProject.Hierarchy`.

This code path was initially written this `Hierarchy` property would
never return null; its value was supplied by the project system.
However, Delayed Project Load (DPL) bypasses the project system until
the user expands the project node in Solution Explorer, and as a result
we may now encounter `AbstractProjects` where `Hierarchy` returns null.
Currently if we run across one of these we'll throw a
`NullReferenceException` which has the end effect of preventing the
user from expanding the project node in Solution Explorer, and may even
result in a crash.

This commit adds in the null check. If the `Hierarchy` property is null
then it can't be the project we're looking for.

**Customer scenario**

Customer opens a solution with DPL enabled. When they expand a project node in Solution Explorer, nothing happens (the arrow indicates that the project is expanded, but nothing shows up under the project node).

Subsequently searching in Solution Explorer may lead to a crash.

**Bugs this fixes:**

Fixes #19517.

**Workarounds, if any**

Disable DPL for the solution.

**Risk**

Low; we're adding a null check that always should have been there.

**Performance impact**

Low; just the cost an additional null check when the user initially expands a project.

**Is this a regression from a previous update?**

Yes.

**Root cause analysis:**

This code path predates DPL, and until DPL the property in question couldn't be null. A subsequent refactoring to support the new project system made use of the property, but I didn't realize the null check was now necessary.

**How was the bug found?**

Internal customer report
</Description>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>16/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19559</PullRequestID>
        <IssueID>19517</IssueID>
        <Title>NullReferenceException at SolutionExplorer.HierarchyItemToProjectIdMap.TryGetProjectId</Title>
        <Description>**Version Used**: 
VS: vsuvscore 62510.01
Roslyn: 2.03.0.61709, commit c4b1692

**Steps to Reproduce**:

1. Create a C# Desktop class library project
2. Add a C# console application project to the solution
3. Enable Lightweight solution load mode
4. Save the solution, restart VS, load the solution
5. Expand console app project node in Solution Explorer

**Expected Behavior**:
The project items are under the project node

**Actual Behavior**:
No project items under the project node

I've tracked this to _NullReferenceException_ happening at _SolutionExplorer.HierarchyItemToProjectIdMap.TryGetProjectId_, see the call stack below.

In line src\VisualStudio\Core\SolutionExplorerShim\HierarchyItemToProjectIdMap.cs (56)
__p.Hierarchy__ is null:
``

</Description>
        <Code>```csharp
if (p.Hierarchy.TryGetCanonicalName((uint)VSConstants.VSITEMID.Root, out string projectCanonicalName)
```

**Call Stack**
```
&gt;	Microsoft.VisualStudio.LanguageServices.SolutionExplorer.dll!Microsoft.VisualStudio.LanguageServices.Implementation.SolutionExplorer.HierarchyItemToProjectIdMap.TryGetProjectId.AnonymousMethod__0(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject p) Line 56	C#
 	System.Core.dll!System.Linq.Enumerable.WhereArrayIterator&lt;Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject&gt;.MoveNext() Line 189	C#
 	System.Core.dll!System.Linq.Enumerable.SingleOrDefault&lt;Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject&gt;(System.Collections.Generic.IEnumerable&lt;Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject&gt; source) Line 1084	C#
 	Microsoft.VisualStudio.LanguageServices.SolutionExplorer.dll!Microsoft.VisualStudio.LanguageServices.Implementation.SolutionExplorer.HierarchyItemToProjectIdMap.TryGetProjectId(Microsoft.VisualStudio.Shell.IVsHierarchyItem hierarchyItem, string targetFrameworkMoniker, out Microsoft.CodeAnalysis.ProjectId projectId) Line 74	C#
 	Microsoft.VisualStudio.LanguageServices.SolutionExplorer.dll!Microsoft.VisualStudio.LanguageServices.Implementation.SolutionExplorer.AnalyzersFolderItemProvider.CreateCollectionSourceCore(Microsoft.VisualStudio.Shell.IVsHierarchyItem parentItem, Microsoft.VisualStudio.Shell.IVsHierarchyItem item) Line 70	C#
 	Microsoft.VisualStudio.LanguageServices.SolutionExplorer.dll!Microsoft.VisualStudio.LanguageServices.Implementation.SolutionExplorer.AnalyzersFolderItemProvider.CreateCollectionSource(Microsoft.VisualStudio.Shell.IVsHierarchyItem item, string relationshipName) Line 63	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.AttachedCollectionSourceProvider&lt;Microsoft.VisualStudio.Shell.IVsHierarchyItem&gt;.Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider.CreateCollectionSource(object item, string relationshipName) Line 21	C#
 	Microsoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AttachedCollectionService.AggregateItemsSource.AnonymousMethod__0(System.Lazy&lt;Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider, Microsoft.VisualStudio.Utilities.IOrderable&gt; provider) Line 140	C#
 	System.Core.dll!System.Linq.Enumerable.WhereSelectListIterator&lt;System.Lazy&lt;Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider, Microsoft.VisualStudio.Utilities.IOrderable&gt;, Microsoft.VisualStudio.Shell.IAttachedCollectionSource&gt;.MoveNext() Line 372	C#
 	System.Core.dll!System.Linq.Enumerable.WhereEnumerableIterator&lt;Microsoft.VisualStudio.Shell.IAttachedCollectionSource&gt;.MoveNext() Line 147	C#
 	mscorlib.dll!System.Collections.Generic.List&lt;Microsoft.VisualStudio.Shell.IAttachedCollectionSource&gt;.List(System.Collections.Generic.IEnumerable&lt;Microsoft.VisualStudio.Shell.IAttachedCollectionSource&gt; collection)	Unknown
 	Microsoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AggregateAttachedCollectionSource.AggregateAttachedCollectionSource(object sourceItem, System.Collections.Generic.IEnumerable&lt;Microsoft.VisualStudio.Shell.IAttachedCollectionSource&gt; sources) Line 27	C#
 	Microsoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AttachedCollectionService.AggregateItemsSource(object item, string relationshipName) Line 146	C#
 	Microsoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AttachedCollectionService.GetOrCreateCollectionSource(object item, string relationshipName) Line 116	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigationEntry.ConvertItemToCollectionSource(object item) Line 83	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ConvertItemToCollectionSource(object item) Line 124	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemCollectionAdapter.AdaptItem(object item) Line 3310	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.CollectionAdapter&lt;object, object&gt;.Initialize(System.Collections.IEnumerable source) Line 87	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemCollectionAdapter.ItemCollectionAdapter(System.Collections.IEnumerable source, Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView treeView) Line 3295	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemCollectionConverter.Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) Line 3269	C#
 	PresentationFramework.dll!System.Windows.Data.BindingExpression.TransferValue(object newValue, bool isASubPropertyChange)	Unknown
 	PresentationFramework.dll!System.Windows.Data.BindingExpression.Activate(object item)	Unknown
 	PresentationFramework.dll!System.Windows.Data.BindingExpression.AttachToContext(System.Windows.Data.BindingExpression.AttachAttempt attempt)	Unknown
 	PresentationFramework.dll!System.Windows.Data.BindingExpression.AttachOverride(System.Windows.DependencyObject target, System.Windows.DependencyProperty dp)	Unknown
 	PresentationFramework.dll!System.Windows.Data.BindingExpressionBase.OnAttach(System.Windows.DependencyObject d, System.Windows.DependencyProperty dp)	Unknown
 	WindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType, bool isInternal)	Unknown
 	PresentationFramework.dll!System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject target, System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding)	Unknown
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.RealizeChildNodesCore() Line 1768	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.ExpandInternal() Line 1877	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.OnIsExpandedChanged(System.Windows.DependencyObject o, System.Windows.DependencyPropertyChangedEventArgs e) Line 1960	C#
 	WindowsBase.dll!System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e)	Unknown
 	WindowsBase.dll!System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs args)	Unknown
 	WindowsBase.dll!System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex entryIndex, System.Windows.DependencyProperty dp, System.Windows.PropertyMetadata metadata, System.Windows.EffectiveValueEntry oldEntry, ref System.Windows.EffectiveValueEntry newEntry, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType)	Unknown
 	WindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType, bool isInternal)	Unknown
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.IsExpanded.set(bool value) Line 1529	C#
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.PlatformUI.HierarchyNavigatorPaneBase&lt;System.__Canon&gt;.ExpandItem.AnonymousMethod__0() Line 750	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.VisualStudio.ErrorHandler.CallWithCOMConvention(System.Func&lt;int&gt; method, bool reportError, bool setShellErrorInfo) Line 165	C#
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.PlatformUI.HierarchyNavigatorPaneBase&lt;Microsoft.VisualStudio.PlatformUI.SolutionPivotNavigator&gt;.ExpandItem(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy pUIH, uint itemid, Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS grf) Line 651	C#
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.PlatformUI.SolutionNavigatorPaneMarshaler.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.ExpandItem.AnonymousMethod__0() Line 108	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.VisualStudio.Shell.ThreadHelper.Invoke&lt;int&gt;(System.Func&lt;int&gt; method) Line 362	C#
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.PlatformUI.SolutionNavigatorPaneMarshaler.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.ExpandItem(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy pUIH, uint itemid, Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS expf) Line 108	C#
 	[Native to Managed Transition]	
 	msenv.dll!ExpandItemInSolutionExplorer(IUnknown * pUnkHier, unsigned long itemid, __EXPANDFLAGS fExpand) Line 612	C++
 	msenv.dll!CProject::RefreshSolutionExplorerState() Line 3409	C++
 	msenv.dll!CProject::FinalizeProvisionedProjectAsync::__l2::&lt;lambda&gt;(IVsTask *) Line 2076	C++
 	msenv.dll!std::_Func_class&lt;long,IVsTask *,unsigned long,IVsTask * *,tagVARIANT *&gt;::operator()(IVsTask * &lt;_Args_0&gt;, unsigned long &lt;_Args_1&gt;, IVsTask * * &lt;_Args_2&gt;, tagVARIANT * &lt;_Args_3&gt;) Line 278	C++
 	msenv.dll!`anonymous namespace'::NativeVsTaskBody::DoWork(IVsTask * pTask, unsigned long dwCount, IVsTask * * pPredecessorTasks, tagVARIANT * pResult) Line 46	C++
 	Microsoft.VisualStudio.Shell.UI.Internal.ni.dll!52277efe()	Unknown
 	[Frames below may be incorrect and/or missing, native debugger attempting to walk managed call stack]	
 	[Managed to Native Transition]	
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.VsTask.GetCallbackForMultipleParent.AnonymousMethod__0(System.Threading.Tasks.Task&lt;object&gt;[] _) Line 1106	C#
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.VsTask.GetCallbackForSingleParent.AnonymousMethod__0(System.Threading.Tasks.Task&lt;object&gt; internalTask) Line 1151	C#
 	mscorlib.dll!System.Threading.Tasks.ContinuationResultTaskFromResultTask&lt;object, object&gt;.InnerInvoke()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.Execute()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecutionContextCallback(object obj)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)	Unknown
 	mscorlib.dll!System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task task)	Unknown
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.TaskSchedulerService.VsUIThreadBlockableTaskScheduler.PromoteTaskExecution.AnonymousMethod__0() Line 263	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.VisualStudio.Shell.InvokableAction.InvokeMethod() Line 80	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.VisualStudio.Shell.InvokableBase.Invoke() Line 26	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.ExecuteOne() Line 599	C#
 	Microsoft.VisualStudio.Shell.15.0.dll!Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.WaitOnTaskCompleteInternal(System.Threading.Tasks.Task task, System.Threading.CancellationToken cancel, int ms) Line 825	C#
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.VsTask.InternalWait.AnonymousMethod__2() Line 508	C#
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.VsTask.IgnoreObjectDisposedException(System.Action action) Line 670	C#
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.VsTask.InternalWait.AnonymousMethod__0() Line 504	C#
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.VsTask.InvokeWithWaitDialog&lt;bool&gt;(System.Func&lt;bool&gt; function) Line 850	C#
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.VsTask.InternalWait(bool ignoreUIThreadCheck, int millisecondTimeout, bool abortOnCancel) Line 485	C#
 	Microsoft.VisualStudio.Shell.UI.Internal.dll!Microsoft.VisualStudio.Services.VsTask.Wait() Line 300	C#
 	[Native to Managed Transition]	
 	msenv.dll!CDelayProjectLoadManager::LoadSingleProjectAsync::__l2::&lt;lambda&gt;(IVsTask * pParentTasks, unsigned long) Line 524	C++
...

`</Code>
        <CreatedDate>15/05/2017</CreatedDate>
        <ClosedDate>16/05/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Reliability</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19548</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmeschter</FixedByID>
    <Title>Update version numbers for the dev15.6 branch</Title>
    <Description>* Update `RoslynAssemblyVersionBase` from 2.3.0 to 2.6.0
* Update `RoslynFileVerionBase` from 2.3.0 to 2.6.0
* Reset `RoslynNuGetMoniker` to beta1

Also incorporate @shyamnamboodiripad's fix in #19546.</Description>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>16/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19548</PullRequestID>
        <IssueID>19546</IssueID>
        <Title>Add back 'beta2' nuget moniker for official builds.</Title>
        <Description>Add back the 'beta2' nuget package moniker for official builds. 

The moniker was accidentally removed in a2e2bf45c31a7f91626017296d5e247631e92886 (PR #19469).
</Description>
        <CreatedDate>16/05/2017</CreatedDate>
        <ClosedDate>16/05/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19546</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>shyamnamboodiripad</FixedByID>
    <Title>Add back 'beta2' nuget moniker for official builds.</Title>
    <Description>Add back the 'beta2' nuget package moniker for official builds. 

The moniker was accidentally removed in a2e2bf45c31a7f91626017296d5e247631e92886 (PR #19469).
</Description>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>16/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19546</PullRequestID>
        <IssueID>19469</IssueID>
        <Title>Remove refout package moniker from build</Title>
        <Description>I forgot to remove a build setting that is specific to the features/refout branch when merging to master. This causes packages to be built and published with the wrong name.

@tmeschter @jaredpar for review.
@dotnet/roslyn-compiler FYI</Description>
        <CreatedDate>12/05/2017</CreatedDate>
        <ClosedDate>13/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19540</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Add tests to confirm that IOperation and SemanticModel agree for out variables</Title>
    <Description>Test-only change that confirms that #14295 is already fixed.

@AlekseyTs @dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>22/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19540</PullRequestID>
        <IssueID>14295</IssueID>
        <Title>IOperation and SemanticModel inconsistent for out variable declarations</Title>
        <Description>The SemanticModel API reports that an out variable declaration argument expression [has no type](https://github.com/dotnet/roslyn/pull/14258). But the corresponding `IOperation` API disagrees, saying that it does. These two should agree.

To test this add

``

to the body of `AssertInfoForDeclarationExpressionSyntax` in `OutVarTests.cs`.

`GetOperationInternal` can be replaced by `GetOperation` once `IOperation` is part of the supported public API.

This disagreement may be a symptom of #12940.
</Description>
        <CreatedDate>05/10/2016</CreatedDate>
        <ClosedDate>22/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
          <Label>New Language Feature - Out Variable Declaration</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19531</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>CyrusNajmabadi</FixedByID>
    <Title>Fix case that was causing us to not offer completion after a case-pattern-label in a switch.</Title>
    <Description>Fixes #15348</Description>
    <CreatedDate>15/05/2017</CreatedDate>
    <ClosedDate>16/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19531</PullRequestID>
        <IssueID>15348</IssueID>
        <Title>Missing completion list after switch-based pattern matching</Title>
        <Description>Paste C#:

``

No completion list shows at the first $$ (pattern matching), but the completion list does show at the second $$ (regular switch).</Description>
        <CreatedDate>18/11/2016</CreatedDate>
        <ClosedDate>16/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19522</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>sharwell</FixedByID>
    <Title>Reduce overhead from memory mapped files</Title>
    <Description>Fixes #19493

## Ask Mode

**Customer scenario**

Customer closes Visual Studio after working in a C# or Visual Basic project.

**Bugs this fixes:**

#19493 
DevDiv 435299 (external users: this internal bug tracks the internal performance regression and just points to the previous public bug where I placed all the actual info)

**Workarounds, if any**

Wait longer.

**Risk**

Low. Of several ways known ways to improve performance in this scenario, I chose the least risky one. Follow-up issues will be filed as opportunistic areas for further improvement in the future.

**Performance impact**

The time it takes to close Visual Studio is reduced by roughly 0.25-1ms for each file in the solution. This is a multiple second improvement for projects like Roslyn.sln.

**Is this a regression from a previous update?**

No. The bug appears to have been introduced with Visual Studio 2015.

**Root cause analysis:**

Failure of internal Regression Prevention System (RPS) tests to exercise code paths related to this bug, and failure to go through PerfView traces in detail for scenarios targeting very large solutions. Discussions are taking place regarding improvements to PerfView which should help reveal these kinds of problems for both us and developers of other applications before they cause problems.

**How was the bug found?**

RPS tests</Description>
    <CreatedDate>15/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19522</PullRequestID>
        <IssueID>19493</IssueID>
        <Title>MemoryMappedInfo cleanup delays Visual Studio shutdown</Title>
        <Description>**tl;dr:** We create instances of `MemoryMappedInfo` (and its nested types). These types are disposable and have finalizers, but in some cases we do not explicitly dispose of instances. The large number of instances created for some user scenarios combined with non-deterministic cleanup resulted in a measurable (~50ms) increase in the time it takes to close Visual Studio for some scenarios.

What follows is a long and detailed breakdown of an investigation that started early Friday morning (5/12) in response to a performance regression detected the day before.

:bulb: When we refer to "meeting internal performance goals" in places like the contributor guide for Roslyn, but don't explain how external contributors are supposed to actually accomplish that, part of what we're talking about is covered by the system explained in detail below. If you were ever interested in what exactly we meant by that, I hope you enjoy the following read. :smile:

### How it started (5/11)

As part of my current role ("grasshopper") on the @dotnet/roslyn-infrastructure team, one of my responsibilities is scheduling and monitoring the incorporation of Roslyn code into Visual Studio itself. The whole process is very new to me, but a reasonably accurate way for a non-Microsoft to view this system is a build farm dedicated to running end-to-end tests prior to taking changes from one large team and applying them to another team. The system as a whole serves as both an early warning system for potential problems and helps identify the team responsible for various types of failures.

One of the toughest types of problems to detect reliably is performance regressions, and anyone who's tried to implement such tests in the past knows what I'm talking about. And the bigger the system under test, the harder it is to produce meaningful results. Small sections of code might be easy to benchmark, but in this case we're talking about ~15+ minute end-to-end user scenario tests of Visual Studio. To keep things flowing smoothly, performance tests in the system allow for some amount of "noise" in the test results. Deviations outside the allowed noise signify major problems where we cannot proceed until they are resolved (I haven't had to deal with one of these so there could be exceptions/special cases that I just don't know about). Deviations "under the degrade bar" do not cause a red flag in the system, still show up on performance reports based on a scoring system. Test scenarios that ran slower than the baseline are given a score based on how close to the bar they are: (actual-baseline)/(bar-baseline), and the highest values show up on the top of the report for manual investigation.

I mentioned "tests" and "scenarios". The two concepts are vital to understanding how we review long and complicated test sequence to identify specific possible regressions. The "test" refers to a complete end-to-end test, which might include opening VS, creating one or more projects, writing some code, building, running, and finally closing the solution and closing Visual Studio itself. Each test is divided into several named scenarios corresponding to specific actions, and target metrics may be defined either for the test as a whole or for specific scenarios.

:bulb: For anyone wanting to set up a system like this someday, I recommend you implement the ability to automatically assign metrics based on what you measure in a shipping release. This "baselining" ability allows you to establish target goals relatively easily that help ensure future releases of your product perform *at least as well* as the previous release, which is a great place to start when discussing development strategies to gradually improve the experience your customers have on a daily basis.

Thursday's test run included one test which did not exceed the bar but seemed "worse than normal", thus starting a manual review. The specific scenario was "Close VS", which in this test occurs after the solution is already closed. The degrade bar is set at 100ms slower than the previous release, and the build was showing a value of 52ms slower. The investigation started with a review of the history of this test using a tool that shows the builds on our team and the builds for the "mainline" that all the teams interact with. This overlay of the two branches is important because it can show with relatively high confidence whether a problem originated on our team (shows up on ours before mainline), or another team (shows up in mainline before ours). Here's the graph going back several builds. The orange branch is our team, and the purple branch is one of the main Visual Studio branches.

![image](https://cloud.githubusercontent.com/assets/1408396/26037111/46c48730-38b2-11e7-8a4e-a22204894d9c.png)

This investigation centered around the apparent new trend where we are sitting roughly 40-50ms slower than our goal line, and which started on our team builds prior to showing up in the main branch.

### Tracking down the problem (5/12)

Tracking down the problem is not always easy, but the two things you can do to be successful on this front are preparation and practice.

#### Preparation

Our end-to-end tests which we use for performance monitoring have PerfView running in the background. I don't have details regarding the exact configuration, but the key items would be:

1. Configure your sampling rate such that you have a "manageable" output data file size over the duration of your test. Since our tests are 15+ minutes, this means a slower sampling rate than the default.
2. Make sure you are enabling items that relate to your user experience. The meaning of this will vary by industry/application, but for me the two items I found valuable were having Thread Time enabled and also having marks inserted into the trace by the end-to-end test driver identifying exactly when a scenario (e.g. Close VS) started and ended.
3. Store the outputs of the PerfView traces for a sufficient amount of time that they can be used for comparative analysis in the future.

#### Practice

I had an advantage in investigating this by knowing three things:

1. The scenario which failed was Close VS, so I could filter the PerfView reports to start and end at the markers placed at the start and end of this scenario. As you can see from the graph, this is a ~300ms window out of the ~15 minute report.
2. Since I was investigating an elapsed time performance failure, the view of most immediate interest was the Thread Time view. I needed to account for the additional 50ms of time, regardless of whether that time was BLOCKED TIME or CPU TIME.
3. Even though this was my first experience ever with this test or scenario, I knew I could most easily track down the time by opening two reports side by side: one from a recent "slow" run, and the other from a recent "fast" run.

### Findings

I started with the Call Tree view examining the main thread. By comparing with the previous run, I pretty quickly narrowed down the additional time on the main thread to the following trace. The highlighted value accounts for all of the new time:

![image](https://cloud.githubusercontent.com/assets/1408396/26037288/d844c974-38b5-11e7-9d57-8c8fcf781a56.png)

As you can see, the main thread was blocked during this time, so to find the root cause we have to find out what it was waiting on. In this case, the answer was pretty easy to infer by looking at the thread activity histograms and asking "what would the CLR be waiting for during `clr!??EEShutdown`.

![image](https://cloud.githubusercontent.com/assets/1408396/26037348/cb182722-38b6-11e7-9a6f-818a9d89a63c.png)

Focusing on the finalizer thread showed two items of particular interest:

![image](https://cloud.githubusercontent.com/assets/1408396/26037410/b1d48458-38b7-11e7-95a0-4834f2403dff.png)

The in the conveniently available CoreCLR sources, we can see that these are the two methods called to [finalize a single object](https://github.com/dotnet/coreclr/blob/76cbc581382ebbcf745dd2b79ac02c419970808c/src/vm/finalizerthread.cpp#L98-L99).

* **clr!WKS::CallFinalizer**: This is slow when you have many finalizers, or when finalizers themselves are slow
* **clr!WKS::LogFinalization**: This has no measurable overhead normally, but a small amount of overhead when ETW events are being recorded. While the call within it, **clr!??ETW::GCLog::SendFinalizeObjectEvent**, probably should have been pruned by our analysis as measurement overhead imposed by PerfView recording, it nevertheless provided valuable insight for me. *Time here means a large number of objects are getting finalized.*

A closer look at **clr!WKS::CallFinalizer** revealed the problem with `MemoryMappedInfo`:

![image](https://cloud.githubusercontent.com/assets/1408396/26037484/e9aaa91a-38b8-11e7-900a-d1cdfdb0d313.png)

In the next step of my investigation, I wanted to determine how many `MemoryMappedInfo` objects were getting finalized when the CLR was trying to shut down. This part was rather difficult, but hopefully in the future it can be improved (filed Microsoft/perfview#200 and Microsoft/perfview#201). I filtered the events view to the start/end time for the scenario, set MaxRet to 110000 (so all events would show), and set the process filter to **devenv**. I then opened the **Microsoft-Windows-DotNETRuntime/GC/FinalizeObject** events, showed the **TypeID** column, and exported the resulting view as a CSV file. After opening the CSV file in Excel, I used a pivot table on the TypeID column to get a histogram which I sorted by the number of times an object of that type ID was finalized. Working from the top, I then examined all available events in PerfView of type **Microsoft-Windows-DotNETRuntime/GC/AllocationTick** to associate type IDs with type names. I only made it through the first 5 items before the sampling rate of AllocationTick stopped showing results.

![image](https://cloud.githubusercontent.com/assets/1408396/26037537/834c1a12-38ba-11e7-9d33-e0bc0d7e0e63.png)

### Follow-up

The solution appears to be two-fold:

1. Reduce the number of memory-mapped file handles that need to be cleaned up. For example, rather than create a memory mapped file for every temporary storage request, we could set a minimum size on the file at 1 MiB, and use smaller views within the file for temporary storage. When a request is too large to fit in the available space at the end of the current file, stop creating storage in that file and move to a new one.
2. Reduce the "weight" of finalization by reducing the size of the object graph referenced by finalizable objects. In particular, avoid making `MemoryMappedInfo` and `SharedReadableStream` themselves finalizable, and instead create a minimal type (or types) derived from `CriticalHandle` which is responsible for releasing the unmanaged resources.</Description>
        <CreatedDate>14/05/2017</CreatedDate>
        <ClosedDate>01/06/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19522</PullRequestID>
        <IssueID>19493</IssueID>
        <Title>MemoryMappedInfo cleanup delays Visual Studio shutdown</Title>
        <Description>**tl;dr:** We create instances of `MemoryMappedInfo` (and its nested types). These types are disposable and have finalizers, but in some cases we do not explicitly dispose of instances. The large number of instances created for some user scenarios combined with non-deterministic cleanup resulted in a measurable (~50ms) increase in the time it takes to close Visual Studio for some scenarios.

What follows is a long and detailed breakdown of an investigation that started early Friday morning (5/12) in response to a performance regression detected the day before.

:bulb: When we refer to "meeting internal performance goals" in places like the contributor guide for Roslyn, but don't explain how external contributors are supposed to actually accomplish that, part of what we're talking about is covered by the system explained in detail below. If you were ever interested in what exactly we meant by that, I hope you enjoy the following read. :smile:

### How it started (5/11)

As part of my current role ("grasshopper") on the @dotnet/roslyn-infrastructure team, one of my responsibilities is scheduling and monitoring the incorporation of Roslyn code into Visual Studio itself. The whole process is very new to me, but a reasonably accurate way for a non-Microsoft to view this system is a build farm dedicated to running end-to-end tests prior to taking changes from one large team and applying them to another team. The system as a whole serves as both an early warning system for potential problems and helps identify the team responsible for various types of failures.

One of the toughest types of problems to detect reliably is performance regressions, and anyone who's tried to implement such tests in the past knows what I'm talking about. And the bigger the system under test, the harder it is to produce meaningful results. Small sections of code might be easy to benchmark, but in this case we're talking about ~15+ minute end-to-end user scenario tests of Visual Studio. To keep things flowing smoothly, performance tests in the system allow for some amount of "noise" in the test results. Deviations outside the allowed noise signify major problems where we cannot proceed until they are resolved (I haven't had to deal with one of these so there could be exceptions/special cases that I just don't know about). Deviations "under the degrade bar" do not cause a red flag in the system, still show up on performance reports based on a scoring system. Test scenarios that ran slower than the baseline are given a score based on how close to the bar they are: (actual-baseline)/(bar-baseline), and the highest values show up on the top of the report for manual investigation.

I mentioned "tests" and "scenarios". The two concepts are vital to understanding how we review long and complicated test sequence to identify specific possible regressions. The "test" refers to a complete end-to-end test, which might include opening VS, creating one or more projects, writing some code, building, running, and finally closing the solution and closing Visual Studio itself. Each test is divided into several named scenarios corresponding to specific actions, and target metrics may be defined either for the test as a whole or for specific scenarios.

:bulb: For anyone wanting to set up a system like this someday, I recommend you implement the ability to automatically assign metrics based on what you measure in a shipping release. This "baselining" ability allows you to establish target goals relatively easily that help ensure future releases of your product perform *at least as well* as the previous release, which is a great place to start when discussing development strategies to gradually improve the experience your customers have on a daily basis.

Thursday's test run included one test which did not exceed the bar but seemed "worse than normal", thus starting a manual review. The specific scenario was "Close VS", which in this test occurs after the solution is already closed. The degrade bar is set at 100ms slower than the previous release, and the build was showing a value of 52ms slower. The investigation started with a review of the history of this test using a tool that shows the builds on our team and the builds for the "mainline" that all the teams interact with. This overlay of the two branches is important because it can show with relatively high confidence whether a problem originated on our team (shows up on ours before mainline), or another team (shows up in mainline before ours). Here's the graph going back several builds. The orange branch is our team, and the purple branch is one of the main Visual Studio branches.

![image](https://cloud.githubusercontent.com/assets/1408396/26037111/46c48730-38b2-11e7-8a4e-a22204894d9c.png)

This investigation centered around the apparent new trend where we are sitting roughly 40-50ms slower than our goal line, and which started on our team builds prior to showing up in the main branch.

### Tracking down the problem (5/12)

Tracking down the problem is not always easy, but the two things you can do to be successful on this front are preparation and practice.

#### Preparation

Our end-to-end tests which we use for performance monitoring have PerfView running in the background. I don't have details regarding the exact configuration, but the key items would be:

1. Configure your sampling rate such that you have a "manageable" output data file size over the duration of your test. Since our tests are 15+ minutes, this means a slower sampling rate than the default.
2. Make sure you are enabling items that relate to your user experience. The meaning of this will vary by industry/application, but for me the two items I found valuable were having Thread Time enabled and also having marks inserted into the trace by the end-to-end test driver identifying exactly when a scenario (e.g. Close VS) started and ended.
3. Store the outputs of the PerfView traces for a sufficient amount of time that they can be used for comparative analysis in the future.

#### Practice

I had an advantage in investigating this by knowing three things:

1. The scenario which failed was Close VS, so I could filter the PerfView reports to start and end at the markers placed at the start and end of this scenario. As you can see from the graph, this is a ~300ms window out of the ~15 minute report.
2. Since I was investigating an elapsed time performance failure, the view of most immediate interest was the Thread Time view. I needed to account for the additional 50ms of time, regardless of whether that time was BLOCKED TIME or CPU TIME.
3. Even though this was my first experience ever with this test or scenario, I knew I could most easily track down the time by opening two reports side by side: one from a recent "slow" run, and the other from a recent "fast" run.

### Findings

I started with the Call Tree view examining the main thread. By comparing with the previous run, I pretty quickly narrowed down the additional time on the main thread to the following trace. The highlighted value accounts for all of the new time:

![image](https://cloud.githubusercontent.com/assets/1408396/26037288/d844c974-38b5-11e7-9d57-8c8fcf781a56.png)

As you can see, the main thread was blocked during this time, so to find the root cause we have to find out what it was waiting on. In this case, the answer was pretty easy to infer by looking at the thread activity histograms and asking "what would the CLR be waiting for during `clr!??EEShutdown`.

![image](https://cloud.githubusercontent.com/assets/1408396/26037348/cb182722-38b6-11e7-9a6f-818a9d89a63c.png)

Focusing on the finalizer thread showed two items of particular interest:

![image](https://cloud.githubusercontent.com/assets/1408396/26037410/b1d48458-38b7-11e7-95a0-4834f2403dff.png)

The in the conveniently available CoreCLR sources, we can see that these are the two methods called to [finalize a single object](https://github.com/dotnet/coreclr/blob/76cbc581382ebbcf745dd2b79ac02c419970808c/src/vm/finalizerthread.cpp#L98-L99).

* **clr!WKS::CallFinalizer**: This is slow when you have many finalizers, or when finalizers themselves are slow
* **clr!WKS::LogFinalization**: This has no measurable overhead normally, but a small amount of overhead when ETW events are being recorded. While the call within it, **clr!??ETW::GCLog::SendFinalizeObjectEvent**, probably should have been pruned by our analysis as measurement overhead imposed by PerfView recording, it nevertheless provided valuable insight for me. *Time here means a large number of objects are getting finalized.*

A closer look at **clr!WKS::CallFinalizer** revealed the problem with `MemoryMappedInfo`:

![image](https://cloud.githubusercontent.com/assets/1408396/26037484/e9aaa91a-38b8-11e7-900a-d1cdfdb0d313.png)

In the next step of my investigation, I wanted to determine how many `MemoryMappedInfo` objects were getting finalized when the CLR was trying to shut down. This part was rather difficult, but hopefully in the future it can be improved (filed Microsoft/perfview#200 and Microsoft/perfview#201). I filtered the events view to the start/end time for the scenario, set MaxRet to 110000 (so all events would show), and set the process filter to **devenv**. I then opened the **Microsoft-Windows-DotNETRuntime/GC/FinalizeObject** events, showed the **TypeID** column, and exported the resulting view as a CSV file. After opening the CSV file in Excel, I used a pivot table on the TypeID column to get a histogram which I sorted by the number of times an object of that type ID was finalized. Working from the top, I then examined all available events in PerfView of type **Microsoft-Windows-DotNETRuntime/GC/AllocationTick** to associate type IDs with type names. I only made it through the first 5 items before the sampling rate of AllocationTick stopped showing results.

![image](https://cloud.githubusercontent.com/assets/1408396/26037537/834c1a12-38ba-11e7-9d33-e0bc0d7e0e63.png)

### Follow-up

The solution appears to be two-fold:

1. Reduce the number of memory-mapped file handles that need to be cleaned up. For example, rather than create a memory mapped file for every temporary storage request, we could set a minimum size on the file at 1 MiB, and use smaller views within the file for temporary storage. When a request is too large to fit in the available space at the end of the current file, stop creating storage in that file and move to a new one.
2. Reduce the "weight" of finalization by reducing the size of the object graph referenced by finalizable objects. In particular, avoid making `MemoryMappedInfo` and `SharedReadableStream` themselves finalizable, and instead create a minimal type (or types) derived from `CriticalHandle` which is responsible for releasing the unmanaged resources.</Description>
        <CreatedDate>14/05/2017</CreatedDate>
        <ClosedDate>01/06/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19520</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>panopticoncentral</FixedByID>
    <Title>Fix FQN for CodeLens (for test discovery)</Title>
    <Description>**Customer scenario**

If the customer creates a unit test in a nested class, there will be no CodeLens indicator for the test status. This indicator allows doing inline viewing of test results and requesting the test to be run/debugged.

**Bugs this fixes:**

#19263 

**Workarounds, if any**

The user would have to use the test explorer window to view test results and run the test.

**Risk**

The fix is limited only to the CodeLens test indicator code path. If there was a bug in this code, it might impact files that had unit tests when CodeLens was turned on.

**Performance impact**

Low impact, uses the same mechanism as was being used previously, just adds an additional check to map "." to "+" for nested class fully qualified names.

**Is this a regression from a previous update?**

This is a regression from Dev14.

**Root cause analysis:**

The IDE team doesn't have test CodeLens indicator tests and this was inadvertently broken during the CodeLens backend rewrite. I have added a test for the output of this service that should help avoid breaking this in the future.

**How was the bug found?**

Reported by the CodeLens test team.
</Description>
    <CreatedDate>15/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19520</PullRequestID>
        <IssueID>19263</IssueID>
        <Title>FullyQualifiedName issue with CodeLens</Title>
        <Description>**Steps to Reproduce**:

1. Create a class library project and write a method inside a nested class, for example:

``
2. Use CodeLensReferencesService.GetFullyQualifiedName to get the FQN for the method.

**Expected Behavior**:
FooBarNamespace.OuterClass+NestedClass.Method1

**Actual Behavior**:
FooBarNamespace.OuterClass.NestedClass.Method1
</Description>
        <CreatedDate>04/05/2017</CreatedDate>
        <ClosedDate>17/05/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19490</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>alrz</FixedByID>
    <Title>Clarify the diagnostic message when a local function is left unused</Title>
    <Description>Fixes #9661</Description>
    <CreatedDate>14/05/2017</CreatedDate>
    <ClosedDate>21/06/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19490</PullRequestID>
        <IssueID>9661</IssueID>
        <Title>Need custom warning for unused local function</Title>
        <Description>An unused local function needs a warning, but not this one:

``
</Description>
        <CreatedDate>10/03/2016</CreatedDate>
        <ClosedDate>21/06/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-Diagnostic Clarity</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Local Functions</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19489</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>alrz</FixedByID>
    <Title>Fix bug when caret is at the end of an argument</Title>
    <Description>Fixes #19175</Description>
    <CreatedDate>14/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19489</PullRequestID>
        <IssueID>19175</IssueID>
        <Title>"Add argument name" requires you to be on exactly the argument</Title>
        <Description>1. CTRL+. at $

``

**Expected:** To be offered to "Add argument name"
**Actual:** Not offered to "Add argument name"

Note, for highlighting usage and goto definition purposes that character position is considered part of the argument.</Description>
        <CreatedDate>02/05/2017</CreatedDate>
        <ClosedDate>17/05/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19487</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>alrz</FixedByID>
    <Title>Fix bug when caret is at the end of a numeric literal</Title>
    <Description>Fixes #19369</Description>
    <CreatedDate>14/05/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19487</PullRequestID>
        <IssueID>19369</IssueID>
        <Title>Convert base / Insert digit separators refactorings are not available when the caret is at the end of a numeric literal</Title>
        <Description>**Version Used**: Latest magma-hot bits

**Steps to Reproduce**:

``

1. Place editor caret between `2` and `;`
2. Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;.&lt;/kbd&gt;

**Expected Behavior**: 'Convert base' and 'Insert digit separators' refactorings should be available.

**Actual Behavior**: They're not.</Description>
        <CreatedDate>09/05/2017</CreatedDate>
        <ClosedDate>18/05/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19486</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>reaction1989</FixedByID>
    <Title>Change LanguageVersionFacts.ToDisplayString() to 7.0</Title>
    <Description>This fixes #18991</Description>
    <CreatedDate>14/05/2017</CreatedDate>
    <ClosedDate>30/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19486</PullRequestID>
        <IssueID>18991</IssueID>
        <Title>LanguageVersionFacts.ToDisplayString() should return "7.0" instead of "7"</Title>
        <Description>
``</Description>
        <CreatedDate>25/04/2017</CreatedDate>
        <ClosedDate>13/07/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19477</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Hack around PublicAPI item group support in the new project system</Title>
    <Description>This is a workaround for dotnet/project-system#2160 where
AdditionalFileItemNames isn't quite behaving correctly with the IDE.
This can be reverted once that bug is fixed.

@dotnet/roslyn-infrastructure or @dotnet/roslyn-analysis or @dotnet/project-system for review.

@MattGertz this is just a tooling improvement for our repo to work around a project system/IDE bug that impacts dogfooding with the new project system. There should otherwise be no change to the product we build.</Description>
    <CreatedDate>13/05/2017</CreatedDate>
    <ClosedDate>09/06/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19477</PullRequestID>
        <IssueID>2160</IssueID>
        <Title>DiagnosticLogger.LogHyperlink uses GetHashCode() to persist data</Title>
        <Description>GetHashCode has no guarantee of stability across architectures, runtime implementations, process or AppDomain boundaries, or even build to build (in fact, we used to specifically break GetHashCode in daily CHK builds to prevent internal code from relying on them outside of an AppDomain.  Other telemetry is using SHA256 hashes, and LogHyperlink should do the same.
</Description>
        <CreatedDate>21/04/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19474</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Add a common base type of IDE and diagnostics VS performance tests. </Title>
    <Description>This change adds a common base type for IDE and diagnostics performance tests.
Required for #15677, #15681 and #15682</Description>
    <CreatedDate>12/05/2017</CreatedDate>
    <ClosedDate>16/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19474</PullRequestID>
        <IssueID>15677</IssueID>
        <Title>Enable diagnostics perf test 'CSharpPerfBuildWithThirdPartyAnalyzers' in Jenkins </Title>
        <Description>[CSharpPerfBuildWithThirdPartyAnalyzersTemplate.xml](https://github.com/dotnet/roslyn-internal/blob/master/Closed/Test/PerformanceTests/Perf/tests/CSharp/CSharpPerfBuildWithThirdPartyAnalyzersTemplate.xml): This test measures solution build performance in Visual Studio with third party analyzers enabled for the solution.

**Current Status:** We already have the test authored. We just need to ensure that they are running as part of Jenkins runs.</Description>
        <CreatedDate>05/12/2016</CreatedDate>
        <ClosedDate>17/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Performance</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19474</PullRequestID>
        <IssueID>15681</IssueID>
        <Title>Enable diagnostics perf test 'CSharpPerfFullSolutionDiagnostics' in Jenkins </Title>
        <Description>[CSharpPerfFullSolutionDiagnosticsTemplate.xml](https://github.com/dotnet/roslyn-internal/blob/master/Closed/Test/PerformanceTests/Perf/tests/CSharp/CSharpPerfFullSolutionDiagnosticsTemplate.xml): This test measures background diagnostic analysis performance with:

1. Full solution analysis turned **ON**
2. Built-in IDE analyzers only.

**Current Status:** We already have the test authored. We just need to ensure that they are running as part of Jenkins runs.

</Description>
        <CreatedDate>05/12/2016</CreatedDate>
        <ClosedDate>17/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Performance</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19474</PullRequestID>
        <IssueID>15682</IssueID>
        <Title>Enable diagnostics perf test 'CSharpPerfFullSolutionDiagnosticsThirdPartyAnalyzers' in Jenkins</Title>
        <Description>[CSharpPerfFullSolutionDiagnosticsThirdPartyAnalyzersTemplate.xml](https://github.com/dotnet/roslyn-internal/blob/master/Closed/Test/PerformanceTests/Perf/tests/CSharp/CSharpPerfFullSolutionDiagnosticsThirdPartyAnalyzersTemplate.xml): This test measures background diagnostic analysis performance with:

1. Full solution analysis turned **ON**
2. Third party analyzers only.

**Current Status:** We already have the test authored. We just need to ensure that they are running as part of Jenkins runs.</Description>
        <CreatedDate>05/12/2016</CreatedDate>
        <ClosedDate>17/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Performance</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19448</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>drognanar</FixedByID>
    <Title>Delete the PR branch if nothing to merge</Title>
    <Description>Fixes #18493

**Customer scenario**

When a merge bot attempts to create a PR for a branch that has no commits to merge it leaves an empty branch around.

**Bugs this fixes:**

#18493

**How was the bug found?**

Infrastructure backlog
</Description>
    <CreatedDate>11/05/2017</CreatedDate>
    <ClosedDate>15/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19448</PullRequestID>
        <IssueID>18493</IssueID>
        <Title>Merge bot keeps pushing empty branches to origin</Title>
        <Description>I'm constantly deleting merge branches on project system that have no changes. I speculate based on the naming of them (in that they have consecutive dates) that the merge bot is pushing branches to origin even when they have no changes. This might be okay when it used to have a fork, but given it now pushes directly to the repo - it would be great if it didn't do that as these become visible to visitors of the main repo.
</Description>
        <CreatedDate>06/04/2017</CreatedDate>
        <ClosedDate>15/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19448</PullRequestID>
        <IssueID>18493</IssueID>
        <Title>Merge bot keeps pushing empty branches to origin</Title>
        <Description>I'm constantly deleting merge branches on project system that have no changes. I speculate based on the naming of them (in that they have consecutive dates) that the merge bot is pushing branches to origin even when they have no changes. This might be okay when it used to have a fork, but given it now pushes directly to the repo - it would be great if it didn't do that as these become visible to visitors of the main repo.
</Description>
        <CreatedDate>06/04/2017</CreatedDate>
        <ClosedDate>15/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>19440</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Regression test for #19434 which appear to be fixed.</Title>
    <Description>Closes:#19434
</Description>
    <CreatedDate>11/05/2017</CreatedDate>
    <ClosedDate>12/05/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>19440</PullRequestID>
        <IssueID>19434</IssueID>
        <Title>Cast of (int, int) to (byte, byte)? results in incorrect value</Title>
        <Description>``
Result: `(1, 0)`</Description>
        <CreatedDate>11/05/2017</CreatedDate>
        <ClosedDate>12/05/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Not Reproducible</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18107</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Avoiding turning RValue expressions into effectively LValues as a sideeffect of lowering reductions</Title>
    <Description>Avoiding turning RValue expressions into effectively LValues as a sideeffect of lowering reductions

Fixes:#17756</Description>
    <CreatedDate>23/03/2017</CreatedDate>
    <ClosedDate>25/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18107</PullRequestID>
        <IssueID>17756</IssueID>
        <Title>Different behavior depending on compile constness in conditional operator</Title>
        <Description>**Version Used**: Visual Studio 2015, Update 3

**Steps to Reproduce**:
Following code produces such behaviour

    struct Value
    {
        public int Magic { get; private set; }
        public void Increment() { ++Magic; }
    }

    static void Main()
    {
            Value v1 = new Value(), v2 = new Value();
            Console.WriteLine(v1.Magic + " " + v2.Magic);
    
            bool condition1 = true;
            (condition1 ? v1 : v2).Increment();
            Console.WriteLine(v1.Magic + " " + v2.Magic);

            const bool condition2 = true;
            (condition2 ? v1 : v2).Increment();
            Console.WriteLine(v1.Magic + " " + v2.Magic);
    }

**Expected Behavior**:
It is expected to output either

&gt; 0 0
&gt; 1 0
&gt; 2 0

or

&gt; 0 0
&gt; 0 0
&gt; 0 0

depending on semantics of conditional operator.

**Actual Behavior**:
Output is 
&gt; 0 0
&gt; 0 0
&gt; 1 0

Which is weird, because it should not differ whether `condition` is known at compile time or not.</Description>
        <CreatedDate>12/03/2017</CreatedDate>
        <ClosedDate>29/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18096</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dsplaisted</FixedByID>
    <Title>Use dotnet-bot instead of vslsnap GitHub account for GithubMergeTool</Title>
    <Description>Fixes part of #14842

@dotnet/roslyn-infrastructure @jasonmalinowski @tannergooding</Description>
    <CreatedDate>23/03/2017</CreatedDate>
    <ClosedDate>25/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18096</PullRequestID>
        <IssueID>14842</IssueID>
        <Title>Unify roslyn-bot and vslsnap accounts and upgrade security</Title>
        <Description>Right now roslyn-bot and vslsnap both exist, and we only need one. We also should look at moving them over to deploy keys or something a bit newer.</Description>
        <CreatedDate>31/10/2016</CreatedDate>
        <ClosedDate>28/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18091</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jcouv</FixedByID>
    <Title>Ref assemblies: Address more feedback on #17558</Title>
    <Description>@tmat for review.

You had some additional feedback on handling nested types in `ConstantSignatureVisualizer` in `MetadataReaderUtils.cs`. I'll add that when I refine what goes into ref assemblies (at the moment, all types are included, regardless of accessibility).

Follows up on #17558</Description>
    <CreatedDate>23/03/2017</CreatedDate>
    <ClosedDate>25/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18091</PullRequestID>
        <IssueID>17558</IssueID>
        <Title>Produce ref assemblies from command-line and msbuild</Title>
        <Description>Relates to https://github.com/dotnet/roslyn/issues/2184

There are two command-line parameters (`/refout:` and `/refonly`) which map to `CommonCommandLineArguments.OutputRefFileName` and `EmitOptions.EmitMetadataOnly`.

If `/refonly` is specified, the ref assembly will be output as the primary output (to the `/out` path) and no `/refout` path is allowed. (This maintins the previous behavior for the `EmitOptions.EmitMetadataOnly` flag)
Also, if `/refonly` is specific, the no PDB will be generated (despite any command-line parameters to the contrary).

If `/refout` is specified, then the assembly is output as the primary output (to `/out` path) as usual, and the ref assembly is output to `/refout` path.

## Background:
The compiler already supports emitting "metadata-only" assemblies. This is used by the IDE for cross-language dependencies. Those include private members, but do not include any method bodies.

We will be introducing a second concept, which is "reference assemblies" (also called skeleton assemblies). Those are a further stripped down versions metadata-only assemblies (with some caveats, they won't include private types or members, for instance). They will be used for build scenarios. Producing ref assemblies will be driven by the `/refonly` and `/refout` parameters.
The guiding principle of ref assemblies is that they should have the minimum amount of stuff to preserve the compile-time behavior of consumers. 

But, as a starting point (to unblock work on msbuild), we are using metadata-only assemblies as a close approximation of ref assemblies. That gives us many of the benefits of ref assemblies at much lower cost. As we narrow down what is included in ref assemblies (see #17612), the two concepts will diverge. When they do, we will likely need specific emit or compilation options (TBD) to indicate that we're producing ref assemblies.

Filed https://github.com/dotnet/roslyn/issues/17612 for refining what changes and diagnostics should affect ref assemblies.</Description>
        <CreatedDate>05/03/2017</CreatedDate>
        <ClosedDate>21/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18085</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Enhance VB FindBindingText test helper to find prefix text matches</Title>
    <Description>This is needed when we want to find IOperation for a multiline syntax node, but the 'BIND annotation can only contain the first line of the text.
Fixes #18047</Description>
    <CreatedDate>22/03/2017</CreatedDate>
    <ClosedDate>23/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18085</PullRequestID>
        <IssueID>18047</IssueID>
        <Title>[IOperation] VB : MultiLineIfBlockSyntax Throws System.ArgumentOutOfRangeException Exception</Title>
        <Description>MultiLineIfBlockSyntax generates Ioperation but fails to parse the Block Might be related to https://github.com/dotnet/roslyn/issues/8919

Example : 
  ``
</Description>
        <CreatedDate>22/03/2017</CreatedDate>
        <ClosedDate>23/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Language-VB</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18078</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Do not capture pinned locals into state machine</Title>
    <Description>Fixes #9775.</Description>
    <CreatedDate>22/03/2017</CreatedDate>
    <ClosedDate>24/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18078</PullRequestID>
        <IssueID>9775</IssueID>
        <Title>Compiler captures fixed/pinned locals into async state machine in Debug </Title>
        <Description>Reported by customer using Update1, 
but reproducable in current master

**Steps to Reproduce**:

``
</Description>
        <CreatedDate>15/03/2016</CreatedDate>
        <ClosedDate>24/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Interactive-Debugging</Label>
          <Label>Language-C#</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18060</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jinujoseph</FixedByID>
    <Title>Adding Unit tests for IfStatement</Title>
    <Description>Fixes #17601 This adds couple of unit tests for Ifstatements

On the VB side i don't get Ioperation for IfStatment, There seems to be an ioperation for SingleLineIfStatement and MultiLineIfBlock. 

**Issues discovered**
https://github.com/dotnet/roslyn/issues/18300 
https://github.com/dotnet/roslyn/issues/18303

Tagging @dotnet/analyzer-ioperation @AlekseyTs for review.
</Description>
    <CreatedDate>22/03/2017</CreatedDate>
    <ClosedDate>30/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18060</PullRequestID>
        <IssueID>17601</IssueID>
        <Title>[IStatement] IOperation unit tests for if statement </Title>
        <Description>- [x] IIfStatement</Description>
        <CreatedDate>07/03/2017</CreatedDate>
        <ClosedDate>30/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18045</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jcouv</FixedByID>
    <Title>Add "#error version" to C# and udpate UpgradeProject to support 7.1</Title>
    <Description>This is a re-worked version of PR #17957. In particular, it introduces no new syntax nodes.

This change solves two problems:
1. print out the compiler version as a diagnostic for troubleshooting purpose (with `#error version`)
2. generate a "please use version 7.1" diagnostic even when the compiler supports no 7.1 features yet (with `#error version:7.1`)

This is only supported in C# for now. I can file a separate issue for VB if needed.

Adds ability to print the compiler version as diagnostic (#17859)
Updates the UpgradeProject fixer as follow-up on #17894

@gafter @cston @tmat @CyrusNajmabadi for review. Thanks</Description>
    <CreatedDate>22/03/2017</CreatedDate>
    <ClosedDate>24/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18045</PullRequestID>
        <IssueID>17957</IssueID>
        <Title>Add 7.1 support to UpgradeProject, add #version directive</Title>
        <Description>
Adds #version (https://github.com/dotnet/roslyn/issues/17859)
Updates the UpgradeProject fixer as follow-up on https://github.com/dotnet/roslyn/pull/17894</Description>
        <CreatedDate>18/03/2017</CreatedDate>
        <ClosedDate>22/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18045</PullRequestID>
        <IssueID>17859</IssueID>
        <Title>Print compiler version in diagnostics when certain code is compiled</Title>
        <Description>It would be useful to troubleshooting purpose to have the equivalent of `phpversion()` for C# and VB. 
It could be a special pragma (`#VERSION`), a well-known method without implementation (`System.Runtime.CompilerServices.RuntimeHelpers.Version()`?) or maybe a special doc tag.

The output should not only include the version of the compiler, but also the language version that is used to compile the current code (this would be useful in asp.net scenario).

FYI @gafter @jaredpar</Description>
        <CreatedDate>14/03/2017</CreatedDate>
        <ClosedDate>24/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18045</PullRequestID>
        <IssueID>17894</IssueID>
        <Title>Add C# 7.1 version to compiler</Title>
        <Description>cc @AlekseyTs @jcouv @dotnet/roslyn-compiler 

Contributes to #17173</Description>
        <CreatedDate>15/03/2017</CreatedDate>
        <ClosedDate>15/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18028</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>333fred</FixedByID>
    <Title>Add unit tests for IVariableDeclaration and IVariableDeclarationStatement</Title>
    <Description>Fixes #17599. This adds unit tests for `IVariableDeclaration` and `IVariableDeclarationStatement`. This covers the following statements:
**C#**:
* Basic declarations
* Multiple variable declarations
* Declarations in `fixed` statements
* Declarations in `using` statements
* Declarations in `for` loops
* Local `const` declarations

**VB**:
* Basic `Dim` statements
* Multiple `Dim` statements
* `Dim As New` statements
* Mixed `Dim` and `Dim As New` statements
* `Using` statements
    * Skipped due to #17917 
* Local `Const` declarations
* Local `Static` declarations

Skipped in both languages are `foreach`, as it does not create an `IVariableDeclaration` or `IVariableDeclarationStatement`. `For` is skipped in VB, as it also does not create an `IVariableDeclaration` or `IVariableDeclarationStatement`. 

Tagging @dotnet/analyzer-ioperation @AlekseyTs for review.</Description>
    <CreatedDate>21/03/2017</CreatedDate>
    <ClosedDate>31/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18028</PullRequestID>
        <IssueID>17599</IssueID>
        <Title>[IStatement] IOperation unit tests for variable declarations</Title>
        <Description>- [ ] IVariableDeclarationStatement
- [ ] IVariableDeclaration</Description>
        <CreatedDate>07/03/2017</CreatedDate>
        <ClosedDate>31/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18028</PullRequestID>
        <IssueID>17917</IssueID>
        <Title>GetOperation for VB using throws an exception</Title>
        <Description>``</Description>
        <CreatedDate>16/03/2017</CreatedDate>
        <ClosedDate>28/09/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
          <Label>Language-VB</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>18018</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Require .NET 4.6 min runtime in app.config</Title>
    <Description>Fixes #17908</Description>
    <CreatedDate>21/03/2017</CreatedDate>
    <ClosedDate>03/04/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>18018</PullRequestID>
        <IssueID>17908</IssueID>
        <Title>Faulting csc.exe (2.0.0.61501) on Windows Server 2012 without latest .Net Framework 4.6.2</Title>
        <Description>Hi,
  I recently upgraded our ASP.Net MVC 4.5.2 project with the latest 2.0.1 roslyn compiler version but, after publishing on our production servers, the app crashes with the error:
``
Our servers had already installed the 4.5.2 framework but I needed to upgrade it to the latest one.

Thanks
Marco</Description>
        <CreatedDate>16/03/2017</CreatedDate>
        <ClosedDate>30/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>17990</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Follow up on PR #17894 on 7.1 version parsing</Title>
    <Description>Responds to feedback on #17894 

cc @jcouv @dotnet/roslyn-compiler @dotnet/roslyn-compat-council </Description>
    <CreatedDate>20/03/2017</CreatedDate>
    <ClosedDate>21/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17990</PullRequestID>
        <IssueID>17894</IssueID>
        <Title>Add C# 7.1 version to compiler</Title>
        <Description>cc @AlekseyTs @jcouv @dotnet/roslyn-compiler 

Contributes to #17173</Description>
        <CreatedDate>15/03/2017</CreatedDate>
        <ClosedDate>15/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>17938</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Expose the child IOperations within an IInvalidExpression and IInvali…</Title>
    <Description>…dStatement

This is a proposal PR for #17802, and needs API design team approval.

Fixes #17802, #17598 and #17607

Most of the changes in this PR are as a result of changing BoundBadExpression to hold more strongly typed `ImmutableArray&lt;BoundExpression&gt; childNodes` instead of the current `ImmutableArray&lt;BoundNode&gt; childNodes`</Description>
    <CreatedDate>17/03/2017</CreatedDate>
    <ClosedDate>10/04/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17938</PullRequestID>
        <IssueID>17802</IssueID>
        <Title>IInvalidExpression and IInvalidStatement should expose child operations</Title>
        <Description>IInvalidExpression and IInvalidStatement currently expose no child operations. However, BoundBadExpression and BoundBadStatement both contain bound nodes for children, and hence we should expose `ImmutableArray&lt;IOperation&gt; ChildOperations` from these 2 interfaces.

Additional, BoundBadExpression also contains a list of candidate symbols, and we should expose `ImmutableArray&lt;ISymbol&gt; CandidateSymbols` on IInvalidExpression</Description>
        <CreatedDate>13/03/2017</CreatedDate>
        <ClosedDate>10/04/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17938</PullRequestID>
        <IssueID>17802</IssueID>
        <Title>IInvalidExpression and IInvalidStatement should expose child operations</Title>
        <Description>IInvalidExpression and IInvalidStatement currently expose no child operations. However, BoundBadExpression and BoundBadStatement both contain bound nodes for children, and hence we should expose `ImmutableArray&lt;IOperation&gt; ChildOperations` from these 2 interfaces.

Additional, BoundBadExpression also contains a list of candidate symbols, and we should expose `ImmutableArray&lt;ISymbol&gt; CandidateSymbols` on IInvalidExpression</Description>
        <CreatedDate>13/03/2017</CreatedDate>
        <ClosedDate>10/04/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature - IOperation</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17938</PullRequestID>
        <IssueID>17598</IssueID>
        <Title>[IExpression] IOperation unit tests for invalid expressions</Title>
        <Description>- [ ] IInvalidExpression

We will need to test all possible bad expression/error scenarios across all the different possible expression kinds for completeness.</Description>
        <CreatedDate>07/03/2017</CreatedDate>
        <ClosedDate>10/04/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17938</PullRequestID>
        <IssueID>17607</IssueID>
        <Title>[IStatement] IOperation unit tests for invalid statements</Title>
        <Description>- [x] IInvalidStatement

We need to test all possible cases where binding different statements can end up as an invalid statement.</Description>
        <CreatedDate>07/03/2017</CreatedDate>
        <ClosedDate>10/04/2017</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature - IOperation</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>17916</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Forbid a void assignment to a discard.</Title>
    <Description>Fixes #17674 

Note that this is under review of @dotnet/roslyn-compat-council and integration will be held until a final approval.

@dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>16/03/2017</CreatedDate>
    <ClosedDate>18/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17916</PullRequestID>
        <IssueID>17674</IssueID>
        <Title>Compiler permits `_ = M()` for void-returning method</Title>
        <Description>The compiler should not permit a void-returning method invocation on the right-hand-side of an assignment expression, but it appears to permit that when the left-hand-side is a discard `_`.

We probably want to fix this sooner rather than later so that people don't take a dependency on this.
</Description>
        <CreatedDate>09/03/2017</CreatedDate>
        <ClosedDate>18/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>17903</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Pilchie</FixedByID>
    <Title>Pick the right project for P2P refs in lightweight solution load and cross-targeting</Title>
    <Description>If a project being loaded in lightweight solution load references a CPS project
that does cross-targeting, we may crash trying to hook up P2P references,
because we were looking for a single project matching the project file name, and
language.  In the case of cross-targeting though, we create a project for each
TFM, and the .Single call would blow up.

To fix this, we now continue looking through projects until we find one with an
output path that matches our reference.

Fixes #17570.

**Ask Mode Template**
Customer and Scenario Info

Who is impacted by this bug: Customers using .NET Core with cross-targeting, Desktop projects, and lightweight solution load.
What is the customer scenario and impact of the bug: Sometime not long after opening the solution, VS may crash.  This is timing dependent, and most likely to happen on the first open after LSL is enabled.
What is the workaround: Disable LSL
How was the bug found: Watson - 57 hits in RTW, 1460 altogether, Customer report from AArnott
If this fix is for a regression - what had regressed, when was the regression introduced, and why was the regression originally missed: This is not a regression.
​What is a Customer Rea​dy description of change should we need to document this: VS no longer crashes in lightweight solution load if a .NET Framework project references a cross-targeted .NET Core project.
Bug Fix Details

Overview of the fix: Instead of assuming that there is only a single IntelliSense project for a give project file path, find the one that matches the reference by output path if there is one.
Which VS products, SKUs, or components need the fix: All Skus - Roslyn insertion
What branch does the fix go into: D15Rel
What feature areas are impacted by the fix: Solution Load, LSL, .NET Core projects.
What is the risk of the code change: Low, the original path is preserved, but instead of crashing if there are multiple entries, we try to pick the best one, falling back to the first if there is no best match.
Does this change have impact on anything else (e.g. setup, perf, stress, ux, visual freeze, go live, breaking change, samples, etc): We now walk the list of references of each project 
How is this fix rolling forward in the next major release / sprintly train (e.g. Dev15):​ Regular merges in Roslyn repo.
​Validation
What testing/validation was done on the fix, and what were the results:
Forced a repro by adding a delay to the code, and stepped through ensure it behaves as expected.  
Vendor team buddy tested the fix.
Val build running
Will provide to Andrew to validate in his scenario.
(Binary/Component Insertions only) have you validated that your insertion does not regress DDRIT / RPS: Pending completion of VAL build, but chance is low, given DDRIT/RPS doesn't cover LSL scenarios.
Which engineering partner teams have signed off on the fix: 
Who code reviewed the fix: JasonMal</Description>
    <CreatedDate>16/03/2017</CreatedDate>
    <ClosedDate>20/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17903</PullRequestID>
        <IssueID>17570</IssueID>
        <Title>VS crash in VisualStudioProjectTracker.GetOrCreateProjectFromArgumentsAndReferences</Title>
        <Description>_From @AArnott on March 6, 2017 3:4_

d15rel 26228.00
I have lightweight solution load turned on.
This crashed twice in a row (2 out of 2 attempts)

``

_Copied from original issue: dotnet/roslyn-project-system#1678_</Description>
        <CreatedDate>06/03/2017</CreatedDate>
        <ClosedDate>21/03/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>17899</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Getting diagnostics and location of a token without a syntax tree should not crash</Title>
    <Description>Fixes #17067 
cc @AlekseyTs @gafter @dotnet/roslyn-compiler 

`this.SyntaxTree` is calculated from `Parent?.SyntaxTree`. So if `SyntaxTree` is null, this means that the parent (a `SyntaxNode`) is null, or doesn't belong to a tree. In that bug's case, the node is null.
Please let me know if there is another API surface area that the bug may have missed.</Description>
    <CreatedDate>15/03/2017</CreatedDate>
    <ClosedDate>31/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17899</PullRequestID>
        <IssueID>17067</IssueID>
        <Title>API crashes when getting diagnostics of parsed tokens</Title>
        <Description>Here is a test that repros the crash. Tokens should not assume they've parse trees, or a parse tree should be created for independently parsed tokens:

``</Description>
        <CreatedDate>09/02/2017</CreatedDate>
        <ClosedDate>31/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>17894</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Add C# 7.1 version to compiler</Title>
    <Description>cc @AlekseyTs @jcouv @dotnet/roslyn-compiler 

Contributes to #17173</Description>
    <CreatedDate>15/03/2017</CreatedDate>
    <ClosedDate>15/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17894</PullRequestID>
        <IssueID>17173</IssueID>
        <Title>[Umbrella] Add LanguageVersion 7.1/15.3 and streamline process</Title>
        <Description>Update (jcouv): Updated the issue to capture proposal and open issues.

Here's the current proposal:

In the IDE, the dropdown will just have new entries, “C# 7.1”, …, “C# 8.0”, in addition to current options.
It will also have a new entry “latest”, which means ‘latest latest’ version. The existing “default” option means ‘latest major’ version. 
We will likely re-label “latest” and “default” to friendlier names in the UI, but we will keep the default as ‘latest major’.

No change in msbuild (just passing langver through, as today).

In the compiler:
Langver command-line parameter is a string and currently accepts “7”, “default”, and some more. It will support new options: “7.1” and “latest”.
The public API enum, `LanguageVersion`, will have a new entry with label “CSharp7_1” and enum value `71` (integer). C# 8 will be represented with label “CSharp8” and value `80`. The enum already supports “Latest”.

## General tracking of compiler adoption with new releases

Moved the table tracking adoption to https://github.com/dotnet/roslyn/issues/18783

## Work items for adding 7.1

- [x] We need to confirm whether the enum value stays `71` (adequate for less than 9 minor versions) or become `701` or whatever. Once the value is settled, the output needs to be fixed and tests will have to be adjusted. (fixed in https://github.com/dotnet/roslyn/pull/17894)
- [x] The parsing of command-line parameter should not accept "71", but rather "7.1" (fixed in https://github.com/dotnet/roslyn/pull/17894)
- [x] Fix the error message (it should print "7.1", instead of the "71" currently) (fixed in https://github.com/dotnet/roslyn/pull/17894)
- [x] Add entries to UI ("7.1" and "latest") and re-label as discussed
    - "C# latest major version (default)”
    - "C# latest minor version (latest)” 
- [x] Add code fixer so that `ERR_FeatureNotAvailableInVersion7` offer "upgrade this project to use 'latest'" and "upgrade all projects to use 'latest'". (PR https://github.com/dotnet/roslyn/pull/17435)
- [x] Use a single diagnostic for `LanguageVersionExtensionsInternal.GetErrorCode()` (no, better telemetry to keep different error codes)
- [x] Print version diagnostic with `#VERSION` (https://github.com/dotnet/roslyn/issues/17859, PR https://github.com/dotnet/roslyn/pull/17957)
- [x] After any of the 7.1 features are merged to master, the UpgradeProject code fixer should be modified to handle it and tested accordingly.
- [x] Allow new VB versions without project system change (https://github.com/dotnet/roslyn/issues/19075)

- [ ] **VB project settings UI and DTE. (This was punted)**

## General checklist for adding new language version
- [x] Add new enum value to `LanguageVersion`
- [x] A number of tests will break and provide a checklist of fixes, including:
    - [x] Update the mapping for "default" and "latest"
    - [x] Update the command-line documentation
    - [x] Update the command-line help
    - [x] Update the UpgradeProject code fixer

Relates to https://github.com/dotnet/roslyn/issues/7141</Description>
        <CreatedDate>16/02/2017</CreatedDate>
        <ClosedDate>24/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Readonly References</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>17885</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>ivanbasov</FixedByID>
    <Title>Ivanbasov/integration tests</Title>
    <Description>First set of tests for #14369 </Description>
    <CreatedDate>15/03/2017</CreatedDate>
    <ClosedDate>16/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17885</PullRequestID>
        <IssueID>14369</IssueID>
        <Title>Reenable Interactive Window Integration Tests</Title>
        <Description>Interactive Window integration tests don't work anymore on pre-Willow VS and have been disabled. Enable them once we only run on Willow.
</Description>
        <CreatedDate>07/10/2016</CreatedDate>
        <ClosedDate>29/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Disabled Test</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>17880</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Handle unloaded modules</Title>
    <Description>Fixes #17788.</Description>
    <CreatedDate>15/03/2017</CreatedDate>
    <ClosedDate>22/03/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>17880</PullRequestID>
        <IssueID>17788</IssueID>
        <Title>[Watson] Implement and handle module unloaded cases in ExpressionCompiler</Title>
        <Description>This is one of the causes of Watson crash tracked by DevDiv VSO Bug 187805.

For X86, Roslyn is using the metadata pointer after the module instance (and runtime/process) has been unloaded. Since Roslyn’s EC does not listen to module instance unloaded notifications, it is using the pointer after the module instance has been unloaded and closed.
To fix this, we need to make the following changes:
a.	Roslyn: 
i.	ExpressionCompiler (and the vsdconfigxml) should implement IDkmModuleInstanceUnloadNotification, analogous to IDkmModuleModifiedNotification. This ensures that the metadata bytes ptr is alive till the module instance unloaded notification is processed, ensuring that Roslyn will never have a dangling pointer.
ii.	IsBadOrMissingMetadataException should additionally check if the exception is an ObjectDisposedException.
b.	Debugger:
i.	ManagedDM should return E_RPC_DISCONNECTED (translates to ObjectDisposedException) if metadata is requested for a module instance that has been unloaded.

This work item tracks the Roslyn side of this work.
</Description>
        <CreatedDate>13/03/2017</CreatedDate>
        <ClosedDate>22/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Interactive-Debugging</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16634</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Fixed crashes when there are multiple type forwarders for the same type</Title>
    <Description>Fixes #16484</Description>
    <CreatedDate>19/01/2017</CreatedDate>
    <ClosedDate>03/02/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16634</PullRequestID>
        <IssueID>16484</IssueID>
        <Title>csc crashes when referencing module that forwards same type to multiple assemblies</Title>
        <Description>To reproduce:

1) Save the following il into `forwarder.il`:
``

@AlekseyTs comment: We should only report the error if the user is referencing the type, and we should ignore the multiple forwards and resume normally otherwise.

@jaredpar copy of VSO 223973.</Description>
        <CreatedDate>13/01/2017</CreatedDate>
        <ClosedDate>03/02/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16629</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Stop applying ComVisible attribute to embedded value types.</Title>
    <Description>**Customer scenario**
Customer uses tlbexp tool on an assembly that embeds value types (structures or enums). The output now includes type declarations for the embedded value types, which causes a build break due to a name conflict with types declared elsewhere. Broke VS build.  

**Bugs this fixes:** 
Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=370269.
Related to #16177.
Reverting behavior change introduced in https://github.com/dotnet/roslyn/pull/16279.

**Workarounds, if any**
None, except stop using NoPia.

**Risk**
Low. Reverting to the previous behavior.

**Performance impact**
Low

**Is this a regression from a previous update?**
Yes.

**Root cause analysis:**
Interaction of different tools.

**How was the bug found?**
Toolset update for VS codebase.

@dotnet/roslyn-compiler, @jcouv, @cston Please review.  </Description>
    <CreatedDate>19/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16629</PullRequestID>
        <IssueID>16177</IssueID>
        <Title>Roslyn should embed interop structs with [ComVisible(true)]</Title>
        <Description>**Version**: VS 2015 Update 3

**Steps to Reproduce**:

1. Create a ATL COM library:

``

**Expected Behavior**:
Succeed

**Actual Behavior**:
Fail. CLR throws ArgumentException with HRESULT=0x80070057 (E_INVALIDARG).

**Reason**:
The underlying problem is caused by interop type embeding. When marshaling SAFEARRAY of structs, CLR needs to locate the IRecordInfo from the typelib in order to be able to correctly represent them in VARIANTs. 
Due to interop embeding, CLR is not able to correctly locate the type lib GUID (the right GUID is on the interop assembly that is not inherited into the main app, and in the case of multiple embedding interop assemblies, it simply can't), so registering the TLB actually don't work. As a result, CLR has to resort back to dynamically export a tlb on the fly to solve the issue. 
This usually works well for embedded interop classes and interfaces since they are [ComImport], but not for structs since it can't have [ComImport]. Therefore, CLR uses [ComVisible()] setting on struct to determine whether the importing is needed. If [ComVisible(false)] is set on assembly level (which is the **default**), CLR would ignore the struct and the struct would fail to be found in the exported type lib. 
If you turn off embed interop types, or change the default [ComVisible(false)] to true, you wouldn't see this issue. 
To work well with CLR, it might be reasonable to make such structs [ComVisible(true)] when embedding them. 
</Description>
        <CreatedDate>01/01/2017</CreatedDate>
        <ClosedDate>26/09/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>Need More Info</Label>
          <Label>Resolution-Won't Fix</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16620</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>TyOverby</FixedByID>
    <Title>Remove IManagedPointerTypeReference</Title>
    <Description>Closes #14027</Description>
    <CreatedDate>19/01/2017</CreatedDate>
    <ClosedDate>02/02/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16620</PullRequestID>
        <IssueID>14027</IssueID>
        <Title>Remove IManagedPointerTypeReference interface</Title>
        <Description>`IManagedPointerTypeReference` is not implemented and can be removed.
</Description>
        <CreatedDate>23/09/2016</CreatedDate>
        <ClosedDate>03/02/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16605</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Restore detection of an ambiguous method type argument inference.</Title>
    <Description>**Customer scenario**
Given a method ```void Assert&lt;T&gt;(T a, T b)```, customer supplies arguments that have different types, but the types are implicitly convertible to each other. The type argument inference is supposed to fail, but it succeeds by choosing one of the types in a non-deterministic manner (first in the collection of keys from a Dictionary, which doesn't guarantee any particular order). Method becomes applicable and can be chosen by Overload Resolution as the best candidate, silently changing runtime behavior of a program after it is built with new version of the compiler. 

**Bugs this fixes:** 
Fixes #16478.
Tracked by VSO https://devdiv.visualstudio.com/DevDiv/_workitems/edit/369821

**Workarounds, if any**
Explicitly supply type arguments.

**Risk**
Low. Targeted fix, putting back the code that got removed by accident.

**Performance impact**
Low. Simple, no new allocations fix.

**Is this a regression from a previous update?**
Yes, from VS2015.

**Root cause analysis:**
A test gap. Added tests.

**How was the bug found?**
Customer reported.

@dotnet/roslyn-compiler, @VSadov, @jcouv Please review.  </Description>
    <CreatedDate>19/01/2017</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16605</PullRequestID>
        <IssueID>16478</IssueID>
        <Title>Regression around order in which convertibility of arguments is evaluated</Title>
        <Description>As found [here](https://github.com/aspnet/Common/issues/181).

**Version Used**: 
2.0.0.61213

**Steps to Reproduce**:

1. Compile and run this:
``
using version 2.0.0.61213. Note that the result is "Non collection".

2. Compile it using version 1.3.1.60616 and note that the result is "Collection".

**Expected Behavior**:
We expect the same implicit conversion (and thus Assert overload) to be performed.

**Actual Behavior**:
The other implicit conversion is used instead.

CC @pranavkm</Description>
        <CreatedDate>12/01/2017</CreatedDate>
        <ClosedDate>19/01/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16597</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Don't emit casing-related naming violations when the violating character has no casing (making the feature noisy/unusable in other cultures)</Title>
    <Description>Fixes #15326, #15486

Escrow Template
================

**Customer scenario**: A Japanese user (for example) has the default Naming Styles applied but uses an identifier where the first character is neither upper-case nor lower-case. We currently flag this as a violation of that Naming Style. Note that this will be their default experience out-of-the-box.

**Bugs this fixes:** #15326, #15486

**Workarounds, if any:** They can manually turn off all Naming Rules.

**Risk**: Low. We just add a check to see if the character being inspected has casing at all to 4 different places. This is specific to the Naming Styles feature, and nothing else relies on this code.

**Performance impact**: For the more common naming styles, it can create an additional struct per symbol (the .ToUpper or .ToLower'd version of the first character). For the less common naming styles, it can create an additional struct per character in each symbol analyzed.

**Is this a regression from a previous update?** No.

**Root cause analysis:** It was missed as part of the original feature work. There are unit tests to validate and protect against regressions.

**How was the bug found?** Customer reports and dogfooding.</Description>
    <CreatedDate>18/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16597</PullRequestID>
        <IssueID>15326</IssueID>
        <Title>Naming style "require uppercase" doesn't allow numerics or non-Latin characters</Title>
        <Description>From: https://developercommunity.visualstudio.com/content/problem/2440/uppercase-naming-with-number.html

``

All of the enums that contain a number 1,2,3,4 fail the naming convention of uppercase.  Is there anyway to configure naming to force uppercase and allow numbers?</Description>
        <CreatedDate>17/11/2016</CreatedDate>
        <ClosedDate>20/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Localization</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16597</PullRequestID>
        <IssueID>15486</IssueID>
        <Title>The naming rule violation is inadequate for non-Latin languages</Title>
        <Description>**Version Used**: 

Visual Studio 2017 RC

**Steps to Reproduce**:

1. Use Japanese characters for identifiers

**Expected Behavior**:

There is no message.

**Actual Behavior**:

The code analyzer says "Naming rule violation: These words must begin with upper case characters".

![image](https://cloud.githubusercontent.com/assets/3760955/20550074/54470168-b175-11e6-9e91-c85d06d6ccce.png)

However, Japanese characters don't have such a classification. There is no upper case in Japanese characters. This message may be inadequate for many non-Latin languages.

You should not simply use `char.IsLower`/`IsUpper` methods for this purpose.
https://github.com/dotnet/roslyn/blob/7a105a46a735d8c3b21a9c1990cecbe6ac4dde8c/src/Features/Core/Portable/Diagnostics/Analyzers/NamingStyles/Serialization/NamingStyle.cs#L136
</Description>
        <CreatedDate>23/11/2016</CreatedDate>
        <ClosedDate>31/12/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Duplicate</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16597</PullRequestID>
        <IssueID>15326</IssueID>
        <Title>Naming style "require uppercase" doesn't allow numerics or non-Latin characters</Title>
        <Description>From: https://developercommunity.visualstudio.com/content/problem/2440/uppercase-naming-with-number.html

``

All of the enums that contain a number 1,2,3,4 fail the naming convention of uppercase.  Is there anyway to configure naming to force uppercase and allow numbers?</Description>
        <CreatedDate>17/11/2016</CreatedDate>
        <ClosedDate>20/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Localization</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16597</PullRequestID>
        <IssueID>15486</IssueID>
        <Title>The naming rule violation is inadequate for non-Latin languages</Title>
        <Description>**Version Used**: 

Visual Studio 2017 RC

**Steps to Reproduce**:

1. Use Japanese characters for identifiers

**Expected Behavior**:

There is no message.

**Actual Behavior**:

The code analyzer says "Naming rule violation: These words must begin with upper case characters".

![image](https://cloud.githubusercontent.com/assets/3760955/20550074/54470168-b175-11e6-9e91-c85d06d6ccce.png)

However, Japanese characters don't have such a classification. There is no upper case in Japanese characters. This message may be inadequate for many non-Latin languages.

You should not simply use `char.IsLower`/`IsUpper` methods for this purpose.
https://github.com/dotnet/roslyn/blob/7a105a46a735d8c3b21a9c1990cecbe6ac4dde8c/src/Features/Core/Portable/Diagnostics/Analyzers/NamingStyles/Serialization/NamingStyle.cs#L136
</Description>
        <CreatedDate>23/11/2016</CreatedDate>
        <ClosedDate>31/12/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Duplicate</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16593</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Expand the lifetime of locals declared within CasePatternSwitchLabelSyntax to the entire switch body.</Title>
    <Description>**Customer scenario**
When a lambda or a local function references a local declared within CasePatternSwitchLabelSyntax, either compiler crashes or an application crashes at runtime because corresponding closure isn't properly initialized.  

**Bugs this fixes:** 
Fixes #15536. 
Fixes #16066. 
Tracked by VSO https://devdiv.visualstudio.com/DevDiv/_workitems?id=369824

**Workarounds, if any**
Avoid directly referencing such locals in a lambda or a local function. 

**Risk**
Low. The fix is a targeted change for a pattern switch feature, which is the only feature affected by this issue. 

**Performance impact**
Low. We allocate one additional bound tree node per switch section with locals.

**Is this a regression from a previous update?**
No. New feature.

**Root cause analysis:**
A test gap for a new feature. Tests added.

**How was the bug found?**
Customer reported.

@dotnet/roslyn-compiler, @gafter, @agocke Please review.  </Description>
    <CreatedDate>18/01/2017</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16593</PullRequestID>
        <IssueID>15536</IssueID>
        <Title>Bad codegen in call-forward to local function in different switch block</Title>
        <Description>From #15322:

``

The problem seems to be getting the information for the local in CodeGen. It's not clear if this is an issue </Description>
        <CreatedDate>26/11/2016</CreatedDate>
        <ClosedDate>19/01/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16593</PullRequestID>
        <IssueID>16066</IssueID>
        <Title>Pattern matching crashes if lambda captures pattern variable</Title>
        <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 RC
Version 15.0.26014.0 D15REL
Microsoft .NET Framework
Version 4.6.01055

**Steps to Reproduce**:
Run the following app:

``
**Expected Behavior**:
App just runs, no output.

**Actual Behavior**:
Null-reference on the switch statement, when trying to initialize not created instance of a hidden class &lt;&gt;c__DisplayClass27_0 CS$&lt;&gt;8__locals0;

Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at ConsoleApp2017.Program.Main(String[] args) in D:\Temp\ConsoleApp2017\ConsoleApp2017\Program.cs:line 16
</Description>
        <CreatedDate>22/12/2016</CreatedDate>
        <ClosedDate>19/01/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Blocked</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16592</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Change the order of operands to object.Equals() for constant pattern match</Title>
    <Description>**Customer scenario**

The semantics of pattern-matching against a constant are different between the `is` operator and the `switch` statement. They were intended to be the same, but the order of operands to `object.Equals` in the generated code is backwards for the `is` operator. We need to fix this today, before RTM, so that users do not come to depend on the incorrect behavior (now-or-never language change). See also #16513.

**Bugs this fixes:** 

Fixes #16513

**Workarounds, if any**

Avoid using the new `is` operator with a constant right-hand-side.

**Risk**

Tiny. The fix is a one-line change to place the operands in the correct order.

**Performance impact**

None, as we are still executing the same code as before, albeit in a different order. However, with the changed order it will be possible for us to generate much better code in the future.

**Is this a regression from a previous update?**

No, as the feature is new.

**Root cause analysis:**

A subtle oversight in code generation. This might have been caught earlier if the compiler team had followed through on its plan to assign a developer to perform adversarial testing of each new feature under development.

**How was the bug found?**

Customer reported.

@dotnet/roslyn-compiler Please review this teensy tiny RTM fix.
</Description>
    <CreatedDate>18/01/2017</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16592</PullRequestID>
        <IssueID>16513</IssueID>
        <Title>The semantic of constant pattern</Title>
        <Description>I propose to change the semantic of constant pattern match from current:
``

The reasons behind proposed change:
1. Currently the "constant patterns" are not that "constant": generated code involves the execution of arbitrary 'object.Equals(object)' implementation on `foo` instance (in the case it is not `null`), since `object.Equals(object, object)` invokes it on first argument.
2. The idiom `foo is null` do not actually means `((object) foo) == null` as most of users would expect. It is easy to define a type that would pass `foo is null` check while being not-`null` (how would this play with future non-nullable types and their dataflow analysis?).
3. You won't be able to get rid of suboptimal code for constant patterns of reference types #13247, since such optimizations would change the semantic of matching.
4. If the arguments of `object.Equals()` would be reversed, the nice property of `is` expression would be restored — if right operand (type or pattern) has a type, the `is` expression only produce `true` if the left operand is of implicitly convertible type. Constant patterns do have types, literal expression do have types, `42` is of type `int`… who would expect `(int) foo` after successful `foo is 42` check to throw `InvalidCastException`?

p.s. Maybe it's a good idea to behave like F#: literal patterns of type `int` are only allowed when pattern is matched against the value of `int` type (but that's because of ML's "no implicit conversions" rule, I think).

cc @gafter</Description>
        <CreatedDate>14/01/2017</CreatedDate>
        <ClosedDate>19/01/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16592</PullRequestID>
        <IssueID>16513</IssueID>
        <Title>The semantic of constant pattern</Title>
        <Description>I propose to change the semantic of constant pattern match from current:
``

The reasons behind proposed change:
1. Currently the "constant patterns" are not that "constant": generated code involves the execution of arbitrary 'object.Equals(object)' implementation on `foo` instance (in the case it is not `null`), since `object.Equals(object, object)` invokes it on first argument.
2. The idiom `foo is null` do not actually means `((object) foo) == null` as most of users would expect. It is easy to define a type that would pass `foo is null` check while being not-`null` (how would this play with future non-nullable types and their dataflow analysis?).
3. You won't be able to get rid of suboptimal code for constant patterns of reference types #13247, since such optimizations would change the semantic of matching.
4. If the arguments of `object.Equals()` would be reversed, the nice property of `is` expression would be restored — if right operand (type or pattern) has a type, the `is` expression only produce `true` if the left operand is of implicitly convertible type. Constant patterns do have types, literal expression do have types, `42` is of type `int`… who would expect `(int) foo` after successful `foo is 42` check to throw `InvalidCastException`?

p.s. Maybe it's a good idea to behave like F#: literal patterns of type `int` are only allowed when pattern is matched against the value of `int` type (but that's because of ML's "no implicit conversions" rule, I think).

cc @gafter</Description>
        <CreatedDate>14/01/2017</CreatedDate>
        <ClosedDate>19/01/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>_Product-level triaged</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16589</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Do not fail in the NamingStyleCodeFix when we cannot find the symbol (causes the failure InfoBar to be shown)</Title>
    <Description>Fixes #15788 


We should always be able to find the symbol that generated this
diagnostic, but this cannot always be done by simply asking for the
declared symbol on the node from the symbol's declaration location.
Issue #16588 is tracking a more complete fix for this that always
successfully finds the symbol.

Escrow Template
================

**Customer scenario**: In the known cases of this, the customer has an invalid declaration that we believe violates naming rules. We issue the naming violation diagnostic, but then the CodeFix for it fails and shows the infobar.

**Bugs this fixes:** #15788 

**Workarounds, if any:** It can be avoided in the first place by deleting all Naming Rules. Once the error has happened, the InfoBar shows and the user can disable Naming Rules for the rest of the VS session, or re-enable it.

**Risk**: Low. This just introduces a null check and does not provide a CodeFix if we cannot find the symbol with the offending name. Nothing sits on top of this code.

**Performance impact**: None. This is just a null check.

**Is this a regression from a previous update?**: No.

**Root cause analysis:** Not enough testing was initially done around the analysis and fixing of invalid identifiers.

**How was the bug found?** Dogfooding</Description>
    <CreatedDate>18/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16589</PullRequestID>
        <IssueID>15788</IssueID>
        <Title>NamingStyleCodeFixProvider crashes on const readonly</Title>
        <Description>Obviously not a normal scenario, but for the moment that I had `const readonly`, the naming style code fix provider crashed. Possibly related rules (in precedence order):
(Private|Protected) Static Readonly (Property|Field) -&gt; PascalCase
(Internal|Private|Protected|Protected Internal) Static Field -&gt; s_ prefix.

Tested on d15rel/26008.00.

``</Description>
        <CreatedDate>08/12/2016</CreatedDate>
        <ClosedDate>20/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16589</PullRequestID>
        <IssueID>16588</IssueID>
        <Title>NamingStyleCodeFixProvider should always be able to find the symbol that generated the diagnostic</Title>
        <Description>As an example of where it cannot, see https://github.com/dotnet/roslyn/issues/15788</Description>
        <CreatedDate>18/01/2017</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16589</PullRequestID>
        <IssueID>15788</IssueID>
        <Title>NamingStyleCodeFixProvider crashes on const readonly</Title>
        <Description>Obviously not a normal scenario, but for the moment that I had `const readonly`, the naming style code fix provider crashed. Possibly related rules (in precedence order):
(Private|Protected) Static Readonly (Property|Field) -&gt; PascalCase
(Internal|Private|Protected|Protected Internal) Static Field -&gt; s_ prefix.

Tested on d15rel/26008.00.

``</Description>
        <CreatedDate>08/12/2016</CreatedDate>
        <ClosedDate>20/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16586</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Avoid GUID conflicts for Naming Styles Symbol Specifications (causes Naming Styles to not work and the Tools | Options page to not load)</Title>
    <Description>Fixes #16431

Escrow Template
================

**Customer scenario**: The user adds two Naming Styles Symbol Specifications in the same VS session, and the Naming Styles analyzer stops working altogether, and the Naming Styles Tools | Options page will no longer load if one of these symbol specifications are actually used in a rule.

**Bugs this fixes:** #16431

**Workarounds, if any**: The user can only add one Symbol Specification per VS session. Once two have been added, fixing it requires manual edits to your CurrentSettings.vssettings file.

**Risk**: Very low. This code is in the Naming Styles option pages code, and nothing sits on top of that layer. It's essentially the same code as before, we just create a new guid for each new Symbol Specification instead of accidentally caching the guid.

**Performance impact**: We make a new SymbolSpecification object each time the user adds a symbol specification, but that is extremely minor and is done extremely infrequently.

**Is this a regression from a previous update?** Yes, this is a regression from RC.2

**Root cause analysis:** I believe a refactoring was done as part of a larger effort which introduced the caching of the new Symbol Specification guid.

**How was the bug found?**: Ad-hoc testing</Description>
    <CreatedDate>18/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16586</PullRequestID>
        <IssueID>16431</IssueID>
        <Title>Naming Styles can be completely broken by adding multiple specifications</Title>
        <Description>To the point where the option page won't even load.

Rough repro steps:
1. Add two symbol specifications
2. Create two rules, that use the two symbol specifications
3. Save the options. Try to reopen the option page. It'll fail to load.

It doesn't repro if you do the analogous thing with Styles instead of Specifications.</Description>
        <CreatedDate>11/01/2017</CreatedDate>
        <ClosedDate>20/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16586</PullRequestID>
        <IssueID>16431</IssueID>
        <Title>Naming Styles can be completely broken by adding multiple specifications</Title>
        <Description>To the point where the option page won't even load.

Rough repro steps:
1. Add two symbol specifications
2. Create two rules, that use the two symbol specifications
3. Save the options. Try to reopen the option page. It'll fail to load.

It doesn't repro if you do the analogous thing with Styles instead of Specifications.</Description>
        <CreatedDate>11/01/2017</CreatedDate>
        <ClosedDate>20/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16575</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Allow extension methods on tuple receivers when underlying conversions are "upcasts"</Title>
    <Description>Allow extension methods on tuple receivers when underlying conversions are "upcasts"

Fixes:#16159

Extensions methods declared on bases and implemented interfaces are allowed to be applied to receivers that of derived or implementing type.

This change extends this rule to tuple receivers as long as the rule holds for individual elements, recursively.

I.E. valid "this" conversions are:
- identity conversion
- implicit reference conversion
- boxing conversion
- (new)  implicit tuple[literal] conversions as long as all underlying conversions are valid "this" conversions.

**Customer scenario**

Customer defines an extension method on `(Base, Base)` and expects it to be applicable to expressions of type  `(Derived, Derived)` 
To his surprise, code does not compile or compiles, but picks a different less specific overload.

**Bugs this fixes:** 

https://github.com/dotnet/roslyn/issues/16159

**Workarounds, if any**

Customer can cast to the exact type on which extension was declared.
This could be inconvenient, especially in cases where extension is defined in terms of very abstract types like the proposed `Zip` linq operator that takes  `(IEnumerable&lt;T&gt;, IEnumerable&lt;U&gt;)` 
The usefulness of an abstract implementation diminishes if user needs to cast when calling it with a concrete receiver types (which is most of the time)

**Risk**

The fix is very specific to the kind of tuple conversions that are permitted on a receiver when validating an extension method candidate 

**Performance impact**

"Low"

**Is this a regression from a previous update?**

New feature.

**Root cause analysis:**

We did not consider this scenario. 

**How was the bug found?**

customer reported</Description>
    <CreatedDate>18/01/2017</CreatedDate>
    <ClosedDate>18/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16575</PullRequestID>
        <IssueID>16159</IssueID>
        <Title>Tuple and extension methods</Title>
        <Description>``
~~In fact, an extension `GetEnumerator` should be sufficient without the explicit call.~~</Description>
        <CreatedDate>30/12/2016</CreatedDate>
        <ClosedDate>18/01/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16569</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Harden pattern-matching binding in error cases.</Title>
    <Description>**Customer scenario**

Code using the new pattern-matching feature, and some erroneous code using the existing is-expression, can cause the compiler to crash.

**Bugs this fixes:** 

Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=336030
Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=294570
Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=368942
Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=363714
Fixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=364165
Fixes #16296
Also adds test for #16559 

**Workarounds, if any**

Don't use the new features, and don't make any mistakes when using the is-operator.

**Risk**

Low; this is the addition of error-reporting and defensive code to handle error conditions.

**Performance impact**

Low; No additional allocations on normal code paths.

**Is this a regression from a previous update?**

Yes: the crash on erroneous use of the is-operator is a regression.

**Root cause analysis:**

Insufficient test coverage. Lack of dedicated testing team. Failure to follow through on our engineering test plan to pair a developer to "break" each feature under development.

**How was the bug found?**

These were all customer reported.
</Description>
    <CreatedDate>17/01/2017</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16569</PullRequestID>
        <IssueID>16296</IssueID>
        <Title>ArgumentNullException binding a pattern switch</Title>
        <Description>When running some custom static code analysis on Roslyn.sln, I get an "Unknown hard error". In the Windows EventViewer, I find the following error:
``

I have no easy repro of the issue. But from the stacktrace it seems that `null` is being passed to the `TryGetValue` of the dictionary in `SubsumptionDiagnosticBuilder.CheckSubsumed`: `byValue.ValueAndDecision.TryGetValue(constantPattern.Value.ConstantValue.Value, out decision)`. 

Sidenote: I have no easy repro of the issue, because I can't identify what input source code and code analyzer produces this error. I'm trying to run a SonarQube analysis of the Roslyn project based on this: http://docs.sonarqube.org/display/SCAN/From+the+Command+Line. Internally what happens is that when `msbuild Roslyn.sln` is called, then a custom analyzer DLLs are being passed to CSC with the help of a targets file. In general this approach is working, and it was also working for the Roslyn.sln, however as the Roslyn.sln dogfeeds the latest CSC to itself, due to the above bug, the analysis also fails. </Description>
        <CreatedDate>06/01/2017</CreatedDate>
        <ClosedDate>19/01/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16569</PullRequestID>
        <IssueID>16559</IssueID>
        <Title>Stack Overflow in BindPatternSwitchLabelForInference</Title>
        <Description>**Version Used**: VS2015 RC3

**Steps to Reproduce**:

Attempt to compile this code:

``

**Expected Behavior**: Compiler error about case label not being a constant

**Actual Behavior**: Compiler stack overflow

See also https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?_a=edit&amp;id=369796</Description>
        <CreatedDate>17/01/2017</CreatedDate>
        <ClosedDate>25/01/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16557</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>reaction1989</FixedByID>
    <Title>Added a GridSplitter</Title>
    <Description>Resubmit of #16324 cause i messed up that Branch with an unintentional merge.

This fixes #15685

@Pilchie</Description>
    <CreatedDate>17/01/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16557</PullRequestID>
        <IssueID>16324</IssueID>
        <Title>Added a GridSplitter to CodeStyleOptionControl</Title>
        <Description>Fixes #15685
</Description>
        <CreatedDate>07/01/2017</CreatedDate>
        <ClosedDate>17/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Community</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16557</PullRequestID>
        <IssueID>15685</IssueID>
        <Title>Preview pane for code style options should be resizable.</Title>
        <Description>In the screenshot below, the preview pane on the bottom cannot be resized and always takes up 50% of the window.  This behavior is probably fine for the initial showing of the window, but I'd like to be able to resize it (e.g., insert a grid size grip between the top and bottom panels).

![image](https://cloud.githubusercontent.com/assets/926281/20903235/67a8943c-baef-11e6-9394-7a7f8d28641c.png)
</Description>
        <CreatedDate>05/12/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16526</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>SLaks</FixedByID>
    <Title>Make Local Functions follow brace newline option for methods</Title>
    <Description>
**Customer scenario**

Make local functions follow customer newline options


User types a local function with their preferred newline formatting, such as:
```C#
void M() {
    throw null;
}
```
Even if they disable the VS option to insert newlines for braces in functions, auto-formatting will turn it into:
```C#
void M()
{
    throw null;
}
```

**Bugs this fixes:** 
Fixes #14119

**Workarounds, if any**
Have an inconsistent codebase, or don't use the auto-formatter on files with local functions.

**Risk** 
Low. Additional case in formatting rules, specific to local functions.

**Performance impact**
Low; simple new codepath with one allocations in non-hot path.

**Is this a regression from a previous update?** 
No

**Root cause analysis:** 
New feature

**How was the bug found?** 
Ad-hoc testing</Description>
    <CreatedDate>15/01/2017</CreatedDate>
    <ClosedDate>07/02/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16526</PullRequestID>
        <IssueID>14119</IssueID>
        <Title>Local functions do not respect newline formatting options</Title>
        <Description>**Steps to Reproduce**:
1. Go to Options -&gt; Text Editor -&gt; C# -&gt; Code Style -&gt; Formatting -&gt; New Lines
2.  Uncheck all "New line options for braces"

![image](https://cloud.githubusercontent.com/assets/9797472/18894505/22b663b6-84c8-11e6-8f44-034369577c0e.png)
3. Write a local function
4. Format the document (default shortcut is Ctrl +K, D )

**Expected Behavior**:

``

See also: https://developercommunity.visualstudio.com/content/problem/25383/local-methods-brace-formatting.html</Description>
        <CreatedDate>27/09/2016</CreatedDate>
        <ClosedDate>14/02/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16525</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>alrz</FixedByID>
    <Title>Handle Color Color constant pattern</Title>
    <Description>**Customer scenario**

Pattern-matching using a constant pattern that is subject to the C# language Color-Color rule doesn't work correctly, reported an error instead of binding.

**Bugs this fixes:** 

Fixes #16517

**Workarounds, if any**

Avoid Color-Color scenarios for constant patterns.

**Risk**

Low; this simply changes the binding of the left-hand-side to use a helper for the Color-Color situation.

**Performance impact**

Low; A trivial amount of new code using an existing helper addresses the problem.

**Is this a regression from a previous update?**

No; this is a bug in a new feature.

**Root cause analysis:**

Insufficient test coverage. Lack of dedicated testing team. Failure to follow through on our engineering test plan to pair a developer to "break" each feature under development.

**How was the bug found?**

Customer reported. The fix is provided by the reporter.

@dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>15/01/2017</CreatedDate>
    <ClosedDate>18/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16525</PullRequestID>
        <IssueID>16517</IssueID>
        <Title>Bind behavior of simple name under 'is' constant pattern</Title>
        <Description>I'm not sure this is by design or not, but simple name bind in constant pattern under `is` expression differs from ordinary member access bind or bind of constant pattern under `case` label:
``

I think the difference arises because syntax tree shape: simple syntax name node in `o is ClassVsProp.Constant` is not wrapped into constant pattern syntax node, since it's impossible to disambiguate it with ordinary type usage of `is` expressions.

cc @gafter</Description>
        <CreatedDate>15/01/2017</CreatedDate>
        <ClosedDate>18/01/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16498</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Disallow attributes in local function definitions</Title>
    <Description>**Scenario**

Mentioning an attribute on a type parameter which doesn't exist, e.g.

```csharp
class C
{
    public void M()
    {
        void Local&lt; [A] T &gt;() {}
    }
}
```
causes the compiler to crash. This also revealed a design hole: attributes
are currently allowed on type parameters and parameters, but not on
the local function itself or its return type.

After the fix attributes will not be permitted on type parameters or parameters of
local functions. This matches the existing behavior for the return type
and symbol itself, neither of which allow attributes to be applied to
them. Also, the compiler no longer crashes in these scenarios and correctly binds the attributes, even if they are invalid.

**Bugs this fixes:** 

Fixes #14640

**Workarounds, if any**

None.

**Risk**

We are disabling specific behavior and the error messages are tested, so this change should be focused narrowly to the problem and not affect anything outside of attributes on parameters/type parameters.

**Performance impact**

None -- the work was being done, but the diagnostics were being discarded.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

New feature.

**How was the bug found?**

Customer reported.</Description>
    <CreatedDate>13/01/2017</CreatedDate>
    <ClosedDate>24/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16498</PullRequestID>
        <IssueID>14640</IssueID>
        <Title>Roslyn doesn't report errors for unknown attributes in local functions' type parameters lists</Title>
        <Description>Roslyn doesn't report any errors for this code sample (it should report unresolved attribute)

``
</Description>
        <CreatedDate>20/10/2016</CreatedDate>
        <ClosedDate>24/01/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16496</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>Revert "Vsix cleanup"</Title>
    <Description>Reverts dotnet/roslyn#16453</Description>
    <CreatedDate>13/01/2017</CreatedDate>
    <ClosedDate>13/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16496</PullRequestID>
        <IssueID>16453</IssueID>
        <Title>Vsix cleanup</Title>
        <Description>**Customer scenario**

Microsoft.DiaSymReader fails to ngen leading to perf regression.

**Bugs this fixes:** 

Fixes VSO bug 305710. 

**Workarounds, if any**

None.

**Risk**

Small.

**Performance impact**

Fixes perf regression.

**Is this a regression from a previous update?**

Yes.

**Root cause analysis:**

Roslyn installs dlls to `` by VS. The former copy shouldn't be present. It throws off ngen.

**How was the bug found?**

RPS testing</Description>
        <CreatedDate>12/01/2017</CreatedDate>
        <ClosedDate>12/01/2017</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16472</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Report Obsolete diagnostics on Using Static Statements</Title>
    <Description>Fixes #10639</Description>
    <CreatedDate>12/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16472</PullRequestID>
        <IssueID>10639</IssueID>
        <Title>Using static ignores Obsolete attribute</Title>
        <Description>**Version Used**: 1.2.0.60317

**Steps to Reproduce**:
1. Compile following program

``

**Expected Behavior**:

Compilation error

**Actual Behavior**:

No error
</Description>
        <CreatedDate>16/04/2016</CreatedDate>
        <ClosedDate>20/01/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16471</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Add regression test for #16399</Title>
    <Description>Closes #16399</Description>
    <CreatedDate>12/01/2017</CreatedDate>
    <ClosedDate>13/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16471</PullRequestID>
        <IssueID>16399</IssueID>
        <Title>BadImageFormatException on invocation of following code</Title>
        <Description>**Version Used**:  15.0.26020.0
**Steps to Reproduce**:

1. Create a new console application.
2. Substitute the default code in the only .cs file for
``

3. Run the program

I've reduced the code to this minimal example. Removal of any other code resulted in expected behavior.

**Expected Behavior**:

The program to terminate. 

**Actual Behavior**:

A `System.BadImageFormatException` is thrown at line `return GetLeaves(root);` Unfortunately, the exception does not provide much more details.</Description>
        <CreatedDate>10/01/2017</CreatedDate>
        <ClosedDate>13/01/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16467</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Expression variables declared in a local function parameter default are given a scope</Title>
    <Description>**Customer scenario**

If you declare an expression variable (e.g. out variable) inside the default value
expression of a parameter to a local function, **the IDE crashes**.

**Bugs this fixes:** 

Fixes #16167

**Workarounds, if any**

Don't make that mistake.

**Risk**

Small. Corrects a small oversight in the implementation of the interaction of new language features.

**Performance impact**

Trivial.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Missing test for interaction between multiple new language features. Lack of dedicated testing team. Lack of coordinated testing role for new features and interactions between new features.

**How was the bug found?**

Customer reported. It occurred accidentally when the customer pasted XML inside a method body instead of inside the doc comment.

@jcouv @cston previously reviewed this fix in #16315; this moves it to the rc3 branch.
</Description>
    <CreatedDate>12/01/2017</CreatedDate>
    <ClosedDate>13/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16467</PullRequestID>
        <IssueID>16167</IssueID>
        <Title>VS crashes if xml is pasted in C# editor</Title>
        <Description>**Version Used**: 

**Steps to Reproduce**:

1. create new C# console app
2. paste text below as a body of `Main`
``
</Description>
        <CreatedDate>31/12/2016</CreatedDate>
        <ClosedDate>13/01/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16467</PullRequestID>
        <IssueID>16315</IssueID>
        <Title>Expression variables declared in a local function parameter default are given a scope</Title>
        <Description>**Customer scenario**

If you declare an expression variable (e.g. out variable) inside the default value
expression of a parameter to a local function, the IDE crashes.

**Bugs this fixes:** 

Fixes #16167

**Workarounds, if any**

Don't make that mistake.

**Risk**

Small. Corrects a small oversight in the implementation of the interaction of new language features.

**Performance impact**

Trivial.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

Missing test for interaction between multiple new language features. Lack of dedicated testing team. Lack of coordinated testing role for new features and interactions between new features.

**How was the bug found?**

Customer reported.

@AlekseyTs @agocke @dotnet/roslyn-compiler May I please have a couple of reviews for this very small bug fix?
</Description>
        <CreatedDate>07/01/2017</CreatedDate>
        <ClosedDate>12/01/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16443</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Improve method type argument inference around nullable tuples.</Title>
    <Description>**Customer scenario**
Given a method
```
    Shared Sub Test1(Of T, U)(x As (T, U)?, y As (T, U))
        Console.WriteLine(GetType(U))
    End Sub
```

Type inference infers U as ```MyStruct``` for the fallowing invocation, which causes an exception at runtime.
```
Test1((a:=1, b:=new MyStruct()), (a:=1, b:=new Object()))

Structure MyStruct
End Structure
```
The expectation is that compiler infers U as ```Object```, this is what C# compiler does. 
I think this could be a common scenario. Also, changing type inference behavior later could be a breaking change as there are scenarios which do not lead to a crash at runtime and results of overload resolution could be affected as well.

**Bugs this fixes:** 
Fixes #14152.

**Workarounds, if any**
Provide type arguments explicitly.

**Risk**
Low. The change is specific to tuple types.

**Performance impact**
Low. No new allocations or added complexity.

**Is this a regression from a previous update?**
No, tuples is a new feature. 

**Root cause analysis:**
Have tests.

**How was the bug found?**
Testing

@dotnet/roslyn-compiler, @VSadov, @jcouv Please review.  </Description>
    <CreatedDate>11/01/2017</CreatedDate>
    <ClosedDate>12/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16443</PullRequestID>
        <IssueID>14152</IssueID>
        <Title>VB tuples: inference of method type parameters is wrong</Title>
        <Description>The overload resolution for the first invocation of `Test1` below picks `T` as `Integer` and `U` as `(Integer, Integer)`. This results in a crash at runtime.

``

FYI for @VSadov 
</Description>
        <CreatedDate>28/09/2016</CreatedDate>
        <ClosedDate>12/01/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Language-VB</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16430</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Don't crash the NamingStyle code fixer on error symbols</Title>
    <Description>Fixes #15788

Escrow Template (TODO)
================

**Customer scenario**

What does the customer do to get into this situation, and why do we think this
is common enough to address in Escrow.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

**Bugs this fixes:** 

(either VSO or GitHub links)

**Workarounds, if any**

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

**Risk**

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

**Performance impact**

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

**Is this a regression from a previous update?**

**Root cause analysis:**

How did we miss it?  What tests are we adding to guard against it in the future?

**How was the bug found?**

(E.g. customer reported it vs. ad hoc testing)</Description>
    <CreatedDate>11/01/2017</CreatedDate>
    <ClosedDate>11/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16430</PullRequestID>
        <IssueID>15788</IssueID>
        <Title>NamingStyleCodeFixProvider crashes on const readonly</Title>
        <Description>Obviously not a normal scenario, but for the moment that I had `const readonly`, the naming style code fix provider crashed. Possibly related rules (in precedence order):
(Private|Protected) Static Readonly (Property|Field) -&gt; PascalCase
(Internal|Private|Protected|Protected Internal) Static Field -&gt; s_ prefix.

Tested on d15rel/26008.00.

``</Description>
        <CreatedDate>08/12/2016</CreatedDate>
        <ClosedDate>20/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16409</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Do not run Naming Styles on overrides, etc.</Title>
    <Description>Fixes #15345

Do not run Naming Styles on overrides or known explicit/implicit interface implementations.

Escrow Template
================

**Customer scenario**: Customers who enable Naming Rules for members currently see the rules enforced on overrides and interface implementations, which can be noisy. This is particularly bad when the name is not fixable (when the name being overridden is in metadata), or when we eventually enable closed file analysis for this analyzer.

**Bugs this fixes:**: #15345

**Workarounds, if any**: None

**Risk**: Low. This is at the top of the stack and should just cause Naming Styles to be enforced less places.

**Performance impact**: For every Method/Property/Event without the "override" keyword and without being an explicit implementation of something, we will now do the work of examining each member of all base types and implemented interfaces to see if the given Method/Property/Event implements that member.

**Is this a regression from a previous update?**: No

**Root cause analysis:** This case was missed during the original feature work. Unit tests have been added to prevent regressions.

**How was the bug found?**: Dogfooding</Description>
    <CreatedDate>11/01/2017</CreatedDate>
    <ClosedDate>12/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16409</PullRequestID>
        <IssueID>15345</IssueID>
        <Title>Naming rules fire on overrides</Title>
        <Description>The naming rules are firing on overrides - instead, it should be firing on the original declaration, the override cannot do anything about the name.

Like we did in FxCop you should also watch out for:

1. C# Implicit interface implementations
2. C# explicit interface implementations
3. VB explicit interface implementation
4. Overrides</Description>
        <CreatedDate>18/11/2016</CreatedDate>
        <ClosedDate>12/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16409</PullRequestID>
        <IssueID>15345</IssueID>
        <Title>Naming rules fire on overrides</Title>
        <Description>The naming rules are firing on overrides - instead, it should be firing on the original declaration, the override cannot do anything about the name.

Like we did in FxCop you should also watch out for:

1. C# Implicit interface implementations
2. C# explicit interface implementations
3. VB explicit interface implementation
4. Overrides</Description>
        <CreatedDate>18/11/2016</CreatedDate>
        <ClosedDate>12/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16407</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tannergooding</FixedByID>
    <Title>Foreach deconstruction should mark iteration variables as assigned.</Title>
    <Description>Fixes:#16106

**Customer scenario**

When deconstruction is used in a context of foreach, the deconstructed variables are not marked as assigned. As a result, if a deconstruction variable is a struct (KeyValuePair, etc...). Dotting off the variable in the loop body would result in a false definite assignment error.

**Bugs this fixes:** 

#16106

No workarounds other than not using the given language construct when structs are involved.
The bug would block a sizeable fraction of user scenarios for the feature.

**Risk**

The change is specific to the deconstruction foreach. 
It basically just marks the iteration variables introduced by deconstruction all definitely assigned at the beginning of the loop body

**Performance impact**

Low.

**Is this a regression from a previous update?**

**Root cause analysis:**

How did we miss it?  What tests are we adding to guard against it in the future?

The bug is at intersection of "foreach" and "deconstruction" features. It also requires that deconstruction targets are structs. 
We seem to have missed this combination in testing.

**How was the bug found?**

Customer report.</Description>
    <CreatedDate>10/01/2017</CreatedDate>
    <ClosedDate>11/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16407</PullRequestID>
        <IssueID>16106</IssueID>
        <Title>False error CS0170: Use of possibly unassigned field 'Item1'</Title>
        <Description>``</Description>
        <CreatedDate>26/12/2016</CreatedDate>
        <ClosedDate>10/01/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16407</PullRequestID>
        <IssueID>16106</IssueID>
        <Title>False error CS0170: Use of possibly unassigned field 'Item1'</Title>
        <Description>``</Description>
        <CreatedDate>26/12/2016</CreatedDate>
        <ClosedDate>10/01/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16381</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Have Narrator announce that an Inline Rename session has started</Title>
    <Description>Fixes part of #9960

Escrow Template
===========

**Customer scenario**: When a sight-impaired user invokes the Inline Rename command, they have no way of knowing that they've entered Inline Rename mode.

**Bugs this fixes:** This fixes part of #9960

**Workarounds, if any**: None really. The user could just *believe* that inline rename has started and proceed, but that's not really acceptable.

**Risk**: Low. This is at the top of the stack and only impacts accessibility.

**Performance impact**: Essentially none. We now explicitly make an AutomationPeer instead of using the built-in one. I'm not sure if that's an extra allocation or not, but it's only once per Inline Rename session anyway.

**Is this a regression from a previous update?** No

**Root cause analysis:** This was simply not done as part of the original feature work

**How was the bug found?** The Inline Rename Dashboard was known to have accessibility problems internally basically since it was introduced.</Description>
    <CreatedDate>10/01/2017</CreatedDate>
    <ClosedDate>12/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16381</PullRequestID>
        <IssueID>9960</IssueID>
        <Title>Inline Rename unusable under Narrator</Title>
        <Description>1. No indication that Inline Rename has started
2. No indication that Inline Rename has been cancelled or completed
3. No way to focus the Dashboard &amp; read options
</Description>
        <CreatedDate>22/03/2016</CreatedDate>
        <ClosedDate>26/05/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-User Friendly</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16381</PullRequestID>
        <IssueID>9960</IssueID>
        <Title>Inline Rename unusable under Narrator</Title>
        <Description>1. No indication that Inline Rename has started
2. No indication that Inline Rename has been cancelled or completed
3. No way to focus the Dashboard &amp; read options
</Description>
        <CreatedDate>22/03/2016</CreatedDate>
        <ClosedDate>26/05/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-User Friendly</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16380</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Make the General Code Style &amp; Naming Style options pages accessible</Title>
    <Description>Fixes #13579
Fixes #13099

Fixes for tabbing and Narrator.

Escrow Template
===========

**Customer scenario**: Sight-impaired users could not use the General Code Style &amp; Naming Style option pages.

**Bugs this fixes:**  #13579, #13099

**Workarounds, if any**: None. I suppose the sight-impaired user could find a sighted person to explain what's going on, but that is unacceptable.

**Risk**: Very little. This change is at the very top of the stack, and it doesn't change any non-accessibility-related product functionality.

**Performance impact**: Essentially none. There will be at least one additional allocation every time the option pages are shown, but this is negligible, especially because it's on an infrequent user action. 

**Is this a regression from a previous update?**: No

**Root cause analysis:** This work was simply not done as part of the original feature work for either option page.

**How was the bug found?** Directed testing (thanks @rchande)</Description>
    <CreatedDate>10/01/2017</CreatedDate>
    <ClosedDate>11/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16380</PullRequestID>
        <IssueID>13579</IssueID>
        <Title>CodeStyle Tools Options window : improve keyboard navigation</Title>
        <Description>1. Have to tab twice to select severity/preference
2. should show drop down on some key (space ?)
</Description>
        <CreatedDate>02/09/2016</CreatedDate>
        <ClosedDate>12/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-User Friendly</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16380</PullRequestID>
        <IssueID>13099</IssueID>
        <Title>CodeStyle -&gt; General and Naming Styles do not support Narrator</Title>
        <Description>Windows Narrator reads the name of the view model type if you highlight one of these combo boxes.

![image](https://cloud.githubusercontent.com/assets/3751401/17602243/a4ef8d94-5fc0-11e6-9470-3bb0560c0009.png)
</Description>
        <CreatedDate>11/08/2016</CreatedDate>
        <ClosedDate>12/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-User Friendly</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16380</PullRequestID>
        <IssueID>13579</IssueID>
        <Title>CodeStyle Tools Options window : improve keyboard navigation</Title>
        <Description>1. Have to tab twice to select severity/preference
2. should show drop down on some key (space ?)
</Description>
        <CreatedDate>02/09/2016</CreatedDate>
        <ClosedDate>12/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-User Friendly</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16380</PullRequestID>
        <IssueID>13099</IssueID>
        <Title>CodeStyle -&gt; General and Naming Styles do not support Narrator</Title>
        <Description>Windows Narrator reads the name of the view model type if you highlight one of these combo boxes.

![image](https://cloud.githubusercontent.com/assets/3751401/17602243/a4ef8d94-5fc0-11e6-9470-3bb0560c0009.png)
</Description>
        <CreatedDate>11/08/2016</CreatedDate>
        <ClosedDate>12/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-User Friendly</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16373</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jmarolf</FixedByID>
    <Title>Change option version</Title>
    <Description>

**Customer scenario**

Customer changes setting on a VS 2017 Machine and then their settings on their VS 2015 machine stop syncing and they receive an error message 
Customer changes setting on a VS 2015 Machine and then their settings on their VS 2017 machine stop syncing and they receive an error message 

**Bugs this fixes:** 

https://github.com/dotnet/roslyn/issues/13556
https://github.com/dotnet/roslyn/issues/15076
[#273302](https://devdiv.visualstudio.com/DevDiv/_workitems?id=273302)

**Workarounds, if any**

Do not roam any settings between VS 2015 or VS 2017.  If you roam settings on VS 2015 do not roam them on VS 2017.

**Risk**
Low, we are changing a key name.

**Performance impact**

None, we are changing a key name.

**Is this a regression from a previous update?**
Yes, you could previously roam settings between versions

**Root cause analysis:**

in Dev14 these options were persisted as booleans. They are now persisted as xml in Dev15.  The fix is to not have the persistence keys overlap, ensuring Dev14 will not try to deserialize Dev15 options and vice versa

**How was the bug found?**

Customer reported and found via ad-hoc testing

@Pilchie @jasonmalinowski @dotnet/roslyn-ide </Description>
    <CreatedDate>10/01/2017</CreatedDate>
    <ClosedDate>10/01/2017</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>16357</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Have VisualStudioDocumentNavigationService perform bounds checks</Title>
    <Description>Fixes #7660
Fixes internal bugs 112211, 136895, 224318, 235409

We have a number of bugs (listed above) that show features trying to
navigate to positions that are not within the bounds of the documents in
which they are navigating. I have not been able to figure out the common
root cause of this problem, but they all flow through the
VisualStudioDocumentNavigationService, so adding bounds checks there
should alleviate the symptoms (reported as crashes, hangs, and error
dialogs).

Ask Mode
============

**Customer scenario**: The customer tries to navigate using the Navigation Bar or initiate a rename in a Razor file, and they are sometimes met with a crash, a hang, or an error dialog. **The total hit count from the Watson is currently 6686**. It is unclear why this only happens occasionally, and we have not been able to reproduce the failure locally.

**Bugs this fixes:** 

#7660
https://devdiv.visualstudio.com/DevDiv/_workitems?id=112211
https://devdiv.visualstudio.com/DevDiv/_workitems?id=136895
https://devdiv.visualstudio.com/DevDiv/_workitems?id=224318
https://devdiv.visualstudio.com/DevDiv/_workitems?id=235409

**Workarounds, if any**: None. The product crashes, hangs, or shows an error dialog.

**Risk**: Fairly low. We now return false instead of true for CanNavigateTo* for ContainedDocuments if their navigation target is outside the bounds of the document, which will cause rename to give a "You cannot rename this element" dialog instead of an "ArgumentOutOfRange" dialog. For the actual TryNavigateTo* methods, we are just adjusting the requested bounds to be within the bounds of the Document's length. In the worst case that I can imagine, we will navigate to the end of the document instead of some non-existent (and crashing) location that was requested of us.

**Performance impact**: Low perf impact, it's just a few math operations and one allocation, and it's only done on infrequent user-initiated actions.

**Is this a regression from a previous update?** No

**Root cause analysis:** We do not understand the root cause at this time. However, this change should address the symptoms being reported by customers (and Watson).

**How was the bug found?** Watson and customer reports</Description>
    <CreatedDate>09/01/2017</CreatedDate>
    <ClosedDate>10/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16357</PullRequestID>
        <IssueID>7660</IssueID>
        <Title>VS2015.1: ArgumentOutOfRangeException while inline renaming in razor</Title>
        <Description>With `Index.cshtml` looking like

``

While trying to create a minimal reproduction (see `Index.cshtml` above), VS bugged me all the time with an messagebox, telling me `You cannot rename this element` (translated from german).
After restarting Visual Studio it was able to rename it without problems.

Unfortunately i couldn't reproduce it and also the renaming in the originally affected solution worked after restarting Visual Studio, so i'm opening this issue in the hope that someone will figure it out eventually.

EDIT: but i just run into it again so it seems to happen after some time.
</Description>
        <CreatedDate>22/12/2015</CreatedDate>
        <ClosedDate>11/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16357</PullRequestID>
        <IssueID>7660</IssueID>
        <Title>VS2015.1: ArgumentOutOfRangeException while inline renaming in razor</Title>
        <Description>With `Index.cshtml` looking like

``

While trying to create a minimal reproduction (see `Index.cshtml` above), VS bugged me all the time with an messagebox, telling me `You cannot rename this element` (translated from german).
After restarting Visual Studio it was able to rename it without problems.

Unfortunately i couldn't reproduce it and also the renaming in the originally affected solution worked after restarting Visual Studio, so i'm opening this issue in the hope that someone will figure it out eventually.

EDIT: but i just run into it again so it seems to happen after some time.
</Description>
        <CreatedDate>22/12/2015</CreatedDate>
        <ClosedDate>11/01/2017</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>16354</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Improve code fix experience around constructor invocations.</Title>
    <Description>**Customer scenario**
Customer makes an error in an argument of a constructor invocation, "Generate from usage" code fix is not offered for a situation when none of the existing constructors take supplied number of arguments. 

**Bugs this fixes:** 
Fixes #12182.

**Workarounds, if any**
No

**Risk**
Low. The fix refines the heuristic used to suppress "cascading" diagnostics reported by compiler. 

**Performance impact**
Low. The fix might cause additional errors to be reported, however the number of errors should be very small. Usually, one error per erroneous invocation.

**Is this a regression from a previous update?**
No

**Root cause analysis:**
Test added.

**How was the bug found?**
Ad hoc testing.

@dotnet/roslyn-compiler Please review.</Description>
    <CreatedDate>09/01/2017</CreatedDate>
    <ClosedDate>12/01/2017</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>16354</PullRequestID>
        <IssueID>12182</IssueID>
        <Title>Generate constructor code fix is not offered when Out Variable Declarations feature is not available</Title>
        <Description>See unit-test in https://github.com/dotnet/roslyn/pull/12159, src/EditorFeatures/CSharpTest/Diagnostics/GenerateConstructor/GenerateConstructorTests.cs:
- TestOutVariableDeclaration_ImplicitlyTyped
- TestOutVariableDeclaration_ImplicitlyTyped_NamedArgument
- TestOutVariableDeclaration_ExplicitlyTyped
- TestOutVariableDeclaration_ExplicitlyTyped_NamedArgument

They fail when parse options used make Out Variable Declarations feature unavailable.

The code fix machinery relies on semantic diagnostic to offer the fix, but it looks like the presence of parser errors about feature unavailability suppresses the diagnostics that triggers the fix. 
</Description>
        <CreatedDate>23/06/2016</CreatedDate>
        <ClosedDate>12/01/2017</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Out Variable Declaration</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15262</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Add explanatory text to Naming Styles</Title>
    <Description>Fixes #15217

Also, change the column header from "Style" to "Required Style"

![image](https://cloud.githubusercontent.com/assets/235241/20329000/a6d273e4-ab4a-11e6-99ce-e2631c6f9c66.png)

## Ask Mode Info

**Customer scenario**: Using Naming Styles without any sort of explanation is confusing (bordering on impossible), as discovered by usability studies. It's impossible to tell that exactly one rule will be applied, that it will be the topmost matching one, and that the chosen style is what is *expected* of matching symbols, not what should cause the error/warning/etc..
**Bugs this fixes**: #15217 
**Workarounds**: None
**Risk**: None
**Performance impact**: None
**Is this a regression from a previous update?**: No
**Root cause analysis**: We never included instructions.
**How was the bug found?**: Usability studies (thanks @kuhlenh)

</Description>
    <CreatedDate>15/11/2016</CreatedDate>
    <ClosedDate>16/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15262</PullRequestID>
        <IssueID>15217</IssueID>
        <Title>Naming Styles usability feedback (required) [PR Available]</Title>
        <Description>1. Explanatory text
2. Change "Style" header to "Required Style" or something similar. People were thinking that the chosen style should cause the warning/error/etc., when the enforcement works the other way.</Description>
        <CreatedDate>14/11/2016</CreatedDate>
        <ClosedDate>22/11/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15262</PullRequestID>
        <IssueID>15217</IssueID>
        <Title>Naming Styles usability feedback (required) [PR Available]</Title>
        <Description>1. Explanatory text
2. Change "Style" header to "Required Style" or something similar. People were thinking that the chosen style should cause the warning/error/etc., when the enforcement works the other way.</Description>
        <CreatedDate>14/11/2016</CreatedDate>
        <ClosedDate>22/11/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15261</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>VisualBasic function breakpoint binding</Title>
    <Description>Implement function breakpoint binding for Visual Basic. The managed component is needed to allow the debugger to use the portable CoreCLR in all scenarios, including remote debugging.

The VB implementation is mostly common code shared with the existing C# component. The main difference is parsing and binding method signatures. The matching of signatures to metadata and the interaction with the debugger is shared.

Fixes #14890.</Description>
    <CreatedDate>15/11/2016</CreatedDate>
    <ClosedDate>15/12/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15261</PullRequestID>
        <IssueID>14890</IssueID>
        <Title>Implement VB function breakpoint binding</Title>
        <Description>See #14447 for C# implementation.</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>15/12/2016</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Interactive-Debugging</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15257</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Localize code style option previews</Title>
    <Description>Fixes part 3 of #9674

## Ask Mode Info

**Customer scenario**: The previews for Code Styles were not localized, making it hard for non-English users to understand which choice resulted in which code.
**Bugs this fixes**: Part 3 of #9674
**Workarounds**: None
**Risk**: Very low
**Performance impact**: None.
**Is this a regression from a previous update?**: No, this has been broken since the UI was introduced
**Root cause analysis**: It was skipped as part of the original feature work.
**How was the bug found?**: Ad hoc testing (see screenshot from #9674)</Description>
    <CreatedDate>15/11/2016</CreatedDate>
    <ClosedDate>07/12/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15257</PullRequestID>
        <IssueID>9674</IssueID>
        <Title>[PR Available] Missing localization in new Code Style UX</Title>
        <Description>**Version Used**: Current code from 2.0 Milestone

![image](https://cloud.githubusercontent.com/assets/235241/13687249/075307ce-e6cf-11e5-86ab-05b8e60b74a2.png)

Not positive about 2, maybe those terms don't normally get loc'd? Need to check...
</Description>
        <CreatedDate>10/03/2016</CreatedDate>
        <ClosedDate>08/12/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Localization</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15257</PullRequestID>
        <IssueID>9674</IssueID>
        <Title>[PR Available] Missing localization in new Code Style UX</Title>
        <Description>**Version Used**: Current code from 2.0 Milestone

![image](https://cloud.githubusercontent.com/assets/235241/13687249/075307ce-e6cf-11e5-86ab-05b8e60b74a2.png)

Not positive about 2, maybe those terms don't normally get loc'd? Need to check...
</Description>
        <CreatedDate>10/03/2016</CreatedDate>
        <ClosedDate>08/12/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Localization</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15257</PullRequestID>
        <IssueID>9674</IssueID>
        <Title>[PR Available] Missing localization in new Code Style UX</Title>
        <Description>**Version Used**: Current code from 2.0 Milestone

![image](https://cloud.githubusercontent.com/assets/235241/13687249/075307ce-e6cf-11e5-86ab-05b8e60b74a2.png)

Not positive about 2, maybe those terms don't normally get loc'd? Need to check...
</Description>
        <CreatedDate>10/03/2016</CreatedDate>
        <ClosedDate>08/12/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Localization</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15249</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>MakeRValue should be applied to tuple literals recursively</Title>
    <Description>Fixes:#15198</Description>
    <CreatedDate>15/11/2016</CreatedDate>
    <ClosedDate>15/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15249</PullRequestID>
        <IssueID>15198</IssueID>
        <Title>VBC crashes when compiling code with ValueTuples in it:</Title>
        <Description>See: https://github.com/dotnet/roslyn/pull/15196

Specifically commit: https://github.com/dotnet/roslyn/pull/15196/commits/4807ff7efe16d1113636ce918ce69e3164eaa9e0

Crashes with:
error MSB6006: "vbc.exe" exited with code 1. [D:\j\workspace\windows_debug---09a07fba\src\Workspaces\VisualBasic\Portable\BasicWorkspace.vbproj]

This appears to be the bootstrapped compiler crashing.</Description>
        <CreatedDate>12/11/2016</CreatedDate>
        <ClosedDate>15/11/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15235</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Address outstanding issues around custom modifiers in VB.</Title>
    <Description>This change fixes the following issues in VB compiler: #8948 and #14453.
Closes #8948. Closes #14453.

@dotnet/roslyn-compiler, @VSadov, @cston  Please review.</Description>
    <CreatedDate>14/11/2016</CreatedDate>
    <ClosedDate>16/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15235</PullRequestID>
        <IssueID>8948</IssueID>
        <Title>Investigate and implement correct propagation of modopts in byref members</Title>
        <Description>C# does not define modopts, but we could be overriding/implementing an existing byref returning method with modopts. (  long&amp; Foo()  in managed c++ ? )

We need to ensure that the modifiers in the signature are correctly propagated to the overriding/implementing method.
</Description>
        <CreatedDate>19/02/2016</CreatedDate>
        <ClosedDate>16/11/2016</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Ref Locals and Returns</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15235</PullRequestID>
        <IssueID>14453</IssueID>
        <Title>ReturnType CustomModifiers are simply copied from overridden method</Title>
        <Description>This is not correct when overridden method is generic. The modifiers might refer to its type parameters, they should be substituted with corresponding type parameters of the overriding method.

Should check similar scenario with interface implementation.
</Description>
        <CreatedDate>12/10/2016</CreatedDate>
        <ClosedDate>16/11/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>Language-VB</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15235</PullRequestID>
        <IssueID>8948</IssueID>
        <Title>Investigate and implement correct propagation of modopts in byref members</Title>
        <Description>C# does not define modopts, but we could be overriding/implementing an existing byref returning method with modopts. (  long&amp; Foo()  in managed c++ ? )

We need to ensure that the modifiers in the signature are correctly propagated to the overriding/implementing method.
</Description>
        <CreatedDate>19/02/2016</CreatedDate>
        <ClosedDate>16/11/2016</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Ref Locals and Returns</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15235</PullRequestID>
        <IssueID>14453</IssueID>
        <Title>ReturnType CustomModifiers are simply copied from overridden method</Title>
        <Description>This is not correct when overridden method is generic. The modifiers might refer to its type parameters, they should be substituted with corresponding type parameters of the overriding method.

Should check similar scenario with interface implementation.
</Description>
        <CreatedDate>12/10/2016</CreatedDate>
        <ClosedDate>16/11/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>Language-VB</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15222</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Place Roslyn under a separate directory in MSBuild.</Title>
    <Description>@dotnet/roslyn-compiler @dotnet/roslyn-infrastructure @rainersigwald 
Fixes #14660</Description>
    <CreatedDate>14/11/2016</CreatedDate>
    <ClosedDate>06/12/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15222</PullRequestID>
        <IssueID>14660</IssueID>
        <Title>Roslyn should move into a subdirectory of MSBuild in install</Title>
        <Description>Our current location, next to the MSBuild binaries, is causing problems due to loading installed Roslyn binaries when we mean to load binaries from NuGet or the bootstrap build.

We should instead move the Roslyn compilers to a separate directory so we will not interfere with other Roslyn loads.
</Description>
        <CreatedDate>21/10/2016</CreatedDate>
        <ClosedDate>06/12/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15211</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Implement async and void keyword completion for local functions</Title>
    <Description>This PR implements completion for the simple cases of async and void in
a local function context. What it misses cases where parsing incorrectly
considers bare modifiers to be local variable declaration statements
rather than local function declaration statements. This is tracked by
bug #14525.

Fixes #8616
Fixes #8617</Description>
    <CreatedDate>14/11/2016</CreatedDate>
    <ClosedDate>18/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15211</PullRequestID>
        <IssueID>14525</IssueID>
        <Title>Speculative-T completion provider does not trigger for generic parameter in async return type</Title>
        <Description>This test demonstrates the problem:

``

The underlying problem here is that local functions don't have the parsing logic to parse `async Task&lt;$$&gt;` as a local function with an `async` modifier and a `Task&lt;&gt;` return type -- instead this is an `async` return type and `Task` identifier.

The logic for members is not as simple for local functions and will require a bit of refactoring.
</Description>
        <CreatedDate>14/10/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15211</PullRequestID>
        <IssueID>8616</IssueID>
        <Title>Local functions: Async modifier not recommended while declaring local function.</Title>
        <Description>``

Expected: Async keyword offered in completion list.
Actual: Async keyword not offered.
</Description>
        <CreatedDate>12/02/2016</CreatedDate>
        <ClosedDate>18/11/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15211</PullRequestID>
        <IssueID>8617</IssueID>
        <Title>Local functions: void keyword not recommended while declaring local function.</Title>
        <Description>``

Expected: void keyword offered in completion list.
Actual: void keyword not offered.
</Description>
        <CreatedDate>12/02/2016</CreatedDate>
        <ClosedDate>18/11/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Local Functions</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15193</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Temporarily skip IBCMerge optimizations for Microsoft.CodeAnalysis.Wo…</Title>
    <Description>…rkspaces

ngen is crashing on the current IBCMerge data for this assembly and corrupting the generated native image, which is subsequently causing an intermittent CLR crash (VSO #290723).
We are temporarily disabling IBCMerge for this assembly, until the CLR bug is fixed.</Description>
    <CreatedDate>12/11/2016</CreatedDate>
    <ClosedDate>12/11/2016</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>15188</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Revert "Hookup non-Roslyn view to the document tracking service on a foregrou…"</Title>
    <Description>Reverts dotnet/roslyn#15106</Description>
    <CreatedDate>12/11/2016</CreatedDate>
    <ClosedDate>12/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15188</PullRequestID>
        <IssueID>15106</IssueID>
        <Title>Hookup non-Roslyn view to the document tracking service on a foregrou…</Title>
        <Description>…nd scheduled task.

RPS traces show that we are forcing the text view creation too eagerly on the UI thread during file open. This should very likely fix VSO #[223317](https://devdiv.visualstudio.com/DevDiv/_workitems?_a=edit&amp;id=223317&amp;triage=true).</Description>
        <CreatedDate>09/11/2016</CreatedDate>
        <ClosedDate>10/11/2016</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15185</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Ensure that we don't execute Initialize and compilation start actions…</Title>
    <Description>… for analyzers with no enabled rules

Fixes #15184</Description>
    <CreatedDate>12/11/2016</CreatedDate>
    <ClosedDate>14/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15185</PullRequestID>
        <IssueID>15184</IssueID>
        <Title>Don't execute Initialize and compilation start actions for analyzers with no enabled rules</Title>
        <Description>We end up running Initialize and compilation start actions for suppressed analyzers when computing analyzer telemetry.

This is causing https://github.com/dotnet/roslyn-project-system/issues/578.</Description>
        <CreatedDate>12/11/2016</CreatedDate>
        <ClosedDate>15/11/2016</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15183</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>always save changes to unopened documents</Title>
    <Description>This fixes a bug found when investigating #12531 

This change makes it so InvisibleEditor's created via the vs workspace will always be set to save the document if the document is not open in the editor. 

The problem this is fixing is one where an edit is made to just a single closed document.  In this case we were failing to call SaveDocuments on the running document table.  We generally only called SaveDocuments if there is a global undo transaction in effect, and there is only a global undo transaction if there is more than one document involved. Except closed documents cannot be saved manually by the user as they don't correspond to an open text buffer in the editor.

@dotnet/roslyn-ide please review</Description>
    <CreatedDate>11/11/2016</CreatedDate>
    <ClosedDate>18/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15183</PullRequestID>
        <IssueID>12531</IssueID>
        <Title>Unable to apply changes to g.i.cs files generated by XAML compiler</Title>
        <Description>**Version Used**: 2.00.0.0 -- Dev15 preview

**Steps to Reproduce**:
1. Open a WPF or UWP project in Visual Studio.
2. Build
3. Obtain the Document object for one of the .g.i.cs files from the VisualStudioWorkspace.
4. Make a change to the document root.  I was adding a field to the (only) class in the file.
5. Call visualStudioWorkspace.TryApplyChanges(newDocument.Project.Solution).

**Expected Behavior**:
g.i.cs file on disk is updated with whatever change you made in step 4.

**Actual Behavior**:
g.i.cs file is not updated.  However, if you make the same change to some other file in the project (ex. MainPage.xaml.cs), the file _will_ be updated.
</Description>
        <CreatedDate>14/07/2016</CreatedDate>
        <ClosedDate>06/12/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15156</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Address outstanding issues around custom modifiers in C#.</Title>
    <Description>This change fixes the following issues in C# compiler: #8948 and #14453.

@dotnet/roslyn-compiler, @VSadov Please review.</Description>
    <CreatedDate>11/11/2016</CreatedDate>
    <ClosedDate>12/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15156</PullRequestID>
        <IssueID>8948</IssueID>
        <Title>Investigate and implement correct propagation of modopts in byref members</Title>
        <Description>C# does not define modopts, but we could be overriding/implementing an existing byref returning method with modopts. (  long&amp; Foo()  in managed c++ ? )

We need to ensure that the modifiers in the signature are correctly propagated to the overriding/implementing method.
</Description>
        <CreatedDate>19/02/2016</CreatedDate>
        <ClosedDate>16/11/2016</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Ref Locals and Returns</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15156</PullRequestID>
        <IssueID>14453</IssueID>
        <Title>ReturnType CustomModifiers are simply copied from overridden method</Title>
        <Description>This is not correct when overridden method is generic. The modifiers might refer to its type parameters, they should be substituted with corresponding type parameters of the overriding method.

Should check similar scenario with interface implementation.
</Description>
        <CreatedDate>12/10/2016</CreatedDate>
        <ClosedDate>16/11/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>Language-VB</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15145</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>333fred</FixedByID>
    <Title>Moved SaveEventsService GetService calls to constructor import statements</Title>
    <Description>This fixes #15143. @dotnet/roslyn-ide for review. @Pilchie, I think this is something we should take for RC2, is dev15-rc2 open?</Description>
    <CreatedDate>10/11/2016</CreatedDate>
    <ClosedDate>11/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15145</PullRequestID>
        <IssueID>15143</IssueID>
        <Title>SaveEventsService is causing a deadlock during MEF construction</Title>
        <Description>SaveEventsService is making `GetService` calls during construction. This ends up causing a deadlock because COM calls are being made, which request the UI thread, and the UI thread is waiting for the SaveEventsService to be constructed. This appears to be relatively rare, but something about migrated xproj solutions causes it to happen more often. The fix is to import the correct types in the constructor for SaveEventsService, instead of importing a service provider and calling `GetService`.</Description>
        <CreatedDate>10/11/2016</CreatedDate>
        <ClosedDate>11/11/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Duplicate</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15144</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Have MsbuildWorkspace log all msbuild failures instead of throwing</Title>
    <Description>This is a fix for #14581 

This change captures all exceptions produced by msbuild API and routes them into workspace failed events.  

I've also added a Diagnostics property on the MsbuildWorkspace which can be used to see all failure diagnostics that have occurred. 

@dotnet/roslyn-ide  please review</Description>
    <CreatedDate>10/11/2016</CreatedDate>
    <ClosedDate>11/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15144</PullRequestID>
        <IssueID>14581</IssueID>
        <Title>MSBuildWorkspace.OpenSolutionAsync(solutionPath).Result Exception while opening SignalR solution</Title>
        <Description>**Version**: Latest Roslyn Version 1.3.2

**Steps to Reproduce**:
1. Run code : MSBuildWorkspace.OpenSolutionAsync(solutionPath).Result
2. Here **solutionPath** is the path to the "Microsoft.AspNet.SignalR.Mono.Mobile.sln" solution which in itself is part of the SignalR source code repository from Git.
3. Note: This is a mobile version of SignalR and the machine on which I am trying to run the above code has no prerequisites installed required for running a mobile/XAMRIN applications.

**Actual Behavior**:
When we execute about code the application throws following exception:
**{"The imported project \"C:\Program Files (x86)\MSBuild\Microsoft\WindowsPhone\v8.0\Microsoft.WindowsPhone.v8.0.Overrides.targets\" 
was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk. 
C:\\SignalR\samples\Microsoft.AspNet.SignalR.Client.WP8.Samples\Microsoft.AspNet.SignalR.Client.WP8.Samples.csproj"}**

**Expected Behavior**:
I understand that this error is because the requires prerequisites is not installed but still the Expected Begavior should be such that instead of throwing the exception, the API OpenSolutionAsync should have some overloaded option which can suppress this error and still continue with loading other solution projects which are not dependent on these prerequisites.

**Scenario I am working on**:
I am trying to work with "CSharpSyntaxWalker" and using its Visitor's to visit each type of Visitor to create a Dependency Graph in the application.

**Note**: 
This utility in a long run will be sitting on some centralized server machine and will be generating Dependency Graph for all the C# applications organization wide. 
So technically installing all the prerequisite for every other application on that centralized server wont be possible. 

Is there any existing solution to this problem ?
Looking forward to hear from the experts.
</Description>
        <CreatedDate>18/10/2016</CreatedDate>
        <ClosedDate>11/11/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Concept-API</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15124</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Ensure we don't free metadata from under skeleton assemblies</Title>
    <Description>When we create skeleton assembly references, we back them by temporary memory out of our ITemporaryStorage service. We used a ConditionalWeakTable to ensure that if the reference was held alive that the underlying memory wouldn't disappear. This was subtly incorrect. If you had a PE symbol from such a compilation, the compilation is not held alive, and the metadata reference could be freed but the metadata (which is held by the symbol) could still be held. This meant we'd free the memory too early and crash.

The fix is simple: root the memory by the metadata object, not the metadata reference.

Fixes #13243.

*Review*: @dotnet/roslyn-ide, @heejaechang, @jaredpar, @tmat</Description>
    <CreatedDate>09/11/2016</CreatedDate>
    <ClosedDate>10/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15124</PullRequestID>
        <IssueID>13243</IssueID>
        <Title>[Test Failure] AV in Roslyn.Services.Editor.UnitTests2.dll</Title>
        <Description>test failure
http://dotnet-ci.cloudapp.net/job/dotnet_roslyn/job/master/job/windows_debug_unit64_prtest/2694/

there seems an issue with metadata reader

 Unhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
15:26:22      at System.Reflection.Metadata.Ecma335.TypeDefTableReader.GetExtends(TypeDefinitionHandle handle)
15:26:22      at Microsoft.CodeAnalysis.PEModule.GetBaseTypeOfTypeOrThrow(TypeDefinitionHandle typeDef) in q:\roslyn\src\Compilers\Core\Portable\MetadataReader\PEModule.cs:line 860
15:26:22      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredBaseType() in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 429
15:26:22      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredBaseType(ConsList`1 basesBeingResolved) in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 406
15:26:22      at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.get_TypeKind() in q:\roslyn\src\Compilers\CSharp\Portable\Symbols\Metadata\PE\PENamedTypeSymbol.cs:line 1603
</Description>
        <CreatedDate>18/08/2016</CreatedDate>
        <ClosedDate>10/11/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Flaky</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15098</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Prevent duplicate use-site errors reported for tuple types explicitly referenced in source.</Title>
    <Description>Also add regression test for #14888. Closes #14888.

@dotnet/roslyn-compiler, @VSadov, @jcouv Please review.</Description>
    <CreatedDate>08/11/2016</CreatedDate>
    <ClosedDate>10/11/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15098</PullRequestID>
        <IssueID>14888</IssueID>
        <Title>Bug: Exception compiling iterator of tuples</Title>
        <Description>**Version Used**: http://tryroslyn.azurewebsites.net/ (master Oct 29 2016)

**Steps to Reproduce**:

``</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>10/11/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15098</PullRequestID>
        <IssueID>14888</IssueID>
        <Title>Bug: Exception compiling iterator of tuples</Title>
        <Description>**Version Used**: http://tryroslyn.azurewebsites.net/ (master Oct 29 2016)

**Steps to Reproduce**:

``</Description>
        <CreatedDate>02/11/2016</CreatedDate>
        <ClosedDate>10/11/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>15078</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>OmarTawfik</FixedByID>
    <Title>Report [Obsolete] on types</Title>
    <Description>Fixes #10639
Still WIP. Will tag team when everything is fixed.</Description>
    <CreatedDate>08/11/2016</CreatedDate>
    <ClosedDate>30/12/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>15078</PullRequestID>
        <IssueID>10639</IssueID>
        <Title>Using static ignores Obsolete attribute</Title>
        <Description>**Version Used**: 1.2.0.60317

**Steps to Reproduce**:
1. Compile following program

``

**Expected Behavior**:

Compilation error

**Actual Behavior**:

No error
</Description>
        <CreatedDate>16/04/2016</CreatedDate>
        <ClosedDate>20/01/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13675</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Handle names correctly in long tuples in EE</Title>
    <Description>Port #13651 to dev15-preview-5.

Fixes #13625.
</Description>
    <CreatedDate>08/09/2016</CreatedDate>
    <ClosedDate>08/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13675</PullRequestID>
        <IssueID>13651</IssueID>
        <Title>Handle names in long tuples in EE</Title>
        <Description>Handle names in long tuples in EE

Fixes #13625
</Description>
        <CreatedDate>07/09/2016</CreatedDate>
        <ClosedDate>07/09/2016</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13675</PullRequestID>
        <IssueID>13625</IssueID>
        <Title>Incorrect names in the EE in long tuple</Title>
        <Description>Names in the last nested tuple of `C.F` are incorrect in the EE.

``
</Description>
        <CreatedDate>06/09/2016</CreatedDate>
        <ClosedDate>07/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Interactive-Debugging</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13672</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Add additional verification for process execution</Title>
    <Description>Test failures seem to indicate that a file might be held by a still-running
process, but it doesn't appear that that is possible in the code. Verify
that the process is closed using an assert to double-check this assumption.

Hopefully helps with #13626
</Description>
    <CreatedDate>07/09/2016</CreatedDate>
    <ClosedDate>15/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13672</PullRequestID>
        <IssueID>13626</IssueID>
        <Title>IlasmUtilities can cause unhandled exception when cleaning up temps</Title>
        <Description>See https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build/index?buildId=316944&amp;_a=summary&amp;tab=ms.vss-test-web.test-result-details

``
</Description>
        <CreatedDate>06/09/2016</CreatedDate>
        <ClosedDate>17/11/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Area-Infrastructure</Label>
          <Label>Flaky</Label>
          <Label>Test</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13651</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Handle names in long tuples in EE</Title>
    <Description>Handle names in long tuples in EE

Fixes #13625
</Description>
    <CreatedDate>07/09/2016</CreatedDate>
    <ClosedDate>07/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13651</PullRequestID>
        <IssueID>13625</IssueID>
        <Title>Incorrect names in the EE in long tuple</Title>
        <Description>Names in the last nested tuple of `C.F` are incorrect in the EE.

``
</Description>
        <CreatedDate>06/09/2016</CreatedDate>
        <ClosedDate>07/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Interactive-Debugging</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13648</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Revert an incorrect optimization in binary operator overload resolution</Title>
    <Description>from PR #9543; issue #13380 shows why the optimization is not correct.

@dotnet/roslyn-compiler Please review
/cc @VSadov @tmat @agocke @AlekseyTs
</Description>
    <CreatedDate>07/09/2016</CreatedDate>
    <ClosedDate>12/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13648</PullRequestID>
        <IssueID>9543</IssueID>
        <Title>more allocation reduction.</Title>
        <Description>- avoid instantiating nullable type when doing operator overloading on enums
- avoid instantiating generics when checking for impossibly rare case of duplicated interface implementations
- skipping materializing of sequence point array
</Description>
        <CreatedDate>08/03/2016</CreatedDate>
        <ClosedDate>08/03/2016</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13648</PullRequestID>
        <IssueID>13380</IssueID>
        <Title>Error combining nullable and implicit operators</Title>
        <Description>Consider the following code

``

This compiled fine in VS 2013 and VS 2015 Update 2 (not fully verified).  Need to make sure we fix this regression for the next version. 
</Description>
        <CreatedDate>25/08/2016</CreatedDate>
        <ClosedDate>12/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13636</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>In a syntactic position where an lvalue is expected, we reserve `var (...)`</Title>
    <Description>for possible future extension (e.g. a deconstruction), no matter what `...` is.
This specifically applies to
- [x] The left-hand-side of an assignment. The only syntactically valid form is as a deconstruction declaration statement; other forms are some kind of error. `var(1) = 2;`
- [x] Similarly for compound assignments, including ++ and --.
- [x] In any expression, following `out` or `ref`. These should not bind (successfully) as an invocation.
  - [x] In an argument position, like `M(out var (1))`
  - [x] In a "ref expression", for example `ref int x = ref var(1);` or `return ref var(1);`.

This rule is documented in https://github.com/dotnet/roslyn/issues/13148#issuecomment-244496770 and will appear in some forthcoming LDM notes. It will be documented in the C# 7 language specification.

Fixes #13148

@AlekseyTs Please review (it is out var related)
@VSadov Please review (it is tuple related)
/cc @dotnet/roslyn-compiler 
</Description>
    <CreatedDate>06/09/2016</CreatedDate>
    <ClosedDate>08/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13636</PullRequestID>
        <IssueID>13148</IssueID>
        <Title>Parsing for out argument declarations needs to take deconstruction and ref returns into account</Title>
        <Description>Because we plan to support deconstruction for out arguments in the future

``

we need to ensure that we do not parse this as an invocation of a ref-returning method named `var` with two arguments. The syntax trees today can express the deconstruction, so we should parse it that way and emit a semantic error.
</Description>
        <CreatedDate>13/08/2016</CreatedDate>
        <ClosedDate>08/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Out Variable Declaration</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13635</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Only declare Hidden Descriptors for SimplifyTypeName/QualifyMemberAccess</Title>
    <Description>Fixes #12714

Both SimplifyTypeName and QualifyMemberAccess were declaring one
DiagnosticDescriptor per DiagnosticSeverity level. After this change,
they only initially report DiagnosticSeverity.Hidden in the 
SupportedDiagnostics, which prevents them from running on closed files.

There are longer-term plans to allow these to run on closed files but
under closer control of the user.
</Description>
    <CreatedDate>06/09/2016</CreatedDate>
    <ClosedDate>07/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13635</PullRequestID>
        <IssueID>12714</IssueID>
        <Title>IDE analyzers shouldn't execute on closed files by default</Title>
        <Description>When full solution analysis is enabled, IDE analyzers, such as simplify type name (are there more?), are currently executing on closed files as it reports descriptors with non-hidden severity. IDE diagnostic engine currently decides whether or not to run analyzers on closed files based on whether or not the analyzer reports any non-hidden diagnostics  - and this has severe performance impact as these analyzers are very expensive to run on closed files.
https://github.com/dotnet/roslyn/issues/12713 tracks adding an explicit tools option to configure closed file execution for analyzers in IDE. Until that has been implemented (which seems likely to be post preview 4), we should change IDE analyzers to only report hidden diagnostic descriptors so they don't end up running for closed files.
</Description>
        <CreatedDate>25/07/2016</CreatedDate>
        <ClosedDate>07/09/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Tenet-Performance</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13609</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Pilchie</FixedByID>
    <Title>Re-add property that internal CodeLens implementation depends on</Title>
    <Description>Fixes #13607.
</Description>
    <CreatedDate>05/09/2016</CreatedDate>
    <ClosedDate>06/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13609</PullRequestID>
        <IssueID>13607</IssueID>
        <Title>MissingMethodException: VisualStudioProjectTracker.get_Projects() not found</Title>
        <Description>**Version Used**: master (4d6eb4f)

**Steps to Reproduce**:
1. Clone the Roslyn repo.
2. `Restore.cmd`, `msbuild /v:m /m Roslyn.sln`.
3. Open Roslyn.sln in VS 2015 U3, set Roslyn as the startup project, &lt;kbd&gt;F5&lt;/kbd&gt;.
4. Create new .Net Framework C# Console application project.

**Expected Behavior**: No fatal exception.

**Actual Behavior**:

VS breaks in `FatalError.Report` with the following exception:

``
</Description>
        <CreatedDate>05/09/2016</CreatedDate>
        <ClosedDate>06/09/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13571</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jcouv</FixedByID>
    <Title>New error code for missing well-known ValueTuple type</Title>
    <Description>This is a re-work of PR https://github.com/dotnet/roslyn/pull/13542.
Aleksey pointed out that the new error should only appear when looking up the ValueTuple well-known types, not for other missing references to ValueTuple. This simplifies the logic, both for C# and VB.

The purpose is to report a distinct error code so that Cyrus's code fixer can trigger easily and recommend to add the ValueTuple nuget package.

@dotnet/roslyn-compiler for review.
FYI for @CyrusNajmabadi 
Relates to #13375
</Description>
    <CreatedDate>02/09/2016</CreatedDate>
    <ClosedDate>03/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13571</PullRequestID>
        <IssueID>13375</IssueID>
        <Title>Improve the first time experience using tuples in dev15</Title>
        <Description>As things stand, a new user of dev15 trying tuples will get a compiler error for missing reference to ValueTuple (in most cases).
The solution is to reference the nuget package.

Update: We’re going to go with option 2 below (offering a code fix to add the nuget reference).
- [ ] We’ll update the CodeFix to recognize the specific errors from this case.
- [ ] We are already planning on splitting the Add NuGet package into MS specific packages and 3rd parties and to enable the MS specific ones by default.
- [x] We'll update the compiler to produce a specific error code for missing ValueTuple. https://github.com/dotnet/roslyn/issues/13504
- [ ] The meta-package for dotnet core targeting netstandard 2.0 should reference the ValueTuple package (even though it is not part of that standard) https://github.com/dotnet/standard/issues/22

---

The only case where you would not have such error is when you’re targeting .Net framework 4.7 (or whatever high enough version that includes ValueTuple in mscorlib) and you have that framework installed.

Some options for addressing that:
1)  Add a reference to the nuget package in C# project templates
2)  Offer a code fix/suggestion to help the user add a nuget package
3)  Mention the nuget package in the compiler error message

Kevin solved implemented option (1) for F#. The F# templates were updated to include a nuget reference to the ValueTuple package by default.
The idea is that once an mscorlib is available with ValueTuple, the templates will have to be updated again to be conditional on the target ("if you target 4.7, then you don't need to reference the nuget package").

From discussion with Dave Kean and Cyrus, this template approach (1) may not be easy or desirable for C#.
Even having a code action to guide the user in adding this nuget reference may not be a good solution, as nuget may not be installed.

---

Some information from Kevin:
PR: files
https://github.com/Microsoft/visualfsharp/pull/1473/files

Importand bits:

Packages.config
https://github.com/KevinRansom/visualfsharp/blob/f582728ee85cc0d81c425109527aa30a5ac4410c/vsintegration/ProjectTemplates/NetCoreProject/Template/packages.config

Project file changes:  

https://github.com/Microsoft/visualfsharp/pull/1473/files#diff-359003143cb8ecbece4bf9d48dfac68bR43
</Description>
        <CreatedDate>25/08/2016</CreatedDate>
        <ClosedDate>15/11/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13565</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Fix a crash in declaration pattern binding when the expression is bad.</Title>
    <Description>Fixes #13383 

@dotnet/roslyn-compiler Can I please have a couple of reviews of this small bug fix?
</Description>
    <CreatedDate>02/09/2016</CreatedDate>
    <ClosedDate>06/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13565</PullRequestID>
        <IssueID>13383</IssueID>
        <Title>Crash in binder when typing in IDE.</Title>
        <Description>I was typing a property and i think i had something like ``public bool Something =&gt; _outliningSpan.is". This was right above another property like "public book SomethingElse".

Callstack is below.  Maybe something got parsed wonky because of hte "is" and it ended up throwing off the binder.

 and i crashed right here:

Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.HasImplicitEnumerationConversion(BoundExpression source, TypeSymbol destination)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionFromExpression(BoundExpression sourceExpression, TypeSymbol source, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitConversionFromExpression(BoundExpression sourceExpression, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.GenerateConversionForAssignment(TypeSymbol targetType, BoundExpression expression, DiagnosticBag diagnostics, Boolean isDefaultParameter, RefKind refKind)
   at Microsoft.CodeAnalysis.CSharp.Binder.ConvertPatternExpression(TypeSymbol inputType, CSharpSyntaxNode node, BoundExpression expression, ConstantValue&amp; constantValue, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindConstantPattern(CSharpSyntaxNode node, BoundExpression operand, TypeSymbol operandType, ExpressionSyntax patternExpression, Boolean hasErrors, DiagnosticBag diagnostics, Boolean&amp; wasExpression, Boolean wasSwitchCase)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPattern(PatternSyntax node, BoundExpression operand, TypeSymbol operandType, Boolean hasErrors, DiagnosticBag diagnostics, Boolean wasSwitchCase)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIsPatternExpression(IsPatternExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionBodyAsBlock(ArrowExpressionClauseSyntax expressionBody, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp; bindableNode, BoundNode&amp; lowestBoundNode, BoundNode&amp; highestBoundNode, BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(SemanticModel semanticModel, ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyTypeSyntax(NameSyntax name, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyNode(SyntaxNode syntax, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.Worker.ClassifyNode(SyntaxNode syntax)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.Worker.ProcessNodes()
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.Worker.Classify(Workspace workspace, SemanticModel semanticModel, TextSpan textSpan, List`1 list, Func`2 getNodeClassifiers, Func`2 getTokenClassifiers, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.&lt;AddSemanticClassificationsAsync&gt;d__5.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__5.MoveNext()
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.HasImplicitEnumerationConversion(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionFromExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitConversionFromExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.Binder.GenerateConversionForAssignment(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Microsoft.CodeAnalysis.RefKind)
   at Microsoft.CodeAnalysis.CSharp.Binder.ConvertPatternExpression(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.ConstantValue ByRef, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindConstantPattern(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Boolean, Microsoft.CodeAnalysis.DiagnosticBag, Boolean ByRef, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPattern(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Boolean, Microsoft.CodeAnalysis.DiagnosticBag, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionBodyAsBlock(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode ByRef, Microsoft.CodeAnalysis.CSharp.BoundNode ByRef, Microsoft.CodeAnalysis.CSharp.BoundNode ByRef, Microsoft.CodeAnalysis.CSharp.BoundNode ByRef)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, SymbolInfoOptions, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, SymbolInfoOptions, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyTypeSyntax(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax, Microsoft.CodeAnalysis.SemanticModel, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyNode(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SemanticModel, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService+Worker.ClassifyNode(Microsoft.CodeAnalysis.SyntaxNode)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService+Worker.ProcessNodes()
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService+Worker.Classify(Microsoft.CodeAnalysis.Workspace, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.Text.TextSpan, System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt;, System.Func`2&lt;Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt;, System.Func`2&lt;Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__5.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Classification.AbstractClassificationService+&lt;AddSemanticClassificationsAsync&gt;d__5, Microsoft.CodeAnalysis.Workspaces, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](AddSemanticClassificationsAsync&gt;d__5 ByRef)
   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Func`2&lt;Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt;, System.Func`2&lt;Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier&gt;&gt;, System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.AbstractEditorClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Classification.ClassifiedSpan&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ClassifySpansAsync&gt;d__2.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ClassifySpansAsync&gt;d__2, Microsoft.CodeAnalysis.EditorFeatures, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](ClassifySpansAsync&gt;d__2 ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ClassifySpansAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IEditorClassificationService, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ProduceTagsAsync&gt;d__0.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+&lt;ProduceTagsAsync&gt;d__0, Microsoft.CodeAnalysis.EditorFeatures, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ProduceTagsAsync&gt;d__0 ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IEditorClassificationService, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)
   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationViewTaggerProvider.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1&lt;Microsoft.VisualStudio.Text.Tagging.IClassificationTag&gt;)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&lt;RecomputeTagsAsync&gt;d__83[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&lt;RecomputeTagsAsync&gt;d__83[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](RecomputeTagsAsync&gt;d__83&lt;System.__Canon&gt; ByRef)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].RecomputeTagsAsync(System.Object, System.Nullable`1&lt;Microsoft.VisualStudio.Text.SnapshotPoint&gt;, System.Nullable`1&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt;, System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan&gt;, System.Collections.Immutable.ImmutableDictionary`2&lt;Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree`1&lt;System.__Canon&gt;&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+&lt;&gt;c__DisplayClass74_0[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;RecomputeTagsForeground&gt;b__0(System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Shared.Threading.AsynchronousSerialWorkQueue+&lt;&gt;c__DisplayClass11_0.&lt;EnqueueBackgroundTask&gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
</Description>
        <CreatedDate>25/08/2016</CreatedDate>
        <ClosedDate>06/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13564</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Properly handle expression variable declared within VariableDeclaratorSyntax.ArgumentList in field declarations.</Title>
    <Description>Related to #12597 and # 13417.
Also fixes #13528.

@dotnet/roslyn-compiler, @gafter Please review.
</Description>
    <CreatedDate>02/09/2016</CreatedDate>
    <ClosedDate>07/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13564</PullRequestID>
        <IssueID>12597</IssueID>
        <Title>Scope changes for patterns and out var</Title>
        <Description>The LDM is reconsidering some scope issues for pattern variables and out variables. The most likely change is that such variables declared in a declaration statement or expression statement that appear in a block are in scope throughout that block.

However, the proposed rule changes need to be settled before they are implemented.

[Addendum 2016-08-11]
The LDM has settled on a revision of the scoping rules. The principal changes from the current status are that (pattern and out) variables that are declared in the following places are in the enclosing scope (e.g. the scope that they would be in if the statement were a declaration statement that declares that variable).
- in the initializers of a local variable declaration statement
- in the expression of an expression statement
- in the condition of an `if` or `while` statement
- the expression of a `switch` statement
- in the expression of a `return`, `throw`, or `yield return` statement.

A controlled statement of a compound statement never leaks variables to an enclosing scope. Logically, you can think of a controlled statement as being surrounded by a block for the purposes of scoping.

Because of these changes, there is no longer a special treatment for the `else` clause of an `if` statement.

Here are the relevant design notes https://github.com/dotnet/roslyn/issues/12939.

[Addendum 2016-08-24]
The LDM has revised the scoping rules slightly today. Here are the changes:
- out variables and pattern variables are forbidden to be declared inside field initializers and auto-property initializers (i.e. it is an error to declare an out variable or a pattern variable). The reason for this is that we are considering having a scope that spans the declaration and includes all the initializers (separately, a scope that spans the static initializers). We expect we may do that around the time we introduce records, but unless we forbid them today it would be an incompatible change later.
- out variables and pattern variables declared inside a constructor-initializer are in scope throughout the body of the constructor. For C# 7, we may forbid them in that location unless time permits us to implement the desired scoping rules.
</Description>
        <CreatedDate>18/07/2016</CreatedDate>
        <ClosedDate>07/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Out Variable Declaration</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13564</PullRequestID>
        <IssueID>13528</IssueID>
        <Title>Adjust wording for ERR_ExpressionVariableInConstructorOrFieldInitializer error</Title>
        <Description>``

From @cston:
Consider separating cases with comma for consistency with other errors. And remove auto-implemented if not necessary. Perhaps: ... not allowed within constructors, field initializers, or property initializers.

From @gafter:
Also, I believe the first "or" should be "and" (they are both forbidden), so I suggest

&gt; Out variable and pattern variable declarations are not allowed within constructor initializers, field initializers, or property initializers.

This is long-winded enough that you could consider specializing it.  
</Description>
        <CreatedDate>01/09/2016</CreatedDate>
        <ClosedDate>07/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Out Variable Declaration</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13547</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Properly handle expression variable declared within VariableDeclaratorSyntax.ArgumentList in ‘fixed’, ‘for’ and ‘using’ statements.</Title>
    <Description>Related to #12597.
Fixes #13459, #13460.

I will open an issue for cloning new tests to target pattern variables.
@dotnet/roslyn-compiler, @gafter Please review. 
</Description>
    <CreatedDate>01/09/2016</CreatedDate>
    <ClosedDate>02/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13547</PullRequestID>
        <IssueID>12597</IssueID>
        <Title>Scope changes for patterns and out var</Title>
        <Description>The LDM is reconsidering some scope issues for pattern variables and out variables. The most likely change is that such variables declared in a declaration statement or expression statement that appear in a block are in scope throughout that block.

However, the proposed rule changes need to be settled before they are implemented.

[Addendum 2016-08-11]
The LDM has settled on a revision of the scoping rules. The principal changes from the current status are that (pattern and out) variables that are declared in the following places are in the enclosing scope (e.g. the scope that they would be in if the statement were a declaration statement that declares that variable).
- in the initializers of a local variable declaration statement
- in the expression of an expression statement
- in the condition of an `if` or `while` statement
- the expression of a `switch` statement
- in the expression of a `return`, `throw`, or `yield return` statement.

A controlled statement of a compound statement never leaks variables to an enclosing scope. Logically, you can think of a controlled statement as being surrounded by a block for the purposes of scoping.

Because of these changes, there is no longer a special treatment for the `else` clause of an `if` statement.

Here are the relevant design notes https://github.com/dotnet/roslyn/issues/12939.

[Addendum 2016-08-24]
The LDM has revised the scoping rules slightly today. Here are the changes:
- out variables and pattern variables are forbidden to be declared inside field initializers and auto-property initializers (i.e. it is an error to declare an out variable or a pattern variable). The reason for this is that we are considering having a scope that spans the declaration and includes all the initializers (separately, a scope that spans the static initializers). We expect we may do that around the time we introduce records, but unless we forbid them today it would be an incompatible change later.
- out variables and pattern variables declared inside a constructor-initializer are in scope throughout the body of the constructor. For C# 7, we may forbid them in that location unless time permits us to implement the desired scoping rules.
</Description>
        <CreatedDate>18/07/2016</CreatedDate>
        <ClosedDate>07/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Out Variable Declaration</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13547</PullRequestID>
        <IssueID>13459</IssueID>
        <Title>Tests needed for out variables in declarators in for loop.</Title>
        <Description>In https://github.com/dotnet/roslyn/pull/13274#discussion_r76849977 @AlekseyTs asked about test coverage for the error case of out variables and pattern variables (illegally) declared in declarators in a for loop. We should ensure we have such tests to ensure the compiler behavior is sane.

See also https://github.com/dotnet/roslyn/pull/13274#discussion_r76852787
</Description>
        <CreatedDate>30/08/2016</CreatedDate>
        <ClosedDate>02/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Out Variable Declaration</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13547</PullRequestID>
        <IssueID>13460</IssueID>
        <Title>Issue binding (erroneous) variables in a declarator argument list.</Title>
        <Description>In https://github.com/dotnet/roslyn/pull/13274#discussion_r76852091 @AlekseyTs noted that the error situation of variables being declared inside a declarator argument list can have more precise binding behavior, so that some (erroneous) variables declared in that context will bind to a valid type, while others will be assigned an error type. This change would likely simplify the code.
</Description>
        <CreatedDate>30/08/2016</CreatedDate>
        <ClosedDate>19/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Out Variable Declaration</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13543</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Add C# feature "Expression body syntax for property accessors"</Title>
    <Description>Fixes #7881

@dotnet/roslyn-compiler Please review
</Description>
    <CreatedDate>01/09/2016</CreatedDate>
    <ClosedDate>07/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13543</PullRequestID>
        <IssueID>7881</IssueID>
        <Title>Proposal: Expression bodied get and set methods</Title>
        <Description>C# 6.0 allowed get-only properties and all methods to have an expression body. This is a great feature that can help keep the focus on business logic rather than code. However, when you need to fall back to writing a `get` and `set` method manually, it can be annoying that you're no longer allowed to use expression bodies.

I propose supporting expression bodies for `get` and `set` methods. It makes code less verbose and also would provide more symmetry in the language.

``
</Description>
        <CreatedDate>11/01/2016</CreatedDate>
        <ClosedDate>06/10/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Area-Language Design</Label>
          <Label>Community</Label>
          <Label>New Language Feature - Expression-Bodied Ctor/Dtor/Accessor</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13535</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Enable declaration patterns in the EE</Title>
    <Description>Fixes #13159 
@AlekseyTs @agocke Please review
/cc @dotnet/roslyn-compiler 
</Description>
    <CreatedDate>01/09/2016</CreatedDate>
    <ClosedDate>07/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13535</PullRequestID>
        <IssueID>13159</IssueID>
        <Title>PlaceholderLocalRewriter is unable to handle Declaration Pattern</Title>
        <Description>I will submit a unit-test shortly.
Because the rewriter doesn't apply appropriate transformation to the BoundDeclarationPattern node, later phases fail with the following exception:

``
</Description>
        <CreatedDate>14/08/2016</CreatedDate>
        <ClosedDate>07/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Area-Interactive</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13519</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Repair missing code in lowering the decision tree.</Title>
    <Description>Fixes #13395 

@AlekseyTs @agocke Please review
/cc @dotnet/roslyn-compiler 
</Description>
    <CreatedDate>01/09/2016</CreatedDate>
    <ClosedDate>01/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13519</PullRequestID>
        <IssueID>13395</IssueID>
        <Title>Incorrect code generation: Switch based pattern match inside foreach with break statement compiles to infinite loop</Title>
        <Description>**Version Used**: VS "15" Preview 4

**Steps to Reproduce**:

``
</Description>
        <CreatedDate>26/08/2016</CreatedDate>
        <ClosedDate>01/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13510</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Disallow declaration of variables within constructor/field initializers.</Title>
    <Description>Related to #12597.

@dotnet/roslyn-compiler, @gafter Please review. 
</Description>
    <CreatedDate>31/08/2016</CreatedDate>
    <ClosedDate>01/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13510</PullRequestID>
        <IssueID>12597</IssueID>
        <Title>Scope changes for patterns and out var</Title>
        <Description>The LDM is reconsidering some scope issues for pattern variables and out variables. The most likely change is that such variables declared in a declaration statement or expression statement that appear in a block are in scope throughout that block.

However, the proposed rule changes need to be settled before they are implemented.

[Addendum 2016-08-11]
The LDM has settled on a revision of the scoping rules. The principal changes from the current status are that (pattern and out) variables that are declared in the following places are in the enclosing scope (e.g. the scope that they would be in if the statement were a declaration statement that declares that variable).
- in the initializers of a local variable declaration statement
- in the expression of an expression statement
- in the condition of an `if` or `while` statement
- the expression of a `switch` statement
- in the expression of a `return`, `throw`, or `yield return` statement.

A controlled statement of a compound statement never leaks variables to an enclosing scope. Logically, you can think of a controlled statement as being surrounded by a block for the purposes of scoping.

Because of these changes, there is no longer a special treatment for the `else` clause of an `if` statement.

Here are the relevant design notes https://github.com/dotnet/roslyn/issues/12939.

[Addendum 2016-08-24]
The LDM has revised the scoping rules slightly today. Here are the changes:
- out variables and pattern variables are forbidden to be declared inside field initializers and auto-property initializers (i.e. it is an error to declare an out variable or a pattern variable). The reason for this is that we are considering having a scope that spans the declaration and includes all the initializers (separately, a scope that spans the static initializers). We expect we may do that around the time we introduce records, but unless we forbid them today it would be an incompatible change later.
- out variables and pattern variables declared inside a constructor-initializer are in scope throughout the body of the constructor. For C# 7, we may forbid them in that location unless time permits us to implement the desired scoping rules.
</Description>
        <CreatedDate>18/07/2016</CreatedDate>
        <ClosedDate>07/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Out Variable Declaration</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13501</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Fix for dropping of sideeffects in multiplication by 0</Title>
    <Description>Also added   Nullable&lt;T&gt;.GetValueOrDefault   to be a known nonsideeffecting call.
We make such assumption in the lowering of nullables and let them be optimized away when unnecessary, however, in some cases we were dropping GetValueOrDefault  for wrong reasons related to the bug and fixing the bug was creating test regressions.
Now we optimize away specifically GetValueOrDefault.

Fixes: #13486
</Description>
    <CreatedDate>31/08/2016</CreatedDate>
    <ClosedDate>01/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13501</PullRequestID>
        <IssueID>13486</IssueID>
        <Title>Invalid optimization of &lt;expr&gt; * 0   when &lt;expr&gt; has sideeffects</Title>
        <Description> Foo() \* 0   should not be optimized into 0

Re: http://stackoverflow.com/questions/39254676/roslyn-compiler-optimizing-away-function-call-multiplication-with-zero

Make sure VB is ok.
</Description>
        <CreatedDate>31/08/2016</CreatedDate>
        <ClosedDate>01/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Language-C#</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>13429</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Pilchie</FixedByID>
    <Title>Add initial glossary of IDE terms</Title>
    <Description>Fixes #13426.
</Description>
    <CreatedDate>28/08/2016</CreatedDate>
    <ClosedDate>02/09/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>13429</PullRequestID>
        <IssueID>13426</IssueID>
        <Title>IDE terminology</Title>
        <Description>I think it would be helpful if there was a page with the most common IDE terminology Roslyn is involved with or feeds to, as either I don't get it right or it is used inconsistently, perhaps as it evolved.

Examples of terminology I am thinking about:
- the light bulb and its entries (is it quick action? quick fix? refactorings? smart tag?) and previews
- the colored bars on the left margin of the code
- what is tooltip, quick info, intellisense vs. autocompletion, filters
- the three dropdowns on top of the editor
- squiggles that mark code
- suggestion / completion mode
- codelens and their anatomy
- collapsible blocks and the three dots
- the dimmed code (simplifications)

etc. That would be useful for reporting bugs as well as communicating new features.
</Description>
        <CreatedDate>28/08/2016</CreatedDate>
        <ClosedDate>02/09/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Documentation</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12842</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>aelij</FixedByID>
    <Title>Handle field declaration ambiguity in scripts</Title>
    <Description>Fixes #12781
</Description>
    <CreatedDate>31/07/2016</CreatedDate>
    <ClosedDate>06/10/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12842</PullRequestID>
        <IssueID>12781</IssueID>
        <Title>CompletionService doesn't always return results for variables in a script</Title>
        <Description>**Version Used**: 2.0 Beta 3
I believe this doesn't work in 1.3 either (using Interactive window and 2015 Update 3).

**Steps to Reproduce**:

``

Notes:
- This can also be seen in Visual Studio's C# Interactive window by typing `var s =""; s. var k = "";`, placing the cursor after the `.` and hitting Ctrl+Space.
- Removing `var k = "";` makes it work as expected.
- It also works when adding `;` after the `.`.
- And it works inside the body of a method.

**Expected Behavior**: A list of members (in the above case, for `String`).

**Actual Behavior**: `list` is `null`.
</Description>
        <CreatedDate>27/07/2016</CreatedDate>
        <ClosedDate>06/10/2016</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12488</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jcouv</FixedByID>
    <Title>Fix for tuple issues #12032 and #11302 </Title>
    <Description>Fixes #12032 (crash when looking up static members and VT alias is aliased by missing)
Resolves #11302 (no repro, no crash)
Resolves #12082 (no repro, conversion to tuple of dynamic elements works)
Opened #12468 (allow invoking a ref-return var method with workaround)
Adds some tests 

@VSadov For #12032, I investigated why the containingAssembly for the System namespace was null (and causing the crash). The reason is that when a namespace is defined multiple times, a merged namespace object wraps all of them together, and it has no containing assembly. 
I opted to treat `System.ValueTuple&lt;int, int&gt;` as itself an `ErrorType`, instead of a `NamedTypeSymbol` with underlying tuple type of `ErrorType`. I think this makes sense, and it did not cause any regressions.

@dotnet/roslyn-compiler for review.
</Description>
    <CreatedDate>13/07/2016</CreatedDate>
    <ClosedDate>14/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12488</PullRequestID>
        <IssueID>12032</IssueID>
        <Title>Missing System.ValueTuple can crash the IDE</Title>
        <Description>The following program (which lacks a reference to a library defining `ValueTuple`) crashes the IDE in the `master` branch.

``
</Description>
        <CreatedDate>15/06/2016</CreatedDate>
        <ClosedDate>15/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12488</PullRequestID>
        <IssueID>11302</IssueID>
        <Title>System.NullReferenceException in StackOptimizerPass1.VisitCallReceiver</Title>
        <Description>``

------ Test started: Assembly: Roslyn.Compilers.CSharp.Emit.UnitTests.dll ------

Unknown .NET Framework Version: v4.6
Test 'Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenTupleTests.Scenario2' failed: System.NullReferenceException : Object reference not set to an instance of an object.
    CodeGen\Optimizer.cs(1049,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(BoundExpression receiver)
    CodeGen\Optimizer.cs(1031,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(BoundCall node)
    F:\GitHub\AlekseyTs\roslyn\Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs(3951,0): at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor)
    BoundTree\BoundTreeVisitors.cs(147,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
    CodeGen\Optimizer.cs(464,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
    CodeGen\Optimizer.cs(520,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(BoundExpression node, ExprContext context)
    CodeGen\Optimizer.cs(507,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
    CodeGen\Optimizer.cs(817,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionStatement(BoundExpressionStatement node)
    F:\GitHub\AlekseyTs\roslyn\Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs(2203,0): at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor)
    BoundTree\BoundTreeVisitors.cs(147,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
    CodeGen\Optimizer.cs(573,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitStatement(BoundNode node)
    CodeGen\Optimizer.cs(451,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
    F:\GitHub\AlekseyTs\roslyn\Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs(7753,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePoint(BoundSequencePoint node)
    F:\GitHub\AlekseyTs\roslyn\Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs(1750,0): at Microsoft.CodeAnalysis.CSharp.BoundSequencePoint.Accept(BoundTreeVisitor visitor)
    BoundTree\BoundTreeVisitors.cs(147,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
    CodeGen\Optimizer.cs(573,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitStatement(BoundNode node)
    CodeGen\Optimizer.cs(451,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
    BoundTree\BoundTreeRewriter.cs(36,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
    BoundTree\BoundTreeRewriter.cs(25,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitList[T](ImmutableArray`1 list)
    F:\GitHub\AlekseyTs\roslyn\Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs(7769,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node)
    CodeGen\Optimizer.cs(597,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(BoundBlock node)
    F:\GitHub\AlekseyTs\roslyn\Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs(1848,0): at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)
    BoundTree\BoundTreeVisitors.cs(147,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
    CodeGen\Optimizer.cs(573,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitStatement(BoundNode node)
    CodeGen\Optimizer.cs(451,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
    BoundTree\BoundTreeRewriter.cs(36,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
    BoundTree\BoundTreeRewriter.cs(25,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitList[T](ImmutableArray`1 list)
    F:\GitHub\AlekseyTs\roslyn\Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs(8009,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node)
    F:\GitHub\AlekseyTs\roslyn\Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs(3510,0): at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor)
    BoundTree\BoundTreeVisitors.cs(147,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
    CodeGen\Optimizer.cs(573,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitStatement(BoundNode node)
    CodeGen\Optimizer.cs(451,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
    CodeGen\Optimizer.cs(433,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(BoundNode node, Dictionary`2 locals, Boolean debugFriendly)
    CodeGen\Optimizer.cs(60,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(BoundStatement src, Boolean debugFriendly, HashSet`1&amp; stackLocals)
    CodeGen\CodeGenerator.cs(122,0): at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(MethodSymbol method, BoundStatement boundBody, ILBuilder builder, PEModuleBuilder moduleBuilder, DiagnosticBag diagnostics, OptimizationLevel optimizations, Boolean emittingPdb)
    Compiler\MethodCompiler.cs(1299,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DiagnosticBag diagnostics, DebugDocumentProvider debugDocumentProvider, ImportChain importChainOpt, Boolean emittingPdb)
    Compiler\MethodCompiler.cs(1101,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
    Compiler\MethodCompiler.cs(432,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
    Compiler\MethodCompiler.cs(322,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass20_0.&lt;CompileNamedTypeAsTask&gt;b__0()
    InternalUtilities\UICultureUtilities.cs(136,0): at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
    at System.Threading.Tasks.Task.InnerInvoke()
    at System.Threading.Tasks.Task.Execute()
    --- End of stack trace from previous location where exception was thrown ---
    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
    at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
    Compiler\MethodCompiler.cs(237,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.WaitForWorkers()
    Compiler\MethodCompiler.cs(137,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean generateDebugInfo, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
    Compilation\CSharpCompilation.cs(2359,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CompileImpl(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean emittingPdb, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
    Compilation\Compilation.cs(1430,0): at Microsoft.CodeAnalysis.Compilation.Compile(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean emittingPdb, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
    Compilation\Compilation.cs(1794,0): at Microsoft.CodeAnalysis.Compilation.Emit(EmitStreamProvider peStreamProvider, EmitStreamProvider pdbStreamProvider, EmitStreamProvider xmlDocumentationStreamProvider, EmitStreamProvider win32ResourcesStreamProvider, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, CompilationTestData testData, Func`1 getHostDiagnostics, CancellationToken cancellationToken)
    Compilation\Compilation.cs(1623,0): at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, CompilationTestData testData, Func`1 getHostDiagnostics, CancellationToken cancellationToken)
    Utilities\Shared\Compilation\IRuntimeEnvironment.cs(209,0): at Roslyn.Test.Utilities.RuntimeUtilities.EmitCompilationCore(Compilation compilation, IEnumerable`1 manifestResources, DiagnosticBag diagnostics, CompilationTestData testData)
    Utilities\Shared\Compilation\IRuntimeEnvironment.cs(188,0): at Roslyn.Test.Utilities.RuntimeUtilities.EmitCompilation(Compilation compilation, IEnumerable`1 manifestResources, List`1 dependencies, DiagnosticBag diagnostics, CompilationTestData testData)
    HostedRuntimeEnvironment.cs(198,0): at Microsoft.CodeAnalysis.Test.Utilities.HostedRuntimeEnvironment.Emit(Compilation mainCompilation, IEnumerable`1 manifestResources, Boolean usePdbForDebugging)
    CommonTestBase.CompilationVerifier.cs(128,0): at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompilationVerifier.Emit(IRuntimeEnvironment testEnvironment, IEnumerable`1 manifestResources)
    CommonTestBase.CompilationVerifier.cs(94,0): at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompilationVerifier.Emit(String expectedOutput, IEnumerable`1 manifestResources, Boolean peVerify, SignatureDescription[] expectedSignatures)
    F:\GitHub\AlekseyTs\roslyn\src\Test\Utilities\Desktop\CommonTestBase.cs(204,0): at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.Emit(Compilation compilation, IEnumerable`1 dependencies, IEnumerable`1 manifestResources, SignatureDescription[] expectedSignatures, String expectedOutput, Action`1 assemblyValidator, Action`1 symbolValidator, Boolean verify)
    F:\GitHub\AlekseyTs\roslyn\src\Test\Utilities\Desktop\CommonTestBase.cs(129,0): at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompileAndVerify(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 assemblyValidator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Boolean verify)
    F:\GitHub\AlekseyTs\roslyn\src\Compilers\Test\Utilities\CSharp.Desktop\CSharpTestBase.cs(194,0): at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBase.CompileAndVerify(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 validator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Boolean verify)
    CodeGen\CodeGenTupleTest.cs(10689,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenTupleTests.Scenario2()

0 passed, 1 failed, 0 skipped, took 7.27 seconds (xUnit.net 2.1.0 build 3179).
</Description>
        <CreatedDate>13/05/2016</CreatedDate>
        <ClosedDate>19/08/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Not Reproducible</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12488</PullRequestID>
        <IssueID>12082</IssueID>
        <Title>Tuple should be able to contain dynamic types.</Title>
        <Description>The following does not compile, but it should.

``
</Description>
        <CreatedDate>17/06/2016</CreatedDate>
        <ClosedDate>15/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Not Reproducible</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12488</PullRequestID>
        <IssueID>12468</IssueID>
        <Title>Ref-returning var method should be invokable with workaround</Title>
        <Description>Although `var (x, y) = 42;` is always parsed as a deconstruction, the user could use `@var` or parenthesized expressions to disambiguate.
But in the following unittest, the parsing of those invocations still incorrectly finds deconstruction declarations...

``
</Description>
        <CreatedDate>12/07/2016</CreatedDate>
        <ClosedDate>15/12/2016</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Not Reproducible</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12488</PullRequestID>
        <IssueID>12032</IssueID>
        <Title>Missing System.ValueTuple can crash the IDE</Title>
        <Description>The following program (which lacks a reference to a library defining `ValueTuple`) crashes the IDE in the `master` branch.

``
</Description>
        <CreatedDate>15/06/2016</CreatedDate>
        <ClosedDate>15/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12479</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>CyrusNajmabadi</FixedByID>
    <Title>Revert "Make IOptionService a genuine workspace service."</Title>
    <Description>Reverts dotnet/roslyn#12407
</Description>
    <CreatedDate>13/07/2016</CreatedDate>
    <ClosedDate>13/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12479</PullRequestID>
        <IssueID>12407</IssueID>
        <Title>Make IOptionService a genuine workspace service.</Title>
        <CreatedDate>08/07/2016</CreatedDate>
        <ClosedDate>12/07/2016</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12478</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Add support for switching on float, double, and decimal.</Title>
    <Description>The code is a sequence of if-then-else tests using value.Equals(input).
Someday we might do better using divide-and-conquer.

Fixes #12431.

@cston @agocke @jaredpar @dotnet/roslyn-compiler May I please have a couple of reviews for this preview 4 change?
</Description>
    <CreatedDate>13/07/2016</CreatedDate>
    <ClosedDate>14/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12478</PullRequestID>
        <IssueID>12431</IssueID>
        <Title>Implement switch for float, double, and decimal</Title>
        <Description>The typeswitch (C# 7 pattern-matching) implementation does not currently support switching on values of type float, decimal, and double.
</Description>
        <CreatedDate>11/07/2016</CreatedDate>
        <ClosedDate>14/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12470</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Fix command line parsing of quoted values</Title>
    <Description>The native compiler allowed some command line arguments to have quotes around their values:

```
csc /pdb:full h.cs
csc /pdb:"full" h.cs
```

Roslyn broke this behavior post 1.0 during our general cleanup of command line parsing.  This is one case that was missed.

This change fixes the C# side of the problem.  Doing it separately to unblock customers.  Will follow up with VB later.

Commit which introduced the regression:

https://github.com/dotnet/roslyn/commit/258d4aa10ab7de73fb6eba7a2f9b8772597d0470#diff-97a7a5298fc5036af649f59ff021c791

Tracking issue #12427
</Description>
    <CreatedDate>12/07/2016</CreatedDate>
    <ClosedDate>15/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12470</PullRequestID>
        <IssueID>12427</IssueID>
        <Title>Command line not handling quotes around some arguments</Title>
        <Description>The compiler is not handling quotes around certain command line arguments.  This is a break from previous versions of Roslyn and the native compiler:

``
</Description>
        <CreatedDate>11/07/2016</CreatedDate>
        <ClosedDate>03/08/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12462</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Fix remaining fast up to date check issues</Title>
    <Description>With these workarounds, I'm able to do an incremental F6 in Visual Studio and it says everything is up to date. 
#12461 and #12458 have been filed tracking the two portable flavor issues I ran into. Internal bugs 239691 and 239697 have been filed on the two other native project system bugs.

_Review_: @TyOverby, @rchande, @jaredpar, @dotnet/roslyn-infrastructure, @tmat
</Description>
    <CreatedDate>12/07/2016</CreatedDate>
    <ClosedDate>13/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12462</PullRequestID>
        <IssueID>12461</IssueID>
        <Title>Targeting netstandard1.3 with multiple imports breaks portable project flavor</Title>
        <Description>**Version Used**: Visual Studio 2015 Update 3 Microupdate 3.1

**Steps to Reproduce**:
1. Open Roslyn.sln at 255596ba195819fa2668b9a2c709a4105e2ac762
2. Look at the error list.

**Expected Behavior**: No warnings are in the error list.

**Actual Behavior**: There are warnings about incompatible PCL projects. If you look at 9df214f1507154b3486fd5e9f0366d27535cad6d you can see that removing imports that are lists made some of them go away.
</Description>
        <CreatedDate>12/07/2016</CreatedDate>
        <ClosedDate>25/07/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Resolution-Duplicate</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12462</PullRequestID>
        <IssueID>12458</IssueID>
        <Title>Project targeting netcoreapp1.0 isn't recognized as netstandard targeting</Title>
        <Description>**Version Used**: Visual Studio 2015 Update 3 Microupdate 3.1

**Steps to Reproduce**:
1. Open Roslyn.sln from 423afea10482f2231a30f0e50aacfdb17c37fa80
2. Look at the error list

**Expected Behavior**: I don't see any warnings.

**Actual Behavior**: I get warnings like:

&gt; Unable to add a reference to project 'VisualBasicSyntaxGenerator'. The targets of Portable Library project 'VisualBasicSyntaxGenerator' are not the same or compatible with the targets of the current Portable Library project.
</Description>
        <CreatedDate>12/07/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12424</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>VisualBasicSyntaxFactService shared default instance.</Title>
    <Description>implements #12421
</Description>
    <CreatedDate>10/07/2016</CreatedDate>
    <ClosedDate>19/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12424</PullRequestID>
        <IssueID>12421</IssueID>
        <Title>SyntaxTokenExtensions.IsWord is inefficient</Title>
        <Description>The implementation of [`SyntaxTokenExtensions.IsWord`](https://github.com/dotnet/roslyn/blob/1ccc08dc3006342822f4bcd4f9cde8230c117943/src/Workspaces/CSharp/Portable/Extensions/SyntaxTokenExtensions.cs#L77) could do with some tuning around allocations:

``

Just typing up a simple method declaration in C# I got nearly 2500 breakpoint hits on this method, and VB has a [similar implementation](https://github.com/dotnet/roslyn/blob/1ccc08dc3006342822f4bcd4f9cde8230c117943/src/Workspaces/VisualBasic/Portable/Extensions/SyntaxTokenExtensions.vb#L242).
</Description>
        <CreatedDate>10/07/2016</CreatedDate>
        <ClosedDate>01/08/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12416</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Implement lowering of a pattern switch (i.e. the decision tree).</Title>
    <Description>This implements lowering and good code generation for typeswitch. However, if the switch can be
handled using the old strategy, we completely reuse the old binding and lowering. That enables
us to not lose edit-and-continue for existing switches.

The bound switch label now contains the value, as the labels cannot be relied on to contain the
constant values (e.g. synthesized labels do not, and we now synthesize switches for typeswitch).
Many places that work with bound switch statements had to be adjusted to consistently use the
constant in the bound switch label.

Fix parsing bug where `case A when B:` was parsed as a type pattern `A when` because `when` is
an identifier, followed by a syntax error (`B` seen but `:` expected). The fix is to never let a
pattern variable be named `when` at the top level of a switch.

Related to #12316 
@cston @agocke Please review
/cc @dotnet/roslyn-compiler @jaredpar 
</Description>
    <CreatedDate>09/07/2016</CreatedDate>
    <ClosedDate>11/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12416</PullRequestID>
        <IssueID>12316</IssueID>
        <Title>Cascaded "unreachable" diagnostic in switch</Title>
        <Description>The new switch handling code in the C# compiler produces an extra "unreachable" diagnostic for cases that are erroneous, where the old compiler did not. This only occurs (as far as we know) in error cases, so it isn't too serious, but it is distracting. It would be nice to suppress the cascaded diagnostic.

Here is a test case that illustrates the current behavior:

``
</Description>
        <CreatedDate>01/07/2016</CreatedDate>
        <ClosedDate>03/04/2018</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-Diagnostic Clarity</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12411</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jcouv</FixedByID>
    <Title>Handling remaining PROTOTYPE markers in features/tuples branch</Title>
    <Description>Filed the following issues:
- Correct the evaluation order of conversions in deconstructions #12400
- Optimize the parsing ahead for deconstruction-declarations to avoid allocations #12399
- Verify the behavior of dynamic in deconstructions #12398
- Parsing ahead for 'for' and 'foreach' ambiguities should recognize deconstructions #12402
- Support typeless tuple literals in deconstruction declarations #12410

I spent some time today trying to come up with a better solution for the last one, but after discussion with Vlad, I prefer to unblock the merge back to master and resolve the difficult language questions later. For now, I report errors if you try to use typeless tuple literals in a d-declaration (which is better than previous crashing behavior).

@dotnet/roslyn-compiler for review.
Related to https://github.com/dotnet/roslyn/issues/11299
</Description>
    <CreatedDate>09/07/2016</CreatedDate>
    <ClosedDate>11/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12411</PullRequestID>
        <IssueID>12400</IssueID>
        <Title>Correct the evaluation order of conversions in deconstructions</Title>
        <Description>When deconstructing an object that has a `Deconstruct` method, the order of evaluation should be:
1. evaluate the left-hand side for side-effects
2. evaluate the right-hand side and evaluate the `Deconstruct` method (or methods in the case of nested deconstruction)
3. convert all the results
4. assign the results
5. construct a tuple representing the result of the assignment
</Description>
        <CreatedDate>08/07/2016</CreatedDate>
        <ClosedDate>18/08/2016</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12411</PullRequestID>
        <IssueID>12399</IssueID>
        <Title>Optimize the parsing ahead for deconstruction-declarations to avoid allocations</Title>
        <Description>``

in `LanguageParser.cs`
</Description>
        <CreatedDate>08/07/2016</CreatedDate>
        <ClosedDate>06/12/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Not Applicable</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12411</PullRequestID>
        <IssueID>12398</IssueID>
        <Title>Verify the behavior of dynamic in deconstructions</Title>
        <Description>Confirm whether the following code is correct:

``

in `LocalRewriter_DeconstructionAssignmentOperator.cs`
</Description>
        <CreatedDate>08/07/2016</CreatedDate>
        <ClosedDate>12/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12411</PullRequestID>
        <IssueID>12402</IssueID>
        <Title>Parsing ahead for 'for' and 'foreach' ambiguities should recognize deconstructions</Title>
        <Description>``
</Description>
        <CreatedDate>08/07/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12411</PullRequestID>
        <IssueID>12410</IssueID>
        <Title>Support typeless tuple literals in deconstruction declarations</Title>
        <Description>From discussion with Vlad, there are some language decisions required to fully resolve this.
In the meantime, I am treating those scenarios as errors.

Even if the decision is to keep those scenarios as errors, the error message should be improved.

``

in `CodeGenDeconstructTest.cs`
</Description>
        <CreatedDate>09/07/2016</CreatedDate>
        <ClosedDate>20/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12388</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>bkoelman</FixedByID>
    <Title>Make simplifier remove unneeded parentheses around `this` in cast</Title>
    <Description>Fixes #12387
</Description>
    <CreatedDate>07/07/2016</CreatedDate>
    <ClosedDate>27/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12388</PullRequestID>
        <IssueID>12387</IssueID>
        <Title>SyntaxGenerator adds unneeded parentheses, which the simplifier fails to remove</Title>
        <Description>**Version Used**: 
master branch at d04f1d6a512f5586912a7badcecf486c3f955fa7

**Steps to Reproduce**:
See the test at https://github.com/dotnet/roslyn-analyzers/pull/1065/files#diff-164ec4d88a0027d1f1e7d87262201e18R163:

``

**Expected Behavior**:
The parentheses around `this`, which were added by the `SyntaxGenerator`, are later removed by the simplifier.

**Actual Behavior**:
The simplifier does not remove the parentheses around `this`.
</Description>
        <CreatedDate>07/07/2016</CreatedDate>
        <ClosedDate>27/07/2016</ClosedDate>
        <Labels>
          <Label>0 - Backlog</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12372</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>antonssonj</FixedByID>
    <Title>Debugger locals show wrong value for parameter changed and captured by closure in VB</Title>
    <Description>Fix #12219
</Description>
    <CreatedDate>07/07/2016</CreatedDate>
    <ClosedDate>22/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12372</PullRequestID>
        <IssueID>12219</IssueID>
        <Title>Debugger locals show wrong value for parameter changed and captured by closure in VB</Title>
        <Description>As detailed in #11949, we need to update https://github.com/dotnet/roslyn/blob/master/src/ExpressionEvaluator/VisualBasic/Source/ExpressionCompiler/CompilationContext.vb#L1286 to reference the closure field instead of the original parameter location.
</Description>
        <CreatedDate>27/06/2016</CreatedDate>
        <ClosedDate>22/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Interactive-Debugging</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12353</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>nguerrera</FixedByID>
    <Title>Add support for embedding C# source in portable pdb</Title>
    <Description>Implement #12625 for C# and portable PDBs. Native PDB and VB implementation to follow as separate change once this is approved. 

Also fix #12814
</Description>
    <CreatedDate>06/07/2016</CreatedDate>
    <ClosedDate>11/08/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12353</PullRequestID>
        <IssueID>12625</IssueID>
        <Title>Proposal: Embed sources in PDBs</Title>
        <Description># Implementation progress
- [x] Portable PDB support (#12353)
- [x] C# support (#12353)
- [x] VB support (#13137)

Windows PDB support is tracked by #13707.

This proposal addresses #5397, which requests a feature for embedding source code inside of a PDB.
# Scenarios
## Recap from #5397

&gt; - During the build, source code is auto-generated and then compiled. This auto-generated source does not exist on source control server and is often not preserved as a build artifact. Even if it is preserved, it can't be indexed on a symbol server making acquisition difficult at debug time. 
&gt; - A company is OK from an IP standpoint to release source for some of their projects, but their source control system is behind a firewall. Their IT security policies prevent giving any external access to the source control system, which prevents typical usage of source server. They already provide PDBs to customers, and by including source in the PDBs the customer's debugging experience improves with minimal additional work.
&gt; - An Open Source project is doing all their development on GitHub and they current use source server to distribute source, but they don't like additional configuration necessary in VS to enable it. By distributing the source in the PDB they eliminate this additional configuration.
## Also
- See #12390, which requests embedding PDBs in PE files and argues for the power of combining that with this.
- Binary analysis is often chosen due to the ease of acquiring binaries over integrating in to someone else's build, but comes at the cost of precision. This is a step towards having tools that can be pointed at a binaries, but analyze source, which was my primary motivation for contributing to this. There's more that I want to see in that direction: e.g. serialized compilation options, reference MVIDs in PDB -- ultimately enough to reproduce the compilation from a binary. Access to generated code was just one piece of that, but it overlaps with with the use cases noted above and provides substantial value on its own. 
# Command Line Usage

Since common usage will already leverage a source server and only require generated code to be embedded, we need to be able to specify the files to embed individually.

**Proposal:** Add a new `/embed` switch for vbc.exe and csc.exe: 
-   `/embed`: embeds all source files in the PDB.
-   `/embed:&lt;file list&gt;`:  embeds specific files in the PDB. 
-  `&lt;file list&gt;` shall be parsed exactly as `/additionalfile` with semicolon separation and wildcard expansion.
- If specific source files are to be embedded, they need to be specified as source files in the usual way AND passed to `/embed`. 
  &gt; NOTE: Some care should be taken in the compiler not to read the same files twice. The approach we landed on in design review is that if the `/embed` argument and source argument expand to the exact same full path (without normalization applied and case-sensitively), then we will not re-read the text of the source file. However, in the edge case, different spelling of the same file on the command line can lead to reading the same file more than once. It may also lead to repeated document entries in the PDB unless the difference is eliminated by the path normalization or the language specific case-sensitivity policy in place by the underlying debug document table. An earlier version of this proposal attempted to address these issues by having distinct mechanism for embedding source files (without repeating their paths) and additional files. However, it was decided in design review that the complexity added to the command line and API was not worth the marginal gain.
- It is **not** an error to pass a file that does not represent source in the compilation to /embed. Such files will simply be added to the PDB, which is a deliberate feature.
- It **is** an error to pass `/embed` without /debug: we can't embed text in the PDB if we're not emitting a PDB.
- All files passed to `/embed` shall be included in the PDB regardless of whether or not there are sequence points targeting it.
## Examples
- Embed no sources in PDB (default)

``

Note that it is the caller's responsibility to the gather source and non-source text as appropriate. Text will line up with corresponding source/sequence points by the existing mechanism for de-duping debug documents generated by source trees, `#line`, and `#pragma checksum`: i.e. paths will be normalized and then compared case-insensitively for VB and case-sensitively for C#. 
## Compression

Files beyond a trivial size should be compressed in the PDB. Deflate format will be used. Tiny files do not benefit from compression and can even waste cycles making the file bigger so we should have a threshold at which we start to compress.
## Encoding

Any source text created from raw bytes/stream shall be copied (or compressed and copied) to the PDB without decoding and re-encoding bytes -&gt; chars -&gt; bytes. This is required since encodings do not always round-trip and the checksum must match the original stream.

A source text created by other means (e.g. string + encoding) in which its checksum will be calculated by encoding to bytes via SoruceText.Encoding, will have its text encoded with SourceText.Encoding. 

See also CanBeEmbedded requirements above, 
## Portable PDB Representation

In portable PDBs, we will put the embedded source as a custom debug info entry (with a new GUID allocated for it) parented by the document entry. 

The blob will have a leading int32, which when zero indicate the remaining bytes are the raw, uncompressed text, and when positive indicates that the remaining bytes are comrpessed by deflate and the positive value is the byte size when decompressed.

Portable PDB spec is being updated accordingly: https://github.com/dotnet/corefx/pull/10560
## Windows PDB Representation

The traditional Windows PDB already had a provision for embedded source, which we will use via [ISymUnmanagedDocumentWriter::SetSource](https://msdn.microsoft.com/en-us/library/ms233148%28v=vs.110%29.aspx).

The corresponding method for reading back the embedded source returned E_NOTIMPL until recently, but I have  made the change to implement it and an update to the [nuget package](https://www.nuget.org/packages/Microsoft.DiaSymReader.Native/) is pending.

The blob format will be identical to the portable PDB. This is already a diasymreader custom PDB "injected source" so we can define the source portion as we wish. Using the same blob for Windows and portable PDBs opens up optimizations in the implementation (less copying) and also simplifies it.
</Description>
        <CreatedDate>19/07/2016</CreatedDate>
        <ClosedDate>09/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>Feature Specification</Label>
          <Label>Interactive-Debugging</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12353</PullRequestID>
        <IssueID>12814</IssueID>
        <Title>Gargantuan source files can be silently treated as being much smaller</Title>
        <Description>**Version Used**: 1.3.1.60616 and recent sync to master

**Steps to Reproduce**:
- Run the following script

``
-  `csc big.cs`

**Expected Behavior**:
Compilation fails (either with a deliberate diagnostic that the stream is too long or with the correct errors that match the full text).

**Actual Behavior**:
Compilation succeeds as it only reads up to `program.Length` due to unchecked cast of stream length to `int`.
</Description>
        <CreatedDate>29/07/2016</CreatedDate>
        <ClosedDate>11/08/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12335</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>svick</FixedByID>
    <Title>throw is not a possible expression</Title>
    <Description>This was causing infinite loop for code like `F(throw`.

Fixes #12197
</Description>
    <CreatedDate>03/07/2016</CreatedDate>
    <ClosedDate>04/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12335</PullRequestID>
        <IssueID>12197</IssueID>
        <Title>GetSyntaxTreeAsync hangs and eats up memory</Title>
        <Description>**Version Used**:
2.0.0-beta1-20160607-01
(Works fine on 1.2)

**Steps to Reproduce**:
Run this code:

``

**Expected Behavior**:
Syntax tree returned.

**Actual Behavior**:
Value never returns. Process memory keeps growing indefinitely (kept it on for several minutes).
</Description>
        <CreatedDate>24/06/2016</CreatedDate>
        <ClosedDate>04/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Community</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12334</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>svick</FixedByID>
    <Title>IsEnglishLocal checks CurrentCulture and CurrentUICulture</Title>
    <Description>Since some skipped tests require en culture and others require en UI culture, this ensures both groups are skipped when at least one of them is not en.

Fixes #12333
</Description>
    <CreatedDate>03/07/2016</CreatedDate>
    <ClosedDate>22/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12334</PullRequestID>
        <IssueID>12333</IssueID>
        <Title>StringTextDecodingTests.Decode_NonUtf8 fails when CurrentCulture is cs-CZ and CurrentUICulture is en-US</Title>
        <Description>**Version Used**: master

**Steps to Reproduce**:

Run tests with `CurrentCulture` set to cs-CZ and `CurrentUICulture` set to en-US. (I have English Windows, but prefer Czech date format, which is why my machine is set up like this.)

**Expected Behavior**: Tests succeed.

**Actual Behavior**: `Microsoft.CodeAnalysis.UnitTests.StringTextDecodingTests.Decode_NonUtf8` fails.

[This test has `[ConditionalFact(typeof(IsEnglishLocal))]`](https://github.com/dotnet/roslyn/blob/2316dd8/src/Compilers/Core/CodeAnalysisTest/Text/StringTextDecodingTests.cs#L136), which means it shouldn't run on non-English cultures. But since #9860, `IsEnglishLocal` checks for `CurrentUICulture`. So, with my setup, the test executes, but fails.
</Description>
        <CreatedDate>03/07/2016</CreatedDate>
        <ClosedDate>22/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Contributor Pain</Label>
          <Label>Tenet-Localization</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12332</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>svick</FixedByID>
    <Title>Fixed test when run in cs-CZ culture</Title>
    <Description>Fixes #12331
</Description>
    <CreatedDate>02/07/2016</CreatedDate>
    <ClosedDate>11/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12332</PullRequestID>
        <IssueID>12331</IssueID>
        <Title>GetExtendedSemanticInfoTests.IncompleteWriteLine fails on cs-CZ culture</Title>
        <Description>**Version Used**: master

**Steps to Reproduce**:

Run unit tests with `CurrentCulture` set to cs-CZ.

**Expected Behavior**: All tests succeed.

**Actual Behavior**: Microsoft.CodeAnalysis.VisualBasic.UnitTests.GetExtendedSemanticInfoTests.IncompleteWriteLine fails.

The failure happens because [the test](https://github.com/dotnet/roslyn/blob/2316dd8/src/Compilers/VisualBasic/Test/Semantic/Semantics/GetExtendedSemanticInfoTests.vb#L2618) orders a collection based on a string and in Czech collation, `"ch"` comes after `"h"`, so the sort order is different.
</Description>
        <CreatedDate>02/07/2016</CreatedDate>
        <ClosedDate>11/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12329</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Cut short recursion that can occur (by spec!) in the better betterness code.</Title>
    <Description>This handles the simplest cases that are likely to arise in practice. We simply limit
direct recursion in "better conversion target" to a depth of 100.
See #12061 for the related spec bug. The spec still must be adjusted to say what should happen here,
and the implementation will need to be changed to follow that new specification.

@khyperia @dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>02/07/2016</CreatedDate>
    <ClosedDate>05/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12329</PullRequestID>
        <IssueID>12061</IssueID>
        <Title>Stack overflow with delegate type that returns itself</Title>
        <Description>**Reproduction steps**:

Compile the following code on the command line (or paste it into VS, which hangs VS).

``

**Version Used**:
1. master (ish): stack overflow
2. 1.2.0.60325 (roslyn): stack overflow
3. 4.6.1038.0 (native): test.cs(10,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1)' and 'Program.Method(Del2)'

I think this is due to a recursive loop in `OverloadResolution.BetterConversionTarget` - we get into the case where both types are delegates, get their return types, and then recurse with `BetterConversionTarget(r1, r2, ref useSiteDiagnostics)` (r1/r2 are the return types of the delegates). They're the same type as the original delegates, so, _boom_.
</Description>
        <CreatedDate>16/06/2016</CreatedDate>
        <ClosedDate>23/02/2017</ClosedDate>
        <Labels>
          <Label>Area-Language Design</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>Resolution-External</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12326</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jcouv</FixedByID>
    <Title>Binding for deconstruction-declaration in 'foreach' statement</Title>
    <Description>Adds support for `for (var (x, y) in ...) { ... }`.

Overview of the design:
1. Initial binding
   Add more information into the `BoundForEachStatement` describing the deconstruction step. That information is a bound deconstruction assignment (`BoundDeconstructionAssignmentOperator`) with a placeholder for the expression to be deconstructed.
   The `ForEachLoopBinder` declares more locals from its `BuildLocals` method. Some of them may need inference, which `InferTypeOfVarVariable` in `SourceLocalSymbol.cs` can handle.
2. Local rewriter
   There are four cases for `foreach`: IEnumerable, SZ array, MD array and string. In each case, if the `BoundForEachStatement` has a deconstruction step, the current value for the iteration variable is deconstructed to produce multiple locals.

I ran into some issues with the `GetDeclaredSymbol` API on those deconstruction locals, because the syntax for the deconstruction variables fall into the `PatternVariableBinder` but not the `ForEachLoopBinder` which builds those locals. 
I will chat with @gafter next week to confirm my approach was ok.

I also made some minor updates to the parts of syntax that are attached to deconstruction diagnostics, and cleaned up some PROTOTYPE markers.

@dotnet/roslyn-compiler for review.
Deconstruction work items: #11299
</Description>
    <CreatedDate>02/07/2016</CreatedDate>
    <ClosedDate>07/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12326</PullRequestID>
        <IssueID>11299</IssueID>
        <Title>[Umbrella] Deconstruction work items</Title>
        <Description>This list is no longer maintained. Remaining work items and issues are tracked as [issues with label "Tuples"](https://github.com/dotnet/roslyn/issues?q=is%3Aopen+is%3Aissue+label%3A%22New+Language+Feature+-+Tuples%22).

This is the TODO list for the development of the deconstruction language feature for C# 7.
# Known issues and scenarios
- [ ] Spec deconstructions (talk to Mads about "deconstruction conversion" in the current implementation) 
- [x] Discard support #12619
- [ ] Deconstruction-declarations in expression context #15049
- [ ] Deconstructions with mix of assignment and declaration #15050
- [ ] Adding Deconstruct on some BCL types ([issue](https://github.com/dotnet/corefx/issues/13746) was abandoned) 

- [x] Update spec (here's the [branch to work on](https://github.com/jcouv/roslyn/blob/deconstruction-design/docs/features/deconstruction.md))
- [ ] Deconstruction-assignment
  - [x] -(2.1) Support Edit-and-Continue #12436
  - [ ] Refine data flow analysis to simulate final evaluation and order
    - [ ] [Properties on the left](https://github.com/dotnet/roslyn/pull/11384#discussion_r63827875) #13827
  - [ ] Don't [prematurely resolve lazy diagnostics](https://github.com/dotnet/roslyn/pull/11983/files/7e79c2602331b9f673e25d1b179e85be556979f0#r67014572) #13828
  - [x] Optimize common cases
    - [x] Verify whether [this IL](https://github.com/dotnet/roslyn/pull/11457/files/7170bd2011e6811720493aee7452f9dfc487dd1d#r64249212) is correct
  - [ ] Test ideas:
    - [x] ref returning methods on the left. Check sideeffects.
    - [x] Foo()[Bar()] on the left, where all Foo, Bar and the indexer have sideeffects - print something
    - [x] check IL in simple/common cases
    - [ ] `(.... ) = async Expr();`
    - [ ] [define Deconstruct in VB](https://github.com/dotnet/roslyn/pull/11873#issuecomment-225062291)
  - [ ] Consider making AssignmentInfo a struct
  - [x] Verify [correct handling of dynamic](https://github.com/dotnet/roslyn/pull/11715#discussion_r65787272)
  - [ ] [Optimize case were RHS is a local](https://github.com/dotnet/roslyn/pull/11457#discussion_r64171416)
  - [x] Have a field with the common references used in tests (SystemCoreRef, ValueTupleRef, ...)
  - [x] Warnings on out-of-position names
  - [x] Update evaluation order to reflect LDM decision #12400
  - [x] Update return type to be a tuple, instead of void. #12635
  - [x] Including tuple literal (there should be no conversions before the tuple elements are evaluated)
  - [x] Improve error message in [NullRight test](https://github.com/dotnet/roslyn/pull/11457/files/7170bd2011e6811720493aee7452f9dfc487dd1d#r64293508)
  - [x] Refer to more specific location in error messages
  - [x] Factor code that is common to out vars after merging together.
  - [x] Return type (void)
  - [x] Optimize the case where LHS variable is simple ref value
  - [x] tuple/ValueTuple deconstruction
    - [x] Does `(previous, current, next) = (current, next, null)` fail due to no type on right-hand-side in which to look up `Deconstruct`? (no, tuples don't need Deconstruct)
  - [x] Nesting case
  - [x] Finding `Deconstruct` from base or from extension method.
    - [x] Re-visit the resolution for Deconstruct, using the resolution logic from "out vars".
    - [x] Verify Deconstruct is an instance method.
    - [x] System.Tuple deconstruction
  - [x] Move binding code to separate file.
  - [x] Should deconstruction-assignment the same syntax model as deconstruction-declaration? (currently is uses a VariableDeclaration with a tuple type as the type). (answer: I don't think so)
  - [x] [Consider ](https://github.com/dotnet/roslyn/pull/11384#discussion_r63825210) using a BadExpression in binding (answer: I don't think so as it makes the diagnostics worse)
- [ ] Deconstruction-declaration
  - [x] -(RC) Put OmittedType instead of null in `VariableDeclaration.Type` (make it non-optional again). #12588  
  - [ ] -(2.1) Support other contexts: From, Let
  - [ ] Improve parsing fault tolerance and diagnostics as Cyrus suggested. For example, if you type `var (int x, string y = null) = M();`
  - [ ] Reporting error if you try to use deconstruct syntax in unsupported contexts (like `using`).
  - [x] Review #12534 with Aleksey
  - [ ] Test ideas:
    - [ ] Implicit anonymous function parameter list, e.g. `(x, (y, z)) =&gt; ...` 
    - [ ] out var, e.g. `M(out var (x, y))` 
    - [ ] Test region analysis API. (Neal)
    - [ ] Test with dynamic and verify attribute is properly emitted. (Chuck, #12398)
    - [ ] Test symbols in `(Type1 x, Type2 x) = foo;`
    - [ ] Add test for sequence points
    - [x] `(int x, int y) = x;` // flow analysis
    - [x] Declaring a ref-returning method called `var` should give an error.
  - [x] Support typeless tuple literals in deconstruction declarations #12410
  - [x] -(RC) Add validation to factory methods (only allow creating valid combinations with reasonable-looking children)
  - [x] -(RC) Add validation logic or erasure to WithXYZ methods
  - [x] Consider [simplifying tree walking ](https://github.com/dotnet/roslyn/pull/12224#discussion_r68774996) in new local symbol. (answer: N/A)
  - [x] Support local declaration, for, foreach
  - [x] Circularity problem (including nested case)
  - [x] Formatting issue and coloring in IDE with `var (x, y) = ...` syntax.
- [x] Write spec
- [x] Resolve [filed issues](https://github.com/issues?q=is%3Aopen+is%3Aissue+label%3A"New+Language+Feature+-+Tuples")
## LDM
- [x] D-assignment return type: could we make use of the return-type of Deconstruct method?
- [x] D-declaration with typeless tuple literals. (answer: let's make it work. LDM 7/13)
  
  ``
- [x] I assume no compound assignment `(x, y) += M();` (answer: not at this point. LDM 7/13)
- [x] Wildcard? (answer: yes, should probably be star. LDM 7/13)
- [x] Should anonymous types have a Deconstruct? (answer: no, low value. LDM 7/13)
- [x] Should names matter in deconstruction? (answer: yes, let's warn tuple literal `var (x, y) = (a: 1, x: 2);`)
- [x] Confirm that `var (x, y) = ...` should be an error if `var` type exists. (answer: correct)
- [x] Confirm that `var (x, y) = ...` is a deconstruction even when a ref-returning "var" method exists. (answer: correct)
- [x] FYI the Deconstruct method is now resolved like an invocation with out vars. (confirmed, yes)
  - [x] This has implications on bad Deconstruct shadowing another good one (see `BadDeconstructShadowsBaseDeconstruct`). (confirmed, that's ok)
  - [x] Can dynamic be desconstructed? (answer: no)
- [x] What contexts are deconstruction-declarations allowed in?  (answer: LDM confirmed the prioritization above)
  - P0: local declaration, for statement, foreach, 
  - P1: let clause, from clause, 
  - later: lambda, method declaration, using, outvar, join clause, query continuation clause, join into clause, catch.
- [x] Is `(int x, var (y, z)) = M();` allowed? (answer: yes)
- [x] I assume no mix of assignment and declaration `int x; (x, int y) = M();` (answer: confirmed in 5/25 LDM)
- [x] I assume deconstruction-assignment should work even if System.ValueTuple is not present. (answer: that is no longer the case, ValueTuple is required)
- [x] Switching to tuple-returning-Deconstruct? (answer: no)
- [x] What is the evaluation order for nested deconstruction-assignment? (answer: all LHS side-effects, all RHS, all conversions, all assignments)
- [x] Finalize syntax for deconstruction-declaration. (answer: `var (x, y) = M();` and `(int x, int y) = M();`)
  - [x] Reserving ‘var’, or maybe give up on ‘var (x, y) = M();’ syntax that is ambiguous with method invocation. (answer: no need)
  - [x] Considering ‘@’ to simplify parsing of deconstructions. (answer: no need)
- [x] Do the names matter? `int x, y; (a: x, b: y) = M();` (answer: for now this should be error)
# Interaction with other language features:

General concerns:
- [ ] Error handling/recovery
  - [ ] Errors in parsing
  - [ ] Error handling for semantic errors (e.g. ambiguous lookup, inaccessible lookup, wrong kind of thing found, instance vs static thing found, wrong type for the context, value vs variable)
  - [ ] Missing types (mscorlib or others)
- [ ] Public interface of compiler APIs, backcompat scenarios
- [ ] backward and forward compatibility (i.e. interoperation with previous and future compilers, each in both directions)
- [ ] VB/F# interop, Mono issues
- [ ] BCL and other customer impact
- [ ] Determinism
- [ ] Loading from metadata (source vs. loaded from metadata)
- [ ] Atomicity
- [ ] Edit-and-continue
- [ ] Completeness of the specification as a guide for testing (e.g. is the spec complete enough to suggest what the compiler should do in each scenario?)
- [ ] XML docs and other external documentation
- [ ] Performance
- [ ] Reflection
- [ ] Review proposed changes to public API
- [ ] Debugging
- [ ] Leverage feature in Roslyn codebase (dogfood)

Types and members:
- [ ] Access modifiers (public, protected, internal, protected internal, private), static modifier
- [ ] Parameter modifiers (ref, out, params)
- [ ] Attributes (including security attribute)
- [ ] Generics (type arguments, constraints, variance)
- [ ] default value
- [ ] partial classes
- [ ] literals
- [ ] enum (implicit vs. explicit underlying type)
- [ ] expression trees
- [ ] Iterators
- [ ] Initializers (object, collection, dictionary)
- [ ] array (single- or multi-dimensional, jagged, initilalizer)
- [ ] Expression-bodied methods/properties/...
- [ ] Extension methods
- [ ] Partial method
- [ ] Named and optional parameters
- [ ] String interpolation
- [ ] Properties (read-write, read-only, write-only, auto-property, expression-bodied)
- [ ] Interfaces (implicit vs. explicit interface member implementation)
- [ ] delegates
- [ ] Multi-declaration

Code:
- [ ] Operators (see Eric's list)
  - [ ] Operator overloading
- [ ] Lvalues: the synthesized fields are mutable
  - [ ] Ref / out parameters
  - [ ] Compound operators (+=, /=, etc ..)
  - [ ] Assignment exprs
- [ ] lambdas (capture of parameters or locals, target typing)
- [ ] execution order
- [ ] Target typing (var, lambdas, integrals)
- [ ] Type inference
- [ ] Conversions
  - [ ] Implicit (identity, implicit numeric, implicit enumeration, implicit nullable, null litaral, implicit reference, boxing, implicit dynamic, implicit constant, user-defined implicit conversion, anonymous function, method group)
  - [ ] Explicit (numeric, enumeration, nullable, reference, unboxing, dynamic, user-defined)
  - [ ] Anonymous functions
- [ ] nullable (wrapping, unwrapping)
- [ ] OHI
  - [ ] inheritance (virtual, override, abstract, new)
  - [ ] overload resolution
- [ ] Anonymous types
- [ ] Unsafe code
- [ ] LINQ
- [ ] constructors, properties, indexers, events, operators, and destructors.
- [ ] Async

Misc:
- [ ] reserved keywords (sometimes contextual)
- [ ] pre-processing directives
- [ ] COM interop
  # Interaction with Debugger:
- [ ] typing in immediate/watch window (that also covers hovering over a variable)
- [ ] displaying locals (that also covers autos)
# Interaction with IDE:
- [ ] Colorization
- [ ] Type ahead
- [ ] Intellisense (squiggles, dot completion)
- [ ] Renaming
- [ ] Interaction with incomplete code scenarios (e.g. while typing)
- [ ] More complete list: https://github.com/dotnet/roslyn/issues/8389
# References
#10642
</Description>
        <CreatedDate>13/05/2016</CreatedDate>
        <ClosedDate>15/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>12250</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Resolve a number of issues in typeswitch</Title>
    <Description>- Reflect the most recent LDM decisions regarding reachability and subsumption
- Implement LDM-specified handling for constant switch expression in flow analysis and `default:`
- A type pattern cannot test a static type
- Augment `TestResource.AllInOneCSharpCode` to handle all supported pattern forms. 
- Pattern variables are mutable per latest LDM.
- Additional tests and some changes per review comments
  Fixes #9422, #10487, #10932, #9277, #11379, #10633

(I believe there is a merge issue affecting some interactive window unit tests. I will resolve it before merging)

@AlekseyTs @agocke Please review
@dotnet/roslyn-compiler Any additional review will be appreciated
</Description>
    <CreatedDate>28/06/2016</CreatedDate>
    <ClosedDate>07/07/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12250</PullRequestID>
        <IssueID>9422</IssueID>
        <Title>PreciseAbstractFlowPass doesn't override visit for BoundMatchCase and BoundConstantPattern nodes</Title>
        <Description>If the visit methods can be called, they should be overridden and should visit constituent BoundExpressions as appropriate (either as a condition or as an RValue). Failing to properly visit constituent BoundExpressions can result in a NullReferenceExpression because we might run into conditional state when we don't expect to be in a conditional state.

If we don't expect the visit methods to be ever called, I suggest to still override them in this fashion:

``
</Description>
        <CreatedDate>02/03/2016</CreatedDate>
        <ClosedDate>07/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12250</PullRequestID>
        <IssueID>10487</IssueID>
        <Title>A reference to a pattern variable inside a lambda within a field initializer causes a crash</Title>
        <Description>``
</Description>
        <CreatedDate>11/04/2016</CreatedDate>
        <ClosedDate>07/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12250</PullRequestID>
        <IssueID>10932</IssueID>
        <Title>Need precise rules for constant pattern conversions</Title>
        <Description>The LDM suggested that we use the semantics of == for a constant pattern when applied to an integral constant, but I think it would be better to use something like the (asymmetric) semantics of switch:

``

These semantics should work across all the types (including decimal, float, bool?, etc).
</Description>
        <CreatedDate>27/04/2016</CreatedDate>
        <ClosedDate>07/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Language Design</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12250</PullRequestID>
        <IssueID>9277</IssueID>
        <Title>Region analysis APIs versus pattern matching</Title>
        <Description>In an expression such as `(o is int i)` the region analysis APIs should say that `i` is assigned inside, but is not _always assigned_ inside. If the pattern is irrefutable (i.e. cannot fail to match), then the variables are _always assigned_ inside. That will cause those APIs to interact properly with _extract method_. We need tests for these situations and possibly fixes in the compiler to ensure it works that way.

/cc @jaredpar @AlekseyTs @CyrusNajmabadi 
</Description>
        <CreatedDate>28/02/2016</CreatedDate>
        <ClosedDate>07/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12250</PullRequestID>
        <IssueID>11379</IssueID>
        <Title>Add unit test for declaration pattern with static class</Title>
        <Description>A static class should cause an error when used in a declaration pattern. Need a unit test to verify.
</Description>
        <CreatedDate>17/05/2016</CreatedDate>
        <ClosedDate>07/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>12250</PullRequestID>
        <IssueID>10633</IssueID>
        <Title>Augment `TestResource.AllInOneCSharpCode` to handle all supported pattern forms.</Title>
        <CreatedDate>15/04/2016</CreatedDate>
        <ClosedDate>07/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11594</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jcouv</FixedByID>
    <Title>Deconstruction-assignment: expression type should be void</Title>
    <Description>LDM settled on a void return type for deconstruction-assignment expressions.
The change below introduces `BoundVoid` and uses it as the last bound node in the sequence generated by lowering deconstruction-assignments.
I'm also unskipping a number of tests that pass as a result.

Addresses the first issue in the deconstruction backlog: #11299

@dotnet/roslyn-compiler for review.
</Description>
    <CreatedDate>26/05/2016</CreatedDate>
    <ClosedDate>27/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11594</PullRequestID>
        <IssueID>11299</IssueID>
        <Title>[Umbrella] Deconstruction work items</Title>
        <Description>This list is no longer maintained. Remaining work items and issues are tracked as [issues with label "Tuples"](https://github.com/dotnet/roslyn/issues?q=is%3Aopen+is%3Aissue+label%3A%22New+Language+Feature+-+Tuples%22).

This is the TODO list for the development of the deconstruction language feature for C# 7.
# Known issues and scenarios
- [ ] Spec deconstructions (talk to Mads about "deconstruction conversion" in the current implementation) 
- [x] Discard support #12619
- [ ] Deconstruction-declarations in expression context #15049
- [ ] Deconstructions with mix of assignment and declaration #15050
- [ ] Adding Deconstruct on some BCL types ([issue](https://github.com/dotnet/corefx/issues/13746) was abandoned) 

- [x] Update spec (here's the [branch to work on](https://github.com/jcouv/roslyn/blob/deconstruction-design/docs/features/deconstruction.md))
- [ ] Deconstruction-assignment
  - [x] -(2.1) Support Edit-and-Continue #12436
  - [ ] Refine data flow analysis to simulate final evaluation and order
    - [ ] [Properties on the left](https://github.com/dotnet/roslyn/pull/11384#discussion_r63827875) #13827
  - [ ] Don't [prematurely resolve lazy diagnostics](https://github.com/dotnet/roslyn/pull/11983/files/7e79c2602331b9f673e25d1b179e85be556979f0#r67014572) #13828
  - [x] Optimize common cases
    - [x] Verify whether [this IL](https://github.com/dotnet/roslyn/pull/11457/files/7170bd2011e6811720493aee7452f9dfc487dd1d#r64249212) is correct
  - [ ] Test ideas:
    - [x] ref returning methods on the left. Check sideeffects.
    - [x] Foo()[Bar()] on the left, where all Foo, Bar and the indexer have sideeffects - print something
    - [x] check IL in simple/common cases
    - [ ] `(.... ) = async Expr();`
    - [ ] [define Deconstruct in VB](https://github.com/dotnet/roslyn/pull/11873#issuecomment-225062291)
  - [ ] Consider making AssignmentInfo a struct
  - [x] Verify [correct handling of dynamic](https://github.com/dotnet/roslyn/pull/11715#discussion_r65787272)
  - [ ] [Optimize case were RHS is a local](https://github.com/dotnet/roslyn/pull/11457#discussion_r64171416)
  - [x] Have a field with the common references used in tests (SystemCoreRef, ValueTupleRef, ...)
  - [x] Warnings on out-of-position names
  - [x] Update evaluation order to reflect LDM decision #12400
  - [x] Update return type to be a tuple, instead of void. #12635
  - [x] Including tuple literal (there should be no conversions before the tuple elements are evaluated)
  - [x] Improve error message in [NullRight test](https://github.com/dotnet/roslyn/pull/11457/files/7170bd2011e6811720493aee7452f9dfc487dd1d#r64293508)
  - [x] Refer to more specific location in error messages
  - [x] Factor code that is common to out vars after merging together.
  - [x] Return type (void)
  - [x] Optimize the case where LHS variable is simple ref value
  - [x] tuple/ValueTuple deconstruction
    - [x] Does `(previous, current, next) = (current, next, null)` fail due to no type on right-hand-side in which to look up `Deconstruct`? (no, tuples don't need Deconstruct)
  - [x] Nesting case
  - [x] Finding `Deconstruct` from base or from extension method.
    - [x] Re-visit the resolution for Deconstruct, using the resolution logic from "out vars".
    - [x] Verify Deconstruct is an instance method.
    - [x] System.Tuple deconstruction
  - [x] Move binding code to separate file.
  - [x] Should deconstruction-assignment the same syntax model as deconstruction-declaration? (currently is uses a VariableDeclaration with a tuple type as the type). (answer: I don't think so)
  - [x] [Consider ](https://github.com/dotnet/roslyn/pull/11384#discussion_r63825210) using a BadExpression in binding (answer: I don't think so as it makes the diagnostics worse)
- [ ] Deconstruction-declaration
  - [x] -(RC) Put OmittedType instead of null in `VariableDeclaration.Type` (make it non-optional again). #12588  
  - [ ] -(2.1) Support other contexts: From, Let
  - [ ] Improve parsing fault tolerance and diagnostics as Cyrus suggested. For example, if you type `var (int x, string y = null) = M();`
  - [ ] Reporting error if you try to use deconstruct syntax in unsupported contexts (like `using`).
  - [x] Review #12534 with Aleksey
  - [ ] Test ideas:
    - [ ] Implicit anonymous function parameter list, e.g. `(x, (y, z)) =&gt; ...` 
    - [ ] out var, e.g. `M(out var (x, y))` 
    - [ ] Test region analysis API. (Neal)
    - [ ] Test with dynamic and verify attribute is properly emitted. (Chuck, #12398)
    - [ ] Test symbols in `(Type1 x, Type2 x) = foo;`
    - [ ] Add test for sequence points
    - [x] `(int x, int y) = x;` // flow analysis
    - [x] Declaring a ref-returning method called `var` should give an error.
  - [x] Support typeless tuple literals in deconstruction declarations #12410
  - [x] -(RC) Add validation to factory methods (only allow creating valid combinations with reasonable-looking children)
  - [x] -(RC) Add validation logic or erasure to WithXYZ methods
  - [x] Consider [simplifying tree walking ](https://github.com/dotnet/roslyn/pull/12224#discussion_r68774996) in new local symbol. (answer: N/A)
  - [x] Support local declaration, for, foreach
  - [x] Circularity problem (including nested case)
  - [x] Formatting issue and coloring in IDE with `var (x, y) = ...` syntax.
- [x] Write spec
- [x] Resolve [filed issues](https://github.com/issues?q=is%3Aopen+is%3Aissue+label%3A"New+Language+Feature+-+Tuples")
## LDM
- [x] D-assignment return type: could we make use of the return-type of Deconstruct method?
- [x] D-declaration with typeless tuple literals. (answer: let's make it work. LDM 7/13)
  
  ``
- [x] I assume no compound assignment `(x, y) += M();` (answer: not at this point. LDM 7/13)
- [x] Wildcard? (answer: yes, should probably be star. LDM 7/13)
- [x] Should anonymous types have a Deconstruct? (answer: no, low value. LDM 7/13)
- [x] Should names matter in deconstruction? (answer: yes, let's warn tuple literal `var (x, y) = (a: 1, x: 2);`)
- [x] Confirm that `var (x, y) = ...` should be an error if `var` type exists. (answer: correct)
- [x] Confirm that `var (x, y) = ...` is a deconstruction even when a ref-returning "var" method exists. (answer: correct)
- [x] FYI the Deconstruct method is now resolved like an invocation with out vars. (confirmed, yes)
  - [x] This has implications on bad Deconstruct shadowing another good one (see `BadDeconstructShadowsBaseDeconstruct`). (confirmed, that's ok)
  - [x] Can dynamic be desconstructed? (answer: no)
- [x] What contexts are deconstruction-declarations allowed in?  (answer: LDM confirmed the prioritization above)
  - P0: local declaration, for statement, foreach, 
  - P1: let clause, from clause, 
  - later: lambda, method declaration, using, outvar, join clause, query continuation clause, join into clause, catch.
- [x] Is `(int x, var (y, z)) = M();` allowed? (answer: yes)
- [x] I assume no mix of assignment and declaration `int x; (x, int y) = M();` (answer: confirmed in 5/25 LDM)
- [x] I assume deconstruction-assignment should work even if System.ValueTuple is not present. (answer: that is no longer the case, ValueTuple is required)
- [x] Switching to tuple-returning-Deconstruct? (answer: no)
- [x] What is the evaluation order for nested deconstruction-assignment? (answer: all LHS side-effects, all RHS, all conversions, all assignments)
- [x] Finalize syntax for deconstruction-declaration. (answer: `var (x, y) = M();` and `(int x, int y) = M();`)
  - [x] Reserving ‘var’, or maybe give up on ‘var (x, y) = M();’ syntax that is ambiguous with method invocation. (answer: no need)
  - [x] Considering ‘@’ to simplify parsing of deconstructions. (answer: no need)
- [x] Do the names matter? `int x, y; (a: x, b: y) = M();` (answer: for now this should be error)
# Interaction with other language features:

General concerns:
- [ ] Error handling/recovery
  - [ ] Errors in parsing
  - [ ] Error handling for semantic errors (e.g. ambiguous lookup, inaccessible lookup, wrong kind of thing found, instance vs static thing found, wrong type for the context, value vs variable)
  - [ ] Missing types (mscorlib or others)
- [ ] Public interface of compiler APIs, backcompat scenarios
- [ ] backward and forward compatibility (i.e. interoperation with previous and future compilers, each in both directions)
- [ ] VB/F# interop, Mono issues
- [ ] BCL and other customer impact
- [ ] Determinism
- [ ] Loading from metadata (source vs. loaded from metadata)
- [ ] Atomicity
- [ ] Edit-and-continue
- [ ] Completeness of the specification as a guide for testing (e.g. is the spec complete enough to suggest what the compiler should do in each scenario?)
- [ ] XML docs and other external documentation
- [ ] Performance
- [ ] Reflection
- [ ] Review proposed changes to public API
- [ ] Debugging
- [ ] Leverage feature in Roslyn codebase (dogfood)

Types and members:
- [ ] Access modifiers (public, protected, internal, protected internal, private), static modifier
- [ ] Parameter modifiers (ref, out, params)
- [ ] Attributes (including security attribute)
- [ ] Generics (type arguments, constraints, variance)
- [ ] default value
- [ ] partial classes
- [ ] literals
- [ ] enum (implicit vs. explicit underlying type)
- [ ] expression trees
- [ ] Iterators
- [ ] Initializers (object, collection, dictionary)
- [ ] array (single- or multi-dimensional, jagged, initilalizer)
- [ ] Expression-bodied methods/properties/...
- [ ] Extension methods
- [ ] Partial method
- [ ] Named and optional parameters
- [ ] String interpolation
- [ ] Properties (read-write, read-only, write-only, auto-property, expression-bodied)
- [ ] Interfaces (implicit vs. explicit interface member implementation)
- [ ] delegates
- [ ] Multi-declaration

Code:
- [ ] Operators (see Eric's list)
  - [ ] Operator overloading
- [ ] Lvalues: the synthesized fields are mutable
  - [ ] Ref / out parameters
  - [ ] Compound operators (+=, /=, etc ..)
  - [ ] Assignment exprs
- [ ] lambdas (capture of parameters or locals, target typing)
- [ ] execution order
- [ ] Target typing (var, lambdas, integrals)
- [ ] Type inference
- [ ] Conversions
  - [ ] Implicit (identity, implicit numeric, implicit enumeration, implicit nullable, null litaral, implicit reference, boxing, implicit dynamic, implicit constant, user-defined implicit conversion, anonymous function, method group)
  - [ ] Explicit (numeric, enumeration, nullable, reference, unboxing, dynamic, user-defined)
  - [ ] Anonymous functions
- [ ] nullable (wrapping, unwrapping)
- [ ] OHI
  - [ ] inheritance (virtual, override, abstract, new)
  - [ ] overload resolution
- [ ] Anonymous types
- [ ] Unsafe code
- [ ] LINQ
- [ ] constructors, properties, indexers, events, operators, and destructors.
- [ ] Async

Misc:
- [ ] reserved keywords (sometimes contextual)
- [ ] pre-processing directives
- [ ] COM interop
  # Interaction with Debugger:
- [ ] typing in immediate/watch window (that also covers hovering over a variable)
- [ ] displaying locals (that also covers autos)
# Interaction with IDE:
- [ ] Colorization
- [ ] Type ahead
- [ ] Intellisense (squiggles, dot completion)
- [ ] Renaming
- [ ] Interaction with incomplete code scenarios (e.g. while typing)
- [ ] More complete list: https://github.com/dotnet/roslyn/issues/8389
# References
#10642
</Description>
        <CreatedDate>13/05/2016</CreatedDate>
        <ClosedDate>15/09/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Tuples</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11589</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Make compiler familiar with TH2 format of DeprecatedAttribute.</Title>
    <Description>So far compiler knows about the following signatures of DeprecatedAttribute constructor.
   DeprecatedAttribute(String, DeprecationType, UInt32)
   DeprecatedAttribute(String, DeprecationType, UInt32, Platform)
   DeprecatedAttribute(String, DeprecationType, UInt32, Type)

As of TH2 and onwards  Windows SDK  uses the following signature for the DeprecatedAttribute:

```
 DeprecatedAttribute(String, DeprecationType, UInt32, String)
```

Notice the "String" at the end of the signature.
This change adds the TH2 attribute signature to the known set.

Fixes: #10630
</Description>
    <CreatedDate>26/05/2016</CreatedDate>
    <ClosedDate>27/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11589</PullRequestID>
        <IssueID>10630</IssueID>
        <Title>Fix detection of DeprecatedAttribute to understand TH2 format .</Title>
        <Description>Practically, the DeprecatedAttribute can have the following signatures.
- DeprecatedAttribute(String, DeprecationType, UInt32) – this is the Win8 and Win8.1 format for the deprecated attribute
- DeprecatedAttribute(String, DeprecationType, UInt32, Type) – this is the TH1 format for the deprecated attribute. Note that this form of the attribute constructor does NOT appear in the metadata for TH2 and beyond, just in the TH1 metadata.
- DeprecatedAttribute(String, DeprecationType, UInt32, String) – this is the TH2 format for the deprecated attribute. This is the form that will appear for TH2 and future releases.

We are currently looking for

``

and change underlying implementation accordingly.
</Description>
        <CreatedDate>15/04/2016</CreatedDate>
        <ClosedDate>27/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>Language-VB</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11584</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>Update VirtualTreePoint.cs</Title>
    <Description>Fix for ##11574
Escape the braces withing the built `String Format` text.
</Description>
    <CreatedDate>26/05/2016</CreatedDate>
    <ClosedDate>01/06/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11584</PullRequestID>
        <IssueID>11574</IssueID>
        <Title>Invalid format string for string.Format method</Title>
        <Description>It seems that format string provided to `stirng.Format` in this [place](https://github.com/dotnet/roslyn/blob/56f605c41915317ccdb925f66974ee52282609e7/src/EditorFeatures/Core/Shared/Utilities/VirtualTreePoint.cs#L128) is invalid:

``

This code will fail with format exception because open and close braces should be escaped.

P.S. I've found this bug using my [ErrorProne.Net](https://github.com/SergeyTeplyakov/ErrorProne.NET) analyzer.
</Description>
        <CreatedDate>26/05/2016</CreatedDate>
        <ClosedDate>02/06/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11573</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpen2000</FixedByID>
    <Title>Fixes #556 - Add Fields/Constants to VB Nav Bar</Title>
    <Description>Fixes #556
Hope this is OK.
</Description>
    <CreatedDate>26/05/2016</CreatedDate>
    <ClosedDate>01/06/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11573</PullRequestID>
        <IssueID>556</IssueID>
        <Title>VB Nav Bar: Fields (and constants) are not displayed.</Title>
        <Description>Ported from TFS WorkItem: **1036382**

---

**Repro Steps:**

``

RESULT: F is not listed in the members drop down
EXPECTED: It should be.

NOTE: The assumption is that old vb assumed all fields were at the top and you would use (Declarations) to get there.
</Description>
        <CreatedDate>16/02/2015</CreatedDate>
        <ClosedDate>01/06/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11564</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>aochagavia</FixedByID>
    <Title>Auto-suggest &lt;paramref names and &lt;typeparamref names</Title>
    <Description>The functionality is similar to the current feature implemented for &lt;param

Closes #11488, supersedes https://github.com/dotnet/roslyn/pull/11506

cc @jasonmalinowski 
</Description>
    <CreatedDate>25/05/2016</CreatedDate>
    <ClosedDate>13/06/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11564</PullRequestID>
        <IssueID>11488</IssueID>
        <Title>Auto-suggest &lt;paramref names, similar to &lt;param</Title>
        <Description>Today I get offered automatically inside completion window to add `&lt;param/&gt;` with the names pre-entered (such as capability below), it would be great to apply this same thing to `&lt;paramref/&gt;`:

![image](https://cloud.githubusercontent.com/assets/1103906/15451267/c611632c-1f6e-11e6-9f29-96e14abf4848.png)
</Description>
        <CreatedDate>21/05/2016</CreatedDate>
        <ClosedDate>14/06/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11541</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Initialize the error list toggle state when error list is initialized</Title>
    <Description>Currently, we initialize the error list toggle state only when workspace changes (solution add/remove/reload or project add/remove/reload) OR when FSD options change. However, if you start VS and bring up error list without opening any solution or changing FSD options, we might show stale error list state if your settings file or settings store changed after last VS session. Fix is to initialize the error list toggle state as soon as error list is initialized.

Fixes #11539
</Description>
    <CreatedDate>24/05/2016</CreatedDate>
    <ClosedDate>25/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11541</PullRequestID>
        <IssueID>11539</IssueID>
        <Title>Stale error list toggle state before a solution is opened</Title>
        <Description>Currently, we initialize the error list toggle state only when workspace changes (solution add/remove/reload or project add/remove/reload) OR when FSD options change. However, if you start VS and bring up error list without opening any solution or changing FSD options, we might show stale error list state if your settings file or settings store changed from last VS session.
</Description>
        <CreatedDate>24/05/2016</CreatedDate>
        <ClosedDate>25/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11534</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Iterator Property setter should not be treated as an iterator</Title>
    <Description>`vbc -debug` was throwing an NRE compiling a writable `Iterator Property`.

Fixes 220696 and #11531
</Description>
    <CreatedDate>24/05/2016</CreatedDate>
    <ClosedDate>25/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11534</PullRequestID>
        <IssueID>11531</IssueID>
        <Title>MethodSymbol.IsIterator = True for Iterator Property setter</Title>
        <Description>MethodSymbol.IsIterator = True for Iterator Property setter in VB even though the iterator is specific to the getter.
</Description>
        <CreatedDate>24/05/2016</CreatedDate>
        <ClosedDate>25/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11532</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>Do not report warnings for malformed InformationalVersionAttribute values</Title>
    <Description>Fixes regression introduced by #10620.
Native compilers don't report this warning.

Fixes https://github.com/dotnet/roslyn/issues/11529
</Description>
    <CreatedDate>24/05/2016</CreatedDate>
    <ClosedDate>24/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11532</PullRequestID>
        <IssueID>10620</IssueID>
        <Title>Address backwards compatibility issue with AssemblyInformationalVersionAttribute handling</Title>
        <Description>Make compiler produce the same Product Build, Major, Minor and Private Parts in VersionInfo as VS2013 compiler when Assembly ProductAssemblyFileVersionAttribute and AssemblyInformationalVersion contain invalid format.

Also introduce warning diagnostic for AssemblyInformationalVersion with invalid version string.

This addresses issue #5098
</Description>
        <CreatedDate>15/04/2016</CreatedDate>
        <ClosedDate>27/04/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Community</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Compatibility</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11519</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>'replace' member name should not be treated as modifier</Title>
    <Description>Fixes #11503
</Description>
    <CreatedDate>24/05/2016</CreatedDate>
    <ClosedDate>24/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11519</PullRequestID>
        <IssueID>11503</IssueID>
        <Title>CS1585	Member modifier 'replace' must precede the member type and name</Title>
        <Description>**Version Used**:

Bug seen in Roslyn Future  20160520.2 

**Steps to Reproduce**:
Copy and paste the below code

``

**Expected Behavior**:

No errors

**Actual Behavior**:

Repro.cs(12,30,12,37): error CS1585: Member modifier 'replace' must precede the member type and name
Repro.cs(12,30,12,37): error CS1520: Method must have a return type
</Description>
        <CreatedDate>23/05/2016</CreatedDate>
        <ClosedDate>09/03/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Blocked</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Replace/Original</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11511</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Restore backward compatibility in the way conversion from a reference type to an intrinsic value type is evaluated.</Title>
    <Description>Fixes #9887.

@dotnet/roslyn-compiler Please review a bug fix for 1.3 milestone.

CC @MattGertz, @jaredpar For approval. 
</Description>
    <CreatedDate>23/05/2016</CreatedDate>
    <ClosedDate>24/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11511</PullRequestID>
        <IssueID>9887</IssueID>
        <Title>CType/CBool/etc throwing invalid cast exception depending on the declared variable type although the actual type is the same</Title>
        <Description>**Version Used**: 

vb.net visual studio 2015 update 1

**Steps to Reproduce**:
1. Create a test method

``

On a side note: I wasnt even able to decompile the first method, whereas the second one could be decompiled without any problem (.net reflector 9)
</Description>
        <CreatedDate>18/03/2016</CreatedDate>
        <ClosedDate>24/05/2016</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-VB</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11506</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>aochagavia</FixedByID>
    <Title>Auto-suggest &lt;paramref names and &lt;typeparamref names</Title>
    <Description>The functionality is similar to the current feature implemented for &lt;param

Closes #11488
</Description>
    <CreatedDate>23/05/2016</CreatedDate>
    <ClosedDate>25/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11506</PullRequestID>
        <IssueID>11488</IssueID>
        <Title>Auto-suggest &lt;paramref names, similar to &lt;param</Title>
        <Description>Today I get offered automatically inside completion window to add `&lt;param/&gt;` with the names pre-entered (such as capability below), it would be great to apply this same thing to `&lt;paramref/&gt;`:

![image](https://cloud.githubusercontent.com/assets/1103906/15451267/c611632c-1f6e-11e6-9f29-96e14abf4848.png)
</Description>
        <CreatedDate>21/05/2016</CreatedDate>
        <ClosedDate>14/06/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11496</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>aochagavia</FixedByID>
    <Title>Auto-suggest &lt;paramref names, similar to &lt;param</Title>
    <Description>Closes #11488 

cc @pdelvo 
</Description>
    <CreatedDate>23/05/2016</CreatedDate>
    <ClosedDate>23/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11496</PullRequestID>
        <IssueID>11488</IssueID>
        <Title>Auto-suggest &lt;paramref names, similar to &lt;param</Title>
        <Description>Today I get offered automatically inside completion window to add `&lt;param/&gt;` with the names pre-entered (such as capability below), it would be great to apply this same thing to `&lt;paramref/&gt;`:

![image](https://cloud.githubusercontent.com/assets/1103906/15451267/c611632c-1f6e-11e6-9f29-96e14abf4848.png)
</Description>
        <CreatedDate>21/05/2016</CreatedDate>
        <ClosedDate>14/06/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11485</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Decision tree implementation for pattern switch statement.</Title>
    <Description>Implements subsumption checking for pattern-matching.
Fixes #8823, #10487, #10601, #10632

@AlekseyTs @agocke Please review
/cc @dotnet/roslyn-compiler 
Note that this targets a feature branch, as there is much more testing needed before this goes into `future`.
</Description>
    <CreatedDate>21/05/2016</CreatedDate>
    <ClosedDate>27/06/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11485</PullRequestID>
        <IssueID>8823</IssueID>
        <Title>Subsumption checking for pattern-matching</Title>
        <Description>We should implement subsumption checking for pattern matching, to ensure that any case is not subsumed by previous cases. The trivial cases are `case 3:` followed by `case 3:`, but we also want to include anything following `case var o:`, or anything following the pair of `case null:` and `case object o:`. Similarly, we want to handle the recursive cases.
</Description>
        <CreatedDate>17/02/2016</CreatedDate>
        <ClosedDate>12/07/2016</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Area-Language Design</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11485</PullRequestID>
        <IssueID>10487</IssueID>
        <Title>A reference to a pattern variable inside a lambda within a field initializer causes a crash</Title>
        <Description>``
</Description>
        <CreatedDate>11/04/2016</CreatedDate>
        <ClosedDate>07/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11485</PullRequestID>
        <IssueID>10601</IssueID>
        <Title>Implement integral conversions for integral constant patterns</Title>
        <Description>We have specified that if the value to be matched in an integral type, and we have a constant pattern of an integral type, we use the same semantics as `==`.

If the value is not of an integral type, we need to check that it might contain a value of the appropriate integral type by using the same restrictions used in a type pattern.

That all needs to be implemented.
</Description>
        <CreatedDate>15/04/2016</CreatedDate>
        <ClosedDate>13/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11485</PullRequestID>
        <IssueID>10632</IssueID>
        <Title>Pattern-matching when value out of range?</Title>
        <Description>- [ ] In what situations should the compiler be required by specification to warn about a match that must fail? E.g. switch on a `byte` but case label is out of range?
</Description>
        <CreatedDate>15/04/2016</CreatedDate>
        <ClosedDate>13/07/2016</ClosedDate>
        <Labels>
          <Label>Area-Language Design</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11469</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>khyperia</FixedByID>
    <Title>Improve error message for failing to sign on CoreCLR mac/linux</Title>
    <Description>Fixes #9288

Old behavior:

```
error CS7027: Error signing output with public key from file '../snKey.snk' -- Cannot marshal 'return value': Unknown error.
```

New behavior:

```
error CS7027: Error signing output with public key from file '../snKey.snk' -- Assembly signing not supported.
```

This is a sort of temporary fix, if the plan is to eventually support signing on CoreCLR/linux. (That would involve some new implementation of signing - we currently call out to the CLR via COM to sign, which obviously isn't cross-platform).

Ping @dotnet/roslyn-compiler for review.
</Description>
    <CreatedDate>20/05/2016</CreatedDate>
    <ClosedDate>23/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11469</PullRequestID>
        <IssueID>9288</IssueID>
        <Title>Provide better error message for failing to full-sign in csc/vbc on coreclr</Title>
        <Description>Right now the error message is just a pinvoke failure (`CSC : error CS7027: Error signing output with public key from file '.../corefx/Tools/Open.snk' -- Cannot marshal 'return value': Invalid managed`).
</Description>
        <CreatedDate>29/02/2016</CreatedDate>
        <ClosedDate>23/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11459</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>natidea</FixedByID>
    <Title>Postpone AnalyzerChanged operations when analyzer is changed on file system</Title>
    <Description>Fixes #11019 deadlock. See #11019 for more root cause analysis on the deadlock.

This fix postpones the operations in `AnalyzerChanged` handler in `AbstractProject`, to give the main thread time to release the `FileChangeService` lock.
</Description>
    <CreatedDate>20/05/2016</CreatedDate>
    <ClosedDate>08/06/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11459</PullRequestID>
        <IssueID>11019</IssueID>
        <Title>VisualStudioAnalyzer deadlocks IDE</Title>
        <Description>**Version Used**: master 1.3.0.60502

**Steps to Reproduce**:
1.  Restore project from commandline that has nuget analyzers
2.  Also be working in Visual Studio simultaneously

**Expected Behavior**:

Visual Studio keeps working

**Actual Behavior**:

Visual Studio deadlocks

**Notes:**

filewatcher service calls us and waits:

``

VS deadlocks

dump available at: \mlangfs1\public\jmarolf\Dumps\devenv_hang.dmp
</Description>
        <CreatedDate>02/05/2016</CreatedDate>
        <ClosedDate>08/06/2016</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11459</PullRequestID>
        <IssueID>11019</IssueID>
        <Title>VisualStudioAnalyzer deadlocks IDE</Title>
        <Description>**Version Used**: master 1.3.0.60502

**Steps to Reproduce**:
1.  Restore project from commandline that has nuget analyzers
2.  Also be working in Visual Studio simultaneously

**Expected Behavior**:

Visual Studio keeps working

**Actual Behavior**:

Visual Studio deadlocks

**Notes:**

filewatcher service calls us and waits:

``

VS deadlocks

dump available at: \mlangfs1\public\jmarolf\Dumps\devenv_hang.dmp
</Description>
        <CreatedDate>02/05/2016</CreatedDate>
        <ClosedDate>08/06/2016</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11404</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Wire up /runtimemetadataversion to the build task</Title>
    <Description>Fixes #5608

/cc @tmat @jasonmalinowski @dotnet/roslyn-compiler 
</Description>
    <CreatedDate>18/05/2016</CreatedDate>
    <ClosedDate>19/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11404</PullRequestID>
        <IssueID>5608</IssueID>
        <Title>No version string when NoStdLib is specified.</Title>
        <Description>I wrote my own stdlib to be used on custom projects. I've been using that library on several projects without any issues. When compiled with Vs2015, I've found that the version string is not being written in the binary file.

So, after the magic bytes 0x424a5342 + 16 bytes, instead of the (example) string "v4.0.30319", I get nothing. 

This is happening not only on my stdlib, but also on libraries compiled against that lib. And of course, this doesn't happens with Vs2013.

Build output
´´´
1&gt;Project 'HtmlCore' is not up to date. Missing output file 'D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll'.
1&gt;------ Build started: Project: HtmlCore, Configuration: Release Any CPU ------
1&gt;Build started 01/10/2015 10:04:02 a.m..
1&gt;Environment at start of build:
1&gt;ALLUSERSPROFILE = C:\ProgramData
1&gt;APPDATA = D:\Users\CheloXL\AppData\Roaming
1&gt;asl.log = Destination=file
1&gt;AV_APPDATA = D:\Users\CheloXL\AppData\Roaming
1&gt;COMMANDER_DRIVE = C:
1&gt;COMMANDER_EXE = C:\totalcmd\TOTALCMD64.EXE
1&gt;COMMANDER_INI = C:\totalcmd\wincmd.ini
1&gt;COMMANDER_PATH = C:\totalcmd
1&gt;CommonProgramFiles = C:\Program Files (x86)\Common Files
1&gt;CommonProgramFiles(x86) = C:\Program Files (x86)\Common Files
1&gt;CommonProgramW6432 = C:\Program Files\Common Files
1&gt;COMPUTERNAME = ARETHE
1&gt;ComSpec = C:\WINDOWS\system32\cmd.exe
1&gt;DNX_HOME = %USERPROFILE%.dnx
1&gt;FACADES_4.5 = C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.5\Facades
1&gt;FACADES_4.5.1 = C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.5.1\Facades
1&gt;FACADES_4.5.2 = C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.5.2\Facades
1&gt;FACADES_4.6 = C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.6\Facades
1&gt;FPS_BROWSER_APP_PROFILE_STRING = Internet Explorer
1&gt;FPS_BROWSER_USER_PROFILE_STRING = Default
1&gt;FP_NO_HOST_CHECK = NO
1&gt;HOMEDRIVE = D:
1&gt;HOMEPATH = \Users\CheloXL
1&gt;LOCALAPPDATA = D:\Users\CheloXL\AppData\Local
1&gt;LOGONSERVER = \ARETHE
1&gt;MSBuildLoadMicrosoftTargetsReadOnly = true
1&gt;NUMBER_OF_PROCESSORS = 8
1&gt;OS = Windows_NT
1&gt;Path = c:\programdata\oracle\java\javapath;c:\program files (x86)\eazfuscator.net;c:\program files (x86)\microsoft sdks\windows\v7.0a\bin;c:\windows\system32;c:\windows;c:\windows\system32\wbem;c:\windows\system32\windowspowershell\v1.0\;c:\tools\misc\;c:\program files (x86)\skype\phone\;c:\windows\system32\config\systemprofile.dnx\bin;c:\program files\microsoft dnx\dnvm\;c:\windows\system32;c:\windows;c:\windows\system32\wbem;c:\windows\system32\windowspowershell\v1.0\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\nodejs\;C:\WINDOWS\system32\config\systemprofile.dnx\bin;C:\Program Files\Microsoft DNX\Dnvm\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;D:\Users\CheloXL.dnx\bin;D:\Users\CheloXL\AppData\Roaming\npm
1&gt;PATHEXT = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
1&gt;PkgDefApplicationConfigFile = D:\Users\CheloXL\AppData\Local\Microsoft\VisualStudio\14.0\devenv.exe.config
1&gt;PROCESSOR_ARCHITECTURE = x86
1&gt;PROCESSOR_ARCHITEW6432 = AMD64
1&gt;PROCESSOR_IDENTIFIER = Intel64 Family 6 Model 26 Stepping 5, GenuineIntel
1&gt;PROCESSOR_LEVEL = 6
1&gt;PROCESSOR_REVISION = 1a05
1&gt;ProgramData = C:\ProgramData
1&gt;ProgramFiles = C:\Program Files (x86)
1&gt;ProgramFiles(x86) = C:\Program Files (x86)
1&gt;ProgramW6432 = C:\Program Files
1&gt;PSModulePath = C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules\
1&gt;PUBLIC = D:\Users\Public
1&gt;SESSIONNAME = Console
1&gt;SystemDrive = C:
1&gt;SystemRoot = C:\WINDOWS
1&gt;TEMP = c:\Temp
1&gt;TMP = c:\Temp
1&gt;USERDOMAIN = Arethe
1&gt;USERDOMAIN_ROAMINGPROFILE = Arethe
1&gt;USERNAME = CheloXL
1&gt;USERPROFILE = D:\Users\CheloXL
1&gt;VisualStudioDir = D:\Users\CheloXL\Documents\Visual Studio 2015
1&gt;VisualStudioEdition = Microsoft Visual Studio Enterprise 2015
1&gt;VisualStudioVersion = 14.0
1&gt;VS110COMNTOOLS = C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\Tools\
1&gt;VS120COMNTOOLS = C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\Tools\
1&gt;VS140COMNTOOLS = C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\
1&gt;VSLANG = 1033
1&gt;VSSDK140Install = C:\Program Files (x86)\Microsoft Visual Studio 14.0\VSSDK\
1&gt;windir = C:\WINDOWS
1&gt;WindowsSdkPath = c:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\
1&gt;windows_tracing_flags = 3
1&gt;windows_tracing_logfile = C:\BVTBin\Tests\installpackage\csilogfile.log
1&gt;
1&gt;Initial Properties:
1&gt;_AfterCompileWinFXInternalDependsOn =
1&gt;        PrepareResourcesForSatelliteAssemblies;
1&gt;        MergeLocalizationDirectives;
1&gt;        AfterCompileWinFX
1&gt;
1&gt;_CompileTargetNameForLocalType = _CompileTemporaryAssembly
1&gt;_DebugSymbolsProduced = true
1&gt;_DeploymentApplicationManifestIdentity = Native.HtmlCore
1&gt;_DeploymentBuiltUpdateInterval = 0
1&gt;_DeploymentBuiltUpdateIntervalUnits = Days
1&gt;_DeploymentDeployManifestIdentity = HtmlCore.application
1&gt;_DeploymentFileMappingExtension =
1&gt;_DeploymentTargetApplicationManifestFileName = Native.HtmlCore.manifest
1&gt;_DeploymentUrl =
1&gt;_DocumentationFileProduced = false
1&gt;_FullFrameworkReferenceAssemblyPaths = C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0
1&gt;_GenerateBindingRedirectsIntermediateAppConfig = obj\Release\HtmlCore.csproj.HtmlCore.dll.config
1&gt;_GetChildProjectCopyToOutputDirectoryItems = true
1&gt;_OriginalConfiguration = Release
1&gt;_OriginalPlatform = AnyCPU
1&gt;_ProjectDefaultTargets = Build
1&gt;_RequireMCPass2ForMainAssembly = false
1&gt;_RequireMCPass2ForSatelliteAssemblyOnly = false
1&gt;_ResolveReferenceDependencies = false
1&gt;_ResourceNameInMainAssembly = HtmlCore.g.resources
1&gt;_SGenDllCreated = false
1&gt;_SGenDllName = HtmlCore.XmlSerializers.dll
1&gt;_SGenGenerateSerializationAssembliesConfig = Auto
1&gt;_TargetFrameworkDirectories = C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0
1&gt;AddAdditionalExplicitAssemblyReferences = true
1&gt;AddBuildInfoToAssembly = false
1&gt;AdditionalExplicitAssemblyReferences = System.Core;
1&gt;AllowedReferenceAssemblyFileExtensions =
1&gt;      .winmd;
1&gt;      .dll;
1&gt;      .exe
1&gt;
1&gt;AllowedReferenceRelatedFileExtensions =
1&gt;      .pdb;
1&gt;      .xml;
1&gt;      .pri
1&gt;
1&gt;ALLUSERSPROFILE = C:\ProgramData
1&gt;AlwaysCompileMarkupFilesInSeparateDomain = true
1&gt;AlwaysUseNumericalSuffixInItemNames = true
1&gt;APPDATA = D:\Users\CheloXL\AppData\Roaming
1&gt;AppDesignerFolder = Properties
1&gt;AssemblyFoldersSuffix = AssemblyFoldersEx
1&gt;AssemblyName = HtmlCore
1&gt;AssemblySearchPaths =
1&gt;      {CandidateAssemblyFiles};
1&gt;      ;
1&gt;      {HintPathFromItem};
1&gt;      {TargetFrameworkDirectory};
1&gt;      {Registry:Software\Microsoft.NETFramework,v4.0,AssemblyFoldersEx};
1&gt;      {AssemblyFolders};
1&gt;      {GAC};
1&gt;      {RawFileName};
1&gt;      bin\Release\
1&gt;
1&gt;AssignTargetPathsDependsOn =
1&gt;AutoUnifyAssemblyReferences = true
1&gt;AV_APPDATA = D:\Users\CheloXL\AppData\Roaming
1&gt;AvailablePlatforms = Any CPU,x86,x64
1&gt;BaseIntermediateOutputPath = obj\
1&gt;BuildCompileAction = Build
1&gt;BuildDependsOn =
1&gt;      EntityDeploy;
1&gt;
1&gt;      BeforeBuild;
1&gt;      CoreBuild;
1&gt;      AfterBuild
1&gt;
1&gt;
1&gt;BuildGenerateSourcesAction = Build
1&gt;BuildInfoBinPath = C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\BuildInfo
1&gt;BuildInfoTargets = C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\BuildInfo\Microsoft.VisualStudio.ReleaseManagement.BuildInfo.targets
1&gt;BuildingInsideVisualStudio = true
1&gt;BuildingOutOfProcess = true
1&gt;BuildingProject = false
1&gt;BuildInParallel = true
1&gt;BuildLinkAction = Build
1&gt;BuildProjectReferences = true
1&gt;BuildSystem = MSBuild
1&gt;BuildTaskAssembly = PresentationBuildTasks, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
1&gt;BuiltProjectOutputGroupDependsOn = PrepareForBuild
1&gt;CleanDependsOn =
1&gt;
1&gt;      BeforeClean;
1&gt;      UnmanagedUnregistration;
1&gt;      CoreClean;
1&gt;      CleanReferencedProjects;
1&gt;      CleanPublishFolder;
1&gt;      AfterClean
1&gt;    ;
1&gt;      EntityClean;
1&gt;
1&gt;CleanFile = HtmlCore.csproj.FileListAbsolute.txt
1&gt;CodeAnalysisApplyLogFileXsl = false
1&gt;CodeAnalysisFailOnMissingRules = false
1&gt;CodeAnalysisForceOutput = true
1&gt;CodeAnalysisGenerateSuccessFile = true
1&gt;CodeAnalysisIgnoreGeneratedCode = true
1&gt;CodeAnalysisIgnoreInvalidTargets = true
1&gt;CodeAnalysisIgnoreMissingIndirectReferences = false
1&gt;CodeAnalysisInputAssembly = bin\Release\HtmlCore.dll
1&gt;CodeAnalysisLogFile = bin\Release\HtmlCore.dll.CodeAnalysisLog.xml
1&gt;CodeAnalysisModuleSuppressionsFile = GlobalSuppressions.cs
1&gt;CodeAnalysisOutputToConsole = false
1&gt;CodeAnalysisOverrideRuleVisibilities = false
1&gt;CodeAnalysisPath = C:\Program Files (x86)\Microsoft Visual Studio 14.0\Team Tools\Static Analysis Tools\FxCop\
1&gt;CodeAnalysisQuiet = false
1&gt;CodeAnalysisRuleDirectories = ;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Team Tools\Static Analysis Tools\FxCop\Rules
1&gt;CodeAnalysisRuleSet = MinimumRecommendedRules.ruleset
1&gt;CodeAnalysisRuleSetDirectories = ;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Team Tools\Static Analysis Tools\Rule Sets
1&gt;CodeAnalysisSaveMessagesToReport = Active
1&gt;CodeAnalysisSearchGlobalAssemblyCache = true
1&gt;CodeAnalysisStaticAnalysisDirectory = C:\Program Files (x86)\Microsoft Visual Studio 14.0\Team Tools\Static Analysis Tools\
1&gt;CodeAnalysisSucceededFile = bin\Release\HtmlCore.dll.lastcodeanalysissucceeded
1&gt;CodeAnalysisSummary = false
1&gt;CodeAnalysisTargets = C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\CodeAnalysis\Microsoft.CodeAnalysis.targets
1&gt;CodeAnalysisTimeout = 120
1&gt;CodeAnalysisTreatWarningsAsErrors = false
1&gt;CodeAnalysisUpdateProject = false
1&gt;CodeAnalysisUseTypeNameInSuppression = true
1&gt;CodeAnalysisVerbose = false
1&gt;COMMANDER_DRIVE = C:
1&gt;COMMANDER_EXE = C:\totalcmd\TOTALCMD64.EXE
1&gt;COMMANDER_INI = C:\totalcmd\wincmd.ini
1&gt;COMMANDER_PATH = C:\totalcmd
1&gt;CommonProgramFiles = C:\Program Files (x86)\Common Files
1&gt;CommonProgramW6432 = C:\Program Files\Common Files
1&gt;CommonTargetsPath = C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets
1&gt;CommonXamlResourcesDirectory = C:\Program Files (x86)\MSBuild\14.0\bin\
1&gt;CompileDependsOn =
1&gt;
1&gt;      ResolveReferences;
1&gt;      ResolveKeySource;
1&gt;      SetWin32ManifestProperties;
1&gt;      _GenerateCompileInputs;
1&gt;      BeforeCompile;
1&gt;      _TimeStampBeforeCompile;
1&gt;      CoreCompile;
1&gt;      _TimeStampAfterCompile;
1&gt;      AfterCompile;
1&gt;    ;
1&gt;        _AfterCompileWinFXInternal
1&gt;
1&gt;CompileLicxFilesDependsOn =
1&gt;CompileTargetNameForTemporaryAssembly = CompileTemporaryAssembly
1&gt;ComputeIntermediateSatelliteAssembliesDependsOn =
1&gt;      CreateManifestResourceNames
1&gt;
1&gt;COMPUTERNAME = ARETHE
1&gt;ComReferenceExecuteAsTool = false
1&gt;ComReferenceNoClassMembers = false
1&gt;ComSpec = C:\WINDOWS\system32\cmd.exe
1&gt;Configuration = Release
1&gt;ConfigurationName = Release
1&gt;ConsiderPlatformAsProcessorArchitecture = true
1&gt;ContentFilesProjectOutputGroupDependsOn = PrepareForBuild;AssignTargetPaths
1&gt;ContinueOnError = false
1&gt;CoreBuildDependsOn =
1&gt;      BuildOnlySettings;
1&gt;      PrepareForBuild;
1&gt;      PreBuildEvent;
1&gt;      ResolveReferences;
1&gt;      PrepareResources;
1&gt;      ResolveKeySource;
1&gt;      Compile;
1&gt;      ExportWindowsMDFile;
1&gt;      UnmanagedUnregistration;
1&gt;      GenerateSerializationAssemblies;
1&gt;      CreateSatelliteAssemblies;
1&gt;      GenerateManifests;
1&gt;      GetTargetPath;
1&gt;      PrepareForRun;
1&gt;      UnmanagedRegistration;
1&gt;      IncrementalClean;
1&gt;      PostBuildEvent
1&gt;
1&gt;CoreCleanDependsOn =
1&gt;CoreCompileDependsOn =
1&gt;        DesignTimeXamlMarkupCompilation;
1&gt;
1&gt;          DesignTimeMarkupCompilation;
1&gt;          _ComputeNonExistentFileProperty;ResolveCodeAnalysisRuleSet
1&gt;
1&gt;
1&gt;CoreResGenDependsOn =
1&gt;CreateCustomManifestResourceNamesDependsOn =
1&gt;CreateHardLinksForCopyAdditionalFilesIfPossible = false
1&gt;CreateManifestResourceNamesDependsOn =
1&gt;CreateSatelliteAssembliesDependsOn =
1&gt;      _GenerateSatelliteAssemblyInputs;
1&gt;      ComputeIntermediateSatelliteAssemblies;
1&gt;      GenerateSatelliteAssemblies
1&gt;
1&gt;CSharpCoreTargetsPath = Microsoft.CSharp.Core.targets
1&gt;CSharpTargetsPath = C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.CSharp.CurrentVersion.targets
1&gt;CurrentSolutionConfigurationContents = &lt;SolutionConfiguration&gt;
1&gt;&lt;ProjectConfiguration Project="{2a3c5b14-4353-42b2-bf57-9edd745a7238}" AbsolutePath="D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj"&gt;Release|AnyCPU&lt;/ProjectConfiguration&gt;
1&gt;&lt;/SolutionConfiguration&gt;
1&gt;CustomAfterMicrosoftCommonProps = C:\Program Files (x86)\MSBuild\v14.0\Custom.After.Microsoft.Common.props
1&gt;CustomAfterMicrosoftCommonTargets = C:\Program Files (x86)\MSBuild\v14.0\Custom.After.Microsoft.Common.targets
1&gt;CustomAfterMicrosoftCSharpTargets = C:\Program Files (x86)\MSBuild\v14.0\Custom.After.Microsoft.CSharp.targets
1&gt;CustomBeforeMicrosoftCommonProps = C:\Program Files (x86)\MSBuild\v14.0\Custom.Before.Microsoft.Common.props
1&gt;CustomBeforeMicrosoftCommonTargets = C:\Program Files (x86)\MSBuild\v14.0\Custom.Before.Microsoft.Common.targets
1&gt;CustomBeforeMicrosoftCSharpTargets = C:\Program Files (x86)\MSBuild\v14.0\Custom.Before.Microsoft.CSharp.targets
1&gt;DebugSymbolsProjectOutputGroupDependsOn =
1&gt;DebugType = pdbonly
1&gt;DefaultLanguageSourceExtension = .cs
1&gt;DefineCommonCapabilities = true
1&gt;DefineCommonItemSchemas = true
1&gt;DefineCommonReferenceSchemas = true
1&gt;DefineConstants = TRACE
1&gt;DelaySign =
1&gt;DeploymentType = Installed
1&gt;DesignTimeIntermediateOutputPath = obj\Release\InProcessTempFiles\
1&gt;DesignTimeResolveAssemblyReferencesDependsOn =
1&gt;      GetFrameworkPaths;
1&gt;      GetReferenceAssemblyPaths;
1&gt;      ResolveReferences
1&gt;
1&gt;DevEnvDir = C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\
1&gt;DNX_HOME = %USERPROFILE%.dnx
1&gt;DocumentationProjectOutputGroupDependsOn =
1&gt;EAZFUSCATOR_NET_HOME = C:\Program Files (x86)\Eazfuscator.NET
1&gt;EmbeddedWin32Manifest =
1&gt;EntityDeployDependsOn =
1&gt;EntityDeployIntermediateResourcePath = obj\Release\edmxResourcesToEmbed\
1&gt;ErrorEndLocation = true
1&gt;ErrorReport = prompt
1&gt;ExpandSDKAllowedReferenceExtensions =
1&gt;      .winmd;
1&gt;      .dll
1&gt;
1&gt;ExpandSDKReferencesDependsOn =
1&gt;      ResolveSDKReferences
1&gt;
1&gt;FakesBinPath = C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\Fakes
1&gt;FakesCommandLineArguments =  /msbuildpath:"C:\Program Files (x86)\MSBuild\14.0\bin\msbuild.exe"
1&gt;FakesContinueOnError = false
1&gt;FakesGenerateBeforeBuildDependsOn =
1&gt;      ;
1&gt;      ResolveFakesReferences;
1&gt;      BuildFakesAssemblies;
1&gt;
1&gt;FakesImported = true
1&gt;FakesIntermediatePath = D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\Fakes
1&gt;FakesMSBuildPath = C:\Program Files (x86)\MSBuild\14.0\bin\msbuild.exe
1&gt;FakesOutputPath = D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\FakesAssemblies
1&gt;FakesTargets = C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\Fakes\Microsoft.QualityTools.Testing.Fakes.targets
1&gt;FakesTasks = C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\Fakes\Microsoft.QualityTools.Testing.Fakes.Tasks.dll
1&gt;FakesToolsPath = C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\Fakes
1&gt;FakesVerbosity = Critical
1&gt;FileAlignment = 512
1&gt;FindInvalidProjectReferencesDependsOn =
1&gt;      GetReferenceTargetPlatformMonikers
1&gt;
1&gt;FP_NO_HOST_CHECK = NO
1&gt;Framework20Dir = @(_TargetFramework20DirectoryItem)
1&gt;Framework30Dir = @(_TargetFramework30DirectoryItem)
1&gt;Framework35Dir = @(_TargetFramework35DirectoryItem)
1&gt;Framework40Dir = @(_TargetFramework40DirectoryItem)
1&gt;FrameworkDir = @(_TargetFramework20DirectoryItem)
1&gt;FrameworkPathOverride = C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0
1&gt;FrameworkRegistryBase = Software\Microsoft.NETFramework
1&gt;FrameworkSDKDir = @(_TargetFrameworkSDKDirectoryItem)
1&gt;FrameworkSDKRoot = C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\
1&gt;FullReferenceAssemblyNames = Full
1&gt;GenerateBuildInfoConfigFile = false
1&gt;GeneratedFileExtension = .g.cs
1&gt;GenerateManifestsDependsOn =
1&gt;      SetWin32ManifestProperties;
1&gt;      GenerateApplicationManifest;
1&gt;      GenerateDeploymentManifest
1&gt;
1&gt;GenerateTargetFrameworkAttribute = true
1&gt;GetCopyToOutputDirectoryItemsDependsOn =
1&gt;      AssignTargetPaths;
1&gt;      _SplitProjectReferencesByFileExistence
1&gt;
1&gt;GetFrameworkPathsDependsOn =
1&gt;GetReferenceAssemblyPathsDependsOn =
1&gt;        ;
1&gt;        GetWinFXPath
1&gt;
1&gt;GetTargetPathDependsOn =
1&gt;GetTargetPathWithTargetPlatformMonikerDependsOn = ; GetTargetPath
1&gt;HighEntropyVA = false
1&gt;HOMEDRIVE = D:
1&gt;HOMEPATH = \Users\CheloXL
1&gt;HostInBrowser = false
1&gt;ImplicitlyExpandDesignTimeFacadesDependsOn =
1&gt;      ;
1&gt;      GetReferenceAssemblyPaths
1&gt;
1&gt;ImportByWildcardAfterMicrosoftCommonProps = true
1&gt;ImportByWildcardAfterMicrosoftCommonTargets = true
1&gt;ImportByWildcardAfterMicrosoftCSharpTargets = true
1&gt;ImportByWildcardAfterMicrosoftNetFrameworkProps = true
1&gt;ImportByWildcardAfterMicrosoftNetFrameworkTargets = true
1&gt;ImportByWildcardBeforeMicrosoftCommonProps = true
1&gt;ImportByWildcardBeforeMicrosoftCommonTargets = true
1&gt;ImportByWildcardBeforeMicrosoftCSharpTargets = true
1&gt;ImportByWildcardBeforeMicrosoftNetFrameworkProps = true
1&gt;ImportByWildcardBeforeMicrosoftNetFrameworkTargets = true
1&gt;ImportUserLocationsByWildcardAfterMicrosoftCommonProps = true
1&gt;ImportUserLocationsByWildcardAfterMicrosoftCommonTargets = true
1&gt;ImportUserLocationsByWildcardAfterMicrosoftCSharpTargets = true
1&gt;ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps = true
1&gt;ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkTargets = true
1&gt;ImportUserLocationsByWildcardBeforeMicrosoftCommonProps = true
1&gt;ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets = true
1&gt;ImportUserLocationsByWildcardBeforeMicrosoftCSharpTargets = true
1&gt;ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps = true
1&gt;ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkTargets = true
1&gt;ImportXamlTargets = true
1&gt;IncludeServerNameInBuildInfo = false
1&gt;IntermediateOutputPath = obj\Release\
1&gt;IsLibrary = true
1&gt;Language = C#
1&gt;LoadTimeSensitiveProperties =
1&gt;      ;
1&gt;
1&gt;LoadTimeSensitiveTargets =
1&gt;      ;
1&gt;      XamlMarkupCompilePass1;
1&gt;
1&gt;LOCALAPPDATA = D:\Users\CheloXL\AppData\Local
1&gt;LocalizationDirectivesToLocFile = None
1&gt;LOGONSERVER = \ARETHE
1&gt;MarkupCompilePass2ForMainAssemblyDependsOn =
1&gt;                     GenerateTemporaryTargetAssembly;
1&gt;                     MarkupCompilePass2;
1&gt;                     AfterMarkupCompilePass2;
1&gt;                     CleanupTemporaryTargetAssembly
1&gt;
1&gt;MaxTargetPath = 100
1&gt;MergedOutputCodeAnalysisFile = vc.nativecodeanalysis.all.xml
1&gt;MicrosoftCommonPropsHasBeenImported = true
1&gt;MsAppxPackageTargets = C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\AppxPackage\Microsoft.AppXPackage.Targets
1&gt;MSBuildAllProjects = ;C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.CSharp.CurrentVersion.targets;C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.NetFramework.CurrentVersion.props;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj;C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj.user;C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.NetFramework.CurrentVersion.targets;C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Xaml.targets
1&gt;MSBuildAssemblyVersion = 14.0
1&gt;MSBuildBinPath = C:\Program Files (x86)\MSBuild\14.0\bin
1&gt;MSBuildExtensionsPath = C:\Program Files (x86)\MSBuild
1&gt;MSBuildExtensionsPath32 = C:\Program Files (x86)\MSBuild
1&gt;MSBuildExtensionsPath64 = C:\Program Files\MSBuild
1&gt;MSBuildFrameworkToolsPath = C:\Windows\Microsoft.NET\Framework\v4.0.30319\
1&gt;MSBuildFrameworkToolsPath32 = C:\Windows\Microsoft.NET\Framework\v4.0.30319\
1&gt;MSBuildFrameworkToolsRoot = C:\Windows\Microsoft.NET\Framework\
1&gt;MSBuildLoadMicrosoftTargetsReadOnly = true
1&gt;MSBuildNodeCount = 8
1&gt;MSBuildProgramFiles32 = C:\Program Files (x86)
1&gt;MSBuildProjectDefaultTargets = Build
1&gt;MSBuildProjectDirectory = D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore
1&gt;MSBuildProjectDirectoryNoRoot = Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore
1&gt;MSBuildProjectExtension = .csproj
1&gt;MSBuildProjectFile = HtmlCore.csproj
1&gt;MSBuildProjectFullPath = D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj
1&gt;MSBuildProjectName = HtmlCore
1&gt;MSBuildRuntimeVersion = 4.0.30319
1&gt;MSBuildStartupDirectory = D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore
1&gt;MSBuildToolsPath = C:\Program Files (x86)\MSBuild\14.0\bin
1&gt;MSBuildToolsPath32 = C:\Program Files (x86)\MSBuild\14.0\bin\
1&gt;MSBuildToolsRoot = C:\Program Files (x86)\MSBuild\
1&gt;MSBuildToolsVersion = 14.0
1&gt;MSBuildUserExtensionsPath = D:\Users\CheloXL\AppData\Local\Microsoft\MSBuild
1&gt;MsTestToolsTargets = C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\TeamTest\Microsoft.TeamTest.targets
1&gt;NetFrameworkPropsPath = C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.NetFramework.CurrentVersion.props
1&gt;NetFrameworkTargetsPath = C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.NetFramework.CurrentVersion.targets
1&gt;NoCompilerStandardLib = true
1&gt;NoStdLib = true
1&gt;NUMBER_OF_PROCESSORS = 8
1&gt;Optimize = true
1&gt;OS = Windows_NT
1&gt;OSVersion = 5.1.2600.0
1&gt;OutDir = bin\Release\
1&gt;OutputPath = bin\Release\
1&gt;OutputType = Library
1&gt;OverwriteReadOnlyFiles = false
1&gt;Path = c:\programdata\oracle\java\javapath;c:\program files (x86)\eazfuscator.net;c:\program files (x86)\microsoft sdks\windows\v7.0a\bin;c:\windows\system32;c:\windows;c:\windows\system32\wbem;c:\windows\system32\windowspowershell\v1.0\;c:\tools\misc\;c:\program files (x86)\skype\phone\;c:\windows\system32\config\systemprofile.dnx\bin;c:\program files\microsoft dnx\dnvm\;c:\windows\system32;c:\windows;c:\windows\system32\wbem;c:\windows\system32\windowspowershell\v1.0\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\nodejs\;C:\WINDOWS\system32\config\systemprofile.dnx\bin;C:\Program Files\Microsoft DNX\Dnvm\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;D:\Users\CheloXL.dnx\bin;D:\Users\CheloXL\AppData\Roaming\npm
1&gt;PATHEXT = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
1&gt;PkgDefApplicationConfigFile = D:\Users\CheloXL\AppData\Local\Microsoft\VisualStudio\14.0\devenv.exe.config
1&gt;Platform = AnyCPU
1&gt;PlatformName = AnyCPU
1&gt;PlatformTargetAsMSBuildArchitecture = CurrentArchitecture
1&gt;PlatformTargetAsMSBuildArchitectureExplicitlySet = false
1&gt;PostBuildEventDependsOn =
1&gt;PreBuildEventDependsOn =
1&gt;Prefer32Bit = false
1&gt;PreferredUILang = en-US
1&gt;PrepareForBuildDependsOn = GetFrameworkPaths;GetReferenceAssemblyPaths;AssignLinkMetadata
1&gt;PrepareForRunDependsOn =
1&gt;      CopyFilesToOutputDirectory
1&gt;    ;RunCodeAnalysis
1&gt;PrepareResourceNamesDependsOn =
1&gt;                    AssignWinFXEmbeddedResource;
1&gt;
1&gt;      AssignTargetPaths;
1&gt;      SplitResourcesByCulture;
1&gt;      CreateManifestResourceNames;
1&gt;      CreateCustomManifestResourceNames
1&gt;
1&gt;
1&gt;PrepareResourcesDependsOn =
1&gt;      XamlMarkupCompilePass1;
1&gt;      XamlMarkupCompilePass2;
1&gt;
1&gt;                MarkupCompilePass1;
1&gt;                AfterMarkupCompilePass1;
1&gt;                MarkupCompilePass2ForMainAssembly;
1&gt;                FileClassification;
1&gt;                MainResourcesGeneration;
1&gt;
1&gt;      PrepareResourceNames;
1&gt;      ResGen;
1&gt;      CompileLicxFiles
1&gt;
1&gt;
1&gt;
1&gt;PROCESSOR_ARCHITECTURE = x86
1&gt;PROCESSOR_ARCHITEW6432 = AMD64
1&gt;PROCESSOR_IDENTIFIER = Intel64 Family 6 Model 26 Stepping 5, GenuineIntel
1&gt;PROCESSOR_LEVEL = 6
1&gt;PROCESSOR_REVISION = 1a05
1&gt;ProcessorArchitecture = msil
1&gt;ProcessorArchitectureAsPlatform = AnyCPU
1&gt;ProgramData = C:\ProgramData
1&gt;ProgramFiles = C:\Program Files (x86)
1&gt;ProgramW6432 = C:\Program Files
1&gt;ProjectDesignTimeAssemblyResolutionSearchPaths =
1&gt;      {CandidateAssemblyFiles};
1&gt;      ;
1&gt;      {HintPathFromItem};
1&gt;      {TargetFrameworkDirectory};
1&gt;      {Registry:Software\Microsoft.NETFramework,v4.0,AssemblyFoldersEx};
1&gt;      {RawFileName};
1&gt;      D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\
1&gt;
1&gt;ProjectDir = D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\
1&gt;ProjectExt = .csproj
1&gt;ProjectFileName = HtmlCore.csproj
1&gt;ProjectFlavor = Client
1&gt;ProjectGuid = {2A3C5B14-4353-42B2-BF57-9EDD745A7238}
1&gt;ProjectName = HtmlCore
1&gt;ProjectPath = D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj
1&gt;ProjectView = ProjectFiles
1&gt;PSModulePath = C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules\
1&gt;PUBLIC = D:\Users\Public
1&gt;PublishableProject =
1&gt;PublishBuildDependsOn =
1&gt;            BuildOnlySettings;
1&gt;            PrepareForBuild;
1&gt;            ResolveReferences;
1&gt;            PrepareResources;
1&gt;            ResolveKeySource;
1&gt;            PrepareResourcesForSatelliteAssemblies;
1&gt;            GenerateSerializationAssemblies;
1&gt;            CreateSatelliteAssemblies;
1&gt;
1&gt;PublishDependsOn =
1&gt;      _DeploymentUnpublishable
1&gt;
1&gt;PublishDir = bin\Release\app.publish\
1&gt;PublishOnlyDependsOn =
1&gt;      SetGenerateManifests;
1&gt;      PublishBuild;
1&gt;      BeforePublish;
1&gt;      GenerateManifests;
1&gt;      CopyFilesToOutputDirectory;
1&gt;      _CopyFilesToPublishFolder;
1&gt;      _DeploymentGenerateBootstrapper;
1&gt;      ResolveKeySource;
1&gt;      _DeploymentSignClickOnceDeployment;
1&gt;      AfterPublish
1&gt;
1&gt;PublishPipelineCollectFilesCore =
1&gt;            ;
1&gt;            CollectFilesFromBuildInfoConfigFile;
1&gt;
1&gt;RebuildDependsOn =
1&gt;      BeforeRebuild;
1&gt;      Clean;
1&gt;      Build;
1&gt;      AfterRebuild;
1&gt;
1&gt;ReportingServicesTargets = C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\ReportingServices\Microsoft.ReportingServices.targets
1&gt;ResGenDependsOn = ResolveAssemblyReferences;SplitResourcesByCulture;BeforeResGen;CoreResGen;AfterResGen
1&gt;ResGenExecuteAsTool = false
1&gt;ResolveAssemblyReferencesDependsOn =
1&gt;
1&gt;      GetFrameworkPaths;
1&gt;      GetReferenceAssemblyPaths;
1&gt;      PrepareForBuild;
1&gt;      ResolveSDKReferences;
1&gt;      ExpandSDKReferences;
1&gt;    ;
1&gt;      FakesGenerateBeforeBuild;
1&gt;
1&gt;ResolveReferencesDependsOn =
1&gt;
1&gt;
1&gt;      BeforeResolveReferences;
1&gt;      AssignProjectConfiguration;
1&gt;      ResolveProjectReferences;
1&gt;      FindInvalidProjectReferences;
1&gt;      ResolveNativeReferences;
1&gt;      ResolveAssemblyReferences;
1&gt;      GenerateBindingRedirects;
1&gt;      ResolveComReferences;
1&gt;      AfterResolveReferences
1&gt;    ;
1&gt;      ImplicitlyExpandDesignTimeFacades
1&gt;    ;
1&gt;      ResolveTestReferences
1&gt;
1&gt;ResolveSDKReferencesDependsOn =
1&gt;      GetInstalledSDKLocations
1&gt;
1&gt;RootNamespace = HtmlCore
1&gt;RunAfterInstall = true
1&gt;RunCodeAnalysisDependsOn = ;Compile
1&gt;RunCodeAnalysisInputs = bin\Release\HtmlCore.dll
1&gt;RunCodeAnalysisOnce = FALSE
1&gt;RunDependsOn =
1&gt;RunNativeCodeAnalysisInputs =
1&gt;SatelliteDllsProjectOutputGroupDependsOn = PrepareForBuild;PrepareResourceNames
1&gt;SDK35ToolsPath = C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin\
1&gt;SDK40ToolsPath = C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6 Tools\
1&gt;SDKRedistOutputGroupDependsOn = ResolveSDKReferences;ExpandSDKReferences
1&gt;SDKReferenceDirectoryRoot = D:\Users\CheloXL\AppData\Local\Microsoft SDKs;C:\Program Files (x86)\Microsoft SDKs
1&gt;SDKReferenceRegistryRoot = Software\Microsoft\Microsoft SDKs
1&gt;SESSIONNAME = Console
1&gt;SGenFilesOutputGroupDependsOn =
1&gt;SGenShouldGenerateSerializer = true
1&gt;SGenUseKeep = false
1&gt;SGenUseProxyTypes = true
1&gt;ShouldMarkCertainSDKReferencesAsRuntimeOnly = true
1&gt;SkipCopyUnchangedFiles = true
1&gt;SolutionDir = D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\
1&gt;SolutionExt = .sln
1&gt;SolutionFileName = HtmlCore.sln
1&gt;SolutionName = HtmlCore
1&gt;SolutionPath = D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore.sln
1&gt;SourceFilesProjectOutputGroupDependsOn = PrepareForBuild;AssignTargetPaths
1&gt;SystemDrive = C:
1&gt;SystemRoot = C:\WINDOWS
1&gt;TargetCulture = *
1&gt;TargetDeployManifestFileName = HtmlCore.application
1&gt;TargetDir = D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\
1&gt;TargetedFrameworkDir = @(_TargetedFrameworkDirectoryItem)
1&gt;TargetedRuntimeVersion = v4.0.30319
1&gt;TargetedSDKArchitecture = msil
1&gt;TargetedSDKConfiguration = Retail
1&gt;TargetExt = .dll
1&gt;TargetFileName = HtmlCore.dll
1&gt;TargetFrameworkAsMSBuildRuntime = CLR4
1&gt;TargetFrameworkIdentifier = .NETFramework
1&gt;TargetFrameworkMoniker = .NETFramework,Version=v4.0
1&gt;TargetFrameworkMonikerAssemblyAttributesPath = c:\Temp.NETFramework,Version=v4.0.AssemblyAttributes.cs
1&gt;TargetFrameworkMonikerDisplayName = .NET Framework 4
1&gt;TargetFrameworkProfile =
1&gt;TargetFrameworkSDKToolsDirectory = C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6 Tools\
1&gt;TargetFrameworkVersion = v4.0
1&gt;TargetName = HtmlCore
1&gt;TargetPath = D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll
1&gt;TargetPlatformDisplayName = Windows 7.0
1&gt;TargetPlatformIdentifier = Windows
1&gt;TargetPlatformMoniker = Windows,Version=7.0
1&gt;TargetPlatformRegistryBase = Software\Microsoft\Microsoft SDKs\Windows
1&gt;TargetPlatformSdkPath =
1&gt;TargetPlatformVersion = 7.0
1&gt;TargetRuntime = Managed
1&gt;TaskKeyToken = 31bf3856ad364e35
1&gt;TaskVersion = 4.0.0.0
1&gt;TEMP = c:\Temp
1&gt;TMP = c:\Temp
1&gt;UnmanagedRegistrationDependsOn =
1&gt;UnmanagedUnregistrationDependsOn =
1&gt;UpgradeSubsetToProfile = true
1&gt;UseCommonOutputDirectory = false
1&gt;UseHostCompilerIfAvailable = true
1&gt;USERDOMAIN = Arethe
1&gt;USERDOMAIN_ROAMINGPROFILE = Arethe
1&gt;USERNAME = CheloXL
1&gt;USERPROFILE = D:\Users\CheloXL
1&gt;UseSourcePath = true
1&gt;Utf8Output = true
1&gt;VCTargetsPath = C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\
1&gt;VCTargetsPath10 = C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\
1&gt;VCTargetsPath11 = C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V110\
1&gt;VCTargetsPath12 = C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V120\
1&gt;VCTargetsPath14 = C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\
1&gt;Version = 1.0.0.0
1&gt;VisualStudioDir = D:\Users\CheloXL\Documents\Visual Studio 2015
1&gt;VisualStudioEdition = Microsoft Visual Studio Enterprise 2015
1&gt;VisualStudioVersion = 14.0
1&gt;VS110COMNTOOLS = C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\Tools\
1&gt;VS120COMNTOOLS = C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\Tools\
1&gt;VS140COMNTOOLS = C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\
1&gt;VSIDEResolvedNonMSBuildProjectOutputs = &lt;VSIDEResolvedNonMSBuildProjectOutputs /&gt;
1&gt;VSLANG = 1033
1&gt;VSSDK140Install = C:\Program Files (x86)\Microsoft Visual Studio 14.0\VSSDK\
1&gt;WarningLevel = 4
1&gt;WebReference_EnableLegacyEventingModel = false
1&gt;WebReference_EnableProperties = true
1&gt;WebReference_EnableSQLTypes = true
1&gt;windir = C:\WINDOWS
1&gt;windows_tracing_flags = 3
1&gt;windows_tracing_logfile = C:\BVTBin\Tests\installpackage\csilogfile.log
1&gt;WindowsSDK80Path =
1&gt;WindowsSdkPath = c:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\
1&gt;WMSJSProject = WJProject
1&gt;WMSJSProjectDirectory = JavaScript
1&gt;XamlBuildTaskAssemblyName = XamlBuildTask, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
1&gt;XamlBuildTaskLocation = C:\Windows\Microsoft.NET\Framework\v4.0.30319\
1&gt;XamlBuildTaskPath = C:\Windows\Microsoft.NET\Framework\v4.0.30319\
1&gt;XamlGenCodeFileNames = HtmlCore.csproj.XamlGeneratedCodeFileListAbsolute.txt
1&gt;XamlGenMarkupFileNames = HtmlCore.csproj.XamlGeneratedXamlFileListAbsolute.txt
1&gt;XamlPass2FlagFile = HtmlCore.csproj.XamlPass2Flag.txt
1&gt;XamlRequiresCompilationPass2 = false
1&gt;XamlTemporaryAssemblyName = HtmlCore
1&gt;YieldDuringToolExecution = true
1&gt;
1&gt;Building with tools version "14.0".
1&gt;Target "_CheckForInvalidConfigurationAndPlatform: (TargetId:2)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (entry point):
1&gt;Set Property: _InvalidConfigurationMessageText=The OutputPath property is not set for project 'HtmlCore.csproj'.  Please check to make sure that you have specified a valid combination of Configuration and Platform for this project.  Configuration='Release'  Platform='AnyCPU'.
1&gt;Set Property: _InvalidConfigurationMessageText=The OutputPath property is not set for project 'HtmlCore.csproj'.  Please check to make sure that you have specified a valid combination of Configuration and Platform for this project.  Configuration='Release'  Platform='AnyCPU'.  This error may also appear if some other project is trying to follow a project-to-project reference to this project, this project has been unloaded or is not included in the solution, and the referencing project does not build using the same or an equivalent Configuration or Platform.
1&gt;Task "Error" skipped, due to false condition; ( '$(_InvalidConfigurationError)' == 'true' ) was evaluated as ( '' == 'true' ).
1&gt;Task "Warning" skipped, due to false condition; ( '$(_InvalidConfigurationWarning)' == 'true' ) was evaluated as ( '' == 'true' ).
1&gt;Using "Message" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "Message" (TaskId:2)
1&gt;  Task Parameter:Text=Configuration=Release (TaskId:2)
1&gt;  Task Parameter:Importance=Low (TaskId:2)
1&gt;  Configuration=Release (TaskId:2)
1&gt;Done executing task "Message". (TaskId:2)
1&gt;Task "Message" (TaskId:3)
1&gt;  Task Parameter:Text=Platform=AnyCPU (TaskId:3)
1&gt;  Task Parameter:Importance=Low (TaskId:3)
1&gt;  Platform=AnyCPU (TaskId:3)
1&gt;Done executing task "Message". (TaskId:3)
1&gt;Task "Error" skipped, due to false condition; ('$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)')) was evaluated as ('bin\Release\' != '' and !HasTrailingSlash('bin\Release\')).
1&gt;Task "Error" skipped, due to false condition; ('$(BaseIntermediateOutputPath)' != '' and !HasTrailingSlash('$(BaseIntermediateOutputPath)')) was evaluated as ('obj\' != '' and !HasTrailingSlash('obj\')).
1&gt;Task "Error" skipped, due to false condition; ('$(IntermediateOutputPath)' != '' and !HasTrailingSlash('$(IntermediateOutputPath)')) was evaluated as ('obj\Release\' != '' and !HasTrailingSlash('obj\Release\')).
1&gt;Done building target "_CheckForInvalidConfigurationAndPlatform" in project "HtmlCore.csproj".: (TargetId:2)
1&gt;Target "EntityDeploy" skipped, due to false condition; ('@(EntityDeploy)' != '') was evaluated as ('' != '').
1&gt;Target "BeforeBuild: (TargetId:3)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "Build" depends on it):
1&gt;Done building target "BeforeBuild" in project "HtmlCore.csproj".: (TargetId:3)
1&gt;Target "BuildOnlySettings: (TargetId:4)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreBuild" depends on it):
1&gt;Set Property: BuildingProject=true
1&gt;Done building target "BuildOnlySettings" in project "HtmlCore.csproj".: (TargetId:4)
1&gt;Target "GetFrameworkPaths: (TargetId:5)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.NetFramework.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "PrepareForBuild" depends on it):
1&gt;Added Item(s): _TargetFramework40DirectoryItem=C:\Windows\Microsoft.NET\Framework\v4.0.30319
1&gt;Added Item(s): _TargetFramework35DirectoryItem=C:\Windows\Microsoft.NET\Framework\v3.5
1&gt;Added Item(s): _TargetFramework30DirectoryItem=C:\Windows\Microsoft.NET\Framework\v3.0
1&gt;Added Item(s): _TargetFramework20DirectoryItem=C:\Windows\Microsoft.NET\Framework\v2.0.50727
1&gt;Added Item(s): _TargetedFrameworkDirectoryItem=C:\Windows\Microsoft.NET\Framework\v4.0.30319
1&gt;Added Item(s): _CombinedTargetFrameworkDirectoriesItem=C:\Windows\Microsoft.NET\Framework\v4.0.30319
1&gt;Set Property: TargetFrameworkDirectory=C:\Windows\Microsoft.NET\Framework\v4.0.30319
1&gt;Set Property: TargetFrameworkSDKDirectory=C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\
1&gt;Added Item(s): _TargetFrameworkSDKDirectoryItem=C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\
1&gt;Done building target "GetFrameworkPaths" in project "HtmlCore.csproj".: (TargetId:5)
1&gt;Target "GetWinFXPath" skipped, due to false condition; (('@(Page)' != '' or '@(ApplicationDefinition)' != '' or '@(Resource)' != '') and ('$(GetWinFXNativePath)' != '' or '$(GetWinFXWoWPath)' != '' )) was evaluated as (('' != '' or '' != '' or '' != '') and ('' != '' or '' != '' )).
1&gt;Target "GetReferenceAssemblyPaths: (TargetId:6)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "PrepareForBuild" depends on it):
1&gt;Set Property: TargetFrameworkDirectory=
1&gt;Task "GetReferenceAssemblyPaths" skipped, due to false condition; ('$(TargetFrameworkMoniker)' != '' and ('$(_TargetFrameworkDirectories)' == '' or '$(_FullFrameworkReferenceAssemblyPaths)' == '')) was evaluated as ('.NETFramework,Version=v4.0' != '' and ('C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0' == '' or 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0' == '')).
1&gt;Set Property: TargetFrameworkDirectory=C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0;;
1&gt;Set Property: RemoveAssemblyFoldersIfNoTargetFramework=true
1&gt;Done building target "GetReferenceAssemblyPaths" in project "HtmlCore.csproj".: (TargetId:6)
1&gt;Target "AssignLinkMetadata" skipped, due to false condition; ( '$(SynthesizeLinkMetadata)' == 'true' ) was evaluated as ( '' == 'true' ).
1&gt;Target "PrepareForBuild: (TargetId:7)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreBuild" depends on it):
1&gt;Using "FindAppConfigFile" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "FindAppConfigFile" (TaskId:4)
1&gt;  Task Parameter:TargetPath=HtmlCore.dll.config (TaskId:4)
1&gt;  Output Item(s): AppConfigWithTargetPath= (TaskId:4)
1&gt;Done executing task "FindAppConfigFile". (TaskId:4)
1&gt;Using "MakeDir" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "MakeDir" (TaskId:5)
1&gt;  Task Parameter:
1&gt;      Directories=
1&gt;          bin\Release\
1&gt;          obj\Release\ (TaskId:5)
1&gt;Done executing task "MakeDir". (TaskId:5)
1&gt;Done building target "PrepareForBuild" in project "HtmlCore.csproj".: (TargetId:7)
1&gt;Target "PreBuildEvent" skipped, due to false condition; ('$(PreBuildEvent)'!='') was evaluated as (''!='').
1&gt;Target "BeforeResolveReferences: (TargetId:8)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResolveReferences" depends on it):
1&gt;Done building target "BeforeResolveReferences" in project "HtmlCore.csproj".: (TargetId:8)
1&gt;Target "AssignProjectConfiguration: (TargetId:9)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResolveReferences" depends on it):
1&gt;Set Property: OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration=true
1&gt;Set Property: ShouldUnsetParentConfigurationAndPlatform=true
1&gt;Using "AssignProjectConfiguration" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "AssignProjectConfiguration" (TaskId:6)
1&gt;  Task Parameter:CurrentProject=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj (TaskId:6)
1&gt;  Task Parameter:CurrentProjectConfiguration=Release (TaskId:6)
1&gt;  Task Parameter:CurrentProjectPlatform=AnyCPU (TaskId:6)
1&gt;  Task Parameter:OutputType=Library (TaskId:6)
1&gt;  Task Parameter:ResolveConfigurationPlatformUsingMappings=False (TaskId:6)
1&gt;  Task Parameter:SolutionConfigurationContents=&lt;SolutionConfiguration&gt;
1&gt;  &lt;ProjectConfiguration Project="{2a3c5b14-4353-42b2-bf57-9edd745a7238}" AbsolutePath="D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj"&gt;Release|AnyCPU&lt;/ProjectConfiguration&gt;
1&gt;  &lt;/SolutionConfiguration&gt; (TaskId:6)
1&gt;  Task Parameter:OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration=True (TaskId:6)
1&gt;  Task Parameter:ShouldUnsetParentConfigurationAndPlatform=True (TaskId:6)
1&gt;Done executing task "AssignProjectConfiguration". (TaskId:6)
1&gt;Done building target "AssignProjectConfiguration" in project "HtmlCore.csproj".: (TargetId:9)
1&gt;Target "AssignProjectConfiguration" skipped. Previously built successfully.
1&gt;Target "_SplitProjectReferencesByFileExistence: (TargetId:10)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResolveProjectReferences" depends on it):
1&gt;Task "ResolveNonMSBuildProjectOutput" skipped, due to false condition; ('$(BuildingInsideVisualStudio)'=='true' and '@(ProjectReferenceWithConfiguration)'!='') was evaluated as ('true'=='true' and ''!='').
1&gt;Done building target "_SplitProjectReferencesByFileExistence" in project "HtmlCore.csproj".: (TargetId:10)
1&gt;Target "ResolveProjectReferences: (TargetId:11)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResolveReferences" depends on it):
1&gt;Task "MSBuild" skipped, due to false condition; ('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(_MSBuildProjectReferenceExistent)' != '') was evaluated as ('' == 'true' and '' != '' and ('true' == 'true' or 'true' != 'true') and '14.0' != '10.0' and '' != '').
1&gt;Task "MSBuild" skipped, due to false condition; ('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' == '10.0' and '@(_MSBuildProjectReferenceExistent)' != '') was evaluated as ('' == 'true' and '' != '' and ('true' == 'true' or 'true' != 'true') and '14.0' == '10.0' and '' != '').
1&gt;Task "MSBuild" skipped, due to false condition; ('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildingInsideVisualStudio)' != 'true' and '$(BuildProjectReferences)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '') was evaluated as ('' == 'true' and '' != '' and 'true' != 'true' and 'true' == 'true' and '' != '').
1&gt;Task "MSBuild" skipped, due to false condition; ('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildingProject)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '') was evaluated as ('' == 'true' and '' != '' and 'true' == 'true' and '' != '').
1&gt;Task "Warning" skipped, due to false condition; ('@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceNonexistent)' != '') was evaluated as ('' != '' and '' != '').
1&gt;Done building target "ResolveProjectReferences" in project "HtmlCore.csproj".: (TargetId:11)
1&gt;Target "FindInvalidProjectReferences" skipped, due to false condition; ('$(FindInvalidProjectReferences)' == 'true') was evaluated as ('' == 'true').
1&gt;Target "ResolveNativeReferences" skipped, due to false condition; ('@(NativeReference)'!='') was evaluated as (''!='').
1&gt;Target "GetFrameworkPaths" skipped. Previously built successfully.
1&gt;Target "GetReferenceAssemblyPaths" skipped. Previously built successfully.
1&gt;Target "PrepareForBuild" skipped. Previously built successfully.
1&gt;Target "GetInstalledSDKLocations: (TargetId:12)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResolveSDKReferences" depends on it):
1&gt;Task "GetInstalledSDKLocations" skipped, due to false condition; ('@(SDKReference)' != '') was evaluated as ('' != '').
1&gt;Task "GetInstalledSDKLocations" skipped, due to false condition; ('@(SDKReference)' != '' and '$(SupportWindows81SDKs)' == 'true' and '$(TargetPlatformIdentifierWindows81)' != '' and '$(TargetPlatformVersionWindows81)' != '') was evaluated as ('' != '' and '' == 'true' and '' != '' and '' != '').
1&gt;Task "GetInstalledSDKLocations" skipped, due to false condition; ('@(SDKReference)' != '' and '$(SupportWindowsPhone81SDKs)' == 'true' and '$(TargetPlatformIdentifierWindowsPhone81)' != '' and '$(TargetPlatformVersionWindowsPhone81)' != '') was evaluated as ('' != '' and '' == 'true' and '' != '' and '' != '').
1&gt;Done building target "GetInstalledSDKLocations" in project "HtmlCore.csproj".: (TargetId:12)
1&gt;Target "ResolveSDKReferences: (TargetId:13)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResolveAssemblyReferences" depends on it):
1&gt;Task "ResolveSDKReference" skipped, due to false condition; ('@(SDKReference)'!='') was evaluated as (''!='').
1&gt;Done building target "ResolveSDKReferences" in project "HtmlCore.csproj".: (TargetId:13)
1&gt;Target "ResolveSDKReferences" skipped. Previously built successfully.
1&gt;Target "ExpandSDKReferences: (TargetId:14)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResolveAssemblyReferences" depends on it):
1&gt;Task "GetSDKReferenceFiles" skipped, due to false condition; ('@(ResolvedSDKReference)'!='') was evaluated as (''!='').
1&gt;Done building target "ExpandSDKReferences" in project "HtmlCore.csproj".: (TargetId:14)
1&gt;Target "FakesGenerateBeforeBuild" skipped, due to false condition; (@(Fakes) != '' AND $(BuildingProject)) was evaluated as ( != '' AND true).
1&gt;Target "ResolveAssemblyReferences: (TargetId:15)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResolveReferences" depends on it):
1&gt;Added Item(s): _ReferenceInstalledAssemblyDirectory=C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0
1&gt;Set Property: ResolveAssemblyReferencesStateFile=obj\Release\HtmlCore.csprojResolveAssemblyReference.cache
1&gt;Set Property: ResolveAssemblyReferencesSilent=false
1&gt;Set Property: ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch=Warning
1&gt;Added Item(s):
1&gt;    Reference=
1&gt;        System.Core
1&gt;                Implicit=true
1&gt;Using "ResolveAssemblyReference" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "ResolveAssemblyReference" (TaskId:7)
1&gt;  Task Parameter:
1&gt;      Assemblies=
1&gt;          Javascript
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;          System.Core
1&gt;                  Implicit=true (TaskId:7)
1&gt;  Task Parameter:TargetFrameworkDirectories=C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0 (TaskId:7)
1&gt;  Task Parameter:
1&gt;      SearchPaths=
1&gt;          {CandidateAssemblyFiles}
1&gt;          {HintPathFromItem}
1&gt;          {TargetFrameworkDirectory}
1&gt;          {Registry:Software\Microsoft.NETFramework,v4.0,AssemblyFoldersEx}
1&gt;          {AssemblyFolders}
1&gt;          {GAC}
1&gt;          {RawFileName}
1&gt;          bin\Release\ (TaskId:7)
1&gt;  Task Parameter:
1&gt;      AllowedAssemblyExtensions=
1&gt;          .winmd
1&gt;          .dll
1&gt;          .exe (TaskId:7)
1&gt;  Task Parameter:
1&gt;      AllowedRelatedFileExtensions=
1&gt;          .pdb
1&gt;          .xml
1&gt;          .pri (TaskId:7)
1&gt;  Task Parameter:TargetProcessorArchitecture=msil (TaskId:7)
1&gt;  Task Parameter:AutoUnify=True (TaskId:7)
1&gt;  Task Parameter:FindSatellites=True (TaskId:7)
1&gt;  Task Parameter:FindSerializationAssemblies=True (TaskId:7)
1&gt;  Task Parameter:FindRelatedFiles=True (TaskId:7)
1&gt;  Task Parameter:Silent=False (TaskId:7)
1&gt;  Task Parameter:TargetFrameworkVersion=v4.0 (TaskId:7)
1&gt;  Task Parameter:TargetFrameworkMoniker=.NETFramework,Version=v4.0 (TaskId:7)
1&gt;  Task Parameter:TargetFrameworkMonikerDisplayName=.NET Framework 4 (TaskId:7)
1&gt;  Task Parameter:TargetedRuntimeVersion=v4.0.30319 (TaskId:7)
1&gt;  Task Parameter:StateFile=obj\Release\HtmlCore.csprojResolveAssemblyReference.cache (TaskId:7)
1&gt;  Task Parameter:FullTargetFrameworkSubsetNames=Full (TaskId:7)
1&gt;  Task Parameter:FullFrameworkFolders=C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0 (TaskId:7)
1&gt;  Task Parameter:WarnOrErrorOnTargetArchitectureMismatch=Warning (TaskId:7)
1&gt;  TargetFrameworkMoniker: (TaskId:7)
1&gt;      .NETFramework,Version=v4.0 (TaskId:7)
1&gt;  TargetFrameworkMonikerDisplayName: (TaskId:7)
1&gt;      .NET Framework 4 (TaskId:7)
1&gt;  TargetedRuntimeVersion: (TaskId:7)
1&gt;      v4.0.30319 (TaskId:7)
1&gt;  Assemblies: (TaskId:7)
1&gt;      Javascript (TaskId:7)
1&gt;          HintPath = '....\ExtremeFX\Compiler_dlls\Javascript.dll' (TaskId:7)
1&gt;      System.Core (TaskId:7)
1&gt;  AssemblyFiles: (TaskId:7)
1&gt;  CandidateAssemblyFiles: (TaskId:7)
1&gt;  TargetFrameworkDirectories: (TaskId:7)
1&gt;      C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0 (TaskId:7)
1&gt;  InstalledAssemblyTables: (TaskId:7)
1&gt;  IgnoreInstalledAssemblyTable: (TaskId:7)
1&gt;      False (TaskId:7)
1&gt;  SearchPaths: (TaskId:7)
1&gt;      {CandidateAssemblyFiles} (TaskId:7)
1&gt;      {HintPathFromItem} (TaskId:7)
1&gt;      {TargetFrameworkDirectory} (TaskId:7)
1&gt;      {Registry:Software\Microsoft.NETFramework,v4.0,AssemblyFoldersEx} (TaskId:7)
1&gt;      {AssemblyFolders} (TaskId:7)
1&gt;      {GAC} (TaskId:7)
1&gt;      {RawFileName} (TaskId:7)
1&gt;      bin\Release\ (TaskId:7)
1&gt;  AllowedAssemblyExtensions: (TaskId:7)
1&gt;      .winmd (TaskId:7)
1&gt;      .dll (TaskId:7)
1&gt;      .exe (TaskId:7)
1&gt;  AllowedRelatedFileExtensions: (TaskId:7)
1&gt;      .pdb (TaskId:7)
1&gt;      .xml (TaskId:7)
1&gt;      .pri (TaskId:7)
1&gt;  AppConfigFile: (TaskId:7)
1&gt;       (TaskId:7)
1&gt;  AutoUnify: (TaskId:7)
1&gt;      True (TaskId:7)
1&gt;  CopyLocalDependenciesWhenParentReferenceInGac: (TaskId:7)
1&gt;      True (TaskId:7)
1&gt;  FindDependencies: (TaskId:7)
1&gt;      True (TaskId:7)
1&gt;  TargetProcessorArchitecture: (TaskId:7)
1&gt;      msil (TaskId:7)
1&gt;  StateFile: (TaskId:7)
1&gt;      obj\Release\HtmlCore.csprojResolveAssemblyReference.cache (TaskId:7)
1&gt;  InstalledAssemblySubsetTables: (TaskId:7)
1&gt;  IgnoreInstalledAssemblySubsetTable: (TaskId:7)
1&gt;      False (TaskId:7)
1&gt;  TargetFrameworkSubsets: (TaskId:7)
1&gt;  FullTargetFrameworkSubsetNames: (TaskId:7)
1&gt;      Full (TaskId:7)
1&gt;  ProfileName: (TaskId:7)
1&gt;       (TaskId:7)
1&gt;  FullFrameworkFolders: (TaskId:7)
1&gt;      C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0 (TaskId:7)
1&gt;  LatestTargetFrameworkDirectories: (TaskId:7)
1&gt;  ProfileTablesLocation: (TaskId:7)
1&gt;  Primary reference "Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9". (TaskId:7)
1&gt;      Resolved file path is "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll". (TaskId:7)
1&gt;      Reference found at search path location "{HintPathFromItem}". (TaskId:7)
1&gt;      Found related file "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.xml". (TaskId:7)
1&gt;      The ImageRuntimeVersion for this reference is "". (TaskId:7)
1&gt;  Primary reference "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089". (TaskId:7)
1&gt;      Resolved file path is "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0\System.Core.dll". (TaskId:7)
1&gt;      Reference found at search path location "{TargetFrameworkDirectory}". (TaskId:7)
1&gt;          For SearchPath "{TargetFrameworkDirectory}". (TaskId:7)
1&gt;          Considered "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0\System.Core.winmd", but it didn't exist. (TaskId:7)
1&gt;      This reference is not "CopyLocal" because it's a prerequisite file. (TaskId:7)
1&gt;      The ImageRuntimeVersion for this reference is "v4.0.30319". (TaskId:7)
1&gt;  Output Item(s):
1&gt;      ReferencePath=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0\System.Core.dll
1&gt;                  CopyLocal=false
1&gt;                  FrameworkFile=true
1&gt;                  FusionName=System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
1&gt;                  ImageRuntime=v4.0.30319
1&gt;                  Implicit=true
1&gt;                  OriginalItemSpec=System.Core
1&gt;                  Redist=Microsoft-Windows-CLRCoreComp.4.0
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={TargetFrameworkDirectory}
1&gt;                  Version=4.0.0.0 (TaskId:7)
1&gt;  Output Item(s):
1&gt;      _ResolveAssemblyReferenceResolvedFiles=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0\System.Core.dll
1&gt;                  CopyLocal=false
1&gt;                  FrameworkFile=true
1&gt;                  FusionName=System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
1&gt;                  ImageRuntime=v4.0.30319
1&gt;                  Implicit=true
1&gt;                  OriginalItemSpec=System.Core
1&gt;                  Redist=Microsoft-Windows-CLRCoreComp.4.0
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={TargetFrameworkDirectory}
1&gt;                  Version=4.0.0.0 (TaskId:7)
1&gt;  Output Item(s):
1&gt;      _ReferenceRelatedPaths=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0 (TaskId:7)
1&gt;  Output Item(s):
1&gt;      ReferenceCopyLocalPaths=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0 (TaskId:7)
1&gt;  Output Item(s): FileWrites=obj\Release\HtmlCore.csprojResolveAssemblyReference.cache (TaskId:7)
1&gt;  Output Property: DependsOnSystemRuntime=False (TaskId:7)
1&gt;Done executing task "ResolveAssemblyReference". (TaskId:7)
1&gt;Done building target "ResolveAssemblyReferences" in project "HtmlCore.csproj".: (TargetId:15)
1&gt;Target "GenerateBindingRedirects" skipped, due to false condition; ('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true') was evaluated as ('' == 'true' and '' == 'true').
1&gt;Target "GenerateBindingRedirectsUpdateAppConfig" skipped, due to false condition; ('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true' and Exists('$(_GenerateBindingRedirectsIntermediateAppConfig)')) was evaluated as ('' == 'true' and '' == 'true' and Exists('obj\Release\HtmlCore.csproj.HtmlCore.dll.config')).
1&gt;Target "ResolveComReferences" skipped, due to false condition; ('@(COMReference)'!='' or '@(COMFileReference)'!='') was evaluated as (''!='' or ''!='').
1&gt;Target "AfterResolveReferences: (TargetId:16)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResolveReferences" depends on it):
1&gt;Done building target "AfterResolveReferences" in project "HtmlCore.csproj".: (TargetId:16)
1&gt;Target "ImplicitlyExpandDesignTimeFacades" skipped, due to false condition; ('$(ImplicitlyExpandDesignTimeFacades)' == 'true') was evaluated as ('' == 'true').
1&gt;Target "ResolveTestReferences" skipped, due to false condition; ('@(Shadow)'!='') was evaluated as (''!='').
1&gt;Target "ResolveReferences: (TargetId:17)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreBuild" depends on it):
1&gt;Done building target "ResolveReferences" in project "HtmlCore.csproj".: (TargetId:17)
1&gt;Target "XamlMarkupCompilePass1" skipped, due to false condition; ('@(XamlPage)' != '' or '@(XamlAppDef)' != '') was evaluated as ('' != '' or '' != '').
1&gt;Target "XamlMarkupCompileReadGeneratedFileList" skipped, due to false condition; ('@(XamlPage)' != '' or '@(XamlAppDef)' != '') was evaluated as ('' != '' or '' != '').
1&gt;Target "XamlMarkupCompileAddFilesGenerated" skipped, due to false condition; ('@(XamlPage)' != '' or '@(XamlAppDef)' != '') was evaluated as ('' != '' or '' != '').
1&gt;Target "XamlMarkupCompilePass2" skipped, due to false condition; ('$(XamlRequiresCompilationPass2)' == 'true' ) was evaluated as ('false' == 'true' ).
1&gt;Target "XamlMarkupCompileReadPass2Flag" skipped, due to false condition; ('@(XamlPage)' != '' or '@(XamlAppDef)' != '') was evaluated as ('' != '' or '' != '').
1&gt;Target "XamlMarkupCompileAddExtensionFilesGenerated" skipped, due to false condition; ('@(XamlPage)' != '' or '@(XamlAppDef)' != '') was evaluated as ('' != '' or '' != '').
1&gt;Target "MarkupCompilePass1" skipped, due to false condition; ('@(Page)' != '' or '@(ApplicationDefinition)' != '' ) was evaluated as ('' != '' or '' != '' ).
1&gt;Target "AfterMarkupCompilePass1: (TargetId:18)" in file "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "PrepareResources" depends on it):
1&gt;Done building target "AfterMarkupCompilePass1" in project "HtmlCore.csproj".: (TargetId:18)
1&gt;Target "MarkupCompilePass2ForMainAssembly" skipped, due to false condition; ('$(_RequireMCPass2ForMainAssembly)' == 'true' ) was evaluated as ('false' == 'true' ).
1&gt;Target "FileClassification: (TargetId:19)" in file "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "PrepareResources" depends on it):
1&gt;Task "FileClassifier" skipped, due to false condition; ('@(GeneratedBaml)' != '' or '@(Resource)' != '' or '@(Font)' != '') was evaluated as ('' != '' or '' != '' or '' != '').
1&gt;Task "Message" skipped, due to false condition; ('$(MSBuildTargetsVerbose)'=='true') was evaluated as (''=='true').
1&gt;Task "Message" skipped, due to false condition; ('$(MSBuildTargetsVerbose)'=='true') was evaluated as (''=='true').
1&gt;Done building target "FileClassification" in project "HtmlCore.csproj".: (TargetId:19)
1&gt;Target "MainResourcesGeneration" skipped, due to false condition; ('@(MainEmbeddedFiles)' != '') was evaluated as ('' != '').
1&gt;Target "AssignWinFXEmbeddedResource" skipped, due to false condition; ('@(WinFXEmbeddedResource)' != '') was evaluated as ('' != '').
1&gt;Target "AssignTargetPaths: (TargetId:20)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "PrepareResourceNames" depends on it):
1&gt;Using "AssignTargetPath" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "AssignTargetPath" (TaskId:8)
1&gt;  Task Parameter:RootFolder=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore (TaskId:8)
1&gt;Done executing task "AssignTargetPath". (TaskId:8)
1&gt;Task "AssignTargetPath" (TaskId:9)
1&gt;  Task Parameter:RootFolder=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore (TaskId:9)
1&gt;Done executing task "AssignTargetPath". (TaskId:9)
1&gt;Task "AssignTargetPath" (TaskId:10)
1&gt;  Task Parameter:RootFolder=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore (TaskId:10)
1&gt;Done executing task "AssignTargetPath". (TaskId:10)
1&gt;Task "AssignTargetPath" (TaskId:11)
1&gt;  Task Parameter:RootFolder=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore (TaskId:11)
1&gt;Done executing task "AssignTargetPath". (TaskId:11)
1&gt;Task "AssignTargetPath" skipped, due to false condition; ('@(_DeploymentBaseManifestWithTargetPath)'=='' and '%(None.Extension)'=='.manifest') was evaluated as (''=='' and ''=='.manifest').
1&gt;Done building target "AssignTargetPaths" in project "HtmlCore.csproj".: (TargetId:20)
1&gt;Target "AssignTargetPaths" skipped. Previously built successfully.
1&gt;Target "SplitResourcesByCulture: (TargetId:21)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "PrepareResourceNames" depends on it):
1&gt;Task "Warning" skipped, due to false condition; ('@(ResxWithNoCulture)'!='') was evaluated as (''!='').
1&gt;Task "Warning" skipped, due to false condition; ('@(ResxWithCulture)'!='') was evaluated as (''!='').
1&gt;Task "Warning" skipped, due to false condition; ('@(NonResxWithCulture)'!='') was evaluated as (''!='').
1&gt;Task "Warning" skipped, due to false condition; ('@(NonResxWithNoCulture)'!='') was evaluated as (''!='').
1&gt;Using "AssignCulture" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "AssignCulture" (TaskId:12)
1&gt;Done executing task "AssignCulture". (TaskId:12)
1&gt;Done building target "SplitResourcesByCulture" in project "HtmlCore.csproj".: (TargetId:21)
1&gt;Target "CreateManifestResourceNames" skipped, due to false condition; ('@(EmbeddedResource)' != '') was evaluated as ('' != '').
1&gt;Target "CreateCustomManifestResourceNames: (TargetId:22)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "PrepareResourceNames" depends on it):
1&gt;Done building target "CreateCustomManifestResourceNames" in project "HtmlCore.csproj".: (TargetId:22)
1&gt;Target "PrepareResourceNames: (TargetId:23)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "PrepareResources" depends on it):
1&gt;Done building target "PrepareResourceNames" in project "HtmlCore.csproj".: (TargetId:23)
1&gt;Target "ResolveAssemblyReferences" skipped. Previously built successfully.
1&gt;Target "SplitResourcesByCulture" skipped. Previously built successfully.
1&gt;Target "BeforeResGen: (TargetId:24)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResGen" depends on it):
1&gt;Done building target "BeforeResGen" in project "HtmlCore.csproj".: (TargetId:24)
1&gt;Target "CoreResGen: (TargetId:25)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResGen" depends on it):
1&gt;Set Property: GenerateResourceMSBuildArchitecture=CurrentArchitecture
1&gt;Set Property: ResgenToolPath=C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6 Tools\
1&gt;Set Property: GenerateResourceMSBuildRuntime=CLR4
1&gt;Task "GenerateResource" skipped, due to false condition; ('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' != 'CLR2') was evaluated as ('' == 'Resx' and '' != 'false' and 'CLR4' != 'CLR2').
1&gt;Task "GenerateResource" skipped, due to false condition; ('%(EmbeddedResource.Type)' == 'Resx' and '%(EmbeddedResource.GenerateResource)' != 'false' and '$(GenerateResourceMSBuildRuntime)' == 'CLR2') was evaluated as ('' == 'Resx' and '' != 'false' and 'CLR4' == 'CLR2').
1&gt;Done building target "CoreResGen" in project "HtmlCore.csproj".: (TargetId:25)
1&gt;Target "AfterResGen: (TargetId:26)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "ResGen" depends on it):
1&gt;Done building target "AfterResGen" in project "HtmlCore.csproj".: (TargetId:26)
1&gt;Target "ResGen: (TargetId:27)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "PrepareResources" depends on it):
1&gt;Done building target "ResGen" in project "HtmlCore.csproj".: (TargetId:27)
1&gt;Target "CompileLicxFiles" skipped, due to false condition; ('@(_LicxFile)'!='') was evaluated as (''!='').
1&gt;Target "PrepareResources: (TargetId:28)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreBuild" depends on it):
1&gt;Done building target "PrepareResources" in project "HtmlCore.csproj".: (TargetId:28)
1&gt;Target "ResolveKeySource" skipped, due to false condition; ($(SignManifests) == 'true' or $(SignAssembly) == 'true') was evaluated as ( == 'true' or  == 'true').
1&gt;Target "ResolveReferences" skipped. Previously built successfully.
1&gt;Target "ResolveKeySource" skipped, due to false condition; ($(SignManifests) == 'true' or $(SignAssembly) == 'true') was evaluated as ( == 'true' or  == 'true').
1&gt;Target "ResolveComReferences" skipped, due to false condition; ('@(COMReference)'!='' or '@(COMFileReference)'!='') was evaluated as (''!='' or ''!='').
1&gt;Target "ResolveNativeReferences" skipped, due to false condition; ('@(NativeReference)'!='') was evaluated as (''!='').
1&gt;Target "_SetExternalWin32ManifestProperties" skipped, due to false condition; ('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='') was evaluated as (''=='true' or ''!='' or ''!='').
1&gt;Target "_SetEmbeddedWin32ManifestProperties: (TargetId:29)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "SetWin32ManifestProperties" depends on it):
1&gt;Set Property: EmbeddedWin32Manifest=
1&gt;Set Property: Win32Manifest=
1&gt;Using "GetFrameworkPath" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "GetFrameworkPath" (TaskId:13)
1&gt;  Output Property: _FrameworkVersion40Path=C:\Windows\Microsoft.NET\Framework\v4.0.30319 (TaskId:13)
1&gt;Done executing task "GetFrameworkPath". (TaskId:13)
1&gt;Set Property: EmbeddedWin32Manifest=C:\Windows\Microsoft.NET\Framework\v4.0.30319\default.win32manifest
1&gt;Done building target "_SetEmbeddedWin32ManifestProperties" in project "HtmlCore.csproj".: (TargetId:29)
1&gt;Target "SetWin32ManifestProperties: (TargetId:30)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "Compile" depends on it):
1&gt;Done building target "SetWin32ManifestProperties" in project "HtmlCore.csproj".: (TargetId:30)
1&gt;Target "_GenerateCompileInputs: (TargetId:31)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "Compile" depends on it):
1&gt;Task "Warning" skipped, due to false condition; ('@(ManifestResourceWithNoCulture)'!='' and '%(ManifestResourceWithNoCulture.EmittedForCompatibilityOnly)'=='') was evaluated as (''!='' and ''=='').
1&gt;Task "Warning" skipped, due to false condition; ('@(ManifestNonResxWithNoCultureOnDisk)'!='' and '%(ManifestNonResxWithNoCultureOnDisk.EmittedForCompatibilityOnly)'=='') was evaluated as (''!='' and ''=='').
1&gt;Done building target "_GenerateCompileInputs" in project "HtmlCore.csproj".: (TargetId:31)
1&gt;Target "PrepareForBuild" skipped. Previously built successfully.
1&gt;Target "GetReferenceAssemblyPaths" skipped. Previously built successfully.
1&gt;Target "_SetTargetFrameworkMonikerAttribute: (TargetId:32)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.CSharp.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "GenerateTargetFrameworkMonikerAttribute" depends on it):
1&gt;Set Property: TargetFrameworkMonikerAssemblyAttributeText=
1&gt;// &lt;autogenerated /&gt;
1&gt;using System%3b
1&gt;using System.Reflection%3b
1&gt;[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.0", FrameworkDisplayName = ".NET Framework 4")]
1&gt;
1&gt;Done building target "_SetTargetFrameworkMonikerAttribute" in project "HtmlCore.csproj".: (TargetId:32)
1&gt;Target "GenerateTargetFrameworkMonikerAttribute: (TargetId:33)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "BeforeCompile" depends on it):
1&gt;Skipping target "GenerateTargetFrameworkMonikerAttribute" because all output files are up-to-date with respect to the input files.
1&gt;Input files: C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.targets
1&gt;Output files: c:\Temp.NETFramework,Version=v4.0.AssemblyAttributes.cs
1&gt;Added Item(s): Compile=c:\Temp.NETFramework,Version=v4.0.AssemblyAttributes.cs
1&gt;Done building target "GenerateTargetFrameworkMonikerAttribute" in project "HtmlCore.csproj".: (TargetId:33)
1&gt;Target "GenerateAdditionalSources" skipped, due to false condition; ('@(AssemblyAttributes)' != '' and '$(GenerateAdditionalSources)' == 'true') was evaluated as ('' != '' and '' == 'true').
1&gt;Target "BeforeCompile: (TargetId:34)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "Compile" depends on it):
1&gt;Done building target "BeforeCompile" in project "HtmlCore.csproj".: (TargetId:34)
1&gt;Target "_TimeStampBeforeCompile" skipped, due to false condition; ('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library')) was evaluated as (''=='OnOutputUpdated' or (''=='true' and 'Library'=='library')).
1&gt;Target "DesignTimeXamlMarkupCompilation: (TargetId:35)" in file "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreCompile" depends on it):
1&gt;Task "MakeDir" skipped, due to false condition; ('@(XamlAppDef)' != '') was evaluated as ('' != '').
1&gt;Task "CallTarget" skipped, due to false condition; ('$(BuildingProject)' != 'true' and '@(XamlAppDef)' != '') was evaluated as ('true' != 'true' and '' != '').
1&gt;Done building target "DesignTimeXamlMarkupCompilation" in project "HtmlCore.csproj".: (TargetId:35)
1&gt;Target "CleanInProcessXamlGeneratedFiles" skipped, due to false condition; ('@(XamlAppDef)' != '') was evaluated as ('' != '').
1&gt;Target "DesignTimeMarkupCompilation: (TargetId:36)" in file "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreCompile" depends on it):
1&gt;Task "CallTarget" skipped, due to false condition; ('$(BuildingProject)' != 'true') was evaluated as ('true' != 'true').
1&gt;Done building target "DesignTimeMarkupCompilation" in project "HtmlCore.csproj".: (TargetId:36)
1&gt;Target "_ComputeNonExistentFileProperty" skipped, due to false condition; (('$(BuildingInsideVisualStudio)' == 'true') and ('$(BuildingOutOfProcess)' != 'true') and (('$(BuildingProject)' == 'false') or ('$(UseHostCompilerIfAvailable)' == 'true'))) was evaluated as (('true' == 'true') and ('true' != 'true') and (('true' == 'false') or ('true' == 'true'))).
1&gt;Target "ResolveCodeAnalysisRuleSet: (TargetId:37)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.CSharp.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreCompile" depends on it):
1&gt;Using "ResolveCodeAnalysisRuleSet" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "ResolveCodeAnalysisRuleSet" (TaskId:14)
1&gt;  Task Parameter:CodeAnalysisRuleSet=MinimumRecommendedRules.ruleset (TaskId:14)
1&gt;  Task Parameter:CodeAnalysisRuleSetDirectories=C:\Program Files (x86)\Microsoft Visual Studio 14.0\Team Tools\Static Analysis Tools\Rule Sets (TaskId:14)
1&gt;  Task Parameter:MSBuildProjectDirectory=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore (TaskId:14)
1&gt;  Output Property: ResolvedCodeAnalysisRuleSet=C:\Program Files %28x86%29\Microsoft Visual Studio 14.0\Team Tools\Static Analysis Tools\Rule Sets\MinimumRecommendedRules.ruleset (TaskId:14)
1&gt;Done executing task "ResolveCodeAnalysisRuleSet". (TaskId:14)
1&gt;Done building target "ResolveCodeAnalysisRuleSet" in project "HtmlCore.csproj".: (TargetId:37)
1&gt;Target "PreXsdCodeGen: (TargetId:38)" in file "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreCompile" depends on it):
1&gt;Set Property: XsdCodeGenPreCondition=False
1&gt;Using "CallTarget" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "CallTarget" (TaskId:15)
1&gt;  Task Parameter:Targets=CleanXsdCodeGen (TaskId:15)
1&gt;Target "CleanXsdCodeGen: (TargetId:39)" in file "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.ServiceModel.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "PreXsdCodeGen" depends on it):
1&gt;Using "Delete" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "Delete" (TaskId:16)
1&gt;Done executing task "Delete". (TaskId:16)
1&gt;Done building target "CleanXsdCodeGen" in project "HtmlCore.csproj".: (TargetId:39)
1&gt;Done executing task "CallTarget". (TaskId:15)
1&gt;Done building target "PreXsdCodeGen" in project "HtmlCore.csproj".: (TargetId:38)
1&gt;Target "XsdCodeGen" skipped, due to false condition; ( '$(XsdCodeGenPreCondition)' == 'True' ) was evaluated as ( 'False' == 'True' ).
1&gt;Target "CoreCompile: (TargetId:40)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.CSharp.Core.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "Compile" depends on it):
1&gt;Building target "CoreCompile" completely.
1&gt;Output file "obj\Release\HtmlCore.dll" does not exist.
1&gt;Set Property: NoWarn=;1701;1702
1&gt;Set Property: NoWarn=;1701;1702;2008
1&gt;Set Property: Prefer32Bit=false
1&gt;Set Property: UseSharedCompilation=true
1&gt;Using "Csc" task from assembly "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Build.Tasks.CodeAnalysis.dll".
1&gt;Task "Csc" (TaskId:17)
1&gt;  Task Parameter:CodeAnalysisRuleSet=C:\Program Files (x86)\Microsoft Visual Studio 14.0\Team Tools\Static Analysis Tools\Rule Sets\MinimumRecommendedRules.ruleset (TaskId:17)
1&gt;  Task Parameter:DebugType=pdbonly (TaskId:17)
1&gt;  Task Parameter:DefineConstants=TRACE (TaskId:17)
1&gt;  Task Parameter:DisabledWarnings=;1701;1702;2008 (TaskId:17)
1&gt;  Task Parameter:ErrorEndLocation=True (TaskId:17)
1&gt;  Task Parameter:ErrorReport=prompt (TaskId:17)
1&gt;  Task Parameter:FileAlignment=512 (TaskId:17)
1&gt;  Task Parameter:HighEntropyVA=False (TaskId:17)
1&gt;  Task Parameter:NoConfig=True (TaskId:17)
1&gt;  Task Parameter:NoStandardLib=True (TaskId:17)
1&gt;  Task Parameter:Optimize=True (TaskId:17)
1&gt;  Task Parameter:OutputAssembly=obj\Release\HtmlCore.dll (TaskId:17)
1&gt;  Task Parameter:Prefer32Bit=False (TaskId:17)
1&gt;  Task Parameter:PreferredUILang=en-US (TaskId:17)
1&gt;  Task Parameter:
1&gt;      References=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0\System.Core.dll
1&gt;                  CopyLocal=false
1&gt;                  FrameworkFile=true
1&gt;                  FusionName=System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
1&gt;                  ImageRuntime=v4.0.30319
1&gt;                  Implicit=true
1&gt;                  OriginalItemSpec=System.Core
1&gt;                  Redist=Microsoft-Windows-CLRCoreComp.4.0
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={TargetFrameworkDirectory}
1&gt;                  Version=4.0.0.0 (TaskId:17)
1&gt;  Task Parameter:
1&gt;      Sources=
1&gt;          Css\CaretPosition.cs
1&gt;          Css\ClientRect.cs
1&gt;          Css\ClientRectList.cs
1&gt;          Css\CSSFontFaceRule.cs
1&gt;          Css\CSSImportRule.cs
1&gt;          Css\CSSMediaRule.cs
1&gt;          Css\CSSNamespaceRule.cs
1&gt;          Css\CSSPageRule.cs
1&gt;          Css\CSSRule.cs
1&gt;          Css\CSSRuleList.cs
1&gt;          Css\CSSStyleDeclaration.cs
1&gt;          Css\CSSStyleRule.cs
1&gt;          Css\CSSStyleSheet.cs
1&gt;          Css\Document.cs
1&gt;          Css\Element.cs
1&gt;          Css\ElementCSSInlineStyle.cs
1&gt;          Css\HTMLElement.cs
1&gt;          Css\LinkStyle.cs
1&gt;          Css\MediaList.cs
1&gt;          Css\MediaQueryList.cs
1&gt;          Css\MouseEvent.cs
1&gt;          Css\Range.cs
1&gt;          Css\Screen.cs
1&gt;          Css\StyleSheet.cs
1&gt;          Css\StyleSheetList.cs
1&gt;          Css\Window.cs
1&gt;          Dom\AbstractView.cs
1&gt;          Dom\Attr.cs
1&gt;          Dom\CharacterData.cs
1&gt;          Dom\Comment.cs
1&gt;          Dom\Document.cs
1&gt;          Dom\DocumentFragment.cs
1&gt;          Dom\DocumentType.cs
1&gt;          Dom\DOMError.cs
1&gt;          Dom\DOMException.cs
1&gt;          Dom\DOMImplementation.cs
1&gt;          Dom\DOMTokenList.cs
1&gt;          Dom\Element.cs
1&gt;          Dom\HTMLCollection.cs
1&gt;          Dom\Node.cs
1&gt;          Dom\NodeIterator.cs
1&gt;          Dom\NodeList.cs
1&gt;          Dom\ProcessingInstruction.cs
1&gt;          Dom\Range.cs
1&gt;          Dom\Text.cs
1&gt;          Dom\Transferable.cs
1&gt;          Dom\TreeWalker.cs
1&gt;          Dom\XMLDocument.cs
1&gt;          Events\AnimationEvent.cs
1&gt;          Events\CustomEvent.cs
1&gt;          Events\DeviceOrientationEvent.cs
1&gt;          Events\DocumentEvent.cs
1&gt;          Events\Event.cs
1&gt;          Events\EventInit.cs
1&gt;          Events\EventListener.cs
1&gt;          Events\EventPhase.cs
1&gt;          Events\EventTarget.cs
1&gt;          Events\FocusEvent.cs
1&gt;          Events\InputEvent.cs
1&gt;          Events\KeyboardEvent.cs
1&gt;          Events\MouseEvent.cs
1&gt;          Events\MutationEventChangeType.cs
1&gt;          Events\MutationObserver.cs
1&gt;          Events\ProgressEvent.cs
1&gt;          Events\UIEvent.cs
1&gt;          Events\WheelEvent.cs
1&gt;          HtmlContext.cs
1&gt;          Html\Audio\AnalyserNode.cs
1&gt;          Html\Audio\AudioBuffer.cs
1&gt;          Html\Audio\AudioBufferSourceNode.cs
1&gt;          Html\Audio\AudioContext.cs
1&gt;          Html\Audio\AudioDestinationNode.cs
1&gt;          Html\Audio\AudioListener.cs
1&gt;          Html\Audio\AudioNode.cs
1&gt;          Html\Audio\AudioParam.cs
1&gt;          Html\Audio\AudioProcessingEvent.cs
1&gt;          Html\Audio\BiquadFilterNode.cs
1&gt;          Html\Audio\BiquadFilterType.cs
1&gt;          Html\Audio\ChannelCountMode.cs
1&gt;          Html\Audio\ChannelInterpretation.cs
1&gt;          Html\Audio\ChannelMergerNode.cs
1&gt;          Html\Audio\ChannelSplitterNode.cs
1&gt;          Html\Audio\ConvolverNode.cs
1&gt;          Html\Audio\DelayNode.cs
1&gt;          Html\Audio\DistanceModelType.cs
1&gt;          Html\Audio\DynamicsCompressorNode.cs
1&gt;          Html\Audio\GainNode.cs
1&gt;          Html\Audio\MediaElementAudioSourceNode.cs
1&gt;          Html\Audio\MediaStreamAudioDestinationNode.cs
1&gt;          Html\Audio\MediaStreamAudioSourceNode.cs
1&gt;          Html\Audio\OfflineAudioCompletionEvent.cs
1&gt;          Html\Audio\OfflineAudioContext.cs
1&gt;          Html\Audio\OscillatorNode.cs
1&gt;          Html\Audio\OscillatorType.cs
1&gt;          Html\Audio\OverSampleType.cs
1&gt;          Html\Audio\PannerNode.cs
1&gt;          Html\Audio\PanningModelType.cs
1&gt;          Html\Audio\PeriodicWave.cs
1&gt;          Html\Audio\ScriptProcessorNode.cs
1&gt;          Html\Audio\WaveShaperNode.cs
1&gt;          Html\BarProp.cs
1&gt;          Html\Canvas\CanvasDrawingStyles.cs
1&gt;          Html\Canvas\CanvasGradient.cs
1&gt;          Html\Canvas\CanvasPathMethods.cs
1&gt;          Html\Canvas\CanvasPattern.cs
1&gt;          Html\Canvas\CanvasProxy.cs
1&gt;          Html\Canvas\CanvasRenderingContext2D.cs
1&gt;          Html\Canvas\Enums\CanvasDrawingStyleBaseline.cs
1&gt;          Html\Canvas\Enums\CanvasDrawingStyleLineCap.cs
1&gt;          Html\Canvas\Enums\CanvasDrawingStyleLineJoin.cs
1&gt;          Html\Canvas\Enums\CanvasDrawingStyleTextAlign.cs
1&gt;          Html\Canvas\Enums\CanvasDrawingStyleTextDirection.cs
1&gt;          Html\Canvas\Enums\CanvasFillRule.cs
1&gt;          Html\Canvas\HitRegionOptions.cs
1&gt;          Html\Canvas\HTMLCanvasElement.cs
1&gt;          Html\Canvas\ImageData.cs
1&gt;          Html\Canvas\Path.cs
1&gt;          Html\Canvas\TextMetrics.cs
1&gt;          Html\Clipboard\DragEvent.cs
1&gt;          Html\Communication\EventSource.cs
1&gt;          Html\Communication\MessageChannel.cs
1&gt;          Html\Communication\MessageEvent.cs
1&gt;          Html\Communication\MessagePort.cs
1&gt;          Html\Document.cs
1&gt;          Html\DOMStringMap.cs
1&gt;          Html\DragNDrop\DataTransfer.cs
1&gt;          Html\DragNDrop\DataTransferItem.cs
1&gt;          Html\DragNDrop\DataTransferItemList.cs
1&gt;          Html\DragNDrop\DragEvent.cs
1&gt;          Html\Edits\HTMLModElement.cs
1&gt;          Html\Elements\HTMLBaseElement.cs
1&gt;          Html\Elements\HTMLHeadElement.cs
1&gt;          Html\Elements\HTMLHtmlElement.cs
1&gt;          Html\Elements\HTMLLinkElement.cs
1&gt;          Html\Elements\HTMLMediaElement.cs
1&gt;          Html\Elements\HTMLMetaElement.cs
1&gt;          Html\Elements\HTMLStyleElement.cs
1&gt;          Html\Elements\HTMLTitleElement.cs
1&gt;          Html\Embedded\HTMLEmbedElement.cs
1&gt;          Html\Embedded\HTMLIFrameElement.cs
1&gt;          Html\Embedded\HTMLImageElement.cs
1&gt;          Html\Embedded\HTMLObjectElement.cs
1&gt;          Html\Embedded\HTMLParamElement.cs
1&gt;          Html\Enums\ApplicationCacheStatus.cs
1&gt;          Html\Enums\CommandStateType.cs
1&gt;          Html\Enums\DataTransferItemKind.cs
1&gt;          Html\Enums\DragDropEffect.cs
1&gt;          Html\Enums\DragDropEffectAllowed.cs
1&gt;          Html\Enums\FormAutocompleteState.cs
1&gt;          Html\Enums\FormInputType.cs
1&gt;          Html\Enums\FormSubmitionEncodingType.cs
1&gt;          Html\Enums\FormSubmitMethod.cs
1&gt;          Html\Enums\HtmlTextDirectionality.cs
1&gt;          Html\Enums\MenuStateType.cs
1&gt;          Html\Enums\OrderedListMarkerType.cs
1&gt;          Html\Enums\ProtocolHandlerState.cs
1&gt;          Html\Enums\SelectionMode.cs
1&gt;          Html\Enums\TableHeaderScope.cs
1&gt;          Html\Enums\TextAreaWrapMode.cs
1&gt;          Html\External.cs
1&gt;          Html\FileSystem\Blob.cs
1&gt;          Html\FileSystem\Callbacks.cs
1&gt;          Html\FileSystem\DirectoryEntry.cs
1&gt;          Html\FileSystem\DirectoryReader.cs
1&gt;          Html\FileSystem\Entry.cs
1&gt;          Html\FileSystem\File.cs
1&gt;          Html\FileSystem\FileEntry.cs
1&gt;          Html\FileSystem\FileReader.cs
1&gt;          Html\FileSystem\FileSaver.cs
1&gt;          Html\FileSystem\FileSystem.cs
1&gt;          Html\FileSystem\FileWriter.cs
1&gt;          Html\FileSystem\Flags.cs
1&gt;          Html\FileSystem\LocalFileSystem.cs
1&gt;          Html\FileSystem\Metadata.cs
1&gt;          Html\Forms\HTMLButtonElement.cs
1&gt;          Html\Forms\HTMLDataListElement.cs
1&gt;          Html\Forms\HTMLFieldSetElement.cs
1&gt;          Html\Forms\HTMLFormElement.cs
1&gt;          Html\Forms\HTMLInputElement.cs
1&gt;          Html\Forms\HTMLKeygenElement.cs
1&gt;          Html\Forms\HTMLLabelElement.cs
1&gt;          Html\Forms\HTMLLegendElement.cs
1&gt;          Html\Forms\HTMLMeterElement.cs
1&gt;          Html\Forms\HTMLOptGroupElement.cs
1&gt;          Html\Forms\HTMLOptionBaseElement.cs
1&gt;          Html\Forms\HTMLOptionElement.cs
1&gt;          Html\Forms\HTMLOutputElement.cs
1&gt;          Html\Forms\HTMLProgressElement.cs
1&gt;          Html\Forms\HTMLSelectElement.cs
1&gt;          Html\Forms\HTMLTextAreaElement.cs
1&gt;          Html\Forms\IHTMLInputNodeElement.cs
1&gt;          Html\Forms\ValidityState.cs
1&gt;          Html\Grouping\HTMLDivElement.cs
1&gt;          Html\Grouping\HTMLDListElement.cs
1&gt;          Html\Grouping\HTMLHRElement.cs
1&gt;          Html\Grouping\HTMLLIElement.cs
1&gt;          Html\Grouping\HTMLOListElement.cs
1&gt;          Html\Grouping\HTMLParagraphElement.cs
1&gt;          Html\Grouping\HTMLPreElement.cs
1&gt;          Html\Grouping\HTMLQuoteElement.cs
1&gt;          Html\Grouping\HTMLUListElement.cs
1&gt;          Html\HistoryNavigation\BeforeUnloadEvent.cs
1&gt;          Html\HistoryNavigation\HashChangeEvent.cs
1&gt;          Html\HistoryNavigation\History.cs
1&gt;          Html\HistoryNavigation\Location.cs
1&gt;          Html\HistoryNavigation\PageTransitionEvent.cs
1&gt;          Html\HistoryNavigation\PopStateEvent.cs
1&gt;          Html\HTMLAllCollection.cs
1&gt;          Html\HtmlContentDesignMode.cs
1&gt;          Html\HtmlContentEditable.cs
1&gt;          Html\HTMLElement.cs
1&gt;          Html\HTMLFormControlsCollection.cs
1&gt;          Html\HTMLOptionsCollection.cs
1&gt;          Html\HTMLPropertiesCollection.cs
1&gt;          Html\Interactive\HTMLCommandElement.cs
1&gt;          Html\Interactive\HTMLDetailsElement.cs
1&gt;          Html\Interactive\HTMLDialogElement.cs
1&gt;          Html\Interactive\HTMLMenuElement.cs
1&gt;          Html\Map\HTMLAreaElement.cs
1&gt;          Html\Map\HTMLMapElement.cs
1&gt;          Html\Media\AudioTrack.cs
1&gt;          Html\Media\AudioTrackList.cs
1&gt;          Html\Media\AudioVideoTrackKind.cs
1&gt;          Html\Media\HTMLAudioElement.cs
1&gt;          Html\Media\HTMLSourceElement.cs
1&gt;          Html\Media\HTMLTrackElement.cs
1&gt;          Html\Media\HTMLVideoElement.cs
1&gt;          Html\Media\MediaCanPlayType.cs
1&gt;          Html\Media\MediaController.cs
1&gt;          Html\Media\MediaError.cs
1&gt;          Html\Media\MediaErrorCode.cs
1&gt;          Html\Media\MediaNetworkState.cs
1&gt;          Html\Media\MediaReadyState.cs
1&gt;          Html\Media\MediaStream.cs
1&gt;          Html\Media\MediaStreamTrack.cs
1&gt;          Html\Media\MediaStreamTrackEvent.cs
1&gt;          Html\Media\MediaStreamTrackEventInit.cs
1&gt;          Html\Media\MediaStreamTrackState.cs
1&gt;          Html\Media\PreloadState.cs
1&gt;          Html\Media\TextTrack.cs
1&gt;          Html\Media\TextTrackCue.cs
1&gt;          Html\Media\TextTrackCueList.cs
1&gt;          Html\Media\TextTrackList.cs
1&gt;          Html\Media\TextTrackMode.cs
1&gt;          Html\Media\TimeRanges.cs
1&gt;          Html\Media\TrackEvent.cs
1&gt;          Html\Media\TrackEventInit.cs
1&gt;          Html\Media\TrackKind.cs
1&gt;          Html\Media\VideoTrack.cs
1&gt;          Html\Media\VideoTrackList.cs
1&gt;          Html\Media\XOriginResourceSharingType.cs
1&gt;          Html\Navigator.cs
1&gt;          Html\Notifications\INotification.cs
1&gt;          Html\Notifications\Notification.cs
1&gt;          Html\Notifications\NotificationDirection.cs
1&gt;          Html\Notifications\NotificationOptions.cs
1&gt;          Html\Notifications\NotificationPermission.cs
1&gt;          Html\Offline\HashChangeEvent.cs
1&gt;          Html\Offline\NavigatorOnLine.cs
1&gt;          Html\PageVisibility.cs
1&gt;          Html\Screen\Document.cs
1&gt;          Html\Scripting\HTMLScriptElement.cs
1&gt;          Html\Sections\HTMLBodyElement.cs
1&gt;          Html\Sections\HTMLHeadingElement.cs
1&gt;          Html\Storage\Storage.cs
1&gt;          Html\Storage\StorageEvent.cs
1&gt;          Html\Storage\WindowLocalStorage.cs
1&gt;          Html\Storage\WindowSessionStorage.cs
1&gt;          Html\Svg\SVGMatrix.cs
1&gt;          Html\Tables\HTMLTableCaptionElement.cs
1&gt;          Html\Tables\HTMLTableCellElement.cs
1&gt;          Html\Tables\HTMLTableColElement.cs
1&gt;          Html\Tables\HTMLTableDataCellElement.cs
1&gt;          Html\Tables\HTMLTableElement.cs
1&gt;          Html\Tables\HTMLTableHeaderCellElement.cs
1&gt;          Html\Tables\HTMLTableRowElement.cs
1&gt;          Html\Tables\HTMLTableSectionElement.cs
1&gt;          Html\TextLevel\HTMLAnchorElement.cs
1&gt;          Html\TextLevel\HTMLBRElement.cs
1&gt;          Html\TextLevel\HTMLDataElement.cs
1&gt;          Html\TextLevel\HTMLSpanElement.cs
1&gt;          Html\TextLevel\HTMLTimeElement.cs
1&gt;          Html\TypedArrays\ArrayBuffer.cs
1&gt;          Html\TypedArrays\ArrayBufferView.cs
1&gt;          Html\TypedArrays\DataView.cs
1&gt;          Html\TypedArrays\Float32Array.cs
1&gt;          Html\TypedArrays\Float64Array.cs
1&gt;          Html\TypedArrays\Int16Array.cs
1&gt;          Html\TypedArrays\Int32Array.cs
1&gt;          Html\TypedArrays\Int8Array.cs
1&gt;          Html\TypedArrays\TypedArray.cs
1&gt;          Html\TypedArrays\Uint16Array.cs
1&gt;          Html\TypedArrays\Uint32Array.cs
1&gt;          Html\TypedArrays\Uint8Array.cs
1&gt;          Html\TypedArrays\Uint8ClampedArray.cs
1&gt;          Html\WindowAnimationTiming.cs
1&gt;          Html\WindowBase64.cs
1&gt;          Html\WindowModal.cs
1&gt;          Html\WindowTimers.cs
1&gt;          Html\WindowTimersExtension.cs
1&gt;          Properties\AssemblyInfo.cs
1&gt;          Window.cs
1&gt;          c:\Temp.NETFramework,Version=v4.0.AssemblyAttributes.cs (TaskId:17)
1&gt;  Task Parameter:TargetType=Library (TaskId:17)
1&gt;  Task Parameter:UseHostCompilerIfAvailable=True (TaskId:17)
1&gt;  Task Parameter:UseSharedCompilation=True (TaskId:17)
1&gt;  Task Parameter:Utf8Output=True (TaskId:17)
1&gt;  Task Parameter:WarningLevel=4 (TaskId:17)
1&gt;  C:\Program Files (x86)\MSBuild\14.0\bin\csc.exe /noconfig /nowarn:1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE /errorendlocation /preferreduilang:en-US /highentropyva- /reference:"D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0\System.Core.dll" /debug:pdbonly /filealign:512 /optimize+ /out:obj\Release\HtmlCore.dll /ruleset:"C:\Program Files (x86)\Microsoft Visual Studio 14.0\Team Tools\Static Analysis Tools\Rule Sets\MinimumRecommendedRules.ruleset" /target:library /utf8output Css\CaretPosition.cs Css\ClientRect.cs Css\ClientRectList.cs Css\CSSFontFaceRule.cs Css\CSSImportRule.cs Css\CSSMediaRule.cs Css\CSSNamespaceRule.cs Css\CSSPageRule.cs Css\CSSRule.cs Css\CSSRuleList.cs Css\CSSStyleDeclaration.cs Css\CSSStyleRule.cs Css\CSSStyleSheet.cs Css\Document.cs Css\Element.cs Css\ElementCSSInlineStyle.cs Css\HTMLElement.cs Css\LinkStyle.cs Css\MediaList.cs Css\MediaQueryList.cs Css\MouseEvent.cs Css\Range.cs Css\Screen.cs Css\StyleSheet.cs Css\StyleSheetList.cs Css\Window.cs Dom\AbstractView.cs Dom\Attr.cs Dom\CharacterData.cs Dom\Comment.cs Dom\Document.cs Dom\DocumentFragment.cs Dom\DocumentType.cs Dom\DOMError.cs Dom\DOMException.cs Dom\DOMImplementation.cs Dom\DOMTokenList.cs Dom\Element.cs Dom\HTMLCollection.cs Dom\Node.cs Dom\NodeIterator.cs Dom\NodeList.cs Dom\ProcessingInstruction.cs Dom\Range.cs Dom\Text.cs Dom\Transferable.cs Dom\TreeWalker.cs Dom\XMLDocument.cs Events\AnimationEvent.cs Events\CustomEvent.cs Events\DeviceOrientationEvent.cs Events\DocumentEvent.cs Events\Event.cs Events\EventInit.cs Events\EventListener.cs Events\EventPhase.cs Events\EventTarget.cs Events\FocusEvent.cs Events\InputEvent.cs Events\KeyboardEvent.cs Events\MouseEvent.cs Events\MutationEventChangeType.cs Events\MutationObserver.cs Events\ProgressEvent.cs Events\UIEvent.cs Events\WheelEvent.cs HtmlContext.cs Html\Audio\AnalyserNode.cs Html\Audio\AudioBuffer.cs Html\Audio\AudioBufferSourceNode.cs Html\Audio\AudioContext.cs Html\Audio\AudioDestinationNode.cs Html\Audio\AudioListener.cs Html\Audio\AudioNode.cs Html\Audio\AudioParam.cs Html\Audio\AudioProcessingEvent.cs Html\Audio\BiquadFilterNode.cs Html\Audio\BiquadFilterType.cs Html\Audio\ChannelCountMode.cs Html\Audio\ChannelInterpretation.cs Html\Audio\ChannelMergerNode.cs Html\Audio\ChannelSplitterNode.cs Html\Audio\ConvolverNode.cs Html\Audio\DelayNode.cs Html\Audio\DistanceModelType.cs Html\Audio\DynamicsCompressorNode.cs Html\Audio\GainNode.cs Html\Audio\MediaElementAudioSourceNode.cs Html\Audio\MediaStreamAudioDestinationNode.cs Html\Audio\MediaStreamAudioSourceNode.cs Html\Audio\OfflineAudioCompletionEvent.cs Html\Audio\OfflineAudioContext.cs Html\Audio\OscillatorNode.cs Html\Audio\OscillatorType.cs Html\Audio\OverSampleType.cs Html\Audio\PannerNode.cs Html\Audio\PanningModelType.cs Html\Audio\PeriodicWave.cs Html\Audio\ScriptProcessorNode.cs Html\Audio\WaveShaperNode.cs Html\BarProp.cs Html\Canvas\CanvasDrawingStyles.cs Html\Canvas\CanvasGradient.cs Html\Canvas\CanvasPathMethods.cs Html\Canvas\CanvasPattern.cs Html\Canvas\CanvasProxy.cs Html\Canvas\CanvasRenderingContext2D.cs Html\Canvas\Enums\CanvasDrawingStyleBaseline.cs Html\Canvas\Enums\CanvasDrawingStyleLineCap.cs Html\Canvas\Enums\CanvasDrawingStyleLineJoin.cs Html\Canvas\Enums\CanvasDrawingStyleTextAlign.cs Html\Canvas\Enums\CanvasDrawingStyleTextDirection.cs Html\Canvas\Enums\CanvasFillRule.cs Html\Canvas\HitRegionOptions.cs Html\Canvas\HTMLCanvasElement.cs Html\Canvas\ImageData.cs Html\Canvas\Path.cs Html\Canvas\TextMetrics.cs Html\Clipboard\DragEvent.cs Html\Communication\EventSource.cs Html\Communication\MessageChannel.cs Html\Communication\MessageEvent.cs Html\Communication\MessagePort.cs Html\Document.cs Html\DOMStringMap.cs Html\DragNDrop\DataTransfer.cs Html\DragNDrop\DataTransferItem.cs Html\DragNDrop\DataTransferItemList.cs Html\DragNDrop\DragEvent.cs Html\Edits\HTMLModElement.cs Html\Elements\HTMLBaseElement.cs Html\Elements\HTMLHeadElement.cs Html\Elements\HTMLHtmlElement.cs Html\Elements\HTMLLinkElement.cs Html\Elements\HTMLMediaElement.cs Html\Elements\HTMLMetaElement.cs Html\Elements\HTMLStyleElement.cs Html\Elements\HTMLTitleElement.cs Html\Embedded\HTMLEmbedElement.cs Html\Embedded\HTMLIFrameElement.cs Html\Embedded\HTMLImageElement.cs Html\Embedded\HTMLObjectElement.cs Html\Embedded\HTMLParamElement.cs Html\Enums\ApplicationCacheStatus.cs Html\Enums\CommandStateType.cs Html\Enums\DataTransferItemKind.cs Html\Enums\DragDropEffect.cs Html\Enums\DragDropEffectAllowed.cs Html\Enums\FormAutocompleteState.cs Html\Enums\FormInputType.cs Html\Enums\FormSubmitionEncodingType.cs Html\Enums\FormSubmitMethod.cs Html\Enums\HtmlTextDirectionality.cs Html\Enums\MenuStateType.cs Html\Enums\OrderedListMarkerType.cs Html\Enums\ProtocolHandlerState.cs Html\Enums\SelectionMode.cs Html\Enums\TableHeaderScope.cs Html\Enums\TextAreaWrapMode.cs Html\External.cs Html\FileSystem\Blob.cs Html\FileSystem\Callbacks.cs Html\FileSystem\DirectoryEntry.cs Html\FileSystem\DirectoryReader.cs Html\FileSystem\Entry.cs Html\FileSystem\File.cs Html\FileSystem\FileEntry.cs Html\FileSystem\FileReader.cs Html\FileSystem\FileSaver.cs Html\FileSystem\FileSystem.cs Html\FileSystem\FileWriter.cs Html\FileSystem\Flags.cs Html\FileSystem\LocalFileSystem.cs Html\FileSystem\Metadata.cs Html\Forms\HTMLButtonElement.cs Html\Forms\HTMLDataListElement.cs Html\Forms\HTMLFieldSetElement.cs Html\Forms\HTMLFormElement.cs Html\Forms\HTMLInputElement.cs Html\Forms\HTMLKeygenElement.cs Html\Forms\HTMLLabelElement.cs Html\Forms\HTMLLegendElement.cs Html\Forms\HTMLMeterElement.cs Html\Forms\HTMLOptGroupElement.cs Html\Forms\HTMLOptionBaseElement.cs Html\Forms\HTMLOptionElement.cs Html\Forms\HTMLOutputElement.cs Html\Forms\HTMLProgressElement.cs Html\Forms\HTMLSelectElement.cs Html\Forms\HTMLTextAreaElement.cs Html\Forms\IHTMLInputNodeElement.cs Html\Forms\ValidityState.cs Html\Grouping\HTMLDivElement.cs Html\Grouping\HTMLDListElement.cs Html\Grouping\HTMLHRElement.cs Html\Grouping\HTMLLIElement.cs Html\Grouping\HTMLOListElement.cs Html\Grouping\HTMLParagraphElement.cs Html\Grouping\HTMLPreElement.cs Html\Grouping\HTMLQuoteElement.cs Html\Grouping\HTMLUListElement.cs Html\HistoryNavigation\BeforeUnloadEvent.cs Html\HistoryNavigation\HashChangeEvent.cs Html\HistoryNavigation\History.cs Html\HistoryNavigation\Location.cs Html\HistoryNavigation\PageTransitionEvent.cs Html\HistoryNavigation\PopStateEvent.cs Html\HTMLAllCollection.cs Html\HtmlContentDesignMode.cs Html\HtmlContentEditable.cs Html\HTMLElement.cs Html\HTMLFormControlsCollection.cs Html\HTMLOptionsCollection.cs Html\HTMLPropertiesCollection.cs Html\Interactive\HTMLCommandElement.cs Html\Interactive\HTMLDetailsElement.cs Html\Interactive\HTMLDialogElement.cs Html\Interactive\HTMLMenuElement.cs Html\Map\HTMLAreaElement.cs Html\Map\HTMLMapElement.cs Html\Media\AudioTrack.cs Html\Media\AudioTrackList.cs Html\Media\AudioVideoTrackKind.cs Html\Media\HTMLAudioElement.cs Html\Media\HTMLSourceElement.cs Html\Media\HTMLTrackElement.cs Html\Media\HTMLVideoElement.cs Html\Media\MediaCanPlayType.cs Html\Media\MediaController.cs Html\Media\MediaError.cs Html\Media\MediaErrorCode.cs Html\Media\MediaNetworkState.cs Html\Media\MediaReadyState.cs Html\Media\MediaStream.cs Html\Media\MediaStreamTrack.cs Html\Media\MediaStreamTrackEvent.cs Html\Media\MediaStreamTrackEventInit.cs Html\Media\MediaStreamTrackState.cs Html\Media\PreloadState.cs Html\Media\TextTrack.cs Html\Media\TextTrackCue.cs Html\Media\TextTrackCueList.cs Html\Media\TextTrackList.cs Html\Media\TextTrackMode.cs Html\Media\TimeRanges.cs Html\Media\TrackEvent.cs Html\Media\TrackEventInit.cs Html\Media\TrackKind.cs Html\Media\VideoTrack.cs Html\Media\VideoTrackList.cs Html\Media\XOriginResourceSharingType.cs Html\Navigator.cs Html\Notifications\INotification.cs Html\Notifications\Notification.cs Html\Notifications\NotificationDirection.cs Html\Notifications\NotificationOptions.cs Html\Notifications\NotificationPermission.cs Html\Offline\HashChangeEvent.cs Html\Offline\NavigatorOnLine.cs Html\PageVisibility.cs Html\Screen\Document.cs Html\Scripting\HTMLScriptElement.cs Html\Sections\HTMLBodyElement.cs Html\Sections\HTMLHeadingElement.cs Html\Storage\Storage.cs Html\Storage\StorageEvent.cs Html\Storage\WindowLocalStorage.cs Html\Storage\WindowSessionStorage.cs Html\Svg\SVGMatrix.cs Html\Tables\HTMLTableCaptionElement.cs Html\Tables\HTMLTableCellElement.cs Html\Tables\HTMLTableColElement.cs Html\Tables\HTMLTableDataCellElement.cs Html\Tables\HTMLTableElement.cs Html\Tables\HTMLTableHeaderCellElement.cs Html\Tables\HTMLTableRowElement.cs Html\Tables\HTMLTableSectionElement.cs Html\TextLevel\HTMLAnchorElement.cs Html\TextLevel\HTMLBRElement.cs Html\TextLevel\HTMLDataElement.cs Html\TextLevel\HTMLSpanElement.cs Html\TextLevel\HTMLTimeElement.cs Html\TypedArrays\ArrayBuffer.cs Html\TypedArrays\ArrayBufferView.cs Html\TypedArrays\DataView.cs Html\TypedArrays\Float32Array.cs Html\TypedArrays\Float64Array.cs Html\TypedArrays\Int16Array.cs Html\TypedArrays\Int32Array.cs Html\TypedArrays\Int8Array.cs Html\TypedArrays\TypedArray.cs Html\TypedArrays\Uint16Array.cs Html\TypedArrays\Uint32Array.cs Html\TypedArrays\Uint8Array.cs Html\TypedArrays\Uint8ClampedArray.cs Html\WindowAnimationTiming.cs Html\WindowBase64.cs Html\WindowModal.cs Html\WindowTimers.cs Html\WindowTimersExtension.cs Properties\AssemblyInfo.cs Window.cs "c:\Temp.NETFramework,Version=v4.0.AssemblyAttributes.cs" (TaskId:17)
1&gt;  Microsoft (R) Visual C# Compiler version 1.0.0.50618 (TaskId:17)
1&gt;  Copyright (C) Microsoft Corporation. All rights reserved. (TaskId:17)
1&gt;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\Html\Document.cs(121,15,121,26): warning CS0108: 'Document.defaultView' hides inherited member 'DocumentView.defaultView'. Use the new keyword if hiding was intended.
1&gt;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\Events\UIEvent.cs(24,23,24,27): warning CS0108: 'UIEvent.view' hides inherited member 'Event.view'. Use the new keyword if hiding was intended.
1&gt;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\Html\Media\MediaStreamTrackEventInit.cs(7,20,7,25): warning CS0169: The field 'MediaStreamTrackEventInit.track' is never used
1&gt;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\Html\Canvas\HitRegionOptions.cs(9,10,9,12): warning CS0414: The field 'HitRegionOptions.id' is assigned but its value is never used
1&gt;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\Html\Canvas\HitRegionOptions.cs(11,10,11,16): warning CS0414: The field 'HitRegionOptions.cursor' is assigned but its value is never used
1&gt;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\Html\Canvas\HitRegionOptions.cs(13,11,13,18): warning CS0414: The field 'HitRegionOptions.control' is assigned but its value is never used
1&gt;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\Html\Canvas\HitRegionOptions.cs(8,18,8,26): warning CS0414: The field 'HitRegionOptions.fillRule' is assigned but its value is never used
1&gt;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\Html\Canvas\HitRegionOptions.cs(7,8,7,12): warning CS0414: The field 'HitRegionOptions.path' is assigned but its value is never used
1&gt;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\Html\Canvas\HitRegionOptions.cs(16,10,16,14): warning CS0414: The field 'HitRegionOptions.role' is assigned but its value is never used
1&gt;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\Html\Canvas\HitRegionOptions.cs(10,10,10,18): warning CS0414: The field 'HitRegionOptions.parentID' is assigned but its value is never used
1&gt;D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\Html\Canvas\HitRegionOptions.cs(15,10,15,15): warning CS0414: The field 'HitRegionOptions.label' is assigned but its value is never used
1&gt;Done executing task "Csc". (TaskId:17)
1&gt;Task "CallTarget" skipped, due to false condition; ('$(TargetsTriggeredByCompilation)' != '') was evaluated as ('' != '').
1&gt;Done building target "CoreCompile" in project "HtmlCore.csproj".: (TargetId:40)
1&gt;Target "_TimeStampAfterCompile" skipped, due to false condition; ('$(RunPostBuildEvent)'=='OnOutputUpdated' or ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library')) was evaluated as (''=='OnOutputUpdated' or (''=='true' and 'Library'=='library')).
1&gt;Target "AfterCompile: (TargetId:41)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "Compile" depends on it):
1&gt;Done building target "AfterCompile" in project "HtmlCore.csproj".: (TargetId:41)
1&gt;Target "CreateTfsBuildInfoResource" skipped, due to false condition; ( $(AddBuildInfoToAssembly)==true ) was evaluated as ( false==true ).
1&gt;Target "CreateTfsBuildInfoFile" skipped, due to false condition; ( $(GenerateBuildInfoConfigFile)==true AND $(WebProjectOutputDir)!='') was evaluated as ( false==true AND !='').
1&gt;Target "SetBuildInfoDefaults: (TargetId:42)" in file "C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\BuildInfo\Microsoft.VisualStudio.ReleaseManagement.BuildInfo.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "DeleteBuildInfoFile" depends on it):
1&gt;Set Property: BuildId=AutoGen_4344e05e-8c6d-4fd3-af7d-e105131af313
1&gt;Set Property: BuildLabel=AutoGen_4344e05e-8c6d-4fd3-af7d-e105131af313
1&gt;Set Property: BuildTimestamp=Thu, 01 Oct 2015 13:04:02 GMT
1&gt;Set Property: BuildInfoPath=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\
1&gt;Set Property: BuildInfoFileName=HtmlCore.BuildInfo.config
1&gt;Set Property: BuildInfoResourceFileName= obj\Release\HtmlCore.BuildInfo.config
1&gt;Set Property: BuildInfoConfigFileName= D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.BuildInfo.config
1&gt;Set Property: BuildInfoResourceLogicalName=Microsoft.VisualStudio.BuildInfo.Config
1&gt;Done building target "SetBuildInfoDefaults" in project "HtmlCore.csproj".: (TargetId:42)
1&gt;Target "DeleteBuildInfoFile: (TargetId:43)" in file "C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\BuildInfo\Microsoft.VisualStudio.ReleaseManagement.BuildInfo.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "Compile" depends on it):
1&gt;Task "Delete" skipped, due to false condition; (EXISTS('$(BuildInfoConfigFileName)')) was evaluated as (EXISTS(' D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.BuildInfo.config')).
1&gt;Done building target "DeleteBuildInfoFile" in project "HtmlCore.csproj".: (TargetId:43)
1&gt;Target "SetBuildInfoDefaults" skipped. Previously built successfully.
1&gt;Target "DeleteBuildInfoResource: (TargetId:44)" in file "C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\BuildInfo\Microsoft.VisualStudio.ReleaseManagement.BuildInfo.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "Compile" depends on it):
1&gt;Task "Delete" skipped, due to false condition; (EXISTS('$(BuildInfoResourceFileName)')) was evaluated as (EXISTS(' obj\Release\HtmlCore.BuildInfo.config')).
1&gt;Done building target "DeleteBuildInfoResource" in project "HtmlCore.csproj".: (TargetId:44)
1&gt;Target "PrepareResourcesForSatelliteAssemblies" skipped, due to false condition; ('$(UICulture)' != '') was evaluated as ('' != '').
1&gt;Target "MergeLocalizationDirectives" skipped, due to false condition; ('@(GeneratedLocalizationFiles)' !='') was evaluated as ('' !='').
1&gt;Target "AfterCompileWinFX: (TargetId:45)" in file "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "_AfterCompileWinFXInternal" depends on it):
1&gt;Done building target "AfterCompileWinFX" in project "HtmlCore.csproj".: (TargetId:45)
1&gt;Target "_AfterCompileWinFXInternal: (TargetId:46)" in file "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "Compile" depends on it):
1&gt;Done building target "_AfterCompileWinFXInternal" in project "HtmlCore.csproj".: (TargetId:46)
1&gt;Target "Compile: (TargetId:47)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreBuild" depends on it):
1&gt;Done building target "Compile" in project "HtmlCore.csproj".: (TargetId:47)
1&gt;Target "ExportWindowsMDFile" skipped, due to false condition; ('$(ExportWinMDFile)' == 'true') was evaluated as ('' == 'true').
1&gt;Target "UnmanagedUnregistration" skipped, due to false condition; ((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
1&gt;                    ('$(_AssemblyTimestampBeforeCompile)' == '')) and
1&gt;                   Exists('@(_UnmanagedRegistrationCache)')) was evaluated as ((('' != '' or '' != 'true' or 'Library' != 'library') or
1&gt;                    ('' == '')) and
1&gt;                   Exists('obj\HtmlCore.csproj.UnmanagedRegistration.cache')).
1&gt;Target "GenerateSerializationAssemblies" skipped, due to false condition; ('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto')) was evaluated as ('Auto' == 'On' or (''!='' and 'Auto' == 'Auto')).
1&gt;Target "_GenerateSatelliteAssemblyInputs: (TargetId:48)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CreateSatelliteAssemblies" depends on it):
1&gt;Task "Warning" skipped, due to false condition; ('@(ManifestResourceWithCulture)'!='' and '%(ManifestResourceWithCulture.EmittedForCompatibilityOnly)'=='') was evaluated as (''!='' and ''=='').
1&gt;Task "Warning" skipped, due to false condition; ('@(ManifestNonResxWithCultureOnDisk)'!='' and '%(ManifestNonResxWithCultureOnDisk.EmittedForCompatibilityOnly)'=='') was evaluated as (''!='' and ''=='').
1&gt;Done building target "_GenerateSatelliteAssemblyInputs" in project "HtmlCore.csproj".: (TargetId:48)
1&gt;Target "ComputeIntermediateSatelliteAssemblies" skipped, due to false condition; (@(EmbeddedResource-&gt;'%(WithCulture)') != '') was evaluated as ( != '').
1&gt;Target "GenerateSatelliteAssemblies" skipped, due to false condition; ('@(_SatelliteAssemblyResourceInputs)' != '') was evaluated as ('' != '').
1&gt;Target "CreateSatelliteAssemblies: (TargetId:49)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreBuild" depends on it):
1&gt;Done building target "CreateSatelliteAssemblies" in project "HtmlCore.csproj".: (TargetId:49)
1&gt;Target "GenerateManifests" skipped, due to false condition; ('$(GenerateClickOnceManifests)'=='true' or '@(NativeReference)'!='' or '@(ResolvedIsolatedComModules)'!='' or '$(GenerateAppxManifest)' == 'true') was evaluated as (''=='true' or ''!='' or ''!='' or '' == 'true').
1&gt;Target "GetTargetPath: (TargetId:50)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreBuild" depends on it):
1&gt;Added Item(s):
1&gt;    TargetPathWithTargetPlatformMoniker=
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll
1&gt;                TargetPlatformIdentifier=Windows
1&gt;                TargetPlatformMoniker=Windows,Version=7.0
1&gt;Done building target "GetTargetPath" in project "HtmlCore.csproj".: (TargetId:50)
1&gt;Target "ComputeIntermediateSatelliteAssemblies" skipped, due to false condition; (@(EmbeddedResource-&gt;'%(WithCulture)') != '') was evaluated as ( != '').
1&gt;Target "_CopyFilesMarkedCopyLocal: (TargetId:51)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CopyFilesToOutputDirectory" depends on it):
1&gt;Set Property: CreateHardLinksForCopyLocalIfPossible=false
1&gt;Using "Copy" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "Copy" (TaskId:18)
1&gt;  Task Parameter:
1&gt;      SourceFiles=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0 (TaskId:18)
1&gt;  Task Parameter:
1&gt;      DestinationFiles=
1&gt;          bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0 (TaskId:18)
1&gt;  Task Parameter:SkipUnchangedFiles=True (TaskId:18)
1&gt;  Task Parameter:OverwriteReadOnlyFiles=False (TaskId:18)
1&gt;  Task Parameter:UseHardlinksIfPossible=False (TaskId:18)
1&gt;  Copying file from "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll" to "bin\Release\Javascript.dll". (TaskId:18)
1&gt;  Copying file from "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.xml" to "bin\Release\Javascript.xml". (TaskId:18)
1&gt;  Output Item(s):
1&gt;      FileWritesShareable=
1&gt;          bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0 (TaskId:18)
1&gt;Done executing task "Copy". (TaskId:18)
1&gt;Done building target "_CopyFilesMarkedCopyLocal" in project "HtmlCore.csproj".: (TargetId:51)
1&gt;Target "AssignTargetPaths" skipped. Previously built successfully.
1&gt;Target "_SplitProjectReferencesByFileExistence" skipped. Previously built successfully.
1&gt;Target "GetCopyToOutputDirectoryXamlAppDefs: (TargetId:52)" in file "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "GetCopyToOutputDirectoryItems" depends on it):
1&gt;Task "AssignTargetPath" (TaskId:19)
1&gt;  Task Parameter:RootFolder=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore (TaskId:19)
1&gt;Done executing task "AssignTargetPath". (TaskId:19)
1&gt;Done building target "GetCopyToOutputDirectoryXamlAppDefs" in project "HtmlCore.csproj".: (TargetId:52)
1&gt;Target "GetCopyToOutputDirectoryItems: (TargetId:53)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "_CopySourceItemsToOutputDirectory" depends on it):
1&gt;Set Property: _GCTODIKeepDuplicates=false
1&gt;Set Property: _GCTODIKeepMetadata=CopyToOutputDirectory;TargetPath
1&gt;Task "MSBuild" skipped, due to false condition; ('@(_MSBuildProjectReferenceExistent)' != '' and '$(_GetChildProjectCopyToOutputDirectoryItems)' == 'true' and '%(_MSBuildProjectReferenceExistent.Private)' != 'false' and '$(UseCommonOutputDirectory)' != 'true') was evaluated as ('' != '' and 'true' == 'true' and '' != 'false' and 'false' != 'true').
1&gt;Task "AssignTargetPath" (TaskId:20)
1&gt;  Task Parameter:RootFolder=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore (TaskId:20)
1&gt;Done executing task "AssignTargetPath". (TaskId:20)
1&gt;Done building target "GetCopyToOutputDirectoryItems" in project "HtmlCore.csproj".: (TargetId:53)
1&gt;Target "_CopyOutOfDateSourceItemsToOutputDirectory" skipped, due to false condition; ( '@(_SourceItemsToCopyToOutputDirectory)' != '' ) was evaluated as ( '' != '' ).
1&gt;Target "_CopyOutOfDateSourceItemsToOutputDirectoryAlways" skipped, due to false condition; ( '@(_SourceItemsToCopyToOutputDirectoryAlways)' != '' ) was evaluated as ( '' != '' ).
1&gt;Target "_CopySourceItemsToOutputDirectory: (TargetId:54)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CopyFilesToOutputDirectory" depends on it):
1&gt;Done building target "_CopySourceItemsToOutputDirectory" in project "HtmlCore.csproj".: (TargetId:54)
1&gt;Target "_CopyAppConfigFile" skipped, due to false condition; ( '@(AppConfigWithTargetPath)' != '' ) was evaluated as ( '' != '' ).
1&gt;Target "_CopyManifestFiles" skipped, due to false condition; ( '$(_DeploymentCopyApplicationManifest)'=='true' or '$(GenerateClickOnceManifests)'=='true' ) was evaluated as ( ''=='true' or ''=='true' ).
1&gt;Target "_CheckForCompileOutputs: (TargetId:55)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CopyFilesToOutputDirectory" depends on it):
1&gt;Added Item(s): FileWrites=obj\Release\HtmlCore.dll
1&gt;Set Property: _DocumentationFileProduced=false
1&gt;Added Item(s): FileWrites=obj\Release\HtmlCore.pdb
1&gt;Done building target "_CheckForCompileOutputs" in project "HtmlCore.csproj".: (TargetId:55)
1&gt;Target "_SGenCheckForOutputs" skipped, due to false condition; ('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto')) was evaluated as ('Auto' == 'On' or (''!='' and 'Auto' == 'Auto')).
1&gt;Target "CopyFilesToOutputDirectory: (TargetId:56)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "PrepareForRun" depends on it):
1&gt;Set Property: CreateHardLinksForCopyFilesToOutputDirectoryIfPossible=false
1&gt;Set Property: CopyBuildOutputToOutputDirectory=true
1&gt;Set Property: CopyOutputSymbolsToOutputDirectory=true
1&gt;Task "Copy" (TaskId:21)
1&gt;  Task Parameter:SourceFiles=obj\Release\HtmlCore.dll (TaskId:21)
1&gt;  Task Parameter:DestinationFolder=bin\Release\ (TaskId:21)
1&gt;  Task Parameter:SkipUnchangedFiles=True (TaskId:21)
1&gt;  Task Parameter:OverwriteReadOnlyFiles=False (TaskId:21)
1&gt;  Task Parameter:UseHardlinksIfPossible=False (TaskId:21)
1&gt;  Copying file from "obj\Release\HtmlCore.dll" to "bin\Release\HtmlCore.dll". (TaskId:21)
1&gt;  Output Item(s):
1&gt;      MainAssembly=
1&gt;          bin\Release\HtmlCore.dll
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.dll (TaskId:21)
1&gt;  Output Item(s):
1&gt;      FileWrites=
1&gt;          bin\Release\HtmlCore.dll
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.dll (TaskId:21)
1&gt;Done executing task "Copy". (TaskId:21)
1&gt;Task "Message" (TaskId:22)
1&gt;  Task Parameter:Importance=High (TaskId:22)
1&gt;  Task Parameter:Text=HtmlCore -&gt; D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll (TaskId:22)
1&gt;  HtmlCore -&gt; D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll (TaskId:22)
1&gt;Done executing task "Message". (TaskId:22)
1&gt;Task "Copy" skipped, due to false condition; ('@(AddModules)' != '') was evaluated as ('' != '').
1&gt;Task "Copy" skipped, due to false condition; ('$(_SGenDllCreated)'=='true') was evaluated as ('false'=='true').
1&gt;Task "Copy" (TaskId:23)
1&gt;  Task Parameter:SourceFiles=obj\Release\HtmlCore.pdb (TaskId:23)
1&gt;  Task Parameter:DestinationFiles=bin\Release\HtmlCore.pdb (TaskId:23)
1&gt;  Task Parameter:SkipUnchangedFiles=True (TaskId:23)
1&gt;  Task Parameter:OverwriteReadOnlyFiles=False (TaskId:23)
1&gt;  Task Parameter:UseHardlinksIfPossible=False (TaskId:23)
1&gt;  Copying file from "obj\Release\HtmlCore.pdb" to "bin\Release\HtmlCore.pdb". (TaskId:23)
1&gt;  Output Item(s):
1&gt;      FileWrites=
1&gt;          bin\Release\HtmlCore.pdb
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.pdb (TaskId:23)
1&gt;Done executing task "Copy". (TaskId:23)
1&gt;Task "Copy" skipped, due to false condition; ('$(_DocumentationFileProduced)'=='true') was evaluated as ('false'=='true').
1&gt;Task "Copy" skipped, due to false condition; ('@(IntermediateSatelliteAssembliesWithTargetPath)' != '') was evaluated as ('' != '').
1&gt;Task "Copy" skipped, due to false condition; ('@(ReferenceComWrappersToCopyLocal)' != '' or '@(ResolvedIsolatedComModules)' != '' or '@(_DeploymentLooseManifestFile)' != '' or '@(NativeReferenceFile)' != '' ) was evaluated as ('' != '' or '' != '' or '' != '' or '' != '' ).
1&gt;Task "Copy" skipped, due to false condition; ('$(SkipCopyWinMDArtifact)' != 'true' and '@(WinMDExpArtifacts)' != '') was evaluated as ('' != 'true' and '' != '').
1&gt;Task "Message" skipped, due to false condition; ('$(SkipCopyWinMDArtifact)' != 'true' and '$(_WindowsMetadataOutputPath)' != '') was evaluated as ('' != 'true' and '' != '').
1&gt;Done building target "CopyFilesToOutputDirectory" in project "HtmlCore.csproj".: (TargetId:56)
1&gt;Target "RunCodeAnalysis" skipped, due to false condition; ('$(RunCodeAnalysisOnThisProject)'=='true') was evaluated as (''=='true').
1&gt;Target "PrepareForRun: (TargetId:57)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreBuild" depends on it):
1&gt;Done building target "PrepareForRun" in project "HtmlCore.csproj".: (TargetId:57)
1&gt;Target "UnmanagedRegistration" skipped, due to false condition; ('$(RegisterForComInterop)'=='true' and '$(OutputType)'=='library') was evaluated as (''=='true' and 'Library'=='library').
1&gt;Target "_CheckForCompileOutputs" skipped. Previously built successfully.
1&gt;Target "_SGenCheckForOutputs" skipped, due to false condition; ('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto')) was evaluated as ('Auto' == 'On' or (''!='' and 'Auto' == 'Auto')).
1&gt;Target "_CleanGetCurrentAndPriorFileWrites: (TargetId:58)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "IncrementalClean" depends on it):
1&gt;Using "ReadLinesFromFile" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "ReadLinesFromFile" (TaskId:24)
1&gt;  Task Parameter:File=obj\Release\HtmlCore.csproj.FileListAbsolute.txt (TaskId:24)
1&gt;Done executing task "ReadLinesFromFile". (TaskId:24)
1&gt;Using "ConvertToAbsolutePath" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "ConvertToAbsolutePath" (TaskId:25)
1&gt;  Task Parameter:
1&gt;      Paths=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0\System.Core.dll
1&gt;                  CopyLocal=false
1&gt;                  FrameworkFile=true
1&gt;                  FusionName=System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
1&gt;                  ImageRuntime=v4.0.30319
1&gt;                  Implicit=true
1&gt;                  OriginalItemSpec=System.Core
1&gt;                  Redist=Microsoft-Windows-CLRCoreComp.4.0
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={TargetFrameworkDirectory}
1&gt;                  Version=4.0.0.0 (TaskId:25)
1&gt;  Output Item(s):
1&gt;      _ResolveAssemblyReferenceResolvedFilesAbsolute=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.0\System.Core.dll
1&gt;                  CopyLocal=false
1&gt;                  FrameworkFile=true
1&gt;                  FusionName=System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
1&gt;                  ImageRuntime=v4.0.30319
1&gt;                  Implicit=true
1&gt;                  OriginalItemSpec=System.Core
1&gt;                  Redist=Microsoft-Windows-CLRCoreComp.4.0
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={TargetFrameworkDirectory}
1&gt;                  Version=4.0.0.0 (TaskId:25)
1&gt;Done executing task "ConvertToAbsolutePath". (TaskId:25)
1&gt;Using "FindUnderPath" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "FindUnderPath" (TaskId:26)
1&gt;  Task Parameter:Path=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore (TaskId:26)
1&gt;  Task Parameter:
1&gt;      Files=
1&gt;          bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0 (TaskId:26)
1&gt;  Task Parameter:UpdateToAbsolutePaths=True (TaskId:26)
1&gt;  Comparison path is "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore". (TaskId:26)
1&gt;  Output Item(s):
1&gt;      FileWrites=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0 (TaskId:26)
1&gt;Done executing task "FindUnderPath". (TaskId:26)
1&gt;Task "FindUnderPath" (TaskId:27)
1&gt;  Task Parameter:Path=bin\Release\ (TaskId:27)
1&gt;  Task Parameter:
1&gt;      Files=
1&gt;          obj\Release\HtmlCore.csprojResolveAssemblyReference.cache
1&gt;          obj\Release\HtmlCore.dll
1&gt;          obj\Release\HtmlCore.pdb
1&gt;          bin\Release\HtmlCore.dll
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.dll
1&gt;          bin\Release\HtmlCore.pdb
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.pdb
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0 (TaskId:27)
1&gt;  Task Parameter:UpdateToAbsolutePaths=True (TaskId:27)
1&gt;  Comparison path is "bin\Release\". (TaskId:27)
1&gt;  Output Item(s):
1&gt;      _CleanCurrentFileWritesInOutput=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.pdb
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.pdb
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0 (TaskId:27)
1&gt;Done executing task "FindUnderPath". (TaskId:27)
1&gt;Task "FindUnderPath" (TaskId:28)
1&gt;  Task Parameter:Path=obj\Release\ (TaskId:28)
1&gt;  Task Parameter:
1&gt;      Files=
1&gt;          obj\Release\HtmlCore.csprojResolveAssemblyReference.cache
1&gt;          obj\Release\HtmlCore.dll
1&gt;          obj\Release\HtmlCore.pdb
1&gt;          bin\Release\HtmlCore.dll
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.dll
1&gt;          bin\Release\HtmlCore.pdb
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.pdb
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0 (TaskId:28)
1&gt;  Task Parameter:UpdateToAbsolutePaths=True (TaskId:28)
1&gt;  Comparison path is "obj\Release\". (TaskId:28)
1&gt;  Output Item(s):
1&gt;      _CleanCurrentFileWritesInIntermediate=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.csprojResolveAssemblyReference.cache
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.pdb (TaskId:28)
1&gt;Done executing task "FindUnderPath". (TaskId:28)
1&gt;Added Item(s):
1&gt;    _CleanCurrentFileWritesWithNoReferences=
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll
1&gt;                OriginalItemSpec=obj\Release\HtmlCore.dll
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.pdb
1&gt;                OriginalItemSpec=obj\Release\HtmlCore.pdb
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.dll
1&gt;                CopyLocal=true
1&gt;                FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                OriginalItemSpec=Javascript
1&gt;                ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                ResolvedFrom={HintPathFromItem}
1&gt;                Version=1.5.0.0
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.xml
1&gt;                CopyLocal=true
1&gt;                FusionName=
1&gt;                HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                ResolvedFrom={HintPathFromItem}
1&gt;                Version=1.5.0.0
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.csprojResolveAssemblyReference.cache
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.dll
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.pdb
1&gt;Using "RemoveDuplicates" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "RemoveDuplicates" (TaskId:29)
1&gt;  Task Parameter:
1&gt;      Inputs=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.pdb
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.pdb
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.csprojResolveAssemblyReference.cache
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.pdb (TaskId:29)
1&gt;  Output Item(s):
1&gt;      _CleanCurrentFileWrites=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.pdb
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.pdb
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.csprojResolveAssemblyReference.cache
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.pdb (TaskId:29)
1&gt;Done executing task "RemoveDuplicates". (TaskId:29)
1&gt;Done building target "_CleanGetCurrentAndPriorFileWrites" in project "HtmlCore.csproj".: (TargetId:58)
1&gt;Target "IncrementalClean: (TargetId:59)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "CoreBuild" depends on it):
1&gt;Task "FindUnderPath" (TaskId:30)
1&gt;  Task Parameter:Path=bin\Release\ (TaskId:30)
1&gt;  Comparison path is "bin\Release\". (TaskId:30)
1&gt;Done executing task "FindUnderPath". (TaskId:30)
1&gt;Task "FindUnderPath" (TaskId:31)
1&gt;  Task Parameter:Path=obj\Release\ (TaskId:31)
1&gt;  Comparison path is "obj\Release\". (TaskId:31)
1&gt;Done executing task "FindUnderPath". (TaskId:31)
1&gt;Task "Delete" (TaskId:32)
1&gt;  Task Parameter:TreatErrorsAsWarnings=True (TaskId:32)
1&gt;Done executing task "Delete". (TaskId:32)
1&gt;Added Item(s):
1&gt;    _CleanRemainingFileWritesAfterIncrementalClean=
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll
1&gt;                OriginalItemSpec=obj\Release\HtmlCore.dll
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.pdb
1&gt;                OriginalItemSpec=obj\Release\HtmlCore.pdb
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.dll
1&gt;                CopyLocal=true
1&gt;                FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                OriginalItemSpec=Javascript
1&gt;                ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                ResolvedFrom={HintPathFromItem}
1&gt;                Version=1.5.0.0
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.xml
1&gt;                CopyLocal=true
1&gt;                FusionName=
1&gt;                HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                ResolvedFrom={HintPathFromItem}
1&gt;                Version=1.5.0.0
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.csprojResolveAssemblyReference.cache
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.dll
1&gt;        D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.pdb
1&gt;Task "RemoveDuplicates" (TaskId:33)
1&gt;  Task Parameter:
1&gt;      Inputs=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.pdb
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.pdb
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.csprojResolveAssemblyReference.cache
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.pdb (TaskId:33)
1&gt;  Output Item(s):
1&gt;      _CleanUniqueRemainingFileWritesAfterIncrementalClean=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.pdb
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.pdb
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.csprojResolveAssemblyReference.cache
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.pdb (TaskId:33)
1&gt;Done executing task "RemoveDuplicates". (TaskId:33)
1&gt;Using "WriteLinesToFile" task from assembly "Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a".
1&gt;Task "WriteLinesToFile" (TaskId:34)
1&gt;  Task Parameter:File=obj\Release\HtmlCore.csproj.FileListAbsolute.txt (TaskId:34)
1&gt;  Task Parameter:
1&gt;      Lines=
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.dll
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\HtmlCore.pdb
1&gt;                  OriginalItemSpec=obj\Release\HtmlCore.pdb
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.dll
1&gt;                  CopyLocal=true
1&gt;                  FusionName=Javascript, Version=1.5.0.0, Culture=neutral, PublicKeyToken=0301a254350536a9
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=Javascript
1&gt;                  ReferenceSourceTarget=ResolveAssemblyReference
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\bin\Release\Javascript.xml
1&gt;                  CopyLocal=true
1&gt;                  FusionName=
1&gt;                  HintPath=....\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  OriginalItemSpec=D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\ExtremeFX\Compiler_dlls\Javascript.dll
1&gt;                  ResolvedFrom={HintPathFromItem}
1&gt;                  Version=1.5.0.0
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.csprojResolveAssemblyReference.cache
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.dll
1&gt;          D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\obj\Release\HtmlCore.pdb (TaskId:34)
1&gt;  Task Parameter:Overwrite=True (TaskId:34)
1&gt;Done executing task "WriteLinesToFile". (TaskId:34)
1&gt;Done building target "IncrementalClean" in project "HtmlCore.csproj".: (TargetId:59)
1&gt;Target "PostBuildEvent" skipped, due to false condition; ('$(PostBuildEvent)' != '' and ('$(RunPostBuildEvent)' != 'OnOutputUpdated' or '$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)')) was evaluated as ('' != '' and ('' != 'OnOutputUpdated' or '' != '')).
1&gt;Target "CoreBuild: (TargetId:60)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "Build" depends on it):
1&gt;Done building target "CoreBuild" in project "HtmlCore.csproj".: (TargetId:60)
1&gt;Target "CreateTfsBuildInfoResource" skipped, due to false condition; ( $(AddBuildInfoToAssembly)==true ) was evaluated as ( false==true ).
1&gt;Target "AfterBuild: (TargetId:61)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (target "Build" depends on it):
1&gt;Done building target "AfterBuild" in project "HtmlCore.csproj".: (TargetId:61)
1&gt;Target "Build: (TargetId:62)" in file "C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets" from project "D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj" (entry point):
1&gt;Done building target "Build" in project "HtmlCore.csproj".: (TargetId:62)
1&gt;
1&gt;Project Performance Summary:
1&gt;      219 ms  D:\Users\CheloXL\Documents\Visual Studio 2015\Projects\HtmlCore\HtmlCore\HtmlCore.csproj   1 calls
1&gt;
1&gt;Target Performance Summary:
1&gt;        0 ms  BeforeCompile                              1 calls
1&gt;        0 ms  _CheckForInvalidConfigurationAndPlatform   1 calls
1&gt;        0 ms  ResolveReferences                          1 calls
1&gt;        0 ms  CreateSatelliteAssemblies                  1 calls
1&gt;        0 ms  BeforeResGen                               1 calls
1&gt;        0 ms  AssignProjectConfiguration                 1 calls
1&gt;        0 ms  _GenerateCompileInputs                     1 calls
1&gt;        0 ms  _SetTargetFrameworkMonikerAttribute        1 calls
1&gt;        0 ms  _SetEmbeddedWin32ManifestProperties        1 calls
1&gt;        0 ms  ResGen                                     1 calls
1&gt;        0 ms  DeleteBuildInfoResource                    1 calls
1&gt;        0 ms  CleanXsdCodeGen                            1 calls
1&gt;        0 ms  CreateCustomManifestResourceNames          1 calls
1&gt;        0 ms  AfterResGen                                1 calls
1&gt;        0 ms  SplitResourcesByCulture                    1 calls
1&gt;        0 ms  ResolveProjectReferences                   1 calls
1&gt;        0 ms  GetCopyToOutputDirectoryItems              1 calls
1&gt;        0 ms  AfterCompile                               1 calls
1&gt;        0 ms  GetFrameworkPaths                          1 calls
1&gt;        0 ms  GetTargetPath                              1 calls
1&gt;        0 ms  AfterResolveReferences                     1 calls
1&gt;        0 ms  PreXsdCodeGen                              1 calls
1&gt;        0 ms  CoreResGen                                 1 calls
1&gt;        0 ms  AfterMarkupCompilePass1                    1 calls
1&gt;        0 ms  _AfterCompileWinFXInternal                 1 calls
1&gt;        0 ms  _CopyFilesMarkedCopyLocal                  1 calls
1&gt;        0 ms  PrepareForRun                              1 calls
1&gt;        0 ms  GetReferenceAssemblyPaths                  1 calls
1&gt;        0 ms  AfterCompileWinFX                          1 calls
1&gt;        0 ms  _CopySourceItemsToOutputDirectory          1 calls
1&gt;        0 ms  BuildOnlySettings                          1 calls
1&gt;        0 ms  SetWin32ManifestProperties                 1 calls
1&gt;        0 ms  BeforeResolveReferences                    1 calls
1&gt;        0 ms  FileClassification                         1 calls
1&gt;        0 ms  AfterBuild                                 1 calls
1&gt;        0 ms  CoreBuild                                  1 calls
1&gt;        0 ms  PrepareResourceNames                       1 calls
1&gt;        0 ms  ExpandSDKReferences                        1 calls
1&gt;        0 ms  _GenerateSatelliteAssemblyInputs           1 calls
1&gt;        0 ms  GetCopyToOutputDirectoryXamlAppDefs        1 calls
1&gt;        0 ms  IncrementalClean                           1 calls
1&gt;        0 ms  _CheckForCompileOutputs                    1 calls
1&gt;        0 ms  GetInstalledSDKLocations                   1 calls
1&gt;        0 ms  AssignTargetPaths                          1 calls
1&gt;        0 ms  DesignTimeXamlMarkupCompilation            1 calls
1&gt;        0 ms  GenerateTargetFrameworkMonikerAttribute    1 calls
1&gt;        0 ms  DesignTimeMarkupCompilation                1 calls
1&gt;        0 ms  _SplitProjectReferencesByFileExistence     1 calls
1&gt;        0 ms  Build                                      1 calls
1&gt;        0 ms  DeleteBuildInfoFile                        1 calls
1&gt;        0 ms  BeforeBuild                                1 calls
1&gt;        0 ms  ResolveSDKReferences                       1 calls
1&gt;        0 ms  Compile                                    1 calls
1&gt;        0 ms  PrepareResources                           1 calls
1&gt;        0 ms  ResolveCodeAnalysisRuleSet                 1 calls
1&gt;        0 ms  CopyFilesToOutputDirectory                 1 calls
1&gt;        0 ms  PrepareForBuild                            1 calls
1&gt;       16 ms  ResolveAssemblyReferences                  1 calls
1&gt;       16 ms  SetBuildInfoDefaults                       1 calls
1&gt;       16 ms  _CleanGetCurrentAndPriorFileWrites         1 calls
1&gt;      172 ms  CoreCompile                                1 calls
1&gt;
1&gt;Task Performance Summary:
1&gt;        0 ms  Message                                    3 calls
1&gt;        0 ms  CallTarget                                 1 calls
1&gt;        0 ms  FindAppConfigFile                          1 calls
1&gt;        0 ms  AssignCulture                              1 calls
1&gt;        0 ms  ConvertToAbsolutePath                      1 calls
1&gt;        0 ms  Delete                                     2 calls
1&gt;        0 ms  ResolveCodeAnalysisRuleSet                 1 calls
1&gt;        0 ms  MakeDir                                    1 calls
1&gt;        0 ms  Copy                                       3 calls
1&gt;        0 ms  ReadLinesFromFile                          1 calls
1&gt;        0 ms  WriteLinesToFile                           1 calls
1&gt;        0 ms  AssignTargetPath                           6 calls
1&gt;        0 ms  GetFrameworkPath                           1 calls
1&gt;        0 ms  RemoveDuplicates                           2 calls
1&gt;        0 ms  AssignProjectConfiguration                 1 calls
1&gt;       16 ms  ResolveAssemblyReference                   1 calls
1&gt;       16 ms  FindUnderPath                              5 calls
1&gt;      172 ms  Csc                                        1 calls
1&gt;
1&gt;Build succeeded.
1&gt;
1&gt;Time Elapsed 00:00:00.21
========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========
´´´
</Description>
        <CreatedDate>01/10/2015</CreatedDate>
        <ClosedDate>19/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11401</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Allow foreach with string even if string does not implement foreach pattern.</Title>
    <Description>Allow foreach with string even if string does not implement foreach pattern.

Similarly to arrays and dynamic, we use IEnumerable pattern for binding purposes and then ignore that in emit by using a custom lowering strategy.

Fixes #11387
</Description>
    <CreatedDate>18/05/2016</CreatedDate>
    <ClosedDate>24/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11401</PullRequestID>
        <IssueID>11387</IssueID>
        <Title>Should be able to compile foreach over String when it does not implement foreach pattern</Title>
        <Description>This is a compat issue with the old version of C# compiler

See for example:
http://stackoverflow.com/questions/32507919/when-did-foreach-stop-working-on-strings

Turns out the old compiler did not require string to implement foreach pattern and the String in MicroFramework does not.
</Description>
        <CreatedDate>18/05/2016</CreatedDate>
        <ClosedDate>24/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11399</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Document breaking change in #5712</Title>
    <Description>Adds a regression test and adds an entry in a breaking change document detailing the intentional break.

Closes #5712 

/cc @gafter @jaredpar @dotnet/roslyn-compiler @dotnet/roslyn-compat-council 
</Description>
    <CreatedDate>18/05/2016</CreatedDate>
    <ClosedDate>19/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11399</PullRequestID>
        <IssueID>5712</IssueID>
        <Title>VS2015 C# regression bug with pointers</Title>
        <Description>The following code used to compile with VS2013 but not anymore with VS2015:

``

We'd never use such a syntax construct, but it is just for our testing purposes.

![capture](https://cloud.githubusercontent.com/assets/511445/10303497/2522c458-6c25-11e5-9fec-e0b208af5e9f.PNG)
</Description>
        <CreatedDate>06/10/2015</CreatedDate>
        <ClosedDate>19/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11390</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>nguerrera</FixedByID>
    <Title>/errorlog improvements, fixes, and marking as v1.0.0</Title>
    <Description>Five distinct changes in five commits
- 50f8500: Fix #11383 - prevent duplicate rule metadata  
- c664130: Fix URI escaping  
- f73fd4e: Log language 
- 82e584e: Change rule ID disambiguator from '.' to '-'  
- e090e14: Mark as v1.0.0 (schema update is pending and there will be no breaking changes to it)

@mavasani @agocke @lgolding @michaelcfanning 
</Description>
    <CreatedDate>18/05/2016</CreatedDate>
    <ClosedDate>20/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11390</PullRequestID>
        <IssueID>11383</IssueID>
        <Title>Compiler emits duplicate rules metadata entries with ErrorLogger version 1.0.0-beta.5</Title>
        <Description>**Version Used**: Latest Roslyn bits

**Steps to Reproduce**:
1. Unzip `Closed\Test\Solutions\Newtonsoft.json.zip` from the roslyn-internal repo
2. Clean your RoslynDev hive: "C:\Users&lt;%USER_NAME%&gt;\AppData\Local\Microsoft\VisualStudio\14.0RoslynDev"
3. Build Roslyn.sln with 'OfficialBuild = true' using the below command. This will build and deploy latest Roslyn bits (and hence compiler ErrorLogger) into the RoslynDev hive.
   
   &gt; msbuild /m Roslyn.sln /t:rebuild /p:OfficialBuild=true
4. devenv /rootSuffix RoslynDev
5. Open and build `\Closed\Test\Solutions\Newtonsoft.Json\Newtonsoft.Json\Newtonsoft.Json.Portable.sln` 
6. Open `\Closed\Test\Solutions\Newtonsoft.Json\Newtonsoft.Json\ErrorLog.json`

**Expected Behavior**:
No duplicate metadata entries for any rules (there are no rules with duplicate IDs)

**Actual Behavior**:
Duplicate entries SA1001 and SA1001.001

``
</Description>
        <CreatedDate>17/05/2016</CreatedDate>
        <ClosedDate>20/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11389</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jcouv</FixedByID>
    <Title>Lookup for new well-known types to fail if duplicates are found</Title>
    <Description>The lookup for well-known types currently succeeds (with a `WRN_MultiplePredefTypes` warning) when more than one candidate is found.
Per LDM discussion last week, well-known types introduced with C# 7 or later will adopt a stricter behavior. Their lookup will fail if the result is ambiguous.

Overview: 
This change introduces `CSharp7Sentinel` as a marker in the `WellKnownType` enum. The `GetWellKnownType` method passes a new `allowAmbiguity` flag during the lookup. 
The method that used to issue a warning, now could generate an error.
Also, to fix #11322, we'll lookup the proper VT types even for tuple literals that don't have a natural type.

I didn't have to add a test to verify the old behavior (for old well-known types), as we already have a couple.

Fixes #11327 and #11322

CC @dotnet/roslyn-compiler for review.
</Description>
    <CreatedDate>18/05/2016</CreatedDate>
    <ClosedDate>18/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11389</PullRequestID>
        <IssueID>11322</IssueID>
        <Title>Tuple literals should not be allowed if the corresponding VT cannot be unambiguously looked up.</Title>
        <Description>Based on the latest LDM decision:
- Tuple literals are not allowed if the corresponding VT cannot be unambiguously looked up.

I'll submit unit-tests shortly. The tests are passing right now because they reflect existing behavior, but comments are indicating places that should change behavior according to the decision above.
</Description>
        <CreatedDate>16/05/2016</CreatedDate>
        <ClosedDate>18/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11389</PullRequestID>
        <IssueID>11327</IssueID>
        <Title>We should require uniqueness of well known types over picking an arbitrary one for types added for C# 7 and later versions.</Title>
        <Description>This is about WRN_MultiplePredefTypes warning. For new types, that warning shouldn't be reported, the lookup should fail instead.
</Description>
        <CreatedDate>16/05/2016</CreatedDate>
        <ClosedDate>18/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11389</PullRequestID>
        <IssueID>11322</IssueID>
        <Title>Tuple literals should not be allowed if the corresponding VT cannot be unambiguously looked up.</Title>
        <Description>Based on the latest LDM decision:
- Tuple literals are not allowed if the corresponding VT cannot be unambiguously looked up.

I'll submit unit-tests shortly. The tests are passing right now because they reflect existing behavior, but comments are indicating places that should change behavior according to the decision above.
</Description>
        <CreatedDate>16/05/2016</CreatedDate>
        <ClosedDate>18/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>New Language Feature - Tuples</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11375</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Remove -anycpu RIDs in project.json files</Title>
    <Description>These were workarounds for building with Visual Studio 2015 RTM. We
don't support that anymore.

Fixes #8767.

_Review:_ @dotnet/roslyn-infrastructure, @agocke, @jaredpar, @tannergooding
</Description>
    <CreatedDate>17/05/2016</CreatedDate>
    <ClosedDate>18/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11375</PullRequestID>
        <IssueID>8767</IssueID>
        <Title>Remove the ubuntu-14.04-anycpu and osx.10.10-anycpu runtime entries from our project.json</Title>
        <Description>This is currently dependent on us also upgrading the mono.linux and mono.mac toolsets to use the Update 1 nuget targets.
</Description>
        <CreatedDate>16/02/2016</CreatedDate>
        <ClosedDate>18/05/2016</ClosedDate>
        <Labels>
          <Label>0 - Backlog</Label>
          <Label>Area-Infrastructure</Label>
          <Label>Blocked</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11367</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>heejaechang</FixedByID>
    <Title>make us to accept project level build errors as well.</Title>
    <Description>previously we rejected those and let project system to deal with it.

with this change, we will accept all diagnostics we can handle and even show code for those errors if possible as well.

fix #11350
fix https://github.com/dotnet/roslyn/issues/11306
</Description>
    <CreatedDate>17/05/2016</CreatedDate>
    <ClosedDate>18/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11367</PullRequestID>
        <IssueID>11350</IssueID>
        <Title>Duplicate project diagnostics from build/intellisense in the error list</Title>
        <Description>**Version Used**: 1.2.1

**Steps to Reproduce**:
1. Create a C# class library project
2. Delete the AssemblyInfo.cs file from the project
3. Add NuGet package reference to Microsoft.CodeAnalysis.FxCopAnalyzers (1.2.0-beta1)
4. Edit the C# project file to enable IOperation analyzers by adding the following property: `&lt;Features&gt;IOperation&lt;/Features&gt;`
5. Build and wait for intellisense and build diagnostics from the project - filter error list to show only CA1016 issues.

**Expected Behavior**:
No duplicate CA1016 (Mark assemblies with assembly version)

**Actual Behavior**:
I see duplicate diagnostics from build and intellisense:

``
</Description>
        <CreatedDate>16/05/2016</CreatedDate>
        <ClosedDate>18/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11355</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Add Forced Low Memory Mode feature</Title>
    <Description>Issue #11354 

This adds an option that lets Roslyn developers put their VS process into a low memory mode. This will simulate a VS install with more constrained address space.

@mattgertz @jasonmalinowski @jared @Pilchie please review
</Description>
    <CreatedDate>16/05/2016</CreatedDate>
    <ClosedDate>17/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11355</PullRequestID>
        <IssueID>11354</IssueID>
        <Title>Add Forced Low Memory Mode</Title>
        <Description>Add a feature that allows Roslyn developers to put their VS process into a low memory mode.  This will simulate a VS install with more constrained address space.
</Description>
        <CreatedDate>16/05/2016</CreatedDate>
        <ClosedDate>31/05/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11353</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>drognanar</FixedByID>
    <Title>Include invocation reasons when analyzing documents by solution crawler</Title>
    <Description>Merging dotnet/roslyn#11275 into future
</Description>
    <CreatedDate>16/05/2016</CreatedDate>
    <ClosedDate>17/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11353</PullRequestID>
        <IssueID>11275</IssueID>
        <Title>Include invocation reasons when analyzing documents by solution crawler</Title>
        <CreatedDate>12/05/2016</CreatedDate>
        <ClosedDate>16/05/2016</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11341</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>khyperia</FixedByID>
    <Title>Add more tests for recently-fixed dynamic bugs</Title>
    <Description>More tests for issues #9945 and #10463 as discussed in PRs #11219 and #11256 as well as in-person.

Ping @dotnet/roslyn-compiler for review.
</Description>
    <CreatedDate>16/05/2016</CreatedDate>
    <ClosedDate>23/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11341</PullRequestID>
        <IssueID>9945</IssueID>
        <Title>CSC crashes (instead of emitting error CS0154) when dotting off a setter-only property of type dynamic</Title>
        <Description>**Version Used**: 
VS2015 Update 2 RC

**Steps to Reproduce**:

Create a console app with the following code, and build it:

``

**Expected Behavior**:

Both `GetType()` lines should emit CS0154 "property cannot be used in this context because it lacks a get accessor"

**Actual Behavior**:

The second `GetType()` line causes a compiler crash with
</Description>
        <CreatedDate>21/03/2016</CreatedDate>
        <ClosedDate>12/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Compatibility</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11341</PullRequestID>
        <IssueID>10463</IssueID>
        <Title>Invalid IL generated for field initializer with dynamic</Title>
        <Description>**Version Used**: 1.2.0.60317

**Steps to Reproduce**:
1. Compile

``
1. peverify output .exe 

**Expected Behavior**:

Valid IL produced by compiler.

**Actual Behavior**:

Microsoft (R) .NET Framework PE Verifier.  Version  4.0.30319.0
Copyright (c) Microsoft Corporation.  All rights reserved.

[IL]: Error: [c.exe : B2::.ctor][offset 0x00000008][found &lt;uninitialized&gt; ref ('this' ptr) 'B2'][expected ref 'System.Object'] Unexpected type on the stack.
</Description>
        <CreatedDate>11/04/2016</CreatedDate>
        <ClosedDate>12/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Investigating</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11341</PullRequestID>
        <IssueID>11219</IssueID>
        <Title>Fix #9945: Check if dynamic property is set-only when dotting off it</Title>
        <Description>When a set-only property (whose type is dynamic) is accessed via another member access, CS0154 ("property cannot be used in this context because it lacks a get accessor") was not produced, and instead crashed during emit.

Ping @jaredpar @gafter for review.
</Description>
        <CreatedDate>10/05/2016</CreatedDate>
        <ClosedDate>12/05/2016</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11341</PullRequestID>
        <IssueID>11256</IssueID>
        <Title>Generalize dynamic static-only restriction to include field initializers</Title>
        <Description>Fixes #10463

Native compiler handled all cases, Roslyn generated invalid IL when using dynamic in a field initializer. Roslyn _does_ already handle dynamic in a constructor initializer, like the following case:

``

This PR simply hooks into that logic and extends it to field initializers as well (which also run before the base constructor call).

Ping @dotnet/roslyn-compiler for review.
</Description>
        <CreatedDate>11/05/2016</CreatedDate>
        <ClosedDate>12/05/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11340</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Pilchie</FixedByID>
    <Title>Don't bundle binaries in VisualStudioSetup.Next</Title>
    <Description>Also, don't install it as part of build on Dev14.

(Same as #11337 but against future).

Tag @jasonmalinowski @jaredpar @dotnet/roslyn-infrastructure 
</Description>
    <CreatedDate>16/05/2016</CreatedDate>
    <ClosedDate>16/05/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11340</PullRequestID>
        <IssueID>11337</IssueID>
        <Title>Don't bundle binaries in VisualStudioSetup.Next</Title>
        <Description>Also, don't install it as part of build on Dev14.
</Description>
        <CreatedDate>16/05/2016</CreatedDate>
        <ClosedDate>16/05/2016</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>11335</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>[VB PR] Implicit Default Value On Option Parameter.</Title>
    <Description>Targeting `Future` branch.(Old PR #11180) 

This Pull Request tracks the implementation of (#10293) which make the default value on an optional parameter implicit. You can still explicitly specify a default value.

``` VB
Public Function Foo( Optional x As Integer,
                     Optional y As String,
                     Optional z As Integer = 1) As Bar
 ' x = 0
 ' y = null / nothing
 ' z = 1
...
```

---

**Unit Tests**
- [x] **CommandLine**
  - [x] CommandLineTests.LangVersion
- [x] **Syntax**
  - [x] ParseMethods.Bug862505
  - [x] VisualBasicParseOptionsTests.CurrentVersionNumber
  - [x] ScannerTests.Scanner_IntegerLiteralToken
  - [x] ParseErrorTests.BC30812ERR_ObsoleteOptionalWithoutValue
  - [x] ParseErrorTests.BC30200ERR_InvalidNewInType
  - [x] ParseErrorTests.BC30642ERR_MultipleOptionalParameterSpecifiers
- [x] **Semantics**
  - [x] [Bug578129](https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Test/Semantic/Semantics/OptionalArgumentTests.vb#L1048)
- [ ] **Emit**   
  - [ ] InternalsVisibleToAndStrongNameTests.IVTSigned
  - [ ] InternalsVisibleToAndStrongNameTests.IVTSuccessThroughIAssembly
  - [ ] InternalsVisibleToAndStrongNameTests.PubKeyFromKeyContainerAttribute
  - [ ] InternalsVisibleToAndStrongNameTests.SignModuleKeyContainerAttr
  - [ ] InternalsVisibleToAndStrongNameTests.IVTDeferredSuccess
  - [ ] InternalsVisibleToAndStrongNameTests.IVTDeferredFailKeyMismatch
  - [ ] InternalsVisibleToAndStrongNameTests.IVTDeferredFailSignMismatch
  - [ ] InternalsVisibleToAndStrongNameTests.SignModuleKeyContainerCmdLine
  - [ ] InternalsVisibleToAndStrongNameTests.SignModuleKeyContainerCmdLine_1
  - [ ] InternalsVisibleToAndStrongNameTests.BadInputStream

**Note:** 
These appear to all be related to a issue with signing.

```
    Diagnostic(ERRID.ERR_PublicKeyContainerFailure).WithArguments("roslynTestContainer", "Keyset does not exist (Exception from HRESULT: 0x80090016)").WithLocation(1, 1)

```
- [ ] ToDo: Find a way to simplify tests.
</Description>
    <CreatedDate>16/05/2016</CreatedDate>
    <ClosedDate>26/06/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11335</PullRequestID>
        <IssueID>11180</IssueID>
        <Title>VB PR: no longer require default value for Optional parameters</Title>
        <Description>Fixes #10293 

Skips test BC30800ERR_ObsoleteArgumentsNeedParens
</Description>
        <CreatedDate>09/05/2016</CreatedDate>
        <ClosedDate>16/05/2016</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Community</Label>
          <Label>Language-VB</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>11335</PullRequestID>
        <IssueID>10293</IssueID>
        <Title>[Proposal] VB Feature Implicit Default Optional Parameter</Title>
        <Description>The grammar definition for an `Optional Parameter` is something similar to this.

``

It will simplify the common cases of optional parameter.
</Description>
        <CreatedDate>02/04/2016</CreatedDate>
        <ClosedDate>15/02/2017</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Area-Language Design</Label>
          <Label>Community</Label>
          <Label>Feature Request</Label>
          <Label>Language-VB</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10160</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Hosch250</FixedByID>
    <Title>Implement code action to complete switch statements on enums</Title>
    <Description>Close #6766 and #10322. I was unable to figure out how to set the cursor to a certain position as described in the issue, and I am unsure if everything else is done the way it should be. Should it be an IDE issue, or should it be a CS and VB issue? I mostly copied the pattern from the Remove Unnecessary Cast issue, so that is why I made it an IDE issue.
</Description>
    <CreatedDate>29/03/2016</CreatedDate>
    <ClosedDate>06/04/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10160</PullRequestID>
        <IssueID>6766</IssueID>
        <Title>Switch statement population should be available as a refactoring (not just as a snippet function)</Title>
        <Description>If you have the following in a method:

``

And on the next line you type `switch&lt;tab&gt;&lt;tab&gt;c&lt;enter&gt;&lt;enter&gt;`, the snippet function auto-populates the switch body with all cases.

This same functionality should be available in a refactoring (many people don't know about the snippet function, and it can only be used upon creation).
</Description>
        <CreatedDate>13/11/2015</CreatedDate>
        <ClosedDate>06/04/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10160</PullRequestID>
        <IssueID>10322</IssueID>
        <Title>Bug in SyntaxGenerator for Visual Basic</Title>
        <Description>**Version Used**: Latest Master

**Steps to Reproduce**:
1. Create an instance of a `SyntaxGenerator`
2. Call `generator.DefaultSwitchSection(statements)`
3. Enjoy the crash

**Expected Behavior**:

It should not crash.

**Actual Behavior**:

It crashes because it expects an `Else` switch clause, but it does not receive an `Else` switch clause.

**Fix**:

This is the current code:

``

**Notes**:

Fixed in #10160.
</Description>
        <CreatedDate>04/04/2016</CreatedDate>
        <ClosedDate>06/04/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10149</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Hosch250</FixedByID>
    <Title>Implement code action to complete switch statements on enums</Title>
    <Description>Close #6766.  I was unable to figure out how to set the cursor to a certain position as described in the issue, and I am unsure if everything else is done the way it should be.  Should it be an IDE issue, or should it be a CS and VB issue?  I mostly copied the pattern from the Remove Unnecessary Cast issue, so that is why I made it an IDE issue.
</Description>
    <CreatedDate>28/03/2016</CreatedDate>
    <ClosedDate>28/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10149</PullRequestID>
        <IssueID>6766</IssueID>
        <Title>Switch statement population should be available as a refactoring (not just as a snippet function)</Title>
        <Description>If you have the following in a method:

``

And on the next line you type `switch&lt;tab&gt;&lt;tab&gt;c&lt;enter&gt;&lt;enter&gt;`, the snippet function auto-populates the switch body with all cases.

This same functionality should be available in a refactoring (many people don't know about the snippet function, and it can only be used upon creation).
</Description>
        <CreatedDate>13/11/2015</CreatedDate>
        <ClosedDate>06/04/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10136</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Test/fix scoping rules for pattern locals declared within a catch filter.</Title>
    <Description>Related to #8817, #8814.
</Description>
    <CreatedDate>27/03/2016</CreatedDate>
    <ClosedDate>29/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10136</PullRequestID>
        <IssueID>8817</IssueID>
        <Title>Scope of pattern variables declared in statements</Title>
        <Description>We should have tests to ensure correct scoping of pattern variables appearing in statements.

For a `let` statement, variables appearing in the statement's _pattern_ are scoped to the enclosing block.

For an `if` statement, variables appearing in the statement's condition are scoped to the condition and the then clause, but not the else clause.

For all other statements, variables appearing in the statement's expression are scoped to just that statement.

Pattern variables may not "conflict" with a local or pattern variable or constant declared in an enclosing scope.
</Description>
        <CreatedDate>17/02/2016</CreatedDate>
        <ClosedDate>14/04/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10136</PullRequestID>
        <IssueID>8814</IssueID>
        <Title>The scope of a pattern variable in a catch filter should include the catch block</Title>
        <Description>Implement pattern variables in a catch filter, whose scope should include the catch block. For example

``
</Description>
        <CreatedDate>17/02/2016</CreatedDate>
        <ClosedDate>05/04/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10133</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Hosch250</FixedByID>
    <Title>Analyzer and Code Fixes for #6766</Title>
    <Description>This is the analyzer, code fix, and test suite for #6766.  All the tests pass, but I'm not sure if everything is the way you guys want it; particularly, I was unable to figure out how to set the cursor to a specific location in the code fix.

Also, is it OK that I kept my "stabilization" up to date with your "stabilization" while working on this, and that this PR introduces a couple of changes?  I was told to work in "stabiliziation" by @jasonmalinowski because he said you might want me to PR to "stabilization" as well as "master".

**Edit** Ah, I see you have a PR to merge "stabilization" into "master" already: https://github.com/dotnet/roslyn/pull/10128.  Once that is merged, this will be OK.
</Description>
    <CreatedDate>27/03/2016</CreatedDate>
    <ClosedDate>28/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10133</PullRequestID>
        <IssueID>6766</IssueID>
        <Title>Switch statement population should be available as a refactoring (not just as a snippet function)</Title>
        <Description>If you have the following in a method:

``

And on the next line you type `switch&lt;tab&gt;&lt;tab&gt;c&lt;enter&gt;&lt;enter&gt;`, the snippet function auto-populates the switch body with all cases.

This same functionality should be available in a refactoring (many people don't know about the snippet function, and it can only be used upon creation).
</Description>
        <CreatedDate>13/11/2015</CreatedDate>
        <ClosedDate>06/04/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10120</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Fix unit test deadlocks</Title>
    <Description>There are runs on Jenkins where the IDE is failing the assertions of running on the foreground / background thread.  This causes an exception to be emitted and generally fails the resulting test.  In the case of this bug though the exception was causing the test to deadlock due to this particular call.

http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/Implementation/Classification/SyntacticClassificationTaggerProvider.TagComputer.cs,203

``` csharp
_notificationService.RegisterNotification(() =&gt;
    {
        _workQueue.AssertIsForeground();
        ReportChangedSpan(snapshot.GetFullSpan());
    },
    ReportChangeDelayInMilliseconds,
    _listener.BeginAsyncOperation("ReportEntireFileChanged"),
    _reportChangeCancellationSource.Token);
```

Here the callback throws due to the failed foreground check.  The implementation of RegisterNotification wasn't properly hardened to ensure `IAsyncToken` was disposed in the face of an exception.  This caused that particular token to never complete and deadlocked the unit tests.

closes #7825
</Description>
    <CreatedDate>25/03/2016</CreatedDate>
    <ClosedDate>28/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10120</PullRequestID>
        <IssueID>7825</IssueID>
        <Title>Roslyn.Services.Editor.CSharp.UnitTests periodically asserts and hangs the unit tests</Title>
        <Description>http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit64/2555/console

`[xUnit] [ERROR] - The result file 'd:\j\workspace\roslyn_prtest_win_dbg_unit64\Binaries\Debug\xUnitResults\Roslyn.Services.Editor.CSharp.UnitTests.dll.xml' for the metric 'xUnit.Net' is empty. The result file has been skipped.`

I remember seeing one yesterday as well.  I'll add a link if I can find it.

Bounty
</Description>
        <CreatedDate>07/01/2016</CreatedDate>
        <ClosedDate>28/03/2016</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Contributor Pain</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10091</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Test scoping rules for pattern locals declared within a yield/return/throw statement.</Title>
    <Description>Related to #8817.

@gafter, @agocke, @dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>25/03/2016</CreatedDate>
    <ClosedDate>25/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10091</PullRequestID>
        <IssueID>8817</IssueID>
        <Title>Scope of pattern variables declared in statements</Title>
        <Description>We should have tests to ensure correct scoping of pattern variables appearing in statements.

For a `let` statement, variables appearing in the statement's _pattern_ are scoped to the enclosing block.

For an `if` statement, variables appearing in the statement's condition are scoped to the condition and the then clause, but not the else clause.

For all other statements, variables appearing in the statement's expression are scoped to just that statement.

Pattern variables may not "conflict" with a local or pattern variable or constant declared in an enclosing scope.
</Description>
        <CreatedDate>17/02/2016</CreatedDate>
        <ClosedDate>14/04/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10089</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>msJohnHamby</FixedByID>
    <Title>Improvements to instrumentation for dynamic analysis</Title>
    <Description>-- Move the computation of MVID values from method prologues to the PrivateImplementationDetailsClass.

-- Eliminate the call to FlushPayload at the beginnings of test methods.

-- Adjust generated spans to conform to current design.

Addresses #9812 

@jcouv @VSadov @AlekseyTs @jaredpar @amcasey @tannergooding @KevinH-MS @genlu @drognanar @ManishJayaswal @shyamnamboodiripad 
</Description>
    <CreatedDate>24/03/2016</CreatedDate>
    <ClosedDate>30/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10089</PullRequestID>
        <IssueID>9812</IssueID>
        <Title>Compute MVIDs for dynamic analysis instrumentation less often</Title>
        <CreatedDate>16/03/2016</CreatedDate>
        <ClosedDate>06/04/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Interactive-DynamicAnalysis</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10059</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mmitche</FixedByID>
    <Title>Revert "Disable archiving temporarily to avoid issues with the size of the ar…"</Title>
    <Description>Reverts dotnet/roslyn#10047
</Description>
    <CreatedDate>24/03/2016</CreatedDate>
    <ClosedDate>24/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10059</PullRequestID>
        <IssueID>10047</IssueID>
        <Title>Disable archiving temporarily to avoid issues with the size of the ar…</Title>
        <Description>…chives.]

/cc @dotnet/roslyn-infrastructure 
</Description>
        <CreatedDate>24/03/2016</CreatedDate>
        <ClosedDate>24/03/2016</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10051</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Test/fix scoping rules for pattern locals declared within a fixed statement.</Title>
    <Description>Related to #8817.

@gafter, @agocke, @dotnet/roslyn-compiler Please review.  
</Description>
    <CreatedDate>24/03/2016</CreatedDate>
    <ClosedDate>24/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10051</PullRequestID>
        <IssueID>8817</IssueID>
        <Title>Scope of pattern variables declared in statements</Title>
        <Description>We should have tests to ensure correct scoping of pattern variables appearing in statements.

For a `let` statement, variables appearing in the statement's _pattern_ are scoped to the enclosing block.

For an `if` statement, variables appearing in the statement's condition are scoped to the condition and the then clause, but not the else clause.

For all other statements, variables appearing in the statement's expression are scoped to just that statement.

Pattern variables may not "conflict" with a local or pattern variable or constant declared in an enclosing scope.
</Description>
        <CreatedDate>17/02/2016</CreatedDate>
        <ClosedDate>14/04/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10050</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Add support for recursive (positional) patterns</Title>
    <Description>Add parser support for `operator is`
Add binder support for recursive (positional) patterns
Add lowering support for recursive patterns

Also fixes #9530, #9531
</Description>
    <CreatedDate>24/03/2016</CreatedDate>
    <ClosedDate>25/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10050</PullRequestID>
        <IssueID>9530</IssueID>
        <Title>PatternVariableFinder is lacking explicit visibility modifier</Title>
        <CreatedDate>07/03/2016</CreatedDate>
        <ClosedDate>01/04/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10050</PullRequestID>
        <IssueID>9531</IssueID>
        <Title>PatternVariableFinder doesn't follow style conventions for field names</Title>
        <Description>Should also check other new fields introduced by/for Pattern Matching implementation.
</Description>
        <CreatedDate>07/03/2016</CreatedDate>
        <ClosedDate>01/04/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10042</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>basoundr</FixedByID>
    <Title>More refactorings in Perf Test tool</Title>
    <Description>This is the last part of the CR changes that will be part of the #9948 PR

@KevinH-MS @TyOverby @rchande @VSadov Could you please review this change?

Also you will notice that I have made the Case-Sensitive folder name rename using 2 commits since git is unhappy about renaming a folder to a Case-Sensitive change
</Description>
    <CreatedDate>24/03/2016</CreatedDate>
    <ClosedDate>28/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10042</PullRequestID>
        <IssueID>9948</IssueID>
        <Title>Perf Metrics with CPC instead of WallTimeMS</Title>
        <Description>This change introduces CPC to measure metrics instead of WallTimeMS.

This code needs some cleanup and I will create a story with the list of items to be done.

Currently the CPC binaries are under a public share in //mlangfs1 because the official CPC binaries has some bugs to run our perf runs. To circumvent this issue, I have fixed the bugs and created the private binaries. This will go away in some time because @DavidKlimek from the Platforms team is working on making some public APIs in RPSV3 CPC(this is the new CPC) that will avoid us from having to create the private binaries. The changes that are required to get the CPC that will work for us is in the shelveset basoundr\CPCChangeToWorkWithPerf_3_21.

A bunch of things will involve not having to run tasks more than once(like download CPC), move the temp files to the appropriate folder(changes involved in CPC), move the complete analysis to mlangfs1 for future investigation.
</Description>
        <CreatedDate>21/03/2016</CreatedDate>
        <ClosedDate>23/03/2016</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10038</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Test scoping rules for pattern locals declared within a lock statement.</Title>
    <Description>Related to #8817.

@gafter, @dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>23/03/2016</CreatedDate>
    <ClosedDate>24/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10038</PullRequestID>
        <IssueID>8817</IssueID>
        <Title>Scope of pattern variables declared in statements</Title>
        <Description>We should have tests to ensure correct scoping of pattern variables appearing in statements.

For a `let` statement, variables appearing in the statement's _pattern_ are scoped to the enclosing block.

For an `if` statement, variables appearing in the statement's condition are scoped to the condition and the then clause, but not the else clause.

For all other statements, variables appearing in the statement's expression are scoped to just that statement.

Pattern variables may not "conflict" with a local or pattern variable or constant declared in an enclosing scope.
</Description>
        <CreatedDate>17/02/2016</CreatedDate>
        <ClosedDate>14/04/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10020</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Make MS.VS.ProjectSystem.Managed build deterministically</Title>
    <Description>The code generated for the fallback rule member contained use of `Guid::NewGuid()`.  This made the build of the output source naturally non-deterministic.  At a glance there doesn't seem to be a reason for using a fallback member hence I disabled it.

I'm following up with @davkean to get a bug filed to fix this code generation path to be deterministic.

closes #8739
</Description>
    <CreatedDate>23/03/2016</CreatedDate>
    <ClosedDate>28/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10020</PullRequestID>
        <IssueID>8739</IssueID>
        <Title>Determinism is failing for Microsoft.VisualStudio.ProjectSystem.Managed.dll in future</Title>
        <Description>All determinism builds are failing in future due to determinism failing for Microsoft.VisualStudio.ProjectSystem.Managed: http://dotnet-ci.cloudapp.net/job/roslyn_future_determinism/11/console
</Description>
        <CreatedDate>16/02/2016</CreatedDate>
        <ClosedDate>31/03/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-Determinism</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>10001</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Test/fix scoping rules for pattern locals declared within a do/for/foreach statement.</Title>
    <Description>Related to #8817.
</Description>
    <CreatedDate>23/03/2016</CreatedDate>
    <ClosedDate>23/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>10001</PullRequestID>
        <IssueID>8817</IssueID>
        <Title>Scope of pattern variables declared in statements</Title>
        <Description>We should have tests to ensure correct scoping of pattern variables appearing in statements.

For a `let` statement, variables appearing in the statement's _pattern_ are scoped to the enclosing block.

For an `if` statement, variables appearing in the statement's condition are scoped to the condition and the then clause, but not the else clause.

For all other statements, variables appearing in the statement's expression are scoped to just that statement.

Pattern variables may not "conflict" with a local or pattern variable or constant declared in an enclosing scope.
</Description>
        <CreatedDate>17/02/2016</CreatedDate>
        <ClosedDate>14/04/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>9984</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Update project.lock.jsons</Title>
    <Description>Future equivalent of #9953

/cc @dotnet/roslyn-infrastructure 
</Description>
    <CreatedDate>22/03/2016</CreatedDate>
    <ClosedDate>23/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>9984</PullRequestID>
        <IssueID>9953</IssueID>
        <Title>Update project.lock.jsons</Title>
        <Description>Looks like I missed some last time.

/cc @dotnet/roslyn-infrastructure @jaredpar 
</Description>
        <CreatedDate>21/03/2016</CreatedDate>
        <ClosedDate>23/03/2016</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>9963</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Guard against EventListener dispose race</Title>
    <Description>The underlying issue here is EventListener.DisposeOnShutdown has a race
condition if a new EventSource is added during an AppDomain or Process
exit.  When this occurs there is an unhandled exception during shutdown
due to a modified collection during enumeration that causes xunit to
falsely fail the run.

The type CDSCollectionETWBCLProvider triggers this bug in our tests.  It
is an EventSource for concurrent collections that is loaded on many
concurrent collection operations.  These operations are not triggered
directly in some of our tests and hence lead to the race.

This test guards against them force loading, albeit indirectly, the EventSource
instance of CDSCollectionETWBCLProvider.  Hence uses during shutdown
are just re-using this instance and don't trigger the race.

closes #8936
</Description>
    <CreatedDate>22/03/2016</CreatedDate>
    <ClosedDate>22/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>9963</PullRequestID>
        <IssueID>8936</IssueID>
        <Title>Roslyn.InteractiveWindow tests are still running into EventListener bug</Title>
        <Description>We're still hitting this ~3 or 4 builds a week:

``

Bounty
</Description>
        <CreatedDate>19/02/2016</CreatedDate>
        <ClosedDate>22/03/2016</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Test</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>9944</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>brettfo</FixedByID>
    <Title>explicitly dump entire XML fragments to help with debugging</Title>
    <Description>This is to potentially help diagnose #9653, where it's expected that the resultant XML fragment is 'correct', but out of order.
</Description>
    <CreatedDate>21/03/2016</CreatedDate>
    <ClosedDate>23/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>9944</PullRequestID>
        <IssueID>9653</IssueID>
        <Title>Microsoft.VisualStudio.LanguageServices.UnitTests.Progression.InheritsGraphQueryTests.TestSolutionWithMultipleProjects (from Roslyn.VisualStudio.Services.UnitTests)</Title>
        <Description>http://dotnet-ci.cloudapp.net/job/roslyn_future-stabilization_win_dbg_unit64/lastCompletedBuild/testReport/Microsoft.VisualStudio.LanguageServices.UnitTests.Progression/InheritsGraphQueryTests/TestSolutionWithMultipleProjects/

_Edit by @brettfo:_
[Direct link to failing test](http://dotnet-ci.cloudapp.net/job/roslyn_future-stabilization_win_dbg_unit64/14/testReport/junit/Microsoft.VisualStudio.LanguageServices.UnitTests.Progression/InheritsGraphQueryTests/TestSolutionWithMultipleProjects/)
_End edit_

Microsoft.VisualStudio.LanguageServices.UnitTests.Progression.InheritsGraphQueryTests.TestSolutionWithMultipleProjects (from Roslyn.VisualStudio.Services.UnitTests)

Failing for the past 1 build (Since Failed#14 )
Took 0.79 sec.
add description
Stacktrace

MESSAGE:
Assert.Equal() Failure\r\n ↓ (pos 101)\r\nExpected: ··· &lt;Node Id="(@1 Type=A)" Category="CodeSchema_Class" CodeSchem···\r\nActual: ··· &lt;Node Id="(@1 Type=B)" Category="CodeSchema_Class" CodeSchem···\r\n ↑ (pos 101)
+++++++++++++++++++
STACK TRACE:
at Microsoft.VisualStudio.LanguageServices.UnitTests.Progression.ProgressionTestHelpers.AssertSimplifiedGraphIs(Graph graph, XElement xml) in d:\j\workspace\roslyn_future---1b3baacd\src\VisualStudio\Core\Test\Progression\ProgressionTestHelpers.vb:line 42 at Microsoft.VisualStudio.LanguageServices.UnitTests.Progression.InheritsGraphQueryTests.VB$StateMachine_3_TestSolutionWithMultipleProjects.MoveNext() in d:\j\workspace\roslyn_future---1b3baacd\src\VisualStudio\Core\Test\Progression\InheritsFromGraphQueryTests.vb:line 94 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
</Description>
        <CreatedDate>10/03/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-IDE</Label>
          <Label>Test</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>9935</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Update pattern-matching todo lists.</Title>
    <Description>Add a number of PROTOTYPE comments.
Fix formatting of throw expressions in diagnostics.
Update pattern-matching specification and work list.
Closes #7703
Fixes #9645

@dotnet/roslyn-compiler @AlekseyTs Please review.
</Description>
    <CreatedDate>21/03/2016</CreatedDate>
    <ClosedDate>21/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>9935</PullRequestID>
        <IssueID>7703</IssueID>
        <Title>Two small changes to the pattern matching spec</Title>
        <Description>Per https://github.com/dotnet/roslyn/issues/206#issuecomment-167268457

The use of a pattern in a `case` was intended to be an _extension_ to the existing alternative of a constant expression. That should be clarified, though. In addition, it was intended that a _case-guard_ could be used with a constant-valued `case`. I will amend the [spec](https://github.com/dotnet/roslyn/blob/future/docs/features/patterns.md) to clarify.

The `goto case` statement would be relaxed in two ways. First, the expression no longer needs to be a constant. Second, the expression no longer needs to correspond directly to a `case` label. Logically the `goto case` statement would take an expression and dispatches the whole `switch` statement with the new expression. This needs to be added to the [spec](https://github.com/dotnet/roslyn/blob/future/docs/features/patterns.md) too.
</Description>
        <CreatedDate>26/12/2015</CreatedDate>
        <ClosedDate>21/03/2016</ClosedDate>
        <Labels>
          <Label>Area-Language Design</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verification Not Required</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>9935</PullRequestID>
        <IssueID>9645</IssueID>
        <Title>GenerateNullCoalescingBadBinaryOpsError crashes</Title>
        <Description>**Version Used**: current future branch

**Steps to Reproduce**:

`StringBuilder sb = null ?? throw new ArgumentNullException();`

**Actual Behavior**: (BoundThrowException)rightOperand.Display == null in GenerateNullCoalescingBadBinaryOpsError raises Debug.Assert in AssertMessageSerializable
</Description>
        <CreatedDate>10/03/2016</CreatedDate>
        <ClosedDate>21/03/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>New Language Feature - Pattern Matching</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verification Not Required</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>9919</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jcouv</FixedByID>
    <Title>Fix for #9274: adding empty VB file to sample</Title>
    <Description>Dave and I investigated the problem on my machine. It is the result of some changes in update 2.
The VBC behavior after update 2 is the same as the native compiler's.

Fixes #9274 (BuildAndTest.proj fails with VS update 2 installed)
Related to #8477 (VBC crashes when no source)

CC @lgolding @TyOverby @davkean @tmat @jaredpar @AlekseyTs 
</Description>
    <CreatedDate>19/03/2016</CreatedDate>
    <ClosedDate>19/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>9919</PullRequestID>
        <IssueID>9274</IssueID>
        <Title>"No input sources" error in BasicAnalyzers.Vsix project</Title>
        <Description>When I build the master branch with `msbuild /v:m /m BuildAndTest.proj`, I get the following error:

vbc : error BC2008: no input sources specified [d:\repos\roslyn2\src\Samples\VisualBasic\Analyzers\BasicAnalyzers\BasicAnalyzers.Vsix\BasicAnalyzers.Vsix.vbproj]
</Description>
        <CreatedDate>27/02/2016</CreatedDate>
        <ClosedDate>19/03/2016</ClosedDate>
        <Labels>
          <Label>Area-SDK and Samples</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>9919</PullRequestID>
        <IssueID>8477</IssueID>
        <Title>vbc.exe throws ArgumentNullException when no source file is passed on command line</Title>
        <Description>``
</Description>
        <CreatedDate>09/02/2016</CreatedDate>
        <ClosedDate>19/02/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>9907</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Implement private protected access</Title>
    <Description>This is the main implementation of the language feature `private protected` (#1384)

This PR is for review only (it will not be integrated into future). Once this is reviewed, future PRs for this feature will be incremental to this, as PRs into this feature branch.

@dotnet/roslyn-compiler Please review
</Description>
    <CreatedDate>18/03/2016</CreatedDate>
    <ClosedDate>25/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>9907</PullRequestID>
        <IssueID>1384</IssueID>
        <Title>[Proposal] Family AND Assembly access modifier (aka infamous "private protected")</Title>
        <Description>https://roslyn.codeplex.com/discussions/541194

It seems that there is no satisfactory conclusion.

IMHO C# is the primary language for the platform. If something is supported by CLR, then it absolutely has to be supported by C#.

PS: maybe there should be a separate label for things like this (e.g. enum generic constraint, generic custom attributes etc.).
</Description>
        <CreatedDate>19/03/2015</CreatedDate>
        <ClosedDate>11/02/2017</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Area-Language Design</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
          <Label>Language-VB</Label>
          <Label>Resolution-External</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>9900</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jcouv</FixedByID>
    <Title>Fix for #9463: Async rewriter to fail gracefully when types are missing</Title>
    <Description>I did find a few ways to make the async rewriter crash with missing types. 
I tried to keep the fixes consistent with what I just did in iterator rewriter and use the same solution (as much as possible) on both the VB and C# sides.

Fixes #9463 
@dotnet/roslyn-compiler for code review.
</Description>
    <CreatedDate>18/03/2016</CreatedDate>
    <ClosedDate>24/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>9900</PullRequestID>
        <IssueID>9463</IssueID>
        <Title>Iterator compilation crashes when known types aren't available</Title>
        <Description>The test below fails, but it should report diagnostics instead for some types and degrade gracefully for other types. 
To repro, make sure the corlib is missing `IDisposable.Dispose` or `IEnumerator.MoveNext` or `IEnumerable&lt;T&gt;.GetEnumerator` or `System.Threading.Thread` as those types will be added to the shared mincorlib shortly.  
This problem also exists with the VB compiler.

On the C# side, the exception is thrown by `Debug.Assert(useSiteDiagnostics.IsNullOrEmpty());` in `SyntheticBoundNodeFactory.Return(BoundExpression expression)` at SyntheticBoundNodeFactory.cs(426,0).

From discussion with Tomas and Neal, the way to fix this for type dependencies declared in the language specification is to move the try/catch for missing predefined members around the call to the rewriter and emit a `throw null` instead. The try/catch is currently in `IteratorRewriter.GenerateMethodImplementations()`.

But the expected behavior for some types (like `Thread`) is for the compilation to succeed without diagnostic message, since this dependency is an implementation detail and not specified by the language specification. The implementation should degrade gracefully (somehow) if this type is missing.  
Update: per discussion with Jared, it's probably better to leave the Thread behavior as-is for now.

Note: the same problem probably exists with the async rewriter as well.

``

This was discovered while investigating #9167, which is about compiling async and iterator methods in VB while missing expected types.
</Description>
        <CreatedDate>04/03/2016</CreatedDate>
        <ClosedDate>24/03/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>9898</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>balajikris</FixedByID>
    <Title>Insert traces for cases when completion can not have a session.</Title>
    <Description>To diagnose internal bug 199539 and possibly #9366 as well.

The `TRACE` constant seems to be defined in the project property page, though i don't see it reflected in the `.csproj` file. I guess this should be good for now.
![image](https://cloud.githubusercontent.com/assets/4213867/13887758/be889b62-ecfa-11e5-8e43-e58b8758398f.png)

When we are done with the bugs, we can choose to stop emitting the traces by removing the definition of `TRACE` constant or by rolling back this change.
</Description>
    <CreatedDate>18/03/2016</CreatedDate>
    <ClosedDate>18/03/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>9898</PullRequestID>
        <IssueID>9366</IssueID>
        <Title>Test `CSharpIntellisense.Dismiss on Select All` is flaky</Title>
        <Description>Here's an instance of the failure
http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_dbg_eta/4637/

``

@dotnet/roslyn-infrastructure 

Bounty
</Description>
        <CreatedDate>01/03/2016</CreatedDate>
        <ClosedDate>27/06/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Test</Label>
          <Label>Urgency-Now</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8166</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>nguerrera</FixedByID>
    <Title>Bring /errorlog output up to SARIF draft v0.4</Title>
    <Description>Two parts to this that are probably easier to review as distinct commits.
### 1. Refactor /errorlog SARIF writer

(We agreed on this direction on the previous sarif PR and I bit the bullet and
did it because it helped with the second part.)

Split out a separate JSON writer and write to it directly without
intermediate Issue, Value, ImmutableArray objects. While this should
improve performance, the primary goal was to make the source code easier
to compare against the SARIF specification. The indirections made it
harder to trace.

Along the same lines, the WellKnownStrings are replaced with literals.
The non 1:1 correspondence with the SARIF names also made it hard to
compare the code to the spec.
### 2. Bring /errorlog up to SARIF v0.4 draft …
- "issues" -&gt; "results"
- "isSuppressedInSource" from custom property to first class
- deduce "kind" from severity

@mavasani @lgolding @michaelcfanning @srivatsn 

Fix #7110
</Description>
    <CreatedDate>25/01/2016</CreatedDate>
    <ClosedDate>05/02/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8166</PullRequestID>
        <IssueID>7110</IssueID>
        <Title>Bring Roslyn error log format up to date with SARIF 0.4</Title>
        <Description>This is ready to go. The 0.4 changes are done.
</Description>
        <CreatedDate>30/11/2015</CreatedDate>
        <ClosedDate>05/02/2016</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8129</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpen2000</FixedByID>
    <Title>Fix #7182 where ContainsSkippedText was returning false incorrectly</Title>
    <Description>Fixes #7182
StructuredTriviaSyntax.vb now mirrors implementation in [StructuredTriviaSyntax.cs](https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Syntax/InternalSyntax/StructuredTriviaSyntax.cs)
Also remove workaround for this bug in VisualBasicCodeModelService
</Description>
    <CreatedDate>24/01/2016</CreatedDate>
    <ClosedDate>27/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8129</PullRequestID>
        <IssueID>7182</IssueID>
        <Title>VB: SyntaxNode.ContainsSkippedText returns false for node that clearly has skipped token trivia</Title>
        <Description>Looks like a parser bug to me.

Below is a C# Interactive script that demonstrates the issue in VB:

``

Once this is fixed, a workaround should be removed from VisualBasicCodeModelService.
</Description>
        <CreatedDate>02/12/2015</CreatedDate>
        <ClosedDate>27/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8124</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Correct fallback pathToTool in build task and print more info in log</Title>
    <Description>/cc @davkean @jaredpar @dotnet/roslyn-compiler @dotnet/roslyn-infrastructure 

This should fix bug #7998 
</Description>
    <CreatedDate>23/01/2016</CreatedDate>
    <ClosedDate>26/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8124</PullRequestID>
        <IssueID>7998</IssueID>
        <Title>[Test Failure] Compile Error in prtest/win/dbg/eta on PR #7997</Title>
        <Description>PR: [#7997](https://github.com/dotnet/roslyn/pull/7997) _Remove # character from VSIX descriptions._ by @CyrusNajmabadi
Failure: http://dotnet-ci.cloudapp.net/job/dotnet_roslyn_prtest_win_dbg_eta/3195/

**Issue 1: Compile Error**
error CS2007: Unrecognized option: '/publicsign+' [d:\j\workspace\dotnet_roslyn_prtest_win_dbg_eta\Open\src\Workspaces\CSharp\Portable\CSharpWorkspace.csproj]
</Description>
        <CreatedDate>16/01/2016</CreatedDate>
        <ClosedDate>27/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8110</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>TyOverby</FixedByID>
    <Title>don't deploy extensions</Title>
    <Description>Closes #8077

@dotnet/roslyn-infrastructure 
@davkean 
</Description>
    <CreatedDate>22/01/2016</CreatedDate>
    <ClosedDate>22/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8110</PullRequestID>
        <IssueID>8077</IssueID>
        <Title>[Test Failure] error VSSDK1031: Extension 'ConvertToAutoPropertyRefactoring.Microsoft.a95ab02d-0f23-4c9a-a8d2-b29692654076' could not be found. Please make sure the extension has been installed. </Title>
        <Description>PR: [#8070](https://github.com/dotnet/roslyn/pull/8070) _changed meaning of closed file diagnostic option. now it is solely fo…_ by @heejaechang
Failure: http://dotnet-ci.cloudapp.net/job/roslyn_prtest_win_dbg_unit32/2991/

**Issue 1: VSSDK Build error**
error VSSDK1031: Extension 'ConvertToAutoPropertyRefactoring.Microsoft.a95ab02d-0f23-4c9a-a8d2-b29692654076' could not be found. Please make sure the extension has been installed. [d:\j\workspace\roslyn_prtest_win_dbg_unit32\src\Samples\CSharp\ConvertToAutoProperty\ConvertToAutoPropertyCS.csproj]
</Description>
        <CreatedDate>21/01/2016</CreatedDate>
        <ClosedDate>09/02/2016</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Bug</Label>
          <Label>Test</Label>
          <Label>Urgency-Soon</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8102</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>heejaechang</FixedByID>
    <Title>made diagnostic tags to be removed faster and inserted slower.</Title>
    <Description>experience seems actually quite better than before.

anyway, 2 main changes are
1. active file analysis delay got shorten to 400ms from 800ms.
2. notification to editor on removed tags are now 50ms but added tags are now 1.5 seconds.

...

more detail explanations below

for #1. the delay change is only for 1 file (a file that has focus). all other file analysis delay is same as before (1.5 seconds). so I believe perf impact due to this should be fairly small. and it is still better than RTM which was 200ms. also, after RTM, we already made LB behavior not to be affected by this delay. so this change shouldn't affect LB behavior.

for #2. tagger actually has many small delays in them.
2 main ones are

1) delay to produce tags
2) delay to notify editor about changed tags.

1) is to reduce doing repeated works to generate tags. for diagnostic tagger, this actually is not needed since unlike any other tagger, diagnostic tagger uses external service (diagnostic service) which already does all these things (basically #1 delay is logically doing what 1) is trying to do)

now 1) delay is set to NearImmediate (50ms)

2) is to prevent us from abusing editors too much with a lot of notifications. basically this delay make sure we only ping editor once in a while (used to be 50ms) and aggregate events between them.

now, 2) is split into 2 different delays. one for adding new tags and the other for removing old tags.

adding new tags is now set to 1.5 seconds and removing old tags is set to 50ms.
</Description>
    <CreatedDate>22/01/2016</CreatedDate>
    <ClosedDate>25/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8102</PullRequestID>
        <IssueID>1</IssueID>
        <Title>Initial port and addition of README.md</Title>
        <Description>This is a port of the readme from CodePlex.  Some of the links have been updated to point to locations on GitHub, but many of the links still point back to CodePlex as comparable GitHub locations are currently absent.
</Description>
        <CreatedDate>14/01/2015</CreatedDate>
        <ClosedDate>14/01/2015</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8102</PullRequestID>
        <IssueID>2</IssueID>
        <Title>Update links in README.md with ported wiki content</Title>
        <CreatedDate>14/01/2015</CreatedDate>
        <ClosedDate>14/01/2015</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8102</PullRequestID>
        <IssueID>1</IssueID>
        <Title>Initial port and addition of README.md</Title>
        <Description>This is a port of the readme from CodePlex.  Some of the links have been updated to point to locations on GitHub, but many of the links still point back to CodePlex as comparable GitHub locations are currently absent.
</Description>
        <CreatedDate>14/01/2015</CreatedDate>
        <ClosedDate>14/01/2015</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8094</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jmarolf</FixedByID>
    <Title>Correctly identify if we are in a static property.</Title>
    <Description>Fixes #8010
</Description>
    <CreatedDate>22/01/2016</CreatedDate>
    <ClosedDate>26/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8094</PullRequestID>
        <IssueID>8010</IssueID>
        <Title>Generate Field/Method not respecting static modifier on properties</Title>
        <Description>Tested on Visual Studio 2015 Update 1. Appears to only affect static properties, not static methods.
### Steps to reproduce

``

Which does not compile, as `_field` and `Method` are not marked static.
</Description>
        <CreatedDate>17/01/2016</CreatedDate>
        <ClosedDate>26/01/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8087</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>msJohnHamby</FixedByID>
    <Title>Explicitly mark declared member initializations in IOperation</Title>
    <Description>As requested by @lgolding in #7293, this change set adds the ability to explicitly identify declared initializations of fields in IOperations. The new operation kinds FieldInitializerAtDeclaration, PropertyInitializerAtDeclaration, and ParameterInitializerAtDeclaration denote "= Value" expressions in declarations. Existing operation kinds for field and property initialization in object creation have been renamed to FieldInitializerInCreation and PropertyInitializerInCreation. Both FieldInitializerAtDeclaration and FieldInitiailizerInCreation imply that a node implements IFieldInitializer, and both PropertyInitializerAtDeclaration and PropertyInitializerInCreation imply that a node implements IPropertyInitializer.

@lgolding @genlu @AlekseyTs @nguerrera @srivatsn @CyrusNajmabadi @cston could surely provide helpful feedback.
</Description>
    <CreatedDate>21/01/2016</CreatedDate>
    <ClosedDate>27/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8087</PullRequestID>
        <IssueID>7293</IssueID>
        <Title>IOperation: Add OperationKind.FieldInitialization</Title>
        <Description>At present there is no obvious-to-a-user way to write an analyzer that examines field initializations. First you have to `RegisterOperationBlockStartAction`, and check that the `OwningSymbol` is a field. That's fine. But then come the problems.

First, you can't `RegisterOperationAction` and specify an `OperationKind` of `FieldInitialization`, because that doesn't exist.

Second, the operation associated with the field is an expression, but there is no single `OperationKind` for all expressions. So you have to register for `OperationKind.Literal`, `OperationKind.BinaryOperationExpression`, and `OperationKind.UnaryOperatorExpression`. (Oh, hah, and I forgot ternary operator.)

Third, once you've registered your callback, it won't just be called for the top-level expression: it will be called for subexpressions as well. For example, if the expression is `0 + 1`, your callback will be called three times: once for the binary operator and once for each literal. And there's no way to tell that you're looking at the top-level expression without dropping back down to syntax.

You can work around this by not registering a operation callback at all. Instead, in your start action, look directly at `operationBlockContext.OperationBlocks.First()`. But then, if you discover an issue, you can't report it directly, because `OperationBlockStartAnalysisContext` doesn't have `ReportDiagnostic`. So you also have to register an end action.
</Description>
        <CreatedDate>07/12/2015</CreatedDate>
        <ClosedDate>27/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8063</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Add proper symbol filtering to Imports.AddLookupSymbolsInfoInUsings.</Title>
    <Description>Fixes #7101.

@dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>21/01/2016</CreatedDate>
    <ClosedDate>21/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8063</PullRequestID>
        <IssueID>7101</IssueID>
        <Title>CodeCompletion offers non-static method via "using static Class;"</Title>
        <Description>![image](https://cloud.githubusercontent.com/assets/774791/11458740/4d08c410-96c6-11e5-8bde-147084bb5039.png)

Program.cs:

``

Fun fact: Bug was discovered while using Xamarin Studio :)
</Description>
        <CreatedDate>29/11/2015</CreatedDate>
        <ClosedDate>21/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8045</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>balajikris</FixedByID>
    <Title>Feature: Suggest implicit or explicit typing code styles.</Title>
    <Description>#### Use var code style:

Implements #7062.

Implement analyzer and codefixers for suggesting implicit typing and for replacing usages of implicit typing with explicit typing based on user options. Also adds options information to capture user styles for using or not using implicit typing. 

this implementation adds the following _options_ to 'Code Style' options page: 
1. suggest or do not suggest var for primitive types
2. suggest or do not suggest var where typing information is evident in the declaration.
3. suggest or do not suggest var in other places not specified above.
###### screenshot:

![image](https://cloud.githubusercontent.com/assets/4213867/13201446/b80c2d46-d826-11e5-9749-0e18562e9ed8.png)
###### Tasks List:
- [x] Implement analyzers and fixers.
- [x] unit tests.
- [x] option pages UI.
- [x] Enforcement levels (right now, un-checking use var implies suggest explicit typing)
- [ ] ~~Pass options through to simplifier and code generation engine as appropriate~~
- [ ] ~~Finalize and freeze UI and strings~~
- [ ] ~~Implement Fix All~~
- [ ] ~~Ensure UI is friendly with screen readers.~~
###### Future Improvements:
- [ ] ~~Better options preview - update preview to reflect current set of feature related option settings instead of the currently selected option.~~
- [ ] ~~Go to option settings from light bulb preview~~
</Description>
    <CreatedDate>20/01/2016</CreatedDate>
    <ClosedDate>25/02/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8045</PullRequestID>
        <IssueID>7062</IssueID>
        <Title>Code Style: Analyzer + Code fix for use of var</Title>
        <Description>Should have options for:
- Use `var` whenever possible
- Never use `var`
- Use var if the type appears on the RHS (cast expressions, etc)
</Description>
        <CreatedDate>25/11/2015</CreatedDate>
        <ClosedDate>15/03/2016</ClosedDate>
        <Labels>
          <Label>0 - Backlog</Label>
          <Label>3 - Working</Label>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8042</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Strengthen implementation of MetadataHelpers.GetInfoForImmediateNamespaceMembers against unconventional/obfuscated namespace names in metadata.</Title>
    <Description>Fixes #7396.

@dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>20/01/2016</CreatedDate>
    <ClosedDate>21/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8042</PullRequestID>
        <IssueID>7396</IssueID>
        <Title>[VS Crash] CSharpAddImportCodeFixProvider encountered an error and has been disabled.</Title>
        <Description>I get this warning at the top of the screen in VS 2015 Pro (RTM, and now also Update 1):

'CSharpAddImportCodeFixProvider' encountered an error and has been disabled.

This is a frequent harbinger of an imminent IDE crash.  However, not all IDE crashes are preceded by these warnings. 

I'm usually typing new code and a dot that would normally show an intellisense pop-up will cause this.  Also happens when pasting code.  Also happens when adjusting curly braces.

My solution has bad namespace hygiene.  I think that's related to the problem, and can make this difficult to repro outside of my solution.
</Description>
        <CreatedDate>10/12/2015</CreatedDate>
        <ClosedDate>21/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Need More Info</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8027</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>Disallow TypeSpec after CLASS and VALUETYPE in signatures</Title>
    <Description>Addresses issue #7970. This change makes the compiler behave the same as native csc.

Also adds a test for issue #7971.
</Description>
    <CreatedDate>19/01/2016</CreatedDate>
    <ClosedDate>21/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8027</PullRequestID>
        <IssueID>7970</IssueID>
        <Title>Referencing assembly with improper use of TypeSpec compiles but does not run</Title>
        <Description>There is an issue in the ECMA-335 CLI specification where it is implied that `(CLASS | VALUETYPE)` can be followed by a `TypeSpec` token, when in fact only `TypeRef` and `TypeDef` are valid. When referencing a bad assembly that has such a signature, Roslyn recurses into the `TypeSpec`. It then emits the signature in the proper way, with the `TypeSpec` contents embedded into the `MemberRef` signature, but the call cannot bind to the bad method at runtime.

I have started to document such spec issues in https://github.com/dotnet/corefx/pull/5435 and I'm now filing the bugs I found while experimenting to write that up.

Native csc.exe produced an error at compilation time.
# Repro steps
- git clone https://github.com/nguerrera/signature-repros
- cd signature-repros
- build.bat
- csc.exe UseTypeSpecInWrongPlace.cs /r:TypeSpecInWrongPlace.exe
- UseTypeSpecInWrongPlace.exe
# Expected result

Compilation fails with suitable error message.
# Actual result
## Roslyn
- compilation succeeds without warnings
- run fails

``

cc @tmat @gafter @AlekseyTs 
</Description>
        <CreatedDate>14/01/2016</CreatedDate>
        <ClosedDate>01/02/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8027</PullRequestID>
        <IssueID>7971</IssueID>
        <Title>Invalid cyclical TypeSpec in referenced assembly causes stack overflow</Title>
        <Description>Although the EMCA-335 CLI specification does not permit `TypeSpec` tokens as modifiers, they are allowed in practice by ilasm, peverify, the CLR, and Roslyn. However, they open up the possibility of circular signatures, and the compiler hits a stack overflow while trying to decode one.

I have started to document such spec issues in https://github.com/dotnet/corefx/pull/5435 and I'm now filing the bugs I found while experimenting to write that up.

Native csc.exe had the same problem.
# Repro steps
- git clone https://github.com/nguerrera/signature-repros
- cd signature-repros
- build.bat
- csc.exe UseSignatureCycle2.cs /r:SignatureCycle2.exe
# Expected result
-  Compilation fails with suitable error message.
# Actual result
- Stack overflow

cc @tmat @gafter @AlekseyTs 
</Description>
        <CreatedDate>14/01/2016</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Tenet-Reliability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8025</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Remove extraneous files from the coreclr compilers</Title>
    <Description>The rsp files aren't useful because there are no automatic references
when running on coreclr. The exe.config files aren't useful because
there are no binding redirects on coreclr.

Resolves #4101.

/cc @jaredpar @VSadov 
</Description>
    <CreatedDate>19/01/2016</CreatedDate>
    <ClosedDate>21/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8025</PullRequestID>
        <IssueID>4101</IssueID>
        <Title>csc on coreclr shouldn't include default response file</Title>
        <Description>Using f56e3c29e8676ac652f600e6a8108e9c333a3b09 I successfully built roslyn, and have Binaries/Debug/csc.exe but running it produces this error.

``

I don't see a file resembling 'System.Deployment' in either the mono directory or the roslyn directory. I am on Ubuntu 14.04.

I admit I am rather new to roslyn, and C# in general, so this may be user error.
</Description>
        <CreatedDate>24/07/2015</CreatedDate>
        <ClosedDate>21/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-CoreCLR</Label>
          <Label>Concept-Portability</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8024</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>TyOverby</FixedByID>
    <Title>pull-request-bot comments on the PR asking for dotnet-bot to run VSI tests</Title>
    <Description>Closes #7983
</Description>
    <CreatedDate>19/01/2016</CreatedDate>
    <ClosedDate>26/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8024</PullRequestID>
        <IssueID>7983</IssueID>
        <Title>Merge tool should automatically kick off eta/vsi runs</Title>
        <Description>The merge tool should automatically do a VSI and an ETA run.
</Description>
        <CreatedDate>15/01/2016</CreatedDate>
        <ClosedDate>26/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>8002</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>Make `ICase` an `IOperation`</Title>
    <Description>Fixes Issue #7959 

FYI @JohnHamby @AlekseyTs  @CyrusNajmabadi @cston @dotnet/roslyn-interactive
</Description>
    <CreatedDate>16/01/2016</CreatedDate>
    <ClosedDate>22/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>8002</PullRequestID>
        <IssueID>7959</IssueID>
        <Title>Cases should not be statement operation</Title>
        <Description>`ICase` should not be treated as statement (i.e. not an `IStatement`), it should be a sub-type `IOperation` instead.

This issue was raised in https://github.com/dotnet/roslyn/pull/7352
</Description>
        <CreatedDate>14/01/2016</CreatedDate>
        <ClosedDate>23/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Feature - IOperation</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7986</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>leppie</FixedByID>
    <Title>Use Enumerable.Repeat and code cleanup</Title>
    <Description>I try again :)

Fixes #5080 

Did some code cleanup too with C#6 goodies :)
</Description>
    <CreatedDate>15/01/2016</CreatedDate>
    <ClosedDate>15/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7986</PullRequestID>
        <IssueID>5080</IssueID>
        <Title>Consider if it is appropriate to use Enumerable.Repeat to implement DefaultLowerBounds function in src/Compilers/CSharp/Portable/Emitter/Model/ArrayTypeSymbolAdapter.cs</Title>
        <Description>In code review for PR #5060 @gafter asked if we should use `Enumerable.Repeat` to implement DefaultLowerBounds, which is currently implemented as follows:

``
</Description>
        <CreatedDate>08/09/2015</CreatedDate>
        <ClosedDate>15/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7986</PullRequestID>
        <IssueID>6</IssueID>
        <Title>Corrected documentation on FullSpan and Span</Title>
        <Description>As per the [Incorrect Docs on FullSpan/Span properties](http://roslyn.codeplex.com/workitem/260) issue, the documentation was reversed on a few of these pairs.

&lt;!---
@huboard:{"order":8.0}
--&gt;
</Description>
        <CreatedDate>15/01/2015</CreatedDate>
        <ClosedDate>09/02/2015</ClosedDate>
        <Labels>
          <Label>0 - Backlog</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Concept-API</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7984</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>leppie</FixedByID>
    <Title>Use Enumerable.Repeat and code cleanup</Title>
    <Description>Fixes #5080
</Description>
    <CreatedDate>15/01/2016</CreatedDate>
    <ClosedDate>15/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7984</PullRequestID>
        <IssueID>5080</IssueID>
        <Title>Consider if it is appropriate to use Enumerable.Repeat to implement DefaultLowerBounds function in src/Compilers/CSharp/Portable/Emitter/Model/ArrayTypeSymbolAdapter.cs</Title>
        <Description>In code review for PR #5060 @gafter asked if we should use `Enumerable.Repeat` to implement DefaultLowerBounds, which is currently implemented as follows:

``
</Description>
        <CreatedDate>08/09/2015</CreatedDate>
        <ClosedDate>15/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7981</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>leppie</FixedByID>
    <Title>Improves location used for base interface errors when partial classes are used</Title>
    <Description>Fixes #7878 for interfaces

Continuation of #7947.

Notes:
- I removed `?? Location[0]` as `baseTypeLocation` will be non-null in the error cases.
</Description>
    <CreatedDate>15/01/2016</CreatedDate>
    <ClosedDate>16/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7981</PullRequestID>
        <IssueID>7878</IssueID>
        <Title>Wrong source code location for CS0060 error</Title>
        <Description>``

Produces error message like `x.cs(5,22): error CS0060: Inconsistent accessibility: base class 'NV' is less accessible than class 'C1'` but I'd expect the error row to be 9 not 5.
</Description>
        <CreatedDate>11/01/2016</CreatedDate>
        <ClosedDate>15/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Community</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7981</PullRequestID>
        <IssueID>7947</IssueID>
        <Title>Improves location used for base class errors when partial classes are used</Title>
        <Description>Fixes #7878
</Description>
        <CreatedDate>14/01/2016</CreatedDate>
        <ClosedDate>15/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Community</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7964</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>brettfo</FixedByID>
    <Title>use predefined type keywords if the real types would only be bracketed</Title>
    <Description>e.g., always prefer `String` to `[String]` in VB even if real types are preferred.

Fixes #7955.
</Description>
    <CreatedDate>14/01/2016</CreatedDate>
    <ClosedDate>15/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7964</PullRequestID>
        <IssueID>7955</IssueID>
        <Title>Generate method creates unnecessary escaping</Title>
        <Description>_Created from internal bug 175760_

**Repro:**
1. Turn off the VB option "Prefer intrinsic predefined type keyword when declaring locals, parameters and members".
2. `Dim x = SomeMethod("asdf")`
3. Invoke Generate Method.

**Expected:**

``
</Description>
        <CreatedDate>14/01/2016</CreatedDate>
        <ClosedDate>15/01/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7951</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>drognanar</FixedByID>
    <Title>Add culture dependant object formatting in REPL</Title>
    <Description>When the REPL displays the output information it gets presented in the
culture of the running submission.

Handles issue #7133 
</Description>
    <CreatedDate>14/01/2016</CreatedDate>
    <ClosedDate>25/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7951</PullRequestID>
        <IssueID>7133</IssueID>
        <Title>C# Interactive output doesn't obey current culture</Title>
        <Description>``

Note that I had to use DefaultThreadCurrentCulture due to #7132 
I expected the output of `Math.PI` in the French culture to be formatted with a comma for the decimal separator. ToString works correctly. Is C# interactive forcing the invariant culture for display?
</Description>
        <CreatedDate>30/11/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7947</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>leppie</FixedByID>
    <Title>Improves location used for base class errors when partial classes are used</Title>
    <Description>Fixes #7878
</Description>
    <CreatedDate>14/01/2016</CreatedDate>
    <ClosedDate>15/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7947</PullRequestID>
        <IssueID>7878</IssueID>
        <Title>Wrong source code location for CS0060 error</Title>
        <Description>``

Produces error message like `x.cs(5,22): error CS0060: Inconsistent accessibility: base class 'NV' is less accessible than class 'C1'` but I'd expect the error row to be 9 not 5.
</Description>
        <CreatedDate>11/01/2016</CreatedDate>
        <ClosedDate>15/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Community</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7940</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>davkean</FixedByID>
    <Title>Disable AppDomain isolation in unit tests</Title>
    <Description>This change disables AppDomain isolation in the unit tests that don't require it.  This is necessary for our goal of running many of the suites on CoreCLR and helps reduce our exposure to #6358.
</Description>
    <CreatedDate>14/01/2016</CreatedDate>
    <ClosedDate>15/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7940</PullRequestID>
        <IssueID>6358</IssueID>
        <Title>xUnit is crashing due a NET's EventListener race</Title>
        <Description>Tests are often failing with:

``

This a .NET bug; dotnet/corefx#3793, however, we're not going to see a fix soon. I've got an ask out to xUnit to see if we can submit a PR to workaround the issue: https://github.com/xunit/xunit/issues/646

If not, then we might need build our own version of xUnit and work around it manually. We're hitting this ~2 - 3 every 50 runs.
</Description>
        <CreatedDate>27/10/2015</CreatedDate>
        <ClosedDate>27/04/2016</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Blocked</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7935</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Consume asynchronous snippet enumeration API</Title>
    <Description>Fixes #6685

Calling IVsTextManager2.GetExpansionManager can return either an IVsExpansionManager or an IExpansionManager, and we now support reading snippet info from both.

In the IVsExpansionManager case, we behave as before this change. During package load, we kick off a task to execute later on the UI thread to synchronously enumerate the snippets.

In the IExpansionManager case, we instead enumerate the snippets asynchronously on a background thread.

For Visual Studio 2015 Update 1 RTM, we will only receive an IVsExpansionManager. Starting with Update 2 (and with some intermediate builds) we will receive IExpansionManagers by default, but the platform reserves the right to return an IVsExpansionManager as a fallback, so we must continue to support both. Because IExpansionManager already existed in Update 1, we do not need to do adaptive light-up to keep this code working on Update 1.
</Description>
    <CreatedDate>13/01/2016</CreatedDate>
    <ClosedDate>17/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7935</PullRequestID>
        <IssueID>6685</IssueID>
        <Title>Move to the asynchronous snippets enumeration model</Title>
        <CreatedDate>10/11/2015</CreatedDate>
        <ClosedDate>17/01/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7934</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Document "Better Betterness" for C# 6 and the compat fix</Title>
    <Description>described in #6560 and #7727.

You can find the docs pretty-printed at https://github.com/gafter/roslyn/blob/doc6560/docs/specs/CSharp%206/Better%20Betterness.md
@AlekseyTs @MadsTorgersen Please review
/cc @dotnet/roslyn-compiler FYI
</Description>
    <CreatedDate>13/01/2016</CreatedDate>
    <ClosedDate>11/02/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7934</PullRequestID>
        <IssueID>6560</IssueID>
        <Title>Breaking change involving method group conversion and new "betterness" rules in Overload Resolution.</Title>
        <Description>``

I believe the break is caused by the new rule that a void returning delegate type is worse than a non-void returning delegate type.
</Description>
        <CreatedDate>04/11/2015</CreatedDate>
        <ClosedDate>21/01/2016</ClosedDate>
        <Labels>
          <Label>3 - Working</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Language-C#</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Tenet-Compatibility</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7934</PullRequestID>
        <IssueID>7727</IssueID>
        <Title>Adjust Better Betterness rules around method group conversions in order to restore backward compatibility</Title>
        <Description>Fixes #6560.

@dotnet/roslyn-compiler Please review.
</Description>
        <CreatedDate>29/12/2015</CreatedDate>
        <ClosedDate>11/01/2016</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7933</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>rchande</FixedByID>
    <Title>Ensure unit tests close their text views</Title>
    <Description>Adds a disposable wrapper around ITextView to avoid writing try ...
finally... everywhere. 

Addresses  #5289

@dotnet/roslyn-ide please review.
</Description>
    <CreatedDate>13/01/2016</CreatedDate>
    <ClosedDate>13/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7933</PullRequestID>
        <IssueID>5289</IssueID>
        <Title>Audit editor unit tests for unclosed views</Title>
        <Description>Find refs on TextViewFactory.CreateView is probably a good place to start.
</Description>
        <CreatedDate>16/09/2015</CreatedDate>
        <ClosedDate>13/01/2016</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7930</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Add shutdown argument to VBCSCompiler</Title>
    <Description>This adds a `-shutdown` argument to VBCSCompiler that allows clients to gracefully shutdown the server.  This is implemented by adding a new message to the protocol which does two actions:
- Begins a shut down of the server.
- Returns the process id of the server to the client who initiated the shutdown.  

When reviewing the changes to `ServerDispatcher` it's important to understand the difference between the following operations:
- Shutting down: The server will accept no new build requests but will allow previously scheduled ones to complete without interruption.  While these builds are finishing up the server will continue to respond to shutdown requests with the process id. 
- Cancelling: This happens when the `CancellationToken` passed into the server is signaled.  In this case the server will cancel all previously scheduled build requests and accept no new connections.  In other words, cancel as fast as possible. 

closes #7115

CC @dotnet/roslyn-compiler 
</Description>
    <CreatedDate>13/01/2016</CreatedDate>
    <ClosedDate>19/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7930</PullRequestID>
        <IssueID>7115</IssueID>
        <Title>vbcscompiler.exe should support a /shutdown flag</Title>
        <Description>The vbcscompiler.exe should have some nice way to shut down itself down without resorting to killing all instances everywhere. I could imagine it has a /shutdown flag that either:
1. Shuts down running instances that match the invoked vbcscompiler.exe by full path, or
2. Takes a path and shuts down running instances from that path.
</Description>
        <CreatedDate>30/11/2015</CreatedDate>
        <ClosedDate>19/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7916</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Remove support for inferring the return type of a local function.</Title>
    <Description>Fixes #7832 

@dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>13/01/2016</CreatedDate>
    <ClosedDate>14/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7916</PullRequestID>
        <IssueID>7832</IssueID>
        <Title>Rip out support for inferred return type in local functions</Title>
        <Description>The prototype for local functions (in the future branch) currently includes some support for inferring the return type. The LDM decided that we don't want that. Of course it would be possible to relax this in the future, but for the first iteration this is what we want.

Please remove the code and only support explicitly declared return types.
</Description>
        <CreatedDate>07/01/2016</CreatedDate>
        <ClosedDate>14/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>7887</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Remove locale-dependence in RealParserTests</Title>
    <Description>This addresses part of #7883 

@dotnet/roslyn-compiler Please review; test-only changes
</Description>
    <CreatedDate>11/01/2016</CreatedDate>
    <ClosedDate>12/01/2016</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>7887</PullRequestID>
        <IssueID>7883</IssueID>
        <Title>Test failure in master branch when using a non-US locale</Title>
        <Description>As requested in #7797, contents of Roslyn.Compilers.UnitTests.dll.xml

``
</Description>
        <CreatedDate>11/01/2016</CreatedDate>
        <ClosedDate>12/01/2016</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Contributor Pain</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6860</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>amcasey</FixedByID>
    <Title>Audit usages of Compilation.References</Title>
    <Description>Most callers are probably interested in
`Compilation.ScriptCompilationInfo.PreviousScriptCompilation` as well.
Behavioral changes expected in QuickInfo (fix crash) and SymbolFinder
(offer additional CodeFixes).

Fixes #6616 and #6657.
</Description>
    <CreatedDate>18/11/2015</CreatedDate>
    <ClosedDate>19/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6860</PullRequestID>
        <IssueID>6616</IssueID>
        <Title>Review usage of Compilation.References in Services wrt handling of submission chains and #r's</Title>
        <Description>E.g.

http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/FindSymbols/SymbolFinder_Declarations.cs,78d3c41c6670ddaa,references
</Description>
        <CreatedDate>06/11/2015</CreatedDate>
        <ClosedDate>19/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Interactive-ScriptingIDE</Label>
          <Label>Verification Not Required</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6860</PullRequestID>
        <IssueID>6657</IssueID>
        <Title>AbstractSymbolDescriptionBuilder.GetSemanticModel doesn't handle trees from previous submissions</Title>
        <Description>Previous submissions aren't returned by `Compilation.References` so this method (and others like it) will need to look in `Compilation.PreviousSubmission` explicitly.

I believe I ran into this by triggering QuickInfo for a symbol defined in a previous submission (in the Interactive window).
</Description>
        <CreatedDate>09/11/2015</CreatedDate>
        <ClosedDate>19/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>Interactive-ScriptingIDE</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verification Not Required</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6857</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>brettfo</FixedByID>
    <Title>create a dump for a failing test</Title>
    <Description>A flaky test was disabled for #6409 because an object wasn't gathered by the GC, but manual investigation hasn't yielded anything useful.  This PR will now cause the test to create a memory dump if the object wasn't gathered which can then be investigated after-the-fact (due to artifact archiving in Jenkins).

This code is meant to be temporary and removed once the bug has been fixed or an actionable dump has been collected.

FYI @dotnet/roslyn-infrastructure 
</Description>
    <CreatedDate>18/11/2015</CreatedDate>
    <ClosedDate>25/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6857</PullRequestID>
        <IssueID>6409</IssueID>
        <Title>[Flaky Test] TestRecoverableSyntaxTreeVisualBasic is flaky</Title>
        <Description>http://dotnet-ci.cloudapp.net/job/roslyn_stabil_win_dbg_unit32/67

``
</Description>
        <CreatedDate>28/10/2015</CreatedDate>
        <ClosedDate>30/11/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Verification Not Required</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6844</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>leppie</FixedByID>
    <Title>Scanner and parser fixes for real literals</Title>
    <Description>Fixes #6817, #6109 and #6079 (correctly this time).

As a temporary measure I have added CS0595 (adjacent to CS0594 and not used from what I can see) to indicate an invalid real literal. For now the only case I can see is for missing exponent digits, so the error could possibly be made more specific.

/cc @gafter 
</Description>
    <CreatedDate>18/11/2015</CreatedDate>
    <ClosedDate>23/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6844</PullRequestID>
        <IssueID>6817</IssueID>
        <Title>C# scanner does not check for missing exponent digits for real literals</Title>
        <Description>When I attempted to fix #6109, a look in the code showed that the scanner does not check for real literals correctly.

More specifically, it allows numbers like the following to pass to subsequent stages of the compiler:
- `0e`
- `.5e`
- `1e+`

The bug is here: https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Parser/Lexer.cs#L1032

While the bug is easy to fix, the bigger problem is what error to use in the case. In the past `CS0594` has been used, but this is ambiguous and misleading. There seems to be no general error for invalid reals as `CS1013` for integers. Perhaps one should be created. Another option would be to extend `CS0594` to say `Invalid real literal or [original error message]`.

Sidenote: The legacy compiler actually accepts `0e` as valid.
</Description>
        <CreatedDate>17/11/2015</CreatedDate>
        <ClosedDate>23/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6844</PullRequestID>
        <IssueID>6109</IssueID>
        <Title>Error in scanning "1.0e-99999999999999999999999"; should convert to zero</Title>
        <Description>The literal `1.0e-99999999999999999999999` should scan as the value `0.0`, but it acts as if it is an overflow (compile-time error).
</Description>
        <CreatedDate>17/10/2015</CreatedDate>
        <ClosedDate>23/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6844</PullRequestID>
        <IssueID>6079</IssueID>
        <Title>FormatException when typing "0" (zero) in incomplete statement</Title>
        <Description>![capture](https://cloud.githubusercontent.com/assets/6464209/10549058/89acd082-73f3-11e5-88ff-6bad091a7591.PNG)

Dump at:  [internal file share]\6079\FormatException.dmp

``
</Description>
        <CreatedDate>16/10/2015</CreatedDate>
        <ClosedDate>19/10/2015</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6841</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Fix issues with VSIX deployment and assembly binding in master for RTM machines</Title>
    <Description>This fixes #6828 and #6829.
</Description>
    <CreatedDate>17/11/2015</CreatedDate>
    <ClosedDate>18/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6841</PullRequestID>
        <IssueID>6828</IssueID>
        <Title>Compiler Extension broken on VS 2015 RTM</Title>
        <Description>Can't find System.Collections.Immutable or System.Reflection.Metadata.
</Description>
        <CreatedDate>17/11/2015</CreatedDate>
        <ClosedDate>18/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Bug</Label>
          <Label>Contributor Pain</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6841</PullRequestID>
        <IssueID>6829</IssueID>
        <Title>Interactive Window is broken on VS 2015 RTM</Title>
        <Description>Can't find System.IO.FileSystem.
</Description>
        <CreatedDate>17/11/2015</CreatedDate>
        <ClosedDate>18/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Bug</Label>
          <Label>Contributor Pain</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6839</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>drognanar</FixedByID>
    <Title>Test that modules can be removed during EnC</Title>
    <Description>Tests that #4320 issue has been also resolved for Visual Basic.
</Description>
    <CreatedDate>17/11/2015</CreatedDate>
    <ClosedDate>25/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6839</PullRequestID>
        <IssueID>4320</IssueID>
        <Title>Fix Interactive window indentation</Title>
        <Description>The value returned from
`ISmartIndentationService.GetDesiredIndentation` is absolute, but we
were assuming it was relevant to the prompt.

Fixes #4235
</Description>
        <CreatedDate>04/08/2015</CreatedDate>
        <ClosedDate>04/08/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Interactive-ScriptingLogic</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6836</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Fix issues related to VSIX installation on RTM</Title>
    <Description>This fixes #6828 and #6829.
</Description>
    <CreatedDate>17/11/2015</CreatedDate>
    <ClosedDate>17/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6836</PullRequestID>
        <IssueID>6828</IssueID>
        <Title>Compiler Extension broken on VS 2015 RTM</Title>
        <Description>Can't find System.Collections.Immutable or System.Reflection.Metadata.
</Description>
        <CreatedDate>17/11/2015</CreatedDate>
        <ClosedDate>18/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Bug</Label>
          <Label>Contributor Pain</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6836</PullRequestID>
        <IssueID>6829</IssueID>
        <Title>Interactive Window is broken on VS 2015 RTM</Title>
        <Description>Can't find System.IO.FileSystem.
</Description>
        <CreatedDate>17/11/2015</CreatedDate>
        <ClosedDate>18/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
          <Label>Bug</Label>
          <Label>Contributor Pain</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6816</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Mark the compiler extension as shipping</Title>
    <Description>We use the shipping flag to control VSIX signing, and we want this to be signed.

Fixes GitHub issue #6803.
</Description>
    <CreatedDate>17/11/2015</CreatedDate>
    <ClosedDate>17/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6816</PullRequestID>
        <IssueID>6803</IssueID>
        <Title>Compiler files in Roslyn.Compilers.Extension.vsix are unsigned, causing Signed build break</Title>
        <Description>Relevant output from SignCop:

``
</Description>
        <CreatedDate>16/11/2015</CreatedDate>
        <ClosedDate>17/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6800</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Port fix for flaky test TestAnalyzerLoading from future to master</Title>
    <Description>The test is failing intermittently with an InvalidCastException 'Unable to cast transparent proxy to type 'Microsoft.CodeAnalysis.UnitTests.RemoteAnalyzerFileReferenceTest' over [here](http://source.roslyn.io/#Roslyn.Compilers.UnitTests/AnalyzerFileReferenceTests.cs,197). This test creates a separate appdomain, invokes CreateInstanceAndUnwrap on it and then casts the created object to type RemoteAnalyzerFileReferenceTest defined in the same assembly. This indicates that the CLR ended up loading a separate instance of the assembly from a different path in the appdomain, causing the cast failure.

Fix is to use the [AppDomainUtils.Create](http://source.roslyn.io/Roslyn.Test.Utilities.Desktop/R/32b4516c21702320.html) method for creating the appdomain. This helper method has a special assembly resolve handler hooked up to the created appdomain that first attempts to resolve the assembly from current xunit directory. This helper is already being used by a similar remote analyzer loading test [TestAnalyzerLoading_Error](http://source.roslyn.io/#Roslyn.Compilers.UnitTests/AnalyzerFileReferenceTests.cs,b04fd584904390af).

Fixes #6665
</Description>
    <CreatedDate>16/11/2015</CreatedDate>
    <ClosedDate>17/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6800</PullRequestID>
        <IssueID>6665</IssueID>
        <Title>AnalyzerFileReferenceTests.TestAnalyzerLoading is periodically failing in future</Title>
        <Description>See http://dotnet-ci.cloudapp.net/job/roslyn-internal_future_win_dbg_unit64/49/testReport/Microsoft.CodeAnalysis.UnitTests/AnalyzerFileReferenceTests/TestAnalyzerLoading/ for an example
</Description>
        <CreatedDate>10/11/2015</CreatedDate>
        <ClosedDate>17/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6786</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AdamSpeight2008</FixedByID>
    <Title>Add missing LiteralKind information for type literal character.</Title>
    <Description>Should fix #6785

Added the missing literalkind information for the type literal characters,
So overflow / underflow should be now correctly reported.
</Description>
    <CreatedDate>15/11/2015</CreatedDate>
    <ClosedDate>15/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6786</PullRequestID>
        <IssueID>6785</IssueID>
        <Title>VB incorrectly reports overflow for negative integer literals</Title>
        <Description>![incorrectoverflow](https://cloud.githubusercontent.com/assets/7267084/11165750/c7fc566c-8b10-11e5-93b5-7749b73b1c15.png)

VB is incorrectly reporting overflow for negative integer literals. This happens in both VS2013 and VS2015. I took the screenshot below from VS2015. Looks like the literal is being treated as positive for the diagnostic to return an overflow.
</Description>
        <CreatedDate>14/11/2015</CreatedDate>
        <ClosedDate>15/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Resolution-By Design</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6781</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>KevinH-MS</FixedByID>
    <Title>Fix hard-coded error message in DynamicView tests...</Title>
    <Description>Fixes #5667
</Description>
    <CreatedDate>14/11/2015</CreatedDate>
    <ClosedDate>16/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6781</PullRequestID>
        <IssueID>5667</IssueID>
        <Title>[LOC] Roslyn.ExpressionEvaluator.VisualBasic.ResultProvider.UnitTests.dll has string translation issue with JPN</Title>
        <Description>Run Roslyn.ExpressionEvaluator.VisualBasic.ResultProvider.UnitTests.dll on JPN OS, JPN VS, and VSUML installed.

Errors are:
Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.DynamicViewTests.NoMembers [FAIL]
      Assert.Equal() Failure\r\nPosition: First difference is at position 0\r\nExpected: No further information on this object could be discovered\r\nActual:   ‚±‚ÌƒIƒuƒWƒFƒNƒg‚ÉŠÖ‚·‚éÚ×î•ñ‚ªŒ©‚Â‚©‚è‚Ü‚¹‚ñ‚Å‚µ‚½
      Stack Trace:
            êŠ Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)
            êŠ Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProviderTestBase.Verify(DkmEvaluationResult actual, DkmEvaluationResult expected)
            êŠ Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProviderTestBase.Verify(IReadOnlyList`1 actual, DkmEvaluationResult[] expected)
</Description>
        <CreatedDate>02/10/2015</CreatedDate>
        <ClosedDate>16/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Interactive-Debugging</Label>
          <Label>Tenet-Localization</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6777</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>KevinH-MS</FixedByID>
    <Title>Always "fail fast" in EE unit tests...</Title>
    <Description>We always want to "fail fast" if there is an Exception in the EE unit
tests (we never want to go down the "generate a non-fatal Watson" code
path).  Also, there were several places where we were generating
non-fatal Watsons for cases that were not truly "exceptional" (the
Exception was being handled reasonably and returned as an "error" result).

We should only have a filter to generate a non-fatal Watson in places
where it would also make sense to throw an unhandled Exception.

(fixes #6051)
</Description>
    <CreatedDate>14/11/2015</CreatedDate>
    <ClosedDate>14/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6777</PullRequestID>
        <IssueID>6051</IssueID>
        <Title>ExpressionEvaluator.CSharp.ResultsProvider tests are failing in master</Title>
        <Description>**Repro:**

``
</Description>
        <CreatedDate>16/10/2015</CreatedDate>
        <ClosedDate>14/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Interactive-Debugging</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6769</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>ManishJayaswal</FixedByID>
    <Title>add imports for System.Console in response file - fixes #6768</Title>
    <Description>I still need to add unit test for this but apparently we first need to figure out how to hook up a real evaluator to a test first.
#6768
</Description>
    <CreatedDate>13/11/2015</CreatedDate>
    <ClosedDate>13/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6769</PullRequestID>
        <IssueID>6768</IssueID>
        <Title>Console.ReadLine() in Interactive? Currently, I just get a spinning cursor which ...</Title>
        <Description>luckily I can cancel if I right-click and reset….
</Description>
        <CreatedDate>13/11/2015</CreatedDate>
        <ClosedDate>13/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6745</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Fix for flaky test TestAnalyzerLoading</Title>
    <Description>This test is failing intermittently with an `InvalidCastException` _'Unable to cast transparent proxy to type 'Microsoft.CodeAnalysis.UnitTests.RemoteAnalyzerFileReferenceTest'_ over [here](http://source.roslyn.io/#Roslyn.Compilers.UnitTests/AnalyzerFileReferenceTests.cs,197). This test creates a separate appdomain, invokes `CreateInstanceAndUnwrap` on it and then casts the created object to type `RemoteAnalyzerFileReferenceTest` defined in the same assembly. This indicates that the CLR ended up loading a separate instance of the assembly from a different path in the appdomain, causing the cast failure.

Fix is to use the [AppDomainUtils.Create](http://source.roslyn.io/Roslyn.Test.Utilities.Desktop/R/32b4516c21702320.html) method for creating the appdomain. This helper method has a special assembly resolve handler hooked up to the created appdomain that first attempts to resolve the assembly from current xunit directory. This helper is already being used by a similar remote analyzer loading test [TestAnalyzerLoading_Error](http://source.roslyn.io/#Roslyn.Compilers.UnitTests/AnalyzerFileReferenceTests.cs,b04fd584904390af).

Fixes #6665
</Description>
    <CreatedDate>12/11/2015</CreatedDate>
    <ClosedDate>13/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6745</PullRequestID>
        <IssueID>6665</IssueID>
        <Title>AnalyzerFileReferenceTests.TestAnalyzerLoading is periodically failing in future</Title>
        <Description>See http://dotnet-ci.cloudapp.net/job/roslyn-internal_future_win_dbg_unit64/49/testReport/Microsoft.CodeAnalysis.UnitTests/AnalyzerFileReferenceTests/TestAnalyzerLoading/ for an example
</Description>
        <CreatedDate>10/11/2015</CreatedDate>
        <ClosedDate>17/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6740</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>Avoid hard test dependency on FX 3.5</Title>
    <Description>Fixes issue #6588
</Description>
    <CreatedDate>12/11/2015</CreatedDate>
    <ClosedDate>12/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6740</PullRequestID>
        <IssueID>6588</IssueID>
        <Title>Unification scripting tests are non-deterministically failing</Title>
        <Description>References_Versioning_FxUnification2 and References_Versioning_FxUnification1 are failing on my box with:

``
</Description>
        <CreatedDate>05/11/2015</CreatedDate>
        <ClosedDate>12/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6738</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>bbarry</FixedByID>
    <Title>bypass Format on simple constant interpolated strings</Title>
    <Description>When an interpolated string doesn't have alignment or formatString parameters it is faster to instead use Concat. Further optimizations can be done on calls to Concat with only one parameter.

Fixes #6669
</Description>
    <CreatedDate>12/11/2015</CreatedDate>
    <ClosedDate>13/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6738</PullRequestID>
        <IssueID>6669</IssueID>
        <Title>Optimize string concatenation using an interpolated string</Title>
        <Description>It would be nice if the compiler optimized interpolated strings where you're basically just doing concatenation. `string.Concat` is faster than `string.Format`, at least for up to 3-4 strings.

See https://github.com/aspnet/HttpAbstractions/pull/460 for reference. There's a benchmark at https://gist.github.com/NickCraver/fce9754c50aa7a4c9593.
## Example

``
</Description>
        <CreatedDate>10/11/2015</CreatedDate>
        <ClosedDate>26/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Won't Fix</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6734</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Fix the batch pragma suppression fixer to handle the case where multi…</Title>
    <Description>…ple diagnostics with different IDs are being suppressed on the same token

Current logic in batch pragma fixer merges individual fixes in a document by applying each pragma fix sequentially and keeping track of new diagnostics spans for remaining diagnostics. The latter logic that computes new spans was using out of date spans, causing the subsequent fixes to be incorrectly applied. This change fixes that logic.

Fixes #6455
</Description>
    <CreatedDate>12/11/2015</CreatedDate>
    <ClosedDate>13/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6734</PullRequestID>
        <IssueID>6455</IssueID>
        <Title>Suppressing multiple compiler warnings on same token doesn't suppress them all</Title>
        <Description>- Create a C# class library with following code:

``
</Description>
        <CreatedDate>30/10/2015</CreatedDate>
        <ClosedDate>13/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6732</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>genlu</FixedByID>
    <Title>Fix copy/paste full line in interactive window</Title>
    <Description>Copy full line is done by ctrl+c with out selection.
Paste copied full line w/o selection will paste at the start of the current line.

Fix #5310.

@dotnet/roslyn-interactive 
</Description>
    <CreatedDate>12/11/2015</CreatedDate>
    <ClosedDate>14/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6732</PullRequestID>
        <IssueID>5310</IssueID>
        <Title>Copy-Paste with no selection isn't working</Title>
        <Description>Put the cursor on the last occurrence of "Line" (no text selected), ctrl-c, ctrl-v.

``
</Description>
        <CreatedDate>17/09/2015</CreatedDate>
        <ClosedDate>23/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>Interactive-ScriptingIDE</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6731</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Enforce the precedence of a query expression</Title>
    <Description>Fixes #6726 in strict mode only

@dotnet/roslyn-compiler please review
</Description>
    <CreatedDate>12/11/2015</CreatedDate>
    <ClosedDate>18/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6731</PullRequestID>
        <IssueID>6726</IssueID>
        <Title>Parser improperly allows a query expression on the right-hand-side of binary operators</Title>
        <Description>The Roslyn C# compiler's parser improperly allows a query expression on the right-hand-side of a binary operator, despite that being disallowed by the precedence of the language. Such code would usually not be semantically valid in any case.

Please enforce the syntax, at least in "strict" mode. The following should cause a syntax error:

``
</Description>
        <CreatedDate>12/11/2015</CreatedDate>
        <ClosedDate>18/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Language-C#</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6708</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>bbarry</FixedByID>
    <Title>[WIP] use Concat instead of Format when simple</Title>
    <Description>If there are no format string _alignment_ or _formatString_ parameters, it should be faster to do a `string.Concat` call instead of `string.Format`.

Fixes #6669 

Now against the correct fork.

Tests cases coming... I think this is the wrong way to fix this anyway. This only affects interpolated strings, but all string format calls could use this optimization.
</Description>
    <CreatedDate>11/11/2015</CreatedDate>
    <ClosedDate>12/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6708</PullRequestID>
        <IssueID>6669</IssueID>
        <Title>Optimize string concatenation using an interpolated string</Title>
        <Description>It would be nice if the compiler optimized interpolated strings where you're basically just doing concatenation. `string.Concat` is faster than `string.Format`, at least for up to 3-4 strings.

See https://github.com/aspnet/HttpAbstractions/pull/460 for reference. There's a benchmark at https://gist.github.com/NickCraver/fce9754c50aa7a4c9593.
## Example

``
</Description>
        <CreatedDate>10/11/2015</CreatedDate>
        <ClosedDate>26/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Won't Fix</Label>
          <Label>Tenet-Performance</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6703</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>KevinH-MS</FixedByID>
    <Title>Fix infinite recursion in remove/replace for #load'ed files...</Title>
    <Description>Fixes #6698
</Description>
    <CreatedDate>11/11/2015</CreatedDate>
    <ClosedDate>11/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6703</PullRequestID>
        <IssueID>6698</IssueID>
        <Title>Cyclic #load hangs VS</Title>
        <Description>1. Create a csx file containing only a `#load` of itself (I used the absolute path)
2. In the C# Interactive window, `#load` the csx file
</Description>
        <CreatedDate>10/11/2015</CreatedDate>
        <ClosedDate>11/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>Interactive-ScriptingLogic</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6701</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>nguerrera</FixedByID>
    <Title>Adjust ErrorLogger to conform to current SARIF draft </Title>
    <Description>- Add doc about log format
- Change structure from:

```
   {
      "version": &lt;version&gt;,
      "toolInfo": &lt;toolInfo&gt;,
      "issues": [ &lt;issue&gt;* ]
   }
```

to:

```
    {
      "version": &lt;version&gt;,
      "runLogs": [
        {
          "toolInfo": &lt;toolInfo&gt;,
           "issues": [ &lt;issue&gt;* ]
        }
      ]
    }
```
- Flatten custom properties to conform to requirement for all issue
  property values to be strings:

```
   "customProperties": { "a": "b", "c": "d" }
-&gt; "customProperties.a": "b", "customProperties.c": "d"
```
- Rename toolName -&gt; name
- Rename productVersion -&gt; version
- Let original fileVersion through without trimming off 4th part
- Use actual URI syntax for "uri" elements
- Make region start/end line/column 1-based

cc @mavasani @srivatsn @lgolding @michaelcfanning 

Fix #3670 
Fix #5752

(Side note: I've made the changes as minimally as possible. Separately, I think there could be significant benefit to the following refactoring, but didn't want to mix it with the functional change here:
1. Split out a separate, forward-only internal JsonWriter from ErrorLogger
2. Write everything out directly via (1) without intermediate Issue, Value, ImmutableArray objects

I could look at doing that as a follow-up if you'd like and agree it would be valuable.)
</Description>
    <CreatedDate>10/11/2015</CreatedDate>
    <ClosedDate>12/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6701</PullRequestID>
        <IssueID>3670</IssueID>
        <Title>Document /errorlog file format</Title>
        <Description>The csc and vbc command lines now include an /errorlog option for specifying a file to which diagnostic information is written. The output format is some kind of json.

Please document the precise format of this file. I suggest adding the documentation to `docs/compilers` in markdown format.
</Description>
        <CreatedDate>24/06/2015</CreatedDate>
        <ClosedDate>12/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Documentation</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6701</PullRequestID>
        <IssueID>5752</IssueID>
        <Title>SARIF output contains a sub-object within properties</Title>
        <Description>The Roslyn compiler produces SARIF output as follows:

``
</Description>
        <CreatedDate>07/10/2015</CreatedDate>
        <ClosedDate>12/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6700</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>Revert "Remove SymReader mock, use the real reader since we always have ISymUnmanagedReader3 now"</Title>
    <Description>This reverts commit bb5091340addd8ffaa0c2586b7a0961040c73ada. We need to investigate intermittent failures in DiaSymReader first, such as #6651.
</Description>
    <CreatedDate>10/11/2015</CreatedDate>
    <ClosedDate>12/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6700</PullRequestID>
        <IssueID>6651</IssueID>
        <Title>Constants test in the BasicExpressionCompilerTest.LocalsTests occasionally fails with OverflowException</Title>
        <Description>Likely due to a DSR issue. see http://dotnet-ci.cloudapp.net/job/roslyn_master_win_dbg_unit32/297/testReport/Microsoft.CodeAnalysis.VisualBasic.UnitTests/LocalsTests/Constants/ for an example
</Description>
        <CreatedDate>09/11/2015</CreatedDate>
        <ClosedDate>19/12/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6699</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Make assert condition in ScanInterpolatedStringPunctuation more precise.</Title>
    <Description>Fixes #6341.

@dotnet/roslyn-compiler Please review.
CC @AnthonyDGreen 
</Description>
    <CreatedDate>10/11/2015</CreatedDate>
    <ClosedDate>11/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6699</PullRequestID>
        <IssueID>6341</IssueID>
        <Title>DontRemoveLineContinuationInStringInterpolation3 test asserts</Title>
        <Description>As part of the test cleanup, we're disabling tests that are flaky based on Azure runs that we're doing, this test is one of them.

The test is not yet disabled, when it is, the associated commit will be linked.

**Dump:**

`\\mlangfs1\public\davkean\6341.dmp`

**Code:**

``
</Description>
        <CreatedDate>26/10/2015</CreatedDate>
        <ClosedDate>11/11/2015</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6694</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Documentation for csc and vbc command-line.</Title>
    <Description>Currently these are almost the same as csc /help and vbc /help, but it is intended that over time these documents be expanded to include a more complete description of the syntax and semantics of each command-line flag.

Fixes #1074

@dotnet/roslyn-compiler Please review.
</Description>
    <CreatedDate>10/11/2015</CreatedDate>
    <ClosedDate>12/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6694</PullRequestID>
        <IssueID>1074</IssueID>
        <Title>The C# and VB compiler command-line switches should be added to our docs</Title>
        <Description>&lt;!---
@huboard:{"order":358.5,"milestone_order":1074,"custom_state":""}
--&gt;
</Description>
        <CreatedDate>06/03/2015</CreatedDate>
        <ClosedDate>12/11/2015</ClosedDate>
        <Labels>
          <Label>4 - In Review</Label>
          <Label>Area-Compilers</Label>
          <Label>Documentation</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
          <Label>Language-VB</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6678</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Fix a few flaky suites</Title>
    <Description>This change fixes a few of the flaky compiler server suites.  Fixing this required a bit of work as the flakiness was related to our use of cross process / named pipes in the actual tests.  I refactored the code to leverage interfaces more in order to more directly test the scenarios involved.

closes #4301
</Description>
    <CreatedDate>10/11/2015</CreatedDate>
    <ClosedDate>11/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6678</PullRequestID>
        <IssueID>4301</IssueID>
        <Title>Fix flaky KeepAlive Tests</Title>
        <Description>A number of the keep alive tests in CompilerServerApiTests are disabled due to flaky behavior in the lab.  Need to fix the flaky behavior and re-enable these suites. 
</Description>
        <CreatedDate>03/08/2015</CreatedDate>
        <ClosedDate>11/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6654</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>Instrument LocalsTests.Constants to diagnose overflow</Title>
    <Description>The test fails intermittently, see e.g. #6651
</Description>
    <CreatedDate>09/11/2015</CreatedDate>
    <ClosedDate>09/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6654</PullRequestID>
        <IssueID>6651</IssueID>
        <Title>Constants test in the BasicExpressionCompilerTest.LocalsTests occasionally fails with OverflowException</Title>
        <Description>Likely due to a DSR issue. see http://dotnet-ci.cloudapp.net/job/roslyn_master_win_dbg_unit32/297/testReport/Microsoft.CodeAnalysis.VisualBasic.UnitTests/LocalsTests/Constants/ for an example
</Description>
        <CreatedDate>09/11/2015</CreatedDate>
        <ClosedDate>19/12/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6647</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>diryboy</FixedByID>
    <Title>Convert file encoding to utf-8.</Title>
    <Description>Fix the files in the second part of #6643, it's just encoding change, no actual behavior changes.
</Description>
    <CreatedDate>09/11/2015</CreatedDate>
    <ClosedDate>09/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6647</PullRequestID>
        <IssueID>6643</IssueID>
        <Title>Consider moving non-unicode test files to separate projects and apply encoding info to them</Title>
        <Description>While running tests locally for #6642 the following tests failed me, but the submitted PR ran fine on Jenkins. Except the first two, they "blend" in the tests that are not set up for encoding related contexts. 

Please consider move encoding tests to explicit place for encoding related test and convert the file into UTF8 encoding for tests that are not target for encodings.

This issue is similar to #5413

``
</Description>
        <CreatedDate>08/11/2015</CreatedDate>
        <ClosedDate>30/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Test</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6635</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Prevent MEF DefaultHost loading in the syntactic classifier</Title>
    <Description>The syntactic classification tagger was creating a AdhocWorkspace when the buffer being tagged was otherwise attached to a real workspace. It was creating one with the default constructor, which in Visual Studio does not use the Visual Studio MEF composition but rather creates its own. This causes more assemblies to be loaded than we would like since it does not have any caching. The fix is to create a HostServices that does get its exports from the Visual Studio MEF composition.

This fixes internal bug 160968.

This was regressed as a part of #6392. This was the bug fix where we would once again classify text buffers for things like TFS annotate and diff. To simplify the change we avoided writing code I'm writing as a part of this PR, and then did a bunch of validation to ensure it wouldn't run in scenarios other than the TFS scenario. We missed testing the ASP.NET scenario.

This was pair programmed with @jmarolf. @dotnet/roslyn-ide, please code review this carefully as we are currently considering it for the stabilization branch.
</Description>
    <CreatedDate>07/11/2015</CreatedDate>
    <ClosedDate>09/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6635</PullRequestID>
        <IssueID>6392</IssueID>
        <Title>Syntactically classify buffers without a workspace</Title>
        <Description>Fixes #873

Sometimes there are buffers with our C#/VB content types that are not added to the Running Document Table and therefore never end up in the MiscellaneousFilesWorkspace (or any workspace), such as the Source Control "Annotate" view. This updates the Syntactic Classifier to handle such cases by creating a document for it in an AdhocWorkspace that lives for the lifetime of the tagger.
</Description>
        <CreatedDate>28/10/2015</CreatedDate>
        <ClosedDate>02/11/2015</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6632</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Fix suppression fixer to correctly detect the enclosing member when g…</Title>
    <Description>…enerating a global suppression for a diagnostic in trivia.

Fixes #6379
</Description>
    <CreatedDate>06/11/2015</CreatedDate>
    <ClosedDate>11/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6632</PullRequestID>
        <IssueID>6379</IssueID>
        <Title>Global suppression for diagnostic on trivia of an enum member doesn't work</Title>
        <Description>1. Create a C# project with below code:
   
   ``

**Expected:** CC0065 diagnostic goes away as it got suppressed.
**Actual:** Diagnostic still shows up as active.

**Reason:** It seems that the global suppression is being applied to the span of member M1, not its fullspan which includes the trivia - this is causing the diagnostic to still be unsuppressed.
</Description>
        <CreatedDate>28/10/2015</CreatedDate>
        <ClosedDate>11/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Analyzers</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6617</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AmadeusW</FixedByID>
    <Title>Corrects the ConvertToAutoPropertyCS sample</Title>
    <Description>Correctly checks for the field variable's symbol in the **ConvertToAutoPropertyCS** sample

This fixes #2127 

---

This fix could be improved by also cleaning up fields with multiple variables declared. Currently a field with multiple variables is left intact. Do we want to demonstrate such scenario in a code fix provider?

![img](https://i.gyazo.com/2eb49f2f68ee0902546a594359e8571d.png)

This can be accomplished with the following code:

``` csharp
            else if (field.Declaration.Variables.Count &gt; 1)
            {
                return field.WithDeclaration(
                    field.Declaration.WithVariables(
                        SyntaxFactory.SeparatedList(
                            field.Declaration.Variables.Where(
                                v =&gt; !object.Equals(semanticModel.GetDeclaredSymbol(v), backingField)
                            )
                        )
                    )
                );
            }
```

However, this would require Linq which is against [the contribution guidelines](https://github.com/dotnet/roslyn/wiki/Contributing-Code) regarding the compiler hot path. This is an analyzer, is Linq ok here? 
</Description>
    <CreatedDate>06/11/2015</CreatedDate>
    <ClosedDate>18/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6617</PullRequestID>
        <IssueID>2127</IssueID>
        <Title>ConvertToAutoPropertyCS sample doesn't delete the backing field (CTP2)</Title>
        <Description>Ported from TFS WorkItem: **529534**

---

**Repro Steps:**

When you build and run the sample, then try to apply it on this code:  

``

It is expected to remove the backing field, however the backing field isn&amp;#39;t removed.
</Description>
        <CreatedDate>20/04/2015</CreatedDate>
        <ClosedDate>18/11/2015</ClosedDate>
        <Labels>
          <Label>Area-SDK and Samples</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>help wanted</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6609</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>KevinH-MS</FixedByID>
    <Title>[AskMode] Fix issue with #load of files that can't be read as text...</Title>
    <Description>If a #load'ed file can be resolved, but cannot be read (or cannot be read as text), it doesn't get added to the map of resolved file paths -&gt; SyntaxTrees (because there is no SyntaxTree to add).  This wasn't handled in the remove and replace helpers that rebuild the various syntax maps.  In addition, we were attempting to add #load'ed trees to the ordinal map twice in the case that their ordinal position needed to be shifted after a remove or replace.

(fixes #6589)
</Description>
    <CreatedDate>06/11/2015</CreatedDate>
    <ClosedDate>06/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6609</PullRequestID>
        <IssueID>6589</IssueID>
        <Title>Running incorrect #load command crashes Visual Studio</Title>
        <Description>Running

``

Dump available at (ML File Share)\public\jmarolf\Dumps\LoadCrash.dmp
</Description>
        <CreatedDate>05/11/2015</CreatedDate>
        <ClosedDate>07/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>Interactive-ScriptingLogic</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>6602</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>TyOverby</FixedByID>
    <Title>5829 line directive</Title>
    <Description>Please ignore the first 4 commits of this PR.  Those are coming from #6572 and that pull-request should be merged before this one.
</Description>
    <CreatedDate>05/11/2015</CreatedDate>
    <ClosedDate>10/11/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>6602</PullRequestID>
        <IssueID>6572</IssueID>
        <Title>Enable determinism end-to-end tests and fix SourceFileResolver</Title>
        <Description>Due to a mistake on my part, apparently end-to-end tests haven't been running on the CI server.  This change fixes that, and also fixes a bug that would have been caught if they had been running.

@jaredpar 
@dotnet/roslyn-compiler 
</Description>
        <CreatedDate>05/11/2015</CreatedDate>
        <ClosedDate>07/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4909</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>amcasey</FixedByID>
    <Title>Move remaining InteractiveWindow behavior to the UI thread</Title>
    <Description>Fixes #4044.
</Description>
    <CreatedDate>01/09/2015</CreatedDate>
    <ClosedDate>01/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4909</PullRequestID>
        <IssueID>4044</IssueID>
        <Title>Review all mutable fields of InteractiveWindow</Title>
        <Description>Unlike the fields of `InteractiveWindow.UIThreadOnly`, the fields of `InteractiveWindow` can be (and are) accessed by any thread.  Since we're not doing anything to sequentialize accesses, we probably have race conditions.
</Description>
        <CreatedDate>22/07/2015</CreatedDate>
        <ClosedDate>01/09/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>Interactive-ScriptingLogic</Label>
          <Label>Verification Not Required</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4908</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Ensure proper initialization of a ”Me” pointer in a Closure created for a block within constructor body.</Title>
    <Description>Fixes #4899.

@VSadov, @gafter, @jaredpar, @agocke Please review.    
</Description>
    <CreatedDate>31/08/2015</CreatedDate>
    <ClosedDate>01/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4908</PullRequestID>
        <IssueID>4899</IssueID>
        <Title>Closure isn't initialized properly within a Try block inside a constructor</Title>
        <Description>Ported from DevDiv 1207506

Compile and run the following code:

``

A NullReferenceException is thrown inside FPixels getter.

Doesn't happen when Try block is extracted into a separate method, or when declaration of `w` is moved out of the Try block.
</Description>
        <CreatedDate>31/08/2015</CreatedDate>
        <ClosedDate>01/09/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4897</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>rchande</FixedByID>
    <Title>F1 help should search for the names, not types, of properties.</Title>
    <Description>Fixes #4150.

cc @balajikris @brettfo @CyrusNajmabadi @dpoeschl @DustinCampbell  @jasonmalinowski @jmarolf @Pilchie 
</Description>
    <CreatedDate>31/08/2015</CreatedDate>
    <ClosedDate>18/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4897</PullRequestID>
        <IssueID>4150</IssueID>
        <Title>VB F1 Help searches for the type of a property rather than a property itself</Title>
        <Description>In a WinForms app, paste

``

and try to use F1 help on the property accesses from `c`. We generate query strings that search for the type of the property rather than the fully qualified name of the property (ie System.Color instead of ComboBox.BackColor)
</Description>
        <CreatedDate>27/07/2015</CreatedDate>
        <ClosedDate>18/09/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4881</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jmarolf</FixedByID>
    <Title>Correctly Generate Interface in Generic Class</Title>
    <Description>Use generic name if class we are generating into is generic.

Fixes #2785
</Description>
    <CreatedDate>29/08/2015</CreatedDate>
    <ClosedDate>02/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4881</PullRequestID>
        <IssueID>2785</IssueID>
        <Title>[Bug] Implement interface through static member referred wrong member name in generic classes</Title>
        <Description>I'm using Visual Studio 2015 RC.

**Code example:**

``

**Note:**
1. The class must be a generic class.
2. The member must be a static field or property.

**Steps:**
1. Put caret on `IList&lt;object&gt;`.
2. Press `Ctrl + .`, choose `Implement interface through "innerList"` menu item.

**What happened:**

Visual Studio generates code using `Issue2785.innerList` to refer this member, causes code failed to compile (missing generic type arguments).

**What should happen:**

Visual Studio uses `innerList` to refer this member, when this member is not static or this class is not generic, Visual Studio will do it correctly.

**Another question:**

When uses "Implement interface explicitly", Visual Studio generates code for members already implemented implicitly, is it a bug or by design?
</Description>
        <CreatedDate>15/05/2015</CreatedDate>
        <ClosedDate>02/09/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4877</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jmarolf</FixedByID>
    <Title>Generate inaccessible getters and setters</Title>
    <Description>The code generator no longer checks for accessibility when deciding if it
should generate a getter or a setter.  There are many cases where we
generate code that is inaccessible in the hope that the user can fix the
accessibility problem later.

Fixes #2407
</Description>
    <CreatedDate>28/08/2015</CreatedDate>
    <ClosedDate>04/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4877</PullRequestID>
        <IssueID>2407</IssueID>
        <Title>"Implement Abstract Class" Shouldn't be Offered as Refactoring for Classes with Internal Abstract Members</Title>
        <Description>If I write this (VS2015 CTP6):

``

I shouldn't get that refactoring option if I really can't implement the members.
</Description>
        <CreatedDate>30/04/2015</CreatedDate>
        <ClosedDate>04/09/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4875</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Add WithEncoding and WithChecksumAlgorithm to SourceText</Title>
    <Description>This related to #4767 but not yet sure it if totally fixes the problem.

Adding PR to build/test for now
</Description>
    <CreatedDate>28/08/2015</CreatedDate>
    <ClosedDate>01/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4875</PullRequestID>
        <IssueID>4767</IssueID>
        <Title>Code fixes cannot change source encoding alone</Title>
        <Description>## Background

The differencing algorithm currently ignores content changes due to changes in the encoding of a `SourceText` for a document. This is causing a multitude of problem for the implementation of StyleCop Analyzers' rule SA1412 (Store files as UTF-8).

The analyzer and code fix were originally implemented in DotNetAnalyzers/StyleCopAnalyzers#1151. Since Roslyn would not show treat a document as changed if the only change was encoding, we were forced to work around the issue by creating a code fix which _removes_ the original document and _adds_ a new document with the same name but a new encoding. While this "works" to some extent, the user experience is particularly terrible. In addition to the preview appearing as though the document were simply deleted, the following bugs have been filed:
- DotNetAnalyzers/StyleCopAnalyzers#1169: SA1412 code fix does not work properly on linked files
- DotNetAnalyzers/StyleCopAnalyzers#1239: SA1412 code fix does not preserve DependentUpon solution items
## Desired solution

We would like to be able to create a code fix that uses `document.WithText` to transform the document:

``
</Description>
        <CreatedDate>25/08/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Concept-API</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4874</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>brettfo</FixedByID>
    <Title>list exceptions from the doc comments when showing quick info</Title>
    <Description>This fixes a TODO comment in the Quick Info code and also addresses a customer-filed bug; VS2013 displays exception info, but VS2015 does not.

The bulk of this PR is simple plumbing with the real work occurring in `AbstractSymbolDisplayService.AbstractSymbolDescriptionBuilder.cs`.

Tagging @Pilchie @dpoeschl @jasonmalinowski @rchande @balajikris @CyrusNajmabadi @jmarolf @davkean for review.

_Preview of how it looks now:_
![4874](https://cloud.githubusercontent.com/assets/926281/9556678/7b423336-4d8b-11e5-9c46-b342a19ec782.png)

Fixes #4868.
</Description>
    <CreatedDate>28/08/2015</CreatedDate>
    <ClosedDate>04/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4874</PullRequestID>
        <IssueID>4868</IssueID>
        <Title>QuickInfo does not list exceptions from documentation comments.</Title>
        <Description>When invoking QuickInfo on the `StreamReader` constructor:

``

(Issue was reported by a customer and tracked as internal bug 1213849.)
</Description>
        <CreatedDate>28/08/2015</CreatedDate>
        <ClosedDate>04/09/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4872</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>rchande</FixedByID>
    <Title>When showing completion for conditional access, walk up the tree to f…</Title>
    <Description>…ind a parent With block

Fixes #4750

cc: @balajikris @brettfo @CyrusNajmabadi @dpoeschl @DustinCampbell @jasonmalinowski @Pilchie 
</Description>
    <CreatedDate>28/08/2015</CreatedDate>
    <ClosedDate>02/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4872</PullRequestID>
        <IssueID>4750</IssueID>
        <Title>Completion should trigger on . after ? in a null-conditional access expression with an implicit With block receiver</Title>
        <Description>In the example below completion should pop up after ?. on line 1 (before Length); today it does not.

``
</Description>
        <CreatedDate>24/08/2015</CreatedDate>
        <ClosedDate>02/09/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Language-VB</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4867</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>balajikris</FixedByID>
    <Title>Automatic line ending for expression bodied members</Title>
    <Description>Add support for expression bodied member scenarios in automatic line ending in C#. 

Fixes #3944
</Description>
    <CreatedDate>28/08/2015</CreatedDate>
    <ClosedDate>02/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4867</PullRequestID>
        <IssueID>3944</IssueID>
        <Title>Shift + Enter does not insert semicolon inside expression bodied member body</Title>
        <Description>``

**Expected**: With caret at $$, pressing Shift + Enter, inserts semicolon after the close paren, inserts a new line after that statement and places caret where the next statement should begin.

**Actual**: It does not insert the missing semi-colon. It does however insert the newline.
</Description>
        <CreatedDate>14/07/2015</CreatedDate>
        <ClosedDate>02/09/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4857</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>ManishJayaswal</FixedByID>
    <Title>Makes history navigation stop at top and bottom and and fixes several…</Title>
    <Description>… history navigation bugs. Fixes #4669 
</Description>
    <CreatedDate>28/08/2015</CreatedDate>
    <ClosedDate>01/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4857</PullRequestID>
        <IssueID>4669</IssueID>
        <Title>History in interactive window should not cycle</Title>
        <Description>It should stop when it reaches 1st item in the history list and user tries to go to previous and similarly when it is at the last item and user tries to go to next. This is the behavior in command window too.
</Description>
        <CreatedDate>20/08/2015</CreatedDate>
        <ClosedDate>01/09/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Bug</Label>
          <Label>Interactive-ScriptingLogic</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4855</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jmarolf</FixedByID>
    <Title>Fix inserting using inside namespace</Title>
    <Description>Previously if we added a using inside a namespace we would use a
speculative semantic model determine if we should use the fully qualified
name or not.  What this approach failed to account for was if the name
was going to be simplified further due to the containing namespace.  To
Fix this we run the simplifier over our document and check if there are
any changes made to the namespace.  If this is the case, then we re-sort
the usings according to the simplified name.  

This change also unified add import and sort using code paths.

Fixes #3080
</Description>
    <CreatedDate>27/08/2015</CreatedDate>
    <ClosedDate>04/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4855</PullRequestID>
        <IssueID>3080</IssueID>
        <Title>"Add using" code fix mis-sorts between namespaces sharing a prefix</Title>
        <Description>Roslyn's Add Using code fix adds the new statement with a sort order inconsistent with the Sort Usings refactoring.

Consider a C# console application with this source code:

``

This repros on VSPro_Platform 22915.00

Note in my experimentation this relies on the `using` statements appearing within a namespace block that starts with `Microsoft` (since `Win32` is shorthand for `Microsoft.Win32`). So in general I think when short-hand namespaces are specified due to overlap with the containing namespace block, that "add using" sorts incorrectly. 
</Description>
        <CreatedDate>26/05/2015</CreatedDate>
        <ClosedDate>04/09/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4852</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jmarolf</FixedByID>
    <Title>Using correct case in-sensitive comparer</Title>
    <Description>Fixes #4782
</Description>
    <CreatedDate>27/08/2015</CreatedDate>
    <ClosedDate>04/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4852</PullRequestID>
        <IssueID>4782</IssueID>
        <Title>Add Import uses incorrect string comparison for identifiers</Title>
        <Description>https://github.com/dotnet/roslyn/blob/master/src/Features/CSharp/Portable/CodeFixes/AddImport/CSharpAddImportCodeFixProvider.cs#L704-L706

Should use Microsoft.CodeAnalysis.CaseInsenitiveComparison.
</Description>
        <CreatedDate>25/08/2015</CreatedDate>
        <ClosedDate>04/09/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4797</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>balajikris</FixedByID>
    <Title>Get document moniker from IVsProject instead of RDT</Title>
    <Description>Switching to IVsProject.GetMkDocument to get document moniker instead of
iterating through all the entries in the running document table. Also
cleaning up a bit of code while I'm here - It looks like we don't need
to determine Shared Hierarchy &amp; Shared ItemId here anymore. It was there
for error list and it looks like with PR #2399 error list switched to a
different implementation.

Fixes #3645.

Validations To Do:
- [x] Run Integration tests: Venus, Razor, LinkedFiles
- [x] Exploratory testing on Asp Net 5 projects (shared hierarchies!), other Web flavored projects
</Description>
    <CreatedDate>25/08/2015</CreatedDate>
    <ClosedDate>08/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4797</PullRequestID>
        <IssueID>2399</IssueID>
        <Title>made error list to report Project ID Guid to error list</Title>
        <Description>we decide to move away from IVsHierarchy and instead use Project Id Guid. we just need some kind of ID to distinguish between different projects. IVsHierarchy is just not right one to use for that purpose.
</Description>
        <CreatedDate>30/04/2015</CreatedDate>
        <ClosedDate>01/05/2015</ClosedDate>
        <Labels>
          <Label>cla-already-signed</Label>
        </Labels>
      </Issue>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4797</PullRequestID>
        <IssueID>3645</IssueID>
        <Title>VsHierarchyExtensions.GetMonikerForHierarchyAndItemId loads unrelated docdata objects</Title>
        <Description>[This extension method](http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Utilities/VsHierarchyExtensions.cs,8cd19b5d59b4a18a) calls IVsRunningDocumentTable.GetDocumentInfo in a loop until it finds a matching hierarchy, itemid pairing. However, each call to GetDocumentInfo ends up creating a docdata for the requested file, which means it might end up creating multiple docdata objects when it only needs to find the document's moniker. A better way to do this would be to use either MPF or IVsRunningDocumentTable4 to find this information.
</Description>
        <CreatedDate>23/06/2015</CreatedDate>
        <ClosedDate>08/09/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4791</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Fix check for missing/unsupported language</Title>
    <Description>Fixes #3931

A change we made prior to RTM of 1.0 pushed the MSBuild project loading logic into the same dll (workspaces desktop).  However, the existence of the language specific loader service was being used to determine whether the language was supported, which it is not if the language specific workspace library is not present.  This caused unexpected null ref failures later in solution/project loading.

This has been fixed to check for the existence of the command line parser service, as it is still defined in the workspace libraries and is required to succeed at loading.

Added tests to check behavior when workspace language libraries are missing.

@Pilchie @jaredpar @jasonmalinowski @dpoeschl @rchande @CyrusNajmabadi @DustinCampbell  please review
</Description>
    <CreatedDate>25/08/2015</CreatedDate>
    <ClosedDate>01/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4791</PullRequestID>
        <IssueID>3931</IssueID>
        <Title>Loading Microsoft/CodeContracts with MsBuildWorkspace without BasicWorkspace will throw NRE</Title>
        <Description>Repro:

Clone https://github.com/Microsoft/CodeContracts
Write an application that uses MsBuildWorkspace to load CodeContracts.sln. Make sure to _not_ add BasicWorkspace as a reference
OpenSolutionAsync will throw a NRW because in [MSBuildWorkspace.cs](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces.Desktop/Workspace/MSBuild/MSBuildWorkspace.cs,664) commandLineParser is null.
</Description>
        <CreatedDate>13/07/2015</CreatedDate>
        <ClosedDate>01/09/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4761</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Duplicate VS2013 logic for tie breaking overloads based on param-array types when none of the arguments matched the parameter.</Title>
    <Description>Fixes #4458.

@gafter, @VSadov, @jaredpar, @agocke Please review.  
</Description>
    <CreatedDate>24/08/2015</CreatedDate>
    <ClosedDate>01/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4761</PullRequestID>
        <IssueID>4458</IssueID>
        <Title>Code that compiles in VS2013 fails with CS0121 in 2015; overloads with different params parameter types</Title>
        <Description>The following code compiles in VS2013 but in VS2015 it produces the following compiler error:

&gt; CS0121: The call is ambiguous between the following methods or properties: 'Test.Test(int, params string[])' and 'Test.Test(int, params Expression&lt;string&gt;[])'

``

In VS2013 the call will be routed to the expression overload (observational fact, not 100% sure that will _always_ happen though)

Arguably, this is not good design but it is still a backwards compatibility issue.
</Description>
        <CreatedDate>10/08/2015</CreatedDate>
        <ClosedDate>01/09/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Bug</Label>
          <Label>Documentation</Label>
          <Label>Resolution-By Design</Label>
          <Label>Tenet-Compatibility</Label>
          <Label>Verification Not Required</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4734</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Pilchie</FixedByID>
    <Title>Support Edit.NextMethod and Edit.PreviousMethod commands</Title>
    <Description>Fixes #4311.

Still TODO:
- [ ] Tests
- [ ] Better positioning of the caret
- [ ] Command placement in profiles other than VB
</Description>
    <CreatedDate>22/08/2015</CreatedDate>
    <ClosedDate>24/10/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4734</PullRequestID>
        <IssueID>4311</IssueID>
        <Title>Implement Edit.NextMethod and Edit.PreviousMethod commands</Title>
        <Description>The Edit.NextMethod and Edit.PreviousMethod commands are supported by Visual Basic for navigating between declarations. Unfortunately, these commands were not implemented as part of Project Roslyn. This is a regression from Visual Studio 2013 and we have received significant feedback that we need to bring them back.
</Description>
        <CreatedDate>03/08/2015</CreatedDate>
        <ClosedDate>28/10/2015</ClosedDate>
        <Labels>
          <Label>Approved to merge</Label>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
          <Label>Resolution-Fixed</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4543</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>changes for mapping directory paths in compiler-output file names</Title>
    <Description>This the fix for #949.
</Description>
    <CreatedDate>13/08/2015</CreatedDate>
    <ClosedDate>16/10/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4543</PullRequestID>
        <IssueID>949</IssueID>
        <Title>PDB format and caller file name arguments include full path names in compiler output</Title>
        <Description>Because the PDB file format includes the full path name of source files, the Roslyn C# and VB compilers will produce different output when the paths are different from one compilation to another. In particular, in a cloud build environment the build output might not be deterministic from one build machine to another.

Related to this, the caller file name attribute encodes the full path name. That is another way in which the full path name is encoded into the output assembly.

@tmat suggests we do what the Microsoft C++ compiler does, which is to provide a source/directory map command-line option that normalizes the directory names in the compiler-produced outputs.

It was also suggested that, in the context of this work, we also normalize file separators to `/`, which works on all platforms.

&lt;!---
@huboard:{"order":2986.0,"milestone_order":949.0,"custom_state":""}
--&gt;
</Description>
        <CreatedDate>28/02/2015</CreatedDate>
        <ClosedDate>17/10/2015</ClosedDate>
        <Labels>
          <Label>Area-Compilers</Label>
          <Label>Concept-Determinism</Label>
          <Label>Concept-Portability</Label>
          <Label>Feature Request</Label>
          <Label>Language-C#</Label>
          <Label>Language-VB</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4428</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>rchande</FixedByID>
    <Title>Exclude System.Func from the completion list when the user is likely …</Title>
    <Description>…to be typing Function

Fixes #4208 

cc @dpoeschl @jasonmalinowski @balajikris @davkean @DustinCampbell @Pilchie 
</Description>
    <CreatedDate>07/08/2015</CreatedDate>
    <ClosedDate>01/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4428</PullRequestID>
        <IssueID>4208</IssueID>
        <Title>VB Intellisense for predicate includes Func(of ...)</Title>
        <Description>In VS &lt;= 2013, when entering an argument of type Func(of ...) in a function call, Func(of ...) was not shown in the intellisense popup. As such, typing "fu"+tab was usually enough to insert "function". Now Func(of ...) shows in the list, which is never required, and requires an extra keystroke to move to "function".

e.g. type the below in both 2013 and 2015 and observe difference in intellisense list shown:

enumerable.range(0, 10).select(fu
</Description>
        <CreatedDate>29/07/2015</CreatedDate>
        <ClosedDate>01/10/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>3669</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jakesays-old</FixedByID>
    <Title>Proposed change allow customization of InternalsVisibleTo attributes (issue #3668)</Title>
    <Description>This PR contains a proposed change that would allow easy local customization of generated `InternalsVisibleTo` attributes.

Applies to issue #3668.
</Description>
    <CreatedDate>24/06/2015</CreatedDate>
    <ClosedDate>20/10/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>3669</PullRequestID>
        <IssueID>3668</IssueID>
        <Title>Unable to customize the generated InternalsVisibleTo attributes.</Title>
        <Description>For doing custom, private builds of Roslyn, it is sometimes required to have access to the internals of various assemblies. One example of this need is for code completion.

It is possible to manually edit the requisite project files to inject InternalsVisibleTo attributes, but doing so is tedious and error prone. It must also be done after every pull from upstream.

My proposed solution to this is to add an extension point to VSL.Settings.targets. This extension point would load a local project file that contains `&lt;InternalsVisibleTo/&gt;` elements, which would be injected in to targeted projects during build.

The proposed change to VSL.Setings.targets:

``
</Description>
        <CreatedDate>24/06/2015</CreatedDate>
        <ClosedDate>21/11/2015</ClosedDate>
        <Labels>
          <Label>Area-Infrastructure</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>3613</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mkrueger</FixedByID>
    <Title>Introduced NewLinesForBracesInProperties c# formatting option.</Title>
    <Description>Allows formatting for property like constructs to be independent from method like constructs.

Fixes issue #84
https://github.com/dotnet/roslyn/issues/84
</Description>
    <CreatedDate>22/06/2015</CreatedDate>
    <ClosedDate>28/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>3613</PullRequestID>
        <IssueID>84</IssueID>
        <Title>Make Accessor formatting differently than method formatting possible.</Title>
        <Description>Currently method and accessor formatting is the same. 
However there are many styles (mono/sharpdevelop) where these are different

``

should be possible. 

I suggest adding a NewLinesForBracesInAccessors option to handle all the accessor cases.
</Description>
        <CreatedDate>27/01/2015</CreatedDate>
        <ClosedDate>29/09/2015</ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Feature Request</Label>
          <Label>Resolution-Fixed</Label>
          <Label>Verified</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>3586</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>basoundr</FixedByID>
    <Title>End Construct adds Parentheses to Invocation ArgumentList on Return</Title>
    <Description>Fix #2858 End Construct Command Handler adds parentheses to Invocation
argumentlist given the identifier binds as invocable and happens on
'Return' but not as part of pretty listing
</Description>
    <CreatedDate>18/06/2015</CreatedDate>
    <ClosedDate>04/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>3586</PullRequestID>
        <IssueID>2858</IssueID>
        <Title>PrettyListing should insert parentheses around single argument invocations</Title>
        <Description>In VS2013 and previous, we would insert parentheses around a single argument method call like:

``

We stopped doing that in Roslyn because people found it irritating when they pasted blocks of text that didn't parse quite right and the pretty-lister added a bunch of parentheses everywhere.

We should consider bringing the feature back in a more selective way.  Some ideas we had are:
1. Do it only if the identifier binds as something invocable.
2. Do it as part of end construct instead of pretty-listing, so that it happens only on enter.
</Description>
        <CreatedDate>18/05/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>3374</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Discussion: Syntactically classify buffers without documents</Title>
    <Description>To facilitate discussion regarding #873

Sometimes there are buffers with our C#/VB content types that are not added to the Running Document Table and therefore never end up in the MiscellaneousFilesWorkspace, such as the Source Control "Annotate" view. This updates the Syntactic Classifier to handle such cases.

**NOTE:** This is primarily for discussion purposes and bar checking as there are a couple known issues.

@DustinCampbell - Can you see if a partial fix like this (no semantic classification and no navigation bars) would meet the bar.

FYI @jasonmalinowski 
</Description>
    <CreatedDate>08/06/2015</CreatedDate>
    <ClosedDate>29/09/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>3374</PullRequestID>
        <IssueID>873</IssueID>
        <Title>Non-RDT buffers (Annotate, Compare Files, etc.) do not classify or populate NavBar</Title>
        <Description>I have a C# project that hosted on GitHub. When I execute for a .cs-file command Annotate from a context menu in a Solution Explorer, Annotate window displayed without coloring:

![gitannotatewithoutcoloring](https://cloud.githubusercontent.com/assets/795200/6380417/8d75715c-bd4a-11e4-8efd-69c091e2e29b.png)

MSVS 2015 CTP 6

(@dpoeschl) Edit: This also occurs in the Compare Files modal window:

![image](https://cloud.githubusercontent.com/assets/235241/7547273/d8cbc962-f59e-11e4-8119-a9f75b020e30.png)

(@dpoeschl) Edit: This also occurs in the Merge Conflict Resolution Window:

![image](https://cloud.githubusercontent.com/assets/235241/7556443/edcc591c-f724-11e4-850e-a074a2acbf53.png)
</Description>
        <CreatedDate>25/02/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <Labels>
          <Label>Area-IDE</Label>
          <Label>Bug</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4056</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>wschae</FixedByID>
    <Title>VS crash during EnC around active statements</Title>
    <Description>It updates earlier C# implementation and ports to VB (#3894)
</Description>
    <CreatedDate>22/07/2015</CreatedDate>
    <ClosedDate>27/07/2015</ClosedDate>
    <Issues>
      <Issue>
        <RepoID>roslyn</RepoID>
        <PullRequestID>4056</PullRequestID>
        <IssueID>3894</IssueID>
        <Title>VS crash during EnC around active statements</Title>
        <Description>Simpler repro:
1. C# Console App:
   class Program
   {
       static void Main(string[] args)
       {
           Foo();
       } 
   
   ``
4. Continue

Crash VS due to NRE @ EncVariableSlotAllocator.TryGetPreviousHoistedLocalSlotIndex
</Description>
        <CreatedDate>10/07/2015</CreatedDate>
        <ClosedDate>16/07/2015</ClosedDate>
        <Labels>
          <Label>Area-Interactive</Label>
          <Label>Interactive-EnC</Label>
        </Labels>
      </Issue>
    </Issues>
  </PullRequest>
  <PullRequest>
    <IssueID>4049</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>agocke</FixedByID>
    <Title>Add CoreCLR projects to the Roslyn solutions</Title>
    <Description>Update the DNX build tools, which fixes #3876. Now that the
bug is resolved, add the CoreCLR projects directly to the
compiler solutions.

@jaredpar 
</Description>
    <CreatedDate>22/07/2015</CreatedDate>
    <ClosedDate>23/07/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>4018</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>cston</FixedByID>
    <Title>Ensure ProcessedFieldOrPropertyInitializers.Empty is immutable</Title>
    <Description>Ensure ProcessedFieldOrPropertyInitializers.Empty is immutable

Fixes #4003
</Description>
    <CreatedDate>21/07/2015</CreatedDate>
    <ClosedDate>21/07/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>3997</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>brettfo</FixedByID>
    <Title>don't escape method names in signature help tool tips</Title>
    <Description>This change brings the argument-completion tool tip in line with quick info in not escaping special identifier names.  E.g., for the following code, the tooltip for the invocation on the indicated line should display as `C.Next()` instead of `C.[Next]()`.

``` VB
Class C
    Sub [Next]()
        Dim x As New C
        x.Next() ' bug is on this line
    End Sub
End Class
```

Fixes #3537.

Tagging @Pilchie @dpoeschl @jasonmalinowski @rchande  @DustinCampbell @balajikris @basoundr @jmarolf @davkean for review.
</Description>
    <CreatedDate>17/07/2015</CreatedDate>
    <ClosedDate>31/07/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>3986</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>amcasey</FixedByID>
    <Title>Make InteractiveWindow states explicit</Title>
    <Description>Instead of having a collection of boolean flags, introduce a State enum
that captures all of the possible states of the window and document
transitions between them.  Furthermore, assert that state transitions only
happen on the UI thread (for synchronization purposes).

Fixes #3970

TODO: The transitions to and from the ReadingStandardInput state are not
well understood/handled (#3984).

TODO: Integration test to follow.

_Note: You'll probably want to review the commits separately - I've tried to isolate the broad refactorings in the second one._
</Description>
    <CreatedDate>17/07/2015</CreatedDate>
    <ClosedDate>23/07/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>3964</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>wschae</FixedByID>
    <Title>VS crash during EnC around active statements</Title>
    <Description>Fix #3894. Note that VB porting will be followed.
</Description>
    <CreatedDate>15/07/2015</CreatedDate>
    <ClosedDate>16/07/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>3919</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VSadov</FixedByID>
    <Title>Lambda rewriter should rewrite method/property symbols when rewriting…</Title>
    <Description>… member initializers.

Since the containing type could have been changed if it is a type parameter in the containing method.

Fixes #3906
</Description>
    <CreatedDate>13/07/2015</CreatedDate>
    <ClosedDate>13/07/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>3897</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>KevinH-MS</FixedByID>
    <Title>Fix DataTips for parameterized property access...</Title>
    <Description>The language service should return the full invocation expression if you hover over a method/property group.  It's up to the EE to block evaluation of expressions that "may have side effects" (i.e. method invocations).

(fixes #2602)
</Description>
    <CreatedDate>10/07/2015</CreatedDate>
    <ClosedDate>10/07/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>3875</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>DanielRosenwasser</FixedByID>
    <Title>Ignore signature help trigger characters in comments and strings</Title>
    <Description>Fixes #3385.
</Description>
    <CreatedDate>08/07/2015</CreatedDate>
    <ClosedDate>04/08/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>3870</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>basoundr</FixedByID>
    <Title>Format during Return in a Brace Completion Session</Title>
    <Description>Fix #3447 Format should happen when Return is issued after starting a
Brace Completion session. We should not listen to
FeatureOnOffOptions.AutoFormattingOnCloseBrace when 'Return' is pressed
during the Brace Completion session
</Description>
    <CreatedDate>08/07/2015</CreatedDate>
    <ClosedDate>30/07/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>3852</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>wschae</FixedByID>
    <Title>[Bug][VB] RudeEdit error message blindly blames AutoProperty</Title>
    <Description>It fixes #3605
</Description>
    <CreatedDate>07/07/2015</CreatedDate>
    <ClosedDate>07/07/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>3842</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>wschae</FixedByID>
    <Title>RudeEdit error message has a placeholder not filled in</Title>
    <Description>This fixes #3604 by passing the display name for rude edit diagnostics.
</Description>
    <CreatedDate>07/07/2015</CreatedDate>
    <ClosedDate>07/07/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>3836</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>Avoid translating global imports in presence of declaration errors</Title>
    <Description>Fixes #3835.
</Description>
    <CreatedDate>06/07/2015</CreatedDate>
    <ClosedDate>06/07/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2885</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>amcasey</FixedByID>
    <Title>Refine hoisted local scopes in async methods</Title>
    <Description>Old: Scopes followed the bound tree, so the outermost scope was within the
try-catch block synthesized in async MovedNext methods.

New: If the entire try block would be a hoisted local scope, we remove the
marker node (BoundStateMachineScope) and insert a new one around the
entire method body.

Upshot: hoisted locals are still in scope when stopped on method closing
braces.

Fixes #2336 
</Description>
    <CreatedDate>19/05/2015</CreatedDate>
    <ClosedDate>19/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2883</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Handle BoundSequence as an assignment target in CodeGenerator.EmitAssignmentExpression.</Title>
    <Description>Fixes #2878.

@VSadov, @gafter, @agocke, @jaredpar Please review.
</Description>
    <CreatedDate>18/05/2015</CreatedDate>
    <ClosedDate>19/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2881</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Dont offer cast simplification fixes for explicit reference conversions</Title>
    <Description>For code snippets such as below: `Base M(Base b) =&gt; (Derived)b;`, we currently offer cast removal for cast to derived. However, this involves an explicit/narrowing conversion and hence can lead to an exception or data loss. The only way to detect such redundant casts is via flow analysis, which is not currently in our scope.

Fix is to bail out early for such cast expressions. I have also fixed incorrect tests that were added to ensure the current behavior.

Fixes #2761 
</Description>
    <CreatedDate>18/05/2015</CreatedDate>
    <ClosedDate>19/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2875</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Make lexer resilient to binary files as input</Title>
    <Description>Fixes #2771 

@jaredpar @VSadov @agocke @AlekseyTs @pharring Please review
</Description>
    <CreatedDate>18/05/2015</CreatedDate>
    <ClosedDate>20/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2874</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmeschter</FixedByID>
    <Title>Check EnvDTE.Configuration.Properties for null</Title>
    <Description>We access the Properties collection of the EnvDTE.Configuration type to
check and update the "CodeAnalysisRuleSet" property. However, sometimes
the Properties collection will be null, leading to a
`NullReferenceException`. For example, the Properties collection always
seems to be null in PowerShell projects.

This change adds the necessary checks to avoid the
`NullReferenceException`.

Related to #2524.

@srivatsn @mavasani @ManishJayaswal @heejaechang @shyamnamboodiripad @jmarolf Could you take a look, please? It's a very short review.
</Description>
    <CreatedDate>18/05/2015</CreatedDate>
    <ClosedDate>19/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2871</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>AlekseyTs</FixedByID>
    <Title>Do not hoist ByRef locals used within iterator methods, even when building debug.</Title>
    <Description>Fixes #2862.

@VSadov, @gafter, @agocke, @jaredpar Please review.  
</Description>
    <CreatedDate>18/05/2015</CreatedDate>
    <ClosedDate>18/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2848</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Allow snippets in Inline Diff View</Title>
    <Description>Fixes internal TFS bug #831378

Invoke snippets on the DataBuffer instead of the EditBuffer. Once
IVsExpansion.InsertExpansion/InsertNamedExpansion has been invoked
on the correct buffer, all remaining processing is the same
(formatting, end span tracking, and snippet functions all map their
given spans down to the subject buffer for processing).

Potential reviewers: @Pilchie @jasonmalinowski @balajikris @rchande @brettfo @jmarolf
FYI: @KirillOsenkov 
</Description>
    <CreatedDate>18/05/2015</CreatedDate>
    <ClosedDate>18/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2843</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Improve rename conflicts in nameof</Title>
    <Description>Fixes #1195 "Renaming a member to a name used within a nameof is a
conflict"

When a nameof expression is involved in a rename, conflicts are only
introduced if the nameof previously referenced a non-empty set of
symbols and the post-rename set of referenced symbols contains none of
the previously referenced symbols. This allows overloads to join or exit
the set of references without conflicts, but a conflict is still offered
if the nameof switches from referencing a method to referencing a local
(or similar).

Potential reviewers: @Pilchie @jasonmalinowski @rchande @balajikris @brettfo @jmarolf 
</Description>
    <CreatedDate>18/05/2015</CreatedDate>
    <ClosedDate>18/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2842</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>No conflicts on same-named locals of delegate types</Title>
    <Description>Fixes #1729

The C# implementation of IRenameRewriterLanguageService.LocalVariableConflict was returning conflicts any time a related invocation expression bound to a local/parameter, but this condition is not indicative of a conflict when the local/parameter is of a delegate type. This change prevents reporting this particular kind of conflict on references to locals &amp; parameters of a delegate type.

Tagging reviewers: @Pilchie @jasonmalinowski @rchande @balajikris @brettfo @jmarolf
</Description>
    <CreatedDate>17/05/2015</CreatedDate>
    <ClosedDate>18/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2833</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Guard against concurrent callbacks into analyzers in IDE</Title>
    <Description>We need to do so for couple of scenarios:
1.  Different diagnostic clients might end up requesting diagnostics at the same time and hence end up attempting to invoke into the same analyzer simultaneously.
2. FixAll occurrences computes diagnostics in parallel, hence can causes concurrent callbacks. I plan to test that this doesn't drastically regress FixAll perf for common scenarios across large solutions, but am currently blocked by #2832
</Description>
    <CreatedDate>16/05/2015</CreatedDate>
    <ClosedDate>27/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2829</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Expose a public API for consumers of CompilationWithAnalyzers to clea…</Title>
    <Description>…r off analyzer state cached during analyzer execution.

Executing analyzers requires us to internally store state such as supported diagnostics, registered actions, exception handlers for analyzer exceptions, etc. for the entire lifetime of analyzers. However, the lifetime of the analyzer instances is controlled only by the analyzer host, i.e. the consumer of CompilationWithAnalyzers. We cannot implicitly clear this internal state when disposing CompilationWithAnalyzers as the analyzer host might be re-using the same analyzer instances across multiple CompilationWithAnalyzers instances.

Fix is to expose an API on CompilationWithAnalyzers to allow the analyzer host to explicitly clear stored analyzer state, when it is done using analyzer instances.

Long term solution is to make the AnalyzerManager public and remove its static instance, so that the analyzer host can explicitly control its lifetime.

Fixes #2576 
</Description>
    <CreatedDate>16/05/2015</CreatedDate>
    <ClosedDate>16/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2823</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>shyamnamboodiripad</FixedByID>
    <Title>Improve undo stack titles for suggestions applied via light bulb</Title>
    <Description>This change introduces a workspace service that can be used to register the display strings that should be displayed in VS's undo stack for each change applied using light bulb. The string displayed in the undo stack is currently identical to the one displayed in the light bulb menu.

Fixes #273
</Description>
    <CreatedDate>16/05/2015</CreatedDate>
    <ClosedDate>19/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2821</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>amcasey</FixedByID>
    <Title>Add regression tests for #2441</Title>
    <Description>After discussing the matter, @agocke, @tmat and I have concluded that the
implementation in EETypeNameDecoder will never be affected by the bug the
compiler was seeing.  However, we still felt it would be worthwhile to
make the implementations consistent.  There is, however, no test, since
the behavior is unchanged.

I added some using/import tests since they use the compiler implementation
(which has already been fixed).

Fixes #2441
</Description>
    <CreatedDate>16/05/2015</CreatedDate>
    <ClosedDate>19/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2817</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>Fix breakpoint handling and EnC of queries containing Select and GroupBy clauses that don't translate their select/group-by expression to lambda</Title>
    <Description>Fixes #2672.
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>19/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2812</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>shyamnamboodiripad</FixedByID>
    <Title>Fix expander to not crash when it encounters alias that binds to a missing namespace.</Title>
    <Description>Fixes #1913

When expander encounters an alias identifier that binds to a unbound namespace, it would fall through a code path that would throw NotImplementedException. This change fixes the expander to 'handle' this case without crashing (by simply retruning the IdentifierNameSyntax for the namespace that the alias binds to).

I discovered a difference in behavior between VB and C# SemanticModel which means that although I added a corresponding change to VB's expander, my fix is never invoked. I have logged #2805 for the difference and added a skipped test.
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>16/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2811</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>msJohnHamby</FixedByID>
    <Title>Don't leak Workspace objects from AnalyzerAndOptions</Title>
    <Description>Prevent AnalyzerAndOptions objects from holding on to Workspace objects from that can be embedded in WorkspaceAnalyzerOptions objects.

Fixes #2777.

@heejaechang @mavasani @srivatsn might be interested.
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>19/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2801</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmeschter</FixedByID>
    <Title>Use assembly name for analyzer ID</Title>
    <Description>Use the actual assembly name for `AnalyzerFileReference.Id`, instead of
a lowercase version of the file name.

There are places we are currently using `AnalyzerReference.Id` when what
we may want is `AnalyzerReference.DisplayName`. Notably, in the rule set
editor. This means that after my recent change to simply return the
lowercase version of the analyzer assembly's file name, the rule set
editor started showing "microsoft.codeanalysis.analyzers.dll" instead of
"Microsoft.CodeAnalysis.Analyzers".

The "right" solution would probably involve an API to map from an ID
back to an `AnalyzerReference`, and then using the `DisplayName` in the
rule set editor instead of the `Id`. At this stage in the release cycle,
however, I'm going with a simpler solution: make `AnalyzerFileReference`
return the same value for `Id` and `DisplayName`, and get that value by
reading the assembly name from the file itself, like we used to.

Fixes #2781 and #2782.

@srivatsn @mavasani @shyamnamboodiripad @jmarolf @ManishJayaswal @heejaechang Could you take a look, please?
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>19/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2800</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>Maxwe11</FixedByID>
    <Title>Switch MSBuildWorkspace to use UTF-8 without BOM</Title>
    <Description>Fixes #1146
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>18/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2799</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>KevinH-MS</FixedByID>
    <Title>Fix issue with locating source method in optimized code...</Title>
    <Description>We were previously assuming that "this" was always hoisted in async/iterator state machines.  This is not true in optimized code.

(fixes #2406)
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>16/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2798</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmeschter</FixedByID>
    <Title>Update the VS AnalyzerDependencyChecker</Title>
    <Description>This commit updates the `AnalyzerDependencyChecker` type to reflect the
recent changes to require all analyzers and dependencies to be
specified, and the changes in how we load analyzer assemblies.

Now that we require all analyzers and dependencies to be specified, we
no longer look next to the specified analyzers to optimistically locate
dependencies. Instead, we only consider the list of passed-in analyzers
_plus_ the assemblies already loaded into the `AppDomain`. The latter
avoids unhelpful warnings in the event that the analyzer assembly
includes a code fix that take a dependency on a Visual Studio assembly,
which of course can't be included in the list of analyzers. We now
create a warning when we identify a missing dependency.

We now also check analyzers themselves for conflicts (i.e., assemblies
at different paths with the same identity but different contents)
instead of just their dependencies.

Fixes #2684.
Fixes #2728.
Fixes #2738.

@mavasani @srivatsn @heejaechang @jmarolf @shyamnamboodiripad @ManishJayaswal Could you take a look, please?
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>18/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2797</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>execute CoreBuild to generate xaml files</Title>
    <Description>Fixes #2779 

This enables the MSBuild workspace to run the xaml tasks that generate files.  It doesn't solve the redirect problem that must aslo be done by each exe using msbuild vis msbuild-workspace.

@Pilchie @jasonmalinowski  please review
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>21/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2795</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Ensure override of ParameterSymbol.HasMetadataConstantValue obeys its contract</Title>
    <Description>Fixes #2793

I did not craft a test case as this occurs with "bad" metadata.

@jaredpar @VSadov @agocke @AlekseyTs Please review.
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>21/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2789</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>romansp</FixedByID>
    <Title>fixed typos mentioned in #2786 and #2787</Title>
    <Description>This PR fixes typos mentioned in #2786 and #2787 issues.
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>18/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2783</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>shyamnamboodiripad</FixedByID>
    <Title>Fix simplifier bug around paren removal</Title>
    <Description>Simplifier should not remove parens around ConditionalAccessExpressions that are inside MemberAccessExpressions since this changes semantics.

Fixes #2211
</Description>
    <CreatedDate>15/05/2015</CreatedDate>
    <ClosedDate>15/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2768</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Do not allow await in catch/finally in language version 5</Title>
    <Description>Fixes #2725 

Reviewers: @VSadov @jaredpar @AlekseyTs @agocke 
</Description>
    <CreatedDate>14/05/2015</CreatedDate>
    <ClosedDate>14/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2766</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Disable Rename Tracking with "var" and "dynamic" in C#</Title>
    <Description>Fixes #2605 "Lightbulb suggests renaming a type to 'var'"

This change disables using Rename Tracking to rename to/from "var" and "dynamic" in C#.

Tagging reviewers: @Pilchie @jasonmalinowski @balajikris @rchande @brettfo @jmarolf  
</Description>
    <CreatedDate>14/05/2015</CreatedDate>
    <ClosedDate>15/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2765</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Use correct properties collection for msbuild</Title>
    <Description>Fixes #2636 

@Pilchie @jasonmalinowski please review
</Description>
    <CreatedDate>14/05/2015</CreatedDate>
    <ClosedDate>14/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2760</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>add base list before trailing trivia</Title>
    <Description>Fixes #293 

This turned out not to be a formatter problem specifically, but one of a class of problems that plague manipulation of existing trees.  The formatter had no indentation rule for base lists, but the real problem was that the SyntaxGenerator did not take into account existing trivia before adding the base list.  The typical case when adding base list to existing class declaration is to have at least EOL trivia after the identifier (if following the default formatter style), and that EOL still existed after adding the base list to the class declaration, forcing the base list down the next line.

The fix is to insert the base list before the trailing trivia on the line, and then let the formatter have it.

@pilchie @srivatsn  please review
</Description>
    <CreatedDate>14/05/2015</CreatedDate>
    <ClosedDate>15/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2754</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmeschter</FixedByID>
    <Title>Fix rule set rename issues</Title>
    <Description>Currently, if a .ruleset file is renamed, deleted, or removed, we only
update the `CodeAnalysisRuleSet` property on projects that included the
.ruleset as a project item. This commit institutes better rules:
- If a project- or solution-level .ruleset is renamed, we need to update
  every `CodeAnalysisRuleSet` property containing the old name in every C#
  and VB project--even if the .ruleset isn't a file in the project.
- If a project- or solution-level .ruleset is deleted, we need to clear
  every `CodeAnalysisRuleSet` property containing the name in every C# and
  VB project--again, even if the .ruleset isn't a file in the project.
- If a project-level .ruleset is removed, we only clear the
  `CodeAnalysisRuleSet` properties for that project.
- If a solution-level .ruleset is removed, we do nothing.

Fixes #1601.

@mavasani @srivatsn @shyamnamboodiripad @ManishJayaswal @jmarolf @heejaechang Could you take a look, please?
</Description>
    <CreatedDate>14/05/2015</CreatedDate>
    <ClosedDate>15/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2740</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>Remove duplicate sequence point and unnecessary nops emitted to VB iterators</Title>
    <Description>Fixes #2736.
</Description>
    <CreatedDate>14/05/2015</CreatedDate>
    <ClosedDate>14/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2734</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Add elastic attribute spacing rule</Title>
    <Description>Fixes #2577 

Adds a spacing rule to force one space between attributes and the declaration they are attributing. This, of course, gets overridden by any line space rule.

@heejaechang @pilchie please review
</Description>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>14/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2733</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Generalize assert to include source statements that result in bound try</Title>
    <Description>Fixes #2567 
@AlekseyTs @VSadov @agocke @jaredpar Please review
</Description>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>14/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2732</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>amcasey</FixedByID>
    <Title>Pass correct context type to runtime binder</Title>
    <Description>Runtime binder calls take a System.Type that they use for things like
accessibility checks.  The expression compiler was incorrectly passing the
result type it synthesized and the regular compiler was incorrectly
passing a nested type in the async lambda case.

Fixes #878
</Description>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>14/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2731</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmat</FixedByID>
    <Title>EnC: Renaming captured variables is rude</Title>
    <Description>Since captured variables are hosted to fields they can't be renamed.

Fixes #2726.
</Description>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>14/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2723</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Make constructors of FixAllContext public.</Title>
    <Description>This unblocks a few product/test FixAll scenarios, see #2709 for details.

@Srivatsn @shyamnamboodiripad @heejaechang @tmeschter @jmarolf @JohnHamby  please review.
</Description>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>15/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2719</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Add support for explicit interface members in DocumentCommentId</Title>
    <Description>Fixes #2650 

SymbolEditor uses DocumentCommentId's to track symbols between solution versions.  DocumentCommentId did not handle generating id's for indexers correct (no parameters) and did not encode/decode C# indexer names correctly when the indexer was an explicit interface implementations (that includes the interface type as part of the name.)

@mavasani @pilchie please review
</Description>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>13/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2716</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>rchande</FixedByID>
    <Title>Make Finally keyword recommendation more precise</Title>
    <Description>Fixes #2623 
Reviewers: @dpoeschl @jasonmalinowski @Pilchie @balajikris @davkean @jmarolf 
</Description>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>13/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2704</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>shyamnamboodiripad</FixedByID>
    <Title>Fix an InvalidCastException in simplifier.</Title>
    <Description>Fixes #2232

Prevent crash by avoiding QualifiedName-&gt;PredefinedTypeName simplification inside QualifiedNames.
</Description>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>13/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2701</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Fix elastic formatting rule with comments</Title>
    <Description>Fixes #1947 

Change the elastic formatting rule to take into account the existing number of blank lines before a comment (between two declarations) when determining the correct number of blank lines that should appear between the two declarations.

@pilchie @mavasani @heejaechang  please review
</Description>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>13/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2698</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Fix alpha-substitution for nested lambdas in a generic context.</Title>
    <Description>Fixes #2549 
@agocke @AlekseyTs @VSadov please review

&lt;!---
@huboard:{"order":2514.5}
--&gt;
</Description>
    <CreatedDate>13/05/2015</CreatedDate>
    <ClosedDate>13/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2688</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpaoliello</FixedByID>
    <Title>Fix Issue #2569 DirectiveTriviaSyntax.GetRelatedDirectives assumes there can only be one #elif</Title>
    <Description>Fix Issue #2569 DirectiveTriviaSyntax.GetRelatedDirectives assumes there can only be one #elif
Modified DirectiveTriviaSyntax.cs such that #elif can be a related directive to another #elif. This also required putting the call to Get[Next|Previous]PossiblyRelatedDirective above the check and return otherwise it ends up in an infinite loop (returning the same #elif every time).
</Description>
    <CreatedDate>12/05/2015</CreatedDate>
    <ClosedDate>16/06/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2687</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Do not throw if paths are bad</Title>
    <Description>Fixes #694 

Uses PathUtilities API to keep from crashing.
Removes explicit throws and instead just doesn't add item to runtimes list.

@tmat @Pilchie  please review
</Description>
    <CreatedDate>12/05/2015</CreatedDate>
    <ClosedDate>13/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>2686</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Handle converting between interface implementation kinds</Title>
    <Description>Fixes #2616 

Added new overloads of AsPublicInterfaceImplentation and AsPrivateInterfaceImplemenation that adds an extra last parameter that is the interface member's name.  If not supplied (null or calling via old overload) the method attempts to infer the member name from the existing member name (for backward compatibility) but this may not always be possible, so it is best to always supply the interface member name if you are modifying an declaration from existing code.

@mavasani @pilchie
</Description>
    <CreatedDate>12/05/2015</CreatedDate>
    <ClosedDate>13/05/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>948</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Emit anonymous types in deterministic order</Title>
    <Description>Fixes #223

&lt;!---
@huboard:{"order":2.0038604736328125}
--&gt;
</Description>
    <CreatedDate>27/02/2015</CreatedDate>
    <ClosedDate>28/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>929</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Never let exceptions go unhandled from AnalyzerExecutor.ExecuteAndCatchIfThrows</Title>
    <Description>Fix for #868: Do not allow any exceptions to go unhandled from the core analyzer executor method for callbacks into the analyzer. The func determining whether or not to catch exceptions + the delegate to addExceptionDiagnostic have been replaced with a single Action taking Exception, Analyzer and Diagnostic for the exception.

@heejaechang @jaredpar @JohnHamby @tmeschter @srivatsn  can you please review the change?
</Description>
    <CreatedDate>27/02/2015</CreatedDate>
    <ClosedDate>28/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>917</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>amcasey</FixedByID>
    <Title>Call DkmClrValue.Close more conservatively</Title>
    <Description>The problem arises when more than one expanion shares the same value - for
example, those parented by a common AggregateExpansion.  Since this is an
optimization anyway (the debugger would eventually close them on its own),
we'll just conservatively focus on member and array expensions, since they
always "own" the value in aggregate expansions.

Fixes #901.
</Description>
    <CreatedDate>26/02/2015</CreatedDate>
    <ClosedDate>27/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>911</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Fix couple of analyzer driver issues for C# expression bodied member nodes</Title>
    <Description>Fix couple of issues in CSharpDeclarationComputer (issue #592): 
1. Add declaration info for ArrowExpressionClauseSyntax: For properties and indexers, this node declares the getter method symbol whose IsImplicitlyDeclared flag is false and hence the analyzer symbol actions need to be invoked for this getter.
2. Previously executable code block actions for nodes within ArrowExpressionClauseSyntax were executed with parenting property symbol as the owning symbol. This change fixes it to have the declared getter method symbol as the owner of executable block for ArrowExpressionClauseSyntax.

I have added IDE and compiler driver tests for symbol analyzer, syntax node analyzer and executable code block analyzer for expression bodied members.

@JohnHamby @shyamnamboodiripad @srivatsn can you please review?
</Description>
    <CreatedDate>26/02/2015</CreatedDate>
    <ClosedDate>27/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>902</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Respect the ReferenceOutputAssembly flag</Title>
    <Description>The MSBuild workspace code should respect the ReferenceOutputAssembly
flag.  Before only the C# implementation of MSBuild was doing so.  Now
all implementations will properly respect the flag.

closes #900
</Description>
    <CreatedDate>26/02/2015</CreatedDate>
    <ClosedDate>26/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>848</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jaredpar</FixedByID>
    <Title>Add stack guards for expression and statement parsing</Title>
    <Description>The C# and VB compilers were previously hardened against stack overflows when parsing files / trees.  This hardening missed the entry points of parsing an expression or statement individually.  This meant excessively deep code would have resulted in a consumable error when parsed as part of a file but not if it was parsed directly as an expression or statement.

The debugger is one of our bigger consumers of parsing expression / statements directly.  This left them open to crashes when debugging files which could be processed fine by the IDE (see #832 for an example). 

This change extends the stack guards to cover these two cases.  

closes #839
</Description>
    <CreatedDate>25/02/2015</CreatedDate>
    <ClosedDate>26/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>847</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Detect indirect cyclic constructor chaining</Title>
    <Description>Detect and report cyclic constructor initializers that are indirect.
    Fixes #366
Also Rename CSharpCompilation.SemanticDiagnostics to DeclarationDiagnostics.
    See #846.

&lt;!---
@huboard:{"order":2.0563888549804688,"milestone_order":847}
--&gt;
</Description>
    <CreatedDate>25/02/2015</CreatedDate>
    <ClosedDate>27/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>845</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Reenable asynclazy tests</Title>
    <Description>Unskip tests for issue #204

When a request to AsyncLazy gets a cancellation, we asynchronously cancel the underlying Task, since any continuations might run inline and cause surprises. This meant that if cancellation happened during a call to GetValueAsync or GetValue where the underlying computation was synchronously completed, there was a race where the task that gets returned might or might not be cancelled. It didn't strictly matter -- since cancellation is best-effort it was fine by the contract. But to test an earlier bug, we forced it into the non-cancelling case by simply stopping up the thread pool so the asynchronous cancellation never happened. That approach was really evil, so we try something else.

Now, we adjust the tests to assert the slightly stronger statement that once a computation runs and returns a value, it's cached, even if the value is not handed out. (The implementation already did this, but we now assert it.) We also tweak the cancellation handling to cancel the returned task more aggressively. This avoids the race between async cancellation and synchronous value returning in the context of the unit test, so we can assert behavior better. In general there's no guarantee, but it's now guaranteed "enough" our test can test the other behaviors well.
</Description>
    <CreatedDate>25/02/2015</CreatedDate>
    <ClosedDate>25/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>837</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>KevinH-MS</FixedByID>
    <Title>Disabling test:  ConditionalMemberAccessRace002</Title>
    <Description>Failing due to #836
</Description>
    <CreatedDate>25/02/2015</CreatedDate>
    <ClosedDate>25/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>835</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Fix for #271: Compiler crashes if it cannot locate resources for analyzer</Title>
    <Description>CLR calls us back to search for presence of satellite resource assembly with ".resources" suffix, before attempting to go back to the main assembly as a fallback for resources. However, during this callback we were trying to load the satellite assembly without checking if the file exists on disk, causing an unhandled FileIOException.

Adding the NeutralResourcesLanguageAttribute in PR #831 caused the CLR to directly go to the Main assembly for resources, without making the satellite assembly callback.

I removed this attribute locally from our analyzer assemblies, and with the added File.Exists check, we correctly return null for satellite assembly callbacks and CLR eventually falls back to the Main assembly for resources and we are able to find resources.

@tmeschter @srivatsn @jmarolf @JohnHamby can you please take a look?
</Description>
    <CreatedDate>24/02/2015</CreatedDate>
    <ClosedDate>25/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>833</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Disable tests related to GitHub issue #204</Title>
    <Description>Disable tests related to issue #204.
</Description>
    <CreatedDate>24/02/2015</CreatedDate>
    <ClosedDate>24/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>831</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Unable to find resource assembly crashes command line builds</Title>
    <Description>Address couple of issues related to analyzers: 

1) Don't crash command line builds when reporting analyzer diagnostics. Reporting analyzer diagnostics may involve invoking user code for LocalizableString message, which may throw while finding resources or for other unknown reasons. We catch exceptions from these callbacks and report a diagnostic with the inner exception message.
I verified that this fixes the crash seen in #271 and #813 and we started seeing this new info diagnostic.

2) Workaround for #271: The underlying cause of the crash is that our assembly resolver/CLR is unable to fallback to the main assembly for resources and ends up looking for the satellite resource assembly. We had seen this crash quite a while back, but it went away and this seems to have come up again. Workaround, as applied back then, is to mark the analyzer assembly with NeutralResourcesLanguageAttribute.
I verified that adding this attribute to our core analyzer assemblies caused the resource to be correctly found and we don't even see the exception diagnostic from (1) above, but instead the actual diagnostic reported by the analyzer.

@tmeschter @srivatsn @agocke @JohnHamby please take a look, I would like to check this in ASAP.
</Description>
    <CreatedDate>24/02/2015</CreatedDate>
    <ClosedDate>24/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>827</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>VladimirReshetnikov</FixedByID>
    <Title>Add explicit StringComparison.Ordinal where it was intended</Title>
    <Description>Fix #409:
Add explicit StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase where it was intended,
or replace single-char string literals with chars literals.
Also, provide InvariantCulture in TryParse where it was intended.
</Description>
    <CreatedDate>24/02/2015</CreatedDate>
    <ClosedDate>27/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>816</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>basoundr</FixedByID>
    <Title>Make OutliningSpan Creation not assume MultiLine Comment always end with...</Title>
    <Description>...'*/'

Fixes #791: The code '*' is parsed as MultiLine Comment even with the
presence of the corresponding '_\' in some cases. Hence, OutLining Span
creator should not assume that '_\' will always be present for Multiline
Comment and handle the creation appropriately
</Description>
    <CreatedDate>24/02/2015</CreatedDate>
    <ClosedDate>24/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>808</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Syntax node actions are not called for field declarations in compiler analyzer driver if the declaration defines multiple variables</Title>
    <Description>Fix for #565: Syntax node actions are not called for field declarations in compiler analyzer driver if the declaration defines multiple variables

Simplify logic for execution of syntax node actions for field declarations: If there are multiple decls, execute syntax node actions for entire field decl (and its descendants) when processing symbol declared event for first field within it, and skip syntax node actions for rest of fields defined within that declaration.
Current logic is unnecessarily complex in that it tries to execute syntax node actions for individual variable declarators when processing corresponding field symbol declared event, and executes the node actions for shared nodes (e.g. defining type syntax node) when processing first field symbol, and caused this bug to sneak through.

Added regression tests for compiler driver (VB and C#) and IDE driver.

@JohnHamby @srivatsn please take a look.
</Description>
    <CreatedDate>24/02/2015</CreatedDate>
    <ClosedDate>24/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>804</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>brettfo</FixedByID>
    <Title>update unit tests to use localized resources</Title>
    <Description>Also fixes some stray whitespace in a C# resource (`CSharpFeaturesResources.DisposePattern`) and moves duplicated resources from `CSharpFeaturesResources` and `VBFeaturesResources` to `WorkspacesResources.Usage` and updates the product code to actually use this resource in `ISymbolExtensions.cs` (it was hard-coded English before.)

Fixes #821.
</Description>
    <CreatedDate>24/02/2015</CreatedDate>
    <ClosedDate>26/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>800</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Skip flaky test ConditionalMemberAccessRace002</Title>
    <Description>We have a report (#760) that a test is flaky, and it frequently breaks my local testing.
Disabling the flaky test for now until the underlying cause is diagnosed and addressed.

&lt;!---
@huboard:{"order":2.0855712890625}
--&gt;
</Description>
    <CreatedDate>23/02/2015</CreatedDate>
    <ClosedDate>25/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>795</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Fix ReportDiagnosticAnalyzer meta-analyzer to handle broken code case</Title>
    <Description>Fixes issue #671 to handle broken code case where there are multiple overrides of DiagnosticAnalyzer.SupportedDiagnostics property
</Description>
    <CreatedDate>23/02/2015</CreatedDate>
    <ClosedDate>24/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>787</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>amcasey</FixedByID>
    <Title>Suggest adding Microsoft.VisualBasic for ERR_MissingRuntimeHelper</Title>
    <Description>Fixes #443.
</Description>
    <CreatedDate>23/02/2015</CreatedDate>
    <ClosedDate>23/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>785</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Modify flow analysis so that there is an implicit "break" after every switch section.</Title>
    <Description>Because the end of a switch section is required not to be reachable by the
language spec, this only affects the results in error situations by suppressing
cascaded diagnostics. Fixes #612.

&lt;!---
@huboard:{"order":2.0096969604492188,"milestone_order":785}
--&gt;
</Description>
    <CreatedDate>23/02/2015</CreatedDate>
    <ClosedDate>25/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>773</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Use TriggerDiagnosticDescriptor in RenameTracking</Title>
    <Description>Fixes #466 "Use a 'TriggerDiagnosticDescriptor' for the rename tracking
diagnostic"

Updates the RenameTrackingDiagnosticAnalyzer to use a
TriggerDiagnosticDescriptor, which prevents the diagnostic title from
appearing in the preview area of the lightbulb. We now pass the
RenameFrom and RenameTo names as part of the Diagnostic's property bag
and construct the localized codefix title based on these in the codefix
itself.
</Description>
    <CreatedDate>22/02/2015</CreatedDate>
    <ClosedDate>23/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>771</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mkosieradzki</FixedByID>
    <Title>Implemented incremental computation of ChangedText.Lines [#608]</Title>
    <Description>As agreed with @pharring this is a pull request for issue #608 "SourceText.WithChanges should create optimized TextLineCollection". 

The non-trivial thing was to handle all possible line breaks, especially the two character ones, as for example text might be inserted between \r and \n. I tried to create a quite complete test suite for this issue as agreed. I used generic implementation from SourceText as reference to which I was comparing my results.
</Description>
    <CreatedDate>22/02/2015</CreatedDate>
    <ClosedDate>23/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>770</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Fixes #540: Better handle dismissed rename tracking sessions</Title>
    <Description>Fixes #540 "Stale rename entries in the lightbulb menu"

Prior to this change, dismissed rename tracking sessions continued to
provide codefixes which would silently fail when invoked, without
completing the rename operation.

With this change, we now do the following when rename tracking is
manually dismissed:
- Trigger the diagnostic service to reanalyze the document, thus
  removing the rename tracking diagnostic.
- Stop providing a codefix when requested
- Show a dialog if a cached codefix is invoked explaining that the
  rename was not performed.

Here are the there user scenarios:
1. The user dismisses rename tracking
   - The lightbulb will continue to show in the margin, regardless of
     whether any codefix/refactoring is actually still available.
2. The user expands the lightbulb without it ever having been expanded
   before.
   - In this case, we are queried for fixes and will not return any, so
     either the lightbulb will disappear or it will contain other relevant
     codefixes/refactorings at that position, excluding rename.
3. The user expands the lightbulb after it was previously expanded.
   - Our fix was already cached, so we can only give a reasonable message
     when it is invoked.

If we introduce a way to trigger lightbulb reanalysis, then these
problems go away.
</Description>
    <CreatedDate>22/02/2015</CreatedDate>
    <ClosedDate>27/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>767</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Fix leaks in AnalyzerDriver introduced in #673 and refactor code in analyzer driver</Title>
    <Description>My prior change #673 made to address issues with analyzer exception diagnostics introduced a few leaks in product and test code. The primary reason was that I attempted to use static events to track state as the existing AnalyzerDriverHelper type which did the core analyzer execution was a static type with all static methods. Additionally, I added a static event to the new host diagnostic update source added for reporting analyzer specific diagnostics. These were holding onto projects/workspaces in test runs causing leaks.

I have reverted the approach of static events and instead refactored the code in AnalyzerDriver project to simplify the whole design:
1. Renamed AnalyzerDriverHelper to AnalyzerExecutor and made it a non-static type, which has instance fields for all the configuration parameters for analyzer callbacks.
2. Move all the core analyzer callbacks (actions/Initialize method/supported diagnostics) into AnalyzerExecutor. Command line compiler just creates a single instance of the executor, while IDE driver creates instances per analyzer. 
3. Both these changes simplified the API a lot, and I just had to add an additional field "Action&lt;Diagnostic&gt; addExceptionDiagnostic" to AnalyzerExecutor to configure how to handle exception diagnostics.
4. MEF import AbstractHostDiagnosticUpdateSource in DiagnosticAnalyzerService and thread it down to IDE analyzer driver.
5. Changes 3 and 4 above meant that in the IDE driver, delegate "addExceptionDiagnostic" just asks the HostDiagnosticUpdateSource to report the exception diagnostic produced by the AnalyzerExecutor.

This change also re-enables the tests skipped by #761 and fixes #759.

Lessons learnt:
1. Static events are evil, don't use them.
2. @heejaechang is invariably right, never overlook his review feedback :)
</Description>
    <CreatedDate>21/02/2015</CreatedDate>
    <ClosedDate>22/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>761</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Mitigate memory leak and disable affected tests</Title>
    <Description>All the disabled tests are associated with issue #759 which tracks
re-enabling these.
</Description>
    <CreatedDate>21/02/2015</CreatedDate>
    <ClosedDate>21/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>758</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Remove some dead code</Title>
    <Description>Fixes #657

&lt;!---
@huboard:{"order":3.2373046875}
--&gt;
</Description>
    <CreatedDate>21/02/2015</CreatedDate>
    <ClosedDate>23/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>756</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>DustinCampbell</FixedByID>
    <Title>Make VB Remove Unnecessary Cast a bit smarter in interpolations</Title>
    <Description>There are legitimate cases where removing a cast inside a string
interpolation can case the open brace of the interpolation to touch the
open brace on an array literal, resulting in a broken parse (i.e. `{{`).

This changes the Remove Unnecesary Cast code fix to add parentheses
outside of the cast rather than around the inner expression. Then, the
parenthesis simplifier has been updated to correctly handle the case
where an array literal touches the start of an interpolation:

``` VB
Dim x = $"{({})}"
```

Fixes Issue #739.
</Description>
    <CreatedDate>21/02/2015</CreatedDate>
    <ClosedDate>24/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>754</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Revert "Fix for issues around analyzer exception diagnostics getting sup...</Title>
    <Description>Reverts dotnet/roslyn#673 as it seems to be causing test leaks. 
</Description>
    <CreatedDate>21/02/2015</CreatedDate>
    <ClosedDate>21/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>753</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>rchande</FixedByID>
    <Title>Show expression completion within casts</Title>
    <Description>Automatic brace completion of "(" parses as a cast, but the user might
be trying to type a parenthesized expression.

Fixes #717 
</Description>
    <CreatedDate>20/02/2015</CreatedDate>
    <ClosedDate>26/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>743</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>rchande</FixedByID>
    <Title>Don't suggest events to override in VB</Title>
    <Description>VB does not support virtual events.

Fixes #715 
</Description>
    <CreatedDate>20/02/2015</CreatedDate>
    <ClosedDate>20/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>741</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmeschter</FixedByID>
    <Title>Disable the severity menu items when a selected diagnostic is not configurable</Title>
    <Description>If a diagnostic is tagged with "NotConfigurable" we don't allow changing its severity. The rule set editor already respects this tag, but the Solution Explorer does not. Now, if any of the selected diagnostics are tagged we disable the menu items for changing the effective severity.

Fixes #465.
</Description>
    <CreatedDate>20/02/2015</CreatedDate>
    <ClosedDate>23/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>738</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>gafter</FixedByID>
    <Title>Suppress the struct==null warning except in "strict" mode</Title>
    <Description>Fixes #663

&lt;!---
@huboard:{"order":2.7392578125}
--&gt;
</Description>
    <CreatedDate>20/02/2015</CreatedDate>
    <ClosedDate>23/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>736</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mattwar</FixedByID>
    <Title>Fix calculation for slot containing offset</Title>
    <Description>Fixes issue #605

Add logic to not return zero-length nodes, since they never contain their offset.
</Description>
    <CreatedDate>20/02/2015</CreatedDate>
    <ClosedDate>23/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>734</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>rchande</FixedByID>
    <Title>Show 'else' within Ifs within Elses</Title>
    <Description>When recommending "Else" we walk all the way up the tree to determine
if the position is nested inside an Else block. This means we don't
recommend "Else" inside an If block nested within an Else block. When
walking up the tree, we should stop at the If/ElseIf block.

Fixes #719.
</Description>
    <CreatedDate>20/02/2015</CreatedDate>
    <ClosedDate>26/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>731</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>DustinCampbell</FixedByID>
    <Title>Handle parenthesis expansion and simplification in C# interpolations</Title>
    <Description>In string interpolations, parentheses can't be removed if they surround
some expression that includes a : or :: token. Othewise, a parsing
ambuity will be introduced due to the : that delimits the format clause
(i.e. $"{number:x4}").

Fixes Issue #724.
</Description>
    <CreatedDate>20/02/2015</CreatedDate>
    <ClosedDate>20/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>729</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmeschter</FixedByID>
    <Title>Handle AssemblyResolve events when the requesting assembly is unknown</Title>
    <Description>Since we handle loading analyzer assemblies ourselves (to avoid locking
the file on disk and the need to shadow copy them) we must also hook the
AssemblyResolve event and handle finding and loading their dependencies.
Currently we only handle the event if the event arguments specify the
requesting assembly (via `ResolveEventArgs.RequestingAssembly`) and the
requesting assembly is known to us, i.e. we were responsible for loading
it.

Unfortunately `ResolveEventArgs.RequestingAssembly` is more of a hint
than anything else, and there are circumstances where it can be null. As
such we sometimes fail to load a dependency needed by an analyzer, and
it doesn't run.

The fix here is to attempt to load the assembly even when
`RequestingAssembly` is null. Instead of looking next to the requesting
assembly, we will look next to every assembly we have already loaded for
one with the correct identity, and load and return that.

Note that this change does _not_ attempt to deal with cross-platform issues;
i.e., how do we handle loading analyzer assemblies in CoreCLR. That will
come later.

Fixes #635.
</Description>
    <CreatedDate>20/02/2015</CreatedDate>
    <ClosedDate>24/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>712</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>DustinCampbell</FixedByID>
    <Title>Fix to VB pretty-listing of line continuation characters in interpolations</Title>
    <Description>The VB pretty-lister shouldn't remove line continuation characters after
the opening brace or before the closing brace of an interpolated string.
In addition, I found that the pretty-lister was greedily removing line
continuation characters in error conditions where a missing token was
inserted by the compiler to represent the list token of a statement.

Fixes Issue #710.
</Description>
    <CreatedDate>20/02/2015</CreatedDate>
    <ClosedDate>20/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>706</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>jasonmalinowski</FixedByID>
    <Title>Fix AsyncLazy CancellationToken handling</Title>
    <Description>Address several issues with AsyncLazy and it's handling of CancellationTokens. This addresses issue #447 and by extension Microsoft/TypeScript#2058.
</Description>
    <CreatedDate>20/02/2015</CreatedDate>
    <ClosedDate>21/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>697</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>basoundr</FixedByID>
    <Title>Format on Typing Colon For Switch Case Default and Labels</Title>
    <Description>Fixes #464 : Formatting should be triggered on typing colon only in the context of Switch cases, switch default and labelled statement
</Description>
    <CreatedDate>19/02/2015</CreatedDate>
    <ClosedDate>20/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>685</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmeschter</FixedByID>
    <Title>Check the CancellationToken in the DeclarePublicAPI analyzer</Title>
    <Description>Related to issue #610.

The DeclarePublicAPI analyzer loops over the set of AdditionalFiles
looking for one named "PublicAPI.txt", and later loops through all the
lines in that file. If there are a large number of AdditionalFiles, or
the file contains a large number of lines (which is certainly the case
for some of our projects) we may end up doing a lot of work even after
analysis has been cancelled.

This can happen during typing, where we may repeatedly cancel analysis
and start again as the user is typing. We can potentially end up with a
bunch of Tasks doing long-running but unnecessary work, consuming system
resources and making VS less responsive.

The fix here is to be aggressive about checking the CancellationToken
while in these loops.
</Description>
    <CreatedDate>19/02/2015</CreatedDate>
    <ClosedDate>19/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>683</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>dpoeschl</FixedByID>
    <Title>Prevent CodeActions commits during Inline Renames</Title>
    <Description>Fix #554: This fixes a crash that was caused by invoking a lightbulb
item that caused an Inline Rename session to launch when there's already
an inline rename session active. We now check for inline rename sessions
during lightbulb commit. If an inline rename session is active, we halt
the lightbulb commit and tell the user to complete their rename session.

This only prevents one (but probably the most frequent) manifestation of
a larger problem in which rename is trying to perform a series of
changes to the workspace that can be interrupted by some other feature
applying its changes to the workspace. This larger design problem is
tracked as #681.
</Description>
    <CreatedDate>19/02/2015</CreatedDate>
    <ClosedDate>19/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>680</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>mavasani</FixedByID>
    <Title>Fix a bug in AnalyzerManager.GetCompilationAnalysisScopeCoreAsync</Title>
    <Description>Fix a bug in AnalyzerManager.GetCompilationAnalysisScopeCoreAsync to use the GetOrAdd overload that takes a Func rather then value. This should avoid spawning multiple tasks to execute CompilationStartAction for an analyzer, and fix the VS responsiveness issues we have been seeing in #610 

@tmeschter @heejaechang @JohnHamby can you please take a look? 
I guess we should address #664 as soon as possible.
</Description>
    <CreatedDate>19/02/2015</CreatedDate>
    <ClosedDate>19/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
  <PullRequest>
    <IssueID>677</IssueID>
    <RepoID>roslyn</RepoID>
    <FixedByID>tmeschter</FixedByID>
    <Title>Fix a NullReferenceException in the DeclarePublicAPI analyzer</Title>
    <Description>Fixes #672.

Move the existing null check to the right location.
</Description>
    <CreatedDate>19/02/2015</CreatedDate>
    <ClosedDate>19/02/2015</ClosedDate>
    <Issues />
  </PullRequest>
</PullRequests>